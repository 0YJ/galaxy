<tool id="output_filter" name="output_filter" version="1.0.0">
    <description>test for output filtering and expect_num_outputs</description>
    <macros>
        <macro name="content_assertion">
            <assert_contents>
                <has_line line="test" />
            </assert_contents>
        </macro>
    </macros>
    
    <command><![CDATA[
echo 'test' > 1 &&
echo 'test' > 2 &&
echo 'test' > 3 &&
echo 'test' > 4 &&
echo 'test' > 5 &&
echo 'test' > p1.forward &&
echo 'test' > p1.reverse &&
echo 'test' > p2.forward &&
echo 'test' > p2.reverse
#if $produce_pair
    && echo 'test' > '$pair_output.forward'
    && echo 'test' > '$pair_output.reverse'
#end if
    ]]></command>
    <inputs>
        <param name="produce_out_1" type="boolean" truevalue="true" falsevalue="false" checked="False" label="Do Filter 1" />
        <param name="filter_text_1" type="text" value="1" />
        <param name="produce_collection" type="boolean" truevalue="true" falsevalue="false" checked="False" label="Collection Filter" />
        <param name="produce_paired_collection" type="boolean" truevalue="true" falsevalue="false" checked="False" label="List of Pairs Collection Filter" />
        <param name="produce_pair_explicit" type="boolean" truevalue="true" falsevalue="false" checked="False" label="Explicit Pair Filter" />
        <param name="produce_pair_discover" type="boolean" truevalue="true" falsevalue="false" checked="False" label="Discovered Pair Filter" />
    </inputs>
    <outputs>
        <data name="out_1" format="txt" from_work_dir="1">
            <filter>produce_out_1 is True</filter>
        </data>
        <data name="out_2" format="txt" from_work_dir="2">
            <filter>filter_text_1 in ["foo", "bar"]</filter>
            <!-- Must pass all filters... -->
            <filter>filter_text_1 == "foo"</filter>
        </data>
        <data name="out_3" format="txt" from_work_dir="3"/>

        <collection name="list_output" type="list" label="List">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;[45])" ext="txt" visible="true" />
            <filter>produce_collection is True</filter>
        </collection>
        <collection name="paired_list_output" type="list:paired" label="paired list">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;p[12])\.(?P&lt;identifier_1&gt;.*)" ext="txt" visible="true" />
            <filter>produce_paired_collection is True</filter>
        </collection>
        <collection name="pair_output_explicit" type="paired" label="paired">
            <data name="forward" format="txt" />
            <data name="reverse" format="txt" />
            <filter>produce_pair_explicit is True</filter>
        </collection>
        <collection name="pair_output_discover" type="paired" label="paired">
            <discover_datasets pattern="p1.(?P&lt;name&gt;.*)" ext="txt" visible="true" />
            <filter>produce_pair_discover is True</filter>
        </collection>
    </outputs>
    <tests>
	<!-- test simple outputs -->
        <test expect_num_outputs="3">
            <param name="produce_out_1" value="true" />
            <param name="filter_text_1" value="foo" />
            <output name="out_1">
                <expand macro="content_assertion"/>
            </output>
            <output name="out_2">
                <expand macro="content_assertion"/>
            </output>
            <output name="out_3">
                <expand macro="content_assertion"/>
            </output>
        </test>

        <test expect_num_outputs="2">
            <param name="produce_out_1" value="true" />
            <param name="filter_text_1" value="bar" /> <!-- fails second filter in out2 -->
            <output name="out_1">
                <expand macro="content_assertion"/>
            </output>
            <output name="out_3">
                <expand macro="content_assertion"/>
            </output>
        </test>

        <test expect_num_outputs="1">
            <param name="produce_out_1" value="false" />
            <param name="filter_text_1" value="not_foo_or_bar" />
            <output name="out_3">
                <expand macro="content_assertion"/>
            </output>
        </test>

        <test expect_num_outputs="4">
            <param name="produce_out_1" value="true" />
            <param name="filter_text_1" value="foo" />
            <param name="produce_collection" value="true" />
            <output name="out_1">
                <expand macro="content_assertion"/>
            </output>
            <output name="out_2">
                <expand macro="content_assertion"/>
            </output>
            <output name="out_3">
                <expand macro="content_assertion"/>
            </output>
            <output_collection name="list_output" type="list" count="2">
                <element name="4">
                    <expand macro="content_assertion"/>
                </element>
                <element name="5">
                    <expand macro="content_assertion"/>
                </element>
            </output_collection>
        </test>

        <test expect_num_outputs="5">
            <param name="produce_out_1" value="true" />
            <param name="filter_text_1" value="foo" />
            <param name="produce_collection" value="true" />
            <param name="produce_paired_collection" value="true" />
            <output name="out_1">
                <expand macro="content_assertion"/>
            </output>
            <output name="out_2">
                <expand macro="content_assertion"/>
            </output>
            <output name="out_3">
                <expand macro="content_assertion"/>
            </output>
            <output_collection name="list_output" type="list" count="2">
                <element name="4">
                    <expand macro="content_assertion"/>
                </element>
                <element name="5">
                    <expand macro="content_assertion"/>
                </element>
            </output_collection>
            <output_collection name="paired_list_output" type="list:paired" count="2">
                <element name="p1">
                    <element name="forward">
                        <expand macro="content_assertion"/>
                    </element>
                    <element name="reverse">
                        <expand macro="content_assertion"/>
                    </element>
                </element>
                <element name="p2">
                    <element name="forward">
                        <expand macro="content_assertion"/>
                    </element>
                    <element name="reverse">
                        <expand macro="content_assertion"/>
                    </element>
                </element>
            </output_collection>
        </test>

        <test expect_num_outputs="3">
            <param name="produce_out_1" value="true" />
            <param name="produce_pair_explicit" value="true" />
            <output name="out_1">
                <expand macro="content_assertion"/>
            </output>
            <output name="out_3">
                <expand macro="content_assertion"/>
            </output>
            <output_collection name="pair_output_explicit" type="paired" count="2">
                <element name="forward">
                    <expand macro="content_assertion"/>
                </element>
                <element name="reverse">
                    <expand macro="content_assertion"/>
                </element>
            </output_collection>
        </test>

        <test expect_num_outputs="3">
            <param name="produce_out_1" value="true" />
            <param name="produce_pair_discover" value="true" />
            <output name="out_1">
                <expand macro="content_assertion"/>
            </output>
            <output name="out_3">
                <expand macro="content_assertion"/>
            </output>
            <output_collection name="pair_output_discover" type="paired" count="2">
                <element name="forward">
                    <expand macro="content_assertion"/>
                </element>
                <element name="reverse">
                    <expand macro="content_assertion"/>
                </element>
            </output_collection>
        </test>
    </tests>
</tool>
