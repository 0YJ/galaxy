{"version":3,"sources":["galaxy.js"],"names":["GalaxyApp","options","bootstrapped","this","_init","_","Backbone","_addLogging2","default","NAMESPACE_KEY","DEBUGGING_KEY","localDebugging","localStorage","getItem","storageErr","console","log","_localization2","prototype","self","extend","Events","logger","debug","_processOptions","root","params","session_csrf_token","_initConfig","config","_patchGalaxy","window","Galaxy","loggerOptions","_initLocale","localize","_initUser","user","defaultOptions","defaults","hasOwnProperty","k","patchWith","patchExisting","_initLogger","consoleLogger","consoleLevel","_metricsLogger2","MetricsLogger","ALL","split","emit","map","i","data","arguments","Array","slice","call","_baseMvc2","LoggableMixin","consoleNamespaceWhitelist","_l","userJSON","_userModel2","lastAjax","ev","xhr","JSON","parse","err","href","url","debugging","setting","undefined","document","location","debuggingNamespaces","namespaces","csv","removeItem","setItem","newSettings","toString","get"],"mappings":"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","file":"../scripts/galaxy.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport userModel from \"mvc/user/user-model\";\nimport metricsLogger from \"utils/metrics-logger\";\nimport addLogging from \"utils/add-logging\";\nimport localize from \"utils/localization\";\n// TODO: move into a singleton pattern and have dependents import Galaxy\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp(options, bootstrapped) {\n    var self = this;\n    return self._init(options || {}, bootstrapped || {});\n}\n\n// add logging shortcuts for this object\naddLogging(GalaxyApp, \"GalaxyApp\");\n\n// a debug flag can be set via local storage and made available during script/page loading\nvar DEBUGGING_KEY = \"galaxy:debug\";\n\nvar NAMESPACE_KEY = `${DEBUGGING_KEY}:namespaces`;\nvar localDebugging = false;\ntry {\n    localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n} catch (storageErr) {\n    console.log(\n        localize(\"localStorage not available for debug flag retrieval\")\n    );\n}\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init(options, bootstrapped) {\n    var self = this;\n    _.extend(self, Backbone.Events);\n    if (localDebugging) {\n        self.logger = console;\n        console.debug(\n            \"debugging galaxy:\",\n            \"options:\",\n            options,\n            \"bootstrapped:\",\n            bootstrapped\n        );\n    }\n\n    self._processOptions(options);\n\n    // add root and url parameters\n    self.root = options.root || \"/\";\n    self.params = options.params || {};\n    self.session_csrf_token = options.session_csrf_token || null;\n\n    self._initConfig(options.config || {});\n    self._patchGalaxy(window.Galaxy);\n\n    self._initLogger(self.options.loggerOptions || {});\n    // at this point, either logging or not and namespaces are enabled - chat it up\n    self.debug(\"GalaxyApp.options: \", self.options);\n    self.debug(\"GalaxyApp.config: \", self.config);\n    self.debug(\"GalaxyApp.logger: \", self.logger);\n\n    self._initLocale();\n    self.debug(\"GalaxyApp.localize: \", self.localize);\n\n    self.config = options.config || {};\n    self.debug(\"GalaxyApp.config: \", self.config);\n\n    self._initUser(options.user || {});\n    self.debug(\"GalaxyApp.user: \", self.user);\n\n    self._setUpListeners();\n    self.trigger(\"ready\", self);\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting: true,\n    /** root url of this app */\n    root: \"/\",\n    session_csrf_token: null\n};\n\n/** filter to options present in defaultOptions (and default to them) */\nGalaxyApp.prototype._processOptions = function _processOptions(options) {\n    var self = this;\n    var defaults = self.defaultOptions;\n\n    self.options = {};\n    for (var k in defaults) {\n        if (defaults.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k)\n                ? options[k]\n                : defaults[k];\n        }\n    }\n    return self;\n};\n\n/** parse the config and any extra info derived from it */\nGalaxyApp.prototype._initConfig = function _initConfig(config) {\n    var self = this;\n    self.config = config;\n\n    // give precendence to localdebugging for this setting\n    self.config.debug = localDebugging || self.config.debug;\n\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if (self.options.patchExisting && patchWith) {\n        // self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for (var k in patchWith) {\n            if (patchWith.hasOwnProperty(k)) {\n                // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                self[k] = patchWith[k];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n    var self = this;\n\n    // default to console logging at the debug level if the debug flag is set\n    if (self.config.debug) {\n        loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n        loggerOptions.consoleLevel =\n            loggerOptions.consoleLevel || metricsLogger.MetricsLogger.ALL;\n        // load any logging namespaces from localStorage if we can\n        try {\n            loggerOptions.consoleNamespaceWhitelist = localStorage\n                .getItem(NAMESPACE_KEY)\n                .split(\",\");\n        } catch (storageErr) {}\n    }\n\n    self.logger = new metricsLogger.MetricsLogger(loggerOptions);\n    self.emit = {};\n    [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(i => {\n        self.emit[i] = function(data) {\n            self.logger.emit(\n                i,\n                arguments[0],\n                Array.prototype.slice.call(arguments, 1)\n            );\n        };\n    });\n\n    if (self.config.debug) {\n        // add this logger to mvc's loggable mixin so that all models can use the logger\n        BASE_MVC.LoggableMixin.logger = self.logger;\n    }\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale(options) {\n    var self = this;\n    self.debug(\"_initLocale:\", options);\n    self.localize = localize;\n    // add to window as global shortened alias\n    // TODO: temporary - remove when can require for plugins\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser(userJSON) {\n    var self = this;\n    self.debug(\"_initUser:\", userJSON);\n    self.user = new userModel.User(userJSON);\n    self.user.logger = self.logger;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $(document).bind(\"ajaxSend\", (ev, xhr, options) => {\n        var data = options.data;\n        try {\n            data = JSON.parse(data);\n        } catch (err) {}\n\n        self.lastAjax = {\n            url: location.href.slice(0, -1) + options.url,\n            data: data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\nGalaxyApp.prototype.debugging = function _debugging(setting) {\n    var self = this;\n    try {\n        if (setting === undefined) {\n            return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n        }\n        if (setting) {\n            localStorage.setItem(DEBUGGING_KEY, true);\n            return true;\n        }\n\n        localStorage.removeItem(DEBUGGING_KEY);\n        // also remove all namespaces\n        self.debuggingNamespaces(null);\n    } catch (storageErr) {\n        console.log(\n            localize(\"localStorage not available for debug flag retrieval\")\n        );\n    }\n    return false;\n};\n\n/** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\nGalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(\n    namespaces\n) {\n    var self = this;\n    try {\n        if (namespaces === undefined) {\n            var csv = localStorage.getItem(NAMESPACE_KEY);\n            return typeof csv === \"string\" ? csv.split(\",\") : [];\n        } else if (namespaces === null) {\n            localStorage.removeItem(NAMESPACE_KEY);\n        } else {\n            localStorage.setItem(NAMESPACE_KEY, namespaces);\n        }\n        var newSettings = self.debuggingNamespaces();\n        if (self.logger) {\n            self.logger.options.consoleNamespaceWhitelist = newSettings;\n        }\n        return newSettings;\n    } catch (storageErr) {\n        console.log(\n            localize(\"localStorage not available for debug namespace retrieval\")\n        );\n    }\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString() {\n    var userEmail = this.user\n        ? this.user.get(\"email\") || \"(anonymous)\"\n        : \"uninitialized\";\n    return `GalaxyApp(${userEmail})`;\n};\n\n// ============================================================================\nexport default {\n    GalaxyApp: GalaxyApp\n};\n"]}