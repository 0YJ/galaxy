{"version":3,"sources":["galaxy.js"],"names":["define","_","Backbone","BASE_MVC","userModel","metricsLogger","addLogging","localize","GalaxyApp","options","bootstrapped","this","_init","NAMESPACE_KEY","DEBUGGING_KEY","localDebugging","localStorage","getItem","storageErr","console","log","prototype","self","extend","Events","logger","debug","_processOptions","root","_initConfig","config","_patchGalaxy","window","Galaxy","_initLogger","loggerOptions","_initLocale","_initUser","user","_setUpListeners","trigger","defaultOptions","patchExisting","defaults","k","hasOwnProperty","patchWith","consoleLogger","consoleLevel","MetricsLogger","ALL","consoleNamespaceWhitelist","split","emit","map","i","data","arguments","Array","slice","call","LoggableMixin","_l","userJSON","User","lastAjax","$","document","bind","ev","xhr","JSON","parse","err","url","location","href","debugging","setting","undefined","setItem","removeItem","debuggingNamespaces","namespaces","csv","newSettings","toString","get"],"mappings":"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","file":"../scripts/galaxy.js","sourcesContent":["define([\n    'libs/underscore',\n    'libs/backbone',\n    'mvc/base-mvc',\n    'mvc/user/user-model',\n    'utils/metrics-logger',\n    'utils/add-logging',\n    'utils/localization'\n], function( _, Backbone, BASE_MVC, userModel, metricsLogger, addLogging, localize ){\n\n// TODO: move into a singleton pattern and have dependents import Galaxy\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp( options, bootstrapped ){\n    var self = this;\n    return self._init( options || {}, bootstrapped || {} );\n}\n\n// add logging shortcuts for this object\naddLogging( GalaxyApp, 'GalaxyApp' );\n\n// a debug flag can be set via local storage and made available during script/page loading\nvar DEBUGGING_KEY = 'galaxy:debug',\n    NAMESPACE_KEY = DEBUGGING_KEY + ':namespaces',\n    localDebugging = false;\ntry {\n    localDebugging = localStorage.getItem( DEBUGGING_KEY ) == 'true';\n} catch( storageErr ){\n    console.log( localize( 'localStorage not available for debug flag retrieval' ) );\n}\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init( options, bootstrapped ){\n    var self = this;\n    _.extend( self, Backbone.Events );\n    if( localDebugging ){\n        self.logger = console;\n        console.debug( 'debugging galaxy:', 'options:', options, 'bootstrapped:', bootstrapped );\n    }\n\n    self._processOptions( options );\n    // special case for root\n    self.root = options.root || '/';\n\n    self._initConfig( options.config || {} );\n    self._patchGalaxy( window.Galaxy );\n\n    self._initLogger( self.options.loggerOptions || {} );\n    // at this point, either logging or not and namespaces are enabled - chat it up\n    self.debug( 'GalaxyApp.options: ', self.options );\n    self.debug( 'GalaxyApp.config: ', self.config );\n    self.debug( 'GalaxyApp.logger: ', self.logger );\n\n    self._initLocale();\n    self.debug( 'GalaxyApp.localize: ', self.localize );\n\n    self.config = options.config || {};\n    self.debug( 'GalaxyApp.config: ', self.config );\n\n    self._initUser( options.user || {} );\n    self.debug( 'GalaxyApp.user: ', self.user );\n\n    self._setUpListeners();\n    self.trigger( 'ready', self );\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting   : true,\n    /** root url of this app */\n    root            : '/'\n};\n\n/** filter to options present in defaultOptions (and default to them) */\nGalaxyApp.prototype._processOptions = function _processOptions( options ){\n    var self = this,\n        defaults = self.defaultOptions;\n\n    self.options = {};\n    for( var k in defaults ){\n        if( defaults.hasOwnProperty( k ) ){\n            self.options[ k ] = ( options.hasOwnProperty( k ) )?( options[ k ] ):( defaults[ k ] );\n        }\n    }\n    return self;\n};\n\n/** parse the config and any extra info derived from it */\nGalaxyApp.prototype._initConfig = function _initConfig( config ){\n    var self = this;\n    self.config = config;\n\n    // give precendence to localdebugging for this setting\n    self.config.debug = localDebugging || self.config.debug;\n\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy( patchWith ){\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if( self.options.patchExisting && patchWith ){\n        // self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for( var k in patchWith ){\n            if( patchWith.hasOwnProperty( k ) ){\n                // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                self[ k ] = patchWith[ k ];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger( loggerOptions ){\n    var self = this;\n\n    // default to console logging at the debug level if the debug flag is set\n    if( self.config.debug ){\n        loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n        loggerOptions.consoleLevel = loggerOptions.consoleLevel || metricsLogger.MetricsLogger.ALL;\n        // load any logging namespaces from localStorage if we can\n        try {\n            loggerOptions.consoleNamespaceWhitelist = localStorage.getItem( NAMESPACE_KEY ).split( ',' );\n        } catch( storageErr ){}\n    }\n\n    self.logger = new metricsLogger.MetricsLogger( loggerOptions );\n    self.emit = {};\n    [ 'log', 'debug', 'info', 'warn', 'error', 'metric' ].map(function( i ) {\n        self.emit[ i ] = function( data ){\n            self.logger.emit( i, arguments[ 0 ], Array.prototype.slice.call( arguments, 1 ) );\n        };\n    });\n\n    if( self.config.debug ){\n        // add this logger to mvc's loggable mixin so that all models can use the logger\n        BASE_MVC.LoggableMixin.logger = self.logger;\n    }\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale( options ){\n    var self = this;\n    self.debug( '_initLocale:', options );\n    self.localize = localize;\n    // add to window as global shortened alias\n    // TODO: temporary - remove when can require for plugins\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser( userJSON ){\n    var self = this;\n    self.debug( '_initUser:', userJSON );\n    self.user = new userModel.User( userJSON );\n    self.user.logger = self.logger;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners(){\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $( document ).bind( 'ajaxSend', function( ev, xhr, options ){\n        var data = options.data;\n        try {\n            data = JSON.parse( data );\n        } catch( err ){}\n\n        self.lastAjax = {\n            url     : location.href.slice( 0, -1 ) + options.url,\n            data    : data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\nGalaxyApp.prototype.debugging = function _debugging( setting ){\n    var self = this;\n    try {\n        if( setting === undefined ){\n            return localStorage.getItem( DEBUGGING_KEY ) === 'true';\n        }\n        if( setting ){\n            localStorage.setItem( DEBUGGING_KEY, true );\n            return true;\n        }\n\n        localStorage.removeItem( DEBUGGING_KEY );\n        // also remove all namespaces\n        self.debuggingNamespaces( null );\n\n    } catch( storageErr ){\n        console.log( localize( 'localStorage not available for debug flag retrieval' ) );\n    }\n    return false;\n};\n\n/** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\nGalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces( namespaces ){\n    var self = this;\n    try {\n        if( namespaces === undefined ){\n            var csv = localStorage.getItem( NAMESPACE_KEY );\n            return typeof( csv ) === 'string'? csv.split( ',' ) : [];\n        } else if( namespaces === null ) {\n            localStorage.removeItem( NAMESPACE_KEY );\n        } else {\n            localStorage.setItem( NAMESPACE_KEY, namespaces );\n        }\n        var newSettings = self.debuggingNamespaces();\n        if( self.logger ){\n            self.logger.options.consoleNamespaceWhitelist = newSettings;\n        }\n        return newSettings;\n    } catch( storageErr ){\n        console.log( localize( 'localStorage not available for debug namespace retrieval' ) );\n    }\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString(){\n    var userEmail = this.user? ( this.user.get( 'email' ) || '(anonymous)' ) : 'uninitialized';\n    return 'GalaxyApp(' + userEmail + ')';\n};\n\n// ============================================================================\n    return {\n        GalaxyApp : GalaxyApp\n    };\n});\n"]}