{"version":3,"sources":["galaxy.js"],"names":["define","_","Backbone","BASE_MVC","userModel","metricsLogger","addLogging","localize","GalaxyApp","bootstrapped","this","_init","options","console","NAMESPACE_KEY","DEBUGGING_KEY","localDebugging","prototype","getItem","storageErr","extend","self","patchExisting","_processOptions","root","debug","config","window","Galaxy","_initLocale","loggerOptions","user","_setUpListeners","trigger","_initUser","defaultOptions","defaults","hasOwnProperty","k","_initConfig","_patchGalaxy","patchWith","consoleLevel","consoleLogger","MetricsLogger","ALL","consoleNamespaceWhitelist","localStorage","split","emit","logger","map","i","data","LoggableMixin","slice","call","arguments","_l","userJSON","$","document","bind","lastAjax","ev","xhr","url","location","JSON","parse","err","href","setting","undefined","debuggingNamespaces","removeItem","log","namespaces","newSettings","csv","userEmail","get"],"mappings":"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","file":"../scripts/galaxy.js","sourcesContent":["define([\n    'libs/underscore',\n    'libs/backbone',\n    'mvc/base-mvc',\n    'mvc/user/user-model',\n    'utils/metrics-logger',\n    'utils/add-logging',\n    'utils/localization'\n], function( _, Backbone, BASE_MVC, userModel, metricsLogger, addLogging, localize ){\n\n// TODO: move into a singleton pattern and have dependents import Galaxy\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp( options, bootstrapped ){\n    var self = this;\n    return self._init( options || {}, bootstrapped || {} );\n}\n\n// add logging shortcuts for this object\naddLogging( GalaxyApp, 'GalaxyApp' );\n\n// a debug flag can be set via local storage and made available during script/page loading\nvar DEBUGGING_KEY = 'galaxy:debug',\n    NAMESPACE_KEY = DEBUGGING_KEY + ':namespaces',\n    localDebugging = false;\ntry {\n    localDebugging = localStorage.getItem( DEBUGGING_KEY ) == 'true';\n} catch( storageErr ){\n    console.log( localize( 'localStorage not available for debug flag retrieval' ) );\n}\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init( options, bootstrapped ){\n    var self = this;\n    _.extend( self, Backbone.Events );\n    if( localDebugging ){\n        self.logger = console;\n        console.debug( 'debugging galaxy:', 'options:', options, 'bootstrapped:', bootstrapped );\n    }\n\n    self._processOptions( options );\n    // special case for root\n    self.root = options.root || '/';\n\n    self._initConfig( options.config || {} );\n    self._patchGalaxy( window.Galaxy );\n\n    self._initLogger( self.options.loggerOptions || {} );\n    // at this point, either logging or not and namespaces are enabled - chat it up\n    self.debug( 'GalaxyApp.options: ', self.options );\n    self.debug( 'GalaxyApp.config: ', self.config );\n    self.debug( 'GalaxyApp.logger: ', self.logger );\n\n    self._initLocale();\n    self.debug( 'GalaxyApp.localize: ', self.localize );\n\n    self.config = options.config || {};\n    self.debug( 'GalaxyApp.config: ', self.config );\n\n    self._initUser( options.user || {} );\n    self.debug( 'GalaxyApp.user: ', self.user );\n\n    self._setUpListeners();\n    self.trigger( 'ready', self );\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting   : true,\n    /** root url of this app */\n    root            : '/'\n};\n\n/** filter to options present in defaultOptions (and default to them) */\nGalaxyApp.prototype._processOptions = function _processOptions( options ){\n    var self = this,\n        defaults = self.defaultOptions;\n\n    self.options = {};\n    for( var k in defaults ){\n        if( defaults.hasOwnProperty( k ) ){\n            self.options[ k ] = ( options.hasOwnProperty( k ) )?( options[ k ] ):( defaults[ k ] );\n        }\n    }\n    return self;\n};\n\n/** parse the config and any extra info derived from it */\nGalaxyApp.prototype._initConfig = function _initConfig( config ){\n    var self = this;\n    self.config = config;\n\n    // give precendence to localdebugging for this setting\n    self.config.debug = localDebugging || self.config.debug;\n\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy( patchWith ){\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if( self.options.patchExisting && patchWith ){\n        // self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for( var k in patchWith ){\n            if( patchWith.hasOwnProperty( k ) ){\n                // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                self[ k ] = patchWith[ k ];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger( loggerOptions ){\n    var self = this;\n\n    // default to console logging at the debug level if the debug flag is set\n    if( self.config.debug ){\n        loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n        loggerOptions.consoleLevel = loggerOptions.consoleLevel || metricsLogger.MetricsLogger.ALL;\n        // load any logging namespaces from localStorage if we can\n        try {\n            loggerOptions.consoleNamespaceWhitelist = localStorage.getItem( NAMESPACE_KEY ).split( ',' );\n        } catch( storageErr ){}\n    }\n\n    self.logger = new metricsLogger.MetricsLogger( loggerOptions );\n    self.emit = {};\n    [ 'log', 'debug', 'info', 'warn', 'error', 'metric' ].map(function( i ) {\n        self.emit[ i ] = function( data ){\n            self.logger.emit( i, arguments[ 0 ], Array.prototype.slice.call( arguments, 1 ) );\n        };\n    });\n\n    if( self.config.debug ){\n        // add this logger to mvc's loggable mixin so that all models can use the logger\n        BASE_MVC.LoggableMixin.logger = self.logger;\n    }\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale( options ){\n    var self = this;\n    self.debug( '_initLocale:', options );\n    self.localize = localize;\n    // add to window as global shortened alias\n    // TODO: temporary - remove when can require for plugins\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser( userJSON ){\n    var self = this;\n    self.debug( '_initUser:', userJSON );\n    self.user = new userModel.User( userJSON );\n    self.user.logger = self.logger;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners(){\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $( document ).bind( 'ajaxSend', function( ev, xhr, options ){\n        var data = options.data;\n        try {\n            data = JSON.parse( data );\n        } catch( err ){}\n\n        self.lastAjax = {\n            url     : location.href.slice( 0, -1 ) + options.url,\n            data    : data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\nGalaxyApp.prototype.debugging = function _debugging( setting ){\n    var self = this;\n    try {\n        if( setting === undefined ){\n            return localStorage.getItem( DEBUGGING_KEY ) === 'true';\n        }\n        if( setting ){\n            localStorage.setItem( DEBUGGING_KEY, true );\n            return true;\n        }\n\n        localStorage.removeItem( DEBUGGING_KEY );\n        // also remove all namespaces\n        self.debuggingNamespaces( null );\n\n    } catch( storageErr ){\n        console.log( localize( 'localStorage not available for debug flag retrieval' ) );\n    }\n    return false;\n};\n\n/** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\nGalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces( namespaces ){\n    var self = this;\n    try {\n        if( namespaces === undefined ){\n            var csv = localStorage.getItem( NAMESPACE_KEY );\n            return typeof( csv ) === 'string'? csv.split( ',' ) : [];\n        } else if( namespaces === null ) {\n            localStorage.removeItem( NAMESPACE_KEY );\n        } else {\n            localStorage.setItem( NAMESPACE_KEY, namespaces );\n        }\n        var newSettings = self.debuggingNamespaces();\n        if( self.logger ){\n            self.logger.options.consoleNamespaceWhitelist = newSettings;\n        }\n        return newSettings;\n    } catch( storageErr ){\n        console.log( localize( 'localStorage not available for debug namespace retrieval' ) );\n    }\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString(){\n    var userEmail = this.user? ( this.user.get( 'email' ) || '(anonymous)' ) : 'uninitialized';\n    return 'GalaxyApp(' + userEmail + ')';\n};\n\n// ============================================================================\n    return {\n        GalaxyApp : GalaxyApp\n    };\n});\n"]}