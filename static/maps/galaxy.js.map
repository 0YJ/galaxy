{"version":3,"sources":["galaxy.js"],"names":["define","_","Backbone","BASE_MVC","userModel","metricsLogger","addLogging","localize","console","bootstrapped","this","_init","options","extend","NAMESPACE_KEY","DEBUGGING_KEY","localDebugging","self","localStorage","getItem","debug","storageErr","root","GalaxyApp","prototype","_initLogger","Events","_initLocale","config","trigger","params","session_csrf_token","_initConfig","_patchGalaxy","window","Galaxy","loggerOptions","logger","defaults","defaultOptions","user","_processOptions","k","hasOwnProperty","patchWith","patchExisting","MetricsLogger","consoleLogger","consoleLevel","_l","ALL","consoleNamespaceWhitelist","_initUser","split","data","emit","map","i","arguments","lastAjax","slice","call","userJSON","User","removeItem","_setUpListeners","$","document","bind","ev","xhr","JSON","parse","namespaces","undefined","url","csv","setting","newSettings","setItem","userEmail","debuggingNamespaces","log","toString","get"],"mappings":"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","file":"../scripts/galaxy.js","sourcesContent":["define(\n    [\n        \"libs/underscore\",\n        \"libs/backbone\",\n        \"mvc/base-mvc\",\n        \"mvc/user/user-model\",\n        \"utils/metrics-logger\",\n        \"utils/add-logging\",\n        \"utils/localization\"\n    ],\n    function(\n        _,\n        Backbone,\n        BASE_MVC,\n        userModel,\n        metricsLogger,\n        addLogging,\n        localize\n    ) {\n        // TODO: move into a singleton pattern and have dependents import Galaxy\n        // ============================================================================\n        /** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\n        function GalaxyApp(options, bootstrapped) {\n            var self = this;\n            return self._init(options || {}, bootstrapped || {});\n        }\n\n        // add logging shortcuts for this object\n        addLogging(GalaxyApp, \"GalaxyApp\");\n\n        // a debug flag can be set via local storage and made available during script/page loading\n        var DEBUGGING_KEY = \"galaxy:debug\",\n            NAMESPACE_KEY = DEBUGGING_KEY + \":namespaces\",\n            localDebugging = false;\n        try {\n            localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n        } catch (storageErr) {\n            console.log(\n                localize(\"localStorage not available for debug flag retrieval\")\n            );\n        }\n\n        /** initalize options and sub-components */\n        GalaxyApp.prototype._init = function __init(options, bootstrapped) {\n            var self = this;\n            _.extend(self, Backbone.Events);\n            if (localDebugging) {\n                self.logger = console;\n                console.debug(\n                    \"debugging galaxy:\",\n                    \"options:\",\n                    options,\n                    \"bootstrapped:\",\n                    bootstrapped\n                );\n            }\n\n            self._processOptions(options);\n\n            // add root and url parameters\n            self.root = options.root || \"/\";\n            self.params = options.params || {};\n            self.session_csrf_token = options.session_csrf_token || null;\n\n            self._initConfig(options.config || {});\n            self._patchGalaxy(window.Galaxy);\n\n            self._initLogger(self.options.loggerOptions || {});\n            // at this point, either logging or not and namespaces are enabled - chat it up\n            self.debug(\"GalaxyApp.options: \", self.options);\n            self.debug(\"GalaxyApp.config: \", self.config);\n            self.debug(\"GalaxyApp.logger: \", self.logger);\n\n            self._initLocale();\n            self.debug(\"GalaxyApp.localize: \", self.localize);\n\n            self.config = options.config || {};\n            self.debug(\"GalaxyApp.config: \", self.config);\n\n            self._initUser(options.user || {});\n            self.debug(\"GalaxyApp.user: \", self.user);\n\n            self._setUpListeners();\n            self.trigger(\"ready\", self);\n\n            return self;\n        };\n\n        /** default options */\n        GalaxyApp.prototype.defaultOptions = {\n            /** monkey patch attributes from existing window.Galaxy object? */\n            patchExisting: true,\n            /** root url of this app */\n            root: \"/\",\n            session_csrf_token: null\n        };\n\n        /** filter to options present in defaultOptions (and default to them) */\n        GalaxyApp.prototype._processOptions = function _processOptions(\n            options\n        ) {\n            var self = this,\n                defaults = self.defaultOptions;\n\n            self.options = {};\n            for (var k in defaults) {\n                if (defaults.hasOwnProperty(k)) {\n                    self.options[k] = options.hasOwnProperty(k)\n                        ? options[k]\n                        : defaults[k];\n                }\n            }\n            return self;\n        };\n\n        /** parse the config and any extra info derived from it */\n        GalaxyApp.prototype._initConfig = function _initConfig(config) {\n            var self = this;\n            self.config = config;\n\n            // give precendence to localdebugging for this setting\n            self.config.debug = localDebugging || self.config.debug;\n\n            return self;\n        };\n\n        /** add an option from options if the key matches an option in defaultOptions */\n        GalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n            var self = this;\n            // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n            if (self.options.patchExisting && patchWith) {\n                // self.debug( 'found existing Galaxy object:', patchWith );\n                // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n                //TODO: move those attributes to more formal assignment in GalaxyApp\n                for (var k in patchWith) {\n                    if (patchWith.hasOwnProperty(k)) {\n                        // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                        self[k] = patchWith[k];\n                    }\n                }\n            }\n        };\n\n        /** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\n        GalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n            var self = this;\n\n            // default to console logging at the debug level if the debug flag is set\n            if (self.config.debug) {\n                loggerOptions.consoleLogger =\n                    loggerOptions.consoleLogger || console;\n                loggerOptions.consoleLevel =\n                    loggerOptions.consoleLevel ||\n                    metricsLogger.MetricsLogger.ALL;\n                // load any logging namespaces from localStorage if we can\n                try {\n                    loggerOptions.consoleNamespaceWhitelist = localStorage\n                        .getItem(NAMESPACE_KEY)\n                        .split(\",\");\n                } catch (storageErr) {}\n            }\n\n            self.logger = new metricsLogger.MetricsLogger(loggerOptions);\n            self.emit = {};\n            [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(function(\n                i\n            ) {\n                self.emit[i] = function(data) {\n                    self.logger.emit(\n                        i,\n                        arguments[0],\n                        Array.prototype.slice.call(arguments, 1)\n                    );\n                };\n            });\n\n            if (self.config.debug) {\n                // add this logger to mvc's loggable mixin so that all models can use the logger\n                BASE_MVC.LoggableMixin.logger = self.logger;\n            }\n            return self;\n        };\n\n        /** add the localize fn to this object and the window namespace (as '_l') */\n        GalaxyApp.prototype._initLocale = function _initLocale(options) {\n            var self = this;\n            self.debug(\"_initLocale:\", options);\n            self.localize = localize;\n            // add to window as global shortened alias\n            // TODO: temporary - remove when can require for plugins\n            window._l = self.localize;\n            return self;\n        };\n\n        /** set up the current user as a Backbone model (mvc/user/user-model) */\n        GalaxyApp.prototype._initUser = function _initUser(userJSON) {\n            var self = this;\n            self.debug(\"_initUser:\", userJSON);\n            self.user = new userModel.User(userJSON);\n            self.user.logger = self.logger;\n            return self;\n        };\n\n        /** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\n        GalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n            var self = this;\n\n            // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n            /** cached info about the last ajax call made through jQuery */\n            self.lastAjax = {};\n            $(document).bind(\"ajaxSend\", function(ev, xhr, options) {\n                var data = options.data;\n                try {\n                    data = JSON.parse(data);\n                } catch (err) {}\n\n                self.lastAjax = {\n                    url: location.href.slice(0, -1) + options.url,\n                    data: data\n                };\n                //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n            });\n            return self;\n        };\n\n        /** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\n        GalaxyApp.prototype.debugging = function _debugging(setting) {\n            var self = this;\n            try {\n                if (setting === undefined) {\n                    return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n                }\n                if (setting) {\n                    localStorage.setItem(DEBUGGING_KEY, true);\n                    return true;\n                }\n\n                localStorage.removeItem(DEBUGGING_KEY);\n                // also remove all namespaces\n                self.debuggingNamespaces(null);\n            } catch (storageErr) {\n                console.log(\n                    localize(\n                        \"localStorage not available for debug flag retrieval\"\n                    )\n                );\n            }\n            return false;\n        };\n\n        /** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\n        GalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(\n            namespaces\n        ) {\n            var self = this;\n            try {\n                if (namespaces === undefined) {\n                    var csv = localStorage.getItem(NAMESPACE_KEY);\n                    return typeof csv === \"string\" ? csv.split(\",\") : [];\n                } else if (namespaces === null) {\n                    localStorage.removeItem(NAMESPACE_KEY);\n                } else {\n                    localStorage.setItem(NAMESPACE_KEY, namespaces);\n                }\n                var newSettings = self.debuggingNamespaces();\n                if (self.logger) {\n                    self.logger.options.consoleNamespaceWhitelist = newSettings;\n                }\n                return newSettings;\n            } catch (storageErr) {\n                console.log(\n                    localize(\n                        \"localStorage not available for debug namespace retrieval\"\n                    )\n                );\n            }\n        };\n\n        /** string rep */\n        GalaxyApp.prototype.toString = function toString() {\n            var userEmail = this.user\n                ? this.user.get(\"email\") || \"(anonymous)\"\n                : \"uninitialized\";\n            return \"GalaxyApp(\" + userEmail + \")\";\n        };\n\n        // ============================================================================\n        return {\n            GalaxyApp: GalaxyApp\n        };\n    }\n);\n"]}