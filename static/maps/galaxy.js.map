{"version":3,"sources":["galaxy.js"],"names":["GalaxyApp","options","bootstrapped","this","_init","_addLogging2","default","NAMESPACE_KEY","DEBUGGING_KEY","localDebugging","localStorage","getItem","storageErr","console","log","_localization2","prototype","self","_underscore2","extend","_backbone2","Events","logger","debug","root","session_csrf_token","_initConfig","config","_initLogger","loggerOptions","_processOptions","_patchGalaxy","Galaxy","user","defaultOptions","_initUser","_setUpListeners","defaults","patchExisting","hasOwnProperty","k","patchWith","consoleLogger","consoleLevel","_metricsLogger2","MetricsLogger","ALL","split","emit","map","i","consoleNamespaceWhitelist","arguments","slice","call","_baseMvc2","LoggableMixin","_initLocale","localize","userJSON","lastAjax","$","document","bind","ev","xhr","data","JSON","parse","url","location","href","debugging","setting","removeItem","debuggingNamespaces","namespaces","csv","setItem","newSettings","toString","get"],"mappings":"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","file":"../scripts/galaxy.js","sourcesContent":["import _ from \"libs/underscore\";\nimport Backbone from \"libs/backbone\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport userModel from \"mvc/user/user-model\";\nimport metricsLogger from \"utils/metrics-logger\";\nimport addLogging from \"utils/add-logging\";\nimport localize from \"utils/localization\";\n// TODO: move into a singleton pattern and have dependents import Galaxy\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp(options, bootstrapped) {\n    var self = this;\n    return self._init(options || {}, bootstrapped || {});\n}\n\n// add logging shortcuts for this object\naddLogging(GalaxyApp, \"GalaxyApp\");\n\n// a debug flag can be set via local storage and made available during script/page loading\nvar DEBUGGING_KEY = \"galaxy:debug\",\n    NAMESPACE_KEY = DEBUGGING_KEY + \":namespaces\",\n    localDebugging = false;\ntry {\n    localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n} catch (storageErr) {\n    console.log(\n        localize(\"localStorage not available for debug flag retrieval\")\n    );\n}\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init(options, bootstrapped) {\n    var self = this;\n    _.extend(self, Backbone.Events);\n    if (localDebugging) {\n        self.logger = console;\n        console.debug(\n            \"debugging galaxy:\",\n            \"options:\",\n            options,\n            \"bootstrapped:\",\n            bootstrapped\n        );\n    }\n\n    self._processOptions(options);\n\n    // add root and url parameters\n    self.root = options.root || \"/\";\n    self.params = options.params || {};\n    self.session_csrf_token = options.session_csrf_token || null;\n\n    self._initConfig(options.config || {});\n    self._patchGalaxy(window.Galaxy);\n\n    self._initLogger(self.options.loggerOptions || {});\n    // at this point, either logging or not and namespaces are enabled - chat it up\n    self.debug(\"GalaxyApp.options: \", self.options);\n    self.debug(\"GalaxyApp.config: \", self.config);\n    self.debug(\"GalaxyApp.logger: \", self.logger);\n\n    self._initLocale();\n    self.debug(\"GalaxyApp.localize: \", self.localize);\n\n    self.config = options.config || {};\n    self.debug(\"GalaxyApp.config: \", self.config);\n\n    self._initUser(options.user || {});\n    self.debug(\"GalaxyApp.user: \", self.user);\n\n    self._setUpListeners();\n    self.trigger(\"ready\", self);\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting: true,\n    /** root url of this app */\n    root: \"/\",\n    session_csrf_token: null\n};\n\n/** filter to options present in defaultOptions (and default to them) */\nGalaxyApp.prototype._processOptions = function _processOptions(options) {\n    var self = this,\n        defaults = self.defaultOptions;\n\n    self.options = {};\n    for (var k in defaults) {\n        if (defaults.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k)\n                ? options[k]\n                : defaults[k];\n        }\n    }\n    return self;\n};\n\n/** parse the config and any extra info derived from it */\nGalaxyApp.prototype._initConfig = function _initConfig(config) {\n    var self = this;\n    self.config = config;\n\n    // give precendence to localdebugging for this setting\n    self.config.debug = localDebugging || self.config.debug;\n\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if (self.options.patchExisting && patchWith) {\n        // self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for (var k in patchWith) {\n            if (patchWith.hasOwnProperty(k)) {\n                // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                self[k] = patchWith[k];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n    var self = this;\n\n    // default to console logging at the debug level if the debug flag is set\n    if (self.config.debug) {\n        loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n        loggerOptions.consoleLevel =\n            loggerOptions.consoleLevel || metricsLogger.MetricsLogger.ALL;\n        // load any logging namespaces from localStorage if we can\n        try {\n            loggerOptions.consoleNamespaceWhitelist = localStorage\n                .getItem(NAMESPACE_KEY)\n                .split(\",\");\n        } catch (storageErr) {}\n    }\n\n    self.logger = new metricsLogger.MetricsLogger(loggerOptions);\n    self.emit = {};\n    [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(function(i) {\n        self.emit[i] = function(data) {\n            self.logger.emit(\n                i,\n                arguments[0],\n                Array.prototype.slice.call(arguments, 1)\n            );\n        };\n    });\n\n    if (self.config.debug) {\n        // add this logger to mvc's loggable mixin so that all models can use the logger\n        BASE_MVC.LoggableMixin.logger = self.logger;\n    }\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale(options) {\n    var self = this;\n    self.debug(\"_initLocale:\", options);\n    self.localize = localize;\n    // add to window as global shortened alias\n    // TODO: temporary - remove when can require for plugins\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser(userJSON) {\n    var self = this;\n    self.debug(\"_initUser:\", userJSON);\n    self.user = new userModel.User(userJSON);\n    self.user.logger = self.logger;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $(document).bind(\"ajaxSend\", function(ev, xhr, options) {\n        var data = options.data;\n        try {\n            data = JSON.parse(data);\n        } catch (err) {}\n\n        self.lastAjax = {\n            url: location.href.slice(0, -1) + options.url,\n            data: data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\nGalaxyApp.prototype.debugging = function _debugging(setting) {\n    var self = this;\n    try {\n        if (setting === undefined) {\n            return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n        }\n        if (setting) {\n            localStorage.setItem(DEBUGGING_KEY, true);\n            return true;\n        }\n\n        localStorage.removeItem(DEBUGGING_KEY);\n        // also remove all namespaces\n        self.debuggingNamespaces(null);\n    } catch (storageErr) {\n        console.log(\n            localize(\"localStorage not available for debug flag retrieval\")\n        );\n    }\n    return false;\n};\n\n/** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\nGalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(\n    namespaces\n) {\n    var self = this;\n    try {\n        if (namespaces === undefined) {\n            var csv = localStorage.getItem(NAMESPACE_KEY);\n            return typeof csv === \"string\" ? csv.split(\",\") : [];\n        } else if (namespaces === null) {\n            localStorage.removeItem(NAMESPACE_KEY);\n        } else {\n            localStorage.setItem(NAMESPACE_KEY, namespaces);\n        }\n        var newSettings = self.debuggingNamespaces();\n        if (self.logger) {\n            self.logger.options.consoleNamespaceWhitelist = newSettings;\n        }\n        return newSettings;\n    } catch (storageErr) {\n        console.log(\n            localize(\"localStorage not available for debug namespace retrieval\")\n        );\n    }\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString() {\n    var userEmail = this.user\n        ? this.user.get(\"email\") || \"(anonymous)\"\n        : \"uninitialized\";\n    return \"GalaxyApp(\" + userEmail + \")\";\n};\n\n// ============================================================================\nexport default {\n    GalaxyApp: GalaxyApp\n};\n"]}