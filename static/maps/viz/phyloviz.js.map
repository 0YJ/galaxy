{"version":3,"sources":["viz/phyloviz.js"],"names":["define","d3","visualization_mod","data_mod","mod_icon_btn","PhyloTreeLayout","leafHeight","layoutMode","height","leafIndex","children","layout","dist","node","defaultDist","y0","parent","depthSeparation","maxTextWidth","child","maxDepth","vertSeparation","sumChildVertSeparation","x","x0","y","self","hierarchy","sort","value","inputLeafHeight","mode","layoutAngle","angle","isNaN","separation","links","nodes","tree","d","i","toString","call","_nodes","window","_d","forEach","depth","push","numLeaves","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","fieldName","$inputKey","min","max","val","parseFloat","attr","replace","n","isNumeric","isFinite","alert","hasIllegalJsonCharacters","search","PhyloTree","Visualization","scaleFactor","translate","fontSize","selectedNode","nodeAttrChangedTime","initialize","options","defaults","dataset_id","title","toggle","id","_children","root","toggleAll","length","this","getData","cleanTree","_selected","config","jQuery","attributes","show_message","$","ajax","url","type","dataType","data","success","stdInit","model","on","updateAndRender","vis","PhylovizLayoutBase","nodeRadius","width","source","select","renderNodes","diagonal","selectAll","renderLinks","target","calcalateLinePos","pos0","pos1","pos2","link","append","transition","duration","linkEnter","enter","exit","selectNode","linkExit","classed","set","name","annotation","remove","__data__","tooltip","placement","trigger","PhylovizLinearView","margins","svg","projection","get","event","stopPropagation","altKey","nodeEnter","style","nodeUpdate","nodeExit","PhylovizView","MIN_SCALE","MAX_SCALE","resize","phyloTree","zoomFunc","behavior","zoom","scaleExtent","navMenu","HeaderButtons","settingsMenu","SettingsMenu","setTimeout","zoomAndPan","render","empty","mainSVG","layoutOptions","linearView","text","translationCoor","zoomParams","translateParams","scale","zoomStatement","split","translateStatement","reloadViz","getJSON","treeIndex","data_type","phylovizView","packedJson","initRightHeaderBtns","off","rightMenu","nexSelected","icon_class","on_click","show","updateUI","save","tooltip_config","$el","create_icon_buttons_menu","el","inputs","apply","hide","resetToDefaults","each","$input","key","cancelChanges","saveChanges","UI","enableEdit","updateNodes","fn","enable","isEnabled","removeAttr","checked","valuesOfConcern","is","PhyloVizSearch","searchConditionVal","Date","searchTree","searchTerm","attrVal","condition","toLowerCase","indexOf"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["define([\n    'libs/d3',\n    'viz/visualization',\n    'mvc/dataset/data',\n    'mvc/ui/icon-button'\n], function(d3, visualization_mod, data_mod, mod_icon_btn) {\n\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n\n    className: 'UserMenuBase',\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue : function ($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val(),\n            fieldName = $inputKey.attr(\"displayLabel\") || $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)){\n            alert(fieldName + \" is not a number!\");\n            return false;\n        }\n\n        if ( value > max){\n            alert(fieldName + \" is too large.\");\n            return false;\n        } else if ( value < min) {\n            alert(fieldName + \" is too small.\");\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters : function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1){\n            alert(\"Named fields cannot contain these illegal characters: \"\n                + \"double quote(\\\"), single guote(\\'), or back slash(\\\\). \");\n            return true;\n        }\n        return false;\n    }\n});\n\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n\n    var self = this,\n        hierarchy = d3.layout.hierarchy().sort(null).value(null),\n        height = 360, // ! represents both the layout angle and the height of the layout, in px\n        layoutMode = \"Linear\",\n        leafHeight = 18, // height of each individual leaf node\n        depthSeparation = 200, // separation between nodes of different depth, in px\n        leafIndex = 0, // change to recurssive call\n        defaultDist = 0.5, // tree defaults to 0.5 dist if no dist is specified\n        maxTextWidth = 50; // maximum length of the text labels\n\n\n    self.leafHeight = function(inputLeafHeight){\n        if (typeof inputLeafHeight === \"undefined\"){ return leafHeight; }\n        else { leafHeight = inputLeafHeight; return self;}\n    };\n\n    self.layoutMode = function(mode){\n        if (typeof mode === \"undefined\"){ return layoutMode; }\n        else { layoutMode = mode; return self;}\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = function(angle) {\n        if (typeof angle === \"undefined\"){ return height; }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) { return self; }\n        else { height = angle; return self;}\n    };\n\n    self.separation = function(dist){   // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\"){ return depthSeparation; }\n        else { depthSeparation = dist; return self;}\n    };\n\n    self.links = function (nodes) {     // uses d3 native method to generate links. Done.\n        return d3.layout.tree().links(nodes);\n    };\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = function (d, i) {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if( toString.call( d ) === '[object Array]' ){\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i),\n            nodes = [],\n            maxDepth = 0,\n            numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(function (node){\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth;  //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(function(node){\n            if ( !node.children )  { //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight = layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout (node, maxDepth, vertSeparation, parent) {\n        var children = node.children,\n            sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist;     // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null){\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {    //root node\n            node.y0 = maxTextWidth;\n        }\n\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach( function (child) {\n                child.parent = node;\n                sumChildVertSeparation += layout(child, maxDepth, vertSeparation, node);\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults : {\n        layout: \"Linear\",\n        separation : 250,    // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type : \"phyloviz\",   // visualization type\n        title : \"Title\",\n        scaleFactor: 1,\n        translate: [0,0],\n        fontSize: 12,        //fontSize of node label\n        selectedNode : null,\n        nodeAttrChangedTime : 0\n    },\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data_mod.Dataset({\n            id: options.dataset_id\n        }));\n\n    },\n\n    root : {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle : function (d) {\n        if(typeof d === \"undefined\") {return ;}\n        if (d.children ) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll : function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData : function (){\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node){\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected){ delete node._selected;}\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config  = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url     : this.url(),\n            type    : \"POST\",\n            dataType: \"json\",\n            data    : {\n                config  : JSON.stringify( config ),\n                type    : 'phyloviz'\n            },\n            success: function(res){\n                hide_modal();\n            }\n        });\n    }\n});\n\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase =  Backbone.View.extend({\n    defaults : {\n        nodeRadius : 4.5 // radius of each node in the diagram\n    },\n\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit : function (options) {\n\n        var self = this;\n        self.model.on(\"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender, self);\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender : function(source) {\n        var vis = d3.select(\".vis\"),\n            self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks : function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis.selectAll(\"g.completeLink\")\n            .data(self.tree.links(self.nodes), function(d) { return d.target.id; });\n\n        var calcalateLinePos = function(d) {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = d.source.y0 + \" \" + d.source.x0;\n            // position where the line makes a right angle bend\n            d.pos1 = d.source.y0 + \" \" + d.target.x0;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = d.target.y0 + \" \" + d.target.x0;\n        };\n\n        var linkEnter = link.enter().insert(\"svg:g\",\"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter.append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0  + \" L \" + d.pos1;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\")\n            .attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n            });\n\n        var linkExit = link.exit().remove();\n\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode : function(node){\n        var self = this;\n        d3.selectAll(\"g.node\")\n            .classed(\"selectedHighlight\", function(d){\n                if (node.id === d.id){\n                    if(node._selected) { // for de=selecting node.\n                        delete node._selected;\n                        return false;\n                    } else {\n                        node._selected = true;\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips : function (){\n        $(\".tooltip\").remove();      //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function(){\n                var d = this.__data__,\n                    annotation = d.annotation || \"None\" ;\n                return d ? (d.name ? d.name + \"<br/>\" : \"\") + \"Dist: \" + d.dist + \" <br/>Annotation: \" + annotation: \"\";\n            })\n            .tooltip({'placement':'top', 'trigger' : 'hover'});\n\n    }\n});\n\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView =  PhylovizLayoutBase.extend({\n    initialize : function(options){\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout : function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal()\n            .projection(function(d) { return [d.y, d.x ]; });\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes : function (source) {\n        var self = this,\n            fontSize = self.model.get(\"fontSize\") + \"px\";\n\n        // assigning properties from models\n        self.tree.separation(self.model.get(\"separation\")).leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500,\n            nodes = self.tree.separation(self.model.get(\"separation\")).nodes(self.model.root);\n\n        var node = self.vis.selectAll(\"g.node\")\n            .data(nodes, function(d) {\n                return d.name + d.id || (d.id = ++self.i);\n            });\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node.enter().append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", function(){ d3.event.stopPropagation();    })\n            .on(\"click\", function(d) {\n                if (d3.event.altKey) {\n                    self.selectNode(d);        // display info if alt is pressed\n                } else {\n                    if(d.children && d.children.length === 0){ return;}  // there is no need to toggle leaves\n                    self.model.toggle(d);   // contract/expand nodes at data level\n                    self.updateAndRender(d);   // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if( toString.call( source ) === '[object Array]' ){\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\"transform\", function(d) { return \"translate(\" + source.y0 + \",\" + source.x0 + \")\"; });\n\n        nodeEnter.append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n        nodeEnter.append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", function(d) { return d.children || d._children ? -10 : 10; })\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", function(d) { return d.children || d._children ? \"end\" : \"start\"; })\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition()\n            .duration(duration);\n\n        nodeUpdate.attr(\"transform\", function(d) {\n            return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n\n        nodeUpdate.select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n        nodeUpdate.select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(function(d) { return d.name; });\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit =node.exit().transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\")\n            .attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\")\n            .style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(function(d) {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n\n});\n\nvar PhylovizView = Backbone.View.extend({\n\n    className: 'phyloviz',\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(function(){\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior.zoom().scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({phyloTree : self.phyloTree});\n        self.nodeSelectionView = new NodeSelectionView({phyloTree : self.phyloTree});\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(function(){\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function(){\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3.select(\"#PhyloViz\").append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(self.zoomFunc.on(\"zoom\", function(){\n            self.zoomAndPan();\n        }));\n\n        self.boundingRect = self.mainSVG.append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG\n            .append(\"svg:g\")\n            .attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model : self.phyloTree,\n            width : self.width,\n            height : self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(\"Phylogenetic Tree from \" + self.phyloTree.get(\"title\") + \":\");\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan : function(event){\n         var zoomParams,\n            translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this,\n            scaleFactor = self.zoomFunc.scale(),\n            translationCoor = self.zoomFunc.translate(),\n            zoomStatement = \"\",\n            translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0,0]; break;\n            case \"+\":\n                scaleFactor *= 1.1; break;\n            case \"-\":\n                scaleFactor *= 0.9; break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) { return;}\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement = \"translate(\" +  self.margins[3] + \",\" + self.margins[0] + \")\" +\n            \" scale(\" + scaleFactor + \")\";\n\n        // Do manual translation.\n        if( d3.event !== null) {\n            translateStatement = \"translate(\" + d3.event.translate + \")\";\n        } else {\n            if(typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)){\n                    translationCoor = [translationCoor[0] + parseFloat(x), translationCoor[1] + parseFloat(y)];\n                }\n            }\n            self.zoomFunc.translate(translationCoor);   // update zoomFunc\n            translateStatement = \"translate(\" + translationCoor + \")\";\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz : function() {\n        var self = this,\n            treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(self.phyloTree.get(\"dataset\").url(), {\n                tree_index: treeIndex,\n                data_type: 'raw_data'\n            },\n            function(packedJson){\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            });\n    }\n});\n\n\nvar HeaderButtons = Backbone.View.extend({\n\n    initialize : function(phylovizView){\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\").off().on(\"change\",  function() {self.phylovizView.reloadViz();}  );\n\n    },\n\n    initRightHeaderBtns : function(){\n        var self = this;\n\n        rightMenu = mod_icon_btn.create_icon_buttons_menu([\n            { icon_class: 'gear', title: 'PhyloViz Settings', on_click: function(){\n                $(\"#SettingsMenu\").show();\n                self.settingsMenu.updateUI();\n            } },\n            { icon_class: 'disk', title: 'Save visualization', on_click: function() {\n                var nexSelected = $(\"#phylovizNexSelector option:selected\").text();\n                if(nexSelected) {\n                    self.phylovizView.phyloTree.set(\"title\", nexSelected);\n                }\n                self.phylovizView.phyloTree.save();\n            } },\n            { icon_class: 'chevron-expand', title: 'Search / Edit Nodes', on_click: function() {\n                $(\"#nodeSelectionView\").show();\n            } },\n            { icon_class: 'information', title: 'Phyloviz Help', on_click: function() {\n                window.open('https://wiki.galaxyproject.org/Learn/Visualization/PhylogeneticTree');\n                // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n            } }\n        ],\n            {\n                tooltip_config: { placement: 'bottom' }\n            });\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this,\n            navMenu = mod_icon_btn.create_icon_buttons_menu([\n                { icon_class: 'zoom-in', title: 'Zoom in', on_click: function() {\n                    self.phylovizView.zoomAndPan({ zoom : \"+\"});\n                } },\n                { icon_class: 'zoom-out', title: 'Zoom out', on_click: function() {\n                    self.phylovizView.zoomAndPan({ zoom : \"-\"});\n                } },\n                { icon_class: 'arrow-circle', title: 'Reset Zoom/Pan', on_click: function() {\n                    self.phylovizView.zoomAndPan({ zoom : \"reset\"});\n                } }\n            ],\n                {\n                    tooltip_config: { placement: 'bottom' }\n                });\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\n\nvar SettingsMenu = UserMenuBase.extend({\n\n    className: 'Settings',\n\n    initialize: function(options){\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation : $(\"#phyloVizTreeSeparation\"),\n            leafHeight : $(\"#phyloVizTreeLeafHeight\"),\n            fontSize   : $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\").off().on(\"click\", function() { self.el.hide(); });\n        $(\"#phylovizResetSettingsBtn\").off().on(\"click\", function() { self.resetToDefaults(); });\n        $(\"#phylovizApplySettingsBtn\").off().on(\"click\", function() { self.apply(); });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply : function(){\n        var self = this;\n        if (!self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)){\n            return;\n        }\n        $.each(self.inputs, function(key, $input){\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI : function(){\n        var self = this;\n        $.each(self.inputs, function(key, $input){\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults : function(){\n        $(\".tooltip\").remove();      // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, function(key, value) {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function(){\n\n    }\n\n});\n\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n\n    className: 'Settings',\n\n    initialize : function (options){\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit      : $('#phylovizEditNodesCheck'),\n            saveChanges     : $('#phylovizNodeSaveChanges'),\n            cancelChanges   : $(\"#phylovizNodeCancelChanges\"),\n            name            : $(\"#phyloVizSelectedNodeName\"),\n            dist            : $(\"#phyloVizSelectedNodeDist\"),\n            annotation      : $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name : null,\n            dist : null,\n            annotation : null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\").off().on(\"click\", function() { self.el.hide(); });\n        self.UI.saveChanges.off().on(\"click\", function(){ self.updateNodes(); });\n        self.UI.cancelChanges.off().on(\"click\", function(){ self.cancelChanges(); });\n\n        (function ($) {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function (isEnabled) {\n                return $(this).each(function () {\n                    if(isEnabled){\n                        $(this).removeAttr('disabled');\n                    } else {\n                        $(this).attr('disabled', 'disabled');\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", function () {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI : function(){\n        var self = this,\n            checked = self.UI.enableEdit.is(':checked');\n\n        if (!checked) { self.cancelChanges(); }\n\n        $.each(self.valuesOfConcern, function(key, value) {\n            self.UI[key].enable(checked);\n        });\n        if(checked){\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges : function() {\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node){\n            $.each(self.valuesOfConcern, function(key, value) {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes : function (){\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node){\n            if (!self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation) ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, function(key, value) {\n                (node[key]) = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize : function () {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", function(){\n            var searchTerm = $(\"#phyloVizSearchTerm\"),\n                searchConditionVal = $(\"#phyloVizSearchCondition\").val().split(\"-\"),\n                attr = searchConditionVal[0],\n                condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\"){\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree : function (attr, condition, val){\n        d3.selectAll(\"g.node\")\n            .classed(\"searchHighlight\", function(d){\n                var attrVal =  d[attr];\n                if (typeof attrVal !== \"undefined\" && attrVal !== null){\n                    if (attr === \"dist\"){\n                        switch (condition) {\n                            case \"greaterEqual\":\n                                return attrVal >= +val;\n                            case \"lesserEqual\":\n                                return attrVal <= +val;\n                            default:\n                                return;\n                        }\n\n                    } else if (attr === \"name\" || attr === \"annotation\") {\n                        return attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1;\n                    }\n                }\n            });\n    }\n});\n\nreturn {\n    PhylovizView: PhylovizView\n};\n\n});\n"]}