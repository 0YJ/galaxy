{"version":3,"sources":["viz/phyloviz.js"],"names":["PhyloTreeLayout","_nodes","forEach","maxDepth","vertSeparation","parent","node","nodes","dist","defaultDist","numLeaves","depthSeparation","maxTextWidth","layout","children","child","sumChildVertSeparation","x0","leafIndex","x","y","self","this","hierarchy","value","alert","sort","layoutMode","leafHeight","inputLeafHeight","hasIllegalJsonCharacters","$inputKey","mode","layoutAngle","angle","isNaN","separation","links","d","i","call","height","window","_d","depth","push","d3","tree","toString","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","min","max","val","fieldName","attr","replace","n","parseFloat","isFinite","isNumeric","search","PhyloTree","_visualization2","default","Visualization","defaults","type","title","selectedNode","initialize","options","_data2","id","dataset_id","root","fontSize","nodeAttrChangedTime","_children","toggleAll","length","toggle","save","_selected","getData","cleanTree","jQuery","attributes","config","show_message","$","ajax","url","dataType","data","success","res","hide_modal","PhylovizLinearView","nodeRadius","model","on","vis","width","updateAndRender","source","select","stdInit","renderNodes","renderLinks","diagonal","duration","selectAll","pos0","y0","pos1","target","pos2","enter","insert","link","append","calcalateLinePos","exit","selectNode","linkExit","remove","set","name","annotation","__data__","bootstrap","tooltip","placement","trigger","margins","svg","projection","get","event","nodeEnter","stopPropagation","altKey","style","nodeUpdate","nodeExit","transition","PhylovizView","MIN_SCALE","MAX_SCALE","MAX_DISPLACEMENT","Math","round","zoomFunc","navMenu","HeaderButtons","nodeSelectionView","zoomAndPan","radius","empty","render","phyloTree","boundingRect","behavior","settingsMenu","SettingsMenu","NodeSelectionView","PhyloVizSearch","setTimeout","translateParams","mainSVG","scaleFactor","translationCoor","zoomStatement","translateStatement","layoutOptions","scale","split","zoomParams","zoom","translate","reloadViz","getJSON","tree_index","data_type","phylovizView","initNavBtns","initRightHeaderBtns","rightMenu","icon_class","on_click","show","updateUI","treeIndex","packedJson","off","tooltip_config","_iconButton2","create_icon_buttons_menu","inputs","nexSelected","resetToDefaults","open","$el","enableEdit","saveChanges","cancelChanges","valuesOfConcern","el","hide","apply","checked","key","$input","each","UI","condition","searchTree","updateNodes","fn","enable","isEnabled","removeAttr","toggleUI","is","Date","searchTerm","searchConditionVal","classed","attrVal","toLowerCase","indexOf"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["import * as d3 from \"libs/d3\";\nimport visualization_mod from \"viz/visualization\";\nimport data_mod from \"mvc/dataset/data\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n    className: \"UserMenuBase\",\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue: function($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val(),\n            fieldName =\n                $inputKey.attr(\"displayLabel\") ||\n                $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)) {\n            alert(fieldName + \" is not a number!\");\n            return false;\n        }\n\n        if (value > max) {\n            alert(fieldName + \" is too large.\");\n            return false;\n        } else if (value < min) {\n            alert(fieldName + \" is too small.\");\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters: function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n            alert(\n                \"Named fields cannot contain these illegal characters: \" +\n                    \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n            );\n            return true;\n        }\n        return false;\n    }\n});\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n    var self = this,\n        hierarchy = d3.layout\n            .hierarchy()\n            .sort(null)\n            .value(null),\n        height = 360, // ! represents both the layout angle and the height of the layout, in px\n        layoutMode = \"Linear\",\n        leafHeight = 18, // height of each individual leaf node\n        depthSeparation = 200, // separation between nodes of different depth, in px\n        leafIndex = 0, // change to recurssive call\n        defaultDist = 0.5, // tree defaults to 0.5 dist if no dist is specified\n        maxTextWidth = 50; // maximum length of the text labels\n\n    self.leafHeight = function(inputLeafHeight) {\n        if (typeof inputLeafHeight === \"undefined\") {\n            return leafHeight;\n        } else {\n            leafHeight = inputLeafHeight;\n            return self;\n        }\n    };\n\n    self.layoutMode = function(mode) {\n        if (typeof mode === \"undefined\") {\n            return layoutMode;\n        } else {\n            layoutMode = mode;\n            return self;\n        }\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = function(angle) {\n        if (typeof angle === \"undefined\") {\n            return height;\n        }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) {\n            return self;\n        } else {\n            height = angle;\n            return self;\n        }\n    };\n\n    self.separation = function(dist) {\n        // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\") {\n            return depthSeparation;\n        } else {\n            depthSeparation = dist;\n            return self;\n        }\n    };\n\n    self.links = function(nodes) {\n        // uses d3 native method to generate links. Done.\n        return d3.layout.tree().links(nodes);\n    };\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = function(d, i) {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(d) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i),\n            nodes = [],\n            maxDepth = 0,\n            numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(function(node) {\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(function(node) {\n            if (!node.children) {\n                //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight =\n            layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout(node, maxDepth, vertSeparation, parent) {\n        var children = node.children,\n            sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null) {\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {\n            //root node\n            node.y0 = maxTextWidth;\n        }\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach(function(child) {\n                child.parent = node;\n                sumChildVertSeparation += layout(\n                    child,\n                    maxDepth,\n                    vertSeparation,\n                    node\n                );\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults: {\n        layout: \"Linear\",\n        separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type: \"phyloviz\", // visualization type\n        title: \"Title\",\n        scaleFactor: 1,\n        translate: [0, 0],\n        fontSize: 12, //fontSize of node label\n        selectedNode: null,\n        nodeAttrChangedTime: 0\n    },\n\n    initialize: function(options) {\n        this.set(\n            \"dataset\",\n            new data_mod.Dataset({\n                id: options.dataset_id\n            })\n        );\n    },\n\n    root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle: function(d) {\n        if (typeof d === \"undefined\") {\n            return;\n        }\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll: function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData: function() {\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node) {\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected) {\n                delete node._selected;\n            }\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                config: JSON.stringify(config),\n                type: \"phyloviz\"\n            },\n            success: function(res) {\n                hide_modal();\n            }\n        });\n    }\n});\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase = Backbone.View.extend({\n    defaults: {\n        nodeRadius: 4.5 // radius of each node in the diagram\n    },\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit: function(options) {\n        var self = this;\n        self.model.on(\n            \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender,\n            self\n        );\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender: function(source) {\n        var vis = d3.select(\".vis\"),\n            self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks: function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis\n            .selectAll(\"g.completeLink\")\n            .data(self.tree.links(self.nodes), function(d) {\n                return d.target.id;\n            });\n\n        var calcalateLinePos = function(d) {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = d.source.y0 + \" \" + d.source.x0;\n            // position where the line makes a right angle bend\n            d.pos1 = d.source.y0 + \" \" + d.target.x0;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = d.target.y0 + \" \" + d.target.x0;\n        };\n\n        var linkEnter = link\n            .enter()\n            .insert(\"svg:g\", \"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter\n            .append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0 + \" L \" + d.pos1;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\").attr(\"d\", function(d) {\n            calcalateLinePos(d);\n            return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n        });\n\n        var linkExit = link.exit().remove();\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode: function(node) {\n        var self = this;\n        d3.selectAll(\"g.node\").classed(\"selectedHighlight\", function(d) {\n            if (node.id === d.id) {\n                if (node._selected) {\n                    // for de=selecting node.\n                    delete node._selected;\n                    return false;\n                } else {\n                    node._selected = true;\n                    return true;\n                }\n            }\n            return false;\n        });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips: function() {\n        $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function() {\n                var d = this.__data__,\n                    annotation = d.annotation || \"None\";\n                return d\n                    ? (d.name ? d.name + \"<br/>\" : \"\") +\n                          \"Dist: \" +\n                          d.dist +\n                          \" <br/>Annotation1: \" +\n                          annotation +\n                          (d.bootstrap\n                              ? \"<br/>Confidence level: \" +\n                                Math.round(100 * d.bootstrap)\n                              : \"\")\n                    : \"\";\n            })\n            .tooltip({ placement: \"top\", trigger: \"hover\" });\n    }\n});\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView = PhylovizLayoutBase.extend({\n    initialize: function(options) {\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout: function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal().projection(function(d) {\n            return [d.y, d.x];\n        });\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes: function(source) {\n        var self = this,\n            fontSize = self.model.get(\"fontSize\") + \"px\";\n\n        // assigning properties from models\n        self.tree\n            .separation(self.model.get(\"separation\"))\n            .leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500,\n            nodes = self.tree\n                .separation(self.model.get(\"separation\"))\n                .nodes(self.model.root);\n\n        var node = self.vis.selectAll(\"g.node\").data(nodes, function(d) {\n            return d.name + d.id || (d.id = ++self.i);\n        });\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node\n            .enter()\n            .append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", function() {\n                d3.event.stopPropagation();\n            })\n            .on(\"click\", function(d) {\n                if (d3.event.altKey) {\n                    self.selectNode(d); // display info if alt is pressed\n                } else {\n                    if (d.children && d.children.length === 0) {\n                        return;\n                    } // there is no need to toggle leaves\n                    self.model.toggle(d); // contract/expand nodes at data level\n                    self.updateAndRender(d); // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(source) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\"transform\", function(d) {\n            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n        });\n\n        nodeEnter\n            .append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeEnter\n            .append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", function(d) {\n                return d.children || d._children ? -10 : 10;\n            })\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", function(d) {\n                return d.children || d._children ? \"end\" : \"start\";\n            })\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition().duration(duration);\n\n        nodeUpdate.attr(\"transform\", function(d) {\n            return \"translate(\" + d.y + \",\" + d.x + \")\";\n        });\n\n        nodeUpdate\n            .select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeUpdate\n            .select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(function(d) {\n                return d.name && d.name !== \"\"\n                    ? d.name\n                    : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\";\n            });\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node\n            .exit()\n            .transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(function(d) {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n});\n\nvar PhylovizView = Backbone.View.extend({\n    className: \"phyloviz\",\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(function() {\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior\n            .zoom()\n            .scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({\n            phyloTree: self.phyloTree\n        });\n        self.nodeSelectionView = new NodeSelectionView({\n            phyloTree: self.phyloTree\n        });\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(function() {\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function() {\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3\n            .select(\"#PhyloViz\")\n            .append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(\n                self.zoomFunc.on(\"zoom\", function() {\n                    self.zoomAndPan();\n                })\n            );\n\n        self.boundingRect = self.mainSVG\n            .append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model: self.phyloTree,\n            width: self.width,\n            height: self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(\n            \"Phylogenetic Tree from \" + self.phyloTree.get(\"title\") + \":\"\n        );\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan: function(event) {\n        var zoomParams, translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this,\n            scaleFactor = self.zoomFunc.scale(),\n            translationCoor = self.zoomFunc.translate(),\n            zoomStatement = \"\",\n            translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0, 0];\n                break;\n            case \"+\":\n                scaleFactor *= 1.1;\n                break;\n            case \"-\":\n                scaleFactor *= 0.9;\n                break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) {\n            return;\n        }\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement =\n            \"translate(\" +\n            self.margins[3] +\n            \",\" +\n            self.margins[0] +\n            \")\" +\n            \" scale(\" +\n            scaleFactor +\n            \")\";\n\n        // Do manual translation.\n        if (d3.event !== null) {\n            translateStatement = \"translate(\" + d3.event.translate + \")\";\n        } else {\n            if (typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)) {\n                    translationCoor = [\n                        translationCoor[0] + parseFloat(x),\n                        translationCoor[1] + parseFloat(y)\n                    ];\n                }\n            }\n            self.zoomFunc.translate(translationCoor); // update zoomFunc\n            translateStatement = \"translate(\" + translationCoor + \")\";\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz: function() {\n        var self = this,\n            treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(\n            self.phyloTree.get(\"dataset\").url(),\n            {\n                tree_index: treeIndex,\n                data_type: \"raw_data\"\n            },\n            function(packedJson) {\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            }\n        );\n    }\n});\n\nvar HeaderButtons = Backbone.View.extend({\n    initialize: function(phylovizView) {\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\")\n            .off()\n            .on(\"change\", function() {\n                self.phylovizView.reloadViz();\n            });\n    },\n\n    initRightHeaderBtns: function() {\n        var self = this;\n\n        var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"gear\",\n                    title: \"PhyloViz Settings\",\n                    on_click: function() {\n                        $(\"#SettingsMenu\").show();\n                        self.settingsMenu.updateUI();\n                    }\n                },\n                {\n                    icon_class: \"disk\",\n                    title: \"Save visualization\",\n                    on_click: function() {\n                        var nexSelected = $(\n                            \"#phylovizNexSelector option:selected\"\n                        ).text();\n                        if (nexSelected) {\n                            self.phylovizView.phyloTree.set(\n                                \"title\",\n                                nexSelected\n                            );\n                        }\n                        self.phylovizView.phyloTree.save();\n                    }\n                },\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Search / Edit Nodes\",\n                    on_click: function() {\n                        $(\"#nodeSelectionView\").show();\n                    }\n                },\n                {\n                    icon_class: \"information\",\n                    title: \"Phyloviz Help\",\n                    on_click: function() {\n                        window.open(\n                            \"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\"\n                        );\n                        // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this,\n            navMenu = mod_icon_btn.create_icon_buttons_menu(\n                [\n                    {\n                        icon_class: \"zoom-in\",\n                        title: \"Zoom in\",\n                        on_click: function() {\n                            self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                        }\n                    },\n                    {\n                        icon_class: \"zoom-out\",\n                        title: \"Zoom out\",\n                        on_click: function() {\n                            self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                        }\n                    },\n                    {\n                        icon_class: \"arrow-circle\",\n                        title: \"Reset Zoom/Pan\",\n                        on_click: function() {\n                            self.phylovizView.zoomAndPan({\n                                zoom: \"reset\"\n                            });\n                        }\n                    }\n                ],\n                {\n                    tooltip_config: { placement: \"bottom\" }\n                }\n            );\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\nvar SettingsMenu = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation: $(\"#phyloVizTreeSeparation\"),\n            leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n            fontSize: $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.el.hide();\n            });\n        $(\"#phylovizResetSettingsBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.resetToDefaults();\n            });\n        $(\"#phylovizApplySettingsBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.apply();\n            });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply: function() {\n        var self = this;\n        if (\n            !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n        ) {\n            return;\n        }\n        $.each(self.inputs, function(key, $input) {\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI: function() {\n        var self = this;\n        $.each(self.inputs, function(key, $input) {\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults: function() {\n        $(\".tooltip\").remove(); // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, function(key, value) {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function() {}\n});\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit: $(\"#phylovizEditNodesCheck\"),\n            saveChanges: $(\"#phylovizNodeSaveChanges\"),\n            cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n            name: $(\"#phyloVizSelectedNodeName\"),\n            dist: $(\"#phyloVizSelectedNodeDist\"),\n            annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name: null,\n            dist: null,\n            annotation: null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.el.hide();\n            });\n        self.UI.saveChanges.off().on(\"click\", function() {\n            self.updateNodes();\n        });\n        self.UI.cancelChanges.off().on(\"click\", function() {\n            self.cancelChanges();\n        });\n\n        (function($) {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function(isEnabled) {\n                return $(this).each(function() {\n                    if (isEnabled) {\n                        $(this).removeAttr(\"disabled\");\n                    } else {\n                        $(this).attr(\"disabled\", \"disabled\");\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", function() {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI: function() {\n        var self = this,\n            checked = self.UI.enableEdit.is(\":checked\");\n\n        if (!checked) {\n            self.cancelChanges();\n        }\n\n        $.each(self.valuesOfConcern, function(key, value) {\n            self.UI[key].enable(checked);\n        });\n        if (checked) {\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges: function() {\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            $.each(self.valuesOfConcern, function(key, value) {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes: function() {\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            if (\n                !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation)\n            ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, function(key, value) {\n                node[key] = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize: function() {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", function() {\n            var searchTerm = $(\"#phyloVizSearchTerm\"),\n                searchConditionVal = $(\"#phyloVizSearchCondition\")\n                    .val()\n                    .split(\"-\"),\n                attr = searchConditionVal[0],\n                condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\") {\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree: function(attr, condition, val) {\n        d3.selectAll(\"g.node\").classed(\"searchHighlight\", function(d) {\n            var attrVal = d[attr];\n            if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                if (attr === \"dist\") {\n                    switch (condition) {\n                        case \"greaterEqual\":\n                            return attrVal >= +val;\n                        case \"lesserEqual\":\n                            return attrVal <= +val;\n                        default:\n                            return;\n                    }\n                } else if (attr === \"name\" || attr === \"annotation\") {\n                    return (\n                        attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1\n                    );\n                }\n            }\n        });\n    }\n});\n\nexport default {\n    PhylovizView: PhylovizView\n};\n"]}