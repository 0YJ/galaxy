{"version":3,"sources":["viz/phyloviz.js"],"names":["PhyloTreeLayout","layout","node","maxDepth","vertSeparation","parent","nodes","forEach","children","sumChildVertSeparation","defaultDist","dist","leafHeight","layoutMode","depthSeparation","maxTextWidth","child","length","x0","leafIndex","y0","y","self","this","alert","fieldName","hierarchy","sort","height","inputLeafHeight","mode","angle","separation","links","d3","tree","d","i","toString","isNaN","_nodes","call","numLeaves","window","_d","depth","push","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","$inputKey","min","max","value","val","attr","replace","n","parseFloat","isFinite","isNumeric","hasIllegalJsonCharacters","search","PhyloTree","_visualization2","default","Visualization","defaults","type","scaleFactor","translate","fontSize","initialize","options","set","_data2","Dataset","id","dataset_id","selectedNode","nodeAttrChangedTime","_children","toggle","toggleAll","getData","root","save","cleanTree","_selected","config","attributes","show_message","$","ajax","url","dataType","data","hide_modal","stdInit","model","on","updateAndRender","vis","PhylovizLayoutBase","width","source","select","addTooltips","diagonal","renderNodes","renderLinks","target","calcalateLinePos","pos1","pos2","link","enter","insert","pos0","append","transition","remove","selectNode","selectAll","classed","name","annotation","__data__","placement","bootstrap","Math","round","tooltip","trigger","margins","svg","projection","x","duration","get","event","stopPropagation","nodeEnter","altKey","style","nodeUpdate","nodeExit","nodeRadius","render","exit","zoomFunc","behavior","scaleExtent","navMenu","phyloTree","zoomAndPan","MAX_SCALE","MAX_DISPLACEMENT","empty","boundingRect","layoutOptions","MIN_SCALE","scale","HeaderButtons","settingsMenu","linearView","SettingsMenu","nodeSelectionView","NodeSelectionView","PhyloVizSearch","setTimeout","translateParams","zoomParams","translationCoor","mainSVG","zoomStatement","text","split","PhylovizLinearView","zoom","treeIndex","tree_index","data_type","off","phylovizView","initRightHeaderBtns","icon_class","title","translateStatement","on_click","nexSelected","tooltip_config","getJSON","packedJson","initNavBtns","reloadViz","show","updateUI","resetToDefaults","inputs","open","key","$el","_iconButton2","create_icon_buttons_menu","fn","enableEdit","toggleUI","checked","cancelChanges","each","$input","valuesOfConcern","updateNodes","el","saveChanges","searchTerm","hide","UI","searchTree","enable","isEnabled","removeAttr","jQuery","is","Date","searchConditionVal","condition","attrVal","toLowerCase","indexOf","PhylovizView"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["import * as d3 from \"libs/d3\";\nimport visualization_mod from \"viz/visualization\";\nimport data_mod from \"mvc/dataset/data\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n    className: \"UserMenuBase\",\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue: function($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val();\n\n        var fieldName =\n            $inputKey.attr(\"displayLabel\") ||\n            $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)) {\n            alert(fieldName + \" is not a number!\");\n            return false;\n        }\n\n        if (value > max) {\n            alert(fieldName + \" is too large.\");\n            return false;\n        } else if (value < min) {\n            alert(fieldName + \" is too small.\");\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters: function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n            alert(\n                \"Named fields cannot contain these illegal characters: \" +\n                    \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n            );\n            return true;\n        }\n        return false;\n    }\n});\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n    var self = this; // maximum length of the text labels\n\n    var hierarchy = d3.layout\n        .hierarchy()\n        .sort(null)\n        .value(null);\n\n    var // ! represents both the layout angle and the height of the layout, in px\n    height = 360;\n\n    var layoutMode = \"Linear\";\n\n    var // height of each individual leaf node\n    leafHeight = 18;\n\n    var // separation between nodes of different depth, in px\n    depthSeparation = 200;\n\n    var // change to recurssive call\n    leafIndex = 0;\n\n    var // tree defaults to 0.5 dist if no dist is specified\n    defaultDist = 0.5;\n\n    var maxTextWidth = 50;\n\n    self.leafHeight = function(inputLeafHeight) {\n        if (typeof inputLeafHeight === \"undefined\") {\n            return leafHeight;\n        } else {\n            leafHeight = inputLeafHeight;\n            return self;\n        }\n    };\n\n    self.layoutMode = function(mode) {\n        if (typeof mode === \"undefined\") {\n            return layoutMode;\n        } else {\n            layoutMode = mode;\n            return self;\n        }\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = function(angle) {\n        if (typeof angle === \"undefined\") {\n            return height;\n        }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) {\n            return self;\n        } else {\n            height = angle;\n            return self;\n        }\n    };\n\n    self.separation = function(dist) {\n        // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\") {\n            return depthSeparation;\n        } else {\n            depthSeparation = dist;\n            return self;\n        }\n    };\n\n    self.links = function(nodes) {\n        // uses d3 native method to generate links. Done.\n        return d3.layout.tree().links(nodes);\n    };\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = function(d, i) {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(d) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i);\n\n        var nodes = [];\n        var maxDepth = 0;\n        var numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(function(node) {\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(function(node) {\n            if (!node.children) {\n                //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight =\n            layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout(node, maxDepth, vertSeparation, parent) {\n        var children = node.children;\n        var sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null) {\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {\n            //root node\n            node.y0 = maxTextWidth;\n        }\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach(function(child) {\n                child.parent = node;\n                sumChildVertSeparation += layout(\n                    child,\n                    maxDepth,\n                    vertSeparation,\n                    node\n                );\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults: {\n        layout: \"Linear\",\n        separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type: \"phyloviz\", // visualization type\n        title: \"Title\",\n        scaleFactor: 1,\n        translate: [0, 0],\n        fontSize: 12, //fontSize of node label\n        selectedNode: null,\n        nodeAttrChangedTime: 0\n    },\n\n    initialize: function(options) {\n        this.set(\n            \"dataset\",\n            new data_mod.Dataset({\n                id: options.dataset_id\n            })\n        );\n    },\n\n    root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle: function(d) {\n        if (typeof d === \"undefined\") {\n            return;\n        }\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll: function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData: function() {\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node) {\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected) {\n                delete node._selected;\n            }\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                config: JSON.stringify(config),\n                type: \"phyloviz\"\n            },\n            success: function(res) {\n                hide_modal();\n            }\n        });\n    }\n});\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase = Backbone.View.extend({\n    defaults: {\n        nodeRadius: 4.5 // radius of each node in the diagram\n    },\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit: function(options) {\n        var self = this;\n        self.model.on(\n            \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender,\n            self\n        );\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender: function(source) {\n        var vis = d3.select(\".vis\");\n        var self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks: function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis\n            .selectAll(\"g.completeLink\")\n            .data(self.tree.links(self.nodes), function(d) {\n                return d.target.id;\n            });\n\n        var calcalateLinePos = function(d) {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = d.source.y0 + \" \" + d.source.x0;\n            // position where the line makes a right angle bend\n            d.pos1 = d.source.y0 + \" \" + d.target.x0;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = d.target.y0 + \" \" + d.target.x0;\n        };\n\n        var linkEnter = link\n            .enter()\n            .insert(\"svg:g\", \"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter\n            .append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0 + \" L \" + d.pos1;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\").attr(\"d\", function(d) {\n            calcalateLinePos(d);\n            return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n        });\n\n        var linkExit = link.exit().remove();\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode: function(node) {\n        var self = this;\n        d3.selectAll(\"g.node\").classed(\"selectedHighlight\", function(d) {\n            if (node.id === d.id) {\n                if (node._selected) {\n                    // for de=selecting node.\n                    delete node._selected;\n                    return false;\n                } else {\n                    node._selected = true;\n                    return true;\n                }\n            }\n            return false;\n        });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips: function() {\n        $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function() {\n                var d = this.__data__;\n                var annotation = d.annotation || \"None\";\n                return d\n                    ? (d.name ? d.name + \"<br/>\" : \"\") +\n                          \"Dist: \" +\n                          d.dist +\n                          \" <br/>Annotation1: \" +\n                          annotation +\n                          (d.bootstrap\n                              ? \"<br/>Confidence level: \" +\n                                Math.round(100 * d.bootstrap)\n                              : \"\")\n                    : \"\";\n            })\n            .tooltip({ placement: \"top\", trigger: \"hover\" });\n    }\n});\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView = PhylovizLayoutBase.extend({\n    initialize: function(options) {\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout: function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal().projection(function(d) {\n            return [d.y, d.x];\n        });\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes: function(source) {\n        var self = this;\n        var fontSize = self.model.get(\"fontSize\") + \"px\";\n\n        // assigning properties from models\n        self.tree\n            .separation(self.model.get(\"separation\"))\n            .leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500;\n\n        var nodes = self.tree\n            .separation(self.model.get(\"separation\"))\n            .nodes(self.model.root);\n\n        var node = self.vis.selectAll(\"g.node\").data(nodes, function(d) {\n            return d.name + d.id || (d.id = ++self.i);\n        });\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node\n            .enter()\n            .append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", function() {\n                d3.event.stopPropagation();\n            })\n            .on(\"click\", function(d) {\n                if (d3.event.altKey) {\n                    self.selectNode(d); // display info if alt is pressed\n                } else {\n                    if (d.children && d.children.length === 0) {\n                        return;\n                    } // there is no need to toggle leaves\n                    self.model.toggle(d); // contract/expand nodes at data level\n                    self.updateAndRender(d); // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(source) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\"transform\", function(d) {\n            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n        });\n\n        nodeEnter\n            .append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeEnter\n            .append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", function(d) {\n                return d.children || d._children ? -10 : 10;\n            })\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", function(d) {\n                return d.children || d._children ? \"end\" : \"start\";\n            })\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition().duration(duration);\n\n        nodeUpdate.attr(\"transform\", function(d) {\n            return \"translate(\" + d.y + \",\" + d.x + \")\";\n        });\n\n        nodeUpdate\n            .select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeUpdate\n            .select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(function(d) {\n                return d.name && d.name !== \"\"\n                    ? d.name\n                    : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\";\n            });\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node\n            .exit()\n            .transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(function(d) {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n});\n\nvar PhylovizView = Backbone.View.extend({\n    className: \"phyloviz\",\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(function() {\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior\n            .zoom()\n            .scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({\n            phyloTree: self.phyloTree\n        });\n        self.nodeSelectionView = new NodeSelectionView({\n            phyloTree: self.phyloTree\n        });\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(function() {\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function() {\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3\n            .select(\"#PhyloViz\")\n            .append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(\n                self.zoomFunc.on(\"zoom\", function() {\n                    self.zoomAndPan();\n                })\n            );\n\n        self.boundingRect = self.mainSVG\n            .append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model: self.phyloTree,\n            width: self.width,\n            height: self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(\n            \"Phylogenetic Tree from \" + self.phyloTree.get(\"title\") + \":\"\n        );\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan: function(event) {\n        var zoomParams;\n        var translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this;\n        var scaleFactor = self.zoomFunc.scale();\n        var translationCoor = self.zoomFunc.translate();\n        var zoomStatement = \"\";\n        var translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0, 0];\n                break;\n            case \"+\":\n                scaleFactor *= 1.1;\n                break;\n            case \"-\":\n                scaleFactor *= 0.9;\n                break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) {\n            return;\n        }\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement =\n            \"translate(\" +\n            self.margins[3] +\n            \",\" +\n            self.margins[0] +\n            \")\" +\n            \" scale(\" +\n            scaleFactor +\n            \")\";\n\n        // Do manual translation.\n        if (d3.event !== null) {\n            translateStatement = \"translate(\" + d3.event.translate + \")\";\n        } else {\n            if (typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)) {\n                    translationCoor = [\n                        translationCoor[0] + parseFloat(x),\n                        translationCoor[1] + parseFloat(y)\n                    ];\n                }\n            }\n            self.zoomFunc.translate(translationCoor); // update zoomFunc\n            translateStatement = \"translate(\" + translationCoor + \")\";\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz: function() {\n        var self = this;\n        var treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(\n            self.phyloTree.get(\"dataset\").url(),\n            {\n                tree_index: treeIndex,\n                data_type: \"raw_data\"\n            },\n            function(packedJson) {\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            }\n        );\n    }\n});\n\nvar HeaderButtons = Backbone.View.extend({\n    initialize: function(phylovizView) {\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\")\n            .off()\n            .on(\"change\", function() {\n                self.phylovizView.reloadViz();\n            });\n    },\n\n    initRightHeaderBtns: function() {\n        var self = this;\n\n        var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"gear\",\n                    title: \"PhyloViz Settings\",\n                    on_click: function() {\n                        $(\"#SettingsMenu\").show();\n                        self.settingsMenu.updateUI();\n                    }\n                },\n                {\n                    icon_class: \"disk\",\n                    title: \"Save visualization\",\n                    on_click: function() {\n                        var nexSelected = $(\n                            \"#phylovizNexSelector option:selected\"\n                        ).text();\n                        if (nexSelected) {\n                            self.phylovizView.phyloTree.set(\n                                \"title\",\n                                nexSelected\n                            );\n                        }\n                        self.phylovizView.phyloTree.save();\n                    }\n                },\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Search / Edit Nodes\",\n                    on_click: function() {\n                        $(\"#nodeSelectionView\").show();\n                    }\n                },\n                {\n                    icon_class: \"information\",\n                    title: \"Phyloviz Help\",\n                    on_click: function() {\n                        window.open(\n                            \"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\"\n                        );\n                        // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this;\n\n        var navMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"zoom-in\",\n                    title: \"Zoom in\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                    }\n                },\n                {\n                    icon_class: \"zoom-out\",\n                    title: \"Zoom out\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                    }\n                },\n                {\n                    icon_class: \"arrow-circle\",\n                    title: \"Reset Zoom/Pan\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({\n                            zoom: \"reset\"\n                        });\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\nvar SettingsMenu = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation: $(\"#phyloVizTreeSeparation\"),\n            leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n            fontSize: $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.el.hide();\n            });\n        $(\"#phylovizResetSettingsBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.resetToDefaults();\n            });\n        $(\"#phylovizApplySettingsBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.apply();\n            });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply: function() {\n        var self = this;\n        if (\n            !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n        ) {\n            return;\n        }\n        $.each(self.inputs, function(key, $input) {\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI: function() {\n        var self = this;\n        $.each(self.inputs, function(key, $input) {\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults: function() {\n        $(\".tooltip\").remove(); // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, function(key, value) {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function() {}\n});\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit: $(\"#phylovizEditNodesCheck\"),\n            saveChanges: $(\"#phylovizNodeSaveChanges\"),\n            cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n            name: $(\"#phyloVizSelectedNodeName\"),\n            dist: $(\"#phyloVizSelectedNodeDist\"),\n            annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name: null,\n            dist: null,\n            annotation: null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.el.hide();\n            });\n        self.UI.saveChanges.off().on(\"click\", function() {\n            self.updateNodes();\n        });\n        self.UI.cancelChanges.off().on(\"click\", function() {\n            self.cancelChanges();\n        });\n\n        (function($) {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function(isEnabled) {\n                return $(this).each(function() {\n                    if (isEnabled) {\n                        $(this).removeAttr(\"disabled\");\n                    } else {\n                        $(this).attr(\"disabled\", \"disabled\");\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", function() {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI: function() {\n        var self = this;\n        var checked = self.UI.enableEdit.is(\":checked\");\n\n        if (!checked) {\n            self.cancelChanges();\n        }\n\n        $.each(self.valuesOfConcern, function(key, value) {\n            self.UI[key].enable(checked);\n        });\n        if (checked) {\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            $.each(self.valuesOfConcern, function(key, value) {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            if (\n                !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation)\n            ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, function(key, value) {\n                node[key] = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize: function() {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", function() {\n            var searchTerm = $(\"#phyloVizSearchTerm\");\n\n            var searchConditionVal = $(\"#phyloVizSearchCondition\")\n                .val()\n                .split(\"-\");\n\n            var attr = searchConditionVal[0];\n            var condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\") {\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree: function(attr, condition, val) {\n        d3.selectAll(\"g.node\").classed(\"searchHighlight\", function(d) {\n            var attrVal = d[attr];\n            if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                if (attr === \"dist\") {\n                    switch (condition) {\n                        case \"greaterEqual\":\n                            return attrVal >= +val;\n                        case \"lesserEqual\":\n                            return attrVal <= +val;\n                        default:\n                            return;\n                    }\n                } else if (attr === \"name\" || attr === \"annotation\") {\n                    return (\n                        attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1\n                    );\n                }\n            }\n        });\n    }\n});\n\nexport default {\n    PhylovizView: PhylovizView\n};\n"]}