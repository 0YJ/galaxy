{"version":3,"sources":["viz/phyloviz.js"],"names":["alert","layout","node","maxDepth","vertSeparation","parent","children","nodes","sumChildVertSeparation","dist","defaultDist","y0","depthSeparation","maxTextWidth","child","x0","length","leafIndex","self","this","hierarchy","_d2","default","sort","value","height","layoutMode","leafHeight","PhyloTreeLayout","inputLeafHeight","mode","layoutAngle","angle","isNaN","separation","links","tree","i","toString","call","d","_nodes","numLeaves","window","_d","forEach","depth","push","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","$inputKey","min","max","val","fieldName","attr","replace","n","parseFloat","isFinite","hasIllegalJsonCharacters","search","PhyloTree","_visualization2","Visualization","defaults","type","title","scaleFactor","options","translate","fontSize","Dataset","selectedNode","dataset_id","root","toggle","_children","toggleAll","getData","save","cleanTree","_selected","config","attributes","show_message","$","data","ajax","stringify","url","dataType","res","nodeRadius","stdInit","model","on","updateAndRender","vis","width","source","renderNodes","renderLinks","link","diagonal","duration","selectAll","target","id","calcalateLinePos","pos0","pos1","pos2","linkEnter","append","linkUpdate","select","linkExit","remove","exit","selectNode","set","name","addTooltips","annotation","__data__","PhylovizLinearView","PhylovizLayoutBase","bootstrap","Math","round","tooltip","placement","trigger","margins","y","x","nodeEnter","event","stopPropagation","get","enter","style","altKey","nodeUpdate","transition","nodeExit","PhylovizView","initialize","MAX_SCALE","resize","phyloTree","PhyloVizSearch","setTimeout","zoomAndPan","mainSVG","MIN_SCALE","layoutOptions","render","linearView","zoomFunc","behavior","zoom","scaleExtent","zoomParams","translateParams","settingsMenu","SettingsMenu","nodeSelectionView","translationCoor","translateStatement","empty","boundingRect","text","packedJson","HeaderButtons","phylovizView","zoomStatement","initRightHeaderBtns","scale","icon_class","on_click","split","show","tooltip_config","reloadViz","tree_index","treeIndex","data_type","off","rightMenu","_iconButton2","create_icon_buttons_menu","updateUI","inputs","key","nexSelected","$input","resetToDefaults","open","NodeSelectionView","$el","cancelChanges","valuesOfConcern","hide","saveChanges","each","enableEdit","checked","UI","apply","searchTree","el","updateNodes","isEnabled","removeAttr","jQuery","toggleUI","is","enable","Date","searchTerm","searchConditionVal","condition","classed","attrVal","toLowerCase","indexOf"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["import d3 from \"libs/d3\";\nimport visualization_mod from \"viz/visualization\";\nimport data_mod from \"mvc/dataset/data\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n    className: \"UserMenuBase\",\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue: function($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val(),\n            fieldName =\n                $inputKey.attr(\"displayLabel\") ||\n                $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)) {\n            alert(fieldName + \" is not a number!\");\n            return false;\n        }\n\n        if (value > max) {\n            alert(fieldName + \" is too large.\");\n            return false;\n        } else if (value < min) {\n            alert(fieldName + \" is too small.\");\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters: function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n            alert(\n                \"Named fields cannot contain these illegal characters: \" +\n                    \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n            );\n            return true;\n        }\n        return false;\n    }\n});\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n    var self = this,\n        hierarchy = d3.layout\n            .hierarchy()\n            .sort(null)\n            .value(null),\n        height = 360, // ! represents both the layout angle and the height of the layout, in px\n        layoutMode = \"Linear\",\n        leafHeight = 18, // height of each individual leaf node\n        depthSeparation = 200, // separation between nodes of different depth, in px\n        leafIndex = 0, // change to recurssive call\n        defaultDist = 0.5, // tree defaults to 0.5 dist if no dist is specified\n        maxTextWidth = 50; // maximum length of the text labels\n\n    self.leafHeight = function(inputLeafHeight) {\n        if (typeof inputLeafHeight === \"undefined\") {\n            return leafHeight;\n        } else {\n            leafHeight = inputLeafHeight;\n            return self;\n        }\n    };\n\n    self.layoutMode = function(mode) {\n        if (typeof mode === \"undefined\") {\n            return layoutMode;\n        } else {\n            layoutMode = mode;\n            return self;\n        }\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = function(angle) {\n        if (typeof angle === \"undefined\") {\n            return height;\n        }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) {\n            return self;\n        } else {\n            height = angle;\n            return self;\n        }\n    };\n\n    self.separation = function(dist) {\n        // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\") {\n            return depthSeparation;\n        } else {\n            depthSeparation = dist;\n            return self;\n        }\n    };\n\n    self.links = function(nodes) {\n        // uses d3 native method to generate links. Done.\n        return d3.layout.tree().links(nodes);\n    };\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = function(d, i) {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(d) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i),\n            nodes = [],\n            maxDepth = 0,\n            numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(function(node) {\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(function(node) {\n            if (!node.children) {\n                //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight =\n            layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout(node, maxDepth, vertSeparation, parent) {\n        var children = node.children,\n            sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null) {\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {\n            //root node\n            node.y0 = maxTextWidth;\n        }\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach(function(child) {\n                child.parent = node;\n                sumChildVertSeparation += layout(\n                    child,\n                    maxDepth,\n                    vertSeparation,\n                    node\n                );\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults: {\n        layout: \"Linear\",\n        separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type: \"phyloviz\", // visualization type\n        title: \"Title\",\n        scaleFactor: 1,\n        translate: [0, 0],\n        fontSize: 12, //fontSize of node label\n        selectedNode: null,\n        nodeAttrChangedTime: 0\n    },\n\n    initialize: function(options) {\n        this.set(\n            \"dataset\",\n            new data_mod.Dataset({\n                id: options.dataset_id\n            })\n        );\n    },\n\n    root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle: function(d) {\n        if (typeof d === \"undefined\") {\n            return;\n        }\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll: function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData: function() {\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node) {\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected) {\n                delete node._selected;\n            }\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                config: JSON.stringify(config),\n                type: \"phyloviz\"\n            },\n            success: function(res) {\n                hide_modal();\n            }\n        });\n    }\n});\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase = Backbone.View.extend({\n    defaults: {\n        nodeRadius: 4.5 // radius of each node in the diagram\n    },\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit: function(options) {\n        var self = this;\n        self.model.on(\n            \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender,\n            self\n        );\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender: function(source) {\n        var vis = d3.select(\".vis\"),\n            self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks: function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis\n            .selectAll(\"g.completeLink\")\n            .data(self.tree.links(self.nodes), function(d) {\n                return d.target.id;\n            });\n\n        var calcalateLinePos = function(d) {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = d.source.y0 + \" \" + d.source.x0;\n            // position where the line makes a right angle bend\n            d.pos1 = d.source.y0 + \" \" + d.target.x0;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = d.target.y0 + \" \" + d.target.x0;\n        };\n\n        var linkEnter = link\n            .enter()\n            .insert(\"svg:g\", \"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter\n            .append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0 + \" L \" + d.pos1;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\").attr(\"d\", function(d) {\n            calcalateLinePos(d);\n            return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n        });\n\n        var linkExit = link.exit().remove();\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode: function(node) {\n        var self = this;\n        d3.selectAll(\"g.node\").classed(\"selectedHighlight\", function(d) {\n            if (node.id === d.id) {\n                if (node._selected) {\n                    // for de=selecting node.\n                    delete node._selected;\n                    return false;\n                } else {\n                    node._selected = true;\n                    return true;\n                }\n            }\n            return false;\n        });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips: function() {\n        $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function() {\n                var d = this.__data__,\n                    annotation = d.annotation || \"None\";\n                return d\n                    ? (d.name ? d.name + \"<br/>\" : \"\") +\n                          \"Dist: \" +\n                          d.dist +\n                          \" <br/>Annotation1: \" +\n                          annotation +\n                          (d.bootstrap\n                              ? \"<br/>Confidence level: \" +\n                                Math.round(100 * d.bootstrap)\n                              : \"\")\n                    : \"\";\n            })\n            .tooltip({ placement: \"top\", trigger: \"hover\" });\n    }\n});\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView = PhylovizLayoutBase.extend({\n    initialize: function(options) {\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout: function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal().projection(function(d) {\n            return [d.y, d.x];\n        });\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes: function(source) {\n        var self = this,\n            fontSize = self.model.get(\"fontSize\") + \"px\";\n\n        // assigning properties from models\n        self.tree\n            .separation(self.model.get(\"separation\"))\n            .leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500,\n            nodes = self.tree\n                .separation(self.model.get(\"separation\"))\n                .nodes(self.model.root);\n\n        var node = self.vis.selectAll(\"g.node\").data(nodes, function(d) {\n            return d.name + d.id || (d.id = ++self.i);\n        });\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node\n            .enter()\n            .append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", function() {\n                d3.event.stopPropagation();\n            })\n            .on(\"click\", function(d) {\n                if (d3.event.altKey) {\n                    self.selectNode(d); // display info if alt is pressed\n                } else {\n                    if (d.children && d.children.length === 0) {\n                        return;\n                    } // there is no need to toggle leaves\n                    self.model.toggle(d); // contract/expand nodes at data level\n                    self.updateAndRender(d); // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(source) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\"transform\", function(d) {\n            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n        });\n\n        nodeEnter\n            .append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeEnter\n            .append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", function(d) {\n                return d.children || d._children ? -10 : 10;\n            })\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", function(d) {\n                return d.children || d._children ? \"end\" : \"start\";\n            })\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition().duration(duration);\n\n        nodeUpdate.attr(\"transform\", function(d) {\n            return \"translate(\" + d.y + \",\" + d.x + \")\";\n        });\n\n        nodeUpdate\n            .select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", function(d) {\n                return d._children ? \"lightsteelblue\" : \"#fff\";\n            });\n\n        nodeUpdate\n            .select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(function(d) {\n                return d.name && d.name !== \"\"\n                    ? d.name\n                    : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\";\n            });\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node\n            .exit()\n            .transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(function(d) {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n});\n\nvar PhylovizView = Backbone.View.extend({\n    className: \"phyloviz\",\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(function() {\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior\n            .zoom()\n            .scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({\n            phyloTree: self.phyloTree\n        });\n        self.nodeSelectionView = new NodeSelectionView({\n            phyloTree: self.phyloTree\n        });\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(function() {\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function() {\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3\n            .select(\"#PhyloViz\")\n            .append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(\n                self.zoomFunc.on(\"zoom\", function() {\n                    self.zoomAndPan();\n                })\n            );\n\n        self.boundingRect = self.mainSVG\n            .append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model: self.phyloTree,\n            width: self.width,\n            height: self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(\n            \"Phylogenetic Tree from \" + self.phyloTree.get(\"title\") + \":\"\n        );\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan: function(event) {\n        var zoomParams, translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this,\n            scaleFactor = self.zoomFunc.scale(),\n            translationCoor = self.zoomFunc.translate(),\n            zoomStatement = \"\",\n            translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0, 0];\n                break;\n            case \"+\":\n                scaleFactor *= 1.1;\n                break;\n            case \"-\":\n                scaleFactor *= 0.9;\n                break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) {\n            return;\n        }\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement =\n            \"translate(\" +\n            self.margins[3] +\n            \",\" +\n            self.margins[0] +\n            \")\" +\n            \" scale(\" +\n            scaleFactor +\n            \")\";\n\n        // Do manual translation.\n        if (d3.event !== null) {\n            translateStatement = \"translate(\" + d3.event.translate + \")\";\n        } else {\n            if (typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)) {\n                    translationCoor = [\n                        translationCoor[0] + parseFloat(x),\n                        translationCoor[1] + parseFloat(y)\n                    ];\n                }\n            }\n            self.zoomFunc.translate(translationCoor); // update zoomFunc\n            translateStatement = \"translate(\" + translationCoor + \")\";\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz: function() {\n        var self = this,\n            treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(\n            self.phyloTree.get(\"dataset\").url(),\n            {\n                tree_index: treeIndex,\n                data_type: \"raw_data\"\n            },\n            function(packedJson) {\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            }\n        );\n    }\n});\n\nvar HeaderButtons = Backbone.View.extend({\n    initialize: function(phylovizView) {\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\")\n            .off()\n            .on(\"change\", function() {\n                self.phylovizView.reloadViz();\n            });\n    },\n\n    initRightHeaderBtns: function() {\n        var self = this;\n\n        var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"gear\",\n                    title: \"PhyloViz Settings\",\n                    on_click: function() {\n                        $(\"#SettingsMenu\").show();\n                        self.settingsMenu.updateUI();\n                    }\n                },\n                {\n                    icon_class: \"disk\",\n                    title: \"Save visualization\",\n                    on_click: function() {\n                        var nexSelected = $(\n                            \"#phylovizNexSelector option:selected\"\n                        ).text();\n                        if (nexSelected) {\n                            self.phylovizView.phyloTree.set(\n                                \"title\",\n                                nexSelected\n                            );\n                        }\n                        self.phylovizView.phyloTree.save();\n                    }\n                },\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Search / Edit Nodes\",\n                    on_click: function() {\n                        $(\"#nodeSelectionView\").show();\n                    }\n                },\n                {\n                    icon_class: \"information\",\n                    title: \"Phyloviz Help\",\n                    on_click: function() {\n                        window.open(\n                            \"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\"\n                        );\n                        // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this,\n            navMenu = mod_icon_btn.create_icon_buttons_menu(\n                [\n                    {\n                        icon_class: \"zoom-in\",\n                        title: \"Zoom in\",\n                        on_click: function() {\n                            self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                        }\n                    },\n                    {\n                        icon_class: \"zoom-out\",\n                        title: \"Zoom out\",\n                        on_click: function() {\n                            self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                        }\n                    },\n                    {\n                        icon_class: \"arrow-circle\",\n                        title: \"Reset Zoom/Pan\",\n                        on_click: function() {\n                            self.phylovizView.zoomAndPan({\n                                zoom: \"reset\"\n                            });\n                        }\n                    }\n                ],\n                {\n                    tooltip_config: { placement: \"bottom\" }\n                }\n            );\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\nvar SettingsMenu = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation: $(\"#phyloVizTreeSeparation\"),\n            leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n            fontSize: $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.el.hide();\n            });\n        $(\"#phylovizResetSettingsBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.resetToDefaults();\n            });\n        $(\"#phylovizApplySettingsBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.apply();\n            });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply: function() {\n        var self = this;\n        if (\n            !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n        ) {\n            return;\n        }\n        $.each(self.inputs, function(key, $input) {\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI: function() {\n        var self = this;\n        $.each(self.inputs, function(key, $input) {\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults: function() {\n        $(\".tooltip\").remove(); // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, function(key, value) {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function() {}\n});\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit: $(\"#phylovizEditNodesCheck\"),\n            saveChanges: $(\"#phylovizNodeSaveChanges\"),\n            cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n            name: $(\"#phyloVizSelectedNodeName\"),\n            dist: $(\"#phyloVizSelectedNodeDist\"),\n            annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name: null,\n            dist: null,\n            annotation: null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\")\n            .off()\n            .on(\"click\", function() {\n                self.el.hide();\n            });\n        self.UI.saveChanges.off().on(\"click\", function() {\n            self.updateNodes();\n        });\n        self.UI.cancelChanges.off().on(\"click\", function() {\n            self.cancelChanges();\n        });\n\n        (function($) {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function(isEnabled) {\n                return $(this).each(function() {\n                    if (isEnabled) {\n                        $(this).removeAttr(\"disabled\");\n                    } else {\n                        $(this).attr(\"disabled\", \"disabled\");\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", function() {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI: function() {\n        var self = this,\n            checked = self.UI.enableEdit.is(\":checked\");\n\n        if (!checked) {\n            self.cancelChanges();\n        }\n\n        $.each(self.valuesOfConcern, function(key, value) {\n            self.UI[key].enable(checked);\n        });\n        if (checked) {\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges: function() {\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            $.each(self.valuesOfConcern, function(key, value) {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes: function() {\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            if (\n                !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation)\n            ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, function(key, value) {\n                node[key] = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize: function() {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", function() {\n            var searchTerm = $(\"#phyloVizSearchTerm\"),\n                searchConditionVal = $(\"#phyloVizSearchCondition\")\n                    .val()\n                    .split(\"-\"),\n                attr = searchConditionVal[0],\n                condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\") {\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree: function(attr, condition, val) {\n        d3.selectAll(\"g.node\").classed(\"searchHighlight\", function(d) {\n            var attrVal = d[attr];\n            if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                if (attr === \"dist\") {\n                    switch (condition) {\n                        case \"greaterEqual\":\n                            return attrVal >= +val;\n                        case \"lesserEqual\":\n                            return attrVal <= +val;\n                        default:\n                            return;\n                    }\n                } else if (attr === \"name\" || attr === \"annotation\") {\n                    return (\n                        attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1\n                    );\n                }\n            }\n        });\n    }\n});\n\nexport default {\n    PhylovizView: PhylovizView\n};\n"]}