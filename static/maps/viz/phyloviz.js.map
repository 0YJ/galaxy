{"version":3,"sources":["viz/phyloviz.js"],"names":["PhyloTreeLayout","layout","node","maxDepth","vertSeparation","parent","children","nodes","numLeaves","depth","dist","y0","depthSeparation","forEach","child","sumChildVertSeparation","x0","length","leafIndex","x","self","this","alert","fieldName","hierarchy","sort","height","layoutMode","leafHeight","defaultDist","maxTextWidth","inputLeafHeight","mode","angle","separation","links","d3","tree","d","i","toString","call","_nodes","window","_d","push","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","$inputKey","min","max","value","val","attr","replace","n","isNaN","parseFloat","isFinite","isNumeric","hasIllegalJsonCharacters","search","Visualization","defaults","title","translate","fontSize","selectedNode","initialize","options","set","_data2","default","Dataset","id","dataset_id","_children","toggleAll","toggle","root","cleanTree","getData","_selected","config","jQuery","attributes","show_message","$","ajax","url","type","dataType","data","success","hide_modal","model","on","updateAndRender","vis","PhylovizLayoutBase","nodeRadius","width","source","select","renderNodes","renderLinks","link","duration","target","calcalateLinePos","pos0","pos1","pos2","enter","insert","append","transition","linkEnter","exit","remove","selectNode","linkExit","selectAll","classed","name","annotation","__data__","placement","round","trigger","tooltip","stdInit","margins","diagonal","svg","projection","y","get","event","nodeEnter","stopPropagation","altKey","nodeUpdate","style","nodeExit","PhylovizView","bootstrap","Math","zoomFunc","behavior","settingsMenu","phyloTree","MAX_DISPLACEMENT","nodeSelectionView","PhyloVizSearch","radius","resize","render","PhyloTree","zoom","boundingRect","MIN_SCALE","mainSVG","scale","setTimeout","linearView","zoomAndPan","empty","zoomParams","translateParams","translationCoor","zoomStatement","scaleFactor","layoutOptions","text","PhylovizLinearView","translateStatement","reloadViz","treeIndex","getJSON","tree_index","data_type","packedJson","MAX_SCALE","initNavBtns","initRightHeaderBtns","split","rightMenu","create_icon_buttons_menu","icon_class","on_click","show","nexSelected","phylovizView","open","tooltip_config","HeaderButtons","navMenu","off","_iconButton2","SettingsMenu","inputs","resetToDefaults","save","updateUI","$input","$el","hide","el","updateNodes","cancelChanges","enable","enableEdit","apply","toggleUI","checked","each","valuesOfConcern","key","NodeSelectionView","UI","saveChanges","condition","fn","isEnabled","removeAttr","attrVal","is","Date","searchTerm","searchConditionVal","searchTree","toLowerCase","indexOf"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["import * as d3 from \"libs/d3\";\nimport visualization_mod from \"viz/visualization\";\nimport data_mod from \"mvc/dataset/data\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n    className: \"UserMenuBase\",\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue: function($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val();\n\n        var fieldName =\n            $inputKey.attr(\"displayLabel\") ||\n            $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)) {\n            alert(fieldName + \" is not a number!\");\n            return false;\n        }\n\n        if (value > max) {\n            alert(fieldName + \" is too large.\");\n            return false;\n        } else if (value < min) {\n            alert(fieldName + \" is too small.\");\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters: function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n            alert(\n                \"Named fields cannot contain these illegal characters: \" +\n                    \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n            );\n            return true;\n        }\n        return false;\n    }\n});\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n    var self = this; // maximum length of the text labels\n\n    var hierarchy = d3.layout\n        .hierarchy()\n        .sort(null)\n        .value(null);\n\n    var // ! represents both the layout angle and the height of the layout, in px\n    height = 360;\n\n    var layoutMode = \"Linear\";\n\n    var // height of each individual leaf node\n    leafHeight = 18;\n\n    var // separation between nodes of different depth, in px\n    depthSeparation = 200;\n\n    var // change to recurssive call\n    leafIndex = 0;\n\n    var // tree defaults to 0.5 dist if no dist is specified\n    defaultDist = 0.5;\n\n    var maxTextWidth = 50;\n\n    self.leafHeight = inputLeafHeight => {\n        if (typeof inputLeafHeight === \"undefined\") {\n            return leafHeight;\n        } else {\n            leafHeight = inputLeafHeight;\n            return self;\n        }\n    };\n\n    self.layoutMode = mode => {\n        if (typeof mode === \"undefined\") {\n            return layoutMode;\n        } else {\n            layoutMode = mode;\n            return self;\n        }\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = angle => {\n        if (typeof angle === \"undefined\") {\n            return height;\n        }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) {\n            return self;\n        } else {\n            height = angle;\n            return self;\n        }\n    };\n\n    self.separation = dist => {\n        // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\") {\n            return depthSeparation;\n        } else {\n            depthSeparation = dist;\n            return self;\n        }\n    };\n\n    self.links = (\n        nodes // uses d3 native method to generate links. Done.\n    ) => d3.layout.tree().links(nodes);\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = (d, i) => {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(d) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i);\n\n        var nodes = [];\n        var maxDepth = 0;\n        var numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(node => {\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(node => {\n            if (!node.children) {\n                //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight =\n            layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout(node, maxDepth, vertSeparation, parent) {\n        var children = node.children;\n        var sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null) {\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {\n            //root node\n            node.y0 = maxTextWidth;\n        }\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach(child => {\n                child.parent = node;\n                sumChildVertSeparation += layout(\n                    child,\n                    maxDepth,\n                    vertSeparation,\n                    node\n                );\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults: {\n        layout: \"Linear\",\n        separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type: \"phyloviz\", // visualization type\n        title: \"Title\",\n        scaleFactor: 1,\n        translate: [0, 0],\n        fontSize: 12, //fontSize of node label\n        selectedNode: null,\n        nodeAttrChangedTime: 0\n    },\n\n    initialize: function(options) {\n        this.set(\n            \"dataset\",\n            new data_mod.Dataset({\n                id: options.dataset_id\n            })\n        );\n    },\n\n    root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle: function(d) {\n        if (typeof d === \"undefined\") {\n            return;\n        }\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll: function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData: function() {\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node) {\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected) {\n                delete node._selected;\n            }\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                config: JSON.stringify(config),\n                type: \"phyloviz\"\n            },\n            success: function(res) {\n                hide_modal();\n            }\n        });\n    }\n});\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase = Backbone.View.extend({\n    defaults: {\n        nodeRadius: 4.5 // radius of each node in the diagram\n    },\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit: function(options) {\n        var self = this;\n        self.model.on(\n            \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender,\n            self\n        );\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender: function(source) {\n        var vis = d3.select(\".vis\");\n        var self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks: function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis\n            .selectAll(\"g.completeLink\")\n            .data(self.tree.links(self.nodes), d => d.target.id);\n\n        var calcalateLinePos = d => {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = d.source.y0 + \" \" + d.source.x0;\n            // position where the line makes a right angle bend\n            d.pos1 = d.source.y0 + \" \" + d.target.x0;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = d.target.y0 + \" \" + d.target.x0;\n        };\n\n        var linkEnter = link\n            .enter()\n            .insert(\"svg:g\", \"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter\n            .append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", d => {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0 + \" L \" + d.pos1;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\").attr(\"d\", d => {\n            calcalateLinePos(d);\n            return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n        });\n\n        var linkExit = link.exit().remove();\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode: function(node) {\n        var self = this;\n        d3.selectAll(\"g.node\").classed(\"selectedHighlight\", d => {\n            if (node.id === d.id) {\n                if (node._selected) {\n                    // for de=selecting node.\n                    delete node._selected;\n                    return false;\n                } else {\n                    node._selected = true;\n                    return true;\n                }\n            }\n            return false;\n        });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips: function() {\n        $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function() {\n                var d = this.__data__;\n                var annotation = d.annotation || \"None\";\n                return d\n                    ? (d.name ? d.name + \"<br/>\" : \"\") +\n                          \"Dist: \" +\n                          d.dist +\n                          \" <br/>Annotation1: \" +\n                          annotation +\n                          (d.bootstrap\n                              ? \"<br/>Confidence level: \" +\n                                Math.round(100 * d.bootstrap)\n                              : \"\")\n                    : \"\";\n            })\n            .tooltip({ placement: \"top\", trigger: \"hover\" });\n    }\n});\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView = PhylovizLayoutBase.extend({\n    initialize: function(options) {\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout: function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes: function(source) {\n        var self = this;\n        var fontSize = self.model.get(\"fontSize\") + \"px\";\n\n        // assigning properties from models\n        self.tree\n            .separation(self.model.get(\"separation\"))\n            .leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500;\n\n        var nodes = self.tree\n            .separation(self.model.get(\"separation\"))\n            .nodes(self.model.root);\n\n        var node = self.vis\n            .selectAll(\"g.node\")\n            .data(nodes, d => d.name + d.id || (d.id = ++self.i));\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node\n            .enter()\n            .append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", () => {\n                d3.event.stopPropagation();\n            })\n            .on(\"click\", d => {\n                if (d3.event.altKey) {\n                    self.selectNode(d); // display info if alt is pressed\n                } else {\n                    if (d.children && d.children.length === 0) {\n                        return;\n                    } // there is no need to toggle leaves\n                    self.model.toggle(d); // contract/expand nodes at data level\n                    self.updateAndRender(d); // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(source) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\n            \"transform\",\n            d => \"translate(\" + source.y0 + \",\" + source.x0 + \")\"\n        );\n\n        nodeEnter\n            .append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", d => (d._children ? \"lightsteelblue\" : \"#fff\"));\n\n        nodeEnter\n            .append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", d => (d.children || d._children ? -10 : 10))\n            .attr(\"dy\", \".35em\")\n            .attr(\n                \"text-anchor\",\n                d => (d.children || d._children ? \"end\" : \"start\")\n            )\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition().duration(duration);\n\n        nodeUpdate.attr(\"transform\", d => \"translate(\" + d.y + \",\" + d.x + \")\");\n\n        nodeUpdate\n            .select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", d => (d._children ? \"lightsteelblue\" : \"#fff\"));\n\n        nodeUpdate\n            .select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(\n                d =>\n                    d.name && d.name !== \"\"\n                        ? d.name\n                        : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\"\n            );\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node\n            .exit()\n            .transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(d => {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n});\n\nvar PhylovizView = Backbone.View.extend({\n    className: \"phyloviz\",\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(() => {\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior\n            .zoom()\n            .scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({\n            phyloTree: self.phyloTree\n        });\n        self.nodeSelectionView = new NodeSelectionView({\n            phyloTree: self.phyloTree\n        });\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(() => {\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function() {\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3\n            .select(\"#PhyloViz\")\n            .append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(\n                self.zoomFunc.on(\"zoom\", () => {\n                    self.zoomAndPan();\n                })\n            );\n\n        self.boundingRect = self.mainSVG\n            .append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model: self.phyloTree,\n            width: self.width,\n            height: self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(\n            \"Phylogenetic Tree from \" + self.phyloTree.get(\"title\") + \":\"\n        );\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan: function(event) {\n        var zoomParams;\n        var translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this;\n        var scaleFactor = self.zoomFunc.scale();\n        var translationCoor = self.zoomFunc.translate();\n        var zoomStatement = \"\";\n        var translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0, 0];\n                break;\n            case \"+\":\n                scaleFactor *= 1.1;\n                break;\n            case \"-\":\n                scaleFactor *= 0.9;\n                break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) {\n            return;\n        }\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement =\n            \"translate(\" +\n            self.margins[3] +\n            \",\" +\n            self.margins[0] +\n            \")\" +\n            \" scale(\" +\n            scaleFactor +\n            \")\";\n\n        // Do manual translation.\n        if (d3.event !== null) {\n            translateStatement = \"translate(\" + d3.event.translate + \")\";\n        } else {\n            if (typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)) {\n                    translationCoor = [\n                        translationCoor[0] + parseFloat(x),\n                        translationCoor[1] + parseFloat(y)\n                    ];\n                }\n            }\n            self.zoomFunc.translate(translationCoor); // update zoomFunc\n            translateStatement = \"translate(\" + translationCoor + \")\";\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz: function() {\n        var self = this;\n        var treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(\n            self.phyloTree.get(\"dataset\").url(),\n            {\n                tree_index: treeIndex,\n                data_type: \"raw_data\"\n            },\n            packedJson => {\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            }\n        );\n    }\n});\n\nvar HeaderButtons = Backbone.View.extend({\n    initialize: function(phylovizView) {\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\")\n            .off()\n            .on(\"change\", () => {\n                self.phylovizView.reloadViz();\n            });\n    },\n\n    initRightHeaderBtns: function() {\n        var self = this;\n\n        var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"gear\",\n                    title: \"PhyloViz Settings\",\n                    on_click: function() {\n                        $(\"#SettingsMenu\").show();\n                        self.settingsMenu.updateUI();\n                    }\n                },\n                {\n                    icon_class: \"disk\",\n                    title: \"Save visualization\",\n                    on_click: function() {\n                        var nexSelected = $(\n                            \"#phylovizNexSelector option:selected\"\n                        ).text();\n                        if (nexSelected) {\n                            self.phylovizView.phyloTree.set(\n                                \"title\",\n                                nexSelected\n                            );\n                        }\n                        self.phylovizView.phyloTree.save();\n                    }\n                },\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Search / Edit Nodes\",\n                    on_click: function() {\n                        $(\"#nodeSelectionView\").show();\n                    }\n                },\n                {\n                    icon_class: \"information\",\n                    title: \"Phyloviz Help\",\n                    on_click: function() {\n                        window.open(\n                            \"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\"\n                        );\n                        // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this;\n\n        var navMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"zoom-in\",\n                    title: \"Zoom in\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                    }\n                },\n                {\n                    icon_class: \"zoom-out\",\n                    title: \"Zoom out\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                    }\n                },\n                {\n                    icon_class: \"arrow-circle\",\n                    title: \"Reset Zoom/Pan\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({\n                            zoom: \"reset\"\n                        });\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\nvar SettingsMenu = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation: $(\"#phyloVizTreeSeparation\"),\n            leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n            fontSize: $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.el.hide();\n            });\n        $(\"#phylovizResetSettingsBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.resetToDefaults();\n            });\n        $(\"#phylovizApplySettingsBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.apply();\n            });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply: function() {\n        var self = this;\n        if (\n            !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n        ) {\n            return;\n        }\n        $.each(self.inputs, (key, $input) => {\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI: function() {\n        var self = this;\n        $.each(self.inputs, (key, $input) => {\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults: function() {\n        $(\".tooltip\").remove(); // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, (key, value) => {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function() {}\n});\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit: $(\"#phylovizEditNodesCheck\"),\n            saveChanges: $(\"#phylovizNodeSaveChanges\"),\n            cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n            name: $(\"#phyloVizSelectedNodeName\"),\n            dist: $(\"#phyloVizSelectedNodeDist\"),\n            annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name: null,\n            dist: null,\n            annotation: null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.el.hide();\n            });\n        self.UI.saveChanges.off().on(\"click\", () => {\n            self.updateNodes();\n        });\n        self.UI.cancelChanges.off().on(\"click\", () => {\n            self.cancelChanges();\n        });\n\n        ($ => {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function(isEnabled) {\n                return $(this).each(function() {\n                    if (isEnabled) {\n                        $(this).removeAttr(\"disabled\");\n                    } else {\n                        $(this).attr(\"disabled\", \"disabled\");\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", () => {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI: function() {\n        var self = this;\n        var checked = self.UI.enableEdit.is(\":checked\");\n\n        if (!checked) {\n            self.cancelChanges();\n        }\n\n        $.each(self.valuesOfConcern, (key, value) => {\n            self.UI[key].enable(checked);\n        });\n        if (checked) {\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            $.each(self.valuesOfConcern, (key, value) => {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            if (\n                !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation)\n            ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, (key, value) => {\n                node[key] = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize: function() {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", () => {\n            var searchTerm = $(\"#phyloVizSearchTerm\");\n\n            var searchConditionVal = $(\"#phyloVizSearchCondition\")\n                .val()\n                .split(\"-\");\n\n            var attr = searchConditionVal[0];\n            var condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\") {\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree: function(attr, condition, val) {\n        d3.selectAll(\"g.node\").classed(\"searchHighlight\", d => {\n            var attrVal = d[attr];\n            if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                if (attr === \"dist\") {\n                    switch (condition) {\n                        case \"greaterEqual\":\n                            return attrVal >= +val;\n                        case \"lesserEqual\":\n                            return attrVal <= +val;\n                        default:\n                            return;\n                    }\n                } else if (attr === \"name\" || attr === \"annotation\") {\n                    return (\n                        attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1\n                    );\n                }\n            }\n        });\n    }\n});\n\nexport default {\n    PhylovizView: PhylovizView\n};\n"]}