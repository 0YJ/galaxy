{"version":3,"sources":["viz/phyloviz.js"],"names":["define","d3","visualization_mod","data_mod","mod_icon_btn","PhyloTreeLayout","leafHeight","layoutMode","height","leafIndex","children","layout","dist","node","defaultDist","y0","parent","depthSeparation","maxTextWidth","child","maxDepth","vertSeparation","sumChildVertSeparation","x","x0","y","self","hierarchy","sort","value","inputLeafHeight","mode","layoutAngle","angle","isNaN","separation","links","nodes","tree","d","i","toString","call","_nodes","window","_d","forEach","depth","push","numLeaves","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","fieldName","$inputKey","min","max","val","parseFloat","attr","replace","n","isNumeric","isFinite","alert","hasIllegalJsonCharacters","search","PhyloTree","Visualization","scaleFactor","translate","fontSize","selectedNode","nodeAttrChangedTime","initialize","options","defaults","dataset_id","title","toggle","id","_children","root","toggleAll","length","this","getData","cleanTree","_selected","config","jQuery","attributes","show_message","$","ajax","url","type","dataType","data","success","stdInit","model","on","updateAndRender","vis","PhylovizLayoutBase","nodeRadius","width","source","select","renderNodes","diagonal","selectAll","renderLinks","target","calcalateLinePos","pos0","pos1","pos2","link","append","transition","duration","linkEnter","enter","exit","selectNode","linkExit","classed","set","name","annotation","remove","__data__","bootstrap","Math","round","addTooltips","placement","trigger","PhylovizLinearView","svg","get","event","stopPropagation","nodeEnter","style","nodeUpdate","text","nodeExit","PhylovizView","MIN_SCALE","MAX_DISPLACEMENT","radius","resize","phyloTree","zoomFunc","behavior","zoom","scaleExtent","MAX_SCALE","navMenu","HeaderButtons","SettingsMenu","nodeSelectionView","setTimeout","render","empty","mainSVG","zoomAndPan","boundingRect","layoutOptions","linearView","margins","zoomParams","zoomStatement","translateParams","scale","translationCoor","translateStatement","split","treeIndex","tree_index","reloadViz","phylovizView","packedJson","initRightHeaderBtns","off","nexSelected","icon_class","create_icon_buttons_menu","on_click","show","tooltip_config","initNavBtns","open","rightMenu","$el","inputs","apply","el","hide","resetToDefaults","updateUI","key","$input","each","enableEdit","NodeSelectionView","UI","saveChanges","updateNodes","cancelChanges","valuesOfConcern","toggleUI","fn","enable","isEnabled","removeAttr","checked","is","PhyloVizSearch","searchTerm","searchConditionVal","Date","searchTree","attrVal","condition","toLowerCase","indexOf"],"mappings":"YAAAA,SACI,UADJA,oBAGI,mBAIJ,sBAFG,SAASC,EAAIC,EAAmBC,EAAUC,GAyDzC,QAAAC,KAqEIC,QAAAA,GAAAA,EAAaC,EAAAA,EAA4BC,GACzCC,GAAAA,GAAAA,EAAAC,SACAC,EAAA,EAhCJC,EAAAC,EAAAD,MAAAE,CA8DI,OATAF,GAAOA,EAAO,EAAI,EAAIA,EAf1BC,EAAAD,KAAAA,EAkBQC,EAAKE,GADM,OAAXC,EACUA,EAAOD,GAAKH,EAAOK,EAEnBC,EAXlBR,GAKIA,EAAIE,QAAYA,SAAQE,GACxBF,EAAOA,OAAAC,EACPA,GAAAF,EAAAQ,EAAAC,EAAAC,EAAAR,KAEIA,EAAAA,GAAKE,EAAwBE,EAAAA,SARjCJ,EAAIH,GAAAA,EAAgBA,EAApBD,GACIa,GAUHT,EAAAU,EAAAV,EAAAW,GAkBDX,EAAKY,EAAIZ,EAAKE,GAfdF,EAAAW,GArGJ,GAAAE,GAIIpB,KAJJqB,EAIqB1B,EAAAU,OAAAgB,YAAAC,KAAA,MAAAC,MAAA,MACjBZ,EAAAA,IALJV,EAK2B,SACvBE,EANJ,GAAAQ,EAMmB,IACfH,EAAAA,EAPJA,EAOuB,GACnBI,EAAe,EA+FXL,OA5FRa,GAAAA,WAAKpB,SAAawB,GACd,WAAI,KAAAA,EAAuCxB,GAAEA,EAAOA,EAAPoB,IACKA,EAAAnB,WAAA,SAAAwB,GACrD,WAHD,KAAAA,EAAAxB,GAOWA,EAAawB,EAAaL,IADqBA,EAAAM,YACjD,SAAAC,GAAE1B,WAAawB,KAAbxB,EAAmBC,EAF9B0B,MAAAD,IAAAA,EAAA,GAAAA,EAAA,IAAAP,GAUWlB,EAASyB,EAAcP,IAH9BA,EAAAS,WAAI,SAAAvB,GAA+B,WAAOJ,KAAPI,EAAAK,GAAgBA,EAAAL,EAAAc,IAEHA,EAAAU,MAAA,SAAAC,GAAc,MAA9DpC,GAAAU,OACK2B,OAAAF,MAAAC,IAaTX,EAAKW,MAAQ,SAAUE,EAAGC,GAVU,mBAAAC,SAAAC,KAAAH,KACEA,EAAAA,EAAA,GACU,IAAAI,GAAAhB,EAAAe,KAAAhB,EAAAa,EAAAC,GAFhDH,KAmBQjB,EAAW,EAdnBM,EAAa,CAuBLN,OAtBJwB,QAAAC,GAAO5C,EACV2C,OAFDD,OAAAA,EAMIA,EAAAG,QAAA,SAAAjC,GACAO,EAAIqB,EAASC,MAATtB,EAAuBP,EAAAkC,MAAkB3B,EACzCiB,EAAAW,KAAAnC,KAIJwB,EAAAS,QAAIH,SAAShB,GACTU,EAAAA,WACAjB,GAFJ,EAGI6B,EAAAA,MAHJ7B,KAuBAd,EAA4B,aAAfC,EAA4BC,EAASyC,EAAY3C,EAf9DG,EAAA,EACAE,EAAA0B,EAAA,GAAAjB,EAAAd,EAAA,MAEIc,GA8CAP,EA3JZ,GAAIqC,GAAeC,SAASC,KAAKC,QAE7BC,UAAW,eAOPC,kBACIC,SAAYC,EAAeC,EAAAC,GAE/B,GAAA9B,GAAA4B,EAAAG,MACIJ,EAAQtB,EAAM2B,KAAAA,iBAAkBJ,EAAhCK,KAAA,MAAAC,QAAA,WAAA,GAMH,OAPD,UAAmBC,GAInB,OAAKC,MAAAA,WAAiBD,KAAAE,SAAAF,IAGrBnC,GAEDA,EAGO8B,GACHQ,MAAAA,EAAMX,mBACN,KACH3B,EAAA6B,KACDS,MAAAX,EAAA,mBA5BgC,IAiB5BW,MAAMX,EAAY,sBAIjB3B,IAiBDuC,yBAAA,SAAAX,GACH,OAAA,IAAAA,EAAAG,MAAAS,OAAA,YACDF,MAAA,iHAxCR,MAkKaG,EAAApE,EAHDqE,cAAAlB,QAIAxC,UACHF,OAAA,SAiBDwB,WAAa,IAfb7B,WAAA,GACAO,KAAAA,WACAA,MAAAA,QACA2D,YAAO3D,EACV4D,WAAA,EAAA,GACDC,SAAOhD,GACViD,aAAA,KAiBOC,oBAAsB,GAG1BC,WAAY,SAASC,GAdrBR,KAAAA,IAAAA,UAAYpE,GAAAA,GAAkBqE,SAC9BQ,GAAAA,EAAWC,eAKPC,QAsBJC,OAAS,SAAU3C,OAdP,KAAZsC,IACItC,EAAA7B,UACIyE,EAAAA,UAAIL,EAAQE,SADyBzC,EAAzC7B,SAAA,OAmBI6B,EAAE7B,SAAW6B,EAAE6C,UAbvBC,EAAOD,UAAI,QAQPE,UAAG,SAAA/C,GAA2BA,EAAA7B,UAAA,IAAA6B,EAAA7B,SAAA6E,SAAShD,EAAA7B,SAAAoC,QAAA0C,KAAAF,WACvCJ,OAAMxE,KAOT+E,QArCkD,WAsD/C,MAAOD,MAAKH,MATR9C,KAAAA,WAKR,QAAAmD,GAAA7E,SAkBeA,GAAKG,OApE+BH,EAAA8E,iBAAA9E,GAAA8E,UAyDnD9E,EAAAH,UAiBYG,EAAKH,SAASoC,QAAQ4C,GAEtB7E,EAAKuE,WAfXvE,EAAAuE,UAAWtC,QAAA4C,GAdZA,EADGR,KAAAG,KAmCJ,IAAIO,GAAUC,OAAOxC,QAAO,KAAUmC,KAAKM,WAXvC,OAJJF,GAAAjB,aAAA,KAEIoB,aAAA,mBAAA,YAEAC,EAAAC,MACAC,IAAIrF,KAAK8E,MAAYQ,KAAA,OAAuBC,SAAA,OAmB5CC,MAjBAT,OAASlF,KAAAA,UAAUkF,GACf/E,KAAKH,YAET4F,QAAIzF,SAAKuE,GACLvE,mBAWJsF,EAAUhD,SAFAC,KAAAC,QAGV+C,UACAC,WAAAA,KAJUE,QAAd,SAAAzB,GAtFR,GAAApD,GAAA8D,IAsHQ9D,GAAK8E,MAAMC,GAAG,iFAhBtB/E,EAAAgF,gBAAAhF,GAmBQA,EAAKiF,IAAM7B,EAAQ6B,IACnBjF,EAAKc,EAAI,EAhBboE,EAAAA,UAAAA,EAEIC,EAAAA,MAAAA,EAAiBC,MADVpF,EADgClB,OAAAsE,EAAAtE,QAYvCkB,gBAAA,SAAcqF,GAiBd,GAdArF,IAcUzB,EAAG+G,OAAO,QAdfL,KACLjF,GAAKc,GAALd,EAAA8E,MAAAnB,KAiBA3D,EAAKuF,YAAYF,GAdjBrF,EAAAA,YAAaoD,GACbpD,EAAAA,eAQJgF,YAAAA,SAAkBK,GACd,GAAArF,GAAIiF,KAIJjF,GAHWA,EADXwF,SAESH,EAAAA,SAeQrF,EAAKnB,WAbjB0G,EAAAA,IAALE,UAAA,kBACAzF,KAAK0F,EAAAA,KAALhF,MAAiB2E,EAAjB1E,OAAA,SAAAE,GAAA,MAAAA,GAAA8E,OAAAlC,MAlCuCmC,EAAA,SAAA/E,GAuC3CA,EAAAgF,KAAAhF,EAAAwE,OAAAhG,GAAA,IAAAwB,EAAAwE,OAAAvF,GAeQe,EAAEiF,KAAOjF,EAAEwE,OAAOhG,GAAK,IAAMwB,EAAE8E,OAAO7F,GAX1Ce,EAAAkF,KAAI/F,EAAO2F,OAAXtG,GAAA,IAAAwB,EAAA8E,OAAA7F,GAGIjB,GAAamB,QAAKnB,OAAtB,QAAA,UACAuD,KAAI4D,QAAOhG,gBAAXiG,OAAA,YAgBK7D,KAAK,QAAS,QAbnBA,KAAIwD,IAAAA,SAAAA,GAEA/E,MADA+E,GAAA/E,GACA,KAAWwE,EAAAA,KAAY,MAAQA,EAAAA,OAG/BW,EAAAE,aAAAC,SAAA,KALJb,OAAA,aAsBKlD,KAAK,IAAK,SAASvB,GAEhB,MAfJuF,GAAiBC,GAeN,KAAOxF,EAAEgF,KAAO,MAAQhF,EAAEiF,KAAO,MAAQjF,EAAEkF,MAR3CC,GAAAM,OAAST,UAoB5BU,WAAa,SAASpH,GATlB,GAAAa,GAAIwG,IAEPjI,GA/E0CkH,UAAA,UAyFlCgB,QAAQ,oBAAqB,SAAS5F,GAR/C,MAAA1B,GAAAsE,KAAA5C,EAAA4C,KAUmBtE,EAAK8E,iBARxB9E,GAAA8E,WAU2B,IAPd9E,EAAA8E,WAAS9E,GAClB,MAMgBa,EAAA8E,MAAA4B,IAAA,eAAAvH,GACHmF,EAAA,6BAAMpC,IAAA/C,EAAAwH,MACHxH,EAAAA,6BAAA+C,IAAiB/C,EAAjBD,MACAoF,EAAA,mCAAApC,IAAA/C,EAAAyH,YAAA,KAOhBtC,YAAE,WACFA,EAAAA,YAAEuC,SACFvC,EAAAA,SAzGuClC,KAAA,sBAAA,WAoH/B,GAAIvB,GAAIiD,KAAKgD,SARzBF,EAAA/F,EAAA+F,YAAA,MAUY,OAAO/F,IAAOA,EAAE8F,KAAO9F,EAAE8F,KAAO,QAAU,IAAM,SAAW9F,EAAE3B,KAAO,sBAAwB0H,GACtF/F,EAAEkG,UAAY,0BAA8BC,KAAKC,MAAO,IAAMpG,EAAEkG,WAAgB,IAAO,KAPzGG,SAAcC,UAAA,MAAAC,QAAW,aAe7BC,EAAAnC,EAAAvD,QAKIwB,WAAa,SAASC,GAElB,GAAIpD,GAAO8D,IAHfuD,GAAAA,QAAAA,EAAsBnC,QACtB/B,EAAAA,WAAa,SAETnD,EAAA6E,QAAI7E,GAEJA,EAAAA,SAKAA,EAAKgF,gBAAgBhF,EAAK8E,MAAMnB,OAGpC1E,OAAA,WAKI,GAAIe,GAAO8D,IACX9D,GAAKY,MAAO,GAAIjC,IAAkBE,WAAW,UAC7CmB,EAAKwF,SAAWjH,EAAG+I,IAAI9B,WAH3BvG,WAAS,SAAA4B,GAAW,OAAAA,EAAAd,EAAAc,EAAAhB,MAKnB0F,YAtB+C,SAAAF,GA4B5C,GAAIrF,GAAO8D,KAJfd,EAAAhD,EAAA8E,MAAAyC,IAAA,YAAA,IAGAhC,GAAAA,KAAAA,WAAcvF,EAAA8E,MAAAyC,IAAUlC,eAAQzG,WAAAoB,EAAA8E,MAAAyC,IAAA,cAC5B,IAOI5G,GAAQX,EAAKY,KAAKH,WAAWT,EAAK8E,MAAMyC,IAAI,eAAe5G,MAAMX,EAAK8E,MAAMnB,MAHhF3D,EAAKY,EAAKH,IAAAA,UAAgBqE,UAMrBH,KAAKhE,EAAO,SAASE,GAJtBsF,MAAAA,GAAAA,KAAJtF,EAAA4C,KAAA5C,EAAA4C,KAAAzD,EAAAc,IAKQd,GAAAW,MAAAA,EACHX,EAHMmG,SARPnD,GAeJhD,IAAAA,GAAKmG,EAAWA,QAAhBF,OAAA,SAKK7D,KAAK,QAAS,QAHnB2C,GAAA,WAAA,WAAAxG,EAAAiJ,MAAAC,oBACA1C,GAAA,QAAA,SAAAlE,GACI6G,GAAAA,EAAAA,MAAYvI,OAEmBqI,EAAMC,WAAAA,OACjC,CACIlJ,GAAGiJ,EAAAA,UAAc,IAAA3G,EAAA7B,SAAA6E,OAAA,MACjB7D,GAAKuG,MAAAA,OAAL1F,GADJb,EAEOgF,gBAAAnE,KAEH,oBAAAb,SAAAA,KAAK8E,KAERO,EAAAA,EAAA,IAETqC,EAAAtF,KAAA,YAAA,SAAAvB,GAAA,MAAA,aAAAwE,EAAAhG,GAAA,IAAAgG,EAAAvF,GAAA,MAEI4H,EAAAzB,OAAA,cACAZ,KAAAA,IAAAA,MACHsC,MAAA,OAAA,SAAA9G,GAAA,MAAAA,GAAA6C,UAAA,iBAAA,SACyCgE,EAAAzB,OAAO,YAAjD7D,KAAA,QAAA,aAQKA,KAAK,IAAK,SAASvB,GAAK,MAAOA,GAAE7B,UAAY6B,EAAE6C,WAAa,GAAK,KANtEgE,KAAAA,KAAUzB,SAEuB7D,KAAA,cAASsB,SAAY7C,GAAA,MAAdA,GAAiC7B,UAAxC6B,EAAA6C,UAAA,MAAA,UAFjCiE,MAAA,eAAA,KAM2E,IAAAC,GAF3EzI,EAGgB+G,aACuBC,SA9CnCnD,IAsDJ4E,GAAWxF,KAAK,YAAa,SAASvB,GALtC,MAAA,aAAAA,EAAAd,EAAA,IAAAc,EAAAhB,EAAA,MAEA+H,EAAIA,OAAAA,UAOCxF,KAAK,IAAKpC,EAAKqD,SAAS8B,YAJ7ByC,MAAAA,OAAA,SAAgB/G,GAAa,MAAAA,GAAA6C,UAAY,iBAAA,SACSkE,EADlDtC,OAAA,QAQKqC,MAAM,eAAgB,GAL3BC,MAAAA,YAAkB5E,GAEe6E,KAAA,SAASnE,GAAAA,MAAY7C,GAAA8F,MAArB,KAAO9F,EAAA8F,KAAP9F,EAAA8F,KAAA9F,EAAAkG,UAAAC,KAAAC,MAAA,IAAApG,EAAAkG,WAAA,IAKT,IAAAe,GAAA3I,EAAawH,OAAQ9F,aAH7CsF,SA7DInD,KAsEC6D,QAHLiB,GAAAxC,OAAA,UACAlD,KAAI0F,IAAAA,MAIJA,EAAAA,OAASxC,QAIJqC,MAAM,eAAgB,MAE3BhH,EAAAS,QAAA,SAAAP,GACAF,EAAAA,GAAMS,EAAAA,EACFP,EAAAA,GAAEf,EAAFC,OAORgI,EAAetG,SAASC,KAAKC,QAE7BC,UAAW,WAEXuB,WAAY,SAASC,GAArBD,GAAAA,GAAAA,IAEInD,GAAAgI,UAAA,IACAhI,EAAAA,UAAKgI,EACLhI,EAAAA,iBAAA,IACAA,EAAAA,SAAKiI,GAAAA,GAAAA,GAAmB,IAGxBjI,EAAKoF,MAAQd,EAAE,aAAac,QAA5BpF,EAAAA,OAAAsE,EAAA,aAAexF,SACfkB,EAAAA,OAAKlB,EAASwF,MACdtE,EAAAA,KAAKkI,EAASlI,KAGdsE,EAAApD,QAAAiH,OAAA,WACA7D,EAAEpD,MAAQiH,EAAAA,aAAO/C,QACbpF,EAAAA,OAAAsE,EAAA,aAAexF,SACfkB,EAAAA,WAIJA,EAAAoI,UAAA,GAAAxF,GAAAQ,EAAAc,QACAlE,EAAAA,UAAKoI,KAAYpI,EAAI4C,KAGrB5C,EAAAqI,SAAA9J,EAAA+J,SAAAC,OAAAC,aAAAxI,EAAAgI,UAAAhI,EAAAyI,YACAzI,EAAAA,SAAKqI,UAAcC,EAAAA,UAAgBE,IAAAA,cACnCxI,EAAAA,SAAKqI,MAAStF,EAAAA,UAAeqF,IAAAA,gBAG7BpI,EAAA0I,QAAA,GAAAC,GAAA3I,GACAA,EAAAA,aAAe,GAAI2I,IAAc3I,UAAjCA,EAAAoI,YACApI,EAAAA,kBAAoB,GAAI4I,IAAcR,UAAiBA,EAAAA,YACvDpI,EAAAA,OAAK6I,GAAAA,GAGLC,WAAA,WACAA,EAAAA,cACI9I,MAIR+I,OAAQ,WACJ,GAAA/I,GAAA8D,IACAQ,GAAA,aAAW0E,QAGXhJ,EAAAiJ,QAAA1K,EAAA+G,OAAA,aAAAW,OAAA,WACAjG,KAAKiJ,QAAU1K,EAAG+G,OAKdtF,KAAAA,SAAKkJ,EAALpK,QADMsD,KAJV,iBAAA,OAIKpB,KAAKhB,EAAKqI,SAAStD,GAAG,OAAQ,WAInC/E,EAAKmJ,gBAALnJ,EAAKmJ,aAAenJ,EAAKiJ,QAAQhD,OAAO,YAWxCjG,KAAKoJ,QAAAA,gBACDtE,KAAAA,QAAQ9E,EAAKoI,OACbhD,KAAAA,SAAaA,EAFItG,QAGjBA,KAAAA,SAASkB,SACTiF,KAAAA,OAAUA,SAJOjF,EAArBiF,IAAAjF,EAAAiJ,QAHKhD,OAAO,SAWZ7D,KAAA,QAAA,OARApC,EAAKoJ,eAWLtE,MAAA9E,EAAAoI,UACAhD,MAAIiE,EAAAA,MAlF4BvK,OAAAkB,EAAAlB,OA0E5BmG,IAAKjF,EAAKiF,IAWlBqE,QAAAtJ,EAAAsJ,SAIAJ,EAAAA,UAAarB,KAAA,0BAAe7H,EAAAoI,UAAAb,IAAA,SAAA,IAIpBgC,IAAa/B,GAAbxH,EAAAoJ,gBAIJF,WAGIM,SAAAA,GAHJ,GAAAD,GANIE,MAYJ,KAAAjC,IACA+B,EAAQA,EAARhB,KACIkB,EAAAjC,EAAAzE,UAGA,IAAA/C,GAAA8D,KACIhB,EAAAA,EAAAA,SAAoB4G,QACxBC,EAAA3J,EAAAqI,SAAAtF,YACID,EAAAA,GACJ8G,EAAA,EAGK,QAAAL,GACGzG,IAAAA,QACHA,EAAA,EAbT6G,GAAA,EAAA,EAAA,MAeA,KAAI7G,IAAgEA,GAAA,GAAA,MAAQ,KAAA,IAC5E9C,GAAA,EAAoB8C,MACpB0G,SARkC,gBAAfD,GAWnBzG,EAAAyG,EACuB,OAAnBhL,EAAaiJ,QACboC,EAAAA,EAAqBpC,MAAAkC,OAGjB,KAAA5G,EAAIjD,EAAI4J,WAAgBI,EAAxB7J,EAAAyI,WAAA,CAMJzI,GALIA,EAAAqI,SAAAqB,MAAQD,GACRD,EAAI,aAAchJ,EAAA8I,QAAS,GAAA,IAAAtJ,EAAAsJ,QAAA,GAAA,WACvBK,EAAAA,IAGHtB,OAALrI,EAAAA,MACA4J,EAAAA,aAAqBrL,EAAAiJ,MAAemC,UAAf,QACxB,CATG,OAA8B,KAApBF,EAAiC,CAW/CzJ,GAAKoI,GAAAA,EAAcyB,MAAe/G,KAAAA,GAC7BsF,EAAAA,EAAcyB,MAAaF,KAAAA,EAChCnJ,OAAAX,IAAAW,MAAAT,KACA4J,GAA2BC,EAAAA,GAAqBJ,WAAAA,GAAhDG,EAAA,GAAAxH,WAAApC,KAIJC,EAAAqI,SAAAtF,UAAA4G,GAVQC,EAAqB,aAAeD,EAAkB,IAc1D3J,EAAAoI,UAAW1B,IAAX,cAAA5D,GAAA9C,EAAAoI,UACI0B,IAAAA,YAAcH,GAEVI,EAAAA,IAAAA,KAAAA,YAAYD,EAD2BN,KASlDQ,UAAA,WAjKL,GAAAhK,GAAA8D,KAuJYgG,EAAYxF,EAAE,kCAAkCpC,KAcxDyG,GAAAA,QAAAA,EAAAA,UAAyBjH,IAAT,WAAqB8C,OAZzBuF,WAAYD,EAcxB3G,UAAa,YAETnD,SAAKiK,GAZGjK,EAAK2E,KAAOuF,EAAWvF,KAc/B3E,EAAAkE,OAAAgG,EACElK,EAAA+I,cAPNJ,EAAgBlH,SAASC,KAAKC,QAe1B2C,WAAE,SAAA2F,GAAwDjK,GAAAA,GAAAA,IAA+BA,GAAzFiK,aAAAA,EAIJE,EAAAA,yBAAsBnB,QAClB1E,EAAA,oBAAA0E,QAXA1E,EAAE,wBAAwB8F,MAelB9F,EAAAA,cACAtE,EAAAA,sBAIAsE,EAAA,wBAAG+F,MAAatF,GAAA,SAAA,WAAA/E,EAAAiK,aAAAD,eAInBG,oBACCG,WACEhG,GAAAA,GAAAA,IAGApD,WAAAA,EAAYqJ,2BACZD,WAAA,OAAA/G,MAAA,oBAAAiH,SAAA,WACHlG,EAHD,iBAKAmG,OACIC,EAAAA,aAAkBvD,cAExBmD,WAAA,OAAA/G,MAAyB0C,qBAA3BuE,SAAA,WA7CiC,GAAAH,GAAA/F,EAAA,wCAAAuD,MA6BtBwC,IAmBfM,EAAaV,aAAA7B,UAAW1B,IAAA,QAAA2D,GAEhB3B,EAAAA,aAAUhK,UAAa6L,UAGlBD,WACCA,iBAAY/G,MAAYA,sBAAmBiH,SAAU,WACnDxK,EAAAA,sBAAkBkJ,UAGlBlJ,WAAKiK,cAAaf,MAAlB,gBAA6BsB,SAA7B,WACHtJ,OAED0J,KAAA,wEA7DhBF,gBAAAvD,UAAA,YAqEIyB,EAAAA,yBAAepH,OAAAqJ,UAAoBC,MArBnCH,YAAa,WAyBbxH,GAAAA,GAAAA,KACIuF,EAAAhK,EAAA6L,2BACIvK,WAAJ,UAAAuD,MAAA,UAAAiH,SAAA,WACKpC,EAAAA,aAAoBA,YAAzBG,KAAA,SAEKwC,WAAS,WAAAxH,MAAA,WAAAiH,SAAA,WACV/J,EAAAA,aAAeyI,YAAAX,KADL,SAGVvF,WAAe,eAAAO,MAAF,iBAAAiH,SAAA,WAHjBxK,EAAAiK,aAAAf,YAAAX,KAAA,cAOsDvI,gBAAAmH,UAAA,WACtD7C,GAAAA,oBAAE2B,OAAAyC,EAA6B0B,QAC8CxB,EAA7EpH,EAAAG,QAhBJC,UAAW,WAEXuB,WAAY,SAASC,GAoBrB4H,GAAAA,GAAQlH,IACJ9D,GAAAoI,UAAWhF,EAAXgF,UACApI,EAAAiL,GAAKjL,EAAAA,iBAGDA,EAAA+K,QACHtK,WAAA6D,EAAA,2BACDA,WAAYyG,EAAAA,2BACR/K,SAAKoI,EAAAA,0BAhBT9D,EAAE,qBAAqB8F,MAAMrF,GAAG,QAAS,WAAa/E,EAAKiL,GAAGC,SAC9D5G,EAAE,6BAA6B8F,MAAMrF,GAAG,QAAS,WAAa/E,EAAKmL,oBAqBvEC,EAAAA,6BAAqBhB,MAAArF,GAAA,QAAA,WAAA/E,EAAAgL,WAMrBA,MAAA,WAnBI,GAAIhL,GAAO8D,IACN9D,GAAK6B,kBAAkB7B,EAAK+K,OAAOtK,WAAY,GAAI,OAqB5D0K,EAAAA,kBAAkBnL,EAAA+K,OAAAnM,WAAU,EAAA,KACxB0F,EAAEzC,kBAA2B7B,EAAA+K,OAAA/H,SAAA,EAAA,KAGzBhD,EAAAA,KAAAA,EAAAA,OAAKoI,SAAciD,EAAKlL,GAC3BH,EAFDoI,UAAA1B,IAAA2E,EAAAC,EAAApJ,UAlD+BkJ,SAAvC,WAuCQ,GAAIpL,GAAO8D,IAwBnBQ,GAAAiH,KAAAvL,EAAA+K,OAAA,SAAAM,EAAAC,GAtBYA,EAAOpJ,IAAIlC,EAAKoI,UAAUb,IAAI8D,OA6BtClI,gBAAa,WACTmB,EAAA,YAAItE,QACJA,IAAAA,GAAA8D,IACA9D,GAAAA,KAAAA,EAAKoI,UAAYhF,SAAQgF,SAAzBiD,EAAAlL,GAtBIH,EAAKoI,UAAU1B,IAAI2E,EAAKlL,KAyBxBqL,EAAAA,YAGA7E,OAAAA,eAMmB8E,EAAvBjK,EAAAG,QAMAC,UAAA,WACqD5B,WAAAA,SAAQkL,GAAS,GAAAlL,GAAtE8D,IACA9D,GAAAA,GAAK0L,EAAGC,sBAA0C3L,EAAAA,UAAK4L,EAALxD,UAClDpI,EAAAA,IAAoDA,WAAK6L,EAAAA,2BAAkBF,YAA3ErH,EAAA,4BAhBIuH,cAAkBvH,EAAE,8BAkBxBqC,KAAcrC,EAAA,6BACVpF,KAAAoF,EAAA,6BACAA,WAAcA,EAAA,oCAILtE,EAAA8L,iBACGxH,KAAAA,KACHpF,KAAA,KACJ0H,WAND,MAUR5G,EAAAA,oBAAAoK,MAAArF,GAAA,QAAA,WAAiD/E,EAAAiL,GAAAC,SAC7ClL,EAAAA,GAAAA,YAAK+L,MAALhH,GAAA,QAAA,WAAA/E,EAAA4L,gBACH5L,EAFD0L,GAAAG,cAAAzB,MAAArF,GAAA,QAAA,WAAA/E,EAAA6L,kBAbA,SAAWvH,GAEPA,EAAE0H,GAAGC,OAAS,SAAUC,GACpB,MAAO5H,GAAER,MAAMyH,KAAK,WAkBrBW,EACI5H,EAAAR,MAAXqI,WAAA,YAfgB7H,EAAER,MAAM1B,KAAK,WAAY,gBAItC+B,QAiBCnE,EAAAA,GAAAA,WAAAoK,MAAa6B,GAAOG,QAApB,WACHpM,EAFD+L,cASCA,SAAA,WAEJ,GApEuC/L,GAAA8D,KAqDhCsI,EAAUpM,EAAK0L,GAAGF,WAAWa,GAAG,WAE/BD,IAAWpM,EAAK6L,gBAkBzBA,EAAAA,KAAAA,EAAAA,gBAAgB,SAAAR,EAAWlL,GACvBH,EAAIA,GAAAA,GAAOiM,OAAXG,KAEAA,GACI9H,EAAAA,GAAEiH,YAAUO,OACR9L,EAAAA,GAAAA,cAAakC,SAEpBlC,EAAA0L,GAAAC,YAAAT,OAhFmClL,EAAA0L,GAAAG,cAAAX,SAyFpCW,cAAA,WACI,GAAA7L,GAAA8D,KAGI3E,EAAAa,EAAAoI,UAAAb,IAAA,eACHpI,IACDmF,EAAAA,KAAEiH,EAAKvL,gBAAK8L,SAAiBT,EAASA,GACjClM,EAAAA,GAAAA,GAAD+C,IAAclC,EAAK0L,OAV/BE,YAAc,WAqBlB,GAAA5L,GAAA8D,KAnBY3E,EAAOa,EAAKoI,UAAUb,IAAI,eAC9B,IAAIpI,EAAK,CACL,IAAKa,EAAK6B,kBAAkB7B,EAAK0L,GAAGxM,KAAM,EAAG,IAqBrDoN,EAAAA,yBAAqCtM,EAAA0L,GAAA/E,OACrCxD,EAAaT,yBAAY1C,EAAA0L,GAAA9E,YACjB5G,MAEJsE,GAAEiH,KAAAvL,EAAA8L,gBAAyB,SAAST,EAAAlL,GAChChB,EAAIoN,GAAAA,EAAeb,GAAAL,GAAAnJ,QAAnBlC,EAAAoI,UAEWoE,IAAAA,sBAFX,GAAAC,WAIAzM,OAAAA,uBATRsM,EAAiB9K,EAAaG,QAqB9B+K,WAAAA,WACInO,GAAAA,GAAGkH,IAGKnB,GAAA,sBAAWqI,GAAP,QAAmB,WACnB,GAAAJ,GAAInK,EAAAA,uBACAoK,EAAQI,EAAAA,4BAAR1K,MAAA2H,MAAA,KACIzH,EAAAoK,EAAK,GACDI,EAAAJ,EAAOG,EACX3M,GAAA0C,yBAAK6J,GAEL,SAAAnK,GACIpC,EAAA6B,kBAAA0K,EAAA,EAAA,GAGXvM,EAAA0M,WAAMtK,EAAIA,EAASmK,EAAUnK,UAf9CsK,WAAa,SAAUtK,EAAMwK,EAAW1K,GAuB5C3D,EAAOkH,UAAA,UACHsC,QAAAA,kBAAcA,SAAAA,GADlB,GAAA4E,GAAA9L,EAAAuB,EAp+BA,QAAA,KAAAuK,GAAA,OAAAA,EAk9BoB,GAAa,SAATvK,EACA,OAAQwK,GACJ,IAAK,eACD,MAAOD,KAAYzK,CACvB,KAAK,cACD,MAAOyK,KAAYzK,CACvB,SACI,WAGL,IAAa,SAATE,GAA4B,eAATA,EAC1B,OAA6D,IAAtDuK,EAAQE,cAAcC,QAAQ5K,EAAI2K,mBAOjE,QACI9E,aAAcA","file":"../../scripts/viz/phyloviz.js","sourcesContent":["define([\n    'libs/d3',\n    'viz/visualization',\n    'mvc/dataset/data',\n    'mvc/ui/icon-button'\n], function(d3, visualization_mod, data_mod, mod_icon_btn) {\n\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n\n    className: 'UserMenuBase',\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue : function ($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val(),\n            fieldName = $inputKey.attr(\"displayLabel\") || $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)){\n            alert(fieldName + \" is not a number!\");\n            return false;\n        }\n\n        if ( value > max){\n            alert(fieldName + \" is too large.\");\n            return false;\n        } else if ( value < min) {\n            alert(fieldName + \" is too small.\");\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters : function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1){\n            alert(\"Named fields cannot contain these illegal characters: \"\n                + \"double quote(\\\"), single guote(\\'), or back slash(\\\\). \");\n            return true;\n        }\n        return false;\n    }\n});\n\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n\n    var self = this,\n        hierarchy = d3.layout.hierarchy().sort(null).value(null),\n        height = 360, // ! represents both the layout angle and the height of the layout, in px\n        layoutMode = \"Linear\",\n        leafHeight = 18, // height of each individual leaf node\n        depthSeparation = 200, // separation between nodes of different depth, in px\n        leafIndex = 0, // change to recurssive call\n        defaultDist = 0.5, // tree defaults to 0.5 dist if no dist is specified\n        maxTextWidth = 50; // maximum length of the text labels\n\n\n    self.leafHeight = function(inputLeafHeight){\n        if (typeof inputLeafHeight === \"undefined\"){ return leafHeight; }\n        else { leafHeight = inputLeafHeight; return self;}\n    };\n\n    self.layoutMode = function(mode){\n        if (typeof mode === \"undefined\"){ return layoutMode; }\n        else { layoutMode = mode; return self;}\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = function(angle) {\n        if (typeof angle === \"undefined\"){ return height; }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) { return self; }\n        else { height = angle; return self;}\n    };\n\n    self.separation = function(dist){   // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\"){ return depthSeparation; }\n        else { depthSeparation = dist; return self;}\n    };\n\n    self.links = function (nodes) {     // uses d3 native method to generate links. Done.\n        return d3.layout.tree().links(nodes);\n    };\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = function (d, i) {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if( toString.call( d ) === '[object Array]' ){\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i),\n            nodes = [],\n            maxDepth = 0,\n            numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(function (node){\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth;  //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(function(node){\n            if ( !node.children )  { //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight = layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout (node, maxDepth, vertSeparation, parent) {\n        var children = node.children,\n            sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist;     // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null){\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {    //root node\n            node.y0 = maxTextWidth;\n        }\n\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach( function (child) {\n                child.parent = node;\n                sumChildVertSeparation += layout(child, maxDepth, vertSeparation, node);\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults : {\n        layout: \"Linear\",\n        separation : 250,    // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type : \"phyloviz\",   // visualization type\n        title : \"Title\",\n        scaleFactor: 1,\n        translate: [0,0],\n        fontSize: 12,        //fontSize of node label\n        selectedNode : null,\n        nodeAttrChangedTime : 0\n    },\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data_mod.Dataset({\n            id: options.dataset_id\n        }));\n\n    },\n\n    root : {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle : function (d) {\n        if(typeof d === \"undefined\") {return ;}\n        if (d.children ) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll : function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData : function (){\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node){\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected){ delete node._selected;}\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config  = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url     : this.url(),\n            type    : \"POST\",\n            dataType: \"json\",\n            data    : {\n                config  : JSON.stringify( config ),\n                type    : 'phyloviz'\n            },\n            success: function(res){\n                hide_modal();\n            }\n        });\n    }\n});\n\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase =  Backbone.View.extend({\n    defaults : {\n        nodeRadius : 4.5 // radius of each node in the diagram\n    },\n\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit : function (options) {\n\n        var self = this;\n        self.model.on(\"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender, self);\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender : function(source) {\n        var vis = d3.select(\".vis\"),\n            self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks : function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis.selectAll(\"g.completeLink\")\n            .data(self.tree.links(self.nodes), function(d) { return d.target.id; });\n\n        var calcalateLinePos = function(d) {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = d.source.y0 + \" \" + d.source.x0;\n            // position where the line makes a right angle bend\n            d.pos1 = d.source.y0 + \" \" + d.target.x0;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = d.target.y0 + \" \" + d.target.x0;\n        };\n\n        var linkEnter = link.enter().insert(\"svg:g\",\"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter.append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0  + \" L \" + d.pos1;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\")\n            .attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n            });\n\n        var linkExit = link.exit().remove();\n\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode : function(node){\n        var self = this;\n        d3.selectAll(\"g.node\")\n            .classed(\"selectedHighlight\", function(d){\n                if (node.id === d.id){\n                    if(node._selected) { // for de=selecting node.\n                        delete node._selected;\n                        return false;\n                    } else {\n                        node._selected = true;\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips : function (){\n        $(\".tooltip\").remove();      //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function(){\n                var d = this.__data__,\n                    annotation = d.annotation || \"None\" ;\n                return d ? ( (d.name ? d.name + \"<br/>\" : \"\") + \"Dist: \" + d.dist + \" <br/>Annotation1: \" + annotation +\n                    ( d.bootstrap ? \"<br/>Confidence level: \" + ( Math.round( 100 * d.bootstrap ) ) : \"\") ): \"\";\n            })\n            .tooltip({'placement':'top', 'trigger' : 'hover'});\n\n    }\n});\n\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView =  PhylovizLayoutBase.extend({\n    initialize : function(options){\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout : function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal()\n            .projection(function(d) { return [d.y, d.x ]; });\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes : function (source) {\n        var self = this,\n            fontSize = self.model.get(\"fontSize\") + \"px\";\n\n        // assigning properties from models\n        self.tree.separation(self.model.get(\"separation\")).leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500,\n            nodes = self.tree.separation(self.model.get(\"separation\")).nodes(self.model.root);\n\n        var node = self.vis.selectAll(\"g.node\")\n            .data(nodes, function(d) {\n                return d.name + d.id || (d.id = ++self.i);\n            });\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node.enter().append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", function(){ d3.event.stopPropagation();    })\n            .on(\"click\", function(d) {\n                if (d3.event.altKey) {\n                    self.selectNode(d);        // display info if alt is pressed\n                } else {\n                    if(d.children && d.children.length === 0){ return;}  // there is no need to toggle leaves\n                    self.model.toggle(d);   // contract/expand nodes at data level\n                    self.updateAndRender(d);   // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if( toString.call( source ) === '[object Array]' ){\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\"transform\", function(d) { return \"translate(\" + source.y0 + \",\" + source.x0 + \")\"; });\n\n        nodeEnter.append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n        nodeEnter.append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", function(d) { return d.children || d._children ? -10 : 10; })\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", function(d) { return d.children || d._children ? \"end\" : \"start\"; })\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition()\n            .duration(duration);\n\n        nodeUpdate.attr(\"transform\", function(d) {\n            return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n\n        nodeUpdate.select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n        nodeUpdate.select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(function(d) { return ( ( d.name && d.name !== \"\" ) ? d.name : ( d.bootstrap ? Math.round( 100 * d.bootstrap ) : \"\" ) ) });\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit =node.exit().transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\")\n            .attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\")\n            .style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(function(d) {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n\n});\n\nvar PhylovizView = Backbone.View.extend({\n\n    className: 'phyloviz',\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(function(){\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior.zoom().scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({phyloTree : self.phyloTree});\n        self.nodeSelectionView = new NodeSelectionView({phyloTree : self.phyloTree});\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(function(){\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function(){\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3.select(\"#PhyloViz\").append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(self.zoomFunc.on(\"zoom\", function(){\n            self.zoomAndPan();\n        }));\n\n        self.boundingRect = self.mainSVG.append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG\n            .append(\"svg:g\")\n            .attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model : self.phyloTree,\n            width : self.width,\n            height : self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(\"Phylogenetic Tree from \" + self.phyloTree.get(\"title\") + \":\");\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan : function(event){\n         var zoomParams,\n            translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this,\n            scaleFactor = self.zoomFunc.scale(),\n            translationCoor = self.zoomFunc.translate(),\n            zoomStatement = \"\",\n            translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0,0]; break;\n            case \"+\":\n                scaleFactor *= 1.1; break;\n            case \"-\":\n                scaleFactor *= 0.9; break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) { return;}\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement = \"translate(\" +  self.margins[3] + \",\" + self.margins[0] + \")\" +\n            \" scale(\" + scaleFactor + \")\";\n\n        // Do manual translation.\n        if( d3.event !== null) {\n            translateStatement = \"translate(\" + d3.event.translate + \")\";\n        } else {\n            if(typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)){\n                    translationCoor = [translationCoor[0] + parseFloat(x), translationCoor[1] + parseFloat(y)];\n                }\n            }\n            self.zoomFunc.translate(translationCoor);   // update zoomFunc\n            translateStatement = \"translate(\" + translationCoor + \")\";\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz : function() {\n        var self = this,\n            treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(self.phyloTree.get(\"dataset\").url(), {\n                tree_index: treeIndex,\n                data_type: 'raw_data'\n            },\n            function(packedJson){\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            });\n    }\n});\n\n\nvar HeaderButtons = Backbone.View.extend({\n\n    initialize : function(phylovizView){\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\").off().on(\"change\",  function() {self.phylovizView.reloadViz();}  );\n\n    },\n\n    initRightHeaderBtns : function(){\n        var self = this;\n\n        rightMenu = mod_icon_btn.create_icon_buttons_menu([\n            { icon_class: 'gear', title: 'PhyloViz Settings', on_click: function(){\n                $(\"#SettingsMenu\").show();\n                self.settingsMenu.updateUI();\n            } },\n            { icon_class: 'disk', title: 'Save visualization', on_click: function() {\n                var nexSelected = $(\"#phylovizNexSelector option:selected\").text();\n                if(nexSelected) {\n                    self.phylovizView.phyloTree.set(\"title\", nexSelected);\n                }\n                self.phylovizView.phyloTree.save();\n            } },\n            { icon_class: 'chevron-expand', title: 'Search / Edit Nodes', on_click: function() {\n                $(\"#nodeSelectionView\").show();\n            } },\n            { icon_class: 'information', title: 'Phyloviz Help', on_click: function() {\n                window.open('https://galaxyproject.org/learn/visualization/phylogenetic-tree/');\n                // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n            } }\n        ],\n            {\n                tooltip_config: { placement: 'bottom' }\n            });\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this,\n            navMenu = mod_icon_btn.create_icon_buttons_menu([\n                { icon_class: 'zoom-in', title: 'Zoom in', on_click: function() {\n                    self.phylovizView.zoomAndPan({ zoom : \"+\"});\n                } },\n                { icon_class: 'zoom-out', title: 'Zoom out', on_click: function() {\n                    self.phylovizView.zoomAndPan({ zoom : \"-\"});\n                } },\n                { icon_class: 'arrow-circle', title: 'Reset Zoom/Pan', on_click: function() {\n                    self.phylovizView.zoomAndPan({ zoom : \"reset\"});\n                } }\n            ],\n                {\n                    tooltip_config: { placement: 'bottom' }\n                });\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\n\nvar SettingsMenu = UserMenuBase.extend({\n\n    className: 'Settings',\n\n    initialize: function(options){\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation : $(\"#phyloVizTreeSeparation\"),\n            leafHeight : $(\"#phyloVizTreeLeafHeight\"),\n            fontSize   : $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\").off().on(\"click\", function() { self.el.hide(); });\n        $(\"#phylovizResetSettingsBtn\").off().on(\"click\", function() { self.resetToDefaults(); });\n        $(\"#phylovizApplySettingsBtn\").off().on(\"click\", function() { self.apply(); });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply : function(){\n        var self = this;\n        if (!self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)){\n            return;\n        }\n        $.each(self.inputs, function(key, $input){\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI : function(){\n        var self = this;\n        $.each(self.inputs, function(key, $input){\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults : function(){\n        $(\".tooltip\").remove();      // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, function(key, value) {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function(){\n\n    }\n\n});\n\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n\n    className: 'Settings',\n\n    initialize : function (options){\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit      : $('#phylovizEditNodesCheck'),\n            saveChanges     : $('#phylovizNodeSaveChanges'),\n            cancelChanges   : $(\"#phylovizNodeCancelChanges\"),\n            name            : $(\"#phyloVizSelectedNodeName\"),\n            dist            : $(\"#phyloVizSelectedNodeDist\"),\n            annotation      : $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name : null,\n            dist : null,\n            annotation : null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\").off().on(\"click\", function() { self.el.hide(); });\n        self.UI.saveChanges.off().on(\"click\", function(){ self.updateNodes(); });\n        self.UI.cancelChanges.off().on(\"click\", function(){ self.cancelChanges(); });\n\n        (function ($) {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function (isEnabled) {\n                return $(this).each(function () {\n                    if(isEnabled){\n                        $(this).removeAttr('disabled');\n                    } else {\n                        $(this).attr('disabled', 'disabled');\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", function () {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI : function(){\n        var self = this,\n            checked = self.UI.enableEdit.is(':checked');\n\n        if (!checked) { self.cancelChanges(); }\n\n        $.each(self.valuesOfConcern, function(key, value) {\n            self.UI[key].enable(checked);\n        });\n        if(checked){\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges : function() {\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node){\n            $.each(self.valuesOfConcern, function(key, value) {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes : function (){\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node){\n            if (!self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation) ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, function(key, value) {\n                (node[key]) = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize : function () {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", function(){\n            var searchTerm = $(\"#phyloVizSearchTerm\"),\n                searchConditionVal = $(\"#phyloVizSearchCondition\").val().split(\"-\"),\n                attr = searchConditionVal[0],\n                condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\"){\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree : function (attr, condition, val){\n        d3.selectAll(\"g.node\")\n            .classed(\"searchHighlight\", function(d){\n                var attrVal =  d[attr];\n                if (typeof attrVal !== \"undefined\" && attrVal !== null){\n                    if (attr === \"dist\"){\n                        switch (condition) {\n                            case \"greaterEqual\":\n                                return attrVal >= +val;\n                            case \"lesserEqual\":\n                                return attrVal <= +val;\n                            default:\n                                return;\n                        }\n\n                    } else if (attr === \"name\" || attr === \"annotation\") {\n                        return attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1;\n                    }\n                }\n            });\n    }\n});\n\nreturn {\n    PhylovizView: PhylovizView\n};\n\n});\n"]}