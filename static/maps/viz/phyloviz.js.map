{"version":3,"sources":["viz/phyloviz.js"],"names":["define","d3","visualization_mod","data_mod","mod_icon_btn","PhyloTreeLayout","layout","node","maxDepth","vertSeparation","parent","children","dist","defaultDist","PhyloTree","y0","maxTextWidth","depthSeparation","forEach","child","sumChildVertSeparation","self","x0","length","leafIndex","x","y","layoutMode","leafHeight","hierarchy","value","inputLeafHeight","mode","layoutAngle","height","angle","isNaN","separation","links","tree","nodes","toString","d","i","call","numLeaves","window","_d","_nodes","depth","push","UserMenuBase","Backbone","View","extend","isAcceptableValue","$inputKey","min","max","val","fieldName","attr","replace","alert","parseFloat","n","isFinite","hasIllegalJsonCharacters","search","translate","Visualization","fontSize","selectedNode","nodeAttrChangedTime","type","initialize","scaleFactor","id","options","this","set","Dataset","dataset_id","root","toggle","_children","toggleAll","getData","save","cleanTree","_selected","jQuery","show_message","url","attributes","config","hide_modal","$","ajax","dataType","data","JSON","stringify","PhylovizLayoutBase","PhylovizLinearView","stdInit","model","on","updateAndRender","source","renderNodes","addTooltips","width","diagonal","duration","link","selectAll","renderLinks","calcalateLinePos","pos2","target","linkEnter","append","vis","pos0","pos1","linkExit","exit","remove","enter","insert","transition","select","selectNode","classed","__data__","name","placement","annotation","svg","bootstrap","Math","round","trigger","margins","projection","nodeEnter","get","nodeUpdate","event","stopPropagation","nodeExit","altKey","PhylovizView","MAX_SCALE","MAX_DISPLACEMENT","resize","render","style","zoomFunc","phyloTree","settingsMenu","nodeSelectionView","NodeSelectionView","setTimeout","zoomAndPan","mainSVG","boundingRect","linearView","MIN_SCALE","zoomParams","translateParams","radius","scale","translationCoor","zoom","scaleExtent","navMenu","HeaderButtons","SettingsMenu","PhyloVizSearch","zoomStatement","translateStatement","reloadViz","getJSON","data_type","packedJson","phylovizView","layoutOptions","rightMenu","create_icon_buttons_menu","icon_class","title","on_click","show","tooltip_config","initNavBtns","split","inputs","treeIndex","hide","apply","empty","off","initRightHeaderBtns","$input","resetToDefaults","updateUI","nexSelected","text","enableEdit","saveChanges","cancelChanges","valuesOfConcern","open","$el","isEnabled","each","removeAttr","el","key","condition","searchConditionVal","searchTerm","defaults","searchTree","attrVal","className","UI","updateNodes","fn","enable","toggleUI","checked","is","Date","toLowerCase","indexOf"],"mappings":"kCAAAA,QACK,UAAW,oBAAqB,mBAAoB,sBACrD,SAASC,EAAIC,EAAmBC,EAAUC,GAyDlC,SAKkBC,IAwGlB,SAASC,EAAOC,EAAMC,EAAUC,EAAgBC,GAI5C,IAAAC,EAAAJ,EAAAI,SACIC,EAAoBC,EAGpBH,EAAAA,EAAWE,MAAMC,EAoCzBC,OAnCQP,EAAAA,EAAUG,EAAAA,EAAOK,EACpBR,EAFDK,KAEOA,EAEHL,EAAKQ,GADL,OAAAL,EACUM,EAAAA,GAAVJ,EAAAK,EAGJD,EACAL,GAaKA,EARDO,QAAA,SAAAC,GASAZ,EAAUa,OAAAA,EACbA,GAAAd,EAPWa,EASZX,EACSD,EACAA,KAGNc,EAAPC,GAAAF,EAAAT,EAAAY,SAlBQhB,EAAAe,GAAAE,EAAAf,EACAE,GAASO,GAabX,EAAKkB,EAAIlB,EAAKe,GACdf,EAAKmB,EAAInB,EAAKQ,GASlBD,EAAYZ,GAnJRyB,IAAAA,EAAAA,KACAC,EAAAA,EAPJtB,OAOqBuB,YACjBZ,KAAAA,MAAuBa,MAAA,MACvBN,EATJ,IASmBG,EAAA,SACfd,EAVJ,GAUuBI,EAAA,IACnBD,EAAe,EADfH,EAAc,GAGlBQ,EAAkB,GA8Idf,OA5IIe,EAAAO,WAAOA,SAAPG,GACH,YAAM,IAAAA,EACHH,GAEHA,EAAAG,EANLV,IAWQA,EAAAM,WAAOA,SAAPK,GACH,YAAM,IAAAA,EACHL,GAEHA,EAAAK,EANLX,IAYQA,EAAAY,YAAOC,SAAPC,GACH,YAAA,IAAAA,EACDD,EACAE,MAEOD,IAAAA,EAAA,GAAAA,EAAA,IACHD,GAEHA,EAAAC,EAVLd,IAeIA,EAAAgB,WAAWzB,SAASA,GAEnB,YAAM,IAAAA,EACHK,GAEHA,EAAAL,EAPLS,IAYIA,EAAAiB,MAAOrC,SAAUsC,GAAjB,OAAOtC,EAAGK,OAAOiC,OAAOD,MAAME,IAM9BnB,EAAAmB,MAAIC,SAAcC,EAAdC,GAEA,mBAAAD,SAAAE,KAAAF,KAEJA,EAAAA,EAAA,IACA,IAEIlC,EAAAA,EAFJoC,KAAAvB,EAAAqB,EAAAC,GAGIE,KACJrC,EAAA,EACAsC,EAAA,EA2BJ,OA3BIA,OAAOC,GAAKL,EAGZI,OAAAE,OAAAA,EAIIR,EAAAA,QAAWjC,SAAXA,GAFJC,EAAAD,EAAA0C,MAAAzC,EAAAD,EAAA0C,MAAAzC,EAIAgC,EAAAU,KAAA3C,KAIQiC,EAAAtB,QAAA,SAAAX,GACAsC,EAAAA,WAEHA,GAAA,EALLtC,EAAA0C,MAAAzC,KAWAF,EAFmB,aAAfqB,EAA4BO,EAASW,EAAYjB,EAIrDJ,EAAA,EApCJlB,EAAAkC,EAAA,GAAAhC,EAAAoB,EAAA,MAuCAY,GAuDIlC,EAhNR,IAAI6C,EAAeC,SAASC,KAAKC,QAA7BH,UAAAA,eAMAI,kBAAmB,SAASC,EAAWC,EAAKC,GACxC,IAAA5B,EAAA0B,EAAAG,MACI7B,EACA8B,EACIJ,KAAAA,iBACAA,EAAUK,KAAK,MAAMC,QAAQ,WAAY,IAO7CC,OAJA,SAAcC,GACjB,OAAA5B,MAAA4B,WAAAC,KAAAC,SAAAD,GAGGF,CAAMH,GAKNG,EAAMH,GACNG,MAAAH,EAAA,mBACO9B,KACD8B,EAAAA,KACNG,MAAAH,EAAA,mBACH,IATGG,MAAAH,EAAA,sBACH,IAgBDO,yBAAoBC,SAAOZ,GACvBO,OACI,IADJA,EACIJ,MAAAS,OAAA,YAGJL,MACH,iHA1CT,MAsNQM,EAAAA,EAPMC,cAAAhB,QAQNiB,UACAC,OAAAA,SACAC,WAAAA,IAX+C7C,WAAA,GAK/C8C,KAAM,WASVC,MAAAA,QACIC,YACI,EAEIC,WAAIC,EAAAA,GADaP,SAFzB,GAf+CC,aAAA,KAW/CC,oBAAqB,GAczBE,WAAA,SAAAG,GAVIC,KAAKC,IACD,UACA,IAAI7E,EAAS8E,SACTJ,GAAIC,EAAQI,eAgBpBC,QAOHC,OAzCkD,SAAA1C,QA+B9B,IAANA,IAGPA,EAAE/B,UACF+B,EAAE2C,UAAY3C,EAAE/B,SAYxB2E,EAAAA,SAAW,OAEH5C,EAAE/B,SAASO,EAAAA,UACXkE,EAAAA,UAAA,QAQJE,UAAO,SAAP5C,GA1D+CA,EAAA/B,UAAA,IAAA+B,EAAA/B,SAAAY,SAiD3CmB,EAAE/B,SAASO,QAAQ6D,KAAKO,WAYhCF,OAAA1C,KAOI6C,QAAA,WAVA,OAAOR,KAAKI,MAkBJK,KAAA,WAKH,SAAAC,EAAAlF,UAEGA,EAAK8E,OARL9E,EAAKmF,kBAYAC,EAAOrC,UAGpBsC,EAAajF,UAVLJ,EAAKI,SAASO,QAAQuE,GAa1BI,EAAKR,WACLX,EAAMW,UAFInE,QAAAuE,GAzBdA,EAUKV,KAAAI,MAqBGT,IAAAA,EAAAA,OAAMpB,QAAA,KAAAyB,KAAAe,YANA,OAIJC,EAJIvB,aAAA,KASNwB,aAAAA,mBAAAA,YATRC,EAAAC,MAYHL,IAAAd,KAAAc,MAxGLnB,KAAA,OA+FYyB,SAAU,OAYtBC,MACAL,OAAAM,KAAAC,UAAAP,GAVgBrB,KAAM,YAalB6B,QAAAA,SAAqBnD,GACX4C,mBA8IVQ,EA/IqBpD,SAASC,KAAKC,QAgB/BjC,UACAA,WAAA,KATJoF,QAAS,SAAS3B,GAgBlB,IAAAzD,EAAA0D,KAdI1D,EAAKqF,MAAMC,GACP,iFACAtF,EAAKuF,gBAgBbA,GAGIC,EAAAA,IAASA,EAAUxF,IAdnBA,EAAKsB,EAAI,EAgBTtB,EAAKyF,UAAYD,EAEjBxF,EAAK0F,MAAAA,EAALC,MAnCsC3F,EAAAa,OAAA4C,EAAA5C,QA2CtC0E,gBAAIK,SAAgBA,GAChBC,EAAAA,OAAgBA,QAApB,IACIvF,EAAAA,KACJkF,EAAIM,GAAO9F,EACN+F,MAAUjC,KAGV9D,EAJLyF,YAAAD,GAZAxF,EAAKgG,YAAYR,GAkBjBxF,EAAIiG,eAMA5E,YAAE6E,SAASC,GACd,IAPDnG,EAAA0D,KAcA0C,GAvBepG,EAAK4F,SAkBhBQ,EAAYN,SAhBC9F,EAAKM,WAsBjB+F,EADLC,IAIQL,UAAAA,kBACAlB,KAAA/E,EAAOkB,KAASqF,MAATvG,EAAgBmB,OAAUqF,SAAjCnF,GALR,OAAAA,EAAA8E,OAAA3C,MAdIyC,EAAmB,SAAS5E,GAyB5B4E,EAAAA,KAAAA,EAAAA,OAAAvG,GAAA,IAAA2B,EAAAmE,OAAAvF,GADJoB,EAAAmF,KAAAnF,EAAAmE,OAAA9F,GAAA,IAAA2B,EAAA8E,OAAAlG,GAKIwG,EAAAA,KAAAA,EAAWX,OAAKY,GAAOC,IAAZtF,EAAf8E,OAAAlG,IAGJ6F,EAtBSc,QAwBTC,OAAA,QAAA,UAtBSrE,KAAK,QAAS,gBA0BfxC,OAAO,YAEN+F,KAAAA,QAAU,QAEPvD,KAAItD,IAAA,SAAJmC,GAEQ,OADJ4E,EAAS5B,GACL,KAAAhD,EAAAkF,KAAA,MAAAlF,EAAAmF,OAGGV,EAAAgB,aAAAjB,SAAA,KAEHkB,OAAA,aAAAvE,KAAA,IAAA,SAAAnB,GAEP,OADI4E,EAAA5E,GACJ,KAAAA,EAAAkF,KAAA,MAAAlF,EAAAmF,KAAA,MAAAnF,EAAA6E,OAtBMJ,EAAKY,OAAOC,UAQ/BK,WAAY,SAAS9H,GACjB,IAAIc,EAAO0D,KACX9E,EA0BJ8G,UAAa,UACPuB,QAAF,oBAAwB,SAAA5F,GACtB,OACGmB,EAAKgB,KAAAnC,EAAAmC,KACMtE,EAAKgI,kBAGNhI,EAAWiI,WAWXC,IAvIvBlI,EAAAmF,WAAA,GAqG+B,MA2C3Bf,EAAAA,MAAYK,IAAA,eAASF,GACjBmB,EAAA,6BAAAtC,IAAApD,EAAAiI,MACAvC,EAAA,6BAAAtC,IAAApD,EAAAK,MACAS,EAAAA,mCAAAsC,IAAApD,EAAAmI,YAAA,KAOH3B,YAX8C,WAzB3Cd,EAAE,YAAY+B,SAsClB/B,EAAA,SApCSpC,KAAK,sBAAuB,WACzB,IAAInB,EAAIqC,KAAKwD,SACTG,EAAahG,EAAEgG,YAAc,OAsCrC,OAAAhG,GACJA,EAAA8F,KAAA9F,EAAA8F,KAAA,QAAA,IACgBnI,SACAJ,EAAG0I,KACFjG,sBADjBgG,GApB2ChG,EAAAkG,UAbnB,0BAsC5BC,KAAAC,MAAA,IAAApG,EAAAkG,WApC4B,IACV,KAuCVvH,SAAJoH,UAAA,MAAAM,QAAA,aA7BoCzF,QA0CpCqB,WAAIpE,SAAYoH,GAIX,IAJLtG,EAAA0D,KAtCA1D,EAAK2H,QAAUlE,EAAQkE,QA4CvB3H,EAAAM,WAAA,SAEAN,EAAK6F,QAALpC,GAEAzD,EAAAf,SACAe,EAAAuF,gBAAAvF,EAAAqF,MAAAvB,OAYY7E,OAAA,WACI,IAAAe,EAAA0D,KACH1D,EAAAkB,MAAC,IAAAlC,GAAAsB,WAAA,UACFN,EAAAA,SAAKqF,EAAMtB,IAAAA,WAAW6D,WAAA,SAAAvG,GACtBrB,OAAAA,EAAKuF,EAAAA,EAAAA,MAOhBE,YAAA,SAAAD,GACDqC,IAAAA,EAAUrF,KACNU,EAAOlD,EAAAqF,MAAeG,IAAAA,YAAkBA,KAG5CqC,EAAAA,KAIQ7G,WAASgD,EAAAA,MAAY8D,IAAA,eAJ7BvH,WAAAP,EAAAqF,MAAAyC,IAAA,eAOAD,IAIQ1G,EAAOE,EAAE/B,KAEP0B,WAAMhB,EACXwC,MAAKsF,IAAA,eACF3G,MAAS7B,EAAAA,MAAY+B,MAtDzBnC,EAAOc,EAAKsG,IA0DhBP,UAAA,UACAhB,KAAA5D,EAAA,SAAAE,GACI0G,OAAAA,EAAa7I,KAAK4H,EAAAA,KAALzF,EAAkBwE,KAAAA,EAASA,KAI3C7F,EAFDmB,MAAAA,EAtDAnB,EAAK6F,SAuCAQ,IAnCL,IAAIwB,EAAY3I,EA6DhB6I,QAKQ1B,OAAOhF,SALfmB,KAAA,QAAA,QAzDK8C,GAAG,WAAY,WAmEpB1G,EAAAoJ,MAAAC,oBAEIC,GAAAA,QAAWhJ,SAAAmC,GAjEP,GAAIzC,EAAGoJ,MAAMG,OAuEZpB,EAAOC,WAAUxE,OArEX,CAuENuE,GAAO1F,EAAA/B,UAAhB,IAA8B+B,EAAA/B,SAAAY,OArEd,OAwEVL,EAAQwF,MAAAtB,OAAY1C,GACfA,EAAKkE,gBAAAlE,MA3IxB,mBAAAD,SAAAG,KAAAiE,KAiJI4C,EAAerG,EAASC,IApEpB6F,EAAUrF,KAAK,YAAa,SAASnB,GAuEzCiC,MAAY,aAAAkC,EAAS/B,GAAS,IAAA+B,EAAAvF,GAAA,MAG1BD,EACKqI,OAAAA,cACAC,KAAAA,IAAAA,MACAX,MAAAA,OAAU,SAAatG,GArEpB,OAAOA,EAAE2C,UAAY,iBAAmB,SAyEhDhE,EACK+E,OAAOtB,YArEPjB,KAAK,QAAS,aAuEnBA,KAAA,IAAA,SAAAnB,GACA,OAAUkH,EAAOjJ,UAAW+B,EAAA2C,WAAA,GAAA,KAExBhE,KAAKa,KAAL,SACAb,KAAKwI,cAAL,SAAAnH,GAHJ,OAAAA,EAAA/B,UAAA+B,EAAA2C,UAAA,MAAA,UAMAyE,MAAA,eAAA,MAIA,IAAAV,EAAA7I,EAAA4H,aAAAjB,SAnFKQ,KAuFLrG,EAAK0I,KAAS1F,YAAe2F,SAALtH,GACxBrB,MAAK0I,aAAoBC,EAAAA,EAAAA,IAALtH,EAAmBjB,EAAA,MAGvCJ,EACK4I,OAAAA,UACDD,KAAAA,IAAW3I,EAAK2I,SAAAA,YADpBF,MAAA,OAAA,SAAApH,GAGKwH,OAAAA,EAAAA,UAAwBC,iBAAkB,SAG/C9I,EAvEK+G,OAAO,QAyEZ0B,MAAA,eAAA,GACAM,MAAW,YAAW7F,GAClBlD,KAAKgJ,SAAL3H,GADJ,OAAAA,EAAA8F,MAAA,KAAA9F,EAAA8F,KA7CgC9F,EAAA8F,KAvBlB9F,EAAEkG,UAAYC,KAAKC,MAAM,IAAMpG,EAAEkG,WAAa,KAK5D,IAAIW,EAAWhJ,EAyEfwH,OACKuC,aAQOjJ,SAxHPqG,KAgHLM,SAYA3G,EAAKkJ,OAAAA,UAAoBD,KAAAA,IACpB5C,MAOLrG,EAAA+G,OAAgBkC,QAAQ5C,MAAb,eAAkC,MAGzChB,EAAAA,QAAOrF,SAAK2I,GACZhD,EAAAA,GAAO3F,EAAAA,EACPa,EAAAA,GAAAA,EAAQb,OAKZoI,EAAArG,SAAAC,KAAAC,QACA2C,UAAE,WAMFtB,WAAA,SAAAG,GACA,IAAI0F,EAAAA,KAxFJnJ,EAAKoJ,UAAY,IA2FrBpJ,EAAAqI,UAAA,EAzFIrI,EAAKsI,iBAAmB,IACxBtI,EAAK2H,SAAW,GAAI,GAAI,GAAI,IA4FhCqB,EAAAA,MAAYpE,EAAA,aAASoD,QACjBhI,EAAIqJ,OAAJzE,EAAgB0E,aAAAA,SAChBtJ,EAAIuJ,OAAOvB,EAAPrC,MACA0D,EAAAA,KAAAA,EAAarB,KAvFjBpD,EAAEnD,QAAQ8G,OAAO,WA2FbvI,EAAAA,MAAJ4E,EAAA,aAAAe,QACIpC,EAAAA,OAAcvD,EAAAA,aAAcwJ,SAC5BC,EAAAA,WAIJzJ,EAAA2I,UAAA,IAAAlJ,EAAAgE,EAAAiB,QACA1E,EAAA2I,UAAQU,KAARrJ,EAAA+E,KAGQ0E,EAAAA,SAAAA,EAAAA,SACAC,OACJC,aAAA3J,EAAAoJ,UAAApJ,EAAAqI,YACI9E,EAAAA,SAAAA,UAAevD,EAAf2I,UAAAb,IAAA,cACA9H,EAAA0I,SAAAc,MAAAxJ,EAAA2I,UAAAb,IAAA,gBAGA9H,EAAA4J,QAAA,IAAAC,EAAA7J,GACJA,EAAA4I,aAAA,IAAAkB,GACInB,UAAI3I,EAAOqJ,YAEVrJ,EAAA6I,kBAAab,IAAHc,GACPvF,UAAAA,EAAAA,YAfZvD,EAAA+C,OAAA,IAAAgH,EAuBChB,WAAA,WACD/I,EAAK0I,cACLsB,MAWAxB,OAAI5J,WAGH,IAHDoB,EAGO0D,KACHkB,EAAA,aAAW0E,QAGPtJ,EAAAiJ,QAAKlI,EACD0I,OAAAA,aAIHpD,OAAA,WACJ7D,KAAA,QAAAxC,EAAA2F,OACD3F,KAAK0I,SAAS1F,EAAAA,QACdiH,KAAAA,iBAAqB,OACxB1I,KAxGOvB,EAAK0I,SAASpD,GAAG,OAAQ,WA0G5BqD,EAAUhF,gBAzKiB3D,EAAAkJ,aAAAlJ,EAAAiJ,QAqE3B5C,OAAO,YA0GhB7D,KAAA,QAAA,gBAxGSA,KAAK,QAASxC,EAAK2F,OACnBnD,KAAK,SAAUxC,EAAKa,QA0G7BqJ,KAAW,SAAA,SACHlK,KAAAA,OAAJ,SAEA4E,EAAEuF,IACEnK,EAAK2I,QAALtC,OAAmB,SAAW7B,KADlC,QAEI,OAEI4F,EAAAA,eAEJ/E,MAAArF,EAASqK,UACLrK,MAAK+E,EAAOsF,MACZrK,OAAK0E,EAAL7D,OACAb,IAAKwI,EAAAA,IATbb,QAAA3H,EAAA2H,SAeJkC,EAAAA,UAAgB9H,KAChBuB,0BACQtD,EAAO2I,UAAXb,IAAA,SACKwC,KAIH,IAAFnF,EAAAnF,EAAAuK,gBAOA3F,WAAE,SAAAoD,GAGMhI,IAAAA,EAAKsK,OAHb,IAAAtC,IAdiCqB,EAAArB,EAAA0B,KA3F7BJ,EAAkBtB,EAAMhF,WAG5B,IAAIhD,EAAO0D,KAgHP8G,EAAYzL,EAAAA,SAAa0L,QAGjBC,EADJ1K,EAAA0I,SAAA1F,YAEI2H,EAAO,GACPC,EAAU,GAGT,OAAAvB,GAEL,IAAA,QACIqB,EADJ,EAEIC,GAAO,EAAA,GACPC,MACI,IAAA,IAGArH,GAAA,IACIvD,MAIH,IAAA,IACDA,GAAKsK,GACR,MAEL,QAAA,iBACgBjB,EACL9F,EAAA8F,EACG,OAAAzK,EAAAoJ,QACJzE,EAAA3E,EAAAoJ,MAAsB6C,OAI5BH,KACAC,EAAO3K,EAAAoJ,WACPwB,EAAU5K,EAAAqI,WAFVqC,CAyBQ1K,GA1BZA,EAWJ0I,SAAAc,MAAAjG,GACIuH,EA7CR,aAgDE9K,EAAA2H,QAAA,GAxE+B,IApD7B3H,EAAK2H,QAAQ,GA+HrBoD,WAEQnB,EAGYc,IAGSJ,OAALtK,EAAAA,MACHiK,EAEL,aAAArL,EAAAoJ,MAAAhF,UAAA,QACI0H,CACAC,QAFJ,IAEWrB,EAFX,CAGIsB,IAAAA,EAAUtB,EAAA0B,MAAW,KAAA,GACjBhL,EAAKsK,EAAatB,MAAW,KAAEU,GAClC3I,MAAAX,IAAAW,MAAAV,KAELoJ,GACgBA,EADhB,GAAA9G,WAAAvC,GAEWqJ,EAFX,GAAA9G,WAAAtC,KAIqCL,EAA7B0I,SAAA1F,UAAAyG,GAGHQ,EAAA,aAAAR,EAAA,IAGTzJ,EA3BR2I,UAAAhF,IAAA,cAAAJ,GA+BAqB,EAAE+D,UAAAhF,IAAA,YAA2BiG,GA3GrC5J,EAAAsG,IAAA9D,KAAA,YAAAyH,EAAAD,KAmHQE,UAAA,WACA,IAAIlK,EAAO0D,KACX1D,EAAA4E,EAAiBnB,kCAAjBnB,MACAtC,EAAAA,QACAA,EAAKiL,UAASnD,IAAA,WAAAtD,OAEVjE,WAAc2K,EACdhI,UAAY,YAnIZ,SAASmH,GAsIbrK,EAAA+E,KAAAsF,EAAAtF,KACE/E,EAAA0E,OAAF2F,EAGQrK,EAAQmL,cAURnL,EAAKoL,SAALpJ,KAAAC,QACHqB,WAJL,SAAAgH,GAzB+B,IAAAtK,EAAA0D,KA5G/B1D,EAAKsK,aAAeA,EAGpB1F,EAAE,yBAAyByG,QA4I/BD,EAAAA,oBAAkBC,QACdzG,EAAA,wBAAA0G,MAMItL,EAAA+K,cACH/K,EAAAuL,sBAGA3G,EAFD,wBA5C+B0G,MAgDnChG,GAAA,SAAA,WA9IYtF,EAAKsK,aAAaJ,eAmJ1BtF,oBAAYqG,WACRO,IAAAA,EAAOlJ,KAtDoBkI,EAAAzL,EAAA0L,2BApFnBC,WAAY,OAgJ5Be,MAAiB,oBACbb,SAAA,WACAhG,EAAA,iBAAAiG,OACYlC,EAALC,aAAyB8C,cA/DDhB,WAAA,OA3EnBC,MAAO,qBAgJfC,SAAW,WArEvB,IAAAe,EAAA/G,EAxE4B,wCAgJ5BgH,OA9I4BD,GACA3L,EAAKsK,aAAa3B,UAAUhF,IAgJhC7B,QAAoB6J,GAIpC3L,EAAAsK,aAAA3B,UAAAxE,UAIUuG,WAAA,iBACNmB,MAAc,sBACdC,SAAe,WACfC,EAAAA,sBAAiBlB,UAHrBH,WAAA,cAvIYC,MAAO,gBAgJnBC,SAAA,WACKoB,OAAkBC,KAAA,wEAUfjM,gBAAAoH,UAAA,YAGJpH,EAAAA,yBAAAqG,OAAAmE,EAAA0B,MAGAlM,YAAK+L,WACR,IAFD/L,EAAA0D,KA9IIkG,EAAU7K,EAAa0L,2BAoJvBC,WAAuByB,UACZvH,MAAQwH,UACPD,SAAJ,WACMnM,EAAMqM,aAAWrD,YAAnBU,KAAA,SAFRgB,WAAA,WADJC,MAAA,WAFJC,SAAA,WArIoB5K,EAAKsK,aAAatB,YAAaU,KAAM,SAgGrBgB,WAAA,eA3FpBC,MAAO,iBAkJ3BC,SAAA,WAhJwB5K,EAAKsK,aAAatB,YACdU,KAAM,cAuJrBqC,gBAAL3E,UAAA,YAGJxC,EAAEwH,oBAAUJ,OAAiBpC,EAAAsC,QAIzBlM,EAAA8B,EAAoB+I,QACpB7K,UAAAA,WAEAA,WAAAA,SAAQ8L,GAEX,IAAA9L,EAAA0D,KA3EmC1D,EAAA2I,UAAAlF,EAAAkF,UApEpC3I,EAAKsM,GAAK1H,EAAE,iBAkJhB5E,EAAAiL,QAhJQjK,WAAY4D,EAAE,2BACdrE,WAAYqE,EAAE,2BAkJtBmH,SAAenH,EAAA,0BAIPA,EAAAA,qBACI5E,MADJsF,GAAA,QAAA,WAGHtF,EAAAsM,GAAAnB,SA/IDvG,EAAE,6BAkJN0G,MAhJShG,GAAG,QAAS,WACTtF,EAAKyL,oBAmJb7G,EAAA,6BACI1F,MACAA,GAAJ,QAAU,WAEFc,EAACA,WAURoL,MAZD,WAaI1I,IAAAA,EAAMgB,KAEb1D,EAAAkC,kBAAAlC,EAAAiL,OAAAjK,WAAA,GAAA,OAhHLhB,EAAAkC,kBAAAlC,EAAAiL,OAAA1K,WAAA,EAAA,KAnCaP,EAAKkC,kBAAkBlC,EAAKiL,OAAO/H,SAAU,EAAG,KAIrD0B,EAAEwH,KAAKpM,EAAKiL,OAAQ,SAASsB,EAAKf,GAsJtCzB,EAAAA,UAAiBjI,IAAAA,EAAaG,EAAOK,UAK7BoJ,SAAA,WAAA,IAAA1L,EAIIwC,KAJJoC,EAAAwH,KAAApM,EAKIwM,OAAYC,SAAAA,EAAAA,GAChBzM,EAAK8C,IAAAA,EAAAA,UAAAA,IAAyB4J,OAMjCjB,gBAbD,WAJiC7G,EAAA,YAAA+B,SApIjC,IAAI3G,EAAO0D,KAwJfkB,EAAAwH,KAAApM,EAAA2I,UAAAgE,SAAA,SAAAJ,EAAA9L,GAtJQT,EAAK2I,UAAUhF,IAAI4I,EAAK9L,KAyJhCmM,EAAAA,YAGQpE,OAAA,eAMgBM,EAAAhH,EAAO+K,QACXC,UAAA,WALJxJ,WAAA,SAAAG,GAQH,IAAAzD,EATD0D,KAUI1D,EAAAsM,GAAA1H,EAAA,sBAKH5E,EAAA2I,UAAAlF,EAAAkF,UAER3I,EApBD+M,IAqBHlB,WAAAjH,EAAA,2BA7CLkH,YAAAlH,EAAA,4BA5GYmH,cAAenH,EAAE,8BA4JtBuC,KAAAvC,EAAA,6BACHwD,KAAcA,EAAAA,6BADlBf,WAAAzC,EAAA,oCArJQ5E,EAAKgM,iBACD7E,KAAM,KACN5H,KAAM,KACN8H,WAAY,MAIhBzC,EAAE,oBACG0G,MACAhG,GAAG,QAAS,WACTtF,EAAKsM,GAAGnB,SAEhBnL,EAAK+M,GAAGjB,YAAYR,MAAMhG,GAAG,QAAS,WAClCtF,EAAKgN,gBAEThN,EAAK+M,GAAGhB,cAAcT,MAAMhG,GAAG,QAAS,WACpCtF,EAAK+L,kBAGT,SAAUnH,GAENA,EAAEqI,GAAGC,OAAS,SAASf,GACnB,OAAOvH,EAAElB,MAAM0I,KAAK,WACZD,EACAvH,EAAElB,MAAM2I,WAAW,YAEnBzH,EAAElB,MAAMlB,KAAK,WAAY,eAPzC,CAWG8B,QAEHtE,EAAK+M,GAAGlB,WAAWP,MAAMhG,GAAG,QAAS,WACjCtF,EAAKmN,cAObA,SAAU,WACN,IAAInN,EAAO0D,KACP0J,EAAUpN,EAAK+M,GAAGlB,WAAWwB,GAAG,YAE/BD,GACDpN,EAAK+L,gBAGTnH,EAAEwH,KAAKpM,EAAKgM,gBAAiB,SAASO,EAAK9L,GACvCT,EAAK+M,GAAGR,GAAKW,OAAOE,KAEpBA,GACApN,EAAK+M,GAAGjB,YAAYjB,OACpB7K,EAAK+M,GAAGhB,cAAclB,SAEtB7K,EAAK+M,GAAGjB,YAAYX,OACpBnL,EAAK+M,GAAGhB,cAAcZ,SAO9BY,cAAe,WACX,IAAI/L,EAAO0D,KACPxE,EAAOc,EAAK2I,UAAUb,IAAI,gBAC1B5I,GACA0F,EAAEwH,KAAKpM,EAAKgM,gBAAiB,SAASO,EAAK9L,GACvCT,EAAK+M,GAAGR,GAAKjK,IAAIpD,EAAKqN,OAQlCS,YAAa,WACT,IAAIhN,EAAO0D,KACPxE,EAAOc,EAAK2I,UAAUb,IAAI,gBAC9B,GAAI5I,EAAM,CACN,IACKc,EAAKkC,kBAAkBlC,EAAK+M,GAAGxN,KAAM,EAAG,IACzCS,EAAK8C,yBAAyB9C,EAAK+M,GAAG5F,OACtCnH,EAAK8C,yBAAyB9C,EAAK+M,GAAG1F,YAEtC,OAEJzC,EAAEwH,KAAKpM,EAAKgM,gBAAiB,SAASO,EAAK9L,GACvCvB,EAAKqN,GAAOvM,EAAK+M,GAAGR,GAAKjK,QAE7BtC,EAAK2I,UAAUhF,IAAI,sBAAuB,IAAI2J,WAE9C5K,MAAM,uBASdqH,EAAiBjI,EAAaG,QAC9BqB,WAAY,WACR,IAAItD,EAAO0D,KAEXkB,EAAE,sBAAsBU,GAAG,QAAS,WAChC,IAAIoH,EAAa9H,EAAE,uBACf6H,EAAqB7H,EAAE,4BAClBtC,MACA0I,MAAM,KACXxI,EAAOiK,EAAmB,GAC1BD,EAAYC,EAAmB,GACnCzM,EAAK8C,yBAAyB4J,GAEjB,SAATlK,GACAxC,EAAKkC,kBAAkBwK,EAAY,EAAG,GAE1C1M,EAAK4M,WAAWpK,EAAMgK,EAAWE,EAAWpK,UAOpDsK,WAAY,SAASpK,EAAMgK,EAAWlK,GAClC1D,EAAGmH,UAAU,UAAUkB,QAAQ,kBAAmB,SAAS5F,GACvD,IAAIwL,EAAUxL,EAAEmB,GAChB,QAAuB,IAAZqK,GAAuC,OAAZA,EAClC,GAAa,SAATrK,EACA,OAAQgK,GACJ,IAAK,eACD,OAAOK,IAAYvK,EACvB,IAAK,cACD,OAAOuK,IAAYvK,EACvB,QACI,YAEL,GAAa,SAATE,GAA4B,eAATA,EAC1B,OAGyC,IAFrCqK,EACKU,cACAC,QAAQlL,EAAIiL,oBAQzC,OACInF,aAAcA","file":"../../scripts/viz/phyloviz.js","sourcesContent":["define(\n    [\"libs/d3\", \"viz/visualization\", \"mvc/dataset/data\", \"mvc/ui/icon-button\"],\n    function(d3, visualization_mod, data_mod, mod_icon_btn) {\n        /**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\n        var UserMenuBase = Backbone.View.extend({\n            className: \"UserMenuBase\",\n\n            /**\n     * Check if an input value is a number and falls within max min.\n     */\n            isAcceptableValue: function($inputKey, min, max) {\n                //TODO: use better feedback than alert\n                var value = $inputKey.val(),\n                    fieldName =\n                        $inputKey.attr(\"displayLabel\") ||\n                        $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n                function isNumeric(n) {\n                    return !isNaN(parseFloat(n)) && isFinite(n);\n                }\n\n                if (!isNumeric(value)) {\n                    alert(fieldName + \" is not a number!\");\n                    return false;\n                }\n\n                if (value > max) {\n                    alert(fieldName + \" is too large.\");\n                    return false;\n                } else if (value < min) {\n                    alert(fieldName + \" is too small.\");\n                    return false;\n                }\n                return true;\n            },\n\n            /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n            hasIllegalJsonCharacters: function($inputKey) {\n                if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n                    alert(\n                        \"Named fields cannot contain these illegal characters: \" +\n                            \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n                    );\n                    return true;\n                }\n                return false;\n            }\n        });\n\n        /**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\n        function PhyloTreeLayout() {\n            var self = this,\n                hierarchy = d3.layout\n                    .hierarchy()\n                    .sort(null)\n                    .value(null),\n                height = 360, // ! represents both the layout angle and the height of the layout, in px\n                layoutMode = \"Linear\",\n                leafHeight = 18, // height of each individual leaf node\n                depthSeparation = 200, // separation between nodes of different depth, in px\n                leafIndex = 0, // change to recurssive call\n                defaultDist = 0.5, // tree defaults to 0.5 dist if no dist is specified\n                maxTextWidth = 50; // maximum length of the text labels\n\n            self.leafHeight = function(inputLeafHeight) {\n                if (typeof inputLeafHeight === \"undefined\") {\n                    return leafHeight;\n                } else {\n                    leafHeight = inputLeafHeight;\n                    return self;\n                }\n            };\n\n            self.layoutMode = function(mode) {\n                if (typeof mode === \"undefined\") {\n                    return layoutMode;\n                } else {\n                    layoutMode = mode;\n                    return self;\n                }\n            };\n\n            // changes the layout angle of the display, which is really changing the height\n            self.layoutAngle = function(angle) {\n                if (typeof angle === \"undefined\") {\n                    return height;\n                }\n                // to use default if the user puts in strange values\n                if (isNaN(angle) || angle < 0 || angle > 360) {\n                    return self;\n                } else {\n                    height = angle;\n                    return self;\n                }\n            };\n\n            self.separation = function(dist) {\n                // changes the dist between the nodes of different depth\n                if (typeof dist === \"undefined\") {\n                    return depthSeparation;\n                } else {\n                    depthSeparation = dist;\n                    return self;\n                }\n            };\n\n            self.links = function(nodes) {\n                // uses d3 native method to generate links. Done.\n                return d3.layout.tree().links(nodes);\n            };\n\n            // -- Custom method for laying out phylogeny tree in a linear fashion\n            self.nodes = function(d, i) {\n                //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n                if (toString.call(d) === \"[object Array]\") {\n                    // if d is an array, replate with the first object (newick, phyloxml)\n                    d = d[0];\n                }\n                // self is to find the depth of all the nodes, assumes root is passed in\n                var _nodes = hierarchy.call(self, d, i),\n                    nodes = [],\n                    maxDepth = 0,\n                    numLeaves = 0;\n                //console.debug( JSON.stringify( _nodes, null, 2 ) )\n                window._d = d;\n                window._nodes = _nodes;\n\n                //TODO: remove dbl-touch loop\n                // changing from hierarchy's custom format for data to usable format\n                _nodes.forEach(function(node) {\n                    maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n                    nodes.push(node);\n                });\n                // counting the number of leaf nodes and assigning max depth\n                //  to nodes that do not have children to flush all the leave nodes\n                nodes.forEach(function(node) {\n                    if (!node.children) {\n                        //&& !node._children\n                        numLeaves += 1;\n                        node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n                    }\n                });\n\n                leafHeight =\n                    layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n                leafIndex = 0;\n                layout(nodes[0], maxDepth, leafHeight, null);\n\n                return nodes;\n            };\n\n            /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n            function layout(node, maxDepth, vertSeparation, parent) {\n                var children = node.children,\n                    sumChildVertSeparation = 0;\n\n                // calculation of node's dist from parents, going down.\n                var dist = node.dist || defaultDist;\n                dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n                node.dist = dist;\n                if (parent !== null) {\n                    node.y0 = parent.y0 + dist * depthSeparation;\n                } else {\n                    //root node\n                    node.y0 = maxTextWidth;\n                }\n\n                // if a node have no children, we will treat it as a leaf and start laying it out first\n                if (!children) {\n                    node.x0 = leafIndex * vertSeparation;\n                    leafIndex += 1;\n                } else {\n                    // if it has children, we will visit all its children and calculate its position from its children\n                    children.forEach(function(child) {\n                        child.parent = node;\n                        sumChildVertSeparation += layout(\n                            child,\n                            maxDepth,\n                            vertSeparation,\n                            node\n                        );\n                    });\n                    node.x0 = sumChildVertSeparation / children.length;\n                }\n\n                // adding properties to the newly created node\n                node.x = node.x0;\n                node.y = node.y0;\n                return node.x0;\n            }\n            return self;\n        }\n\n        /**\n * -- PhyloTree Model --\n */\n        var PhyloTree = visualization_mod.Visualization.extend({\n            defaults: {\n                layout: \"Linear\",\n                separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n                leafHeight: 18,\n                type: \"phyloviz\", // visualization type\n                title: \"Title\",\n                scaleFactor: 1,\n                translate: [0, 0],\n                fontSize: 12, //fontSize of node label\n                selectedNode: null,\n                nodeAttrChangedTime: 0\n            },\n\n            initialize: function(options) {\n                this.set(\n                    \"dataset\",\n                    new data_mod.Dataset({\n                        id: options.dataset_id\n                    })\n                );\n            },\n\n            root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n            /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n            toggle: function(d) {\n                if (typeof d === \"undefined\") {\n                    return;\n                }\n                if (d.children) {\n                    d._children = d.children;\n                    d.children = null;\n                } else {\n                    d.children = d._children;\n                    d._children = null;\n                }\n            },\n\n            /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n            toggleAll: function(d) {\n                if (d.children && d.children.length !== 0) {\n                    d.children.forEach(this.toggleAll);\n                    toggle(d);\n                }\n            },\n\n            /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n            getData: function() {\n                return this.root;\n            },\n\n            /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n            save: function() {\n                var root = this.root;\n                cleanTree(root);\n                //this.set(\"root\", root);\n\n                function cleanTree(node) {\n                    // we need to remove parent to delete circular reference\n                    delete node.parent;\n\n                    // removing unnecessary attributes\n                    if (node._selected) {\n                        delete node._selected;\n                    }\n\n                    if (node.children) {\n                        node.children.forEach(cleanTree);\n                    }\n                    if (node._children) {\n                        node._children.forEach(cleanTree);\n                    }\n                }\n\n                var config = jQuery.extend(true, {}, this.attributes);\n                config.selectedNode = null;\n\n                show_message(\"Saving to Galaxy\", \"progress\");\n\n                return $.ajax({\n                    url: this.url(),\n                    type: \"POST\",\n                    dataType: \"json\",\n                    data: {\n                        config: JSON.stringify(config),\n                        type: \"phyloviz\"\n                    },\n                    success: function(res) {\n                        hide_modal();\n                    }\n                });\n            }\n        });\n\n        // -- Views --\n        /**\n *  Stores the default variable for setting up the visualization\n */\n        var PhylovizLayoutBase = Backbone.View.extend({\n            defaults: {\n                nodeRadius: 4.5 // radius of each node in the diagram\n            },\n\n            /**\n     *  Common initialization in layouts\n     */\n            stdInit: function(options) {\n                var self = this;\n                self.model.on(\n                    \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n                    self.updateAndRender,\n                    self\n                );\n\n                self.vis = options.vis;\n                self.i = 0;\n                self.maxDepth = -1; // stores the max depth of the tree\n\n                self.width = options.width;\n                self.height = options.height;\n            },\n\n            /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n            updateAndRender: function(source) {\n                var vis = d3.select(\".vis\"),\n                    self = this;\n                source = source || self.model.root;\n\n                self.renderNodes(source);\n                self.renderLinks(source);\n                self.addTooltips();\n            },\n\n            /**\n     * Renders the links for the visualization.\n     */\n            renderLinks: function(source) {\n                var self = this;\n                var diagonal = self.diagonal;\n                var duration = self.duration;\n                var layoutMode = self.layoutMode;\n                var link = self.vis\n                    .selectAll(\"g.completeLink\")\n                    .data(self.tree.links(self.nodes), function(d) {\n                        return d.target.id;\n                    });\n\n                var calcalateLinePos = function(d) {\n                    // position of the source node <=> starting location of the line drawn\n                    d.pos0 = d.source.y0 + \" \" + d.source.x0;\n                    // position where the line makes a right angle bend\n                    d.pos1 = d.source.y0 + \" \" + d.target.x0;\n                    // point where the horizontal line becomes a dotted line\n                    d.pos2 = d.target.y0 + \" \" + d.target.x0;\n                };\n\n                var linkEnter = link\n                    .enter()\n                    .insert(\"svg:g\", \"g.node\")\n                    .attr(\"class\", \"completeLink\");\n\n                linkEnter\n                    .append(\"svg:path\")\n                    .attr(\"class\", \"link\")\n                    .attr(\"d\", function(d) {\n                        calcalateLinePos(d);\n                        return \"M \" + d.pos0 + \" L \" + d.pos1;\n                    });\n\n                var linkUpdate = link.transition().duration(500);\n\n                linkUpdate.select(\"path.link\").attr(\"d\", function(d) {\n                    calcalateLinePos(d);\n                    return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n                });\n\n                var linkExit = link.exit().remove();\n            },\n\n            // User Interaction methods below\n\n            /**\n     *  Displays the information for editing\n     */\n            selectNode: function(node) {\n                var self = this;\n                d3\n                    .selectAll(\"g.node\")\n                    .classed(\"selectedHighlight\", function(d) {\n                        if (node.id === d.id) {\n                            if (node._selected) {\n                                // for de=selecting node.\n                                delete node._selected;\n                                return false;\n                            } else {\n                                node._selected = true;\n                                return true;\n                            }\n                        }\n                        return false;\n                    });\n\n                self.model.set(\"selectedNode\", node);\n                $(\"#phyloVizSelectedNodeName\").val(node.name);\n                $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n                $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n            },\n\n            /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n            addTooltips: function() {\n                $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n                $(\".node\")\n                    .attr(\"data-original-title\", function() {\n                        var d = this.__data__,\n                            annotation = d.annotation || \"None\";\n                        return d\n                            ? (d.name ? d.name + \"<br/>\" : \"\") +\n                                  \"Dist: \" +\n                                  d.dist +\n                                  \" <br/>Annotation1: \" +\n                                  annotation +\n                                  (d.bootstrap\n                                      ? \"<br/>Confidence level: \" +\n                                        Math.round(100 * d.bootstrap)\n                                      : \"\")\n                            : \"\";\n                    })\n                    .tooltip({ placement: \"top\", trigger: \"hover\" });\n            }\n        });\n\n        /**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\n        var PhylovizLinearView = PhylovizLayoutBase.extend({\n            initialize: function(options) {\n                // Default values of linear layout\n                var self = this;\n                self.margins = options.margins;\n                self.layoutMode = \"Linear\";\n\n                self.stdInit(options);\n\n                self.layout();\n                self.updateAndRender(self.model.root);\n            },\n\n            /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n            layout: function() {\n                var self = this;\n                self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n                self.diagonal = d3.svg.diagonal().projection(function(d) {\n                    return [d.y, d.x];\n                });\n            },\n\n            /**\n     * Renders the nodes base on Linear layout.\n     */\n            renderNodes: function(source) {\n                var self = this,\n                    fontSize = self.model.get(\"fontSize\") + \"px\";\n\n                // assigning properties from models\n                self.tree\n                    .separation(self.model.get(\"separation\"))\n                    .leafHeight(self.model.get(\"leafHeight\"));\n\n                var duration = 500,\n                    nodes = self.tree\n                        .separation(self.model.get(\"separation\"))\n                        .nodes(self.model.root);\n\n                var node = self.vis\n                    .selectAll(\"g.node\")\n                    .data(nodes, function(d) {\n                        return d.name + d.id || (d.id = ++self.i);\n                    });\n\n                // These variables has to be passed into update links which are in the base methods\n                self.nodes = nodes;\n                self.duration = duration;\n\n                // ------- D3 ENTRY --------\n                // Enter any new nodes at the parent's previous position.\n                var nodeEnter = node\n                    .enter()\n                    .append(\"svg:g\")\n                    .attr(\"class\", \"node\")\n                    .on(\"dblclick\", function() {\n                        d3.event.stopPropagation();\n                    })\n                    .on(\"click\", function(d) {\n                        if (d3.event.altKey) {\n                            self.selectNode(d); // display info if alt is pressed\n                        } else {\n                            if (d.children && d.children.length === 0) {\n                                return;\n                            } // there is no need to toggle leaves\n                            self.model.toggle(d); // contract/expand nodes at data level\n                            self.updateAndRender(d); // re-render the tree\n                        }\n                    });\n                //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n                if (toString.call(source) === \"[object Array]\") {\n                    // if d is an array, replate with the first object (newick, phyloxml)\n                    source = source[0];\n                }\n                nodeEnter.attr(\"transform\", function(d) {\n                    return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n                });\n\n                nodeEnter\n                    .append(\"svg:circle\")\n                    .attr(\"r\", 1e-6)\n                    .style(\"fill\", function(d) {\n                        return d._children ? \"lightsteelblue\" : \"#fff\";\n                    });\n\n                nodeEnter\n                    .append(\"svg:text\")\n                    .attr(\"class\", \"nodeLabel\")\n                    .attr(\"x\", function(d) {\n                        return d.children || d._children ? -10 : 10;\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .attr(\"text-anchor\", function(d) {\n                        return d.children || d._children ? \"end\" : \"start\";\n                    })\n                    .style(\"fill-opacity\", 1e-6);\n\n                // ------- D3 TRANSITION --------\n                // Transition nodes to their new position.\n                var nodeUpdate = node.transition().duration(duration);\n\n                nodeUpdate.attr(\"transform\", function(d) {\n                    return \"translate(\" + d.y + \",\" + d.x + \")\";\n                });\n\n                nodeUpdate\n                    .select(\"circle\")\n                    .attr(\"r\", self.defaults.nodeRadius)\n                    .style(\"fill\", function(d) {\n                        return d._children ? \"lightsteelblue\" : \"#fff\";\n                    });\n\n                nodeUpdate\n                    .select(\"text\")\n                    .style(\"fill-opacity\", 1)\n                    .style(\"font-size\", fontSize)\n                    .text(function(d) {\n                        return d.name && d.name !== \"\"\n                            ? d.name\n                            : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\";\n                    });\n\n                // ------- D3 EXIT --------\n                // Transition exiting nodes to the parent's new position.\n                var nodeExit = node\n                    .exit()\n                    .transition()\n                    .duration(duration)\n                    .remove();\n\n                nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n                nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n                // Stash the old positions for transition.\n                nodes.forEach(function(d) {\n                    d.x0 = d.x; // we need the x0, y0 for parents with children\n                    d.y0 = d.y;\n                });\n            }\n        });\n\n        var PhylovizView = Backbone.View.extend({\n            className: \"phyloviz\",\n\n            initialize: function(options) {\n                var self = this;\n                // -- Default values of the vis\n                self.MIN_SCALE = 0.05; //for zooming\n                self.MAX_SCALE = 5;\n                self.MAX_DISPLACEMENT = 500;\n                self.margins = [10, 60, 10, 80];\n\n                self.width = $(\"#PhyloViz\").width();\n                self.height = $(\"#PhyloViz\").height();\n                self.radius = self.width;\n                self.data = options.data;\n\n                // -- Events Phyloviz view responses to\n                $(window).resize(function() {\n                    self.width = $(\"#PhyloViz\").width();\n                    self.height = $(\"#PhyloViz\").height();\n                    self.render();\n                });\n\n                // -- Create phyloTree model\n                self.phyloTree = new PhyloTree(options.config);\n                self.phyloTree.root = self.data;\n\n                // -- Set up UI functions of main view\n                self.zoomFunc = d3.behavior\n                    .zoom()\n                    .scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n                self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n                self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n                // -- set up header buttons, search and settings menu\n                self.navMenu = new HeaderButtons(self);\n                self.settingsMenu = new SettingsMenu({\n                    phyloTree: self.phyloTree\n                });\n                self.nodeSelectionView = new NodeSelectionView({\n                    phyloTree: self.phyloTree\n                });\n                self.search = new PhyloVizSearch();\n\n                // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n                setTimeout(function() {\n                    self.zoomAndPan();\n                }, 1000);\n            },\n\n            render: function() {\n                // -- Creating helper function for vis. --\n                var self = this;\n                $(\"#PhyloViz\").empty();\n\n                // -- Layout viz. --\n                self.mainSVG = d3\n                    .select(\"#PhyloViz\")\n                    .append(\"svg:svg\")\n                    .attr(\"width\", self.width)\n                    .attr(\"height\", self.height)\n                    .attr(\"pointer-events\", \"all\")\n                    .call(\n                        self.zoomFunc.on(\"zoom\", function() {\n                            self.zoomAndPan();\n                        })\n                    );\n\n                self.boundingRect = self.mainSVG\n                    .append(\"svg:rect\")\n                    .attr(\"class\", \"boundingRect\")\n                    .attr(\"width\", self.width)\n                    .attr(\"height\", self.height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"fill\", \"white\");\n\n                self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n                self.layoutOptions = {\n                    model: self.phyloTree,\n                    width: self.width,\n                    height: self.height,\n                    vis: self.vis,\n                    margins: self.margins\n                };\n\n                // -- Creating Title\n                $(\"#title\").text(\n                    \"Phylogenetic Tree from \" +\n                        self.phyloTree.get(\"title\") +\n                        \":\"\n                );\n\n                // -- Create Linear view instance --\n                var linearView = new PhylovizLinearView(self.layoutOptions);\n            },\n\n            /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n            zoomAndPan: function(event) {\n                var zoomParams, translateParams;\n                if (typeof event !== \"undefined\") {\n                    zoomParams = event.zoom;\n                    translateParams = event.translate;\n                }\n\n                var self = this,\n                    scaleFactor = self.zoomFunc.scale(),\n                    translationCoor = self.zoomFunc.translate(),\n                    zoomStatement = \"\",\n                    translateStatement = \"\";\n\n                // Do manual scaling.\n                switch (zoomParams) {\n                    case \"reset\":\n                        scaleFactor = 1.0;\n                        translationCoor = [0, 0];\n                        break;\n                    case \"+\":\n                        scaleFactor *= 1.1;\n                        break;\n                    case \"-\":\n                        scaleFactor *= 0.9;\n                        break;\n                    default:\n                        if (typeof zoomParams === \"number\") {\n                            scaleFactor = zoomParams;\n                        } else if (d3.event !== null) {\n                            scaleFactor = d3.event.scale;\n                        }\n                }\n                if (\n                    scaleFactor < self.MIN_SCALE ||\n                    scaleFactor > self.MAX_SCALE\n                ) {\n                    return;\n                }\n                self.zoomFunc.scale(scaleFactor); //update scale Factor\n                zoomStatement =\n                    \"translate(\" +\n                    self.margins[3] +\n                    \",\" +\n                    self.margins[0] +\n                    \")\" +\n                    \" scale(\" +\n                    scaleFactor +\n                    \")\";\n\n                // Do manual translation.\n                if (d3.event !== null) {\n                    translateStatement =\n                        \"translate(\" + d3.event.translate + \")\";\n                } else {\n                    if (typeof translateParams !== \"undefined\") {\n                        var x = translateParams.split(\",\")[0];\n                        var y = translateParams.split(\",\")[1];\n                        if (!isNaN(x) && !isNaN(y)) {\n                            translationCoor = [\n                                translationCoor[0] + parseFloat(x),\n                                translationCoor[1] + parseFloat(y)\n                            ];\n                        }\n                    }\n                    self.zoomFunc.translate(translationCoor); // update zoomFunc\n                    translateStatement = \"translate(\" + translationCoor + \")\";\n                }\n\n                self.phyloTree.set(\"scaleFactor\", scaleFactor);\n                self.phyloTree.set(\"translate\", translationCoor);\n                //refers to the view that we are actually zooming\n                self.vis.attr(\"transform\", translateStatement + zoomStatement);\n            },\n\n            /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n            reloadViz: function() {\n                var self = this,\n                    treeIndex = $(\"#phylovizNexSelector :selected\").val();\n                $.getJSON(\n                    self.phyloTree.get(\"dataset\").url(),\n                    {\n                        tree_index: treeIndex,\n                        data_type: \"raw_data\"\n                    },\n                    function(packedJson) {\n                        self.data = packedJson.data;\n                        self.config = packedJson;\n                        self.render();\n                    }\n                );\n            }\n        });\n\n        var HeaderButtons = Backbone.View.extend({\n            initialize: function(phylovizView) {\n                var self = this;\n                self.phylovizView = phylovizView;\n\n                // Clean up code - if the class initialized more than once\n                $(\"#panelHeaderRightBtns\").empty();\n                $(\"#phyloVizNavBtns\").empty();\n                $(\"#phylovizNexSelector\").off();\n\n                self.initNavBtns();\n                self.initRightHeaderBtns();\n\n                // Initial a tree selector in the case of nexus\n                $(\"#phylovizNexSelector\")\n                    .off()\n                    .on(\"change\", function() {\n                        self.phylovizView.reloadViz();\n                    });\n            },\n\n            initRightHeaderBtns: function() {\n                var self = this;\n\n                var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n                    [\n                        {\n                            icon_class: \"gear\",\n                            title: \"PhyloViz Settings\",\n                            on_click: function() {\n                                $(\"#SettingsMenu\").show();\n                                self.settingsMenu.updateUI();\n                            }\n                        },\n                        {\n                            icon_class: \"disk\",\n                            title: \"Save visualization\",\n                            on_click: function() {\n                                var nexSelected = $(\n                                    \"#phylovizNexSelector option:selected\"\n                                ).text();\n                                if (nexSelected) {\n                                    self.phylovizView.phyloTree.set(\n                                        \"title\",\n                                        nexSelected\n                                    );\n                                }\n                                self.phylovizView.phyloTree.save();\n                            }\n                        },\n                        {\n                            icon_class: \"chevron-expand\",\n                            title: \"Search / Edit Nodes\",\n                            on_click: function() {\n                                $(\"#nodeSelectionView\").show();\n                            }\n                        },\n                        {\n                            icon_class: \"information\",\n                            title: \"Phyloviz Help\",\n                            on_click: function() {\n                                window.open(\n                                    \"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\"\n                                );\n                                // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                            }\n                        }\n                    ],\n                    {\n                        tooltip_config: { placement: \"bottom\" }\n                    }\n                );\n                $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n            },\n\n            initNavBtns: function() {\n                var self = this,\n                    navMenu = mod_icon_btn.create_icon_buttons_menu(\n                        [\n                            {\n                                icon_class: \"zoom-in\",\n                                title: \"Zoom in\",\n                                on_click: function() {\n                                    self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                                }\n                            },\n                            {\n                                icon_class: \"zoom-out\",\n                                title: \"Zoom out\",\n                                on_click: function() {\n                                    self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                                }\n                            },\n                            {\n                                icon_class: \"arrow-circle\",\n                                title: \"Reset Zoom/Pan\",\n                                on_click: function() {\n                                    self.phylovizView.zoomAndPan({\n                                        zoom: \"reset\"\n                                    });\n                                }\n                            }\n                        ],\n                        {\n                            tooltip_config: { placement: \"bottom\" }\n                        }\n                    );\n                $(\"#phyloVizNavBtns\").append(navMenu.$el);\n            }\n        });\n\n        var SettingsMenu = UserMenuBase.extend({\n            className: \"Settings\",\n\n            initialize: function(options) {\n                // settings needs to directly interact with the phyloviz model so it will get access to it.\n                var self = this;\n                self.phyloTree = options.phyloTree;\n                self.el = $(\"#SettingsMenu\");\n                self.inputs = {\n                    separation: $(\"#phyloVizTreeSeparation\"),\n                    leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n                    fontSize: $(\"#phyloVizTreeFontSize\")\n                };\n\n                //init all buttons of settings\n                $(\"#settingsCloseBtn\")\n                    .off()\n                    .on(\"click\", function() {\n                        self.el.hide();\n                    });\n                $(\"#phylovizResetSettingsBtn\")\n                    .off()\n                    .on(\"click\", function() {\n                        self.resetToDefaults();\n                    });\n                $(\"#phylovizApplySettingsBtn\")\n                    .off()\n                    .on(\"click\", function() {\n                        self.apply();\n                    });\n            },\n\n            /**\n     * Applying user values to phylotree model.\n     */\n            apply: function() {\n                var self = this;\n                if (\n                    !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n                    !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n                    !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n                ) {\n                    return;\n                }\n                $.each(self.inputs, function(key, $input) {\n                    self.phyloTree.set(key, $input.val());\n                });\n            },\n            /**\n     * Called to update the values input to that stored in the model\n     */\n            updateUI: function() {\n                var self = this;\n                $.each(self.inputs, function(key, $input) {\n                    $input.val(self.phyloTree.get(key));\n                });\n            },\n            /**\n     * Resets the value of the phyloTree model to its default\n     */\n            resetToDefaults: function() {\n                $(\".tooltip\").remove(); // just in case the tool tip was not removed\n                var self = this;\n                $.each(self.phyloTree.defaults, function(key, value) {\n                    self.phyloTree.set(key, value);\n                });\n                self.updateUI();\n            },\n\n            render: function() {}\n        });\n\n        /**\n * View for inspecting node properties and editing them\n */\n        var NodeSelectionView = UserMenuBase.extend({\n            className: \"Settings\",\n\n            initialize: function(options) {\n                var self = this;\n                self.el = $(\"#nodeSelectionView\");\n                self.phyloTree = options.phyloTree;\n\n                self.UI = {\n                    enableEdit: $(\"#phylovizEditNodesCheck\"),\n                    saveChanges: $(\"#phylovizNodeSaveChanges\"),\n                    cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n                    name: $(\"#phyloVizSelectedNodeName\"),\n                    dist: $(\"#phyloVizSelectedNodeDist\"),\n                    annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n                };\n\n                // temporarily stores the values in case user change their mind\n                self.valuesOfConcern = {\n                    name: null,\n                    dist: null,\n                    annotation: null\n                };\n\n                //init UI buttons\n                $(\"#nodeSelCloseBtn\")\n                    .off()\n                    .on(\"click\", function() {\n                        self.el.hide();\n                    });\n                self.UI.saveChanges.off().on(\"click\", function() {\n                    self.updateNodes();\n                });\n                self.UI.cancelChanges.off().on(\"click\", function() {\n                    self.cancelChanges();\n                });\n\n                (function($) {\n                    // extending jquery fxn for enabling and disabling nodes.\n                    $.fn.enable = function(isEnabled) {\n                        return $(this).each(function() {\n                            if (isEnabled) {\n                                $(this).removeAttr(\"disabled\");\n                            } else {\n                                $(this).attr(\"disabled\", \"disabled\");\n                            }\n                        });\n                    };\n                })(jQuery);\n\n                self.UI.enableEdit.off().on(\"click\", function() {\n                    self.toggleUI();\n                });\n            },\n\n            /**\n     * For turning on and off the child elements\n     */\n            toggleUI: function() {\n                var self = this,\n                    checked = self.UI.enableEdit.is(\":checked\");\n\n                if (!checked) {\n                    self.cancelChanges();\n                }\n\n                $.each(self.valuesOfConcern, function(key, value) {\n                    self.UI[key].enable(checked);\n                });\n                if (checked) {\n                    self.UI.saveChanges.show();\n                    self.UI.cancelChanges.show();\n                } else {\n                    self.UI.saveChanges.hide();\n                    self.UI.cancelChanges.hide();\n                }\n            },\n\n            /**\n     * Reverting to previous values in case user change their minds\n     */\n            cancelChanges: function() {\n                var self = this,\n                    node = self.phyloTree.get(\"selectedNode\");\n                if (node) {\n                    $.each(self.valuesOfConcern, function(key, value) {\n                        self.UI[key].val(node[key]);\n                    });\n                }\n            },\n\n            /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n            updateNodes: function() {\n                var self = this,\n                    node = self.phyloTree.get(\"selectedNode\");\n                if (node) {\n                    if (\n                        !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                        self.hasIllegalJsonCharacters(self.UI.name) ||\n                        self.hasIllegalJsonCharacters(self.UI.annotation)\n                    ) {\n                        return;\n                    }\n                    $.each(self.valuesOfConcern, function(key, value) {\n                        node[key] = self.UI[key].val();\n                    });\n                    self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n                } else {\n                    alert(\"No node selected\");\n                }\n            }\n        });\n\n        /**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\n        var PhyloVizSearch = UserMenuBase.extend({\n            initialize: function() {\n                var self = this;\n\n                $(\"#phyloVizSearchBtn\").on(\"click\", function() {\n                    var searchTerm = $(\"#phyloVizSearchTerm\"),\n                        searchConditionVal = $(\"#phyloVizSearchCondition\")\n                            .val()\n                            .split(\"-\"),\n                        attr = searchConditionVal[0],\n                        condition = searchConditionVal[1];\n                    self.hasIllegalJsonCharacters(searchTerm);\n\n                    if (attr === \"dist\") {\n                        self.isAcceptableValue(searchTerm, 0, 1);\n                    }\n                    self.searchTree(attr, condition, searchTerm.val());\n                });\n            },\n\n            /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n            searchTree: function(attr, condition, val) {\n                d3.selectAll(\"g.node\").classed(\"searchHighlight\", function(d) {\n                    var attrVal = d[attr];\n                    if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                        if (attr === \"dist\") {\n                            switch (condition) {\n                                case \"greaterEqual\":\n                                    return attrVal >= +val;\n                                case \"lesserEqual\":\n                                    return attrVal <= +val;\n                                default:\n                                    return;\n                            }\n                        } else if (attr === \"name\" || attr === \"annotation\") {\n                            return (\n                                attrVal\n                                    .toLowerCase()\n                                    .indexOf(val.toLowerCase()) !== -1\n                            );\n                        }\n                    }\n                });\n            }\n        });\n\n        return {\n            PhylovizView: PhylovizView\n        };\n    }\n);\n"]}