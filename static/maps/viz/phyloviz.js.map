{"version":3,"sources":["viz/phyloviz.js"],"names":["define","d3","visualization_mod","data_mod","mod_icon_btn","PhyloTreeLayout","layout","node","maxDepth","vertSeparation","parent","children","sumChildVertSeparation","dist","defaultDist","y0","depthSeparation","maxTextWidth","forEach","child","x0","length","leafIndex","x","y","self","this","hierarchy","sort","value","height","layoutMode","leafHeight","inputLeafHeight","mode","layoutAngle","angle","isNaN","separation","links","nodes","tree","d","i","toString","call","_nodes","numLeaves","window","_d","depth","push","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","$inputKey","min","max","val","fieldName","attr","replace","n","parseFloat","isFinite","alert","hasIllegalJsonCharacters","search","PhyloTree","Visualization","defaults","type","title","scaleFactor","translate","fontSize","selectedNode","nodeAttrChangedTime","initialize","options","set","Dataset","id","dataset_id","root","toggle","_children","toggleAll","getData","save","cleanTree","_selected","config","jQuery","attributes","show_message","$","ajax","url","dataType","data","JSON","stringify","success","res","hide_modal","PhylovizLayoutBase","nodeRadius","stdInit","model","on","updateAndRender","vis","width","source","select","renderNodes","renderLinks","addTooltips","link","diagonal","duration","selectAll","target","calcalateLinePos","pos0","pos1","pos2","enter","insert","append","transition","exit","remove","selectNode","classed","name","annotation","__data__","tooltip","placement","trigger","PhylovizLinearView","margins","svg","projection","get","nodeEnter","event","stopPropagation","altKey","style","nodeUpdate","text","nodeExit","PhylovizView","MIN_SCALE","MAX_SCALE","MAX_DISPLACEMENT","radius","resize","render","phyloTree","zoomFunc","behavior","zoom","scaleExtent","scale","navMenu","HeaderButtons","settingsMenu","SettingsMenu","nodeSelectionView","NodeSelectionView","PhyloVizSearch","setTimeout","zoomAndPan","empty","mainSVG","boundingRect","layoutOptions","zoomParams","translateParams","translationCoor","zoomStatement","translateStatement","split","reloadViz","treeIndex","getJSON","tree_index","data_type","packedJson","phylovizView","off","initNavBtns","initRightHeaderBtns","rightMenu","create_icon_buttons_menu","icon_class","on_click","show","updateUI","nexSelected","open","tooltip_config","$el","el","inputs","hide","resetToDefaults","apply","each","key","$input","UI","enableEdit","saveChanges","cancelChanges","valuesOfConcern","updateNodes","fn","enable","isEnabled","removeAttr","toggleUI","checked","is","Date","searchTerm","searchConditionVal","condition","searchTree","attrVal","toLowerCase","indexOf"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["define([\n    'libs/d3',\n    'viz/visualization',\n    'mvc/dataset/data',\n    'mvc/ui/icon-button'\n], function(d3, visualization_mod, data_mod, mod_icon_btn) {\n\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n\n    className: 'UserMenuBase',\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue : function ($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val(),\n            fieldName = $inputKey.attr(\"displayLabel\") || $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)){\n            alert(fieldName + \" is not a number!\");\n            return false;\n        }\n\n        if ( value > max){\n            alert(fieldName + \" is too large.\");\n            return false;\n        } else if ( value < min) {\n            alert(fieldName + \" is too small.\");\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters : function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1){\n            alert(\"Named fields cannot contain these illegal characters: \"\n                + \"double quote(\\\"), single guote(\\'), or back slash(\\\\). \");\n            return true;\n        }\n        return false;\n    }\n});\n\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n\n    var self = this,\n        hierarchy = d3.layout.hierarchy().sort(null).value(null),\n        height = 360, // ! represents both the layout angle and the height of the layout, in px\n        layoutMode = \"Linear\",\n        leafHeight = 18, // height of each individual leaf node\n        depthSeparation = 200, // separation between nodes of different depth, in px\n        leafIndex = 0, // change to recurssive call\n        defaultDist = 0.5, // tree defaults to 0.5 dist if no dist is specified\n        maxTextWidth = 50; // maximum length of the text labels\n\n\n    self.leafHeight = function(inputLeafHeight){\n        if (typeof inputLeafHeight === \"undefined\"){ return leafHeight; }\n        else { leafHeight = inputLeafHeight; return self;}\n    };\n\n    self.layoutMode = function(mode){\n        if (typeof mode === \"undefined\"){ return layoutMode; }\n        else { layoutMode = mode; return self;}\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = function(angle) {\n        if (typeof angle === \"undefined\"){ return height; }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) { return self; }\n        else { height = angle; return self;}\n    };\n\n    self.separation = function(dist){   // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\"){ return depthSeparation; }\n        else { depthSeparation = dist; return self;}\n    };\n\n    self.links = function (nodes) {     // uses d3 native method to generate links. Done.\n        return d3.layout.tree().links(nodes);\n    };\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = function (d, i) {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if( toString.call( d ) === '[object Array]' ){\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i),\n            nodes = [],\n            maxDepth = 0,\n            numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(function (node){\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth;  //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(function(node){\n            if ( !node.children )  { //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight = layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout (node, maxDepth, vertSeparation, parent) {\n        var children = node.children,\n            sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist;     // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null){\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {    //root node\n            node.y0 = maxTextWidth;\n        }\n\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach( function (child) {\n                child.parent = node;\n                sumChildVertSeparation += layout(child, maxDepth, vertSeparation, node);\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults : {\n        layout: \"Linear\",\n        separation : 250,    // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type : \"phyloviz\",   // visualization type\n        title : \"Title\",\n        scaleFactor: 1,\n        translate: [0,0],\n        fontSize: 12,        //fontSize of node label\n        selectedNode : null,\n        nodeAttrChangedTime : 0\n    },\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data_mod.Dataset({\n            id: options.dataset_id\n        }));\n\n    },\n\n    root : {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle : function (d) {\n        if(typeof d === \"undefined\") {return ;}\n        if (d.children ) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll : function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData : function (){\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node){\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected){ delete node._selected;}\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config  = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url     : this.url(),\n            type    : \"POST\",\n            dataType: \"json\",\n            data    : {\n                config  : JSON.stringify( config ),\n                type    : 'phyloviz'\n            },\n            success: function(res){\n                hide_modal();\n            }\n        });\n    }\n});\n\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase =  Backbone.View.extend({\n    defaults : {\n        nodeRadius : 4.5 // radius of each node in the diagram\n    },\n\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit : function (options) {\n\n        var self = this;\n        self.model.on(\"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender, self);\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender : function(source) {\n        var vis = d3.select(\".vis\"),\n            self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks : function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis.selectAll(\"g.completeLink\")\n            .data(self.tree.links(self.nodes), function(d) { return d.target.id; });\n\n        var calcalateLinePos = function(d) {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = d.source.y0 + \" \" + d.source.x0;\n            // position where the line makes a right angle bend\n            d.pos1 = d.source.y0 + \" \" + d.target.x0;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = d.target.y0 + \" \" + d.target.x0;\n        };\n\n        var linkEnter = link.enter().insert(\"svg:g\",\"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter.append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0  + \" L \" + d.pos1;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\")\n            .attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n            });\n\n        var linkExit = link.exit().remove();\n\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode : function(node){\n        var self = this;\n        d3.selectAll(\"g.node\")\n            .classed(\"selectedHighlight\", function(d){\n                if (node.id === d.id){\n                    if(node._selected) { // for de=selecting node.\n                        delete node._selected;\n                        return false;\n                    } else {\n                        node._selected = true;\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips : function (){\n        $(\".tooltip\").remove();      //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function(){\n                var d = this.__data__,\n                    annotation = d.annotation || \"None\" ;\n                return d ? (d.name ? d.name + \"<br/>\" : \"\") + \"Dist: \" + d.dist + \" <br/>Annotation: \" + annotation: \"\";\n            })\n            .tooltip({'placement':'top', 'trigger' : 'hover'});\n\n    }\n});\n\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView =  PhylovizLayoutBase.extend({\n    initialize : function(options){\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout : function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal()\n            .projection(function(d) { return [d.y, d.x ]; });\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes : function (source) {\n        var self = this,\n            fontSize = self.model.get(\"fontSize\") + \"px\";\n\n        // assigning properties from models\n        self.tree.separation(self.model.get(\"separation\")).leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500,\n            nodes = self.tree.separation(self.model.get(\"separation\")).nodes(self.model.root);\n\n        var node = self.vis.selectAll(\"g.node\")\n            .data(nodes, function(d) {\n                return d.name + d.id || (d.id = ++self.i);\n            });\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node.enter().append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", function(){ d3.event.stopPropagation();    })\n            .on(\"click\", function(d) {\n                if (d3.event.altKey) {\n                    self.selectNode(d);        // display info if alt is pressed\n                } else {\n                    if(d.children && d.children.length === 0){ return;}  // there is no need to toggle leaves\n                    self.model.toggle(d);   // contract/expand nodes at data level\n                    self.updateAndRender(d);   // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if( toString.call( source ) === '[object Array]' ){\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\"transform\", function(d) { return \"translate(\" + source.y0 + \",\" + source.x0 + \")\"; });\n\n        nodeEnter.append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n        nodeEnter.append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", function(d) { return d.children || d._children ? -10 : 10; })\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", function(d) { return d.children || d._children ? \"end\" : \"start\"; })\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition()\n            .duration(duration);\n\n        nodeUpdate.attr(\"transform\", function(d) {\n            return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n\n        nodeUpdate.select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n        nodeUpdate.select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(function(d) { return d.name; });\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit =node.exit().transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\")\n            .attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\")\n            .style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(function(d) {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n\n});\n\nvar PhylovizView = Backbone.View.extend({\n\n    className: 'phyloviz',\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(function(){\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior.zoom().scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({phyloTree : self.phyloTree});\n        self.nodeSelectionView = new NodeSelectionView({phyloTree : self.phyloTree});\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(function(){\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function(){\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3.select(\"#PhyloViz\").append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(self.zoomFunc.on(\"zoom\", function(){\n            self.zoomAndPan();\n        }));\n\n        self.boundingRect = self.mainSVG.append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG\n            .append(\"svg:g\")\n            .attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model : self.phyloTree,\n            width : self.width,\n            height : self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(\"Phylogenetic Tree from \" + self.phyloTree.get(\"title\") + \":\");\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan : function(event){\n         var zoomParams,\n            translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this,\n            scaleFactor = self.zoomFunc.scale(),\n            translationCoor = self.zoomFunc.translate(),\n            zoomStatement = \"\",\n            translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0,0]; break;\n            case \"+\":\n                scaleFactor *= 1.1; break;\n            case \"-\":\n                scaleFactor *= 0.9; break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) { return;}\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement = \"translate(\" +  self.margins[3] + \",\" + self.margins[0] + \")\" +\n            \" scale(\" + scaleFactor + \")\";\n\n        // Do manual translation.\n        if( d3.event !== null) {\n            translateStatement = \"translate(\" + d3.event.translate + \")\";\n        } else {\n            if(typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)){\n                    translationCoor = [translationCoor[0] + parseFloat(x), translationCoor[1] + parseFloat(y)];\n                }\n            }\n            self.zoomFunc.translate(translationCoor);   // update zoomFunc\n            translateStatement = \"translate(\" + translationCoor + \")\";\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz : function() {\n        var self = this,\n            treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(self.phyloTree.get(\"dataset\").url(), {\n                tree_index: treeIndex,\n                data_type: 'raw_data'\n            },\n            function(packedJson){\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            });\n    }\n});\n\n\nvar HeaderButtons = Backbone.View.extend({\n\n    initialize : function(phylovizView){\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\").off().on(\"change\",  function() {self.phylovizView.reloadViz();}  );\n\n    },\n\n    initRightHeaderBtns : function(){\n        var self = this;\n\n        rightMenu = mod_icon_btn.create_icon_buttons_menu([\n            { icon_class: 'gear', title: 'PhyloViz Settings', on_click: function(){\n                $(\"#SettingsMenu\").show();\n                self.settingsMenu.updateUI();\n            } },\n            { icon_class: 'disk', title: 'Save visualization', on_click: function() {\n                var nexSelected = $(\"#phylovizNexSelector option:selected\").text();\n                if(nexSelected) {\n                    self.phylovizView.phyloTree.set(\"title\", nexSelected);\n                }\n                self.phylovizView.phyloTree.save();\n            } },\n            { icon_class: 'chevron-expand', title: 'Search / Edit Nodes', on_click: function() {\n                $(\"#nodeSelectionView\").show();\n            } },\n            { icon_class: 'information', title: 'Phyloviz Help', on_click: function() {\n                window.open('https://wiki.galaxyproject.org/Learn/Visualization/PhylogeneticTree');\n                // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n            } }\n        ],\n            {\n                tooltip_config: { placement: 'bottom' }\n            });\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this,\n            navMenu = mod_icon_btn.create_icon_buttons_menu([\n                { icon_class: 'zoom-in', title: 'Zoom in', on_click: function() {\n                    self.phylovizView.zoomAndPan({ zoom : \"+\"});\n                } },\n                { icon_class: 'zoom-out', title: 'Zoom out', on_click: function() {\n                    self.phylovizView.zoomAndPan({ zoom : \"-\"});\n                } },\n                { icon_class: 'arrow-circle', title: 'Reset Zoom/Pan', on_click: function() {\n                    self.phylovizView.zoomAndPan({ zoom : \"reset\"});\n                } }\n            ],\n                {\n                    tooltip_config: { placement: 'bottom' }\n                });\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\n\nvar SettingsMenu = UserMenuBase.extend({\n\n    className: 'Settings',\n\n    initialize: function(options){\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation : $(\"#phyloVizTreeSeparation\"),\n            leafHeight : $(\"#phyloVizTreeLeafHeight\"),\n            fontSize   : $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\").off().on(\"click\", function() { self.el.hide(); });\n        $(\"#phylovizResetSettingsBtn\").off().on(\"click\", function() { self.resetToDefaults(); });\n        $(\"#phylovizApplySettingsBtn\").off().on(\"click\", function() { self.apply(); });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply : function(){\n        var self = this;\n        if (!self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)){\n            return;\n        }\n        $.each(self.inputs, function(key, $input){\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI : function(){\n        var self = this;\n        $.each(self.inputs, function(key, $input){\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults : function(){\n        $(\".tooltip\").remove();      // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, function(key, value) {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function(){\n\n    }\n\n});\n\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n\n    className: 'Settings',\n\n    initialize : function (options){\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit      : $('#phylovizEditNodesCheck'),\n            saveChanges     : $('#phylovizNodeSaveChanges'),\n            cancelChanges   : $(\"#phylovizNodeCancelChanges\"),\n            name            : $(\"#phyloVizSelectedNodeName\"),\n            dist            : $(\"#phyloVizSelectedNodeDist\"),\n            annotation      : $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name : null,\n            dist : null,\n            annotation : null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\").off().on(\"click\", function() { self.el.hide(); });\n        self.UI.saveChanges.off().on(\"click\", function(){ self.updateNodes(); });\n        self.UI.cancelChanges.off().on(\"click\", function(){ self.cancelChanges(); });\n\n        (function ($) {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function (isEnabled) {\n                return $(this).each(function () {\n                    if(isEnabled){\n                        $(this).removeAttr('disabled');\n                    } else {\n                        $(this).attr('disabled', 'disabled');\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", function () {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI : function(){\n        var self = this,\n            checked = self.UI.enableEdit.is(':checked');\n\n        if (!checked) { self.cancelChanges(); }\n\n        $.each(self.valuesOfConcern, function(key, value) {\n            self.UI[key].enable(checked);\n        });\n        if(checked){\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges : function() {\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node){\n            $.each(self.valuesOfConcern, function(key, value) {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes : function (){\n        var self = this,\n            node = self.phyloTree.get(\"selectedNode\");\n        if (node){\n            if (!self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation) ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, function(key, value) {\n                (node[key]) = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize : function () {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", function(){\n            var searchTerm = $(\"#phyloVizSearchTerm\"),\n                searchConditionVal = $(\"#phyloVizSearchCondition\").val().split(\"-\"),\n                attr = searchConditionVal[0],\n                condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\"){\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree : function (attr, condition, val){\n        d3.selectAll(\"g.node\")\n            .classed(\"searchHighlight\", function(d){\n                var attrVal =  d[attr];\n                if (typeof attrVal !== \"undefined\" && attrVal !== null){\n                    if (attr === \"dist\"){\n                        switch (condition) {\n                            case \"greaterEqual\":\n                                return attrVal >= +val;\n                            case \"lesserEqual\":\n                                return attrVal <= +val;\n                            default:\n                                return;\n                        }\n\n                    } else if (attr === \"name\" || attr === \"annotation\") {\n                        return attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1;\n                    }\n                }\n            });\n    }\n});\n\nreturn {\n    PhylovizView: PhylovizView\n};\n\n});\n"]}