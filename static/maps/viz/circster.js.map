{"version":3,"sources":["viz/circster.js"],"names":["require","mod_utils","cssLoadFile","define","_","d3","visualization","config","mod_icon_btn","SVGUtils","Backbone","Model","extend","is_visible","svg_elt","svg","eltBRect","getBoundingClientRect","svgBRect","$","right","left","bottom","top","UsesTicks","drawTicks","parent_elt","data","dataHandler","textTransform","horizontal","ticks","append","selectAll","enter","attr","d","angle","Math","PI","radius","tick_coords","text_coords","text_anchor","style","text","label","formatNum","num","sigDigits","undefined","rval","abs","toPrecision","roundedNum","round","toFixed","CircsterLabelTrack","CircsterView","View","className","initialize","options","this","genome","label_arc_height","scale","circular_views","chords_views","model","get","on","add_track","remove_track","vis_config","update_track_bounds","get_circular_tracks","filter","track","get_chord_tracks","get_tracks_bounds","circular_tracks","dataset_arc_height","get_value","track_gap","min_dimension","min","$el","width","height","radius_start","length","tracks_start_radii","range","map","render","self","chords_tracks","total_gap","tracks_bounds","select","call","behavior","zoom","event","translate","zoom_drag_timeout","clearTimeout","setTimeout","index","view","CircsterBigWigTrackView","el","radius_bounds","CircsterChromInteractionsTrackView","outermost_radius","track_bounds","label_track_view","CircsterChromLabelTrackView","new_track","innermost_radius_bounds","new_view","push","new_track_bounds","each","track_view","i","update_radius_bounds","track_index","tracks","splice","remove","CircsterTrackView","tagName","bg_stroke","loading_bg_fill","bg_fill","chroms_layout","_chroms_layout","data_bounds","get_fill_color","color","track_parent_elt","genome_arcs","arc_gen","arc","innerRadius","outerRadius","chroms_elts","chroms_paths","chrom","data_manager","data_ready_deferred","data_is_ready","when","then","_render_data","render_labels","new_d","transition","duration","_transition_chrom_data","_transition_labels","update_scale","new_scale","old_scale","utils","data_deferred","path_elt","chrom_region","get_chrom_region","can_get_more_detailed_data","get_more_detailed_data","_update_data_bounds","chrom_arc","find","layout","_render_chrom_data","chrom_arcs","chrom_data_paths","get_genome_wide_data","genome_wide_data","path_data","reject","chrom_data","path_fn","_get_path_function","p_data","path","new_bounds","get_data_bounds","rendered_deferred","Deferred","set_value","silent","layout_and_data","zip","chroms_data_layout","chrom_info","resolve","chroms_info","get_chroms_info","pie_layout","pie","value","len","sort","init_arcs","gap_per_chrom","new_endAngle","endAngle","startAngle","prototype","min_arc_len","chromArcTicks","k","v","visibleChroms","c","CircsterQuantitativeTrackView","track_config","_update_min_max","_quantile","numbers","quantile","ascending","datum","linear","domain","clamp","line","radial","interpolate","area","_data_bounds_ticks_fn","classed","tick","click","ConfigSettingCollectionView","collection","render_in_modal","labeledChroms","new_data","flatten","values","p","parseInt","max","chord_data","cur_chrom","chrom_chord_data","source_angle","_get_region_angle","target_angle","source","target","concat","chord","position","chrom_angle_data","chrom_layout","GalaxyApp","Genome","galaxy_config","app","vis","GenomeVisualization","viz_config","add","key","type","hidden","title","dbkey","menu","create_icon_buttons_menu","icon_class","on_click","select_datasets","Galaxy","root","add_tracks","modal","show","body","ajax","url","dataType","id","vis_json","JSON","stringify","success","vis_info","hide","set","vis_id","error","buttons","Cancel","window","location","tooltip_config","placement","tooltip"],"mappings":"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","file":"../../scripts/viz/circster.js","sourcesContent":["// load required libraries\nrequire([\n    'utils/utils',\n], function(mod_utils)\n{\n    // load css\n    mod_utils.cssLoadFile(\"static/style/circster.css\");\n});\n\ndefine([\n    \"libs/underscore\",\n    \"libs/d3\",\n    \"viz/visualization\",\n    \"utils/config\",\n    'mvc/ui/icon-button',\n    'libs/farbtastic'\n], function(_, d3, visualization, config, mod_icon_btn) {\n\n/**\n * Utility class for working with SVG.\n */\nvar SVGUtils = Backbone.Model.extend({\n\n    /**\n     * Returns true if element is visible.\n     */\n    is_visible: function(svg_elt, svg) {\n        var eltBRect = svg_elt.getBoundingClientRect(),\n            svgBRect = $('svg')[0].getBoundingClientRect();\n\n        if (// To the left of screen?\n            eltBRect.right < 0 ||\n            // To the right of screen?\n            eltBRect.left > svgBRect.right ||\n            // Above screen?\n            eltBRect.bottom < 0 ||\n            // Below screen?\n            eltBRect.top > svgBRect.bottom) {\n            return false;\n        }\n        return true;\n    }\n});\n\n/**\n * Mixin for using ticks.\n */\nvar UsesTicks = {\n    drawTicks: function(parent_elt, data, dataHandler, textTransform, horizontal) {\n        // Set up group elements for chroms and for each tick.\n        var ticks = parent_elt.append(\"g\")\n                        .selectAll(\"g\")\n                            .data(data)\n                        .enter().append(\"g\")\n                        .selectAll(\"g\")\n                            .data(dataHandler)\n                        .enter().append(\"g\")\n                            .attr(\"class\", \"tick\")\n                            .attr(\"transform\", function(d) {\n                                return \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \")\" +\n                                        \"translate(\" + d.radius + \",0)\";\n                            });\n\n        // Add line + text for ticks.\n        var tick_coords = [],\n            text_coords = [],\n            text_anchor = function(d) {\n                return d.angle > Math.PI ? \"end\" : null;\n            };\n        if (horizontal) {\n            tick_coords = [0, 0, 0, -4];\n            text_coords = [4, 0, \"\", \".35em\"];\n            text_anchor = null;\n        }\n        else {\n            tick_coords = [1, 0, 4, 0];\n            text_coords = [0, 4, \".35em\", \"\"];\n\n        }\n\n        ticks.append(\"line\")\n             .attr(\"x1\", tick_coords[0])\n             .attr(\"y1\", tick_coords[1])\n             .attr(\"x2\", tick_coords[2])\n             .attr(\"y1\", tick_coords[3])\n             .style(\"stroke\", \"#000\");\n\n        return ticks.append(\"text\")\n                    .attr(\"x\", text_coords[0])\n                    .attr(\"y\", text_coords[1])\n                    .attr(\"dx\", text_coords[2])\n                    .attr(\"dy\", text_coords[3])\n                    .attr(\"text-anchor\", text_anchor)\n                    .attr(\"transform\", textTransform)\n                    .text(function(d) { return d.label; });\n    },\n\n    /**\n     * Format number for display at a tick.\n     */\n    formatNum: function(num, sigDigits) {\n        // Use default of 2 sig. digits.\n        if (sigDigits === undefined)\n            sigDigits = 2;\n\n        // Verify input number\n        if (num === null)\n            return null;\n\n        // Calculate return value\n        var rval = null;\n        if (Math.abs(num) < 1) {\n            rval = num.toPrecision(sigDigits);\n        }\n        else {\n            // Use round to turn string from toPrecision() back into a number.\n            var roundedNum = Math.round(num.toPrecision(sigDigits));\n\n            // Use abbreviations.\n            num = Math.abs(num);\n            if (num < 1000) {\n                rval = roundedNum;\n            }\n            else if (num < 1000000) {\n                // Use K.\n                rval = Math.round((roundedNum/1000).toPrecision(3)).toFixed(0) + 'K';\n            }\n            else if (num < 1000000000) {\n                // Use M.\n                rval = Math.round((roundedNum/1000000).toPrecision(3)).toFixed(0) + 'M';\n            }\n        }\n\n        return rval;\n    }\n};\n\n/**\n * A label track.\n */\nvar CircsterLabelTrack = Backbone.Model.extend({});\n\n/**\n * Renders a full circster visualization.\n */\nvar CircsterView = Backbone.View.extend({\n    className: 'circster',\n\n    initialize: function(options) {\n        this.genome = options.genome;\n        this.label_arc_height = 50;\n        this.scale = 1;\n        this.circular_views = null;\n        this.chords_views = null;\n\n        // When tracks added to/removed from model, update view.\n        this.model.get('drawables').on('add', this.add_track, this);\n        this.model.get('drawables').on('remove', this.remove_track, this);\n\n        // When config settings change, update view.\n        var vis_config = this.model.get('config');\n        vis_config.get('arc_dataset_height').on('change:value', this.update_track_bounds, this);\n        vis_config.get('track_gap').on('change:value', this.update_track_bounds, this);\n    },\n\n    // HACKs: using track_type for circular/chord distinction in the functions below for now.\n\n    /**\n     * Returns tracks to be rendered using circular view.\n     */\n    get_circular_tracks: function() {\n        return this.model.get('drawables').filter(function(track) {\n            return track.get('track_type') !== 'DiagonalHeatmapTrack';\n        });\n    },\n\n    /**\n     * Returns tracks to be rendered using chords view.\n     */\n    get_chord_tracks: function() {\n        return this.model.get('drawables').filter(function(track) {\n            return track.get('track_type') === 'DiagonalHeatmapTrack';\n        });\n    },\n\n    /**\n     * Returns a list of circular tracks' radius bounds.\n     */\n    get_tracks_bounds: function() {\n        var circular_tracks = this.get_circular_tracks(),\n            dataset_arc_height = this.model.get('config').get_value('arc_dataset_height'),\n            track_gap = this.model.get('config').get_value('track_gap'),\n            // Subtract 20 to make sure chrom labels are on screen.\n            min_dimension = Math.min(this.$el.width(), this.$el.height()) - 20,\n            // Compute radius start based on model, will be centered\n            // and fit entirely inside element by default.\n            radius_start = min_dimension / 2 -\n                            circular_tracks.length * (dataset_arc_height + track_gap) +\n                            // Add track_gap back in because no gap is needed for last track.\n                            track_gap -\n                            this.label_arc_height,\n\n            // Compute range of track starting radii.\n            tracks_start_radii = d3.range(radius_start, min_dimension / 2, dataset_arc_height + track_gap);\n\n        // Map from track start to bounds.\n        var self = this;\n        return _.map(tracks_start_radii, function(radius) {\n            return [radius, radius + dataset_arc_height];\n        });\n    },\n\n    /**\n     * Renders circular tracks, chord tracks, and label tracks.\n     */\n    render: function() {\n        var self = this,\n            width = self.$el.width(),\n            height = self.$el.height(),\n            circular_tracks = this.get_circular_tracks(),\n            chords_tracks = this.get_chord_tracks(),\n            total_gap = self.model.get('config').get_value('total_gap'),\n            tracks_bounds = this.get_tracks_bounds(),\n\n            // Set up SVG element.\n            svg = d3.select(self.$el[0])\n              .append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .attr(\"pointer-events\", \"all\")\n              // Set up zooming, dragging.\n              .append('svg:g')\n                .call(d3.behavior.zoom().on('zoom', function() {\n                    // Do zoom, drag.\n                    var scale = d3.event.scale;\n                    svg.attr(\"transform\",\n                      \"translate(\" + d3.event.translate + \")\" +\n                      \" scale(\" + scale + \")\");\n\n                    // Propagate scale changes to views.\n                    if (self.scale !== scale) {\n                        // Use timeout to wait for zooming/dragging to stop before rendering more detail.\n                        if (self.zoom_drag_timeout) {\n                            clearTimeout(self.zoom_drag_timeout);\n                        }\n                        self.zoom_drag_timeout = setTimeout(function() {\n                            // Render more detail in tracks' visible elements.\n                            // FIXME: do not do this right now; it is not fully implemented--e.g. data bounds\n                            // are not updated when new data is fetched--and fetching more detailed quantitative\n                            // data is not that useful.\n                            /*\n                            _.each(self.circular_views, function(view) {\n                                view.update_scale(scale);\n                            });\n                            */\n                        }, 400);\n                    }\n                }))\n                .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\")\n              .append('svg:g').attr('class', 'tracks');\n\n        // -- Render circular tracks. --\n\n        // Create a view for each track in the visualization and render.\n        this.circular_views = circular_tracks.map(function(track, index) {\n            var view = new CircsterBigWigTrackView({\n                    el: svg.append('g')[0],\n                    track: track,\n                    radius_bounds: tracks_bounds[index],\n                    genome: self.genome,\n                    total_gap: total_gap\n                });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render chords tracks. --\n\n        this.chords_views = chords_tracks.map(function(track) {\n            var view = new CircsterChromInteractionsTrackView({\n                el: svg.append('g')[0],\n                track: track,\n                radius_bounds: tracks_bounds[0],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render label track. --\n\n        // Track bounds are:\n        // (a) outer radius of last circular track;\n        // (b)\n        var outermost_radius = this.circular_views[this.circular_views.length-1].radius_bounds[1],\n            track_bounds = [\n                outermost_radius,\n                outermost_radius + this.label_arc_height\n            ];\n        this.label_track_view = new CircsterChromLabelTrackView({\n            el: svg.append('g')[0],\n            track: new CircsterLabelTrack(),\n            radius_bounds: track_bounds,\n            genome: self.genome,\n            total_gap: total_gap\n        });\n\n        this.label_track_view.render();\n    },\n\n    /**\n     * Render a single track on the outside of the current visualization.\n     */\n    add_track: function(new_track) {\n        var total_gap = this.model.get('config').get_value('total_gap');\n\n        if (new_track.get('track_type') === 'DiagonalHeatmapTrack') {\n            // Added chords track.\n            var innermost_radius_bounds = this.circular_views[0].radius_bounds,\n                new_view = new CircsterChromInteractionsTrackView({\n                    el: d3.select('g.tracks').append('g')[0],\n                    track: new_track,\n                    radius_bounds: innermost_radius_bounds,\n                    genome: this.genome,\n                    total_gap: total_gap\n                });\n                new_view.render();\n                this.chords_views.push(new_view);\n        }\n        else {\n            // Added circular track.\n\n            // Recompute and update circular track bounds.\n            var new_track_bounds = this.get_tracks_bounds();\n            _.each(this.circular_views, function(track_view, i) {\n                track_view.update_radius_bounds(new_track_bounds[i]);\n            });\n\n            // Update chords tracks.\n            _.each(this.chords_views, function(track_view) {\n                track_view.update_radius_bounds(new_track_bounds[0]);\n            });\n\n            // Render new track.\n            var track_index = this.circular_views.length,\n                track_view = new CircsterBigWigTrackView({\n                    el: d3.select('g.tracks').append('g')[0],\n                    track: new_track,\n                    radius_bounds: new_track_bounds[track_index],\n                    genome: this.genome,\n                    total_gap: total_gap\n                });\n            track_view.render();\n            this.circular_views.push(track_view);\n\n            // Update label track.\n            /*\n            FIXME: should never have to update label track because vis always expands to fit area\n            within label track.\n            var track_bounds = new_track_bounds[ new_track_bounds.length-1 ];\n            track_bounds[1] = track_bounds[0];\n            this.label_track_view.update_radius_bounds(track_bounds);\n            */\n        }\n    },\n\n    /**\n     * Remove a track from the view.\n     */\n    remove_track: function(track, tracks, options) {\n        // -- Remove track from view. --\n        var track_view = this.circular_views[options.index];\n        this.circular_views.splice(options.index, 1);\n        track_view.$el.remove();\n\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, function(track_view, i) {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n    },\n\n    update_track_bounds: function() {\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, function(track_view, i) {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n\n        // Update chords tracks.\n        _.each(this.chords_views, function(track_view) {\n            track_view.update_radius_bounds(new_track_bounds[0]);\n        });\n\n    }\n});\n\n/**\n * Renders a track in a Circster visualization.\n */\nvar CircsterTrackView = Backbone.View.extend({\n    tagName: 'g',\n\n    /* ----------------------- Public Methods ------------------------- */\n\n    initialize: function(options) {\n        this.bg_stroke = '#ddd';\n        // Fill color when loading data.\n        this.loading_bg_fill = '#ffc';\n        // Fill color when data has been loaded.\n        this.bg_fill = '#ddd';\n        this.total_gap = options.total_gap;\n        this.track = options.track;\n        this.radius_bounds = options.radius_bounds;\n        this.genome = options.genome;\n        this.chroms_layout = this._chroms_layout();\n        this.data_bounds = [];\n        this.scale = 1;\n        this.parent_elt = d3.select(this.$el[0]);\n    },\n\n    /**\n     * Get fill color from config.\n     */\n    get_fill_color: function() {\n        var color = this.track.get('config').get_value('block_color');\n        if (!color) { color = this.track.get('config').get_value('color'); }\n        return color;\n    },\n\n    /**\n     * Render track's data by adding SVG elements to parent.\n     */\n    render: function() {\n        // -- Create track group element. --\n        var track_parent_elt = this.parent_elt;\n\n        // -- Render background arcs. --\n        var genome_arcs = this.chroms_layout,\n            arc_gen = d3.svg.arc()\n                        .innerRadius(this.radius_bounds[0])\n                        .outerRadius(this.radius_bounds[1]),\n\n            // Attach data to group element.\n            chroms_elts = track_parent_elt.selectAll('g')\n                .data(genome_arcs).enter().append('svg:g'),\n\n            // Draw chrom arcs/paths.\n            chroms_paths = chroms_elts.append('path')\n                .attr(\"d\", arc_gen)\n                .attr('class', 'chrom-background')\n                .style(\"stroke\", this.bg_stroke)\n                .style(\"fill\",  this.loading_bg_fill);\n\n            // Append titles to paths.\n            chroms_paths.append(\"title\").text(function(d) { return d.data.chrom; });\n\n        // -- Render track data and, when track data is rendered, apply preferences and update chrom_elts fill. --\n\n        var self = this,\n            data_manager = self.track.get('data_manager'),\n            // If track has a data manager, get deferred that resolves when data is ready.\n            data_ready_deferred = (data_manager ? data_manager.data_is_ready() : true );\n\n        // When data is ready, render track.\n        $.when(data_ready_deferred).then(function() {\n            $.when(self._render_data(track_parent_elt)).then(function() {\n                chroms_paths.style(\"fill\", self.bg_fill);\n\n                // Render labels after data is available so that data attributes are available.\n                self.render_labels();\n            });\n        });\n    },\n\n    /**\n     * Render track labels.\n     */\n    render_labels: function() {},\n\n    /**\n     * Update radius bounds.\n     */\n    update_radius_bounds: function(radius_bounds) {\n        // Update bounds.\n        this.radius_bounds = radius_bounds;\n\n        // -- Update background arcs. --\n        var new_d = d3.svg.arc()\n                        .innerRadius(this.radius_bounds[0])\n                        .outerRadius(this.radius_bounds[1]);\n\n        this.parent_elt.selectAll('g>path.chrom-background').transition().duration(1000).attr('d', new_d);\n\n        this._transition_chrom_data();\n\n        this._transition_labels();\n    },\n\n    /**\n     * Update view scale. This fetches more data if scale is increased.\n     */\n    update_scale: function(new_scale) {\n        // -- Update scale and return if new scale is less than old scale. --\n\n        var old_scale = this.scale;\n        this.scale = new_scale;\n        if (new_scale <= old_scale) {\n            return;\n        }\n\n        // -- Scale increased, so render visible data with more detail. --\n\n        var self = this,\n            utils = new SVGUtils();\n\n        // Select all chrom data and filter to operate on those that are visible.\n        this.parent_elt.selectAll('path.chrom-data').filter(function(d, i) {\n            return utils.is_visible(this);\n        }).each(function(d, i) {\n            // -- Now operating on a single path element representing chromosome data. --\n\n            var path_elt = d3.select(this),\n                chrom = path_elt.attr('chrom'),\n                chrom_region = self.genome.get_chrom_region(chrom),\n                data_manager = self.track.get('data_manager'),\n                data_deferred;\n\n            // If can't get more detailed data, return.\n            if (!data_manager.can_get_more_detailed_data(chrom_region)) {\n                return;\n            }\n\n            // -- Get more detailed data. --\n            data_deferred = self.track.get('data_manager').get_more_detailed_data(chrom_region, 'Coverage', 0, new_scale);\n\n            // When more data is available, use new data to redraw path.\n            $.when(data_deferred).then(function(data) {\n                // Remove current data path.\n                path_elt.remove();\n\n                // Update data bounds with new data.\n                self._update_data_bounds();\n\n                // Find chromosome arc to draw data on.\n                var chrom_arc = _.find(self.chroms_layout, function(layout) {\n                        return layout.data.chrom === chrom;\n                });\n\n                // Add new data path and apply preferences.\n                var color = self.get_fill_color();\n                self._render_chrom_data(self.parent_elt, chrom_arc, data).style('stroke', color).style('fill', color);\n            });\n        });\n\n        return self;\n    },\n\n    /* ----------------------- Internal Methods ------------------------- */\n\n    /**\n     * Transitions chrom data to new values (e.g new radius or data bounds).\n     */\n    _transition_chrom_data: function() {\n        var track = this.track,\n            chrom_arcs = this.chroms_layout,\n            chrom_data_paths = this.parent_elt.selectAll('g>path.chrom-data'),\n            num_paths = chrom_data_paths[0].length;\n\n        if (num_paths > 0) {\n            var self = this;\n            $.when(track.get('data_manager').get_genome_wide_data(this.genome)).then(function(genome_wide_data) {\n                // Map chrom data to path data, filtering out null values.\n                var path_data = _.reject( _.map(genome_wide_data, function(chrom_data, i) {\n                    var rval = null,\n                        path_fn = self._get_path_function(chrom_arcs[i], chrom_data);\n                    if (path_fn) {\n                        rval = path_fn(chrom_data.data);\n                    }\n                    return rval;\n                }), function(p_data) { return p_data === null; } );\n\n                // Transition each path for data and color.\n                var color = track.get('config').get_value('color');\n                chrom_data_paths.each(function(path, index) {\n                    d3.select(this).transition().duration(1000)\n                                   .style('stroke', color).style('fill', color)\n                                   .attr('d', path_data[index]);\n                });\n            });\n        }\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {},\n\n    /**\n     * Update data bounds. If there are new_bounds, use them; otherwise use\n     * default data bounds.\n     */\n    _update_data_bounds: function(new_bounds) {\n        var old_bounds = this.data_bounds;\n        this.data_bounds = new_bounds ||\n                           this.get_data_bounds(this.track.get('data_manager').get_genome_wide_data(this.genome));\n        this._transition_chrom_data();\n    },\n\n    /**\n     * Render data as elements attached to svg.\n     */\n    _render_data: function(svg) {\n        var self = this,\n            chrom_arcs = this.chroms_layout,\n            track = this.track,\n            rendered_deferred = $.Deferred();\n\n        // When genome-wide data is available, render data.\n        $.when(track.get('data_manager').get_genome_wide_data(this.genome)).then(function(genome_wide_data) {\n            // Set bounds.\n            self.data_bounds = self.get_data_bounds(genome_wide_data);\n\n            // Set min, max value in config so that they can be adjusted. Make this silent\n            // because these attributes are watched for changes and the viz is updated\n            // accordingly (set up in initialize). Because we are setting up, we don't want\n            // the watch to trigger events here.\n            track.get('config').set_value('min_value', self.data_bounds[0], {silent: true});\n            track.get('config').set_value('max_value', self.data_bounds[1], {silent: true});\n\n            // Merge chroms layout with data.\n            layout_and_data = _.zip(chrom_arcs, genome_wide_data),\n\n            // Render each chromosome's data.\n            chroms_data_layout = _.map(layout_and_data, function(chrom_info) {\n                var chrom_arc = chrom_info[0],\n                    data = chrom_info[1];\n                return self._render_chrom_data(svg, chrom_arc, data);\n            });\n\n            // Apply prefs to all track data.\n            var color = self.get_fill_color();\n            self.parent_elt.selectAll('path.chrom-data').style('stroke', color).style('fill', color);\n\n            rendered_deferred.resolve(svg);\n        });\n\n        return rendered_deferred;\n    },\n\n    /**\n     * Render a chromosome data and attach elements to svg.\n     */\n    _render_chrom_data: function(svg, chrom_arc, data) {},\n\n    /**\n     * Returns data for creating a path for the given data using chrom_arc and data bounds.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {},\n\n    /**\n     * Returns arc layouts for genome's chromosomes/contigs. Arcs are arranged in a circle\n     * separated by gaps.\n     */\n    _chroms_layout: function() {\n        // Setup chroms layout using pie.\n        var chroms_info = this.genome.get_chroms_info(),\n            pie_layout = d3.layout.pie().value(function(d) { return d.len; }).sort(null),\n            init_arcs = pie_layout(chroms_info),\n            gap_per_chrom = 2 * Math.PI * this.total_gap / chroms_info.length,\n            chrom_arcs = _.map(init_arcs, function(arc, index) {\n                // For short chroms, endAngle === startAngle.\n                var new_endAngle = arc.endAngle - gap_per_chrom;\n                arc.endAngle = (new_endAngle > arc.startAngle ? new_endAngle : arc.startAngle);\n                return arc;\n            });\n        return chrom_arcs;\n    }\n});\n\n/**\n * Render chromosome labels.\n */\nvar CircsterChromLabelTrackView = CircsterTrackView.extend({\n\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n        // Use a single arc for rendering data.\n        this.innerRadius = this.radius_bounds[0];\n        this.radius_bounds[0] = this.radius_bounds[1];\n        this.bg_stroke = '#fff';\n        this.bg_fill = '#fff';\n\n        // Minimum arc distance for labels to be applied.\n        this.min_arc_len = 0.05;\n    },\n\n    /**\n     * Render labels.\n     */\n    _render_data: function(svg) {\n        // -- Add chromosome label where it will fit; an alternative labeling mechanism\n        // would be nice for small chromosomes. --\n        var self = this,\n            chrom_arcs = svg.selectAll('g');\n\n        chrom_arcs.selectAll('path')\n            .attr('id', function(d) { return 'label-' + d.data.chrom; });\n\n        chrom_arcs.append(\"svg:text\")\n            .filter(function(d) {\n                return d.endAngle - d.startAngle > self.min_arc_len;\n            })\n            .attr('text-anchor', 'middle')\n          .append(\"svg:textPath\")\n            .attr(\"class\", \"chrom-label\")\n            .attr(\"xlink:href\", function(d) { return \"#label-\" + d.data.chrom; })\n            .attr('startOffset', '25%')\n            .text(function(d) {\n                return d.data.chrom;\n            });\n\n        // -- Add ticks to denote chromosome length. --\n\n        /** Returns an array of tick angles and labels, given a chrom arc. */\n        var chromArcTicks = function(d) {\n            var k = (d.endAngle - d.startAngle) / d.value,\n                ticks = d3.range(0, d.value, 25000000).map(function(v, i) {\n                    return {\n                        radius: self.innerRadius,\n                        angle: v * k + d.startAngle,\n                        label: i === 0 ? 0 : (i % 3 ? null : self.formatNum(v))\n                    };\n                });\n\n            // If there are fewer that 4 ticks, label last tick so that at least one non-zero tick is labeled.\n            if (ticks.length < 4) {\n                ticks[ticks.length-1].label = self.formatNum(\n                    Math.round( ( ticks[ticks.length-1].angle - d.startAngle ) / k )\n                );\n            }\n\n            return ticks;\n        };\n\n        /** Rotate and move text as needed. */\n        var textTransform = function(d) {\n                return d.angle > Math.PI ? \"rotate(180)translate(-16)\" : null;\n        };\n\n        // Filter chroms for only those large enough for display.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > self.min_arc_len; });\n\n        this.drawTicks(this.parent_elt, visibleChroms, chromArcTicks, textTransform);\n    }\n});\n_.extend(CircsterChromLabelTrackView.prototype, UsesTicks);\n\n/**\n * View for quantitative track in Circster.\n */\nvar CircsterQuantitativeTrackView = CircsterTrackView.extend({\n\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n\n        // When config settings change, update view.\n        var track_config = this.track.get('config');\n        track_config.get('min_value').on('change:value', this._update_min_max, this);\n        track_config.get('max_value').on('change:value', this._update_min_max, this);\n        track_config.get('color').on('change:value', this._transition_chrom_data, this);\n    },\n\n    /**\n     * Update track when min and/or max are changed.\n     */\n    _update_min_max: function() {\n        var track_config = this.track.get('config'),\n            new_bounds = [track_config.get_value('min_value'), track_config.get_value('max_value')];\n        this._update_data_bounds(new_bounds);\n\n        // FIXME: this works to update tick/text bounds, but there's probably a better way to do this\n        // by updating the data itself.\n        this.parent_elt.selectAll('.min_max').text(function(d, i) {\n            return new_bounds[i];\n        });\n    },\n\n    /**\n     * Returns quantile for an array of numbers.\n     */\n    _quantile: function(numbers, quantile) {\n        numbers.sort(d3.ascending);\n        return d3.quantile(numbers, quantile);\n    },\n\n    /**\n     * Renders quantitative data with the form [x, value] and assumes data is equally spaced across\n     * chromosome. Attachs a dict with track and chrom name information to DOM element.\n     */\n    _render_chrom_data: function(svg, chrom_arc, chrom_data) {\n        var path_data = this._get_path_function(chrom_arc, chrom_data);\n\n        if (!path_data) { return null; }\n\n        // There is path data, so render as path.\n        var parent = svg.datum(chrom_data.data),\n            path = parent.append('path')\n                         .attr('class', 'chrom-data')\n                         .attr('chrom', chrom_arc.data.chrom)\n                         .attr('d', path_data);\n\n        return path;\n    },\n\n    /**\n     * Returns function for creating a path across the chrom arc.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {\n        // If no chrom data, return null.\n        if (typeof chrom_data === \"string\" || !chrom_data.data || chrom_data.data.length === 0) {\n            return null;\n        }\n\n        // Radius scaler.\n        var radius = d3.scale.linear()\n                       .domain(this.data_bounds)\n                       .range(this.radius_bounds)\n                       .clamp(true);\n\n        // Scaler for placing data points across arc.\n        var angle = d3.scale.linear()\n            .domain([0, chrom_data.data.length])\n            .range([chrom_arc.startAngle, chrom_arc.endAngle]);\n\n        // Use line generator to create area.\n        var line = d3.svg.line.radial()\n            .interpolate(\"linear\")\n            .radius(function(d) { return radius(d[1]); })\n            .angle(function(d, i) { return angle(i); });\n\n        return d3.svg.area.radial()\n            .interpolate(line.interpolate())\n            .innerRadius(radius(0))\n            .outerRadius(line.radius())\n            .angle(line.angle());\n    },\n\n    /**\n     * Render track min, max using ticks.\n     */\n    render_labels: function() {\n        var self = this,\n            // Keep counter of visible chroms.\n            textTransform = function() {\n                return \"rotate(90)\";\n            };\n\n        // FIXME:\n        // (1) using min_max class below is needed for _update_min_max, which could be improved.\n        // (2) showing config on tick click should be replaced by proper track config icon.\n\n        // Draw min, max on first chrom only.\n        var ticks = this.drawTicks(this.parent_elt, [ this.chroms_layout[0] ],\n                                   this._data_bounds_ticks_fn(), textTransform, true)\n                        .classed('min_max', true);\n\n        // Show config when ticks are clicked on.\n        _.each(ticks, function(tick) {\n            $(tick).click(function() {\n                var view = new config.ConfigSettingCollectionView({\n                    collection: self.track.get('config')\n                });\n                view.render_in_modal('Configure Track');\n            });\n        });\n\n\n\n        /*\n        // Filter for visible chroms, then for every third chrom so that labels attached to only every\n        // third chrom.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > 0.08; }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) { return i % 3 === 0; });\n        this.drawTicks(this.parent_elt, labeledChroms, this._data_bounds_ticks_fn(), textTransform, true);\n        */\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {\n        // FIXME: (a) pull out function for getting labeled chroms? and (b) function used in transition below\n        // is copied from UseTicks mixin, so pull out and make generally available.\n\n        // If there are no data bounds, nothing to transition.\n        if (this.data_bounds.length === 0) { return; }\n\n        // Transition labels to new radius bounds.\n        var self = this,\n            visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > 0.08; }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) { return i % 3 === 0; }),\n            new_data = _.flatten( _.map(labeledChroms, function(c) {\n                return self._data_bounds_ticks_fn()(c);\n            }));\n        this.parent_elt.selectAll('g.tick').data(new_data).transition().attr(\"transform\", function(d) {\n            return \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \")\" +\n                    \"translate(\" + d.radius + \",0)\";\n        });\n    },\n\n    /**\n     * Get function for locating data bounds ticks.\n     */\n    _data_bounds_ticks_fn: function() {\n        // Closure vars.\n        var self = this;\n            visibleChroms = 0;\n\n        // Return function for locating ticks based on chrom arc data.\n        return function(d) {\n            // Set up data to display min, max ticks.\n            return [\n                {\n                    radius: self.radius_bounds[0],\n                    angle: d.startAngle,\n                    label: self.formatNum(self.data_bounds[0])\n                },\n                {\n                    radius: self.radius_bounds[1],\n                    angle: d.startAngle,\n                    label: self.formatNum(self.data_bounds[1])\n                }\n            ];\n        };\n    },\n\n    /**\n     * Returns an array with two values denoting the minimum and maximum\n     * values for the track.\n     */\n    get_data_bounds: function(data) {}\n\n});\n_.extend(CircsterQuantitativeTrackView.prototype, UsesTicks);\n\n/**\n * Bigwig track view in Circster.\n */\nvar CircsterBigWigTrackView = CircsterQuantitativeTrackView.extend({\n\n    get_data_bounds: function(data) {\n        // Set max across dataset by extracting all values, flattening them into a\n        // single array, and getting third quartile.\n        var values = _.flatten( _.map(data, function(d) {\n            if (d) {\n                // Each data point has the form [position, value], so return all values.\n                return _.map(d.data, function(p) {\n                    // Null is used for a lack of data; resolve null to 0 for comparison.\n                    return parseInt(p[1], 10) || 0;\n                });\n            }\n            else {\n                return 0;\n            }\n        }) );\n\n        // For max, use 98% quantile in attempt to avoid very large values. However, this max may be 0\n        // for sparsely populated data, so use max in that case.\n        return [ _.min(values), this._quantile(values, 0.98) || _.max(values) ];\n    }\n});\n\n/**\n * Chromosome interactions track view in Circster.\n */\nvar CircsterChromInteractionsTrackView = CircsterTrackView.extend({\n\n    render: function() {\n        var self = this;\n\n        // When data is ready, render track.\n        $.when(self.track.get('data_manager').data_is_ready()).then(function() {\n            // When data has been fetched, render track.\n            $.when(self.track.get('data_manager').get_genome_wide_data(self.genome)).then(function(genome_wide_data) {\n                var chord_data = [],\n                    chroms_info = self.genome.get_chroms_info();\n                // Convert chromosome data into chord data.\n                _.each(genome_wide_data, function(chrom_data, index) {\n                    // Map each interaction into chord data.\n                    var cur_chrom = chroms_info[index].chrom;\n                    var chrom_chord_data = _.map(chrom_data.data, function(datum) {\n                        // Each datum is an interaction/chord.\n                        var source_angle = self._get_region_angle(cur_chrom, datum[1]),\n                            target_angle = self._get_region_angle(datum[3], datum[4]);\n                        return {\n                            source: {\n                                startAngle: source_angle,\n                                endAngle: source_angle + 0.01\n                            },\n                            target: {\n                                startAngle: target_angle,\n                                endAngle: target_angle + 0.01\n                            }\n                        };\n                    });\n\n                    chord_data = chord_data.concat(chrom_chord_data);\n                });\n\n                self.parent_elt.append(\"g\")\n                        .attr(\"class\", \"chord\")\n                    .selectAll(\"path\")\n                        .data(chord_data)\n                    .enter().append(\"path\")\n                        .style(\"fill\", self.get_fill_color())\n                        .attr(\"d\", d3.svg.chord().radius(self.radius_bounds[0]))\n                        .style(\"opacity\", 1);\n            });\n        });\n    },\n\n    update_radius_bounds: function(radius_bounds) {\n        this.radius_bounds = radius_bounds;\n        this.parent_elt.selectAll(\"path\").transition().attr(\"d\", d3.svg.chord().radius(this.radius_bounds[0]));\n    },\n\n    /**\n     * Returns radians for a genomic position.\n     */\n    _get_region_angle: function(chrom, position) {\n        // Find chrom angle data\n        var chrom_angle_data = _.find(this.chroms_layout, function(chrom_layout) {\n            return chrom_layout.data.chrom === chrom;\n        });\n\n        // Return angle at position.\n        return  chrom_angle_data.endAngle -\n                (\n                    (chrom_angle_data.endAngle - chrom_angle_data.startAngle) *\n                    (chrom_angle_data.data.len - position) / chrom_angle_data.data.len\n                );\n    }\n\n});\n\n// circster app loader\nvar Circster = Backbone.View.extend(\n{\n    initialize: function ()\n    {\n        // -- Configure visualization --\n        var genome = new visualization.Genome(galaxy_config.app.genome),\n            vis = new visualization.GenomeVisualization(galaxy_config.app.viz_config);\n\n        // Add Circster-specific config options.\n        vis.get('config').add([\n            { key: 'arc_dataset_height', label: 'Arc Dataset Height', type: 'int', value: 25, view: 'circster' },\n            { key: 'track_gap', label: 'Gap Between Tracks', type: 'int', value: 5, view: 'circster' },\n            { key: 'total_gap', label: 'Gap [0-1]', type: 'float', value: 0.4, view: 'circster', hidden: true }\n        ]);\n\n        var viz_view = new CircsterView(\n            {\n                // view pane\n                el                  : $('#center .unified-panel-body'),\n                genome              : genome,\n                model               : vis\n            });\n\n        // Render vizualization\n        viz_view.render();\n\n        // setup title\n        $('#center .unified-panel-header-inner').append(galaxy_config.app.viz_config.title + \" \" + galaxy_config.app.viz_config.dbkey);\n\n        // setup menu\n        var menu = mod_icon_btn.create_icon_buttons_menu([\n        {\n            icon_class: 'plus-button', title: 'Add tracks', on_click: function()\n            {\n                visualization.select_datasets(Galaxy.root + \"visualization/list_current_history_datasets\", Galaxy.root + \"api/datasets\", vis.get('dbkey'), function(tracks)\n                {\n                    vis.add_tracks(tracks);\n                });\n            }\n        },\n        {\n            icon_class: 'gear', title: 'Settings', on_click: function()\n            {\n                var view = new config.ConfigSettingCollectionView({\n                    collection: vis.get('config')\n                });\n                view.render_in_modal('Configure Visualization');\n            }\n        },\n        {\n            icon_class: 'disk--arrow', title: 'Save', on_click: function()\n            {\n                // show saving dialog box\n                Galaxy.modal.show({title: \"Saving...\", body: \"progress\" });\n\n                // send to server\n                $.ajax({\n                    url: Galaxy.root + \"visualization/save\",\n                    type: \"POST\",\n                    dataType: \"json\",\n                    data: {\n                        'id'        : vis.get('vis_id'),\n                        'title'     : vis.get('title'),\n                        'dbkey'     : vis.get('dbkey'),\n                        'type'      : 'trackster',\n                        'vis_json'  : JSON.stringify(vis)\n                    }\n                }).success(function(vis_info) {\n                    Galaxy.modal.hide();\n                    vis.set('vis_id', vis_info.vis_id);\n                }).error(function() {\n                    // show dialog\n                    Galaxy.modal.show({\n                        title   : \"Could Not Save\",\n                        body    : \"Could not save visualization. Please try again later.\",\n                        buttons : { \"Cancel\": function() { Galaxy.modal.hide(); } }\n                    });\n                });\n            }\n        },\n        {\n            icon_class: 'cross-circle', title: 'Close', on_click: function()\n            {\n                window.location = Galaxy.root + \"visualization/list\";\n            }\n        }], { tooltip_config: { placement: 'bottom' } });\n\n        // add menu\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#center .unified-panel-header-inner\").append(menu.$el);\n\n        // manual tooltip config because default gravity is S and cannot be changed\n        $(\".menu-button\").tooltip( { placement: 'bottom' } );\n    }\n});\n\n// Module exports.\nreturn {\n    GalaxyApp: Circster\n};\n\n});\n"]}