{"version":3,"sources":["viz/circster.js"],"names":["require","mod_utils","cssLoadFile","define","_","d3","visualization","config","mod_icon_btn","SVGUtils","Backbone","Model","extend","is_visible","svg_elt","svg","eltBRect","bottom","getBoundingClientRect","svgBRect","$","right","left","top","UsesTicks","drawTicks","text_coords","data","dataHandler","textTransform","horizontal","ticks","parent_elt","append","PI","selectAll","tick_coords","text_anchor","enter","d","angle","Math","radius","num","formatNum","abs","rval","toPrecision","attr","roundedNum","style","text","label","sigDigits","CircsterLabelTrack","undefined","CircsterView","className","initialize","label_arc_height","round","chords_views","model","toFixed","vis_config","get_chord_tracks","View","options","this","genome","scale","circular_views","dataset_arc_height","add_track","get_value","track_gap","get","min_dimension","on","update_track_bounds","tracks_start_radii","filter","track","get_tracks_bounds","total_gap","circular_tracks","tracks_bounds","get_circular_tracks","self","$el","height","radius_start","length","zoom_drag_timeout","map","render","width","chords_tracks","el","radius_bounds","view","zoom","event","translate","CircsterChromInteractionsTrackView","outermost_radius","track_bounds","index","label_track_view","new_view","select","new_track","track_view","track_index","CircsterChromLabelTrackView","innermost_radius_bounds","remove_track","splice","update_radius_bounds","each","i","new_track_bounds","push","chroms_layout","tracks","_chroms_layout","remove","get_fill_color","track_parent_elt","CircsterTrackView","tagName","chroms_paths","loading_bg_fill","bg_fill","data_manager","data_ready_deferred","color","genome_arcs","arc_gen","innerRadius","outerRadius","bg_stroke","chrom","new_scale","data_is_ready","when","then","utils","_render_data","render_labels","new_d","arc","data_deferred","transition","duration","_transition_labels","update_scale","old_scale","chrom_arcs","chrom_data_paths","num_paths","path_elt","chrom_region","get_chrom_region","path_data","reject","get_more_detailed_data","_update_data_bounds","chrom_arc","find","layout","_render_chrom_data","rendered_deferred","Deferred","get_genome_wide_data","genome_wide_data","chrom_data","path_fn","_get_path_function","p_data","path","layout_and_data","chrom_info","new_bounds","data_bounds","get_data_bounds","_transition_chrom_data","len","init_arcs","pie_layout","set_value","silent","zip","resolve","chroms_info","pie","value","sort","gap_per_chrom","new_endAngle","endAngle","chromArcTicks","startAngle","min_arc_len","CircsterQuantitativeTrackView","prototype","track_config","_update_min_max","visibleChroms","c","v","k","call","line","numbers","quantile","ascending","datum","click","ConfigSettingCollectionView","collection","linear","domain","range","radial","interpolate","area","labeledChroms","new_data","_data_bounds_ticks_fn","tick","render_in_modal","flatten","_quantile","chrom_chord_data","source_angle","_get_region_angle","CircsterBigWigTrackView","values","p","parseInt","chrom_angle_data","min","max","get_chroms_info","cur_chrom","target_angle","galaxy_config","app","viz_config","source","create_icon_buttons_menu","add_tracks","chord_data","concat","icon_class","Galaxy","modal","ajax","chord","url","error","position","show","chrom_layout","title","GalaxyApp","Genome","placement","vis","GenomeVisualization","add","key","type","Circster","hidden","dbkey","menu","on_click","select_datasets","body","root","dataType","id","vis_json","JSON","stringify","success","vis_info","hide","set","vis_id","buttons","Cancel","window","location","tooltip_config","tooltip"],"mappings":"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","file":"../../scripts/viz/circster.js","sourcesContent":["// load required libraries\nrequire([\n    'utils/utils',\n], function(mod_utils)\n{\n    // load css\n    mod_utils.cssLoadFile(\"static/style/circster.css\");\n});\n\ndefine([\n    \"libs/underscore\",\n    \"libs/d3\",\n    \"viz/visualization\",\n    \"utils/config\",\n    'mvc/ui/icon-button',\n    'libs/farbtastic'\n], function(_, d3, visualization, config, mod_icon_btn) {\n\n/**\n * Utility class for working with SVG.\n */\nvar SVGUtils = Backbone.Model.extend({\n\n    /**\n     * Returns true if element is visible.\n     */\n    is_visible: function(svg_elt, svg) {\n        var eltBRect = svg_elt.getBoundingClientRect(),\n            svgBRect = $('svg')[0].getBoundingClientRect();\n\n        if (// To the left of screen?\n            eltBRect.right < 0 ||\n            // To the right of screen?\n            eltBRect.left > svgBRect.right ||\n            // Above screen?\n            eltBRect.bottom < 0 ||\n            // Below screen?\n            eltBRect.top > svgBRect.bottom) {\n            return false;\n        }\n        return true;\n    }\n});\n\n/**\n * Mixin for using ticks.\n */\nvar UsesTicks = {\n    drawTicks: function(parent_elt, data, dataHandler, textTransform, horizontal) {\n        // Set up group elements for chroms and for each tick.\n        var ticks = parent_elt.append(\"g\")\n                        .selectAll(\"g\")\n                            .data(data)\n                        .enter().append(\"g\")\n                        .selectAll(\"g\")\n                            .data(dataHandler)\n                        .enter().append(\"g\")\n                            .attr(\"class\", \"tick\")\n                            .attr(\"transform\", function(d) {\n                                return \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \")\" +\n                                        \"translate(\" + d.radius + \",0)\";\n                            });\n\n        // Add line + text for ticks.\n        var tick_coords = [],\n            text_coords = [],\n            text_anchor = function(d) {\n                return d.angle > Math.PI ? \"end\" : null;\n            };\n        if (horizontal) {\n            tick_coords = [0, 0, 0, -4];\n            text_coords = [4, 0, \"\", \".35em\"];\n            text_anchor = null;\n        }\n        else {\n            tick_coords = [1, 0, 4, 0];\n            text_coords = [0, 4, \".35em\", \"\"];\n\n        }\n\n        ticks.append(\"line\")\n             .attr(\"x1\", tick_coords[0])\n             .attr(\"y1\", tick_coords[1])\n             .attr(\"x2\", tick_coords[2])\n             .attr(\"y1\", tick_coords[3])\n             .style(\"stroke\", \"#000\");\n\n        return ticks.append(\"text\")\n                    .attr(\"x\", text_coords[0])\n                    .attr(\"y\", text_coords[1])\n                    .attr(\"dx\", text_coords[2])\n                    .attr(\"dy\", text_coords[3])\n                    .attr(\"text-anchor\", text_anchor)\n                    .attr(\"transform\", textTransform)\n                    .text(function(d) { return d.label; });\n    },\n\n    /**\n     * Format number for display at a tick.\n     */\n    formatNum: function(num, sigDigits) {\n        // Use default of 2 sig. digits.\n        if (sigDigits === undefined)\n            sigDigits = 2;\n\n        // Verify input number\n        if (num === null)\n            return null;\n\n        // Calculate return value\n        var rval = null;\n        if (Math.abs(num) < 1) {\n            rval = num.toPrecision(sigDigits);\n        }\n        else {\n            // Use round to turn string from toPrecision() back into a number.\n            var roundedNum = Math.round(num.toPrecision(sigDigits));\n\n            // Use abbreviations.\n            num = Math.abs(num);\n            if (num < 1000) {\n                rval = roundedNum;\n            }\n            else if (num < 1000000) {\n                // Use K.\n                rval = Math.round((roundedNum/1000).toPrecision(3)).toFixed(0) + 'K';\n            }\n            else if (num < 1000000000) {\n                // Use M.\n                rval = Math.round((roundedNum/1000000).toPrecision(3)).toFixed(0) + 'M';\n            }\n        }\n\n        return rval;\n    }\n};\n\n/**\n * A label track.\n */\nvar CircsterLabelTrack = Backbone.Model.extend({});\n\n/**\n * Renders a full circster visualization.\n */\nvar CircsterView = Backbone.View.extend({\n    className: 'circster',\n\n    initialize: function(options) {\n        this.genome = options.genome;\n        this.label_arc_height = 50;\n        this.scale = 1;\n        this.circular_views = null;\n        this.chords_views = null;\n\n        // When tracks added to/removed from model, update view.\n        this.model.get('drawables').on('add', this.add_track, this);\n        this.model.get('drawables').on('remove', this.remove_track, this);\n\n        // When config settings change, update view.\n        var vis_config = this.model.get('config');\n        vis_config.get('arc_dataset_height').on('change:value', this.update_track_bounds, this);\n        vis_config.get('track_gap').on('change:value', this.update_track_bounds, this);\n    },\n\n    // HACKs: using track_type for circular/chord distinction in the functions below for now.\n\n    /**\n     * Returns tracks to be rendered using circular view.\n     */\n    get_circular_tracks: function() {\n        return this.model.get('drawables').filter(function(track) {\n            return track.get('track_type') !== 'DiagonalHeatmapTrack';\n        });\n    },\n\n    /**\n     * Returns tracks to be rendered using chords view.\n     */\n    get_chord_tracks: function() {\n        return this.model.get('drawables').filter(function(track) {\n            return track.get('track_type') === 'DiagonalHeatmapTrack';\n        });\n    },\n\n    /**\n     * Returns a list of circular tracks' radius bounds.\n     */\n    get_tracks_bounds: function() {\n        var circular_tracks = this.get_circular_tracks(),\n            dataset_arc_height = this.model.get('config').get_value('arc_dataset_height'),\n            track_gap = this.model.get('config').get_value('track_gap'),\n            // Subtract 20 to make sure chrom labels are on screen.\n            min_dimension = Math.min(this.$el.width(), this.$el.height()) - 20,\n            // Compute radius start based on model, will be centered\n            // and fit entirely inside element by default.\n            radius_start = min_dimension / 2 -\n                            circular_tracks.length * (dataset_arc_height + track_gap) +\n                            // Add track_gap back in because no gap is needed for last track.\n                            track_gap -\n                            this.label_arc_height,\n\n            // Compute range of track starting radii.\n            tracks_start_radii = d3.range(radius_start, min_dimension / 2, dataset_arc_height + track_gap);\n\n        // Map from track start to bounds.\n        var self = this;\n        return _.map(tracks_start_radii, function(radius) {\n            return [radius, radius + dataset_arc_height];\n        });\n    },\n\n    /**\n     * Renders circular tracks, chord tracks, and label tracks.\n     */\n    render: function() {\n        var self = this,\n            width = self.$el.width(),\n            height = self.$el.height(),\n            circular_tracks = this.get_circular_tracks(),\n            chords_tracks = this.get_chord_tracks(),\n            total_gap = self.model.get('config').get_value('total_gap'),\n            tracks_bounds = this.get_tracks_bounds(),\n\n            // Set up SVG element.\n            svg = d3.select(self.$el[0])\n              .append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .attr(\"pointer-events\", \"all\")\n              // Set up zooming, dragging.\n              .append('svg:g')\n                .call(d3.behavior.zoom().on('zoom', function() {\n                    // Do zoom, drag.\n                    var scale = d3.event.scale;\n                    svg.attr(\"transform\",\n                      \"translate(\" + d3.event.translate + \")\" +\n                      \" scale(\" + scale + \")\");\n\n                    // Propagate scale changes to views.\n                    if (self.scale !== scale) {\n                        // Use timeout to wait for zooming/dragging to stop before rendering more detail.\n                        if (self.zoom_drag_timeout) {\n                            clearTimeout(self.zoom_drag_timeout);\n                        }\n                        self.zoom_drag_timeout = setTimeout(function() {\n                            // Render more detail in tracks' visible elements.\n                            // FIXME: do not do this right now; it is not fully implemented--e.g. data bounds\n                            // are not updated when new data is fetched--and fetching more detailed quantitative\n                            // data is not that useful.\n                            /*\n                            _.each(self.circular_views, function(view) {\n                                view.update_scale(scale);\n                            });\n                            */\n                        }, 400);\n                    }\n                }))\n                .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\")\n              .append('svg:g').attr('class', 'tracks');\n\n        // -- Render circular tracks. --\n\n        // Create a view for each track in the visualization and render.\n        this.circular_views = circular_tracks.map(function(track, index) {\n            var view = new CircsterBigWigTrackView({\n                    el: svg.append('g')[0],\n                    track: track,\n                    radius_bounds: tracks_bounds[index],\n                    genome: self.genome,\n                    total_gap: total_gap\n                });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render chords tracks. --\n\n        this.chords_views = chords_tracks.map(function(track) {\n            var view = new CircsterChromInteractionsTrackView({\n                el: svg.append('g')[0],\n                track: track,\n                radius_bounds: tracks_bounds[0],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render label track. --\n\n        // Track bounds are:\n        // (a) outer radius of last circular track;\n        // (b)\n        var outermost_radius = this.circular_views[this.circular_views.length-1].radius_bounds[1],\n            track_bounds = [\n                outermost_radius,\n                outermost_radius + this.label_arc_height\n            ];\n        this.label_track_view = new CircsterChromLabelTrackView({\n            el: svg.append('g')[0],\n            track: new CircsterLabelTrack(),\n            radius_bounds: track_bounds,\n            genome: self.genome,\n            total_gap: total_gap\n        });\n\n        this.label_track_view.render();\n    },\n\n    /**\n     * Render a single track on the outside of the current visualization.\n     */\n    add_track: function(new_track) {\n        var total_gap = this.model.get('config').get_value('total_gap');\n\n        if (new_track.get('track_type') === 'DiagonalHeatmapTrack') {\n            // Added chords track.\n            var innermost_radius_bounds = this.circular_views[0].radius_bounds,\n                new_view = new CircsterChromInteractionsTrackView({\n                    el: d3.select('g.tracks').append('g')[0],\n                    track: new_track,\n                    radius_bounds: innermost_radius_bounds,\n                    genome: this.genome,\n                    total_gap: total_gap\n                });\n                new_view.render();\n                this.chords_views.push(new_view);\n        }\n        else {\n            // Added circular track.\n\n            // Recompute and update circular track bounds.\n            var new_track_bounds = this.get_tracks_bounds();\n            _.each(this.circular_views, function(track_view, i) {\n                track_view.update_radius_bounds(new_track_bounds[i]);\n            });\n\n            // Update chords tracks.\n            _.each(this.chords_views, function(track_view) {\n                track_view.update_radius_bounds(new_track_bounds[0]);\n            });\n\n            // Render new track.\n            var track_index = this.circular_views.length,\n                track_view = new CircsterBigWigTrackView({\n                    el: d3.select('g.tracks').append('g')[0],\n                    track: new_track,\n                    radius_bounds: new_track_bounds[track_index],\n                    genome: this.genome,\n                    total_gap: total_gap\n                });\n            track_view.render();\n            this.circular_views.push(track_view);\n\n            // Update label track.\n            /*\n            FIXME: should never have to update label track because vis always expands to fit area\n            within label track.\n            var track_bounds = new_track_bounds[ new_track_bounds.length-1 ];\n            track_bounds[1] = track_bounds[0];\n            this.label_track_view.update_radius_bounds(track_bounds);\n            */\n        }\n    },\n\n    /**\n     * Remove a track from the view.\n     */\n    remove_track: function(track, tracks, options) {\n        // -- Remove track from view. --\n        var track_view = this.circular_views[options.index];\n        this.circular_views.splice(options.index, 1);\n        track_view.$el.remove();\n\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, function(track_view, i) {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n    },\n\n    update_track_bounds: function() {\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, function(track_view, i) {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n\n        // Update chords tracks.\n        _.each(this.chords_views, function(track_view) {\n            track_view.update_radius_bounds(new_track_bounds[0]);\n        });\n\n    }\n});\n\n/**\n * Renders a track in a Circster visualization.\n */\nvar CircsterTrackView = Backbone.View.extend({\n    tagName: 'g',\n\n    /* ----------------------- Public Methods ------------------------- */\n\n    initialize: function(options) {\n        this.bg_stroke = '#ddd';\n        // Fill color when loading data.\n        this.loading_bg_fill = '#ffc';\n        // Fill color when data has been loaded.\n        this.bg_fill = '#ddd';\n        this.total_gap = options.total_gap;\n        this.track = options.track;\n        this.radius_bounds = options.radius_bounds;\n        this.genome = options.genome;\n        this.chroms_layout = this._chroms_layout();\n        this.data_bounds = [];\n        this.scale = 1;\n        this.parent_elt = d3.select(this.$el[0]);\n    },\n\n    /**\n     * Get fill color from config.\n     */\n    get_fill_color: function() {\n        var color = this.track.get('config').get_value('block_color');\n        if (!color) { color = this.track.get('config').get_value('color'); }\n        return color;\n    },\n\n    /**\n     * Render track's data by adding SVG elements to parent.\n     */\n    render: function() {\n        // -- Create track group element. --\n        var track_parent_elt = this.parent_elt;\n\n        // -- Render background arcs. --\n        var genome_arcs = this.chroms_layout,\n            arc_gen = d3.svg.arc()\n                        .innerRadius(this.radius_bounds[0])\n                        .outerRadius(this.radius_bounds[1]),\n\n            // Attach data to group element.\n            chroms_elts = track_parent_elt.selectAll('g')\n                .data(genome_arcs).enter().append('svg:g'),\n\n            // Draw chrom arcs/paths.\n            chroms_paths = chroms_elts.append('path')\n                .attr(\"d\", arc_gen)\n                .attr('class', 'chrom-background')\n                .style(\"stroke\", this.bg_stroke)\n                .style(\"fill\",  this.loading_bg_fill);\n\n            // Append titles to paths.\n            chroms_paths.append(\"title\").text(function(d) { return d.data.chrom; });\n\n        // -- Render track data and, when track data is rendered, apply preferences and update chrom_elts fill. --\n\n        var self = this,\n            data_manager = self.track.get('data_manager'),\n            // If track has a data manager, get deferred that resolves when data is ready.\n            data_ready_deferred = (data_manager ? data_manager.data_is_ready() : true );\n\n        // When data is ready, render track.\n        $.when(data_ready_deferred).then(function() {\n            $.when(self._render_data(track_parent_elt)).then(function() {\n                chroms_paths.style(\"fill\", self.bg_fill);\n\n                // Render labels after data is available so that data attributes are available.\n                self.render_labels();\n            });\n        });\n    },\n\n    /**\n     * Render track labels.\n     */\n    render_labels: function() {},\n\n    /**\n     * Update radius bounds.\n     */\n    update_radius_bounds: function(radius_bounds) {\n        // Update bounds.\n        this.radius_bounds = radius_bounds;\n\n        // -- Update background arcs. --\n        var new_d = d3.svg.arc()\n                        .innerRadius(this.radius_bounds[0])\n                        .outerRadius(this.radius_bounds[1]);\n\n        this.parent_elt.selectAll('g>path.chrom-background').transition().duration(1000).attr('d', new_d);\n\n        this._transition_chrom_data();\n\n        this._transition_labels();\n    },\n\n    /**\n     * Update view scale. This fetches more data if scale is increased.\n     */\n    update_scale: function(new_scale) {\n        // -- Update scale and return if new scale is less than old scale. --\n\n        var old_scale = this.scale;\n        this.scale = new_scale;\n        if (new_scale <= old_scale) {\n            return;\n        }\n\n        // -- Scale increased, so render visible data with more detail. --\n\n        var self = this,\n            utils = new SVGUtils();\n\n        // Select all chrom data and filter to operate on those that are visible.\n        this.parent_elt.selectAll('path.chrom-data').filter(function(d, i) {\n            return utils.is_visible(this);\n        }).each(function(d, i) {\n            // -- Now operating on a single path element representing chromosome data. --\n\n            var path_elt = d3.select(this),\n                chrom = path_elt.attr('chrom'),\n                chrom_region = self.genome.get_chrom_region(chrom),\n                data_manager = self.track.get('data_manager'),\n                data_deferred;\n\n            // If can't get more detailed data, return.\n            if (!data_manager.can_get_more_detailed_data(chrom_region)) {\n                return;\n            }\n\n            // -- Get more detailed data. --\n            data_deferred = self.track.get('data_manager').get_more_detailed_data(chrom_region, 'Coverage', 0, new_scale);\n\n            // When more data is available, use new data to redraw path.\n            $.when(data_deferred).then(function(data) {\n                // Remove current data path.\n                path_elt.remove();\n\n                // Update data bounds with new data.\n                self._update_data_bounds();\n\n                // Find chromosome arc to draw data on.\n                var chrom_arc = _.find(self.chroms_layout, function(layout) {\n                        return layout.data.chrom === chrom;\n                });\n\n                // Add new data path and apply preferences.\n                var color = self.get_fill_color();\n                self._render_chrom_data(self.parent_elt, chrom_arc, data).style('stroke', color).style('fill', color);\n            });\n        });\n\n        return self;\n    },\n\n    /* ----------------------- Internal Methods ------------------------- */\n\n    /**\n     * Transitions chrom data to new values (e.g new radius or data bounds).\n     */\n    _transition_chrom_data: function() {\n        var track = this.track,\n            chrom_arcs = this.chroms_layout,\n            chrom_data_paths = this.parent_elt.selectAll('g>path.chrom-data'),\n            num_paths = chrom_data_paths[0].length;\n\n        if (num_paths > 0) {\n            var self = this;\n            $.when(track.get('data_manager').get_genome_wide_data(this.genome)).then(function(genome_wide_data) {\n                // Map chrom data to path data, filtering out null values.\n                var path_data = _.reject( _.map(genome_wide_data, function(chrom_data, i) {\n                    var rval = null,\n                        path_fn = self._get_path_function(chrom_arcs[i], chrom_data);\n                    if (path_fn) {\n                        rval = path_fn(chrom_data.data);\n                    }\n                    return rval;\n                }), function(p_data) { return p_data === null; } );\n\n                // Transition each path for data and color.\n                var color = track.get('config').get_value('color');\n                chrom_data_paths.each(function(path, index) {\n                    d3.select(this).transition().duration(1000)\n                                   .style('stroke', color).style('fill', color)\n                                   .attr('d', path_data[index]);\n                });\n            });\n        }\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {},\n\n    /**\n     * Update data bounds. If there are new_bounds, use them; otherwise use\n     * default data bounds.\n     */\n    _update_data_bounds: function(new_bounds) {\n        var old_bounds = this.data_bounds;\n        this.data_bounds = new_bounds ||\n                           this.get_data_bounds(this.track.get('data_manager').get_genome_wide_data(this.genome));\n        this._transition_chrom_data();\n    },\n\n    /**\n     * Render data as elements attached to svg.\n     */\n    _render_data: function(svg) {\n        var self = this,\n            chrom_arcs = this.chroms_layout,\n            track = this.track,\n            rendered_deferred = $.Deferred();\n\n        // When genome-wide data is available, render data.\n        $.when(track.get('data_manager').get_genome_wide_data(this.genome)).then(function(genome_wide_data) {\n            // Set bounds.\n            self.data_bounds = self.get_data_bounds(genome_wide_data);\n\n            // Set min, max value in config so that they can be adjusted. Make this silent\n            // because these attributes are watched for changes and the viz is updated\n            // accordingly (set up in initialize). Because we are setting up, we don't want\n            // the watch to trigger events here.\n            track.get('config').set_value('min_value', self.data_bounds[0], {silent: true});\n            track.get('config').set_value('max_value', self.data_bounds[1], {silent: true});\n\n            // Merge chroms layout with data.\n            var layout_and_data = _.zip(chrom_arcs, genome_wide_data);\n\n            // Render each chromosome's data.\n            _.each(layout_and_data, function(chrom_info) {\n                var chrom_arc = chrom_info[0],\n                    data = chrom_info[1];\n                return self._render_chrom_data(svg, chrom_arc, data);\n            });\n\n            // Apply prefs to all track data.\n            var color = self.get_fill_color();\n            self.parent_elt.selectAll('path.chrom-data').style('stroke', color).style('fill', color);\n\n            rendered_deferred.resolve(svg);\n        });\n\n        return rendered_deferred;\n    },\n\n    /**\n     * Render a chromosome data and attach elements to svg.\n     */\n    _render_chrom_data: function(svg, chrom_arc, data) {},\n\n    /**\n     * Returns data for creating a path for the given data using chrom_arc and data bounds.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {},\n\n    /**\n     * Returns arc layouts for genome's chromosomes/contigs. Arcs are arranged in a circle\n     * separated by gaps.\n     */\n    _chroms_layout: function() {\n        // Setup chroms layout using pie.\n        var chroms_info = this.genome.get_chroms_info(),\n            pie_layout = d3.layout.pie().value(function(d) { return d.len; }).sort(null),\n            init_arcs = pie_layout(chroms_info),\n            gap_per_chrom = 2 * Math.PI * this.total_gap / chroms_info.length,\n            chrom_arcs = _.map(init_arcs, function(arc, index) {\n                // For short chroms, endAngle === startAngle.\n                var new_endAngle = arc.endAngle - gap_per_chrom;\n                arc.endAngle = (new_endAngle > arc.startAngle ? new_endAngle : arc.startAngle);\n                return arc;\n            });\n        return chrom_arcs;\n    }\n});\n\n/**\n * Render chromosome labels.\n */\nvar CircsterChromLabelTrackView = CircsterTrackView.extend({\n\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n        // Use a single arc for rendering data.\n        this.innerRadius = this.radius_bounds[0];\n        this.radius_bounds[0] = this.radius_bounds[1];\n        this.bg_stroke = '#fff';\n        this.bg_fill = '#fff';\n\n        // Minimum arc distance for labels to be applied.\n        this.min_arc_len = 0.05;\n    },\n\n    /**\n     * Render labels.\n     */\n    _render_data: function(svg) {\n        // -- Add chromosome label where it will fit; an alternative labeling mechanism\n        // would be nice for small chromosomes. --\n        var self = this,\n            chrom_arcs = svg.selectAll('g');\n\n        chrom_arcs.selectAll('path')\n            .attr('id', function(d) { return 'label-' + d.data.chrom; });\n\n        chrom_arcs.append(\"svg:text\")\n            .filter(function(d) {\n                return d.endAngle - d.startAngle > self.min_arc_len;\n            })\n            .attr('text-anchor', 'middle')\n          .append(\"svg:textPath\")\n            .attr(\"class\", \"chrom-label\")\n            .attr(\"xlink:href\", function(d) { return \"#label-\" + d.data.chrom; })\n            .attr('startOffset', '25%')\n            .text(function(d) {\n                return d.data.chrom;\n            });\n\n        // -- Add ticks to denote chromosome length. --\n\n        /** Returns an array of tick angles and labels, given a chrom arc. */\n        var chromArcTicks = function(d) {\n            var k = (d.endAngle - d.startAngle) / d.value,\n                ticks = d3.range(0, d.value, 25000000).map(function(v, i) {\n                    return {\n                        radius: self.innerRadius,\n                        angle: v * k + d.startAngle,\n                        label: i === 0 ? 0 : (i % 3 ? null : self.formatNum(v))\n                    };\n                });\n\n            // If there are fewer that 4 ticks, label last tick so that at least one non-zero tick is labeled.\n            if (ticks.length < 4) {\n                ticks[ticks.length-1].label = self.formatNum(\n                    Math.round( ( ticks[ticks.length-1].angle - d.startAngle ) / k )\n                );\n            }\n\n            return ticks;\n        };\n\n        /** Rotate and move text as needed. */\n        var textTransform = function(d) {\n                return d.angle > Math.PI ? \"rotate(180)translate(-16)\" : null;\n        };\n\n        // Filter chroms for only those large enough for display.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > self.min_arc_len; });\n\n        this.drawTicks(this.parent_elt, visibleChroms, chromArcTicks, textTransform);\n    }\n});\n_.extend(CircsterChromLabelTrackView.prototype, UsesTicks);\n\n/**\n * View for quantitative track in Circster.\n */\nvar CircsterQuantitativeTrackView = CircsterTrackView.extend({\n\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n\n        // When config settings change, update view.\n        var track_config = this.track.get('config');\n        track_config.get('min_value').on('change:value', this._update_min_max, this);\n        track_config.get('max_value').on('change:value', this._update_min_max, this);\n        track_config.get('color').on('change:value', this._transition_chrom_data, this);\n    },\n\n    /**\n     * Update track when min and/or max are changed.\n     */\n    _update_min_max: function() {\n        var track_config = this.track.get('config'),\n            new_bounds = [track_config.get_value('min_value'), track_config.get_value('max_value')];\n        this._update_data_bounds(new_bounds);\n\n        // FIXME: this works to update tick/text bounds, but there's probably a better way to do this\n        // by updating the data itself.\n        this.parent_elt.selectAll('.min_max').text(function(d, i) {\n            return new_bounds[i];\n        });\n    },\n\n    /**\n     * Returns quantile for an array of numbers.\n     */\n    _quantile: function(numbers, quantile) {\n        numbers.sort(d3.ascending);\n        return d3.quantile(numbers, quantile);\n    },\n\n    /**\n     * Renders quantitative data with the form [x, value] and assumes data is equally spaced across\n     * chromosome. Attachs a dict with track and chrom name information to DOM element.\n     */\n    _render_chrom_data: function(svg, chrom_arc, chrom_data) {\n        var path_data = this._get_path_function(chrom_arc, chrom_data);\n\n        if (!path_data) { return null; }\n\n        // There is path data, so render as path.\n        var parent = svg.datum(chrom_data.data),\n            path = parent.append('path')\n                         .attr('class', 'chrom-data')\n                         .attr('chrom', chrom_arc.data.chrom)\n                         .attr('d', path_data);\n\n        return path;\n    },\n\n    /**\n     * Returns function for creating a path across the chrom arc.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {\n        // If no chrom data, return null.\n        if (typeof chrom_data === \"string\" || !chrom_data.data || chrom_data.data.length === 0) {\n            return null;\n        }\n\n        // Radius scaler.\n        var radius = d3.scale.linear()\n                       .domain(this.data_bounds)\n                       .range(this.radius_bounds)\n                       .clamp(true);\n\n        // Scaler for placing data points across arc.\n        var angle = d3.scale.linear()\n            .domain([0, chrom_data.data.length])\n            .range([chrom_arc.startAngle, chrom_arc.endAngle]);\n\n        // Use line generator to create area.\n        var line = d3.svg.line.radial()\n            .interpolate(\"linear\")\n            .radius(function(d) { return radius(d[1]); })\n            .angle(function(d, i) { return angle(i); });\n\n        return d3.svg.area.radial()\n            .interpolate(line.interpolate())\n            .innerRadius(radius(0))\n            .outerRadius(line.radius())\n            .angle(line.angle());\n    },\n\n    /**\n     * Render track min, max using ticks.\n     */\n    render_labels: function() {\n        var self = this,\n            // Keep counter of visible chroms.\n            textTransform = function() {\n                return \"rotate(90)\";\n            };\n\n        // FIXME:\n        // (1) using min_max class below is needed for _update_min_max, which could be improved.\n        // (2) showing config on tick click should be replaced by proper track config icon.\n\n        // Draw min, max on first chrom only.\n        var ticks = this.drawTicks(this.parent_elt, [ this.chroms_layout[0] ],\n                                   this._data_bounds_ticks_fn(), textTransform, true)\n                        .classed('min_max', true);\n\n        // Show config when ticks are clicked on.\n        _.each(ticks, function(tick) {\n            $(tick).click(function() {\n                var view = new config.ConfigSettingCollectionView({\n                    collection: self.track.get('config')\n                });\n                view.render_in_modal('Configure Track');\n            });\n        });\n\n\n\n        /*\n        // Filter for visible chroms, then for every third chrom so that labels attached to only every\n        // third chrom.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > 0.08; }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) { return i % 3 === 0; });\n        this.drawTicks(this.parent_elt, labeledChroms, this._data_bounds_ticks_fn(), textTransform, true);\n        */\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {\n        // FIXME: (a) pull out function for getting labeled chroms? and (b) function used in transition below\n        // is copied from UseTicks mixin, so pull out and make generally available.\n\n        // If there are no data bounds, nothing to transition.\n        if (this.data_bounds.length === 0) { return; }\n\n        // Transition labels to new radius bounds.\n        var self = this,\n            visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > 0.08; }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) { return i % 3 === 0; }),\n            new_data = _.flatten( _.map(labeledChroms, function(c) {\n                return self._data_bounds_ticks_fn()(c);\n            }));\n        this.parent_elt.selectAll('g.tick').data(new_data).transition().attr(\"transform\", function(d) {\n            return \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \")\" +\n                    \"translate(\" + d.radius + \",0)\";\n        });\n    },\n\n    /**\n     * Get function for locating data bounds ticks.\n     */\n    _data_bounds_ticks_fn: function() {\n        // Closure vars.\n        var self = this;\n            visibleChroms = 0;\n\n        // Return function for locating ticks based on chrom arc data.\n        return function(d) {\n            // Set up data to display min, max ticks.\n            return [\n                {\n                    radius: self.radius_bounds[0],\n                    angle: d.startAngle,\n                    label: self.formatNum(self.data_bounds[0])\n                },\n                {\n                    radius: self.radius_bounds[1],\n                    angle: d.startAngle,\n                    label: self.formatNum(self.data_bounds[1])\n                }\n            ];\n        };\n    },\n\n    /**\n     * Returns an array with two values denoting the minimum and maximum\n     * values for the track.\n     */\n    get_data_bounds: function(data) {}\n\n});\n_.extend(CircsterQuantitativeTrackView.prototype, UsesTicks);\n\n/**\n * Bigwig track view in Circster.\n */\nvar CircsterBigWigTrackView = CircsterQuantitativeTrackView.extend({\n\n    get_data_bounds: function(data) {\n        // Set max across dataset by extracting all values, flattening them into a\n        // single array, and getting third quartile.\n        var values = _.flatten( _.map(data, function(d) {\n            if (d) {\n                // Each data point has the form [position, value], so return all values.\n                return _.map(d.data, function(p) {\n                    // Null is used for a lack of data; resolve null to 0 for comparison.\n                    return parseInt(p[1], 10) || 0;\n                });\n            }\n            else {\n                return 0;\n            }\n        }) );\n\n        // For max, use 98% quantile in attempt to avoid very large values. However, this max may be 0\n        // for sparsely populated data, so use max in that case.\n        return [ _.min(values), this._quantile(values, 0.98) || _.max(values) ];\n    }\n});\n\n/**\n * Chromosome interactions track view in Circster.\n */\nvar CircsterChromInteractionsTrackView = CircsterTrackView.extend({\n\n    render: function() {\n        var self = this;\n\n        // When data is ready, render track.\n        $.when(self.track.get('data_manager').data_is_ready()).then(function() {\n            // When data has been fetched, render track.\n            $.when(self.track.get('data_manager').get_genome_wide_data(self.genome)).then(function(genome_wide_data) {\n                var chord_data = [],\n                    chroms_info = self.genome.get_chroms_info();\n                // Convert chromosome data into chord data.\n                _.each(genome_wide_data, function(chrom_data, index) {\n                    // Map each interaction into chord data.\n                    var cur_chrom = chroms_info[index].chrom;\n                    var chrom_chord_data = _.map(chrom_data.data, function(datum) {\n                        // Each datum is an interaction/chord.\n                        var source_angle = self._get_region_angle(cur_chrom, datum[1]),\n                            target_angle = self._get_region_angle(datum[3], datum[4]);\n                        return {\n                            source: {\n                                startAngle: source_angle,\n                                endAngle: source_angle + 0.01\n                            },\n                            target: {\n                                startAngle: target_angle,\n                                endAngle: target_angle + 0.01\n                            }\n                        };\n                    });\n\n                    chord_data = chord_data.concat(chrom_chord_data);\n                });\n\n                self.parent_elt.append(\"g\")\n                        .attr(\"class\", \"chord\")\n                    .selectAll(\"path\")\n                        .data(chord_data)\n                    .enter().append(\"path\")\n                        .style(\"fill\", self.get_fill_color())\n                        .attr(\"d\", d3.svg.chord().radius(self.radius_bounds[0]))\n                        .style(\"opacity\", 1);\n            });\n        });\n    },\n\n    update_radius_bounds: function(radius_bounds) {\n        this.radius_bounds = radius_bounds;\n        this.parent_elt.selectAll(\"path\").transition().attr(\"d\", d3.svg.chord().radius(this.radius_bounds[0]));\n    },\n\n    /**\n     * Returns radians for a genomic position.\n     */\n    _get_region_angle: function(chrom, position) {\n        // Find chrom angle data\n        var chrom_angle_data = _.find(this.chroms_layout, function(chrom_layout) {\n            return chrom_layout.data.chrom === chrom;\n        });\n\n        // Return angle at position.\n        return  chrom_angle_data.endAngle -\n                (\n                    (chrom_angle_data.endAngle - chrom_angle_data.startAngle) *\n                    (chrom_angle_data.data.len - position) / chrom_angle_data.data.len\n                );\n    }\n\n});\n\n// circster app loader\nvar Circster = Backbone.View.extend(\n{\n    initialize: function ()\n    {\n        // -- Configure visualization --\n        var genome = new visualization.Genome(galaxy_config.app.genome),\n            vis = new visualization.GenomeVisualization(galaxy_config.app.viz_config);\n\n        // Add Circster-specific config options.\n        vis.get('config').add([\n            { key: 'arc_dataset_height', label: 'Arc Dataset Height', type: 'int', value: 25, view: 'circster' },\n            { key: 'track_gap', label: 'Gap Between Tracks', type: 'int', value: 5, view: 'circster' },\n            { key: 'total_gap', label: 'Gap [0-1]', type: 'float', value: 0.4, view: 'circster', hidden: true }\n        ]);\n\n        var viz_view = new CircsterView(\n            {\n                // view pane\n                el                  : $('#center .unified-panel-body'),\n                genome              : genome,\n                model               : vis\n            });\n\n        // Render vizualization\n        viz_view.render();\n\n        // setup title\n        $('#center .unified-panel-header-inner').append(galaxy_config.app.viz_config.title + \" \" + galaxy_config.app.viz_config.dbkey);\n\n        // setup menu\n        var menu = mod_icon_btn.create_icon_buttons_menu([\n        {\n            icon_class: 'plus-button', title: 'Add tracks', on_click: function()\n            {\n                visualization.select_datasets({'dbkey': vis.get('dbkey')}, function(tracks)\n                {\n                    vis.add_tracks(tracks);\n                });\n            }\n        },\n        {\n            icon_class: 'gear', title: 'Settings', on_click: function()\n            {\n                var view = new config.ConfigSettingCollectionView({\n                    collection: vis.get('config')\n                });\n                view.render_in_modal('Configure Visualization');\n            }\n        },\n        {\n            icon_class: 'disk--arrow', title: 'Save', on_click: function()\n            {\n                // show saving dialog box\n                Galaxy.modal.show({title: \"Saving...\", body: \"progress\" });\n\n                // send to server\n                $.ajax({\n                    url: Galaxy.root + \"visualization/save\",\n                    type: \"POST\",\n                    dataType: \"json\",\n                    data: {\n                        'id'        : vis.get('vis_id'),\n                        'title'     : vis.get('title'),\n                        'dbkey'     : vis.get('dbkey'),\n                        'type'      : 'trackster',\n                        'vis_json'  : JSON.stringify(vis)\n                    }\n                }).success(function(vis_info) {\n                    Galaxy.modal.hide();\n                    vis.set('vis_id', vis_info.vis_id);\n                }).error(function() {\n                    // show dialog\n                    Galaxy.modal.show({\n                        title   : \"Could Not Save\",\n                        body    : \"Could not save visualization. Please try again later.\",\n                        buttons : { \"Cancel\": function() { Galaxy.modal.hide(); } }\n                    });\n                });\n            }\n        },\n        {\n            icon_class: 'cross-circle', title: 'Close', on_click: function()\n            {\n                window.location = Galaxy.root + \"visualizations/list\";\n            }\n        }], { tooltip_config: { placement: 'bottom' } });\n\n        // add menu\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#center .unified-panel-header-inner\").append(menu.$el);\n\n        // manual tooltip config because default gravity is S and cannot be changed\n        $(\".menu-button\").tooltip( { placement: 'bottom' } );\n    }\n});\n\n// Module exports.\nreturn {\n    GalaxyApp: Circster\n};\n\n});\n"]}