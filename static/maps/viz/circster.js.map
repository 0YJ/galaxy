{"version":3,"sources":["viz/circster.js"],"names":["_","d3","_utils2","default","cssLoadFile","SVGUtils","Backbone","Model","extend","is_visible","svg_elt","svg","eltBRect","getBoundingClientRect","svgBRect","$","right","left","bottom","top","UsesTicks","drawTicks","parent_elt","data","dataHandler","textTransform","horizontal","ticks","append","selectAll","enter","attr","PI","d","radius","tick_coords","text_anchor","angle","Math","text_coords","text","label","formatNum","num","sigDigits","undefined","rval","abs","toPrecision","roundedNum","round","toFixed","CircsterLabelTrack","View","CircsterView","label_arc_height","className","initialize","chords_views","this","genome","options","scale","model","circular_views","vis_config","get","on","add_track","remove_track","update_track_bounds","get_circular_tracks","get_chord_tracks","filter","track","dataset_arc_height","get_tracks_bounds","track_gap","tracks_start_radii","get_value","min_dimension","min","$el","width","height","radius_start","render","length","self","map","circular_tracks","chords_tracks","total_gap","tracks_bounds","select","call","el","radius_bounds","event","translate","zoom_drag_timeout","setTimeout","track_bounds","outermost_radius","label_track_view","index","view","CircsterBigWigTrackView","new_track","innermost_radius_bounds","track_view","update_radius_bounds","CircsterChromLabelTrackView","new_view","CircsterChromInteractionsTrackView","new_track_bounds","each","i","track_index","CircsterTrackView","push","tracks","splice","get_fill_color","color","track_parent_elt","arc_gen","innerRadius","chroms_paths","bg_stroke","loading_bg_fill","bg_fill","data_ready_deferred","genome_arcs","_transition_chrom_data","arc","_transition_labels","outerRadius","update_scale","style","utils","chrom","data_manager","when","then","_render_data","can_get_more_detailed_data","render_labels","chrom_arc","new_d","transition","duration","num_paths","old_scale","new_scale","chrom_data_paths","path_elt","chrom_region","get_chrom_region","data_deferred","new_bounds","get_more_detailed_data","remove","_update_data_bounds","find","chroms_layout","layout","silent","chrom_arcs","rendered_deferred","resolve","get_genome_wide_data","genome_wide_data","_render_chrom_data","reject","chrom_data","path_fn","_get_path_function","p_data","init_arcs","pie_layout","chroms_info","gap_per_chrom","new_endAngle","endAngle","path_data","data_bounds","get_data_bounds","min_arc_len","Deferred","set_value","chromArcTicks","layout_and_data","chrom_info","_chroms_layout","track_config","get_chroms_info","pie","value","len","sort","_update_min_max","startAngle","_quantile","quantile","numbers","path","visibleChroms","c","collection","k","v","prototype","CircsterQuantitativeTrackView","_data_bounds_ticks_fn","datum","values","flatten","linear","domain","range","clamp","line","radial","area","interpolate","chord_data","tick","click","_config2","ConfigSettingCollectionView","vis","add","key","type","hidden","icon_class","title","add_tracks","on_click","url","Galaxy","id","vis_json","success","hide","max","window","data_is_ready","menu","tooltip","placement","cur_chrom","chrom_chord_data","source_angle","_get_region_angle","target_angle","source","target","concat","chord","position","chrom_angle_data","chrom_layout","Circster","_visualization2","Genome","galaxy_config","app","GenomeVisualization","viz_config","dbkey","_iconButton2","create_icon_buttons_menu","select_datasets","render_in_modal","modal","show","body","ajax","root","dataType","JSON","stringify","vis_info","set","vis_id","error","buttons","Cancel","location","tooltip_config","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/circster.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport visualization from \"viz/visualization\";\nimport mod_utils from \"utils/utils\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport \"libs/farbtastic\";\n/**\n * Utility class for working with SVG.\n */\n// load css\nmod_utils.cssLoadFile(\"static/style/circster.css\");\n\nvar SVGUtils = Backbone.Model.extend({\n    /**\n     * Returns true if element is visible.\n     */\n    is_visible: function(svg_elt, svg) {\n        var eltBRect = svg_elt.getBoundingClientRect();\n        var svgBRect = $(\"svg\")[0].getBoundingClientRect();\n\n        if (\n            // To the left of screen?\n            eltBRect.right < 0 ||\n            // To the right of screen?\n            eltBRect.left > svgBRect.right ||\n            // Above screen?\n            eltBRect.bottom < 0 ||\n            // Below screen?\n            eltBRect.top > svgBRect.bottom\n        ) {\n            return false;\n        }\n        return true;\n    }\n});\n\n/**\n * Mixin for using ticks.\n */\nvar UsesTicks = {\n    drawTicks: function(\n        parent_elt,\n        data,\n        dataHandler,\n        textTransform,\n        horizontal\n    ) {\n        // Set up group elements for chroms and for each tick.\n        var ticks = parent_elt\n            .append(\"g\")\n            .selectAll(\"g\")\n            .data(data)\n            .enter()\n            .append(\"g\")\n            .selectAll(\"g\")\n            .data(dataHandler)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"tick\")\n            .attr(\n                \"transform\",\n                d =>\n                    \"rotate(\" +\n                    (d.angle * 180 / Math.PI - 90) +\n                    \")\" +\n                    \"translate(\" +\n                    d.radius +\n                    \",0)\"\n            );\n\n        // Add line + text for ticks.\n        var tick_coords = [];\n\n        var text_coords = [];\n\n        var text_anchor = d => (d.angle > Math.PI ? \"end\" : null);\n\n        if (horizontal) {\n            tick_coords = [0, 0, 0, -4];\n            text_coords = [4, 0, \"\", \".35em\"];\n            text_anchor = null;\n        } else {\n            tick_coords = [1, 0, 4, 0];\n            text_coords = [0, 4, \".35em\", \"\"];\n        }\n\n        ticks\n            .append(\"line\")\n            .attr(\"x1\", tick_coords[0])\n            .attr(\"y1\", tick_coords[1])\n            .attr(\"x2\", tick_coords[2])\n            .attr(\"y1\", tick_coords[3])\n            .style(\"stroke\", \"#000\");\n\n        return ticks\n            .append(\"text\")\n            .attr(\"x\", text_coords[0])\n            .attr(\"y\", text_coords[1])\n            .attr(\"dx\", text_coords[2])\n            .attr(\"dy\", text_coords[3])\n            .attr(\"text-anchor\", text_anchor)\n            .attr(\"transform\", textTransform)\n            .text(d => d.label);\n    },\n\n    /**\n     * Format number for display at a tick.\n     */\n    formatNum: function(num, sigDigits) {\n        // Use default of 2 sig. digits.\n        if (sigDigits === undefined) sigDigits = 2;\n\n        // Verify input number\n        if (num === null) return null;\n\n        // Calculate return value\n        var rval = null;\n        if (Math.abs(num) < 1) {\n            rval = num.toPrecision(sigDigits);\n        } else {\n            // Use round to turn string from toPrecision() back into a number.\n            var roundedNum = Math.round(num.toPrecision(sigDigits));\n\n            // Use abbreviations.\n            num = Math.abs(num);\n            if (num < 1000) {\n                rval = roundedNum;\n            } else if (num < 1000000) {\n                // Use K.\n                rval =\n                    Math.round((roundedNum / 1000).toPrecision(3)).toFixed(0) +\n                    \"K\";\n            } else if (num < 1000000000) {\n                // Use M.\n                rval =\n                    Math.round((roundedNum / 1000000).toPrecision(3)).toFixed(\n                        0\n                    ) + \"M\";\n            }\n        }\n\n        return rval;\n    }\n};\n\n/**\n * A label track.\n */\nvar CircsterLabelTrack = Backbone.Model.extend({});\n\n/**\n * Renders a full circster visualization.\n */\nvar CircsterView = Backbone.View.extend({\n    className: \"circster\",\n\n    initialize: function(options) {\n        this.genome = options.genome;\n        this.label_arc_height = 50;\n        this.scale = 1;\n        this.circular_views = null;\n        this.chords_views = null;\n\n        // When tracks added to/removed from model, update view.\n        this.model.get(\"drawables\").on(\"add\", this.add_track, this);\n        this.model.get(\"drawables\").on(\"remove\", this.remove_track, this);\n\n        // When config settings change, update view.\n        var vis_config = this.model.get(\"config\");\n        vis_config\n            .get(\"arc_dataset_height\")\n            .on(\"change:value\", this.update_track_bounds, this);\n        vis_config\n            .get(\"track_gap\")\n            .on(\"change:value\", this.update_track_bounds, this);\n    },\n\n    // HACKs: using track_type for circular/chord distinction in the functions below for now.\n\n    /**\n     * Returns tracks to be rendered using circular view.\n     */\n    get_circular_tracks: function() {\n        return this.model\n            .get(\"drawables\")\n            .filter(\n                track => track.get(\"track_type\") !== \"DiagonalHeatmapTrack\"\n            );\n    },\n\n    /**\n     * Returns tracks to be rendered using chords view.\n     */\n    get_chord_tracks: function() {\n        return this.model\n            .get(\"drawables\")\n            .filter(\n                track => track.get(\"track_type\") === \"DiagonalHeatmapTrack\"\n            );\n    },\n\n    /**\n     * Returns a list of circular tracks' radius bounds.\n     */\n    get_tracks_bounds: function() {\n        var circular_tracks = this.get_circular_tracks();\n\n        var dataset_arc_height = this.model\n            .get(\"config\")\n            .get_value(\"arc_dataset_height\");\n\n        var track_gap = this.model.get(\"config\").get_value(\"track_gap\");\n\n        var // Subtract 20 to make sure chrom labels are on screen.\n        min_dimension = Math.min(this.$el.width(), this.$el.height()) - 20;\n\n        var // Compute radius start based on model, will be centered\n        // and fit entirely inside element by default.\n        radius_start =\n            min_dimension / 2 -\n            circular_tracks.length * (dataset_arc_height + track_gap) +\n            // Add track_gap back in because no gap is needed for last track.\n            track_gap -\n            this.label_arc_height;\n\n        var // Compute range of track starting radii.\n        tracks_start_radii = d3.range(\n            radius_start,\n            min_dimension / 2,\n            dataset_arc_height + track_gap\n        );\n\n        // Map from track start to bounds.\n        var self = this;\n        return _.map(tracks_start_radii, radius => [\n            radius,\n            radius + dataset_arc_height\n        ]);\n    },\n\n    /**\n     * Renders circular tracks, chord tracks, and label tracks.\n     */\n    render: function() {\n        var self = this;\n        var width = self.$el.width();\n        var height = self.$el.height();\n        var circular_tracks = this.get_circular_tracks();\n        var chords_tracks = this.get_chord_tracks();\n        var total_gap = self.model.get(\"config\").get_value(\"total_gap\");\n        var tracks_bounds = this.get_tracks_bounds();\n\n        var // Set up SVG element.\n        svg = d3\n            .select(self.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"pointer-events\", \"all\")\n            // Set up zooming, dragging.\n            .append(\"svg:g\")\n            .call(\n                d3.behavior.zoom().on(\"zoom\", () => {\n                    // Do zoom, drag.\n                    var scale = d3.event.scale;\n                    svg.attr(\n                        \"transform\",\n                        \"translate(\" +\n                            d3.event.translate +\n                            \")\" +\n                            \" scale(\" +\n                            scale +\n                            \")\"\n                    );\n\n                    // Propagate scale changes to views.\n                    if (self.scale !== scale) {\n                        // Use timeout to wait for zooming/dragging to stop before rendering more detail.\n                        if (self.zoom_drag_timeout) {\n                            clearTimeout(self.zoom_drag_timeout);\n                        }\n                        self.zoom_drag_timeout = setTimeout(() => {\n                            // Render more detail in tracks' visible elements.\n                            // FIXME: do not do this right now; it is not fully implemented--e.g. data bounds\n                            // are not updated when new data is fetched--and fetching more detailed quantitative\n                            // data is not that useful.\n                            /*\n                        _.each(self.circular_views, function(view) {\n                            view.update_scale(scale);\n                        });\n                        */\n                        }, 400);\n                    }\n                })\n            )\n            .attr(\n                \"transform\",\n                \"translate(\" + width / 2 + \",\" + height / 2 + \")\"\n            )\n            .append(\"svg:g\")\n            .attr(\"class\", \"tracks\");\n\n        // -- Render circular tracks. --\n\n        // Create a view for each track in the visualization and render.\n        this.circular_views = circular_tracks.map((track, index) => {\n            var view = new CircsterBigWigTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[index],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render chords tracks. --\n\n        this.chords_views = chords_tracks.map(track => {\n            var view = new CircsterChromInteractionsTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[0],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render label track. --\n\n        // Track bounds are:\n        // (a) outer radius of last circular track;\n        // (b)\n        var outermost_radius = this.circular_views[\n            this.circular_views.length - 1\n        ].radius_bounds[1];\n\n        var track_bounds = [\n            outermost_radius,\n            outermost_radius + this.label_arc_height\n        ];\n\n        this.label_track_view = new CircsterChromLabelTrackView({\n            el: svg.append(\"g\")[0],\n            track: new CircsterLabelTrack(),\n            radius_bounds: track_bounds,\n            genome: self.genome,\n            total_gap: total_gap\n        });\n\n        this.label_track_view.render();\n    },\n\n    /**\n     * Render a single track on the outside of the current visualization.\n     */\n    add_track: function(new_track) {\n        var total_gap = this.model.get(\"config\").get_value(\"total_gap\");\n\n        if (new_track.get(\"track_type\") === \"DiagonalHeatmapTrack\") {\n            // Added chords track.\n            var innermost_radius_bounds = this.circular_views[0].radius_bounds;\n\n            var new_view = new CircsterChromInteractionsTrackView({\n                el: d3.select(\"g.tracks\").append(\"g\")[0],\n                track: new_track,\n                radius_bounds: innermost_radius_bounds,\n                genome: this.genome,\n                total_gap: total_gap\n            });\n\n            new_view.render();\n            this.chords_views.push(new_view);\n        } else {\n            // Added circular track.\n\n            // Recompute and update circular track bounds.\n            var new_track_bounds = this.get_tracks_bounds();\n            _.each(this.circular_views, (track_view, i) => {\n                track_view.update_radius_bounds(new_track_bounds[i]);\n            });\n\n            // Update chords tracks.\n            _.each(this.chords_views, track_view => {\n                track_view.update_radius_bounds(new_track_bounds[0]);\n            });\n\n            // Render new track.\n            var track_index = this.circular_views.length;\n\n            var track_view = new CircsterBigWigTrackView({\n                el: d3.select(\"g.tracks\").append(\"g\")[0],\n                track: new_track,\n                radius_bounds: new_track_bounds[track_index],\n                genome: this.genome,\n                total_gap: total_gap\n            });\n\n            track_view.render();\n            this.circular_views.push(track_view);\n\n            // Update label track.\n            /*\n            FIXME: should never have to update label track because vis always expands to fit area\n            within label track.\n            var track_bounds = new_track_bounds[ new_track_bounds.length-1 ];\n            track_bounds[1] = track_bounds[0];\n            this.label_track_view.update_radius_bounds(track_bounds);\n            */\n        }\n    },\n\n    /**\n     * Remove a track from the view.\n     */\n    remove_track: function(track, tracks, options) {\n        // -- Remove track from view. --\n        var track_view = this.circular_views[options.index];\n        this.circular_views.splice(options.index, 1);\n        track_view.$el.remove();\n\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, (track_view, i) => {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n    },\n\n    update_track_bounds: function() {\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, (track_view, i) => {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n\n        // Update chords tracks.\n        _.each(this.chords_views, track_view => {\n            track_view.update_radius_bounds(new_track_bounds[0]);\n        });\n    }\n});\n\n/**\n * Renders a track in a Circster visualization.\n */\nvar CircsterTrackView = Backbone.View.extend({\n    tagName: \"g\",\n\n    /* ----------------------- Public Methods ------------------------- */\n\n    initialize: function(options) {\n        this.bg_stroke = \"#ddd\";\n        // Fill color when loading data.\n        this.loading_bg_fill = \"#ffc\";\n        // Fill color when data has been loaded.\n        this.bg_fill = \"#ddd\";\n        this.total_gap = options.total_gap;\n        this.track = options.track;\n        this.radius_bounds = options.radius_bounds;\n        this.genome = options.genome;\n        this.chroms_layout = this._chroms_layout();\n        this.data_bounds = [];\n        this.scale = 1;\n        this.parent_elt = d3.select(this.$el[0]);\n    },\n\n    /**\n     * Get fill color from config.\n     */\n    get_fill_color: function() {\n        var color = this.track.get(\"config\").get_value(\"block_color\");\n        if (!color) {\n            color = this.track.get(\"config\").get_value(\"color\");\n        }\n        return color;\n    },\n\n    /**\n     * Render track's data by adding SVG elements to parent.\n     */\n    render: function() {\n        // -- Create track group element. --\n        var track_parent_elt = this.parent_elt;\n\n        // -- Render background arcs. --\n        var genome_arcs = this.chroms_layout;\n\n        var arc_gen = d3.svg\n            .arc()\n            .innerRadius(this.radius_bounds[0])\n            .outerRadius(this.radius_bounds[1]);\n\n        var // Attach data to group element.\n        chroms_elts = track_parent_elt\n            .selectAll(\"g\")\n            .data(genome_arcs)\n            .enter()\n            .append(\"svg:g\");\n\n        var // Draw chrom arcs/paths.\n        chroms_paths = chroms_elts\n            .append(\"path\")\n            .attr(\"d\", arc_gen)\n            .attr(\"class\", \"chrom-background\")\n            .style(\"stroke\", this.bg_stroke)\n            .style(\"fill\", this.loading_bg_fill);\n\n        // Append titles to paths.\n        chroms_paths.append(\"title\").text(d => d.data.chrom);\n\n        // -- Render track data and, when track data is rendered, apply preferences and update chrom_elts fill. --\n\n        var self = this;\n\n        var data_manager = self.track.get(\"data_manager\");\n\n        var // If track has a data manager, get deferred that resolves when data is ready.\n        data_ready_deferred = data_manager\n            ? data_manager.data_is_ready()\n            : true;\n\n        // When data is ready, render track.\n        $.when(data_ready_deferred).then(() => {\n            $.when(self._render_data(track_parent_elt)).then(() => {\n                chroms_paths.style(\"fill\", self.bg_fill);\n\n                // Render labels after data is available so that data attributes are available.\n                self.render_labels();\n            });\n        });\n    },\n\n    /**\n     * Render track labels.\n     */\n    render_labels: function() {},\n\n    /**\n     * Update radius bounds.\n     */\n    update_radius_bounds: function(radius_bounds) {\n        // Update bounds.\n        this.radius_bounds = radius_bounds;\n\n        // -- Update background arcs. --\n        var new_d = d3.svg\n            .arc()\n            .innerRadius(this.radius_bounds[0])\n            .outerRadius(this.radius_bounds[1]);\n\n        this.parent_elt\n            .selectAll(\"g>path.chrom-background\")\n            .transition()\n            .duration(1000)\n            .attr(\"d\", new_d);\n\n        this._transition_chrom_data();\n\n        this._transition_labels();\n    },\n\n    /**\n     * Update view scale. This fetches more data if scale is increased.\n     */\n    update_scale: function(new_scale) {\n        // -- Update scale and return if new scale is less than old scale. --\n\n        var old_scale = this.scale;\n        this.scale = new_scale;\n        if (new_scale <= old_scale) {\n            return;\n        }\n\n        // -- Scale increased, so render visible data with more detail. --\n\n        var self = this;\n\n        var utils = new SVGUtils();\n\n        // Select all chrom data and filter to operate on those that are visible.\n        this.parent_elt\n            .selectAll(\"path.chrom-data\")\n            .filter(function(d, i) {\n                return utils.is_visible(this);\n            })\n            .each(function(d, i) {\n                // -- Now operating on a single path element representing chromosome data. --\n\n                var path_elt = d3.select(this);\n\n                var chrom = path_elt.attr(\"chrom\");\n                var chrom_region = self.genome.get_chrom_region(chrom);\n                var data_manager = self.track.get(\"data_manager\");\n                var data_deferred;\n\n                // If can't get more detailed data, return.\n                if (!data_manager.can_get_more_detailed_data(chrom_region)) {\n                    return;\n                }\n\n                // -- Get more detailed data. --\n                data_deferred = self.track\n                    .get(\"data_manager\")\n                    .get_more_detailed_data(\n                        chrom_region,\n                        \"Coverage\",\n                        0,\n                        new_scale\n                    );\n\n                // When more data is available, use new data to redraw path.\n                $.when(data_deferred).then(data => {\n                    // Remove current data path.\n                    path_elt.remove();\n\n                    // Update data bounds with new data.\n                    self._update_data_bounds();\n\n                    // Find chromosome arc to draw data on.\n                    var chrom_arc = _.find(\n                        self.chroms_layout,\n                        layout => layout.data.chrom === chrom\n                    );\n\n                    // Add new data path and apply preferences.\n                    var color = self.get_fill_color();\n                    self\n                        ._render_chrom_data(self.parent_elt, chrom_arc, data)\n                        .style(\"stroke\", color)\n                        .style(\"fill\", color);\n                });\n            });\n\n        return self;\n    },\n\n    /* ----------------------- Internal Methods ------------------------- */\n\n    /**\n     * Transitions chrom data to new values (e.g new radius or data bounds).\n     */\n    _transition_chrom_data: function() {\n        var track = this.track;\n        var chrom_arcs = this.chroms_layout;\n        var chrom_data_paths = this.parent_elt.selectAll(\"g>path.chrom-data\");\n        var num_paths = chrom_data_paths[0].length;\n\n        if (num_paths > 0) {\n            var self = this;\n            $.when(\n                track.get(\"data_manager\").get_genome_wide_data(this.genome)\n            ).then(genome_wide_data => {\n                // Map chrom data to path data, filtering out null values.\n                var path_data = _.reject(\n                    _.map(genome_wide_data, (chrom_data, i) => {\n                        var rval = null;\n\n                        var path_fn = self._get_path_function(\n                            chrom_arcs[i],\n                            chrom_data\n                        );\n\n                        if (path_fn) {\n                            rval = path_fn(chrom_data.data);\n                        }\n                        return rval;\n                    }),\n                    p_data => p_data === null\n                );\n\n                // Transition each path for data and color.\n                var color = track.get(\"config\").get_value(\"color\");\n                chrom_data_paths.each(function(path, index) {\n                    d3\n                        .select(this)\n                        .transition()\n                        .duration(1000)\n                        .style(\"stroke\", color)\n                        .style(\"fill\", color)\n                        .attr(\"d\", path_data[index]);\n                });\n            });\n        }\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {},\n\n    /**\n     * Update data bounds. If there are new_bounds, use them; otherwise use\n     * default data bounds.\n     */\n    _update_data_bounds: function(new_bounds) {\n        var old_bounds = this.data_bounds;\n        this.data_bounds =\n            new_bounds ||\n            this.get_data_bounds(\n                this.track.get(\"data_manager\").get_genome_wide_data(this.genome)\n            );\n        this._transition_chrom_data();\n    },\n\n    /**\n     * Render data as elements attached to svg.\n     */\n    _render_data: function(svg) {\n        var self = this;\n        var chrom_arcs = this.chroms_layout;\n        var track = this.track;\n        var rendered_deferred = $.Deferred();\n\n        // When genome-wide data is available, render data.\n        $.when(\n            track.get(\"data_manager\").get_genome_wide_data(this.genome)\n        ).then(genome_wide_data => {\n            // Set bounds.\n            self.data_bounds = self.get_data_bounds(genome_wide_data);\n\n            // Set min, max value in config so that they can be adjusted. Make this silent\n            // because these attributes are watched for changes and the viz is updated\n            // accordingly (set up in initialize). Because we are setting up, we don't want\n            // the watch to trigger events here.\n            track.get(\"config\").set_value(\"min_value\", self.data_bounds[0], {\n                silent: true\n            });\n            track.get(\"config\").set_value(\"max_value\", self.data_bounds[1], {\n                silent: true\n            });\n\n            // Merge chroms layout with data.\n            var layout_and_data = _.zip(chrom_arcs, genome_wide_data);\n\n            // Render each chromosome's data.\n            _.each(layout_and_data, chrom_info => {\n                var chrom_arc = chrom_info[0];\n                var data = chrom_info[1];\n                return self._render_chrom_data(svg, chrom_arc, data);\n            });\n\n            // Apply prefs to all track data.\n            var color = self.get_fill_color();\n            self.parent_elt\n                .selectAll(\"path.chrom-data\")\n                .style(\"stroke\", color)\n                .style(\"fill\", color);\n\n            rendered_deferred.resolve(svg);\n        });\n\n        return rendered_deferred;\n    },\n\n    /**\n     * Render a chromosome data and attach elements to svg.\n     */\n    _render_chrom_data: function(svg, chrom_arc, data) {},\n\n    /**\n     * Returns data for creating a path for the given data using chrom_arc and data bounds.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {},\n\n    /**\n     * Returns arc layouts for genome's chromosomes/contigs. Arcs are arranged in a circle\n     * separated by gaps.\n     */\n    _chroms_layout: function() {\n        // Setup chroms layout using pie.\n        var chroms_info = this.genome.get_chroms_info();\n\n        var pie_layout = d3.layout\n            .pie()\n            .value(d => d.len)\n            .sort(null);\n\n        var init_arcs = pie_layout(chroms_info);\n        var gap_per_chrom = 2 * Math.PI * this.total_gap / chroms_info.length;\n\n        var chrom_arcs = _.map(init_arcs, (arc, index) => {\n            // For short chroms, endAngle === startAngle.\n            var new_endAngle = arc.endAngle - gap_per_chrom;\n            arc.endAngle =\n                new_endAngle > arc.startAngle ? new_endAngle : arc.startAngle;\n            return arc;\n        });\n\n        return chrom_arcs;\n    }\n});\n\n/**\n * Render chromosome labels.\n */\nvar CircsterChromLabelTrackView = CircsterTrackView.extend({\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n        // Use a single arc for rendering data.\n        this.innerRadius = this.radius_bounds[0];\n        this.radius_bounds[0] = this.radius_bounds[1];\n        this.bg_stroke = \"#fff\";\n        this.bg_fill = \"#fff\";\n\n        // Minimum arc distance for labels to be applied.\n        this.min_arc_len = 0.05;\n    },\n\n    /**\n     * Render labels.\n     */\n    _render_data: function(svg) {\n        // -- Add chromosome label where it will fit; an alternative labeling mechanism\n        // would be nice for small chromosomes. --\n        var self = this;\n\n        var chrom_arcs = svg.selectAll(\"g\");\n\n        chrom_arcs.selectAll(\"path\").attr(\"id\", d => \"label-\" + d.data.chrom);\n\n        chrom_arcs\n            .append(\"svg:text\")\n            .filter(d => d.endAngle - d.startAngle > self.min_arc_len)\n            .attr(\"text-anchor\", \"middle\")\n            .append(\"svg:textPath\")\n            .attr(\"class\", \"chrom-label\")\n            .attr(\"xlink:href\", d => \"#label-\" + d.data.chrom)\n            .attr(\"startOffset\", \"25%\")\n            .text(d => d.data.chrom);\n\n        // -- Add ticks to denote chromosome length. --\n\n        /** Returns an array of tick angles and labels, given a chrom arc. */\n        var chromArcTicks = d => {\n            var k = (d.endAngle - d.startAngle) / d.value;\n\n            var ticks = d3.range(0, d.value, 25000000).map((v, i) => ({\n                radius: self.innerRadius,\n                angle: v * k + d.startAngle,\n                label: i === 0 ? 0 : i % 3 ? null : self.formatNum(v)\n            }));\n\n            // If there are fewer that 4 ticks, label last tick so that at least one non-zero tick is labeled.\n            if (ticks.length < 4) {\n                ticks[ticks.length - 1].label = self.formatNum(\n                    Math.round(\n                        (ticks[ticks.length - 1].angle - d.startAngle) / k\n                    )\n                );\n            }\n\n            return ticks;\n        };\n\n        /** Rotate and move text as needed. */\n        var textTransform = d =>\n            d.angle > Math.PI ? \"rotate(180)translate(-16)\" : null;\n\n        // Filter chroms for only those large enough for display.\n        var visibleChroms = _.filter(\n            this.chroms_layout,\n            c => c.endAngle - c.startAngle > self.min_arc_len\n        );\n\n        this.drawTicks(\n            this.parent_elt,\n            visibleChroms,\n            chromArcTicks,\n            textTransform\n        );\n    }\n});\n_.extend(CircsterChromLabelTrackView.prototype, UsesTicks);\n\n/**\n * View for quantitative track in Circster.\n */\nvar CircsterQuantitativeTrackView = CircsterTrackView.extend({\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n\n        // When config settings change, update view.\n        var track_config = this.track.get(\"config\");\n        track_config\n            .get(\"min_value\")\n            .on(\"change:value\", this._update_min_max, this);\n        track_config\n            .get(\"max_value\")\n            .on(\"change:value\", this._update_min_max, this);\n        track_config\n            .get(\"color\")\n            .on(\"change:value\", this._transition_chrom_data, this);\n    },\n\n    /**\n     * Update track when min and/or max are changed.\n     */\n    _update_min_max: function() {\n        var track_config = this.track.get(\"config\");\n\n        var new_bounds = [\n            track_config.get_value(\"min_value\"),\n            track_config.get_value(\"max_value\")\n        ];\n\n        this._update_data_bounds(new_bounds);\n\n        // FIXME: this works to update tick/text bounds, but there's probably a better way to do this\n        // by updating the data itself.\n        this.parent_elt.selectAll(\".min_max\").text((d, i) => new_bounds[i]);\n    },\n\n    /**\n     * Returns quantile for an array of numbers.\n     */\n    _quantile: function(numbers, quantile) {\n        numbers.sort(d3.ascending);\n        return d3.quantile(numbers, quantile);\n    },\n\n    /**\n     * Renders quantitative data with the form [x, value] and assumes data is equally spaced across\n     * chromosome. Attachs a dict with track and chrom name information to DOM element.\n     */\n    _render_chrom_data: function(svg, chrom_arc, chrom_data) {\n        var path_data = this._get_path_function(chrom_arc, chrom_data);\n\n        if (!path_data) {\n            return null;\n        }\n\n        // There is path data, so render as path.\n        var parent = svg.datum(chrom_data.data);\n\n        var path = parent\n            .append(\"path\")\n            .attr(\"class\", \"chrom-data\")\n            .attr(\"chrom\", chrom_arc.data.chrom)\n            .attr(\"d\", path_data);\n\n        return path;\n    },\n\n    /**\n     * Returns function for creating a path across the chrom arc.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {\n        // If no chrom data, return null.\n        if (\n            typeof chrom_data === \"string\" ||\n            !chrom_data.data ||\n            chrom_data.data.length === 0\n        ) {\n            return null;\n        }\n\n        // Radius scaler.\n        var radius = d3.scale\n            .linear()\n            .domain(this.data_bounds)\n            .range(this.radius_bounds)\n            .clamp(true);\n\n        // Scaler for placing data points across arc.\n        var angle = d3.scale\n            .linear()\n            .domain([0, chrom_data.data.length])\n            .range([chrom_arc.startAngle, chrom_arc.endAngle]);\n\n        // Use line generator to create area.\n        var line = d3.svg.line\n            .radial()\n            .interpolate(\"linear\")\n            .radius(d => radius(d[1]))\n            .angle((d, i) => angle(i));\n\n        return d3.svg.area\n            .radial()\n            .interpolate(line.interpolate())\n            .innerRadius(radius(0))\n            .outerRadius(line.radius())\n            .angle(line.angle());\n    },\n\n    /**\n     * Render track min, max using ticks.\n     */\n    render_labels: function() {\n        var self = this;\n\n        var // Keep counter of visible chroms.\n        textTransform = () => \"rotate(90)\";\n\n        // FIXME:\n        // (1) using min_max class below is needed for _update_min_max, which could be improved.\n        // (2) showing config on tick click should be replaced by proper track config icon.\n\n        // Draw min, max on first chrom only.\n        var ticks = this.drawTicks(\n            this.parent_elt,\n            [this.chroms_layout[0]],\n            this._data_bounds_ticks_fn(),\n            textTransform,\n            true\n        ).classed(\"min_max\", true);\n\n        // Show config when ticks are clicked on.\n        _.each(ticks, tick => {\n            $(tick).click(() => {\n                var view = new config.ConfigSettingCollectionView({\n                    collection: self.track.get(\"config\")\n                });\n                view.render_in_modal(\"Configure Track\");\n            });\n        });\n\n        /*\n        // Filter for visible chroms, then for every third chrom so that labels attached to only every\n        // third chrom.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > 0.08; }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) { return i % 3 === 0; });\n        this.drawTicks(this.parent_elt, labeledChroms, this._data_bounds_ticks_fn(), textTransform, true);\n        */\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {\n        // FIXME: (a) pull out function for getting labeled chroms? and (b) function used in transition below\n        // is copied from UseTicks mixin, so pull out and make generally available.\n\n        // If there are no data bounds, nothing to transition.\n        if (this.data_bounds.length === 0) {\n            return;\n        }\n\n        // Transition labels to new radius bounds.\n        var self = this;\n\n        var visibleChroms = _.filter(\n            this.chroms_layout,\n            c => c.endAngle - c.startAngle > 0.08\n        );\n\n        var labeledChroms = _.filter(visibleChroms, (c, i) => i % 3 === 0);\n\n        var new_data = _.flatten(\n            _.map(labeledChroms, c => self._data_bounds_ticks_fn()(c))\n        );\n\n        this.parent_elt\n            .selectAll(\"g.tick\")\n            .data(new_data)\n            .transition()\n            .attr(\n                \"transform\",\n                d =>\n                    \"rotate(\" +\n                    (d.angle * 180 / Math.PI - 90) +\n                    \")\" +\n                    \"translate(\" +\n                    d.radius +\n                    \",0)\"\n            );\n    },\n\n    /**\n     * Get function for locating data bounds ticks.\n     */\n    _data_bounds_ticks_fn: function() {\n        // Closure vars.\n        var self = this;\n        visibleChroms = 0;\n\n        // Return function for locating ticks based on chrom arc data.\n        return (\n            d // Set up data to display min, max ticks.\n        ) => [\n            {\n                radius: self.radius_bounds[0],\n                angle: d.startAngle,\n                label: self.formatNum(self.data_bounds[0])\n            },\n            {\n                radius: self.radius_bounds[1],\n                angle: d.startAngle,\n                label: self.formatNum(self.data_bounds[1])\n            }\n        ];\n    },\n\n    /**\n     * Returns an array with two values denoting the minimum and maximum\n     * values for the track.\n     */\n    get_data_bounds: function(data) {}\n});\n_.extend(CircsterQuantitativeTrackView.prototype, UsesTicks);\n\n/**\n * Bigwig track view in Circster.\n */\nvar CircsterBigWigTrackView = CircsterQuantitativeTrackView.extend({\n    get_data_bounds: function(data) {\n        // Set max across dataset by extracting all values, flattening them into a\n        // single array, and getting third quartile.\n        var values = _.flatten(\n            _.map(data, d => {\n                if (d) {\n                    // Each data point has the form [position, value], so return all values.\n                    return _.map(\n                        d.data,\n                        (\n                            p // Null is used for a lack of data; resolve null to 0 for comparison.\n                        ) => parseInt(p[1], 10) || 0\n                    );\n                } else {\n                    return 0;\n                }\n            })\n        );\n\n        // For max, use 98% quantile in attempt to avoid very large values. However, this max may be 0\n        // for sparsely populated data, so use max in that case.\n        return [_.min(values), this._quantile(values, 0.98) || _.max(values)];\n    }\n});\n\n/**\n * Chromosome interactions track view in Circster.\n */\nvar CircsterChromInteractionsTrackView = CircsterTrackView.extend({\n    render: function() {\n        var self = this;\n\n        // When data is ready, render track.\n        $.when(self.track.get(\"data_manager\").data_is_ready()).then(() => {\n            // When data has been fetched, render track.\n            $.when(\n                self.track.get(\"data_manager\").get_genome_wide_data(self.genome)\n            ).then(genome_wide_data => {\n                var chord_data = [];\n                var chroms_info = self.genome.get_chroms_info();\n                // Convert chromosome data into chord data.\n                _.each(genome_wide_data, (chrom_data, index) => {\n                    // Map each interaction into chord data.\n                    var cur_chrom = chroms_info[index].chrom;\n                    var chrom_chord_data = _.map(chrom_data.data, datum => {\n                        // Each datum is an interaction/chord.\n                        var source_angle = self._get_region_angle(\n                            cur_chrom,\n                            datum[1]\n                        );\n\n                        var target_angle = self._get_region_angle(\n                            datum[3],\n                            datum[4]\n                        );\n\n                        return {\n                            source: {\n                                startAngle: source_angle,\n                                endAngle: source_angle + 0.01\n                            },\n                            target: {\n                                startAngle: target_angle,\n                                endAngle: target_angle + 0.01\n                            }\n                        };\n                    });\n\n                    chord_data = chord_data.concat(chrom_chord_data);\n                });\n\n                self.parent_elt\n                    .append(\"g\")\n                    .attr(\"class\", \"chord\")\n                    .selectAll(\"path\")\n                    .data(chord_data)\n                    .enter()\n                    .append(\"path\")\n                    .style(\"fill\", self.get_fill_color())\n                    .attr(\"d\", d3.svg.chord().radius(self.radius_bounds[0]))\n                    .style(\"opacity\", 1);\n            });\n        });\n    },\n\n    update_radius_bounds: function(radius_bounds) {\n        this.radius_bounds = radius_bounds;\n        this.parent_elt\n            .selectAll(\"path\")\n            .transition()\n            .attr(\"d\", d3.svg.chord().radius(this.radius_bounds[0]));\n    },\n\n    /**\n     * Returns radians for a genomic position.\n     */\n    _get_region_angle: function(chrom, position) {\n        // Find chrom angle data\n        var chrom_angle_data = _.find(\n            this.chroms_layout,\n            chrom_layout => chrom_layout.data.chrom === chrom\n        );\n\n        // Return angle at position.\n        return (\n            chrom_angle_data.endAngle -\n            (chrom_angle_data.endAngle - chrom_angle_data.startAngle) *\n                (chrom_angle_data.data.len - position) /\n                chrom_angle_data.data.len\n        );\n    }\n});\n\n// circster app loader\nvar Circster = Backbone.View.extend({\n    initialize: function() {\n        // -- Configure visualization --\n        var genome = new visualization.Genome(galaxy_config.app.genome);\n\n        var vis = new visualization.GenomeVisualization(\n            galaxy_config.app.viz_config\n        );\n\n        // Add Circster-specific config options.\n        vis.get(\"config\").add([\n            {\n                key: \"arc_dataset_height\",\n                label: \"Arc Dataset Height\",\n                type: \"int\",\n                value: 25,\n                view: \"circster\"\n            },\n            {\n                key: \"track_gap\",\n                label: \"Gap Between Tracks\",\n                type: \"int\",\n                value: 5,\n                view: \"circster\"\n            },\n            {\n                key: \"total_gap\",\n                label: \"Gap [0-1]\",\n                type: \"float\",\n                value: 0.4,\n                view: \"circster\",\n                hidden: true\n            }\n        ]);\n\n        var viz_view = new CircsterView({\n            // view pane\n            el: $(\"#center .unified-panel-body\"),\n            genome: genome,\n            model: vis\n        });\n\n        // Render vizualization\n        viz_view.render();\n\n        // setup title\n        $(\"#center .unified-panel-header-inner\").append(\n            galaxy_config.app.viz_config.title +\n                \" \" +\n                galaxy_config.app.viz_config.dbkey\n        );\n\n        // setup menu\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"plus-button\",\n                    title: \"Add tracks\",\n                    on_click: function() {\n                        visualization.select_datasets(\n                            { dbkey: vis.get(\"dbkey\") },\n                            tracks => {\n                                vis.add_tracks(tracks);\n                            }\n                        );\n                    }\n                },\n                {\n                    icon_class: \"gear\",\n                    title: \"Settings\",\n                    on_click: function() {\n                        var view = new config.ConfigSettingCollectionView({\n                            collection: vis.get(\"config\")\n                        });\n                        view.render_in_modal(\"Configure Visualization\");\n                    }\n                },\n                {\n                    icon_class: \"disk--arrow\",\n                    title: \"Save\",\n                    on_click: function() {\n                        // show saving dialog box\n                        Galaxy.modal.show({\n                            title: \"Saving...\",\n                            body: \"progress\"\n                        });\n\n                        // send to server\n                        $.ajax({\n                            url: Galaxy.root + \"visualization/save\",\n                            type: \"POST\",\n                            dataType: \"json\",\n                            data: {\n                                id: vis.get(\"vis_id\"),\n                                title: vis.get(\"title\"),\n                                dbkey: vis.get(\"dbkey\"),\n                                type: \"trackster\",\n                                vis_json: JSON.stringify(vis)\n                            }\n                        })\n                            .success(vis_info => {\n                                Galaxy.modal.hide();\n                                vis.set(\"vis_id\", vis_info.vis_id);\n                            })\n                            .error(() => {\n                                // show dialog\n                                Galaxy.modal.show({\n                                    title: \"Could Not Save\",\n                                    body:\n                                        \"Could not save visualization. Please try again later.\",\n                                    buttons: {\n                                        Cancel: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            });\n                    }\n                },\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        window.location = Galaxy.root + \"visualizations/list\";\n                    }\n                }\n            ],\n            { tooltip_config: { placement: \"bottom\" } }\n        );\n\n        // add menu\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#center .unified-panel-header-inner\").append(menu.$el);\n\n        // manual tooltip config because default gravity is S and cannot be changed\n        $(\".menu-button\").tooltip({ placement: \"bottom\" });\n    }\n});\n\n// Module exports.\nexport default {\n    GalaxyApp: Circster\n};\n"]}