{"version":3,"sources":["viz/circster.js"],"names":["_","d3","_utils2","default","cssLoadFile","SVGUtils","Backbone","Model","extend","is_visible","svg_elt","svg","eltBRect","getBoundingClientRect","svgBRect","$","right","left","bottom","top","UsesTicks","drawTicks","parent_elt","data","dataHandler","textTransform","horizontal","ticks","append","selectAll","enter","attr","d","angle","Math","PI","radius","tick_coords","text_coords","text_anchor","text","label","formatNum","num","sigDigits","undefined","rval","abs","roundedNum","toPrecision","round","toFixed","CircsterLabelTrack","genome","CircsterView","View","className","initialize","get","this","options","label_arc_height","scale","vis_config","model","on","add_track","remove_track","get_circular_tracks","update_track_bounds","filter","track","get_chord_tracks","min_dimension","width","get_tracks_bounds","circular_tracks","tracks_start_radii","range","get_value","track_gap","dataset_arc_height","$el","height","radius_start","length","self","chords_tracks","total_gap","map","behavior","render","clearTimeout","zoom_drag_timeout","tracks_bounds","select","call","zoom","event","circular_views","translate","radius_bounds","chords_views","setTimeout","outermost_radius","index","label_track_view","view","innermost_radius_bounds","new_view","el","each","track_view","track_bounds","CircsterChromLabelTrackView","new_track","CircsterChromInteractionsTrackView","remove","update_radius_bounds","i","new_track_bounds","track_index","push","chroms_layout","tracks","_chroms_layout","splice","get_fill_color","track_parent_elt","CircsterTrackView","tagName","chroms_paths","bg_stroke","loading_bg_fill","bg_fill","data_manager","data_ready_deferred","data_bounds","then","color","genome_arcs","arc_gen","new_d","arc","outerRadius","_transition_labels","update_scale","old_scale","new_scale","chrom","data_is_ready","when","path_elt","chrom_region","get_chrom_region","render_labels","innerRadius","transition","duration","_transition_chrom_data","chrom_arcs","num_paths","utils","data_deferred","can_get_more_detailed_data","_update_data_bounds","old_bounds","rendered_deferred","find","get_genome_wide_data","layout","silent","chrom_arc","style","set_value","chrom_data_paths","genome_wide_data","path_data","reject","chrom_data","path_fn","_get_path_function","p_data","sort","path","init_arcs","gap_per_chrom","new_endAngle","endAngle","new_bounds","min_arc_len","_render_data","startAngle","get_data_bounds","chromArcTicks","value","layout_and_data","zip","chrom_info","_render_chrom_data","resolve","track_config","chroms_info","get_chroms_info","pie","len","prototype","linear","line","visibleChroms","c","v","k","CircsterQuantitativeTrackView","labeledChroms","_update_min_max","new_data","_data_bounds_ticks_fn","_quantile","numbers","quantile","ascending","datum","domain","clamp","radial","interpolate","source","chord_data","chrom_angle_data","classed","tick","Circster","_config2","ConfigSettingCollectionView","collection","vis","key","hidden","flatten","icon_class","title","on_click","Galaxy","url","type","dataType","dbkey","body","Cancel","CircsterBigWigTrackView","window","tooltip_config","placement","p","parseInt","min","values","max","cur_chrom","chrom_chord_data","source_angle","_get_region_angle","target_angle","target","concat","chord","position","chrom_layout","_visualization2","Genome","galaxy_config","app","GenomeVisualization","viz_config","add","menu","_iconButton2","create_icon_buttons_menu","select_datasets","add_tracks","render_in_modal","modal","show","ajax","root","id","vis_json","JSON","stringify","success","vis_info","hide","set","vis_id","error","buttons","location","tooltip","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/circster.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport visualization from \"viz/visualization\";\nimport mod_utils from \"utils/utils\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport \"libs/farbtastic\";\n/**\n * Utility class for working with SVG.\n */\n// load css\nmod_utils.cssLoadFile(\"static/style/circster.css\");\n\nvar SVGUtils = Backbone.Model.extend({\n    /**\n     * Returns true if element is visible.\n     */\n    is_visible: function(svg_elt, svg) {\n        var eltBRect = svg_elt.getBoundingClientRect(),\n            svgBRect = $(\"svg\")[0].getBoundingClientRect();\n\n        if (\n            // To the left of screen?\n            eltBRect.right < 0 ||\n            // To the right of screen?\n            eltBRect.left > svgBRect.right ||\n            // Above screen?\n            eltBRect.bottom < 0 ||\n            // Below screen?\n            eltBRect.top > svgBRect.bottom\n        ) {\n            return false;\n        }\n        return true;\n    }\n});\n\n/**\n * Mixin for using ticks.\n */\nvar UsesTicks = {\n    drawTicks: function(\n        parent_elt,\n        data,\n        dataHandler,\n        textTransform,\n        horizontal\n    ) {\n        // Set up group elements for chroms and for each tick.\n        var ticks = parent_elt\n            .append(\"g\")\n            .selectAll(\"g\")\n            .data(data)\n            .enter()\n            .append(\"g\")\n            .selectAll(\"g\")\n            .data(dataHandler)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"tick\")\n            .attr(\"transform\", function(d) {\n                return (\n                    \"rotate(\" +\n                    (d.angle * 180 / Math.PI - 90) +\n                    \")\" +\n                    \"translate(\" +\n                    d.radius +\n                    \",0)\"\n                );\n            });\n\n        // Add line + text for ticks.\n        var tick_coords = [],\n            text_coords = [],\n            text_anchor = function(d) {\n                return d.angle > Math.PI ? \"end\" : null;\n            };\n        if (horizontal) {\n            tick_coords = [0, 0, 0, -4];\n            text_coords = [4, 0, \"\", \".35em\"];\n            text_anchor = null;\n        } else {\n            tick_coords = [1, 0, 4, 0];\n            text_coords = [0, 4, \".35em\", \"\"];\n        }\n\n        ticks\n            .append(\"line\")\n            .attr(\"x1\", tick_coords[0])\n            .attr(\"y1\", tick_coords[1])\n            .attr(\"x2\", tick_coords[2])\n            .attr(\"y1\", tick_coords[3])\n            .style(\"stroke\", \"#000\");\n\n        return ticks\n            .append(\"text\")\n            .attr(\"x\", text_coords[0])\n            .attr(\"y\", text_coords[1])\n            .attr(\"dx\", text_coords[2])\n            .attr(\"dy\", text_coords[3])\n            .attr(\"text-anchor\", text_anchor)\n            .attr(\"transform\", textTransform)\n            .text(function(d) {\n                return d.label;\n            });\n    },\n\n    /**\n     * Format number for display at a tick.\n     */\n    formatNum: function(num, sigDigits) {\n        // Use default of 2 sig. digits.\n        if (sigDigits === undefined) sigDigits = 2;\n\n        // Verify input number\n        if (num === null) return null;\n\n        // Calculate return value\n        var rval = null;\n        if (Math.abs(num) < 1) {\n            rval = num.toPrecision(sigDigits);\n        } else {\n            // Use round to turn string from toPrecision() back into a number.\n            var roundedNum = Math.round(num.toPrecision(sigDigits));\n\n            // Use abbreviations.\n            num = Math.abs(num);\n            if (num < 1000) {\n                rval = roundedNum;\n            } else if (num < 1000000) {\n                // Use K.\n                rval =\n                    Math.round((roundedNum / 1000).toPrecision(3)).toFixed(0) +\n                    \"K\";\n            } else if (num < 1000000000) {\n                // Use M.\n                rval =\n                    Math.round((roundedNum / 1000000).toPrecision(3)).toFixed(\n                        0\n                    ) + \"M\";\n            }\n        }\n\n        return rval;\n    }\n};\n\n/**\n * A label track.\n */\nvar CircsterLabelTrack = Backbone.Model.extend({});\n\n/**\n * Renders a full circster visualization.\n */\nvar CircsterView = Backbone.View.extend({\n    className: \"circster\",\n\n    initialize: function(options) {\n        this.genome = options.genome;\n        this.label_arc_height = 50;\n        this.scale = 1;\n        this.circular_views = null;\n        this.chords_views = null;\n\n        // When tracks added to/removed from model, update view.\n        this.model.get(\"drawables\").on(\"add\", this.add_track, this);\n        this.model.get(\"drawables\").on(\"remove\", this.remove_track, this);\n\n        // When config settings change, update view.\n        var vis_config = this.model.get(\"config\");\n        vis_config\n            .get(\"arc_dataset_height\")\n            .on(\"change:value\", this.update_track_bounds, this);\n        vis_config\n            .get(\"track_gap\")\n            .on(\"change:value\", this.update_track_bounds, this);\n    },\n\n    // HACKs: using track_type for circular/chord distinction in the functions below for now.\n\n    /**\n     * Returns tracks to be rendered using circular view.\n     */\n    get_circular_tracks: function() {\n        return this.model.get(\"drawables\").filter(function(track) {\n            return track.get(\"track_type\") !== \"DiagonalHeatmapTrack\";\n        });\n    },\n\n    /**\n     * Returns tracks to be rendered using chords view.\n     */\n    get_chord_tracks: function() {\n        return this.model.get(\"drawables\").filter(function(track) {\n            return track.get(\"track_type\") === \"DiagonalHeatmapTrack\";\n        });\n    },\n\n    /**\n     * Returns a list of circular tracks' radius bounds.\n     */\n    get_tracks_bounds: function() {\n        var circular_tracks = this.get_circular_tracks(),\n            dataset_arc_height = this.model\n                .get(\"config\")\n                .get_value(\"arc_dataset_height\"),\n            track_gap = this.model.get(\"config\").get_value(\"track_gap\"),\n            // Subtract 20 to make sure chrom labels are on screen.\n            min_dimension = Math.min(this.$el.width(), this.$el.height()) - 20,\n            // Compute radius start based on model, will be centered\n            // and fit entirely inside element by default.\n            radius_start =\n                min_dimension / 2 -\n                circular_tracks.length * (dataset_arc_height + track_gap) +\n                // Add track_gap back in because no gap is needed for last track.\n                track_gap -\n                this.label_arc_height,\n            // Compute range of track starting radii.\n            tracks_start_radii = d3.range(\n                radius_start,\n                min_dimension / 2,\n                dataset_arc_height + track_gap\n            );\n\n        // Map from track start to bounds.\n        var self = this;\n        return _.map(tracks_start_radii, function(radius) {\n            return [radius, radius + dataset_arc_height];\n        });\n    },\n\n    /**\n     * Renders circular tracks, chord tracks, and label tracks.\n     */\n    render: function() {\n        var self = this,\n            width = self.$el.width(),\n            height = self.$el.height(),\n            circular_tracks = this.get_circular_tracks(),\n            chords_tracks = this.get_chord_tracks(),\n            total_gap = self.model.get(\"config\").get_value(\"total_gap\"),\n            tracks_bounds = this.get_tracks_bounds(),\n            // Set up SVG element.\n            svg = d3\n                .select(self.$el[0])\n                .append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .attr(\"pointer-events\", \"all\")\n                // Set up zooming, dragging.\n                .append(\"svg:g\")\n                .call(\n                    d3.behavior.zoom().on(\"zoom\", function() {\n                        // Do zoom, drag.\n                        var scale = d3.event.scale;\n                        svg.attr(\n                            \"transform\",\n                            \"translate(\" +\n                                d3.event.translate +\n                                \")\" +\n                                \" scale(\" +\n                                scale +\n                                \")\"\n                        );\n\n                        // Propagate scale changes to views.\n                        if (self.scale !== scale) {\n                            // Use timeout to wait for zooming/dragging to stop before rendering more detail.\n                            if (self.zoom_drag_timeout) {\n                                clearTimeout(self.zoom_drag_timeout);\n                            }\n                            self.zoom_drag_timeout = setTimeout(function() {\n                                // Render more detail in tracks' visible elements.\n                                // FIXME: do not do this right now; it is not fully implemented--e.g. data bounds\n                                // are not updated when new data is fetched--and fetching more detailed quantitative\n                                // data is not that useful.\n                                /*\n                            _.each(self.circular_views, function(view) {\n                                view.update_scale(scale);\n                            });\n                            */\n                            }, 400);\n                        }\n                    })\n                )\n                .attr(\n                    \"transform\",\n                    \"translate(\" + width / 2 + \",\" + height / 2 + \")\"\n                )\n                .append(\"svg:g\")\n                .attr(\"class\", \"tracks\");\n\n        // -- Render circular tracks. --\n\n        // Create a view for each track in the visualization and render.\n        this.circular_views = circular_tracks.map(function(track, index) {\n            var view = new CircsterBigWigTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[index],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render chords tracks. --\n\n        this.chords_views = chords_tracks.map(function(track) {\n            var view = new CircsterChromInteractionsTrackView({\n                el: svg.append(\"g\")[0],\n                track: track,\n                radius_bounds: tracks_bounds[0],\n                genome: self.genome,\n                total_gap: total_gap\n            });\n\n            view.render();\n\n            return view;\n        });\n\n        // -- Render label track. --\n\n        // Track bounds are:\n        // (a) outer radius of last circular track;\n        // (b)\n        var outermost_radius = this.circular_views[\n                this.circular_views.length - 1\n            ].radius_bounds[1],\n            track_bounds = [\n                outermost_radius,\n                outermost_radius + this.label_arc_height\n            ];\n        this.label_track_view = new CircsterChromLabelTrackView({\n            el: svg.append(\"g\")[0],\n            track: new CircsterLabelTrack(),\n            radius_bounds: track_bounds,\n            genome: self.genome,\n            total_gap: total_gap\n        });\n\n        this.label_track_view.render();\n    },\n\n    /**\n     * Render a single track on the outside of the current visualization.\n     */\n    add_track: function(new_track) {\n        var total_gap = this.model.get(\"config\").get_value(\"total_gap\");\n\n        if (new_track.get(\"track_type\") === \"DiagonalHeatmapTrack\") {\n            // Added chords track.\n            var innermost_radius_bounds = this.circular_views[0].radius_bounds,\n                new_view = new CircsterChromInteractionsTrackView({\n                    el: d3.select(\"g.tracks\").append(\"g\")[0],\n                    track: new_track,\n                    radius_bounds: innermost_radius_bounds,\n                    genome: this.genome,\n                    total_gap: total_gap\n                });\n            new_view.render();\n            this.chords_views.push(new_view);\n        } else {\n            // Added circular track.\n\n            // Recompute and update circular track bounds.\n            var new_track_bounds = this.get_tracks_bounds();\n            _.each(this.circular_views, function(track_view, i) {\n                track_view.update_radius_bounds(new_track_bounds[i]);\n            });\n\n            // Update chords tracks.\n            _.each(this.chords_views, function(track_view) {\n                track_view.update_radius_bounds(new_track_bounds[0]);\n            });\n\n            // Render new track.\n            var track_index = this.circular_views.length,\n                track_view = new CircsterBigWigTrackView({\n                    el: d3.select(\"g.tracks\").append(\"g\")[0],\n                    track: new_track,\n                    radius_bounds: new_track_bounds[track_index],\n                    genome: this.genome,\n                    total_gap: total_gap\n                });\n            track_view.render();\n            this.circular_views.push(track_view);\n\n            // Update label track.\n            /*\n            FIXME: should never have to update label track because vis always expands to fit area\n            within label track.\n            var track_bounds = new_track_bounds[ new_track_bounds.length-1 ];\n            track_bounds[1] = track_bounds[0];\n            this.label_track_view.update_radius_bounds(track_bounds);\n            */\n        }\n    },\n\n    /**\n     * Remove a track from the view.\n     */\n    remove_track: function(track, tracks, options) {\n        // -- Remove track from view. --\n        var track_view = this.circular_views[options.index];\n        this.circular_views.splice(options.index, 1);\n        track_view.$el.remove();\n\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, function(track_view, i) {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n    },\n\n    update_track_bounds: function() {\n        // Recompute and update track bounds.\n        var new_track_bounds = this.get_tracks_bounds();\n        _.each(this.circular_views, function(track_view, i) {\n            track_view.update_radius_bounds(new_track_bounds[i]);\n        });\n\n        // Update chords tracks.\n        _.each(this.chords_views, function(track_view) {\n            track_view.update_radius_bounds(new_track_bounds[0]);\n        });\n    }\n});\n\n/**\n * Renders a track in a Circster visualization.\n */\nvar CircsterTrackView = Backbone.View.extend({\n    tagName: \"g\",\n\n    /* ----------------------- Public Methods ------------------------- */\n\n    initialize: function(options) {\n        this.bg_stroke = \"#ddd\";\n        // Fill color when loading data.\n        this.loading_bg_fill = \"#ffc\";\n        // Fill color when data has been loaded.\n        this.bg_fill = \"#ddd\";\n        this.total_gap = options.total_gap;\n        this.track = options.track;\n        this.radius_bounds = options.radius_bounds;\n        this.genome = options.genome;\n        this.chroms_layout = this._chroms_layout();\n        this.data_bounds = [];\n        this.scale = 1;\n        this.parent_elt = d3.select(this.$el[0]);\n    },\n\n    /**\n     * Get fill color from config.\n     */\n    get_fill_color: function() {\n        var color = this.track.get(\"config\").get_value(\"block_color\");\n        if (!color) {\n            color = this.track.get(\"config\").get_value(\"color\");\n        }\n        return color;\n    },\n\n    /**\n     * Render track's data by adding SVG elements to parent.\n     */\n    render: function() {\n        // -- Create track group element. --\n        var track_parent_elt = this.parent_elt;\n\n        // -- Render background arcs. --\n        var genome_arcs = this.chroms_layout,\n            arc_gen = d3.svg\n                .arc()\n                .innerRadius(this.radius_bounds[0])\n                .outerRadius(this.radius_bounds[1]),\n            // Attach data to group element.\n            chroms_elts = track_parent_elt\n                .selectAll(\"g\")\n                .data(genome_arcs)\n                .enter()\n                .append(\"svg:g\"),\n            // Draw chrom arcs/paths.\n            chroms_paths = chroms_elts\n                .append(\"path\")\n                .attr(\"d\", arc_gen)\n                .attr(\"class\", \"chrom-background\")\n                .style(\"stroke\", this.bg_stroke)\n                .style(\"fill\", this.loading_bg_fill);\n\n        // Append titles to paths.\n        chroms_paths.append(\"title\").text(function(d) {\n            return d.data.chrom;\n        });\n\n        // -- Render track data and, when track data is rendered, apply preferences and update chrom_elts fill. --\n\n        var self = this,\n            data_manager = self.track.get(\"data_manager\"),\n            // If track has a data manager, get deferred that resolves when data is ready.\n            data_ready_deferred = data_manager\n                ? data_manager.data_is_ready()\n                : true;\n\n        // When data is ready, render track.\n        $.when(data_ready_deferred).then(function() {\n            $.when(self._render_data(track_parent_elt)).then(function() {\n                chroms_paths.style(\"fill\", self.bg_fill);\n\n                // Render labels after data is available so that data attributes are available.\n                self.render_labels();\n            });\n        });\n    },\n\n    /**\n     * Render track labels.\n     */\n    render_labels: function() {},\n\n    /**\n     * Update radius bounds.\n     */\n    update_radius_bounds: function(radius_bounds) {\n        // Update bounds.\n        this.radius_bounds = radius_bounds;\n\n        // -- Update background arcs. --\n        var new_d = d3.svg\n            .arc()\n            .innerRadius(this.radius_bounds[0])\n            .outerRadius(this.radius_bounds[1]);\n\n        this.parent_elt\n            .selectAll(\"g>path.chrom-background\")\n            .transition()\n            .duration(1000)\n            .attr(\"d\", new_d);\n\n        this._transition_chrom_data();\n\n        this._transition_labels();\n    },\n\n    /**\n     * Update view scale. This fetches more data if scale is increased.\n     */\n    update_scale: function(new_scale) {\n        // -- Update scale and return if new scale is less than old scale. --\n\n        var old_scale = this.scale;\n        this.scale = new_scale;\n        if (new_scale <= old_scale) {\n            return;\n        }\n\n        // -- Scale increased, so render visible data with more detail. --\n\n        var self = this,\n            utils = new SVGUtils();\n\n        // Select all chrom data and filter to operate on those that are visible.\n        this.parent_elt\n            .selectAll(\"path.chrom-data\")\n            .filter(function(d, i) {\n                return utils.is_visible(this);\n            })\n            .each(function(d, i) {\n                // -- Now operating on a single path element representing chromosome data. --\n\n                var path_elt = d3.select(this),\n                    chrom = path_elt.attr(\"chrom\"),\n                    chrom_region = self.genome.get_chrom_region(chrom),\n                    data_manager = self.track.get(\"data_manager\"),\n                    data_deferred;\n\n                // If can't get more detailed data, return.\n                if (!data_manager.can_get_more_detailed_data(chrom_region)) {\n                    return;\n                }\n\n                // -- Get more detailed data. --\n                data_deferred = self.track\n                    .get(\"data_manager\")\n                    .get_more_detailed_data(\n                        chrom_region,\n                        \"Coverage\",\n                        0,\n                        new_scale\n                    );\n\n                // When more data is available, use new data to redraw path.\n                $.when(data_deferred).then(function(data) {\n                    // Remove current data path.\n                    path_elt.remove();\n\n                    // Update data bounds with new data.\n                    self._update_data_bounds();\n\n                    // Find chromosome arc to draw data on.\n                    var chrom_arc = _.find(self.chroms_layout, function(\n                        layout\n                    ) {\n                        return layout.data.chrom === chrom;\n                    });\n\n                    // Add new data path and apply preferences.\n                    var color = self.get_fill_color();\n                    self\n                        ._render_chrom_data(self.parent_elt, chrom_arc, data)\n                        .style(\"stroke\", color)\n                        .style(\"fill\", color);\n                });\n            });\n\n        return self;\n    },\n\n    /* ----------------------- Internal Methods ------------------------- */\n\n    /**\n     * Transitions chrom data to new values (e.g new radius or data bounds).\n     */\n    _transition_chrom_data: function() {\n        var track = this.track,\n            chrom_arcs = this.chroms_layout,\n            chrom_data_paths = this.parent_elt.selectAll(\"g>path.chrom-data\"),\n            num_paths = chrom_data_paths[0].length;\n\n        if (num_paths > 0) {\n            var self = this;\n            $.when(\n                track.get(\"data_manager\").get_genome_wide_data(this.genome)\n            ).then(function(genome_wide_data) {\n                // Map chrom data to path data, filtering out null values.\n                var path_data = _.reject(\n                    _.map(genome_wide_data, function(chrom_data, i) {\n                        var rval = null,\n                            path_fn = self._get_path_function(\n                                chrom_arcs[i],\n                                chrom_data\n                            );\n                        if (path_fn) {\n                            rval = path_fn(chrom_data.data);\n                        }\n                        return rval;\n                    }),\n                    function(p_data) {\n                        return p_data === null;\n                    }\n                );\n\n                // Transition each path for data and color.\n                var color = track.get(\"config\").get_value(\"color\");\n                chrom_data_paths.each(function(path, index) {\n                    d3\n                        .select(this)\n                        .transition()\n                        .duration(1000)\n                        .style(\"stroke\", color)\n                        .style(\"fill\", color)\n                        .attr(\"d\", path_data[index]);\n                });\n            });\n        }\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {},\n\n    /**\n     * Update data bounds. If there are new_bounds, use them; otherwise use\n     * default data bounds.\n     */\n    _update_data_bounds: function(new_bounds) {\n        var old_bounds = this.data_bounds;\n        this.data_bounds =\n            new_bounds ||\n            this.get_data_bounds(\n                this.track.get(\"data_manager\").get_genome_wide_data(this.genome)\n            );\n        this._transition_chrom_data();\n    },\n\n    /**\n     * Render data as elements attached to svg.\n     */\n    _render_data: function(svg) {\n        var self = this,\n            chrom_arcs = this.chroms_layout,\n            track = this.track,\n            rendered_deferred = $.Deferred();\n\n        // When genome-wide data is available, render data.\n        $.when(\n            track.get(\"data_manager\").get_genome_wide_data(this.genome)\n        ).then(function(genome_wide_data) {\n            // Set bounds.\n            self.data_bounds = self.get_data_bounds(genome_wide_data);\n\n            // Set min, max value in config so that they can be adjusted. Make this silent\n            // because these attributes are watched for changes and the viz is updated\n            // accordingly (set up in initialize). Because we are setting up, we don't want\n            // the watch to trigger events here.\n            track.get(\"config\").set_value(\"min_value\", self.data_bounds[0], {\n                silent: true\n            });\n            track.get(\"config\").set_value(\"max_value\", self.data_bounds[1], {\n                silent: true\n            });\n\n            // Merge chroms layout with data.\n            var layout_and_data = _.zip(chrom_arcs, genome_wide_data);\n\n            // Render each chromosome's data.\n            _.each(layout_and_data, function(chrom_info) {\n                var chrom_arc = chrom_info[0],\n                    data = chrom_info[1];\n                return self._render_chrom_data(svg, chrom_arc, data);\n            });\n\n            // Apply prefs to all track data.\n            var color = self.get_fill_color();\n            self.parent_elt\n                .selectAll(\"path.chrom-data\")\n                .style(\"stroke\", color)\n                .style(\"fill\", color);\n\n            rendered_deferred.resolve(svg);\n        });\n\n        return rendered_deferred;\n    },\n\n    /**\n     * Render a chromosome data and attach elements to svg.\n     */\n    _render_chrom_data: function(svg, chrom_arc, data) {},\n\n    /**\n     * Returns data for creating a path for the given data using chrom_arc and data bounds.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {},\n\n    /**\n     * Returns arc layouts for genome's chromosomes/contigs. Arcs are arranged in a circle\n     * separated by gaps.\n     */\n    _chroms_layout: function() {\n        // Setup chroms layout using pie.\n        var chroms_info = this.genome.get_chroms_info(),\n            pie_layout = d3.layout\n                .pie()\n                .value(function(d) {\n                    return d.len;\n                })\n                .sort(null),\n            init_arcs = pie_layout(chroms_info),\n            gap_per_chrom = 2 * Math.PI * this.total_gap / chroms_info.length,\n            chrom_arcs = _.map(init_arcs, function(arc, index) {\n                // For short chroms, endAngle === startAngle.\n                var new_endAngle = arc.endAngle - gap_per_chrom;\n                arc.endAngle =\n                    new_endAngle > arc.startAngle\n                        ? new_endAngle\n                        : arc.startAngle;\n                return arc;\n            });\n        return chrom_arcs;\n    }\n});\n\n/**\n * Render chromosome labels.\n */\nvar CircsterChromLabelTrackView = CircsterTrackView.extend({\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n        // Use a single arc for rendering data.\n        this.innerRadius = this.radius_bounds[0];\n        this.radius_bounds[0] = this.radius_bounds[1];\n        this.bg_stroke = \"#fff\";\n        this.bg_fill = \"#fff\";\n\n        // Minimum arc distance for labels to be applied.\n        this.min_arc_len = 0.05;\n    },\n\n    /**\n     * Render labels.\n     */\n    _render_data: function(svg) {\n        // -- Add chromosome label where it will fit; an alternative labeling mechanism\n        // would be nice for small chromosomes. --\n        var self = this,\n            chrom_arcs = svg.selectAll(\"g\");\n\n        chrom_arcs.selectAll(\"path\").attr(\"id\", function(d) {\n            return \"label-\" + d.data.chrom;\n        });\n\n        chrom_arcs\n            .append(\"svg:text\")\n            .filter(function(d) {\n                return d.endAngle - d.startAngle > self.min_arc_len;\n            })\n            .attr(\"text-anchor\", \"middle\")\n            .append(\"svg:textPath\")\n            .attr(\"class\", \"chrom-label\")\n            .attr(\"xlink:href\", function(d) {\n                return \"#label-\" + d.data.chrom;\n            })\n            .attr(\"startOffset\", \"25%\")\n            .text(function(d) {\n                return d.data.chrom;\n            });\n\n        // -- Add ticks to denote chromosome length. --\n\n        /** Returns an array of tick angles and labels, given a chrom arc. */\n        var chromArcTicks = function(d) {\n            var k = (d.endAngle - d.startAngle) / d.value,\n                ticks = d3.range(0, d.value, 25000000).map(function(v, i) {\n                    return {\n                        radius: self.innerRadius,\n                        angle: v * k + d.startAngle,\n                        label: i === 0 ? 0 : i % 3 ? null : self.formatNum(v)\n                    };\n                });\n\n            // If there are fewer that 4 ticks, label last tick so that at least one non-zero tick is labeled.\n            if (ticks.length < 4) {\n                ticks[ticks.length - 1].label = self.formatNum(\n                    Math.round(\n                        (ticks[ticks.length - 1].angle - d.startAngle) / k\n                    )\n                );\n            }\n\n            return ticks;\n        };\n\n        /** Rotate and move text as needed. */\n        var textTransform = function(d) {\n            return d.angle > Math.PI ? \"rotate(180)translate(-16)\" : null;\n        };\n\n        // Filter chroms for only those large enough for display.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) {\n            return c.endAngle - c.startAngle > self.min_arc_len;\n        });\n\n        this.drawTicks(\n            this.parent_elt,\n            visibleChroms,\n            chromArcTicks,\n            textTransform\n        );\n    }\n});\n_.extend(CircsterChromLabelTrackView.prototype, UsesTicks);\n\n/**\n * View for quantitative track in Circster.\n */\nvar CircsterQuantitativeTrackView = CircsterTrackView.extend({\n    initialize: function(options) {\n        CircsterTrackView.prototype.initialize.call(this, options);\n\n        // When config settings change, update view.\n        var track_config = this.track.get(\"config\");\n        track_config\n            .get(\"min_value\")\n            .on(\"change:value\", this._update_min_max, this);\n        track_config\n            .get(\"max_value\")\n            .on(\"change:value\", this._update_min_max, this);\n        track_config\n            .get(\"color\")\n            .on(\"change:value\", this._transition_chrom_data, this);\n    },\n\n    /**\n     * Update track when min and/or max are changed.\n     */\n    _update_min_max: function() {\n        var track_config = this.track.get(\"config\"),\n            new_bounds = [\n                track_config.get_value(\"min_value\"),\n                track_config.get_value(\"max_value\")\n            ];\n        this._update_data_bounds(new_bounds);\n\n        // FIXME: this works to update tick/text bounds, but there's probably a better way to do this\n        // by updating the data itself.\n        this.parent_elt.selectAll(\".min_max\").text(function(d, i) {\n            return new_bounds[i];\n        });\n    },\n\n    /**\n     * Returns quantile for an array of numbers.\n     */\n    _quantile: function(numbers, quantile) {\n        numbers.sort(d3.ascending);\n        return d3.quantile(numbers, quantile);\n    },\n\n    /**\n     * Renders quantitative data with the form [x, value] and assumes data is equally spaced across\n     * chromosome. Attachs a dict with track and chrom name information to DOM element.\n     */\n    _render_chrom_data: function(svg, chrom_arc, chrom_data) {\n        var path_data = this._get_path_function(chrom_arc, chrom_data);\n\n        if (!path_data) {\n            return null;\n        }\n\n        // There is path data, so render as path.\n        var parent = svg.datum(chrom_data.data),\n            path = parent\n                .append(\"path\")\n                .attr(\"class\", \"chrom-data\")\n                .attr(\"chrom\", chrom_arc.data.chrom)\n                .attr(\"d\", path_data);\n\n        return path;\n    },\n\n    /**\n     * Returns function for creating a path across the chrom arc.\n     */\n    _get_path_function: function(chrom_arc, chrom_data) {\n        // If no chrom data, return null.\n        if (\n            typeof chrom_data === \"string\" ||\n            !chrom_data.data ||\n            chrom_data.data.length === 0\n        ) {\n            return null;\n        }\n\n        // Radius scaler.\n        var radius = d3.scale\n            .linear()\n            .domain(this.data_bounds)\n            .range(this.radius_bounds)\n            .clamp(true);\n\n        // Scaler for placing data points across arc.\n        var angle = d3.scale\n            .linear()\n            .domain([0, chrom_data.data.length])\n            .range([chrom_arc.startAngle, chrom_arc.endAngle]);\n\n        // Use line generator to create area.\n        var line = d3.svg.line\n            .radial()\n            .interpolate(\"linear\")\n            .radius(function(d) {\n                return radius(d[1]);\n            })\n            .angle(function(d, i) {\n                return angle(i);\n            });\n\n        return d3.svg.area\n            .radial()\n            .interpolate(line.interpolate())\n            .innerRadius(radius(0))\n            .outerRadius(line.radius())\n            .angle(line.angle());\n    },\n\n    /**\n     * Render track min, max using ticks.\n     */\n    render_labels: function() {\n        var self = this,\n            // Keep counter of visible chroms.\n            textTransform = function() {\n                return \"rotate(90)\";\n            };\n\n        // FIXME:\n        // (1) using min_max class below is needed for _update_min_max, which could be improved.\n        // (2) showing config on tick click should be replaced by proper track config icon.\n\n        // Draw min, max on first chrom only.\n        var ticks = this.drawTicks(\n            this.parent_elt,\n            [this.chroms_layout[0]],\n            this._data_bounds_ticks_fn(),\n            textTransform,\n            true\n        ).classed(\"min_max\", true);\n\n        // Show config when ticks are clicked on.\n        _.each(ticks, function(tick) {\n            $(tick).click(function() {\n                var view = new config.ConfigSettingCollectionView({\n                    collection: self.track.get(\"config\")\n                });\n                view.render_in_modal(\"Configure Track\");\n            });\n        });\n\n        /*\n        // Filter for visible chroms, then for every third chrom so that labels attached to only every\n        // third chrom.\n        var visibleChroms = _.filter(this.chroms_layout, function(c) { return c.endAngle - c.startAngle > 0.08; }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) { return i % 3 === 0; });\n        this.drawTicks(this.parent_elt, labeledChroms, this._data_bounds_ticks_fn(), textTransform, true);\n        */\n    },\n\n    /**\n     * Transition labels to new values (e.g new radius or data bounds).\n     */\n    _transition_labels: function() {\n        // FIXME: (a) pull out function for getting labeled chroms? and (b) function used in transition below\n        // is copied from UseTicks mixin, so pull out and make generally available.\n\n        // If there are no data bounds, nothing to transition.\n        if (this.data_bounds.length === 0) {\n            return;\n        }\n\n        // Transition labels to new radius bounds.\n        var self = this,\n            visibleChroms = _.filter(this.chroms_layout, function(c) {\n                return c.endAngle - c.startAngle > 0.08;\n            }),\n            labeledChroms = _.filter(visibleChroms, function(c, i) {\n                return i % 3 === 0;\n            }),\n            new_data = _.flatten(\n                _.map(labeledChroms, function(c) {\n                    return self._data_bounds_ticks_fn()(c);\n                })\n            );\n        this.parent_elt\n            .selectAll(\"g.tick\")\n            .data(new_data)\n            .transition()\n            .attr(\"transform\", function(d) {\n                return (\n                    \"rotate(\" +\n                    (d.angle * 180 / Math.PI - 90) +\n                    \")\" +\n                    \"translate(\" +\n                    d.radius +\n                    \",0)\"\n                );\n            });\n    },\n\n    /**\n     * Get function for locating data bounds ticks.\n     */\n    _data_bounds_ticks_fn: function() {\n        // Closure vars.\n        var self = this;\n        visibleChroms = 0;\n\n        // Return function for locating ticks based on chrom arc data.\n        return function(d) {\n            // Set up data to display min, max ticks.\n            return [\n                {\n                    radius: self.radius_bounds[0],\n                    angle: d.startAngle,\n                    label: self.formatNum(self.data_bounds[0])\n                },\n                {\n                    radius: self.radius_bounds[1],\n                    angle: d.startAngle,\n                    label: self.formatNum(self.data_bounds[1])\n                }\n            ];\n        };\n    },\n\n    /**\n     * Returns an array with two values denoting the minimum and maximum\n     * values for the track.\n     */\n    get_data_bounds: function(data) {}\n});\n_.extend(CircsterQuantitativeTrackView.prototype, UsesTicks);\n\n/**\n * Bigwig track view in Circster.\n */\nvar CircsterBigWigTrackView = CircsterQuantitativeTrackView.extend({\n    get_data_bounds: function(data) {\n        // Set max across dataset by extracting all values, flattening them into a\n        // single array, and getting third quartile.\n        var values = _.flatten(\n            _.map(data, function(d) {\n                if (d) {\n                    // Each data point has the form [position, value], so return all values.\n                    return _.map(d.data, function(p) {\n                        // Null is used for a lack of data; resolve null to 0 for comparison.\n                        return parseInt(p[1], 10) || 0;\n                    });\n                } else {\n                    return 0;\n                }\n            })\n        );\n\n        // For max, use 98% quantile in attempt to avoid very large values. However, this max may be 0\n        // for sparsely populated data, so use max in that case.\n        return [_.min(values), this._quantile(values, 0.98) || _.max(values)];\n    }\n});\n\n/**\n * Chromosome interactions track view in Circster.\n */\nvar CircsterChromInteractionsTrackView = CircsterTrackView.extend({\n    render: function() {\n        var self = this;\n\n        // When data is ready, render track.\n        $.when(self.track.get(\"data_manager\").data_is_ready()).then(function() {\n            // When data has been fetched, render track.\n            $.when(\n                self.track.get(\"data_manager\").get_genome_wide_data(self.genome)\n            ).then(function(genome_wide_data) {\n                var chord_data = [],\n                    chroms_info = self.genome.get_chroms_info();\n                // Convert chromosome data into chord data.\n                _.each(genome_wide_data, function(chrom_data, index) {\n                    // Map each interaction into chord data.\n                    var cur_chrom = chroms_info[index].chrom;\n                    var chrom_chord_data = _.map(chrom_data.data, function(\n                        datum\n                    ) {\n                        // Each datum is an interaction/chord.\n                        var source_angle = self._get_region_angle(\n                                cur_chrom,\n                                datum[1]\n                            ),\n                            target_angle = self._get_region_angle(\n                                datum[3],\n                                datum[4]\n                            );\n                        return {\n                            source: {\n                                startAngle: source_angle,\n                                endAngle: source_angle + 0.01\n                            },\n                            target: {\n                                startAngle: target_angle,\n                                endAngle: target_angle + 0.01\n                            }\n                        };\n                    });\n\n                    chord_data = chord_data.concat(chrom_chord_data);\n                });\n\n                self.parent_elt\n                    .append(\"g\")\n                    .attr(\"class\", \"chord\")\n                    .selectAll(\"path\")\n                    .data(chord_data)\n                    .enter()\n                    .append(\"path\")\n                    .style(\"fill\", self.get_fill_color())\n                    .attr(\"d\", d3.svg.chord().radius(self.radius_bounds[0]))\n                    .style(\"opacity\", 1);\n            });\n        });\n    },\n\n    update_radius_bounds: function(radius_bounds) {\n        this.radius_bounds = radius_bounds;\n        this.parent_elt\n            .selectAll(\"path\")\n            .transition()\n            .attr(\"d\", d3.svg.chord().radius(this.radius_bounds[0]));\n    },\n\n    /**\n     * Returns radians for a genomic position.\n     */\n    _get_region_angle: function(chrom, position) {\n        // Find chrom angle data\n        var chrom_angle_data = _.find(this.chroms_layout, function(\n            chrom_layout\n        ) {\n            return chrom_layout.data.chrom === chrom;\n        });\n\n        // Return angle at position.\n        return (\n            chrom_angle_data.endAngle -\n            (chrom_angle_data.endAngle - chrom_angle_data.startAngle) *\n                (chrom_angle_data.data.len - position) /\n                chrom_angle_data.data.len\n        );\n    }\n});\n\n// circster app loader\nvar Circster = Backbone.View.extend({\n    initialize: function() {\n        // -- Configure visualization --\n        var genome = new visualization.Genome(galaxy_config.app.genome),\n            vis = new visualization.GenomeVisualization(\n                galaxy_config.app.viz_config\n            );\n\n        // Add Circster-specific config options.\n        vis.get(\"config\").add([\n            {\n                key: \"arc_dataset_height\",\n                label: \"Arc Dataset Height\",\n                type: \"int\",\n                value: 25,\n                view: \"circster\"\n            },\n            {\n                key: \"track_gap\",\n                label: \"Gap Between Tracks\",\n                type: \"int\",\n                value: 5,\n                view: \"circster\"\n            },\n            {\n                key: \"total_gap\",\n                label: \"Gap [0-1]\",\n                type: \"float\",\n                value: 0.4,\n                view: \"circster\",\n                hidden: true\n            }\n        ]);\n\n        var viz_view = new CircsterView({\n            // view pane\n            el: $(\"#center .unified-panel-body\"),\n            genome: genome,\n            model: vis\n        });\n\n        // Render vizualization\n        viz_view.render();\n\n        // setup title\n        $(\"#center .unified-panel-header-inner\").append(\n            galaxy_config.app.viz_config.title +\n                \" \" +\n                galaxy_config.app.viz_config.dbkey\n        );\n\n        // setup menu\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"plus-button\",\n                    title: \"Add tracks\",\n                    on_click: function() {\n                        visualization.select_datasets(\n                            { dbkey: vis.get(\"dbkey\") },\n                            function(tracks) {\n                                vis.add_tracks(tracks);\n                            }\n                        );\n                    }\n                },\n                {\n                    icon_class: \"gear\",\n                    title: \"Settings\",\n                    on_click: function() {\n                        var view = new config.ConfigSettingCollectionView({\n                            collection: vis.get(\"config\")\n                        });\n                        view.render_in_modal(\"Configure Visualization\");\n                    }\n                },\n                {\n                    icon_class: \"disk--arrow\",\n                    title: \"Save\",\n                    on_click: function() {\n                        // show saving dialog box\n                        Galaxy.modal.show({\n                            title: \"Saving...\",\n                            body: \"progress\"\n                        });\n\n                        // send to server\n                        $.ajax({\n                            url: Galaxy.root + \"visualization/save\",\n                            type: \"POST\",\n                            dataType: \"json\",\n                            data: {\n                                id: vis.get(\"vis_id\"),\n                                title: vis.get(\"title\"),\n                                dbkey: vis.get(\"dbkey\"),\n                                type: \"trackster\",\n                                vis_json: JSON.stringify(vis)\n                            }\n                        })\n                            .success(function(vis_info) {\n                                Galaxy.modal.hide();\n                                vis.set(\"vis_id\", vis_info.vis_id);\n                            })\n                            .error(function() {\n                                // show dialog\n                                Galaxy.modal.show({\n                                    title: \"Could Not Save\",\n                                    body:\n                                        \"Could not save visualization. Please try again later.\",\n                                    buttons: {\n                                        Cancel: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            });\n                    }\n                },\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        window.location = Galaxy.root + \"visualizations/list\";\n                    }\n                }\n            ],\n            { tooltip_config: { placement: \"bottom\" } }\n        );\n\n        // add menu\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#center .unified-panel-header-inner\").append(menu.$el);\n\n        // manual tooltip config because default gravity is S and cannot be changed\n        $(\".menu-button\").tooltip({ placement: \"bottom\" });\n    }\n});\n\n// Module exports.\nexport default {\n    GalaxyApp: Circster\n};\n"]}