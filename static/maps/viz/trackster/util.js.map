{"version":3,"sources":["viz/trackster/util.js"],"names":["define","commatize","number","rgx","replace","is_deferred","d","num_tries","Backbone","Model","extend","defaults","ServerStateDeferred","ajax_settings","result","go","deferred","$","Deferred","self","this","get","success_fn","interval","_go","resolve","get_random_color","colors","i","length","slice","new_color","nr","ng","nb","other_color","or","og","ob","n_brightness","o_brightness","diff","brightness","r","g","b","round","Math","random","ok","r1","g2","b2","r2","max","g1","min","b1","substr"],"mappings":"aAAAA,OAAO,WAuHM,OACJC,UAnHT,SAAoBC,GAChBA,GAAU,GAAVA,IADJ,IAAAC,EAASF,eACLC,EAAAA,KAAAA,IACAA,EAAIC,EAAMC,QAAVD,EAAA,SAEID,OAAAA,GA0HJG,YAlHc,SAAWC,GACzB,MAAQ,YAAaA,GAwGjBC,oBAjGkBC,SAASC,MAAMC,QACrCC,UADAC,iBACAD,SAAU,IACNE,WAAAA,SADMC,GAAA,OAAA,IASVC,GAAI,WAHJ,IAAAC,EAAAC,EAAAC,WAKQC,EAAOC,KACPP,EAAgBM,EAAKE,IAAI,iBAH7BC,EAAAH,EAAWE,IAAA,cACXE,EAAIP,EAAWC,IAAEC,YAeP,OAdNC,SADJK,IAEIX,EAAAA,KAAAA,GAAqBQ,QAAI,SAATP,GAChBQ,EAAkBD,GAEXL,EAAAS,QAAWX,GAILE,WAASS,EAAQX,KAKpBU,GACJR,KAwEZU,iBA5DiB,SAASC,GAEvBA,IAAUA,EAAS,WAAX,iBAARA,IAAUA,GAAAA,IAGf,IAAA,IAAKC,EAAA,EAAOD,EAAAA,EAAYE,OAAxBD,IACID,EAAAA,GAAAA,SAAAA,EAAAC,GAAAE,MAAA,GAAA,IAYJ,IASCC,EAJDC,EAAAC,EAAAC,EAQIC,EAAaC,EAAIC,EAAIC,EAFzBC,EAAAC,EACAC,EAZIC,EAAa,SAASC,EAAGC,EAAGC,GAJhC,OAAA,IAAAF,EAAA,IAAAC,EAAA,IAAAC,GAAA,KAgBId,GAAAA,EAAJxB,EAAA,EAAA,EAAA,CAAA,IAAAgC,EAEIA,EAFJP,GAAA,UAAAD,EACII,KADJW,MAAA,SAAAC,KAAAC,aAAA,GAAAf,GAAA,MAAAF,IAAA,EAAAG,EAAA,IACyBI,GADzBW,GAEkBT,EACdC,EAHJ,EAAAb,EAAAD,EAAAE,OAAAD,IAWIW,GARMU,EAHVtB,EAAAC,GAIIrB,GAJJ,SAIIA,IAJJ,GAKG8B,GAAA,MAAAF,IAAA,EACCG,EAAA,IAAAH,EACAJ,EAAYgB,EAAYA,EAAKC,EAALV,GACxBN,EApBAU,SAAaQ,EAAbR,EAAAA,EAAAA,EAAaS,EAAAC,GACb,OAAAL,KAAUJ,IAAIO,EAAQN,GAAIG,KAAQF,IAAIK,EAA/BG,IADXN,KAAAO,IAAAC,EAAAJ,GAAAJ,KAAAS,IAAAD,EAAAJ,KAQaJ,KAAKO,IAAIG,EAAIL,GAAML,KAAKS,IAAIC,EAAIL,IAYlCrB,CAAYC,EAAAC,EAAdC,EAAAE,EAALC,EAAAC,GAGAC,KAAAA,IAAeG,EAAeT,GAA9B,IACKQ,EAAL,IAAA,CACAQ,GAAS,EACLd,MAIAK,WACAC,GAAAA,GAAkBT,IAGlB,MAAA,KAAA,SAAgBO,GAAAA,SAAeC,IAAxBkB,OAAF,EAAA","file":"../../../scripts/viz/trackster/util.js","sourcesContent":["define(function(){\n\n/**\n * Stringifies a number adding commas for digit grouping as per North America.\n */\nfunction commatize( number ) {\n    number += ''; // Convert to string\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(number)) {\n        number = number.replace(rgx, '$1' + ',' + '$2');\n    }\n    return number;\n}\n\n/**\n * Helper to determine if object is jQuery deferred.\n */\nvar is_deferred = function ( d ) {\n    return ('promise' in d);\n};\n\n/**\n * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n * condition is met, deferred is resolved.\n */\nvar ServerStateDeferred = Backbone.Model.extend({\n    defaults: {\n        ajax_settings: {},\n        interval: 1000,\n        success_fn: function(result) { return true; }\n    },\n\n    /**\n     * Returns a deferred that resolves when success function returns true.\n     */\n    go: function() {\n        var deferred = $.Deferred(),\n            self = this,\n            ajax_settings = self.get('ajax_settings'),\n            success_fn = self.get('success_fn'),\n            interval = self.get('interval'),\n             _go = function() {\n                 $.ajax(ajax_settings).success(function(result) {\n                     if (success_fn(result)) {\n                         // Result is good, so resolve.\n                         deferred.resolve(result);\n                     }\n                     else {\n                         // Result not good, try again.\n                         setTimeout(_go, interval);\n                     }\n                 });\n             };\n         _go();\n         return deferred;\n    }\n});\n\n/**\n * Returns a random color in hexadecimal format that is sufficiently different from a single color\n * or set of colors.\n * @param colors a color or list of colors in the format '#RRGGBB'\n */\nvar get_random_color = function(colors) {\n    // Default for colors is white.\n    if (!colors) { colors = \"#ffffff\"; }\n\n    // If needed, create list of colors.\n    if ( typeof(colors) === \"string\" ) {\n        colors = [ colors ];\n    }\n\n    // Convert colors to numbers.\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = parseInt( colors[i].slice(1), 16 );\n    }\n\n    // -- Perceived brightness and difference formulas are from\n    // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\n    // Compute perceived color brightness (based on RGB-YIQ transformation):\n    var brightness = function(r, g, b) {\n        return ( (r * 299) + (g * 587) + (b * 114) ) / 1000;\n    };\n\n    // Compute color difference:\n    var difference = function(r1, g1, b1, r2, g2, b2) {\n        return ( Math.max(r1, r2) - Math.min(r1, r2) ) +\n               ( Math.max(g1, g2) - Math.min(g1, g2) ) +\n               ( Math.max(b1, b2) - Math.min(b1, b2) );\n    };\n\n    // Create new random color.\n    var new_color, nr, ng, nb,\n        other_color, or, og, ob,\n        n_brightness, o_brightness,\n        diff, ok = false,\n        num_tries = 0;\n    do {\n        // New color is never white b/c random in [0,1)\n        new_color = Math.round( Math.random() * 0xffffff );\n        nr = ( new_color & 0xff0000 ) >> 16;\n        ng = ( new_color & 0x00ff00 ) >> 8;\n        nb = new_color & 0x0000ff;\n        n_brightness = brightness(nr, ng, nb);\n        ok = true;\n        for (i = 0; i < colors.length; i++) {\n            other_color = colors[i];\n            or = ( other_color & 0xff0000 ) >> 16;\n            og = ( other_color & 0x00ff00 ) >> 8;\n            ob = other_color & 0x0000ff;\n            o_brightness = brightness(or, og, ob);\n            diff = difference(nr, ng, nb, or, og, ob);\n            // These thresholds may need to be adjusted. Brightness difference range is 125;\n            // color difference range is 500.\n            if ( ( Math.abs(n_brightness - o_brightness) < 40 ) ||\n                 ( diff < 200 ) ) {\n                ok = false;\n                break;\n            }\n        }\n\n        num_tries++\n;    } while (!ok && num_tries <= 10 );\n\n    // Add 0x1000000 to left pad number with 0s.\n    return '#' + ( 0x1000000 + new_color ).toString(16).substr(1,6);\n};\n\nreturn {\n    commatize: commatize,\n    is_deferred: is_deferred,\n    ServerStateDeferred : ServerStateDeferred,\n    get_random_color    : get_random_color\n};\n\n});\n"]}