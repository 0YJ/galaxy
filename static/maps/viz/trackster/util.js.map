{"version":3,"sources":["viz/trackster/util.js"],"names":["define","commatize","number","rgx","test","replace","is_deferred","d","ServerStateDeferred","Backbone","Model","extend","defaults","ajax_settings","interval","success_fn","result","go","deferred","$","Deferred","self","this","get","_go","ajax","success","resolve","setTimeout","get_random_color","colors","i","length","parseInt","slice","new_color","nr","ng","nb","other_color","or","og","ob","n_brightness","o_brightness","diff","brightness","r","g","b","ok","num_tries","Math","round","random","r1","g1","b1","r2","g2","b2","max","min","abs","toString","substr"],"mappings":"AAAAA,OAAO,WAKP,QAASC,GAAWC,GAChBA,GAAU,EAEV,KADA,GAAIC,GAAM,eACHA,EAAIC,KAAKF,IACZA,EAASA,EAAOG,QAAQF,EAAK,QAEjC,OAAOD,GAsHX,OACID,UAAWA,EACXK,YAlHc,SAAWC,GACzB,MAAQ,WAAaA,IAkHrBC,oBA3GsBC,SAASC,MAAMC,QACrCC,UACIC,iBACAC,SAAU,IACVC,WAAY,SAASC,GAAU,OAAO,IAM1CC,GAAI,WACA,GAAIC,GAAWC,EAAEC,WACbC,EAAOC,KACPT,EAAgBQ,EAAKE,IAAI,iBACzBR,EAAaM,EAAKE,IAAI,cACtBT,EAAWO,EAAKE,IAAI,YACnBC,EAAM,WACFL,EAAEM,KAAKZ,GAAea,QAAQ,SAASV,GAC/BD,EAAWC,GAEXE,EAASS,QAAQX,GAIjBY,WAAWJ,EAAKV,KAKhC,OADAU,KACON,KA+EZW,iBAtEmB,SAASC,GAEvBA,IAAUA,EAAS,WAGA,gBAAb,KACPA,GAAWA,GAIf,KAAK,GAAIC,GAAI,EAAGA,EAAID,EAAOE,OAAQD,IAC/BD,EAAOC,GAAKE,SAAUH,EAAOC,GAAGG,MAAM,GAAI,GAO9C,IAYIC,GAAWC,EAAIC,EAAIC,EACnBC,EAAaC,EAAIC,EAAIC,EACrBC,EAAcC,EACdC,EAfAC,EAAa,SAASC,EAAGC,EAAGC,GAC5B,OAAc,IAAJF,EAAgB,IAAJC,EAAgB,IAAJC,GAAa,KAczCC,GAAK,EACXC,EAAY,CAChB,GAAG,CAQC,IANAhB,EAAYiB,KAAKC,MAAuB,SAAhBD,KAAKE,UAC7BlB,GAAmB,SAAZD,IAA0B,GACjCE,GAAmB,MAAZF,IAA0B,EACjCG,EAAiB,IAAZH,EACLQ,EAAeG,EAAWV,EAAIC,EAAIC,GAClCY,GAAK,EACAnB,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IAS3B,GARAQ,EAAcT,EAAOC,GACrBS,GAAqB,SAAdD,IAA4B,GACnCE,GAAqB,MAAdF,IAA4B,EACnCG,EAAmB,IAAdH,EACLK,EAAeE,EAAWN,EAAIC,EAAIC,GAClCG,EA1BS,SAASU,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC1C,MAASR,MAAKS,IAAIN,EAAIG,GAAMN,KAAKU,IAAIP,EAAIG,IAChCN,KAAKS,IAAIL,EAAIG,GAAMP,KAAKU,IAAIN,EAAIG,KAChCP,KAAKS,IAAIJ,EAAIG,GAAMR,KAAKU,IAAIL,EAAIG,KAuBnBxB,EAAIC,EAAIC,EAAIE,EAAIC,EAAIC,GAG/BU,KAAKW,IAAIpB,EAAeC,GAAgB,IACxCC,EAAO,IAAQ,CAClBK,GAAK,CACL,OAIRC,WACOD,GAAMC,GAAa,GAG9B,OAAO,KAAQ,SAAYhB,GAAY6B,SAAS,IAAIC,OAAO,EAAE","file":"../../../scripts/viz/trackster/util.js","sourcesContent":["define(function(){\n\n/**\n * Stringifies a number adding commas for digit grouping as per North America.\n */\nfunction commatize( number ) {\n    number += ''; // Convert to string\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(number)) {\n        number = number.replace(rgx, '$1' + ',' + '$2');\n    }\n    return number;\n}\n\n/**\n * Helper to determine if object is jQuery deferred.\n */\nvar is_deferred = function ( d ) {\n    return ('promise' in d);\n};\n\n/**\n * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n * condition is met, deferred is resolved.\n */\nvar ServerStateDeferred = Backbone.Model.extend({\n    defaults: {\n        ajax_settings: {},\n        interval: 1000,\n        success_fn: function(result) { return true; }\n    },\n\n    /**\n     * Returns a deferred that resolves when success function returns true.\n     */\n    go: function() {\n        var deferred = $.Deferred(),\n            self = this,\n            ajax_settings = self.get('ajax_settings'),\n            success_fn = self.get('success_fn'),\n            interval = self.get('interval'),\n             _go = function() {\n                 $.ajax(ajax_settings).success(function(result) {\n                     if (success_fn(result)) {\n                         // Result is good, so resolve.\n                         deferred.resolve(result);\n                     }\n                     else {\n                         // Result not good, try again.\n                         setTimeout(_go, interval);\n                     }\n                 });\n             };\n         _go();\n         return deferred;\n    }\n});\n\n/**\n * Returns a random color in hexadecimal format that is sufficiently different from a single color\n * or set of colors.\n * @param colors a color or list of colors in the format '#RRGGBB'\n */\nvar get_random_color = function(colors) {\n    // Default for colors is white.\n    if (!colors) { colors = \"#ffffff\"; }\n\n    // If needed, create list of colors.\n    if ( typeof(colors) === \"string\" ) {\n        colors = [ colors ];\n    }\n\n    // Convert colors to numbers.\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = parseInt( colors[i].slice(1), 16 );\n    }\n\n    // -- Perceived brightness and difference formulas are from\n    // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\n    // Compute perceived color brightness (based on RGB-YIQ transformation):\n    var brightness = function(r, g, b) {\n        return ( (r * 299) + (g * 587) + (b * 114) ) / 1000;\n    };\n\n    // Compute color difference:\n    var difference = function(r1, g1, b1, r2, g2, b2) {\n        return ( Math.max(r1, r2) - Math.min(r1, r2) ) +\n               ( Math.max(g1, g2) - Math.min(g1, g2) ) +\n               ( Math.max(b1, b2) - Math.min(b1, b2) );\n    };\n\n    // Create new random color.\n    var new_color, nr, ng, nb,\n        other_color, or, og, ob,\n        n_brightness, o_brightness,\n        diff, ok = false,\n        num_tries = 0;\n    do {\n        // New color is never white b/c random in [0,1)\n        new_color = Math.round( Math.random() * 0xffffff );\n        nr = ( new_color & 0xff0000 ) >> 16;\n        ng = ( new_color & 0x00ff00 ) >> 8;\n        nb = new_color & 0x0000ff;\n        n_brightness = brightness(nr, ng, nb);\n        ok = true;\n        for (i = 0; i < colors.length; i++) {\n            other_color = colors[i];\n            or = ( other_color & 0xff0000 ) >> 16;\n            og = ( other_color & 0x00ff00 ) >> 8;\n            ob = other_color & 0x0000ff;\n            o_brightness = brightness(or, og, ob);\n            diff = difference(nr, ng, nb, or, og, ob);\n            // These thresholds may need to be adjusted. Brightness difference range is 125;\n            // color difference range is 500.\n            if ( ( Math.abs(n_brightness - o_brightness) < 40 ) ||\n                 ( diff < 200 ) ) {\n                ok = false;\n                break;\n            }\n        }\n\n        num_tries++\n;    } while (!ok && num_tries <= 10 );\n\n    // Add 0x1000000 to left pad number with 0s.\n    return '#' + ( 0x1000000 + new_color ).toString(16).substr(1,6);\n};\n\nreturn {\n    commatize: commatize,\n    is_deferred: is_deferred,\n    ServerStateDeferred : ServerStateDeferred,\n    get_random_color    : get_random_color\n};\n\n});\n"]}