{"version":3,"sources":["viz/trackster/util.js"],"names":["ServerStateDeferred","Backbone","Model","extend","defaults","ajax_settings","interval","success_fn","result","go","deferred","$","Deferred","self","this","get","setTimeout","_go","ajax","success","commatize","number","rgx","test","replace","d","is_deferred","colors","i","length","slice","new_color","nr","ng","nb","other_color","or","og","ob","n_brightness","o_brightness","diff","brightness","r","g","b","ok","num_tries","Math","round","random","r1","g1","b1","r2","g2","b2","max","min","abs","toString","substr"],"mappings":"kHASI,IAQHA,EAFDC,SAAAC,MAAAC,QASIC,UALJC,iBAOQC,SAAU,IACVC,WAAY,SAASC,GACjB,OAAO,IACVC,GAAA,WALK,IADkCC,EAAAC,EAAAC,WAcpCC,EAAOC,KALfT,EAAAQ,EAAAE,IAAA,iBAOQR,EAAaM,EAAKE,IAAI,cACtBT,EAAWO,EAAKE,IAAI,YASZC,OAbRN,SAAJO,IACAN,EAAAO,KAAIL,GAAJM,QAAA,SAAAX,GACIH,EAAAA,GAEAC,EAAWO,QAASL,GAGlBU,WAAKb,EAAPC,KAKQW,GACAD,gBA+FhBI,UA7IJ,SAAmBC,GACfA,GAAU,GAJd,IAKI,IAAIC,EAAM,eALdA,EAAAC,KAAAF,IAOQA,EAASA,EAAOG,QAAQF,EAAK,SAJrC,OAAAD,GA6IID,YAvIOC,SAAPI,GACH,MAAA,YAAAA,GAuIGC,oBAAaA,EACb1B,iBAlFmB,SAAS2B,GAEvBA,IACDA,EAAS,WAFb,iBAAAA,IACAA,GAAKA,IAIL,IAAA,IAAAC,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,IACAD,EAAIC,GAAOD,SAAPA,EAAkBC,GAAtBE,MAAgC,GAAA,IAO/B,IAoBDC,EAGIC,EAAJC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EA/BCC,EAAA,SAAAC,EAAAC,EAAAC,GAOG,OAAY,IAAJF,EAAc,IAAJC,EAAc,IAAJC,GAAW,KAyB3CC,GAAIL,EACJM,EAAS,EACT,EAAA,CAQID,IAFAZ,EAAKH,EAHLA,GAAYiB,UADZjB,EAAAiB,KAAAC,MAAA,SAAAD,KAAAE,aACuBF,GACvBhB,GAAMD,MAANC,IAAK,EACLC,EAAMF,IAANE,GAEAM,GAAAA,EACAO,EAAK,EAAAlB,EAALD,EAAAE,OAAAD,IASI,GARJO,EAAYP,EAAID,GACZQ,GAAcR,SAAdQ,IAAA,GACAC,GAAMD,MAANC,IAAK,EACLC,EAAMF,IAANE,EACAC,EAAKH,EAAcC,EAAAC,EAAnBC,GACAE,EA3CR,SAAAW,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OACIR,KAAAS,IAAQd,EAAIW,GADhBN,KAAAU,IAAAP,EAAAG,IASSN,KAAKS,IAAIL,EAAIG,GAAMP,KAAKU,IAAIN,EAAIG,KALzCP,KAAAS,IAAAJ,EAAAG,GAAAR,KAAAU,IAAAL,EAAAG,IAsCQhB,CAAAA,EAAeE,EAAAA,EAAWN,EAAIC,EAAIC,GAGlCU,KAAAW,IAAApB,EAAAC,GAAA,IAAAC,EAAA,IAAA,CACAK,GAAIE,EACAF,MAKRC,WAAAA,GAAAA,GAAAA,IAGJ,MAAA,KAAA,SAAAhB,GAAA6B,SAAA,IAAAC,OAAA,EAAA","file":"../../../scripts/viz/trackster/util.js","sourcesContent":["/**\n * Stringifies a number adding commas for digit grouping as per North America.\n */\nfunction commatize(number) {\n    number += \"\"; // Convert to string\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(number)) {\n        number = number.replace(rgx, \"$1\" + \",\" + \"$2\");\n    }\n    return number;\n}\n\n/**\n * Helper to determine if object is jQuery deferred.\n */\nvar is_deferred = function(d) {\n    return \"promise\" in d;\n};\n\n/**\n * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n * condition is met, deferred is resolved.\n */\nvar ServerStateDeferred = Backbone.Model.extend({\n    defaults: {\n        ajax_settings: {},\n        interval: 1000,\n        success_fn: function(result) {\n            return true;\n        }\n    },\n\n    /**\n     * Returns a deferred that resolves when success function returns true.\n     */\n    go: function() {\n        var deferred = $.Deferred();\n        var self = this;\n        var ajax_settings = self.get(\"ajax_settings\");\n        var success_fn = self.get(\"success_fn\");\n        var interval = self.get(\"interval\");\n\n        var _go = function() {\n            $.ajax(ajax_settings).success(function(result) {\n                if (success_fn(result)) {\n                    // Result is good, so resolve.\n                    deferred.resolve(result);\n                } else {\n                    // Result not good, try again.\n                    setTimeout(_go, interval);\n                }\n            });\n        };\n\n        _go();\n        return deferred;\n    }\n});\n\n/**\n * Returns a random color in hexadecimal format that is sufficiently different from a single color\n * or set of colors.\n * @param colors a color or list of colors in the format '#RRGGBB'\n */\nvar get_random_color = function(colors) {\n    // Default for colors is white.\n    if (!colors) {\n        colors = \"#ffffff\";\n    }\n\n    // If needed, create list of colors.\n    if (typeof colors === \"string\") {\n        colors = [colors];\n    }\n\n    // Convert colors to numbers.\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = parseInt(colors[i].slice(1), 16);\n    }\n\n    // -- Perceived brightness and difference formulas are from\n    // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\n    // Compute perceived color brightness (based on RGB-YIQ transformation):\n    var brightness = function(r, g, b) {\n        return (r * 299 + g * 587 + b * 114) / 1000;\n    };\n\n    // Compute color difference:\n    var difference = function(r1, g1, b1, r2, g2, b2) {\n        return (\n            Math.max(r1, r2) -\n            Math.min(r1, r2) +\n            (Math.max(g1, g2) - Math.min(g1, g2)) +\n            (Math.max(b1, b2) - Math.min(b1, b2))\n        );\n    };\n\n    // Create new random color.\n    var new_color;\n\n    var nr;\n    var ng;\n    var nb;\n    var other_color;\n    var or;\n    var og;\n    var ob;\n    var n_brightness;\n    var o_brightness;\n    var diff;\n    var ok = false;\n    var num_tries = 0;\n    do {\n        // New color is never white b/c random in [0,1)\n        new_color = Math.round(Math.random() * 0xffffff);\n        nr = (new_color & 0xff0000) >> 16;\n        ng = (new_color & 0x00ff00) >> 8;\n        nb = new_color & 0x0000ff;\n        n_brightness = brightness(nr, ng, nb);\n        ok = true;\n        for (i = 0; i < colors.length; i++) {\n            other_color = colors[i];\n            or = (other_color & 0xff0000) >> 16;\n            og = (other_color & 0x00ff00) >> 8;\n            ob = other_color & 0x0000ff;\n            o_brightness = brightness(or, og, ob);\n            diff = difference(nr, ng, nb, or, og, ob);\n            // These thresholds may need to be adjusted. Brightness difference range is 125;\n            // color difference range is 500.\n            if (Math.abs(n_brightness - o_brightness) < 40 || diff < 200) {\n                ok = false;\n                break;\n            }\n        }\n\n        num_tries++;\n    } while (!ok && num_tries <= 10);\n\n    // Add 0x1000000 to left pad number with 0s.\n    return \"#\" + (0x1000000 + new_color).toString(16).substr(1, 6);\n};\n\nexport default {\n    commatize: commatize,\n    is_deferred: is_deferred,\n    ServerStateDeferred: ServerStateDeferred,\n    get_random_color: get_random_color\n};\n"]}