{"version":3,"sources":["viz/trackster/tracks.js"],"names":["CONTINUOUS_DATA_MODES","places","val","Math","pow","num","supportsByteRanges","url","promise","$","Deferred","success","ajax","type","beforeSend","result","status","xhr","resolve","_","extend","html_elt_js_obj_dict","is_container","element","obj","attr","moveable","handle_class","container_selector","element_js_obj","relative","e","d","this","child","container","i","parent","this_obj","parents","length","top","position","cur_container","insertBefore","add_drawable_before","offsetY","bottom","children","remove_drawable","get","outerHeight","is","prepend","insertAfter","add_drawable","hasClass","find","append","move_drawable","deltaY","bind","removeClass","DATA_NOCONVERTER","Drawable","view","obj_dict","id_counter","id","drag_handle_class","is_overview","action_icons","config","get_value","set_value","name","config_onchange","on","container_div","build_container_div","header_div","header","header_view","_viz_views2","default","TrackHeaderView","$el","icons_div","hide","prototype","action_icons_def","title","css_class","on_click_fn","drawable","toggle_icon","hide_contents","addClass","show_contents","collection","render_in_modal","_config2","ConfigSettingCollectionView","config_params","default_value","init","changed","hidden","enabled","can_draw","_draw","options","request_draw","to_dict","set_name","old_name","new_name","remove","update_intro_div","update_icons","get_drawables","DrawableCollection","call","obj_type","drawables","object_from_template","unpack_drawables","drawables_array","dictified_drawables","prefs","to_key_value_dict","push","replace_drawable","other","index","indexOf","update_html","old_drawable","new_drawable","replaceWith","splice","new_position","get_tracks","tracks","track_type","DrawableGroup","queue","slice","shift","filters_manager","parent_div","after","content_div","appendTo","FiltersManager","old_manager","setup_multitrack_filtering","saved_filters_managers","group","show_composite_track","filters","visible","clear_filters","tiles_div","show","clear_tile_cache","num_drawables","num_feature_tracks","filters_icon","composite_icon","toggle","same_type","CompositeTrack","j","a_type","filter","shared_filters","get_type","can_composite","LineTrack","new_filter","_restore_filter_managers","filter_name","_filters2","NumberFilter","add_filter","composite_track","init_filters","initialize","tracks_to_be_redrawn","zoom_factor","has_changes","CanvasManager","reset","label","key","each","TracksterView","Backbone","View","render","requested_redraw","chrom","parent_element","vis_id","dbkey","stand_alone","undefined","top_container","label_tracks","max_low","max_high","bottom_container","min_separation","top_labeltrack","load_chroms_deferred","viewport_container","ownerDocument","nav_container","overview","overview_viewport","overview_close","overview_highlight","default_overview_height","nav_controls","chrom_select","location_span","nav_input","focus","browser_content_div","t","data_manager","all_features","value","minLength","intro_div","zo_link","text","zi_link","zoom_in","click","_visualization2","select_datasets","track","change_chrom","prependTo","nav","pageX","overview_box","current_x","delta","offsetX","delta_chrom","overview_box_background","reset_overview","height","clientX","original_low","current_height","new_scroll","scrollTop","clientY","which","go_to","stopPropagation","proxy","left","width","abs","min","startX","low","offset","css","update_location","round","span","map","old_low","term","dataset_features","concat","when","apply","feature_search_deferreds","done","response","feature","hidden_input","add_label_track","resize_timer","clearTimeout","tooltip","placement","document","base","toLowerCase","trigger","self","new_chrom","load_chroms","url_parms","root","data","dataType","chrom_info","reference","ref_track","reference_track","chrom_data","high","error","alert","max","chrom_start_index","request_redraw","LabelTrack","window","resize_window","redraw","get_base_color","trigger_navigate","chrom_pos","str","new_low","new_high","delay","move_fraction","setTimeout","move_delta","_util2","commatize","MIN_SQUISH_VIEW_WIDTH","Galaxy","ReferenceTrack","html","len","label_track","chrom_option","prev_chroms","next_chroms","start_index","track_list","found","grep","v","ceil","left_px","width_px","min_width_px","then","cur_center","point","split","parseInt","zoom_out","new_half","current_chrom_span","resize_viewport","overview_drawable","data_fetch","redraw_on_move_fn","TracksterTool","Tool","remove_inputs","ToolParameterView","track_options","to","label_div","requestAnimationFrame","update_value","_redraw","tool","keydown","floor","run_tool_row","run_on_dataset_button","run_on_region_button","run_on_dataset","set_visible","update_params","params","target_dataset_id","action","tool_id","body","buttons","Close","model","region","start","end","regions","set_overview","dataset","current_track","postdraw_actions","new_track","track_name","hda_ldda","init_for_tool_data","set_filters_manager","JSON","stringify","contentType","interval","success_fn","tool_state","set","state_dict","get_inputs_dict","success_callback","events","change :input","FilterScaler","gen_val","param","parseFloat","param_div","update_event","html_elt","target","TracksterToolView","Tile","predisplay_actions","FeatureTrackTile","incomplete_features","seq_data","param_view","select","run_on_region","is_visible","run","track_data","modal","GenomeRegion","url_params","toJSON","tool_region_and_parameters_str","constructor","mode","copy","set_dataset","_data2","Dataset","dataset_check_type","data_url_extra_params","ss_deferred","ServerStateDeferred","ajax_settings","data_mode_compatible","can_subset","max_height_px","visible_height_px","add_resize_handle","message","_painters2","Scaler","default_val","feature_data","Number","MAX_VALUE","w_scale","canvas","stale","LineTrackTile","cancel_fn","all_slotted","from_str","feature_mapper","has_icons","other_tiles_features_drawn","Track","init_deferred","Model","data_type","data_query_wait","msg_elt","Genome","chroms_info","data_and_mode_compatible","min_height_px","show_message","resize","predraw_init","getJSON","max_value","revert_name","TiledTrack","tile_cache","unbind","regions_to_use","view_region","tool_view","dynamic_tool_div","elt","bookmarked_regions","location","href","slotters","dataset_id","Collection","ok_fn","stats","isNaN","in_handle","in_drag","drag_control","hover","min_value","new_mode","original_height","new_height","clear","on_resize","_gen_tile_cache_key","before_draw","ReadTrack","VariantTrack","FeatureTrack","range","resolution","tile_width","tile_promise","tile_region","tiles","tile","kind","_add_yaxis_label","pref_name","on_change","valid_chroms","on_finish","help_text","tile_index","clear_after","tile_promises","force","icons_present","mean","sd","set_default_value","update_auto_mode","filters_available","_get_drawables","DATA_PENDING","left_offset","get_tile_data","data_mode","overlay_div","tile_data","change_mode","tile_drawn","resolution_px_b","max_rows","drawing_modes","drawing_heights","tile_low","tile_high","all_data_index","set_min_max","ctx","translate","globalCompositeOperation","get_canvas_height","_draw_line_track_tile","painter","mode_icon","draw_tile","show_tile","tools_icon","tile_element","region_str","param_str","entry","extra_info","draw_helper","new_div","make_text_editable","screenPosition","tickDistance","new_val","get_mode","display_mode","get_elt","o","visible_height","is_tile","m","init_deferreds","get_data","set_elt","is_deferred","subset_entry","new_canvas","getContext","max_height","update_all_min_max","canvas_width","build_config_params","LinePainter","draw","ref_seq","subset","str_len","track_height","toString","values","join","dataset_type","log","start_end_dct","display_modes","help","set_painter_from_config","line_track_tiles","inc_features","all_incomplete_features","new_canvas_ctx","new_tile","param_space_viz_icon","show_group","f","show_more_rows_icon","incremental_slots","dummy_context","slotter","canvas_manager","char_width_px","data_url","GenomeReferenceDataManager","union","dummy_painter","new_visible","cur_visible","filtered","filter_alpha_scaler","font","manager","default_font","textAlign","filter_height_scaler","c","fillText","fillStyle","cur_tile","_bbiDataManager2","BBIDataManager","summary_draw_height","DiagonalHeatmapTrack","num_samples","deferreds","sample_names","font_size","samples_div_html","DiagonalHeatmapPainter","addable_objects","template","ArcLinkedFeaturePainter","drawable_type","pluck","tile_incomplete_features","omit","keys","size","features","drawImage","update_ui_elt","example_feature","applies_to","level","_slotting2","FeatureSlotter","x","measureText","slot_features","rows_required","get_required_height","slots","hide_feature","flen","update_attrs","keep","alpha_filter","height_filter","b","draw_results","translation","VariantPainter","get_metadata","match","fetch","font-size","line-height","ReadPainter","VcfTrack"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport visualization from \"viz/visualization\";\nimport viz_views from \"viz/viz_views\";\nimport util from \"viz/trackster/util\";\nimport slotting from \"viz/trackster/slotting\";\nimport painters from \"viz/trackster/painters\";\nimport filters_mod from \"viz/trackster/filters\";\nimport data from \"mvc/dataset/data\";\nimport tools_mod from \"mvc/tool/tools\";\nimport config_mod from \"utils/config\";\nimport bbi from \"viz/bbi-data-manager\";\nimport \"ui/editable-text\";\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = function(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = function(\n    element,\n    handle_class,\n    container_selector,\n    element_js_obj\n) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element\n        .bind(\"drag\", { handle: \".\" + handle_class, relative: true }, function(\n            e,\n            d\n        ) {\n            var element = $(this);\n            var parent = $(this).parent();\n\n            var // Only sorting amongst tracks and groups.\n            children = parent.children(\".track,.group\");\n\n            var this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")];\n            var child;\n            var container;\n            var top;\n            var bottom;\n            var i;\n\n            //\n            // Enable three types of dragging: (a) out of container; (b) into container;\n            // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n            //\n\n            // Handle dragging out of container.\n            container = $(this).parents(container_selector);\n            if (container.length !== 0) {\n                top = container.position().top;\n                bottom = top + container.outerHeight();\n                var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                if (d.offsetY < top) {\n                    // Moving above container.\n                    $(this).insertBefore(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable_before(\n                        this_obj,\n                        cur_container\n                    );\n                    return;\n                } else if (d.offsetY > bottom) {\n                    // Moving below container.\n                    $(this).insertAfter(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle dragging into container. Child is appended to container's content_div.\n            container = null;\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                top = child.position().top;\n                bottom = top + child.outerHeight();\n                // Dragging into container if child is a container and offset is inside container.\n                if (\n                    child.is(container_selector) &&\n                    this !== child.get(0) &&\n                    d.offsetY >= top &&\n                    d.offsetY <= bottom\n                ) {\n                    // Append/prepend based on where offsetY is closest to and return.\n                    if (d.offsetY - top < bottom - d.offsetY) {\n                        child.find(\".content-div\").prepend(this);\n                    } else {\n                        child.find(\".content-div\").append(this);\n                    }\n                    // Update containers. Object may not have container if it is being moved quickly.\n                    if (this_obj.container) {\n                        this_obj.container.remove_drawable(this_obj);\n                    }\n                    html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(\n                        this_obj\n                    );\n                    return;\n                }\n            }\n\n            // Handle sibling movement, aka sorting.\n\n            // Determine new position\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                if (\n                    d.offsetY < child.position().top &&\n                    // Cannot move tracks above reference track or intro div.\n                    !(\n                        child.hasClass(\"reference-track\") ||\n                        child.hasClass(\"intro\")\n                    )\n                ) {\n                    break;\n                }\n            }\n\n            // If not already in the right place, move. Need\n            // to handle the end specially since we don't have\n            // insert at index\n            if (i === children.length) {\n                if (this !== children.get(i - 1)) {\n                    parent.append(this);\n                    html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                        this_obj,\n                        i\n                    );\n                }\n            } else if (this !== children.get(i)) {\n                $(this).insertBefore(children.get(i));\n                // Need to adjust insert position if moving down because move is changing\n                // indices of all list items.\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                    this_obj,\n                    d.deltaY > 0 ? i - 1 : i\n                );\n            }\n        })\n        .bind(\"dragstart\", function() {\n            $(this).addClass(\"dragging\");\n        })\n        .bind(\"dragend\", function() {\n            $(this).removeClass(\"dragging\");\n        });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar // Padding at the top of tracks for error messages\nERROR_PADDING = 20;\n\nvar // Maximum number of rows un a slotted track\nMAX_FEATURE_DEPTH = 100;\n\nvar // Minimum width for window for squish to be used.\nMIN_SQUISH_VIEW_WIDTH = 12000;\n\nvar // Number of pixels per tile, not including left offset.\nTILE_SIZE = 400;\n\nvar DEFAULT_DATA_QUERY_WAIT = 5000;\n\nvar // Maximum number of chromosomes that are selectable at any one time.\nMAX_CHROMS_SELECTABLE = 100;\n\nvar DATA_ERROR = \"Cannot display dataset due to an error. \";\n\nvar DATA_NOCONVERTER =\n    \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\";\n\nvar DATA_NONE = \"No data for this chrom/contig.\";\n\nvar DATA_PENDING =\n    \"Preparing data. This can take a while for a large dataset. \" +\n    \"If the visualization is saved and closed, preparation will continue in the background.\";\n\nvar DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \";\nvar DATA_LOADING = \"Loading data...\";\nvar DATA_OK = \"Ready for display\";\nvar TILE_CACHE_SIZE = 10;\nvar DATA_CACHE_SIZE = 20;\n\nvar // Numerical/continuous data display modes.\nCONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n        this.config_params,\n        obj_dict.prefs\n    );\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            function() {\n                icons_div.show();\n            },\n            function() {\n                icons_div.hide();\n            }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if (drawable.config.get_value(\"content_visible\")) {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle-expand\")\n                    .removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value(\"content_visible\", false);\n            } else {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle\")\n                    .removeClass(\"toggle-expand\");\n                drawable.config.set_value(\"content_visible\", true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal(\"Configure Track\");\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n        {\n            key: \"content_visible\",\n            type: \"bool\",\n            default_value: true,\n            hidden: true\n        }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(\n                drawables_array[i],\n                this.view,\n                this\n            );\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(\n                    new_drawable.container_div\n                );\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0);\n\n        var tracks = [];\n        var drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\")\n        .addClass(\"content-div\")\n        .attr(\"id\", \"group_\" + this.id + \"_content_div\")\n        .appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(\n            this,\n            obj_dict.filters\n        );\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(\n    DrawableGroup.prototype,\n    Drawable.prototype,\n    DrawableCollection.prototype,\n    {\n        action_icons_def: [\n            Drawable.prototype.action_icons_def[0],\n            Drawable.prototype.action_icons_def[1],\n            // Replace group with composite track.\n            {\n                name: \"composite_icon\",\n                title: \"Show composite track\",\n                css_class: \"layers-stack\",\n                on_click_fn: function(group) {\n                    $(\".tooltip\").remove();\n                    group.show_composite_track();\n                }\n            },\n            // Toggle track filters.\n            {\n                name: \"filters_icon\",\n                title: \"Filters\",\n                css_class: \"ui-slider-050\",\n                on_click_fn: function(group) {\n                    // TODO: update Tooltip text.\n                    if (group.filters_manager.visible()) {\n                        // Hiding filters.\n                        group.filters_manager.clear_filters();\n                        group._restore_filter_managers();\n                        // TODO: maintain current filter by restoring and setting saved manager's\n                        // settings to current/shared manager's settings.\n                        // TODO: need to restore filter managers when moving drawable outside group.\n                    } else {\n                        // Showing filters.\n                        group.setup_multitrack_filtering();\n                        group.request_draw({ clear_tile_cache: true });\n                    }\n                    group.filters_manager.toggle();\n                }\n            },\n            Drawable.prototype.action_icons_def[2]\n        ],\n\n        build_container_div: function() {\n            var container_div = $(\"<div/>\")\n                .addClass(\"group\")\n                .attr(\"id\", \"group_\" + this.id);\n            if (this.container) {\n                this.container.content_div.append(container_div);\n            }\n            return container_div;\n        },\n\n        hide_contents: function() {\n            this.tiles_div.hide();\n        },\n\n        show_contents: function() {\n            // Show the contents div and labels (if present)\n            this.tiles_div.show();\n            // Request a redraw of the content\n            this.request_draw();\n        },\n\n        update_icons: function() {\n            //\n            // Handle update when there are no tracks.\n            //\n            var num_drawables = this.drawables.length;\n            if (num_drawables === 0) {\n                this.action_icons.composite_icon.hide();\n                this.action_icons.filters_icon.hide();\n            } else if (num_drawables === 1) {\n                this.action_icons.composite_icon.toggle(\n                    this.drawables[0] instanceof CompositeTrack\n                );\n                this.action_icons.filters_icon.hide();\n            } else {\n                // There are 2 or more tracks.\n\n                //\n                // Determine if a composite track can be created. Current criteria:\n                // (a) all tracks are line tracks;\n                //      OR\n                // FIXME: this is not enabled right now because it has not been well tested:\n                // (b) there is a single FeatureTrack.\n                //\n\n                // All tracks the same?\n                var i;\n\n                var j;\n                var drawable;\n                var same_type = true;\n                var a_type = this.drawables[0].get_type();\n                var num_feature_tracks = 0;\n                for (i = 0; i < num_drawables; i++) {\n                    drawable = this.drawables[i];\n                    if (drawable.get_type() !== a_type) {\n                        can_composite = false;\n                        break;\n                    }\n                    if (drawable instanceof FeatureTrack) {\n                        num_feature_tracks++;\n                    }\n                }\n\n                if (same_type && this.drawables[0] instanceof LineTrack) {\n                    this.action_icons.composite_icon.show();\n                } else {\n                    this.action_icons.composite_icon.hide();\n                    $(\".tooltip\").remove();\n                }\n\n                //\n                // Set up group-level filtering and update filter icon.\n                //\n                if (\n                    num_feature_tracks > 1 &&\n                    num_feature_tracks === this.drawables.length\n                ) {\n                    //\n                    // Find shared filters.\n                    //\n                    var shared_filters = {};\n\n                    var filter;\n\n                    // Init shared filters with filters from first drawable.\n                    drawable = this.drawables[0];\n                    for (\n                        j = 0;\n                        j < drawable.filters_manager.filters.length;\n                        j++\n                    ) {\n                        filter = drawable.filters_manager.filters[j];\n                        shared_filters[filter.name] = [filter];\n                    }\n\n                    // Create lists of shared filters.\n                    for (i = 1; i < this.drawables.length; i++) {\n                        drawable = this.drawables[i];\n                        for (\n                            j = 0;\n                            j < drawable.filters_manager.filters.length;\n                            j++\n                        ) {\n                            filter = drawable.filters_manager.filters[j];\n                            if (filter.name in shared_filters) {\n                                shared_filters[filter.name].push(filter);\n                            }\n                        }\n                    }\n\n                    //\n                    // Create filters for shared filters manager. Shared filters manager is group's\n                    // manager.\n                    //\n                    this.filters_manager.remove_all();\n                    var filters;\n                    var new_filter;\n                    var min;\n                    var max;\n                    for (var filter_name in shared_filters) {\n                        filters = shared_filters[filter_name];\n                        if (filters.length === num_feature_tracks) {\n                            // Add new filter.\n                            // FIXME: can filter.copy() be used?\n                            new_filter = new filters_mod.NumberFilter({\n                                name: filters[0].name,\n                                index: filters[0].index\n                            });\n                            this.filters_manager.add_filter(new_filter);\n                        }\n                    }\n\n                    // Show/hide icon based on filter availability.\n                    this.action_icons.filters_icon.toggle(\n                        this.filters_manager.filters.length > 0\n                    );\n                } else {\n                    this.action_icons.filters_icon.hide();\n                }\n            }\n        },\n\n        /**\n     * Restore individual track filter managers.\n     */\n        _restore_filter_managers: function() {\n            for (var i = 0; i < this.drawables.length; i++) {\n                this.drawables[i].filters_manager = this.saved_filters_managers[\n                    i\n                ];\n            }\n            this.saved_filters_managers = [];\n        },\n\n        /**\n     *\n     */\n        setup_multitrack_filtering: function() {\n            // Save tracks' managers and set up shared manager.\n            if (this.filters_manager.filters.length > 0) {\n                // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n                this.saved_filters_managers = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    var drawable = this.drawables[i];\n                    this.saved_filters_managers.push(drawable.filters_manager);\n                    drawable.filters_manager = this.filters_manager;\n                }\n\n                //TODO: hide filters icons for each drawable?\n            }\n            this.filters_manager.init_filters();\n        },\n\n        /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n        show_composite_track: function() {\n            var composite_track = new CompositeTrack(this.view, this.view, {\n                name: this.config.get_value(\"name\"),\n                drawables: this.drawables\n            });\n            var index = this.container.replace_drawable(\n                this,\n                composite_track,\n                true\n            );\n            composite_track.request_draw();\n        },\n\n        add_drawable: function(drawable) {\n            DrawableCollection.prototype.add_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        remove_drawable: function(drawable) {\n            DrawableCollection.prototype.remove_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        to_dict: function() {\n            // If filters are visible, need to restore original filter managers before converting to dict.\n            if (this.filters_manager.visible()) {\n                this._restore_filter_managers();\n            }\n\n            var obj_dict = extend(\n                DrawableCollection.prototype.to_dict.call(this),\n                { filters: this.filters_manager.to_dict() }\n            );\n\n            // Setup multi-track filtering again.\n            if (this.filters_manager.visible()) {\n                this.setup_multitrack_filtering();\n            }\n\n            return obj_dict;\n        },\n\n        request_draw: function(options) {\n            _.each(this.drawables, function(d) {\n                d.request_draw(options);\n            });\n        }\n    }\n);\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone =\n            obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager(\n            this.container.get(0).ownerDocument\n        );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                }\n            ],\n            { name: obj_dict.name }\n        );\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container;\n\n        var view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\")\n            .addClass(\"top-container\")\n            .appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\")\n            .addClass(\"content\")\n            .appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\")\n            .addClass(\"bottom-container\")\n            .appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\")\n            .addClass(\"top-labeltrack\")\n            .appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\")\n            .addClass(\"viewport-container\")\n            .attr(\"id\", \"viewport-container\")\n            .appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\")\n            .addClass(\"intro\")\n            .appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\")\n            .text(\"Add Datasets to Visualization\")\n            .addClass(\"action-button\")\n            .appendTo(this.intro_div)\n            .click(function() {\n                visualization.select_datasets({ dbkey: view.dbkey }, function(\n                    tracks\n                ) {\n                    _.each(tracks, function(track) {\n                        view.add_drawable(\n                            object_from_template(track, view, view)\n                        );\n                    });\n                });\n            });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\")\n            .addClass(\"trackster-nav-container\")\n            .prependTo(this.top_container);\n        this.nav = $(\"<div/>\")\n            .addClass(\"trackster-nav\")\n            .appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\")\n            .addClass(\"overview\")\n            .appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\")\n            .addClass(\"overview-viewport\")\n            .appendTo(this.overview);\n        this.overview_close = $(\"<a/>\")\n            .attr(\"title\", \"Close overview\")\n            .addClass(\"icon-button overview-close tooltip\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\")\n            .addClass(\"overview-highlight\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\")\n            .addClass(\"overview-boxback\")\n            .appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\")\n            .addClass(\"overview-box\")\n            .appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\")\n            .addClass(\"nav-controls\")\n            .appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\")\n            .attr({ name: \"chrom\" })\n            .addClass(\"chrom-nav\")\n            .append(\"<option value=''>Loading</option>\")\n            .appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (\n                e.type === \"focusout\" ||\n                (e.keyCode || e.which) === 13 ||\n                (e.keyCode || e.which) === 27\n            ) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\")\n            .addClass(\"nav-input\")\n            .hide()\n            .bind(\"keyup focusout\", submit_nav)\n            .appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\")\n            .addClass(\"location\")\n            .attr(\"title\", \"Click to change location\")\n            .tooltip({ placement: \"bottom\" })\n            .appendTo(this.nav_controls);\n        this.location_span.click(function() {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [];\n\n                    var feature_search_deferreds = $.map(\n                        view.get_tracks(FeatureTrack),\n                        function(t) {\n                            return t.data_manager\n                                .search_features(request.term)\n                                .success(function(dataset_features) {\n                                    all_features = all_features.concat(\n                                        dataset_features\n                                    );\n                                });\n                        }\n                    );\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(function() {\n                        response(\n                            $.map(all_features, function(feature) {\n                                return {\n                                    label: feature[0],\n                                    value: feature[1]\n                                };\n                            })\n                        );\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\")\n                .attr(\"type\", \"hidden\")\n                .val(this.vis_id)\n                .appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-out\")\n            .attr(\"title\", \"Zoom out\")\n            .tooltip({ placement: \"bottom\" })\n            .click(function() {\n                view.zoom_out();\n            })\n            .appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-in\")\n            .attr(\"title\", \"Zoom in\")\n            .tooltip({ placement: \"bottom\" })\n            .click(function() {\n                view.zoom_in();\n            })\n            .appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", function() {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function(e) {\n            $(this)\n                .find(\"input\")\n                .trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function(e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box\n            .bind(\"dragstart\", function(e, d) {\n                this.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var delta = d.offsetX - this.current_x;\n                this.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.max_high - view.max_low)\n                );\n                view.move_delta(-delta_chrom);\n            });\n\n        this.overview_close.click(function() {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container\n            .bind(\"draginit\", function(e, d) {\n                // Disable interaction if started in scrollbar (for webkit)\n                if (e.clientX > view.viewport_container.width() - 16) {\n                    return false;\n                }\n            })\n            .bind(\"dragstart\", function(e, d) {\n                d.original_low = view.low;\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var container = $(this);\n                var delta = d.offsetX - d.current_x;\n                var new_scroll =\n                    container.scrollTop() - (e.clientY - d.current_height);\n                container.scrollTop(new_scroll);\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.high - view.low)\n                );\n                view.move_delta(delta_chrom);\n            });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack\n            .bind(\"dragstart\", function(e, d) {\n                return $(\"<div/>\")\n                    .addClass(\"zoom-area\")\n                    .css(\n                        \"height\",\n                        view.browser_content_div.height() +\n                            view.top_labeltrack.height() +\n                            1\n                    )\n                    .appendTo($(this));\n            })\n            .bind(\"drag\", function(e, d) {\n                $(d.proxy).css({\n                    left:\n                        Math.min(e.pageX, d.startX) -\n                        view.container.offset().left,\n                    width: Math.abs(e.pageX - d.startX)\n                });\n\n                var min =\n                    Math.min(e.pageX, d.startX) - view.container.offset().left;\n\n                var max =\n                    Math.max(e.pageX, d.startX) - view.container.offset().left;\n\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                view.update_location(\n                    Math.round(min / width * span) + view.low,\n                    Math.round(max / width * span) + view.low\n                );\n            })\n            .bind(\"dragend\", function(e, d) {\n                var min = Math.min(e.pageX, d.startX);\n                var max = Math.max(e.pageX, d.startX);\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                var old_low = view.low;\n                view.low = Math.round(min / width * span) + old_low;\n                view.high = Math.round(max / width * span) + old_low;\n                $(d.proxy).remove();\n                view.request_redraw();\n            });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(\n            new LabelTrack(this, { content_div: this.top_labeltrack })\n        );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(function() {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", function() {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(base.toLowerCase() + \"_color\") ||\n            this.config.get_value(\"n_color\")\n        );\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(function() {\n                self.trigger(\n                    \"navigate\",\n                    new_chrom + \":\" + new_low + \"-\" + new_high\n                );\n            }, 500);\n        } else {\n            view.trigger(\n                \"navigate\",\n                new_chrom + \":\" + new_low + \"-\" + new_high\n            );\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text(\n            util.commatize(low) + \" - \" + util.commatize(high)\n        );\n        this.nav_input.val(\n            this.chrom + \":\" + util.commatize(low) + \"-\" + util.commatize(high)\n        );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var view = this;\n        var chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function(result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n\n                view.chrom_select.html(\"\");\n                view.chrom_select.append(\n                    $('<option value=\"\">Select Chrom/Contig</option>')\n                );\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            '<option value=\"previous\">Previous ' +\n                                MAX_CHROMS_SELECTABLE +\n                                \"</option>\"\n                        )\n                    );\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            '<option value=\"next\">Next ' +\n                                MAX_CHROMS_SELECTABLE +\n                                \"</option>\"\n                        )\n                    );\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, function(v, i) {\n            return v.chrom === chrom;\n        })[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/);\n\n        var chrom = chrom_pos[0];\n        var new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined;\n        var new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(function() {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", function() {\n            self.changed();\n        });\n    },\n\n    add_label_track: function(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this;\n\n        var // Either redrawing a single drawable or all view's drawables.\n        track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, function(track) {\n            var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n                return to[0] === track;\n            });\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(function() {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low;\n        var high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b =\n            this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px =\n            this.low /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var width_px =\n            (this.high - this.low) /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box\n            .css({\n                left: left_px,\n                width: Math.max(min_width_px, width_px)\n            })\n            .show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\n                \"left\",\n                left_px - (min_width_px - width_px) / 2\n            );\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, function(track_options) {\n            var track = track_options[0];\n            var options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, function(label_track) {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function(point, container) {\n        if (\n            this.max_high === 0 ||\n            this.high - this.low <= this.min_separation\n        ) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center =\n                point /\n                    this.viewport_container.width() *\n                    (this.high - this.low) +\n                this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height(\n            this.container.height() -\n                this.top_container.height() -\n                this.bottom_container.height()\n        );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n            content_div: this.overview_viewport\n        });\n\n        var view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = function() {\n            view.overview_highlight\n                .show()\n                .height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(\n                view.overview_drawable.content_div.height() +\n                    view.overview_box.outerHeight()\n            );\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (\n            options.tool_state !== undefined &&\n            options.tool_state.hidden !== undefined\n        ) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\");\n        var param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\")\n            .addClass(\"param-label\")\n            .text(param.get(\"label\"))\n            .appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\")\n            .addClass(\"param-input\")\n            .html(param.get(\"html\"))\n            .appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n        var tool = this.model;\n        var parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div\n            .bind(\"drag\", function(e) {\n                e.stopPropagation();\n            })\n            .click(function(e) {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", function(e) {\n                e.stopPropagation();\n            })\n            .keydown(function(e) {\n                e.stopPropagation();\n            });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\")\n            .appendTo(parent_div)\n            .text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(function(param) {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\")\n            .addClass(\"param-row\")\n            .appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on visible region\")\n            .appendTo(run_tool_row);\n        run_on_region_button.click(function() {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(function() {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get(\"track\").dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id\n            },\n            null,\n            // Success callback.\n            function(track_data) {\n                Galaxy.modal.show({\n                    title: tool.get(\"name\") + \" is Running\",\n                    body:\n                        tool.get(\"name\") +\n                        \" is running on the complete dataset. Tool outputs are in dataset's history.\",\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\");\n\n        var tool = this.model;\n\n        var region = new visualization.GenomeRegion({\n            chrom: track.view.chrom,\n            start: track.view.low,\n            end: track.view.high\n        });\n\n        var url_params = {\n            target_dataset_id: track.dataset.id,\n            action: \"rerun\",\n            tool_id: tool.id,\n            regions: [region.toJSON()]\n        };\n\n        var current_track = track;\n\n        var // Set name of track to include tool name, parameters, and region used.\n        track_name =\n            tool.get(\"name\") +\n            current_track.tool_region_and_parameters_str(region);\n\n        var container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(\n                current_track,\n                group,\n                false\n            );\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(\n                current_track.view.content_div.children()[index]\n            );\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(\n            current_track.filters_manager.copy(new_track)\n        );\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(\n            url_params,\n            new_track,\n            // Success callback.\n            function(track_data) {\n                new_track.set_dataset(new data.Dataset(track_data));\n                new_track.tiles_div.text(\"Running job.\");\n                new_track.init();\n            }\n        );\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(function(response) {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(\n                    DATA_CANNOT_RUN_TOOL + response.message\n                );\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (\n        this.filter.high === Number.MAX_VALUE ||\n        this.filter.low === -Number.MAX_VALUE ||\n        this.filter.low === this.filter.high\n    ) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (\n        (parseFloat(feature_data[this.filter.index]) - this.filter.low) /\n        (this.filter.high - this.filter.low)\n    );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = function() {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = function() {};\n\nvar FeatureTrackTile = function(\n    track,\n    region,\n    w_scale,\n    canvas,\n    data,\n    mode,\n    message,\n    all_slotted,\n    feature_mapper,\n    incomplete_features,\n    seq_data\n) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = function() {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset =\n            obj_dict.dataset instanceof Backbone.Model\n                ? obj_dict.dataset\n                : new data.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait =\n        \"data_query_wait\" in obj_dict\n            ? obj_dict.data_query_wait\n            : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager =\n        \"data_manager\" in obj_dict\n            ? obj_dict.data_manager\n            : new visualization.GenomeDataManager({\n                  dataset: this.dataset,\n                  // HACK: simulate 'genome' attributes from view for now.\n                  // View should eventually use Genome object.\n                  genome: new visualization.Genome({\n                      key: view.dbkey,\n                      chroms_info: {\n                          chrom_info: view.chrom_data\n                      }\n                  }),\n                  data_mode_compatible: this.data_and_mode_compatible,\n                  can_subset: this.can_subset\n              });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(\n        this.container_div\n    );\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                } else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(\n                        track.config.get_value(\"name\") +\n                            track.tool_region_and_parameters_str()\n                    );\n                } else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html =\n                    \"<strong>Tool</strong>:\" +\n                    track.tool.get(\"name\") +\n                    \"<br/>\" +\n                    \"<strong>Dataset</strong>:\" +\n                    track.config.get_value(\"name\") +\n                    \"<br/>\" +\n                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                    '<option value=\"cur\">current viewing area</option>' +\n                    '<option value=\"bookmarks\">bookmarks</option>' +\n                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n                    \"</select>\";\n\n                var cancel_fn = function() {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                };\n\n                var ok_fn = function() {\n                    var regions_to_use = $(\n                            'select[name=\"regions\"] option:selected'\n                        ).val(),\n                        regions,\n                        view_region = new visualization.GenomeRegion({\n                            chrom: view.chrom,\n                            start: view.low,\n                            end: view.high\n                        }),\n                        bookmarked_regions = _.map($(\".bookmark\"), function(\n                            elt\n                        ) {\n                            return new visualization.GenomeRegion({\n                                from_str: $(elt)\n                                    .children(\".position\")\n                                    .text()\n                            });\n                        });\n\n                    // Get regions for visualization.\n                    if (regions_to_use === \"cur\") {\n                        // Use only current region.\n                        regions = [view_region];\n                    } else if (regions_to_use === \"bookmarks\") {\n                        // Use only bookmarks.\n                        regions = bookmarked_regions;\n                    } else {\n                        // Use both current region and bookmarks.\n                        regions = [view_region].concat(bookmarked_regions);\n                    }\n\n                    Galaxy.modal.hide();\n\n                    // Go to visualization.\n                    window.location.href =\n                        Galaxy.root +\n                        \"visualization/sweepster\" +\n                        \"?\" +\n                        $.param({\n                            dataset_id: track.dataset.id,\n                            hda_ldda: track.dataset.get(\"hda_ldda\"),\n                            regions: JSON.stringify(\n                                new Backbone.Collection(regions).toJSON()\n                            )\n                        });\n                };\n\n                var check_enter_esc = function(e) {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n\n                // show dialog\n                Galaxy.modal.show({\n                    title:\n                        \"Visualize tool parameter space and output from different parameter settings?\",\n                    body: html,\n                    buttons: { No: cancel_fn, Yes: ok_fn }\n                });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function() {\n        return $(\"<div/>\")\n            .addClass(\"track\")\n            .attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(\n            function() {\n                if (track.config.get_value(\"content_visible\")) {\n                    in_handle = true;\n                    drag_control.show();\n                }\n            },\n            function() {\n                in_handle = false;\n                if (!in_drag) {\n                    drag_control.hide();\n                }\n            }\n        );\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control\n            .hide()\n            .bind(\"dragstart\", function(e, d) {\n                in_drag = true;\n                d.original_height = $(track.content_div).height();\n            })\n            .bind(\"drag\", function(e, d) {\n                var new_height = Math.min(\n                    Math.max(d.original_height + d.deltaY, track.min_height_px),\n                    track.max_height_px\n                );\n                $(track.tiles_div).css(\"height\", new_height);\n                track.visible_height_px =\n                    track.max_height_px === new_height ? 0 : new_height;\n                track.on_resize();\n            })\n            .bind(\"dragend\", function(e, d) {\n                track.tile_cache.clear();\n                in_drag = false;\n                if (!in_handle) {\n                    drag_control.hide();\n                }\n                track.config.set_value(\"height\", track.visible_height_px);\n                track.changed();\n            })\n            .appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\")\n            .addClass(\"message\")\n            .html(msg_html)\n            .appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\")\n            .addClass(\"tiles\")\n            .appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred();\n\n        var params = {\n            hda_ldda: track.dataset.get(\"hda_ldda\"),\n            data_type: this.dataset_check_type,\n            chrom: track.view.chrom,\n            retry: retry\n        };\n\n        $.getJSON(this.dataset.url(), params, function(result) {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"View error\")\n                            .click(function() {\n                                Galaxy.modal.show({\n                                    title: \"Trackster Error\",\n                                    body: \"<pre>\" + result.message + \"</pre>\",\n                                    buttons: {\n                                        Close: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            })\n                    );\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"Try again\")\n                            .click(function() {\n                                track.init(true);\n                            })\n                    );\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (\n                result === \"no data\" ||\n                (result.data !== undefined &&\n                    (result.data === null || result.data.length === 0))\n            ) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(function() {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\n                        \"height\",\n                        track.visible_height_px + \"px\"\n                    );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(function() {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            function(result) {\n                var data = result.data;\n\n                // Tracks may not have stat data either because there is no data or data is not yet ready.\n                if (data && data.min !== undefined && data.max !== undefined) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update config, prefs\n                    track.config.set_default_value(\"min_value\", min_value);\n                    track.config.set_default_value(\"max_value\", max_value);\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(\n        this,\n        \"filters\" in obj_dict ? obj_dict.filters : null\n    );\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool\n        ? new TracksterTool(\n              _.extend(obj_dict.tool, {\n                  track: this,\n                  tool_state: obj_dict.tool_state\n              })\n          )\n        : null;\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\")\n        .addClass(\"tiles\")\n        .appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\")\n        .addClass(\"overlay\")\n        .appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title:\n                \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            function(result) {\n                var data = result.data;\n                if (\n                    isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                    isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update the prefs\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\n            \"title\",\n            \"Set display mode (now: \" + track.mode + \")\"\n        );\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return w_scale + \"_\" + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after;\n        var low = this.view.low;\n        var high = this.view.high;\n        var range = high - low;\n        var width = this.view.container.width();\n        var w_scale = this.view.resolution_px_b;\n        var resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n        tile_width = Math.floor(TILE_SIZE * resolution);\n\n        var // Index of first tile that overlaps visible region.\n        tile_index = Math.floor(low / tile_width);\n\n        var tile_region;\n        var tile_promise;\n        var tile_promises = [];\n        var tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(function(tile) {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div\n                .children(\".remove\")\n                .removeClass(\"remove\")\n                .remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(function() {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, function(t) {\n                return t !== null;\n            });\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this;\n        var css_class = type === \"max\" ? \"top\" : \"bottom\";\n        var text = type === \"max\" ? \"max\" : \"min\";\n        var pref_name = type === \"max\" ? \"max_value\" : \"min_value\";\n        var label = this.container_div.find(\".yaxislabel.\" + css_class);\n        var value = round(track.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change =\n            on_change ||\n            function() {\n                track.request_draw({ clear_tile_cache: true });\n            };\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\")\n                .text(value)\n                .make_text_editable({\n                    num_cols: 12,\n                    on_finish: function(new_val) {\n                        $(\".tooltip\").remove();\n                        track.config.set_value(pref_name, round(new_val, 1));\n                        on_change();\n                    },\n                    help_text: \"Set \" + text + \" value\"\n                })\n                .addClass(\"yaxislabel \" + css_class)\n                .css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, function(tile) {\n            return tile instanceof LineTrackTile;\n        });\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, function(tile) {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            track._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, function(tile) {\n                return tile.has_icons;\n            });\n\n            if (icons_present) {\n                _.each(tiles, function(tile) {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force;\n        var mode = options.mode || this.mode;\n        var resolution = 1 / w_scale;\n\n        var // Useful vars.\n        track = this;\n\n        var drawables = this._get_drawables();\n        var key = this._gen_tile_cache_key(w_scale, region);\n\n        var is_tile = function(o) {\n            return o && \"track\" in o;\n        };\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : track.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = function() {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, function(m) {\n                return m === mode;\n            })\n                ? \"Coverage\"\n                : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, function(d) {\n                // Get the track data/promise.\n                return d.data_manager.get_data(\n                    region,\n                    data_mode,\n                    resolution,\n                    track.data_url_extra_params\n                );\n            });\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(\n                    view.reference_track.data_manager.get_data(\n                        region,\n                        mode,\n                        resolution,\n                        view.reference_track.data_url_extra_params\n                    )\n                );\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(function() {\n            var tile_data = get_tile_data();\n            var tracks_data = tile_data;\n            var seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (\n                _.find(tile_data, function(d) {\n                    return util.is_deferred(d);\n                })\n            ) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(\n                    track.draw_helper(region, w_scale, options)\n                ).then(function(tile) {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(\n                    tile_data.pop(),\n                    region\n                );\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [];\n\n            var drawing_heights = [];\n\n            _.each(drawables, function(d, i) {\n                var mode = d.mode;\n                var data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(\n                    d.get_canvas_height(data, mode, w_scale, width)\n                );\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas();\n            var tile_low = region.get(\"start\");\n            var tile_high = region.get(\"end\");\n            var all_data_index = 0;\n\n            var width =\n                Math.ceil((tile_high - tile_low) * w_scale) + track.left_offset;\n\n            var height = _.max(drawing_heights);\n            var tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, function(d, i) {\n                tile = d.draw_tile(\n                    tracks_data[i],\n                    ctx,\n                    drawing_modes[i],\n                    region,\n                    w_scale,\n                    seq_data\n                );\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if (\n            [undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1\n        ) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if (\n            [undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !==\n            -1\n        ) {\n            this.config.set_value(\n                \"max_value\",\n                _.max(\n                    _.map(result.data, function(d) {\n                        return d[1];\n                    })\n                ) || 0\n            );\n        }\n\n        var canvas = ctx.canvas;\n\n        var painter = new painters.LinePainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this;\n        var tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round(\n            (tile.low -\n                (this.is_overview ? this.view.max_low : this.view.low)) *\n                w_scale\n        );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(\n            this.max_height_px,\n            tile_element.height() - 2\n        );\n\n        // Update height for all tiles based on max height.\n        tile_element\n            .parent()\n            .children()\n            .css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this;\n        var region_str = region !== undefined ? region.toString() : \"all\";\n        var param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (\n            data.dataset_type === \"bigwig\" ||\n            data.extra_info === \"no_detail\"\n        ) {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view;\n        var range = view.high - view.low;\n\n        var tickDistance = Math.floor(\n            Math.pow(10, Math.floor(Math.log(range) / Math.log(10)))\n        );\n\n        var position = Math.floor(view.low / tickDistance) * tickDistance;\n        var width = this.view.container.width();\n        var new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor(\n                (position - view.low) / range * width\n            );\n            new_div.append(\n                $(\"<div/>\")\n                    .addClass(\"pos-label\")\n                    .text(util.commatize(position))\n                    .css({\n                        left: screenPosition\n                    })\n            );\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, function(d) {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    action_icons_def: [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, function(d) {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(function() {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n            name: this.config.get_value(\"name\")\n        });\n\n        var track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(\n            _.map(this.drawables, function(d) {\n                return d.config.get_value(\"min_value\");\n            })\n        );\n\n        var max = _.max(\n            _.map(this.drawables, function(d) {\n                return d.config.get_value(\"max_value\");\n            })\n        );\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, function(d) {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this;\n        var min_value = this.config.get_value(\"min_value\");\n        var max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, function(d) {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1;\n\n        var i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this;\n\n        var t = function() {\n            track.update_all_min_max();\n        };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function(view) {\n    TiledTrack.call(\n        this,\n        view,\n        { content_div: view.top_labeltrack },\n        { resize: false, header: false }\n    );\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 13,\n                hidden: true\n            }\n        ]);\n    },\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\");\n        var new_visible;\n        var tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(\n                this,\n                region,\n                w_scale,\n                options\n            );\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region);\n\n        var seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(\n        supportsByteRanges(\n            Galaxy.root + \"datasets/\" + this.dataset.id + \"/display\"\n        )\n    ).then(function(supportsByteRanges) {\n        if (supportsByteRanges) {\n            self.data_manager = new bbi.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            { key: \"color\", label: \"Color\", type: \"color\" },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(\n    DiagonalHeatmapTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    {\n        display_modes: [\"Heatmap\"],\n\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 500,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        },\n\n        /**\n     * Additional initialization required before drawing track for the first time.\n     */\n        predraw_init: function() {\n            var track = this;\n            return $.getJSON(\n                track.dataset.url(),\n                {\n                    data_type: \"data\",\n                    stats: true,\n                    chrom: track.view.chrom,\n                    low: 0,\n                    high: track.view.max_high,\n                    hda_ldda: track.dataset.get(\"hda_ldda\")\n                },\n                function(result) {\n                    var data = result.data;\n                }\n            );\n        },\n\n        /**\n     * Draw tile.\n     */\n        draw_tile: function(result, ctx, mode, region, w_scale) {\n            // Paint onto canvas.\n            var canvas = ctx.canvas;\n\n            var painter = new painters.DiagonalHeatmapPainter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode\n            );\n\n            painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n            return new Tile(this, region, w_scale, canvas, result.data);\n        }\n    }\n);\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Block color\",\n                type: \"color\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand color\",\n                type: \"color\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true,\n                help:\n                    \"Show the number of items in each bin when drawing summary histogram\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"connector_style\",\n                label: \"Connector style\",\n                type: \"select\",\n                default_value: \"fishbones\",\n                options: [\n                    {\n                        label: \"Line with arrows\",\n                        value: \"fishbone\"\n                    },\n                    { label: \"Arcs\", value: \"arcs\" }\n                ]\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var track = this;\n        var i;\n\n        var line_track_tiles = _.filter(tiles, function(t) {\n            return t instanceof LineTrackTile;\n        });\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), function(\n                inc_features\n            ) {\n                _.each(inc_features, function(feature) {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, function(tile) {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(\n                    all_incomplete_features,\n                    _.map(tile.incomplete_features, function(f) {\n                        return f[0];\n                    })\n                );\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(\n                    tile_incomplete_features,\n                    _.keys(tile.other_tiles_features_drawn)\n                );\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                        data: _.values(tile_incomplete_features)\n                    };\n\n                    var new_canvas = self.view.canvas_manager.new_canvas();\n                    var new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(\n                        tile.canvas.height,\n                        self.get_canvas_height(\n                            features,\n                            tile.mode,\n                            tile.w_scale,\n                            100\n                        )\n                    );\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(\n                        features,\n                        new_canvas_ctx,\n                        tile.mode,\n                        tile.region,\n                        tile.w_scale,\n                        tile.seq_data\n                    );\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(\n                        tile.other_tiles_features_drawn,\n                        all_incomplete_features\n                    );\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters;\n            var f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false;\n\n            var example_feature;\n            var filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (\n                            filter.applies_to(example_feature) &&\n                            filter.min !== filter.max\n                        ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\n                \"title\",\n                \"Set display mode (now: Auto/\" + mode + \")\"\n            );\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context;\n\n        var slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new slotting.FeatureSlotter(\n                level,\n                mode,\n                MAX_FEATURE_DEPTH,\n                function(x) {\n                    return dummy_context.measureText(x);\n                }\n            );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(\n                w_scale,\n                result.data,\n                mode\n            );\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return Math.max(\n                this.min_height_px,\n                dummy_painter.get_required_height(rows_required, canvas_width)\n            );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this;\n        var canvas = ctx.canvas;\n        var tile_low = region.get(\"start\");\n        var tile_high = region.get(\"end\");\n        var left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                mode,\n                region,\n                w_scale\n            );\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [];\n\n        var slots = this.slotters[w_scale].slots;\n        var all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter\n            ? new FilterScaler(this.filters_manager.alpha_filter)\n            : null;\n\n        var filter_height_scaler = this.filters_manager.height_filter\n            ? new FilterScaler(this.filters_manager.height_filter)\n            : null;\n\n        var painter = new this.painter(\n            filtered,\n            tile_low,\n            tile_high,\n            this.config.to_key_value_dict(),\n            mode,\n            filter_alpha_scaler,\n            filter_height_scaler,\n            // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n            ref_seq,\n            // Only the ReadPainer will use this function\n            function(b) {\n                return track.view.get_base_color(b);\n            }\n        );\n\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(\n                ctx,\n                canvas.width,\n                canvas.height,\n                w_scale,\n                slots\n            );\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(\n                track,\n                region,\n                w_scale,\n                canvas,\n                result.data,\n                mode,\n                result.message,\n                all_slotted,\n                feature_mapper,\n                incomplete_features,\n                ref_seq\n            );\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"show_sample_data\",\n                label: \"Show sample data\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_labels\",\n                label: \"Show summary and sample labels\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"summary_height\",\n                label: \"Locus summary height\",\n                type: \"float\",\n                default_value: 20\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                \"Histogram\",\n                region,\n                w_scale\n            );\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view;\n\n            var painter = new this.painter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode,\n                function(b) {\n                    return view.get_base_color(b);\n                }\n            );\n\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\")\n                ? this.dataset.get_metadata(\"sample_names\").length\n                : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var line_track_tiles = _.filter(tiles, function(t) {\n            return t instanceof LineTrackTile;\n        });\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (\n            line_track_tiles.length === 0 &&\n            this.config.get_value(\"show_labels\") &&\n            sample_names &&\n            sample_names.length > 1\n        ) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\")\n                        .text(\"Summary\")\n                        .addClass(\"yaxislabel variant top\")\n                        .css({\n                            \"font-size\": font_size + \"px\",\n                            top:\n                                (this.config.get_value(\"summary_height\") -\n                                    font_size) /\n                                    2 +\n                                \"px\"\n                        })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\")\n                            .html(samples_div_html)\n                            .addClass(\"yaxislabel variant top sample\")\n                            .css({\n                                top: this.config.get_value(\"summary_height\")\n                            })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === \"Squish\" ? 5 : 10) + \"px\";\n            $(this.tiles_div)\n                .find(\".sample\")\n                .css({\n                    \"font-size\": font_size,\n                    \"line-height\": font_size\n                });\n            // Color labels to preference color.\n            $(this.tiles_div)\n                .find(\".yaxislabel\")\n                .css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(\n    ReadTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    FeatureTrack.prototype,\n    {\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"block_color\",\n                    label: \"Histogram color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"detail_block_color\",\n                    label: \"Sense strand block color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand block color\",\n                    type: \"color\",\n                    default_value: \"#DDDDDD\"\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Histogram minimum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Histogram maximum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 0,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        }\n    }\n);\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = function(template, view, container) {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexport default {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n"]}