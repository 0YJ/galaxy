{"version":3,"sources":["viz/trackster/tracks.js"],"names":["DATA_LOADING","TILE_CACHE_SIZE","DATA_CACHE_SIZE","CONTINUOUS_DATA_MODES","Math","round","num","val","supportsByteRanges","url","places","$","ajax","type","beforeSend","xhr","setRequestHeader","success","result","status","promise","resolve","_","extend","html_elt_js_obj_dict","is_container","element","obj","attr","moveable","handle_class","container_selector","element_js_obj","relative","e","d","this","child","container","top","bottom","parent","children","parents","length","position","outerHeight","cur_container","offsetY","remove_drawable","this_obj","add_drawable_before","insertAfter","add_drawable","i","get","is","find","prepend","hasClass","append","move_drawable","deltaY","bind","removeClass","DATA_NOCONVERTER","MAX_FEATURE_DEPTH","Drawable","view","obj_dict","id_counter","id","drag_handle_class","is_overview","action_icons","config","from_models_and_saved_values","prefs","name","config_onchange","on","container_div","get_value","header_div","header","header_view","_viz_views2","default","TrackHeaderView","model","$el","icons_div","hover","hide","prototype","css_class","on_click_fn","drawable","toggle_icon","addClass","hide_contents","title","_config2","ConfigSettingCollectionView","render_in_modal","remove","config_params","key","label","default_value","hidden","init","changed","can_draw","enabled","request_draw","_draw","options","to_dict","set_name","new_name","old_name","set_value","revert_name","update_intro_div","build_container_div","update_icons","show_contents","get_drawables","DrawableCollection","obj_type","unpack_drawables","drawables_array","object_from_template","drawables","dictified_drawables","push","to_key_value_dict","other","index","indexOf","splice","replace_drawable","old_drawable","new_drawable","update_html","replaceWith","new_position","queue","tracks","get_tracks","track_type","slice","shift","concat","DrawableGroup","content_div","call","filters_manager","appendTo","saved_filters_managers","_filters2","FiltersManager","after","parent_div","old_manager","setup_multitrack_filtering","filters","group","show_composite_track","action_icons_def","clear_filters","_restore_filter_managers","visible","tiles_div","show","clear_tile_cache","toggle","num_drawables","filters_icon","composite_icon","get_type","a_type","can_composite","FeatureTrack","num_feature_tracks","j","shared_filters","filter","remove_all","new_filter","NumberFilter","init_filters","add_filter","each","composite_track","CompositeTrack","Backbone","initialize","stand_alone","undefined","label_tracks","min_separation","load_chroms_deferred","canvas_manager","reset","View","chrom","render","vis_id","dbkey","tracks_to_be_redrawn","max_low","max_high","zoom_factor","top_container","has_changes","browser_content_div","top_labeltrack","ownerDocument","ConfigSettingCollection","nav_container","overview_viewport","overview_close","overview_highlight","overview_box_background","nav_controls","chrom_select","submit_nav","requested_redraw","location_span","nav_input","css","autocomplete","source","parent_element","bottom_container","feature_search_deferreds","all_features","response","value","viewport_container","minLength","text","intro_div","click","zo_link","select_datasets","zoom_in","track","prependTo","nav","overview","overview_box","current_x","delta_chrom","move_delta","default_overview_height","height","clientX","current_height","offsetX","keyCode","which","delta","scrollTop","new_scroll","stopPropagation","tooltip","placement","low","high","left","min","width","focus","span","update_location","map","pageX","term","dataset_features","max","when","apply","done","feature","hidden_input","window","resize_timer","clearTimeout","zoom_out","zi_link","document","redraw","load_chroms","get_base_color","base","trigger_navigate","trigger","delay","self","reset_overview","chrom_data","Deferred","clientY","root","dataType","reference","add_label_track","ref_track","reference_track","error","alert","proxy","then","change_chrom","abs","startX","offset","chrom_start_index","old_low","request_redraw","LabelTrack","resize_window","toLowerCase","TracksterView","new_chrom","new_low","new_high","timer","setTimeout","move_fraction","current_chrom_span","_util2","commatize","url_parms","data","ReferenceTrack","chrom_info","html","len","chrom_option","label_track","prev_chroms","start_index","track_list","track_options","found","grep","v","ceil","resolution_px_b","min_width_px","left_px","width_px","requestAnimationFrame","go_to","str","chrom_pos","point","cur_center","parseInt","fraction","resize_viewport","data_fetch","redraw_on_move_fn","overview_drawable","postdraw_actions","ToolParameterView","to","param_div","html_div","_redraw","floor","tool","select","run_on_region_button","run_on_dataset_button","run_on_dataset","new_half","track_data","Galaxy","body","buttons","Close","region","start","target_dataset_id","action","tool_id","regions","toJSON","set_overview","dataset","current_track","new_track","track_name","hda_ldda","init_for_tool_data","set_filters_manager","JSON","stringify","contentType","interval","success_fn","tool_state","set","remove_inputs","state_dict","get_inputs_dict","success_callback","events","change :input","FilterScaler","gen_val","param","parseFloat","update_value","update_event","html_elt","target","TracksterToolView","Tile","predisplay_actions","set_visible","FeatureTrackTile","incomplete_features","seq_data","keydown","param_view","run_tool_row","run_on_region","is_visible","update_params","params","run","modal","_visualization2","GenomeRegion","end","url_params","tool_region_and_parameters_str","insertBefore","constructor","change_mode","mode","copy","Track","set_dataset","_data2","Dataset","ss_deferred","ServerStateDeferred","ajax_settings","genome","chroms_info","data_mode_compatible","can_subset","go","message","default_val","_painters2","Scaler","feature_data","Number","MAX_VALUE","w_scale","canvas","stale","LineTrackTile","all_slotted","feature_mapper","bookmarked_regions","has_icons","from_str","other_tiles_features_drawn","init_deferred","Model","retry","data_query_wait","data_manager","msg_elt","Genome","data_and_mode_compatible","min_height_px","max_height_px","resize","add_resize_handle","predraw_init","getJSON","stats","max_value","TiledTrack","cancel_fn","unbind","left_offset","regions_to_use","view_region","elt","dynamic_tool_div","tool_view","location","href","slotters","Collection","No","Yes","ok_fn","on_resize","in_handle","in_drag","drag_control","min_value","new_mode","new_height","original_height","tile_cache","clear","visible_height_px","before_draw","LineTrack","ReadTrack","VariantTrack","show_message","msg_html","clear_after","range","tile_region","tile_index","tile_promise","draw_helper","tile_promises","kind","_add_yaxis_label","pref_name","MIN_SQUISH_VIEW_WIDTH","on_change","valid_chroms","DEFAULT_DATA_QUERY_WAIT","num_cols","on_finish","tiles","t","line_track_tiles","data_type","tile","force","mean","sd","icons_present","set_default_value","_get_drawables","TracksterTool","Cache","is_tile","show_tile","get_tile_data","overlay_div","max_rows","tile_drawn","update_auto_mode","drawing_modes","drawing_heights","get_canvas_height","tile_low","tile_high","set_min_max","ctx","translate","globalAlpha","set_elt","_draw_line_track_tile","mode_icon","tile_element","filters_available","tools_icon","param_space_viz_icon","_gen_tile_cache_key","region_str","resolution","dataset_type","entry","tile_width","dataset_check_type","tickDistance","screenPosition","new_div","new_val","help_text","union","display_mode","get_elt","o","data_mode","m","init_deferreds","tile_data","get_data","data_url_extra_params","is_deferred","subset_entry","new_canvas","max_height","getContext","draw_tile","canvas_width","LinePainter","draw","ref_seq","cur_visible","new_visible","str_len","track_height","build_config_params","toString","values","join","extra_info","log","painter","start_end_dct","display_modes","help","set_painter_from_config","all_incomplete_features","visible_height","tile_incomplete_features","new_canvas_ctx","show_group","update_all_min_max","show_more_rows_icon","incremental_slots","dummy_context","slotter","get_mode","char_width_px","data_url","GenomeReferenceDataManager","dummy_painter","hide_feature","filtered","subset","filter_alpha_scaler","font","filter_height_scaler","textAlign","c","fillText","_bbiDataManager2","BBIDataManager","summary_draw_height","DiagonalHeatmapTrack","num_samples","deferreds","get_metadata","sample_names","DiagonalHeatmapPainter","VcfTrack","drawable_type","template","ArcLinkedFeaturePainter","pluck","inc_features","omit","f","keys","size","features","drawImage","new_tile","update_ui_elt","example_feature","applies_to","level","_slotting2","FeatureSlotter","x","measureText","slot_features","rows_required","get_required_height","cur_tile","slots","flen","update_attrs","keep","alpha_filter","height_filter","b","fillStyle","manager","default_font","draw_results","translation","VariantPainter","match","fetch","font_size","font-size","samples_div_html","line-height","ReadPainter","addable_objects"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport visualization from \"viz/visualization\";\nimport viz_views from \"viz/viz_views\";\nimport util from \"viz/trackster/util\";\nimport slotting from \"viz/trackster/slotting\";\nimport painters from \"viz/trackster/painters\";\nimport filters_mod from \"viz/trackster/filters\";\nimport data from \"mvc/dataset/data\";\nimport tools_mod from \"mvc/tool/tools\";\nimport config_mod from \"utils/config\";\nimport bbi from \"viz/bbi-data-manager\";\nimport \"ui/editable-text\";\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = function(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = function(\n    element,\n    handle_class,\n    container_selector,\n    element_js_obj\n) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element\n        .bind(\"drag\", { handle: \".\" + handle_class, relative: true }, function(\n            e,\n            d\n        ) {\n            var element = $(this),\n                parent = $(this).parent(),\n                // Only sorting amongst tracks and groups.\n                children = parent.children(\".track,.group\"),\n                this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n                child,\n                container,\n                top,\n                bottom,\n                i;\n\n            //\n            // Enable three types of dragging: (a) out of container; (b) into container;\n            // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n            //\n\n            // Handle dragging out of container.\n            container = $(this).parents(container_selector);\n            if (container.length !== 0) {\n                top = container.position().top;\n                bottom = top + container.outerHeight();\n                var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                if (d.offsetY < top) {\n                    // Moving above container.\n                    $(this).insertBefore(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable_before(\n                        this_obj,\n                        cur_container\n                    );\n                    return;\n                } else if (d.offsetY > bottom) {\n                    // Moving below container.\n                    $(this).insertAfter(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle dragging into container. Child is appended to container's content_div.\n            container = null;\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                top = child.position().top;\n                bottom = top + child.outerHeight();\n                // Dragging into container if child is a container and offset is inside container.\n                if (\n                    child.is(container_selector) &&\n                    this !== child.get(0) &&\n                    d.offsetY >= top &&\n                    d.offsetY <= bottom\n                ) {\n                    // Append/prepend based on where offsetY is closest to and return.\n                    if (d.offsetY - top < bottom - d.offsetY) {\n                        child.find(\".content-div\").prepend(this);\n                    } else {\n                        child.find(\".content-div\").append(this);\n                    }\n                    // Update containers. Object may not have container if it is being moved quickly.\n                    if (this_obj.container) {\n                        this_obj.container.remove_drawable(this_obj);\n                    }\n                    html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(\n                        this_obj\n                    );\n                    return;\n                }\n            }\n\n            // Handle sibling movement, aka sorting.\n\n            // Determine new position\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                if (\n                    d.offsetY < child.position().top &&\n                    // Cannot move tracks above reference track or intro div.\n                    !(\n                        child.hasClass(\"reference-track\") ||\n                        child.hasClass(\"intro\")\n                    )\n                ) {\n                    break;\n                }\n            }\n\n            // If not already in the right place, move. Need\n            // to handle the end specially since we don't have\n            // insert at index\n            if (i === children.length) {\n                if (this !== children.get(i - 1)) {\n                    parent.append(this);\n                    html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                        this_obj,\n                        i\n                    );\n                }\n            } else if (this !== children.get(i)) {\n                $(this).insertBefore(children.get(i));\n                // Need to adjust insert position if moving down because move is changing\n                // indices of all list items.\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                    this_obj,\n                    d.deltaY > 0 ? i - 1 : i\n                );\n            }\n        })\n        .bind(\"dragstart\", function() {\n            $(this).addClass(\"dragging\");\n        })\n        .bind(\"dragend\", function() {\n            $(this).removeClass(\"dragging\");\n        });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar // Padding at the top of tracks for error messages\n    ERROR_PADDING = 20,\n    // Maximum number of rows un a slotted track\n    MAX_FEATURE_DEPTH = 100,\n    // Minimum width for window for squish to be used.\n    MIN_SQUISH_VIEW_WIDTH = 12000,\n    // Number of pixels per tile, not including left offset.\n    TILE_SIZE = 400,\n    DEFAULT_DATA_QUERY_WAIT = 5000,\n    // Maximum number of chromosomes that are selectable at any one time.\n    MAX_CHROMS_SELECTABLE = 100,\n    DATA_ERROR = \"Cannot display dataset due to an error. \",\n    DATA_NOCONVERTER =\n        \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n    DATA_NONE = \"No data for this chrom/contig.\",\n    DATA_PENDING =\n        \"Preparing data. This can take a while for a large dataset. \" +\n        \"If the visualization is saved and closed, preparation will continue in the background.\",\n    DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n    DATA_LOADING = \"Loading data...\",\n    DATA_OK = \"Ready for display\",\n    TILE_CACHE_SIZE = 10,\n    DATA_CACHE_SIZE = 20,\n    // Numerical/continuous data display modes.\n    CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n        this.config_params,\n        obj_dict.prefs\n    );\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            function() {\n                icons_div.show();\n            },\n            function() {\n                icons_div.hide();\n            }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if (drawable.config.get_value(\"content_visible\")) {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle-expand\")\n                    .removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value(\"content_visible\", false);\n            } else {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle\")\n                    .removeClass(\"toggle-expand\");\n                drawable.config.set_value(\"content_visible\", true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal(\"Configure Track\");\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n        {\n            key: \"content_visible\",\n            type: \"bool\",\n            default_value: true,\n            hidden: true\n        }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(\n                drawables_array[i],\n                this.view,\n                this\n            );\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(\n                    new_drawable.container_div\n                );\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0),\n            tracks = [],\n            drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\")\n        .addClass(\"content-div\")\n        .attr(\"id\", \"group_\" + this.id + \"_content_div\")\n        .appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(\n            this,\n            obj_dict.filters\n        );\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(\n    DrawableGroup.prototype,\n    Drawable.prototype,\n    DrawableCollection.prototype,\n    {\n        action_icons_def: [\n            Drawable.prototype.action_icons_def[0],\n            Drawable.prototype.action_icons_def[1],\n            // Replace group with composite track.\n            {\n                name: \"composite_icon\",\n                title: \"Show composite track\",\n                css_class: \"layers-stack\",\n                on_click_fn: function(group) {\n                    $(\".tooltip\").remove();\n                    group.show_composite_track();\n                }\n            },\n            // Toggle track filters.\n            {\n                name: \"filters_icon\",\n                title: \"Filters\",\n                css_class: \"ui-slider-050\",\n                on_click_fn: function(group) {\n                    // TODO: update Tooltip text.\n                    if (group.filters_manager.visible()) {\n                        // Hiding filters.\n                        group.filters_manager.clear_filters();\n                        group._restore_filter_managers();\n                        // TODO: maintain current filter by restoring and setting saved manager's\n                        // settings to current/shared manager's settings.\n                        // TODO: need to restore filter managers when moving drawable outside group.\n                    } else {\n                        // Showing filters.\n                        group.setup_multitrack_filtering();\n                        group.request_draw({ clear_tile_cache: true });\n                    }\n                    group.filters_manager.toggle();\n                }\n            },\n            Drawable.prototype.action_icons_def[2]\n        ],\n\n        build_container_div: function() {\n            var container_div = $(\"<div/>\")\n                .addClass(\"group\")\n                .attr(\"id\", \"group_\" + this.id);\n            if (this.container) {\n                this.container.content_div.append(container_div);\n            }\n            return container_div;\n        },\n\n        hide_contents: function() {\n            this.tiles_div.hide();\n        },\n\n        show_contents: function() {\n            // Show the contents div and labels (if present)\n            this.tiles_div.show();\n            // Request a redraw of the content\n            this.request_draw();\n        },\n\n        update_icons: function() {\n            //\n            // Handle update when there are no tracks.\n            //\n            var num_drawables = this.drawables.length;\n            if (num_drawables === 0) {\n                this.action_icons.composite_icon.hide();\n                this.action_icons.filters_icon.hide();\n            } else if (num_drawables === 1) {\n                this.action_icons.composite_icon.toggle(\n                    this.drawables[0] instanceof CompositeTrack\n                );\n                this.action_icons.filters_icon.hide();\n            } else {\n                // There are 2 or more tracks.\n\n                //\n                // Determine if a composite track can be created. Current criteria:\n                // (a) all tracks are line tracks;\n                //      OR\n                // FIXME: this is not enabled right now because it has not been well tested:\n                // (b) there is a single FeatureTrack.\n                //\n\n                // All tracks the same?\n                var i,\n                    j,\n                    drawable,\n                    same_type = true,\n                    a_type = this.drawables[0].get_type(),\n                    num_feature_tracks = 0;\n                for (i = 0; i < num_drawables; i++) {\n                    drawable = this.drawables[i];\n                    if (drawable.get_type() !== a_type) {\n                        can_composite = false;\n                        break;\n                    }\n                    if (drawable instanceof FeatureTrack) {\n                        num_feature_tracks++;\n                    }\n                }\n\n                if (same_type && this.drawables[0] instanceof LineTrack) {\n                    this.action_icons.composite_icon.show();\n                } else {\n                    this.action_icons.composite_icon.hide();\n                    $(\".tooltip\").remove();\n                }\n\n                //\n                // Set up group-level filtering and update filter icon.\n                //\n                if (\n                    num_feature_tracks > 1 &&\n                    num_feature_tracks === this.drawables.length\n                ) {\n                    //\n                    // Find shared filters.\n                    //\n                    var shared_filters = {},\n                        filter;\n\n                    // Init shared filters with filters from first drawable.\n                    drawable = this.drawables[0];\n                    for (\n                        j = 0;\n                        j < drawable.filters_manager.filters.length;\n                        j++\n                    ) {\n                        filter = drawable.filters_manager.filters[j];\n                        shared_filters[filter.name] = [filter];\n                    }\n\n                    // Create lists of shared filters.\n                    for (i = 1; i < this.drawables.length; i++) {\n                        drawable = this.drawables[i];\n                        for (\n                            j = 0;\n                            j < drawable.filters_manager.filters.length;\n                            j++\n                        ) {\n                            filter = drawable.filters_manager.filters[j];\n                            if (filter.name in shared_filters) {\n                                shared_filters[filter.name].push(filter);\n                            }\n                        }\n                    }\n\n                    //\n                    // Create filters for shared filters manager. Shared filters manager is group's\n                    // manager.\n                    //\n                    this.filters_manager.remove_all();\n                    var filters, new_filter, min, max;\n                    for (var filter_name in shared_filters) {\n                        filters = shared_filters[filter_name];\n                        if (filters.length === num_feature_tracks) {\n                            // Add new filter.\n                            // FIXME: can filter.copy() be used?\n                            new_filter = new filters_mod.NumberFilter({\n                                name: filters[0].name,\n                                index: filters[0].index\n                            });\n                            this.filters_manager.add_filter(new_filter);\n                        }\n                    }\n\n                    // Show/hide icon based on filter availability.\n                    this.action_icons.filters_icon.toggle(\n                        this.filters_manager.filters.length > 0\n                    );\n                } else {\n                    this.action_icons.filters_icon.hide();\n                }\n            }\n        },\n\n        /**\n     * Restore individual track filter managers.\n     */\n        _restore_filter_managers: function() {\n            for (var i = 0; i < this.drawables.length; i++) {\n                this.drawables[i].filters_manager = this.saved_filters_managers[\n                    i\n                ];\n            }\n            this.saved_filters_managers = [];\n        },\n\n        /**\n     *\n     */\n        setup_multitrack_filtering: function() {\n            // Save tracks' managers and set up shared manager.\n            if (this.filters_manager.filters.length > 0) {\n                // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n                this.saved_filters_managers = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    var drawable = this.drawables[i];\n                    this.saved_filters_managers.push(drawable.filters_manager);\n                    drawable.filters_manager = this.filters_manager;\n                }\n\n                //TODO: hide filters icons for each drawable?\n            }\n            this.filters_manager.init_filters();\n        },\n\n        /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n        show_composite_track: function() {\n            var composite_track = new CompositeTrack(this.view, this.view, {\n                name: this.config.get_value(\"name\"),\n                drawables: this.drawables\n            });\n            var index = this.container.replace_drawable(\n                this,\n                composite_track,\n                true\n            );\n            composite_track.request_draw();\n        },\n\n        add_drawable: function(drawable) {\n            DrawableCollection.prototype.add_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        remove_drawable: function(drawable) {\n            DrawableCollection.prototype.remove_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        to_dict: function() {\n            // If filters are visible, need to restore original filter managers before converting to dict.\n            if (this.filters_manager.visible()) {\n                this._restore_filter_managers();\n            }\n\n            var obj_dict = extend(\n                DrawableCollection.prototype.to_dict.call(this),\n                { filters: this.filters_manager.to_dict() }\n            );\n\n            // Setup multi-track filtering again.\n            if (this.filters_manager.visible()) {\n                this.setup_multitrack_filtering();\n            }\n\n            return obj_dict;\n        },\n\n        request_draw: function(options) {\n            _.each(this.drawables, function(d) {\n                d.request_draw(options);\n            });\n        }\n    }\n);\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone =\n            obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager(\n            this.container.get(0).ownerDocument\n        );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                }\n            ],\n            { name: obj_dict.name }\n        );\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container,\n            view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\")\n            .addClass(\"top-container\")\n            .appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\")\n            .addClass(\"content\")\n            .appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\")\n            .addClass(\"bottom-container\")\n            .appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\")\n            .addClass(\"top-labeltrack\")\n            .appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\")\n            .addClass(\"viewport-container\")\n            .attr(\"id\", \"viewport-container\")\n            .appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\")\n            .addClass(\"intro\")\n            .appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\")\n            .text(\"Add Datasets to Visualization\")\n            .addClass(\"action-button\")\n            .appendTo(this.intro_div)\n            .click(function() {\n                visualization.select_datasets({ dbkey: view.dbkey }, function(\n                    tracks\n                ) {\n                    _.each(tracks, function(track) {\n                        view.add_drawable(\n                            object_from_template(track, view, view)\n                        );\n                    });\n                });\n            });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\")\n            .addClass(\"trackster-nav-container\")\n            .prependTo(this.top_container);\n        this.nav = $(\"<div/>\")\n            .addClass(\"trackster-nav\")\n            .appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\")\n            .addClass(\"overview\")\n            .appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\")\n            .addClass(\"overview-viewport\")\n            .appendTo(this.overview);\n        this.overview_close = $(\"<a/>\")\n            .attr(\"title\", \"Close overview\")\n            .addClass(\"icon-button overview-close tooltip\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\")\n            .addClass(\"overview-highlight\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\")\n            .addClass(\"overview-boxback\")\n            .appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\")\n            .addClass(\"overview-box\")\n            .appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\")\n            .addClass(\"nav-controls\")\n            .appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\")\n            .attr({ name: \"chrom\" })\n            .addClass(\"chrom-nav\")\n            .append(\"<option value=''>Loading</option>\")\n            .appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (\n                e.type === \"focusout\" ||\n                (e.keyCode || e.which) === 13 ||\n                (e.keyCode || e.which) === 27\n            ) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\")\n            .addClass(\"nav-input\")\n            .hide()\n            .bind(\"keyup focusout\", submit_nav)\n            .appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\")\n            .addClass(\"location\")\n            .attr(\"title\", \"Click to change location\")\n            .tooltip({ placement: \"bottom\" })\n            .appendTo(this.nav_controls);\n        this.location_span.click(function() {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [],\n                        feature_search_deferreds = $.map(\n                            view.get_tracks(FeatureTrack),\n                            function(t) {\n                                return t.data_manager\n                                    .search_features(request.term)\n                                    .success(function(dataset_features) {\n                                        all_features = all_features.concat(\n                                            dataset_features\n                                        );\n                                    });\n                            }\n                        );\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(function() {\n                        response(\n                            $.map(all_features, function(feature) {\n                                return {\n                                    label: feature[0],\n                                    value: feature[1]\n                                };\n                            })\n                        );\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\")\n                .attr(\"type\", \"hidden\")\n                .val(this.vis_id)\n                .appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-out\")\n            .attr(\"title\", \"Zoom out\")\n            .tooltip({ placement: \"bottom\" })\n            .click(function() {\n                view.zoom_out();\n            })\n            .appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-in\")\n            .attr(\"title\", \"Zoom in\")\n            .tooltip({ placement: \"bottom\" })\n            .click(function() {\n                view.zoom_in();\n            })\n            .appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", function() {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function(e) {\n            $(this)\n                .find(\"input\")\n                .trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function(e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box\n            .bind(\"dragstart\", function(e, d) {\n                this.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var delta = d.offsetX - this.current_x;\n                this.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.max_high - view.max_low)\n                );\n                view.move_delta(-delta_chrom);\n            });\n\n        this.overview_close.click(function() {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container\n            .bind(\"draginit\", function(e, d) {\n                // Disable interaction if started in scrollbar (for webkit)\n                if (e.clientX > view.viewport_container.width() - 16) {\n                    return false;\n                }\n            })\n            .bind(\"dragstart\", function(e, d) {\n                d.original_low = view.low;\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var container = $(this);\n                var delta = d.offsetX - d.current_x;\n                var new_scroll =\n                    container.scrollTop() - (e.clientY - d.current_height);\n                container.scrollTop(new_scroll);\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.high - view.low)\n                );\n                view.move_delta(delta_chrom);\n            });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack\n            .bind(\"dragstart\", function(e, d) {\n                return $(\"<div/>\")\n                    .addClass(\"zoom-area\")\n                    .css(\n                        \"height\",\n                        view.browser_content_div.height() +\n                            view.top_labeltrack.height() +\n                            1\n                    )\n                    .appendTo($(this));\n            })\n            .bind(\"drag\", function(e, d) {\n                $(d.proxy).css({\n                    left:\n                        Math.min(e.pageX, d.startX) -\n                        view.container.offset().left,\n                    width: Math.abs(e.pageX - d.startX)\n                });\n                var min =\n                        Math.min(e.pageX, d.startX) -\n                        view.container.offset().left,\n                    max =\n                        Math.max(e.pageX, d.startX) -\n                        view.container.offset().left,\n                    span = view.high - view.low,\n                    width = view.viewport_container.width();\n                view.update_location(\n                    Math.round(min / width * span) + view.low,\n                    Math.round(max / width * span) + view.low\n                );\n            })\n            .bind(\"dragend\", function(e, d) {\n                var min = Math.min(e.pageX, d.startX),\n                    max = Math.max(e.pageX, d.startX),\n                    span = view.high - view.low,\n                    width = view.viewport_container.width(),\n                    old_low = view.low;\n                view.low = Math.round(min / width * span) + old_low;\n                view.high = Math.round(max / width * span) + old_low;\n                $(d.proxy).remove();\n                view.request_redraw();\n            });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(\n            new LabelTrack(this, { content_div: this.top_labeltrack })\n        );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(function() {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", function() {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(base.toLowerCase() + \"_color\") ||\n            this.config.get_value(\"n_color\")\n        );\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(function() {\n                self.trigger(\n                    \"navigate\",\n                    new_chrom + \":\" + new_low + \"-\" + new_high\n                );\n            }, 500);\n        } else {\n            view.trigger(\n                \"navigate\",\n                new_chrom + \":\" + new_low + \"-\" + new_high\n            );\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text(\n            util.commatize(low) + \" - \" + util.commatize(high)\n        );\n        this.nav_input.val(\n            this.chrom + \":\" + util.commatize(low) + \"-\" + util.commatize(high)\n        );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var view = this,\n            chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function(result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n\n                view.chrom_select.html(\"\");\n                view.chrom_select.append(\n                    $('<option value=\"\">Select Chrom/Contig</option>')\n                );\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            '<option value=\"previous\">Previous ' +\n                                MAX_CHROMS_SELECTABLE +\n                                \"</option>\"\n                        )\n                    );\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            '<option value=\"next\">Next ' +\n                                MAX_CHROMS_SELECTABLE +\n                                \"</option>\"\n                        )\n                    );\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, function(v, i) {\n            return v.chrom === chrom;\n        })[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/),\n            chrom = chrom_pos[0],\n            new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined,\n            new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(function() {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", function() {\n            self.changed();\n        });\n    },\n\n    add_label_track: function(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this,\n            // Either redrawing a single drawable or all view's drawables.\n            track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, function(track) {\n            var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n                return to[0] === track;\n            });\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(function() {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low,\n            high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b =\n            this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px =\n            this.low /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var width_px =\n            (this.high - this.low) /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box\n            .css({\n                left: left_px,\n                width: Math.max(min_width_px, width_px)\n            })\n            .show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\n                \"left\",\n                left_px - (min_width_px - width_px) / 2\n            );\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, function(track_options) {\n            var track = track_options[0],\n                options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, function(label_track) {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function(point, container) {\n        if (\n            this.max_high === 0 ||\n            this.high - this.low <= this.min_separation\n        ) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center =\n                point /\n                    this.viewport_container.width() *\n                    (this.high - this.low) +\n                this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height(\n            this.container.height() -\n                this.top_container.height() -\n                this.bottom_container.height()\n        );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n                content_div: this.overview_viewport\n            }),\n            view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = function() {\n            view.overview_highlight\n                .show()\n                .height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(\n                view.overview_drawable.content_div.height() +\n                    view.overview_box.outerHeight()\n            );\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (\n            options.tool_state !== undefined &&\n            options.tool_state.hidden !== undefined\n        ) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\"),\n            param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\")\n            .addClass(\"param-label\")\n            .text(param.get(\"label\"))\n            .appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\")\n            .addClass(\"param-input\")\n            .html(param.get(\"html\"))\n            .appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this,\n            tool = this.model,\n            parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div\n            .bind(\"drag\", function(e) {\n                e.stopPropagation();\n            })\n            .click(function(e) {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", function(e) {\n                e.stopPropagation();\n            })\n            .keydown(function(e) {\n                e.stopPropagation();\n            });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\")\n            .appendTo(parent_div)\n            .text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(function(param) {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\")\n            .addClass(\"param-row\")\n            .appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on visible region\")\n            .appendTo(run_tool_row);\n        run_on_region_button.click(function() {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(function() {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get(\"track\").dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id\n            },\n            null,\n            // Success callback.\n            function(track_data) {\n                Galaxy.modal.show({\n                    title: tool.get(\"name\") + \" is Running\",\n                    body:\n                        tool.get(\"name\") +\n                        \" is running on the complete dataset. Tool outputs are in dataset's history.\",\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\"),\n            tool = this.model,\n            region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: track.view.low,\n                end: track.view.high\n            }),\n            url_params = {\n                target_dataset_id: track.dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id,\n                regions: [region.toJSON()]\n            },\n            current_track = track,\n            // Set name of track to include tool name, parameters, and region used.\n            track_name =\n                tool.get(\"name\") +\n                current_track.tool_region_and_parameters_str(region),\n            container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(\n                current_track,\n                group,\n                false\n            );\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(\n                current_track.view.content_div.children()[index]\n            );\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(\n            current_track.filters_manager.copy(new_track)\n        );\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(\n            url_params,\n            new_track,\n            // Success callback.\n            function(track_data) {\n                new_track.set_dataset(new data.Dataset(track_data));\n                new_track.tiles_div.text(\"Running job.\");\n                new_track.init();\n            }\n        );\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(function(response) {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(\n                    DATA_CANNOT_RUN_TOOL + response.message\n                );\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (\n        this.filter.high === Number.MAX_VALUE ||\n        this.filter.low === -Number.MAX_VALUE ||\n        this.filter.low === this.filter.high\n    ) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (\n        (parseFloat(feature_data[this.filter.index]) - this.filter.low) /\n        (this.filter.high - this.filter.low)\n    );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = function() {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = function() {};\n\nvar FeatureTrackTile = function(\n    track,\n    region,\n    w_scale,\n    canvas,\n    data,\n    mode,\n    message,\n    all_slotted,\n    feature_mapper,\n    incomplete_features,\n    seq_data\n) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = function() {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset =\n            obj_dict.dataset instanceof Backbone.Model\n                ? obj_dict.dataset\n                : new data.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait =\n        \"data_query_wait\" in obj_dict\n            ? obj_dict.data_query_wait\n            : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager =\n        \"data_manager\" in obj_dict\n            ? obj_dict.data_manager\n            : new visualization.GenomeDataManager({\n                  dataset: this.dataset,\n                  // HACK: simulate 'genome' attributes from view for now.\n                  // View should eventually use Genome object.\n                  genome: new visualization.Genome({\n                      key: view.dbkey,\n                      chroms_info: {\n                          chrom_info: view.chrom_data\n                      }\n                  }),\n                  data_mode_compatible: this.data_and_mode_compatible,\n                  can_subset: this.can_subset\n              });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(\n        this.container_div\n    );\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                } else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(\n                        track.config.get_value(\"name\") +\n                            track.tool_region_and_parameters_str()\n                    );\n                } else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html =\n                    \"<strong>Tool</strong>:\" +\n                    track.tool.get(\"name\") +\n                    \"<br/>\" +\n                    \"<strong>Dataset</strong>:\" +\n                    track.config.get_value(\"name\") +\n                    \"<br/>\" +\n                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                    '<option value=\"cur\">current viewing area</option>' +\n                    '<option value=\"bookmarks\">bookmarks</option>' +\n                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n                    \"</select>\";\n                var cancel_fn = function() {\n                        Galaxy.modal.hide();\n                        $(window).unbind(\"keypress.check_enter_esc\");\n                    },\n                    ok_fn = function() {\n                        var regions_to_use = $(\n                                'select[name=\"regions\"] option:selected'\n                            ).val(),\n                            regions,\n                            view_region = new visualization.GenomeRegion({\n                                chrom: view.chrom,\n                                start: view.low,\n                                end: view.high\n                            }),\n                            bookmarked_regions = _.map($(\".bookmark\"), function(\n                                elt\n                            ) {\n                                return new visualization.GenomeRegion({\n                                    from_str: $(elt)\n                                        .children(\".position\")\n                                        .text()\n                                });\n                            });\n\n                        // Get regions for visualization.\n                        if (regions_to_use === \"cur\") {\n                            // Use only current region.\n                            regions = [view_region];\n                        } else if (regions_to_use === \"bookmarks\") {\n                            // Use only bookmarks.\n                            regions = bookmarked_regions;\n                        } else {\n                            // Use both current region and bookmarks.\n                            regions = [view_region].concat(bookmarked_regions);\n                        }\n\n                        Galaxy.modal.hide();\n\n                        // Go to visualization.\n                        window.location.href =\n                            Galaxy.root +\n                            \"visualization/sweepster\" +\n                            \"?\" +\n                            $.param({\n                                dataset_id: track.dataset.id,\n                                hda_ldda: track.dataset.get(\"hda_ldda\"),\n                                regions: JSON.stringify(\n                                    new Backbone.Collection(regions).toJSON()\n                                )\n                            });\n                    },\n                    check_enter_esc = function(e) {\n                        if ((e.keyCode || e.which) === 27) {\n                            // Escape key\n                            cancel_fn();\n                        } else if ((e.keyCode || e.which) === 13) {\n                            // Enter key\n                            ok_fn();\n                        }\n                    };\n\n                // show dialog\n                Galaxy.modal.show({\n                    title:\n                        \"Visualize tool parameter space and output from different parameter settings?\",\n                    body: html,\n                    buttons: { No: cancel_fn, Yes: ok_fn }\n                });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function() {\n        return $(\"<div/>\")\n            .addClass(\"track\")\n            .attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(\n            function() {\n                if (track.config.get_value(\"content_visible\")) {\n                    in_handle = true;\n                    drag_control.show();\n                }\n            },\n            function() {\n                in_handle = false;\n                if (!in_drag) {\n                    drag_control.hide();\n                }\n            }\n        );\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control\n            .hide()\n            .bind(\"dragstart\", function(e, d) {\n                in_drag = true;\n                d.original_height = $(track.content_div).height();\n            })\n            .bind(\"drag\", function(e, d) {\n                var new_height = Math.min(\n                    Math.max(d.original_height + d.deltaY, track.min_height_px),\n                    track.max_height_px\n                );\n                $(track.tiles_div).css(\"height\", new_height);\n                track.visible_height_px =\n                    track.max_height_px === new_height ? 0 : new_height;\n                track.on_resize();\n            })\n            .bind(\"dragend\", function(e, d) {\n                track.tile_cache.clear();\n                in_drag = false;\n                if (!in_handle) {\n                    drag_control.hide();\n                }\n                track.config.set_value(\"height\", track.visible_height_px);\n                track.changed();\n            })\n            .appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\")\n            .addClass(\"message\")\n            .html(msg_html)\n            .appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\")\n            .addClass(\"tiles\")\n            .appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred(),\n            params = {\n                hda_ldda: track.dataset.get(\"hda_ldda\"),\n                data_type: this.dataset_check_type,\n                chrom: track.view.chrom,\n                retry: retry\n            };\n        $.getJSON(this.dataset.url(), params, function(result) {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"View error\")\n                            .click(function() {\n                                Galaxy.modal.show({\n                                    title: \"Trackster Error\",\n                                    body: \"<pre>\" + result.message + \"</pre>\",\n                                    buttons: {\n                                        Close: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            })\n                    );\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"Try again\")\n                            .click(function() {\n                                track.init(true);\n                            })\n                    );\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (\n                result === \"no data\" ||\n                (result.data !== undefined &&\n                    (result.data === null || result.data.length === 0))\n            ) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(function() {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\n                        \"height\",\n                        track.visible_height_px + \"px\"\n                    );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(function() {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            function(result) {\n                var data = result.data;\n\n                // Tracks may not have stat data either because there is no data or data is not yet ready.\n                if (data && data.min !== undefined && data.max !== undefined) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min,\n                        max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update config, prefs\n                    track.config.set_default_value(\"min_value\", min_value);\n                    track.config.set_default_value(\"max_value\", max_value);\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(\n        this,\n        \"filters\" in obj_dict ? obj_dict.filters : null\n    );\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool\n        ? new TracksterTool(\n              _.extend(obj_dict.tool, {\n                  track: this,\n                  tool_state: obj_dict.tool_state\n              })\n          )\n        : null;\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\")\n        .addClass(\"tiles\")\n        .appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\")\n        .addClass(\"overlay\")\n        .appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title:\n                \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            function(result) {\n                var data = result.data;\n                if (\n                    isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                    isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min,\n                        max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update the prefs\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\n            \"title\",\n            \"Set display mode (now: \" + track.mode + \")\"\n        );\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return w_scale + \"_\" + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after,\n            low = this.view.low,\n            high = this.view.high,\n            range = high - low,\n            width = this.view.container.width(),\n            w_scale = this.view.resolution_px_b,\n            resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n            tile_width = Math.floor(TILE_SIZE * resolution),\n            // Index of first tile that overlaps visible region.\n            tile_index = Math.floor(low / tile_width),\n            tile_region,\n            tile_promise,\n            tile_promises = [],\n            tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(function(tile) {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div\n                .children(\".remove\")\n                .removeClass(\"remove\")\n                .remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(function() {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, function(t) {\n                return t !== null;\n            });\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this,\n            css_class = type === \"max\" ? \"top\" : \"bottom\",\n            text = type === \"max\" ? \"max\" : \"min\",\n            pref_name = type === \"max\" ? \"max_value\" : \"min_value\",\n            label = this.container_div.find(\".yaxislabel.\" + css_class),\n            value = round(track.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change =\n            on_change ||\n            function() {\n                track.request_draw({ clear_tile_cache: true });\n            };\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\")\n                .text(value)\n                .make_text_editable({\n                    num_cols: 12,\n                    on_finish: function(new_val) {\n                        $(\".tooltip\").remove();\n                        track.config.set_value(pref_name, round(new_val, 1));\n                        on_change();\n                    },\n                    help_text: \"Set \" + text + \" value\"\n                })\n                .addClass(\"yaxislabel \" + css_class)\n                .css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, function(tile) {\n            return tile instanceof LineTrackTile;\n        });\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, function(tile) {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            track._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, function(tile) {\n                return tile.has_icons;\n            });\n\n            if (icons_present) {\n                _.each(tiles, function(tile) {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force,\n            mode = options.mode || this.mode,\n            resolution = 1 / w_scale,\n            // Useful vars.\n            track = this,\n            drawables = this._get_drawables(),\n            key = this._gen_tile_cache_key(w_scale, region),\n            is_tile = function(o) {\n                return o && \"track\" in o;\n            };\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : track.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = function() {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, function(m) {\n                return m === mode;\n            })\n                ? \"Coverage\"\n                : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, function(d) {\n                // Get the track data/promise.\n                return d.data_manager.get_data(\n                    region,\n                    data_mode,\n                    resolution,\n                    track.data_url_extra_params\n                );\n            });\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(\n                    view.reference_track.data_manager.get_data(\n                        region,\n                        mode,\n                        resolution,\n                        view.reference_track.data_url_extra_params\n                    )\n                );\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(function() {\n            var tile_data = get_tile_data(),\n                tracks_data = tile_data,\n                seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (\n                _.find(tile_data, function(d) {\n                    return util.is_deferred(d);\n                })\n            ) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(\n                    track.draw_helper(region, w_scale, options)\n                ).then(function(tile) {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(\n                    tile_data.pop(),\n                    region\n                );\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [],\n                drawing_heights = [];\n\n            _.each(drawables, function(d, i) {\n                var mode = d.mode,\n                    data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(\n                    d.get_canvas_height(data, mode, w_scale, width)\n                );\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas(),\n                tile_low = region.get(\"start\"),\n                tile_high = region.get(\"end\"),\n                all_data_index = 0,\n                width =\n                    Math.ceil((tile_high - tile_low) * w_scale) +\n                    track.left_offset,\n                height = _.max(drawing_heights),\n                tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, function(d, i) {\n                tile = d.draw_tile(\n                    tracks_data[i],\n                    ctx,\n                    drawing_modes[i],\n                    region,\n                    w_scale,\n                    seq_data\n                );\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if (\n            [undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1\n        ) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if (\n            [undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !==\n            -1\n        ) {\n            this.config.set_value(\n                \"max_value\",\n                _.max(\n                    _.map(result.data, function(d) {\n                        return d[1];\n                    })\n                ) || 0\n            );\n        }\n\n        var canvas = ctx.canvas,\n            painter = new painters.LinePainter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode\n            );\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this,\n            tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round(\n            (tile.low -\n                (this.is_overview ? this.view.max_low : this.view.low)) *\n                w_scale\n        );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(\n            this.max_height_px,\n            tile_element.height() - 2\n        );\n\n        // Update height for all tiles based on max height.\n        tile_element\n            .parent()\n            .children()\n            .css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this,\n            region_str = region !== undefined ? region.toString() : \"all\",\n            param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (\n            data.dataset_type === \"bigwig\" ||\n            data.extra_info === \"no_detail\"\n        ) {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view,\n            range = view.high - view.low,\n            tickDistance = Math.floor(\n                Math.pow(10, Math.floor(Math.log(range) / Math.log(10)))\n            ),\n            position = Math.floor(view.low / tickDistance) * tickDistance,\n            width = this.view.container.width(),\n            new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor(\n                (position - view.low) / range * width\n            );\n            new_div.append(\n                $(\"<div/>\")\n                    .addClass(\"pos-label\")\n                    .text(util.commatize(position))\n                    .css({\n                        left: screenPosition\n                    })\n            );\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, function(d) {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    action_icons_def: [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, function(d) {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(function() {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n                name: this.config.get_value(\"name\")\n            }),\n            track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(\n                _.map(this.drawables, function(d) {\n                    return d.config.get_value(\"min_value\");\n                })\n            ),\n            max = _.max(\n                _.map(this.drawables, function(d) {\n                    return d.config.get_value(\"max_value\");\n                })\n            );\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, function(d) {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this,\n            min_value = this.config.get_value(\"min_value\"),\n            max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, function(d) {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1,\n            i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this,\n            t = function() {\n                track.update_all_min_max();\n            };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function(view) {\n    TiledTrack.call(\n        this,\n        view,\n        { content_div: view.top_labeltrack },\n        { resize: false, header: false }\n    );\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 13,\n                hidden: true\n            }\n        ]);\n    },\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\"),\n            new_visible,\n            tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(\n                this,\n                region,\n                w_scale,\n                options\n            );\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region),\n            seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(\n        supportsByteRanges(\n            Galaxy.root + \"datasets/\" + this.dataset.id + \"/display\"\n        )\n    ).then(function(supportsByteRanges) {\n        if (supportsByteRanges) {\n            self.data_manager = new bbi.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            { key: \"color\", label: \"Color\", type: \"color\" },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(\n    DiagonalHeatmapTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    {\n        display_modes: [\"Heatmap\"],\n\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 500,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        },\n\n        /**\n     * Additional initialization required before drawing track for the first time.\n     */\n        predraw_init: function() {\n            var track = this;\n            return $.getJSON(\n                track.dataset.url(),\n                {\n                    data_type: \"data\",\n                    stats: true,\n                    chrom: track.view.chrom,\n                    low: 0,\n                    high: track.view.max_high,\n                    hda_ldda: track.dataset.get(\"hda_ldda\")\n                },\n                function(result) {\n                    var data = result.data;\n                }\n            );\n        },\n\n        /**\n     * Draw tile.\n     */\n        draw_tile: function(result, ctx, mode, region, w_scale) {\n            // Paint onto canvas.\n            var canvas = ctx.canvas,\n                painter = new painters.DiagonalHeatmapPainter(\n                    result.data,\n                    region.get(\"start\"),\n                    region.get(\"end\"),\n                    this.config.to_key_value_dict(),\n                    mode\n                );\n            painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n            return new Tile(this, region, w_scale, canvas, result.data);\n        }\n    }\n);\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Block color\",\n                type: \"color\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand color\",\n                type: \"color\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true,\n                help:\n                    \"Show the number of items in each bin when drawing summary histogram\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"connector_style\",\n                label: \"Connector style\",\n                type: \"select\",\n                default_value: \"fishbones\",\n                options: [\n                    {\n                        label: \"Line with arrows\",\n                        value: \"fishbone\"\n                    },\n                    { label: \"Arcs\", value: \"arcs\" }\n                ]\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var track = this,\n            i,\n            line_track_tiles = _.filter(tiles, function(t) {\n                return t instanceof LineTrackTile;\n            });\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), function(\n                inc_features\n            ) {\n                _.each(inc_features, function(feature) {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, function(tile) {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(\n                    all_incomplete_features,\n                    _.map(tile.incomplete_features, function(f) {\n                        return f[0];\n                    })\n                );\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(\n                    tile_incomplete_features,\n                    _.keys(tile.other_tiles_features_drawn)\n                );\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                            data: _.values(tile_incomplete_features)\n                        },\n                        new_canvas = self.view.canvas_manager.new_canvas(),\n                        new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(\n                        tile.canvas.height,\n                        self.get_canvas_height(\n                            features,\n                            tile.mode,\n                            tile.w_scale,\n                            100\n                        )\n                    );\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(\n                        features,\n                        new_canvas_ctx,\n                        tile.mode,\n                        tile.region,\n                        tile.w_scale,\n                        tile.seq_data\n                    );\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(\n                        tile.other_tiles_features_drawn,\n                        all_incomplete_features\n                    );\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters,\n                f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false,\n                example_feature,\n                filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (\n                            filter.applies_to(example_feature) &&\n                            filter.min !== filter.max\n                        ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\n                \"title\",\n                \"Set display mode (now: Auto/\" + mode + \")\"\n            );\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context,\n            slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new slotting.FeatureSlotter(\n                level,\n                mode,\n                MAX_FEATURE_DEPTH,\n                function(x) {\n                    return dummy_context.measureText(x);\n                }\n            );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(\n                w_scale,\n                result.data,\n                mode\n            );\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return Math.max(\n                this.min_height_px,\n                dummy_painter.get_required_height(rows_required, canvas_width)\n            );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this,\n            canvas = ctx.canvas,\n            tile_low = region.get(\"start\"),\n            tile_high = region.get(\"end\"),\n            left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                mode,\n                region,\n                w_scale\n            );\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [],\n            slots = this.slotters[w_scale].slots,\n            all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter\n                ? new FilterScaler(this.filters_manager.alpha_filter)\n                : null,\n            filter_height_scaler = this.filters_manager.height_filter\n                ? new FilterScaler(this.filters_manager.height_filter)\n                : null,\n            painter = new this.painter(\n                filtered,\n                tile_low,\n                tile_high,\n                this.config.to_key_value_dict(),\n                mode,\n                filter_alpha_scaler,\n                filter_height_scaler,\n                // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                ref_seq,\n                // Only the ReadPainer will use this function\n                function(b) {\n                    return track.view.get_base_color(b);\n                }\n            );\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(\n                ctx,\n                canvas.width,\n                canvas.height,\n                w_scale,\n                slots\n            );\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(\n                track,\n                region,\n                w_scale,\n                canvas,\n                result.data,\n                mode,\n                result.message,\n                all_slotted,\n                feature_mapper,\n                incomplete_features,\n                ref_seq\n            );\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"show_sample_data\",\n                label: \"Show sample data\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_labels\",\n                label: \"Show summary and sample labels\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"summary_height\",\n                label: \"Locus summary height\",\n                type: \"float\",\n                default_value: 20\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                \"Histogram\",\n                region,\n                w_scale\n            );\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view,\n                painter = new this.painter(\n                    result.data,\n                    region.get(\"start\"),\n                    region.get(\"end\"),\n                    this.config.to_key_value_dict(),\n                    mode,\n                    function(b) {\n                        return view.get_base_color(b);\n                    }\n                );\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\")\n                ? this.dataset.get_metadata(\"sample_names\").length\n                : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var line_track_tiles = _.filter(tiles, function(t) {\n            return t instanceof LineTrackTile;\n        });\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (\n            line_track_tiles.length === 0 &&\n            this.config.get_value(\"show_labels\") &&\n            sample_names &&\n            sample_names.length > 1\n        ) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\")\n                        .text(\"Summary\")\n                        .addClass(\"yaxislabel variant top\")\n                        .css({\n                            \"font-size\": font_size + \"px\",\n                            top:\n                                (this.config.get_value(\"summary_height\") -\n                                    font_size) /\n                                    2 +\n                                \"px\"\n                        })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\")\n                            .html(samples_div_html)\n                            .addClass(\"yaxislabel variant top sample\")\n                            .css({\n                                top: this.config.get_value(\"summary_height\")\n                            })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === \"Squish\" ? 5 : 10) + \"px\";\n            $(this.tiles_div)\n                .find(\".sample\")\n                .css({\n                    \"font-size\": font_size,\n                    \"line-height\": font_size\n                });\n            // Color labels to preference color.\n            $(this.tiles_div)\n                .find(\".yaxislabel\")\n                .css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(\n    ReadTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    FeatureTrack.prototype,\n    {\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"block_color\",\n                    label: \"Histogram color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"detail_block_color\",\n                    label: \"Sense strand block color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand block color\",\n                    type: \"color\",\n                    default_value: \"#DDDDDD\"\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Histogram minimum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Histogram maximum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 0,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        }\n    }\n);\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = function(template, view, container) {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexport default {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n"]}