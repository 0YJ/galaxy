{"version":3,"sources":["viz/trackster/tracks.js"],"names":["define","_","visualization","viz_views","util","slotting","painters","filters_mod","data","tools_mod","config_mod","bbi","round","num","places","promise","url","beforeSend","val","supportsByteRanges","$","Deferred","ajax","type","xhr","setRequestHeader","success","result","status","resolve","extend","html_elt_js_obj_dict","is_container","element","obj","moveable","handle_class","container_selector","element_js_obj","this_obj","attr","bind","handle","relative","e","d","child","container","top","bottom","parent","this","children","length","insertAfter","cur_container","remove_drawable","add_drawable","offsetY","insertBefore","add_drawable_before","i","outerHeight","is","get","find","prepend","hasClass","position","removeClass","append","move_drawable","deltaY","MAX_FEATURE_DEPTH","addClass","MIN_SQUISH_VIEW_WIDTH","CONTINUOUS_DATA_MODES","Drawable","view","obj_dict","config","ConfigSettingCollection","id","id_counter","drag_handle_class","set_value","is_overview","action_icons","from_models_and_saved_values","config_params","prefs","header_div","name","config_onchange","header","container_div","build_container_div","header_view","icons_div","model","hide","$el","prototype","action_icons_def","hover","show","on_click_fn","drawable","title","show_contents","toggle_icon","hide_contents","css_class","ConfigSettingCollectionView","collection","key","remove","can_draw","label","default_value","get_value","hidden","init","request_draw","changed","enabled","_draw","old_name","to_dict","set_name","new_name","revert_name","update_icons","call","get_drawables","unpack_drawables","obj_type","DrawableCollection","drawables_array","drawables","object_from_template","options","dictified_drawables","push","to_key_value_dict","index","other","replace_drawable","indexOf","new_drawable","old_drawable","update_html","replaceWith","splice","new_position","queue","get_tracks","track_type","slice","tracks","shift","DrawableGroup","filters_manager","content_div","saved_filters_managers","appendTo","FiltersManager","after","parent_div","old_manager","filters","visible","group","_restore_filter_managers","show_composite_track","clear_filters","tiles_div","setup_multitrack_filtering","clear_tile_cache","toggle","num_drawables","composite_icon","filters_icon","num_feature_tracks","CompositeTrack","j","get_type","a_type","can_composite","FeatureTrack","filter","LineTrack","shared_filters","remove_all","new_filter","NumberFilter","filter_name","add_filter","composite_track","init_filters","label_tracks","each","tracks_to_be_redrawn","TracksterView","Backbone","View","initialize","chrom","requested_redraw","vis_id","dbkey","stand_alone","undefined","parent_element","max_low","top_container","max_high","zoom_factor","browser_content_div","min_separation","has_changes","bottom_container","load_chroms_deferred","render","canvas_manager","viewport_container","CanvasManager","ownerDocument","reset","intro_div","add_tracks_button","select_datasets","track","nav_container","top_labeltrack","overview_box_background","default_overview_height","overview_box","nav_controls","chrom_select","which","keyCode","click","go_to","prependTo","nav","nav_input","location_span","css","overview","select","autocomplete","overview_viewport","source","request","response","all_features","feature_search_deferreds","map","concat","dataset_features","submit_nav","apply","value","minLength","tooltip","placement","hidden_input","zo_link","low","high","zoom_out","zi_link","t","change_chrom","data_manager","term","when","done","feature","zoom_in","pageX","load_chroms","current_x","offsetX","current_height","trigger","clientY","new_scroll","delta_chrom","move_delta","delta","Math","width","overview_close","reset_overview","clientX","original_low","left","max","update_location","scrollTop","min","height","proxy","startX","offset","abs","span","add_label_track","LabelTrack","window","resize_timer","clearTimeout","old_low","request_redraw","update_intro_div","setTimeout","timer","document","redraw","self","base","toLowerCase","text","trigger_navigate","new_chrom","url_parms","new_high","delay","new_low","reference_track","commatize","chrom_data","chrom_info","Galaxy","root","error","alert","reference","ReferenceTrack","ref_track","html","len","chrom_option","next_chroms","chrom_start_index","start_index","then","found","grep","v","chrom_pos","split","str","replace","parseInt","redraw_on_move_fn","move_fraction","fraction","current_chrom_span","data_fetch","on","track_list","label_track","track_options","to","requestAnimationFrame","_redraw","overview_highlight","ceil","resolution_px_b","left_px","cur_center","point","new_half","width_px","resize_viewport","resize_window","set_overview","overview_drawable","dataset","postdraw_actions","copy","tool_state","set","ToolParameterView","TracksterTool","param_div","Tool","defaults","html_div","remove_inputs","state_dict","TracksterToolView","is_visible","change :input","stopPropagation","param","update_value","param_view","target","run_tool_row","run_on_dataset_button","run_on_dataset","keydown","tool","update_params","run_on_region","target_dataset_id","action","set_visible","tool_id","current_track","track_data","modal","body","buttons","Close","region","GenomeRegion","end","url_params","hda_ldda","new_track","change_mode","track_name","tool_region_and_parameters_str","get_inputs_dict","ss_deferred","ajax_settings","constructor","init_for_tool_data","mode","set_filters_manager","go","run","success_callback","inputs","ServerStateDeferred","FilterScaler","Scaler","default_val","dataType","contentType","interval","success_fn","DATA_NOCONVERTER","html_elt","canvas","message","FeatureTrackTile","all_slotted","feature_data","has_icons","Number","MAX_VALUE","incomplete_features","parseFloat","Tile","w_scale","stale","predisplay_actions","LineTrackTile","feature_mapper","seq_data","other_tiles_features_drawn","Track","Model","Dataset","data_url_extra_params","data_query_wait","GenomeDataManager","genome","Genome","data_mode_compatible","data_and_mode_compatible","min_height_px","resize","cancel_fn","view_region","bookmarked_regions","regions_to_use","dataset_id","regions","JSON","check_enter_esc","unbind","set_dataset","start","elt","from_str","drag_control","href","stringify","Collection","toJSON","No","Yes","ok_fn","on_resize","add_resize_handle","in_handle","in_drag","show_message","new_height","original_height","max_height_px","visible_height_px","tile_cache","clear","data_type","retry","msg_elt","msg_html","init_deferred","predraw_init","params","getJSON","dataset_check_type","kind","TiledTrack","valid_chroms","max_value","set_default_value","tool_view","stats","overlay_div","min_value","floor","mean","sd","slotters","filters_available","Cache","left_offset","dynamic_tool_div","isNaN","max_rows","new_mode","mode_icon","_gen_tile_cache_key","set_min_max","before_draw","range","resolution","tools_icon","tile_width","tile_region","tile_promises","tile_promise","tile_index","tiles","clear_after","_add_yaxis_label","on_change","on_finish","TILE_CACHE_SIZE","help_text","line_track_tiles","tile","draw_helper","icons_present","pref_name","ERROR_PADDING","get_mode","make_text_editable","num_cols","new_val","update_auto_mode","_get_drawables","is_tile","o","force","data_mode","tile_data","display_mode","get_elt","drawing_modes","show_tile","get_tile_data","tile_low","all_data_index","m","get_data","tile_drawn","set_elt","is_deferred","subset_entry","pop","_draw_line_track_tile","drawing_heights","tracks_data","get_canvas_height","painter","ctx","tile_high","getContext","draw_tile","globalAlpha","globalCompositeOperation","canvas_width","tile_element","track_height","ref_seq","can_subset","toString","values","join","dataset_type","extra_info","entry","tickDistance","pow","log","show_group","screenPosition","new_div","ReadTrack","init_deferreds","union","visible_height","update_all_min_max","param_space_viz_icon","max_height","data_url","new_visible","subset","char_width_px","manager","default_font","c","str_len","fillStyle","fillText","cur_visible","display_modes","font","textAlign","get_base_color","DiagonalHeatmapTrack","BBIDataManager","DiagonalHeatmapPainter","start_end_dct","set_painter_from_config","all_incomplete_features","pluck","inc_features","tile_incomplete_features","omit","f","new_canvas","draw","new_canvas_ctx","summary_draw_height","help","update_ui_elt","ArcLinkedFeaturePainter","LinkedFeaturePainter","keys","features","drawImage","translate","new_tile","example_feature","applies_to","rows_required","incremental_slots","show_more_rows_icon","slots","dummy_context","slotter","level","hide_feature","FeatureSlotter","x","measureText","filtered","filter_height_scaler","draw_results","dummy_painter","get_required_height","cur_tile","flen","update_attrs","keep","num_samples","filter_alpha_scaler","alpha_filter","height_filter","b","deferreds","VariantTrack","font_size","ReadPainter","get_metadata","match","drawable_type","addable_objects","sample_names","font-size","samples_div_html","line-height","VcfTrack","template"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["define([\n    \"libs/underscore\",\n    \"viz/visualization\",\n    \"viz/viz_views\",\n    \"viz/trackster/util\",\n    \"viz/trackster/slotting\",\n    \"viz/trackster/painters\",\n    \"viz/trackster/filters\",\n    \"mvc/dataset/data\",\n    \"mvc/tool/tools\",\n    \"utils/config\",\n    \"viz/bbi-data-manager\",\n    \"ui/editable-text\",\n], function(_, visualization, viz_views, util, slotting, painters, filters_mod, data, tools_mod, config_mod, bbi) {\n\n\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = function(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = function(element, handle_class, container_selector, element_js_obj) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element.bind( \"drag\", { handle: \".\" + handle_class, relative: true }, function ( e, d ) {\n        var element = $(this),\n            parent = $(this).parent(),\n            // Only sorting amongst tracks and groups.\n            children = parent.children('.track,.group'),\n            this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n            child,\n            container,\n            top,\n            bottom,\n            i;\n\n        //\n        // Enable three types of dragging: (a) out of container; (b) into container;\n        // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n        //\n\n        // Handle dragging out of container.\n        container = $(this).parents(container_selector);\n        if (container.length !== 0) {\n            top = container.position().top;\n            bottom = top + container.outerHeight();\n            var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n            if (d.offsetY < top) {\n                // Moving above container.\n                $(this).insertBefore(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable_before(this_obj, cur_container);\n                return;\n            }\n            else if (d.offsetY > bottom) {\n                // Moving below container.\n                $(this).insertAfter(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle dragging into container. Child is appended to container's content_div.\n        container = null;\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            top = child.position().top;\n            bottom = top + child.outerHeight();\n            // Dragging into container if child is a container and offset is inside container.\n            if ( child.is(container_selector) && this !== child.get(0) &&\n                 d.offsetY >= top && d.offsetY <= bottom ) {\n                // Append/prepend based on where offsetY is closest to and return.\n                if (d.offsetY - top < bottom - d.offsetY) {\n                    child.find(\".content-div\").prepend(this);\n                }\n                else {\n                    child.find(\".content-div\").append(this);\n                }\n                // Update containers. Object may not have container if it is being moved quickly.\n                if (this_obj.container) {\n                    this_obj.container.remove_drawable(this_obj);\n                }\n                html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle sibling movement, aka sorting.\n\n        // Determine new position\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            if ( d.offsetY < child.position().top &&\n                 // Cannot move tracks above reference track or intro div.\n                 !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\")) ) {\n                break;\n            }\n        }\n\n        // If not already in the right place, move. Need\n        // to handle the end specially since we don't have\n        // insert at index\n        if ( i === children.length ) {\n            if ( this !== children.get(i - 1) ) {\n                parent.append(this);\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n            }\n        }\n        else if ( this !== children.get(i) ) {\n            $(this).insertBefore( children.get(i) );\n            // Need to adjust insert position if moving down because move is changing\n            // indices of all list items.\n            html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, (d.deltaY > 0 ? i-1 : i) );\n        }\n    }).bind(\"dragstart\", function() {\n        $(this).addClass('dragging');\n    }).bind(\"dragend\", function() {\n        $(this).removeClass('dragging');\n    });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar\n    // Padding at the top of tracks for error messages\n    ERROR_PADDING = 20,\n    // Maximum number of rows un a slotted track\n    MAX_FEATURE_DEPTH = 100,\n    // Minimum width for window for squish to be used.\n    MIN_SQUISH_VIEW_WIDTH = 12000,\n    // Number of pixels per tile, not including left offset.\n    TILE_SIZE = 400,\n    DEFAULT_DATA_QUERY_WAIT = 5000,\n    // Maximum number of chromosomes that are selectable at any one time.\n    MAX_CHROMS_SELECTABLE = 100,\n    DATA_ERROR = \"Cannot display dataset due to an error. \",\n    DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n    DATA_NONE = \"No data for this chrom/contig.\",\n    DATA_PENDING = \"Preparing data. This can take a while for a large dataset. \" +\n                   \"If the visualization is saved and closed, preparation will continue in the background.\",\n    DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n    DATA_LOADING = \"Loading data...\",\n    DATA_OK = \"Ready for display\",\n    TILE_CACHE_SIZE = 10,\n    DATA_CACHE_SIZE = 20,\n\n    // Numerical/continuous data display modes.\n    CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: 'HEAD',\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) { Drawable.id_counter = 0; }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value('name')) {\n        this.config.set_value('name', obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on('change', this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            function() { icons_div.show(); }, function() { icons_div.hide(); }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if ( drawable.config.get_value('content_visible') ) {\n                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value('content_visible', false);\n            }\n            else {\n                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                drawable.config.set_value('content_visible', true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal('Configure Track');\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: 'name', label: 'Name', type: 'text', default_value: '' },\n        { key: 'content_visible', type: 'bool', default_value: true, hidden: true }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value('content_visible')) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value('name');\n        this.config.set_value('name', new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value('name', this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function () {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0),\n            tracks = [],\n            drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            }\n            else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\").addClass(\"content-div\").attr(\"id\", \"group_\" + this.id + \"_content_div\").appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after( $(\"<div style='clear: both'/>\") );\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if ('drawables' in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if ('filters' in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [\n        Drawable.prototype.action_icons_def[0],\n        Drawable.prototype.action_icons_def[1],\n        // Replace group with composite track.\n        {\n            name: \"composite_icon\",\n            title: \"Show composite track\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(group) {\n                $(\".tooltip\").remove();\n                group.show_composite_track();\n            }\n        },\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(group) {\n                // TODO: update Tooltip text.\n                if (group.filters_manager.visible()) {\n                    // Hiding filters.\n                    group.filters_manager.clear_filters();\n                    group._restore_filter_managers();\n                    // TODO: maintain current filter by restoring and setting saved manager's\n                    // settings to current/shared manager's settings.\n                    // TODO: need to restore filter managers when moving drawable outside group.\n                }\n                else {\n                    // Showing filters.\n                    group.setup_multitrack_filtering();\n                    group.request_draw({ clear_tile_cache: true });\n                }\n                group.filters_manager.toggle();\n            }\n        },\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    build_container_div: function() {\n        var container_div = $(\"<div/>\").addClass(\"group\").attr(\"id\", \"group_\" + this.id);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function () {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        }\n        else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        }\n        else { // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i, j, drawable,\n                same_type = true,\n                a_type = this.drawables[0].get_type(),\n                num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    can_composite = false;\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            }\n            else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {},\n                    filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                var\n                    filters,\n                    new_filter,\n                    min,\n                    max;\n                for (var filter_name in shared_filters) {\n                    filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        new_filter = new filters_mod.NumberFilter( {\n                                        name: filters[0].name,\n                                        index: filters[0].index\n                                        } );\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            }\n            else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value('name'),\n            drawables: this.drawables\n        });\n        var index = this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), { \"filters\": this.filters_manager.to_dict() });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function(options) {\n        _.each(this.drawables, function(d) {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = (obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true);\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager( this.container.get(0).ownerDocument );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values( [\n                { key: 'name', label: 'Name', type: 'text', default_value: '' },\n                { key: 'a_color', label: 'A Color', type: 'color', default_value: \"#FF0000\" },\n                { key: 'c_color', label: 'C Color', type: 'color', default_value: \"#00FF00\" },\n                { key: 'g_color', label: 'G Color', type: 'color', default_value: \"#0000FF\" },\n                { key: 't_color', label: 'T Color', type: 'color', default_value: \"#FF00FF\" },\n                { key: 'n_color', label: 'N Color', type: 'color', default_value: \"#AAAAAA\" }\n            ], { name: obj_dict.name });\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container,\n            view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\").addClass(\"top-container\").appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\").addClass(\"content\").appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\").addClass(\"bottom-container\").appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\").addClass(\"top-labeltrack\").appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\").addClass(\"viewport-container\").attr(\"id\", \"viewport-container\").appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\").addClass(\"intro\").appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\").text(\"Add Datasets to Visualization\").addClass(\"action-button\").appendTo(this.intro_div).click(function () {\n            visualization.select_datasets({ 'dbkey': view.dbkey }, function(tracks) {\n                _.each(tracks, function(track) {\n                    view.add_drawable( object_from_template(track, view, view) );\n                });\n            });\n        });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\").addClass(\"trackster-nav-container\").prependTo(this.top_container);\n        this.nav = $(\"<div/>\").addClass(\"trackster-nav\").appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\").addClass(\"overview\").appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\").addClass(\"overview-viewport\").appendTo(this.overview);\n        this.overview_close = $(\"<a/>\").attr(\"title\", \"Close overview\")\n                                       .addClass(\"icon-button overview-close tooltip\")\n                                       .hide()\n                                       .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\").addClass(\"overview-highlight\").hide().appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\").addClass(\"overview-boxback\").appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\").addClass(\"overview-box\").appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\").addClass(\"nav-controls\").appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\").attr({ \"name\": \"chrom\"}).addClass('chrom-nav').append(\"<option value=''>Loading</option>\").appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27 ) {\n                if ((e.keyCode || e.which) !== 27) { // Not escape key\n                    view.go_to( $(this).val() );\n                }\n                $(this).hide();\n                $(this).val('');\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\").addClass(\"nav-input\").hide().bind(\"keyup focusout\", submit_nav).appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\").addClass(\"location\").attr('title', 'Click to change location').tooltip( { placement: 'bottom' } ).appendTo(this.nav_controls);\n        this.location_span.click(function() {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [],\n                        feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), function(t) {\n                        return t.data_manager.search_features(request.term).success(function(dataset_features) {\n                            all_features = all_features.concat(dataset_features);\n                        });\n                    });\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(function() {\n                        response($.map(all_features, function(feature) {\n                            return {\n                                label: feature[0],\n                                value: feature[1]\n                            };\n                        }));\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\").attr(\"type\", \"hidden\").val(this.vis_id).appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\").attr(\"id\", \"zoom-out\").attr(\"title\", \"Zoom out\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_out(); }).appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\").attr(\"id\", \"zoom-in\").attr(\"title\", \"Zoom in\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_in(); }).appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({low: 0});\n        this.chrom_select.bind(\"change\", function() {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function( e ) {\n            $(this).find(\"input\").trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function( e ) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box.bind(\"dragstart\", function( e, d ) {\n            this.current_x = d.offsetX;\n        }).bind(\"drag\", function( e, d ) {\n            var delta = d.offsetX - this.current_x;\n            this.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low) );\n            view.move_delta(-delta_chrom);\n        });\n\n        this.overview_close.click(function() {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container.bind( \"draginit\", function( e, d ) {\n            // Disable interaction if started in scrollbar (for webkit)\n            if ( e.clientX > view.viewport_container.width() - 16 ) {\n                return false;\n            }\n        }).bind( \"dragstart\", function( e, d ) {\n            d.original_low = view.low;\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n        }).bind( \"drag\", function( e, d ) {\n            var container = $(this);\n            var delta = d.offsetX - d.current_x;\n            var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n            container.scrollTop(new_scroll);\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n            view.move_delta(delta_chrom);\n        });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack.bind( \"dragstart\", function( e, d ) {\n            return $(\"<div/>\").addClass('zoom-area').css(\n                \"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1\n            ).appendTo( $(this) );\n        }).bind( \"drag\", function( e, d ) {\n            $( d.proxy ).css({ left: Math.min( e.pageX, d.startX ) - view.container.offset().left, width: Math.abs( e.pageX - d.startX ) });\n            var min = Math.min(e.pageX, d.startX ) - view.container.offset().left,\n                max = Math.max(e.pageX, d.startX ) - view.container.offset().left,\n                span = (view.high - view.low),\n                width = view.viewport_container.width();\n            view.update_location( Math.round(min / width * span) + view.low,\n                                  Math.round(max / width * span) + view.low );\n        }).bind( \"dragend\", function( e, d ) {\n            var min = Math.min(e.pageX, d.startX),\n                max = Math.max(e.pageX, d.startX),\n                span = (view.high - view.low),\n                width = view.viewport_container.width(),\n                old_low = view.low;\n            view.low = Math.round(min / width * span) + old_low;\n            view.high = Math.round(max / width * span) + old_low;\n            $(d.proxy).remove();\n            view.request_redraw();\n        });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track( new LabelTrack( this, { content_div: this.top_labeltrack } ) );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(function () {\n                view.resize_window();\n            }, 500 );\n        });\n        $(document).bind(\"redraw\", function() { view.redraw(); });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(base.toLowerCase() + '_color') ||\n               this.config.get_value('n_color');\n    }\n\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend( TracksterView.prototype, DrawableCollection.prototype, {\n\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(function () {\n                self.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n            }, 500 );\n        }\n        else {\n            view.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text( util.commatize(low) + ' - ' + util.commatize(high) );\n        this.nav_input.val( this.chrom + ':' + util.commatize(low) + '-' + util.commatize(high) );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var\n            view = this,\n            chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function (result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n                \n                view.chrom_select.html('');\n                view.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option  = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append($('<option value=\"previous\">Previous ' + MAX_CHROMS_SELECTABLE + '</option>'));\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append($('<option value=\"next\">Next ' + MAX_CHROMS_SELECTABLE + '</option>'));\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({low: this.chrom_start_index - MAX_CHROMS_SELECTABLE});\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({low: this.chrom_start_index + MAX_CHROMS_SELECTABLE});\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, function(v, i) {\n            return v.chrom === chrom;\n        })[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({'chrom': chrom}, function() { view.change_chrom(chrom, low, high); });\n            return;\n        }\n        else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len-1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            }\n            else {\n                // Low and/or high is defined.\n                view.low = (low !== undefined ? Math.max(low, 0) : 0);\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                }\n                else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, '');\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, ' ');\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/),\n            chrom = chrom_pos[0],\n            new_low = (chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined),\n            new_high = (chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined);\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(function() {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on('change', function() {\n            self.changed();\n        });\n    },\n\n    add_label_track: function (label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this,\n            // Either redrawing a single drawable or all view's drawables.\n            track_list = (drawable ? [drawable] : view.drawables);\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, function(track) {\n            var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n                return to[0] === track;\n            });\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            }\n            else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(function() { view._redraw(); });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low,\n            high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = ( this.low / (this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var width_px = ( (this.high - this.low)/(this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var min_width_px = 13;\n\n        this.overview_box.css({ left: left_px, width: Math.max(min_width_px, width_px) }).show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px)/2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({ left: left_px, width: width_px });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, function(track_options) {\n            var track = track_options[0],\n                options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, function(label_track) {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function (point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span / this.zoom_factor) / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function () {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span * this.zoom_factor) / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height( this.container.height() - this.top_container.height() - this.bottom_container.height() );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var\n            overview_drawable = drawable.copy( { content_div: this.overview_viewport } ),\n            view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = function() {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(view.overview_drawable.content_div.height() + view.overview_box.outerHeight());\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set('hidden', hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs( [ 'data', 'hidden_data', 'conditional' ] );\n    },\n\n    state_dict: function(options) {\n        return _.extend( this.get_inputs_dict(), { hidden: !this.is_visible() } );\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\n var ToolParameterView = Backbone.View.extend({\n\n    events: {\n        'change :input': 'update_value'\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\"),\n            param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\").addClass(\"param-label\").text(param.get('label')).appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\").addClass(\"param-input\").html(param.get('html')).appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get('value'));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n });\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n\n    initialize: function(options) {\n        this.model.on('change:hidden', this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n            tool = this.model,\n            parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div.bind(\"drag\", function(e) {\n            e.stopPropagation();\n        }).click(function(e) {\n            e.stopPropagation();\n        }).bind(\"dblclick\", function(e) {\n            e.stopPropagation();\n        }).keydown(function(e) { e.stopPropagation(); });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\").appendTo(parent_div).text(tool.get('name'));\n        tool.get('inputs').each(function(param) {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() { $(this).select(); });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\").addClass(\"param-row\").appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on visible region\").appendTo(run_tool_row);\n        run_on_region_button.click( function() {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click( function() {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get('track').dataset.id,\n                action: 'rerun',\n                tool_id: tool.id\n            },\n            null,\n            // Success callback.\n            function(track_data) {\n                Galaxy.modal.show({title: tool.get('name') + \" is Running\", body: tool.get('name') + \" is running on the complete dataset. Tool outputs are in dataset's history.\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get('track'),\n            tool = this.model,\n            region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: track.view.low,\n                end: track.view.high\n            }),\n            url_params =\n            {\n                target_dataset_id: track.dataset.id,\n                action: 'rerun',\n                tool_id: tool.id,\n                regions: [\n                    region.toJSON()\n                ]\n            },\n            current_track = track,\n            // Set name of track to include tool name, parameters, and region used.\n            track_name = tool.get('name') +\n                         current_track.tool_region_and_parameters_str(region),\n            container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, { name: track.config.get_value('name') });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(current_track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        }\n        else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track,\n                // Success callback.\n                function(track_data) {\n                    new_track.set_dataset(new data.Dataset(track_data));\n                    new_track.tiles_div.text(\"Running job.\");\n                    new_track.init();\n                }\n        );\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: 'application/json',\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(function(response) {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            }\n            else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            }\n            else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (this.filter.high === Number.MAX_VALUE || this.filter.low === -Number.MAX_VALUE || this.filter.low === this.filter.high) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return ( ( parseFloat(feature_data[this.filter.index]) - this.filter.low ) / ( this.filter.high - this.filter.low ) );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get('start');\n    this.high = region.get('end');\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = function() {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = function() {};\n\nvar FeatureTrackTile = function(track, region, w_scale, canvas, data, mode, message, all_slotted,\n                                feature_mapper, incomplete_features, seq_data) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = function() {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset = (obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset) );\n    }\n    this.dataset_check_type = 'converted_datasets_state';\n    this.data_url_extra_params = {};\n    this.data_query_wait = ('data_query_wait' in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT);\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager = ('data_manager' in obj_dict ?\n                         obj_dict.data_manager :\n                         new visualization.GenomeDataManager({\n                             dataset: this.dataset,\n                             // HACK: simulate 'genome' attributes from view for now.\n                             // View should eventually use Genome object.\n                             genome: new visualization.Genome({\n                                key: view.dbkey,\n                                chroms_info: {\n                                    chrom_info: view.chrom_data\n                                }\n                             }),\n                             data_mode_compatible: this.data_and_mode_compatible,\n                             can_subset: this.can_subset\n                         }));\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value('height');\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if ( !(\"resize\" in obj_dict) || obj_dict.resize ) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                }\n                else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(track.config.get_value('name') + track.tool_region_and_parameters_str());\n                }\n                else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html =\n                    '<strong>Tool</strong>:' + track.tool.get(\"name\") + '<br/>' +\n                    '<strong>Dataset</strong>:' + track.config.get_value(\"name\") + '<br/>' +\n                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                    '<option value=\"cur\">current viewing area</option>' +\n                    '<option value=\"bookmarks\">bookmarks</option>' +\n                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n                    '</select>';\n                var cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n                    ok_fn = function() {\n                        var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                            regions,\n                            view_region = new visualization.GenomeRegion({\n                                chrom: view.chrom,\n                                start: view.low,\n                                end: view.high\n                            }),\n                            bookmarked_regions = _.map($(\".bookmark\"), function(elt) {\n                                return new visualization.GenomeRegion({from_str: $(elt).children(\".position\").text()});\n                            });\n\n                        // Get regions for visualization.\n                        if (regions_to_use === 'cur') {\n                            // Use only current region.\n                            regions = [ view_region ];\n                        }\n                        else if (regions_to_use === 'bookmarks') {\n                            // Use only bookmarks.\n                            regions = bookmarked_regions;\n                        }\n                        else {\n                            // Use both current region and bookmarks.\n                            regions = [ view_region ].concat(bookmarked_regions);\n                        }\n\n                        Galaxy.modal.hide();\n\n                        // Go to visualization.\n                        window.location.href =\n                            Galaxy.root + \"visualization/sweepster\" + \"?\" +\n                            $.param({\n                                dataset_id: track.dataset.id,\n                                hda_ldda: track.dataset.get('hda_ldda'),\n                                regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                            });\n                    },\n                    check_enter_esc = function(e) {\n                        if ((e.keyCode || e.which) === 27) { // Escape key\n                            cancel_fn();\n                        } else if ((e.keyCode || e.which) === 13) { // Enter key\n                            ok_fn();\n                        }\n                    };\n\n                // show dialog\n                Galaxy.modal.show({title: \"Visualize tool parameter space and output from different parameter settings?\", body: html, buttons : {'No' : cancel_fn, 'Yes' : ok_fn } });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function () {\n        return $(\"<div/>\").addClass('track').attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set('dataset', dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function () {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $( \"<div class='track-resize'>\" );\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover( function() {\n            if ( track.config.get_value('content_visible') ) {\n                in_handle = true;\n                drag_control.show();\n            }\n        }, function() {\n            in_handle = false;\n            if ( ! in_drag ) { drag_control.hide(); }\n        });\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control.hide().bind( \"dragstart\", function( e, d ) {\n            in_drag = true;\n            d.original_height = $(track.content_div).height();\n        }).bind( \"drag\", function( e, d ) {\n            var new_height = Math.min( Math.max( d.original_height + d.deltaY, track.min_height_px ), track.max_height_px );\n            $(track.tiles_div).css( 'height', new_height );\n            track.visible_height_px = (track.max_height_px === new_height ? 0 : new_height);\n            track.on_resize();\n        }).bind( \"dragend\", function( e, d ) {\n            track.tile_cache.clear();\n            in_drag = false;\n            if (!in_handle) { drag_control.hide(); }\n            track.config.set_value('height', track.visible_height_px);\n            track.changed();\n        }).appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function () {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        }\n        else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        }\n        else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        }\n        else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        }\n        else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        }\n        else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        }\n        else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $('<span/>').addClass('message').html(msg_html).appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred(),\n            params = {\n                hda_ldda: track.dataset.get('hda_ldda'),\n                data_type: this.dataset_check_type,\n                chrom: track.view.chrom,\n                retry: retry\n            };\n        $.getJSON(this.dataset.url(), params, function (result) {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"View error\").click(function() {\n                            Galaxy.modal.show({title: \"Trackster Error\", body: \"<pre>\" + result.message + \"</pre>\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n                        })\n                    );\n                    msg_elt.append( $('<span/>').text(' ') );\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"Try again\").click(function() {\n                            track.init(true);\n                        })\n                    );\n                }\n            }\n            else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            }\n            else if (result === \"no data\" || (result.data !== undefined && (result.data === null || result.data.length === 0))) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            }\n            else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(function() { track.init(); }, track.data_query_wait);\n            }\n            else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css( \"height\", track.visible_height_px + \"px\" );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(function() {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                }\n                else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n\n            // Tracks may not have stat data either because there is no data or data is not yet ready.\n            if (data && data.min !== undefined && data.max !== undefined) {\n                // Compute default minimum and maximum values\n                var min_value = data.min,\n                    max_value = data.max;\n                // If mean and sd are present, use them to compute a ~95% window\n                // but only if it would shrink the range on one side\n                min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                // Update config, prefs\n                track.config.set_default_value('min_value', min_value);\n                track.config.set_default_value('max_value', max_value);\n                track.config.set_value('min_value', min_value);\n                track.config.set_value('max_value', max_value);\n            }\n        });\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(this, ('filters' in obj_dict ? obj_dict.filters : null));\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set('filters_manager', this.filters_manager);\n    this.filters_available = false;\n    this.tool = (obj_dict.tool ? new TracksterTool( _.extend( obj_dict.tool, {\n        'track': this,\n        'tool_state': obj_dict.tool_state\n    } ) )\n    : null);\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(this.content_div);\n    if (!this.config.get_value('content_visible')) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\").addClass(\"overlay\").appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n\n    action_icons_def: Track.prototype.action_icons_def.concat( [\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[ track.view.resolution_px_b ].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ] ),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get('hda_ldda')\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: (this.tool ? this.tool.state_dict() : {})\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON( track.dataset.url(),\n            { data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n              high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') },\n            function(result) {\n                var data = result.data;\n                if ( isNaN(parseFloat(track.config.get_value('min_value'))) ||\n                     isNaN(parseFloat(track.config.get_value('max_value'))) ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min,\n                        max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                    max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                    // Update the prefs\n                    track.config.set_value('min_value', min_value);\n                    track.config.set_value('max_value', max_value);\n                }\n            });\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value('mode', new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === 'Auto') { this.data_manager.clear(); }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + track.mode + \")\");\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return w_scale + '_' + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if ( !this.can_draw() ) { return; }\n\n        var clear_after = options && options.clear_after,\n            low = this.view.low,\n            high = this.view.high,\n            range = high - low,\n            width = this.view.container.width(),\n            w_scale = this.view.resolution_px_b,\n            resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var\n            // Tile width in bases.\n            tile_width = Math.floor(TILE_SIZE * resolution),\n            // Index of first tile that overlaps visible region.\n            tile_index = Math.floor(low / tile_width),\n            tile_region,\n            tile_promise,\n            tile_promises = [],\n            tiles = [];\n        // Draw tiles.\n        while ( (tile_index * tile_width) < high ) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min( (tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(function(tile) {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) { this.tiles_div.children(\".remove\").removeClass(\"remove\").remove(); }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(function() {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, function(t) {\n                return t !== null;\n            });\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this,\n            css_class = (type === 'max' ? 'top' : 'bottom'),\n            text = (type === 'max' ? 'max' : 'min'),\n            pref_name = (type === 'max' ? 'max_value' : 'min_value'),\n            label = this.container_div.find(\".yaxislabel.\" + css_class),\n            value = round( track.config.get_value(pref_name), 1 );\n\n        // Default action for on_change is to redraw track.\n        on_change = on_change || function() {\n            track.request_draw({ clear_tile_cache: true });\n        };\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        }\n        else {\n            // Add label.\n            label = $(\"<div/>\").text(value).make_text_editable({\n                num_cols: 12,\n                on_finish: function(new_val) {\n                    $(\".tooltip\").remove();\n                    track.config.set_value(pref_name, round( new_val, 1 ) );\n                    on_change();\n                },\n                help_text: \"Set \" + text + \" value\"\n            }).addClass('yaxislabel ' + css_class).css(\"color\", this.config.get_value('label_color'));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, function(tile) {\n            return (tile instanceof LineTrackTile);\n        });\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, function(tile) {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, { force: true, mode: 'Coverage' });\n                }\n            });\n\n            track._add_yaxis_label('max');\n        }\n        else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find('.yaxislabel').remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, function(tile) {\n                return tile.has_icons;\n            });\n\n            if (icons_present) {\n                _.each(tiles, function(tile) {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function( display_mode ) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [ this ];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) { options = {}; }\n\n        var force = options.force,\n            mode = options.mode || this.mode,\n            resolution = 1 / w_scale,\n\n            // Useful vars.\n            track = this,\n            drawables = this._get_drawables(),\n            key = this._gen_tile_cache_key(w_scale, region),\n            is_tile = function(o) { return (o && 'track' in o); };\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = (force ? undefined : track.tile_cache.get_elt(key));\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) { return null; }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = function() {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = (_.find(CONTINUOUS_DATA_MODES, function(m) { return m === mode; }) ? \"Coverage\" : mode);\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, function(d) {\n                // Get the track data/promise.\n                return d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params);\n            });\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(view.reference_track.data_manager.get_data(region, mode, resolution, view.reference_track.data_url_extra_params));\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then( function() {\n            var tile_data = get_tile_data(),\n                tracks_data = tile_data,\n                seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, function(d) { return util.is_deferred(d); })) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(track.draw_helper(region, w_scale, options)).then(function(tile) {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [],\n                drawing_heights = [];\n\n            _.each(drawables, function(d, i) {\n                var mode = d.mode,\n                    data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas(),\n                tile_low = region.get('start'),\n                tile_high = region.get('end'),\n                all_data_index = 0,\n                width = Math.ceil( (tile_high - tile_low) * w_scale ) + track.left_offset,\n                height = _.max(drawing_heights),\n                tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = (options.height || height);\n            var ctx = canvas.getContext('2d');\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, function(d, i) {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if ( [undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1 ) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if ( [undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1 ) {\n            this.config.set_value(\"max_value\", _.max( _.map(result.data, function(d) { return d[1]; }) ) || 0);\n        }\n\n        var canvas = ctx.canvas,\n            painter = new painters.LinePainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this,\n            tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round( ( tile.low - (this.is_overview? this.view.max_low : this.view.low) ) * w_scale );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css('left', left);\n\n        if ( tile_element.hasClass(\"remove\") ) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        }\n        else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css('height', 'auto');\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element.parent().children().css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this,\n            region_str = (region !== undefined ? region.toString() : \"all\"),\n            param_str = _.values( track.tool.get_inputs_dict()).join(', ');\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        }\n        // Histogram mode requires bigwig data.\n        else if (mode === \"Coverage\") {\n            return data.dataset_type === \"bigwig\";\n        }\n        // All other modes--Dense, Squish, Pack--require data + details.\n        else if (data.dataset_type === \"bigwig\" ||\n                 data.extra_info === \"no_detail\") {\n            return false;\n        }\n        else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\")  {\n            return false;\n        }\n        // Subset only if data is single-bp resolution.\n        else if (entry.dataset_type === 'bigwig') {\n            return (entry.data[1][0] - entry.data[0][0] === 1);\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set('data_type', 'raw_data');\n        this.data_query_wait = 1000;\n        this.dataset_check_type = 'state';\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function (view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass( \"label-track\" );\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view,\n            range = view.high - view.low,\n            tickDistance = Math.floor( Math.pow( 10, Math.floor( Math.log( range ) / Math.log( 10 ) ) ) ),\n            position = Math.floor( view.low / tickDistance ) * tickDistance,\n            width = this.view.container.width(),\n            new_div = $(\"<div/>\").addClass('label-container');\n        while ( position < view.high ) {\n            var screenPosition = Math.floor( ( position - view.low ) / range * width );\n            new_div.append( $(\"<div/>\").addClass('pos-label').text(util.commatize( position )).css( {\n                left: screenPosition\n            }));\n            position += tickDistance;\n        }\n        this.content_div.children( \":first\" ).remove();\n        this.content_div.append( new_div );\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if ('drawables' in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, function(d) {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    action_icons_def:\n    [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, function(d) {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(function() {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n                name: this.config.get_value('name')\n            }),\n            track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, function(d) { return d.config.get_value('min_value'); })),\n            max = _.max(_.map(this.drawables, function(d) { return d.config.get_value('max_value'); }));\n\n        this.config.set_value('min_value', min);\n        this.config.set_value('max_value', max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min);\n            d.config.set_value('max_value', max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this,\n            min_value = this.config.get_value('min_value'),\n            max_value = this.config.get_value('max_value');\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min_value);\n            d.config.set_value('max_value', max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1, i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, { force: true, height: max_height } );\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this,\n            t = function() { track.update_all_min_max(); };\n\n        // Add min, max labels.\n        this._add_yaxis_label('min', t);\n        this._add_yaxis_label('max', t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function (view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = {reference: true};\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'height', type: 'int', default_value: 13, hidden: true }\n    ] ),\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(':visible'),\n            new_visible,\n            tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        }\n        else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) { return true; },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region),\n            seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function (view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(supportsByteRanges(Galaxy.root + 'datasets/' + this.dataset.id + '/display'))\n     .then(function(supportsByteRanges) {\n         if (supportsByteRanges) {\n             self.data_manager = new bbi.BBIDataManager({\n                 dataset: self.dataset\n             });\n         }\n\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Color', type: 'color' },\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return (entry.data[1][0] - entry.data[0][0] === 1);\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label('max');\n        this._add_yaxis_label('min');\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function (view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n        { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n        { key: 'min_value', label: 'Min Value', type: 'int', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'int', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 500, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n        });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas,\n            painter = new painters.DiagonalHeatmapPainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass( \"feature-track\" );\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Block color', type: 'color' },\n        { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true,\n          help: 'Show the number of items in each bin when drawing summary histogram' },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'connector_style', label: 'Connector style', type: 'select', default_value: 'fishbones',\n            options: [ { label: 'Line with arrows', value: 'fishbone' }, { label: 'Arcs', value: 'arcs' } ] },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if ( this.config.get_value('connector_style') === 'arcs' ) {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var track = this,\n            i,\n            line_track_tiles = _.filter(tiles, function(t) {\n                return (t instanceof LineTrackTile);\n            });\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, 'incomplete_features'), function(inc_features) {\n                _.each(inc_features, function(feature) {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, function(tile) {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features =_.omit(all_incomplete_features,\n                                                     _.map(tile.incomplete_features, function(f) { return f[0]; }));\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = { data: _.values( tile_incomplete_features ) },\n                        new_canvas = self.view.canvas_manager.new_canvas(),\n                        new_canvas_ctx = new_canvas.getContext('2d');\n                    new_canvas.height = Math.max(tile.canvas.height,\n                                                 self.get_canvas_height(features, tile.mode, tile.w_scale, 100));\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(features, new_canvas_ctx, tile.mode,\n                                                  tile.region, tile.w_scale, tile.seq_data);\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters,\n                f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false,\n                example_feature,\n                filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if ( filter.applies_to(example_feature) &&\n                             filter.min !== filter.max ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        }\n        else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: Auto/\" + mode + \")\");\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context,\n            slotter = this.slotters[level];\n        if (!slotter || (slotter.mode !== mode)) {\n            slotter = new (slotting.FeatureSlotter)( level, mode, MAX_FEATURE_DEPTH, function ( x ) { return dummy_context.measureText( x ); } );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features( features );\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        }\n        else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if ( this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH ) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width) );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this,\n            canvas = ctx.canvas,\n            tile_low = region.get('start'),\n            tile_high = region.get('end'),\n            left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var\n            filtered = [],\n            slots = this.slotters[w_scale].slots;\n            all_slotted = true;\n        if ( result.data ) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if ( !(feature[0] in slots) ) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = (this.filters_manager.alpha_filter ? new FilterScaler(this.filters_manager.alpha_filter) : null),\n            filter_height_scaler = (this.filters_manager.height_filter ? new FilterScaler(this.filters_manager.height_filter) : null),\n            painter = new (this.painter)(filtered, tile_low, tile_high, this.config.to_key_value_dict(), mode, filter_alpha_scaler, filter_height_scaler,\n                                         // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                                         ref_seq,\n                                         // Only the ReadPainer will use this function\n                                         function(b) { return track.view.get_base_color(b); });\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value('block_color');\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(track, region, w_scale, canvas, result.data, mode,\n                                        result.message, all_slotted, feature_mapper,\n                                        incomplete_features, ref_seq);\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Histogram color', type: 'color' },\n        { key: 'show_sample_data', label: 'Show sample data', type: 'bool', default_value: true },\n        { key: 'show_labels', label: 'Show summary and sample labels', type: 'bool', default_value: true },\n        { key: 'summary_height', label: 'Locus summary height', type: 'float', default_value: 20 },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        }\n        else { // result.dataset_type === 'variant'\n            var view = this.view,\n                painter = new (this.painter)(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode,\n                                             function(b) { return view.get_base_color(b); });\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = ( this.dataset.get_metadata('sample_names') ? this.dataset.get_metadata('sample_names').length : 0);\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if ( num_samples === null ) {\n                    num_samples = 1;\n                }\n                else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [ Track.prototype.predraw_init.call(this) ];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata('sample_names')) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, function(t) {\n            return (t instanceof LineTrackTile);\n        });\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata('sample_names');\n        if (line_track_tiles.length === 0 && this.config.get_value('show_labels') && sample_names && sample_names.length > 1) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find('.yaxislabel.variant').length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value('summary_height') / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\").text('Summary').addClass('yaxislabel variant top').css({\n                        'font-size': font_size + 'px',\n                        'top': (this.config.get_value('summary_height') - font_size) / 2 + 'px'\n                    })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value('show_sample_data')) {\n                    var samples_div_html = sample_names.join('<br/>');\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\").html(samples_div_html).addClass('yaxislabel variant top sample').css({\n                            'top': this.config.get_value('summary_height')\n                        })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === 'Squish' ? 5 : 10) + 'px';\n            $(this.tiles_div).find('.sample').css({\n                'font-size': font_size,\n                'line-height': font_size\n            });\n            // Color labels to preference color.\n            $(this.tiles_div).find('.yaxislabel').css('color', this.config.get_value('label_color'));\n        }\n        else {\n            // Remove all labels.\n            this.container_div.find('.yaxislabel.variant').remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function (view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Histogram color', type: 'color' },\n        { key: 'detail_block_color', label: 'Sense strand block color', type: 'color', 'default_value': '#AAAAAA' },\n        { key: 'reverse_strand_color', label: 'Antisense strand block color', type: 'color', 'default_value': '#DDDDDD' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n        { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    \"CompositeTrack\": CompositeTrack,\n    \"DrawableGroup\": DrawableGroup,\n    \"DiagonalHeatmapTrack\": DiagonalHeatmapTrack,\n    \"FeatureTrack\": FeatureTrack,\n    \"LineTrack\": LineTrack,\n    \"ReadTrack\": ReadTrack,\n    \"VariantTrack\": VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    \"VcfTrack\": VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = function(template, view, container) {\n    if ('copy' in template) {\n        // Template is an object.\n        return template.copy(container);\n    }\n    else {\n        // Template is a dictionary.\n        var\n           drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[ drawable_type ](view, container, template);\n    }\n};\n\nreturn {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n\n});\n"]}