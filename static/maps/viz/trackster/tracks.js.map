{"version":3,"sources":["viz/trackster/tracks.js"],"names":["DATA_OK","places","DATA_CACHE_SIZE","val","Math","pow","round","num","url","promise","$","Deferred","type","ajax","beforeSend","xhr","setRequestHeader","success","result","status","resolve","_","extend","html_elt_js_obj_dict","is_container","element","obj","attr","moveable","handle_class","container_selector","element_js_obj","bind","handle","relative","e","d","this","child","container","bottom","i","parent","children","this_obj","parents","length","top","position","outerHeight","cur_container","offsetY","insertBefore","add_drawable_before","insertAfter","remove_drawable","add_drawable","get","is","prepend","hasClass","append","move_drawable","deltaY","addClass","removeClass","DATA_NOCONVERTER","MIN_SQUISH_VIEW_WIDTH","CONTINUOUS_DATA_MODES","Drawable","view","obj_dict","id_counter","id","drag_handle_class","is_overview","action_icons","from_models_and_saved_values","config_params","prefs","name","config_onchange","config","on","ConfigSettingCollection","container_div","set_value","header_div","header","header_view","_viz_views2","default","TrackHeaderView","model","$el","hover","icons_div","prototype","action_icons_def","title","css_class","on_click_fn","drawable","get_value","toggle_icon","show_contents","_config2","ConfigSettingCollectionView","collection","render_in_modal","remove","key","label","default_value","hidden","changed","init","can_draw","enabled","request_draw","_draw","options","to_dict","set_name","new_name","old_name","revert_name","update_intro_div","hide","build_container_div","update_icons","hide_contents","get_drawables","DrawableCollection","obj_type","drawables","unpack_drawables","drawables_array","object_from_template","dictified_drawables","push","to_key_value_dict","other","index","indexOf","splice","replace_drawable","old_drawable","new_drawable","update_html","replaceWith","new_position","tracks","get_tracks","track_type","queue","slice","shift","DrawableGroup","concat","content_div","call","filters_manager","appendTo","saved_filters_managers","_filters2","FiltersManager","after","parent_div","old_manager","filters","visible","setup_multitrack_filtering","group","_restore_filter_managers","clear_filters","tiles_div","clear_tile_cache","toggle","num_drawables","composite_icon","filters_icon","show","get_type","a_type","can_composite","FeatureTrack","num_feature_tracks","j","filter","shared_filters","remove_all","new_filter","filter_name","NumberFilter","add_filter","show_composite_track","composite_track","CompositeTrack","stand_alone","tracks_to_be_redrawn","zoom_factor","has_changes","render","reset","each","View","vis_id","dbkey","requested_redraw","undefined","label_tracks","max_low","max_high","top_container","min_separation","browser_content_div","load_chroms_deferred","canvas_manager","top_labeltrack","ownerDocument","nav_container","overview_viewport","overview_close","overview_highlight","overview_box_background","nav_controls","chrom_select","submit_nav","location_span","nav_input","select","parent_element","source","bottom_container","feature_search_deferreds","all_features","response","value","viewport_container","minLength","text","intro_div","click","zo_link","select_datasets","track","prependTo","nav","overview","find","zoom_in","overview_box","offsetX","delta","current_x","delta_chrom","move_delta","default_overview_height","height","reset_overview","clientX","original_low","which","clientY","current_height","keyCode","stopPropagation","tooltip","placement","low","high","css","left","autocomplete","request","map","span","width","update_location","search_features","term","min","pageX","startX","request_redraw","done","feature","hidden_input","zoom_out","resize_timer","clearTimeout","load_chroms","trigger","self","setTimeout","chrom","trigger_navigate","url_parms","MAX_CHROMS_SELECTABLE","chrom_data","scrollTop","Galaxy","new_scroll","data","dataType","prev_chroms","chrom_start_index","alert","proxy","offset","abs","max","old_low","LabelTrack","window","resize_window","document","get_base_color","base","new_chrom","new_low","new_high","delay","go_to","timer","chrom_pos","split","move_fraction","_util2","commatize","root","data_fetch","reference","ref_track","ReferenceTrack","redraw_on_move_fn","chrom_info","len","chrom_option","next_chroms","add_label_track","start_index","change_chrom","track_list","found","grep","v","reference_track","ceil","resolution_px_b","width_px","_redraw","track_options","then","str","replace","parseInt","fraction","new_half","current_chrom_span","cur_center","set_overview","overview_drawable","label_track","initialize","to","requestAnimationFrame","events","html_div","update_value","floor","tool","left_px","keydown","name_div","param_view","run_on_region","run_on_dataset_button","run_on_dataset","set_visible","point","update_params","params","target_dataset_id","buttons","Close","modal","resize_viewport","action","dataset","tool_id","copy","track_name","postdraw_actions","current_track","new_track","hda_ldda","init_for_tool_data","TracksterTool","_tools2","Tool","defaults","url_params","run","tool_state","ss_deferred","remove_inputs","state_dict","get_inputs_dict","is_visible","ToolParameterView","Backbone","param","param_div","html","FilterScaler","feature_data","default_val","update_event","target","TracksterToolView","Tile","region","w_scale","canvas","html_elt","predisplay_actions","FeatureTrackTile","all_slotted","feature_mapper","has_icons","incomplete_features","other_tiles_features_drawn","run_tool_row","track_data","body","_visualization2","GenomeRegion","start","end","regions","toJSON","tool_region_and_parameters_str","constructor","change_mode","mode","set_filters_manager","set_dataset","_data2","Dataset","success_callback","ServerStateDeferred","ajax_settings","JSON","stringify","contentType","interval","success_fn","when","go","genome","chroms_info","error","data_mode_compatible","data_and_mode_compatible","can_subset","message","max_height_px","_painters2","Scaler","add_resize_handle","gen_val","Number","MAX_VALUE","parseFloat","stale","LineTrackTile","seq_data","Track","Model","dataset_check_type","data_manager","Genome","init_deferred","data_type","visible_height_px","msg_elt","resize","show_message","DATA_NONE","data_query_wait","getJSON","min_value","max_value","unbind","ok_fn","regions_to_use","view_region","bookmarked_regions","elt","from_str","location","href","dataset_id","TiledTrack","No","cancel_fn","Yes","on_resize","in_handle","in_drag","drag_control","stats","min_height_px","isNaN","new_height","tile_cache","clear","mode_icon","LineTrack","ReadTrack","tools_icon","msg_html","retry","resolution","before_draw","on_change","kind","tile_promise","tiles","tile_index","clear_after","apply","valid_chroms","DATA_ERROR","t","predraw_init","_add_yaxis_label","MAX_FEATURE_DEPTH","TILE_SIZE","tile_region","on_finish","help_text","mean","sd","line_track_tiles","tile","draw_helper","force","set","filters_available","Cache","left_offset","tool_view","dynamic_tool_div","overlay_div","_get_drawables","is_tile","show_tile","slotters","max_rows","m","tile_data","is_deferred","set_min_max","drawing_modes","drawing_heights","update_auto_mode","all_data_index","ctx","getContext","translate","new_mode","get_canvas_height","_draw_line_track_tile","param_space_viz_icon","_gen_tile_cache_key","tile_element","tile_width","region_str","tile_promises","dataset_type","extra_info","entry","pref_name","make_text_editable","num_cols","new_val","screenPosition","new_div","tickDistance","get_mode","display_mode","get_elt","o","get_tile_data","data_mode","data_url_extra_params","visible_height","get_data","tile_drawn","set_elt","init_deferreds","tracks_data","subset_entry","pop","show_group","new_canvas","tile_low","tile_high","globalAlpha","globalCompositeOperation","update_all_min_max","canvas_width","max_height","LinePainter","draw","draw_tile","data_url","new_visible","track_height","cur_visible","toString","values","join","str_len","fillText","supportsByteRanges","build_config_params","DiagonalHeatmapTrack","range","display_modes","log","painter","union","start_end_dct","set_painter_from_config","all_incomplete_features","tile_incomplete_features","new_canvas_ctx","example_feature","f","char_width_px","GenomeReferenceDataManager","incremental_slots","slotter","subset","font","manager","default_font","textAlign","c","fillStyle","hide_feature","filter_alpha_scaler","ref_seq","draw_results","num_samples","dummy_painter","get_required_height","deferreds","font_size","summary_draw_height","help","ArcLinkedFeaturePainter","LinkedFeaturePainter","addable_objects","inc_features","VcfTrack","VariantTrack","omit","template","size","features","drawable_type","TracksterView","drawImage","new_tile","update_ui_elt","applies_to","show_more_rows_icon","level","dummy_context","_slotting2","FeatureSlotter","x","measureText","slot_features","rows_required","cur_tile","filtered","slots","flen","update_attrs","keep","alpha_filter","filter_height_scaler","height_filter","b","translation","VariantPainter","get_metadata","match","fetch","sample_names","font-size","samples_div_html","line-height","ReadPainter"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport visualization from \"viz/visualization\";\nimport viz_views from \"viz/viz_views\";\nimport util from \"viz/trackster/util\";\nimport slotting from \"viz/trackster/slotting\";\nimport painters from \"viz/trackster/painters\";\nimport filters_mod from \"viz/trackster/filters\";\nimport data from \"mvc/dataset/data\";\nimport tools_mod from \"mvc/tool/tools\";\nimport config_mod from \"utils/config\";\nimport bbi from \"viz/bbi-data-manager\";\nimport \"ui/editable-text\";\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = (element, obj) => {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = (element, handle_class, container_selector, element_js_obj) => {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element\n        .bind(\"drag\", { handle: `.${handle_class}`, relative: true }, function(\n            e,\n            d\n        ) {\n            var element = $(this);\n            var parent = $(this).parent();\n\n            var // Only sorting amongst tracks and groups.\n            children = parent.children(\".track,.group\");\n\n            var this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")];\n            var child;\n            var container;\n            var top;\n            var bottom;\n            var i;\n\n            //\n            // Enable three types of dragging: (a) out of container; (b) into container;\n            // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n            //\n\n            // Handle dragging out of container.\n            container = $(this).parents(container_selector);\n            if (container.length !== 0) {\n                top = container.position().top;\n                bottom = top + container.outerHeight();\n                var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                if (d.offsetY < top) {\n                    // Moving above container.\n                    $(this).insertBefore(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable_before(\n                        this_obj,\n                        cur_container\n                    );\n                    return;\n                } else if (d.offsetY > bottom) {\n                    // Moving below container.\n                    $(this).insertAfter(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle dragging into container. Child is appended to container's content_div.\n            container = null;\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                top = child.position().top;\n                bottom = top + child.outerHeight();\n                // Dragging into container if child is a container and offset is inside container.\n                if (\n                    child.is(container_selector) &&\n                    this !== child.get(0) &&\n                    d.offsetY >= top &&\n                    d.offsetY <= bottom\n                ) {\n                    // Append/prepend based on where offsetY is closest to and return.\n                    if (d.offsetY - top < bottom - d.offsetY) {\n                        child.find(\".content-div\").prepend(this);\n                    } else {\n                        child.find(\".content-div\").append(this);\n                    }\n                    // Update containers. Object may not have container if it is being moved quickly.\n                    if (this_obj.container) {\n                        this_obj.container.remove_drawable(this_obj);\n                    }\n                    html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(\n                        this_obj\n                    );\n                    return;\n                }\n            }\n\n            // Handle sibling movement, aka sorting.\n\n            // Determine new position\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                if (\n                    d.offsetY < child.position().top &&\n                    // Cannot move tracks above reference track or intro div.\n                    !(\n                        child.hasClass(\"reference-track\") ||\n                        child.hasClass(\"intro\")\n                    )\n                ) {\n                    break;\n                }\n            }\n\n            // If not already in the right place, move. Need\n            // to handle the end specially since we don't have\n            // insert at index\n            if (i === children.length) {\n                if (this !== children.get(i - 1)) {\n                    parent.append(this);\n                    html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                        this_obj,\n                        i\n                    );\n                }\n            } else if (this !== children.get(i)) {\n                $(this).insertBefore(children.get(i));\n                // Need to adjust insert position if moving down because move is changing\n                // indices of all list items.\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                    this_obj,\n                    d.deltaY > 0 ? i - 1 : i\n                );\n            }\n        })\n        .bind(\"dragstart\", function() {\n            $(this).addClass(\"dragging\");\n        })\n        .bind(\"dragend\", function() {\n            $(this).removeClass(\"dragging\");\n        });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar // Padding at the top of tracks for error messages\nERROR_PADDING = 20;\n\nvar // Maximum number of rows un a slotted track\nMAX_FEATURE_DEPTH = 100;\n\nvar // Minimum width for window for squish to be used.\nMIN_SQUISH_VIEW_WIDTH = 12000;\n\nvar // Number of pixels per tile, not including left offset.\nTILE_SIZE = 400;\n\nvar DEFAULT_DATA_QUERY_WAIT = 5000;\n\nvar // Maximum number of chromosomes that are selectable at any one time.\nMAX_CHROMS_SELECTABLE = 100;\n\nvar DATA_ERROR = \"Cannot display dataset due to an error. \";\n\nvar DATA_NOCONVERTER =\n    \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\";\n\nvar DATA_NONE = \"No data for this chrom/contig.\";\n\nvar DATA_PENDING =\n    \"Preparing data. This can take a while for a large dataset. \" +\n    \"If the visualization is saved and closed, preparation will continue in the background.\";\n\nvar DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \";\nvar DATA_LOADING = \"Loading data...\";\nvar DATA_OK = \"Ready for display\";\nvar TILE_CACHE_SIZE = 10;\nvar DATA_CACHE_SIZE = 20;\n\nvar // Numerical/continuous data display modes.\nCONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n        this.config_params,\n        obj_dict.prefs\n    );\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            () => {\n                icons_div.show();\n            },\n            () => {\n                icons_div.hide();\n            }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if (drawable.config.get_value(\"content_visible\")) {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle-expand\")\n                    .removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value(\"content_visible\", false);\n            } else {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle\")\n                    .removeClass(\"toggle-expand\");\n                drawable.config.set_value(\"content_visible\", true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal(\"Configure Track\");\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n        {\n            key: \"content_visible\",\n            type: \"bool\",\n            default_value: true,\n            hidden: true\n        }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(\n                drawables_array[i],\n                this.view,\n                this\n            );\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(\n                    new_drawable.container_div\n                );\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0);\n\n        var tracks = [];\n        var drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\")\n        .addClass(\"content-div\")\n        .attr(\"id\", `group_${this.id}_content_div`)\n        .appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(\n            this,\n            obj_dict.filters\n        );\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(\n    DrawableGroup.prototype,\n    Drawable.prototype,\n    DrawableCollection.prototype,\n    {\n        action_icons_def: [\n            Drawable.prototype.action_icons_def[0],\n            Drawable.prototype.action_icons_def[1],\n            // Replace group with composite track.\n            {\n                name: \"composite_icon\",\n                title: \"Show composite track\",\n                css_class: \"layers-stack\",\n                on_click_fn: function(group) {\n                    $(\".tooltip\").remove();\n                    group.show_composite_track();\n                }\n            },\n            // Toggle track filters.\n            {\n                name: \"filters_icon\",\n                title: \"Filters\",\n                css_class: \"ui-slider-050\",\n                on_click_fn: function(group) {\n                    // TODO: update Tooltip text.\n                    if (group.filters_manager.visible()) {\n                        // Hiding filters.\n                        group.filters_manager.clear_filters();\n                        group._restore_filter_managers();\n                        // TODO: maintain current filter by restoring and setting saved manager's\n                        // settings to current/shared manager's settings.\n                        // TODO: need to restore filter managers when moving drawable outside group.\n                    } else {\n                        // Showing filters.\n                        group.setup_multitrack_filtering();\n                        group.request_draw({ clear_tile_cache: true });\n                    }\n                    group.filters_manager.toggle();\n                }\n            },\n            Drawable.prototype.action_icons_def[2]\n        ],\n\n        build_container_div: function() {\n            var container_div = $(\"<div/>\")\n                .addClass(\"group\")\n                .attr(\"id\", `group_${this.id}`);\n            if (this.container) {\n                this.container.content_div.append(container_div);\n            }\n            return container_div;\n        },\n\n        hide_contents: function() {\n            this.tiles_div.hide();\n        },\n\n        show_contents: function() {\n            // Show the contents div and labels (if present)\n            this.tiles_div.show();\n            // Request a redraw of the content\n            this.request_draw();\n        },\n\n        update_icons: function() {\n            //\n            // Handle update when there are no tracks.\n            //\n            var num_drawables = this.drawables.length;\n            if (num_drawables === 0) {\n                this.action_icons.composite_icon.hide();\n                this.action_icons.filters_icon.hide();\n            } else if (num_drawables === 1) {\n                this.action_icons.composite_icon.toggle(\n                    this.drawables[0] instanceof CompositeTrack\n                );\n                this.action_icons.filters_icon.hide();\n            } else {\n                // There are 2 or more tracks.\n\n                //\n                // Determine if a composite track can be created. Current criteria:\n                // (a) all tracks are line tracks;\n                //      OR\n                // FIXME: this is not enabled right now because it has not been well tested:\n                // (b) there is a single FeatureTrack.\n                //\n\n                // All tracks the same?\n                var i;\n\n                var j;\n                var drawable;\n                var same_type = true;\n                var a_type = this.drawables[0].get_type();\n                var num_feature_tracks = 0;\n                for (i = 0; i < num_drawables; i++) {\n                    drawable = this.drawables[i];\n                    if (drawable.get_type() !== a_type) {\n                        can_composite = false;\n                        break;\n                    }\n                    if (drawable instanceof FeatureTrack) {\n                        num_feature_tracks++;\n                    }\n                }\n\n                if (same_type && this.drawables[0] instanceof LineTrack) {\n                    this.action_icons.composite_icon.show();\n                } else {\n                    this.action_icons.composite_icon.hide();\n                    $(\".tooltip\").remove();\n                }\n\n                //\n                // Set up group-level filtering and update filter icon.\n                //\n                if (\n                    num_feature_tracks > 1 &&\n                    num_feature_tracks === this.drawables.length\n                ) {\n                    //\n                    // Find shared filters.\n                    //\n                    var shared_filters = {};\n\n                    var filter;\n\n                    // Init shared filters with filters from first drawable.\n                    drawable = this.drawables[0];\n                    for (\n                        j = 0;\n                        j < drawable.filters_manager.filters.length;\n                        j++\n                    ) {\n                        filter = drawable.filters_manager.filters[j];\n                        shared_filters[filter.name] = [filter];\n                    }\n\n                    // Create lists of shared filters.\n                    for (i = 1; i < this.drawables.length; i++) {\n                        drawable = this.drawables[i];\n                        for (\n                            j = 0;\n                            j < drawable.filters_manager.filters.length;\n                            j++\n                        ) {\n                            filter = drawable.filters_manager.filters[j];\n                            if (filter.name in shared_filters) {\n                                shared_filters[filter.name].push(filter);\n                            }\n                        }\n                    }\n\n                    //\n                    // Create filters for shared filters manager. Shared filters manager is group's\n                    // manager.\n                    //\n                    this.filters_manager.remove_all();\n                    var filters;\n                    var new_filter;\n                    var min;\n                    var max;\n                    for (var filter_name in shared_filters) {\n                        filters = shared_filters[filter_name];\n                        if (filters.length === num_feature_tracks) {\n                            // Add new filter.\n                            // FIXME: can filter.copy() be used?\n                            new_filter = new filters_mod.NumberFilter({\n                                name: filters[0].name,\n                                index: filters[0].index\n                            });\n                            this.filters_manager.add_filter(new_filter);\n                        }\n                    }\n\n                    // Show/hide icon based on filter availability.\n                    this.action_icons.filters_icon.toggle(\n                        this.filters_manager.filters.length > 0\n                    );\n                } else {\n                    this.action_icons.filters_icon.hide();\n                }\n            }\n        },\n\n        /**\n     * Restore individual track filter managers.\n     */\n        _restore_filter_managers: function() {\n            for (var i = 0; i < this.drawables.length; i++) {\n                this.drawables[i].filters_manager = this.saved_filters_managers[\n                    i\n                ];\n            }\n            this.saved_filters_managers = [];\n        },\n\n        /**\n     *\n     */\n        setup_multitrack_filtering: function() {\n            // Save tracks' managers and set up shared manager.\n            if (this.filters_manager.filters.length > 0) {\n                // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n                this.saved_filters_managers = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    var drawable = this.drawables[i];\n                    this.saved_filters_managers.push(drawable.filters_manager);\n                    drawable.filters_manager = this.filters_manager;\n                }\n\n                //TODO: hide filters icons for each drawable?\n            }\n            this.filters_manager.init_filters();\n        },\n\n        /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n        show_composite_track: function() {\n            var composite_track = new CompositeTrack(this.view, this.view, {\n                name: this.config.get_value(\"name\"),\n                drawables: this.drawables\n            });\n            var index = this.container.replace_drawable(\n                this,\n                composite_track,\n                true\n            );\n            composite_track.request_draw();\n        },\n\n        add_drawable: function(drawable) {\n            DrawableCollection.prototype.add_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        remove_drawable: function(drawable) {\n            DrawableCollection.prototype.remove_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        to_dict: function() {\n            // If filters are visible, need to restore original filter managers before converting to dict.\n            if (this.filters_manager.visible()) {\n                this._restore_filter_managers();\n            }\n\n            var obj_dict = extend(\n                DrawableCollection.prototype.to_dict.call(this),\n                { filters: this.filters_manager.to_dict() }\n            );\n\n            // Setup multi-track filtering again.\n            if (this.filters_manager.visible()) {\n                this.setup_multitrack_filtering();\n            }\n\n            return obj_dict;\n        },\n\n        request_draw: function(options) {\n            _.each(this.drawables, d => {\n                d.request_draw(options);\n            });\n        }\n    }\n);\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone =\n            obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager(\n            this.container.get(0).ownerDocument\n        );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                }\n            ],\n            { name: obj_dict.name }\n        );\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container;\n\n        var view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\")\n            .addClass(\"top-container\")\n            .appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\")\n            .addClass(\"content\")\n            .appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\")\n            .addClass(\"bottom-container\")\n            .appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\")\n            .addClass(\"top-labeltrack\")\n            .appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\")\n            .addClass(\"viewport-container\")\n            .attr(\"id\", \"viewport-container\")\n            .appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\")\n            .addClass(\"intro\")\n            .appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\")\n            .text(\"Add Datasets to Visualization\")\n            .addClass(\"action-button\")\n            .appendTo(this.intro_div)\n            .click(() => {\n                visualization.select_datasets({ dbkey: view.dbkey }, tracks => {\n                    _.each(tracks, track => {\n                        view.add_drawable(\n                            object_from_template(track, view, view)\n                        );\n                    });\n                });\n            });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\")\n            .addClass(\"trackster-nav-container\")\n            .prependTo(this.top_container);\n        this.nav = $(\"<div/>\")\n            .addClass(\"trackster-nav\")\n            .appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\")\n            .addClass(\"overview\")\n            .appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\")\n            .addClass(\"overview-viewport\")\n            .appendTo(this.overview);\n        this.overview_close = $(\"<a/>\")\n            .attr(\"title\", \"Close overview\")\n            .addClass(\"icon-button overview-close tooltip\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\")\n            .addClass(\"overview-highlight\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\")\n            .addClass(\"overview-boxback\")\n            .appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\")\n            .addClass(\"overview-box\")\n            .appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\")\n            .addClass(\"nav-controls\")\n            .appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\")\n            .attr({ name: \"chrom\" })\n            .addClass(\"chrom-nav\")\n            .append(\"<option value=''>Loading</option>\")\n            .appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (\n                e.type === \"focusout\" ||\n                (e.keyCode || e.which) === 13 ||\n                (e.keyCode || e.which) === 27\n            ) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\")\n            .addClass(\"nav-input\")\n            .hide()\n            .bind(\"keyup focusout\", submit_nav)\n            .appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\")\n            .addClass(\"location\")\n            .attr(\"title\", \"Click to change location\")\n            .tooltip({ placement: \"bottom\" })\n            .appendTo(this.nav_controls);\n        this.location_span.click(() => {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(`${view.chrom}:${view.low}-${view.high}`);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [];\n\n                    var feature_search_deferreds = $.map(\n                        view.get_tracks(FeatureTrack),\n                        t =>\n                            t.data_manager\n                                .search_features(request.term)\n                                .success(dataset_features => {\n                                    all_features = all_features.concat(\n                                        dataset_features\n                                    );\n                                })\n                    );\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(() => {\n                        response(\n                            $.map(all_features, feature => ({\n                                label: feature[0],\n                                value: feature[1]\n                            }))\n                        );\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\")\n                .attr(\"type\", \"hidden\")\n                .val(this.vis_id)\n                .appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-out\")\n            .attr(\"title\", \"Zoom out\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_out();\n            })\n            .appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-in\")\n            .attr(\"title\", \"Zoom in\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_in();\n            })\n            .appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", () => {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function(e) {\n            $(this)\n                .find(\"input\")\n                .trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function(e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box\n            .bind(\"dragstart\", function(e, d) {\n                this.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var delta = d.offsetX - this.current_x;\n                this.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.max_high - view.max_low)\n                );\n                view.move_delta(-delta_chrom);\n            });\n\n        this.overview_close.click(() => {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container\n            .bind(\"draginit\", (e, d) => {\n                // Disable interaction if started in scrollbar (for webkit)\n                if (e.clientX > view.viewport_container.width() - 16) {\n                    return false;\n                }\n            })\n            .bind(\"dragstart\", (e, d) => {\n                d.original_low = view.low;\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var container = $(this);\n                var delta = d.offsetX - d.current_x;\n                var new_scroll =\n                    container.scrollTop() - (e.clientY - d.current_height);\n                container.scrollTop(new_scroll);\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.high - view.low)\n                );\n                view.move_delta(delta_chrom);\n            });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack\n            .bind(\"dragstart\", function(e, d) {\n                return $(\"<div/>\")\n                    .addClass(\"zoom-area\")\n                    .css(\n                        \"height\",\n                        view.browser_content_div.height() +\n                            view.top_labeltrack.height() +\n                            1\n                    )\n                    .appendTo($(this));\n            })\n            .bind(\"drag\", (e, d) => {\n                $(d.proxy).css({\n                    left:\n                        Math.min(e.pageX, d.startX) -\n                        view.container.offset().left,\n                    width: Math.abs(e.pageX - d.startX)\n                });\n\n                var min =\n                    Math.min(e.pageX, d.startX) - view.container.offset().left;\n\n                var max =\n                    Math.max(e.pageX, d.startX) - view.container.offset().left;\n\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                view.update_location(\n                    Math.round(min / width * span) + view.low,\n                    Math.round(max / width * span) + view.low\n                );\n            })\n            .bind(\"dragend\", (e, d) => {\n                var min = Math.min(e.pageX, d.startX);\n                var max = Math.max(e.pageX, d.startX);\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                var old_low = view.low;\n                view.low = Math.round(min / width * span) + old_low;\n                view.high = Math.round(max / width * span) + old_low;\n                $(d.proxy).remove();\n                view.request_redraw();\n            });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(\n            new LabelTrack(this, { content_div: this.top_labeltrack })\n        );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(() => {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", () => {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(`${base.toLowerCase()}_color`) ||\n            this.config.get_value(\"n_color\")\n        );\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(() => {\n                self.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n            }, 500);\n        } else {\n            view.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text(\n            `${util.commatize(low)} - ${util.commatize(high)}`\n        );\n        this.nav_input.val(\n            `${this.chrom}:${util.commatize(low)}-${util.commatize(high)}`\n        );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var view = this;\n        var chrom_data = $.Deferred();\n        $.ajax({\n            url: `${Galaxy.root}api/genomes/${this.dbkey}`,\n            data: url_parms,\n            dataType: \"json\",\n            success: function(result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n\n                view.chrom_select.html(\"\");\n                view.chrom_select.append(\n                    $('<option value=\"\">Select Chrom/Contig</option>')\n                );\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            `<option value=\"previous\">Previous ${MAX_CHROMS_SELECTABLE}</option>`\n                        )\n                    );\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            `<option value=\"next\">Next ${MAX_CHROMS_SELECTABLE}</option>`\n                        )\n                    );\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(`Could not load chroms for this dbkey: ${view.dbkey}`);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(() => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, (v, i) => v.chrom === chrom)[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, () => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/);\n\n        var chrom = chrom_pos[0];\n        var new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined;\n        var new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(() => {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", () => {\n            self.changed();\n        });\n    },\n\n    add_label_track: function(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this;\n\n        var // Either redrawing a single drawable or all view's drawables.\n        track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, track => {\n            var track_options = _.find(\n                view.tracks_to_be_redrawn,\n                to => to[0] === track\n            );\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(() => {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low;\n        var high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b =\n            this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px =\n            this.low /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var width_px =\n            (this.high - this.low) /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box\n            .css({\n                left: left_px,\n                width: Math.max(min_width_px, width_px)\n            })\n            .show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\n                \"left\",\n                left_px - (min_width_px - width_px) / 2\n            );\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, track_options => {\n            var track = track_options[0];\n            var options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, label_track => {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function(point, container) {\n        if (\n            this.max_high === 0 ||\n            this.high - this.low <= this.min_separation\n        ) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center =\n                point /\n                    this.viewport_container.width() *\n                    (this.high - this.low) +\n                this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height(\n            this.container.height() -\n                this.top_container.height() -\n                this.bottom_container.height()\n        );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n            content_div: this.overview_viewport\n        });\n\n        var view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = () => {\n            view.overview_highlight\n                .show()\n                .height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(\n                view.overview_drawable.content_div.height() +\n                    view.overview_box.outerHeight()\n            );\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (\n            options.tool_state !== undefined &&\n            options.tool_state.hidden !== undefined\n        ) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\");\n        var param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\")\n            .addClass(\"param-label\")\n            .text(param.get(\"label\"))\n            .appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\")\n            .addClass(\"param-input\")\n            .html(param.get(\"html\"))\n            .appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n        var tool = this.model;\n        var parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div\n            .bind(\"drag\", e => {\n                e.stopPropagation();\n            })\n            .click(e => {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", e => {\n                e.stopPropagation();\n            })\n            .keydown(e => {\n                e.stopPropagation();\n            });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\")\n            .appendTo(parent_div)\n            .text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(param => {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\")\n            .addClass(\"param-row\")\n            .appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on visible region\")\n            .appendTo(run_tool_row);\n        run_on_region_button.click(() => {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(() => {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get(\"track\").dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id\n            },\n            null,\n            track_data => {\n                Galaxy.modal.show({\n                    title: `${tool.get(\"name\")} is Running`,\n                    body: `${tool.get(\n                        \"name\"\n                    )} is running on the complete dataset. Tool outputs are in dataset's history.`,\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\");\n\n        var tool = this.model;\n\n        var region = new visualization.GenomeRegion({\n            chrom: track.view.chrom,\n            start: track.view.low,\n            end: track.view.high\n        });\n\n        var url_params = {\n            target_dataset_id: track.dataset.id,\n            action: \"rerun\",\n            tool_id: tool.id,\n            regions: [region.toJSON()]\n        };\n\n        var current_track = track;\n\n        var // Set name of track to include tool name, parameters, and region used.\n        track_name =\n            tool.get(\"name\") +\n            current_track.tool_region_and_parameters_str(region);\n\n        var container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(\n                current_track,\n                group,\n                false\n            );\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(\n                current_track.view.content_div.children()[index]\n            );\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(\n            current_track.filters_manager.copy(new_track)\n        );\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track, track_data => {\n            new_track.set_dataset(new data.Dataset(track_data));\n            new_track.tiles_div.text(\"Running job.\");\n            new_track.init();\n        });\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: `${Galaxy.root}api/tools`,\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(response => {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(\n                    DATA_CANNOT_RUN_TOOL + response.message\n                );\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (\n        this.filter.high === Number.MAX_VALUE ||\n        this.filter.low === -Number.MAX_VALUE ||\n        this.filter.low === this.filter.high\n    ) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (\n        (parseFloat(feature_data[this.filter.index]) - this.filter.low) /\n        (this.filter.high - this.filter.low)\n    );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = () => {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = () => {};\n\nvar FeatureTrackTile = function(\n    track,\n    region,\n    w_scale,\n    canvas,\n    data,\n    mode,\n    message,\n    all_slotted,\n    feature_mapper,\n    incomplete_features,\n    seq_data\n) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = () => {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset =\n            obj_dict.dataset instanceof Backbone.Model\n                ? obj_dict.dataset\n                : new data.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait =\n        \"data_query_wait\" in obj_dict\n            ? obj_dict.data_query_wait\n            : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager =\n        \"data_manager\" in obj_dict\n            ? obj_dict.data_manager\n            : new visualization.GenomeDataManager({\n                  dataset: this.dataset,\n                  // HACK: simulate 'genome' attributes from view for now.\n                  // View should eventually use Genome object.\n                  genome: new visualization.Genome({\n                      key: view.dbkey,\n                      chroms_info: {\n                          chrom_info: view.chrom_data\n                      }\n                  }),\n                  data_mode_compatible: this.data_and_mode_compatible,\n                  can_subset: this.can_subset\n              });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(\n        this.container_div\n    );\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                } else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(\n                        track.config.get_value(\"name\") +\n                            track.tool_region_and_parameters_str()\n                    );\n                } else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html = `<strong>Tool</strong>:${track.tool.get(\n                    \"name\"\n                )}<br/><strong>Dataset</strong>:${track.config.get_value(\n                    \"name\"\n                )}<br/><strong>Region(s)</strong>: <select name=\"regions\"><option value=\"cur\">current viewing area</option><option value=\"bookmarks\">bookmarks</option><option value=\"both\">current viewing area and bookmarks</option></select>`;\n\n                var cancel_fn = () => {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                };\n\n                var ok_fn = () => {\n                    var regions_to_use = $(\n                            'select[name=\"regions\"] option:selected'\n                        ).val(),\n                        regions,\n                        view_region = new visualization.GenomeRegion({\n                            chrom: view.chrom,\n                            start: view.low,\n                            end: view.high\n                        }),\n                        bookmarked_regions = _.map(\n                            $(\".bookmark\"),\n                            elt =>\n                                new visualization.GenomeRegion({\n                                    from_str: $(elt)\n                                        .children(\".position\")\n                                        .text()\n                                })\n                        );\n\n                    // Get regions for visualization.\n                    if (regions_to_use === \"cur\") {\n                        // Use only current region.\n                        regions = [view_region];\n                    } else if (regions_to_use === \"bookmarks\") {\n                        // Use only bookmarks.\n                        regions = bookmarked_regions;\n                    } else {\n                        // Use both current region and bookmarks.\n                        regions = [view_region].concat(bookmarked_regions);\n                    }\n\n                    Galaxy.modal.hide();\n\n                    // Go to visualization.\n                    window.location.href = `${Galaxy.root}visualization/sweepster?${$.param(\n                        {\n                            dataset_id: track.dataset.id,\n                            hda_ldda: track.dataset.get(\"hda_ldda\"),\n                            regions: JSON.stringify(\n                                new Backbone.Collection(regions).toJSON()\n                            )\n                        }\n                    )}`;\n                };\n\n                var check_enter_esc = e => {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n\n                // show dialog\n                Galaxy.modal.show({\n                    title:\n                        \"Visualize tool parameter space and output from different parameter settings?\",\n                    body: html,\n                    buttons: { No: cancel_fn, Yes: ok_fn }\n                });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function() {\n        return $(\"<div/>\")\n            .addClass(\"track\")\n            .attr(\"id\", `track_${this.id}`);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(\n            () => {\n                if (track.config.get_value(\"content_visible\")) {\n                    in_handle = true;\n                    drag_control.show();\n                }\n            },\n            () => {\n                in_handle = false;\n                if (!in_drag) {\n                    drag_control.hide();\n                }\n            }\n        );\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control\n            .hide()\n            .bind(\"dragstart\", (e, d) => {\n                in_drag = true;\n                d.original_height = $(track.content_div).height();\n            })\n            .bind(\"drag\", (e, d) => {\n                var new_height = Math.min(\n                    Math.max(d.original_height + d.deltaY, track.min_height_px),\n                    track.max_height_px\n                );\n                $(track.tiles_div).css(\"height\", new_height);\n                track.visible_height_px =\n                    track.max_height_px === new_height ? 0 : new_height;\n                track.on_resize();\n            })\n            .bind(\"dragend\", (e, d) => {\n                track.tile_cache.clear();\n                in_drag = false;\n                if (!in_handle) {\n                    drag_control.hide();\n                }\n                track.config.set_value(\"height\", track.visible_height_px);\n                track.changed();\n            })\n            .appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\")\n            .addClass(\"message\")\n            .html(msg_html)\n            .appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\")\n            .addClass(\"tiles\")\n            .appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred();\n\n        var params = {\n            hda_ldda: track.dataset.get(\"hda_ldda\"),\n            data_type: this.dataset_check_type,\n            chrom: track.view.chrom,\n            retry: retry\n        };\n\n        $.getJSON(this.dataset.url(), params, result => {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"View error\")\n                            .click(() => {\n                                Galaxy.modal.show({\n                                    title: \"Trackster Error\",\n                                    body: `<pre>${result.message}</pre>`,\n                                    buttons: {\n                                        Close: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            })\n                    );\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"Try again\")\n                            .click(() => {\n                                track.init(true);\n                            })\n                    );\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (\n                result === \"no data\" ||\n                (result.data !== undefined &&\n                    (result.data === null || result.data.length === 0))\n            ) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(() => {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\n                        \"height\",\n                        `${track.visible_height_px}px`\n                    );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(() => {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n\n                // Tracks may not have stat data either because there is no data or data is not yet ready.\n                if (data && data.min !== undefined && data.max !== undefined) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update config, prefs\n                    track.config.set_default_value(\"min_value\", min_value);\n                    track.config.set_default_value(\"max_value\", max_value);\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(\n        this,\n        \"filters\" in obj_dict ? obj_dict.filters : null\n    );\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool\n        ? new TracksterTool(\n              _.extend(obj_dict.tool, {\n                  track: this,\n                  tool_state: obj_dict.tool_state\n              })\n          )\n        : null;\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\")\n        .addClass(\"tiles\")\n        .appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\")\n        .addClass(\"overlay\")\n        .appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title:\n                \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n                if (\n                    isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                    isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update the prefs\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\n            \"title\",\n            `Set display mode (now: ${track.mode})`\n        );\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return `${w_scale}_${tile_region}`;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after;\n        var low = this.view.low;\n        var high = this.view.high;\n        var range = high - low;\n        var width = this.view.container.width();\n        var w_scale = this.view.resolution_px_b;\n        var resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n        tile_width = Math.floor(TILE_SIZE * resolution);\n\n        var // Index of first tile that overlaps visible region.\n        tile_index = Math.floor(low / tile_width);\n\n        var tile_region;\n        var tile_promise;\n        var tile_promises = [];\n        var tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(tile => {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div\n                .children(\".remove\")\n                .removeClass(\"remove\")\n                .remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(() => {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, t => t !== null);\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this;\n        var css_class = type === \"max\" ? \"top\" : \"bottom\";\n        var text = type === \"max\" ? \"max\" : \"min\";\n        var pref_name = type === \"max\" ? \"max_value\" : \"min_value\";\n        var label = this.container_div.find(`.yaxislabel.${css_class}`);\n        var value = round(track.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change =\n            on_change ||\n            (() => {\n                track.request_draw({ clear_tile_cache: true });\n            });\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\")\n                .text(value)\n                .make_text_editable({\n                    num_cols: 12,\n                    on_finish: function(new_val) {\n                        $(\".tooltip\").remove();\n                        track.config.set_value(pref_name, round(new_val, 1));\n                        on_change();\n                    },\n                    help_text: `Set ${text} value`\n                })\n                .addClass(`yaxislabel ${css_class}`)\n                .css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(\n            tiles,\n            tile => tile instanceof LineTrackTile\n        );\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, tile => {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            track._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, tile => tile.has_icons);\n\n            if (icons_present) {\n                _.each(tiles, tile => {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force;\n        var mode = options.mode || this.mode;\n        var resolution = 1 / w_scale;\n\n        var // Useful vars.\n        track = this;\n\n        var drawables = this._get_drawables();\n        var key = this._gen_tile_cache_key(w_scale, region);\n\n        var is_tile = o => o && \"track\" in o;\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : track.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = () => {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, m => m === mode)\n                ? \"Coverage\"\n                : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, (\n                d // Get the track data/promise.\n            ) =>\n                d.data_manager.get_data(\n                    region,\n                    data_mode,\n                    resolution,\n                    track.data_url_extra_params\n                )\n            );\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(\n                    view.reference_track.data_manager.get_data(\n                        region,\n                        mode,\n                        resolution,\n                        view.reference_track.data_url_extra_params\n                    )\n                );\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(() => {\n            var tile_data = get_tile_data();\n            var tracks_data = tile_data;\n            var seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, d => util.is_deferred(d))) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(\n                    track.draw_helper(region, w_scale, options)\n                ).then(tile => {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(\n                    tile_data.pop(),\n                    region\n                );\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [];\n\n            var drawing_heights = [];\n\n            _.each(drawables, (d, i) => {\n                var mode = d.mode;\n                var data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(\n                    d.get_canvas_height(data, mode, w_scale, width)\n                );\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas();\n            var tile_low = region.get(\"start\");\n            var tile_high = region.get(\"end\");\n            var all_data_index = 0;\n\n            var width =\n                Math.ceil((tile_high - tile_low) * w_scale) + track.left_offset;\n\n            var height = _.max(drawing_heights);\n            var tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, (d, i) => {\n                tile = d.draw_tile(\n                    tracks_data[i],\n                    ctx,\n                    drawing_modes[i],\n                    region,\n                    w_scale,\n                    seq_data\n                );\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if (\n            [undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1\n        ) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if (\n            [undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !==\n            -1\n        ) {\n            this.config.set_value(\n                \"max_value\",\n                _.max(_.map(result.data, d => d[1])) || 0\n            );\n        }\n\n        var canvas = ctx.canvas;\n\n        var painter = new painters.LinePainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this;\n        var tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round(\n            (tile.low -\n                (this.is_overview ? this.view.max_low : this.view.low)) *\n                w_scale\n        );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(\n            this.max_height_px,\n            tile_element.height() - 2\n        );\n\n        // Update height for all tiles based on max height.\n        tile_element\n            .parent()\n            .children()\n            .css(\"height\", `${this.max_height_px}px`);\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", `${track_height}px`);\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this;\n        var region_str = region !== undefined ? region.toString() : \"all\";\n        var param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return ` - region=[${region_str}], parameters=[${param_str}]`;\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (\n            data.dataset_type === \"bigwig\" ||\n            data.extra_info === \"no_detail\"\n        ) {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view;\n        var range = view.high - view.low;\n\n        var tickDistance = Math.floor(\n            Math.pow(10, Math.floor(Math.log(range) / Math.log(10)))\n        );\n\n        var position = Math.floor(view.low / tickDistance) * tickDistance;\n        var width = this.view.container.width();\n        var new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor(\n                (position - view.low) / range * width\n            );\n            new_div.append(\n                $(\"<div/>\")\n                    .addClass(\"pos-label\")\n                    .text(util.commatize(position))\n                    .css({\n                        left: screenPosition\n                    })\n            );\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, d => {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    action_icons_def: [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, d => {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(() => {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n            name: this.config.get_value(\"name\")\n        });\n\n        var track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(\n            _.map(this.drawables, d => d.config.get_value(\"min_value\"))\n        );\n\n        var max = _.max(\n            _.map(this.drawables, d => d.config.get_value(\"max_value\"))\n        );\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this;\n        var min_value = this.config.get_value(\"min_value\");\n        var max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1;\n\n        var i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this;\n\n        var t = () => {\n            track.update_all_min_max();\n        };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function(view) {\n    TiledTrack.call(\n        this,\n        view,\n        { content_div: view.top_labeltrack },\n        { resize: false, header: false }\n    );\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = `${Galaxy.root}api/genomes/${this.view.dbkey}`;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 13,\n                hidden: true\n            }\n        ]);\n    },\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\");\n        var new_visible;\n        var tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(\n                this,\n                region,\n                w_scale,\n                options\n            );\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region);\n\n        var seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(\n        supportsByteRanges(`${Galaxy.root}datasets/${this.dataset.id}/display`)\n    ).then(supportsByteRanges => {\n        if (supportsByteRanges) {\n            self.data_manager = new bbi.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            { key: \"color\", label: \"Color\", type: \"color\" },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(\n    DiagonalHeatmapTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    {\n        display_modes: [\"Heatmap\"],\n\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 500,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        },\n\n        /**\n     * Additional initialization required before drawing track for the first time.\n     */\n        predraw_init: function() {\n            var track = this;\n            return $.getJSON(\n                track.dataset.url(),\n                {\n                    data_type: \"data\",\n                    stats: true,\n                    chrom: track.view.chrom,\n                    low: 0,\n                    high: track.view.max_high,\n                    hda_ldda: track.dataset.get(\"hda_ldda\")\n                },\n                result => {\n                    var data = result.data;\n                }\n            );\n        },\n\n        /**\n     * Draw tile.\n     */\n        draw_tile: function(result, ctx, mode, region, w_scale) {\n            // Paint onto canvas.\n            var canvas = ctx.canvas;\n\n            var painter = new painters.DiagonalHeatmapPainter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode\n            );\n\n            painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n            return new Tile(this, region, w_scale, canvas, result.data);\n        }\n    }\n);\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Block color\",\n                type: \"color\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand color\",\n                type: \"color\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true,\n                help:\n                    \"Show the number of items in each bin when drawing summary histogram\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"connector_style\",\n                label: \"Connector style\",\n                type: \"select\",\n                default_value: \"fishbones\",\n                options: [\n                    {\n                        label: \"Line with arrows\",\n                        value: \"fishbone\"\n                    },\n                    { label: \"Arcs\", value: \"arcs\" }\n                ]\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var track = this;\n        var i;\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), inc_features => {\n                _.each(inc_features, feature => {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, tile => {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(\n                    all_incomplete_features,\n                    _.map(tile.incomplete_features, f => f[0])\n                );\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(\n                    tile_incomplete_features,\n                    _.keys(tile.other_tiles_features_drawn)\n                );\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                        data: _.values(tile_incomplete_features)\n                    };\n\n                    var new_canvas = self.view.canvas_manager.new_canvas();\n                    var new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(\n                        tile.canvas.height,\n                        self.get_canvas_height(\n                            features,\n                            tile.mode,\n                            tile.w_scale,\n                            100\n                        )\n                    );\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(\n                        features,\n                        new_canvas_ctx,\n                        tile.mode,\n                        tile.region,\n                        tile.w_scale,\n                        tile.seq_data\n                    );\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(\n                        tile.other_tiles_features_drawn,\n                        all_incomplete_features\n                    );\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters;\n            var f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false;\n\n            var example_feature;\n            var filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (\n                            filter.applies_to(example_feature) &&\n                            filter.min !== filter.max\n                        ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\n                \"title\",\n                `Set display mode (now: Auto/${mode})`\n            );\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context;\n\n        var slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new slotting.FeatureSlotter(\n                level,\n                mode,\n                MAX_FEATURE_DEPTH,\n                x => dummy_context.measureText(x)\n            );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(\n                w_scale,\n                result.data,\n                mode\n            );\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return Math.max(\n                this.min_height_px,\n                dummy_painter.get_required_height(rows_required, canvas_width)\n            );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this;\n        var canvas = ctx.canvas;\n        var tile_low = region.get(\"start\");\n        var tile_high = region.get(\"end\");\n        var left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                mode,\n                region,\n                w_scale\n            );\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [];\n\n        var slots = this.slotters[w_scale].slots;\n        var all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter\n            ? new FilterScaler(this.filters_manager.alpha_filter)\n            : null;\n\n        var filter_height_scaler = this.filters_manager.height_filter\n            ? new FilterScaler(this.filters_manager.height_filter)\n            : null;\n\n        var painter = new this.painter(\n            filtered,\n            tile_low,\n            tile_high,\n            this.config.to_key_value_dict(),\n            mode,\n            filter_alpha_scaler,\n            filter_height_scaler,\n            // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n            ref_seq,\n            b => track.view.get_base_color(b)\n        );\n\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(\n                ctx,\n                canvas.width,\n                canvas.height,\n                w_scale,\n                slots\n            );\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(\n                track,\n                region,\n                w_scale,\n                canvas,\n                result.data,\n                mode,\n                result.message,\n                all_slotted,\n                feature_mapper,\n                incomplete_features,\n                ref_seq\n            );\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"show_sample_data\",\n                label: \"Show sample data\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_labels\",\n                label: \"Show summary and sample labels\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"summary_height\",\n                label: \"Locus summary height\",\n                type: \"float\",\n                default_value: 20\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                \"Histogram\",\n                region,\n                w_scale\n            );\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view;\n\n            var painter = new this.painter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode,\n                b => view.get_base_color(b)\n            );\n\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\")\n                ? this.dataset.get_metadata(\"sample_names\").length\n                : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (\n            line_track_tiles.length === 0 &&\n            this.config.get_value(\"show_labels\") &&\n            sample_names &&\n            sample_names.length > 1\n        ) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\")\n                        .text(\"Summary\")\n                        .addClass(\"yaxislabel variant top\")\n                        .css({\n                            \"font-size\": `${font_size}px`,\n                            top: `${(this.config.get_value(\"summary_height\") -\n                                font_size) /\n                                2}px`\n                        })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\")\n                            .html(samples_div_html)\n                            .addClass(\"yaxislabel variant top sample\")\n                            .css({\n                                top: this.config.get_value(\"summary_height\")\n                            })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = `${this.mode === \"Squish\" ? 5 : 10}px`;\n            $(this.tiles_div)\n                .find(\".sample\")\n                .css({\n                    \"font-size\": font_size,\n                    \"line-height\": font_size\n                });\n            // Color labels to preference color.\n            $(this.tiles_div)\n                .find(\".yaxislabel\")\n                .css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(\n    ReadTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    FeatureTrack.prototype,\n    {\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"block_color\",\n                    label: \"Histogram color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"detail_block_color\",\n                    label: \"Sense strand block color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand block color\",\n                    type: \"color\",\n                    default_value: \"#DDDDDD\"\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Histogram minimum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Histogram maximum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 0,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        }\n    }\n);\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = (template, view, container) => {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexport default {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n"]}