{"version":3,"sources":["viz/trackster/tracks.js"],"names":["define","_","visualization","viz_views","util","slotting","painters","filters_mod","data","tools_mod","config_mod","bbi","round","num","places","promise","url","beforeSend","val","supportsByteRanges","$","Deferred","ajax","type","xhr","setRequestHeader","success","result","status","resolve","extend","html_elt_js_obj_dict","is_container","element","obj","moveable","handle_class","container_selector","element_js_obj","this_obj","attr","bind","handle","relative","e","d","this","child","container","top","bottom","parent","children","length","cur_container","insertAfter","remove_drawable","add_drawable","offsetY","insertBefore","add_drawable_before","i","outerHeight","is","get","find","prepend","hasClass","position","removeClass","append","move_drawable","deltaY","MAX_FEATURE_DEPTH","addClass","MIN_SQUISH_VIEW_WIDTH","CONTINUOUS_DATA_MODES","Drawable","view","obj_dict","config","ConfigSettingCollection","id","id_counter","drag_handle_class","set_value","is_overview","action_icons","from_models_and_saved_values","config_params","prefs","header_div","name","config_onchange","header","container_div","build_container_div","header_view","icons_div","model","hide","$el","prototype","action_icons_def","hover","show","on_click_fn","drawable","title","show_contents","toggle_icon","hide_contents","css_class","ConfigSettingCollectionView","collection","key","remove","can_draw","label","default_value","get_value","hidden","init","request_draw","changed","enabled","_draw","old_name","to_dict","set_name","new_name","revert_name","update_icons","call","get_drawables","unpack_drawables","obj_type","DrawableCollection","drawables_array","drawables","object_from_template","options","dictified_drawables","push","to_key_value_dict","index","other","replace_drawable","indexOf","new_drawable","old_drawable","update_html","replaceWith","splice","new_position","queue","get_tracks","track_type","slice","tracks","shift","DrawableGroup","filters_manager","content_div","saved_filters_managers","appendTo","FiltersManager","after","parent_div","old_manager","filters","visible","group","_restore_filter_managers","show_composite_track","clear_filters","tiles_div","setup_multitrack_filtering","clear_tile_cache","toggle","num_drawables","composite_icon","filters_icon","num_feature_tracks","CompositeTrack","j","get_type","a_type","can_composite","FeatureTrack","filter","LineTrack","shared_filters","remove_all","new_filter","NumberFilter","filter_name","add_filter","composite_track","init_filters","label_tracks","each","tracks_to_be_redrawn","TracksterView","Backbone","View","initialize","chrom","requested_redraw","vis_id","dbkey","stand_alone","undefined","parent_element","max_low","top_container","max_high","zoom_factor","browser_content_div","min_separation","has_changes","bottom_container","load_chroms_deferred","render","canvas_manager","viewport_container","CanvasManager","ownerDocument","reset","intro_div","add_tracks_button","select_datasets","track","nav_container","top_labeltrack","overview_box_background","default_overview_height","overview_box","nav_controls","chrom_select","which","keyCode","click","go_to","prependTo","nav","nav_input","location_span","css","overview","select","autocomplete","overview_viewport","source","request","response","all_features","feature_search_deferreds","map","concat","dataset_features","apply","value","minLength","tooltip","placement","hidden_input","zo_link","low","high","zoom_out","zi_link","t","change_chrom","data_manager","term","when","done","feature","zoom_in","pageX","load_chroms","current_x","offsetX","current_height","trigger","clientY","new_scroll","delta_chrom","move_delta","delta","Math","width","overview_close","reset_overview","clientX","original_low","left","max","update_location","scrollTop","min","height","proxy","startX","offset","abs","span","add_label_track","LabelTrack","window","resize_timer","clearTimeout","old_low","request_redraw","update_intro_div","setTimeout","timer","document","redraw","self","base","toLowerCase","text","trigger_navigate","new_chrom","url_parms","new_high","delay","new_low","reference_track","commatize","chrom_data","chrom_info","Galaxy","root","error","alert","reference","ReferenceTrack","ref_track","html","len","chrom_option","next_chroms","chrom_start_index","start_index","found","grep","v","chrom_pos","split","str","then","replace","parseInt","redraw_on_move_fn","move_fraction","fraction","current_chrom_span","data_fetch","on","track_list","label_track","track_options","to","requestAnimationFrame","_redraw","overview_highlight","ceil","resolution_px_b","left_px","cur_center","point","new_half","width_px","resize_viewport","resize_window","set_overview","overview_drawable","dataset","postdraw_actions","copy","tool_state","set","ToolParameterView","TracksterTool","param_div","Tool","defaults","html_div","remove_inputs","state_dict","TracksterToolView","is_visible","change :input","stopPropagation","param","update_value","param_view","target","run_tool_row","run_on_dataset_button","run_on_dataset","keydown","tool","update_params","run_on_region","target_dataset_id","action","set_visible","tool_id","current_track","track_data","modal","body","buttons","Close","region","GenomeRegion","end","url_params","hda_ldda","new_track","change_mode","track_name","tool_region_and_parameters_str","get_inputs_dict","ss_deferred","ajax_settings","constructor","init_for_tool_data","mode","set_filters_manager","go","run","success_callback","inputs","ServerStateDeferred","FilterScaler","Scaler","default_val","dataType","contentType","interval","success_fn","DATA_NOCONVERTER","html_elt","canvas","message","FeatureTrackTile","all_slotted","feature_data","has_icons","Number","MAX_VALUE","incomplete_features","parseFloat","Tile","w_scale","stale","predisplay_actions","LineTrackTile","feature_mapper","seq_data","other_tiles_features_drawn","Track","Model","Dataset","data_url_extra_params","data_query_wait","GenomeDataManager","genome","Genome","data_mode_compatible","data_and_mode_compatible","min_height_px","resize","cancel_fn","view_region","bookmarked_regions","regions_to_use","dataset_id","regions","JSON","check_enter_esc","unbind","set_dataset","start","elt","from_str","drag_control","href","stringify","Collection","toJSON","No","Yes","ok_fn","on_resize","add_resize_handle","in_handle","in_drag","show_message","new_height","original_height","max_height_px","visible_height_px","tile_cache","clear","data_type","retry","msg_elt","msg_html","init_deferred","predraw_init","params","getJSON","dataset_check_type","kind","TiledTrack","valid_chroms","max_value","set_default_value","tool_view","stats","overlay_div","min_value","floor","mean","sd","slotters","filters_available","Cache","left_offset","dynamic_tool_div","isNaN","max_rows","new_mode","mode_icon","_gen_tile_cache_key","set_min_max","before_draw","range","resolution","tools_icon","tile_width","tile_region","tile_promises","tile_promise","tile_index","tiles","clear_after","_add_yaxis_label","on_change","on_finish","TILE_CACHE_SIZE","help_text","line_track_tiles","tile","draw_helper","icons_present","pref_name","ERROR_PADDING","get_mode","make_text_editable","num_cols","new_val","update_auto_mode","_get_drawables","is_tile","o","force","data_mode","tile_data","display_mode","get_elt","drawing_modes","show_tile","get_tile_data","tile_low","all_data_index","m","get_data","tile_drawn","set_elt","is_deferred","subset_entry","pop","_draw_line_track_tile","drawing_heights","tracks_data","get_canvas_height","painter","ctx","tile_high","getContext","draw_tile","globalAlpha","globalCompositeOperation","canvas_width","tile_element","track_height","ref_seq","can_subset","toString","values","join","dataset_type","extra_info","entry","tickDistance","pow","log","show_group","screenPosition","new_div","ReadTrack","init_deferreds","union","visible_height","update_all_min_max","param_space_viz_icon","max_height","data_url","new_visible","subset","char_width_px","manager","default_font","c","str_len","fillStyle","fillText","cur_visible","display_modes","font","textAlign","get_base_color","DiagonalHeatmapTrack","BBIDataManager","DiagonalHeatmapPainter","start_end_dct","set_painter_from_config","all_incomplete_features","pluck","inc_features","tile_incomplete_features","omit","f","new_canvas","draw","new_canvas_ctx","summary_draw_height","help","update_ui_elt","ArcLinkedFeaturePainter","LinkedFeaturePainter","keys","features","drawImage","translate","new_tile","example_feature","applies_to","rows_required","incremental_slots","show_more_rows_icon","slots","dummy_context","slotter","level","hide_feature","FeatureSlotter","x","measureText","filtered","filter_height_scaler","draw_results","dummy_painter","get_required_height","cur_tile","flen","update_attrs","keep","num_samples","filter_alpha_scaler","alpha_filter","height_filter","b","deferreds","VariantTrack","font_size","ReadPainter","get_metadata","match","drawable_type","addable_objects","sample_names","font-size","samples_div_html","line-height","VcfTrack","template"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["define([\n    \"libs/underscore\",\n    \"viz/visualization\",\n    \"viz/viz_views\",\n    \"viz/trackster/util\",\n    \"viz/trackster/slotting\",\n    \"viz/trackster/painters\",\n    \"viz/trackster/filters\",\n    \"mvc/dataset/data\",\n    \"mvc/tool/tools\",\n    \"utils/config\",\n    \"viz/bbi-data-manager\",\n    \"ui/editable-text\",\n], function(_, visualization, viz_views, util, slotting, painters, filters_mod, data, tools_mod, config_mod, bbi) {\n\n\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = function(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = function(element, handle_class, container_selector, element_js_obj) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element.bind( \"drag\", { handle: \".\" + handle_class, relative: true }, function ( e, d ) {\n        var element = $(this),\n            parent = $(this).parent(),\n            // Only sorting amongst tracks and groups.\n            children = parent.children('.track,.group'),\n            this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n            child,\n            container,\n            top,\n            bottom,\n            i;\n\n        //\n        // Enable three types of dragging: (a) out of container; (b) into container;\n        // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n        //\n\n        // Handle dragging out of container.\n        container = $(this).parents(container_selector);\n        if (container.length !== 0) {\n            top = container.position().top;\n            bottom = top + container.outerHeight();\n            var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n            if (d.offsetY < top) {\n                // Moving above container.\n                $(this).insertBefore(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable_before(this_obj, cur_container);\n                return;\n            }\n            else if (d.offsetY > bottom) {\n                // Moving below container.\n                $(this).insertAfter(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle dragging into container. Child is appended to container's content_div.\n        container = null;\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            top = child.position().top;\n            bottom = top + child.outerHeight();\n            // Dragging into container if child is a container and offset is inside container.\n            if ( child.is(container_selector) && this !== child.get(0) &&\n                 d.offsetY >= top && d.offsetY <= bottom ) {\n                // Append/prepend based on where offsetY is closest to and return.\n                if (d.offsetY - top < bottom - d.offsetY) {\n                    child.find(\".content-div\").prepend(this);\n                }\n                else {\n                    child.find(\".content-div\").append(this);\n                }\n                // Update containers. Object may not have container if it is being moved quickly.\n                if (this_obj.container) {\n                    this_obj.container.remove_drawable(this_obj);\n                }\n                html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle sibling movement, aka sorting.\n\n        // Determine new position\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            if ( d.offsetY < child.position().top &&\n                 // Cannot move tracks above reference track or intro div.\n                 !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\")) ) {\n                break;\n            }\n        }\n\n        // If not already in the right place, move. Need\n        // to handle the end specially since we don't have\n        // insert at index\n        if ( i === children.length ) {\n            if ( this !== children.get(i - 1) ) {\n                parent.append(this);\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n            }\n        }\n        else if ( this !== children.get(i) ) {\n            $(this).insertBefore( children.get(i) );\n            // Need to adjust insert position if moving down because move is changing\n            // indices of all list items.\n            html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, (d.deltaY > 0 ? i-1 : i) );\n        }\n    }).bind(\"dragstart\", function() {\n        $(this).addClass('dragging');\n    }).bind(\"dragend\", function() {\n        $(this).removeClass('dragging');\n    });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar\n    // Padding at the top of tracks for error messages\n    ERROR_PADDING = 20,\n    // Maximum number of rows un a slotted track\n    MAX_FEATURE_DEPTH = 100,\n    // Minimum width for window for squish to be used.\n    MIN_SQUISH_VIEW_WIDTH = 12000,\n    // Number of pixels per tile, not including left offset.\n    TILE_SIZE = 400,\n    DEFAULT_DATA_QUERY_WAIT = 5000,\n    // Maximum number of chromosomes that are selectable at any one time.\n    MAX_CHROMS_SELECTABLE = 100,\n    DATA_ERROR = \"Cannot display dataset due to an error. \",\n    DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n    DATA_NONE = \"No data for this chrom/contig.\",\n    DATA_PENDING = \"Preparing data. This can take a while for a large dataset. \" +\n                   \"If the visualization is saved and closed, preparation will continue in the background.\",\n    DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n    DATA_LOADING = \"Loading data...\",\n    DATA_OK = \"Ready for display\",\n    TILE_CACHE_SIZE = 10,\n    DATA_CACHE_SIZE = 20,\n\n    // Numerical/continuous data display modes.\n    CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: 'HEAD',\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) { Drawable.id_counter = 0; }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value('name')) {\n        this.config.set_value('name', obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on('change', this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            function() { icons_div.show(); }, function() { icons_div.hide(); }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if ( drawable.config.get_value('content_visible') ) {\n                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value('content_visible', false);\n            }\n            else {\n                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                drawable.config.set_value('content_visible', true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal('Configure Track');\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: 'name', label: 'Name', type: 'text', default_value: '' },\n        { key: 'content_visible', type: 'bool', default_value: true, hidden: true }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value('content_visible')) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value('name');\n        this.config.set_value('name', new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value('name', this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function () {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0),\n            tracks = [],\n            drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            }\n            else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\").addClass(\"content-div\").attr(\"id\", \"group_\" + this.id + \"_content_div\").appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after( $(\"<div style='clear: both'/>\") );\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if ('drawables' in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if ('filters' in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [\n        Drawable.prototype.action_icons_def[0],\n        Drawable.prototype.action_icons_def[1],\n        // Replace group with composite track.\n        {\n            name: \"composite_icon\",\n            title: \"Show composite track\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(group) {\n                $(\".tooltip\").remove();\n                group.show_composite_track();\n            }\n        },\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(group) {\n                // TODO: update Tooltip text.\n                if (group.filters_manager.visible()) {\n                    // Hiding filters.\n                    group.filters_manager.clear_filters();\n                    group._restore_filter_managers();\n                    // TODO: maintain current filter by restoring and setting saved manager's\n                    // settings to current/shared manager's settings.\n                    // TODO: need to restore filter managers when moving drawable outside group.\n                }\n                else {\n                    // Showing filters.\n                    group.setup_multitrack_filtering();\n                    group.request_draw({ clear_tile_cache: true });\n                }\n                group.filters_manager.toggle();\n            }\n        },\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    build_container_div: function() {\n        var container_div = $(\"<div/>\").addClass(\"group\").attr(\"id\", \"group_\" + this.id);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function () {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        }\n        else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        }\n        else { // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i, j, drawable,\n                same_type = true,\n                a_type = this.drawables[0].get_type(),\n                num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    can_composite = false;\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            }\n            else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {},\n                    filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                var\n                    filters,\n                    new_filter,\n                    min,\n                    max;\n                for (var filter_name in shared_filters) {\n                    filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        new_filter = new filters_mod.NumberFilter( {\n                                        name: filters[0].name,\n                                        index: filters[0].index\n                                        } );\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            }\n            else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value('name'),\n            drawables: this.drawables\n        });\n        var index = this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), { \"filters\": this.filters_manager.to_dict() });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function(options) {\n        _.each(this.drawables, function(d) {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = (obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true);\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager( this.container.get(0).ownerDocument );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values( [\n                { key: 'name', label: 'Name', type: 'text', default_value: '' },\n                { key: 'a_color', label: 'A Color', type: 'color', default_value: \"#FF0000\" },\n                { key: 'c_color', label: 'C Color', type: 'color', default_value: \"#00FF00\" },\n                { key: 'g_color', label: 'G Color', type: 'color', default_value: \"#0000FF\" },\n                { key: 't_color', label: 'T Color', type: 'color', default_value: \"#FF00FF\" },\n                { key: 'n_color', label: 'N Color', type: 'color', default_value: \"#AAAAAA\" }\n            ], { name: obj_dict.name });\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container,\n            view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\").addClass(\"top-container\").appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\").addClass(\"content\").appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\").addClass(\"bottom-container\").appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\").addClass(\"top-labeltrack\").appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\").addClass(\"viewport-container\").attr(\"id\", \"viewport-container\").appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\").addClass(\"intro\").appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\").text(\"Add Datasets to Visualization\").addClass(\"action-button\").appendTo(this.intro_div).click(function () {\n            visualization.select_datasets({ 'dbkey': view.dbkey }, function(tracks) {\n                _.each(tracks, function(track) {\n                    view.add_drawable( object_from_template(track, view, view) );\n                });\n            });\n        });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\").addClass(\"trackster-nav-container\").prependTo(this.top_container);\n        this.nav = $(\"<div/>\").addClass(\"trackster-nav\").appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\").addClass(\"overview\").appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\").addClass(\"overview-viewport\").appendTo(this.overview);\n        this.overview_close = $(\"<a/>\").attr(\"title\", \"Close overview\")\n                                       .addClass(\"icon-button overview-close tooltip\")\n                                       .hide()\n                                       .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\").addClass(\"overview-highlight\").hide().appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\").addClass(\"overview-boxback\").appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\").addClass(\"overview-box\").appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\").addClass(\"nav-controls\").appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\").attr({ \"name\": \"chrom\"}).addClass('chrom-nav').append(\"<option value=''>Loading</option>\").appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27 ) {\n                if ((e.keyCode || e.which) !== 27) { // Not escape key\n                    view.go_to( $(this).val() );\n                }\n                $(this).hide();\n                $(this).val('');\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\").addClass(\"nav-input\").hide().bind(\"keyup focusout\", submit_nav).appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\").addClass(\"location\").attr('title', 'Click to change location').tooltip( { placement: 'bottom' } ).appendTo(this.nav_controls);\n        this.location_span.click(function() {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [],\n                        feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), function(t) {\n                        return t.data_manager.search_features(request.term).success(function(dataset_features) {\n                            all_features = all_features.concat(dataset_features);\n                        });\n                    });\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(function() {\n                        response($.map(all_features, function(feature) {\n                            return {\n                                label: feature[0],\n                                value: feature[1]\n                            };\n                        }));\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\").attr(\"type\", \"hidden\").val(this.vis_id).appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\").attr(\"id\", \"zoom-out\").attr(\"title\", \"Zoom out\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_out(); }).appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\").attr(\"id\", \"zoom-in\").attr(\"title\", \"Zoom in\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_in(); }).appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({low: 0});\n        this.chrom_select.bind(\"change\", function() {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function( e ) {\n            $(this).find(\"input\").trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function( e ) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box.bind(\"dragstart\", function( e, d ) {\n            this.current_x = d.offsetX;\n        }).bind(\"drag\", function( e, d ) {\n            var delta = d.offsetX - this.current_x;\n            this.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low) );\n            view.move_delta(-delta_chrom);\n        });\n\n        this.overview_close.click(function() {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container.bind( \"draginit\", function( e, d ) {\n            // Disable interaction if started in scrollbar (for webkit)\n            if ( e.clientX > view.viewport_container.width() - 16 ) {\n                return false;\n            }\n        }).bind( \"dragstart\", function( e, d ) {\n            d.original_low = view.low;\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n        }).bind( \"drag\", function( e, d ) {\n            var container = $(this);\n            var delta = d.offsetX - d.current_x;\n            var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n            container.scrollTop(new_scroll);\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n            view.move_delta(delta_chrom);\n        });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack.bind( \"dragstart\", function( e, d ) {\n            return $(\"<div/>\").addClass('zoom-area').css(\n                \"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1\n            ).appendTo( $(this) );\n        }).bind( \"drag\", function( e, d ) {\n            $( d.proxy ).css({ left: Math.min( e.pageX, d.startX ) - view.container.offset().left, width: Math.abs( e.pageX - d.startX ) });\n            var min = Math.min(e.pageX, d.startX ) - view.container.offset().left,\n                max = Math.max(e.pageX, d.startX ) - view.container.offset().left,\n                span = (view.high - view.low),\n                width = view.viewport_container.width();\n            view.update_location( Math.round(min / width * span) + view.low,\n                                  Math.round(max / width * span) + view.low );\n        }).bind( \"dragend\", function( e, d ) {\n            var min = Math.min(e.pageX, d.startX),\n                max = Math.max(e.pageX, d.startX),\n                span = (view.high - view.low),\n                width = view.viewport_container.width(),\n                old_low = view.low;\n            view.low = Math.round(min / width * span) + old_low;\n            view.high = Math.round(max / width * span) + old_low;\n            $(d.proxy).remove();\n            view.request_redraw();\n        });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track( new LabelTrack( this, { content_div: this.top_labeltrack } ) );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(function () {\n                view.resize_window();\n            }, 500 );\n        });\n        $(document).bind(\"redraw\", function() { view.redraw(); });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(base.toLowerCase() + '_color') ||\n               this.config.get_value('n_color');\n    }\n\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend( TracksterView.prototype, DrawableCollection.prototype, {\n\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(function () {\n                self.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n            }, 500 );\n        }\n        else {\n            view.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text( util.commatize(low) + ' - ' + util.commatize(high) );\n        this.nav_input.val( this.chrom + ':' + util.commatize(low) + '-' + util.commatize(high) );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var\n            view = this,\n            chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function (result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n                \n                view.chrom_select.html('');\n                view.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option  = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append($('<option value=\"previous\">Previous ' + MAX_CHROMS_SELECTABLE + '</option>'));\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append($('<option value=\"next\">Next ' + MAX_CHROMS_SELECTABLE + '</option>'));\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({low: this.chrom_start_index - MAX_CHROMS_SELECTABLE});\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({low: this.chrom_start_index + MAX_CHROMS_SELECTABLE});\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, function(v, i) {\n            return v.chrom === chrom;\n        })[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({'chrom': chrom}, function() { view.change_chrom(chrom, low, high); });\n            return;\n        }\n        else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len-1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            }\n            else {\n                // Low and/or high is defined.\n                view.low = (low !== undefined ? Math.max(low, 0) : 0);\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                }\n                else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, '');\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, ' ');\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/),\n            chrom = chrom_pos[0],\n            new_low = (chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined),\n            new_high = (chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined);\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(function() {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on('change', function() {\n            self.changed();\n        });\n    },\n\n    add_label_track: function (label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this,\n            // Either redrawing a single drawable or all view's drawables.\n            track_list = (drawable ? [drawable] : view.drawables);\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, function(track) {\n            var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n                return to[0] === track;\n            });\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            }\n            else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(function() { view._redraw(); });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low,\n            high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = ( this.low / (this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var width_px = ( (this.high - this.low)/(this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var min_width_px = 13;\n\n        this.overview_box.css({ left: left_px, width: Math.max(min_width_px, width_px) }).show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px)/2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({ left: left_px, width: width_px });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, function(track_options) {\n            var track = track_options[0],\n                options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, function(label_track) {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function (point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span / this.zoom_factor) / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function () {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span * this.zoom_factor) / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height( this.container.height() - this.top_container.height() - this.bottom_container.height() );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var\n            overview_drawable = drawable.copy( { content_div: this.overview_viewport } ),\n            view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = function() {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(view.overview_drawable.content_div.height() + view.overview_box.outerHeight());\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set('hidden', hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs( [ 'data', 'hidden_data', 'conditional' ] );\n    },\n\n    state_dict: function(options) {\n        return _.extend( this.get_inputs_dict(), { hidden: !this.is_visible() } );\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\n var ToolParameterView = Backbone.View.extend({\n\n    events: {\n        'change :input': 'update_value'\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\"),\n            param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\").addClass(\"param-label\").text(param.get('label')).appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\").addClass(\"param-input\").html(param.get('html')).appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get('value'));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n });\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n\n    initialize: function(options) {\n        this.model.on('change:hidden', this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n            tool = this.model,\n            parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div.bind(\"drag\", function(e) {\n            e.stopPropagation();\n        }).click(function(e) {\n            e.stopPropagation();\n        }).bind(\"dblclick\", function(e) {\n            e.stopPropagation();\n        }).keydown(function(e) { e.stopPropagation(); });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\").appendTo(parent_div).text(tool.get('name'));\n        tool.get('inputs').each(function(param) {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() { $(this).select(); });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\").addClass(\"param-row\").appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on visible region\").appendTo(run_tool_row);\n        run_on_region_button.click( function() {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click( function() {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get('track').dataset.id,\n                action: 'rerun',\n                tool_id: tool.id\n            },\n            null,\n            // Success callback.\n            function(track_data) {\n                Galaxy.modal.show({title: tool.get('name') + \" is Running\", body: tool.get('name') + \" is running on the complete dataset. Tool outputs are in dataset's history.\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get('track'),\n            tool = this.model,\n            region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: track.view.low,\n                end: track.view.high\n            }),\n            url_params =\n            {\n                target_dataset_id: track.dataset.id,\n                action: 'rerun',\n                tool_id: tool.id,\n                regions: [\n                    region.toJSON()\n                ]\n            },\n            current_track = track,\n            // Set name of track to include tool name, parameters, and region used.\n            track_name = tool.get('name') +\n                         current_track.tool_region_and_parameters_str(region),\n            container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, { name: track.config.get_value('name') });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(current_track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        }\n        else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track,\n                // Success callback.\n                function(track_data) {\n                    new_track.set_dataset(new data.Dataset(track_data));\n                    new_track.tiles_div.text(\"Running job.\");\n                    new_track.init();\n                }\n        );\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: 'application/json',\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(function(response) {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            }\n            else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            }\n            else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (this.filter.high === Number.MAX_VALUE || this.filter.low === -Number.MAX_VALUE || this.filter.low === this.filter.high) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return ( ( parseFloat(feature_data[this.filter.index]) - this.filter.low ) / ( this.filter.high - this.filter.low ) );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get('start');\n    this.high = region.get('end');\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = function() {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = function() {};\n\nvar FeatureTrackTile = function(track, region, w_scale, canvas, data, mode, message, all_slotted,\n                                feature_mapper, incomplete_features, seq_data) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = function() {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset = (obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset) );\n    }\n    this.dataset_check_type = 'converted_datasets_state';\n    this.data_url_extra_params = {};\n    this.data_query_wait = ('data_query_wait' in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT);\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager = ('data_manager' in obj_dict ?\n                         obj_dict.data_manager :\n                         new visualization.GenomeDataManager({\n                             dataset: this.dataset,\n                             // HACK: simulate 'genome' attributes from view for now.\n                             // View should eventually use Genome object.\n                             genome: new visualization.Genome({\n                                key: view.dbkey,\n                                chroms_info: {\n                                    chrom_info: view.chrom_data\n                                }\n                             }),\n                             data_mode_compatible: this.data_and_mode_compatible,\n                             can_subset: this.can_subset\n                         }));\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value('height');\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if ( !(\"resize\" in obj_dict) || obj_dict.resize ) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                }\n                else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(track.config.get_value('name') + track.tool_region_and_parameters_str());\n                }\n                else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html =\n                    '<strong>Tool</strong>:' + track.tool.get(\"name\") + '<br/>' +\n                    '<strong>Dataset</strong>:' + track.config.get_value(\"name\") + '<br/>' +\n                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                    '<option value=\"cur\">current viewing area</option>' +\n                    '<option value=\"bookmarks\">bookmarks</option>' +\n                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n                    '</select>';\n                var cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n                    ok_fn = function() {\n                        var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                            regions,\n                            view_region = new visualization.GenomeRegion({\n                                chrom: view.chrom,\n                                start: view.low,\n                                end: view.high\n                            }),\n                            bookmarked_regions = _.map($(\".bookmark\"), function(elt) {\n                                return new visualization.GenomeRegion({from_str: $(elt).children(\".position\").text()});\n                            });\n\n                        // Get regions for visualization.\n                        if (regions_to_use === 'cur') {\n                            // Use only current region.\n                            regions = [ view_region ];\n                        }\n                        else if (regions_to_use === 'bookmarks') {\n                            // Use only bookmarks.\n                            regions = bookmarked_regions;\n                        }\n                        else {\n                            // Use both current region and bookmarks.\n                            regions = [ view_region ].concat(bookmarked_regions);\n                        }\n\n                        Galaxy.modal.hide();\n\n                        // Go to visualization.\n                        window.location.href =\n                            Galaxy.root + \"visualization/sweepster\" + \"?\" +\n                            $.param({\n                                dataset_id: track.dataset.id,\n                                hda_ldda: track.dataset.get('hda_ldda'),\n                                regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                            });\n                    },\n                    check_enter_esc = function(e) {\n                        if ((e.keyCode || e.which) === 27) { // Escape key\n                            cancel_fn();\n                        } else if ((e.keyCode || e.which) === 13) { // Enter key\n                            ok_fn();\n                        }\n                    };\n\n                // show dialog\n                Galaxy.modal.show({title: \"Visualize tool parameter space and output from different parameter settings?\", body: html, buttons : {'No' : cancel_fn, 'Yes' : ok_fn } });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function () {\n        return $(\"<div/>\").addClass('track').attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set('dataset', dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function () {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $( \"<div class='track-resize'>\" );\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover( function() {\n            if ( track.config.get_value('content_visible') ) {\n                in_handle = true;\n                drag_control.show();\n            }\n        }, function() {\n            in_handle = false;\n            if ( ! in_drag ) { drag_control.hide(); }\n        });\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control.hide().bind( \"dragstart\", function( e, d ) {\n            in_drag = true;\n            d.original_height = $(track.content_div).height();\n        }).bind( \"drag\", function( e, d ) {\n            var new_height = Math.min( Math.max( d.original_height + d.deltaY, track.min_height_px ), track.max_height_px );\n            $(track.tiles_div).css( 'height', new_height );\n            track.visible_height_px = (track.max_height_px === new_height ? 0 : new_height);\n            track.on_resize();\n        }).bind( \"dragend\", function( e, d ) {\n            track.tile_cache.clear();\n            in_drag = false;\n            if (!in_handle) { drag_control.hide(); }\n            track.config.set_value('height', track.visible_height_px);\n            track.changed();\n        }).appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function () {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        }\n        else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        }\n        else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        }\n        else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        }\n        else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        }\n        else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        }\n        else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $('<span/>').addClass('message').html(msg_html).appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred(),\n            params = {\n                hda_ldda: track.dataset.get('hda_ldda'),\n                data_type: this.dataset_check_type,\n                chrom: track.view.chrom,\n                retry: retry\n            };\n        $.getJSON(this.dataset.url(), params, function (result) {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"View error\").click(function() {\n                            Galaxy.modal.show({title: \"Trackster Error\", body: \"<pre>\" + result.message + \"</pre>\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n                        })\n                    );\n                    msg_elt.append( $('<span/>').text(' ') );\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"Try again\").click(function() {\n                            track.init(true);\n                        })\n                    );\n                }\n            }\n            else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            }\n            else if (result === \"no data\" || (result.data !== undefined && (result.data === null || result.data.length === 0))) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            }\n            else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(function() { track.init(); }, track.data_query_wait);\n            }\n            else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css( \"height\", track.visible_height_px + \"px\" );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(function() {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                }\n                else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n\n            // Tracks may not have stat data either because there is no data or data is not yet ready.\n            if (data && data.min !== undefined && data.max !== undefined) {\n                // Compute default minimum and maximum values\n                var min_value = data.min,\n                    max_value = data.max;\n                // If mean and sd are present, use them to compute a ~95% window\n                // but only if it would shrink the range on one side\n                min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                // Update config, prefs\n                track.config.set_default_value('min_value', min_value);\n                track.config.set_default_value('max_value', max_value);\n                track.config.set_value('min_value', min_value);\n                track.config.set_value('max_value', max_value);\n            }\n        });\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(this, ('filters' in obj_dict ? obj_dict.filters : null));\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set('filters_manager', this.filters_manager);\n    this.filters_available = false;\n    this.tool = (obj_dict.tool ? new TracksterTool( _.extend( obj_dict.tool, {\n        'track': this,\n        'tool_state': obj_dict.tool_state\n    } ) )\n    : null);\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(this.content_div);\n    if (!this.config.get_value('content_visible')) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\").addClass(\"overlay\").appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n\n    action_icons_def: Track.prototype.action_icons_def.concat( [\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[ track.view.resolution_px_b ].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ] ),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get('hda_ldda')\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: (this.tool ? this.tool.state_dict() : {})\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON( track.dataset.url(),\n            { data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n              high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') },\n            function(result) {\n                var data = result.data;\n                if ( isNaN(parseFloat(track.config.get_value('min_value'))) ||\n                     isNaN(parseFloat(track.config.get_value('max_value'))) ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min,\n                        max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                    max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                    // Update the prefs\n                    track.config.set_value('min_value', min_value);\n                    track.config.set_value('max_value', max_value);\n                }\n            });\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value('mode', new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === 'Auto') { this.data_manager.clear(); }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + track.mode + \")\");\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return w_scale + '_' + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if ( !this.can_draw() ) { return; }\n\n        var clear_after = options && options.clear_after,\n            low = this.view.low,\n            high = this.view.high,\n            range = high - low,\n            width = this.view.container.width(),\n            w_scale = this.view.resolution_px_b,\n            resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var\n            // Tile width in bases.\n            tile_width = Math.floor(TILE_SIZE * resolution),\n            // Index of first tile that overlaps visible region.\n            tile_index = Math.floor(low / tile_width),\n            tile_region,\n            tile_promise,\n            tile_promises = [],\n            tiles = [];\n        // Draw tiles.\n        while ( (tile_index * tile_width) < high ) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min( (tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(function(tile) {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) { this.tiles_div.children(\".remove\").removeClass(\"remove\").remove(); }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(function() {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, function(t) {\n                return t !== null;\n            });\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this,\n            css_class = (type === 'max' ? 'top' : 'bottom'),\n            text = (type === 'max' ? 'max' : 'min'),\n            pref_name = (type === 'max' ? 'max_value' : 'min_value'),\n            label = this.container_div.find(\".yaxislabel.\" + css_class),\n            value = round( track.config.get_value(pref_name), 1 );\n\n        // Default action for on_change is to redraw track.\n        on_change = on_change || function() {\n            track.request_draw({ clear_tile_cache: true });\n        };\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        }\n        else {\n            // Add label.\n            label = $(\"<div/>\").text(value).make_text_editable({\n                num_cols: 12,\n                on_finish: function(new_val) {\n                    $(\".tooltip\").remove();\n                    track.config.set_value(pref_name, round( new_val, 1 ) );\n                    on_change();\n                },\n                help_text: \"Set \" + text + \" value\"\n            }).addClass('yaxislabel ' + css_class).css(\"color\", this.config.get_value('label_color'));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, function(tile) {\n            return (tile instanceof LineTrackTile);\n        });\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, function(tile) {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, { force: true, mode: 'Coverage' });\n                }\n            });\n\n            track._add_yaxis_label('max');\n        }\n        else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find('.yaxislabel').remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, function(tile) {\n                return tile.has_icons;\n            });\n\n            if (icons_present) {\n                _.each(tiles, function(tile) {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function( display_mode ) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [ this ];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) { options = {}; }\n\n        var force = options.force,\n            mode = options.mode || this.mode,\n            resolution = 1 / w_scale,\n\n            // Useful vars.\n            track = this,\n            drawables = this._get_drawables(),\n            key = this._gen_tile_cache_key(w_scale, region),\n            is_tile = function(o) { return (o && 'track' in o); };\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = (force ? undefined : track.tile_cache.get_elt(key));\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) { return null; }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = function() {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = (_.find(CONTINUOUS_DATA_MODES, function(m) { return m === mode; }) ? \"Coverage\" : mode);\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, function(d) {\n                // Get the track data/promise.\n                return d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params);\n            });\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(view.reference_track.data_manager.get_data(region, mode, resolution, view.reference_track.data_url_extra_params));\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then( function() {\n            var tile_data = get_tile_data(),\n                tracks_data = tile_data,\n                seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, function(d) { return util.is_deferred(d); })) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(track.draw_helper(region, w_scale, options)).then(function(tile) {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [],\n                drawing_heights = [];\n\n            _.each(drawables, function(d, i) {\n                var mode = d.mode,\n                    data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas(),\n                tile_low = region.get('start'),\n                tile_high = region.get('end'),\n                all_data_index = 0,\n                width = Math.ceil( (tile_high - tile_low) * w_scale ) + track.left_offset,\n                height = _.max(drawing_heights),\n                tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = (options.height || height);\n            var ctx = canvas.getContext('2d');\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, function(d, i) {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if ( [undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1 ) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if ( [undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1 ) {\n            this.config.set_value(\"max_value\", _.max( _.map(result.data, function(d) { return d[1]; }) ) || 0);\n        }\n\n        var canvas = ctx.canvas,\n            painter = new painters.LinePainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this,\n            tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round( ( tile.low - (this.is_overview? this.view.max_low : this.view.low) ) * w_scale );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css('left', left);\n\n        if ( tile_element.hasClass(\"remove\") ) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        }\n        else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css('height', 'auto');\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element.parent().children().css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this,\n            region_str = (region !== undefined ? region.toString() : \"all\"),\n            param_str = _.values( track.tool.get_inputs_dict()).join(', ');\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        }\n        // Histogram mode requires bigwig data.\n        else if (mode === \"Coverage\") {\n            return data.dataset_type === \"bigwig\";\n        }\n        // All other modes--Dense, Squish, Pack--require data + details.\n        else if (data.dataset_type === \"bigwig\" ||\n                 data.extra_info === \"no_detail\") {\n            return false;\n        }\n        else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\")  {\n            return false;\n        }\n        // Subset only if data is single-bp resolution.\n        else if (entry.dataset_type === 'bigwig') {\n            return (entry.data[1][0] - entry.data[0][0] === 1);\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set('data_type', 'raw_data');\n        this.data_query_wait = 1000;\n        this.dataset_check_type = 'state';\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function (view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass( \"label-track\" );\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view,\n            range = view.high - view.low,\n            tickDistance = Math.floor( Math.pow( 10, Math.floor( Math.log( range ) / Math.log( 10 ) ) ) ),\n            position = Math.floor( view.low / tickDistance ) * tickDistance,\n            width = this.view.container.width(),\n            new_div = $(\"<div/>\").addClass('label-container');\n        while ( position < view.high ) {\n            var screenPosition = Math.floor( ( position - view.low ) / range * width );\n            new_div.append( $(\"<div/>\").addClass('pos-label').text(util.commatize( position )).css( {\n                left: screenPosition\n            }));\n            position += tickDistance;\n        }\n        this.content_div.children( \":first\" ).remove();\n        this.content_div.append( new_div );\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if ('drawables' in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, function(d) {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    action_icons_def:\n    [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, function(d) {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(function() {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n                name: this.config.get_value('name')\n            }),\n            track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, function(d) { return d.config.get_value('min_value'); })),\n            max = _.max(_.map(this.drawables, function(d) { return d.config.get_value('max_value'); }));\n\n        this.config.set_value('min_value', min);\n        this.config.set_value('max_value', max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min);\n            d.config.set_value('max_value', max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this,\n            min_value = this.config.get_value('min_value'),\n            max_value = this.config.get_value('max_value');\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min_value);\n            d.config.set_value('max_value', max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1, i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, { force: true, height: max_height } );\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this,\n            t = function() { track.update_all_min_max(); };\n\n        // Add min, max labels.\n        this._add_yaxis_label('min', t);\n        this._add_yaxis_label('max', t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function (view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = {reference: true};\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'height', type: 'int', default_value: 13, hidden: true }\n    ] ),\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(':visible'),\n            new_visible,\n            tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        }\n        else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) { return true; },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region),\n            seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function (view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(supportsByteRanges(Galaxy.root + 'datasets/' + this.dataset.id + '/display'))\n     .then(function(supportsByteRanges) {\n         if (supportsByteRanges) {\n             self.data_manager = new bbi.BBIDataManager({\n                 dataset: self.dataset\n             });\n         }\n\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Color', type: 'color' },\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return (entry.data[1][0] - entry.data[0][0] === 1);\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label('max');\n        this._add_yaxis_label('min');\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function (view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n        { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n        { key: 'min_value', label: 'Min Value', type: 'int', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'int', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 500, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n        });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas,\n            painter = new painters.DiagonalHeatmapPainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass( \"feature-track\" );\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Block color', type: 'color' },\n        { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true,\n          help: 'Show the number of items in each bin when drawing summary histogram' },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'connector_style', label: 'Connector style', type: 'select', default_value: 'fishbones',\n            options: [ { label: 'Line with arrows', value: 'fishbone' }, { label: 'Arcs', value: 'arcs' } ] },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if ( this.config.get_value('connector_style') === 'arcs' ) {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var track = this,\n            i,\n            line_track_tiles = _.filter(tiles, function(t) {\n                return (t instanceof LineTrackTile);\n            });\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, 'incomplete_features'), function(inc_features) {\n                _.each(inc_features, function(feature) {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, function(tile) {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features =_.omit(all_incomplete_features,\n                                                     _.map(tile.incomplete_features, function(f) { return f[0]; }));\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = { data: _.values( tile_incomplete_features ) },\n                        new_canvas = self.view.canvas_manager.new_canvas(),\n                        new_canvas_ctx = new_canvas.getContext('2d');\n                    new_canvas.height = Math.max(tile.canvas.height,\n                                                 self.get_canvas_height(features, tile.mode, tile.w_scale, 100));\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(features, new_canvas_ctx, tile.mode,\n                                                  tile.region, tile.w_scale, tile.seq_data);\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters,\n                f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false,\n                example_feature,\n                filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if ( filter.applies_to(example_feature) &&\n                             filter.min !== filter.max ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        }\n        else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: Auto/\" + mode + \")\");\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context,\n            slotter = this.slotters[level];\n        if (!slotter || (slotter.mode !== mode)) {\n            slotter = new (slotting.FeatureSlotter)( level, mode, MAX_FEATURE_DEPTH, function ( x ) { return dummy_context.measureText( x ); } );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features( features );\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        }\n        else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if ( this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH ) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width) );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this,\n            canvas = ctx.canvas,\n            tile_low = region.get('start'),\n            tile_high = region.get('end'),\n            left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var\n            filtered = [],\n            slots = this.slotters[w_scale].slots;\n            all_slotted = true;\n        if ( result.data ) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if ( !(feature[0] in slots) ) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = (this.filters_manager.alpha_filter ? new FilterScaler(this.filters_manager.alpha_filter) : null),\n            filter_height_scaler = (this.filters_manager.height_filter ? new FilterScaler(this.filters_manager.height_filter) : null),\n            painter = new (this.painter)(filtered, tile_low, tile_high, this.config.to_key_value_dict(), mode, filter_alpha_scaler, filter_height_scaler,\n                                         // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                                         ref_seq,\n                                         // Only the ReadPainer will use this function\n                                         function(b) { return track.view.get_base_color(b); });\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value('block_color');\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(track, region, w_scale, canvas, result.data, mode,\n                                        result.message, all_slotted, feature_mapper,\n                                        incomplete_features, ref_seq);\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Histogram color', type: 'color' },\n        { key: 'show_sample_data', label: 'Show sample data', type: 'bool', default_value: true },\n        { key: 'show_labels', label: 'Show summary and sample labels', type: 'bool', default_value: true },\n        { key: 'summary_height', label: 'Locus summary height', type: 'float', default_value: 20 },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        }\n        else { // result.dataset_type === 'variant'\n            var view = this.view,\n                painter = new (this.painter)(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode,\n                                             function(b) { return view.get_base_color(b); });\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = ( this.dataset.get_metadata('sample_names') ? this.dataset.get_metadata('sample_names').length : 0);\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if ( num_samples === null ) {\n                    num_samples = 1;\n                }\n                else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [ Track.prototype.predraw_init.call(this) ];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata('sample_names')) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, function(t) {\n            return (t instanceof LineTrackTile);\n        });\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata('sample_names');\n        if (line_track_tiles.length === 0 && this.config.get_value('show_labels') && sample_names && sample_names.length > 1) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find('.yaxislabel.variant').length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value('summary_height') / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\").text('Summary').addClass('yaxislabel variant top').css({\n                        'font-size': font_size + 'px',\n                        'top': (this.config.get_value('summary_height') - font_size) / 2 + 'px'\n                    })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value('show_sample_data')) {\n                    var samples_div_html = sample_names.join('<br/>');\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\").html(samples_div_html).addClass('yaxislabel variant top sample').css({\n                            'top': this.config.get_value('summary_height')\n                        })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === 'Squish' ? 5 : 10) + 'px';\n            $(this.tiles_div).find('.sample').css({\n                'font-size': font_size,\n                'line-height': font_size\n            });\n            // Color labels to preference color.\n            $(this.tiles_div).find('.yaxislabel').css('color', this.config.get_value('label_color'));\n        }\n        else {\n            // Remove all labels.\n            this.container_div.find('.yaxislabel.variant').remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function (view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Histogram color', type: 'color' },\n        { key: 'detail_block_color', label: 'Sense strand block color', type: 'color', 'default_value': '#AAAAAA' },\n        { key: 'reverse_strand_color', label: 'Antisense strand block color', type: 'color', 'default_value': '#DDDDDD' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n        { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    \"CompositeTrack\": CompositeTrack,\n    \"DrawableGroup\": DrawableGroup,\n    \"DiagonalHeatmapTrack\": DiagonalHeatmapTrack,\n    \"FeatureTrack\": FeatureTrack,\n    \"LineTrack\": LineTrack,\n    \"ReadTrack\": ReadTrack,\n    \"VariantTrack\": VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    \"VcfTrack\": VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = function(template, view, container) {\n    if ('copy' in template) {\n        // Template is an object.\n        return template.copy(container);\n    }\n    else {\n        // Template is a dictionary.\n        var\n           drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[ drawable_type ](view, container, template);\n    }\n};\n\nreturn {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n\n});\n"]}