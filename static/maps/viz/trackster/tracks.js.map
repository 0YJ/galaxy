{"version":3,"sources":["viz/trackster/tracks.js"],"names":["round","val","Math","places","pow","supportsByteRanges","xhr","setRequestHeader","promise","$","Deferred","success","url","beforeSend","result","status","resolve","extend","_underscore2","default","html_elt_js_obj_dict","is_container","element","obj","attr","moveable","handle_class","container_selector","element_js_obj","bind","handle","relative","e","d","this","container","bottom","i","parent","children","this_obj","parents","child","outerHeight","top","offsetY","insertBefore","cur_container","remove_drawable","add_drawable_before","length","position","insertAfter","is","get","prepend","append","add_drawable","hasClass","move_drawable","removeClass","addClass","ERROR_PADDING","DATA_NOCONVERTER","DATA_OK","CONTINUOUS_DATA_MODES","Drawable","view","obj_dict","drag_handle_class","is_overview","id","id_counter","action_icons","config","config_onchange","from_models_and_saved_values","config_params","prefs","header_div","set_value","name","header","container_div","build_container_div","header_view","icons_div","model","hide","$el","prototype","action_icons_def","hover","show","title","css_class","on_click_fn","drawable","get_value","toggle_icon","hide_contents","ConfigSettingCollectionView","render_in_modal","show_contents","_config2","collection","remove","changed","key","label","type","default_value","request_draw","init","to_dict","can_draw","set_name","new_name","_draw","options","old_name","revert_name","update_icons","update_intro_div","get_drawables","obj_type","drawables","DrawableCollection","call","unpack_drawables","drawables_array","object_from_template","to_key_value_dict","push","dictified_drawables","index","indexOf","other","update_html","old_drawable","splice","replace_drawable","new_drawable","replaceWith","tracks","new_position","queue","track_type","DrawableGroup","get_tracks","slice","content_div","filters_manager","concat","setup_multitrack_filtering","appendTo","_filters2","FiltersManager","after","parent_div","group","old_manager","filters","visible","show_composite_track","num_drawables","clear_filters","clear_tile_cache","toggle","same_type","can_composite","tiles_div","composite_icon","filters_icon","num_feature_tracks","CompositeTrack","shared_filters","filter","a_type","get_type","remove_all","LineTrack","_restore_filter_managers","j","saved_filters_managers","composite_track","new_filter","NumberFilter","add_filter","TracksterView","Backbone","chrom","init_filters","zoom_factor","min_separation","each","browser_content_div","initialize","viewport_container","vis_id","dbkey","undefined","stand_alone","label_tracks","tracks_to_be_redrawn","max_low","max_high","has_changes","load_chroms_deferred","render","canvas_manager","nav","ownerDocument","reset","ConfigSettingCollection","overview","overview_viewport","overview_close","overview_highlight","default_overview_height","nav_controls","chrom_select","location_span","nav_input","click","focus","source","requested_redraw","parent_element","top_container","value","bottom_container","top_labeltrack","zo_link","zi_link","zoom_in","load_chroms","change_chrom","text","intro_div","_visualization2","select_datasets","track","nav_container","prependTo","overview_box","current_x","delta_chrom","move_delta","reset_overview","low","current_height","delta","scrollTop","height","min","max","keyCode","which","go_to","width","update_location","tooltip","span","high","old_low","request_redraw","select","autocomplete","request","response","all_features","feature_search_deferreds","map","FeatureTrack","t","data_manager","search_features","term","dataset_features","when","apply","done","feature","minLength","hidden_input","document","redraw","trigger","get_base_color","zoom_out","find","pageX","offsetX","url_parms","ajax","dataType","clientX","reference","chrom_data","clientY","new_scroll","chrom_option","prev_chroms","next_chroms","css","startX","offset","left","abs","chrom_start_index","found","v","add_label_track","window","resize_timer","clearTimeout","setTimeout","resize_window","base","toLowerCase","chrom_pos","trigger_navigate","new_chrom","new_low","new_high","delay","timer","_util2","commatize","redraw_on_move_fn","Galaxy","root","data","self","chrom_info","label_track","ref_track","reference_track","html","len","start_index","error","track_options","requestAnimationFrame","grep","ceil","width_px","min_width_px","then","str","cur_center","parseInt","move_fraction","fraction","resize_viewport","current_chrom_span","overview_drawable","data_fetch","TracksterTool","defaults","on","hidden","state_dict","ToolParameterView","events","label_div","track_list","to","_redraw","name_div","tool","param_view","resolution_px_b","is_visible","set_visible","update_params","left_px","params","target_dataset_id","action","tool_id","body","buttons","point","run_on_region","region","start","new_half","end","regions","track_name","current_track","set_overview","dataset","hda_ldda","new_track","init_for_tool_data","url_params","set_dataset","run","interval","success_fn","_tools2","Tool","DATA_CANNOT_RUN_TOOL","success_callback","tool_state","set","remove_inputs","get_inputs_dict","default_val","View","Tile","param_div","param","w_scale","stale","predisplay_actions","LineTrackTile","update_value","update_event","canvas","TracksterToolView","other_tiles_features_drawn","seq_data","stopPropagation","keydown","run_tool_row","run_on_dataset_button","FeatureTrackTile","run_on_dataset","track_data","modal","Close","GenomeRegion","toJSON","tool_region_and_parameters_str","Track","constructor","mode","set_filters_manager","dataset_check_type","data_url_extra_params","data_query_wait","chroms_info","_data2","Dataset","max_height_px","inputs","ss_deferred","ServerStateDeferred","ajax_settings","contentType","go","message","FilterScaler","_painters2","Scaler","gen_val","feature_data","Number","MAX_VALUE","regions_to_use","view_region","from_str","all_slotted","incomplete_features","feature_mapper","dataset_id","in_drag","in_handle","data_type","msg_elt","show_message","DATA_NONE","DATA_PENDING","data_and_mode_compatible","can_subset","resize","add_resize_handle","getJSON","min_value","set_default_value","tool_view","dynamic_tool_div","ok_fn","bookmarked_regions","elt","location","change_mode","JSON","stringify","Collection","No","cancel_fn","Yes","parseFloat","max_value","drag_control","new_mode","original_height","new_height","filters_available","visible_height_px","tile_cache","clear","tile_region","LabelTrack","ReferenceTrack","clear_after","ReadTrack","range","VariantTrack","resolution","before_draw","msg_html","retry","tile_width","enabled","tile_index","init_deferred","tile_promises","kind","make_text_editable","on_finish","TILE_CACHE_SIZE","on_change","valid_chroms","postdraw_actions","line_track_tiles","tile","predraw_init","tiles","pref_name","force","stats","icons_present","has_icons","floor","mean","sd","TiledTrack","_get_drawables","is_tile","show_tile","Cache","left_offset","tile_data","overlay_div","get_tile_data","draw_helper","tile_drawn","copy","drawing_modes","get_mode","tile_high","getContext","ctx","globalCompositeOperation","get_canvas_height","isNaN","_draw_line_track_tile","draw_tile","tile_element","mode_icon","tools_icon","param_space_viz_icon","_gen_tile_cache_key","track_height","region_str","entry","dataset_type","tile_promise","DATA_ERROR","_add_yaxis_label","new_div","screenPosition","new_val","display_modes","html_elt","build_config_params","update_auto_mode","display_mode","visible_height","get_elt","o","init_deferreds","data_mode","m","get_data","data_url","set_elt","tracks_data","is_deferred","subset_entry","pop","drawing_heights","new_canvas","tile_low","max_height","translate","union","new_visible","draw","ref_seq","subset","fillStyle","toString","values","join","extra_info","DiagonalHeatmapTrack","tickDistance","log","painter","summary_draw_height","set_painter_from_config","show_group","tile_incomplete_features","on_resize","features","new_canvas_ctx","new_tile","example_feature","f","show_more_rows_icon","update_all_min_max","slotter","slotters","level","slot_features","rows_required","incremental_slots","GenomeReferenceDataManager","dummy_painter","cur_visible","char_width_px","hide_feature","flen","textAlign","draw_results","translation","c","fillText","cur_tile","_bbiDataManager2","BBIDataManager","num_samples","get_metadata","get_required_height","deferreds","font_size","samples_div_html","DiagonalHeatmapPainter","help","addable_objects","VcfTrack","template","drawable_type","LinkedFeaturePainter","all_incomplete_features","pluck","inc_features","omit","keys","size","drawImage","update_ui_elt","applies_to","dummy_context","_slotting2","FeatureSlotter","DEFAULT_DATA_QUERY_WAIT","x","measureText","canvas_width","min_height_px","filtered","slots","update_attrs","keep","filter_alpha_scaler","alpha_filter","filter_height_scaler","height_filter","b","font","manager","default_font","VariantPainter","match","fetch","sample_names","font-size","line-height","ReadPainter"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["import _ from \"libs/underscore\";\nimport visualization from \"viz/visualization\";\nimport viz_views from \"viz/viz_views\";\nimport util from \"viz/trackster/util\";\nimport slotting from \"viz/trackster/slotting\";\nimport painters from \"viz/trackster/painters\";\nimport filters_mod from \"viz/trackster/filters\";\nimport data from \"mvc/dataset/data\";\nimport tools_mod from \"mvc/tool/tools\";\nimport config_mod from \"utils/config\";\nimport bbi from \"viz/bbi-data-manager\";\nimport \"ui/editable-text\";\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = function(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = function(\n    element,\n    handle_class,\n    container_selector,\n    element_js_obj\n) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element\n        .bind(\"drag\", { handle: \".\" + handle_class, relative: true }, function(\n            e,\n            d\n        ) {\n            var element = $(this),\n                parent = $(this).parent(),\n                // Only sorting amongst tracks and groups.\n                children = parent.children(\".track,.group\"),\n                this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n                child,\n                container,\n                top,\n                bottom,\n                i;\n\n            //\n            // Enable three types of dragging: (a) out of container; (b) into container;\n            // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n            //\n\n            // Handle dragging out of container.\n            container = $(this).parents(container_selector);\n            if (container.length !== 0) {\n                top = container.position().top;\n                bottom = top + container.outerHeight();\n                var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                if (d.offsetY < top) {\n                    // Moving above container.\n                    $(this).insertBefore(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable_before(\n                        this_obj,\n                        cur_container\n                    );\n                    return;\n                } else if (d.offsetY > bottom) {\n                    // Moving below container.\n                    $(this).insertAfter(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle dragging into container. Child is appended to container's content_div.\n            container = null;\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                top = child.position().top;\n                bottom = top + child.outerHeight();\n                // Dragging into container if child is a container and offset is inside container.\n                if (\n                    child.is(container_selector) &&\n                    this !== child.get(0) &&\n                    d.offsetY >= top &&\n                    d.offsetY <= bottom\n                ) {\n                    // Append/prepend based on where offsetY is closest to and return.\n                    if (d.offsetY - top < bottom - d.offsetY) {\n                        child.find(\".content-div\").prepend(this);\n                    } else {\n                        child.find(\".content-div\").append(this);\n                    }\n                    // Update containers. Object may not have container if it is being moved quickly.\n                    if (this_obj.container) {\n                        this_obj.container.remove_drawable(this_obj);\n                    }\n                    html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(\n                        this_obj\n                    );\n                    return;\n                }\n            }\n\n            // Handle sibling movement, aka sorting.\n\n            // Determine new position\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                if (\n                    d.offsetY < child.position().top &&\n                    // Cannot move tracks above reference track or intro div.\n                    !(\n                        child.hasClass(\"reference-track\") ||\n                        child.hasClass(\"intro\")\n                    )\n                ) {\n                    break;\n                }\n            }\n\n            // If not already in the right place, move. Need\n            // to handle the end specially since we don't have\n            // insert at index\n            if (i === children.length) {\n                if (this !== children.get(i - 1)) {\n                    parent.append(this);\n                    html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                        this_obj,\n                        i\n                    );\n                }\n            } else if (this !== children.get(i)) {\n                $(this).insertBefore(children.get(i));\n                // Need to adjust insert position if moving down because move is changing\n                // indices of all list items.\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                    this_obj,\n                    d.deltaY > 0 ? i - 1 : i\n                );\n            }\n        })\n        .bind(\"dragstart\", function() {\n            $(this).addClass(\"dragging\");\n        })\n        .bind(\"dragend\", function() {\n            $(this).removeClass(\"dragging\");\n        });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar // Padding at the top of tracks for error messages\n    ERROR_PADDING = 20,\n    // Maximum number of rows un a slotted track\n    MAX_FEATURE_DEPTH = 100,\n    // Minimum width for window for squish to be used.\n    MIN_SQUISH_VIEW_WIDTH = 12000,\n    // Number of pixels per tile, not including left offset.\n    TILE_SIZE = 400,\n    DEFAULT_DATA_QUERY_WAIT = 5000,\n    // Maximum number of chromosomes that are selectable at any one time.\n    MAX_CHROMS_SELECTABLE = 100,\n    DATA_ERROR = \"Cannot display dataset due to an error. \",\n    DATA_NOCONVERTER =\n        \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n    DATA_NONE = \"No data for this chrom/contig.\",\n    DATA_PENDING =\n        \"Preparing data. This can take a while for a large dataset. \" +\n        \"If the visualization is saved and closed, preparation will continue in the background.\",\n    DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n    DATA_LOADING = \"Loading data...\",\n    DATA_OK = \"Ready for display\",\n    TILE_CACHE_SIZE = 10,\n    DATA_CACHE_SIZE = 20,\n    // Numerical/continuous data display modes.\n    CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n        this.config_params,\n        obj_dict.prefs\n    );\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            function() {\n                icons_div.show();\n            },\n            function() {\n                icons_div.hide();\n            }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if (drawable.config.get_value(\"content_visible\")) {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle-expand\")\n                    .removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value(\"content_visible\", false);\n            } else {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle\")\n                    .removeClass(\"toggle-expand\");\n                drawable.config.set_value(\"content_visible\", true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal(\"Configure Track\");\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n        {\n            key: \"content_visible\",\n            type: \"bool\",\n            default_value: true,\n            hidden: true\n        }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(\n                drawables_array[i],\n                this.view,\n                this\n            );\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(\n                    new_drawable.container_div\n                );\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0),\n            tracks = [],\n            drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\")\n        .addClass(\"content-div\")\n        .attr(\"id\", \"group_\" + this.id + \"_content_div\")\n        .appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(\n            this,\n            obj_dict.filters\n        );\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(\n    DrawableGroup.prototype,\n    Drawable.prototype,\n    DrawableCollection.prototype,\n    {\n        action_icons_def: [\n            Drawable.prototype.action_icons_def[0],\n            Drawable.prototype.action_icons_def[1],\n            // Replace group with composite track.\n            {\n                name: \"composite_icon\",\n                title: \"Show composite track\",\n                css_class: \"layers-stack\",\n                on_click_fn: function(group) {\n                    $(\".tooltip\").remove();\n                    group.show_composite_track();\n                }\n            },\n            // Toggle track filters.\n            {\n                name: \"filters_icon\",\n                title: \"Filters\",\n                css_class: \"ui-slider-050\",\n                on_click_fn: function(group) {\n                    // TODO: update Tooltip text.\n                    if (group.filters_manager.visible()) {\n                        // Hiding filters.\n                        group.filters_manager.clear_filters();\n                        group._restore_filter_managers();\n                        // TODO: maintain current filter by restoring and setting saved manager's\n                        // settings to current/shared manager's settings.\n                        // TODO: need to restore filter managers when moving drawable outside group.\n                    } else {\n                        // Showing filters.\n                        group.setup_multitrack_filtering();\n                        group.request_draw({ clear_tile_cache: true });\n                    }\n                    group.filters_manager.toggle();\n                }\n            },\n            Drawable.prototype.action_icons_def[2]\n        ],\n\n        build_container_div: function() {\n            var container_div = $(\"<div/>\")\n                .addClass(\"group\")\n                .attr(\"id\", \"group_\" + this.id);\n            if (this.container) {\n                this.container.content_div.append(container_div);\n            }\n            return container_div;\n        },\n\n        hide_contents: function() {\n            this.tiles_div.hide();\n        },\n\n        show_contents: function() {\n            // Show the contents div and labels (if present)\n            this.tiles_div.show();\n            // Request a redraw of the content\n            this.request_draw();\n        },\n\n        update_icons: function() {\n            //\n            // Handle update when there are no tracks.\n            //\n            var num_drawables = this.drawables.length;\n            if (num_drawables === 0) {\n                this.action_icons.composite_icon.hide();\n                this.action_icons.filters_icon.hide();\n            } else if (num_drawables === 1) {\n                this.action_icons.composite_icon.toggle(\n                    this.drawables[0] instanceof CompositeTrack\n                );\n                this.action_icons.filters_icon.hide();\n            } else {\n                // There are 2 or more tracks.\n\n                //\n                // Determine if a composite track can be created. Current criteria:\n                // (a) all tracks are line tracks;\n                //      OR\n                // FIXME: this is not enabled right now because it has not been well tested:\n                // (b) there is a single FeatureTrack.\n                //\n\n                // All tracks the same?\n                var i,\n                    j,\n                    drawable,\n                    same_type = true,\n                    a_type = this.drawables[0].get_type(),\n                    num_feature_tracks = 0;\n                for (i = 0; i < num_drawables; i++) {\n                    drawable = this.drawables[i];\n                    if (drawable.get_type() !== a_type) {\n                        can_composite = false;\n                        break;\n                    }\n                    if (drawable instanceof FeatureTrack) {\n                        num_feature_tracks++;\n                    }\n                }\n\n                if (same_type && this.drawables[0] instanceof LineTrack) {\n                    this.action_icons.composite_icon.show();\n                } else {\n                    this.action_icons.composite_icon.hide();\n                    $(\".tooltip\").remove();\n                }\n\n                //\n                // Set up group-level filtering and update filter icon.\n                //\n                if (\n                    num_feature_tracks > 1 &&\n                    num_feature_tracks === this.drawables.length\n                ) {\n                    //\n                    // Find shared filters.\n                    //\n                    var shared_filters = {},\n                        filter;\n\n                    // Init shared filters with filters from first drawable.\n                    drawable = this.drawables[0];\n                    for (\n                        j = 0;\n                        j < drawable.filters_manager.filters.length;\n                        j++\n                    ) {\n                        filter = drawable.filters_manager.filters[j];\n                        shared_filters[filter.name] = [filter];\n                    }\n\n                    // Create lists of shared filters.\n                    for (i = 1; i < this.drawables.length; i++) {\n                        drawable = this.drawables[i];\n                        for (\n                            j = 0;\n                            j < drawable.filters_manager.filters.length;\n                            j++\n                        ) {\n                            filter = drawable.filters_manager.filters[j];\n                            if (filter.name in shared_filters) {\n                                shared_filters[filter.name].push(filter);\n                            }\n                        }\n                    }\n\n                    //\n                    // Create filters for shared filters manager. Shared filters manager is group's\n                    // manager.\n                    //\n                    this.filters_manager.remove_all();\n                    var filters, new_filter, min, max;\n                    for (var filter_name in shared_filters) {\n                        filters = shared_filters[filter_name];\n                        if (filters.length === num_feature_tracks) {\n                            // Add new filter.\n                            // FIXME: can filter.copy() be used?\n                            new_filter = new filters_mod.NumberFilter({\n                                name: filters[0].name,\n                                index: filters[0].index\n                            });\n                            this.filters_manager.add_filter(new_filter);\n                        }\n                    }\n\n                    // Show/hide icon based on filter availability.\n                    this.action_icons.filters_icon.toggle(\n                        this.filters_manager.filters.length > 0\n                    );\n                } else {\n                    this.action_icons.filters_icon.hide();\n                }\n            }\n        },\n\n        /**\n     * Restore individual track filter managers.\n     */\n        _restore_filter_managers: function() {\n            for (var i = 0; i < this.drawables.length; i++) {\n                this.drawables[i].filters_manager = this.saved_filters_managers[\n                    i\n                ];\n            }\n            this.saved_filters_managers = [];\n        },\n\n        /**\n     *\n     */\n        setup_multitrack_filtering: function() {\n            // Save tracks' managers and set up shared manager.\n            if (this.filters_manager.filters.length > 0) {\n                // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n                this.saved_filters_managers = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    var drawable = this.drawables[i];\n                    this.saved_filters_managers.push(drawable.filters_manager);\n                    drawable.filters_manager = this.filters_manager;\n                }\n\n                //TODO: hide filters icons for each drawable?\n            }\n            this.filters_manager.init_filters();\n        },\n\n        /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n        show_composite_track: function() {\n            var composite_track = new CompositeTrack(this.view, this.view, {\n                name: this.config.get_value(\"name\"),\n                drawables: this.drawables\n            });\n            var index = this.container.replace_drawable(\n                this,\n                composite_track,\n                true\n            );\n            composite_track.request_draw();\n        },\n\n        add_drawable: function(drawable) {\n            DrawableCollection.prototype.add_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        remove_drawable: function(drawable) {\n            DrawableCollection.prototype.remove_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        to_dict: function() {\n            // If filters are visible, need to restore original filter managers before converting to dict.\n            if (this.filters_manager.visible()) {\n                this._restore_filter_managers();\n            }\n\n            var obj_dict = extend(\n                DrawableCollection.prototype.to_dict.call(this),\n                { filters: this.filters_manager.to_dict() }\n            );\n\n            // Setup multi-track filtering again.\n            if (this.filters_manager.visible()) {\n                this.setup_multitrack_filtering();\n            }\n\n            return obj_dict;\n        },\n\n        request_draw: function(options) {\n            _.each(this.drawables, function(d) {\n                d.request_draw(options);\n            });\n        }\n    }\n);\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone =\n            obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager(\n            this.container.get(0).ownerDocument\n        );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                }\n            ],\n            { name: obj_dict.name }\n        );\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container,\n            view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\")\n            .addClass(\"top-container\")\n            .appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\")\n            .addClass(\"content\")\n            .appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\")\n            .addClass(\"bottom-container\")\n            .appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\")\n            .addClass(\"top-labeltrack\")\n            .appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\")\n            .addClass(\"viewport-container\")\n            .attr(\"id\", \"viewport-container\")\n            .appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\")\n            .addClass(\"intro\")\n            .appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\")\n            .text(\"Add Datasets to Visualization\")\n            .addClass(\"action-button\")\n            .appendTo(this.intro_div)\n            .click(function() {\n                visualization.select_datasets({ dbkey: view.dbkey }, function(\n                    tracks\n                ) {\n                    _.each(tracks, function(track) {\n                        view.add_drawable(\n                            object_from_template(track, view, view)\n                        );\n                    });\n                });\n            });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\")\n            .addClass(\"trackster-nav-container\")\n            .prependTo(this.top_container);\n        this.nav = $(\"<div/>\")\n            .addClass(\"trackster-nav\")\n            .appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\")\n            .addClass(\"overview\")\n            .appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\")\n            .addClass(\"overview-viewport\")\n            .appendTo(this.overview);\n        this.overview_close = $(\"<a/>\")\n            .attr(\"title\", \"Close overview\")\n            .addClass(\"icon-button overview-close tooltip\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\")\n            .addClass(\"overview-highlight\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\")\n            .addClass(\"overview-boxback\")\n            .appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\")\n            .addClass(\"overview-box\")\n            .appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\")\n            .addClass(\"nav-controls\")\n            .appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\")\n            .attr({ name: \"chrom\" })\n            .addClass(\"chrom-nav\")\n            .append(\"<option value=''>Loading</option>\")\n            .appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (\n                e.type === \"focusout\" ||\n                (e.keyCode || e.which) === 13 ||\n                (e.keyCode || e.which) === 27\n            ) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\")\n            .addClass(\"nav-input\")\n            .hide()\n            .bind(\"keyup focusout\", submit_nav)\n            .appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\")\n            .addClass(\"location\")\n            .attr(\"title\", \"Click to change location\")\n            .tooltip({ placement: \"bottom\" })\n            .appendTo(this.nav_controls);\n        this.location_span.click(function() {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [],\n                        feature_search_deferreds = $.map(\n                            view.get_tracks(FeatureTrack),\n                            function(t) {\n                                return t.data_manager\n                                    .search_features(request.term)\n                                    .success(function(dataset_features) {\n                                        all_features = all_features.concat(\n                                            dataset_features\n                                        );\n                                    });\n                            }\n                        );\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(function() {\n                        response(\n                            $.map(all_features, function(feature) {\n                                return {\n                                    label: feature[0],\n                                    value: feature[1]\n                                };\n                            })\n                        );\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\")\n                .attr(\"type\", \"hidden\")\n                .val(this.vis_id)\n                .appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-out\")\n            .attr(\"title\", \"Zoom out\")\n            .tooltip({ placement: \"bottom\" })\n            .click(function() {\n                view.zoom_out();\n            })\n            .appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-in\")\n            .attr(\"title\", \"Zoom in\")\n            .tooltip({ placement: \"bottom\" })\n            .click(function() {\n                view.zoom_in();\n            })\n            .appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", function() {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function(e) {\n            $(this)\n                .find(\"input\")\n                .trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function(e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box\n            .bind(\"dragstart\", function(e, d) {\n                this.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var delta = d.offsetX - this.current_x;\n                this.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.max_high - view.max_low)\n                );\n                view.move_delta(-delta_chrom);\n            });\n\n        this.overview_close.click(function() {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container\n            .bind(\"draginit\", function(e, d) {\n                // Disable interaction if started in scrollbar (for webkit)\n                if (e.clientX > view.viewport_container.width() - 16) {\n                    return false;\n                }\n            })\n            .bind(\"dragstart\", function(e, d) {\n                d.original_low = view.low;\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var container = $(this);\n                var delta = d.offsetX - d.current_x;\n                var new_scroll =\n                    container.scrollTop() - (e.clientY - d.current_height);\n                container.scrollTop(new_scroll);\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.high - view.low)\n                );\n                view.move_delta(delta_chrom);\n            });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack\n            .bind(\"dragstart\", function(e, d) {\n                return $(\"<div/>\")\n                    .addClass(\"zoom-area\")\n                    .css(\n                        \"height\",\n                        view.browser_content_div.height() +\n                            view.top_labeltrack.height() +\n                            1\n                    )\n                    .appendTo($(this));\n            })\n            .bind(\"drag\", function(e, d) {\n                $(d.proxy).css({\n                    left:\n                        Math.min(e.pageX, d.startX) -\n                        view.container.offset().left,\n                    width: Math.abs(e.pageX - d.startX)\n                });\n                var min =\n                        Math.min(e.pageX, d.startX) -\n                        view.container.offset().left,\n                    max =\n                        Math.max(e.pageX, d.startX) -\n                        view.container.offset().left,\n                    span = view.high - view.low,\n                    width = view.viewport_container.width();\n                view.update_location(\n                    Math.round(min / width * span) + view.low,\n                    Math.round(max / width * span) + view.low\n                );\n            })\n            .bind(\"dragend\", function(e, d) {\n                var min = Math.min(e.pageX, d.startX),\n                    max = Math.max(e.pageX, d.startX),\n                    span = view.high - view.low,\n                    width = view.viewport_container.width(),\n                    old_low = view.low;\n                view.low = Math.round(min / width * span) + old_low;\n                view.high = Math.round(max / width * span) + old_low;\n                $(d.proxy).remove();\n                view.request_redraw();\n            });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(\n            new LabelTrack(this, { content_div: this.top_labeltrack })\n        );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(function() {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", function() {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(base.toLowerCase() + \"_color\") ||\n            this.config.get_value(\"n_color\")\n        );\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(function() {\n                self.trigger(\n                    \"navigate\",\n                    new_chrom + \":\" + new_low + \"-\" + new_high\n                );\n            }, 500);\n        } else {\n            view.trigger(\n                \"navigate\",\n                new_chrom + \":\" + new_low + \"-\" + new_high\n            );\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text(\n            util.commatize(low) + \" - \" + util.commatize(high)\n        );\n        this.nav_input.val(\n            this.chrom + \":\" + util.commatize(low) + \"-\" + util.commatize(high)\n        );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var view = this,\n            chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function(result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n\n                view.chrom_select.html(\"\");\n                view.chrom_select.append(\n                    $('<option value=\"\">Select Chrom/Contig</option>')\n                );\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            '<option value=\"previous\">Previous ' +\n                                MAX_CHROMS_SELECTABLE +\n                                \"</option>\"\n                        )\n                    );\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            '<option value=\"next\">Next ' +\n                                MAX_CHROMS_SELECTABLE +\n                                \"</option>\"\n                        )\n                    );\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, function(v, i) {\n            return v.chrom === chrom;\n        })[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/),\n            chrom = chrom_pos[0],\n            new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined,\n            new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(function() {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", function() {\n            self.changed();\n        });\n    },\n\n    add_label_track: function(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this,\n            // Either redrawing a single drawable or all view's drawables.\n            track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, function(track) {\n            var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n                return to[0] === track;\n            });\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(function() {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low,\n            high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b =\n            this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px =\n            this.low /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var width_px =\n            (this.high - this.low) /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box\n            .css({\n                left: left_px,\n                width: Math.max(min_width_px, width_px)\n            })\n            .show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\n                \"left\",\n                left_px - (min_width_px - width_px) / 2\n            );\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, function(track_options) {\n            var track = track_options[0],\n                options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, function(label_track) {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function(point, container) {\n        if (\n            this.max_high === 0 ||\n            this.high - this.low <= this.min_separation\n        ) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center =\n                point /\n                    this.viewport_container.width() *\n                    (this.high - this.low) +\n                this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height(\n            this.container.height() -\n                this.top_container.height() -\n                this.bottom_container.height()\n        );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n                content_div: this.overview_viewport\n            }),\n            view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = function() {\n            view.overview_highlight\n                .show()\n                .height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(\n                view.overview_drawable.content_div.height() +\n                    view.overview_box.outerHeight()\n            );\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (\n            options.tool_state !== undefined &&\n            options.tool_state.hidden !== undefined\n        ) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\"),\n            param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\")\n            .addClass(\"param-label\")\n            .text(param.get(\"label\"))\n            .appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\")\n            .addClass(\"param-input\")\n            .html(param.get(\"html\"))\n            .appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this,\n            tool = this.model,\n            parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div\n            .bind(\"drag\", function(e) {\n                e.stopPropagation();\n            })\n            .click(function(e) {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", function(e) {\n                e.stopPropagation();\n            })\n            .keydown(function(e) {\n                e.stopPropagation();\n            });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\")\n            .appendTo(parent_div)\n            .text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(function(param) {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\")\n            .addClass(\"param-row\")\n            .appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on visible region\")\n            .appendTo(run_tool_row);\n        run_on_region_button.click(function() {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(function() {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get(\"track\").dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id\n            },\n            null,\n            // Success callback.\n            function(track_data) {\n                Galaxy.modal.show({\n                    title: tool.get(\"name\") + \" is Running\",\n                    body:\n                        tool.get(\"name\") +\n                        \" is running on the complete dataset. Tool outputs are in dataset's history.\",\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\"),\n            tool = this.model,\n            region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: track.view.low,\n                end: track.view.high\n            }),\n            url_params = {\n                target_dataset_id: track.dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id,\n                regions: [region.toJSON()]\n            },\n            current_track = track,\n            // Set name of track to include tool name, parameters, and region used.\n            track_name =\n                tool.get(\"name\") +\n                current_track.tool_region_and_parameters_str(region),\n            container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(\n                current_track,\n                group,\n                false\n            );\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(\n                current_track.view.content_div.children()[index]\n            );\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(\n            current_track.filters_manager.copy(new_track)\n        );\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(\n            url_params,\n            new_track,\n            // Success callback.\n            function(track_data) {\n                new_track.set_dataset(new data.Dataset(track_data));\n                new_track.tiles_div.text(\"Running job.\");\n                new_track.init();\n            }\n        );\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(function(response) {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(\n                    DATA_CANNOT_RUN_TOOL + response.message\n                );\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (\n        this.filter.high === Number.MAX_VALUE ||\n        this.filter.low === -Number.MAX_VALUE ||\n        this.filter.low === this.filter.high\n    ) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (\n        (parseFloat(feature_data[this.filter.index]) - this.filter.low) /\n        (this.filter.high - this.filter.low)\n    );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = function() {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = function() {};\n\nvar FeatureTrackTile = function(\n    track,\n    region,\n    w_scale,\n    canvas,\n    data,\n    mode,\n    message,\n    all_slotted,\n    feature_mapper,\n    incomplete_features,\n    seq_data\n) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = function() {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset =\n            obj_dict.dataset instanceof Backbone.Model\n                ? obj_dict.dataset\n                : new data.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait =\n        \"data_query_wait\" in obj_dict\n            ? obj_dict.data_query_wait\n            : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager =\n        \"data_manager\" in obj_dict\n            ? obj_dict.data_manager\n            : new visualization.GenomeDataManager({\n                  dataset: this.dataset,\n                  // HACK: simulate 'genome' attributes from view for now.\n                  // View should eventually use Genome object.\n                  genome: new visualization.Genome({\n                      key: view.dbkey,\n                      chroms_info: {\n                          chrom_info: view.chrom_data\n                      }\n                  }),\n                  data_mode_compatible: this.data_and_mode_compatible,\n                  can_subset: this.can_subset\n              });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(\n        this.container_div\n    );\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                } else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(\n                        track.config.get_value(\"name\") +\n                            track.tool_region_and_parameters_str()\n                    );\n                } else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html =\n                    \"<strong>Tool</strong>:\" +\n                    track.tool.get(\"name\") +\n                    \"<br/>\" +\n                    \"<strong>Dataset</strong>:\" +\n                    track.config.get_value(\"name\") +\n                    \"<br/>\" +\n                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                    '<option value=\"cur\">current viewing area</option>' +\n                    '<option value=\"bookmarks\">bookmarks</option>' +\n                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n                    \"</select>\";\n                var cancel_fn = function() {\n                        Galaxy.modal.hide();\n                        $(window).unbind(\"keypress.check_enter_esc\");\n                    },\n                    ok_fn = function() {\n                        var regions_to_use = $(\n                                'select[name=\"regions\"] option:selected'\n                            ).val(),\n                            regions,\n                            view_region = new visualization.GenomeRegion({\n                                chrom: view.chrom,\n                                start: view.low,\n                                end: view.high\n                            }),\n                            bookmarked_regions = _.map($(\".bookmark\"), function(\n                                elt\n                            ) {\n                                return new visualization.GenomeRegion({\n                                    from_str: $(elt)\n                                        .children(\".position\")\n                                        .text()\n                                });\n                            });\n\n                        // Get regions for visualization.\n                        if (regions_to_use === \"cur\") {\n                            // Use only current region.\n                            regions = [view_region];\n                        } else if (regions_to_use === \"bookmarks\") {\n                            // Use only bookmarks.\n                            regions = bookmarked_regions;\n                        } else {\n                            // Use both current region and bookmarks.\n                            regions = [view_region].concat(bookmarked_regions);\n                        }\n\n                        Galaxy.modal.hide();\n\n                        // Go to visualization.\n                        window.location.href =\n                            Galaxy.root +\n                            \"visualization/sweepster\" +\n                            \"?\" +\n                            $.param({\n                                dataset_id: track.dataset.id,\n                                hda_ldda: track.dataset.get(\"hda_ldda\"),\n                                regions: JSON.stringify(\n                                    new Backbone.Collection(regions).toJSON()\n                                )\n                            });\n                    },\n                    check_enter_esc = function(e) {\n                        if ((e.keyCode || e.which) === 27) {\n                            // Escape key\n                            cancel_fn();\n                        } else if ((e.keyCode || e.which) === 13) {\n                            // Enter key\n                            ok_fn();\n                        }\n                    };\n\n                // show dialog\n                Galaxy.modal.show({\n                    title:\n                        \"Visualize tool parameter space and output from different parameter settings?\",\n                    body: html,\n                    buttons: { No: cancel_fn, Yes: ok_fn }\n                });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function() {\n        return $(\"<div/>\")\n            .addClass(\"track\")\n            .attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(\n            function() {\n                if (track.config.get_value(\"content_visible\")) {\n                    in_handle = true;\n                    drag_control.show();\n                }\n            },\n            function() {\n                in_handle = false;\n                if (!in_drag) {\n                    drag_control.hide();\n                }\n            }\n        );\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control\n            .hide()\n            .bind(\"dragstart\", function(e, d) {\n                in_drag = true;\n                d.original_height = $(track.content_div).height();\n            })\n            .bind(\"drag\", function(e, d) {\n                var new_height = Math.min(\n                    Math.max(d.original_height + d.deltaY, track.min_height_px),\n                    track.max_height_px\n                );\n                $(track.tiles_div).css(\"height\", new_height);\n                track.visible_height_px =\n                    track.max_height_px === new_height ? 0 : new_height;\n                track.on_resize();\n            })\n            .bind(\"dragend\", function(e, d) {\n                track.tile_cache.clear();\n                in_drag = false;\n                if (!in_handle) {\n                    drag_control.hide();\n                }\n                track.config.set_value(\"height\", track.visible_height_px);\n                track.changed();\n            })\n            .appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\")\n            .addClass(\"message\")\n            .html(msg_html)\n            .appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\")\n            .addClass(\"tiles\")\n            .appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred(),\n            params = {\n                hda_ldda: track.dataset.get(\"hda_ldda\"),\n                data_type: this.dataset_check_type,\n                chrom: track.view.chrom,\n                retry: retry\n            };\n        $.getJSON(this.dataset.url(), params, function(result) {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"View error\")\n                            .click(function() {\n                                Galaxy.modal.show({\n                                    title: \"Trackster Error\",\n                                    body: \"<pre>\" + result.message + \"</pre>\",\n                                    buttons: {\n                                        Close: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            })\n                    );\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"Try again\")\n                            .click(function() {\n                                track.init(true);\n                            })\n                    );\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (\n                result === \"no data\" ||\n                (result.data !== undefined &&\n                    (result.data === null || result.data.length === 0))\n            ) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(function() {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\n                        \"height\",\n                        track.visible_height_px + \"px\"\n                    );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(function() {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            function(result) {\n                var data = result.data;\n\n                // Tracks may not have stat data either because there is no data or data is not yet ready.\n                if (data && data.min !== undefined && data.max !== undefined) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min,\n                        max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update config, prefs\n                    track.config.set_default_value(\"min_value\", min_value);\n                    track.config.set_default_value(\"max_value\", max_value);\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(\n        this,\n        \"filters\" in obj_dict ? obj_dict.filters : null\n    );\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool\n        ? new TracksterTool(\n              _.extend(obj_dict.tool, {\n                  track: this,\n                  tool_state: obj_dict.tool_state\n              })\n          )\n        : null;\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\")\n        .addClass(\"tiles\")\n        .appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\")\n        .addClass(\"overlay\")\n        .appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title:\n                \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            function(result) {\n                var data = result.data;\n                if (\n                    isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                    isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min,\n                        max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update the prefs\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\n            \"title\",\n            \"Set display mode (now: \" + track.mode + \")\"\n        );\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return w_scale + \"_\" + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after,\n            low = this.view.low,\n            high = this.view.high,\n            range = high - low,\n            width = this.view.container.width(),\n            w_scale = this.view.resolution_px_b,\n            resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n            tile_width = Math.floor(TILE_SIZE * resolution),\n            // Index of first tile that overlaps visible region.\n            tile_index = Math.floor(low / tile_width),\n            tile_region,\n            tile_promise,\n            tile_promises = [],\n            tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(function(tile) {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div\n                .children(\".remove\")\n                .removeClass(\"remove\")\n                .remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(function() {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, function(t) {\n                return t !== null;\n            });\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this,\n            css_class = type === \"max\" ? \"top\" : \"bottom\",\n            text = type === \"max\" ? \"max\" : \"min\",\n            pref_name = type === \"max\" ? \"max_value\" : \"min_value\",\n            label = this.container_div.find(\".yaxislabel.\" + css_class),\n            value = round(track.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change =\n            on_change ||\n            function() {\n                track.request_draw({ clear_tile_cache: true });\n            };\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\")\n                .text(value)\n                .make_text_editable({\n                    num_cols: 12,\n                    on_finish: function(new_val) {\n                        $(\".tooltip\").remove();\n                        track.config.set_value(pref_name, round(new_val, 1));\n                        on_change();\n                    },\n                    help_text: \"Set \" + text + \" value\"\n                })\n                .addClass(\"yaxislabel \" + css_class)\n                .css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, function(tile) {\n            return tile instanceof LineTrackTile;\n        });\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, function(tile) {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            track._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, function(tile) {\n                return tile.has_icons;\n            });\n\n            if (icons_present) {\n                _.each(tiles, function(tile) {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force,\n            mode = options.mode || this.mode,\n            resolution = 1 / w_scale,\n            // Useful vars.\n            track = this,\n            drawables = this._get_drawables(),\n            key = this._gen_tile_cache_key(w_scale, region),\n            is_tile = function(o) {\n                return o && \"track\" in o;\n            };\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : track.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = function() {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, function(m) {\n                return m === mode;\n            })\n                ? \"Coverage\"\n                : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, function(d) {\n                // Get the track data/promise.\n                return d.data_manager.get_data(\n                    region,\n                    data_mode,\n                    resolution,\n                    track.data_url_extra_params\n                );\n            });\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(\n                    view.reference_track.data_manager.get_data(\n                        region,\n                        mode,\n                        resolution,\n                        view.reference_track.data_url_extra_params\n                    )\n                );\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(function() {\n            var tile_data = get_tile_data(),\n                tracks_data = tile_data,\n                seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (\n                _.find(tile_data, function(d) {\n                    return util.is_deferred(d);\n                })\n            ) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(\n                    track.draw_helper(region, w_scale, options)\n                ).then(function(tile) {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(\n                    tile_data.pop(),\n                    region\n                );\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [],\n                drawing_heights = [];\n\n            _.each(drawables, function(d, i) {\n                var mode = d.mode,\n                    data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(\n                    d.get_canvas_height(data, mode, w_scale, width)\n                );\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas(),\n                tile_low = region.get(\"start\"),\n                tile_high = region.get(\"end\"),\n                all_data_index = 0,\n                width =\n                    Math.ceil((tile_high - tile_low) * w_scale) +\n                    track.left_offset,\n                height = _.max(drawing_heights),\n                tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, function(d, i) {\n                tile = d.draw_tile(\n                    tracks_data[i],\n                    ctx,\n                    drawing_modes[i],\n                    region,\n                    w_scale,\n                    seq_data\n                );\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if (\n            [undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1\n        ) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if (\n            [undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !==\n            -1\n        ) {\n            this.config.set_value(\n                \"max_value\",\n                _.max(\n                    _.map(result.data, function(d) {\n                        return d[1];\n                    })\n                ) || 0\n            );\n        }\n\n        var canvas = ctx.canvas,\n            painter = new painters.LinePainter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode\n            );\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this,\n            tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round(\n            (tile.low -\n                (this.is_overview ? this.view.max_low : this.view.low)) *\n                w_scale\n        );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(\n            this.max_height_px,\n            tile_element.height() - 2\n        );\n\n        // Update height for all tiles based on max height.\n        tile_element\n            .parent()\n            .children()\n            .css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this,\n            region_str = region !== undefined ? region.toString() : \"all\",\n            param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (\n            data.dataset_type === \"bigwig\" ||\n            data.extra_info === \"no_detail\"\n        ) {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view,\n            range = view.high - view.low,\n            tickDistance = Math.floor(\n                Math.pow(10, Math.floor(Math.log(range) / Math.log(10)))\n            ),\n            position = Math.floor(view.low / tickDistance) * tickDistance,\n            width = this.view.container.width(),\n            new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor(\n                (position - view.low) / range * width\n            );\n            new_div.append(\n                $(\"<div/>\")\n                    .addClass(\"pos-label\")\n                    .text(util.commatize(position))\n                    .css({\n                        left: screenPosition\n                    })\n            );\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, function(d) {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    action_icons_def: [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, function(d) {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(function() {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n                name: this.config.get_value(\"name\")\n            }),\n            track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(\n                _.map(this.drawables, function(d) {\n                    return d.config.get_value(\"min_value\");\n                })\n            ),\n            max = _.max(\n                _.map(this.drawables, function(d) {\n                    return d.config.get_value(\"max_value\");\n                })\n            );\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, function(d) {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this,\n            min_value = this.config.get_value(\"min_value\"),\n            max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, function(d) {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1,\n            i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this,\n            t = function() {\n                track.update_all_min_max();\n            };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function(view) {\n    TiledTrack.call(\n        this,\n        view,\n        { content_div: view.top_labeltrack },\n        { resize: false, header: false }\n    );\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 13,\n                hidden: true\n            }\n        ]);\n    },\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\"),\n            new_visible,\n            tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(\n                this,\n                region,\n                w_scale,\n                options\n            );\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region),\n            seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(\n        supportsByteRanges(\n            Galaxy.root + \"datasets/\" + this.dataset.id + \"/display\"\n        )\n    ).then(function(supportsByteRanges) {\n        if (supportsByteRanges) {\n            self.data_manager = new bbi.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            { key: \"color\", label: \"Color\", type: \"color\" },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(\n    DiagonalHeatmapTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    {\n        display_modes: [\"Heatmap\"],\n\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 500,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        },\n\n        /**\n     * Additional initialization required before drawing track for the first time.\n     */\n        predraw_init: function() {\n            var track = this;\n            return $.getJSON(\n                track.dataset.url(),\n                {\n                    data_type: \"data\",\n                    stats: true,\n                    chrom: track.view.chrom,\n                    low: 0,\n                    high: track.view.max_high,\n                    hda_ldda: track.dataset.get(\"hda_ldda\")\n                },\n                function(result) {\n                    var data = result.data;\n                }\n            );\n        },\n\n        /**\n     * Draw tile.\n     */\n        draw_tile: function(result, ctx, mode, region, w_scale) {\n            // Paint onto canvas.\n            var canvas = ctx.canvas,\n                painter = new painters.DiagonalHeatmapPainter(\n                    result.data,\n                    region.get(\"start\"),\n                    region.get(\"end\"),\n                    this.config.to_key_value_dict(),\n                    mode\n                );\n            painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n            return new Tile(this, region, w_scale, canvas, result.data);\n        }\n    }\n);\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Block color\",\n                type: \"color\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand color\",\n                type: \"color\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true,\n                help:\n                    \"Show the number of items in each bin when drawing summary histogram\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"connector_style\",\n                label: \"Connector style\",\n                type: \"select\",\n                default_value: \"fishbones\",\n                options: [\n                    {\n                        label: \"Line with arrows\",\n                        value: \"fishbone\"\n                    },\n                    { label: \"Arcs\", value: \"arcs\" }\n                ]\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var track = this,\n            i,\n            line_track_tiles = _.filter(tiles, function(t) {\n                return t instanceof LineTrackTile;\n            });\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), function(\n                inc_features\n            ) {\n                _.each(inc_features, function(feature) {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, function(tile) {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(\n                    all_incomplete_features,\n                    _.map(tile.incomplete_features, function(f) {\n                        return f[0];\n                    })\n                );\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(\n                    tile_incomplete_features,\n                    _.keys(tile.other_tiles_features_drawn)\n                );\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                            data: _.values(tile_incomplete_features)\n                        },\n                        new_canvas = self.view.canvas_manager.new_canvas(),\n                        new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(\n                        tile.canvas.height,\n                        self.get_canvas_height(\n                            features,\n                            tile.mode,\n                            tile.w_scale,\n                            100\n                        )\n                    );\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(\n                        features,\n                        new_canvas_ctx,\n                        tile.mode,\n                        tile.region,\n                        tile.w_scale,\n                        tile.seq_data\n                    );\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(\n                        tile.other_tiles_features_drawn,\n                        all_incomplete_features\n                    );\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters,\n                f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false,\n                example_feature,\n                filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (\n                            filter.applies_to(example_feature) &&\n                            filter.min !== filter.max\n                        ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\n                \"title\",\n                \"Set display mode (now: Auto/\" + mode + \")\"\n            );\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context,\n            slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new slotting.FeatureSlotter(\n                level,\n                mode,\n                MAX_FEATURE_DEPTH,\n                function(x) {\n                    return dummy_context.measureText(x);\n                }\n            );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(\n                w_scale,\n                result.data,\n                mode\n            );\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return Math.max(\n                this.min_height_px,\n                dummy_painter.get_required_height(rows_required, canvas_width)\n            );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this,\n            canvas = ctx.canvas,\n            tile_low = region.get(\"start\"),\n            tile_high = region.get(\"end\"),\n            left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                mode,\n                region,\n                w_scale\n            );\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [],\n            slots = this.slotters[w_scale].slots,\n            all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter\n                ? new FilterScaler(this.filters_manager.alpha_filter)\n                : null,\n            filter_height_scaler = this.filters_manager.height_filter\n                ? new FilterScaler(this.filters_manager.height_filter)\n                : null,\n            painter = new this.painter(\n                filtered,\n                tile_low,\n                tile_high,\n                this.config.to_key_value_dict(),\n                mode,\n                filter_alpha_scaler,\n                filter_height_scaler,\n                // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                ref_seq,\n                // Only the ReadPainer will use this function\n                function(b) {\n                    return track.view.get_base_color(b);\n                }\n            );\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(\n                ctx,\n                canvas.width,\n                canvas.height,\n                w_scale,\n                slots\n            );\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(\n                track,\n                region,\n                w_scale,\n                canvas,\n                result.data,\n                mode,\n                result.message,\n                all_slotted,\n                feature_mapper,\n                incomplete_features,\n                ref_seq\n            );\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"show_sample_data\",\n                label: \"Show sample data\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_labels\",\n                label: \"Show summary and sample labels\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"summary_height\",\n                label: \"Locus summary height\",\n                type: \"float\",\n                default_value: 20\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                \"Histogram\",\n                region,\n                w_scale\n            );\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view,\n                painter = new this.painter(\n                    result.data,\n                    region.get(\"start\"),\n                    region.get(\"end\"),\n                    this.config.to_key_value_dict(),\n                    mode,\n                    function(b) {\n                        return view.get_base_color(b);\n                    }\n                );\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\")\n                ? this.dataset.get_metadata(\"sample_names\").length\n                : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var line_track_tiles = _.filter(tiles, function(t) {\n            return t instanceof LineTrackTile;\n        });\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (\n            line_track_tiles.length === 0 &&\n            this.config.get_value(\"show_labels\") &&\n            sample_names &&\n            sample_names.length > 1\n        ) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\")\n                        .text(\"Summary\")\n                        .addClass(\"yaxislabel variant top\")\n                        .css({\n                            \"font-size\": font_size + \"px\",\n                            top:\n                                (this.config.get_value(\"summary_height\") -\n                                    font_size) /\n                                    2 +\n                                \"px\"\n                        })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\")\n                            .html(samples_div_html)\n                            .addClass(\"yaxislabel variant top sample\")\n                            .css({\n                                top: this.config.get_value(\"summary_height\")\n                            })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === \"Squish\" ? 5 : 10) + \"px\";\n            $(this.tiles_div)\n                .find(\".sample\")\n                .css({\n                    \"font-size\": font_size,\n                    \"line-height\": font_size\n                });\n            // Color labels to preference color.\n            $(this.tiles_div)\n                .find(\".yaxislabel\")\n                .css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(\n    ReadTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    FeatureTrack.prototype,\n    {\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"block_color\",\n                    label: \"Histogram color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"detail_block_color\",\n                    label: \"Sense strand block color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand block color\",\n                    type: \"color\",\n                    default_value: \"#DDDDDD\"\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Histogram minimum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Histogram maximum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 0,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        }\n    }\n);\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = function(template, view, container) {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexport default {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n"]}