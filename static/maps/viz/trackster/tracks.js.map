{"version":3,"sources":["viz/trackster/tracks.js"],"names":["define","_","visualization","html_elt_js_obj_dict","util","slotting","painters","filters_mod","data","tools_mod","config_mod","bbi","config","num","places","val","config_onchange","Math","supportsByteRanges","url","promise","$","Deferred","ajax","obj_dict","header_view","model","xhr","id","setRequestHeader","success","result","status","header_div","extend","is_container","element","obj","attr","moveable","handle_class","container","element_js_obj","container_selector","cur_container","insertBefore","bind","insertAfter","child","i","parent","this","children","this_obj","find","parents","length","top","position","outerHeight","remove_drawable","add_drawable_before","get","bottom","hasClass","add_drawable","append","d","offsetY","prepend","move_drawable","pow","deltaY","type","addClass","beforeSend","DATA_NOCONVERTER","Drawable","view","drawable","set_value","id_counter","drag_handle_class","is_overview","name","on_click_fn","ConfigSettingCollection","from_models_and_saved_values","collection","get_value","title","on","remove","build_container_div","prototype","config_params","key","viz_views","label","$el","container_div","init","icons_div","action_icons","changed","hover","show","can_draw","hide","action_icons_def","css_class","toggle_icon","removeClass","hide_contents","old_name","show_contents","ConfigSettingCollectionView","update_intro_div","default_value","hidden","enabled","request_draw","_draw","drawables","options","to_dict","set_name","new_name","object_from_template","drawables_array","revert_name","update_icons","DrawableCollection","call","obj_type","indexOf","old_drawable","index","dictified_drawables","push","get_drawables","prefs","to_key_value_dict","tracks","queue","other","splice","new_drawable","update_html","content_div","replaceWith","filters_manager","unpack_drawables","old_manager","new_position","DrawableGroup","group","slice","shift","setup_multitrack_filtering","toggle","num_drawables","FiltersManager","after","parent_div","saved_filters_managers","num_feature_tracks","get_type","a_type","can_composite","filters","visible","same_type","filter","j","shared_filters","clear_filters","_restore_filter_managers","new_filter","clear_tile_cache","tiles_div","composite_icon","filters_icon","CompositeTrack","show_composite_track","composite_track","replace_drawable","FeatureTrack","LineTrack","Backbone","dbkey","stand_alone","undefined","remove_all","filter_name","NumberFilter","add_filter","top_labeltrack","viewport_container","init_filters","nav_container","overview","overview_viewport","overview_close","overview_box_background","chrom_select","submit_nav","e","stopPropagation","nav_input","location_span","css","autocomplete","source","each","minLength","View","initialize","vis_id","zoom_out","appendTo","zoom_in","nav_controls","load_chroms_deferred","label_tracks","tracks_to_be_redrawn","max_low","max_high","zoom_factor","min_separation","has_changes","render","canvas_manager","CanvasManager","ownerDocument","reset","browser_content_div","overview_box","current_x","offsetX","delta_chrom","move_delta","reset_overview","clientX","delta","current_height","requested_redraw","parent_element","top_container","left","width","pageX","span","update_location","min","max","startX","intro_div","old_low","round","proxy","request_redraw","click","select_datasets","track","prependTo","nav","add_label_track","resize_timer","clearTimeout","bottom_container","resize_window","document","redraw","overview_highlight","window","trigger","get_base_color","default_overview_height","height","TracksterView","keyCode","which","trigger_navigate","timer","go_to","delay","self","tooltip","placement","chrom","low","high","select","focus","load_chroms","request","url_parms","all_features","feature_search_deferreds","map","t","data_manager","search_features","term","concat","dataset_features","apply","chrom_data","response","html","feature","hidden_input","next_chroms","chrom_start_index","zo_link","error","alert","change_chrom","found","len","new_scroll","scrollTop","clientY","chrom_pos","new_low","new_high","offset","abs","current_chrom_span","data_fetch","redraw_on_move_fn","LabelTrack","label_track","setTimeout","base","toLowerCase","track_list","track_options","new_chrom","requestAnimationFrame","text","commatize","width_px","root","min_width_px","dataType","chrom_info","ReferenceTrack","left_px","ref_track","chrom_option","prev_chroms","cur_center","start_index","resolve","new_half","overview_drawable","grep","v","reference_track","is_visible","ToolParameterView","then","resize_viewport","str","replace","update_event","split","parseInt","TracksterToolView","fraction","tool","keydown","name_div","param_view","run_on_region_button","run_on_dataset_button","set_visible","update_params","params","run_on_dataset","action","Galaxy","tool_id","body","buttons","Close","region","GenomeRegion","end","url_params","target_dataset_id","to","current_track","_redraw","new_track","hda_ldda","change_mode","set_filters_manager","run","ceil","set_dataset","Dataset","resolution_px_b","inputs","ss_deferred","ServerStateDeferred","ajax_settings","JSON","stringify","interval","success_fn","contentType","success_callback","FilterScaler","point","Number","MAX_VALUE","parseFloat","feature_data","Tile","canvas","predisplay_actions","LineTrackTile","mode","all_slotted","feature_mapper","set_overview","dataset","copy","postdraw_actions","FeatureTrackTile","TracksterTool","Tool","defaults","tool_state","set","remove_inputs","state_dict","get_inputs_dict","events","change :input","param_div","param","update_value","target","Track","run_tool_row","dataset_check_type","data_url_extra_params","chroms_info","min_height_px","modal","start","toJSON","cancel_fn","bookmarked_regions","constructor","regions","dataset_id","track_data","check_enter_esc","when","go","message","default_val","Scaler","in_handle","gen_val","drag_control","new_height","visible_height_px","w_scale","html_elt","incomplete_features","seq_data","has_icons","other_tiles_features_drawn","tool_view","dynamic_tool_div","Model","data_query_wait","TiledTrack","genome","Genome","data_mode_compatible","data_and_mode_compatible","can_subset","max_height_px","resize","add_resize_handle","set_min_max","getJSON","data_type","max_value","tool_region_and_parameters_str","new_mode","clear","mode_icon","unbind","ok_fn","tools_icon","regions_to_use","param_space_viz_icon","tile_region","elt","from_str","view_region","location","href","clear_after","Collection","No","Yes","tile_width","tile_promise","tile_promises","tiles","tile_index","on_resize","in_drag","_add_yaxis_label","pref_name","on_change","tile_cache","num_cols","on_finish","tile","line_track_tiles","ReadTrack","VariantTrack","show_message","msg_html","retry","draw_helper","_get_drawables","force","resolution","_gen_tile_cache_key","is_tile","kind","tile_drawn","set_elt","tile_data","get_tile_data","tracks_data","is_deferred","valid_chroms","drawing_modes","predraw_init","drawing_heights","init_deferred","show_tile","CONTINUOUS_DATA_MODES","msg_elt","ctx","getContext","translate","globalAlpha","min_value","floor","mean","sd","set_default_value","_draw_line_track_tile","draw_tile","filters_available","left_offset","tile_element","Cache","track_height","overlay_div","region_str","slotters","dataset_type","max_rows","entry","track_type","stats","isNaN","screenPosition","range","tickDistance","show_group","before_draw","init_deferreds","value","make_text_editable","update_all_min_max","new_val","max_height","data_url","get_mode","update_auto_mode","display_mode","get_elt","o","cur_visible","new_visible","m","c","fillStyle","get_data","data_mode","build_config_params","subset_entry","pop","new_canvas","tile_low","tile_high","DiagonalHeatmapTrack","display_modes","canvas_width","LinePainter","set_painter_from_config","ref_seq","help","painter","ArcLinkedFeaturePainter","toString","values","join","all_incomplete_features","tile_incomplete_features","extra_info","new_tile","init_for_tool_data","show_more_rows_icon","log","new_div","incremental_slots","slotter","slot_features","features","get_canvas_height","union","dummy_painter","filtered","slots","keep","visible_height","filter_alpha_scaler","filter_height_scaler","font","manager","default_font","summary_draw_height","draw","deferreds","font_size","header","reference","GenomeReferenceDataManager","samples_div_html","is","char_width_px","subset","str_len","fillText","VcfTrack","BBIDataManager","drawable_type","template","addable_objects","DiagonalHeatmapPainter","start_end_dct","LinkedFeaturePainter","pluck","inc_features","omit","f","keys","size","new_canvas_ctx","drawImage","update_ui_elt","example_feature","applies_to","level","dummy_context","FeatureSlotter","x","measureText","rows_required","get_required_height","cur_tile","hide_feature","flen","update_attrs","alpha_filter","height_filter","b","textAlign","draw_results","translation","VariantPainter","num_samples","get_metadata","match","fetch","sample_names","font-size","line-height","ReadPainter"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["define(\n    [\n        \"libs/underscore\",\n        \"viz/visualization\",\n        \"viz/viz_views\",\n        \"viz/trackster/util\",\n        \"viz/trackster/slotting\",\n        \"viz/trackster/painters\",\n        \"viz/trackster/filters\",\n        \"mvc/dataset/data\",\n        \"mvc/tool/tools\",\n        \"utils/config\",\n        \"viz/bbi-data-manager\",\n        \"ui/editable-text\"\n    ],\n    function(\n        _,\n        visualization,\n        viz_views,\n        util,\n        slotting,\n        painters,\n        filters_mod,\n        data,\n        tools_mod,\n        config_mod,\n        bbi\n    ) {\n        var extend = _.extend;\n\n        // ---- Web UI specific utilities ----\n\n        /**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n        // TODO: probably should separate moveable objects from containers.\n        var html_elt_js_obj_dict = {};\n\n        /**\n * Designates an HTML as a container.\n */\n        var is_container = function(element, obj) {\n            html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n        };\n\n        /**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\n        var moveable = function(\n            element,\n            handle_class,\n            container_selector,\n            element_js_obj\n        ) {\n            // HACK: set default value for container selector.\n            container_selector = \".group\";\n\n            // Register element with its object.\n            html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n            // Need to provide selector for handle, not class.\n            element\n                .bind(\n                    \"drag\",\n                    { handle: \".\" + handle_class, relative: true },\n                    function(e, d) {\n                        var element = $(this),\n                            parent = $(this).parent(),\n                            // Only sorting amongst tracks and groups.\n                            children = parent.children(\".track,.group\"),\n                            this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n                            child,\n                            container,\n                            top,\n                            bottom,\n                            i;\n\n                        //\n                        // Enable three types of dragging: (a) out of container; (b) into container;\n                        // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n                        //\n\n                        // Handle dragging out of container.\n                        container = $(this).parents(container_selector);\n                        if (container.length !== 0) {\n                            top = container.position().top;\n                            bottom = top + container.outerHeight();\n                            var cur_container =\n                                html_elt_js_obj_dict[container.attr(\"id\")];\n                            if (d.offsetY < top) {\n                                // Moving above container.\n                                $(this).insertBefore(container);\n                                cur_container.remove_drawable(this_obj);\n                                cur_container.container.add_drawable_before(\n                                    this_obj,\n                                    cur_container\n                                );\n                                return;\n                            } else if (d.offsetY > bottom) {\n                                // Moving below container.\n                                $(this).insertAfter(container);\n                                cur_container.remove_drawable(this_obj);\n                                cur_container.container.add_drawable(this_obj);\n                                return;\n                            }\n                        }\n\n                        // Handle dragging into container. Child is appended to container's content_div.\n                        container = null;\n                        for (i = 0; i < children.length; i++) {\n                            child = $(children.get(i));\n                            top = child.position().top;\n                            bottom = top + child.outerHeight();\n                            // Dragging into container if child is a container and offset is inside container.\n                            if (\n                                child.is(container_selector) &&\n                                this !== child.get(0) &&\n                                d.offsetY >= top &&\n                                d.offsetY <= bottom\n                            ) {\n                                // Append/prepend based on where offsetY is closest to and return.\n                                if (d.offsetY - top < bottom - d.offsetY) {\n                                    child.find(\".content-div\").prepend(this);\n                                } else {\n                                    child.find(\".content-div\").append(this);\n                                }\n                                // Update containers. Object may not have container if it is being moved quickly.\n                                if (this_obj.container) {\n                                    this_obj.container.remove_drawable(\n                                        this_obj\n                                    );\n                                }\n                                html_elt_js_obj_dict[\n                                    child.attr(\"id\")\n                                ].add_drawable(this_obj);\n                                return;\n                            }\n                        }\n\n                        // Handle sibling movement, aka sorting.\n\n                        // Determine new position\n                        for (i = 0; i < children.length; i++) {\n                            child = $(children.get(i));\n                            if (\n                                d.offsetY < child.position().top &&\n                                // Cannot move tracks above reference track or intro div.\n                                !(\n                                    child.hasClass(\"reference-track\") ||\n                                    child.hasClass(\"intro\")\n                                )\n                            ) {\n                                break;\n                            }\n                        }\n\n                        // If not already in the right place, move. Need\n                        // to handle the end specially since we don't have\n                        // insert at index\n                        if (i === children.length) {\n                            if (this !== children.get(i - 1)) {\n                                parent.append(this);\n                                html_elt_js_obj_dict[\n                                    parent.attr(\"id\")\n                                ].move_drawable(this_obj, i);\n                            }\n                        } else if (this !== children.get(i)) {\n                            $(this).insertBefore(children.get(i));\n                            // Need to adjust insert position if moving down because move is changing\n                            // indices of all list items.\n                            html_elt_js_obj_dict[\n                                parent.attr(\"id\")\n                            ].move_drawable(this_obj, d.deltaY > 0 ? i - 1 : i);\n                        }\n                    }\n                )\n                .bind(\"dragstart\", function() {\n                    $(this).addClass(\"dragging\");\n                })\n                .bind(\"dragend\", function() {\n                    $(this).removeClass(\"dragging\");\n                });\n        };\n\n        /**\n * Init constants & functions used throughout trackster.\n */\n        var // Padding at the top of tracks for error messages\n            ERROR_PADDING = 20,\n            // Maximum number of rows un a slotted track\n            MAX_FEATURE_DEPTH = 100,\n            // Minimum width for window for squish to be used.\n            MIN_SQUISH_VIEW_WIDTH = 12000,\n            // Number of pixels per tile, not including left offset.\n            TILE_SIZE = 400,\n            DEFAULT_DATA_QUERY_WAIT = 5000,\n            // Maximum number of chromosomes that are selectable at any one time.\n            MAX_CHROMS_SELECTABLE = 100,\n            DATA_ERROR = \"Cannot display dataset due to an error. \",\n            DATA_NOCONVERTER =\n                \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n            DATA_NONE = \"No data for this chrom/contig.\",\n            DATA_PENDING =\n                \"Preparing data. This can take a while for a large dataset. \" +\n                \"If the visualization is saved and closed, preparation will continue in the background.\",\n            DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n            DATA_LOADING = \"Loading data...\",\n            DATA_OK = \"Ready for display\",\n            TILE_CACHE_SIZE = 10,\n            DATA_CACHE_SIZE = 20,\n            // Numerical/continuous data display modes.\n            CONTINUOUS_DATA_MODES = [\n                \"Histogram\",\n                \"Line\",\n                \"Filled\",\n                \"Intensity\"\n            ];\n\n        /**\n * Round a number to a given number of decimal places.\n */\n        function round(num, places) {\n            // Default rounding is to integer.\n            if (!places) {\n                places = 0;\n            }\n\n            var val = Math.pow(10, places);\n            return Math.round(num * val) / val;\n        }\n\n        /**\n * Check if a server can do byte range requests.\n */\n        function supportsByteRanges(url) {\n            var promise = $.Deferred();\n            $.ajax({\n                type: \"HEAD\",\n                url: url,\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n                },\n                success: function(result, status, xhr) {\n                    promise.resolve(xhr.status === 206);\n                }\n            });\n\n            return promise;\n        }\n\n        /**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n        /**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\n        var Drawable = function(view, container, obj_dict) {\n            if (!Drawable.id_counter) {\n                Drawable.id_counter = 0;\n            }\n            this.id = Drawable.id_counter++;\n            this.view = view;\n            this.container = container;\n            this.drag_handle_class = obj_dict.drag_handle_class;\n            this.is_overview = false;\n            this.action_icons = {};\n\n            // -- Set up drawable configuration. --\n            this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n                this.config_params,\n                obj_dict.prefs\n            );\n\n            // If there's no saved name, use object name.\n            if (!this.config.get_value(\"name\")) {\n                this.config.set_value(\"name\", obj_dict.name);\n            }\n            if (this.config_onchange) {\n                this.config.on(\"change\", this.config_onchange, this);\n            }\n\n            // Build Drawable HTML and behaviors.\n            this.container_div = this.build_container_div();\n            this.header_div = null;\n\n            // Use opt-out policy on header creation because this is the more frequent approach:\n            // unless flag set, create header.\n            if (obj_dict.header !== false) {\n                var header_view = new viz_views.TrackHeaderView({\n                    model: this,\n                    id: this.id\n                });\n\n                this.header_div = header_view.$el;\n                this.container_div.append(this.header_div);\n\n                // Show icons when users is hovering over track.\n                var icons_div = header_view.icons_div;\n                this.action_icons = header_view.action_icons;\n                this.container_div.hover(\n                    function() {\n                        icons_div.show();\n                    },\n                    function() {\n                        icons_div.hide();\n                    }\n                );\n            }\n        };\n\n        Drawable.prototype.action_icons_def = [\n            // Hide/show drawable content.\n            // FIXME: make this an odict for easier lookup.\n            {\n                name: \"toggle_icon\",\n                title: \"Hide/show content\",\n                css_class: \"toggle\",\n                on_click_fn: function(drawable) {\n                    if (drawable.config.get_value(\"content_visible\")) {\n                        drawable.action_icons.toggle_icon\n                            .addClass(\"toggle-expand\")\n                            .removeClass(\"toggle\");\n                        drawable.hide_contents();\n                        drawable.config.set_value(\"content_visible\", false);\n                    } else {\n                        drawable.action_icons.toggle_icon\n                            .addClass(\"toggle\")\n                            .removeClass(\"toggle-expand\");\n                        drawable.config.set_value(\"content_visible\", true);\n                        drawable.show_contents();\n                    }\n                }\n            },\n            // Edit settings.\n            {\n                name: \"settings_icon\",\n                title: \"Edit settings\",\n                css_class: \"gear\",\n                on_click_fn: function(drawable) {\n                    var view = new config_mod.ConfigSettingCollectionView({\n                        collection: drawable.config\n                    });\n                    view.render_in_modal(\"Configure Track\");\n                }\n            },\n            // Remove.\n            {\n                name: \"remove_icon\",\n                title: \"Remove\",\n                css_class: \"remove-icon\",\n                on_click_fn: function(drawable) {\n                    // Tooltip for remove icon must be deleted when drawable is deleted.\n                    $(\".tooltip\").remove();\n                    drawable.remove();\n                }\n            }\n        ];\n\n        extend(Drawable.prototype, {\n            config_params: [\n                { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n                {\n                    key: \"content_visible\",\n                    type: \"bool\",\n                    default_value: true,\n                    hidden: true\n                }\n            ],\n\n            config_onchange: function() {},\n\n            init: function() {},\n\n            changed: function() {\n                this.view.changed();\n            },\n\n            can_draw: function() {\n                if (this.enabled && this.config.get_value(\"content_visible\")) {\n                    return true;\n                }\n\n                return false;\n            },\n\n            request_draw: function() {},\n\n            _draw: function(options) {},\n\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: function() {},\n\n            /**\n     * Set drawable name.\n     */\n            set_name: function(new_name) {\n                this.old_name = this.config.get_value(\"name\");\n                this.config.set_value(\"name\", new_name);\n            },\n\n            /**\n     * Revert track name; currently name can be reverted only once.\n     */\n            revert_name: function() {\n                if (this.old_name) {\n                    this.config.set_value(\"name\", this.old_name);\n                }\n            },\n\n            /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n            remove: function() {\n                this.changed();\n\n                this.container.remove_drawable(this);\n                var view = this.view;\n                this.container_div.hide(0, function() {\n                    $(this).remove();\n                    // HACK: is there a better way to update the view?\n                    view.update_intro_div();\n                });\n            },\n\n            /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n            build_container_div: function() {},\n\n            /**\n     * Update icons.\n     */\n            update_icons: function() {},\n\n            /**\n     * Hide drawable's contents.\n     */\n            hide_contents: function() {},\n\n            /**\n     * Show drawable's contents.\n     */\n            show_contents: function() {},\n\n            /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n            get_drawables: function() {}\n        });\n\n        /**\n * A collection of drawable objects.\n */\n        var DrawableCollection = function(view, container, obj_dict) {\n            Drawable.call(this, view, container, obj_dict);\n\n            // Attribute init.\n            this.obj_type = obj_dict.obj_type;\n            this.drawables = [];\n        };\n\n        extend(DrawableCollection.prototype, Drawable.prototype, {\n            /**\n     * Unpack and add drawables to the collection.\n     */\n            unpack_drawables: function(drawables_array) {\n                // Add drawables to collection.\n                this.drawables = [];\n                var drawable;\n                for (var i = 0; i < drawables_array.length; i++) {\n                    drawable = object_from_template(\n                        drawables_array[i],\n                        this.view,\n                        this\n                    );\n                    this.add_drawable(drawable);\n                }\n            },\n\n            /**\n     * Init each drawable in the collection.\n     */\n            init: function() {\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i].init();\n                }\n            },\n\n            /**\n     * Draw each drawable in the collection.\n     */\n            _draw: function(options) {\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i]._draw(options);\n                }\n            },\n\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: function() {\n                var dictified_drawables = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    dictified_drawables.push(this.drawables[i].to_dict());\n                }\n                return {\n                    prefs: this.config.to_key_value_dict(),\n                    obj_type: this.obj_type,\n                    drawables: dictified_drawables\n                };\n            },\n\n            /**\n     * Add a drawable to the end of the collection.\n     */\n            add_drawable: function(drawable) {\n                this.drawables.push(drawable);\n                drawable.container = this;\n                this.changed();\n            },\n\n            /**\n     * Add a drawable before another drawable.\n     */\n            add_drawable_before: function(drawable, other) {\n                this.changed();\n                var index = this.drawables.indexOf(other);\n                if (index !== -1) {\n                    this.drawables.splice(index, 0, drawable);\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n     * Replace one drawable with another.\n     */\n            replace_drawable: function(\n                old_drawable,\n                new_drawable,\n                update_html\n            ) {\n                var index = this.drawables.indexOf(old_drawable);\n                if (index !== -1) {\n                    this.drawables[index] = new_drawable;\n                    if (update_html) {\n                        old_drawable.container_div.replaceWith(\n                            new_drawable.container_div\n                        );\n                    }\n                    this.changed();\n                }\n                return index;\n            },\n\n            /**\n     * Remove drawable from this collection.\n     */\n            remove_drawable: function(drawable) {\n                var index = this.drawables.indexOf(drawable);\n                if (index !== -1) {\n                    // Found drawable to remove.\n                    this.drawables.splice(index, 1);\n                    drawable.container = null;\n                    this.changed();\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n     * Move drawable to another location in collection.\n     */\n            move_drawable: function(drawable, new_position) {\n                var index = this.drawables.indexOf(drawable);\n                if (index !== -1) {\n                    // Remove from current position:\n                    this.drawables.splice(index, 1);\n                    // insert into new position:\n                    this.drawables.splice(new_position, 0, drawable);\n                    this.changed();\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n     * Returns all drawables in this drawable.\n     */\n            get_drawables: function() {\n                return this.drawables;\n            },\n\n            /**\n     * Returns all <track_type> tracks in collection.\n     */\n            get_tracks: function(track_type) {\n                // Initialize queue with copy of drawables array.\n                var queue = this.drawables.slice(0),\n                    tracks = [],\n                    drawable;\n                while (queue.length !== 0) {\n                    drawable = queue.shift();\n                    if (drawable instanceof track_type) {\n                        tracks.push(drawable);\n                    } else if (drawable.drawables) {\n                        queue = queue.concat(drawable.drawables);\n                    }\n                }\n                return tracks;\n            }\n        });\n\n        /**\n * A group of drawables that are moveable, visible.\n */\n        var DrawableGroup = function(view, container, obj_dict) {\n            extend(obj_dict, {\n                obj_type: \"DrawableGroup\",\n                drag_handle_class: \"group-handle\"\n            });\n            DrawableCollection.call(this, view, container, obj_dict);\n\n            // Set up containers/moving for group: register both container_div and content div as container\n            // because both are used as containers (container div to recognize container, content_div to\n            // store elements). Group can be moved.\n            this.content_div = $(\"<div/>\")\n                .addClass(\"content-div\")\n                .attr(\"id\", \"group_\" + this.id + \"_content_div\")\n                .appendTo(this.container_div);\n            is_container(this.container_div, this);\n            is_container(this.content_div, this);\n            moveable(\n                this.container_div,\n                this.drag_handle_class,\n                \".group\",\n                this\n            );\n\n            // Set up filters.\n            this.filters_manager = new filters_mod.FiltersManager(this);\n            this.header_div.after(this.filters_manager.parent_div);\n\n            // HACK: add div to clear floating elements.\n            this.filters_manager.parent_div.after(\n                $(\"<div style='clear: both'/>\")\n            );\n\n            // For saving drawables' filter managers when group-level filtering is done:\n            this.saved_filters_managers = [];\n\n            // Add drawables.\n            if (\"drawables\" in obj_dict) {\n                this.unpack_drawables(obj_dict.drawables);\n            }\n\n            // Restore filters.\n            if (\"filters\" in obj_dict) {\n                // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n                var old_manager = this.filters_manager;\n                this.filters_manager = new filters_mod.FiltersManager(\n                    this,\n                    obj_dict.filters\n                );\n                old_manager.parent_div.replaceWith(\n                    this.filters_manager.parent_div\n                );\n\n                if (obj_dict.filters.visible) {\n                    this.setup_multitrack_filtering();\n                }\n            }\n        };\n\n        extend(\n            DrawableGroup.prototype,\n            Drawable.prototype,\n            DrawableCollection.prototype,\n            {\n                action_icons_def: [\n                    Drawable.prototype.action_icons_def[0],\n                    Drawable.prototype.action_icons_def[1],\n                    // Replace group with composite track.\n                    {\n                        name: \"composite_icon\",\n                        title: \"Show composite track\",\n                        css_class: \"layers-stack\",\n                        on_click_fn: function(group) {\n                            $(\".tooltip\").remove();\n                            group.show_composite_track();\n                        }\n                    },\n                    // Toggle track filters.\n                    {\n                        name: \"filters_icon\",\n                        title: \"Filters\",\n                        css_class: \"ui-slider-050\",\n                        on_click_fn: function(group) {\n                            // TODO: update Tooltip text.\n                            if (group.filters_manager.visible()) {\n                                // Hiding filters.\n                                group.filters_manager.clear_filters();\n                                group._restore_filter_managers();\n                                // TODO: maintain current filter by restoring and setting saved manager's\n                                // settings to current/shared manager's settings.\n                                // TODO: need to restore filter managers when moving drawable outside group.\n                            } else {\n                                // Showing filters.\n                                group.setup_multitrack_filtering();\n                                group.request_draw({ clear_tile_cache: true });\n                            }\n                            group.filters_manager.toggle();\n                        }\n                    },\n                    Drawable.prototype.action_icons_def[2]\n                ],\n\n                build_container_div: function() {\n                    var container_div = $(\"<div/>\")\n                        .addClass(\"group\")\n                        .attr(\"id\", \"group_\" + this.id);\n                    if (this.container) {\n                        this.container.content_div.append(container_div);\n                    }\n                    return container_div;\n                },\n\n                hide_contents: function() {\n                    this.tiles_div.hide();\n                },\n\n                show_contents: function() {\n                    // Show the contents div and labels (if present)\n                    this.tiles_div.show();\n                    // Request a redraw of the content\n                    this.request_draw();\n                },\n\n                update_icons: function() {\n                    //\n                    // Handle update when there are no tracks.\n                    //\n                    var num_drawables = this.drawables.length;\n                    if (num_drawables === 0) {\n                        this.action_icons.composite_icon.hide();\n                        this.action_icons.filters_icon.hide();\n                    } else if (num_drawables === 1) {\n                        this.action_icons.composite_icon.toggle(\n                            this.drawables[0] instanceof CompositeTrack\n                        );\n                        this.action_icons.filters_icon.hide();\n                    } else {\n                        // There are 2 or more tracks.\n\n                        //\n                        // Determine if a composite track can be created. Current criteria:\n                        // (a) all tracks are line tracks;\n                        //      OR\n                        // FIXME: this is not enabled right now because it has not been well tested:\n                        // (b) there is a single FeatureTrack.\n                        //\n\n                        // All tracks the same?\n                        var i,\n                            j,\n                            drawable,\n                            same_type = true,\n                            a_type = this.drawables[0].get_type(),\n                            num_feature_tracks = 0;\n                        for (i = 0; i < num_drawables; i++) {\n                            drawable = this.drawables[i];\n                            if (drawable.get_type() !== a_type) {\n                                can_composite = false;\n                                break;\n                            }\n                            if (drawable instanceof FeatureTrack) {\n                                num_feature_tracks++;\n                            }\n                        }\n\n                        if (\n                            same_type &&\n                            this.drawables[0] instanceof LineTrack\n                        ) {\n                            this.action_icons.composite_icon.show();\n                        } else {\n                            this.action_icons.composite_icon.hide();\n                            $(\".tooltip\").remove();\n                        }\n\n                        //\n                        // Set up group-level filtering and update filter icon.\n                        //\n                        if (\n                            num_feature_tracks > 1 &&\n                            num_feature_tracks === this.drawables.length\n                        ) {\n                            //\n                            // Find shared filters.\n                            //\n                            var shared_filters = {},\n                                filter;\n\n                            // Init shared filters with filters from first drawable.\n                            drawable = this.drawables[0];\n                            for (\n                                j = 0;\n                                j < drawable.filters_manager.filters.length;\n                                j++\n                            ) {\n                                filter = drawable.filters_manager.filters[j];\n                                shared_filters[filter.name] = [filter];\n                            }\n\n                            // Create lists of shared filters.\n                            for (i = 1; i < this.drawables.length; i++) {\n                                drawable = this.drawables[i];\n                                for (\n                                    j = 0;\n                                    j < drawable.filters_manager.filters.length;\n                                    j++\n                                ) {\n                                    filter =\n                                        drawable.filters_manager.filters[j];\n                                    if (filter.name in shared_filters) {\n                                        shared_filters[filter.name].push(\n                                            filter\n                                        );\n                                    }\n                                }\n                            }\n\n                            //\n                            // Create filters for shared filters manager. Shared filters manager is group's\n                            // manager.\n                            //\n                            this.filters_manager.remove_all();\n                            var filters, new_filter, min, max;\n                            for (var filter_name in shared_filters) {\n                                filters = shared_filters[filter_name];\n                                if (filters.length === num_feature_tracks) {\n                                    // Add new filter.\n                                    // FIXME: can filter.copy() be used?\n                                    new_filter = new filters_mod.NumberFilter({\n                                        name: filters[0].name,\n                                        index: filters[0].index\n                                    });\n                                    this.filters_manager.add_filter(new_filter);\n                                }\n                            }\n\n                            // Show/hide icon based on filter availability.\n                            this.action_icons.filters_icon.toggle(\n                                this.filters_manager.filters.length > 0\n                            );\n                        } else {\n                            this.action_icons.filters_icon.hide();\n                        }\n                    }\n                },\n\n                /**\n     * Restore individual track filter managers.\n     */\n                _restore_filter_managers: function() {\n                    for (var i = 0; i < this.drawables.length; i++) {\n                        this.drawables[\n                            i\n                        ].filters_manager = this.saved_filters_managers[i];\n                    }\n                    this.saved_filters_managers = [];\n                },\n\n                /**\n     *\n     */\n                setup_multitrack_filtering: function() {\n                    // Save tracks' managers and set up shared manager.\n                    if (this.filters_manager.filters.length > 0) {\n                        // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n                        this.saved_filters_managers = [];\n                        for (var i = 0; i < this.drawables.length; i++) {\n                            var drawable = this.drawables[i];\n                            this.saved_filters_managers.push(\n                                drawable.filters_manager\n                            );\n                            drawable.filters_manager = this.filters_manager;\n                        }\n\n                        //TODO: hide filters icons for each drawable?\n                    }\n                    this.filters_manager.init_filters();\n                },\n\n                /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n                show_composite_track: function() {\n                    var composite_track = new CompositeTrack(\n                        this.view,\n                        this.view,\n                        {\n                            name: this.config.get_value(\"name\"),\n                            drawables: this.drawables\n                        }\n                    );\n                    var index = this.container.replace_drawable(\n                        this,\n                        composite_track,\n                        true\n                    );\n                    composite_track.request_draw();\n                },\n\n                add_drawable: function(drawable) {\n                    DrawableCollection.prototype.add_drawable.call(\n                        this,\n                        drawable\n                    );\n                    this.update_icons();\n                },\n\n                remove_drawable: function(drawable) {\n                    DrawableCollection.prototype.remove_drawable.call(\n                        this,\n                        drawable\n                    );\n                    this.update_icons();\n                },\n\n                to_dict: function() {\n                    // If filters are visible, need to restore original filter managers before converting to dict.\n                    if (this.filters_manager.visible()) {\n                        this._restore_filter_managers();\n                    }\n\n                    var obj_dict = extend(\n                        DrawableCollection.prototype.to_dict.call(this),\n                        { filters: this.filters_manager.to_dict() }\n                    );\n\n                    // Setup multi-track filtering again.\n                    if (this.filters_manager.visible()) {\n                        this.setup_multitrack_filtering();\n                    }\n\n                    return obj_dict;\n                },\n\n                request_draw: function(options) {\n                    _.each(this.drawables, function(d) {\n                        d.request_draw(options);\n                    });\n                }\n            }\n        );\n\n        /**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\n        var TracksterView = Backbone.View.extend({\n            initialize: function(obj_dict) {\n                extend(obj_dict, {\n                    obj_type: \"View\"\n                });\n                DrawableCollection.call(\n                    this,\n                    \"View\",\n                    obj_dict.container,\n                    obj_dict\n                );\n                this.chrom = null;\n                this.vis_id = obj_dict.vis_id;\n                this.dbkey = obj_dict.dbkey;\n                this.stand_alone =\n                    obj_dict.stand_alone !== undefined\n                        ? obj_dict.stand_alone\n                        : true;\n                this.label_tracks = [];\n                this.tracks_to_be_redrawn = [];\n                this.max_low = 0;\n                this.max_high = 0;\n                this.zoom_factor = 3;\n                this.min_separation = 30;\n                this.has_changes = false;\n                // Deferred object that indicates when view's chrom data has been loaded.\n                this.load_chroms_deferred = null;\n                this.render();\n                this.canvas_manager = new visualization.CanvasManager(\n                    this.container.get(0).ownerDocument\n                );\n                this.reset();\n\n                // Define track configuration\n                this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n                    [\n                        {\n                            key: \"name\",\n                            label: \"Name\",\n                            type: \"text\",\n                            default_value: \"\"\n                        },\n                        {\n                            key: \"a_color\",\n                            label: \"A Color\",\n                            type: \"color\",\n                            default_value: \"#FF0000\"\n                        },\n                        {\n                            key: \"c_color\",\n                            label: \"C Color\",\n                            type: \"color\",\n                            default_value: \"#00FF00\"\n                        },\n                        {\n                            key: \"g_color\",\n                            label: \"G Color\",\n                            type: \"color\",\n                            default_value: \"#0000FF\"\n                        },\n                        {\n                            key: \"t_color\",\n                            label: \"T Color\",\n                            type: \"color\",\n                            default_value: \"#FF00FF\"\n                        },\n                        {\n                            key: \"n_color\",\n                            label: \"N Color\",\n                            type: \"color\",\n                            default_value: \"#AAAAAA\"\n                        }\n                    ],\n                    { name: obj_dict.name }\n                );\n            },\n\n            render: function() {\n                // Attribute init.\n                this.requested_redraw = false;\n\n                // Create DOM elements\n                var parent_element = this.container,\n                    view = this;\n                // Top container for things that are fixed at the top\n                this.top_container = $(\"<div/>\")\n                    .addClass(\"top-container\")\n                    .appendTo(parent_element);\n                // Browser content, primary tracks are contained in here\n                this.browser_content_div = $(\"<div/>\")\n                    .addClass(\"content\")\n                    .appendTo(parent_element);\n                // Bottom container for things that are fixed at the bottom\n                this.bottom_container = $(\"<div/>\")\n                    .addClass(\"bottom-container\")\n                    .appendTo(parent_element);\n                // Label track fixed at top\n                this.top_labeltrack = $(\"<div/>\")\n                    .addClass(\"top-labeltrack\")\n                    .appendTo(this.top_container);\n                // Viewport for dragging tracks in center\n                this.viewport_container = $(\"<div/>\")\n                    .addClass(\"viewport-container\")\n                    .attr(\"id\", \"viewport-container\")\n                    .appendTo(this.browser_content_div);\n                // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n                this.content_div = this.viewport_container;\n                is_container(this.viewport_container, view);\n                // Introduction div shown when there are no tracks.\n                this.intro_div = $(\"<div/>\")\n                    .addClass(\"intro\")\n                    .appendTo(this.viewport_container);\n                var add_tracks_button = $(\"<div/>\")\n                    .text(\"Add Datasets to Visualization\")\n                    .addClass(\"action-button\")\n                    .appendTo(this.intro_div)\n                    .click(function() {\n                        visualization.select_datasets(\n                            { dbkey: view.dbkey },\n                            function(tracks) {\n                                _.each(tracks, function(track) {\n                                    view.add_drawable(\n                                        object_from_template(track, view, view)\n                                    );\n                                });\n                            }\n                        );\n                    });\n\n                // Navigation at top\n                this.nav_container = $(\"<div/>\")\n                    .addClass(\"trackster-nav-container\")\n                    .prependTo(this.top_container);\n                this.nav = $(\"<div/>\")\n                    .addClass(\"trackster-nav\")\n                    .appendTo(this.nav_container);\n\n                if (this.stand_alone) {\n                    this.nav_container.addClass(\"stand-alone\");\n                    this.nav.addClass(\"stand-alone\");\n                }\n\n                // Overview (scrollbar and overview plot) at bottom\n                this.overview = $(\"<div/>\")\n                    .addClass(\"overview\")\n                    .appendTo(this.bottom_container);\n                this.overview_viewport = $(\"<div/>\")\n                    .addClass(\"overview-viewport\")\n                    .appendTo(this.overview);\n                this.overview_close = $(\"<a/>\")\n                    .attr(\"title\", \"Close overview\")\n                    .addClass(\"icon-button overview-close tooltip\")\n                    .hide()\n                    .appendTo(this.overview_viewport);\n                this.overview_highlight = $(\"<div/>\")\n                    .addClass(\"overview-highlight\")\n                    .hide()\n                    .appendTo(this.overview_viewport);\n                this.overview_box_background = $(\"<div/>\")\n                    .addClass(\"overview-boxback\")\n                    .appendTo(this.overview_viewport);\n                this.overview_box = $(\"<div/>\")\n                    .addClass(\"overview-box\")\n                    .appendTo(this.overview_viewport);\n                this.default_overview_height = this.overview_box.height();\n\n                this.nav_controls = $(\"<div/>\")\n                    .addClass(\"nav-controls\")\n                    .appendTo(this.nav);\n                this.chrom_select = $(\"<select/>\")\n                    .attr({ name: \"chrom\" })\n                    .addClass(\"chrom-nav\")\n                    .append(\"<option value=''>Loading</option>\")\n                    .appendTo(this.nav_controls);\n                var submit_nav = function(e) {\n                    if (\n                        e.type === \"focusout\" ||\n                        (e.keyCode || e.which) === 13 ||\n                        (e.keyCode || e.which) === 27\n                    ) {\n                        if ((e.keyCode || e.which) !== 27) {\n                            // Not escape key\n                            view.go_to($(this).val());\n                        }\n                        $(this).hide();\n                        $(this).val(\"\");\n                        view.location_span.show();\n                        view.chrom_select.show();\n                    }\n\n                    // Suppress key presses so that they do impact viz.\n                    e.stopPropagation();\n                };\n                this.nav_input = $(\"<input/>\")\n                    .addClass(\"nav-input\")\n                    .hide()\n                    .bind(\"keyup focusout\", submit_nav)\n                    .appendTo(this.nav_controls);\n                this.location_span = $(\"<span/>\")\n                    .addClass(\"location\")\n                    .attr(\"title\", \"Click to change location\")\n                    .tooltip({ placement: \"bottom\" })\n                    .appendTo(this.nav_controls);\n                this.location_span.click(function() {\n                    view.location_span.hide();\n                    view.chrom_select.hide();\n                    view.nav_input.val(\n                        view.chrom + \":\" + view.low + \"-\" + view.high\n                    );\n                    view.nav_input.css(\"display\", \"inline-block\");\n                    view.nav_input.select();\n                    view.nav_input.focus();\n                    // Set up autocomplete for tracks' features.\n                    view.nav_input.autocomplete({\n                        source: function(request, response) {\n                            // Using current text, query each track and create list of all matching features.\n                            var all_features = [],\n                                feature_search_deferreds = $.map(\n                                    view.get_tracks(FeatureTrack),\n                                    function(t) {\n                                        return t.data_manager\n                                            .search_features(request.term)\n                                            .success(function(\n                                                dataset_features\n                                            ) {\n                                                all_features = all_features.concat(\n                                                    dataset_features\n                                                );\n                                            });\n                                    }\n                                );\n\n                            // When all searching is done, fill autocomplete.\n                            $.when\n                                .apply($, feature_search_deferreds)\n                                .done(function() {\n                                    response(\n                                        $.map(all_features, function(feature) {\n                                            return {\n                                                label: feature[0],\n                                                value: feature[1]\n                                            };\n                                        })\n                                    );\n                                });\n                        },\n                        minLength: 2\n                    });\n                });\n                if (this.vis_id !== undefined) {\n                    this.hidden_input = $(\"<input/>\")\n                        .attr(\"type\", \"hidden\")\n                        .val(this.vis_id)\n                        .appendTo(this.nav_controls);\n                }\n\n                this.zo_link = $(\"<a/>\")\n                    .attr(\"id\", \"zoom-out\")\n                    .attr(\"title\", \"Zoom out\")\n                    .tooltip({ placement: \"bottom\" })\n                    .click(function() {\n                        view.zoom_out();\n                    })\n                    .appendTo(this.nav_controls);\n                this.zi_link = $(\"<a/>\")\n                    .attr(\"id\", \"zoom-in\")\n                    .attr(\"title\", \"Zoom in\")\n                    .tooltip({ placement: \"bottom\" })\n                    .click(function() {\n                        view.zoom_in();\n                    })\n                    .appendTo(this.nav_controls);\n\n                // Get initial set of chroms.\n                this.load_chroms_deferred = this.load_chroms({ low: 0 });\n                this.chrom_select.bind(\"change\", function() {\n                    view.change_chrom(view.chrom_select.val());\n                });\n\n                /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n                // Blur tool/filter inputs when user clicks on content div.\n                this.browser_content_div.click(function(e) {\n                    $(this)\n                        .find(\"input\")\n                        .trigger(\"blur\");\n                });\n\n                // Double clicking zooms in\n                this.browser_content_div.bind(\"dblclick\", function(e) {\n                    view.zoom_in(e.pageX, this.viewport_container);\n                });\n\n                // Dragging the overview box (~ horizontal scroll bar)\n                this.overview_box\n                    .bind(\"dragstart\", function(e, d) {\n                        this.current_x = d.offsetX;\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        var delta = d.offsetX - this.current_x;\n                        this.current_x = d.offsetX;\n                        var delta_chrom = Math.round(\n                            delta /\n                                view.viewport_container.width() *\n                                (view.max_high - view.max_low)\n                        );\n                        view.move_delta(-delta_chrom);\n                    });\n\n                this.overview_close.click(function() {\n                    view.reset_overview();\n                });\n\n                // Dragging in the viewport scrolls\n                this.viewport_container\n                    .bind(\"draginit\", function(e, d) {\n                        // Disable interaction if started in scrollbar (for webkit)\n                        if (e.clientX > view.viewport_container.width() - 16) {\n                            return false;\n                        }\n                    })\n                    .bind(\"dragstart\", function(e, d) {\n                        d.original_low = view.low;\n                        d.current_height = e.clientY;\n                        d.current_x = d.offsetX;\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        var container = $(this);\n                        var delta = d.offsetX - d.current_x;\n                        var new_scroll =\n                            container.scrollTop() -\n                            (e.clientY - d.current_height);\n                        container.scrollTop(new_scroll);\n                        d.current_height = e.clientY;\n                        d.current_x = d.offsetX;\n                        var delta_chrom = Math.round(\n                            delta /\n                                view.viewport_container.width() *\n                                (view.high - view.low)\n                        );\n                        view.move_delta(delta_chrom);\n                    });\n                /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n                // Dragging in the top label track allows selecting a region to zoom in on selected region.\n                this.top_labeltrack\n                    .bind(\"dragstart\", function(e, d) {\n                        return $(\"<div/>\")\n                            .addClass(\"zoom-area\")\n                            .css(\n                                \"height\",\n                                view.browser_content_div.height() +\n                                    view.top_labeltrack.height() +\n                                    1\n                            )\n                            .appendTo($(this));\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        $(d.proxy).css({\n                            left:\n                                Math.min(e.pageX, d.startX) -\n                                view.container.offset().left,\n                            width: Math.abs(e.pageX - d.startX)\n                        });\n                        var min =\n                                Math.min(e.pageX, d.startX) -\n                                view.container.offset().left,\n                            max =\n                                Math.max(e.pageX, d.startX) -\n                                view.container.offset().left,\n                            span = view.high - view.low,\n                            width = view.viewport_container.width();\n                        view.update_location(\n                            Math.round(min / width * span) + view.low,\n                            Math.round(max / width * span) + view.low\n                        );\n                    })\n                    .bind(\"dragend\", function(e, d) {\n                        var min = Math.min(e.pageX, d.startX),\n                            max = Math.max(e.pageX, d.startX),\n                            span = view.high - view.low,\n                            width = view.viewport_container.width(),\n                            old_low = view.low;\n                        view.low = Math.round(min / width * span) + old_low;\n                        view.high = Math.round(max / width * span) + old_low;\n                        $(d.proxy).remove();\n                        view.request_redraw();\n                    });\n\n                // FIXME: this is still wonky for embedded visualizations.\n                /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n                this.add_label_track(\n                    new LabelTrack(this, { content_div: this.top_labeltrack })\n                );\n\n                $(window).bind(\"resize\", function() {\n                    // Stop previous timer.\n                    if (this.resize_timer) {\n                        clearTimeout(this.resize_timer);\n                    }\n\n                    // When function activated, resize window and redraw.\n                    this.resize_timer = setTimeout(function() {\n                        view.resize_window();\n                    }, 500);\n                });\n                $(document).bind(\"redraw\", function() {\n                    view.redraw();\n                });\n\n                this.reset();\n                $(window).trigger(\"resize\");\n            },\n\n            get_base_color: function(base) {\n                return (\n                    this.config.get_value(base.toLowerCase() + \"_color\") ||\n                    this.config.get_value(\"n_color\")\n                );\n            }\n        });\n\n        // FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\n        extend(TracksterView.prototype, DrawableCollection.prototype, {\n            changed: function() {\n                this.has_changes = true;\n            },\n\n            /** Add or remove intro div depending on view state. */\n            update_intro_div: function() {\n                this.intro_div.toggle(this.drawables.length === 0);\n            },\n\n            /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n            trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n                // Stop previous timer.\n                if (this.timer) {\n                    clearTimeout(this.timer);\n                }\n\n                if (delay) {\n                    // To aggregate calls, use timer and only navigate once\n                    // location has stabilized.\n                    var self = this;\n                    this.timer = setTimeout(function() {\n                        self.trigger(\n                            \"navigate\",\n                            new_chrom + \":\" + new_low + \"-\" + new_high\n                        );\n                    }, 500);\n                } else {\n                    view.trigger(\n                        \"navigate\",\n                        new_chrom + \":\" + new_low + \"-\" + new_high\n                    );\n                }\n            },\n\n            update_location: function(low, high) {\n                this.location_span.text(\n                    util.commatize(low) + \" - \" + util.commatize(high)\n                );\n                this.nav_input.val(\n                    this.chrom +\n                        \":\" +\n                        util.commatize(low) +\n                        \"-\" +\n                        util.commatize(high)\n                );\n\n                // Update location. Only update when there is a valid chrom; when loading vis, there may\n                // not be a valid chrom.\n                var chrom = this.chrom_select.val();\n                if (chrom !== \"\") {\n                    this.trigger_navigate(chrom, this.low, this.high, true);\n                }\n            },\n\n            /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n            // FIXME: instead of loading chrom data, should load and store genome object.\n            load_chroms: function(url_parms) {\n                url_parms.num = MAX_CHROMS_SELECTABLE;\n\n                var view = this,\n                    chrom_data = $.Deferred();\n                $.ajax({\n                    url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n                    data: url_parms,\n                    dataType: \"json\",\n                    success: function(result) {\n                        // Do nothing if could not load chroms.\n                        if (result.chrom_info.length === 0) {\n                            return;\n                        }\n\n                        // Load chroms.\n                        if (result.reference) {\n                            var ref_track = new ReferenceTrack(view);\n                            view.add_label_track(ref_track);\n                            view.reference_track = ref_track;\n                        }\n                        view.chrom_data = result.chrom_info;\n\n                        view.chrom_select.html(\"\");\n                        view.chrom_select.append(\n                            $('<option value=\"\">Select Chrom/Contig</option>')\n                        );\n\n                        for (\n                            var i = 0, len = view.chrom_data.length;\n                            i < len;\n                            i++\n                        ) {\n                            var chrom = view.chrom_data[i].chrom;\n                            var chrom_option = $(\"<option>\");\n                            chrom_option.text(chrom);\n                            chrom_option.val(chrom);\n                            view.chrom_select.append(chrom_option);\n                        }\n                        if (result.prev_chroms) {\n                            view.chrom_select.append(\n                                $(\n                                    '<option value=\"previous\">Previous ' +\n                                        MAX_CHROMS_SELECTABLE +\n                                        \"</option>\"\n                                )\n                            );\n                        }\n                        if (result.next_chroms) {\n                            view.chrom_select.append(\n                                $(\n                                    '<option value=\"next\">Next ' +\n                                        MAX_CHROMS_SELECTABLE +\n                                        \"</option>\"\n                                )\n                            );\n                        }\n                        view.chrom_start_index = result.start_index;\n\n                        chrom_data.resolve(result.chrom_info);\n                    },\n                    error: function() {\n                        alert(\n                            \"Could not load chroms for this dbkey: \" +\n                                view.dbkey\n                        );\n                    }\n                });\n                return chrom_data;\n            },\n\n            change_chrom: function(chrom, low, high) {\n                var view = this;\n                // If chrom data is still loading, wait for it.\n                if (!view.chrom_data) {\n                    view.load_chroms_deferred.then(function() {\n                        view.change_chrom(chrom, low, high);\n                    });\n                    return;\n                }\n\n                // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n                if (!chrom || chrom === \"None\") {\n                    return;\n                }\n\n                //\n                // If user is navigating to previous/next set of chroms, load new chrom set and return.\n                //\n                if (chrom === \"previous\") {\n                    view.load_chroms({\n                        low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n                    });\n                    return;\n                }\n                if (chrom === \"next\") {\n                    view.load_chroms({\n                        low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n                    });\n                    return;\n                }\n\n                //\n                // User is loading a particular chrom. Look first in current set; if not in current set, load new\n                // chrom set.\n                //\n                var found = $.grep(view.chrom_data, function(v, i) {\n                    return v.chrom === chrom;\n                })[0];\n                if (found === undefined) {\n                    // Try to load chrom and then change to chrom.\n                    view.load_chroms({ chrom: chrom }, function() {\n                        view.change_chrom(chrom, low, high);\n                    });\n                    return;\n                } else {\n                    // Switching to local chrom.\n                    if (chrom !== view.chrom) {\n                        view.chrom = chrom;\n                        view.chrom_select.val(view.chrom);\n                        view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                        view.reset();\n\n                        for (\n                            var i = 0, len = view.drawables.length;\n                            i < len;\n                            i++\n                        ) {\n                            var drawable = view.drawables[i];\n                            if (drawable.init) {\n                                drawable.init();\n                            }\n                        }\n                        if (view.reference_track) {\n                            view.reference_track.init();\n                        }\n                    }\n\n                    // Resolve low, high.\n                    if (low === undefined && high === undefined) {\n                        // Both are undefined, so view is whole chromosome.\n                        view.low = 0;\n                        view.high = view.max_high;\n                    } else {\n                        // Low and/or high is defined.\n                        view.low = low !== undefined ? Math.max(low, 0) : 0;\n                        if (high === undefined) {\n                            // Center visualization around low.\n                            // HACK: max resolution is currently 30 bases.\n                            view.low = Math.max(view.low - 15, 0);\n                            view.high = view.low + 30;\n                        } else {\n                            // High is defined.\n                            view.high = Math.min(high, view.max_high);\n                        }\n                    }\n\n                    view.request_redraw();\n                }\n            },\n\n            /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n            go_to: function(str) {\n                // Remove commas.\n                str = str.replace(/,/g, \"\");\n\n                // Replace colons and hyphens with space for easy parsing.\n                str = str.replace(/:|\\-/g, \" \");\n\n                // Parse new location.\n                var chrom_pos = str.split(/\\s+/),\n                    chrom = chrom_pos[0],\n                    new_low = chrom_pos[1]\n                        ? parseInt(chrom_pos[1], 10)\n                        : undefined,\n                    new_high = chrom_pos[2]\n                        ? parseInt(chrom_pos[2], 10)\n                        : undefined;\n\n                this.change_chrom(chrom, new_low, new_high);\n            },\n\n            move_fraction: function(fraction) {\n                var view = this;\n                var span = view.high - view.low;\n                this.move_delta(fraction * span);\n            },\n\n            move_delta: function(delta_chrom) {\n                //\n                // Update low, high.\n                //\n\n                var view = this;\n                var current_chrom_span = view.high - view.low;\n                // Check for left and right boundaries\n                if (view.low - delta_chrom < view.max_low) {\n                    view.low = view.max_low;\n                    view.high = view.max_low + current_chrom_span;\n                } else if (view.high - delta_chrom > view.max_high) {\n                    view.high = view.max_high;\n                    view.low = view.max_high - current_chrom_span;\n                } else {\n                    view.high -= delta_chrom;\n                    view.low -= delta_chrom;\n                }\n\n                //\n                // Redraw view.\n                //\n\n                // Redraw without requesting more data immediately.\n                view.request_redraw({ data_fetch: false });\n\n                // Set up timeout to redraw with more data when moving stops.\n                if (this.redraw_on_move_fn) {\n                    clearTimeout(this.redraw_on_move_fn);\n                }\n\n                this.redraw_on_move_fn = setTimeout(function() {\n                    view.request_redraw();\n                }, 200);\n\n                // Navigate.\n                var chrom = view.chrom_select.val();\n                this.trigger_navigate(chrom, view.low, view.high, true);\n            },\n\n            /**\n     * Add a drawable to the view.\n     */\n            add_drawable: function(drawable) {\n                DrawableCollection.prototype.add_drawable.call(this, drawable);\n                drawable.init();\n                this.changed();\n                this.update_intro_div();\n\n                // When drawable config changes, mark view as changed. This\n                // captures most (all?) state change that needs to be saved.\n                var self = this;\n                drawable.config.on(\"change\", function() {\n                    self.changed();\n                });\n            },\n\n            add_label_track: function(label_track) {\n                label_track.view = this;\n                label_track.init();\n                this.label_tracks.push(label_track);\n            },\n\n            /**\n     * Remove drawable from the view.\n     */\n            remove_drawable: function(drawable, hide) {\n                DrawableCollection.prototype.remove_drawable.call(\n                    this,\n                    drawable\n                );\n                if (hide) {\n                    var view = this;\n                    drawable.container_div.hide(0, function() {\n                        $(this).remove();\n                        view.update_intro_div();\n                    });\n                }\n            },\n\n            reset: function() {\n                this.low = this.max_low;\n                this.high = this.max_high;\n                this.viewport_container.find(\".yaxislabel\").remove();\n            },\n\n            /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n            request_redraw: function(options, drawable) {\n                var view = this,\n                    // Either redrawing a single drawable or all view's drawables.\n                    track_list = drawable ? [drawable] : view.drawables;\n\n                // Add/update tracks in track list to redraw list.\n                _.each(track_list, function(track) {\n                    var track_options = _.find(\n                        view.tracks_to_be_redrawn,\n                        function(to) {\n                            return to[0] === track;\n                        }\n                    );\n\n                    if (track_options) {\n                        // Track already in list; update options.\n                        track_options[1] = options;\n                    } else {\n                        // Track not in list yet.\n                        view.tracks_to_be_redrawn.push([track, options]);\n                    }\n                });\n\n                // Set up redraw if it has not been requested since last redraw.\n                if (!this.requested_redraw) {\n                    requestAnimationFrame(function() {\n                        view._redraw();\n                    });\n                    this.requested_redraw = true;\n                }\n            },\n\n            /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n            _redraw: function() {\n                // TODO: move this code to function that does location setting.\n\n                // Clear because requested redraw is being handled now.\n                this.requested_redraw = false;\n\n                var low = this.low,\n                    high = this.high;\n\n                if (low < this.max_low) {\n                    low = this.max_low;\n                }\n                if (high > this.max_high) {\n                    high = this.max_high;\n                }\n                var span = this.high - this.low;\n                if (this.high !== 0 && span < this.min_separation) {\n                    high = low + this.min_separation;\n                }\n                this.low = Math.floor(low);\n                this.high = Math.ceil(high);\n\n                this.update_location(this.low, this.high);\n\n                // -- Drawing code --\n\n                // Resolution is a pixel density.\n                this.resolution_px_b =\n                    this.viewport_container.width() / (this.high - this.low);\n\n                // Overview\n                var left_px =\n                    this.low /\n                        (this.max_high - this.max_low) *\n                        this.overview_viewport.width() || 0;\n                var width_px =\n                    (this.high - this.low) /\n                        (this.max_high - this.max_low) *\n                        this.overview_viewport.width() || 0;\n                var min_width_px = 13;\n\n                this.overview_box\n                    .css({\n                        left: left_px,\n                        width: Math.max(min_width_px, width_px)\n                    })\n                    .show();\n                if (width_px < min_width_px) {\n                    this.overview_box.css(\n                        \"left\",\n                        left_px - (min_width_px - width_px) / 2\n                    );\n                }\n                if (this.overview_highlight) {\n                    this.overview_highlight.css({\n                        left: left_px,\n                        width: width_px\n                    });\n                }\n\n                // Draw data tracks.\n                _.each(this.tracks_to_be_redrawn, function(track_options) {\n                    var track = track_options[0],\n                        options = track_options[1];\n                    if (track) {\n                        track._draw(options);\n                    }\n                });\n                this.tracks_to_be_redrawn = [];\n\n                // Draw label tracks.\n                _.each(this.label_tracks, function(label_track) {\n                    label_track._draw();\n                });\n            },\n\n            zoom_in: function(point, container) {\n                if (\n                    this.max_high === 0 ||\n                    this.high - this.low <= this.min_separation\n                ) {\n                    return;\n                }\n                var span = this.high - this.low,\n                    cur_center = span / 2 + this.low,\n                    new_half = span / this.zoom_factor / 2;\n                if (point) {\n                    cur_center =\n                        point /\n                            this.viewport_container.width() *\n                            (this.high - this.low) +\n                        this.low;\n                }\n                this.low = Math.round(cur_center - new_half);\n                this.high = Math.round(cur_center + new_half);\n\n                this.changed();\n                this.request_redraw();\n            },\n\n            zoom_out: function() {\n                if (this.max_high === 0) {\n                    return;\n                }\n                var span = this.high - this.low,\n                    cur_center = span / 2 + this.low,\n                    new_half = span * this.zoom_factor / 2;\n                this.low = Math.round(cur_center - new_half);\n                this.high = Math.round(cur_center + new_half);\n                this.changed();\n                this.request_redraw();\n            },\n\n            /** Resize viewport. Use this method if header/footer content has changed in size. */\n            resize_viewport: function() {\n                this.viewport_container.height(\n                    this.container.height() -\n                        this.top_container.height() -\n                        this.bottom_container.height()\n                );\n            },\n\n            /** Called when window is resized. */\n            resize_window: function() {\n                this.resize_viewport();\n                this.request_redraw();\n            },\n\n            /** Show a Drawable in the overview. */\n            set_overview: function(drawable) {\n                if (this.overview_drawable) {\n                    // If drawable to be set as overview is already in overview, do nothing.\n                    // Otherwise, remove overview.\n                    if (\n                        this.overview_drawable.dataset.id ===\n                        drawable.dataset.id\n                    ) {\n                        return;\n                    }\n                    this.overview_viewport.find(\".track\").remove();\n                }\n\n                // Set new overview.\n                var overview_drawable = drawable.copy({\n                        content_div: this.overview_viewport\n                    }),\n                    view = this;\n                overview_drawable.header_div.hide();\n                overview_drawable.is_overview = true;\n                view.overview_drawable = overview_drawable;\n                this.overview_drawable.postdraw_actions = function() {\n                    view.overview_highlight\n                        .show()\n                        .height(view.overview_drawable.content_div.height());\n                    view.overview_viewport.height(\n                        view.overview_drawable.content_div.height() +\n                            view.overview_box.outerHeight()\n                    );\n                    view.overview_close.show();\n                    view.resize_window();\n                };\n                view.overview_drawable.request_draw();\n                this.changed();\n            },\n\n            /** Close and reset overview. */\n            reset_overview: function() {\n                // Update UI.\n                $(\".tooltip\").remove();\n                this.overview_viewport.find(\".track-tile\").remove();\n                this.overview_viewport.height(this.default_overview_height);\n                this.overview_box.height(this.default_overview_height);\n                this.overview_close.hide();\n                this.overview_highlight.hide();\n                view.resize_window();\n                view.overview_drawable = null;\n            }\n        });\n\n        /**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\n        var TracksterTool = tools_mod.Tool.extend({\n            defaults: {\n                track: null\n            },\n\n            initialize: function(options) {\n                tools_mod.Tool.prototype.initialize.call(this, options);\n\n                // Restore tool visibility from state; default to hidden.\n                var hidden = true;\n                if (\n                    options.tool_state !== undefined &&\n                    options.tool_state.hidden !== undefined\n                ) {\n                    hidden = options.tool_state.hidden;\n                }\n                this.set(\"hidden\", hidden);\n\n                // FIXME: need to restore tool values from options.tool_state\n\n                // HACK: remove some inputs because Trackster does yet not work with them.\n                this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n            },\n\n            state_dict: function(options) {\n                return _.extend(this.get_inputs_dict(), {\n                    hidden: !this.is_visible()\n                });\n            }\n        });\n\n        /**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\n        var ToolParameterView = Backbone.View.extend({\n            events: {\n                \"change :input\": \"update_value\"\n            },\n\n            render: function() {\n                var param_div = this.$el.addClass(\"param-row\"),\n                    param = this.model;\n\n                // Param label.\n                var label_div = $(\"<div>\")\n                    .addClass(\"param-label\")\n                    .text(param.get(\"label\"))\n                    .appendTo(param_div);\n                // Param HTML.\n                var html_div = $(\"<div/>\")\n                    .addClass(\"param-input\")\n                    .html(param.get(\"html\"))\n                    .appendTo(param_div);\n                // Set initial value.\n                html_div.find(\":input\").val(param.get(\"value\"));\n\n                // Add to clear floating layout.\n                $(\"<div style='clear: both;'/>\").appendTo(param_div);\n            },\n\n            update_value: function(update_event) {\n                this.model.set_value($(update_event.target).val());\n            }\n        });\n\n        /**\n * View for TracksterTool.\n */\n        var TracksterToolView = Backbone.View.extend({\n            initialize: function(options) {\n                this.model.on(\"change:hidden\", this.set_visible, this);\n            },\n\n            /**\n     * Render tool UI.\n     */\n            render: function() {\n                var self = this,\n                    tool = this.model,\n                    parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n                // Prevent div events from propogating to other elements.\n                parent_div\n                    .bind(\"drag\", function(e) {\n                        e.stopPropagation();\n                    })\n                    .click(function(e) {\n                        e.stopPropagation();\n                    })\n                    .bind(\"dblclick\", function(e) {\n                        e.stopPropagation();\n                    })\n                    .keydown(function(e) {\n                        e.stopPropagation();\n                    });\n\n                // Add name, inputs.\n                var name_div = $(\"<div class='tool-name'>\")\n                    .appendTo(parent_div)\n                    .text(tool.get(\"name\"));\n                tool.get(\"inputs\").each(function(param) {\n                    // Render parameter.\n                    var param_view = new ToolParameterView({ model: param });\n                    param_view.render();\n                    parent_div.append(param_view.$el);\n                });\n\n                // Highlight value for inputs for easy replacement.\n                parent_div.find(\"input\").click(function() {\n                    $(this).select();\n                });\n\n                // Add buttons for running on dataset, region.\n                var run_tool_row = $(\"<div>\")\n                    .addClass(\"param-row\")\n                    .appendTo(parent_div);\n                var run_on_dataset_button = $(\"<input type='submit'>\")\n                    .attr(\"value\", \"Run on complete dataset\")\n                    .appendTo(run_tool_row);\n                var run_on_region_button = $(\"<input type='submit'>\")\n                    .attr(\"value\", \"Run on visible region\")\n                    .appendTo(run_tool_row);\n                run_on_region_button.click(function() {\n                    // Run tool to create new track.\n                    self.run_on_region();\n                });\n                run_on_dataset_button.click(function() {\n                    self.run_on_dataset();\n                });\n\n                if (tool.is_visible()) {\n                    this.$el.show();\n                }\n            },\n\n            /**\n     * Show or hide tool depending on tool visibility state.\n     */\n            set_visible: function() {\n                this.$el.toggle(this.model.is_visible());\n            },\n\n            /**\n     * Update tool parameters.\n     */\n            update_params: function() {\n                for (var i = 0; i < this.params.length; i++) {\n                    this.params[i].update_value();\n                }\n            },\n\n            /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n            run_on_dataset: function() {\n                var tool = this.model;\n                this.run(\n                    // URL params.\n                    {\n                        target_dataset_id: this.model.get(\"track\").dataset.id,\n                        action: \"rerun\",\n                        tool_id: tool.id\n                    },\n                    null,\n                    // Success callback.\n                    function(track_data) {\n                        Galaxy.modal.show({\n                            title: tool.get(\"name\") + \" is Running\",\n                            body:\n                                tool.get(\"name\") +\n                                \" is running on the complete dataset. Tool outputs are in dataset's history.\",\n                            buttons: {\n                                Close: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                );\n            },\n\n            /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n            run_on_region: function() {\n                //\n                // Create track for tool's output immediately to provide user feedback.\n                //\n                var track = this.model.get(\"track\"),\n                    tool = this.model,\n                    region = new visualization.GenomeRegion({\n                        chrom: track.view.chrom,\n                        start: track.view.low,\n                        end: track.view.high\n                    }),\n                    url_params = {\n                        target_dataset_id: track.dataset.id,\n                        action: \"rerun\",\n                        tool_id: tool.id,\n                        regions: [region.toJSON()]\n                    },\n                    current_track = track,\n                    // Set name of track to include tool name, parameters, and region used.\n                    track_name =\n                        tool.get(\"name\") +\n                        current_track.tool_region_and_parameters_str(region),\n                    container;\n\n                // If track not in a group, create a group for it and add new track to group. If track\n                // already in group, add track to group.\n                if (current_track.container === view) {\n                    // Create new group.\n                    var group = new DrawableGroup(view, view, {\n                        name: track.config.get_value(\"name\")\n                    });\n\n                    // Replace track with group.\n                    var index = current_track.container.replace_drawable(\n                        current_track,\n                        group,\n                        false\n                    );\n\n                    // Update HTML.\n                    // FIXME: this is ugly way to replace a track with a group -- make this easier via\n                    // a Drawable or DrawableCollection function.\n                    group.container_div.insertBefore(\n                        current_track.view.content_div.children()[index]\n                    );\n                    group.add_drawable(current_track);\n                    current_track.container_div.appendTo(group.content_div);\n                    container = group;\n                } else {\n                    // Use current group.\n                    container = current_track.container;\n                }\n\n                // Create and init new track.\n                var new_track = new current_track.constructor(view, container, {\n                    name: track_name,\n                    hda_ldda: \"hda\"\n                });\n                new_track.init_for_tool_data();\n                new_track.change_mode(current_track.mode);\n                new_track.set_filters_manager(\n                    current_track.filters_manager.copy(new_track)\n                );\n                new_track.update_icons();\n                container.add_drawable(new_track);\n                new_track.tiles_div.text(\"Starting job.\");\n\n                // Run tool.\n                this.run(\n                    url_params,\n                    new_track,\n                    // Success callback.\n                    function(track_data) {\n                        new_track.set_dataset(new data.Dataset(track_data));\n                        new_track.tiles_div.text(\"Running job.\");\n                        new_track.init();\n                    }\n                );\n            },\n\n            /**\n     * Run tool using a set of URL params and a success callback.\n     */\n            run: function(url_params, new_track, success_callback) {\n                // Run tool.\n                url_params.inputs = this.model.get_inputs_dict();\n                var ss_deferred = new util.ServerStateDeferred({\n                    ajax_settings: {\n                        url: Galaxy.root + \"api/tools\",\n                        data: JSON.stringify(url_params),\n                        dataType: \"json\",\n                        contentType: \"application/json\",\n                        type: \"POST\"\n                    },\n                    interval: 2000,\n                    success_fn: function(response) {\n                        return response !== \"pending\";\n                    }\n                });\n\n                // Start with this status message.\n                //new_track.container_div.addClass(\"pending\");\n                //new_track.content_div.html(DATA_PENDING);\n\n                $.when(ss_deferred.go()).then(function(response) {\n                    if (response === \"no converter\") {\n                        // No converter available for input datasets, so cannot run tool.\n                        new_track.container_div.addClass(\"error\");\n                        new_track.content_div.text(DATA_NOCONVERTER);\n                    } else if (response.error) {\n                        // General error.\n                        new_track.container_div.addClass(\"error\");\n                        new_track.content_div.text(\n                            DATA_CANNOT_RUN_TOOL + response.message\n                        );\n                    } else {\n                        // Job submitted and running.\n                        success_callback(response);\n                    }\n                });\n            }\n        });\n\n        /**\n * Generates scale values based on filter and feature's value for filter.\n */\n        var FilterScaler = function(filter, default_val) {\n            painters.Scaler.call(this, default_val);\n            this.filter = filter;\n        };\n\n        FilterScaler.prototype.gen_val = function(feature_data) {\n            // If filter is not initalized yet, return default val.\n            if (\n                this.filter.high === Number.MAX_VALUE ||\n                this.filter.low === -Number.MAX_VALUE ||\n                this.filter.low === this.filter.high\n            ) {\n                return this.default_val;\n            }\n\n            // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n            return (\n                (parseFloat(feature_data[this.filter.index]) -\n                    this.filter.low) /\n                (this.filter.high - this.filter.low)\n            );\n        };\n\n        /**\n * Tiles drawn by tracks.\n */\n        var Tile = function(track, region, w_scale, canvas, data) {\n            this.track = track;\n            this.region = region;\n            this.low = region.get(\"start\");\n            this.high = region.get(\"end\");\n            this.w_scale = w_scale;\n            this.canvas = canvas;\n            // Wrap element in div for background and to provide container for tile-specific elements.\n            this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n            this.data = data;\n            this.stale = false;\n        };\n\n        /**\n * Perform pre-display actions.\n */\n        Tile.prototype.predisplay_actions = function() {};\n\n        var LineTrackTile = function(track, region, w_scale, canvas, data) {\n            Tile.call(this, track, region, w_scale, canvas, data);\n        };\n        LineTrackTile.prototype.predisplay_actions = function() {};\n\n        var FeatureTrackTile = function(\n            track,\n            region,\n            w_scale,\n            canvas,\n            data,\n            mode,\n            message,\n            all_slotted,\n            feature_mapper,\n            incomplete_features,\n            seq_data\n        ) {\n            // Attribute init.\n            Tile.call(this, track, region, w_scale, canvas, data);\n            this.mode = mode;\n            this.all_slotted = all_slotted;\n            this.feature_mapper = feature_mapper;\n            this.has_icons = false;\n            this.incomplete_features = incomplete_features;\n            // Features drawn based on data from other tiles.\n            this.other_tiles_features_drawn = {};\n            this.seq_data = seq_data;\n\n            // Add message + action icons to tile's html.\n            /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n        };\n        extend(FeatureTrackTile.prototype, Tile.prototype);\n\n        /**\n * Sets up support for popups.\n */\n        FeatureTrackTile.prototype.predisplay_actions = function() {\n            /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n        };\n\n        /**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\n        var Track = function(view, container, obj_dict) {\n            // For now, track's container is always view.\n            extend(obj_dict, {\n                drag_handle_class: \"draghandle\"\n            });\n            Drawable.call(this, view, container, obj_dict);\n\n            //\n            // Attribute init.\n            //\n\n            // Set or create dataset.\n            this.dataset = null;\n            if (obj_dict.dataset) {\n                // Dataset can be a Backbone model or a dict that can be used to create a model.\n                this.dataset =\n                    obj_dict.dataset instanceof Backbone.Model\n                        ? obj_dict.dataset\n                        : new data.Dataset(obj_dict.dataset);\n            }\n            this.dataset_check_type = \"converted_datasets_state\";\n            this.data_url_extra_params = {};\n            this.data_query_wait =\n                \"data_query_wait\" in obj_dict\n                    ? obj_dict.data_query_wait\n                    : DEFAULT_DATA_QUERY_WAIT;\n            // A little ugly creating data manager right now due to transition to Backbone-based objects.\n            this.data_manager =\n                \"data_manager\" in obj_dict\n                    ? obj_dict.data_manager\n                    : new visualization.GenomeDataManager({\n                          dataset: this.dataset,\n                          // HACK: simulate 'genome' attributes from view for now.\n                          // View should eventually use Genome object.\n                          genome: new visualization.Genome({\n                              key: view.dbkey,\n                              chroms_info: {\n                                  chrom_info: view.chrom_data\n                              }\n                          }),\n                          data_mode_compatible: this.data_and_mode_compatible,\n                          can_subset: this.can_subset\n                      });\n\n            // Height attributes: min height, max height, and visible height.\n            this.min_height_px = 16;\n            this.max_height_px = 800;\n            this.visible_height_px = this.config.get_value(\"height\");\n\n            //\n            // Create content div, which is where track is displayed, and add to container if available.\n            //\n            this.content_div = $(\"<div class='track-content'>\").appendTo(\n                this.container_div\n            );\n            if (this.container) {\n                this.container.content_div.append(this.container_div);\n                if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n                    this.add_resize_handle();\n                }\n            }\n        };\n\n        extend(Track.prototype, Drawable.prototype, {\n            action_icons_def: [\n                // Change track mode.\n                {\n                    name: \"mode_icon\",\n                    title: \"Set display mode\",\n                    css_class: \"chevron-expand\",\n                    on_click_fn: function() {}\n                },\n                // Hide/show content.\n                Drawable.prototype.action_icons_def[0],\n                // Set track as overview.\n                {\n                    name: \"overview_icon\",\n                    title: \"Set as overview\",\n                    css_class: \"application-dock-270\",\n                    on_click_fn: function(track) {\n                        track.view.set_overview(track);\n                    }\n                },\n                // Edit config.\n                Drawable.prototype.action_icons_def[1],\n                // Toggle track filters.\n                {\n                    name: \"filters_icon\",\n                    title: \"Filters\",\n                    css_class: \"ui-slider-050\",\n                    on_click_fn: function(drawable) {\n                        // TODO: update Tooltip text.\n                        if (drawable.filters_manager.visible()) {\n                            drawable.filters_manager.clear_filters();\n                        } else {\n                            drawable.filters_manager.init_filters();\n                        }\n                        drawable.filters_manager.toggle();\n                    }\n                },\n                // Toggle track tool.\n                {\n                    name: \"tools_icon\",\n                    title: \"Tool\",\n                    css_class: \"hammer\",\n                    on_click_fn: function(track) {\n                        // TODO: update Tooltip text.\n\n                        track.tool.toggle();\n\n                        // Update track name.\n                        if (track.tool.is_visible()) {\n                            track.set_name(\n                                track.config.get_value(\"name\") +\n                                    track.tool_region_and_parameters_str()\n                            );\n                        } else {\n                            track.revert_name();\n                        }\n                        // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                        $(\".tooltip\").remove();\n                    }\n                },\n                // Go to parameter exploration visualization.\n                {\n                    name: \"param_space_viz_icon\",\n                    title: \"Tool parameter space visualization\",\n                    css_class: \"arrow-split\",\n                    on_click_fn: function(track) {\n                        var html =\n                            \"<strong>Tool</strong>:\" +\n                            track.tool.get(\"name\") +\n                            \"<br/>\" +\n                            \"<strong>Dataset</strong>:\" +\n                            track.config.get_value(\"name\") +\n                            \"<br/>\" +\n                            '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                            '<option value=\"cur\">current viewing area</option>' +\n                            '<option value=\"bookmarks\">bookmarks</option>' +\n                            '<option value=\"both\">current viewing area and bookmarks</option>' +\n                            \"</select>\";\n                        var cancel_fn = function() {\n                                Galaxy.modal.hide();\n                                $(window).unbind(\"keypress.check_enter_esc\");\n                            },\n                            ok_fn = function() {\n                                var regions_to_use = $(\n                                        'select[name=\"regions\"] option:selected'\n                                    ).val(),\n                                    regions,\n                                    view_region = new visualization.GenomeRegion(\n                                        {\n                                            chrom: view.chrom,\n                                            start: view.low,\n                                            end: view.high\n                                        }\n                                    ),\n                                    bookmarked_regions = _.map(\n                                        $(\".bookmark\"),\n                                        function(elt) {\n                                            return new visualization.GenomeRegion(\n                                                {\n                                                    from_str: $(elt)\n                                                        .children(\".position\")\n                                                        .text()\n                                                }\n                                            );\n                                        }\n                                    );\n\n                                // Get regions for visualization.\n                                if (regions_to_use === \"cur\") {\n                                    // Use only current region.\n                                    regions = [view_region];\n                                } else if (regions_to_use === \"bookmarks\") {\n                                    // Use only bookmarks.\n                                    regions = bookmarked_regions;\n                                } else {\n                                    // Use both current region and bookmarks.\n                                    regions = [view_region].concat(\n                                        bookmarked_regions\n                                    );\n                                }\n\n                                Galaxy.modal.hide();\n\n                                // Go to visualization.\n                                window.location.href =\n                                    Galaxy.root +\n                                    \"visualization/sweepster\" +\n                                    \"?\" +\n                                    $.param({\n                                        dataset_id: track.dataset.id,\n                                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                                        regions: JSON.stringify(\n                                            new Backbone.Collection(\n                                                regions\n                                            ).toJSON()\n                                        )\n                                    });\n                            },\n                            check_enter_esc = function(e) {\n                                if ((e.keyCode || e.which) === 27) {\n                                    // Escape key\n                                    cancel_fn();\n                                } else if ((e.keyCode || e.which) === 13) {\n                                    // Enter key\n                                    ok_fn();\n                                }\n                            };\n\n                        // show dialog\n                        Galaxy.modal.show({\n                            title:\n                                \"Visualize tool parameter space and output from different parameter settings?\",\n                            body: html,\n                            buttons: { No: cancel_fn, Yes: ok_fn }\n                        });\n                    }\n                },\n                // Remove track.\n                Drawable.prototype.action_icons_def[2]\n            ],\n\n            can_draw: function() {\n                return this.dataset && Drawable.prototype.can_draw.call(this);\n            },\n\n            build_container_div: function() {\n                return $(\"<div/>\")\n                    .addClass(\"track\")\n                    .attr(\"id\", \"track_\" + this.id);\n            },\n\n            /**\n     * Set track's dataset.\n     */\n            set_dataset: function(dataset) {\n                this.dataset = dataset;\n                this.data_manager.set(\"dataset\", dataset);\n            },\n\n            /**\n     * Action to take during resize.\n     */\n            on_resize: function() {\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Add resizing handle to drawable's container_div.\n     */\n            add_resize_handle: function() {\n                var track = this;\n                var in_handle = false;\n                var in_drag = false;\n                var drag_control = $(\"<div class='track-resize'>\");\n                // Control shows on hover over track, stays while dragging\n                $(track.container_div).hover(\n                    function() {\n                        if (track.config.get_value(\"content_visible\")) {\n                            in_handle = true;\n                            drag_control.show();\n                        }\n                    },\n                    function() {\n                        in_handle = false;\n                        if (!in_drag) {\n                            drag_control.hide();\n                        }\n                    }\n                );\n                // Update height and force redraw of current view while dragging,\n                // clear cache to force redraw of other tiles.\n                drag_control\n                    .hide()\n                    .bind(\"dragstart\", function(e, d) {\n                        in_drag = true;\n                        d.original_height = $(track.content_div).height();\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        var new_height = Math.min(\n                            Math.max(\n                                d.original_height + d.deltaY,\n                                track.min_height_px\n                            ),\n                            track.max_height_px\n                        );\n                        $(track.tiles_div).css(\"height\", new_height);\n                        track.visible_height_px =\n                            track.max_height_px === new_height ? 0 : new_height;\n                        track.on_resize();\n                    })\n                    .bind(\"dragend\", function(e, d) {\n                        track.tile_cache.clear();\n                        in_drag = false;\n                        if (!in_handle) {\n                            drag_control.hide();\n                        }\n                        track.config.set_value(\n                            \"height\",\n                            track.visible_height_px\n                        );\n                        track.changed();\n                    })\n                    .appendTo(track.container_div);\n            },\n\n            /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n            hide_contents: function() {\n                // Hide tiles.\n                this.tiles_div.hide();\n                // Hide any y axis labels (common to several track types)\n                this.container_div.find(\".yaxislabel, .track-resize\").hide();\n            },\n\n            show_contents: function() {\n                // Show the contents div and labels (if present)\n                this.tiles_div.show();\n                this.container_div.find(\".yaxislabel, .track-resize\").show();\n                // Request a redraw of the content\n                this.request_draw();\n            },\n\n            /**\n     * Returns track type.\n     */\n            get_type: function() {\n                // Order is important: start with most-specific classes and go up the track hierarchy.\n                if (this instanceof LabelTrack) {\n                    return \"LabelTrack\";\n                } else if (this instanceof ReferenceTrack) {\n                    return \"ReferenceTrack\";\n                } else if (this instanceof LineTrack) {\n                    return \"LineTrack\";\n                } else if (this instanceof ReadTrack) {\n                    return \"ReadTrack\";\n                } else if (this instanceof VariantTrack) {\n                    return \"VariantTrack\";\n                } else if (this instanceof CompositeTrack) {\n                    return \"CompositeTrack\";\n                } else if (this instanceof FeatureTrack) {\n                    return \"FeatureTrack\";\n                }\n                return \"\";\n            },\n\n            /**\n     * Remove visualization content and display message.\n     */\n            show_message: function(msg_html) {\n                this.tiles_div.remove();\n                return $(\"<span/>\")\n                    .addClass(\"message\")\n                    .html(msg_html)\n                    .appendTo(this.content_div);\n            },\n\n            /**\n     * Initialize and draw the track.\n     */\n            init: function(retry) {\n                // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n                // used in this function to determine what action(s) to take.\n\n                var track = this;\n                track.enabled = false;\n                track.tile_cache.clear();\n                track.data_manager.clear();\n                /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n                // Remove old track content (e.g. tiles, messages).\n                track.content_div.children().remove();\n                track.container_div.removeClass(\"nodata error pending\");\n\n                track.tiles_div = $(\"<div/>\")\n                    .addClass(\"tiles\")\n                    .appendTo(track.content_div);\n\n                //\n                // Tracks with no dataset id are handled differently.\n                // FIXME: is this really necessary?\n                //\n                if (!track.dataset.id) {\n                    return;\n                }\n\n                // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n                // about track status.\n                var init_deferred = $.Deferred(),\n                    params = {\n                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                        data_type: this.dataset_check_type,\n                        chrom: track.view.chrom,\n                        retry: retry\n                    };\n                $.getJSON(this.dataset.url(), params, function(result) {\n                    if (\n                        !result ||\n                        result === \"error\" ||\n                        result.kind === \"error\"\n                    ) {\n                        // Dataset is in error state.\n                        track.container_div.addClass(\"error\");\n                        var msg_elt = track.show_message(DATA_ERROR);\n                        if (result.message) {\n                            // Add links to (a) show error and (b) try again.\n                            msg_elt.append(\n                                $(\"<a href='javascript:void(0);'></a>\")\n                                    .text(\"View error\")\n                                    .click(function() {\n                                        Galaxy.modal.show({\n                                            title: \"Trackster Error\",\n                                            body:\n                                                \"<pre>\" +\n                                                result.message +\n                                                \"</pre>\",\n                                            buttons: {\n                                                Close: function() {\n                                                    Galaxy.modal.hide();\n                                                }\n                                            }\n                                        });\n                                    })\n                            );\n                            msg_elt.append($(\"<span/>\").text(\" \"));\n                            msg_elt.append(\n                                $(\"<a href='javascript:void(0);'></a>\")\n                                    .text(\"Try again\")\n                                    .click(function() {\n                                        track.init(true);\n                                    })\n                            );\n                        }\n                    } else if (result === \"no converter\") {\n                        track.container_div.addClass(\"error\");\n                        track.show_message(DATA_NOCONVERTER);\n                    } else if (\n                        result === \"no data\" ||\n                        (result.data !== undefined &&\n                            (result.data === null || result.data.length === 0))\n                    ) {\n                        track.container_div.addClass(\"nodata\");\n                        track.show_message(DATA_NONE);\n                    } else if (result === \"pending\") {\n                        track.container_div.addClass(\"pending\");\n                        track.show_message(DATA_PENDING);\n                        //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                        setTimeout(function() {\n                            track.init();\n                        }, track.data_query_wait);\n                    } else if (result === \"data\" || result.status === \"data\") {\n                        if (result.valid_chroms) {\n                            track.valid_chroms = result.valid_chroms;\n                            track.update_icons();\n                        }\n                        track.tiles_div.text(DATA_OK);\n                        if (track.view.chrom) {\n                            track.tiles_div.text(\"\");\n                            track.tiles_div.css(\n                                \"height\",\n                                track.visible_height_px + \"px\"\n                            );\n                            track.enabled = true;\n                            // predraw_init may be asynchronous, wait for it and then draw\n                            $.when\n                                .apply($, track.predraw_init())\n                                .done(function() {\n                                    init_deferred.resolve();\n                                    track.container_div.removeClass(\n                                        \"nodata error pending\"\n                                    );\n                                    track.request_draw();\n                                });\n                        } else {\n                            init_deferred.resolve();\n                        }\n                    }\n                });\n\n                this.update_icons();\n                return init_deferred;\n            },\n\n            /**\n     * Additional initialization required before drawing track for the first time.\n     */\n            predraw_init: function() {\n                var track = this;\n                return $.getJSON(\n                    track.dataset.url(),\n                    {\n                        data_type: \"data\",\n                        stats: true,\n                        chrom: track.view.chrom,\n                        low: 0,\n                        high: track.view.max_high,\n                        hda_ldda: track.dataset.get(\"hda_ldda\")\n                    },\n                    function(result) {\n                        var data = result.data;\n\n                        // Tracks may not have stat data either because there is no data or data is not yet ready.\n                        if (\n                            data &&\n                            data.min !== undefined &&\n                            data.max !== undefined\n                        ) {\n                            // Compute default minimum and maximum values\n                            var min_value = data.min,\n                                max_value = data.max;\n                            // If mean and sd are present, use them to compute a ~95% window\n                            // but only if it would shrink the range on one side\n                            min_value = Math.floor(\n                                Math.min(\n                                    0,\n                                    Math.max(min_value, data.mean - 2 * data.sd)\n                                )\n                            );\n                            max_value = Math.ceil(\n                                Math.max(\n                                    0,\n                                    Math.min(max_value, data.mean + 2 * data.sd)\n                                )\n                            );\n                            // Update config, prefs\n                            track.config.set_default_value(\n                                \"min_value\",\n                                min_value\n                            );\n                            track.config.set_default_value(\n                                \"max_value\",\n                                max_value\n                            );\n                            track.config.set_value(\"min_value\", min_value);\n                            track.config.set_value(\"max_value\", max_value);\n                        }\n                    }\n                );\n            },\n\n            /**\n     * Returns all drawables in this drawable.\n     */\n            get_drawables: function() {\n                return this;\n            }\n        });\n\n        var TiledTrack = function(view, container, obj_dict) {\n            Track.call(this, view, container, obj_dict);\n\n            var track = this;\n\n            // Make track moveable.\n            moveable(\n                track.container_div,\n                track.drag_handle_class,\n                \".group\",\n                track\n            );\n\n            // Attribute init.\n            this.filters_manager = new filters_mod.FiltersManager(\n                this,\n                \"filters\" in obj_dict ? obj_dict.filters : null\n            );\n            // HACK: set filters manager for data manager.\n            // FIXME: prolly need function to set filters and update data_manager reference.\n            this.data_manager.set(\"filters_manager\", this.filters_manager);\n            this.filters_available = false;\n            this.tool = obj_dict.tool\n                ? new TracksterTool(\n                      _.extend(obj_dict.tool, {\n                          track: this,\n                          tool_state: obj_dict.tool_state\n                      })\n                  )\n                : null;\n            this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n            this.left_offset = 0;\n\n            if (this.header_div) {\n                //\n                // Setup filters.\n                //\n                this.set_filters_manager(this.filters_manager);\n\n                //\n                // Create dynamic tool view.\n                //\n                if (this.tool) {\n                    var tool_view = new TracksterToolView({ model: this.tool });\n                    tool_view.render();\n                    this.dynamic_tool_div = tool_view.$el;\n                    this.header_div.after(this.dynamic_tool_div);\n                }\n            }\n\n            // Add tiles_div, overlay_div to content_div.\n            this.tiles_div = $(\"<div/>\")\n                .addClass(\"tiles\")\n                .appendTo(this.content_div);\n            if (!this.config.get_value(\"content_visible\")) {\n                this.tiles_div.hide();\n            }\n            this.overlay_div = $(\"<div/>\")\n                .addClass(\"overlay\")\n                .appendTo(this.content_div);\n\n            if (obj_dict.mode) {\n                this.change_mode(obj_dict.mode);\n            }\n        };\n        extend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n            action_icons_def: Track.prototype.action_icons_def.concat([\n                // Show more rows when all features are not slotted.\n                {\n                    name: \"show_more_rows_icon\",\n                    title:\n                        \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n                    css_class: \"exclamation\",\n                    on_click_fn: function(track) {\n                        $(\".tooltip\").remove();\n                        track.slotters[\n                            track.view.resolution_px_b\n                        ].max_rows *= 2;\n                        track.request_draw({ clear_tile_cache: true });\n                    },\n                    hide: true\n                }\n            ]),\n\n            /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n            copy: function(container) {\n                // Create copy.\n                var obj_dict = this.to_dict();\n                extend(obj_dict, {\n                    data_manager: this.data_manager\n                });\n                var new_track = new this.constructor(\n                    this.view,\n                    container,\n                    obj_dict\n                );\n                // Misc. init and return.\n                new_track.change_mode(this.mode);\n                new_track.enabled = this.enabled;\n                return new_track;\n            },\n\n            /**\n     * Set filters manager + HTML elements.\n     */\n            set_filters_manager: function(filters_manager) {\n                this.filters_manager = filters_manager;\n                this.header_div.after(this.filters_manager.parent_div);\n            },\n\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: function() {\n                return {\n                    track_type: this.get_type(),\n                    dataset: {\n                        id: this.dataset.id,\n                        hda_ldda: this.dataset.get(\"hda_ldda\")\n                    },\n                    prefs: this.config.to_key_value_dict(),\n                    mode: this.mode,\n                    filters: this.filters_manager.to_dict(),\n                    tool_state: this.tool ? this.tool.state_dict() : {}\n                };\n            },\n\n            /**\n     * Set track bounds for current chromosome.\n     */\n            set_min_max: function() {\n                var track = this;\n\n                return $.getJSON(\n                    track.dataset.url(),\n                    {\n                        data_type: \"data\",\n                        stats: true,\n                        chrom: track.view.chrom,\n                        low: 0,\n                        high: track.view.max_high,\n                        hda_ldda: track.dataset.get(\"hda_ldda\")\n                    },\n                    function(result) {\n                        var data = result.data;\n                        if (\n                            isNaN(\n                                parseFloat(track.config.get_value(\"min_value\"))\n                            ) ||\n                            isNaN(\n                                parseFloat(track.config.get_value(\"max_value\"))\n                            )\n                        ) {\n                            // Compute default minimum and maximum values\n                            var min_value = data.min,\n                                max_value = data.max;\n                            // If mean and sd are present, use them to compute a ~95% window\n                            // but only if it would shrink the range on one side\n                            min_value = Math.floor(\n                                Math.min(\n                                    0,\n                                    Math.max(min_value, data.mean - 2 * data.sd)\n                                )\n                            );\n                            max_value = Math.ceil(\n                                Math.max(\n                                    0,\n                                    Math.min(max_value, data.mean + 2 * data.sd)\n                                )\n                            );\n                            // Update the prefs\n                            track.config.set_value(\"min_value\", min_value);\n                            track.config.set_value(\"max_value\", max_value);\n                        }\n                    }\n                );\n            },\n\n            /**\n     * Change track's mode.\n     */\n            change_mode: function(new_mode) {\n                var track = this;\n                // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n                track.mode = new_mode;\n                track.config.set_value(\"mode\", new_mode);\n                // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n                // data manager would work if Auto data were checked for compatibility when a specific\n                // mode is chosen.\n                if (new_mode === \"Auto\") {\n                    this.data_manager.clear();\n                }\n                track.request_draw({ clear_tile_cache: true });\n                this.action_icons.mode_icon.attr(\n                    \"title\",\n                    \"Set display mode (now: \" + track.mode + \")\"\n                );\n                return track;\n            },\n\n            /**\n     * Update track's buttons.\n     */\n            update_icons: function() {\n                var track = this;\n\n                //\n                // Show/hide filter icon.\n                //\n                track.action_icons.filters_icon.toggle(track.filters_available);\n\n                //\n                // Show/hide tool icons.\n                //\n                track.action_icons.tools_icon.toggle(track.tool !== null);\n                track.action_icons.param_space_viz_icon.toggle(\n                    track.tool !== null\n                );\n            },\n\n            /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n            _gen_tile_cache_key: function(w_scale, tile_region) {\n                return w_scale + \"_\" + tile_region;\n            },\n\n            /**\n     * Request that track be drawn.\n     */\n            request_draw: function(options) {\n                if (options && options.clear_tile_cache) {\n                    this.tile_cache.clear();\n                }\n                this.view.request_redraw(options, this);\n            },\n\n            /**\n     * Actions to be taken before drawing.\n     */\n            before_draw: function() {\n                // Clear because this is set when drawing.\n                this.max_height_px = 0;\n            },\n\n            /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n            _draw: function(options) {\n                if (!this.can_draw()) {\n                    return;\n                }\n\n                var clear_after = options && options.clear_after,\n                    low = this.view.low,\n                    high = this.view.high,\n                    range = high - low,\n                    width = this.view.container.width(),\n                    w_scale = this.view.resolution_px_b,\n                    resolution = 1 / w_scale;\n\n                // For overview, adjust high, low, resolution, and w_scale.\n                if (this.is_overview) {\n                    low = this.view.max_low;\n                    high = this.view.max_high;\n                    w_scale = width / (view.max_high - view.max_low);\n                    resolution = 1 / w_scale;\n                }\n\n                this.before_draw();\n\n                //\n                // Method for moving and/or removing tiles:\n                // (a) mark all elements for removal using class 'remove'\n                // (b) during tile drawing/placement, remove class for elements that are moved;\n                //     this occurs in show_tile()\n                // (c) after drawing tiles, remove elements still marked for removal\n                //     (i.e. that still have class 'remove').\n                //\n\n                // Step (a) for (re)moving tiles.\n                this.tiles_div.children().addClass(\"remove\");\n\n                var // Tile width in bases.\n                    tile_width = Math.floor(TILE_SIZE * resolution),\n                    // Index of first tile that overlaps visible region.\n                    tile_index = Math.floor(low / tile_width),\n                    tile_region,\n                    tile_promise,\n                    tile_promises = [],\n                    tiles = [];\n                // Draw tiles.\n                while (tile_index * tile_width < high) {\n                    // Get tile region.\n                    tile_region = new visualization.GenomeRegion({\n                        chrom: this.view.chrom,\n                        start: tile_index * tile_width,\n                        // Tile high cannot be larger than view.max_high, which the chromosome length.\n                        end: Math.min(\n                            (tile_index + 1) * tile_width,\n                            this.view.max_high\n                        )\n                    });\n                    tile_promise = this.draw_helper(\n                        tile_region,\n                        w_scale,\n                        options\n                    );\n                    tile_promises.push(tile_promise);\n                    $.when(tile_promise).then(function(tile) {\n                        tiles.push(tile);\n                    });\n\n                    // Go to next tile.\n                    tile_index += 1;\n                }\n\n                // Step (c) for (re)moving tiles when clear_after is false.\n                if (!clear_after) {\n                    this.tiles_div\n                        .children(\".remove\")\n                        .removeClass(\"remove\")\n                        .remove();\n                }\n\n                // When all tiles are drawn, call post-draw actions.\n                var track = this;\n                $.when.apply($, tile_promises).then(function() {\n                    // Step (c) for (re)moving tiles when clear_after is true:\n                    track.tiles_div.children(\".remove\").remove();\n\n                    // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n                    // (a) ReferenceTrack without sufficient resolution;\n                    // (b) data_fetch = false.\n                    tiles = _.filter(tiles, function(t) {\n                        return t !== null;\n                    });\n                    if (tiles.length !== 0) {\n                        track.postdraw_actions(\n                            tiles,\n                            width,\n                            w_scale,\n                            clear_after\n                        );\n                    }\n                });\n            },\n\n            /**\n     * Add a maximum/minimum label to track.\n     */\n            _add_yaxis_label: function(type, on_change) {\n                var track = this,\n                    css_class = type === \"max\" ? \"top\" : \"bottom\",\n                    text = type === \"max\" ? \"max\" : \"min\",\n                    pref_name = type === \"max\" ? \"max_value\" : \"min_value\",\n                    label = this.container_div.find(\".yaxislabel.\" + css_class),\n                    value = round(track.config.get_value(pref_name), 1);\n\n                // Default action for on_change is to redraw track.\n                on_change =\n                    on_change ||\n                    function() {\n                        track.request_draw({ clear_tile_cache: true });\n                    };\n\n                if (label.length !== 0) {\n                    // Label already exists, so update value.\n                    label.text(value);\n                } else {\n                    // Add label.\n                    label = $(\"<div/>\")\n                        .text(value)\n                        .make_text_editable({\n                            num_cols: 12,\n                            on_finish: function(new_val) {\n                                $(\".tooltip\").remove();\n                                track.config.set_value(\n                                    pref_name,\n                                    round(new_val, 1)\n                                );\n                                on_change();\n                            },\n                            help_text: \"Set \" + text + \" value\"\n                        })\n                        .addClass(\"yaxislabel \" + css_class)\n                        .css(\"color\", this.config.get_value(\"label_color\"));\n                    this.container_div.prepend(label);\n                }\n            },\n\n            /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                var line_track_tiles = _.filter(tiles, function(tile) {\n                    return tile instanceof LineTrackTile;\n                });\n\n                //\n                // Take different actions depending on whether there are LineTrack/Coverage tiles.\n                //\n\n                if (line_track_tiles.length > 0) {\n                    // -- Drawing in Coverage mode. --\n\n                    // Clear because this is set when drawing.\n                    this.max_height_px = 0;\n                    var track = this;\n                    _.each(tiles, function(tile) {\n                        if (!(tile instanceof LineTrackTile)) {\n                            tile.html_elt.remove();\n                            track.draw_helper(tile.region, w_scale, {\n                                force: true,\n                                mode: \"Coverage\"\n                            });\n                        }\n                    });\n\n                    track._add_yaxis_label(\"max\");\n                } else {\n                    // -- Drawing in non-Coverage mode. --\n\n                    // Remove Y-axis labels because there are no line track tiles.\n                    this.container_div.find(\".yaxislabel\").remove();\n\n                    //\n                    // If some tiles have icons, set padding of tiles without icons so features and rows align.\n                    //\n                    var icons_present = _.find(tiles, function(tile) {\n                        return tile.has_icons;\n                    });\n\n                    if (icons_present) {\n                        _.each(tiles, function(tile) {\n                            if (!tile.has_icons) {\n                                // Need to align with other tile(s) that have icons.\n                                tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                            }\n                        });\n                    }\n                }\n            },\n\n            /**\n     * Returns appropriate display mode based on data.\n     */\n            get_mode: function(data) {\n                return this.mode;\n            },\n\n            /**\n     * Update track interface to show display mode being used.\n     */\n            update_auto_mode: function(display_mode) {\n                // FIXME: needs to be implemented.\n            },\n\n            /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n            _get_drawables: function() {\n                return [this];\n            },\n\n            /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n            draw_helper: function(region, w_scale, options) {\n                // Init options if necessary to avoid having to check if options defined.\n                if (!options) {\n                    options = {};\n                }\n\n                var force = options.force,\n                    mode = options.mode || this.mode,\n                    resolution = 1 / w_scale,\n                    // Useful vars.\n                    track = this,\n                    drawables = this._get_drawables(),\n                    key = this._gen_tile_cache_key(w_scale, region),\n                    is_tile = function(o) {\n                        return o && \"track\" in o;\n                    };\n\n                // Check tile cache, if found show existing tile in correct position\n                var tile = force ? undefined : track.tile_cache.get_elt(key);\n                if (tile) {\n                    if (is_tile(tile)) {\n                        track.show_tile(tile, w_scale);\n                    }\n                    return tile;\n                }\n\n                // If not fetching data, nothing more to do because data is needed to draw tile.\n                if (options.data_fetch === false) {\n                    return null;\n                }\n\n                // Function that returns data/Deferreds needed to draw tile.\n                var get_tile_data = function() {\n                    // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n                    var data_mode = _.find(CONTINUOUS_DATA_MODES, function(m) {\n                        return m === mode;\n                    })\n                        ? \"Coverage\"\n                        : mode;\n\n                    // Map drawable object to data needed for drawing.\n                    var tile_data = _.map(drawables, function(d) {\n                        // Get the track data/promise.\n                        return d.data_manager.get_data(\n                            region,\n                            data_mode,\n                            resolution,\n                            track.data_url_extra_params\n                        );\n                    });\n\n                    // Get reference data/promise.\n                    if (view.reference_track) {\n                        tile_data.push(\n                            view.reference_track.data_manager.get_data(\n                                region,\n                                mode,\n                                resolution,\n                                view.reference_track.data_url_extra_params\n                            )\n                        );\n                    }\n\n                    return tile_data;\n                };\n\n                //\n                // When data is available, draw tile.\n                //\n                var tile_drawn = $.Deferred();\n                track.tile_cache.set_elt(key, tile_drawn);\n                $.when.apply($, get_tile_data()).then(function() {\n                    var tile_data = get_tile_data(),\n                        tracks_data = tile_data,\n                        seq_data;\n\n                    // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n                    // that cannot be subsetted. This may occur if the superset has a message. If there is a\n                    // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n                    // GenomeDataManager in visualization module.\n                    if (\n                        _.find(tile_data, function(d) {\n                            return util.is_deferred(d);\n                        })\n                    ) {\n                        track.tile_cache.set_elt(key, undefined);\n                        $.when(\n                            track.draw_helper(region, w_scale, options)\n                        ).then(function(tile) {\n                            tile_drawn.resolve(tile);\n                        });\n                        return;\n                    }\n\n                    // If sequence data is available, subset to get only data in region.\n                    if (view.reference_track) {\n                        seq_data = view.reference_track.data_manager.subset_entry(\n                            tile_data.pop(),\n                            region\n                        );\n                    }\n\n                    // Get drawing modes, heights for all tracks.\n                    var drawing_modes = [],\n                        drawing_heights = [];\n\n                    _.each(drawables, function(d, i) {\n                        var mode = d.mode,\n                            data = tracks_data[i];\n                        if (mode === \"Auto\") {\n                            mode = d.get_mode(data);\n                            d.update_auto_mode(mode);\n                        }\n                        drawing_modes.push(mode);\n                        drawing_heights.push(\n                            d.get_canvas_height(data, mode, w_scale, width)\n                        );\n                    });\n\n                    var canvas = track.view.canvas_manager.new_canvas(),\n                        tile_low = region.get(\"start\"),\n                        tile_high = region.get(\"end\"),\n                        all_data_index = 0,\n                        width =\n                            Math.ceil((tile_high - tile_low) * w_scale) +\n                            track.left_offset,\n                        height = _.max(drawing_heights),\n                        tile;\n\n                    //\n                    // Draw all tracks on tile.\n                    //\n                    canvas.width = width;\n                    // Height is specified in options or is the height found above.\n                    canvas.height = options.height || height;\n                    var ctx = canvas.getContext(\"2d\");\n                    ctx.translate(track.left_offset, 0);\n                    if (drawables.length > 1) {\n                        ctx.globalAlpha = 0.5;\n                        ctx.globalCompositeOperation = \"source-over\";\n                    }\n                    _.each(drawables, function(d, i) {\n                        tile = d.draw_tile(\n                            tracks_data[i],\n                            ctx,\n                            drawing_modes[i],\n                            region,\n                            w_scale,\n                            seq_data\n                        );\n                    });\n\n                    // Don't cache, show if no tile.\n                    if (tile !== undefined) {\n                        track.tile_cache.set_elt(key, tile);\n                        track.show_tile(tile, w_scale);\n                    }\n\n                    tile_drawn.resolve(tile);\n                });\n\n                return tile_drawn;\n            },\n\n            /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n            get_canvas_height: function(result, mode, w_scale, canvas_width) {\n                return this.visible_height_px;\n            },\n\n            /**\n     * Draw line (bigwig) data onto tile.\n     */\n            _draw_line_track_tile: function(\n                result,\n                ctx,\n                mode,\n                region,\n                w_scale\n            ) {\n                // Set min/max if they are not already set.\n                // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n                // standardize this.\n                if (\n                    [undefined, null].indexOf(\n                        this.config.get_value(\"min_value\")\n                    ) !== -1\n                ) {\n                    this.config.set_value(\"min_value\", 0);\n                }\n                if (\n                    [undefined, null, 0].indexOf(\n                        this.config.get_value(\"max_value\")\n                    ) !== -1\n                ) {\n                    this.config.set_value(\n                        \"max_value\",\n                        _.max(\n                            _.map(result.data, function(d) {\n                                return d[1];\n                            })\n                        ) || 0\n                    );\n                }\n\n                var canvas = ctx.canvas,\n                    painter = new painters.LinePainter(\n                        result.data,\n                        region.get(\"start\"),\n                        region.get(\"end\"),\n                        this.config.to_key_value_dict(),\n                        mode\n                    );\n                painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n                return new LineTrackTile(\n                    this,\n                    region,\n                    w_scale,\n                    canvas,\n                    result.data\n                );\n            },\n\n            /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n            draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n            /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n            show_tile: function(tile, w_scale) {\n                var track = this,\n                    tile_element = tile.html_elt;\n\n                // -- Show/move tile element. --\n\n                tile.predisplay_actions();\n\n                // Position tile element based on current viewport.\n                var left = Math.round(\n                    (tile.low -\n                        (this.is_overview\n                            ? this.view.max_low\n                            : this.view.low)) *\n                        w_scale\n                );\n                if (this.left_offset) {\n                    left -= this.left_offset;\n                }\n                tile_element.css(\"left\", left);\n\n                if (tile_element.hasClass(\"remove\")) {\n                    // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n                    // for removing tiles.\n                    tile_element.removeClass(\"remove\");\n                } else {\n                    // Showing new tile.\n                    this.tiles_div.append(tile_element);\n                }\n\n                // -- Update track, tile heights based on new tile. --\n\n                tile_element.css(\"height\", \"auto\");\n\n                // Update max height based on current tile's height.\n                // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n                // -2 to get the correct height.\n                this.max_height_px = Math.max(\n                    this.max_height_px,\n                    tile_element.height() - 2\n                );\n\n                // Update height for all tiles based on max height.\n                tile_element\n                    .parent()\n                    .children()\n                    .css(\"height\", this.max_height_px + \"px\");\n\n                // Update track height based on max height and visible height.\n                var track_height = this.max_height_px;\n                if (this.visible_height_px !== 0) {\n                    track_height = Math.min(\n                        this.max_height_px,\n                        this.visible_height_px\n                    );\n                }\n                this.tiles_div.css(\"height\", track_height + \"px\");\n            },\n\n            /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n            tool_region_and_parameters_str: function(region) {\n                var track = this,\n                    region_str =\n                        region !== undefined ? region.toString() : \"all\",\n                    param_str = _.values(track.tool.get_inputs_dict()).join(\n                        \", \"\n                    );\n                return (\n                    \" - region=[\" +\n                    region_str +\n                    \"], parameters=[\" +\n                    param_str +\n                    \"]\"\n                );\n            },\n\n            /**\n     * Returns true if data is compatible with a given mode.\n     */\n            data_and_mode_compatible: function(data, mode) {\n                // Only handle modes that user can set.\n                if (mode === \"Auto\") {\n                    return true;\n                } else if (mode === \"Coverage\") {\n                    // Histogram mode requires bigwig data.\n                    return data.dataset_type === \"bigwig\";\n                } else if (\n                    data.dataset_type === \"bigwig\" ||\n                    data.extra_info === \"no_detail\"\n                ) {\n                    // All other modes--Dense, Squish, Pack--require data + details.\n                    return false;\n                } else {\n                    return true;\n                }\n            },\n\n            /**\n     * Returns true if entry can be subsetted.\n     */\n            can_subset: function(entry) {\n                // Do not subset entries with a message or data with no detail.\n                if (entry.message || entry.extra_info === \"no_detail\") {\n                    return false;\n                } else if (entry.dataset_type === \"bigwig\") {\n                    // Subset only if data is single-bp resolution.\n                    return entry.data[1][0] - entry.data[0][0] === 1;\n                }\n\n                return true;\n            },\n\n            /**\n     * Set up track to receive tool data.\n     */\n            init_for_tool_data: function() {\n                // Set up track to fetch raw data rather than converted data.\n                this.data_manager.set(\"data_type\", \"raw_data\");\n                this.data_query_wait = 1000;\n                this.dataset_check_type = \"state\";\n\n                // FIXME: this is optional and is disabled for now because it creates\n                // additional converter jobs without a clear benefit because indexing\n                // such a small dataset provides little benefit.\n                //\n                // Set up one-time, post-draw to clear tool execution settings.\n                //\n                /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n            }\n        });\n\n        var LabelTrack = function(view, container) {\n            Track.call(this, view, container, {\n                resize: false,\n                header: false\n            });\n            this.container_div.addClass(\"label-track\");\n        };\n        extend(LabelTrack.prototype, Track.prototype, {\n            init: function() {\n                // Enable by default because there should always be data when drawing track.\n                this.enabled = true;\n            },\n\n            /**\n     * Additional initialization required before drawing track for the first time.\n     */\n            predraw_init: function() {},\n\n            _draw: function(options) {\n                var view = this.view,\n                    range = view.high - view.low,\n                    tickDistance = Math.floor(\n                        Math.pow(10, Math.floor(Math.log(range) / Math.log(10)))\n                    ),\n                    position =\n                        Math.floor(view.low / tickDistance) * tickDistance,\n                    width = this.view.container.width(),\n                    new_div = $(\"<div/>\").addClass(\"label-container\");\n                while (position < view.high) {\n                    var screenPosition = Math.floor(\n                        (position - view.low) / range * width\n                    );\n                    new_div.append(\n                        $(\"<div/>\")\n                            .addClass(\"pos-label\")\n                            .text(util.commatize(position))\n                            .css({\n                                left: screenPosition\n                            })\n                    );\n                    position += tickDistance;\n                }\n                this.content_div.children(\":first\").remove();\n                this.content_div.append(new_div);\n            }\n        });\n\n        // FIXME: Composite tracks have code for showing composite tracks with line tracks and\n        // composite tracks with line + feature tracks. It's probably best if different classes\n        // are created for each type of composite track.\n\n        /**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\n        var CompositeTrack = function(view, container, obj_dict) {\n            TiledTrack.call(this, view, container, obj_dict);\n\n            // Init drawables; each drawable is a copy so that config/preferences\n            // are independent of each other. Also init left offset.\n            this.drawables = [];\n            if (\"drawables\" in obj_dict) {\n                var drawable;\n                for (var i = 0; i < obj_dict.drawables.length; i++) {\n                    drawable = obj_dict.drawables[i];\n                    this.drawables[i] = object_from_template(\n                        drawable,\n                        view,\n                        null\n                    );\n\n                    // Track's left offset is the max of all tracks.\n                    if (drawable.left_offset > this.left_offset) {\n                        this.left_offset = drawable.left_offset;\n                    }\n                }\n                this.enabled = true;\n            }\n\n            // Set all feature tracks to use Coverage mode.\n            _.each(this.drawables, function(d) {\n                if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n                    d.change_mode(\"Coverage\");\n                }\n            });\n\n            this.update_icons();\n\n            // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n            // that for object type.\n            this.obj_type = \"CompositeTrack\";\n        };\n\n        extend(CompositeTrack.prototype, TiledTrack.prototype, {\n            display_modes: CONTINUOUS_DATA_MODES,\n\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 30,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            action_icons_def: [\n                // Create composite track from group's tracks.\n                {\n                    name: \"composite_icon\",\n                    title: \"Show individual tracks\",\n                    css_class: \"layers-stack\",\n                    on_click_fn: function(track) {\n                        $(\".tooltip\").remove();\n                        track.show_group();\n                    }\n                }\n            ].concat(TiledTrack.prototype.action_icons_def),\n\n            // HACK: CompositeTrack should inherit from DrawableCollection as well.\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: DrawableCollection.prototype.to_dict,\n\n            add_drawable: DrawableCollection.prototype.add_drawable,\n\n            unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Action to take during resize.\n     */\n            on_resize: function() {\n                // Propogate visible height to other tracks.\n                var visible_height = this.visible_height_px;\n                _.each(this.drawables, function(d) {\n                    d.visible_height_px = visible_height;\n                });\n                Track.prototype.on_resize.call(this);\n            },\n\n            /**\n     * Change mode for all tracks.\n     */\n            change_mode: function(new_mode) {\n                TiledTrack.prototype.change_mode.call(this, new_mode);\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i].change_mode(new_mode);\n                }\n            },\n\n            /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n            init: function() {\n                // Init components.\n                var init_deferreds = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    init_deferreds.push(this.drawables[i].init());\n                }\n\n                // Draw composite when all tracks available.\n                var track = this;\n                $.when.apply($, init_deferreds).then(function() {\n                    track.enabled = true;\n                    track.request_draw();\n                });\n            },\n\n            update_icons: function() {\n                // For now, hide filters and tool.\n                this.action_icons.filters_icon.hide();\n                this.action_icons.tools_icon.hide();\n                this.action_icons.param_space_viz_icon.hide();\n            },\n\n            can_draw: Drawable.prototype.can_draw,\n\n            _get_drawables: function() {\n                return this.drawables;\n            },\n\n            /**\n     * Replace this track with group that includes individual tracks.\n     */\n            show_group: function() {\n                // Create group with individual tracks.\n                var group = new DrawableGroup(this.view, this.container, {\n                        name: this.config.get_value(\"name\")\n                    }),\n                    track;\n                for (var i = 0; i < this.drawables.length; i++) {\n                    track = this.drawables[i];\n                    track.update_icons();\n                    group.add_drawable(track);\n                    track.container = group;\n                    group.content_div.append(track.container_div);\n                }\n\n                // Replace track with group.\n                var index = this.container.replace_drawable(this, group, true);\n                group.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Actions taken before drawing.\n     */\n            before_draw: function() {\n                // FIXME: this is needed only if there are feature tracks in the composite track.\n                // TiledTrack.prototype.before_draw.call(this);\n\n                //\n                // Set min, max for tracks to be largest min, max.\n                //\n\n                // Get smallest min, biggest max.\n                var min = _.min(\n                        _.map(this.drawables, function(d) {\n                            return d.config.get_value(\"min_value\");\n                        })\n                    ),\n                    max = _.max(\n                        _.map(this.drawables, function(d) {\n                            return d.config.get_value(\"max_value\");\n                        })\n                    );\n\n                this.config.set_value(\"min_value\", min);\n                this.config.set_value(\"max_value\", max);\n\n                // Set all tracks to smallest min, biggest max.\n                _.each(this.drawables, function(d) {\n                    d.config.set_value(\"min_value\", min);\n                    d.config.set_value(\"max_value\", max);\n                });\n            },\n\n            /**\n     * Update minimum, maximum for component tracks.\n     */\n            update_all_min_max: function() {\n                var track = this,\n                    min_value = this.config.get_value(\"min_value\"),\n                    max_value = this.config.get_value(\"max_value\");\n                _.each(this.drawables, function(d) {\n                    d.config.set_value(\"min_value\", min_value);\n                    d.config.set_value(\"max_value\", max_value);\n                });\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n                var max_height = -1,\n                    i;\n                for (i = 0; i < tiles.length; i++) {\n                    var height = tiles[i].html_elt.find(\"canvas\").height();\n                    if (height > max_height) {\n                        max_height = height;\n                    }\n                }\n\n                for (i = 0; i < tiles.length; i++) {\n                    var tile = tiles[i];\n                    if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                        this.draw_helper(tile.region, w_scale, {\n                            force: true,\n                            height: max_height\n                        });\n                        tile.html_elt.remove();\n                    }\n                }\n\n                // Wrap function so that it can be called without object reference.\n                var track = this,\n                    t = function() {\n                        track.update_all_min_max();\n                    };\n\n                // Add min, max labels.\n                this._add_yaxis_label(\"min\", t);\n                this._add_yaxis_label(\"max\", t);\n            }\n        });\n\n        /**\n * Displays reference genome data.\n */\n        var ReferenceTrack = function(view) {\n            TiledTrack.call(\n                this,\n                view,\n                { content_div: view.top_labeltrack },\n                { resize: false, header: false }\n            );\n\n            // Use offset to ensure that bases at tile edges are drawn.\n            this.left_offset = view.canvas_manager.char_width_px;\n            this.container_div.addClass(\"reference-track\");\n            this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n            this.data_url_extra_params = { reference: true };\n            this.data_manager = new visualization.GenomeReferenceDataManager({\n                data_url: this.data_url,\n                can_subset: this.can_subset\n            });\n            this.hide_contents();\n        };\n        extend(\n            ReferenceTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            {\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 13,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                init: function() {\n                    this.data_manager.clear();\n                    // Enable by default because there should always be data when drawing track.\n                    this.enabled = true;\n                },\n\n                /**\n     * Additional initialization required before drawing track for the first time.\n     */\n                predraw_init: function() {},\n\n                can_draw: Drawable.prototype.can_draw,\n\n                /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n                draw_helper: function(region, w_scale, options) {\n                    var cur_visible = this.tiles_div.is(\":visible\"),\n                        new_visible,\n                        tile = null;\n                    if (w_scale > this.view.canvas_manager.char_width_px) {\n                        this.tiles_div.show();\n                        new_visible = true;\n                        tile = TiledTrack.prototype.draw_helper.call(\n                            this,\n                            region,\n                            w_scale,\n                            options\n                        );\n                    } else {\n                        new_visible = false;\n                        this.tiles_div.hide();\n                    }\n\n                    // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n                    // postdraw_actions is not called when reference track not shown due to no tiles. If\n                    // it is moved to postdraw_actions, resize must be called each time because cannot\n                    // easily detect showing/hiding.\n\n                    // If showing or hiding reference track, resize viewport.\n                    if (cur_visible !== new_visible) {\n                        this.view.resize_viewport();\n                    }\n\n                    return tile;\n                },\n\n                can_subset: function(entry) {\n                    return true;\n                },\n\n                /**\n     * Draw ReferenceTrack tile.\n     */\n                draw_tile: function(data, ctx, mode, region, w_scale) {\n                    // Try to subset data.\n                    var subset = this.data_manager.subset_entry(data, region),\n                        seq_data = subset.data;\n\n                    // Draw sequence data.\n                    var canvas = ctx.canvas;\n                    ctx.font = ctx.canvas.manager.default_font;\n                    ctx.textAlign = \"center\";\n                    for (\n                        var c = 0, str_len = seq_data.length;\n                        c < str_len;\n                        c++\n                    ) {\n                        ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n                        ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n                    }\n                    return new Tile(this, region, w_scale, canvas, subset);\n                }\n            }\n        );\n\n        /**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\n        var LineTrack = function(view, container, obj_dict) {\n            this.mode = \"Histogram\";\n            TiledTrack.call(this, view, container, obj_dict);\n            // Need left offset for drawing overlap near tile boundaries.\n            this.left_offset = 30;\n\n            // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n            // FIXME: there should be a flag to wait for this check to complete before loading the track.\n            var self = this;\n            $.when(\n                supportsByteRanges(\n                    Galaxy.root + \"datasets/\" + this.dataset.id + \"/display\"\n                )\n            ).then(function(supportsByteRanges) {\n                if (supportsByteRanges) {\n                    self.data_manager = new bbi.BBIDataManager({\n                        dataset: self.dataset\n                    });\n                }\n            });\n        };\n\n        extend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n            display_modes: CONTINUOUS_DATA_MODES,\n\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    { key: \"color\", label: \"Color\", type: \"color\" },\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 30,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Actions to be taken before drawing.\n     */\n            // FIXME: can the default behavior be used; right now it breaks during resize.\n            before_draw: function() {},\n\n            /**\n     * Draw track tile.\n     */\n            draw_tile: function(result, ctx, mode, region, w_scale) {\n                return this._draw_line_track_tile(\n                    result,\n                    ctx,\n                    mode,\n                    region,\n                    w_scale\n                );\n            },\n\n            /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n            can_subset: function(entry) {\n                return entry.data[1][0] - entry.data[0][0] === 1;\n            },\n\n            /**\n     * Add min, max labels.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                // Add min, max labels.\n                this._add_yaxis_label(\"max\");\n                this._add_yaxis_label(\"min\");\n            }\n        });\n\n        /**\n * Diagonal heatmap for showing interactions data.\n */\n        var DiagonalHeatmapTrack = function(view, container, obj_dict) {\n            this.mode = \"Heatmap\";\n            TiledTrack.call(this, view, container, obj_dict);\n        };\n\n        extend(\n            DiagonalHeatmapTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            {\n                display_modes: [\"Heatmap\"],\n\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"pos_color\",\n                            label: \"Positive Color\",\n                            type: \"color\",\n                            default_value: \"#FF8C00\"\n                        },\n                        {\n                            key: \"neg_color\",\n                            label: \"Negative Color\",\n                            type: \"color\",\n                            default_value: \"#4169E1\"\n                        },\n                        {\n                            key: \"min_value\",\n                            label: \"Min Value\",\n                            type: \"int\",\n                            default_value: undefined\n                        },\n                        {\n                            key: \"max_value\",\n                            label: \"Max Value\",\n                            type: \"int\",\n                            default_value: undefined\n                        },\n                        {\n                            key: \"mode\",\n                            type: \"string\",\n                            default_value: this.mode,\n                            hidden: true\n                        },\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 500,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                config_onchange: function() {\n                    this.set_name(this.config.get_value(\"name\"));\n                    this.request_draw({ clear_tile_cache: true });\n                },\n\n                /**\n     * Additional initialization required before drawing track for the first time.\n     */\n                predraw_init: function() {\n                    var track = this;\n                    return $.getJSON(\n                        track.dataset.url(),\n                        {\n                            data_type: \"data\",\n                            stats: true,\n                            chrom: track.view.chrom,\n                            low: 0,\n                            high: track.view.max_high,\n                            hda_ldda: track.dataset.get(\"hda_ldda\")\n                        },\n                        function(result) {\n                            var data = result.data;\n                        }\n                    );\n                },\n\n                /**\n     * Draw tile.\n     */\n                draw_tile: function(result, ctx, mode, region, w_scale) {\n                    // Paint onto canvas.\n                    var canvas = ctx.canvas,\n                        painter = new painters.DiagonalHeatmapPainter(\n                            result.data,\n                            region.get(\"start\"),\n                            region.get(\"end\"),\n                            this.config.to_key_value_dict(),\n                            mode\n                        );\n                    painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n                    return new Tile(this, region, w_scale, canvas, result.data);\n                }\n            }\n        );\n\n        /**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\n        var FeatureTrack = function(view, container, obj_dict) {\n            TiledTrack.call(this, view, container, obj_dict);\n            this.container_div.addClass(\"feature-track\");\n            this.summary_draw_height = 30;\n            this.slotters = {};\n            this.start_end_dct = {};\n            this.left_offset = 200;\n\n            // this.painter = painters.LinkedFeaturePainter;\n            this.set_painter_from_config();\n        };\n        extend(\n            FeatureTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            {\n                display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"block_color\",\n                            label: \"Block color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"reverse_strand_color\",\n                            label: \"Antisense strand color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"label_color\",\n                            label: \"Label color\",\n                            type: \"color\",\n                            default_value: \"black\"\n                        },\n                        {\n                            key: \"show_counts\",\n                            label: \"Show summary counts\",\n                            type: \"bool\",\n                            default_value: true,\n                            help:\n                                \"Show the number of items in each bin when drawing summary histogram\"\n                        },\n                        {\n                            key: \"min_value\",\n                            label: \"Histogram minimum\",\n                            type: \"float\",\n                            default_value: undefined,\n                            help: \"clear value to set automatically\"\n                        },\n                        {\n                            key: \"max_value\",\n                            label: \"Histogram maximum\",\n                            type: \"float\",\n                            default_value: undefined,\n                            help: \"clear value to set automatically\"\n                        },\n                        {\n                            key: \"connector_style\",\n                            label: \"Connector style\",\n                            type: \"select\",\n                            default_value: \"fishbones\",\n                            options: [\n                                {\n                                    label: \"Line with arrows\",\n                                    value: \"fishbone\"\n                                },\n                                { label: \"Arcs\", value: \"arcs\" }\n                            ]\n                        },\n                        {\n                            key: \"mode\",\n                            type: \"string\",\n                            default_value: this.mode,\n                            hidden: true\n                        },\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 0,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                config_onchange: function() {\n                    this.set_name(this.config.get_value(\"name\"));\n                    this.set_painter_from_config();\n                    this.request_draw({ clear_tile_cache: true });\n                },\n\n                set_painter_from_config: function() {\n                    if (this.config.get_value(\"connector_style\") === \"arcs\") {\n                        this.painter = painters.ArcLinkedFeaturePainter;\n                    } else {\n                        this.painter = painters.LinkedFeaturePainter;\n                    }\n                },\n\n                /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n                postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                    TiledTrack.prototype.postdraw_actions.call(\n                        this,\n                        tiles,\n                        width,\n                        w_scale,\n                        clear_after\n                    );\n\n                    var track = this,\n                        i,\n                        line_track_tiles = _.filter(tiles, function(t) {\n                            return t instanceof LineTrackTile;\n                        });\n\n                    //\n                    // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n                    // are labeled incomplete on the tile level because they cannot be completely drawn.\n                    //\n                    if (line_track_tiles.length === 0) {\n                        // Gather incomplete features together.\n                        var all_incomplete_features = {};\n                        _.each(_.pluck(tiles, \"incomplete_features\"), function(\n                            inc_features\n                        ) {\n                            _.each(inc_features, function(feature) {\n                                all_incomplete_features[feature[0]] = feature;\n                            });\n                        });\n\n                        // Draw incomplete features on each tile.\n                        var self = this;\n                        _.each(tiles, function(tile) {\n                            // Remove features already drawn on tile originally.\n                            var tile_incomplete_features = _.omit(\n                                all_incomplete_features,\n                                _.map(tile.incomplete_features, function(f) {\n                                    return f[0];\n                                })\n                            );\n\n                            // Remove features already drawn on tile in past postdraw actions.\n                            tile_incomplete_features = _.omit(\n                                tile_incomplete_features,\n                                _.keys(tile.other_tiles_features_drawn)\n                            );\n\n                            // Draw tile's incomplete features.\n                            if (_.size(tile_incomplete_features) !== 0) {\n                                // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                                // canvas, and then draw incomplete features on the new canvas.\n                                var features = {\n                                        data: _.values(tile_incomplete_features)\n                                    },\n                                    new_canvas = self.view.canvas_manager.new_canvas(),\n                                    new_canvas_ctx = new_canvas.getContext(\n                                        \"2d\"\n                                    );\n                                new_canvas.height = Math.max(\n                                    tile.canvas.height,\n                                    self.get_canvas_height(\n                                        features,\n                                        tile.mode,\n                                        tile.w_scale,\n                                        100\n                                    )\n                                );\n                                new_canvas.width = tile.canvas.width;\n                                new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                                new_canvas_ctx.translate(track.left_offset, 0);\n                                var new_tile = self.draw_tile(\n                                    features,\n                                    new_canvas_ctx,\n                                    tile.mode,\n                                    tile.region,\n                                    tile.w_scale,\n                                    tile.seq_data\n                                );\n                                $(tile.canvas).replaceWith($(new_tile.canvas));\n                                tile.canvas = new_canvas;\n                                _.extend(\n                                    tile.other_tiles_features_drawn,\n                                    all_incomplete_features\n                                );\n                            }\n                        });\n                    }\n\n                    // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n                    /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n                    //\n                    // Update filter attributes, UI.\n                    //\n\n                    // Update filtering UI.\n                    if (track.filters_manager) {\n                        var filters = track.filters_manager.filters,\n                            f;\n                        for (f = 0; f < filters.length; f++) {\n                            filters[f].update_ui_elt();\n                        }\n\n                        // Determine if filters are available; this is based on the tiles' data.\n                        // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n                        var filters_available = false,\n                            example_feature,\n                            filter;\n                        for (i = 0; i < tiles.length; i++) {\n                            if (tiles[i].data.length) {\n                                example_feature = tiles[i].data[0];\n                                for (f = 0; f < filters.length; f++) {\n                                    filter = filters[f];\n                                    if (\n                                        filter.applies_to(example_feature) &&\n                                        filter.min !== filter.max\n                                    ) {\n                                        filters_available = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n\n                        // If filter availability changed, hide filter div if necessary and update menu.\n                        if (track.filters_available !== filters_available) {\n                            track.filters_available = filters_available;\n                            if (!track.filters_available) {\n                                track.filters_manager.hide();\n                            }\n                            track.update_icons();\n                        }\n                    }\n\n                    //\n                    // If not all features slotted, show icon for showing more rows (slots).\n                    //\n                    if (tiles[0] instanceof FeatureTrackTile) {\n                        var all_slotted = true;\n                        for (i = 0; i < tiles.length; i++) {\n                            if (!tiles[i].all_slotted) {\n                                all_slotted = false;\n                                break;\n                            }\n                        }\n                        this.action_icons.show_more_rows_icon.toggle(\n                            !all_slotted\n                        );\n                    } else {\n                        this.action_icons.show_more_rows_icon.hide();\n                    }\n                },\n\n                /**\n     * Update track interface to show display mode being used.\n     */\n                update_auto_mode: function(mode) {\n                    if (this.mode === \"Auto\") {\n                        if (mode === \"no_detail\") {\n                            mode = \"feature spans\";\n                        }\n                        this.action_icons.mode_icon.attr(\n                            \"title\",\n                            \"Set display mode (now: Auto/\" + mode + \")\"\n                        );\n                    }\n                },\n\n                /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n                incremental_slots: function(level, features, mode) {\n                    // Get/create incremental slots for level. If display mode changed,\n                    // need to create new slots.\n\n                    var dummy_context = this.view.canvas_manager.dummy_context,\n                        slotter = this.slotters[level];\n                    if (!slotter || slotter.mode !== mode) {\n                        slotter = new slotting.FeatureSlotter(\n                            level,\n                            mode,\n                            MAX_FEATURE_DEPTH,\n                            function(x) {\n                                return dummy_context.measureText(x);\n                            }\n                        );\n                        this.slotters[level] = slotter;\n                    }\n\n                    return slotter.slot_features(features);\n                },\n\n                /**\n     * Returns appropriate display mode based on data.\n     */\n                get_mode: function(data) {\n                    var mode;\n                    // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n                    if (data.extra_info === \"no_detail\" || this.is_overview) {\n                        mode = \"no_detail\";\n                    } else {\n                        // Choose b/t Squish and Pack.\n                        // Proxy measures for using Squish:\n                        // (a) error message re: limiting number of features shown;\n                        // (b) X number of features shown;\n                        // (c) size of view shown.\n                        // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n                        // fix this so that tiles are redrawn as necessary to use the same mode.\n                        //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n                        //     (result.data && result.data.length > 2000) ||\n                        //var data = result.data;\n                        // if ( (data.length && data.length < 4) ||\n                        //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n                        if (\n                            this.view.high - this.view.low >\n                            MIN_SQUISH_VIEW_WIDTH\n                        ) {\n                            mode = \"Squish\";\n                        } else {\n                            mode = \"Pack\";\n                        }\n                    }\n                    return mode;\n                },\n\n                /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n                get_canvas_height: function(\n                    result,\n                    mode,\n                    w_scale,\n                    canvas_width\n                ) {\n                    if (\n                        mode === \"Coverage\" ||\n                        result.dataset_type === \"bigwig\"\n                    ) {\n                        return this.summary_draw_height;\n                    } else {\n                        // All other modes require slotting.\n                        var rows_required = this.incremental_slots(\n                            w_scale,\n                            result.data,\n                            mode\n                        );\n                        // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n                        // works as a static function.\n                        var dummy_painter = new this.painter(\n                            null,\n                            null,\n                            null,\n                            this.config.to_key_value_dict(),\n                            mode\n                        );\n                        return Math.max(\n                            this.min_height_px,\n                            dummy_painter.get_required_height(\n                                rows_required,\n                                canvas_width\n                            )\n                        );\n                    }\n                },\n\n                /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n                draw_tile: function(\n                    result,\n                    ctx,\n                    mode,\n                    region,\n                    w_scale,\n                    ref_seq,\n                    cur_tile\n                ) {\n                    var track = this,\n                        canvas = ctx.canvas,\n                        tile_low = region.get(\"start\"),\n                        tile_high = region.get(\"end\"),\n                        left_offset = this.left_offset;\n\n                    // If data is line track data, draw line track tile.\n                    if (result.dataset_type === \"bigwig\") {\n                        return this._draw_line_track_tile(\n                            result,\n                            ctx,\n                            mode,\n                            region,\n                            w_scale\n                        );\n                    }\n\n                    // Handle row-by-row tracks\n\n                    // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n                    var filtered = [],\n                        slots = this.slotters[w_scale].slots,\n                        all_slotted = true;\n                    if (result.data) {\n                        var filters = this.filters_manager.filters;\n                        for (\n                            var i = 0, len = result.data.length;\n                            i < len;\n                            i++\n                        ) {\n                            var feature = result.data[i];\n                            var hide_feature = false;\n                            var filter;\n                            for (\n                                var f = 0, flen = filters.length;\n                                f < flen;\n                                f++\n                            ) {\n                                filter = filters[f];\n                                filter.update_attrs(feature);\n                                if (!filter.keep(feature)) {\n                                    hide_feature = true;\n                                    break;\n                                }\n                            }\n                            if (!hide_feature) {\n                                // Feature visible.\n                                filtered.push(feature);\n                                // Set flag if not slotted.\n                                if (!(feature[0] in slots)) {\n                                    all_slotted = false;\n                                }\n                            }\n                        }\n                    }\n\n                    // Create painter.\n                    var filter_alpha_scaler = this.filters_manager.alpha_filter\n                            ? new FilterScaler(\n                                  this.filters_manager.alpha_filter\n                              )\n                            : null,\n                        filter_height_scaler = this.filters_manager\n                            .height_filter\n                            ? new FilterScaler(\n                                  this.filters_manager.height_filter\n                              )\n                            : null,\n                        painter = new this.painter(\n                            filtered,\n                            tile_low,\n                            tile_high,\n                            this.config.to_key_value_dict(),\n                            mode,\n                            filter_alpha_scaler,\n                            filter_height_scaler,\n                            // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                            ref_seq,\n                            // Only the ReadPainer will use this function\n                            function(b) {\n                                return track.view.get_base_color(b);\n                            }\n                        );\n                    var feature_mapper = null;\n\n                    ctx.fillStyle = this.config.get_value(\"block_color\");\n                    ctx.font = ctx.canvas.manager.default_font;\n                    ctx.textAlign = \"right\";\n\n                    if (result.data) {\n                        // Draw features.\n                        var draw_results = painter.draw(\n                            ctx,\n                            canvas.width,\n                            canvas.height,\n                            w_scale,\n                            slots\n                        );\n                        feature_mapper = draw_results.feature_mapper;\n                        incomplete_features = draw_results.incomplete_features;\n                        feature_mapper.translation = -left_offset;\n                    }\n\n                    // If not drawing on current tile, create new tile.\n                    if (!cur_tile) {\n                        return new FeatureTrackTile(\n                            track,\n                            region,\n                            w_scale,\n                            canvas,\n                            result.data,\n                            mode,\n                            result.message,\n                            all_slotted,\n                            feature_mapper,\n                            incomplete_features,\n                            ref_seq\n                        );\n                    }\n                }\n            }\n        );\n\n        /**\n * Displays variant data.\n */\n        var VariantTrack = function(view, container, obj_dict) {\n            TiledTrack.call(this, view, container, obj_dict);\n            this.painter = painters.VariantPainter;\n            this.summary_draw_height = 30;\n\n            // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n            // variant is drawn when variant is at start of tile.\n            this.left_offset = 30;\n        };\n\n        extend(\n            VariantTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            {\n                display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"color\",\n                            label: \"Histogram color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"show_sample_data\",\n                            label: \"Show sample data\",\n                            type: \"bool\",\n                            default_value: true\n                        },\n                        {\n                            key: \"show_labels\",\n                            label: \"Show summary and sample labels\",\n                            type: \"bool\",\n                            default_value: true\n                        },\n                        {\n                            key: \"summary_height\",\n                            label: \"Locus summary height\",\n                            type: \"float\",\n                            default_value: 20\n                        },\n                        {\n                            key: \"mode\",\n                            type: \"string\",\n                            default_value: this.mode,\n                            hidden: true\n                        },\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 0,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                config_onchange: function() {\n                    this.set_name(this.config.get_value(\"name\"));\n                    this.request_draw({ clear_tile_cache: true });\n                },\n\n                /**\n     * Draw tile.\n     */\n                draw_tile: function(result, ctx, mode, region, w_scale) {\n                    // Data could be coverage data or variant data.\n                    if (result.dataset_type === \"bigwig\") {\n                        return this._draw_line_track_tile(\n                            result,\n                            ctx,\n                            \"Histogram\",\n                            region,\n                            w_scale\n                        );\n                    } else {\n                        // result.dataset_type === 'variant'\n                        var view = this.view,\n                            painter = new this.painter(\n                                result.data,\n                                region.get(\"start\"),\n                                region.get(\"end\"),\n                                this.config.to_key_value_dict(),\n                                mode,\n                                function(b) {\n                                    return view.get_base_color(b);\n                                }\n                            );\n                        painter.draw(\n                            ctx,\n                            ctx.canvas.width,\n                            ctx.canvas.height,\n                            w_scale\n                        );\n                        return new Tile(\n                            this,\n                            region,\n                            w_scale,\n                            ctx.canvas,\n                            result.data\n                        );\n                    }\n                },\n\n                /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n                get_canvas_height: function(\n                    result,\n                    mode,\n                    w_scale,\n                    canvas_width\n                ) {\n                    if (result.dataset_type === \"bigwig\") {\n                        return this.summary_draw_height;\n                    } else {\n                        // HACK: sample_names is not be defined when dataset definition is fetched before\n                        // dataset is complete (as is done when running tools). In that case, fall back on\n                        // # of samples in data. This can be fixed by re-requesting dataset definition\n                        // in init.\n                        var num_samples = this.dataset.get_metadata(\n                            \"sample_names\"\n                        )\n                            ? this.dataset.get_metadata(\"sample_names\").length\n                            : 0;\n                        if (num_samples === 0 && result.data.length !== 0) {\n                            // Sample data is separated by commas, so this computes # of samples:\n                            num_samples = result.data[0][7].match(/,/g);\n                            if (num_samples === null) {\n                                num_samples = 1;\n                            } else {\n                                num_samples = num_samples.length + 1;\n                            }\n                        }\n\n                        var dummy_painter = new this.painter(\n                            null,\n                            null,\n                            null,\n                            this.config.to_key_value_dict(),\n                            mode\n                        );\n                        return dummy_painter.get_required_height(num_samples);\n                    }\n                },\n\n                /**\n     * Additional initialization required before drawing track for the first time.\n     */\n                predraw_init: function() {\n                    var deferreds = [Track.prototype.predraw_init.call(this)];\n                    // FIXME: updating dataset metadata is only needed for visual analysis. Can\n                    // this be moved somewhere else?\n                    if (!this.dataset.get_metadata(\"sample_names\")) {\n                        deferreds.push(this.dataset.fetch());\n                    }\n                    return deferreds;\n                },\n\n                /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n                postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                    TiledTrack.prototype.postdraw_actions.call(\n                        this,\n                        tiles,\n                        width,\n                        w_scale,\n                        clear_after\n                    );\n\n                    var line_track_tiles = _.filter(tiles, function(t) {\n                        return t instanceof LineTrackTile;\n                    });\n\n                    // Add summary/sample labels if needed and not already included.\n                    var sample_names = this.dataset.get_metadata(\n                        \"sample_names\"\n                    );\n                    if (\n                        line_track_tiles.length === 0 &&\n                        this.config.get_value(\"show_labels\") &&\n                        sample_names &&\n                        sample_names.length > 1\n                    ) {\n                        var font_size;\n\n                        // Add and/or style labels.\n                        if (\n                            this.container_div.find(\".yaxislabel.variant\")\n                                .length === 0\n                        ) {\n                            // Add summary and sample labels.\n\n                            // Add summary label to middle of summary area.\n                            font_size =\n                                this.config.get_value(\"summary_height\") / 2;\n                            this.tiles_div.prepend(\n                                $(\"<div/>\")\n                                    .text(\"Summary\")\n                                    .addClass(\"yaxislabel variant top\")\n                                    .css({\n                                        \"font-size\": font_size + \"px\",\n                                        top:\n                                            (this.config.get_value(\n                                                \"summary_height\"\n                                            ) -\n                                                font_size) /\n                                                2 +\n                                            \"px\"\n                                    })\n                            );\n\n                            // Show sample labels.\n                            if (this.config.get_value(\"show_sample_data\")) {\n                                var samples_div_html = sample_names.join(\n                                    \"<br/>\"\n                                );\n\n                                this.tiles_div.prepend(\n                                    $(\"<div/>\")\n                                        .html(samples_div_html)\n                                        .addClass(\n                                            \"yaxislabel variant top sample\"\n                                        )\n                                        .css({\n                                            top: this.config.get_value(\n                                                \"summary_height\"\n                                            )\n                                        })\n                                );\n                            }\n                        }\n\n                        // Style labels.\n\n                        // Match sample font size to mode.\n                        font_size = (this.mode === \"Squish\" ? 5 : 10) + \"px\";\n                        $(this.tiles_div)\n                            .find(\".sample\")\n                            .css({\n                                \"font-size\": font_size,\n                                \"line-height\": font_size\n                            });\n                        // Color labels to preference color.\n                        $(this.tiles_div)\n                            .find(\".yaxislabel\")\n                            .css(\"color\", this.config.get_value(\"label_color\"));\n                    } else {\n                        // Remove all labels.\n                        this.container_div.find(\".yaxislabel.variant\").remove();\n                    }\n                }\n            }\n        );\n\n        /**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\n        var ReadTrack = function(view, container, obj_dict) {\n            FeatureTrack.call(this, view, container, obj_dict);\n            this.painter = painters.ReadPainter;\n            this.update_icons();\n        };\n\n        extend(\n            ReadTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            FeatureTrack.prototype,\n            {\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"block_color\",\n                            label: \"Histogram color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"detail_block_color\",\n                            label: \"Sense strand block color\",\n                            type: \"color\",\n                            default_value: \"#AAAAAA\"\n                        },\n                        {\n                            key: \"reverse_strand_color\",\n                            label: \"Antisense strand block color\",\n                            type: \"color\",\n                            default_value: \"#DDDDDD\"\n                        },\n                        {\n                            key: \"label_color\",\n                            label: \"Label color\",\n                            type: \"color\",\n                            default_value: \"black\"\n                        },\n                        {\n                            key: \"show_insertions\",\n                            label: \"Show insertions\",\n                            type: \"bool\",\n                            default_value: false\n                        },\n                        {\n                            key: \"show_differences\",\n                            label: \"Show differences only\",\n                            type: \"bool\",\n                            default_value: true\n                        },\n                        {\n                            key: \"show_counts\",\n                            label: \"Show summary counts\",\n                            type: \"bool\",\n                            default_value: true\n                        },\n                        {\n                            key: \"mode\",\n                            type: \"string\",\n                            default_value: this.mode,\n                            hidden: true\n                        },\n                        {\n                            key: \"min_value\",\n                            label: \"Histogram minimum\",\n                            type: \"float\",\n                            default_value: undefined,\n                            help: \"clear value to set automatically\"\n                        },\n                        {\n                            key: \"max_value\",\n                            label: \"Histogram maximum\",\n                            type: \"float\",\n                            default_value: undefined,\n                            help: \"clear value to set automatically\"\n                        },\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 0,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                config_onchange: function() {\n                    this.set_name(this.config.get_value(\"name\"));\n                    this.request_draw({ clear_tile_cache: true });\n                }\n            }\n        );\n\n        /**\n * Objects that can be added to a view.\n */\n        var addable_objects = {\n            CompositeTrack: CompositeTrack,\n            DrawableGroup: DrawableGroup,\n            DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n            FeatureTrack: FeatureTrack,\n            LineTrack: LineTrack,\n            ReadTrack: ReadTrack,\n            VariantTrack: VariantTrack,\n            // For backward compatibility, map vcf track to variant.\n            VcfTrack: VariantTrack\n        };\n\n        /**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\n        var object_from_template = function(template, view, container) {\n            if (\"copy\" in template) {\n                // Template is an object.\n                return template.copy(container);\n            } else {\n                // Template is a dictionary.\n                var drawable_type = template.obj_type;\n                // For backward compatibility:\n                if (!drawable_type) {\n                    drawable_type = template.track_type;\n                }\n                return new addable_objects[drawable_type](\n                    view,\n                    container,\n                    template\n                );\n            }\n        };\n\n        return {\n            TracksterView: TracksterView,\n            DrawableGroup: DrawableGroup,\n            LineTrack: LineTrack,\n            FeatureTrack: FeatureTrack,\n            DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n            ReadTrack: ReadTrack,\n            VariantTrack: VariantTrack,\n            CompositeTrack: CompositeTrack,\n            object_from_template: object_from_template\n        };\n    }\n);\n"]}