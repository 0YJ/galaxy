{"version":3,"sources":["viz/trackster/tracks.js"],"names":["define","_","visualization","viz_views","util","slotting","painters","filters_mod","data","tools_mod","config_mod","bbi","round","num","places","val","Math","pow","supportsByteRanges","url","promise","$","Deferred","ajax","type","beforeSend","xhr","setRequestHeader","success","result","status","resolve","extend","html_elt_js_obj_dict","is_container","element","obj","attr","moveable","handle_class","container_selector","element_js_obj","bind","handle","relative","e","d","child","container","top","bottom","i","parent","this","children","this_obj","parents","length","position","outerHeight","cur_container","offsetY","insertBefore","remove_drawable","add_drawable_before","insertAfter","add_drawable","get","is","find","prepend","append","hasClass","move_drawable","deltaY","addClass","removeClass","DATA_NOCONVERTER","CONTINUOUS_DATA_MODES","Drawable","view","obj_dict","id_counter","id","drag_handle_class","is_overview","action_icons","config","ConfigSettingCollection","from_models_and_saved_values","config_params","prefs","get_value","set_value","name","config_onchange","on","container_div","build_container_div","header_div","header","header_view","TrackHeaderView","model","$el","icons_div","hover","show","hide","prototype","action_icons_def","title","css_class","on_click_fn","drawable","toggle_icon","hide_contents","show_contents","ConfigSettingCollectionView","collection","render_in_modal","remove","key","label","default_value","hidden","init","changed","can_draw","enabled","request_draw","_draw","options","to_dict","set_name","new_name","old_name","revert_name","update_intro_div","update_icons","get_drawables","DrawableCollection","call","obj_type","drawables","unpack_drawables","drawables_array","object_from_template","dictified_drawables","push","to_key_value_dict","other","index","indexOf","splice","replace_drawable","old_drawable","new_drawable","update_html","replaceWith","new_position","get_tracks","track_type","queue","slice","tracks","shift","concat","DrawableGroup","content_div","appendTo","filters_manager","FiltersManager","after","parent_div","saved_filters_managers","old_manager","filters","visible","setup_multitrack_filtering","group","show_composite_track","clear_filters","_restore_filter_managers","clear_tile_cache","toggle","tiles_div","num_drawables","composite_icon","filters_icon","CompositeTrack","j","a_type","get_type","num_feature_tracks","can_composite","FeatureTrack","LineTrack","filter","shared_filters","remove_all","new_filter","filter_name","NumberFilter","add_filter","init_filters","composite_track","each","TracksterView","Backbone","View","initialize","chrom","vis_id","dbkey","stand_alone","undefined","label_tracks","tracks_to_be_redrawn","max_low","max_high","zoom_factor","min_separation","has_changes","load_chroms_deferred","render","canvas_manager","CanvasManager","ownerDocument","reset","requested_redraw","parent_element","top_container","browser_content_div","bottom_container","top_labeltrack","viewport_container","intro_div","text","click","select_datasets","Galaxy","root","f-dbkey","track","nav_container","prependTo","nav","overview","overview_viewport","overview_close","overview_highlight","overview_box_background","overview_box","default_overview_height","height","nav_controls","chrom_select","submit_nav","keyCode","which","go_to","location_span","stopPropagation","nav_input","tooltip","placement","low","high","css","select","focus","autocomplete","source","request","response","all_features","feature_search_deferreds","map","t","data_manager","search_features","term","dataset_features","when","apply","done","feature","value","minLength","hidden_input","zo_link","zoom_out","zi_link","zoom_in","load_chroms","change_chrom","trigger","pageX","current_x","offsetX","delta","delta_chrom","width","move_delta","reset_overview","clientX","original_low","current_height","clientY","new_scroll","scrollTop","proxy","left","min","startX","offset","abs","max","span","update_location","old_low","request_redraw","add_label_track","LabelTrack","window","resize_timer","clearTimeout","setTimeout","resize_window","document","redraw","get_base_color","base","toLowerCase","trigger_navigate","new_chrom","new_low","new_high","delay","timer","self","commatize","url_parms","chrom_data","dataType","chrom_info","reference","ref_track","ReferenceTrack","reference_track","html","len","chrom_option","prev_chroms","next_chroms","chrom_start_index","start_index","error","alert","then","found","grep","v","str","replace","chrom_pos","split","parseInt","move_fraction","fraction","current_chrom_span","data_fetch","redraw_on_move_fn","label_track","track_list","track_options","to","requestAnimationFrame","_redraw","floor","ceil","resolution_px_b","left_px","width_px","point","cur_center","new_half","resize_viewport","set_overview","overview_drawable","dataset","copy","postdraw_actions","TracksterTool","Tool","defaults","tool_state","set","remove_inputs","state_dict","get_inputs_dict","is_visible","ToolParameterView","events","change :input","param_div","param","update_value","update_event","target","TracksterToolView","set_visible","tool","keydown","param_view","run_tool_row","run_on_dataset_button","run_on_region","run_on_dataset","update_params","params","run","target_dataset_id","action","tool_id","track_data","modal","body","buttons","Close","region","GenomeRegion","start","end","url_params","regions","toJSON","current_track","track_name","tool_region_and_parameters_str","new_track","constructor","hda_ldda","init_for_tool_data","change_mode","mode","set_filters_manager","set_dataset","Dataset","success_callback","inputs","ss_deferred","ServerStateDeferred","ajax_settings","JSON","stringify","contentType","interval","success_fn","go","message","FilterScaler","default_val","Scaler","gen_val","feature_data","Number","MAX_VALUE","parseFloat","Tile","w_scale","canvas","html_elt","stale","predisplay_actions","LineTrackTile","FeatureTrackTile","all_slotted","feature_mapper","incomplete_features","seq_data","has_icons","other_tiles_features_drawn","Track","Model","dataset_check_type","data_url_extra_params","data_query_wait","GenomeDataManager","genome","Genome","chroms_info","data_mode_compatible","data_and_mode_compatible","can_subset","min_height_px","max_height_px","visible_height_px","resize","add_resize_handle","cancel_fn","unbind","ok_fn","regions_to_use","view_region","bookmarked_regions","elt","from_str","location","href","dataset_id","Collection","No","Yes","on_resize","in_handle","in_drag","drag_control","original_height","new_height","tile_cache","clear","ReadTrack","VariantTrack","show_message","msg_html","retry","init_deferred","data_type","getJSON","kind","valid_chroms","predraw_init","msg_elt","stats","min_value","max_value","mean","sd","set_default_value","TiledTrack","filters_available","Cache","left_offset","tool_view","dynamic_tool_div","overlay_div","slotters","max_rows","set_min_max","isNaN","new_mode","mode_icon","tools_icon","param_space_viz_icon","_gen_tile_cache_key","tile_region","before_draw","clear_after","resolution","tile_promise","tile_width","tile_index","tile_promises","tiles","draw_helper","tile","_add_yaxis_label","on_change","pref_name","make_text_editable","num_cols","on_finish","new_val","help_text","force","get_mode","update_auto_mode","display_mode","_get_drawables","get_elt","o","show_tile","get_tile_data","data_mode","m","tile_data","get_data","tile_drawn","set_elt","tracks_data","is_deferred","subset_entry","pop","drawing_modes","drawing_heights","get_canvas_height","new_canvas","tile_low","tile_high","ctx","getContext","translate","globalAlpha","globalCompositeOperation","draw_tile","canvas_width","_draw_line_track_tile","LinePainter","draw","ref_seq","tile_element","track_height","toString","values","join","dataset_type","extra_info","entry","range","tickDistance","log","new_div","screenPosition","display_modes","union","show_group","visible_height","init_deferreds","update_all_min_max","max_height","char_width_px","data_url","GenomeReferenceDataManager","new_visible","cur_visible","subset","font","manager","default_font","textAlign","c","str_len","fillStyle","fillText","BBIDataManager","DiagonalHeatmapTrack","DiagonalHeatmapPainter","summary_draw_height","start_end_dct","set_painter_from_config","help","painter","ArcLinkedFeaturePainter","LinkedFeaturePainter","all_incomplete_features","pluck","inc_features","tile_incomplete_features","omit","f","keys","size","features","new_canvas_ctx","drawImage","new_tile","update_ui_elt","example_feature","applies_to","show_more_rows_icon","incremental_slots","level","dummy_context","slotter","x","measureText","slot_features","rows_required","dummy_painter","get_required_height","cur_tile","filtered","slots","hide_feature","flen","update_attrs","keep","filter_alpha_scaler","alpha_filter","filter_height_scaler","height_filter","b","draw_results","translation","VariantPainter","num_samples","get_metadata","match","deferreds","fetch","line_track_tiles","sample_names","font_size","font-size","samples_div_html","line-height","ReadPainter","addable_objects","VcfTrack","template","drawable_type"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["define([\n    \"libs/underscore\",\n    \"viz/visualization\",\n    \"viz/viz_views\",\n    \"viz/trackster/util\",\n    \"viz/trackster/slotting\",\n    \"viz/trackster/painters\",\n    \"viz/trackster/filters\",\n    \"mvc/dataset/data\",\n    \"mvc/tool/tools\",\n    \"utils/config\",\n    \"viz/bbi-data-manager\",\n    \"ui/editable-text\",\n], function(_, visualization, viz_views, util, slotting, painters, filters_mod, data, tools_mod, config_mod, bbi) {\n\n\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = function(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = function(element, handle_class, container_selector, element_js_obj) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element.bind( \"drag\", { handle: \".\" + handle_class, relative: true }, function ( e, d ) {\n        var element = $(this),\n            parent = $(this).parent(),\n            // Only sorting amongst tracks and groups.\n            children = parent.children('.track,.group'),\n            this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n            child,\n            container,\n            top,\n            bottom,\n            i;\n\n        //\n        // Enable three types of dragging: (a) out of container; (b) into container;\n        // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n        //\n\n        // Handle dragging out of container.\n        container = $(this).parents(container_selector);\n        if (container.length !== 0) {\n            top = container.position().top;\n            bottom = top + container.outerHeight();\n            var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n            if (d.offsetY < top) {\n                // Moving above container.\n                $(this).insertBefore(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable_before(this_obj, cur_container);\n                return;\n            }\n            else if (d.offsetY > bottom) {\n                // Moving below container.\n                $(this).insertAfter(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle dragging into container. Child is appended to container's content_div.\n        container = null;\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            top = child.position().top;\n            bottom = top + child.outerHeight();\n            // Dragging into container if child is a container and offset is inside container.\n            if ( child.is(container_selector) && this !== child.get(0) &&\n                 d.offsetY >= top && d.offsetY <= bottom ) {\n                // Append/prepend based on where offsetY is closest to and return.\n                if (d.offsetY - top < bottom - d.offsetY) {\n                    child.find(\".content-div\").prepend(this);\n                }\n                else {\n                    child.find(\".content-div\").append(this);\n                }\n                // Update containers. Object may not have container if it is being moved quickly.\n                if (this_obj.container) {\n                    this_obj.container.remove_drawable(this_obj);\n                }\n                html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle sibling movement, aka sorting.\n\n        // Determine new position\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            if ( d.offsetY < child.position().top &&\n                 // Cannot move tracks above reference track or intro div.\n                 !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\")) ) {\n                break;\n            }\n        }\n\n        // If not already in the right place, move. Need\n        // to handle the end specially since we don't have\n        // insert at index\n        if ( i === children.length ) {\n            if ( this !== children.get(i - 1) ) {\n                parent.append(this);\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n            }\n        }\n        else if ( this !== children.get(i) ) {\n            $(this).insertBefore( children.get(i) );\n            // Need to adjust insert position if moving down because move is changing\n            // indices of all list items.\n            html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, (d.deltaY > 0 ? i-1 : i) );\n        }\n    }).bind(\"dragstart\", function() {\n        $(this).addClass('dragging');\n    }).bind(\"dragend\", function() {\n        $(this).removeClass('dragging');\n    });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar\n    // Padding at the top of tracks for error messages\n    ERROR_PADDING = 20,\n    // Maximum number of rows un a slotted track\n    MAX_FEATURE_DEPTH = 100,\n    // Minimum width for window for squish to be used.\n    MIN_SQUISH_VIEW_WIDTH = 12000,\n    // Number of pixels per tile, not including left offset.\n    TILE_SIZE = 400,\n    DEFAULT_DATA_QUERY_WAIT = 5000,\n    // Maximum number of chromosomes that are selectable at any one time.\n    MAX_CHROMS_SELECTABLE = 100,\n    DATA_ERROR = \"Cannot display dataset due to an error. \",\n    DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n    DATA_NONE = \"No data for this chrom/contig.\",\n    DATA_PENDING = \"Preparing data. This can take a while for a large dataset. \" +\n                   \"If the visualization is saved and closed, preparation will continue in the background.\",\n    DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n    DATA_LOADING = \"Loading data...\",\n    DATA_OK = \"Ready for display\",\n    TILE_CACHE_SIZE = 10,\n    DATA_CACHE_SIZE = 20,\n\n    // Numerical/continuous data display modes.\n    CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: 'HEAD',\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) { Drawable.id_counter = 0; }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value('name')) {\n        this.config.set_value('name', obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on('change', this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            function() { icons_div.show(); }, function() { icons_div.hide(); }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if ( drawable.config.get_value('content_visible') ) {\n                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value('content_visible', false);\n            }\n            else {\n                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                drawable.config.set_value('content_visible', true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal('Configure Track');\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: 'name', label: 'Name', type: 'text', default_value: '' },\n        { key: 'content_visible', type: 'bool', default_value: true, hidden: true }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value('content_visible')) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value('name');\n        this.config.set_value('name', new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value('name', this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function () {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0),\n            tracks = [],\n            drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            }\n            else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\").addClass(\"content-div\").attr(\"id\", \"group_\" + this.id + \"_content_div\").appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after( $(\"<div style='clear: both'/>\") );\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if ('drawables' in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if ('filters' in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [\n        Drawable.prototype.action_icons_def[0],\n        Drawable.prototype.action_icons_def[1],\n        // Replace group with composite track.\n        {\n            name: \"composite_icon\",\n            title: \"Show composite track\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(group) {\n                $(\".tooltip\").remove();\n                group.show_composite_track();\n            }\n        },\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(group) {\n                // TODO: update Tooltip text.\n                if (group.filters_manager.visible()) {\n                    // Hiding filters.\n                    group.filters_manager.clear_filters();\n                    group._restore_filter_managers();\n                    // TODO: maintain current filter by restoring and setting saved manager's\n                    // settings to current/shared manager's settings.\n                    // TODO: need to restore filter managers when moving drawable outside group.\n                }\n                else {\n                    // Showing filters.\n                    group.setup_multitrack_filtering();\n                    group.request_draw({ clear_tile_cache: true });\n                }\n                group.filters_manager.toggle();\n            }\n        },\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    build_container_div: function() {\n        var container_div = $(\"<div/>\").addClass(\"group\").attr(\"id\", \"group_\" + this.id);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function () {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        }\n        else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        }\n        else { // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i, j, drawable,\n                same_type = true,\n                a_type = this.drawables[0].get_type(),\n                num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    can_composite = false;\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            }\n            else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {},\n                    filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                var\n                    filters,\n                    new_filter,\n                    min,\n                    max;\n                for (var filter_name in shared_filters) {\n                    filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        new_filter = new filters_mod.NumberFilter( {\n                                        name: filters[0].name,\n                                        index: filters[0].index\n                                        } );\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            }\n            else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value('name'),\n            drawables: this.drawables\n        });\n        var index = this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), { \"filters\": this.filters_manager.to_dict() });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function(options) {\n        _.each(this.drawables, function(d) {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = (obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true);\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager( this.container.get(0).ownerDocument );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values( [\n                { key: 'name', label: 'Name', type: 'text', default_value: '' },\n                { key: 'a_color', label: 'A Color', type: 'color', default_value: \"#FF0000\" },\n                { key: 'c_color', label: 'C Color', type: 'color', default_value: \"#00FF00\" },\n                { key: 'g_color', label: 'G Color', type: 'color', default_value: \"#0000FF\" },\n                { key: 't_color', label: 'T Color', type: 'color', default_value: \"#FF00FF\" },\n                { key: 'n_color', label: 'N Color', type: 'color', default_value: \"#AAAAAA\" }\n            ], { name: obj_dict.name });\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container,\n            view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\").addClass(\"top-container\").appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\").addClass(\"content\").appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\").addClass(\"bottom-container\").appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\").addClass(\"top-labeltrack\").appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\").addClass(\"viewport-container\").attr(\"id\", \"viewport-container\").appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\").addClass(\"intro\").appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\").text(\"Add Datasets to Visualization\").addClass(\"action-button\").appendTo(this.intro_div).click(function () {\n            visualization.select_datasets(Galaxy.root + \"visualization/list_current_history_datasets\", Galaxy.root + \"api/datasets\", { 'f-dbkey': view.dbkey }, function(tracks) {\n                _.each(tracks, function(track) {\n                    view.add_drawable( object_from_template(track, view, view) );\n                });\n            });\n        });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\").addClass(\"trackster-nav-container\").prependTo(this.top_container);\n        this.nav = $(\"<div/>\").addClass(\"trackster-nav\").appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\").addClass(\"overview\").appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\").addClass(\"overview-viewport\").appendTo(this.overview);\n        this.overview_close = $(\"<a/>\").attr(\"title\", \"Close overview\")\n                                       .addClass(\"icon-button overview-close tooltip\")\n                                       .hide()\n                                       .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\").addClass(\"overview-highlight\").hide().appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\").addClass(\"overview-boxback\").appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\").addClass(\"overview-box\").appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\").addClass(\"nav-controls\").appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\").attr({ \"name\": \"chrom\"}).addClass('chrom-nav').append(\"<option value=''>Loading</option>\").appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27 ) {\n                if ((e.keyCode || e.which) !== 27) { // Not escape key\n                    view.go_to( $(this).val() );\n                }\n                $(this).hide();\n                $(this).val('');\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\").addClass(\"nav-input\").hide().bind(\"keyup focusout\", submit_nav).appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\").addClass(\"location\").attr('title', 'Click to change location').tooltip( { placement: 'bottom' } ).appendTo(this.nav_controls);\n        this.location_span.click(function() {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [],\n                        feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), function(t) {\n                        return t.data_manager.search_features(request.term).success(function(dataset_features) {\n                            all_features = all_features.concat(dataset_features);\n                        });\n                    });\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(function() {\n                        response($.map(all_features, function(feature) {\n                            return {\n                                label: feature[0],\n                                value: feature[1]\n                            };\n                        }));\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\").attr(\"type\", \"hidden\").val(this.vis_id).appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\").attr(\"id\", \"zoom-out\").attr(\"title\", \"Zoom out\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_out(); }).appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\").attr(\"id\", \"zoom-in\").attr(\"title\", \"Zoom in\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_in(); }).appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({low: 0});\n        this.chrom_select.bind(\"change\", function() {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function( e ) {\n            $(this).find(\"input\").trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function( e ) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box.bind(\"dragstart\", function( e, d ) {\n            this.current_x = d.offsetX;\n        }).bind(\"drag\", function( e, d ) {\n            var delta = d.offsetX - this.current_x;\n            this.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low) );\n            view.move_delta(-delta_chrom);\n        });\n\n        this.overview_close.click(function() {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container.bind( \"draginit\", function( e, d ) {\n            // Disable interaction if started in scrollbar (for webkit)\n            if ( e.clientX > view.viewport_container.width() - 16 ) {\n                return false;\n            }\n        }).bind( \"dragstart\", function( e, d ) {\n            d.original_low = view.low;\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n        }).bind( \"drag\", function( e, d ) {\n            var container = $(this);\n            var delta = d.offsetX - d.current_x;\n            var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n            container.scrollTop(new_scroll);\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n            view.move_delta(delta_chrom);\n        });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack.bind( \"dragstart\", function( e, d ) {\n            return $(\"<div/>\").addClass('zoom-area').css(\n                \"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1\n            ).appendTo( $(this) );\n        }).bind( \"drag\", function( e, d ) {\n            $( d.proxy ).css({ left: Math.min( e.pageX, d.startX ) - view.container.offset().left, width: Math.abs( e.pageX - d.startX ) });\n            var min = Math.min(e.pageX, d.startX ) - view.container.offset().left,\n                max = Math.max(e.pageX, d.startX ) - view.container.offset().left,\n                span = (view.high - view.low),\n                width = view.viewport_container.width();\n            view.update_location( Math.round(min / width * span) + view.low,\n                                  Math.round(max / width * span) + view.low );\n        }).bind( \"dragend\", function( e, d ) {\n            var min = Math.min(e.pageX, d.startX),\n                max = Math.max(e.pageX, d.startX),\n                span = (view.high - view.low),\n                width = view.viewport_container.width(),\n                old_low = view.low;\n            view.low = Math.round(min / width * span) + old_low;\n            view.high = Math.round(max / width * span) + old_low;\n            $(d.proxy).remove();\n            view.request_redraw();\n        });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track( new LabelTrack( this, { content_div: this.top_labeltrack } ) );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(function () {\n                view.resize_window();\n            }, 500 );\n        });\n        $(document).bind(\"redraw\", function() { view.redraw(); });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(base.toLowerCase() + '_color') ||\n               this.config.get_value('n_color');\n    }\n\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend( TracksterView.prototype, DrawableCollection.prototype, {\n\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(function () {\n                self.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n            }, 500 );\n        }\n        else {\n            view.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text( util.commatize(low) + ' - ' + util.commatize(high) );\n        this.nav_input.val( this.chrom + ':' + util.commatize(low) + '-' + util.commatize(high) );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var\n            view = this,\n            chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function (result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n                \n                view.chrom_select.html('');\n                view.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option  = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append($('<option value=\"previous\">Previous ' + MAX_CHROMS_SELECTABLE + '</option>'));\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append($('<option value=\"next\">Next ' + MAX_CHROMS_SELECTABLE + '</option>'));\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({low: this.chrom_start_index - MAX_CHROMS_SELECTABLE});\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({low: this.chrom_start_index + MAX_CHROMS_SELECTABLE});\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, function(v, i) {\n            return v.chrom === chrom;\n        })[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({'chrom': chrom}, function() { view.change_chrom(chrom, low, high); });\n            return;\n        }\n        else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len-1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            }\n            else {\n                // Low and/or high is defined.\n                view.low = (low !== undefined ? Math.max(low, 0) : 0);\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                }\n                else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, '');\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, ' ');\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/),\n            chrom = chrom_pos[0],\n            new_low = (chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined),\n            new_high = (chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined);\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(function() {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on('change', function() {\n            self.changed();\n        });\n    },\n\n    add_label_track: function (label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this,\n            // Either redrawing a single drawable or all view's drawables.\n            track_list = (drawable ? [drawable] : view.drawables);\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, function(track) {\n            var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n                return to[0] === track;\n            });\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            }\n            else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(function() { view._redraw(); });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low,\n            high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = ( this.low / (this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var width_px = ( (this.high - this.low)/(this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var min_width_px = 13;\n\n        this.overview_box.css({ left: left_px, width: Math.max(min_width_px, width_px) }).show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px)/2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({ left: left_px, width: width_px });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, function(track_options) {\n            var track = track_options[0],\n                options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, function(label_track) {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function (point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span / this.zoom_factor) / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function () {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span * this.zoom_factor) / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height( this.container.height() - this.top_container.height() - this.bottom_container.height() );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var\n            overview_drawable = drawable.copy( { content_div: this.overview_viewport } ),\n            view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = function() {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(view.overview_drawable.content_div.height() + view.overview_box.outerHeight());\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set('hidden', hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs( [ 'data', 'hidden_data', 'conditional' ] );\n    },\n\n    state_dict: function(options) {\n        return _.extend( this.get_inputs_dict(), { hidden: !this.is_visible() } );\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\n var ToolParameterView = Backbone.View.extend({\n\n    events: {\n        'change :input': 'update_value'\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\"),\n            param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\").addClass(\"param-label\").text(param.get('label')).appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\").addClass(\"param-input\").html(param.get('html')).appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get('value'));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n });\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n\n    initialize: function(options) {\n        this.model.on('change:hidden', this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n            tool = this.model,\n            parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div.bind(\"drag\", function(e) {\n            e.stopPropagation();\n        }).click(function(e) {\n            e.stopPropagation();\n        }).bind(\"dblclick\", function(e) {\n            e.stopPropagation();\n        }).keydown(function(e) { e.stopPropagation(); });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\").appendTo(parent_div).text(tool.get('name'));\n        tool.get('inputs').each(function(param) {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() { $(this).select(); });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\").addClass(\"param-row\").appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on visible region\").appendTo(run_tool_row);\n        run_on_region_button.click( function() {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click( function() {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get('track').dataset.id,\n                action: 'rerun',\n                tool_id: tool.id\n            },\n            null,\n            // Success callback.\n            function(track_data) {\n                Galaxy.modal.show({title: tool.get('name') + \" is Running\", body: tool.get('name') + \" is running on the complete dataset. Tool outputs are in dataset's history.\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get('track'),\n            tool = this.model,\n            region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: track.view.low,\n                end: track.view.high\n            }),\n            url_params =\n            {\n                target_dataset_id: track.dataset.id,\n                action: 'rerun',\n                tool_id: tool.id,\n                regions: [\n                    region.toJSON()\n                ]\n            },\n            current_track = track,\n            // Set name of track to include tool name, parameters, and region used.\n            track_name = tool.get('name') +\n                         current_track.tool_region_and_parameters_str(region),\n            container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, { name: track.config.get_value('name') });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(current_track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        }\n        else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track,\n                // Success callback.\n                function(track_data) {\n                    new_track.set_dataset(new data.Dataset(track_data));\n                    new_track.tiles_div.text(\"Running job.\");\n                    new_track.init();\n                }\n        );\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: 'application/json',\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(function(response) {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            }\n            else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            }\n            else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (this.filter.high === Number.MAX_VALUE || this.filter.low === -Number.MAX_VALUE || this.filter.low === this.filter.high) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return ( ( parseFloat(feature_data[this.filter.index]) - this.filter.low ) / ( this.filter.high - this.filter.low ) );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get('start');\n    this.high = region.get('end');\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = function() {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = function() {};\n\nvar FeatureTrackTile = function(track, region, w_scale, canvas, data, mode, message, all_slotted,\n                                feature_mapper, incomplete_features, seq_data) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = function() {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset = (obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset) );\n    }\n    this.dataset_check_type = 'converted_datasets_state';\n    this.data_url_extra_params = {};\n    this.data_query_wait = ('data_query_wait' in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT);\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager = ('data_manager' in obj_dict ?\n                         obj_dict.data_manager :\n                         new visualization.GenomeDataManager({\n                             dataset: this.dataset,\n                             // HACK: simulate 'genome' attributes from view for now.\n                             // View should eventually use Genome object.\n                             genome: new visualization.Genome({\n                                key: view.dbkey,\n                                chroms_info: {\n                                    chrom_info: view.chrom_data\n                                }\n                             }),\n                             data_mode_compatible: this.data_and_mode_compatible,\n                             can_subset: this.can_subset\n                         }));\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value('height');\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if ( !(\"resize\" in obj_dict) || obj_dict.resize ) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                }\n                else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(track.config.get_value('name') + track.tool_region_and_parameters_str());\n                }\n                else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html =\n                    '<strong>Tool</strong>:' + track.tool.get(\"name\") + '<br/>' +\n                    '<strong>Dataset</strong>:' + track.config.get_value(\"name\") + '<br/>' +\n                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                    '<option value=\"cur\">current viewing area</option>' +\n                    '<option value=\"bookmarks\">bookmarks</option>' +\n                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n                    '</select>';\n                var cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n                    ok_fn = function() {\n                        var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                            regions,\n                            view_region = new visualization.GenomeRegion({\n                                chrom: view.chrom,\n                                start: view.low,\n                                end: view.high\n                            }),\n                            bookmarked_regions = _.map($(\".bookmark\"), function(elt) {\n                                return new visualization.GenomeRegion({from_str: $(elt).children(\".position\").text()});\n                            });\n\n                        // Get regions for visualization.\n                        if (regions_to_use === 'cur') {\n                            // Use only current region.\n                            regions = [ view_region ];\n                        }\n                        else if (regions_to_use === 'bookmarks') {\n                            // Use only bookmarks.\n                            regions = bookmarked_regions;\n                        }\n                        else {\n                            // Use both current region and bookmarks.\n                            regions = [ view_region ].concat(bookmarked_regions);\n                        }\n\n                        Galaxy.modal.hide();\n\n                        // Go to visualization.\n                        window.location.href =\n                            Galaxy.root + \"visualization/sweepster\" + \"?\" +\n                            $.param({\n                                dataset_id: track.dataset.id,\n                                hda_ldda: track.dataset.get('hda_ldda'),\n                                regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                            });\n                    },\n                    check_enter_esc = function(e) {\n                        if ((e.keyCode || e.which) === 27) { // Escape key\n                            cancel_fn();\n                        } else if ((e.keyCode || e.which) === 13) { // Enter key\n                            ok_fn();\n                        }\n                    };\n\n                // show dialog\n                Galaxy.modal.show({title: \"Visualize tool parameter space and output from different parameter settings?\", body: html, buttons : {'No' : cancel_fn, 'Yes' : ok_fn } });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function () {\n        return $(\"<div/>\").addClass('track').attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set('dataset', dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function () {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $( \"<div class='track-resize'>\" );\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover( function() {\n            if ( track.config.get_value('content_visible') ) {\n                in_handle = true;\n                drag_control.show();\n            }\n        }, function() {\n            in_handle = false;\n            if ( ! in_drag ) { drag_control.hide(); }\n        });\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control.hide().bind( \"dragstart\", function( e, d ) {\n            in_drag = true;\n            d.original_height = $(track.content_div).height();\n        }).bind( \"drag\", function( e, d ) {\n            var new_height = Math.min( Math.max( d.original_height + d.deltaY, track.min_height_px ), track.max_height_px );\n            $(track.tiles_div).css( 'height', new_height );\n            track.visible_height_px = (track.max_height_px === new_height ? 0 : new_height);\n            track.on_resize();\n        }).bind( \"dragend\", function( e, d ) {\n            track.tile_cache.clear();\n            in_drag = false;\n            if (!in_handle) { drag_control.hide(); }\n            track.config.set_value('height', track.visible_height_px);\n            track.changed();\n        }).appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function () {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        }\n        else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        }\n        else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        }\n        else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        }\n        else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        }\n        else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        }\n        else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $('<span/>').addClass('message').html(msg_html).appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred(),\n            params = {\n                hda_ldda: track.dataset.get('hda_ldda'),\n                data_type: this.dataset_check_type,\n                chrom: track.view.chrom,\n                retry: retry\n            };\n        $.getJSON(this.dataset.url(), params, function (result) {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"View error\").click(function() {\n                            Galaxy.modal.show({title: \"Trackster Error\", body: \"<pre>\" + result.message + \"</pre>\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n                        })\n                    );\n                    msg_elt.append( $('<span/>').text(' ') );\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"Try again\").click(function() {\n                            track.init(true);\n                        })\n                    );\n                }\n            }\n            else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            }\n            else if (result === \"no data\" || (result.data !== undefined && (result.data === null || result.data.length === 0))) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            }\n            else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(function() { track.init(); }, track.data_query_wait);\n            }\n            else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css( \"height\", track.visible_height_px + \"px\" );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(function() {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                }\n                else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n\n            // Tracks may not have stat data either because there is no data or data is not yet ready.\n            if (data && data.min !== undefined && data.max !== undefined) {\n                // Compute default minimum and maximum values\n                var min_value = data.min,\n                    max_value = data.max;\n                // If mean and sd are present, use them to compute a ~95% window\n                // but only if it would shrink the range on one side\n                min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                // Update config, prefs\n                track.config.set_default_value('min_value', min_value);\n                track.config.set_default_value('max_value', max_value);\n                track.config.set_value('min_value', min_value);\n                track.config.set_value('max_value', max_value);\n            }\n        });\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(this, ('filters' in obj_dict ? obj_dict.filters : null));\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set('filters_manager', this.filters_manager);\n    this.filters_available = false;\n    this.tool = (obj_dict.tool ? new TracksterTool( _.extend( obj_dict.tool, {\n        'track': this,\n        'tool_state': obj_dict.tool_state\n    } ) )\n    : null);\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(this.content_div);\n    if (!this.config.get_value('content_visible')) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\").addClass(\"overlay\").appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n\n    action_icons_def: Track.prototype.action_icons_def.concat( [\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[ track.view.resolution_px_b ].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ] ),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get('hda_ldda')\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: (this.tool ? this.tool.state_dict() : {})\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON( track.dataset.url(),\n            { data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n              high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') },\n            function(result) {\n                var data = result.data;\n                if ( isNaN(parseFloat(track.config.get_value('min_value'))) ||\n                     isNaN(parseFloat(track.config.get_value('max_value'))) ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min,\n                        max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                    max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                    // Update the prefs\n                    track.config.set_value('min_value', min_value);\n                    track.config.set_value('max_value', max_value);\n                }\n            });\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value('mode', new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === 'Auto') { this.data_manager.clear(); }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + track.mode + \")\");\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return w_scale + '_' + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if ( !this.can_draw() ) { return; }\n\n        var clear_after = options && options.clear_after,\n            low = this.view.low,\n            high = this.view.high,\n            range = high - low,\n            width = this.view.container.width(),\n            w_scale = this.view.resolution_px_b,\n            resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var\n            // Tile width in bases.\n            tile_width = Math.floor(TILE_SIZE * resolution),\n            // Index of first tile that overlaps visible region.\n            tile_index = Math.floor(low / tile_width),\n            tile_region,\n            tile_promise,\n            tile_promises = [],\n            tiles = [];\n        // Draw tiles.\n        while ( (tile_index * tile_width) < high ) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min( (tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(function(tile) {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) { this.tiles_div.children(\".remove\").removeClass(\"remove\").remove(); }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(function() {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, function(t) {\n                return t !== null;\n            });\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this,\n            css_class = (type === 'max' ? 'top' : 'bottom'),\n            text = (type === 'max' ? 'max' : 'min'),\n            pref_name = (type === 'max' ? 'max_value' : 'min_value'),\n            label = this.container_div.find(\".yaxislabel.\" + css_class),\n            value = round( track.config.get_value(pref_name), 1 );\n\n        // Default action for on_change is to redraw track.\n        on_change = on_change || function() {\n            track.request_draw({ clear_tile_cache: true });\n        };\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        }\n        else {\n            // Add label.\n            label = $(\"<div/>\").text(value).make_text_editable({\n                num_cols: 12,\n                on_finish: function(new_val) {\n                    $(\".tooltip\").remove();\n                    track.config.set_value(pref_name, round( new_val, 1 ) );\n                    on_change();\n                },\n                help_text: \"Set \" + text + \" value\"\n            }).addClass('yaxislabel ' + css_class).css(\"color\", this.config.get_value('label_color'));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, function(tile) {\n            return (tile instanceof LineTrackTile);\n        });\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, function(tile) {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, { force: true, mode: 'Coverage' });\n                }\n            });\n\n            track._add_yaxis_label('max');\n        }\n        else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find('.yaxislabel').remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, function(tile) {\n                return tile.has_icons;\n            });\n\n            if (icons_present) {\n                _.each(tiles, function(tile) {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function( display_mode ) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [ this ];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) { options = {}; }\n\n        var force = options.force,\n            mode = options.mode || this.mode,\n            resolution = 1 / w_scale,\n\n            // Useful vars.\n            track = this,\n            drawables = this._get_drawables(),\n            key = this._gen_tile_cache_key(w_scale, region),\n            is_tile = function(o) { return (o && 'track' in o); };\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = (force ? undefined : track.tile_cache.get_elt(key));\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) { return null; }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = function() {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = (_.find(CONTINUOUS_DATA_MODES, function(m) { return m === mode; }) ? \"Coverage\" : mode);\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, function(d) {\n                // Get the track data/promise.\n                return d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params);\n            });\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(view.reference_track.data_manager.get_data(region, mode, resolution, view.reference_track.data_url_extra_params));\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then( function() {\n            var tile_data = get_tile_data(),\n                tracks_data = tile_data,\n                seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, function(d) { return util.is_deferred(d); })) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(track.draw_helper(region, w_scale, options)).then(function(tile) {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [],\n                drawing_heights = [];\n\n            _.each(drawables, function(d, i) {\n                var mode = d.mode,\n                    data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas(),\n                tile_low = region.get('start'),\n                tile_high = region.get('end'),\n                all_data_index = 0,\n                width = Math.ceil( (tile_high - tile_low) * w_scale ) + track.left_offset,\n                height = _.max(drawing_heights),\n                tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = (options.height || height);\n            var ctx = canvas.getContext('2d');\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, function(d, i) {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if ( [undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1 ) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if ( [undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1 ) {\n            this.config.set_value(\"max_value\", _.max( _.map(result.data, function(d) { return d[1]; }) ) || 0);\n        }\n\n        var canvas = ctx.canvas,\n            painter = new painters.LinePainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this,\n            tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round( ( tile.low - (this.is_overview? this.view.max_low : this.view.low) ) * w_scale );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css('left', left);\n\n        if ( tile_element.hasClass(\"remove\") ) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        }\n        else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css('height', 'auto');\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element.parent().children().css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this,\n            region_str = (region !== undefined ? region.toString() : \"all\"),\n            param_str = _.values( track.tool.get_inputs_dict()).join(', ');\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        }\n        // Histogram mode requires bigwig data.\n        else if (mode === \"Coverage\") {\n            return data.dataset_type === \"bigwig\";\n        }\n        // All other modes--Dense, Squish, Pack--require data + details.\n        else if (data.dataset_type === \"bigwig\" ||\n                 data.extra_info === \"no_detail\") {\n            return false;\n        }\n        else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\")  {\n            return false;\n        }\n        // Subset only if data is single-bp resolution.\n        else if (entry.dataset_type === 'bigwig') {\n            return (entry.data[1][0] - entry.data[0][0] === 1);\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set('data_type', 'raw_data');\n        this.data_query_wait = 1000;\n        this.dataset_check_type = 'state';\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function (view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass( \"label-track\" );\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view,\n            range = view.high - view.low,\n            tickDistance = Math.floor( Math.pow( 10, Math.floor( Math.log( range ) / Math.log( 10 ) ) ) ),\n            position = Math.floor( view.low / tickDistance ) * tickDistance,\n            width = this.view.container.width(),\n            new_div = $(\"<div/>\").addClass('label-container');\n        while ( position < view.high ) {\n            var screenPosition = Math.floor( ( position - view.low ) / range * width );\n            new_div.append( $(\"<div/>\").addClass('pos-label').text(util.commatize( position )).css( {\n                left: screenPosition\n            }));\n            position += tickDistance;\n        }\n        this.content_div.children( \":first\" ).remove();\n        this.content_div.append( new_div );\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if ('drawables' in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, function(d) {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    action_icons_def:\n    [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, function(d) {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(function() {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n                name: this.config.get_value('name')\n            }),\n            track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, function(d) { return d.config.get_value('min_value'); })),\n            max = _.max(_.map(this.drawables, function(d) { return d.config.get_value('max_value'); }));\n\n        this.config.set_value('min_value', min);\n        this.config.set_value('max_value', max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min);\n            d.config.set_value('max_value', max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this,\n            min_value = this.config.get_value('min_value'),\n            max_value = this.config.get_value('max_value');\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min_value);\n            d.config.set_value('max_value', max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1, i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, { force: true, height: max_height } );\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this,\n            t = function() { track.update_all_min_max(); };\n\n        // Add min, max labels.\n        this._add_yaxis_label('min', t);\n        this._add_yaxis_label('max', t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function (view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = {reference: true};\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'height', type: 'int', default_value: 13, hidden: true }\n    ] ),\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(':visible'),\n            new_visible,\n            tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        }\n        else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) { return true; },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region),\n            seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function (view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(supportsByteRanges(Galaxy.root + 'datasets/' + this.dataset.id + '/display'))\n     .then(function(supportsByteRanges) {\n         if (supportsByteRanges) {\n             self.data_manager = new bbi.BBIDataManager({\n                 dataset: self.dataset\n             });\n         }\n\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Color', type: 'color' },\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return (entry.data[1][0] - entry.data[0][0] === 1);\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label('max');\n        this._add_yaxis_label('min');\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function (view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n        { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n        { key: 'min_value', label: 'Min Value', type: 'int', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'int', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 500, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n        });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas,\n            painter = new painters.DiagonalHeatmapPainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass( \"feature-track\" );\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Block color', type: 'color' },\n        { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true,\n          help: 'Show the number of items in each bin when drawing summary histogram' },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'connector_style', label: 'Connector style', type: 'select', default_value: 'fishbones',\n            options: [ { label: 'Line with arrows', value: 'fishbone' }, { label: 'Arcs', value: 'arcs' } ] },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if ( this.config.get_value('connector_style') === 'arcs' ) {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var track = this,\n            i,\n            line_track_tiles = _.filter(tiles, function(t) {\n                return (t instanceof LineTrackTile);\n            });\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, 'incomplete_features'), function(inc_features) {\n                _.each(inc_features, function(feature) {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, function(tile) {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features =_.omit(all_incomplete_features,\n                                                     _.map(tile.incomplete_features, function(f) { return f[0]; }));\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = { data: _.values( tile_incomplete_features ) },\n                        new_canvas = self.view.canvas_manager.new_canvas(),\n                        new_canvas_ctx = new_canvas.getContext('2d');\n                    new_canvas.height = Math.max(tile.canvas.height,\n                                                 self.get_canvas_height(features, tile.mode, tile.w_scale, 100));\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(features, new_canvas_ctx, tile.mode,\n                                                  tile.region, tile.w_scale, tile.seq_data);\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters,\n                f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false,\n                example_feature,\n                filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if ( filter.applies_to(example_feature) &&\n                             filter.min !== filter.max ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        }\n        else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: Auto/\" + mode + \")\");\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context,\n            slotter = this.slotters[level];\n        if (!slotter || (slotter.mode !== mode)) {\n            slotter = new (slotting.FeatureSlotter)( level, mode, MAX_FEATURE_DEPTH, function ( x ) { return dummy_context.measureText( x ); } );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features( features );\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        }\n        else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if ( this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH ) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width) );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this,\n            canvas = ctx.canvas,\n            tile_low = region.get('start'),\n            tile_high = region.get('end'),\n            left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var\n            filtered = [],\n            slots = this.slotters[w_scale].slots;\n            all_slotted = true;\n        if ( result.data ) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if ( !(feature[0] in slots) ) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = (this.filters_manager.alpha_filter ? new FilterScaler(this.filters_manager.alpha_filter) : null),\n            filter_height_scaler = (this.filters_manager.height_filter ? new FilterScaler(this.filters_manager.height_filter) : null),\n            painter = new (this.painter)(filtered, tile_low, tile_high, this.config.to_key_value_dict(), mode, filter_alpha_scaler, filter_height_scaler,\n                                         // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                                         ref_seq,\n                                         // Only the ReadPainer will use this function\n                                         function(b) { return track.view.get_base_color(b); });\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value('block_color');\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(track, region, w_scale, canvas, result.data, mode,\n                                        result.message, all_slotted, feature_mapper,\n                                        incomplete_features, ref_seq);\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Histogram color', type: 'color' },\n        { key: 'show_sample_data', label: 'Show sample data', type: 'bool', default_value: true },\n        { key: 'show_labels', label: 'Show summary and sample labels', type: 'bool', default_value: true },\n        { key: 'summary_height', label: 'Locus summary height', type: 'float', default_value: 20 },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        }\n        else { // result.dataset_type === 'variant'\n            var view = this.view,\n                painter = new (this.painter)(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode,\n                                             function(b) { return view.get_base_color(b); });\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = ( this.dataset.get_metadata('sample_names') ? this.dataset.get_metadata('sample_names').length : 0);\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if ( num_samples === null ) {\n                    num_samples = 1;\n                }\n                else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [ Track.prototype.predraw_init.call(this) ];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata('sample_names')) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, function(t) {\n            return (t instanceof LineTrackTile);\n        });\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata('sample_names');\n        if (line_track_tiles.length === 0 && this.config.get_value('show_labels') && sample_names && sample_names.length > 1) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find('.yaxislabel.variant').length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value('summary_height') / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\").text('Summary').addClass('yaxislabel variant top').css({\n                        'font-size': font_size + 'px',\n                        'top': (this.config.get_value('summary_height') - font_size) / 2 + 'px'\n                    })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value('show_sample_data')) {\n                    var samples_div_html = sample_names.join('<br/>');\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\").html(samples_div_html).addClass('yaxislabel variant top sample').css({\n                            'top': this.config.get_value('summary_height')\n                        })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === 'Squish' ? 5 : 10) + 'px';\n            $(this.tiles_div).find('.sample').css({\n                'font-size': font_size,\n                'line-height': font_size\n            });\n            // Color labels to preference color.\n            $(this.tiles_div).find('.yaxislabel').css('color', this.config.get_value('label_color'));\n        }\n        else {\n            // Remove all labels.\n            this.container_div.find('.yaxislabel.variant').remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function (view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Histogram color', type: 'color' },\n        { key: 'detail_block_color', label: 'Sense strand block color', type: 'color', 'default_value': '#AAAAAA' },\n        { key: 'reverse_strand_color', label: 'Antisense strand block color', type: 'color', 'default_value': '#DDDDDD' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n        { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    \"CompositeTrack\": CompositeTrack,\n    \"DrawableGroup\": DrawableGroup,\n    \"DiagonalHeatmapTrack\": DiagonalHeatmapTrack,\n    \"FeatureTrack\": FeatureTrack,\n    \"LineTrack\": LineTrack,\n    \"ReadTrack\": ReadTrack,\n    \"VariantTrack\": VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    \"VcfTrack\": VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = function(template, view, container) {\n    if ('copy' in template) {\n        // Template is an object.\n        return template.copy(container);\n    }\n    else {\n        // Template is a dictionary.\n        var\n           drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[ drawable_type ](view, container, template);\n    }\n};\n\nreturn {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n\n});\n"]}