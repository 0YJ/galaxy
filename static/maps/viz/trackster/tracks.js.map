{"version":3,"sources":["viz/trackster/tracks.js"],"names":["DATA_OK","places","DATA_CACHE_SIZE","val","Math","pow","round","num","url","promise","$","Deferred","type","ajax","beforeSend","xhr","setRequestHeader","success","result","status","resolve","_","extend","html_elt_js_obj_dict","is_container","element","obj","attr","moveable","handle_class","container_selector","element_js_obj","bind","handle","relative","e","d","this","child","container","bottom","i","parent","children","this_obj","parents","length","top","position","outerHeight","cur_container","offsetY","insertBefore","add_drawable_before","insertAfter","remove_drawable","add_drawable","get","is","prepend","hasClass","append","move_drawable","deltaY","addClass","removeClass","DATA_NOCONVERTER","MIN_SQUISH_VIEW_WIDTH","CONTINUOUS_DATA_MODES","Drawable","view","obj_dict","id_counter","id","drag_handle_class","is_overview","action_icons","from_models_and_saved_values","config_params","prefs","name","config_onchange","config","on","ConfigSettingCollection","container_div","set_value","header_div","header","header_view","_viz_views2","default","TrackHeaderView","model","$el","hover","icons_div","prototype","action_icons_def","title","css_class","on_click_fn","drawable","get_value","toggle_icon","show_contents","_config2","ConfigSettingCollectionView","collection","render_in_modal","remove","key","label","default_value","hidden","changed","init","can_draw","enabled","request_draw","_draw","options","to_dict","set_name","new_name","old_name","revert_name","update_intro_div","hide","build_container_div","update_icons","hide_contents","get_drawables","DrawableCollection","obj_type","drawables","unpack_drawables","drawables_array","object_from_template","dictified_drawables","push","to_key_value_dict","other","index","indexOf","splice","replace_drawable","old_drawable","new_drawable","update_html","replaceWith","new_position","tracks","get_tracks","track_type","queue","slice","shift","DrawableGroup","concat","content_div","call","filters_manager","appendTo","saved_filters_managers","_filters2","FiltersManager","after","parent_div","old_manager","filters","visible","setup_multitrack_filtering","group","_restore_filter_managers","clear_filters","tiles_div","clear_tile_cache","toggle","num_drawables","composite_icon","filters_icon","show","get_type","a_type","can_composite","FeatureTrack","num_feature_tracks","j","filter","shared_filters","remove_all","new_filter","filter_name","NumberFilter","add_filter","show_composite_track","composite_track","CompositeTrack","stand_alone","tracks_to_be_redrawn","zoom_factor","has_changes","render","reset","each","View","vis_id","dbkey","requested_redraw","undefined","label_tracks","max_low","max_high","top_container","min_separation","browser_content_div","load_chroms_deferred","canvas_manager","top_labeltrack","ownerDocument","nav_container","overview_viewport","overview_close","overview_highlight","overview_box_background","nav_controls","chrom_select","submit_nav","location_span","nav_input","select","parent_element","source","bottom_container","feature_search_deferreds","all_features","response","value","viewport_container","minLength","text","intro_div","click","zo_link","select_datasets","track","prependTo","nav","overview","find","zoom_in","overview_box","offsetX","delta","current_x","delta_chrom","move_delta","default_overview_height","height","reset_overview","clientX","original_low","which","clientY","current_height","keyCode","stopPropagation","tooltip","placement","low","css","left","autocomplete","request","map","span","width","update_location","search_features","term","min","pageX","startX","request_redraw","done","feature","hidden_input","zoom_out","resize_timer","clearTimeout","load_chroms","trigger","self","setTimeout","chrom","trigger_navigate","url_parms","MAX_CHROMS_SELECTABLE","chrom_data","scrollTop","Galaxy","new_scroll","data","dataType","high","prev_chroms","chrom_start_index","alert","proxy","offset","abs","max","old_low","LabelTrack","window","resize_window","document","get_base_color","base","new_chrom","new_low","new_high","delay","go_to","timer","chrom_pos","split","parseInt","move_fraction","fraction","_util2","commatize","root","redraw_on_move_fn","chrom_info","reference","reference_track","ref_track","html","len","chrom_option","next_chroms","start_index","error","change_chrom","track_list","track_options","found","grep","v","left_px","_redraw","then","str","replace","cur_center","current_chrom_span","resize_viewport","data_fetch","overview_drawable","copy","add_label_track","label_track","TracksterTool","initialize","is_visible","to","param","requestAnimationFrame","update_value","ceil","keydown","name_div","tool","width_px","param_view","run_on_dataset_button","run_on_region_button","run_on_dataset","point","new_half","target_dataset_id","action","tool_id","body","buttons","run_on_region","start","end","regions","set_overview","dataset","postdraw_actions","current_track","new_track","_tools2","Tool","run","ajax_settings","contentType","tool_state","interval","set","remove_inputs","state_dict","ToolParameterView","Backbone","events","change :input","param_div","FilterScaler","parseFloat","feature_data","Tile","update_event","target","TracksterToolView","stale","set_visible","LineTrackTile","region","w_scale","FeatureTrackTile","mode","all_slotted","has_icons","incomplete_features","other_tiles_features_drawn","seq_data","run_tool_row","update_params","params","track_data","modal","Close","_visualization2","GenomeRegion","url_params","toJSON","track_name","tool_region_and_parameters_str","constructor","hda_ldda","init_for_tool_data","change_mode","set_filters_manager","Track","set_dataset","_data2","Dataset","success_callback","ss_deferred","ServerStateDeferred","data_url_extra_params","data_query_wait","data_manager","genome","when","go","max_height_px","visible_height_px","message","add_resize_handle","default_val","gen_val","Number","MAX_VALUE","canvas","html_elt","predisplay_actions","feature_mapper","ok_fn","regions_to_use","tile_cache","Model","dataset_check_type","data_type","Genome","data_mode_compatible","data_and_mode_compatible","can_subset","msg_elt","resize","show_message","init_deferred","init_filters","stats","max_value","min_value","cancel_fn","unbind","filters_available","bookmarked_regions","elt","from_str","tool_view","view_region","overlay_div","href","dataset_id","Collection","No","set_min_max","in_drag","drag_control","in_handle","original_height","new_height","min_height_px","new_mode","on_resize","clear","param_space_viz_icon","ReferenceTrack","LineTrack","msg_html","retry","range","resolution","before_draw","tile_index","tile_region","getJSON","tiles","kind","t","_add_yaxis_label","pref_name","valid_chroms","DATA_ERROR","on_change","apply","predraw_init","make_text_editable","num_cols","MAX_FEATURE_DEPTH","tile_promise","tile_promises","line_track_tiles","tile","force","floor","mean","sd","icons_present","TiledTrack","get_mode","_get_drawables","draw_helper","Cache","left_offset","dynamic_tool_div","is_tile","show_tile","get_tile_data","tile_data","slotters","resolution_px_b","max_rows","set_elt","drawing_modes","drawing_heights","tile_low","all_data_index","isNaN","translate","globalAlpha","draw_tile","tile_drawn","_draw_line_track_tile","tools_icon","clear_after","track_height","region_str","dataset_type","tile_width","extra_info","entry","on_finish","new_val","tickDistance","new_div","build_config_params","display_mode","show_group","_gen_tile_cache_key","o","visible_height","m","get_data","data_mode","init_deferreds","tracks_data","is_deferred","subset_entry","update_auto_mode","get_canvas_height","new_canvas","tile_high","ctx","getContext","update_all_min_max","canvas_width","_painters2","LinePainter","data_url","draw","ref_seq","cur_visible","new_visible","tile_element","subset","textAlign","toString","values","get_inputs_dict","join","supportsByteRanges","DiagonalHeatmapTrack","display_modes","log","screenPosition","painter","ReadTrack","union","all_incomplete_features","f","update_ui_elt","example_feature","applies_to","max_height","incremental_slots","char_width_px","slotter","dummy_context","measureText","font","filtered","manager","default_font","slots","str_len","c","hide_feature","_bbiDataManager2","BBIDataManager","fillStyle","draw_results","translation","cur_tile","num_samples","dummy_painter","deferreds","get_metadata","sample_names","font_size","DiagonalHeatmapPainter","summary_draw_height","start_end_dct","set_painter_from_config","help","ArcLinkedFeaturePainter","VariantTrack","drawable_type","template","inc_features","TracksterView","omit","size","tile_incomplete_features","features","new_canvas_ctx","drawImage","new_tile","show_more_rows_icon","mode_icon","level","_slotting2","FeatureSlotter","x","slot_features","rows_required","get_required_height","flen","update_attrs","keep","filter_alpha_scaler","alpha_filter","filter_height_scaler","height_filter","b","VariantPainter","match","fetch","font-size","samples_div_html","line-height","ReadPainter","addable_objects","VcfTrack"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport visualization from \"viz/visualization\";\nimport viz_views from \"viz/viz_views\";\nimport util from \"viz/trackster/util\";\nimport slotting from \"viz/trackster/slotting\";\nimport painters from \"viz/trackster/painters\";\nimport filters_mod from \"viz/trackster/filters\";\nimport data from \"mvc/dataset/data\";\nimport tools_mod from \"mvc/tool/tools\";\nimport config_mod from \"utils/config\";\nimport bbi from \"viz/bbi-data-manager\";\nimport \"ui/editable-text\";\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = (element, obj) => {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = (element, handle_class, container_selector, element_js_obj) => {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element\n        .bind(\"drag\", { handle: \".\" + handle_class, relative: true }, function(\n            e,\n            d\n        ) {\n            var element = $(this);\n            var parent = $(this).parent();\n\n            var // Only sorting amongst tracks and groups.\n            children = parent.children(\".track,.group\");\n\n            var this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")];\n            var child;\n            var container;\n            var top;\n            var bottom;\n            var i;\n\n            //\n            // Enable three types of dragging: (a) out of container; (b) into container;\n            // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n            //\n\n            // Handle dragging out of container.\n            container = $(this).parents(container_selector);\n            if (container.length !== 0) {\n                top = container.position().top;\n                bottom = top + container.outerHeight();\n                var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                if (d.offsetY < top) {\n                    // Moving above container.\n                    $(this).insertBefore(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable_before(\n                        this_obj,\n                        cur_container\n                    );\n                    return;\n                } else if (d.offsetY > bottom) {\n                    // Moving below container.\n                    $(this).insertAfter(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle dragging into container. Child is appended to container's content_div.\n            container = null;\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                top = child.position().top;\n                bottom = top + child.outerHeight();\n                // Dragging into container if child is a container and offset is inside container.\n                if (\n                    child.is(container_selector) &&\n                    this !== child.get(0) &&\n                    d.offsetY >= top &&\n                    d.offsetY <= bottom\n                ) {\n                    // Append/prepend based on where offsetY is closest to and return.\n                    if (d.offsetY - top < bottom - d.offsetY) {\n                        child.find(\".content-div\").prepend(this);\n                    } else {\n                        child.find(\".content-div\").append(this);\n                    }\n                    // Update containers. Object may not have container if it is being moved quickly.\n                    if (this_obj.container) {\n                        this_obj.container.remove_drawable(this_obj);\n                    }\n                    html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(\n                        this_obj\n                    );\n                    return;\n                }\n            }\n\n            // Handle sibling movement, aka sorting.\n\n            // Determine new position\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                if (\n                    d.offsetY < child.position().top &&\n                    // Cannot move tracks above reference track or intro div.\n                    !(\n                        child.hasClass(\"reference-track\") ||\n                        child.hasClass(\"intro\")\n                    )\n                ) {\n                    break;\n                }\n            }\n\n            // If not already in the right place, move. Need\n            // to handle the end specially since we don't have\n            // insert at index\n            if (i === children.length) {\n                if (this !== children.get(i - 1)) {\n                    parent.append(this);\n                    html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                        this_obj,\n                        i\n                    );\n                }\n            } else if (this !== children.get(i)) {\n                $(this).insertBefore(children.get(i));\n                // Need to adjust insert position if moving down because move is changing\n                // indices of all list items.\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(\n                    this_obj,\n                    d.deltaY > 0 ? i - 1 : i\n                );\n            }\n        })\n        .bind(\"dragstart\", function() {\n            $(this).addClass(\"dragging\");\n        })\n        .bind(\"dragend\", function() {\n            $(this).removeClass(\"dragging\");\n        });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar // Padding at the top of tracks for error messages\nERROR_PADDING = 20;\n\nvar // Maximum number of rows un a slotted track\nMAX_FEATURE_DEPTH = 100;\n\nvar // Minimum width for window for squish to be used.\nMIN_SQUISH_VIEW_WIDTH = 12000;\n\nvar // Number of pixels per tile, not including left offset.\nTILE_SIZE = 400;\n\nvar DEFAULT_DATA_QUERY_WAIT = 5000;\n\nvar // Maximum number of chromosomes that are selectable at any one time.\nMAX_CHROMS_SELECTABLE = 100;\n\nvar DATA_ERROR = \"Cannot display dataset due to an error. \";\n\nvar DATA_NOCONVERTER =\n    \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\";\n\nvar DATA_NONE = \"No data for this chrom/contig.\";\n\nvar DATA_PENDING =\n    \"Preparing data. This can take a while for a large dataset. \" +\n    \"If the visualization is saved and closed, preparation will continue in the background.\";\n\nvar DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \";\nvar DATA_LOADING = \"Loading data...\";\nvar DATA_OK = \"Ready for display\";\nvar TILE_CACHE_SIZE = 10;\nvar DATA_CACHE_SIZE = 20;\n\nvar // Numerical/continuous data display modes.\nCONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n        this.config_params,\n        obj_dict.prefs\n    );\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            () => {\n                icons_div.show();\n            },\n            () => {\n                icons_div.hide();\n            }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if (drawable.config.get_value(\"content_visible\")) {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle-expand\")\n                    .removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value(\"content_visible\", false);\n            } else {\n                drawable.action_icons.toggle_icon\n                    .addClass(\"toggle\")\n                    .removeClass(\"toggle-expand\");\n                drawable.config.set_value(\"content_visible\", true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal(\"Configure Track\");\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n        {\n            key: \"content_visible\",\n            type: \"bool\",\n            default_value: true,\n            hidden: true\n        }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(\n                drawables_array[i],\n                this.view,\n                this\n            );\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(\n                    new_drawable.container_div\n                );\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0);\n\n        var tracks = [];\n        var drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\")\n        .addClass(\"content-div\")\n        .attr(\"id\", \"group_\" + this.id + \"_content_div\")\n        .appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(\n            this,\n            obj_dict.filters\n        );\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(\n    DrawableGroup.prototype,\n    Drawable.prototype,\n    DrawableCollection.prototype,\n    {\n        action_icons_def: [\n            Drawable.prototype.action_icons_def[0],\n            Drawable.prototype.action_icons_def[1],\n            // Replace group with composite track.\n            {\n                name: \"composite_icon\",\n                title: \"Show composite track\",\n                css_class: \"layers-stack\",\n                on_click_fn: function(group) {\n                    $(\".tooltip\").remove();\n                    group.show_composite_track();\n                }\n            },\n            // Toggle track filters.\n            {\n                name: \"filters_icon\",\n                title: \"Filters\",\n                css_class: \"ui-slider-050\",\n                on_click_fn: function(group) {\n                    // TODO: update Tooltip text.\n                    if (group.filters_manager.visible()) {\n                        // Hiding filters.\n                        group.filters_manager.clear_filters();\n                        group._restore_filter_managers();\n                        // TODO: maintain current filter by restoring and setting saved manager's\n                        // settings to current/shared manager's settings.\n                        // TODO: need to restore filter managers when moving drawable outside group.\n                    } else {\n                        // Showing filters.\n                        group.setup_multitrack_filtering();\n                        group.request_draw({ clear_tile_cache: true });\n                    }\n                    group.filters_manager.toggle();\n                }\n            },\n            Drawable.prototype.action_icons_def[2]\n        ],\n\n        build_container_div: function() {\n            var container_div = $(\"<div/>\")\n                .addClass(\"group\")\n                .attr(\"id\", \"group_\" + this.id);\n            if (this.container) {\n                this.container.content_div.append(container_div);\n            }\n            return container_div;\n        },\n\n        hide_contents: function() {\n            this.tiles_div.hide();\n        },\n\n        show_contents: function() {\n            // Show the contents div and labels (if present)\n            this.tiles_div.show();\n            // Request a redraw of the content\n            this.request_draw();\n        },\n\n        update_icons: function() {\n            //\n            // Handle update when there are no tracks.\n            //\n            var num_drawables = this.drawables.length;\n            if (num_drawables === 0) {\n                this.action_icons.composite_icon.hide();\n                this.action_icons.filters_icon.hide();\n            } else if (num_drawables === 1) {\n                this.action_icons.composite_icon.toggle(\n                    this.drawables[0] instanceof CompositeTrack\n                );\n                this.action_icons.filters_icon.hide();\n            } else {\n                // There are 2 or more tracks.\n\n                //\n                // Determine if a composite track can be created. Current criteria:\n                // (a) all tracks are line tracks;\n                //      OR\n                // FIXME: this is not enabled right now because it has not been well tested:\n                // (b) there is a single FeatureTrack.\n                //\n\n                // All tracks the same?\n                var i;\n\n                var j;\n                var drawable;\n                var same_type = true;\n                var a_type = this.drawables[0].get_type();\n                var num_feature_tracks = 0;\n                for (i = 0; i < num_drawables; i++) {\n                    drawable = this.drawables[i];\n                    if (drawable.get_type() !== a_type) {\n                        can_composite = false;\n                        break;\n                    }\n                    if (drawable instanceof FeatureTrack) {\n                        num_feature_tracks++;\n                    }\n                }\n\n                if (same_type && this.drawables[0] instanceof LineTrack) {\n                    this.action_icons.composite_icon.show();\n                } else {\n                    this.action_icons.composite_icon.hide();\n                    $(\".tooltip\").remove();\n                }\n\n                //\n                // Set up group-level filtering and update filter icon.\n                //\n                if (\n                    num_feature_tracks > 1 &&\n                    num_feature_tracks === this.drawables.length\n                ) {\n                    //\n                    // Find shared filters.\n                    //\n                    var shared_filters = {};\n\n                    var filter;\n\n                    // Init shared filters with filters from first drawable.\n                    drawable = this.drawables[0];\n                    for (\n                        j = 0;\n                        j < drawable.filters_manager.filters.length;\n                        j++\n                    ) {\n                        filter = drawable.filters_manager.filters[j];\n                        shared_filters[filter.name] = [filter];\n                    }\n\n                    // Create lists of shared filters.\n                    for (i = 1; i < this.drawables.length; i++) {\n                        drawable = this.drawables[i];\n                        for (\n                            j = 0;\n                            j < drawable.filters_manager.filters.length;\n                            j++\n                        ) {\n                            filter = drawable.filters_manager.filters[j];\n                            if (filter.name in shared_filters) {\n                                shared_filters[filter.name].push(filter);\n                            }\n                        }\n                    }\n\n                    //\n                    // Create filters for shared filters manager. Shared filters manager is group's\n                    // manager.\n                    //\n                    this.filters_manager.remove_all();\n                    var filters;\n                    var new_filter;\n                    var min;\n                    var max;\n                    for (var filter_name in shared_filters) {\n                        filters = shared_filters[filter_name];\n                        if (filters.length === num_feature_tracks) {\n                            // Add new filter.\n                            // FIXME: can filter.copy() be used?\n                            new_filter = new filters_mod.NumberFilter({\n                                name: filters[0].name,\n                                index: filters[0].index\n                            });\n                            this.filters_manager.add_filter(new_filter);\n                        }\n                    }\n\n                    // Show/hide icon based on filter availability.\n                    this.action_icons.filters_icon.toggle(\n                        this.filters_manager.filters.length > 0\n                    );\n                } else {\n                    this.action_icons.filters_icon.hide();\n                }\n            }\n        },\n\n        /**\n     * Restore individual track filter managers.\n     */\n        _restore_filter_managers: function() {\n            for (var i = 0; i < this.drawables.length; i++) {\n                this.drawables[i].filters_manager = this.saved_filters_managers[\n                    i\n                ];\n            }\n            this.saved_filters_managers = [];\n        },\n\n        /**\n     *\n     */\n        setup_multitrack_filtering: function() {\n            // Save tracks' managers and set up shared manager.\n            if (this.filters_manager.filters.length > 0) {\n                // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n                this.saved_filters_managers = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    var drawable = this.drawables[i];\n                    this.saved_filters_managers.push(drawable.filters_manager);\n                    drawable.filters_manager = this.filters_manager;\n                }\n\n                //TODO: hide filters icons for each drawable?\n            }\n            this.filters_manager.init_filters();\n        },\n\n        /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n        show_composite_track: function() {\n            var composite_track = new CompositeTrack(this.view, this.view, {\n                name: this.config.get_value(\"name\"),\n                drawables: this.drawables\n            });\n            var index = this.container.replace_drawable(\n                this,\n                composite_track,\n                true\n            );\n            composite_track.request_draw();\n        },\n\n        add_drawable: function(drawable) {\n            DrawableCollection.prototype.add_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        remove_drawable: function(drawable) {\n            DrawableCollection.prototype.remove_drawable.call(this, drawable);\n            this.update_icons();\n        },\n\n        to_dict: function() {\n            // If filters are visible, need to restore original filter managers before converting to dict.\n            if (this.filters_manager.visible()) {\n                this._restore_filter_managers();\n            }\n\n            var obj_dict = extend(\n                DrawableCollection.prototype.to_dict.call(this),\n                { filters: this.filters_manager.to_dict() }\n            );\n\n            // Setup multi-track filtering again.\n            if (this.filters_manager.visible()) {\n                this.setup_multitrack_filtering();\n            }\n\n            return obj_dict;\n        },\n\n        request_draw: function(options) {\n            _.each(this.drawables, d => {\n                d.request_draw(options);\n            });\n        }\n    }\n);\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone =\n            obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager(\n            this.container.get(0).ownerDocument\n        );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                }\n            ],\n            { name: obj_dict.name }\n        );\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container;\n\n        var view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\")\n            .addClass(\"top-container\")\n            .appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\")\n            .addClass(\"content\")\n            .appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\")\n            .addClass(\"bottom-container\")\n            .appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\")\n            .addClass(\"top-labeltrack\")\n            .appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\")\n            .addClass(\"viewport-container\")\n            .attr(\"id\", \"viewport-container\")\n            .appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\")\n            .addClass(\"intro\")\n            .appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\")\n            .text(\"Add Datasets to Visualization\")\n            .addClass(\"action-button\")\n            .appendTo(this.intro_div)\n            .click(() => {\n                visualization.select_datasets({ dbkey: view.dbkey }, tracks => {\n                    _.each(tracks, track => {\n                        view.add_drawable(\n                            object_from_template(track, view, view)\n                        );\n                    });\n                });\n            });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\")\n            .addClass(\"trackster-nav-container\")\n            .prependTo(this.top_container);\n        this.nav = $(\"<div/>\")\n            .addClass(\"trackster-nav\")\n            .appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\")\n            .addClass(\"overview\")\n            .appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\")\n            .addClass(\"overview-viewport\")\n            .appendTo(this.overview);\n        this.overview_close = $(\"<a/>\")\n            .attr(\"title\", \"Close overview\")\n            .addClass(\"icon-button overview-close tooltip\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\")\n            .addClass(\"overview-highlight\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\")\n            .addClass(\"overview-boxback\")\n            .appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\")\n            .addClass(\"overview-box\")\n            .appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\")\n            .addClass(\"nav-controls\")\n            .appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\")\n            .attr({ name: \"chrom\" })\n            .addClass(\"chrom-nav\")\n            .append(\"<option value=''>Loading</option>\")\n            .appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (\n                e.type === \"focusout\" ||\n                (e.keyCode || e.which) === 13 ||\n                (e.keyCode || e.which) === 27\n            ) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\")\n            .addClass(\"nav-input\")\n            .hide()\n            .bind(\"keyup focusout\", submit_nav)\n            .appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\")\n            .addClass(\"location\")\n            .attr(\"title\", \"Click to change location\")\n            .tooltip({ placement: \"bottom\" })\n            .appendTo(this.nav_controls);\n        this.location_span.click(() => {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [];\n\n                    var feature_search_deferreds = $.map(\n                        view.get_tracks(FeatureTrack),\n                        t =>\n                            t.data_manager\n                                .search_features(request.term)\n                                .success(dataset_features => {\n                                    all_features = all_features.concat(\n                                        dataset_features\n                                    );\n                                })\n                    );\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(() => {\n                        response(\n                            $.map(all_features, feature => ({\n                                label: feature[0],\n                                value: feature[1]\n                            }))\n                        );\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\")\n                .attr(\"type\", \"hidden\")\n                .val(this.vis_id)\n                .appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-out\")\n            .attr(\"title\", \"Zoom out\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_out();\n            })\n            .appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-in\")\n            .attr(\"title\", \"Zoom in\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_in();\n            })\n            .appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", () => {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function(e) {\n            $(this)\n                .find(\"input\")\n                .trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function(e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box\n            .bind(\"dragstart\", function(e, d) {\n                this.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var delta = d.offsetX - this.current_x;\n                this.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.max_high - view.max_low)\n                );\n                view.move_delta(-delta_chrom);\n            });\n\n        this.overview_close.click(() => {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container\n            .bind(\"draginit\", (e, d) => {\n                // Disable interaction if started in scrollbar (for webkit)\n                if (e.clientX > view.viewport_container.width() - 16) {\n                    return false;\n                }\n            })\n            .bind(\"dragstart\", (e, d) => {\n                d.original_low = view.low;\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var container = $(this);\n                var delta = d.offsetX - d.current_x;\n                var new_scroll =\n                    container.scrollTop() - (e.clientY - d.current_height);\n                container.scrollTop(new_scroll);\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n                var delta_chrom = Math.round(\n                    delta /\n                        view.viewport_container.width() *\n                        (view.high - view.low)\n                );\n                view.move_delta(delta_chrom);\n            });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack\n            .bind(\"dragstart\", function(e, d) {\n                return $(\"<div/>\")\n                    .addClass(\"zoom-area\")\n                    .css(\n                        \"height\",\n                        view.browser_content_div.height() +\n                            view.top_labeltrack.height() +\n                            1\n                    )\n                    .appendTo($(this));\n            })\n            .bind(\"drag\", (e, d) => {\n                $(d.proxy).css({\n                    left:\n                        Math.min(e.pageX, d.startX) -\n                        view.container.offset().left,\n                    width: Math.abs(e.pageX - d.startX)\n                });\n\n                var min =\n                    Math.min(e.pageX, d.startX) - view.container.offset().left;\n\n                var max =\n                    Math.max(e.pageX, d.startX) - view.container.offset().left;\n\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                view.update_location(\n                    Math.round(min / width * span) + view.low,\n                    Math.round(max / width * span) + view.low\n                );\n            })\n            .bind(\"dragend\", (e, d) => {\n                var min = Math.min(e.pageX, d.startX);\n                var max = Math.max(e.pageX, d.startX);\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                var old_low = view.low;\n                view.low = Math.round(min / width * span) + old_low;\n                view.high = Math.round(max / width * span) + old_low;\n                $(d.proxy).remove();\n                view.request_redraw();\n            });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(\n            new LabelTrack(this, { content_div: this.top_labeltrack })\n        );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(() => {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", () => {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(base.toLowerCase() + \"_color\") ||\n            this.config.get_value(\"n_color\")\n        );\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(() => {\n                self.trigger(\n                    \"navigate\",\n                    new_chrom + \":\" + new_low + \"-\" + new_high\n                );\n            }, 500);\n        } else {\n            view.trigger(\n                \"navigate\",\n                new_chrom + \":\" + new_low + \"-\" + new_high\n            );\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text(\n            util.commatize(low) + \" - \" + util.commatize(high)\n        );\n        this.nav_input.val(\n            this.chrom + \":\" + util.commatize(low) + \"-\" + util.commatize(high)\n        );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var view = this;\n        var chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function(result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n\n                view.chrom_select.html(\"\");\n                view.chrom_select.append(\n                    $('<option value=\"\">Select Chrom/Contig</option>')\n                );\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            '<option value=\"previous\">Previous ' +\n                                MAX_CHROMS_SELECTABLE +\n                                \"</option>\"\n                        )\n                    );\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append(\n                        $(\n                            '<option value=\"next\">Next ' +\n                                MAX_CHROMS_SELECTABLE +\n                                \"</option>\"\n                        )\n                    );\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(() => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, (v, i) => v.chrom === chrom)[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, () => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/);\n\n        var chrom = chrom_pos[0];\n        var new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined;\n        var new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(() => {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", () => {\n            self.changed();\n        });\n    },\n\n    add_label_track: function(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this;\n\n        var // Either redrawing a single drawable or all view's drawables.\n        track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, track => {\n            var track_options = _.find(\n                view.tracks_to_be_redrawn,\n                to => to[0] === track\n            );\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(() => {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low;\n        var high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b =\n            this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px =\n            this.low /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var width_px =\n            (this.high - this.low) /\n                (this.max_high - this.max_low) *\n                this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box\n            .css({\n                left: left_px,\n                width: Math.max(min_width_px, width_px)\n            })\n            .show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\n                \"left\",\n                left_px - (min_width_px - width_px) / 2\n            );\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, track_options => {\n            var track = track_options[0];\n            var options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, label_track => {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function(point, container) {\n        if (\n            this.max_high === 0 ||\n            this.high - this.low <= this.min_separation\n        ) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center =\n                point /\n                    this.viewport_container.width() *\n                    (this.high - this.low) +\n                this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height(\n            this.container.height() -\n                this.top_container.height() -\n                this.bottom_container.height()\n        );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n            content_div: this.overview_viewport\n        });\n\n        var view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = () => {\n            view.overview_highlight\n                .show()\n                .height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(\n                view.overview_drawable.content_div.height() +\n                    view.overview_box.outerHeight()\n            );\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (\n            options.tool_state !== undefined &&\n            options.tool_state.hidden !== undefined\n        ) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\");\n        var param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\")\n            .addClass(\"param-label\")\n            .text(param.get(\"label\"))\n            .appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\")\n            .addClass(\"param-input\")\n            .html(param.get(\"html\"))\n            .appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n        var tool = this.model;\n        var parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div\n            .bind(\"drag\", e => {\n                e.stopPropagation();\n            })\n            .click(e => {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", e => {\n                e.stopPropagation();\n            })\n            .keydown(e => {\n                e.stopPropagation();\n            });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\")\n            .appendTo(parent_div)\n            .text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(param => {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\")\n            .addClass(\"param-row\")\n            .appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on visible region\")\n            .appendTo(run_tool_row);\n        run_on_region_button.click(() => {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(() => {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get(\"track\").dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id\n            },\n            null,\n            track_data => {\n                Galaxy.modal.show({\n                    title: tool.get(\"name\") + \" is Running\",\n                    body:\n                        tool.get(\"name\") +\n                        \" is running on the complete dataset. Tool outputs are in dataset's history.\",\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\");\n\n        var tool = this.model;\n\n        var region = new visualization.GenomeRegion({\n            chrom: track.view.chrom,\n            start: track.view.low,\n            end: track.view.high\n        });\n\n        var url_params = {\n            target_dataset_id: track.dataset.id,\n            action: \"rerun\",\n            tool_id: tool.id,\n            regions: [region.toJSON()]\n        };\n\n        var current_track = track;\n\n        var // Set name of track to include tool name, parameters, and region used.\n        track_name =\n            tool.get(\"name\") +\n            current_track.tool_region_and_parameters_str(region);\n\n        var container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(\n                current_track,\n                group,\n                false\n            );\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(\n                current_track.view.content_div.children()[index]\n            );\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(\n            current_track.filters_manager.copy(new_track)\n        );\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track, track_data => {\n            new_track.set_dataset(new data.Dataset(track_data));\n            new_track.tiles_div.text(\"Running job.\");\n            new_track.init();\n        });\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(response => {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(\n                    DATA_CANNOT_RUN_TOOL + response.message\n                );\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (\n        this.filter.high === Number.MAX_VALUE ||\n        this.filter.low === -Number.MAX_VALUE ||\n        this.filter.low === this.filter.high\n    ) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (\n        (parseFloat(feature_data[this.filter.index]) - this.filter.low) /\n        (this.filter.high - this.filter.low)\n    );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = () => {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = () => {};\n\nvar FeatureTrackTile = function(\n    track,\n    region,\n    w_scale,\n    canvas,\n    data,\n    mode,\n    message,\n    all_slotted,\n    feature_mapper,\n    incomplete_features,\n    seq_data\n) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = () => {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset =\n            obj_dict.dataset instanceof Backbone.Model\n                ? obj_dict.dataset\n                : new data.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait =\n        \"data_query_wait\" in obj_dict\n            ? obj_dict.data_query_wait\n            : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager =\n        \"data_manager\" in obj_dict\n            ? obj_dict.data_manager\n            : new visualization.GenomeDataManager({\n                  dataset: this.dataset,\n                  // HACK: simulate 'genome' attributes from view for now.\n                  // View should eventually use Genome object.\n                  genome: new visualization.Genome({\n                      key: view.dbkey,\n                      chroms_info: {\n                          chrom_info: view.chrom_data\n                      }\n                  }),\n                  data_mode_compatible: this.data_and_mode_compatible,\n                  can_subset: this.can_subset\n              });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(\n        this.container_div\n    );\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                } else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(\n                        track.config.get_value(\"name\") +\n                            track.tool_region_and_parameters_str()\n                    );\n                } else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html =\n                    \"<strong>Tool</strong>:\" +\n                    track.tool.get(\"name\") +\n                    \"<br/>\" +\n                    \"<strong>Dataset</strong>:\" +\n                    track.config.get_value(\"name\") +\n                    \"<br/>\" +\n                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                    '<option value=\"cur\">current viewing area</option>' +\n                    '<option value=\"bookmarks\">bookmarks</option>' +\n                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n                    \"</select>\";\n\n                var cancel_fn = () => {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                };\n\n                var ok_fn = () => {\n                    var regions_to_use = $(\n                            'select[name=\"regions\"] option:selected'\n                        ).val(),\n                        regions,\n                        view_region = new visualization.GenomeRegion({\n                            chrom: view.chrom,\n                            start: view.low,\n                            end: view.high\n                        }),\n                        bookmarked_regions = _.map(\n                            $(\".bookmark\"),\n                            elt =>\n                                new visualization.GenomeRegion({\n                                    from_str: $(elt)\n                                        .children(\".position\")\n                                        .text()\n                                })\n                        );\n\n                    // Get regions for visualization.\n                    if (regions_to_use === \"cur\") {\n                        // Use only current region.\n                        regions = [view_region];\n                    } else if (regions_to_use === \"bookmarks\") {\n                        // Use only bookmarks.\n                        regions = bookmarked_regions;\n                    } else {\n                        // Use both current region and bookmarks.\n                        regions = [view_region].concat(bookmarked_regions);\n                    }\n\n                    Galaxy.modal.hide();\n\n                    // Go to visualization.\n                    window.location.href =\n                        Galaxy.root +\n                        \"visualization/sweepster\" +\n                        \"?\" +\n                        $.param({\n                            dataset_id: track.dataset.id,\n                            hda_ldda: track.dataset.get(\"hda_ldda\"),\n                            regions: JSON.stringify(\n                                new Backbone.Collection(regions).toJSON()\n                            )\n                        });\n                };\n\n                var check_enter_esc = e => {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n\n                // show dialog\n                Galaxy.modal.show({\n                    title:\n                        \"Visualize tool parameter space and output from different parameter settings?\",\n                    body: html,\n                    buttons: { No: cancel_fn, Yes: ok_fn }\n                });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function() {\n        return $(\"<div/>\")\n            .addClass(\"track\")\n            .attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(\n            () => {\n                if (track.config.get_value(\"content_visible\")) {\n                    in_handle = true;\n                    drag_control.show();\n                }\n            },\n            () => {\n                in_handle = false;\n                if (!in_drag) {\n                    drag_control.hide();\n                }\n            }\n        );\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control\n            .hide()\n            .bind(\"dragstart\", (e, d) => {\n                in_drag = true;\n                d.original_height = $(track.content_div).height();\n            })\n            .bind(\"drag\", (e, d) => {\n                var new_height = Math.min(\n                    Math.max(d.original_height + d.deltaY, track.min_height_px),\n                    track.max_height_px\n                );\n                $(track.tiles_div).css(\"height\", new_height);\n                track.visible_height_px =\n                    track.max_height_px === new_height ? 0 : new_height;\n                track.on_resize();\n            })\n            .bind(\"dragend\", (e, d) => {\n                track.tile_cache.clear();\n                in_drag = false;\n                if (!in_handle) {\n                    drag_control.hide();\n                }\n                track.config.set_value(\"height\", track.visible_height_px);\n                track.changed();\n            })\n            .appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\")\n            .addClass(\"message\")\n            .html(msg_html)\n            .appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\")\n            .addClass(\"tiles\")\n            .appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred();\n\n        var params = {\n            hda_ldda: track.dataset.get(\"hda_ldda\"),\n            data_type: this.dataset_check_type,\n            chrom: track.view.chrom,\n            retry: retry\n        };\n\n        $.getJSON(this.dataset.url(), params, result => {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"View error\")\n                            .click(() => {\n                                Galaxy.modal.show({\n                                    title: \"Trackster Error\",\n                                    body: \"<pre>\" + result.message + \"</pre>\",\n                                    buttons: {\n                                        Close: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            })\n                    );\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"Try again\")\n                            .click(() => {\n                                track.init(true);\n                            })\n                    );\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (\n                result === \"no data\" ||\n                (result.data !== undefined &&\n                    (result.data === null || result.data.length === 0))\n            ) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(() => {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\n                        \"height\",\n                        track.visible_height_px + \"px\"\n                    );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(() => {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n\n                // Tracks may not have stat data either because there is no data or data is not yet ready.\n                if (data && data.min !== undefined && data.max !== undefined) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update config, prefs\n                    track.config.set_default_value(\"min_value\", min_value);\n                    track.config.set_default_value(\"max_value\", max_value);\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(\n        this,\n        \"filters\" in obj_dict ? obj_dict.filters : null\n    );\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool\n        ? new TracksterTool(\n              _.extend(obj_dict.tool, {\n                  track: this,\n                  tool_state: obj_dict.tool_state\n              })\n          )\n        : null;\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\")\n        .addClass(\"tiles\")\n        .appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\")\n        .addClass(\"overlay\")\n        .appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title:\n                \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n                if (\n                    isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                    isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(\n                        Math.min(\n                            0,\n                            Math.max(min_value, data.mean - 2 * data.sd)\n                        )\n                    );\n                    max_value = Math.ceil(\n                        Math.max(\n                            0,\n                            Math.min(max_value, data.mean + 2 * data.sd)\n                        )\n                    );\n                    // Update the prefs\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\n            \"title\",\n            \"Set display mode (now: \" + track.mode + \")\"\n        );\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return w_scale + \"_\" + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after;\n        var low = this.view.low;\n        var high = this.view.high;\n        var range = high - low;\n        var width = this.view.container.width();\n        var w_scale = this.view.resolution_px_b;\n        var resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n        tile_width = Math.floor(TILE_SIZE * resolution);\n\n        var // Index of first tile that overlaps visible region.\n        tile_index = Math.floor(low / tile_width);\n\n        var tile_region;\n        var tile_promise;\n        var tile_promises = [];\n        var tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(tile => {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div\n                .children(\".remove\")\n                .removeClass(\"remove\")\n                .remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(() => {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, t => t !== null);\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this;\n        var css_class = type === \"max\" ? \"top\" : \"bottom\";\n        var text = type === \"max\" ? \"max\" : \"min\";\n        var pref_name = type === \"max\" ? \"max_value\" : \"min_value\";\n        var label = this.container_div.find(\".yaxislabel.\" + css_class);\n        var value = round(track.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change =\n            on_change ||\n            (() => {\n                track.request_draw({ clear_tile_cache: true });\n            });\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\")\n                .text(value)\n                .make_text_editable({\n                    num_cols: 12,\n                    on_finish: function(new_val) {\n                        $(\".tooltip\").remove();\n                        track.config.set_value(pref_name, round(new_val, 1));\n                        on_change();\n                    },\n                    help_text: \"Set \" + text + \" value\"\n                })\n                .addClass(\"yaxislabel \" + css_class)\n                .css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(\n            tiles,\n            tile => tile instanceof LineTrackTile\n        );\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, tile => {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            track._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, tile => tile.has_icons);\n\n            if (icons_present) {\n                _.each(tiles, tile => {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force;\n        var mode = options.mode || this.mode;\n        var resolution = 1 / w_scale;\n\n        var // Useful vars.\n        track = this;\n\n        var drawables = this._get_drawables();\n        var key = this._gen_tile_cache_key(w_scale, region);\n\n        var is_tile = o => o && \"track\" in o;\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : track.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = () => {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, m => m === mode)\n                ? \"Coverage\"\n                : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, (\n                d // Get the track data/promise.\n            ) =>\n                d.data_manager.get_data(\n                    region,\n                    data_mode,\n                    resolution,\n                    track.data_url_extra_params\n                )\n            );\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(\n                    view.reference_track.data_manager.get_data(\n                        region,\n                        mode,\n                        resolution,\n                        view.reference_track.data_url_extra_params\n                    )\n                );\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(() => {\n            var tile_data = get_tile_data();\n            var tracks_data = tile_data;\n            var seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, d => util.is_deferred(d))) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(\n                    track.draw_helper(region, w_scale, options)\n                ).then(tile => {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(\n                    tile_data.pop(),\n                    region\n                );\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [];\n\n            var drawing_heights = [];\n\n            _.each(drawables, (d, i) => {\n                var mode = d.mode;\n                var data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(\n                    d.get_canvas_height(data, mode, w_scale, width)\n                );\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas();\n            var tile_low = region.get(\"start\");\n            var tile_high = region.get(\"end\");\n            var all_data_index = 0;\n\n            var width =\n                Math.ceil((tile_high - tile_low) * w_scale) + track.left_offset;\n\n            var height = _.max(drawing_heights);\n            var tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, (d, i) => {\n                tile = d.draw_tile(\n                    tracks_data[i],\n                    ctx,\n                    drawing_modes[i],\n                    region,\n                    w_scale,\n                    seq_data\n                );\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if (\n            [undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1\n        ) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if (\n            [undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !==\n            -1\n        ) {\n            this.config.set_value(\n                \"max_value\",\n                _.max(_.map(result.data, d => d[1])) || 0\n            );\n        }\n\n        var canvas = ctx.canvas;\n\n        var painter = new painters.LinePainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this;\n        var tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round(\n            (tile.low -\n                (this.is_overview ? this.view.max_low : this.view.low)) *\n                w_scale\n        );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(\n            this.max_height_px,\n            tile_element.height() - 2\n        );\n\n        // Update height for all tiles based on max height.\n        tile_element\n            .parent()\n            .children()\n            .css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this;\n        var region_str = region !== undefined ? region.toString() : \"all\";\n        var param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (\n            data.dataset_type === \"bigwig\" ||\n            data.extra_info === \"no_detail\"\n        ) {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view;\n        var range = view.high - view.low;\n\n        var tickDistance = Math.floor(\n            Math.pow(10, Math.floor(Math.log(range) / Math.log(10)))\n        );\n\n        var position = Math.floor(view.low / tickDistance) * tickDistance;\n        var width = this.view.container.width();\n        var new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor(\n                (position - view.low) / range * width\n            );\n            new_div.append(\n                $(\"<div/>\")\n                    .addClass(\"pos-label\")\n                    .text(util.commatize(position))\n                    .css({\n                        left: screenPosition\n                    })\n            );\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, d => {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    action_icons_def: [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, d => {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(() => {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n            name: this.config.get_value(\"name\")\n        });\n\n        var track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(\n            _.map(this.drawables, d => d.config.get_value(\"min_value\"))\n        );\n\n        var max = _.max(\n            _.map(this.drawables, d => d.config.get_value(\"max_value\"))\n        );\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this;\n        var min_value = this.config.get_value(\"min_value\");\n        var max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1;\n\n        var i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this;\n\n        var t = () => {\n            track.update_all_min_max();\n        };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function(view) {\n    TiledTrack.call(\n        this,\n        view,\n        { content_div: view.top_labeltrack },\n        { resize: false, header: false }\n    );\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 13,\n                hidden: true\n            }\n        ]);\n    },\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\");\n        var new_visible;\n        var tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(\n                this,\n                region,\n                w_scale,\n                options\n            );\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region);\n\n        var seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(\n        supportsByteRanges(\n            Galaxy.root + \"datasets/\" + this.dataset.id + \"/display\"\n        )\n    ).then(supportsByteRanges => {\n        if (supportsByteRanges) {\n            self.data_manager = new bbi.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            { key: \"color\", label: \"Color\", type: \"color\" },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(\n    DiagonalHeatmapTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    {\n        display_modes: [\"Heatmap\"],\n\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"int\",\n                    default_value: undefined\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 500,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        },\n\n        /**\n     * Additional initialization required before drawing track for the first time.\n     */\n        predraw_init: function() {\n            var track = this;\n            return $.getJSON(\n                track.dataset.url(),\n                {\n                    data_type: \"data\",\n                    stats: true,\n                    chrom: track.view.chrom,\n                    low: 0,\n                    high: track.view.max_high,\n                    hda_ldda: track.dataset.get(\"hda_ldda\")\n                },\n                result => {\n                    var data = result.data;\n                }\n            );\n        },\n\n        /**\n     * Draw tile.\n     */\n        draw_tile: function(result, ctx, mode, region, w_scale) {\n            // Paint onto canvas.\n            var canvas = ctx.canvas;\n\n            var painter = new painters.DiagonalHeatmapPainter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode\n            );\n\n            painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n            return new Tile(this, region, w_scale, canvas, result.data);\n        }\n    }\n);\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Block color\",\n                type: \"color\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand color\",\n                type: \"color\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true,\n                help:\n                    \"Show the number of items in each bin when drawing summary histogram\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"connector_style\",\n                label: \"Connector style\",\n                type: \"select\",\n                default_value: \"fishbones\",\n                options: [\n                    {\n                        label: \"Line with arrows\",\n                        value: \"fishbone\"\n                    },\n                    { label: \"Arcs\", value: \"arcs\" }\n                ]\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var track = this;\n        var i;\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), inc_features => {\n                _.each(inc_features, feature => {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, tile => {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(\n                    all_incomplete_features,\n                    _.map(tile.incomplete_features, f => f[0])\n                );\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(\n                    tile_incomplete_features,\n                    _.keys(tile.other_tiles_features_drawn)\n                );\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                        data: _.values(tile_incomplete_features)\n                    };\n\n                    var new_canvas = self.view.canvas_manager.new_canvas();\n                    var new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(\n                        tile.canvas.height,\n                        self.get_canvas_height(\n                            features,\n                            tile.mode,\n                            tile.w_scale,\n                            100\n                        )\n                    );\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(\n                        features,\n                        new_canvas_ctx,\n                        tile.mode,\n                        tile.region,\n                        tile.w_scale,\n                        tile.seq_data\n                    );\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(\n                        tile.other_tiles_features_drawn,\n                        all_incomplete_features\n                    );\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters;\n            var f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false;\n\n            var example_feature;\n            var filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (\n                            filter.applies_to(example_feature) &&\n                            filter.min !== filter.max\n                        ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\n                \"title\",\n                \"Set display mode (now: Auto/\" + mode + \")\"\n            );\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context;\n\n        var slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new slotting.FeatureSlotter(\n                level,\n                mode,\n                MAX_FEATURE_DEPTH,\n                x => dummy_context.measureText(x)\n            );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(\n                w_scale,\n                result.data,\n                mode\n            );\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return Math.max(\n                this.min_height_px,\n                dummy_painter.get_required_height(rows_required, canvas_width)\n            );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this;\n        var canvas = ctx.canvas;\n        var tile_low = region.get(\"start\");\n        var tile_high = region.get(\"end\");\n        var left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                mode,\n                region,\n                w_scale\n            );\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [];\n\n        var slots = this.slotters[w_scale].slots;\n        var all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter\n            ? new FilterScaler(this.filters_manager.alpha_filter)\n            : null;\n\n        var filter_height_scaler = this.filters_manager.height_filter\n            ? new FilterScaler(this.filters_manager.height_filter)\n            : null;\n\n        var painter = new this.painter(\n            filtered,\n            tile_low,\n            tile_high,\n            this.config.to_key_value_dict(),\n            mode,\n            filter_alpha_scaler,\n            filter_height_scaler,\n            // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n            ref_seq,\n            b => track.view.get_base_color(b)\n        );\n\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(\n                ctx,\n                canvas.width,\n                canvas.height,\n                w_scale,\n                slots\n            );\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(\n                track,\n                region,\n                w_scale,\n                canvas,\n                result.data,\n                mode,\n                result.message,\n                all_slotted,\n                feature_mapper,\n                incomplete_features,\n                ref_seq\n            );\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"show_sample_data\",\n                label: \"Show sample data\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_labels\",\n                label: \"Show summary and sample labels\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"summary_height\",\n                label: \"Locus summary height\",\n                type: \"float\",\n                default_value: 20\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(\n                result,\n                ctx,\n                \"Histogram\",\n                region,\n                w_scale\n            );\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view;\n\n            var painter = new this.painter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode,\n                b => view.get_base_color(b)\n            );\n\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\")\n                ? this.dataset.get_metadata(\"sample_names\").length\n                : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(\n                null,\n                null,\n                null,\n                this.config.to_key_value_dict(),\n                mode\n            );\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(\n            this,\n            tiles,\n            width,\n            w_scale,\n            clear_after\n        );\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (\n            line_track_tiles.length === 0 &&\n            this.config.get_value(\"show_labels\") &&\n            sample_names &&\n            sample_names.length > 1\n        ) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\")\n                        .text(\"Summary\")\n                        .addClass(\"yaxislabel variant top\")\n                        .css({\n                            \"font-size\": font_size + \"px\",\n                            top:\n                                (this.config.get_value(\"summary_height\") -\n                                    font_size) /\n                                    2 +\n                                \"px\"\n                        })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\")\n                            .html(samples_div_html)\n                            .addClass(\"yaxislabel variant top sample\")\n                            .css({\n                                top: this.config.get_value(\"summary_height\")\n                            })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === \"Squish\" ? 5 : 10) + \"px\";\n            $(this.tiles_div)\n                .find(\".sample\")\n                .css({\n                    \"font-size\": font_size,\n                    \"line-height\": font_size\n                });\n            // Color labels to preference color.\n            $(this.tiles_div)\n                .find(\".yaxislabel\")\n                .css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(\n    ReadTrack.prototype,\n    Drawable.prototype,\n    TiledTrack.prototype,\n    FeatureTrack.prototype,\n    {\n        build_config_params: function() {\n            return _.union(Drawable.prototype.config_params, [\n                {\n                    key: \"block_color\",\n                    label: \"Histogram color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"detail_block_color\",\n                    label: \"Sense strand block color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand block color\",\n                    type: \"color\",\n                    default_value: \"#DDDDDD\"\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Histogram minimum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Histogram maximum\",\n                    type: \"float\",\n                    default_value: undefined,\n                    help: \"clear value to set automatically\"\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 0,\n                    hidden: true\n                }\n            ]);\n        },\n\n        config_onchange: function() {\n            this.set_name(this.config.get_value(\"name\"));\n            this.request_draw({ clear_tile_cache: true });\n        }\n    }\n);\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = (template, view, container) => {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexport default {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n"]}