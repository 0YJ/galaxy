{"version":3,"sources":["viz/trackster/tracks.js"],"names":["define","_","visualization","viz_views","util","slotting","painters","filters_mod","data","tools_mod","config_mod","bbi","round","num","places","promise","url","beforeSend","val","supportsByteRanges","$","Deferred","ajax","type","xhr","setRequestHeader","success","result","status","resolve","extend","html_elt_js_obj_dict","is_container","element","obj","moveable","handle_class","container_selector","element_js_obj","this_obj","attr","bind","handle","relative","e","d","this","child","container","top","bottom","parent","children","length","cur_container","insertAfter","remove_drawable","add_drawable","offsetY","insertBefore","add_drawable_before","i","outerHeight","is","get","find","prepend","hasClass","position","removeClass","append","move_drawable","deltaY","MAX_FEATURE_DEPTH","addClass","MIN_SQUISH_VIEW_WIDTH","CONTINUOUS_DATA_MODES","Drawable","view","obj_dict","config","ConfigSettingCollection","id","id_counter","drag_handle_class","set_value","is_overview","action_icons","from_models_and_saved_values","config_params","prefs","header_div","name","config_onchange","header","container_div","build_container_div","header_view","icons_div","model","hide","$el","prototype","action_icons_def","hover","show","on_click_fn","drawable","title","show_contents","toggle_icon","hide_contents","css_class","ConfigSettingCollectionView","collection","key","remove","can_draw","label","default_value","get_value","hidden","init","request_draw","changed","enabled","_draw","old_name","to_dict","set_name","new_name","revert_name","update_icons","call","get_drawables","unpack_drawables","obj_type","DrawableCollection","drawables_array","drawables","object_from_template","options","dictified_drawables","push","to_key_value_dict","index","other","replace_drawable","indexOf","new_drawable","old_drawable","update_html","replaceWith","splice","new_position","queue","get_tracks","track_type","slice","tracks","shift","DrawableGroup","filters_manager","content_div","saved_filters_managers","appendTo","FiltersManager","after","parent_div","old_manager","filters","visible","group","_restore_filter_managers","show_composite_track","clear_filters","tiles_div","setup_multitrack_filtering","clear_tile_cache","toggle","num_drawables","composite_icon","filters_icon","num_feature_tracks","CompositeTrack","j","get_type","a_type","can_composite","FeatureTrack","filter","LineTrack","shared_filters","remove_all","new_filter","NumberFilter","filter_name","add_filter","composite_track","init_filters","label_tracks","each","tracks_to_be_redrawn","TracksterView","Backbone","View","initialize","chrom","requested_redraw","vis_id","dbkey","stand_alone","undefined","parent_element","max_low","top_container","max_high","zoom_factor","browser_content_div","min_separation","has_changes","bottom_container","load_chroms_deferred","render","canvas_manager","viewport_container","CanvasManager","ownerDocument","reset","intro_div","add_tracks_button","select_datasets","track","nav_container","top_labeltrack","overview_box_background","default_overview_height","overview_box","nav_controls","chrom_select","which","keyCode","click","go_to","prependTo","nav","nav_input","location_span","css","overview","select","autocomplete","overview_viewport","source","request","response","all_features","feature_search_deferreds","map","concat","dataset_features","apply","value","minLength","tooltip","placement","hidden_input","zo_link","low","high","zoom_out","zi_link","t","change_chrom","data_manager","term","when","done","feature","zoom_in","pageX","load_chroms","current_x","offsetX","current_height","trigger","clientY","new_scroll","delta_chrom","move_delta","delta","Math","width","overview_close","reset_overview","clientX","original_low","left","max","update_location","scrollTop","min","height","proxy","startX","offset","abs","span","add_label_track","LabelTrack","window","resize_timer","clearTimeout","old_low","request_redraw","update_intro_div","setTimeout","timer","document","redraw","self","base","toLowerCase","text","trigger_navigate","new_chrom","url_parms","new_high","delay","new_low","reference_track","commatize","chrom_data","chrom_info","Galaxy","root","error","alert","reference","ReferenceTrack","ref_track","html","len","chrom_option","next_chroms","chrom_start_index","start_index","found","grep","v","chrom_pos","split","str","then","replace","parseInt","redraw_on_move_fn","move_fraction","fraction","current_chrom_span","data_fetch","on","track_list","label_track","track_options","to","requestAnimationFrame","_redraw","overview_highlight","ceil","resolution_px_b","left_px","cur_center","point","new_half","width_px","resize_viewport","resize_window","set_overview","overview_drawable","dataset","postdraw_actions","copy","tool_state","set","ToolParameterView","TracksterTool","param_div","Tool","defaults","html_div","remove_inputs","state_dict","TracksterToolView","is_visible","change :input","stopPropagation","param","update_value","update_event","param_view","set_visible","run_on_dataset_button","run_on_dataset","tool","keydown","run_tool_row","run","target_dataset_id","update_params","params","url_params","action","current_track","tool_id","track_name","track_data","modal","body","buttons","Close","run_on_region","GenomeRegion","start","new_track","constructor","hda_ldda","regions","init_for_tool_data","tool_region_and_parameters_str","region","set_dataset","ss_deferred","ServerStateDeferred","ajax_settings","contentType","success_fn","change_mode","mode","set_filters_manager","Dataset","success_callback","inputs","get_inputs_dict","FilterScaler","Scaler","default_val","interval","Number","go","DATA_NOCONVERTER","canvas","message","LineTrackTile","predisplay_actions","FeatureTrackTile","feature_data","feature_mapper","MAX_VALUE","has_icons","seq_data","Tile","w_scale","html_elt","stale","all_slotted","incomplete_features","other_tiles_features_drawn","Track","Model","data_query_wait","GenomeDataManager","genome","Genome","chroms_info","can_subset","min_height_px","max_height_px","resize","add_resize_handle","view_region","regions_to_use","dataset_id","cancel_fn","ok_fn","unbind","end","bookmarked_regions","elt","from_str","in_drag","location","href","drag_control","JSON","stringify","Collection","toJSON","in_handle","No","Yes","on_resize","VariantTrack","original_height","show_message","new_height","visible_height_px","tile_cache","clear","retry","getJSON","msg_elt","msg_html","init_deferred","predraw_init","data_type","tool_view","TiledTrack","valid_chroms","filters_available","left_offset","max_value","min_value","stats","overlay_div","floor","mean","sd","set_default_value","Cache","dynamic_tool_div","slotters","max_rows","set_min_max","before_draw","isNaN","parseFloat","new_mode","range","resolution","tools_icon","param_space_viz_icon","_gen_tile_cache_key","tile_promises","tile_region","tile_index","tile_promise","draw_helper","clear_after","tiles","_add_yaxis_label","on_change","num_cols","TILE_CACHE_SIZE","help_text","tile_width","line_track_tiles","tile","icons_present","pref_name","ERROR_PADDING","make_text_editable","on_finish","new_val","update_auto_mode","display_mode","_get_drawables","force","get_tile_data","m","get_mode","tile_data","tracks_data","set_elt","tile_drawn","get_elt","o","is_tile","show_tile","drawing_heights","get_canvas_height","data_mode","tile_high","get_data","data_url_extra_params","ctx","is_deferred","subset_entry","pop","drawing_modes","_draw_line_track_tile","new_canvas","painter","getContext","translate","draw_tile","globalAlpha","globalCompositeOperation","tile_element","canvas_width","track_height","LinePainter","draw","ref_seq","dataset_type","extra_info","dataset_check_type","toString","values","join","data_and_mode_compatible","entry","pow","log","tickDistance","new_div","visible_height","ReadTrack","show_group","init_deferreds","update_all_min_max","max_height","char_width_px","new_visible","data_url","manager","default_font","textAlign","GenomeReferenceDataManager","c","fillStyle","union","cur_visible","display_modes","subset","font","str_len","get_base_color","fillText","BBIDataManager","DiagonalHeatmapPainter","set_painter_from_config","DiagonalHeatmapTrack","all_incomplete_features","pluck","tile_incomplete_features","features","summary_draw_height","start_end_dct","help","update_ui_elt","LinkedFeaturePainter","example_feature","f","inc_features","omit","keys","size","new_canvas_ctx","drawImage","mode_icon","new_tile","applies_to","rows_required","incremental_slots","show_more_rows_icon","level","hide_feature","dummy_context","slotter","FeatureSlotter","x","measureText","slot_features","filter_alpha_scaler","filter_height_scaler","draw_results","VariantPainter","dummy_painter","get_required_height","cur_tile","filtered","slots","flen","update_attrs","keep","num_samples","alpha_filter","height_filter","tile_low","b","deferreds","fetch","translation","font_size","samples_div_html","sample_names","ReadPainter","get_metadata","match","drawable_type","template","font-size","line-height","addable_objects","VcfTrack"],"mappings":"aAAAA,QACI,kBADJA,oBAGI,gBAaJ,qBAXI,yBAaJ,yBAXI,wBAaJ,mBAXI,iBACA,eAaJ,uBACA,oBAXG,SAASC,EAAGC,EAAeC,EAAWC,EAAMC,EAAUC,EAAUC,EAAaC,EAAMC,EAAWC,EAAYC,GAuK7G,SAASC,EAAMC,EAAKC,GAapBA,IACIA,EAAIC,GAGAC,IAAAA,EAAAA,KAAKA,IAFF,GAAAF,GAGHG,OAAAA,KAAAA,MAAAA,EAAYC,GAAAA,EAHT,SAAPC,EAAAH,GADA,IAAID,EAAUK,EAAEC,WAYhB,OAAAD,EAAAE,MACHC,KAAA,OAVOP,IAAKA,EAYbC,WAAA,SAAAO,GAVYA,EAAIC,iBAAiB,QAAS,eAElCC,QAAS,SAASC,EAAQC,EAAQJ,GAC9BT,EAAQc,QAAuB,MAAfL,EAAII,WAIrBb,EA9LX,IAAIe,EAAS7B,EAAE6B,OAQXC,KAKAC,EAAe,SAASC,EAASC,GAarCH,EAAeE,EAAXE,KAAoBF,OAASG,GAWrBD,EAAA,SAAAF,EAAAG,EAAAC,EAAAC,GAFJD,EAIIE,SAJJR,EAAAE,EAAAO,KAAA,OAAAF,EADJL,EAAQQ,KAAM,QAAUC,OAAQ,IAAMN,EAAcO,UAAU,GAAQ,SAAWC,EAAGC,GAYhFzB,EAAA0B,MAAA,IAKAC,EACAC,EACAC,EACIA,EACAC,EARJC,EAAA/B,EAAA0B,MAAAK,SAEAC,EAAAD,EAAAC,SAAA,iBAVIb,EAAWR,EAAqBX,EAAE0B,MAAMN,KAAK,OA0BzC,GAAA,KAFHQ,EAND5B,EAAA0B,MAOSD,QAAAR,IACLgB,OAAA,CAEAC,GADAlC,EAAAA,EAAQmC,WAARN,KACAK,EAAcE,cACdF,IAAAA,EAAAA,EAAwBG,EAAalB,KAArC,OACA,GAAAM,EAAAa,QAAAT,EAKRD,OAHC5B,EAAA0B,MAAAa,aAAAX,GAXOM,EAAcE,gBAAgBjB,QAatCe,EAAAN,UAAAY,oBAAArB,EAAAe,GAGIP,GAAAA,EAAAA,QAAUK,EAMN,OAJJF,EAAAA,MAAAA,YAAeH,GACfO,EAAAE,gBAAAjB,QACAe,EAAcjB,UAAAA,aAAuBE,GASjC,IADCS,EAAA,KACDa,EAAA,EAAAA,EAAAT,EAAAC,OAAAQ,IAKA,GAJAd,EAAA3B,EAAAgC,EAAIb,IAASS,IACTT,EAAAA,EAAAA,WAASS,IACZE,EAAAD,EAAAF,EAAAe,cAEDf,EAAAgB,GAAA1B,IAAAS,OAAAC,EAAAiB,IAAA,IACHnB,EAAAa,SAAAT,GAAAJ,EAAAa,SAAAR,EAaJ,OAzBWL,EAAEa,QAAUT,EAAMC,EAASL,EAAEa,QAezCX,EAAAkB,KAAA,gBAAAC,QAAApB,MAGMe,EAAOA,KAAIT,gBAAiBS,OAAMf,MAG/BP,EAAAS,WACED,EAAMoB,UAASX,gBAAsBT,QAE3ChB,EAAAgB,EAAAP,KAAA,OAAAiB,aAAAlB,GAQGY,IAAAA,EAAAA,EAAAA,EAAAA,EAAcE,SACdtB,EAAAA,EAAAA,EAAAA,IAAAA,MACHc,EAAAa,QAAAX,EAAAqB,WAAAnB,MAGCF,EAAMY,SAAAA,oBAARZ,EAAAoB,SAAA,UALIN,KAaRzC,IAAAgC,EAAQiB,OA9FZvB,OAAAM,EAAAY,IAAAH,EAAA,KARJV,EAAAmB,OAAAxB,MA0FgBf,EAAqBoB,EAAOX,KAAK,OAAO+B,cAAchC,EAAUsB,IAG9Df,OAASM,EAASY,IAAIH,KAgBxCzC,EAAA0B,MAAAa,aAAAP,EAAAY,IAAAH,IAZY9B,EAAqBoB,EAAOX,KAAK,OAAO+B,cAAchC,EAAWM,EAAE2B,OAAS,EAAIX,EAAE,EAAIA,MAgB9FY,KAAAA,YAAoB,WAbhBrD,EAAE0B,MAAM4B,SAAS,cAcrBjC,KAAA,UAAA,WACAkC,EAAAA,MAAAA,YAAwB,eAkBxBC,EAAAA,4FAWAA,GAAU,YAAV,OAAA,SAAA,aAmDAC,EAAA,SAAAA,EAAAC,EAAA9B,EAAA+B,GA0BI,GAzBJF,EAAKG,aAAStE,EAAWuE,WAAAA,GARzBnC,KAAKoC,GAAKL,EAASM,aAUnBrC,KAAAgC,KAAAA,EACAhC,KAAAE,UAAUgC,EACNlC,KAAAsC,kBAAYC,EAAUD,kBACzBtC,KAAAwC,aAAA,EACDxC,KAAAyC,gBANAzC,KAAKkC,OAAStE,EAAWuE,wBAAwBO,6BAA6B1C,KAAK2C,cAAeV,EAASW,OAY3G5C,KAAK6C,OAAAA,UAAL,SARI7C,KAAKkC,OAAOK,UAAU,OAAQN,EAASa,MAW3C9C,KAAA+C,iBACA/C,KAAIiC,OAAAA,GAASe,SAAWhD,KAAxB+C,gBAA+B/C,MACqBA,KAAAiD,cAAhDjD,KAAAkD,sBALJlD,KAAK6C,WAAa,MAad,IAAAZ,EAAAe,OAAA,CACA,IAAAG,EAAIC,IAAYD,EAAYC,iBAC5BC,MAAKZ,KACLL,GAAApC,KAAKiD,KAC8CG,KAAAA,WAAUE,EAAVC,IAAmBvD,KADtEiD,cAAAzB,OAAAxB,KAAA6C,YAFA,IAAIO,EAAYD,EAAYC,UAQpCrB,KAASyB,aAAUC,EAAnBhB,aACIzC,KAAAiD,cAAAS,MACA,WAAAN,EAAAO,QAAA,WAAAP,EAAAE,WAKIM,EAAAA,UAAAA,mBAIQC,KAAAA,cACHC,MAJD,oBAMID,UAAAA,SACAA,YAAAA,SAAS3B,GACT2B,EAASE,OAAAA,UAAT,oBACHF,EAAApB,aAAAuB,YAAApC,SAAA,iBAAAL,YAAA,UACJsC,EAAAI,gBAlB6BJ,EAAA3B,OAAAK,UAAA,mBAAA,KAsBxBsB,EAAApB,aADVuB,YAAApC,SAAA,UAAAL,YAAA,iBAEWsC,EAAA3B,OAFXK,UAAA,mBAAA,GAGI2B,EAHJH,oBASKjB,KAAA,gBA9B6BgB,MAAA,gBAgClCI,UAAA,OACAN,YAAA,SAAAC,GACU,IADVjG,EAAAuG,6BAEWC,WAFXP,EAAA3B,SAII0B,gBAAa,sBArCrBd,KAAA,cAmCQgB,MAAO,SAUf9E,UAAO+C,cACHY,YAAAA,SACM0B,GAINtB,EAAAA,YAAiBuB,SAXTT,EAASS,YAiBhBtF,EAAA+C,EAZsByB,WACvBb,gBAaA4B,IAAAA,OAAUC,MAAA,OAAW/F,KAAA,OAAAgG,cAAA,KACjBJ,IAAA,kBAAoB5F,KAAKyD,OAAOwC,eAAU,EAAAC,QAAoB,IATlE5B,gBAAiB,aAchB6B,KApBsB,aAsBvBC,QAAAA,WAXI7E,KAAKgC,KAAK8C,WAedP,SAAA,WAXI,SAAIvE,KAAK+E,UAAW/E,KAAKkC,OAAOwC,UAAU,qBAO9CG,aAAc,aAcVG,MAAA,SAAKC,KANTC,QAAS,aAiBRC,SA/CsB,SAAAC,GAoCnBpF,KAAKiF,SAAWjF,KAAKkC,OAAOwC,UAAU,QAa1C1E,KAAAkC,OAAAK,UAAA,OAAA6C,IAMIC,YAAKnF,WACLF,KAAIgC,UACJhC,KAAKiD,OAAAA,UAAcK,OAAQtD,KAAAiF,WAO/BX,OAAA,WAXItE,KAAK8E,UAcT5B,KAAAA,UAAAA,gBAAqBlD,MAXjB,IAAIgC,EAAOhC,KAAKgC,KAapBhC,KAAAiD,cAAAK,KAAA,EAAA,WAXQhF,EAAE0B,MAAMsE,SAchBgB,EAAAA,sBAOApC,oBAAA,aAKAoC,aAAA,aAPArB,cAAe,aAiBflC,cAASwD,aAKZC,cAND,eAYIC,IAAAA,EAAAA,SAAkBzD,EAAA9B,EAAA+B,GACdF,EAAAwD,KAAAvF,KAAAgC,EAAA9B,EAAA+B,GAGAjC,KAAA0F,SAAKzD,EAAWlB,SACZ8C,KAAAA,cAGP7E,EAAA2G,EAZoDnC,UAAAzB,EAAAyB,WAIrDiC,iBAAkB,SAASG,GAcvB5F,KAAA6F,aAEC,IAAA,IADGhC,EACH9C,EAAA,EAAAA,EAAA6E,EAAArF,OAAAQ,IApBgD8C,EAAAiC,EAAAF,EAAA7E,GAAAf,KAAAgC,KAAAhC,MAU7CA,KAAKW,aAAakD,IAmBrBe,KAAA,WACJ,IA9BoD,IAAA7D,EAAA,EAAAA,EAAAf,KAAA6F,UAAAtF,OAAAQ,IAmB7Cf,KAAK6F,UAAU9E,GAAG6D,QAmBtBI,MAAA,SAAKe,GACDC,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,KAAAA,UAAyBzF,OAAKsF,IACjC7F,KAAA6F,UAAA9E,GAAAiE,MAAAe,IAQLb,QAAA,WAVI,IAAK,IADDc,KACKjF,EAAI,EAAGA,EAAIf,KAAK6F,UAAUtF,OAAQQ,IAa/CJ,EAAcsF,KAAAjG,KAAA6F,UAAA9E,GAAmBmE,WAE7BrB,OACAjB,MAAKkC,KAAL5C,OAAAgE,oBAtDiDR,SAAA1F,KAAA0F,SA4C7CG,UAAWG,IAmBfrF,aAAIwF,SAAWtC,GACX7D,KAAA6F,UAAKA,KAAAA,GACLhC,EAAA3D,UAAAF,KACHA,KAAA8E,WANLhE,oBAAqB,SAAS+C,EAAUuC,GAaxCC,KAAAA,UACI,IAAAF,EAAIA,KAAQN,UAAKA,QAAUS,GAC3B,OAAIH,IAAJA,IACInG,KAAA6F,UAAKA,OAAUM,EAASI,EAAAA,IACxB,IAQRF,iBAAA,SAAAG,EAAAD,EAAAE,GAXI,IAAIN,EAAQnG,KAAK6F,UAAUS,QAAQE,GAoB/B,OAnBW,IAAXL,IAaRzF,KAAAA,UAAiByF,GAAAI,EACTJ,GACAA,EAAJlD,cAAkByD,YAAAH,EAAAtD,eAEdjD,KAAA8E,WAEAqB,GAMRzF,gBAAA,SAAAmD,GAXI,IAAIsC,EAAQnG,KAAK6F,UAAUS,QAAQzC,GACnC,OAAe,IAAXsC,IAcJnG,KAAImG,UAAQQ,OAAKd,EAAUS,GAC3BzC,EAAIsC,UAAc,KACdnG,KAAA8E,WACA,IAJRrD,cAAe,SAASoC,EAAU+C,GAalC,IAAAT,EAAAnG,KAAA6F,UAAAS,QAAAzC,GAXI,OAAe,IAAXsC,IAcRX,KAAAA,UAAemB,OAAAR,EAAA,GAvHsCnG,KAAA6F,UAAAc,OAAAC,EAAA,EAAA/C,GA8G7C7D,KAAK8E,WAab,IAQIU,cAAOqB,WACHhD,OAAAA,KAAAA,WAOHiD,WAAA,SAAAC,GAKT,IAHK,IAXOlD,EAWPgD,EAAA7G,KAAA6F,UAAAmB,MAAA,GA7ILC,KAgJA,IAAAJ,EAAAtG,SAZYsD,EAAWgD,EAAMK,mBACOH,EAchCI,EAAAA,KAAgBtD,GAEZ6B,EAAUG,YACVvD,EAAAA,EAAAA,OAAmBuB,EAAAgC,YAVnB,OAAOoB,KAoBX5H,IAAAA,EAAS,SAAK4D,EAAd/C,EAAkCoC,GA+BlCmB,GA3CAzE,EAAOiD,GAcPyD,SAAA,gBACApD,kBAAK8E,iBAXLzB,EAAmBJ,KAAKvF,KAAMgC,EAAM9B,EAAW+B,GAkB/CjC,KAAAqH,YAAKC,EAAAA,UAAL1F,SAAA,eAAAlC,KAAA,KAAA,SAAAM,KAAAoC,GAAA,gBAAAmF,SAAAvH,KAAAiD,eAZA/D,EAAac,KAAKiD,cAAejD,MAcjCd,EAAAc,KAAAqH,YAAArH,MACAX,EAAIW,KAAAiD,cAAehB,KAAUK,kBAAA,SAAAtC,MAV7BA,KAAKoH,gBAAkB,IAAI3J,EAAY+J,eAAexH,MActDA,KAAA6C,WAAA4E,MAAAzH,KAAAoH,gBAAAM,YAGI1H,KAAAoH,gBAAIO,WAAmBP,MAAAA,EAAAA,+BAV3BpH,KAAKsH,0BAgBA,cAAArF,GACJjC,KAAAyF,iBAAAxD,EAAA4D,WAIDpC,YAAAA,EACI1B,CAGA,IAAA4F,EAAA3H,KAAAoH,gBACItE,KAAAA,gBAAM,IADVrF,EAAA+J,eAAAxH,KAAAiC,EAAA2F,SAEI9D,EAAO4D,WAAAhB,YAFX1G,KAAAoH,gBAAAM,YAII9D,EAAAA,QAAaiE,SACTvJ,KAAAA,+BAKRU,EAAAmI,EAAA3D,UAAAzB,EAAAyB,UAAAmC,EAAAnC,WACIV,kBACAgB,EAAAA,UAAOL,iBAFX,GAGIS,EAAAA,UAAWT,iBAHf,IAMQX,KAAA,iBACIgB,MAAA,uBACAgE,UAAAA,eACAA,YAAAA,SAAMC,GACNzJ,EAAA,YAAAgG,SACAwD,EAAAE,0BAMAF,KAAAA,eACHhE,MAAA,UACDgE,UAAMV,gBACTxD,YAAA,SAAAkE,GAdOA,EAAMV,gBAAgBS,WAoB9B5E,EAAAA,gBAAgBgF,gBAChBH,EAAK5H,6BAOJgI,EAALC,6BAjD0EL,EAAAjD,cAAAuD,kBAAA,KAoD9ErE,EAAAA,gBAAesE,WAGXtG,EAAAyB,UAAAC,iBAAA,IAfJP,oBAAqB,WAmBrBoC,IAAAA,EAAchH,EAAA,UAAAsD,SAAW,SAAAlC,KAAA,KAAA,SAAAM,KAAAoC,IAIrB,OAHApC,KAAAE,WACAF,KAAAE,UAAAmH,YAAA7F,OAAAyB,GAEAA,GAGIgB,cAAA,WACHjE,KAHDkI,UAISI,QAGRvE,cACI,WAlBL/D,KAAKkI,UAAUvE,OAqBX3D,KAAA6E,gBAGAS,aAAA,WAIA,IAAAgD,EAAAtI,KAAA6F,UAAAtF,OACA,GAAA,IAAA+H,EAAAtI,KAAAyC,aAAA8F,eAAAjF,OAAAtD,KAAAyC,aAAA+F,aAAAlF,YAAA,GAEkBuC,IAFlByC,EAAAtI,KAAAyC,aAGIgG,eAHJJ,OAAArI,KAAA6F,UAAA,aAAA6C,GAIA1I,KAAAyC,aAAY1B,aAAIuH,WAEZ,CAWH,IAAAvH,EAFD4H,EAAA9E,EAKIvF,EAAE0B,KAAA6F,UAAF,GAAA+C,WACHH,EAAA,EAjBD,IAAK1H,EAAI,EAAGA,EAAIuH,EAAevH,IAAK,CAoBpC,IADA8C,EAAA7D,KAAA6F,UAAA9E,IACA6H,aAAAC,EAAA,CACAC,eAAA,EACIL,MAEA5E,aAAAkF,GACAN,IAeQO,GAXRhJ,KAAA6F,UAAA,aAAAoD,EACApF,KAAAA,aAAW0E,eAAX5E,QAGIuF,KAAAA,aAAAA,eAAsBpG,OACzBxE,EAAA,YAAAgG,UAMO0E,EAASnF,GAAAA,IAAyB+D,KAAQe,UAA1CpI,OAAA,CAIH,IACJyI,EADIE,KAKL,IADArF,EAAA7D,KAAA6F,UAAA,GACA8C,EAAA,EAAAA,EAAA9E,EAAAuD,gBAAAQ,QAAArH,OAAAoI,IAEAO,GADAF,EAAAnF,EAAAuD,gBAAAQ,QAAAe,IACqBQ,OAArBH,GAQI,IAAAjI,EAAA,EAAI6G,EAAAA,KAAQrH,UAAWkI,OAAAA,IAEnB,IADA5E,EAAA7D,KAAA6F,UAAA9E,GACA4H,EAAA,EAAAA,EAAA9E,EAAAuD,gBAAAQ,QAAArH,OAAAoI,KACAS,EAAAA,EAAahC,gBAAgBiC,QAAAA,IACbvG,QAAM8E,GACNzB,EAAOyB,EAAWzB,MAAAA,KAAAA,GAU1CnG,KAAAoH,gBAAA+B,aACH,IACJvB,EAnKyEwB,EAgJlE,IAAK,IAAIE,KAAeJ,GACpBtB,EAAUsB,EAAeI,IAwBzCvB,SAA0BU,IAGrBW,EAAA,IAAA3L,EAAA4L,cACDvG,KAAA8E,EAAA,GAAA9E,KA7K0EqD,MAAAyB,EAAA,GAAAzB,QAgL9EnG,KAAAoH,gBAAAmC,WAAAH,IAKQpJ,KAAKoH,aAAAA,aAAwB7G,OAASP,KAAGoH,gBAAAQ,QAAArH,OAAA,QAGzCP,KAAKyC,aAAW1B,aAAS8E,SAQ7BkC,yBAAKX,WACR,IAjM6E,IAAArG,EAAA,EAAAA,EAAAf,KAAA6F,UAAAtF,OAAAQ,IA2KtEf,KAAK6F,UAAU9E,GAAGqG,gBAAkBpH,KAAKsH,uBAAuBvG,GAEpEf,KAAKsH,2BA0B0Da,2BAA/D,WAKAqB,GAAAA,KAAAA,gBAAgB3E,QAAhBtE,OAAA,EAAA,CArBIP,KAAKsH,0BAwBb3G,IAAAA,IAAAA,EAAc,EAAAI,EAAAf,KAAA6F,UAAShC,OAAU9C,IAAA,CAC7B4E,IAAAA,EAAmBnC,KAAAA,UAAU7C,GAC7BX,KAAKsF,uBAALW,KAAApC,EAAAuD,iBAjN0EvD,EAAAuD,gBAAApH,KAAAoH,iBAuN7EpH,KAvN6EoH,gBAAAqC,gBA6NzEzB,qBAAA,WAtBD,IAAIwB,EAAkB,IAAId,EAAe1I,KAAKgC,KAAMhC,KAAKgC,MAwBzDc,KAAIb,KAAAA,OAAWjD,UAAO2G,QAtBlBE,UAAW7F,KAAK6F,YAyBhB7F,KAAKoH,UAAAA,iBAA2BpH,KAAAwJ,GAAA,GAChCA,EAAKrB,gBAGTxH,aAAA,SAAAkD,GACH8B,EAvO6EnC,UAAA7C,aAAA4E,KAAAvF,KAAA6D,GAiN1E7D,KAAKsF,gBA0BDvF,gBAAE8E,SAAFhB,GACH8B,EAFDnC,UAAA9C,gBAAA6E,KAAAvF,KAAA6D,GAGH7D,KAAAsF,gBAGLJ,QAAA,WArBYlF,KAAKoH,gBAAgBS,WACrB7H,KAAK+H,2BAGT,IAAI9F,EAAWjD,EAAO2G,EAAmBnC,UAAU0B,QAAQK,KAAKvF,OAAS4H,QAAW5H,KAAKoH,gBAAgBlC,YA8BzG,OAJIQ,KAAAA,gBAAUmC,WADG7H,KAAjBmI,6BAKAlG,GAGA4C,aAAK6E,SAAAA,GACLvM,EAAAwM,KAAA3J,KAAK4J,UAAAA,SAAuB7J,GAC5BA,EAAA8E,aAAekB,QAbvB,IAAI8D,EAAgBC,SAASC,KAAK/K,QAyB1BgL,WAAA,SAAA/H,GAQHjD,EAjCoCiD,GAI7ByD,SAAU,SAgCdC,EAAAJ,KAAAvF,KAAA,OAAAiC,EAAA/B,UAAA+B,GACAjC,KAAAiK,MAAKC,KA7BLlK,KAAKmK,OAASlI,EAASkI,OA+BvBnK,KAAAoK,MAAAnI,EAAAmI,MACApK,KAAAqK,iBAAAC,IAAIC,EAAiBF,aAArBpI,EAAAoI,YAAArK,KAAA0J,gBAEA1J,KAAA4J,wBACA5J,KAAAwK,QAAKC,EACLzK,KAAA0K,SAAA,EACA1K,KAAA2K,YAAKC,EACL5K,KAAA6K,eAAA,GACA7K,KAAA8K,aAAKC,EAEL/K,KAAAgL,qBAAwB,KACxBhL,KAAAiL,SACAjL,KAAAkL,eAAKC,IAAAA,EAAqBC,cAAqBpL,KAAAE,UAAAgB,IAAsBxB,GAA3C2L,eAC1BrL,KAAAsL,QAGAtL,KAAAkC,OAAAtE,EAAAuE,wBAAAO,+BACK6I,IAAAA,OAAc/G,MAAA,OAAU5C,KAAS,OAAS2F,cAAc4D,KACzDK,IAAAA,UAAAA,MAAsB,UAAF/M,KAAiB,QAAAgG,cAAA,YACrCrH,IAAAA,UAAcqO,MAAAA,UAAkBhN,KAASuD,QAAXyC,cAAkCwC,YAC5D9J,IAAEwM,UAAFnF,MAAe,UAAgB/F,KAAA,QAAAgG,cAAA,YAC3BzC,IAAAA,UAAKrB,MAAL,UAAmBmF,KAAAA,QAAqB4F,cAAxC,YACHrH,IAFD,UAAAG,MAAA,UAAA/F,KAAA,QAAAgG,cAAA,aADJ3B,KAAAb,EAAAa,QAOJmI,OAAA,WAEAjL,KAAAkK,kBAAa,EAGT,IAAAK,EAAKoB,KAALzL,UACA8B,EAAAhC,KA5BJA,KAAKyK,cAAgBnM,EAAE,UAAUsD,SAAS,iBAAiB2F,SAASgD,GAgCpEvK,KAAA4K,oBAAkBtM,EAAA,UAAUsD,SAAS,WAAY2F,SAAcwD,GAE/D/K,KAAA+K,iBAAAzM,EAAsBA,UAAUoB,SAAK,oBAAS6H,SACd3F,GAIhC5B,KAAA4L,eAAKC,EAAAA,UAALjK,SAAiC,kBAAmB2F,SAAAvH,KAArByK,eAE/BzK,KAAAmL,mBAAKW,EAAAA,UAA0BlK,SAAKmK,sBAApCrM,KAAA,KAAA,sBAAA6H,SAAAvH,KAAA4K,qBAEA5K,KAAAqH,YAAK2E,KAAe1N,mBACpBY,EAAK+M,KAAAA,mBAAejK,GAEhBhC,KAAAuL,UAAM9M,EAAF,UAAWmD,SAAe9B,SAAAyH,SAAe2E,KAAhBf,oBAClBgB,EAAF,UAAeD,KAAhB,iCAA+BtK,SAAA,iBAAA2F,SAAAvH,KAAAuL,WAAAa,MAAA,WAAEhP,EAAAqO,iBAAArB,MAAApI,EAAAoI,OAAA,SAAAnD,GACjCjF,EAAAA,KAAAA,EAAKqK,SAASX,GACjB1J,EAAArB,aAAAmF,EAAA4F,EAAA1J,EAAAA,UA1BThC,KAAK2L,cAAgBrN,EAAE,UAAUsD,SAAS,2BAA2B0K,UAAUtM,KAAKyK,eAiChFzK,KAAAuM,IAAAjO,EAAA,UAAAsD,SAAA,iBAAA2F,SAAAvH,KAAA2L,eAEH3L,KAbDqK,cAcArK,KAAKwM,cAAc5K,SAAA,eACnB5B,KAAKyM,IAAAA,SAAL,gBAIIzK,KAAAA,SAAKwK,EAAAA,UAAcxK,SAAA,YAAmBA,SAAWhC,KAAMgC,kBACvDA,KAAAA,kBAAe0K,EAAI,UAAnB9K,SAA8B,qBAA9B2F,SAAAvH,KAAA2M,UACA3K,KAAAA,eAAA1D,EAAesO,QAAflN,KAAA,QAAA,kBACAkC,SAAA,sCACA0B,OACeuJ,SAAa7M,KAAA8M,mBACxBC,KAAAA,mBAAQzO,EAAA,UAAS0O,SAASC,sBAAU3J,OAAAiE,SAAAvH,KAAA8M,mBAChC9M,KAAA6L,wBAAAvN,EAAA,UAAAsD,SAAA,oBAAA2F,SAAAvH,KAAA8M,mBACA9M,KAAA+L,aAAImB,EAAAA,UAAAA,SAAJ,gBAAA3F,SAAAvH,KAAA8M,mBAAA9M,KAAA8L,wBACIqB,KAAAA,aAA6BC,SAEzBF,KAAAA,aAAAA,EAAAA,UAAAA,SAAeA,gBAAaG,SAAOC,KAAAA,KACtCtN,KAAAiM,aAAA3N,EAFD,aAAAoB,MAAAoD,KAAA,UAAAlB,SAAA,aAAAJ,OAAA,qCAAA+F,SAAAvH,KAAAgM,cAiBfhM,KA9BDwM,UAAAlO,EAAA,YAAAsD,SAAA,aAAA0B,OAAA3D,KAAA,iBAY2C,SAD/BG,GA1BO,aAAXA,EAAErB,MAAkD,MAA1BqB,EAAEqM,SAAWrM,EAAEoM,QAA4C,MAA1BpM,EAAEqM,SAAWrM,EAAEoM,SAiCtE,MAAApM,EAAAqM,SAAArM,EAAAoM,QACA5N,EAAAA,MAAOiP,EAAAA,MAASJ,OAER7O,EAAA0B,MAAAsD,OACIkB,EAAAA,MAAAA,IAAAA,IACAgJ,EAAAA,cAAAA,OAFGxL,EAAAiK,aAAPtI,QAOZ8J,EAAAA,oBA5BRlG,SAAAvH,KAAAgM,cA+BAhM,KAAAyM,cAAInO,EAAA,WAAJsD,SAA+B,YAAAlC,KAAA,QAAA,4BAAAgO,SAAAC,UAAA,WAAApG,SAAAvH,KAAAgM,cAC3BhM,KAAAyM,cAAKmB,MAAL,WACH5L,EAAAyK,cAAAnJ,OA/BGtB,EAAKiK,aAAa3I,OAiCtBtB,EAAK6L,UAAUvP,IAAE0D,EAAFiI,MAAe,IAAMjI,EAAA8L,IAAYpO,IAAKsC,EAAtC+L,MAC6B/L,EAAAA,UAAKgM,IAAL,UAAA,gBAAkBhM,EAAEuF,UAASqF,SACzE5K,EAAKiM,UAAU3P,QAC8C0D,EAAEuF,UAASsF,cA7BhEE,OAAQ,SAASC,EAASC,GAgC7BjC,IAAAA,KACAiB,EAA4B3N,EAAA8O,IAAWpL,EAAA8E,WAAAiC,GAAA,SAAAmF,GACnCC,OAAAA,EAALC,aAAuBnC,gBAAvBe,EAAAqB,MAAAzP,QAAA,SAAA0O,GADJJ,EAAAA,EAAAG,OAAAC,OAvBYhP,EAAEgQ,KAAKf,MAAMjP,EAAG6O,GAA0BoB,KAAK,WAC3CtB,EAAS3O,EAAE8O,IAAIF,EAAc,SAASsB,GAClC,OACIhK,MAAOgK,EAAQ,GACfhB,MAAOgB,EAAQ,UAK/Bf,UAAW,WAiCd7C,IAAL5K,KAAK4K,SACDtM,KAAAA,aAAaA,EAAA,YAAiBoB,KAAA,OAA9B,UAAAtB,IAAA4B,KAAAmK,QAAA5C,SAAAvH,KAAAgM,eAGJhM,KAAA6N,QAAAvP,EAAA,QAAAoB,KAAA,KAAA,YAAAA,KAAA,QAAA,YAAAgO,SAAAC,UAAA,WACK/C,MAAoBjL,WAAzBqC,EAA0CgM,aAAczG,SAAAvH,KAAAgM,cACpDhK,KAAAA,QAAKyM,EAAAA,QAAUC,KAAO,KAAKvD,WAAAA,KAAAA,QAA3B,WAAAuC,SAAAC,UAAA,WADJvB,MAAA,WAAApK,EAAAyM,YAAAlH,SAAAvH,KAAAgM,cAKAhM,KAAAgL,qBAAuBhL,KAAA2O,aAAab,IAAA,IAChC9N,KAAAiM,aAAK2C,KAAL,SAAmBC,WACtB7M,EAAErC,aAAaqC,EAAAiK,aAAiB7N,SAkB7B2B,KAAAA,oBAAiBiC,MAAK8L,SAAtBhO,GACAC,EAAAA,MAAE+O,KAAAA,SAAFC,QAAqBC,UAIrBhP,KAAA4K,oBAAciE,KAAF,WAAcD,SAA1B9O,GACAkC,EAAAyM,QAAIQ,EAAAA,MAAa/O,KAAAA,sBAIjBF,KAAA+L,aAAImD,KAAAA,YAAc,SAAmBlN,EAAAA,GACrCA,KAAAA,UAAKmN,EAALN,UACHlP,KAlBD,OAAA,SAAAG,EAAAC,GAmBA,IAAAqP,EAAArP,EAAA8O,QAAA7O,KAAA4O,UA7BI5O,KAAK4O,UAAY7O,EAAE8O,QACnB,IAAIK,EAAcG,KAAKvR,MAAMsR,EAAQpN,EAAKmJ,mBAAmBmE,SAAWtN,EAAK0I,SAAW1I,EAAKwI,UAC7FxI,EAAKmN,YAAYD,KAGrBlP,KAAKuP,eAAenD,MAAM,WACtBpK,EAAKwN,mBAITxP,KAAKmL,mBAAmBxL,KAAM,WAAY,SAAUG,EAAGC,GAEnD,GAAKD,EAAE2P,QAAUzN,EAAKmJ,mBAAmBmE,QAAU,GAgCvD,OAAA,IAEI3P,KAAA,YAAS,SAAUiC,EAAZ7B,GAGVA,EAJD2P,aAIiB1N,EAAA8L,IACbxP,EAAAA,eAAiBwB,EAAE6P,QACnB5P,EAAA6O,UAAUS,EAAAA,UAAV1P,KAAA,OACIiQ,SAAe9P,EAAE4O,GADrB,IAAAxO,EAEY8B,EAAAA,MAFZoN,EAGIE,EAAAA,QAAanE,EAAAA,UACjBnJ,EAAK6N,EAAiBR,aAAiBC,EAAAA,QAAjBvP,EAAA+O,gBAEzB5O,EAAQ4P,UAAWb,GAChBlP,EAAA+O,eAAeiB,EAAAA,QAAfhQ,EAAA6O,UACUS,EAAAA,QADV,IAAAH,EAEYlN,KAAK+L,MAAO/L,EAFxBA,EAAAmJ,mBAAAmE,SAAAtN,EAAA+L,KAAA/L,EAAA8L,MAAA9L,EAAAmN,WAGYnN,KAhBhBhC,KAAK4L,eAAejM,KAAM,YAAa,SAAUG,EAAGC,GAChD,OAAOzB,EAAE,UAAUsD,SAAS,aAAa8K,IACrC,SAAU1K,EAAK4I,oBAAoBoF,SAAWhO,EAAK4J,eAAeoE,SAAW,GAC/EzI,SAAUjJ,EAAE0B,SACfL,KAAM,OAAQ,SAAUG,EAAGC,GAC1BzB,EAAGyB,EAAEkQ,OAAQvD,KAAMiD,KAAMN,KAAKU,IAAKjQ,EAAE4O,MAAO3O,EAAEmQ,QAAWlO,EAAK9B,UAAUiQ,SAASR,KAAML,MAAOD,KAAKe,IAAKtQ,EAAE4O,MAAQ3O,EAAEmQ,UACpH,IAAIH,EAAMV,KAAKU,IAAIjQ,EAAE4O,MAAO3O,EAAEmQ,QAAWlO,EAAK9B,UAAUiQ,SAASR,KAC7DC,EAAMP,KAAKO,IAAI9P,EAAE4O,MAAO3O,EAAEmQ,QAAWlO,EAAK9B,UAAUiQ,SAASR,KAC7DU,EAAQrO,EAAK+L,KAAO/L,EAAK8L,IACzBwB,EAAQtN,EAAKmJ,mBAAmBmE,QACpCtN,EAAK6N,gBAAiBR,KAAKvR,MAAMiS,EAAMT,EAAQe,GAAQrO,EAAK8L,IACtCuB,KAAKvR,MAAM8R,EAAMN,EAAQe,GAAQrO,EAAK8L,OAoChEnO,KAAK2Q,UAAAA,SAAqBC,EAAAA,GAlCtB,IAAIR,EAAMV,KAAKU,IAAIjQ,EAAE4O,MAAO3O,EAAEmQ,QAoChCM,EAAQ7Q,KAAKiQ,IAAA9P,EAAA4O,MAAU3O,EAAAmQ,QACrBG,EAAArO,EAAA+L,KAAA/L,EAAA8L,IACAwB,EAAItN,EAAKyO,mBAAcnB,QACnBoB,EAAAA,EAAAA,IACH1O,EAAA8L,IAAAuB,KAAAvR,MAAAiS,EAAAT,EAAAe,GAAAM,EAlCD3O,EAAK+L,KAAOsB,KAAKvR,MAAM8R,EAAMN,EAAQe,GAAQM,EAoC7CrS,EAAAyB,EAAAkQ,OAAA3L,SACAtC,EAAA4O,mBAyBRC,KAAAA,gBAAkB,IAAAN,EAAAvQ,MAAWqH,YAAArH,KAAA4L,kBAE5BtN,EAT0DkS,QAAA7Q,KAAA,SAAA,WAW3DK,KAAAyQ,cAjCYC,aAAa1Q,KAAKyQ,cAsC1BzQ,KAAAyQ,aAAAK,WAAA,WACI9O,EAAK+O,iBACLL,OAhCJpS,EAAE0S,UAAUrR,KAAK,SAAU,WAAaqC,EAAKiP,WAoCzCjR,KAAAsL,QACAhN,EAAAkS,QAAAzB,QAAA,WAGImC,eAAAA,SAAKnC,GACR,OAAA/O,KAAEkC,OAFHwC,UAAAyM,EAAAC,cAAA,WAJJpR,KAQKkC,OAAAwC,UAAA,cAML1F,EAAA6K,EAAK4C,UAAc4E,EAAqBvD,WAjC5ChJ,QAAS,WAoCL9E,KAAA8K,aAAA,GAII+F,iBAAKS,WACRtR,KAAAuL,UAAAlD,OAAA,IAAArI,KAAA6F,UAAAtF,SAOLoO,iBAAa,SAAA4C,EAASC,EAATC,EAAoBC,GAOzBxT,GAxCA8B,KAAK+Q,OAoCTL,aACW1Q,KADX+Q,OAII7S,EAAAA,CAGAU,IAAAA,EAAAA,KACIoB,KAAA+Q,MAAAD,WAAA,WACAI,EAAAnC,QAAIlQ,WAAA0S,EAA6B,IAAGI,EAAA,IAAAF,IAChC,UAGJzP,KAAA+M,QAAA,WAAAwC,EAAA,IAAAI,EAAA,IAAAF,IAIIzP,gBAAAA,SAAK4P,EAAAA,GACR5R,KAAAyM,cAAA4E,KAAA/T,EAAAuU,UAAA/D,GAAA,MAAAxQ,EAAAuU,UAAA9D,IACD/L,KAAAA,UAAAA,IAAK8P,KAAAA,MAAajT,IAAOkT,EAAAA,UAAzBjE,GAAA,IAAAxQ,EAAAuU,UAAA9D,IAhCR,IAAI9D,EAAQjK,KAAKiM,aAAa7N,MAqCtB,KAAA6L,GACIjK,KAAAsR,iBAAIrH,EAAa6H,KAAAA,IAAL9R,KAAmBiK,MAA/B,IAQH0E,YAAA,SAAA6C,GACDA,EAAAzT,IApjCY,IAsjCX,IACDiE,EAAAA,KAnCJ8P,EAAaxT,EAAEC,WA+ElB,OA1COuT,EAAAA,MACH5T,IArCE8T,OAAAC,KAAA,eAAAjS,KAAAoK,MAsCH8H,KAAAA,EACIC,SAAAA,OACHvT,QAAA,SAAAC,GAEL,GAAA,IAAOiT,EAAAA,WAAPvR,OAAA,CAKA,GAAA1B,EAAAuT,UAAA,CACKpQ,IAAK8P,EAAY,IAAAO,EAAArQ,GAClBA,EAAKgJ,gBAALsH,GACItQ,EAAKmM,gBAALmE,EAEJtQ,EAAA8P,WAAAjT,EAAAkT,WAlCI/P,EAAKiK,aAAasG,KAAK,IAqC/BvQ,EAAAiK,aAAAzK,OAAAlD,EAAA,kDAEI,IAAA,IAAAyC,EAAA,EAAAyR,EAAAxQ,EAAA8P,WAAAvR,OAAAQ,EAAAyR,EAAAzR,IAAA,CACH,IAAAkJ,EAAAjI,EAAA8P,WAAA/Q,GAAAkJ,MAnCewI,EAAgBnU,EAAE,YAqClCmU,EAAApB,KAAApH,GACAwI,EAAArU,IAAA6L,GACAjI,EAAAiK,aAAAzK,OAAAiR,GAEIzQ,EAAK2M,aACL3M,EAAAiK,aAAAzK,OAAAlD,EAAA,mDAEA2L,EAAUyI,aACV1Q,EAAK2M,aAAab,OAAU6E,EAAAA,2CAE/B3Q,EAAA2Q,kBAAA9T,EAAA+T,YAEDd,EAAA/S,QAAAF,EAAAkT,cAEAG,MAAA,WACAC,MAAA,yCAAAnQ,EAAAoI,UAGG0H,GAGC9P,aAAAA,SAAK2M,EAAYb,EAACC,GAA8B/L,IAAAA,EAAAA,KAChD,GAAAA,EAAA8P,YA1BJ,GAAK7H,GAAmB,SAAVA,EA0CN,GAAA,aAAAA,EA/BR,GAAc,SAAVA,EAAJ,CA6CQ,IAAA4I,EAAAvU,EAAAwU,KAAI/E,EAAAA,WAAoB,SAAAgF,EAAAhS,GACpB,OAAAgS,EAAA9I,QAAAA,IACA,GACAjI,QAAAA,IAAAA,EAAAA,CA7BR,GAAIiI,IAAUjI,EAAKiI,MAAO,CAsC1BjI,EAAK4O,MAAAA,EACR5O,EAAAiK,aAAA7N,IAAA4D,EAAAiI,OArLsDjI,EAAA0I,SAAAmI,EAAAL,IAAA,EAkJ/CxQ,EAAKsJ,QAEL,IAAK,IAAIvK,EAAI,EAAGyR,EAAMxQ,EAAK6D,UAAUtF,OAAQQ,EAAIyR,EAAKzR,IAAK,CACvD,IAAI8C,EAAW7B,EAAK6D,UAAU9E,GAC1B8C,EAASe,MACTf,EAASe,OAGb5C,EAAK4P,iBACL5P,EAAK4P,gBAAgBhN,YA0CjC0F,IAAAwD,QAAAxD,IAAAyD,GAnCQ/L,EAAK8L,IAAM,EAsCnB9L,EAAA+L,KAAA/L,EAAA0I,WAIIsI,EAAAA,SAAgBC,IAAJC,EAAhB7D,KAAAO,IAAA9B,EAAA,GAAA,OACYkF,IAAR/I,GAlCQjI,EAAK8L,IAAMuB,KAAKO,IAAI5N,EAAK8L,IAAM,GAAI,GAsC1CK,EAAAA,KAAalE,EAAO0H,IAAAA,IAIrB3P,EAAO+L,KAAXsB,KAAAU,IAAAhC,EAAA/L,EAAA0I,WAjCI1I,EAAK4O,sBAPA5O,EAAA2M,aACI1E,MAAAA,GAAA,WAAAjI,EAAAmM,aAAAlE,EAAA6D,EAAAC,UAfT/L,EAAA2M,aAAAb,IAAA9N,KAAA2S,kBA5nCgB,WAwnCR3Q,EAAAA,aAAK4P,IAAAA,KAAAA,kBAxnCG,WAwmCnB5P,EAJDgJ,qBAKKmI,KAAA,WACDnR,EAAAmM,aAAAlE,EAAA6D,EAAAC,MA4FA/L,MAAAA,SAAAA,GAQJ,IAAAgR,GAHAE,GAHCA,EAAAA,EAAAE,QAAA,KAAA,KAGDA,QAAA,QAAA,MAGAH,MAAA,OACAjR,EAAK4O,EAAAA,GApCDe,EAAWqB,EAAU,GAAKK,SAASL,EAAU,GAAI,SAAM1I,EAsC3DmH,EAAAuB,EAAA,GAAAK,SAAAL,EAAA,GAAA,SAAA1I,EAEIoG,KAAAA,aAAAA,EAAaiB,EAAK2B,IAGtBC,cAAKD,SAAAA,GACDtR,IAAAA,EAAAA,KACHqO,EAFDrO,EAAA+L,KAAA/L,EAAA8L,IAlCA9N,KAAKmP,WAAWqE,EAAWnD,IAwC3BlB,WAAA,SAAKmC,GAhCL,IAAItP,EAAOhC,KAsCfW,EAAcqB,EAAA+L,KAASlK,EAAAA,IAEnBA,EAAAA,IAASe,EAAT5C,EAAAwI,SACAxI,EAAK8C,IAAAA,EAAL0F,QACAxI,EAAK6O,KAAAA,EAAAA,QAAL4C,GApCWzR,EAAK+L,KAAOmB,EAAclN,EAAK0I,UAsC1C1I,EAAA+L,KAAA/L,EAAA0I,SACA1I,EAAA8L,IAAA9L,EAAA0I,SAAA+I,IAEA5P,EAAAA,MAAS3B,EACLgP,EAAAA,KAAKpM,GAQZ9C,EAvR0D4O,gBAAA8C,YAAA,IAqPnD1T,KAAKsT,mBACL5C,aAAa1Q,KAAKsT,mBAwCtBtT,KAAAsT,kBAAUxC,WAAA,WACN9O,EAAA4O,kBACA/M,KAGC,IAAAoG,EAHDjI,EAAAiK,aAAA7N,MAIH4B,KAAAsR,iBAAArH,EAAAjI,EAAA8L,IAAA9L,EAAA+L,MAAA,IAMDpN,aAAKwK,SAAAA,GACRxF,EA3S0DnC,UAAA7C,aAAA4E,KAAAvF,KAAA6D,GAuQvDA,EAASe,OAsCb5E,KAAA8E,UApCI9E,KAAK6Q,mBAyCL,IAAAK,EAAIlP,KApCJ6B,EAAS3B,OAAOyR,GAAG,SAAU,WAqCzBzC,EAAApM,aAIJ3H,gBAAOyW,SAAYC,GACfA,EAAIC,KAAAA,KACAD,EAAAjP,OACH5E,KAAA0J,aAFDzD,KAAA4N,IASInT,gBAAA,SAAAmD,EAAAP,GAEH,GADGtB,EAAK4H,UAAAA,gBAA2B8B,KAAD1L,KAAQ+F,GAC1CzC,EAAA,CACJ,IAbDtB,EAAAhC,KAvBI6D,EAASZ,cAAcK,KAAK,EAAG,WAsCnChF,EAAA0B,MAAAsE,SACItC,EAAC6O,uBAGJvF,MAAA,WACJtL,KA3U0D8N,IAAA9N,KAAAwK,QAySvDxK,KAAK+N,KAAO/N,KAAK0K,SAoCrB1K,KAAAmL,mBAAAhK,KAAA,eAAAmD,UA5BAsM,eAAgB,SAAS7K,EAASlC,GAoC9B,IAAA7B,EAAAhC,KAjCI4T,EAAc/P,GAAYA,GAAY7B,EAAK6D,UAG/C1I,EAAEwM,KAAKiK,EAAY,SAASlI,GAoC5B,IAAIoC,EAAWtD,EAAfrJ,KAAwBa,EAAA4H,qBAAA,SAAAmK,GACpBjG,OAAMiG,EAAA,KAAKvJ,IAGXuD,EAEAsC,EAAYtC,GAAOhI,EAIvB/D,EAAA4H,qBAAA3D,MAAAyF,EAAA3F,MAKA/F,KAAAkK,mBAlCI8J,sBAAsB,WAAahS,EAAKiS,YAoC5CjU,KAAAkK,kBAAA,IASA+J,QAAA,WAIIjU,KAAAkK,kBAAKgK,EAjCT,IAAIpG,EAAM9N,KAAK8N,IAoCfC,EAAA/N,KAAA+N,KAEID,EAAA9N,KAAI0L,UAAJoC,EAAA9N,KACI+F,SAEA2F,EAAAA,KAAAA,WACHqC,EAAA/N,KAAA0K,UAEL,IAAA2F,EAAKzG,KAAAA,KAAAA,KAAAA,IAlCa,IAAd5J,KAAK+N,MAAcsC,EAAOrQ,KAAK6K,iBAoCnCkD,EAAAD,EAAA9N,KAAA6K,gBAEIgJ,KAAAA,IAAAA,KAAAA,MAAY7O,GACfhF,KAFD+N,KAAAsB,KAAA8E,KAAApG,GA/BA/N,KAAK6P,gBAAgB7P,KAAK8N,IAAK9N,KAAK+N,MAwCpC/N,KAAAoU,gBAAgBrG,KAAO5C,mBAAvBmE,SAAAtP,KAAA+N,KAAA/N,KAAA8N,KAGA,IAAAuG,EAAWrU,KAAA8N,KAAA9N,KAAA0K,SAAA1K,KAAAwK,SAAAxK,KAAA8M,kBAAAwC,SAAA,EACPgF,GAAAA,KAAaC,KAAQvU,KAAKmL,MAAAA,KAAAA,SAAmBmE,KAAhC9E,SAA2CxK,KAAY8M,kBAApEwC,SAAA,EAGJtP,KAAA+L,aAAYsD,KAAKvR,KAAMwW,EAAAA,MAAaE,KAApC5E,IAFC,GAED6E,KAAA9Q,OAlCI8Q,EAgCH,IAIDzU,KAAK8E,aAAL4H,IAAA,OAAA2H,GAJC,GAIDI,GAAA,GAzZuDzU,KAAAkU,oBAyXnDlU,KAAKkU,mBAAmBxH,KAAMiD,KAAM0E,EAAS/E,MAAOmF,IAuCvDtX,EAAAwM,KAAA3J,KAAA4J,qBAAA,SAAAkK,GACD,IAAIzD,EAAOyD,EAAY,GACnBQ,EAAAA,EAAwB,GACxBE,GACJ9I,EAAA1G,MAAgBlH,KAGhBkC,KAAA4J,wBAGJzM,EAAAwM,KAAA3J,KAAA0J,aAAA,SAAAmK,GACAa,EAAAA,WAIAjG,QAAA,SAAA8F,EAAArU,GACAyU,KAAe,IAAfA,KAAAA,UAAe3U,KAAA+N,KAAA/N,KAAW8N,KAAA9N,KAAA6K,gBAA1B8J,CAGC,IAnb0DtE,EAAArQ,KAAA+N,KAAA/N,KAAA8N,IAiZnDwG,EAAajE,EAAO,EAAIrQ,KAAK8N,IAoCrC0G,EAAAnE,EAAArQ,KAAA2K,YAAA,EACAiK,IACIN,EAASO,EAAAA,KAAT1J,mBAA4BmE,SAAAtP,KAAA+N,KAAA/N,KAAA8N,KAAA9N,KAAA8N,KAExB9N,KAAA8N,IAAAuB,KAAAvR,MAAAwW,EAAAE,GACAxU,KAAA+N,KAAIsB,KAAKwF,MAAAA,EAAkBC,GAE1B9U,KAAA8E,UACD9E,KAAA4Q,mBAGJ5C,SAAA,WACA,GACI6G,IADJ7U,KACI6U,SADJ,CAIAA,IAAAA,EAAAA,KAAAA,KAAkBrS,KAAAA,IAClBR,EAAK6S,EAAAA,EAAL7U,KAAyB6U,IACzBL,EAAKK,EAAAA,KAAkBE,YAAvB,EACI/S,KAAAA,IAAAA,KAAKkS,MAAAA,EAAmBvQ,GACxB3B,KAAAA,KAAAA,KAAK8K,MAAAA,EAAkBkD,GACvBhO,KAAAA,UACAA,KAAAA,mBAIP0S,gBA/c0D,WA4avD1U,KAAKmL,mBAAmB6E,OAAQhQ,KAAKE,UAAU8P,SAAWhQ,KAAKyK,cAAcuF,SAAWhQ,KAAK+K,iBAAiBiF,WAwC9G1R,cAAE,WACF0B,KAAA0U,kBACA1U,KAAA4Q,kBAIA5O,aAAK2S,SAAAA,GACL3S,GAAAA,KAAK6S,kBAAL,CAjCI,GAAI7U,KAAK6U,kBAAkBC,QAAQ1S,KAAOyB,EAASiR,QAAQ1S,GAqCvE,OAlCYpC,KAAK8M,kBAAkB3L,KAAK,UAAUmD,SAsCpC,IAjCFuQ,EAAoBhR,EAASmR,MAAQ3N,YAAarH,KAAK8M,oBAqC/D9C,EAAAA,KACIrM,EAAAkF,WAAyBmH,OAnCzB6K,EAAkBrS,aAAc,EAqChCR,EAAA6S,kBAAAA,EACA7U,KAAA6U,kBAAAE,iBAAA,WACA/S,EAAI+D,mBAAApC,OAAuB2G,OAAvBtI,EAAoC+D,kBAAmBpB,YAAW2F,UAClE3F,EAAAA,kBAAiBsQ,OAAAA,EAAWtQ,kBAA5B0C,YAAA2I,SAAAhO,EAAA+J,aAAA/K,eACHgB,EAAAuN,eAAA5L,OACD3B,EAAKkT,iBAELlT,EAAA6S,kBAAAhQ,eAnCA7E,KAAK8E,WAIT0K,eAAgB,WAsCZlR,EAAA,YAASU,SACZgB,KAAA8M,kBAAA3L,KAAA,eAAAmD,SAvBLtE,KAAA8M,kBAAAkD,OAAAhQ,KAAA8L,yBAXQ9L,KAAK+L,aAAaiE,OAAOhQ,KAAK8L,yBAqCtC9L,KAAAuP,eAAAjM,OAnCQtD,KAAKkU,mBAAmB5Q,OACxBtB,KAAK2S,gBAqCRQ,KAAAA,kBAAoBrL,QAOjB,IAAAsL,EAAIC,EAAYC,KAAK/R,QAArBgS,UAlCA7J,MAAO,MAuCP1B,WAAA,SAAAjE,GACApI,EAAI6X,KAAAA,UAAaxL,WAAUpI,KAAS5B,KAAA+F,GAjCpC,IAAIpB,GAAS,OAqCb2F,IAAAvE,EAAAkP,iBAAA3K,IAAAvE,EAAAkP,WAAAtQ,SACArG,EAAEyH,EAAAkP,WAAAtQ,QAlCF3E,KAAKkV,IAAI,SAAUvQ,GAKnB3E,KAAKyV,eAAiB,OAAQ,cAAe,iBAGjDC,WAAY,SAAS3P,GAqCrB4P,OAAAA,EAAAA,OAAAA,KAAoB7L,mBAAqBnF,QAAA3E,KAAA4V,kBA7BxCT,EAAoBrL,SAASC,KAAK/K,QAsCnCiM,QACI4K,gBAAW,gBAjCf5K,OAAQ,WAqCJ,IAAAoK,EAAArV,KAAAuD,IAAA3B,SAAA,aACA8F,EAAAA,KAAW/H,MAGLmW,EAAAA,SAAFlU,SAAA,eAAAyP,KAAA0E,EAAA7U,IAAA,UAAAqG,SAAA8N,GAEES,EAAAA,UAAFlU,SAAA,eAAA2Q,KAAAwD,EAAA7U,IAAA,SAAAqG,SAAA8N,GACqBvV,KAAEgW,UAAAA,IAAFC,EAAA7U,IAAA,UAEzB5C,EAAA,+BAAAiJ,SAAA8N,IAGIW,aAAA,SAAAC,GACAjW,KAAAqD,MAAAd,UAAI2T,EAAAA,EAAiBf,QAAAA,UAMmB7W,EAAQsO,SAAR7C,KAAA/K,QA/BhDgL,WAAY,SAASjE,GAiCjB/F,KAAAqD,MAAAsQ,GAAA,gBAAA3T,KAAAmW,YAAAnW,OAMIkR,OAAAA,WACH,IAAAA,EAHDlR,KAIAoW,EAAAA,KAAAA,MACIlF,EAAKmF,KAAAA,IAAAA,SAAL,gBAAA/S,OAGJoE,EAAI4O,KAAKV,OAAL,SAAmB9V,GACnBA,EAAAgW,oBACH1J,MAAA,SAAAtM,GAjDoCA,EAAAgW,oBAmBlCnW,KAAK,WAAY,SAASG,GAiCjCA,EAAAgW,oBA/BOS,QAAQ,SAASzW,GAAKA,EAAEgW,oBAmClBzN,EAAAA,2BAATd,SAAAG,GAAA2J,KAAAiF,EAAApV,IAAA,SACHoV,EAzDwCpV,IAAA,UAAAyI,KAAA,SAAAoM,GA2DzC,IAAAG,EAAA,IAAAf,GAAA9R,MAAA0S,IA/BQG,EAAWjL,SACXvD,EAAWlG,OAAO0U,EAAW3S,OAoChCmE,EAAAvG,KAAA,SAAAiL,MAAA,WAAA9N,EAAA0B,MAAA4M,WAGL,IAAA4J,EAAAlY,EAAA,SAAAsD,SAAA,aAAA2F,SAAAG,GA/BQ0O,EAAwB9X,EAAE,yBAAyBoB,KAAK,QAAS,2BAA2B6H,SAASiP,GAC9ElY,EAAE,yBAAyBoB,KAAK,QAAS,yBAAyB6H,SAASiP,GAiC1FpK,MAAA,WAEZ8E,EAAKuF,kBAEDL,EAAAhK,MAAA,WACIsK,EAAAA,mBADJJ,EAKAV,cACA5V,KAAAuD,IAAAI,QA1BRwS,YAAa,WAiCbnW,KAAAuD,IAAA8E,OAAArI,KAAAqD,MAAAuS,eAMIe,cAAA,WACA,IAAA,IAAA5V,EAAA,EAAAA,EAAAf,KAAA4W,OAAArW,OAAAQ,IACAf,KAAI0L,OAAQ3K,GAAAiV,gBAAZK,eAOIQ,WAEIH,IAAAA,EAAAA,KAAAA,MACAI,KAAAA,KAVRJ,kBAAA1W,KAAAqD,MAAAnC,IAAA,SAAA4T,QAAA1S,GAgBI2U,OAAAA,QAlCIC,QAASV,EAAKlU,IAoClB6U,KAhCA,SAASC,GAoCblF,OAAAmF,MAAAxT,MAAAG,MAAAwS,EAAApV,IAAA,QAAA,cAAAkW,KAAAd,EAAApV,IAAA,QAAA,8EAAAmW,SAAAC,MAAA,WAAAtF,OAAAmF,MAAA7T,cASIiU,cAAA,WAIAzP,IAqBJ5H,EArBI4H,EAAAA,KAAMnH,MAAAA,IAAaoW,SACnBA,EAAAA,KAAAA,MACA7W,EAAAA,IAAAA,EAAAsX,cAbJvN,MAeKyB,EAAA1J,KAAAiI,MACDwN,MAAA/L,EAAA1J,KAAA8L,IACA5N,IAAAA,EAAAA,KAAY6W,OAlCZF,GAsCAa,kBAAgBX,EAAAA,QAAcY,GAC9B7U,OAAMmU,QACNW,QAAAA,EAAUxV,GAFdyV,SAIAH,EAAUI,WAGVJ,EAAUpS,EAEVoS,EAAUxP,EAAAA,IAAUmJ,QAnCH0F,EAAcgB,+BAA+BC,GAyClDN,GAAAA,EAAUO,YAAYjW,KAAItE,CAE1Bga,IAAAA,EAAAA,IAAU9S,EAAV5C,KAAAA,MAAAc,KAAA4I,EAAAxJ,OAAAwC,UAAA,UAjCJyB,EAAQ4Q,EAAc7W,UAAUmG,iBAAiB0Q,EAAejP,GAAO,GA0C/EA,EAAA7E,cAAApC,aAAAkW,EAAA/U,KAAAqF,YAAA/G,WAAA6F,IACA0Q,EAAAA,aAAAE,GACAA,EAAImB,cAAuBC,SAAAA,EAAAA,aACvBC,EAAAA,OAIIC,EAAAA,EAAanY,UAIjBoY,IAAAA,EAAAA,IAAYvB,EAAAY,YAAS1K,KAAU/M,GAC3B4C,KAAAmU,EACHW,SAAA,QAnCLF,EAAUI,qBAsCVJ,EAAAa,YAAAxB,EAAAyB,MACAd,EAAAe,oBAAA1B,EAAA3P,gBAAA4N,KAAA0C,IACAA,EAAApS,eApCApF,EAAUS,aAAa+W,GAsCvBpZ,EAAA4J,UAAOgQ,KAAA,iBAGCR,KAAAA,IAAAA,EAAAA,EAEH,SACIR,GACDQ,EAAAO,YAAA,IAAAva,EAAAgb,QAAAxB,IACAQ,EAAUzU,UAAAA,KAAcrB,gBACxB8V,EAAUrQ,UApMmBoP,IAA7C,SAAAI,EAAAa,EAAAiB,GA+MA9B,EAAA+B,OAAA5Y,KAAAqD,MAAAwV,kBAtCQ,IAAIX,EAAc,IAAI5a,EAAK6a,qBACvBC,eAwCRU,IAAAA,OAAe7G,KAAf6G,YACAtb,KAASub,KAAOxT,UAAWyT,GACtBhQ,SAASA,OAFlBqP,YAAA,mBAnCgB5Z,KAAM,QAyClBwa,SAAA,IACIX,WAAYvK,SAASmL,GACrB,MAAA,YAAOjM,KA/BP3O,EAAEgQ,KAAK4J,EAAYiB,MAAMhG,KAAK,SAASlG,GAClB,iBAAbA,GAyCPvB,EAALzI,cAAArB,SAAA,SACKoW,EAASA,YAAd3G,KAAA+H,IAEYpB,EAAA9F,OAEPmH,EAASA,cAAdzX,SAAA,SACA8V,EAAArQ,YAAAgK,KA9tDuB,yBA8tDvBpE,EAAAqM,UAPJX,EAAA1L,QAqBAsM,EAAc/V,SAAUgW,EAAAA,GAtCpBhc,EAASub,OAAOxT,KAAKvF,KAAMgZ,GAwC/BhZ,KAAIyZ,OAAAA,GAIAX,EAAKN,UAAOA,QAAZ,SAAAkB,GAEA,OAAA1Z,KAAK2Z,OAAAA,OAALT,OAAsBS,WAAtB3Z,KAAAgJ,OAAA8E,OAAAoL,OAAAU,WAAA5Z,KAAAgJ,OAAA8E,MAAA9N,KAAAgJ,OAAA+E,KACK8L,KAAAA,aAIAC,WAAWA,EAAhB9Z,KAAAgJ,OAAA7C,QAAAnG,KAAAgJ,OAAA8E,MAAA9N,KAAAgJ,OAAA+E,KAAA/N,KAAAgJ,OAAA8E,MAlCJ,IAAIiM,EAAO,SAASrO,EAAOsM,EAAQgC,EAASX,EAAQ3b,GAChDsC,KAAK0L,MAAQA,EACb1L,KAAKgY,OAASA,EACdhY,KAAK8N,IAAMkK,EAAO9W,IAAI,SACtBlB,KAAK+N,KAAOiK,EAAO9W,IAAI,OACvBlB,KAAKga,QAAUA,EACfha,KAAKqZ,OAASA,EAEdrZ,KAAKia,SAAW3b,EAAE,6BAA6BkD,OAAO6X,GACtDrZ,KAAKtC,KAAOA,EACZsC,KAAKka,OAAQ,GAMjBH,EAAKvW,UAAUgW,mBAAqB,aAEpC,IAAID,EAAgB,SAAS7N,EAAOsM,EAAQgC,EAASX,EAAQ3b,GACzDqc,EAAKxU,KAAKvF,KAAM0L,EAAOsM,EAAQgC,EAASX,EAAQ3b,IAEpD6b,EAAc/V,UAAUgW,mBAAqB,aAE7C,IAAIC,EAAmB,SAAS/N,EAAOsM,EAAQgC,EAASX,EAAQ3b,EAAM8a,EAAMc,EAASa,EACrDR,EAAgBS,EAAqBN,GAEjEC,EAAKxU,KAAKvF,KAAM0L,EAAOsM,EAAQgC,EAASX,EAAQ3b,GAChDsC,KAAKwY,KAAOA,EACZxY,KAAKma,YAAcA,EACnBna,KAAK2Z,eAAiBA,EACtB3Z,KAAK6Z,WAAY,EACjB7Z,KAAKoa,oBAAsBA,EAE3Bpa,KAAKqa,8BACLra,KAAK8Z,SAAWA,GAuDpB9a,EAAOya,EAAiBjW,UAAWuW,EAAKvW,WAKxCiW,EAAiBjW,UAAUgW,mBAAqB,aAiHhD,IAAIc,EAAQ,SAAStY,EAAM9B,EAAW+B,GAuDlCwB,EAAAA,GACInB,kBAAA,eAEIQ,EAAAA,KAAM9C,KAAAgC,EADV9B,EAAA+B,GAQAjC,KAAA8U,QAAA,KACA7S,EAAA6S,UAEIhR,KAAAA,QAAO7B,EAAA6S,mBAFXhL,SAAAyQ,MAAAtY,EAAA6S,QAAA,IAAApX,EAAAgb,QAAAzW,EAAA6S,UAIIlR,KAAAA,mBAAa,2BACT8H,KAAAA,yBACH1L,KAAAwa,gBAAA,oBAAAvY,EAAAA,EAAAuY,gBA//Db,IAigEQxa,KAAAoO,aAAA,iBAAAnM,EACSuB,EAAUC,aACnB,IAAArG,EAAAqd,mBACA3F,QAAA9U,KAAA8U,QAGe4F,OAAA,IAHftd,EAAAud,QAIiBtW,IAAArC,EAAAoI,MACTwQ,aACaxT,WAAgBS,EAAzBiK,cAIS1K,qBAAgBqC,KAAAA,yBAC5BoR,WAAA7a,KAAA6a,aAIT7a,KAAA8a,cAAA,GACA9a,KAAA+a,cAAA,IACIjY,KAAAA,kBAAM9C,KADVkC,OAAAwC,UAAA,UAhDJ1E,KAAKqH,YAAc/I,EAAE,+BAA+BiJ,SAASvH,KAAKiD,eAuDtDyI,KAAAA,YArDR1L,KAAKE,UAAUmH,YAAY7F,OAAOxB,KAAKiD,eAuD/B,WAAAhB,IAAAA,EAAA+Y,QACAhb,KAAAib,sBAMAjc,EAAAsb,EAAA9W,UAAAzB,EAAAyB,WACAlF,mBAGRwE,KAAA,YACAgB,MAAA,mBACIhB,UAAM,iBACNgB,YAAO,cAGH/B,EAAAyB,UACIC,iBAAA,IAO6FX,KAAjG,gBAAAgB,MAAA,kBAEQI,UAAA,uBAAAN,YACIiU,SADJnM,GAAAA,EAAA1J,KAEIkZ,aAAcxP,KAA+B3J,EAAAyB,UAFjDC,iBAAA,IASKX,KAAA,eA3DjBgB,MAAO,UA6DKI,UAAA,gBACAN,YAAIuX,SAAAA,GAEAtD,EAAAA,gBAAYqD,UACfrX,EACIuD,gBAAI+T,gBAGRtX,EACIuD,gBAAAqC,eAEDoO,EAAAA,gBAAYqD,YAKhBpY,KAAA,aACA0N,MAAAA,OAGQ4K,UAAAA,SACAxD,YAAAA,SAAUlM,GAGrBA,EArCL4K,KAAAjO,SAuC6CqD,EAAA4K,KAAAV,aACjCyF,EAAAA,SAAAA,EAAAA,OAAAA,UAAAA,QAAAA,EAAAA,kCAEAC,EAAAA,cA3DZhd,EAAE,YAAYgG,YAmEtBxB,KAAA,uBACAf,MAASyB,qCA7DLU,UAAW,cAgEnBK,YAAU,SAAAmH,GACN,IAAO6G,EAhI6B,yBAAA7G,EAAA4K,KAAApV,IAAA,QAAA,iCAmEMwK,EAAMxJ,OAAOwC,UAAU,QAAU,iOAM/D2W,EAAY,WAAarJ,OAAOmF,MAAM7T,OAAQhF,EAAEkS,QAAQ+K,OAAO,6BAC/DD,EAAQ,WAgEX,IACMxG,EADNqG,EAASrG,EAAAA,0CAAS1W,MAEtBgQ,EAAiB,IAAW0G,EAAjC0C,cA5IoCvN,MAAAjI,KAAAiI,MA+EZwN,MAAOzV,KAAK8L,IAgExC0N,IAAAxZ,KAAA+L,OA7DwB0N,EAAqBte,EAAEiQ,IAAI9O,EAAE,aAAc,SAASod,GAgEjE,OAAA,IAAWte,EAAAoa,cAAAmE,SAAArd,EAAAod,GAAApb,SAAA,aAAA+Q,WAzDEwG,EA6DxB,QAAAsD,GA7DoCD,GAiEhC,cAAAC,EAEAM,GAIsB/W,GAAU2I,OAA5BoO,GAGCzJ,OAAAmF,MAAA7T,OAGMsY,OAAUC,SAAAC,KAAEC,OAAazY,KAAb,2BAAsBhF,EAAAyX,OAP7CqF,WAAA1P,EAAAoJ,QAAA1S,GASAwV,SAAAlM,EAAAoJ,QAAA5T,IAAA,YACA2W,QAAAmE,KAAAC,UAAA,IAAAnS,SAAAoS,WAAArE,GAAAsE,aAYInK,OAAKoK,MAAAA,MAAWtY,MAAA,+EAAAsT,KAAA7E,EAAA8E,SAAAgF,GAAAhB,EAAAiB,IAAAhB,OAEhB5P,EAAAA,UAAM5G,iBAAN,IAxDRP,SAAU,WA4DV,OAAAvE,KAAA8U,SAAA/S,EAAAyB,UAAAe,SAAAgB,KAAAvF,OAxDAkD,oBAAqB,WA4DrBe,OAAAA,EAAAA,UAAerC,SAAA,SAAAlC,KAAY,KAAA,SAAAM,KAAAoC,KArD3B6V,YAAa,SAASnD,GA4DtB/Q,KAAAA,QAAe+Q,EACX9U,KAAAoO,aAAA8G,IAAA,UAAAJ,IArDJyH,UAAW,WA4DXvc,KAAA6E,cAAAuD,kBAAA,KAMQ6S,kBAAO,WACV,IAAAvP,EACI1L,KACDoc,GAAO,EACVR,GACI,EACDG,EAAOzd,EAAA,8BAGPA,EAAAoN,EAAAzI,eAAOS,MAAP,WADCgI,EAGIxJ,OAAAwC,UAAgB8X,qBACrBJ,GAAO,EADNL,EAGIpY,SAER,WAEGyY,GAAO,EACVR,GAAAG,EAAAzY,SAILyY,EAAAzY,OAAA3D,KAAA,YAAA,SAAAG,EAAAC,GAhEQ6b,GAAU,EACV7b,EAAE0c,gBAAkBne,EAAEoN,EAAMrE,aAAa2I,WAkEjD0M,KAAAA,OAAc,SAAA5c,EAAAC,GACV,IAAA4c,EAAerY,KAAfyL,IAAAV,KAAAO,IAAA7P,EAAA0c,gBAAA1c,EAAA2B,OAAAgK,EAAAoP,eAAApP,EAAAqP,eACAzc,EAAAoN,EAAOpN,WAAAoO,IAAa9K,SAAS+a,GAhPOjR,EAAAkR,kBAAAlR,EAAAqP,gBAAA4B,EAAA,EAAAA,EAiLhCjR,EAAM6Q,cAkEd5c,KAAA,UAAA,SAAAG,EAAAC,GAhEQ2L,EAAMmR,WAAWC,QACjBlB,GAAU,EAkEZQ,GAASW,EAAOzZ,OAClBoI,EAAAxJ,OAAAK,UAAA,SAAAmJ,EAAAkR,mBACAlR,EAAA5G,YAhEGyC,SAASmE,EAAMzI,gBAOtBgB,cAAe,WAEXjE,KAAKkI,UAAU5E,OAmEfoI,KAAAA,cAAMrE,KAAY/G,8BAAlBgD,QAGAoI,cAAMxD,WAENlI,KAAAkI,UAAAvE,OACA3D,KAAAiD,cAAA9B,KAAA,8BAAAwC,OAEA3D,KAAA6E,gBAMA+D,SAAA,WACA,OAAA5I,gBACauQ,EACLqH,aAEA3N,gBAAOoI,EACP0K,iBAENC,gBAAalI,EACX,YAEIpJ,gBAAMzI,EACN,YAEIjD,gBAAAwc,EACAS,eAEkIjL,gBAAAA,EAAsB,iBAGxJiL,gBAAQzb,EACRyb,eAGK,IASTvR,aAAAA,SAAMzI,GAET,OADGyI,KAAAA,UAAAA,SACHpN,EAHI,WAIIO,SAAAA,WAAJ0T,KAA0B2K,GAAA3V,SAAAvH,KAAAqH,cAIYzC,KAAA,SAAAmY,GAKnCrR,IAAAA,EAAAA,KAoBZ,GAnBSA,EAAA3G,SAAA,EACD2G,EAAAA,WAAAA,QACAA,EAAA0C,aAAI1C,QAOIA,EAAAA,YAAAA,WAAMzI,SACNyI,EAAAA,cAAAA,YAAM7G,wBAEb6G,EAAAxD,UAVD5J,EAWK,UAAAsD,SAAA,SAAA2F,SAAAmE,EAAArE,aAMbqE,EAAKpG,QAAAA,GAAL,CAhEA,IAAI6X,EAAgB7e,EAAEC,WAuE1B6e,GACQ1R,SAAQA,EAAZoJ,QAAA5T,IAAA,YACAmc,UAASL,KAAStR,mBAEXqC,MAAMrC,EAAM1J,KAAK0I,MACpBqS,MAAIrf,GA6DJ4f,OA3DAhf,EAAA0e,QAAAhd,KAAA8U,QAAA5W,MAAA0Y,EAAA,SAAA/X,GACA,GAAAA,GAAY,UAARnB,GAAkC,UAAb4M,EAAa5M,KApDlB,iBAAXmB,GAwEjB2G,EAAAA,cAAe5D,SAAA,SACX8J,EAAOgR,aAAPtD,IAvXR,YAAAva,QAAAyL,IAAAzL,EAAAnB,OAAA,OAAAmB,EAAAnB,MAAA,IAAAmB,EAAAnB,KAAA6C,SAmTgBmL,EAAMzI,cAAcrB,SAAS,UAwEzC2b,EAAab,aA11ED,mCAqxEgB,YAAX7d,GAwEb6M,EAAQzI,cAAZrB,SAAA,WAtEY8J,EAAMgR,aA3wEtB,qJAo1EIrd,WAAe4D,WAAeyI,EAAMpJ,QAAAA,EAAmBkY,kBAEvD,SAAA3b,GAAA,SAAAA,EAAAC,SACKsI,EAAAA,eACLsE,EAAA8R,aAAA3e,EAAA2e,aACA9R,EAAApG,gBAEKmY,EAAAA,UAALpM,KAv1EA,qBAw1EapP,EAAAA,KAASqU,OAClB5K,EADqExD,UAAAmJ,KAAA,IAErE3F,EAAczJ,UAASgT,IAAAA,SAAAA,EAAAA,kBAAAA,MAF3BvJ,EAAA3G,SAAA,EAMK2Y,EAAAA,KAAcnQ,MAAnBjP,EAAAoN,EAAA0R,gBAAA7O,KAAA,WAvEoB4O,EAAcpe,UAyEzB8D,EAAYI,cAAA1B,YAAA,wBACjBmK,EAAA7G,kBApEYsY,EAAcpe,eAoB6BuL,CAE/CoB,EAAAzI,cAAgBvF,SAAhB,SAAA,IAAAuf,EACIU,EAAYjgB,aA3zE5B,4CA4zEYmB,EAAAya,UAEAsE,EAAAA,OACAD,EAAAA,sCAA8CA,KAAAA,cAAWvR,MAAY,WACrE4F,OAAAmF,MAAAxT,MAAAG,MAAA,kBAAAsT,KAAA,QAAAvY,EAAAya,QAAA,SAAAjC,SAAAC,MAAA,WAAAtF,OAAAmF,MAAA7T,cAGAoI,EAAMxJ,OAAOK,EAAAA,WAAU8O,KAAvB,MACA3F,EAAMxJ,OACT5D,EAAA,sCAAA+S,KAAA,aAAAjF,MAAA,WAnBLV,EAAA9G,MAAA,UA+DI5E,KAAAsF,eACAgY,IAMRF,aAAA,WACA,IAAA1R,EAAKxD,KACL,OAAK5J,EAAA0e,QAAYtY,EAAAA,QAAUxG,OACvBmf,UAAA,OAAAQ,OAAA,EAAA5T,MAAAyB,EAAA1J,KAAAiI,MAAA6D,IAAA,EACHC,KAAArC,EAAA1J,KAAA0I,SAAAkN,SAAAlM,EAAAoJ,QAAA5T,IAAA,aAAA,SAAArC,GACD,IAAKif,EAAAA,EAAgBpgB,KAGjB,GAAAA,QAAiBuE,IAAZsW,EAAYtW,UAAjBqI,IAAA5M,EAAAkS,IAAA,CA/CR,IAAAgO,EAAAlgB,EAAAqS,IAkDOwN,EAAP7f,EAA6BqE,IAGrB6b,EAAAvO,KAAA0O,MAAA1O,KAAAU,IAAA,EAAAV,KAAAO,IAAAgO,EAAAlgB,EAAAsgB,KAAA,EAAAtgB,EAAAugB,MACAN,EAAAtO,KAAA8E,KAAA9E,KAAAO,IAAA,EAAAP,KAAAU,IAAA4N,EAAAjgB,EAAAsgB,KAAA,EAAAtgB,EAAAugB,MAEIna,EAAO5B,OAAAgc,kBAAA,YAAAN,GACP1Z,EAAAA,OAAWga,kBAHf,YAAAP,GAII/Z,EAAAA,OAAarB,UAAA,YAAAqb,GACTtf,EAAE4D,OAAFK,UAAA,YAAAob,OAhEZnY,cAAe,WACX,OAAOxF,QA6EPhB,IAAAA,EAAAA,SAAOiD,EAAU/B,EAAA+B,GACbmM,EAAAA,KAAAA,KAAAA,EAAAA,EAAmBA,GAEvB,IAAA1C,EAAIgM,KAmBRxS,GAhBIwS,EAAAA,EAAAA,cAAoBhM,EAAK3G,kBAAzB,SAAA2G,GAtEJ1L,KAAKoH,gBAAkB,IAAI3J,EAAY+J,eAAexH,KAAO,YAAaiC,EAAWA,EAAS2F,QAAU,MAGxG5H,KAAKoO,aAAa8G,IAAI,kBAAmBlV,KAAKoH,iBA0E9CqR,KAAAA,mBAAqB,EACjBzY,KAAAsW,KAAKlP,EAAAA,KAAL,IAAuBA,EAAvBjK,EAAA6B,OAAAiD,EAAAqU,MACA5K,MAAK7I,KACRoS,WAvC6DhT,EAAAgT,cAyC9D,KAxEAjV,KAAK6c,WAAa,IAAIzf,EAAc+gB,MA51EvB,IA61Ebne,KAAK0d,YAAc,EA2EnBxY,KAAAA,aAIY9C,KAAAA,oBAAS0S,KAAQ1S,iBAKrBwF,KAAAA,MAAAA,CACAqN,IAAAA,EAAa,IAAAU,GAAsBD,MAAAA,KAAtBY,OATVgH,EAAPrS,SA9C0DjL,KAAAoe,iBAAAd,EAAA/Z,IAftDvD,KAAK6C,WAAW4E,MAAMzH,KAAKoe,kBA8E/Bpe,KAAAkI,UAAIwD,EAAAA,UAAJ9J,SAAA,SAAA2F,SAAAvH,KAAAqH,aAxECrH,KAAKkC,OAAOwC,UAAU,oBA0EvB1E,KAAAkI,UAAS8U,OAIDhd,KAAA8d,YAAIpgB,EAAAA,UAAcA,SAAlB,WAAA6J,SAAAvH,KAAAqH,aAGIpF,EAAAuW,MACAxY,KAAAuY,YAAIqF,EAAAA,OAGJ5e,EAAAue,EAAA/Z,UAAAzB,EAAAyB,UAAA8W,EAAA9W,WAEAma,iBAAAA,EAAAA,UAAiBxJ,iBAAmB9E,SAGpC3D,KAAAA,sBACH5H,MAAA,4FACJI,UAlBL,cAjE0DN,YAAA,SAAA8H,GASlDpN,EAAE,YAAYgG,SA6E1BoH,EAAA2S,SAAA3S,EAAA1J,KAAAoS,iBAAAkK,UAAA,EA3EY5S,EAAM7G,cAAeuD,kBAAkB,KA8EnDmQ,MAAAA,KAOIvD,KAAA,SAAA9U,GAC2B,IAAA+B,EAAKmM,KAAAA,UAAuBpP,EAAAiD,GACvDyJ,aAAM7G,KAAauJ,eAEnB,IAAAsJ,EAAA,IAAA1X,KAAA2X,YAAA3X,KAAAgC,KAAA9B,EAAA+B,GAtEA,OAFAyV,EAAUa,YAAYvY,KAAKwY,MA2E/Bd,EAAA3S,QAAA/E,KAAA+E,QAzEW2S,GAgFPe,oBAAA,SAAArR,GACApH,KAAAoH,gBAAAA,EACAsE,KAAAA,WAAMjJ,MAANzC,KAAmBwI,gBAAoBkD,aAO1CxG,QAvH6D,WA8C1D,OA2EJ6B,WAAA/G,KAAA4I,WAzEQkM,SACI1S,GAAIpC,KAAK8U,QAAQ1S,GACjBwV,SAAU5X,KAAK8U,QAAQ5T,IAAI,aA4EnC0B,MAAOoX,KAAAA,OAAU9T,oBA9HyCsS,KAAAxY,KAAAwY,KAsDtD5Q,QAAS5H,KAAKoH,gBAAgBlC,UA2EtC+P,WAAAjV,KAAAsW,KAAAtW,KAAAsW,KAAAZ,kBAOI6I,YAAKvc,WACR,IAzI6D0J,EAAA1L,KA2I9D,OAAA1B,EAAA0e,QAAAtR,EAAAoJ,QAAA5W,OAzEUmf,UAAW,OAAQQ,OAAO,EAAM5T,MAAOyB,EAAM1J,KAAKiI,MAAO6D,IAAK,EAC9DC,KAAMrC,EAAM1J,KAAK0I,SAAUkN,SAAUlM,EAAMoJ,QAAQ5T,IAAI,aA2EjEsd,SAAa3f,GACT,IAAAnB,EAAAmB,EAAAnB,KACA,GAAKqd,MAAAA,WAALrP,EAAAxJ,OAAAwC,UAAA,gBAhJ0D+Z,MAAAC,WAAAhT,EAAAxJ,OAAAwC,UAAA,eAAA,CAmJ9D,IAAAkZ,EAAAlgB,EAAAqS,IAzEoB4N,EAAYjgB,EAAKkS,IAGrBgO,EAAYvO,KAAK0O,MAAO1O,KAAKU,IAAK,EAAGV,KAAKO,IAAKgO,EAAWlgB,EAAKsgB,KAAO,EAAItgB,EAAKugB,MAC/EN,EAAYtO,KAAK8E,KAAM9E,KAAKO,IAAK,EAAGP,KAAKU,IAAK4N,EAAWjgB,EAAKsgB,KAAO,EAAItgB,EAAKugB,MAE9EvS,EAAMxJ,OAAOK,UAAU,YAAaqb,GACpClS,EAAMxJ,OAAOK,UAAU,YAAaob,OA8EhDpF,YAEIxK,SAAO4Q,GAFX,IAAAjT,EAGIkT,KAUAC,OAbJnT,EAAA8M,KAKIwB,EALJtO,EAAAxJ,OAMI2c,UAAa,OAAI7E,GAIX,SAANlM,GAAgBtD,KAAhB4D,aAAA0O,QACA/O,EAAAA,cAAY/L,kBAAZ,IACAgY,KAAAA,aAAU1K,UAAStN,KAAK0I,QAAL,0BAAnBgB,EAAA8M,KAAA,KACAqG,GAMJvZ,aAAA,WACA,IAAAoG,EAAA1L,KAKA0L,EAAAjJ,aAAA+F,aAAAH,OAAAqD,EAAA+R,mBAKA/R,EAAAjJ,aAAAqc,WAAAzW,OAAA,OAAAqD,EAAA4K,MACI5K,EAAAjJ,aAAAsc,qBAAA1W,OAAA,OAAAqD,EAAA4K,OADJ0I,oBAOIC,SAPJjF,EAAAkF,GAAA,OAAAlF,EAQY,IARZkF,GAcQzH,aAAAA,SAAO0H,GACPpZ,GAAAA,EAAAqC,kBACAoT,KAAAA,WAAKnM,QAET+P,KAAAA,KAAAA,eAAerZ,EAAKsZ,OAMpBb,YAAA,WAEHxe,KAAA+a,cAAA,GA3DL/V,MAAO,SAASe,GAsER,GAAA/F,KAAAuE,WAAA,CAEA,IAAA+a,EAAAvZ,GAAAA,EAAAuZ,YACAC,EAAAA,KAAAA,KAAUvW,IACN+E,EAAA/N,KAAAgC,KAAOkM,KAEXoB,EAAIiQ,KAAAA,KAAMhf,UAAc+O,QACpB5D,EAAAA,KAAMqJ,KAAAA,gBACT8J,EAAA,EAAA7E,EAlEDha,KAAKwC,cAsEbsL,EAAA9N,KAAAgC,KAAAwI,QApEQuD,EAAO/N,KAAKgC,KAAK0I,SAuEzB8U,EAAAA,GAtEQxF,EAAU1K,GAAStN,KAAK0I,SAAW1I,KAAKwI,WAuE5CxK,KAAAwe,cAcIha,KAAAA,UAAM6M,WAANzP,SAAA,UAaA,IAVA,IAKQ8J,EACA+T,EAJJC,EAAAA,KAAU3B,MA3oFtB4B,IA0oF2Dd,GAG3CvgB,EAAAA,KAAEyf,MAAFjQ,EAAcxJ,GAGjB2a,KACDW,KAEJT,EAAKlc,EAAsBuB,GA7Q2B0a,EAAA,IAAA9hB,EAAAoa,cA0MlDvN,MAAOjK,KAAKgC,KAAKiI,MAuE7BwN,MAAA0H,EAAAU,EApEYrE,IAAKnM,KAAKU,KAAMoP,EAAa,GAAKU,EAAY7f,KAAKgC,KAAK0I,YAwEpEqK,EAAkB/U,KAAAqf,YAAAH,EAAAlF,EAAuBA,GACrCiF,EAAIa,KAAAA,GACAxhB,EAAAgQ,KAAA8Q,GAAQW,KAAAA,SAAgBxG,GAD5BgG,EAAAtZ,KAAA8Z,KAMAZ,GAAA,EAlEKG,GAAetf,KAAKkI,UAAU5H,SAAS,WAAWiB,YAAY,UAAU+C,SAyEzE,IAAAoH,EAAIA,KACJvO,EAAAA,KAAAA,MAAEwM,EAAK4V,GAAOpM,KAAA,WAEN4M,EAAAA,UAAAA,SAAA,WAAAzb,SA9Da,KAmErBoH,EAAAA,EAAM8T,OAAAA,EAAAA,SAANtR,GAbJ,OAeK,OAAAA,KArES3N,QAwEVmL,EAAAqJ,iBAAAwK,EAAAjQ,EAAA0K,EAAAsF,OAQCE,iBAFD,SAAA/gB,EAAAghB,GApEJ,IAAI/T,EAAQ1L,KAwERkE,EAAA,QAAI8b,EAAe,MAAA,SACf7iB,EAAOoiB,QAAPpiB,EAAc,MAAS4iB,MACnBE,EAAUpG,QAAVpb,EAAUob,YAAW,YACjBrV,EAAAxE,KAAAiD,cAAA9B,KAAA,eAAA+C,GACA6b,EAAAA,EAAAA,EAAK9F,OAAAA,UAAagG,GAAeC,GAG5CT,EAAAA,GAAA,WACJ/T,EAAA7G,cAAAuD,kBAAA,KAGL,IAAA5D,EAAAjE,OArEQiE,EAAM6M,KAAK7D,IAIXhJ,EAAQlG,EAAE,UAAU+S,KAAK7D,GAAO2S,oBAwExCT,SAAA,GAtEYU,UAAW,SAASC,GAChB/hB,EAAE,YAAYgG,SAwE9Bgc,EAAkBpe,OAAAK,UAAA0d,EAAUM,EAAAA,EAAe,IACvCd,KArEQG,UAAW,OAASvO,EAAO,WAwEvCzP,SAAA,cAAAsC,GAAAwI,IAAA,QAAA1M,KAAAkC,OAAAwC,UAAA,gBAtEQ1E,KAAKiD,cAAc7B,QAAQoD,KAQnCuQ,iBAAkB,SAASwK,EAAOjQ,EAAO0K,EAASsF,GAS9C,GARuBniB,EAAE6L,OAAOuW,EAAO,SAASQ,GAC5C,OAAQA,aAAgBxG,IAOPhZ,OAAS,EAAG,CAI7BP,KAAK+a,cAAgB,EACrB,IAAIrP,EAAQ1L,KAqEZ7C,EAAAwM,KAAA4V,EAAA,SAAAQ,GACQA,aALZxG,IAMI1T,EAAAA,SAAiB2a,SACjBnc,EAAMgb,YAAKL,EAAAA,OAAoBhF,GAAzByG,OAPV,EAAAjI,KAAA,gBAzDI9M,EAAM8T,iBAAiB,YAwEtBxf,KAAAiD,cAAA9B,KAAA,eAAAmD,SAKOoP,EAARvS,KAAuBoe,EAAO,SAAAQ,GAAE,OAAOA,EAAPlG,aAGhC6G,EAAAA,KAAAA,EAAAA,SAAgBX,GAChBA,EAAAlG,WAC6DkG,EAAOY,SAAPjU,IAAA,cA1wFrE0M,OAmxFQwH,SAAA,SAAI5e,GACA6e,OAAAA,KAAAA,MAMRP,iBAAA,SAAAC,KAMIC,eACIM,WADJ,OAAA9gB,OASI0L,YAAAA,SAAMmR,EAAAA,EAAWkE,GAEbC,IAAAA,MAEJ,IAAAP,EAAA1a,EAAA0a,MACHjI,EAAAzS,EAAAyS,MAAAxY,KAAAwY,KA3DDqG,EAAa,EAAI7E,EA+DbF,EAAAA,KACHjU,EAAA7F,KAAAwgB,iBA3DDnc,EAAMrE,KAAKgf,oBAAoBhF,EAAShC,GAIxC+H,EAAQU,OAAQnW,EAAYoB,EAAMmR,WAAWoE,QAAQ5c,GA6DrDlH,GAAAA,EAIQqb,OARR,SAAA0I,GAAA,OAAAA,GAAA,UAAAA,EAKIC,CAAI3I,IAAJ9M,EAAA0V,UACWN,EAAAA,GAEPtI,EAIJ6I,IAAAA,IAAAA,EAAAA,WAAuBC,OAAAA,KAG3B,IAAAZ,EAAIrH,WAAJ,IAAAkI,EAEIC,EAAAA,KAAYxJ,EAFhB,SAAA2I,GAAA,OAAAA,IAAAnI,IAAA,WAAAA,EAAAqI,EAKI7Q,EAAS7S,IAAA0I,EAAMwb,SALnBthB,GArDI,OAAOA,EAAEqO,aAAaqT,SAASzJ,EAAQuJ,EAAW1C,EAAYnT,EAAMgW,yBAoExEC,OAJAtI,KAAAA,iBACAwH,EAAA5a,KAAAjE,KAAA4P,gBAAAxD,aAAAqT,SAAAzJ,EAAAQ,EAAAqG,EAAA7c,KAAA4P,gBAAA8P,wBAGAC,GAMI5B,EAAAA,EAAOhgB,WAsEX4P,OArECjE,EAAAmR,WAFDkE,QAAA1c,EAAA2c,GAzDJ1iB,EAAEgQ,KAAKf,MAAMjP,EAAGoiB,KAAiBvN,KAAM,WA6DnC,IAEIzH,EAFJmV,EAAAH,IACAI,EAAaxW,EArDb,GAAInN,EAAEgE,KAAK0f,EAAW,SAAS9gB,GAAK,OAAOzC,EAAKskB,YAAY7hB,KAKxD,OAwDR2L,EAAOsV,WAAPD,QAAA1c,OAAAiG,QAxd0DhM,EAAAgQ,KAAA5C,EAAA2T,YAAArH,EAAAgC,EAAAjU,IAAAoN,KAAA,SAAA4M,GA8Z9CiB,EAAWjiB,QAAQghB,KAkE/B/d,KAAO4P,kBAhemDkI,EAAA9X,KAAA4P,gBAAAxD,aAAAyT,aAAAhB,EAAAiB,MAAA9J,IAyatD,IAAI+J,KA6DZC,KAEI7kB,EAAAwM,KAAA9D,EAAA,SAAA9F,EAAAgB,GACA,IAAAyX,EAAAzY,EAAAyY,KACMlO,EAADwW,EAAkBxa,GACP/D,SAAZiW,IACHA,EAAAzY,EAAA6gB,SAAAljB,GACK4M,EAAAA,iBAAoBhE,IACqDyb,EAAO9b,KAAPuS,GAAc6I,EAAzFpb,KAAAlG,EAAAuhB,kBAAA5jB,EAAA8a,EAAAwB,EAAA1K,MAGJ,IApDQyQ,EAoDJ1G,EAASsI,EAAItI,KAAjBnO,eAAA+W,aACIC,EAAUlK,EAAIxa,IAAAA,SAClB0kB,EAAAlK,EAAkBqB,IAAO/J,OAEzBA,EAAWiK,KAAAA,MAAJiI,EAAwBxJ,GAAiBqB,GAAQxa,EAAOnB,YArfLsS,EAAA7S,EAAAyS,IAAAyR,GAkctDhI,EAAO/J,MAAQA,EAEf+J,EAAOrJ,OAAUjK,EAAQiK,QAAUA,EACnC,IAAI2R,EAAMtI,EAAO8I,WAAW,MAC5BR,EAAIS,UAAU1W,EAAMgS,YAAa,GA2DzC2E,EAAW9hB,OAAA,IAzDCohB,EAAIW,YAAc,GA2D9BX,EAAAY,yBAAA,eAxDQplB,EAAEwM,KAAK9D,EAAW,SAAS9F,EAAGgB,GAC1Bgf,EAAOhgB,EAAEsiB,UAAUvB,EAAY/f,GAAI4gB,EAAKI,EAAchhB,GAAIiX,EAAQgC,EAASF,UAIlExP,IAATyV,IA2DRrU,EAAAmR,WAAAkE,QAAA1c,EAAA0b,GAzDQrU,EAAM0V,UAAUrB,EAAM/F,IA6D9BgH,EAAAjiB,QAAAghB,KAGIpQ,GAOA6S,kBAAAA,SAAajhB,EAAbiX,EAAyBwB,EAAzByI,GACH,OAJDziB,KAKK4c,mBArDToF,sBAAuB,SAASnjB,EAAQ8iB,EAAKnJ,EAAMR,EAAQgC,IA+DvD,UAAA1P,EAAA,MAAAhE,QAAAtG,KAAAkC,OAAAwC,UAAA,eACA1E,KAAAkC,OAAAK,UAAA,YAAA,IAzD2E,UAArE+H,EAAW,KAAM,GAAGhE,QAAQtG,KAAKkC,OAAOwC,UAAU,eA4DxD1E,KAAAkC,OAAAK,UAAA,YAAApF,EAAAyS,IAAAzS,EAAAiQ,IAAAvO,EAAAnB,KAAA,SAAAqC,GAAA,OAAAA,EAAA,OAAA,GAGA,IAAAsZ,EAAAsI,EAAAtI,OAIC,OAHGqJ,IAAAA,EAAeC,YAAK5H,EAAxBrd,KAAAsa,EAAA9W,IAAA,SAAA8W,EAAA9W,IAAA,OAAAlB,KAAAkC,OAAAgE,oBAAAsS,GACIoK,KAAKhG,EAAAA,EAAAA,MAALvD,EAA8BrJ,OAAAgK,GAEjC,IAAAT,EAAAvZ,KAAAgY,EAAAgC,EAAAX,EAAAxa,EAAAnB,OAYJ2kB,UA5jB6D,SAAAxjB,EAAA8iB,EAAAnJ,EAAAR,EAAAgC,EAAA6I,KAkkB1DzB,UAAA,SAAArB,EAAA/F,GACA,IACIwI,EAAAzC,EAAA9F,SAIA8F,EAAAvG,qBADC,IAAA7J,EAAAN,KAIAvR,OAASglB,EAAAA,KAAL9iB,KAAsBwC,YACtB9E,KAAKqlB,KAAAA,QAAe/iB,KAAAgC,KAAa8L,MAAAkM,GACtCha,KAAA0d,cACH/N,GAAA3P,KAHI0d,aAMJ8E,EAAA9V,IAAA,OAAAiD,GA3DI6S,EAAanhB,SAAS,UAGvBmhB,EAAajhB,YAAY,UAiEzBvB,KAAAkI,UAAO1G,OAAPghB,GAKHA,EAAA9V,IAAA,SAAA,QAKL1M,KAAA+a,cAAA1L,KAAAO,IAAA5P,KAAA+a,cAAAyH,EAAAxS,SAAA,GAGA8H,EAAAA,SAAoBxX,WAAAoM,IAAA,SAAA1M,KAAW+a,cAAA,MAG3B,IAAA2H,EAAKlI,KAALO,cAC0B,IAA1B/a,KAAKgjB,oBA5DDN,EAAerT,KAAKU,IAAI/P,KAAK+a,cAAe/a,KAAK4c,oBA+DrD5c,KAAAkI,UAAAwE,IAAA,SAAAgW,EAAA,OAvDJ3K,+BAAgC,SAASC,GACrC,IAAItM,EAAQ1L,KAGZ,MAAO,oBAFsBsK,IAAX0N,EAAuBA,EAAOiL,WAAa,OAEzB,kBADpB9lB,EAAE+lB,OAAQxX,EAAM4K,KAAKuC,mBAAmBsK,KAAK,MACO,KAMxEC,yBAA0B,SAAS1lB,EAAM8a,GAErC,MAAa,SAATA,IAIc,aAATA,EACwB,WAAtB9a,EAAKolB,aAGe,WAAtBplB,EAAKolB,cACe,cAApBplB,EAAKqlB,aA0EgBlI,WAAlC,SAAAwI,GADJ,OAAAA,EAAA/J,SAAA,cAAA+J,EAAAN,aAUQ,WAAKhe,EAAAA,cAHiCse,EAAA3lB,KAAA,GAAA,GAAA2lB,EAAA3lB,KAAA,GAAA,IAAA,IAYtCoa,mBACY9V,WADZhC,KAAAoO,aAGI9M,IAAW+N,YAAiBvB,YAHhC9N,KAAAwa,gBAIiBxY,IAJjBhC,KAAAgjB,mBAKgB,WA0CpB7lB,IAAAA,EAAO,SAAK0I,EAAW3F,GACnBoa,EAAA/U,KAAAvF,KAAID,EAAAA,GACAA,QAAAA,EACHiD,QAAA,IAhELhD,KAAKiD,cAAcrB,SAAU,gBAEjC5C,EAAOuR,EAAW/M,UAAW8W,EAAM9W,WAmE/BoB,KAAA,WAEA5E,KAAK0F,SAAL,GAMA/C,aAAAA,aAOAc,MAAAA,SAAAA,GAQYnF,IANR,IAAA0D,EAAAhC,KAAAgC,KACA4c,EAAA5c,EAAA+L,KAAA/L,EAAA8L,IACIhL,EAAMuM,KAAA0O,MADV1O,KAAAiU,IAAA,GAAAjU,KAAA0O,MAAA1O,KAAAkU,IAAA3E,GAAAvP,KAAAkU,IAAA,OAEIzf,EAAOuL,KAAA0O,MAAA/b,EAAA8L,IAFX0V,GAAAA,EAGItf,EAAAA,KAAWlC,KAAA9B,UAHfoP,QAII1L,EAAAA,EAAAA,UAAahC,SAAA,mBACTtD,EAAE0D,EAAYsC,MAAd,CACAoH,IAAAA,EAAA2D,KAAA0O,OAAAzc,EAAAU,EAAA8L,KAAA8Q,EAAAtP,GACHmU,EAAAjiB,OAAAlD,EAAA,UAAAsD,SAAA,aAAAyP,KAAA/T,EAAAuU,UAAAvQ,IAAAoL,KAEPW,KAAOkQ,KAETjc,GAAAkiB,EAvEIxjB,KAAKqH,YAAY/G,SAAU,UAAWgE,SACtCtE,KAAKqH,YAAY7F,OAAQiiB,MAYjC,IAAI/a,EAAiB,SAAS1G,EAAM9B,EAAW+B,GA+EvC,GALJsb,EAAAhY,KAAAvF,KAAAgC,EAAA9B,EAAA+B,GAIIjC,KAAA6F,aACA,cAAI6d,EAAiB,CAEjB3jB,IAAAA,IADJ5C,EACI4C,EAAE6c,EAAAA,EAAAA,EAAF/W,UAAsB6d,OAAtB3iB,IACH8C,EAFD5B,EAAA4D,UAAA9E,GAGAuZ,KAAAA,UAAAvZ,GAAgBwb,EAAhB1Y,EAAA7B,EAAA,MAGJ6B,EAAA6Z,YAAA1d,KAAA0d,cAxEY1d,KAAK0d,YAAc7Z,EAAS6Z,aA4EpCH,KAAAA,SAAW/Z,EAIdrG,EAAAwM,KA5DkD3J,KAAA6F,UAAA,SAAA9F,IAZ3CA,aAAagJ,GAAgBhJ,aAAa4jB,IA0ElD5jB,EAAAwY,YAAA,cAIIvY,KAAAsF,eAICtF,KAAA0F,SAAA,kBAGD1G,EAAA0J,EAAIgD,UAAJ6R,EAAA/Z,WACAlF,cAAOiP,EAEH7B,cAAAA,EAAAA,MAAM7G,EAANrB,UAAAb,gBACH0B,IAHD,YAAAG,MAAA,YAAA/F,KAAA,QAAAgG,mBAAA6F,IA1E+CjG,IAAA,YAAAG,MAAA,YAAA/F,KAAA,QAAAgG,mBAAA6F,IAM7CjG,IAAK,OAAQ5F,KAAM,SAAUgG,cAAe,OAAQE,QAAQ,IA0ElEW,IAAAA,SAAc7G,KAAA,MAAAgG,cAAW,GAAAE,QAAA,KAGrBlB,mBAIJc,KAAUxC,iBAxEF+B,MAAO,yBA0Ef0c,UAAAA,eACI5c,YAAYiC,SAAZ6F,GA1F+CpN,EAAA,YAAAgG,SAmBvCoH,EAAMkY,gBAGhBvW,OAAOkQ,EAAW/Z,UAAUC,kBAgF1ByB,QAAAS,EAAoBnC,UAAKqC,QAErB6F,aAAAA,EAAAlI,UAAA7C,aAEA+K,iBAAMxL,EAANsD,UAAAiC,iBAEH1C,gBAAA,WAxED/C,KAAKmF,SAASnF,KAAKkC,OAAOwC,UAAU,SA0EpC1E,KAAA6E,cAAAuD,kBAAA,KAnEJmU,UAAW,WA2EXiC,IAAAA,EAAaxe,KAAA4c,kBACTzf,EAAAwM,KAAA3J,KAAA6F,UAAA,SAAA9F,GACAA,EAAA6c,kBAAA8G,IAEApJ,EAAA9W,UAAA+Y,UAAAhX,KAAAvF,OAKoDuY,YAAA,SAASrW,GAAgCqb,EAA7F/Z,UAAA+U,YAAAhT,KAAAvF,KAAA2e,GAAA,IAAA,IACI/O,EAAAA,EAAQA,EAAIzS,KAAA0I,UAAWA,OAAW9E,IAAcf,KAAA6F,UAAS3D,GAAAA,YAAiByc,IAM9ExhB,KAAAA,WAGC,IAHD,IAEI4C,KAFJgB,EAAA,EAAAA,EAAAf,KAAA6F,UAAAtF,OAAAQ,IAtI+C8iB,EAAA5d,KAAAjG,KAAA6F,UAAA9E,GAAA6D,QAyE/C,IAAI8G,EAAQ1L,KAsEhB8jB,EAAAA,KAAAA,MAAAA,EAAAA,GAAoB3Q,KAAA,WAChBzH,EAAIA,SAAJ,EAAAA,EACIkS,kBAIA7d,aAAEmC,WAENlC,KAAAyC,aAAKoC,aAAeuD,OACvBpI,KAxJkDyC,aAAAqc,WAAAxb,OAoF/CtD,KAAKyC,aAAasc,qBAAqBzb,QAG3CiB,SAAUxC,EAASyB,UAAUe,SAuE7BwQ,eAAAA,WACI,OAAA/U,KAAA6F,WAKQke,WAAAA,WAMJ,IAAA,IADArY,EAHH5D,EAAA,IAAAX,EAAAnH,KAAAgC,KAAAhC,KAAAE,WAnEO4C,KAAM9C,KAAKkC,OAAOwC,UAAU,UAuEhC3D,EAAIgf,EAAAA,EAAK9F,KAALpU,UAAmBtF,OAAUyP,KAC7BtE,EAAA1L,KAAKqf,UAAAA,IACLU,eACHjY,EAAAnH,aAAA+K,GACJA,EAAAxL,UAAA4H,EAnEGA,EAAMT,YAAY7F,OAAOkK,EAAMzI,eAuEdyI,KAAMoY,UAAAA,iBAAN9jB,KAAA8H,GAAA,GAA6BA,EADlDjD,cAAAuD,kBAAA,KAjL+CoW,YAAvD,WAiMI,IAAAzO,EAAK2N,EAAAA,IAALvgB,EAAAiQ,IAAmBpL,KAAKkJ,UAAL,SAAoB8Y,GAAvC,OAAAjkB,EAAAmC,OAAAwC,UAAA,gBACAkL,EAAK3M,EAAAA,IAAAA,EAALmK,IAAmBxL,KAAnBiE,UAA4B,SAA5B9F,GAAA,OAAAA,EAAAmC,OAAAwC,UAAA,gBAEA1E,KAAK0hB,OAAAA,UAAAA,YAAyBtP,GAC9BpS,KAAKoO,OAAAA,UAAe,YAAIhR,GAAyCD,EAAjEwM,KAAA3J,KAAA6F,UAAA,SAAA9F,GAIAA,EAAKkE,OAAAA,UAAL,YAAA8L,GAZJhQ,EAAAmC,OAAAK,UAAA,YAAAqN,MAsBQkU,mBAAA,WACH,IAnEOlG,EAAY5d,KAAKkC,OAAOwC,UAAU,aAqE1CiZ,EAAA3d,KAAAkC,OAAAwC,UAAA,aAnEIvH,EAAEwM,KAAK3J,KAAK6F,UAAW,SAAS9F,GAC5BA,EAAEmC,OAAOK,UAAU,YAAaqb,GAqExCR,EAAAA,OAAAA,UAAc,YAAAO,KAEdpZ,KAAAA,cAAmBf,kBAhBoD,KAsBnEuR,iBACIkP,SADJ1E,EAAAjQ,EAAA0K,EAAAsF,GAGA,IAAcve,EAAdgjB,GAAc,EACV,IAAAhjB,EAAA,EAAAA,EAAKmH,EAAL3H,OAAAQ,IAAA,CACAkjB,IAAAA,EAAAA,EAAcljB,GAAdkZ,SAAA9Y,KAAA,UAAA6O,SACA+P,EAAOxC,IAHXwG,EAKK/T,GAjEL,IAAKjP,EAAI,EAAGA,EAAIwe,EAAMhf,OAAQQ,IAAK,CAsEnC,IAAAgf,EAAAR,EAAAxe,GACAgf,EAAA9F,SAAA9Y,KAAA,UAAA6O,WAAA+T,IACA/jB,KAAAqf,YAAAU,EAAA/H,OAAAgC,GAAAyG,OAAA,EAAAzQ,OAAA+T,IACAhE,EAAA9F,SAAA3V,UAKC,IAAAoH,EAAA1L,KApEGkO,EAAI,WAAaxC,EAAMoY,sBAG3B9jB,KAAKwf,iBAAiB,MAAOtR,GAsEjC2M,KAAAA,iBAAY,MAAA3M,MAKZmU,IAAAA,EAAW,SAAArgB,GACPub,EAAAhY,KAAAvF,KAAAgC,GAAAqF,YAAArF,EAAA4J,iBAAAoP,QAAA,EAAAhY,QAAA,IAhEJhD,KAAK0d,YAAc1b,EAAKkJ,eAAe8Y,cAoEnChkB,KAAAiD,cAAArB,SAAA,mBACA5B,KAAAkkB,SAAI7K,OAASsI,KAAItI,eAAjBrZ,KAAAgC,KAAAoI,MACAuX,KAAAA,uBAAsBwC,WAAQC,GAC9BzC,KAAAA,aAAI0C,IAAYjnB,EAAhBknB,4BACAJ,SAAKlkB,KAAIukB,SACL5C,WAAI6C,KAAAA,aAEPxkB,KAAAiE,iBAEJjF,EAAAqT,EAAA7O,UAAAzB,EAAAyB,UAAA+Z,EAAA/Z,WAnEsEb,cAA3ExF,EAAAsnB,MAAA1iB,EAAAyB,UAAAb,gBAEU0B,IAAK,SAAU5F,KAAM,MAAOgG,cAAe,GAAIE,QAAQ,KAG7DC,KAAM,WAoENqE,KAAAA,aAAY6T,QAEZS,KAAAA,SAAA,GAMAH,aAAIlM,aAGC3M,SAAAxC,EAAI1D,UAAAA,SAMRghB,YARD,SAAArH,EAAAgC,EAAAjU,GATJ,IAlDYke,EAkDZS,EAAA1kB,KAAAkI,UAAAjH,GAAA,YAoBOgI,EAAAA,KA2BF,OA1BD0b,EAAAA,KAAe7iB,KAAAA,eADmDkiB,eAnE1DhkB,KAAKkI,UAAUvE,OAsEvBhB,GAAiB8hB,EApET1E,EAAOxC,EAAW/Z,UAAU6b,YAAY9Z,KAAKvF,KAAMgY,EAAQgC,EAASjU,KA8ExEke,GAAKpf,EAbyD7E,KAAAkI,UAAA5E,QApD1DohB,IAAgBT,GAChBjkB,KAAKgC,KAAK0S,kBAmDgDqL,GA7ClElF,WAAY,SAASwI,GAAS,OAAO,GAKrChB,UAAW,SAAS3kB,EAAMikB,EAAKnJ,EAAMR,EAAQgC,GAEzC,IAAI4K,EAAS5kB,KAAKoO,aAAayT,aAAankB,EAAMsa,GAC9C8B,EAAW8K,EAAOlnB,KA8EtB2b,EAAKmG,EAAAA,OACLmC,EAAAkD,KAAKrF,EAAAA,OAAAA,QAAiB4E,aACzBzC,EAAA0C,UAAA,SA3CL,IAAA,IAAAE,EAAA,EAAAO,EAAAhL,EAAAvZ,OAAAgkB,EAAAO,EAAAP,IA9BY5C,EAAI6C,UAAYxkB,KAAKgC,KAAK+iB,eAAejL,EAASyK,IA4E9D5C,EAAAqD,SAAAlL,EAAAyK,GAAAlV,KAAA0O,MAAAwG,EAAAvK,GAAA,IAzEQ,OAAO,IAAID,EAAK/Z,KAAMgY,EAAQgC,EAASX,EAAQuL,MAkFnDD,IAAAA,EAAAA,SAAgB3iB,EAAA9B,EAD6D+B,GAzE7EjC,KAAKwY,KAAO,YA4EZ7V,EAAAA,KAAAA,KAAiB8hB,EAAO1iB,EAASyB,GASjCT,KAAAA,YAAAA,GA9EA,IAAImO,EAAOlR,KAmFX1B,EAAAgQ,KAAAjQ,EAAA2T,OAAAC,KAAA,YAAAjS,KAAA8U,QAAA1S,GAAA,aAjFE+Q,KAAK,SAAS9U,GACPA,IAmFT+e,EAAAA,aAAc,IAAAvf,EAAAonB,gBACNvZ,QAAQwF,EAAZ4D,cAQJ9V,EAAAiK,EAAAzF,UAAAzB,EAAAyB,UAAA+Z,EAAA/Z,WAlFAmhB,cAAe7iB,EAqFfugB,cAAWllB,EAAAsnB,MAAA1iB,EAAAyB,UAAiBme,gBACxBtd,IAAA,QAAAG,MAAA,QAAA/F,KAAA,UACA4F,IAAA,YAAasd,MAAb,YAAAljB,KAAA,QAAAgG,mBAAA6F,IAAAjG,IAAA,YACcG,MAAIhH,YAAS0nB,KAAAA,QAAuBrmB,mBAAamZ,IAC/DkK,IAAAA,OAAQU,KAAR,SAAyBtT,cAAcU,OAAQgK,QAA/C,IAlFE3V,IAAK,SAAU5F,KAAM,MAAOgG,cAAe,GAAIE,QAAQ,KA8CgB5B,gBAAjF,WA1CQ/C,KAAKmF,SAASnF,KAAKkC,OAAOwC,UAAU,SAoF5C1E,KAAA6E,cAAAuD,kBAAA,KAOIoW,YAAKH,aAKLgE,UAAK8C,SAAAA,EAAAA,EAAL3M,EAAAR,EAAAgC,GATJ,OAAAha,KAAAgiB,sBAAAnjB,EAAA8iB,EAAAnJ,EAAAR,EAAAgC,IAuBYjU,WAAAA,SAAavB,GAzFjB,OAAQ6e,EAAM3lB,KAAK,GAAG,GAAK2lB,EAAM3lB,KAAK,GAAG,IAAO,GAMpDqX,iBAAkB,SAASwK,EAAOjQ,EAAO0K,EAASsF,GA+F9Ctf,KAAAwf,iBAAiB9a,OACb1E,KAAAwf,iBAAA,UAtFZ,IAAI4F,EAAuB,SAAUpjB,EAAM9B,EAAW+B,GAClDjC,KAAKwY,KAAO,UACZ+E,EAAWhY,KAAKvF,KAAMgC,EAAM9B,EAAW+B,IAG3CjD,EAAOomB,EAAqB5hB,UAAWzB,EAASyB,UAAW+Z,EAAW/Z,WA8F9DmhB,eAAIjZ,WAAJ/I,cAEImd,EAAAA,MAAAA,EAAqB9W,UAAOuW,gBACxBlb,IAAA,YAAQ6J,MAAAA,iBAARzP,KAAA,QAAAgG,cAAA,YACHJ,IAJL,YAAAG,MAAA,iBAAA/F,KAAA,QAAAgG,cAAA,YAxFEJ,IAAK,YAAaG,MAAO,YAAa/F,KAAM,MAAOgG,mBAAe6F,IA8FpEjG,IAAA,YAAAG,MAAA,YAAA/F,KAAA,MAAAgG,mBAAA6F,IACAjG,IAAA,OAAA5F,KAAA,SAAAgG,cAAA,OAAAE,QAAA,IACAN,IAAA,SAAA5F,KAAA,MAAAgG,cAAA,IAAAE,QAAA,KAGI5B,gBAAA,WACA/C,KAAAmF,SAAIkgB,KAAAA,OAAAA,UAAAA,SACJloB,KAAAA,cAASmoB,kBAAa,KAMtBlI,aAAA,WACA,IAAA1R,EAAIwF,KACJ/T,OAAAA,EAAAA,QAAOoiB,EAAOzK,QAASiL,OACnB1C,UAAA,OAAAQ,OAAA,EAAA5T,MAAAyB,EAAA1J,KAAAiI,MAAA6D,IAAA,EACAC,KAAArC,EAAI6Z,KAAAA,SAAAA,SAA0BpoB,EAAOkoB,QAAAA,IAAAA,aACEjY,SAASgN,GAAmCvb,EAAAnB,QAMnF2kB,UAAA,SAAIllB,EAAOooB,EAAAA,EAAAA,EAAAA,GAEP,IAAAlM,EAAAsI,EAAAtI,OAIA4I,OAHA,IAAAzkB,EAAIgoB,uBAA6BD,EAAAA,KAAAA,EAAAA,IAAlB,SAAfvN,EAAA9W,IAAA,OAAAlB,KAAAkC,OAAAgE,oBAAAsS,GAAAoK,KAAAjB,EAAAtI,EACI4I,MAAAA,EAAkBjgB,OAAKkJ,GAE3B+W,IAAAA,EAAAA,KAAAA,EAAWjS,EAASX,EAAS0Q,EAAK1G,SASlClc,IAAAA,EAAAA,SAAE6B,EAAO+gB,EAAK1F,GACjBkD,EAAAhY,KAAAvF,KAAAgC,EAAA9B,EAAA+B,GACJjC,KAAAiD,cA1BDrB,SAAA,iBA2BH5B,KAAAylB,oBAAA,GA7FLzlB,KAAKqe,YA+FDre,KAAA0lB,iBACA1lB,KAAA0d,YAAA,IA3FJ1d,KAAKmlB,2BAETnmB,EAAO+J,EAAavF,UAAWzB,EAASyB,UAAW+Z,EAAW/Z,WAC1DmhB,eAAgB,OAAQ,WAAY,QAAS,SAAU,QAEvDhiB,cAAexF,EAAEsnB,MAAO1iB,EAASyB,UAAUb,gBACrC0B,IAAK,cAAeG,MAAO,cAAe/F,KAAM,UAChD4F,IAAK,uBAAwBG,MAAO,yBAA0B/F,KAAM,UACpE4F,IAAK,cAAeG,MAAO,cAAe/F,KAAM,QAASgG,cAAe,UACxEJ,IAAK,cAAeG,MAAO,sBAAuB/F,KAAM,OAAQgG,eAAe,EAC/EkhB,KAAM,wEACNthB,IAAK,YAAaG,MAAO,oBAAqB/F,KAAM,QAASgG,mBAAe6F,EAAWqb,KAAM,qCAC7FthB,IAAK,YAAaG,MAAO,oBAAqB/F,KAAM,QAASgG,mBAAe6F,EAAWqb,KAAM,qCAC7FthB,IAAK,kBAAmBG,MAAO,kBAAmB/F,KAAM,SAAUgG,cAAe,YAC/EsB,UAAavB,MAAO,mBAAoBgJ,MAAO,aAAgBhJ,MAAO,OAAQgJ,MAAO,WACvFnJ,IAAK,OAAQ5F,KAAM,SAAUgG,cAAe,OAAQE,QAAQ,IAC5DN,IAAK,SAAU5F,KAAM,MAAOgG,cAAe,EAAGE,QAAQ,KAkGxD5B,gBAAA,WACA/C,KAAAmF,SAAAnF,KAAAkC,OAAAwC,UAAA,SA9FA1E,KAAKmlB,0BAgGLnlB,KAAA6E,cAAAuD,kBAAA,KAEI+c,wBAAA,WAEqC,SAArCnlB,KAAAkC,OAASwC,UAAOkD,mBACZA,KAAAA,QAAAA,EAAWge,wBA7Ff5lB,KAAKkiB,QAAU1kB,EAASqoB,sBAuGhBC,iBAAAA,SAAAA,EAAAA,EAAkBvG,EAAS7hB,GAC3B6f,EAAA/Z,UAAKuiB,iBAAWne,KAAQrH,KAAQwlB,EAAKzW,EAAA0K,EAAAsF,GAEjC,IAEI7B,EAFJ/R,EAAA1L,KAWR0L,GAAM+R,IARMtgB,EAAA6L,OAAAuW,EAAA,SAAArR,GACH,OAAAA,aAAAqL,IAOHkE,OAAN,CAEI/R,IAAAA,KACHvO,EAAAwM,KAAAxM,EAAAmoB,MAAA/F,EAAA,uBAAA,SAAAyG,GACDta,EAAAA,KAAAA,EAAMpG,SAANkJ,GACH6W,EAAA7W,EAAA,IAAAA,MAKL,IAAA0C,EAAAlR,KACA7C,EAAAwM,KAAI4V,EAAA,SAAAQ,GAEA,IAAAwF,EAA8BxkB,EAAAA,KAAKskB,EACJloB,EAAAiQ,IAAA2S,EAAA3F,oBAAA,SAAA2L,GAAA,OAAAA,EAAA,MAHnC,GAMSR,EAAApoB,EAAA8oB,KAAAV,EAAApoB,EAAA+oB,KAAAnG,EAAA1F,6BAIJ,IAAAld,EAAAgpB,KAAAZ,GAAA,CArK4D,IAAAC,GAAA9nB,KAAAP,EAAA+lB,OAAAqC,IAwEjDtD,EAAa/Q,EAAKlP,KAAKkJ,eAAe+W,aAkG1DmE,EAAAnE,EAAAE,WAAA,MAhGgBF,EAAWjS,OAASX,KAAKO,IAAImQ,EAAK1G,OAAOrJ,OACZkB,EAAKoQ,kBAAkBkE,EAAUzF,EAAKvH,KAAMuH,EAAK/F,QAAS,MAkGvGsG,EAAkBhR,MAAAyQ,EAAA1G,OAAA/J,MACV8W,EAAcC,UAAQtG,EAAA1G,OAAA,EAAA,GAClBb,EAAS4J,UAAa1W,EAAAgS,YAAA,GACtBlF,IAAAA,EAAOtH,EAAAmR,UAAPmD,EAAAY,EAAArG,EAAAvH,KACHuH,EAAA/H,OAAA+H,EAAA/F,QAAA+F,EAAAjG,UACDxb,EAAKmE,EAAAA,QAAa6jB,YAAU5mB,EAAK6mB,EAASlN,SAC7C0G,EAAA1G,OAAA4I,EAnLgE9kB,EAAA6B,OAAA+gB,EAAA1F,2BAAAgL,MAoN7D,GAAA3Z,EAAAtE,gBAAA,CACA,IACA2e,EADAne,EAAA8D,EAAAtE,gBAAAQ,QAEA,IAAAme,EAAA,EAAAA,EAAAne,EAAArH,OAAAwlB,IACAne,EAAAme,GAAAH,gBAKA,IACAE,EACA9c,EAFAyU,GAAA,EAGA,IAAA1c,EAAK,EAAAA,EAAKiB,EAALzB,OAAsByB,IACvBwW,GAAAA,EAAAA,GAAO9a,KAAA6C,OAEPiY,IAHJsN,EAEOvG,EAAAxe,GAAArD,KAAA,GACH8a,EAAO,EAAAuN,EAAPne,EAAArH,OAAAwlB,IAEP,IADI/c,EAAApB,EAAAme,IACJS,WAAAV,IACD9c,EAAA+G,MAAA/G,EAAA4G,IAAA,CAtOiE6N,GAAA,EAwI7C,MAuGhB/R,EAAA+R,oBAAYgI,IADhB/Z,EAGK+R,kBAAAA,EACD/R,EAAA+R,mBACIgJ,EAAAA,gBAAqBC,OAEzBhb,EAAApG,gBA1FJ,GAAIia,EAAM,aAAc9F,EAAkB,CACtC,IAAIU,GAAc,EAClB,IAAKpZ,EAAI,EAAGA,EAAIwe,EAAMhf,OAAQQ,IAC1B,IAAKwe,EAAMxe,GAAGoZ,YAAa,CACvBA,GAAc,EACd,MAGRna,KAAKyC,aAAakkB,oBAAoBte,QAAQ8R,QAmGlDna,KACIqZ,aAAaA,oBADjB/V,QAQIgd,iBAAA,SAAY0B,GACf,SAAAhiB,KAAAwY,OAhGgB,cAATA,IAkGRA,EAAA,iBAEAxY,KAAAyC,aAAA6jB,UAAA5mB,KAAA,QAAA,+BAAA8Y,EAAA,OAUQkO,kBAAA,SAAAE,EAAApB,EAAAhN,GAKQqO,IAAAA,EAAAA,KAAAA,KAAAA,eAAAC,cACAC,EAAA/mB,KAAAqe,SAAAuI,GAMJ,OALCG,GAAAA,EAAAvO,OAAAA,IACJuO,EAAA,IAAAxpB,EAAAypB,eAAAJ,EAAApO,EA1yHE,IA0yHF,SAAAyO,GAAA,OAAAH,EAAAI,YAAAD,KACDjnB,KAAAqe,SAAKwI,GAAAA,GAGDE,EAAAI,cAAA3B,IAMX5E,SAAA,SAAAljB,GAzED,MA4EI0pB,cAAJ1pB,EAAI0pB,YAA4BhgB,KAAAA,YAC5BigB,YAaArnB,KAAAgC,KAAA+L,KAAA/N,KAAAgC,KAAA8L,IAl0HO,KAm0HHwZ,SAEJlN,QAtFRkH,kBAAmB,SAASziB,EAAQ2Z,EAAMwB,EAASyI,GAmGvD,GAAA,aAAAjK,GAAA,WAAA3Z,EAAAikB,aAjGY,OAAO9iB,KAAKylB,oBAsGpB,IAAKvD,EAAmBqF,KAAAA,kBAAxBvN,EAAAnb,EAAAnB,KAAA8a,GAGAgP,EAAA,IAAAxnB,KAAAkiB,QAAA,KAAA,KAAA,KAAAliB,KAAAkC,OAAAgE,oBAAAsS,GACA,OAAAnJ,KAAAO,IAAA5P,KAAA8a,cAAA0M,EAAAC,oBAAAhB,EAAAhE,KAqBAJ,UAAA,SAAAxjB,EAAA8iB,EAAAnJ,EAAAR,EAAAgC,EAAA6I,EAAA6E,GAxGI,IAAIhc,EAAQ1L,KACRqZ,EAASsI,EAAItI,OA0GrBgJ,EAAWrK,EAAA9W,IAAA,SACPsgB,EAAAxJ,EAAA9W,IAAA,OACAwc,EAAWoF,KAAAA,YAGJ,GAAA,WAAAjkB,EAAAikB,aACH,OAAA9iB,KAAIgC,sBAAJnD,EAAA8iB,EAAAnJ,EAAAR,EAAAgC,GAKH,IA/BgE2N,KAvE7DC,EAAQ5nB,KAAKqe,SAASrE,GAAS4N,MAyGvCzN,GAAA,EAvGI,GAAKtb,EAAOnB,KAER,IAAK,IADDkK,EAAU5H,KAAKoH,gBAAgBQ,QAC1B7G,EAAI,EAAGyR,EAAM3T,EAAOnB,KAAK6C,OAAQQ,EAAIyR,EAAKzR,IAAK,CA0G5D,IAGK,IAFDiI,EAFRsY,EAAmBziB,EAAAnB,KAAAqD,GACXlC,GAAA,EAGCknB,EAAA,EAAA8B,EAAAjgB,EAAArH,OAAAwlB,EAAA8B,EAAA9B,IAGD,IAFA/c,EAAApB,EAAAme,IACA+B,aAAAtZ,IACAxF,EAAA+e,KAAAvZ,GAAA,CACAqY,GAAA,EACImB,MAGAA,IAEIA,EAAAA,KAAAA,GAGAA,EAAAA,KAAcA,IACjB7N,GAAA,IAnGT,IAAIiN,EAAuBpnB,KAAKoH,gBAAgB6gB,aAAe,IAAInP,EAAa9Y,KAAKoH,gBAAgB6gB,cAAgB,KA2GzHZ,EAAArnB,KAAAoH,gBAAA8gB,cAAA,IAAApP,EAAA9Y,KAAAoH,gBAAA8gB,eAAA,KAzGQhG,EAAU,IAAKliB,KAAKkiB,QAASyF,EAAUQ,EAAU3G,EAAWxhB,KAAKkC,OAAOgE,oBAAqBsS,EAAM4O,EAAqBC,EA4GlHxE,EAEV,SAAAuF,GAAA,OAAA1c,EAAA1J,KAAA+iB,eAAAqD,KACAzO,EAAA,KApGA,GAsGI0O,EAAAA,UAAAA,KAAUpiB,OAAU6O,UAAQwT,eAC/B3G,EAAAkD,KAAAlD,EAAAtI,OAAA8K,QAAAC,aACDzC,EAAA0C,UAAOgE,QAxGHxpB,EAAOnB,KAAM,CAEb,IAAI4pB,EAAepF,EAAQU,KAAKjB,EAAKtI,EAAO/J,MAAO+J,EAAOrJ,OAAQgK,EAAS4N,GAC3EjO,EAAiB2N,EAAa3N,eAC9BS,oBAAsBkN,EAAalN,oBA2G3CrF,EAAkBwT,aAAA7K,EAIV,OAAAgK,OAAA,EADJ,IAAAjO,EAAA/N,EAAAsM,EAAAgC,EAAAX,EAAAxa,EAAAnB,KAAA8a,EAvGgC3Z,EAAOya,QAASa,EAAaR,EA2G7DS,oBAAAyI,MAlGR,IAAIrG,EAAe,SAASxa,EAAM9B,EAAW+B,GA2G7Bsb,EAAAhY,KAAAvF,KAAAgC,EAAA9B,EAAA+B,GACAumB,KAAAA,QAAAA,EAAAA,eACAxoB,KAAAylB,oBAAKvd,GAtGjBlI,KAAK0d,YAAc,IA+GH1e,EAAAwd,EAAAhZ,UAAIilB,EAAAA,UAAmBC,EAAavF,WA3GpDwB,eAAgB,OAAQ,WAAY,QAAS,SAAU,QA+G/BhiB,cAAAxF,EAAAsnB,MAAA1iB,EAAOyB,UAAYkB,gBAD0DL,IAAA,QAAAG,MADrF,kBAAA/F,KAAA,UAKH4F,IAAA,mBAAAG,MAAA,mBAAA/F,KAAA,OAAAgG,eAAA,IACJJ,IAAA,cAAAG,MAAA,iCAAA/F,KAAA,OAAAgG,eAAA,IA7GHJ,IAAK,iBAAkBG,MAAO,uBAAwB/F,KAAM,QAASgG,cAAe,KA+GlFJ,IAAA,OAAA5F,KAAA,SAAAgG,cAAA,OAAAE,QAAA,IA7GFN,IAAK,SAAU5F,KAAM,MAAOgG,cAAe,EAAGE,QAAQ,KAiHpDrG,gBAAE,WACE0B,KAAAmF,SAAAnF,KAAAkC,OAAasmB,UADqB,SAElCxoB,KAAA6E,cAAAuD,kBAAeogB,KAOnBnG,UAAA,SAAKpf,EAAAA,EAAc9B,EAAK6W,EAAAgC,GAE/B,GAAA,WAAAnb,EAAAikB,aArIL,OAAA9iB,KAAAgiB,sBAAAnjB,EAAA8iB,EAAA,YAAA3J,EAAAgC,GA0BY,IAAIhY,EAAOhC,KAAKgC,KAmHxB,OAlHsB,IAAKhC,KAAKkiB,QAASrjB,EAAOnB,KAAMsa,EAAO9W,IAAI,SAAU8W,EAAO9W,IAAI,OAAQlB,KAAKkC,OAAOgE,oBAAqBsS,EAgHnGtY,SAAhBkoB,GAA2BnmB,OAAUD,EAAA+iB,eAAAqD,KACjDrf,KAAA4Y,EAAAA,EAAwB3f,OAAM9B,MAA9ByhB,EAAyC1f,OAAzC+N,OAAAgK,GACKkI,IAAU1kB,EAAAA,KAASmrB,EAAAA,EAAxBhH,EAAAtI,OAAAxa,EAAAnB,OAoBI4jB,kBAAKnc,SAAcjD,EAAOwC,EAAAA,EAA1B+d,GACA,GAAoBra,WAApBvJ,EAAKgG,aACR,OAAA7E,KAAAylB,oBAOD,IAAAuC,EAAkBtf,KAAAA,QADAkgB,aAAA,gBAAA5oB,KAAA8U,QAAA8T,aAAA,gBAAAroB,OAAA,EA7GV,OA+GS4G,IAAjB6gB,GAFkB,IAED7gB,EAFCzJ,KAAA6C,SAMlBynB,EANkB,QAIlBA,EAAgBjf,EAJErL,KAAA,GAAA,GAAAmrB,MAAA,OAAA,EASNrM,EAAAA,OAAAA,GAvHgB,IAAKxc,KAAKkiB,QAAS,KAAM,KAAM,KAAMliB,KAAKkC,OAAOgE,oBAAqBsS,GACrEiP,oBAAoBO,IAmI7C5K,aAAA,WACA,IAAAiL,GACGS,EAAgBC,UAASrjB,aAD5BH,KAAAvF,OAOH,OAHO8oB,KAAAA,QAAAA,aAAgBC,iBACnBV,EAAApiB,KAAAjG,KAAA8U,QAAAwT,SAEJD,GAODtf,iBAAcA,SAAAA,EAJXuG,EAAA0K,EAAAsF,GAKH8F,EAAAA,UAAAA,iBAAsBA,KALnBplB,KAAAuf,EAAAjQ,EAAA0K,EAAAsF,GAOH9C,IAAAA,EAAcA,EAAAA,OAPX+C,EAAA,SAAArR,GAQHxF,OAAAA,aAAgBA,IAzHRggB,EAAe1oB,KAAK8U,QAAQ8T,aAAa,gBAC7C,GAAgC,IAA5B9I,EAAiBvf,QAAgBP,KAAKkC,OAAOwC,UAAU,gBAAkBgkB,GAAgBA,EAAanoB,OAAS,EAAG,CAClH,IAAIioB,EAGJ,GAA8D,IAA1DxoB,KAAKiD,cAAc9B,KAAK,uBAAuBZ,SAI/CioB,EAAYxoB,KAAKkC,OAAOwC,UAAU,kBAAoB,EACtD1E,KAAKkI,UAAU9G,QACX9C,EAAE,UAAU+S,KAAK,WAAWzP,SAAS,0BAA0B8K,KAC3Dsc,YAAaR,EAAY,KACzBroB,KAAQH,KAAKkC,OAAOwC,UAAU,kBAAoB8jB,GAAa,EAAI,QAKvExoB,KAAKkC,OAAOwC,UAAU,qBAAqB,CAC3C,IAAI+jB,EAAmBC,EAAavF,KAAK,SAEzCnjB,KAAKkI,UAAU9G,QACX9C,EAAE,UAAUiU,KAAKkW,GAAkB7mB,SAAS,iCAAiC8K,KACzEvM,IAAOH,KAAKkC,OAAOwC,UAAU,qBAS7C8jB,GAA2B,WAAdxoB,KAAKwY,KAAoB,EAAI,IAAM,KAChDla,EAAE0B,KAAKkI,WAAW/G,KAAK,WAAWuL,KAC9Bsc,YAAaR,EACbS,cAAeT,IAGnBlqB,EAAE0B,KAAKkI,WAAW/G,KAAK,eAAeuL,IAAI,QAAS1M,KAAKkC,OAAOwC,UAAU,qBAIzE1E,KAAKiD,cAAc9B,KAAK,uBAAuBmD,YAQ3D,IAAIqf,EAAY,SAAU3hB,EAAM9B,EAAW+B,GACvC8G,EAAaxD,KAAKvF,KAAMgC,EAAM9B,EAAW+B,GACzCjC,KAAKkiB,QAAU1kB,EAASmrB,YACxB3oB,KAAKsF,gBAGTtG,EAAO2kB,EAAUngB,UAAWzB,EAASyB,UAAW+Z,EAAW/Z,UAAWuF,EAAavF,WAC/Eb,cAAexF,EAAEsnB,MAAO1iB,EAASyB,UAAUb,gBACrC0B,IAAK,cAAeG,MAAO,kBAAmB/F,KAAM,UACpD4F,IAAK,qBAAsBG,MAAO,2BAA4B/F,KAAM,QAASgG,cAAiB,YAC9FJ,IAAK,uBAAwBG,MAAO,+BAAgC/F,KAAM,QAASgG,cAAiB,YACpGJ,IAAK,cAAeG,MAAO,cAAe/F,KAAM,QAASgG,cAAe,UACxEJ,IAAK,kBAAmBG,MAAO,kBAAmB/F,KAAM,OAAQgG,eAAe,IAC/EJ,IAAK,mBAAoBG,MAAO,wBAAyB/F,KAAM,OAAQgG,eAAe,IACtFJ,IAAK,cAAeG,MAAO,sBAAuB/F,KAAM,OAAQgG,eAAe,IAC/EJ,IAAK,OAAQ5F,KAAM,SAAUgG,cAAe,OAAQE,QAAQ,IAC5DN,IAAK,YAAaG,MAAO,oBAAqB/F,KAAM,QAASgG,mBAAe6F,EAAWqb,KAAM,qCAC7FthB,IAAK,YAAaG,MAAO,oBAAqB/F,KAAM,QAASgG,mBAAe6F,EAAWqb,KAAM,qCAC7FthB,IAAK,SAAU5F,KAAM,MAAOgG,cAAe,EAAGE,QAAQ,KAG5D5B,gBAAiB,WACb/C,KAAKmF,SAASnF,KAAKkC,OAAOwC,UAAU,SACpC1E,KAAK6E,cAAeuD,kBAAkB,OAO9C,IAAI8gB,GACAxgB,eAAkBA,EAClBvB,cAAiBA,EACjBie,qBAAwBA,EACxBrc,aAAgBA,EAChBE,UAAaA,EACb0a,UAAaA,EACbnH,aAAgBA,EAEhB2M,SAAY3M,GAOZ1W,EAAuB,SAASijB,EAAU/mB,EAAM9B,GAChD,GAAI,SAAU6oB,EAEV,OAAOA,EAAS/T,KAAK9U,GAIrB,IACG4oB,EAAgBC,EAASrjB,SAK5B,OAHKojB,IACDA,EAAgBC,EAAShiB,YAEtB,IAAImiB,EAAiBJ,GAAgB9mB,EAAM9B,EAAW6oB,IAIrE,OACIlf,cAAeA,EACf1C,cAAeA,EACf8B,UAAWA,EACXF,aAAcA,EACdqc,qBAAsBA,EACtBzB,UAAWA,EACXnH,aAAcA,EACd9T,eAAgBA,EAChB5C,qBAAsBA","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["define([\n    \"libs/underscore\",\n    \"viz/visualization\",\n    \"viz/viz_views\",\n    \"viz/trackster/util\",\n    \"viz/trackster/slotting\",\n    \"viz/trackster/painters\",\n    \"viz/trackster/filters\",\n    \"mvc/dataset/data\",\n    \"mvc/tool/tools\",\n    \"utils/config\",\n    \"viz/bbi-data-manager\",\n    \"ui/editable-text\",\n], function(_, visualization, viz_views, util, slotting, painters, filters_mod, data, tools_mod, config_mod, bbi) {\n\n\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = function(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = function(element, handle_class, container_selector, element_js_obj) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element.bind( \"drag\", { handle: \".\" + handle_class, relative: true }, function ( e, d ) {\n        var element = $(this),\n            parent = $(this).parent(),\n            // Only sorting amongst tracks and groups.\n            children = parent.children('.track,.group'),\n            this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n            child,\n            container,\n            top,\n            bottom,\n            i;\n\n        //\n        // Enable three types of dragging: (a) out of container; (b) into container;\n        // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n        //\n\n        // Handle dragging out of container.\n        container = $(this).parents(container_selector);\n        if (container.length !== 0) {\n            top = container.position().top;\n            bottom = top + container.outerHeight();\n            var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n            if (d.offsetY < top) {\n                // Moving above container.\n                $(this).insertBefore(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable_before(this_obj, cur_container);\n                return;\n            }\n            else if (d.offsetY > bottom) {\n                // Moving below container.\n                $(this).insertAfter(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle dragging into container. Child is appended to container's content_div.\n        container = null;\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            top = child.position().top;\n            bottom = top + child.outerHeight();\n            // Dragging into container if child is a container and offset is inside container.\n            if ( child.is(container_selector) && this !== child.get(0) &&\n                 d.offsetY >= top && d.offsetY <= bottom ) {\n                // Append/prepend based on where offsetY is closest to and return.\n                if (d.offsetY - top < bottom - d.offsetY) {\n                    child.find(\".content-div\").prepend(this);\n                }\n                else {\n                    child.find(\".content-div\").append(this);\n                }\n                // Update containers. Object may not have container if it is being moved quickly.\n                if (this_obj.container) {\n                    this_obj.container.remove_drawable(this_obj);\n                }\n                html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle sibling movement, aka sorting.\n\n        // Determine new position\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            if ( d.offsetY < child.position().top &&\n                 // Cannot move tracks above reference track or intro div.\n                 !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\")) ) {\n                break;\n            }\n        }\n\n        // If not already in the right place, move. Need\n        // to handle the end specially since we don't have\n        // insert at index\n        if ( i === children.length ) {\n            if ( this !== children.get(i - 1) ) {\n                parent.append(this);\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n            }\n        }\n        else if ( this !== children.get(i) ) {\n            $(this).insertBefore( children.get(i) );\n            // Need to adjust insert position if moving down because move is changing\n            // indices of all list items.\n            html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, (d.deltaY > 0 ? i-1 : i) );\n        }\n    }).bind(\"dragstart\", function() {\n        $(this).addClass('dragging');\n    }).bind(\"dragend\", function() {\n        $(this).removeClass('dragging');\n    });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar\n    // Padding at the top of tracks for error messages\n    ERROR_PADDING = 20,\n    // Maximum number of rows un a slotted track\n    MAX_FEATURE_DEPTH = 100,\n    // Minimum width for window for squish to be used.\n    MIN_SQUISH_VIEW_WIDTH = 12000,\n    // Number of pixels per tile, not including left offset.\n    TILE_SIZE = 400,\n    DEFAULT_DATA_QUERY_WAIT = 5000,\n    // Maximum number of chromosomes that are selectable at any one time.\n    MAX_CHROMS_SELECTABLE = 100,\n    DATA_ERROR = \"Cannot display dataset due to an error. \",\n    DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n    DATA_NONE = \"No data for this chrom/contig.\",\n    DATA_PENDING = \"Preparing data. This can take a while for a large dataset. \" +\n                   \"If the visualization is saved and closed, preparation will continue in the background.\",\n    DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n    DATA_LOADING = \"Loading data...\",\n    DATA_OK = \"Ready for display\",\n    TILE_CACHE_SIZE = 10,\n    DATA_CACHE_SIZE = 20,\n\n    // Numerical/continuous data display modes.\n    CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: 'HEAD',\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) { Drawable.id_counter = 0; }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value('name')) {\n        this.config.set_value('name', obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on('change', this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            function() { icons_div.show(); }, function() { icons_div.hide(); }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if ( drawable.config.get_value('content_visible') ) {\n                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value('content_visible', false);\n            }\n            else {\n                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                drawable.config.set_value('content_visible', true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal('Configure Track');\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: 'name', label: 'Name', type: 'text', default_value: '' },\n        { key: 'content_visible', type: 'bool', default_value: true, hidden: true }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value('content_visible')) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value('name');\n        this.config.set_value('name', new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value('name', this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function () {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0),\n            tracks = [],\n            drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            }\n            else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\").addClass(\"content-div\").attr(\"id\", \"group_\" + this.id + \"_content_div\").appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after( $(\"<div style='clear: both'/>\") );\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if ('drawables' in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if ('filters' in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [\n        Drawable.prototype.action_icons_def[0],\n        Drawable.prototype.action_icons_def[1],\n        // Replace group with composite track.\n        {\n            name: \"composite_icon\",\n            title: \"Show composite track\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(group) {\n                $(\".tooltip\").remove();\n                group.show_composite_track();\n            }\n        },\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(group) {\n                // TODO: update Tooltip text.\n                if (group.filters_manager.visible()) {\n                    // Hiding filters.\n                    group.filters_manager.clear_filters();\n                    group._restore_filter_managers();\n                    // TODO: maintain current filter by restoring and setting saved manager's\n                    // settings to current/shared manager's settings.\n                    // TODO: need to restore filter managers when moving drawable outside group.\n                }\n                else {\n                    // Showing filters.\n                    group.setup_multitrack_filtering();\n                    group.request_draw({ clear_tile_cache: true });\n                }\n                group.filters_manager.toggle();\n            }\n        },\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    build_container_div: function() {\n        var container_div = $(\"<div/>\").addClass(\"group\").attr(\"id\", \"group_\" + this.id);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function () {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        }\n        else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        }\n        else { // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i, j, drawable,\n                same_type = true,\n                a_type = this.drawables[0].get_type(),\n                num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    can_composite = false;\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            }\n            else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {},\n                    filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                var\n                    filters,\n                    new_filter,\n                    min,\n                    max;\n                for (var filter_name in shared_filters) {\n                    filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        new_filter = new filters_mod.NumberFilter( {\n                                        name: filters[0].name,\n                                        index: filters[0].index\n                                        } );\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            }\n            else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                var drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value('name'),\n            drawables: this.drawables\n        });\n        var index = this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), { \"filters\": this.filters_manager.to_dict() });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function(options) {\n        _.each(this.drawables, function(d) {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = (obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true);\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager( this.container.get(0).ownerDocument );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values( [\n                { key: 'name', label: 'Name', type: 'text', default_value: '' },\n                { key: 'a_color', label: 'A Color', type: 'color', default_value: \"#FF0000\" },\n                { key: 'c_color', label: 'C Color', type: 'color', default_value: \"#00FF00\" },\n                { key: 'g_color', label: 'G Color', type: 'color', default_value: \"#0000FF\" },\n                { key: 't_color', label: 'T Color', type: 'color', default_value: \"#FF00FF\" },\n                { key: 'n_color', label: 'N Color', type: 'color', default_value: \"#AAAAAA\" }\n            ], { name: obj_dict.name });\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container,\n            view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\").addClass(\"top-container\").appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\").addClass(\"content\").appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\").addClass(\"bottom-container\").appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\").addClass(\"top-labeltrack\").appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\").addClass(\"viewport-container\").attr(\"id\", \"viewport-container\").appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\").addClass(\"intro\").appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\").text(\"Add Datasets to Visualization\").addClass(\"action-button\").appendTo(this.intro_div).click(function () {\n            visualization.select_datasets({ 'dbkey': view.dbkey }, function(tracks) {\n                _.each(tracks, function(track) {\n                    view.add_drawable( object_from_template(track, view, view) );\n                });\n            });\n        });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\").addClass(\"trackster-nav-container\").prependTo(this.top_container);\n        this.nav = $(\"<div/>\").addClass(\"trackster-nav\").appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\").addClass(\"overview\").appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\").addClass(\"overview-viewport\").appendTo(this.overview);\n        this.overview_close = $(\"<a/>\").attr(\"title\", \"Close overview\")\n                                       .addClass(\"icon-button overview-close tooltip\")\n                                       .hide()\n                                       .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\").addClass(\"overview-highlight\").hide().appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\").addClass(\"overview-boxback\").appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\").addClass(\"overview-box\").appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\").addClass(\"nav-controls\").appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\").attr({ \"name\": \"chrom\"}).addClass('chrom-nav').append(\"<option value=''>Loading</option>\").appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27 ) {\n                if ((e.keyCode || e.which) !== 27) { // Not escape key\n                    view.go_to( $(this).val() );\n                }\n                $(this).hide();\n                $(this).val('');\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\").addClass(\"nav-input\").hide().bind(\"keyup focusout\", submit_nav).appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\").addClass(\"location\").attr('title', 'Click to change location').tooltip( { placement: 'bottom' } ).appendTo(this.nav_controls);\n        this.location_span.click(function() {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [],\n                        feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), function(t) {\n                        return t.data_manager.search_features(request.term).success(function(dataset_features) {\n                            all_features = all_features.concat(dataset_features);\n                        });\n                    });\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(function() {\n                        response($.map(all_features, function(feature) {\n                            return {\n                                label: feature[0],\n                                value: feature[1]\n                            };\n                        }));\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\").attr(\"type\", \"hidden\").val(this.vis_id).appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\").attr(\"id\", \"zoom-out\").attr(\"title\", \"Zoom out\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_out(); }).appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\").attr(\"id\", \"zoom-in\").attr(\"title\", \"Zoom in\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_in(); }).appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({low: 0});\n        this.chrom_select.bind(\"change\", function() {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function( e ) {\n            $(this).find(\"input\").trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function( e ) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box.bind(\"dragstart\", function( e, d ) {\n            this.current_x = d.offsetX;\n        }).bind(\"drag\", function( e, d ) {\n            var delta = d.offsetX - this.current_x;\n            this.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low) );\n            view.move_delta(-delta_chrom);\n        });\n\n        this.overview_close.click(function() {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container.bind( \"draginit\", function( e, d ) {\n            // Disable interaction if started in scrollbar (for webkit)\n            if ( e.clientX > view.viewport_container.width() - 16 ) {\n                return false;\n            }\n        }).bind( \"dragstart\", function( e, d ) {\n            d.original_low = view.low;\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n        }).bind( \"drag\", function( e, d ) {\n            var container = $(this);\n            var delta = d.offsetX - d.current_x;\n            var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n            container.scrollTop(new_scroll);\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n            view.move_delta(delta_chrom);\n        });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack.bind( \"dragstart\", function( e, d ) {\n            return $(\"<div/>\").addClass('zoom-area').css(\n                \"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1\n            ).appendTo( $(this) );\n        }).bind( \"drag\", function( e, d ) {\n            $( d.proxy ).css({ left: Math.min( e.pageX, d.startX ) - view.container.offset().left, width: Math.abs( e.pageX - d.startX ) });\n            var min = Math.min(e.pageX, d.startX ) - view.container.offset().left,\n                max = Math.max(e.pageX, d.startX ) - view.container.offset().left,\n                span = (view.high - view.low),\n                width = view.viewport_container.width();\n            view.update_location( Math.round(min / width * span) + view.low,\n                                  Math.round(max / width * span) + view.low );\n        }).bind( \"dragend\", function( e, d ) {\n            var min = Math.min(e.pageX, d.startX),\n                max = Math.max(e.pageX, d.startX),\n                span = (view.high - view.low),\n                width = view.viewport_container.width(),\n                old_low = view.low;\n            view.low = Math.round(min / width * span) + old_low;\n            view.high = Math.round(max / width * span) + old_low;\n            $(d.proxy).remove();\n            view.request_redraw();\n        });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track( new LabelTrack( this, { content_div: this.top_labeltrack } ) );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(function () {\n                view.resize_window();\n            }, 500 );\n        });\n        $(document).bind(\"redraw\", function() { view.redraw(); });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(base.toLowerCase() + '_color') ||\n               this.config.get_value('n_color');\n    }\n\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend( TracksterView.prototype, DrawableCollection.prototype, {\n\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(function () {\n                self.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n            }, 500 );\n        }\n        else {\n            view.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text( util.commatize(low) + ' - ' + util.commatize(high) );\n        this.nav_input.val( this.chrom + ':' + util.commatize(low) + '-' + util.commatize(high) );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var\n            view = this,\n            chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function (result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n                \n                view.chrom_select.html('');\n                view.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option  = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append($('<option value=\"previous\">Previous ' + MAX_CHROMS_SELECTABLE + '</option>'));\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append($('<option value=\"next\">Next ' + MAX_CHROMS_SELECTABLE + '</option>'));\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({low: this.chrom_start_index - MAX_CHROMS_SELECTABLE});\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({low: this.chrom_start_index + MAX_CHROMS_SELECTABLE});\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, function(v, i) {\n            return v.chrom === chrom;\n        })[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({'chrom': chrom}, function() { view.change_chrom(chrom, low, high); });\n            return;\n        }\n        else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len-1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            }\n            else {\n                // Low and/or high is defined.\n                view.low = (low !== undefined ? Math.max(low, 0) : 0);\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                }\n                else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, '');\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, ' ');\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/),\n            chrom = chrom_pos[0],\n            new_low = (chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined),\n            new_high = (chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined);\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(function() {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on('change', function() {\n            self.changed();\n        });\n    },\n\n    add_label_track: function (label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this,\n            // Either redrawing a single drawable or all view's drawables.\n            track_list = (drawable ? [drawable] : view.drawables);\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, function(track) {\n            var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n                return to[0] === track;\n            });\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            }\n            else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(function() { view._redraw(); });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low,\n            high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = ( this.low / (this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var width_px = ( (this.high - this.low)/(this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var min_width_px = 13;\n\n        this.overview_box.css({ left: left_px, width: Math.max(min_width_px, width_px) }).show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px)/2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({ left: left_px, width: width_px });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, function(track_options) {\n            var track = track_options[0],\n                options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, function(label_track) {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function (point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span / this.zoom_factor) / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function () {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span * this.zoom_factor) / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height( this.container.height() - this.top_container.height() - this.bottom_container.height() );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var\n            overview_drawable = drawable.copy( { content_div: this.overview_viewport } ),\n            view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = function() {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(view.overview_drawable.content_div.height() + view.overview_box.outerHeight());\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set('hidden', hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs( [ 'data', 'hidden_data', 'conditional' ] );\n    },\n\n    state_dict: function(options) {\n        return _.extend( this.get_inputs_dict(), { hidden: !this.is_visible() } );\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\n var ToolParameterView = Backbone.View.extend({\n\n    events: {\n        'change :input': 'update_value'\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\"),\n            param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\").addClass(\"param-label\").text(param.get('label')).appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\").addClass(\"param-input\").html(param.get('html')).appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get('value'));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n });\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n\n    initialize: function(options) {\n        this.model.on('change:hidden', this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this,\n            tool = this.model,\n            parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div.bind(\"drag\", function(e) {\n            e.stopPropagation();\n        }).click(function(e) {\n            e.stopPropagation();\n        }).bind(\"dblclick\", function(e) {\n            e.stopPropagation();\n        }).keydown(function(e) { e.stopPropagation(); });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\").appendTo(parent_div).text(tool.get('name'));\n        tool.get('inputs').each(function(param) {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() { $(this).select(); });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\").addClass(\"param-row\").appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on visible region\").appendTo(run_tool_row);\n        run_on_region_button.click( function() {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click( function() {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get('track').dataset.id,\n                action: 'rerun',\n                tool_id: tool.id\n            },\n            null,\n            // Success callback.\n            function(track_data) {\n                Galaxy.modal.show({title: tool.get('name') + \" is Running\", body: tool.get('name') + \" is running on the complete dataset. Tool outputs are in dataset's history.\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get('track'),\n            tool = this.model,\n            region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: track.view.low,\n                end: track.view.high\n            }),\n            url_params =\n            {\n                target_dataset_id: track.dataset.id,\n                action: 'rerun',\n                tool_id: tool.id,\n                regions: [\n                    region.toJSON()\n                ]\n            },\n            current_track = track,\n            // Set name of track to include tool name, parameters, and region used.\n            track_name = tool.get('name') +\n                         current_track.tool_region_and_parameters_str(region),\n            container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, { name: track.config.get_value('name') });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(current_track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        }\n        else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track,\n                // Success callback.\n                function(track_data) {\n                    new_track.set_dataset(new data.Dataset(track_data));\n                    new_track.tiles_div.text(\"Running job.\");\n                    new_track.init();\n                }\n        );\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: 'application/json',\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(function(response) {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            }\n            else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            }\n            else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (this.filter.high === Number.MAX_VALUE || this.filter.low === -Number.MAX_VALUE || this.filter.low === this.filter.high) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return ( ( parseFloat(feature_data[this.filter.index]) - this.filter.low ) / ( this.filter.high - this.filter.low ) );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get('start');\n    this.high = region.get('end');\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = function() {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = function() {};\n\nvar FeatureTrackTile = function(track, region, w_scale, canvas, data, mode, message, all_slotted,\n                                feature_mapper, incomplete_features, seq_data) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = function() {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset = (obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset) );\n    }\n    this.dataset_check_type = 'converted_datasets_state';\n    this.data_url_extra_params = {};\n    this.data_query_wait = ('data_query_wait' in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT);\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager = ('data_manager' in obj_dict ?\n                         obj_dict.data_manager :\n                         new visualization.GenomeDataManager({\n                             dataset: this.dataset,\n                             // HACK: simulate 'genome' attributes from view for now.\n                             // View should eventually use Genome object.\n                             genome: new visualization.Genome({\n                                key: view.dbkey,\n                                chroms_info: {\n                                    chrom_info: view.chrom_data\n                                }\n                             }),\n                             data_mode_compatible: this.data_and_mode_compatible,\n                             can_subset: this.can_subset\n                         }));\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value('height');\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if ( !(\"resize\" in obj_dict) || obj_dict.resize ) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                }\n                else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(track.config.get_value('name') + track.tool_region_and_parameters_str());\n                }\n                else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html =\n                    '<strong>Tool</strong>:' + track.tool.get(\"name\") + '<br/>' +\n                    '<strong>Dataset</strong>:' + track.config.get_value(\"name\") + '<br/>' +\n                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                    '<option value=\"cur\">current viewing area</option>' +\n                    '<option value=\"bookmarks\">bookmarks</option>' +\n                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n                    '</select>';\n                var cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n                    ok_fn = function() {\n                        var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                            regions,\n                            view_region = new visualization.GenomeRegion({\n                                chrom: view.chrom,\n                                start: view.low,\n                                end: view.high\n                            }),\n                            bookmarked_regions = _.map($(\".bookmark\"), function(elt) {\n                                return new visualization.GenomeRegion({from_str: $(elt).children(\".position\").text()});\n                            });\n\n                        // Get regions for visualization.\n                        if (regions_to_use === 'cur') {\n                            // Use only current region.\n                            regions = [ view_region ];\n                        }\n                        else if (regions_to_use === 'bookmarks') {\n                            // Use only bookmarks.\n                            regions = bookmarked_regions;\n                        }\n                        else {\n                            // Use both current region and bookmarks.\n                            regions = [ view_region ].concat(bookmarked_regions);\n                        }\n\n                        Galaxy.modal.hide();\n\n                        // Go to visualization.\n                        window.location.href =\n                            Galaxy.root + \"visualization/sweepster\" + \"?\" +\n                            $.param({\n                                dataset_id: track.dataset.id,\n                                hda_ldda: track.dataset.get('hda_ldda'),\n                                regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                            });\n                    },\n                    check_enter_esc = function(e) {\n                        if ((e.keyCode || e.which) === 27) { // Escape key\n                            cancel_fn();\n                        } else if ((e.keyCode || e.which) === 13) { // Enter key\n                            ok_fn();\n                        }\n                    };\n\n                // show dialog\n                Galaxy.modal.show({title: \"Visualize tool parameter space and output from different parameter settings?\", body: html, buttons : {'No' : cancel_fn, 'Yes' : ok_fn } });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function () {\n        return $(\"<div/>\").addClass('track').attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set('dataset', dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function () {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $( \"<div class='track-resize'>\" );\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover( function() {\n            if ( track.config.get_value('content_visible') ) {\n                in_handle = true;\n                drag_control.show();\n            }\n        }, function() {\n            in_handle = false;\n            if ( ! in_drag ) { drag_control.hide(); }\n        });\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control.hide().bind( \"dragstart\", function( e, d ) {\n            in_drag = true;\n            d.original_height = $(track.content_div).height();\n        }).bind( \"drag\", function( e, d ) {\n            var new_height = Math.min( Math.max( d.original_height + d.deltaY, track.min_height_px ), track.max_height_px );\n            $(track.tiles_div).css( 'height', new_height );\n            track.visible_height_px = (track.max_height_px === new_height ? 0 : new_height);\n            track.on_resize();\n        }).bind( \"dragend\", function( e, d ) {\n            track.tile_cache.clear();\n            in_drag = false;\n            if (!in_handle) { drag_control.hide(); }\n            track.config.set_value('height', track.visible_height_px);\n            track.changed();\n        }).appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function () {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        }\n        else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        }\n        else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        }\n        else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        }\n        else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        }\n        else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        }\n        else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $('<span/>').addClass('message').html(msg_html).appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred(),\n            params = {\n                hda_ldda: track.dataset.get('hda_ldda'),\n                data_type: this.dataset_check_type,\n                chrom: track.view.chrom,\n                retry: retry\n            };\n        $.getJSON(this.dataset.url(), params, function (result) {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"View error\").click(function() {\n                            Galaxy.modal.show({title: \"Trackster Error\", body: \"<pre>\" + result.message + \"</pre>\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n                        })\n                    );\n                    msg_elt.append( $('<span/>').text(' ') );\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"Try again\").click(function() {\n                            track.init(true);\n                        })\n                    );\n                }\n            }\n            else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            }\n            else if (result === \"no data\" || (result.data !== undefined && (result.data === null || result.data.length === 0))) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            }\n            else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(function() { track.init(); }, track.data_query_wait);\n            }\n            else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css( \"height\", track.visible_height_px + \"px\" );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(function() {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                }\n                else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n\n            // Tracks may not have stat data either because there is no data or data is not yet ready.\n            if (data && data.min !== undefined && data.max !== undefined) {\n                // Compute default minimum and maximum values\n                var min_value = data.min,\n                    max_value = data.max;\n                // If mean and sd are present, use them to compute a ~95% window\n                // but only if it would shrink the range on one side\n                min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                // Update config, prefs\n                track.config.set_default_value('min_value', min_value);\n                track.config.set_default_value('max_value', max_value);\n                track.config.set_value('min_value', min_value);\n                track.config.set_value('max_value', max_value);\n            }\n        });\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(this, ('filters' in obj_dict ? obj_dict.filters : null));\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set('filters_manager', this.filters_manager);\n    this.filters_available = false;\n    this.tool = (obj_dict.tool ? new TracksterTool( _.extend( obj_dict.tool, {\n        'track': this,\n        'tool_state': obj_dict.tool_state\n    } ) )\n    : null);\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(this.content_div);\n    if (!this.config.get_value('content_visible')) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\").addClass(\"overlay\").appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n\n    action_icons_def: Track.prototype.action_icons_def.concat( [\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[ track.view.resolution_px_b ].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ] ),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get('hda_ldda')\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: (this.tool ? this.tool.state_dict() : {})\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON( track.dataset.url(),\n            { data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n              high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') },\n            function(result) {\n                var data = result.data;\n                if ( isNaN(parseFloat(track.config.get_value('min_value'))) ||\n                     isNaN(parseFloat(track.config.get_value('max_value'))) ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min,\n                        max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                    max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                    // Update the prefs\n                    track.config.set_value('min_value', min_value);\n                    track.config.set_value('max_value', max_value);\n                }\n            });\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value('mode', new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === 'Auto') { this.data_manager.clear(); }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + track.mode + \")\");\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return w_scale + '_' + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if ( !this.can_draw() ) { return; }\n\n        var clear_after = options && options.clear_after,\n            low = this.view.low,\n            high = this.view.high,\n            range = high - low,\n            width = this.view.container.width(),\n            w_scale = this.view.resolution_px_b,\n            resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var\n            // Tile width in bases.\n            tile_width = Math.floor(TILE_SIZE * resolution),\n            // Index of first tile that overlaps visible region.\n            tile_index = Math.floor(low / tile_width),\n            tile_region,\n            tile_promise,\n            tile_promises = [],\n            tiles = [];\n        // Draw tiles.\n        while ( (tile_index * tile_width) < high ) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min( (tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(function(tile) {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) { this.tiles_div.children(\".remove\").removeClass(\"remove\").remove(); }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(function() {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, function(t) {\n                return t !== null;\n            });\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this,\n            css_class = (type === 'max' ? 'top' : 'bottom'),\n            text = (type === 'max' ? 'max' : 'min'),\n            pref_name = (type === 'max' ? 'max_value' : 'min_value'),\n            label = this.container_div.find(\".yaxislabel.\" + css_class),\n            value = round( track.config.get_value(pref_name), 1 );\n\n        // Default action for on_change is to redraw track.\n        on_change = on_change || function() {\n            track.request_draw({ clear_tile_cache: true });\n        };\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        }\n        else {\n            // Add label.\n            label = $(\"<div/>\").text(value).make_text_editable({\n                num_cols: 12,\n                on_finish: function(new_val) {\n                    $(\".tooltip\").remove();\n                    track.config.set_value(pref_name, round( new_val, 1 ) );\n                    on_change();\n                },\n                help_text: \"Set \" + text + \" value\"\n            }).addClass('yaxislabel ' + css_class).css(\"color\", this.config.get_value('label_color'));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, function(tile) {\n            return (tile instanceof LineTrackTile);\n        });\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, function(tile) {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, { force: true, mode: 'Coverage' });\n                }\n            });\n\n            track._add_yaxis_label('max');\n        }\n        else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find('.yaxislabel').remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, function(tile) {\n                return tile.has_icons;\n            });\n\n            if (icons_present) {\n                _.each(tiles, function(tile) {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function( display_mode ) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [ this ];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) { options = {}; }\n\n        var force = options.force,\n            mode = options.mode || this.mode,\n            resolution = 1 / w_scale,\n\n            // Useful vars.\n            track = this,\n            drawables = this._get_drawables(),\n            key = this._gen_tile_cache_key(w_scale, region),\n            is_tile = function(o) { return (o && 'track' in o); };\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = (force ? undefined : track.tile_cache.get_elt(key));\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) { return null; }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = function() {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = (_.find(CONTINUOUS_DATA_MODES, function(m) { return m === mode; }) ? \"Coverage\" : mode);\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, function(d) {\n                // Get the track data/promise.\n                return d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params);\n            });\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(view.reference_track.data_manager.get_data(region, mode, resolution, view.reference_track.data_url_extra_params));\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then( function() {\n            var tile_data = get_tile_data(),\n                tracks_data = tile_data,\n                seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, function(d) { return util.is_deferred(d); })) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(track.draw_helper(region, w_scale, options)).then(function(tile) {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [],\n                drawing_heights = [];\n\n            _.each(drawables, function(d, i) {\n                var mode = d.mode,\n                    data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas(),\n                tile_low = region.get('start'),\n                tile_high = region.get('end'),\n                all_data_index = 0,\n                width = Math.ceil( (tile_high - tile_low) * w_scale ) + track.left_offset,\n                height = _.max(drawing_heights),\n                tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = (options.height || height);\n            var ctx = canvas.getContext('2d');\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, function(d, i) {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if ( [undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1 ) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if ( [undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1 ) {\n            this.config.set_value(\"max_value\", _.max( _.map(result.data, function(d) { return d[1]; }) ) || 0);\n        }\n\n        var canvas = ctx.canvas,\n            painter = new painters.LinePainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this,\n            tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round( ( tile.low - (this.is_overview? this.view.max_low : this.view.low) ) * w_scale );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css('left', left);\n\n        if ( tile_element.hasClass(\"remove\") ) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        }\n        else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css('height', 'auto');\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element.parent().children().css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this,\n            region_str = (region !== undefined ? region.toString() : \"all\"),\n            param_str = _.values( track.tool.get_inputs_dict()).join(', ');\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        }\n        // Histogram mode requires bigwig data.\n        else if (mode === \"Coverage\") {\n            return data.dataset_type === \"bigwig\";\n        }\n        // All other modes--Dense, Squish, Pack--require data + details.\n        else if (data.dataset_type === \"bigwig\" ||\n                 data.extra_info === \"no_detail\") {\n            return false;\n        }\n        else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\")  {\n            return false;\n        }\n        // Subset only if data is single-bp resolution.\n        else if (entry.dataset_type === 'bigwig') {\n            return (entry.data[1][0] - entry.data[0][0] === 1);\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set('data_type', 'raw_data');\n        this.data_query_wait = 1000;\n        this.dataset_check_type = 'state';\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function (view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass( \"label-track\" );\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view,\n            range = view.high - view.low,\n            tickDistance = Math.floor( Math.pow( 10, Math.floor( Math.log( range ) / Math.log( 10 ) ) ) ),\n            position = Math.floor( view.low / tickDistance ) * tickDistance,\n            width = this.view.container.width(),\n            new_div = $(\"<div/>\").addClass('label-container');\n        while ( position < view.high ) {\n            var screenPosition = Math.floor( ( position - view.low ) / range * width );\n            new_div.append( $(\"<div/>\").addClass('pos-label').text(util.commatize( position )).css( {\n                left: screenPosition\n            }));\n            position += tickDistance;\n        }\n        this.content_div.children( \":first\" ).remove();\n        this.content_div.append( new_div );\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if ('drawables' in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, function(d) {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: 'Auto', hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    action_icons_def:\n    [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, function(d) {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(function() {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n                name: this.config.get_value('name')\n            }),\n            track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, function(d) { return d.config.get_value('min_value'); })),\n            max = _.max(_.map(this.drawables, function(d) { return d.config.get_value('max_value'); }));\n\n        this.config.set_value('min_value', min);\n        this.config.set_value('max_value', max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min);\n            d.config.set_value('max_value', max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this,\n            min_value = this.config.get_value('min_value'),\n            max_value = this.config.get_value('max_value');\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min_value);\n            d.config.set_value('max_value', max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1, i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, { force: true, height: max_height } );\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this,\n            t = function() { track.update_all_min_max(); };\n\n        // Add min, max labels.\n        this._add_yaxis_label('min', t);\n        this._add_yaxis_label('max', t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function (view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = {reference: true};\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'height', type: 'int', default_value: 13, hidden: true }\n    ] ),\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(':visible'),\n            new_visible,\n            tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        }\n        else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) { return true; },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region),\n            seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function (view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(supportsByteRanges(Galaxy.root + 'datasets/' + this.dataset.id + '/display'))\n     .then(function(supportsByteRanges) {\n         if (supportsByteRanges) {\n             self.data_manager = new bbi.BBIDataManager({\n                 dataset: self.dataset\n             });\n         }\n\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Color', type: 'color' },\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: 'Auto', hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return (entry.data[1][0] - entry.data[0][0] === 1);\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label('max');\n        this._add_yaxis_label('min');\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function (view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n        { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n        { key: 'min_value', label: 'Min Value', type: 'int', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'int', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: 'Auto', hidden: true },\n        { key: 'height', type: 'int', default_value: 500, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n        });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas,\n            painter = new painters.DiagonalHeatmapPainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass( \"feature-track\" );\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Block color', type: 'color' },\n        { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true,\n          help: 'Show the number of items in each bin when drawing summary histogram' },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'connector_style', label: 'Connector style', type: 'select', default_value: 'fishbones',\n            options: [ { label: 'Line with arrows', value: 'fishbone' }, { label: 'Arcs', value: 'arcs' } ] },\n        { key: 'mode', type: 'string', default_value: 'Auto', hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if ( this.config.get_value('connector_style') === 'arcs' ) {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var track = this,\n            i,\n            line_track_tiles = _.filter(tiles, function(t) {\n                return (t instanceof LineTrackTile);\n            });\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, 'incomplete_features'), function(inc_features) {\n                _.each(inc_features, function(feature) {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, function(tile) {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features =_.omit(all_incomplete_features,\n                                                     _.map(tile.incomplete_features, function(f) { return f[0]; }));\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = { data: _.values( tile_incomplete_features ) },\n                        new_canvas = self.view.canvas_manager.new_canvas(),\n                        new_canvas_ctx = new_canvas.getContext('2d');\n                    new_canvas.height = Math.max(tile.canvas.height,\n                                                 self.get_canvas_height(features, tile.mode, tile.w_scale, 100));\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(features, new_canvas_ctx, tile.mode,\n                                                  tile.region, tile.w_scale, tile.seq_data);\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters,\n                f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false,\n                example_feature,\n                filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if ( filter.applies_to(example_feature) &&\n                             filter.min !== filter.max ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        }\n        else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: Auto/\" + mode + \")\");\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context,\n            slotter = this.slotters[level];\n        if (!slotter || (slotter.mode !== mode)) {\n            slotter = new (slotting.FeatureSlotter)( level, mode, MAX_FEATURE_DEPTH, function ( x ) { return dummy_context.measureText( x ); } );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features( features );\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        }\n        else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if ( this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH ) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width) );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this,\n            canvas = ctx.canvas,\n            tile_low = region.get('start'),\n            tile_high = region.get('end'),\n            left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var\n            filtered = [],\n            slots = this.slotters[w_scale].slots,\n            all_slotted = true;\n        if ( result.data ) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if ( !(feature[0] in slots) ) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = (this.filters_manager.alpha_filter ? new FilterScaler(this.filters_manager.alpha_filter) : null),\n            filter_height_scaler = (this.filters_manager.height_filter ? new FilterScaler(this.filters_manager.height_filter) : null),\n            painter = new (this.painter)(filtered, tile_low, tile_high, this.config.to_key_value_dict(), mode, filter_alpha_scaler, filter_height_scaler,\n                                         // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                                         ref_seq,\n                                         // Only the ReadPainer will use this function\n                                         function(b) { return track.view.get_base_color(b); });\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value('block_color');\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(track, region, w_scale, canvas, result.data, mode,\n                                        result.message, all_slotted, feature_mapper,\n                                        incomplete_features, ref_seq);\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Histogram color', type: 'color' },\n        { key: 'show_sample_data', label: 'Show sample data', type: 'bool', default_value: true },\n        { key: 'show_labels', label: 'Show summary and sample labels', type: 'bool', default_value: true },\n        { key: 'summary_height', label: 'Locus summary height', type: 'float', default_value: 20 },\n        { key: 'mode', type: 'string', default_value: 'Auto', hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        }\n        else { // result.dataset_type === 'variant'\n            var view = this.view,\n                painter = new (this.painter)(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode,\n                                             function(b) { return view.get_base_color(b); });\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = ( this.dataset.get_metadata('sample_names') ? this.dataset.get_metadata('sample_names').length : 0);\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if ( num_samples === null ) {\n                    num_samples = 1;\n                }\n                else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [ Track.prototype.predraw_init.call(this) ];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata('sample_names')) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, function(t) {\n            return (t instanceof LineTrackTile);\n        });\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata('sample_names');\n        if (line_track_tiles.length === 0 && this.config.get_value('show_labels') && sample_names && sample_names.length > 1) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find('.yaxislabel.variant').length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value('summary_height') / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\").text('Summary').addClass('yaxislabel variant top').css({\n                        'font-size': font_size + 'px',\n                        'top': (this.config.get_value('summary_height') - font_size) / 2 + 'px'\n                    })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value('show_sample_data')) {\n                    var samples_div_html = sample_names.join('<br/>');\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\").html(samples_div_html).addClass('yaxislabel variant top sample').css({\n                            'top': this.config.get_value('summary_height')\n                        })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === 'Squish' ? 5 : 10) + 'px';\n            $(this.tiles_div).find('.sample').css({\n                'font-size': font_size,\n                'line-height': font_size\n            });\n            // Color labels to preference color.\n            $(this.tiles_div).find('.yaxislabel').css('color', this.config.get_value('label_color'));\n        }\n        else {\n            // Remove all labels.\n            this.container_div.find('.yaxislabel.variant').remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function (view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Histogram color', type: 'color' },\n        { key: 'detail_block_color', label: 'Sense strand block color', type: 'color', 'default_value': '#AAAAAA' },\n        { key: 'reverse_strand_color', label: 'Antisense strand block color', type: 'color', 'default_value': '#DDDDDD' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n        { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n        { key: 'mode', type: 'string', default_value: 'Auto', hidden: true },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: undefined, help: 'clear value to set automatically' },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    \"CompositeTrack\": CompositeTrack,\n    \"DrawableGroup\": DrawableGroup,\n    \"DiagonalHeatmapTrack\": DiagonalHeatmapTrack,\n    \"FeatureTrack\": FeatureTrack,\n    \"LineTrack\": LineTrack,\n    \"ReadTrack\": ReadTrack,\n    \"VariantTrack\": VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    \"VcfTrack\": VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = function(template, view, container) {\n    if ('copy' in template) {\n        // Template is an object.\n        return template.copy(container);\n    }\n    else {\n        // Template is a dictionary.\n        var\n           drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[ drawable_type ](view, container, template);\n    }\n};\n\nreturn {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n\n});\n"]}