{"version":3,"sources":["viz/trackster/filters.js"],"names":["define","_","extend","Filter","obj_dict","this","manager","name","index","tool_id","tool_exp_name","to_dict","create_action_icon","title","css_class","on_click_fn","$","attr","addClass","tooltip","click","NumberFilter","call","high","low","min","Number","container","MAX_VALUE","max","slider","slider_label","filter","parent_div","transparency_icon","track","values_span","force","clear_after","text","appendTo","display_controls_div","height_icon","values_span_container","height_filter","append","slider_div","step","get_slider_step","values","alpha_filter","slide","event","ui","control_element","prototype","parseFloat","input_size","cur_value","multi_value","slider_row","parents","toString","length","e","stopPropagation","keyup","span","focus","select","blur","invalid","removeClass","new_value","alert","keyCode","slider_max","a_val","isNaN","slider_min","val","split","edit_slider_values","hide","show","range","request_draw","self","setTimeout","hover","returnVal","type","copy","update_attrs","value","updated","applies_to","element","_keep_val","keep","to_filter","Array","filters","i","bind","alpha_filter_name","height_filter_name","filters_dict","add_filter","Math","console","update_ui_elt","run_on_dataset_button","filter_manager","run_on_dataset","FiltersManager","toggle","remove_all","init_filters","log","visible","run_buttons_row","dict","get_or_create_dict_item","key","tool_filter_conditions","is","filter_dicts","active_filters_list","input","filter_tuple","url_params","new_track","slice","run_tool_url","Galaxy","run_filter","response","clear_filters","find","new_item","active_filters","input_dataset_id","cond","join","target_dataset_id","getJSON","error","modal","body","buttons","Close","dataset_id"],"mappings":"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","file":"../../../scripts/viz/trackster/filters.js","sourcesContent":["define([\"libs/underscore\"], function(_) {\n    var extend = _.extend;\n\n    /**\n * Filters that enable users to show/hide data points dynamically.\n */\n    var Filter = function(obj_dict) {\n        this.manager = null;\n        this.name = obj_dict.name;\n        // Index into payload to filter.\n        this.index = obj_dict.index;\n        this.tool_id = obj_dict.tool_id;\n        // Name to use for filter when building expression for tool.\n        this.tool_exp_name = obj_dict.tool_exp_name;\n    };\n\n    extend(Filter.prototype, {\n        /**\n     * Convert filter to dictionary.\n     */\n        to_dict: function() {\n            return {\n                name: this.name,\n                index: this.index,\n                tool_id: this.tool_id,\n                tool_exp_name: this.tool_exp_name\n            };\n        }\n    });\n\n    /**\n * Creates an action icon.\n */\n    var create_action_icon = function(title, css_class, on_click_fn) {\n        return $(\"<a/>\")\n            .attr(\"href\", \"javascript:void(0);\")\n            .attr(\"title\", title)\n            .addClass(\"icon-button\")\n            .addClass(css_class)\n            .tooltip()\n            .click(on_click_fn);\n    };\n\n    /**\n * Number filters have a min, max as well as a low, high; low and high are used \n */\n    var NumberFilter = function(obj_dict) {\n        //\n        // Attribute init.\n        //\n        Filter.call(this, obj_dict);\n        // Filter low/high. These values are used to filter elements.\n        this.low = \"low\" in obj_dict ? obj_dict.low : -Number.MAX_VALUE;\n        this.high = \"high\" in obj_dict ? obj_dict.high : Number.MAX_VALUE;\n        // Slide min/max. These values are used to set/update slider.\n        this.min = \"min\" in obj_dict ? obj_dict.min : Number.MAX_VALUE;\n        this.max = \"max\" in obj_dict ? obj_dict.max : -Number.MAX_VALUE;\n        // UI elements associated with filter.\n        this.container = null;\n        this.slider = null;\n        this.slider_label = null;\n\n        //\n        // Create HTML.\n        //\n\n        // Function that supports inline text editing of slider values.\n        // Enable users to edit parameter's value via a text box.\n        var edit_slider_values = function(container, span, slider) {\n            container.click(function() {\n                var cur_value = span.text(),\n                    max = parseFloat(slider.slider(\"option\", \"max\")),\n                    input_size =\n                        max <= 1\n                            ? 4\n                            : max <= 1000000 ? max.toString().length : 6,\n                    multi_value = false,\n                    slider_row = $(this).parents(\".slider-row\");\n\n                // Row now has input.\n                slider_row.addClass(\"input\");\n\n                // Increase input size if there are two values.\n                if (slider.slider(\"option\", \"values\")) {\n                    input_size = 2 * input_size + 1;\n                    multi_value = true;\n                }\n                span.text(\"\");\n                // Temporary input for changing value.\n                $(\"<input type='text'/>\")\n                    .attr(\"size\", input_size)\n                    .attr(\"maxlength\", input_size)\n                    .attr(\"value\", cur_value)\n                    .appendTo(span)\n                    .focus()\n                    .select()\n                    .click(function(e) {\n                        // Don't want click to propogate up to values_span and restart everything.\n                        e.stopPropagation();\n                    })\n                    .blur(function() {\n                        $(this).remove();\n                        span.text(cur_value);\n                        slider_row.removeClass(\"input\");\n                    })\n                    .keyup(function(e) {\n                        if (e.keyCode === 27) {\n                            // Escape key.\n                            $(this).trigger(\"blur\");\n                        } else if (e.keyCode === 13) {\n                            //\n                            // Enter/return key initiates callback. If new value(s) are in slider range,\n                            // change value (which calls slider's change() function).\n                            //\n                            var slider_min = slider.slider(\"option\", \"min\"),\n                                slider_max = slider.slider(\"option\", \"max\"),\n                                invalid = function(a_val) {\n                                    return (\n                                        isNaN(a_val) ||\n                                        a_val > slider_max ||\n                                        a_val < slider_min\n                                    );\n                                },\n                                new_value = $(this).val();\n                            if (!multi_value) {\n                                new_value = parseFloat(new_value);\n                                if (invalid(new_value)) {\n                                    alert(\n                                        \"Parameter value must be in the range [\" +\n                                            slider_min +\n                                            \"-\" +\n                                            slider_max +\n                                            \"]\"\n                                    );\n                                    return $(this);\n                                }\n                            } else {\n                                // Multi value.\n                                new_value = new_value.split(\"-\");\n                                new_value = [\n                                    parseFloat(new_value[0]),\n                                    parseFloat(new_value[1])\n                                ];\n                                if (\n                                    invalid(new_value[0]) ||\n                                    invalid(new_value[1])\n                                ) {\n                                    alert(\n                                        \"Parameter value must be in the range [\" +\n                                            slider_min +\n                                            \"-\" +\n                                            slider_max +\n                                            \"]\"\n                                    );\n                                    return $(this);\n                                }\n                            }\n\n                            // Updating the slider also updates slider values and removes input.\n                            slider.slider(\n                                multi_value ? \"values\" : \"value\",\n                                new_value\n                            );\n                            slider_row.removeClass(\"input\");\n                        }\n                    });\n            });\n        };\n\n        var filter = this;\n\n        filter.parent_div = $(\"<div/>\").addClass(\"filter-row slider-row\");\n\n        // Set up filter label (name, values).\n        var filter_label = $(\"<div/>\")\n                .addClass(\"elt-label\")\n                .appendTo(filter.parent_div),\n            name_span = $(\"<span/>\")\n                .addClass(\"slider-name\")\n                .text(filter.name + \"  \")\n                .appendTo(filter_label),\n            values_span = $(\"<span/>\").text(this.low + \"-\" + this.high),\n            values_span_container = $(\"<span/>\")\n                .addClass(\"slider-value\")\n                .appendTo(filter_label)\n                .append(\"[\")\n                .append(values_span)\n                .append(\"]\");\n        filter.values_span = values_span;\n\n        // Set up slider for filter.\n        var slider_div = $(\"<div/>\")\n            .addClass(\"slider\")\n            .appendTo(filter.parent_div);\n        filter.control_element = $(\"<div/>\")\n            .attr(\"id\", filter.name + \"-filter-control\")\n            .appendTo(slider_div);\n        filter.control_element.slider({\n            range: true,\n            min: this.min,\n            max: this.max,\n            step: this.get_slider_step(this.min, this.max),\n            values: [this.low, this.high],\n            slide: function(event, ui) {\n                filter.slide(event, ui);\n            },\n            change: function(event, ui) {\n                filter.control_element\n                    .slider(\"option\", \"slide\")\n                    .call(filter.control_element, event, ui);\n            }\n        });\n        filter.slider = filter.control_element;\n        filter.slider_label = values_span;\n\n        // Enable users to edit slider values via text box.\n        edit_slider_values(\n            values_span_container,\n            values_span,\n            filter.control_element\n        );\n\n        // Set up filter display controls.\n        var display_controls_div = $(\"<div/>\")\n            .addClass(\"display-controls\")\n            .appendTo(filter.parent_div);\n        this.transparency_icon = create_action_icon(\n            \"Use filter for data transparency\",\n            \"layer-transparent\",\n            function() {\n                if (filter.manager.alpha_filter !== filter) {\n                    // Setting this filter as the alpha filter.\n                    filter.manager.alpha_filter = filter;\n                    // Update UI for new filter.\n                    filter.manager.parent_div\n                        .find(\".layer-transparent\")\n                        .removeClass(\"active\")\n                        .hide();\n                    filter.transparency_icon.addClass(\"active\").show();\n                } else {\n                    // Clearing filter as alpha filter.\n                    filter.manager.alpha_filter = null;\n                    filter.transparency_icon.removeClass(\"active\");\n                }\n                filter.manager.track.request_draw({\n                    force: true,\n                    clear_after: true\n                });\n            }\n        )\n            .appendTo(display_controls_div)\n            .hide();\n        this.height_icon = create_action_icon(\n            \"Use filter for data height\",\n            \"arrow-resize-090\",\n            function() {\n                if (filter.manager.height_filter !== filter) {\n                    // Setting this filter as the height filter.\n                    filter.manager.height_filter = filter;\n                    // Update UI for new filter.\n                    filter.manager.parent_div\n                        .find(\".arrow-resize-090\")\n                        .removeClass(\"active\")\n                        .hide();\n                    filter.height_icon.addClass(\"active\").show();\n                } else {\n                    // Clearing filter as alpha filter.\n                    filter.manager.height_filter = null;\n                    filter.height_icon.removeClass(\"active\");\n                }\n                filter.manager.track.request_draw({\n                    force: true,\n                    clear_after: true\n                });\n            }\n        )\n            .appendTo(display_controls_div)\n            .hide();\n        filter.parent_div.hover(\n            function() {\n                filter.transparency_icon.show();\n                filter.height_icon.show();\n            },\n            function() {\n                if (filter.manager.alpha_filter !== filter) {\n                    filter.transparency_icon.hide();\n                }\n                if (filter.manager.height_filter !== filter) {\n                    filter.height_icon.hide();\n                }\n            }\n        );\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(filter.parent_div);\n    };\n    extend(NumberFilter.prototype, {\n        /**\n     * Convert filter to dictionary.\n     */\n        to_dict: function() {\n            var obj_dict = Filter.prototype.to_dict.call(this);\n            return extend(obj_dict, {\n                type: \"number\",\n                min: this.min,\n                max: this.max,\n                low: this.low,\n                high: this.high\n            });\n        },\n        /**\n     * Return a copy of filter.\n     */\n        copy: function() {\n            return new NumberFilter({\n                name: this.name,\n                index: this.index,\n                tool_id: this.tool_id,\n                tool_exp_name: this.tool_exp_name\n            });\n        },\n        /**\n     * Get step for slider.\n     */\n        // FIXME: make this a \"static\" function.\n        get_slider_step: function(min, max) {\n            var range = max - min;\n            return range <= 2 ? 0.01 : 1;\n        },\n        /**\n     * Handle slide events.\n     */\n        slide: function(event, ui) {\n            var values = ui.values;\n\n            // Set new values in UI.\n            this.values_span.text(values[0] + \"-\" + values[1]);\n\n            // Set new values in filter.\n            this.low = values[0];\n            this.high = values[1];\n\n            // Set timeout to update if filter low, high are stable.\n            var self = this;\n            setTimeout(function() {\n                if (values[0] === self.low && values[1] === self.high) {\n                    self.manager.track.request_draw({\n                        force: true,\n                        clear_after: true\n                    });\n                }\n            }, 25);\n        },\n        /** \n     * Returns true if filter can be applied to element.\n     */\n        applies_to: function(element) {\n            if (element.length > this.index) {\n                return true;\n            }\n            return false;\n        },\n        /**\n     * Helper function: returns true if value in in filter's [low, high] range.\n     */\n        _keep_val: function(val) {\n            return isNaN(val) || (val >= this.low && val <= this.high);\n        },\n        /**\n     * Returns true if (a) element's value(s) is in [low, high] (range is inclusive) \n     * or (b) if value is non-numeric and hence unfilterable.\n     */\n        keep: function(element) {\n            if (!this.applies_to(element)) {\n                // No element to filter on.\n                return true;\n            }\n\n            // Keep value function.\n            var filter = this;\n\n            // Do filtering.\n            var to_filter = element[this.index];\n            if (to_filter instanceof Array) {\n                var returnVal = true;\n                for (var i = 0; i < to_filter.length; i++) {\n                    if (!this._keep_val(to_filter[i])) {\n                        // Exclude element.\n                        returnVal = false;\n                        break;\n                    }\n                }\n                return returnVal;\n            } else {\n                return this._keep_val(element[this.index]);\n            }\n        },\n        /**\n     * Update filter's min and max values based on element's values.\n     */\n        update_attrs: function(element) {\n            var updated = false;\n            if (!this.applies_to(element)) {\n                return updated;\n            }\n\n            //\n            // Update filter's min, max based on element values.\n            //\n\n            // Make value(s) into an Array.\n            var values = element[this.index];\n            if (!(values instanceof Array)) {\n                values = [values];\n            }\n\n            // Loop through values and update min, max.\n            for (var i = 0; i < values.length; i++) {\n                var value = values[i];\n                if (value < this.min) {\n                    this.min = Math.floor(value);\n                    updated = true;\n                }\n                if (value > this.max) {\n                    this.max = Math.ceil(value);\n                    updated = true;\n                }\n            }\n            return updated;\n        },\n        /**\n     * Update filter's slider.\n     */\n        update_ui_elt: function() {\n            // Only show filter if min < max because filter is not useful otherwise. This\n            // covers all corner cases, such as when min, max have not been defined and\n            // when min == max.\n            if (this.min < this.max) {\n                this.parent_div.show();\n            } else {\n                this.parent_div.hide();\n            }\n\n            var slider_min = this.slider.slider(\"option\", \"min\"),\n                slider_max = this.slider.slider(\"option\", \"max\");\n            if (this.min < slider_min || this.max > slider_max) {\n                // Update slider min, max, step.\n                this.slider.slider(\"option\", \"min\", this.min);\n                this.slider.slider(\"option\", \"max\", this.max);\n                this.slider.slider(\n                    \"option\",\n                    \"step\",\n                    this.get_slider_step(this.min, this.max)\n                );\n                // Refresh slider:\n                // TODO: do we want to keep current values or reset to min/max?\n                // Currently we reset values:\n                this.slider.slider(\"option\", \"values\", [this.min, this.max]);\n                // To use the current values.\n                //var values = this.slider.slider( \"option\", \"values\" );\n                //this.slider.slider( \"option\", \"values\", values );\n            }\n        }\n    });\n\n    /**\n * Manages a set of filters.\n */\n    var FiltersManager = function(track, obj_dict) {\n        this.track = track;\n        this.alpha_filter = null;\n        this.height_filter = null;\n        this.filters = [];\n\n        //\n        // Create HTML.\n        //\n\n        //\n        // Create parent div.\n        //\n        this.parent_div = $(\"<div/>\")\n            .addClass(\"filters\")\n            .hide();\n        // Disable dragging, double clicking, keys on div so that actions on slider do not impact viz.\n        this.parent_div\n            .bind(\"drag\", function(e) {\n                e.stopPropagation();\n            })\n            .click(function(e) {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", function(e) {\n                e.stopPropagation();\n            })\n            .bind(\"keydown\", function(e) {\n                e.stopPropagation();\n            });\n\n        //\n        // Restore state from dict.\n        //\n        if (obj_dict && \"filters\" in obj_dict) {\n            // Second condition needed for backward compatibility.\n            var alpha_filter_name =\n                    \"alpha_filter\" in obj_dict ? obj_dict.alpha_filter : null,\n                height_filter_name =\n                    \"height_filter\" in obj_dict ? obj_dict.height_filter : null,\n                filters_dict = obj_dict.filters,\n                filter;\n            for (var i = 0; i < filters_dict.length; i++) {\n                if (filters_dict[i].type === \"number\") {\n                    filter = new NumberFilter(filters_dict[i]);\n                    this.add_filter(filter);\n                    if (filter.name === alpha_filter_name) {\n                        this.alpha_filter = filter;\n                        filter.transparency_icon.addClass(\"active\").show();\n                    }\n                    if (filter.name === height_filter_name) {\n                        this.height_filter = filter;\n                        filter.height_icon.addClass(\"active\").show();\n                    }\n                } else {\n                    console.log(\"ERROR: unsupported filter: \", name, type);\n                }\n            }\n\n            if (\"visible\" in obj_dict && obj_dict.visible) {\n                this.parent_div.show();\n            }\n        }\n\n        // Add button to filter complete dataset.\n        if (this.filters.length !== 0) {\n            var run_buttons_row = $(\"<div/>\")\n                .addClass(\"param-row\")\n                .appendTo(this.parent_div);\n            var run_on_dataset_button = $(\"<input type='submit'/>\")\n                .attr(\"value\", \"Run on complete dataset\")\n                .appendTo(run_buttons_row);\n            var filter_manager = this;\n            run_on_dataset_button.click(function() {\n                filter_manager.run_on_dataset();\n            });\n        }\n    };\n\n    extend(FiltersManager.prototype, {\n        // HTML manipulation and inspection.\n        show: function() {\n            this.parent_div.show();\n        },\n        hide: function() {\n            this.parent_div.hide();\n        },\n        toggle: function() {\n            this.parent_div.toggle();\n        },\n        visible: function() {\n            return this.parent_div.is(\":visible\");\n        },\n        /**\n     * Returns dictionary for manager.\n     */\n        to_dict: function() {\n            var obj_dict = {},\n                filter_dicts = [],\n                filter;\n\n            // Include individual filter states.\n            for (var i = 0; i < this.filters.length; i++) {\n                filter = this.filters[i];\n                filter_dicts.push(filter.to_dict());\n            }\n            obj_dict.filters = filter_dicts;\n\n            // Include transparency, height filters.\n            obj_dict.alpha_filter = this.alpha_filter\n                ? this.alpha_filter.name\n                : null;\n            obj_dict.height_filter = this.height_filter\n                ? this.height_filter.name\n                : null;\n\n            // Include visibility.\n            obj_dict.visible = this.parent_div.is(\":visible\");\n\n            return obj_dict;\n        },\n        /**\n     * Return a copy of the manager.\n     */\n        copy: function(new_track) {\n            var copy = new FiltersManager(new_track);\n            for (var i = 0; i < this.filters.length; i++) {\n                copy.add_filter(this.filters[i].copy());\n            }\n            return copy;\n        },\n        /**\n     * Add a filter to the manager.\n     */\n        add_filter: function(filter) {\n            filter.manager = this;\n            this.parent_div.append(filter.parent_div);\n            this.filters.push(filter);\n        },\n        /**\n     * Remove all filters from manager.\n     */\n        remove_all: function() {\n            this.filters = [];\n            this.parent_div.children().remove();\n        },\n        /**\n     * Initialize filters.\n     */\n\n        init_filters: function() {\n            for (var i = 0; i < this.filters.length; i++) {\n                var filter = this.filters[i];\n                filter.update_ui_elt();\n            }\n        },\n        /**\n     * Clear filters so that they do not impact track display.\n     */\n        clear_filters: function() {\n            for (var i = 0; i < this.filters.length; i++) {\n                var filter = this.filters[i];\n                filter.slider.slider(\"option\", \"values\", [\n                    filter.min,\n                    filter.max\n                ]);\n            }\n            this.alpha_filter = null;\n            this.height_filter = null;\n\n            // Hide icons for setting filters.\n            this.parent_div.find(\".icon-button\").hide();\n        },\n        run_on_dataset: function() {\n            // Get or create dictionary item.\n            var get_or_create_dict_item = function(dict, key, new_item) {\n                // Add new item to dict if\n                if (!(key in dict)) {\n                    dict[key] = new_item;\n                }\n                return dict[key];\n            };\n\n            //\n            // Find and group active filters. Active filters are those being used to hide data.\n            // Filters with the same tool id are grouped.\n            //\n            var active_filters = {},\n                filter,\n                tool_filter_conditions;\n            for (var i = 0; i < this.filters.length; i++) {\n                filter = this.filters[i];\n                if (filter.tool_id) {\n                    // Add filtering conditions if filter low/high are set.\n                    if (filter.min !== filter.low) {\n                        tool_filter_conditions = get_or_create_dict_item(\n                            active_filters,\n                            filter.tool_id,\n                            []\n                        );\n                        tool_filter_conditions[tool_filter_conditions.length] =\n                            filter.tool_exp_name + \" >= \" + filter.low;\n                    }\n                    if (filter.max !== filter.high) {\n                        tool_filter_conditions = get_or_create_dict_item(\n                            active_filters,\n                            filter.tool_id,\n                            []\n                        );\n                        tool_filter_conditions[tool_filter_conditions.length] =\n                            filter.tool_exp_name + \" <= \" + filter.high;\n                    }\n                }\n            }\n\n            //\n            // Use tools to run filters.\n            //\n\n            // Create list of (tool_id, tool_filters) tuples.\n            var active_filters_list = [];\n            for (var tool_id in active_filters) {\n                active_filters_list[active_filters_list.length] = [\n                    tool_id,\n                    active_filters[tool_id]\n                ];\n            }\n\n            // Invoke recursive function to run filters; this enables chaining of filters via\n            // iteratively application.\n            (function run_filter(input_dataset_id, filters) {\n                var // Set up filtering info and params.\n                    filter_tuple = filters[0],\n                    tool_id = filter_tuple[0],\n                    tool_filters = filter_tuple[1],\n                    tool_filter_str = \"(\" + tool_filters.join(\") and (\") + \")\",\n                    url_params = {\n                        cond: tool_filter_str,\n                        input: input_dataset_id,\n                        target_dataset_id: input_dataset_id,\n                        tool_id: tool_id\n                    };\n\n                // Remove current filter.\n                filters = filters.slice(1);\n\n                $.getJSON(run_tool_url, url_params, function(response) {\n                    if (response.error) {\n                        // General error.\n                        Galaxy.modal.show({\n                            title: \"Filter Dataset\",\n                            body: \"Error running tool \" + tool_id,\n                            buttons: { Close: Galaxy.modal.hide() }\n                        });\n                    } else if (filters.length === 0) {\n                        // No more filters to run.\n                        Galaxy.modal.show({\n                            title: \"Filtering Dataset\",\n                            body:\n                                \"Filter(s) are running on the complete dataset. Outputs are in dataset's history.\",\n                            buttons: { Close: Galaxy.modal.hide() }\n                        });\n                    } else {\n                        // More filters to run.\n                        run_filter(response.dataset_id, filters);\n                    }\n                });\n            })(this.track.dataset_id, active_filters_list);\n        }\n    });\n\n    return {\n        FiltersManager: FiltersManager,\n        NumberFilter: NumberFilter\n    };\n});\n"]}