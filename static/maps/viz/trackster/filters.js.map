{"version":3,"sources":["viz/trackster/filters.js"],"names":["define","_","extend","Filter","obj_dict","this","manager","name","index","tool_id","tool_exp_name","prototype","to_dict","create_action_icon","title","css_class","on_click_fn","$","attr","click","NumberFilter","call","low","Number","high","min","max","container","slider","slider_label","filter","parent_div","addClass","filter_label","values_span","appendTo","values_span_container","text","append","control_element","range","slider_div","step","values","slide","get_slider_step","event","ui","change","edit_slider_values","cur_value","span","parseFloat","input_size","length","multi_value","slider_row","parents","focus","select","e","keyup","keyCode","trigger","slider_min","invalid","slider_max","isNaN","a_val","new_value","alert","removeClass","display_controls_div","alpha_filter","transparency_icon","show","find","hide","track","request_draw","force","clear_after","height_filter","height_icon","type","copy","self","applies_to","setTimeout","element","_keep_val","val","keep","to_filter","returnVal","i","update_attrs","updated","value","Math","floor","update_ui_elt","ceil","FiltersManager","stopPropagation","bind","height_filter_name","filters_dict","console","filters","add_filter","alpha_filter_name","run_buttons_row","filter_manager","visible","toggle","run_on_dataset","filter_dicts","is","new_track","push","remove_all","children","remove","clear_filters","dict","key","tool_filter_conditions","get_or_create_dict_item","new_item","active_filters","active_filters_list","filter_tuple","input","input_dataset_id","target_dataset_id","tool_filters","slice","join","url_params","getJSON","run_tool_url","response","Galaxy","body","buttons","Close","modal","dataset_id","run_filter"],"mappings":"YAAAA,SAAS,mBAAoB,SAASC,GAAtCD,GAAAA,GAASC,EAAAC,OAOLC,EAAS,SAASC,GAClBC,KAAKC,QAAU,KADnBD,KAAIF,KAAAA,EAASI,KAETF,KAAAG,MAAAJ,EAAYA,MACZC,KAAAI,QAAAL,EAAAK,QAEAJ,KAAAK,cAAeN,EAASK,cAG3BP,GARDC,EAAAQ,WAcIC,QAAS,WACL,OADJA,KAASP,KAAAE,KACLC,MAAOH,KAAAG,MACHD,QAAAA,KAAME,QACND,cAAOH,KAAKG,iBAUxB,IAAIK,GAAsB,SAASC,EAAOC,EAAWC,GACjD,MAAOC,GAAE,QAAQC,KAAK,OAAQ,uBAAuBA,KAAK,QAASJ,GADnED,SAAsB,eAAtBA,SAAAA,GAAsCE,UAC7BI,MAAQD,IAQrBE,EAAIA,SAAehB,GAIfD,EAAAA,KAAOkB,KAAKjB,GAEZC,KAAAiB,IAAA,OAAYlB,GAAAA,EAAoBA,KAApBmB,OAAoCA,UAChDlB,KAAAmB,KAAA,QAAapB,GAAAA,EAAqBA,KAArBmB,OAAqCA,UAElDlB,KAAAoB,IAAA,OAAYrB,GAAAA,EAAoBA,IAApBmB,OAAmCA,UAC/ClB,KAAAqB,IAAA,OAAYtB,GAAAA,EAAoBA,KAApBmB,OAAoCA,UAEhDlB,KAAAsB,UAAKA,KACLtB,KAAAuB,OAAKA,KACLvB,KAAAwB,aAAKA,IAQL,IAoEAC,GAAOC,IAEPD,GAAAC,WAAAd,EAAA,UAAAe,SAAA,wBACA,IAAAC,GAEIC,EAAAA,UAAgBF,SAAgB,aAAWG,SAAWX,EAF1DO,YAIAD,GADIM,EAAAA,WAAAA,SAA0B,eAAFC,KAAsBP,EAAAvB,KAAgB4B,MAAtCA,SAA+CF,GACpEC,EAAAA,WAAcA,KAArB7B,KAAAiB,IAAA,IAAAjB,KAAAmB,OADIY,EAAwBnB,EAAE,WAAWe,SAAS,gBAAgBG,SAASF,GAAcK,OAAO,KAAKA,OAAOJ,GAAaI,OAAO,IAGhIR,GAAAI,YAAAA,CAGAJ,IAAAA,GAAOS,EAAAA,UAAgBX,SAAO,UAAAO,SAAAL,EAAAC,WAC1BS,GAAAA,gBAD0BvB,EAAA,UAAAC,KAAA,KAAAY,EAAAvB,KAAA,mBAAA4B,SAAAM,GAE1BhB,EAAAA,gBAF0BG,QAG1BF,OAAAA,EACAgB,IAAAA,KAAMjB,IACNkB,IAAAA,KAAAA,IACAC,KAAAA,KAAOC,gBAASC,KAATrB,IAAoBpB,KAAAqB,KACvBI,QAAAA,KAAAA,IAAOc,KAAME,MAChBF,MARyB,SAAAE,EAAAC,GAS1BC,EAAAA,MAAQF,EAAAC,IAEPC,OAAA,SAAAF,EAAAC,GAXLjB,EAAAS,gBAAAX,OAAA,SAAA,SAAAP,KAAAS,EAAAS,gBAAAO,EAAAC,MAaAjB,EAAOF,OAASE,EAAOS,gBAGvBT,EAAAD,aAAAK,EAhGIe,SAAqBtB,EAArBsB,EAAAA,GACAtB,EAAAA,MAAUR,WACN,GAAA+B,GAAIA,EAAYC,OAAhBzB,EACIA,WAAM0B,EAAWxB,OAAOA,SAAO,QADnCyB,EAEIA,GAAc3B,EAAA,EAAAA,GAAeA,IAAAA,EAAiBA,WAAA4B,OAAjB,EAFjCC,GAGIA,EAHJC,EAIIA,EAAAA,MAAeC,QAAMA,cAGzBD,GAAAA,SAAWxB,SAGXJ,EAAIA,OAAOA,SAAO,YACdyB,EAAAA,EAAAA,EAAeA,EACfE,GAAAA,GAEJJ,EAAAA,KAAKd,IAELpB,EAAAA,wBAAEC,KAAwBA,OAAKmC,GAAQA,KAAYnC,YAAKmC,GAGpDnC,KAAA,QAAAgC,GAAAf,SAAAgB,GAAAO,QAAAC,SACAxC,MAAA,SAAAyC,GAEA3C,EAAAA,oBACAkC,KAAAA,WACAK,EAAAA,MAAAA,SACHL,EAAEU,KAAMX,GACLM,EAAMM,YAAY,WACdD,MAAA,SAAAD,GACA3C,GAAQ8C,KAAR9C,EAAAA,QAEAA,EAAAZ,MAAA0D,QAAA,YACA,IAAA,KAAAH,EAAAE,QAAA,CAGA,GAAAE,GAEIC,EAAUrC,OAAVqC,SAAU,OACNC,EAAQC,EAAMC,OAAUA,SAAQF,OACnCD,EAJL,SAAAG,GAKIC,MAAAA,OAAcD,IAAFA,EALhBF,GAAAE,EAAAJ,GAOIK,EAAAA,EAAAA,MAAYjB,KACZ,IAAAG,GAUI,GAFJc,EAAIJ,EAAQI,MAAR,KACAC,GAAAA,WAAMD,EAAA,IAAAjB,WAAAiB,EAA2CL,KACjDC,EAAAI,EAAA,KAAAJ,EAAAI,EAAA,IAEP,MADIC,OAAA,yCAAAN,EAAA,IAAAE,EAAA,KACJjD,EAAAZ,UAVO,IADAiE,EAAAA,WAAMD,GACNJ,EAAAI,GAJR,MAKKC,OAAA,yCAAAN,EAAA,IAAAE,EAAA,KAEAjD,EAAAZ,KAYRuB,GAAAA,OAAA2B,EAAA,SAAA,QAAAc,GA3CLb,EAAAe,YAAA,eAiFRnC,EAAAF,EAAAJ,EAAAS,gBAIgD,IAAAiC,GAAmBC,EAAAA,UAAfzC,SAAgCF,oBAAQK,SAAAL,EAAAC,WACxC1B,MAAAqE,kBAAA7D,EAAA,mCAAA,oBAC8BiB,WAC9BA,EAAAxB,QAAAmE,eAAA3C,GAEkCA,EAAU6C,QAA5CF,aAAA3C,EAGAA,EAAAxB,QAAAyB,WAAA6C,KAAA,sBAAAL,YAAA,UAAAM,OACA/C,EAAA4C,kBAAA1C,SAAA,UAAA2C,SAXpD7C,EAAAxB,QAAAmE,aAAA,KAiBsC3C,EAAA4C,kBAA8BH,YAAA,WAGhBzC,EAAAxB,QAAAwE,MAAAC,cAAAC,OAAA,EAAAC,aAAA,MAEA9C,SAAAqC,GAAAK,OACA/C,KAAAA,YAAOxB,EAAmBsE,6BAA0BL,mBACxB,WAE3BzC,EAAAxB,QAAA4E,gBAAApD,GAEDA,EAAAxB,QAAA4E,cAAApD,EAEHA,EAAAxB,QAAAyB,WAAA6C,KAAA,qBAAAL,YAAA,UAAAM,OAC0C/C,EAAMmD,YAAajD,SAA9D,UAAA2C,SAKpB7C,EAAAxB,QAAA4E,cAAA,KAEOpD,EAAAqD,YAAAZ,YAAA,WAEHzC,EAAAxB,QAAAwE,MAAAC,cAAAC,OAAA,EAAAC,aAAA,MAEiCnD,SAAQ0C,GAAAK,OACzC/C,EAAAA,WAAAA,MAAOqD,WACVrD,EAAA4C,kBAAAC,OAV7B7C,EAAAqD,YAAAR,QAaA,WACE7C,EAA+BK,QAASL,eAA1CA,GA3KJA,EAAA4C,kBAAAG,OA8KI/C,EAAAxB,QAAA4E,gBAAApD,GARgCA,EAAOqD,YAAYN,SAc3CO,EAAAA,+BADoBjD,SAAAL,EAAAC,YAGpBL,GAAAA,EAAAA,WAIPd,QAb0B,WAc3B,GAAAR,GAAAD,EAAAQ,UAAAC,QAAAS,KAAAhB,KARI,OAAOH,GAAOE,GACVgF,KAAM,SAUdC,IAAMhF,KAAAoB,IACFC,IAAArB,KAAOqB,IAECnB,IAAAA,KAAMe,IACNd,KAAAA,KAAOgB,QAJnB6D,KAAM,WACF,MAAO,IAAIjE,IAYfyB,KAAAA,KAAiBtC,KACTiC,MAAAA,KAAQd,MACZjB,QAAQ+B,KAAA/B,QAhCeC,cAAAL,KAAAK,iBAwCvBmC,gBAAA,SAAApB,EAAAC,GARA,MASKQ,GAAAA,GATY,EAAI,IAAO,GAe5BU,MAAA,SAAAE,EAAAC,GACA,GAAAJ,GAAI2C,EAAO3C,MAGH2C,MAAAA,YAAKhF,KAAAA,EAAQwE,GAAMC,IAAAA,EAAeC,IAI5C3E,KAvDyBiB,IAAAqB,EAAA,GAwD3BtC,KAAAmB,KAAAmB,EAAA,EAGA4C,IAAAA,GAAAA,IACIC,YAAIC,WACA9C,EAAO,KAAP2C,EAAAhE,KAAAqB,EAAA,KAAA2C,EAAA9D,MACH8D,EAAAhF,QAAAwE,MAAAC,cAAAC,OAAA,EAAAC,aAAA,KA9DsB,KAsE1BM,WAtE0B,SAAAE,GAuE3B,MAAAA,GAAAnC,OAAAjD,KAAAG,OAQKkF,UAAA,SAAAC,GAVD,MAAQxB,OAAMwB,IAASA,GAAOtF,KAAKiB,KAAOqE,GAAOtF,KAAKmB,MAiBtDoE,KAAA,SAAIC,GACA,IAAAxF,KAAAkF,WAAIO,GAEA,OAAA,CAIC,IAGRD,GACIJ,EAAApF,KAAAG,MACD,IAAAqF,YAAYH,OAAUD,CAlGH,IAAA,GAmGtBK,IAAA,EAnGsBC,EAAA,EAAAA,EAAAF,EAAAvC,OAAAyC,IAqG3B,IAAA1F,KAAAqF,UAAAG,EAAAE,IAAA,CAVgBD,GAAY,CAa5BE,OAGQ,MAAAF,GAGJ,MAAAzF,MAAAqF,UAAAD,EAAApF,KAAAG,SAMAwF,aAAMrD,SAAAA,GACFA,GAAAA,IAAAA,CACH,KAAAtC,KAAAkF,WAAAE,GAXG,MAAOQ,EAoBP,IAAAtD,GAAIuD,EAAQ7F,KAAKqB,MACbiB,aAAWwD,SACXF,GAAAA,GAIX,KArI0B,GAAAF,GAAA,EAAAA,EAAApD,EAAAW,OAAAyC,IAAA,CAsI3B,GAAAG,GAAAvD,EAAAoD,EAXYG,GAAQ7F,KAAKoB,MACbpB,KAAKoB,IAAM0E,KAAKC,MAAMF,GAalCG,GAAe,GAEXH,EAAA7F,KAAAqB,MACArB,KAAAqB,IAAAyE,KAAAG,KAAAJ,GACID,GAAA,GAIA,MAAAA,IAMJI,cAAI,WAIAhG,KAAAoB,IAAKG,KAAOA,IACZvB,KAAA0B,WAAA4C,OAGAtE,KAAA0B,WAAYH,MAGZ,IACHoC,GAAA3D,KAAAuB,OAAAA,OAAA,SAAA,OACJsC,EAAA7D,KAAAuB,OAAAA,OAAA,SAAA,QApKLvB,KAAAoB,IAAAuC,GAAA3D,KAAAqB,IAAAwC,KAuKA7D,KAAAuB,OAAAA,OAAA,SAAA,MAAAvB,KAAAoB,KAbYpB,KAAKuB,OAAOA,OAAO,SAAU,MAAOvB,KAAKqB,KACzCrB,KAAKuB,OAAOA,OAAO,SAAU,OAAQvB,KAAKwC,gBAAgBxC,KAAKoB,IAAKpB,KAAKqB,MAkBjFrB,KAAK6E,OAAAA,OAAgB,SAArB,UAAA7E,KAAAoB,IAAApB,KAAAqB,SAWA,IAAA6E,GAAA,SAAAzB,EAAA1E,GA4BY,GA3BZC,KAAAyE,MAAK/C,EACD6B,KAAAA,aAAE4C,KACLnG,KAFD6E,cAES,KACLtB,KAAAA,WASJvD,KAAA0B,WAAAd,EAAA,UAAAe,SAAA,WAAA6C,OACyCxE,KAAA0B,WAAA0E,KAAA,OAAA,SAAA7C,GACrCA,EAAA4C,oBAAArF,MAAA,SAEIuF,GAFJ9C,EAAA4C,oBAAAC,KAAA,WAAA,SAAA7C,GAKAA,EAAA4C,oBACIC,KAAA,UAAIE,SAAAA,GACA7E,EAAAA,oBAMA1B,GAAA,WAAWG,GAASmG,CAOvB,IAAA,GADGE,GAJI9E,GAAOqD,gBAAP/E,GAAsCuE,EAAtCF,aAAA,MACHiC,GAAA,iBAAAtG,GAAAA,EAAA8E,cAAA,MACJyB,EACIvG,EAAAyG,QAEJd,EAAA,EAAAA,EAAAY,EAAArD,OAAAyC,IACJ,WAAAY,EAAAZ,GAAAX,MAdOtD,EAAS,GAAIV,GAAauF,EAAaZ,IAiB3C1F,KAAAyG,WAAa1G,GACb0B,EAAKC,OAALgF,IACH1G,KAAAoE,aAAA3C,EACJA,EAAA4C,kBAAA1C,SAAA,UAAA2C,QAED7C,EAAAvB,OAAAmG,IACSG,KAAQvD,cAAcxB,EACvBkF,EAAAA,YAAoBhF,SAAUA,UAAS2C,SAIvCsC,QAAAA,IAAAA,8BAAA1G,KAAA6E,KAMLmB,YAAAA,IAA0BnG,EAAA8G,SAC7B7G,KAAA0B,WAAA4C,OAEmB,GAAA,IAAAtE,KAAAwG,QAAK9E,OAAL,CAAyB,GAHfiF,GAAA/F,EAAA,UAAAe,SAAA,aAAAG,SAAA9B,KAAA0B,YAIRkF,EAAgBE,IAAlBlG,GAAA,0BAAAC,KAAA,QAAA,2BAAAiB,SAAA6E,GAJU7F,MAAA,WAK7B+F,EAASE,oBAiKb,OA7JIxG,GAAAA,EAASD,WACLgE,KAAA,WACI0C,KAAAA,WADJ1C,QAAAE,KAAA,WAAAxE,KAAA0B,WAAA8C,QANJsC,OAAQ,WAAa9G,KAAK0B,WAAWoF,UAUjCD,QAAA,WAAA,MAAA7G,MAAA0B,WAAAuF,GAAA,aAIC1G,QAAA,WAHD,IAAK,GAMLkB,GAFA1B,KARIiH,KAIKtB,EAAI,EAAGA,EAAI1F,KAAKwG,QAAQvD,OAAQyC,IAUzCjE,EAAAzB,KAAAwG,QAAAd,GACA3F,EAAS8G,KAATpF,EAAwBC,UAWvB,OATD3B,GAAAyG,QAAAQ,EANAjH,EAASqE,aAAgBpE,KAAKoE,aAAepE,KAAKoE,aAAalE,KAAO,KACtEH,EAAS8E,cAAiB7E,KAAK6E,cAAgB7E,KAAK6E,cAAc3E,KAAO,KAYzEH,EAAK8G,QAAL7G,KAAoB0B,WAAK8E,GAAQvD,YAEhClD,GAJLiF,KAAM,SAASkC,GAWXzF,IAAAA,GADJgF,GAAAA,GAAYP,GAAAgB,GACRzF,EAAOxB,EAAAA,EAAPD,KAAAwG,QAAAvD,OAAAyC,IACAV,EAAKtD,WAAWO,KAAAA,QAAOR,GAAOC,OAEjC,OA/C4BsD,IAoDzByB,WAAA,SAAAhF,GACAA,EAAAxB,QAAKyB,KACR1B,KAtD4B0B,WAAAO,OAAAR,EAAAC,YAuD7B1B,KAAAwG,QAAAW,KAAA1F,IAKQ2F,WAAA,WACA3F,KAAAA,WACHzB,KAAA0B,WAAA2F,WAAAC,UAKLC,aAAAA,WACI,IAAA,GAAK7B,GAAIA,EAAAA,EAAOA,KAAIc,QAAKA,OAAQvD,IAAQyC,CACjCjE,KAAS+E,QAAKA,GAClB/E,kBAMJ8F,cAAK7F,WACR,IA7E4B,GAAAgE,GAAA,EAAAA,EAAA1F,KAAAwG,QAAAvD,OAAAyC,IAAA,CA8E7BqB,GAAAA,GAAgB/G,KAAAwG,QAAAd,EACZjE,GAAAF,OAAAA,OAAA,SAAA,UAAAE,EAAAL,IAAAK,EAAAJ,MAEIrB,KAAAoE,aAAA,KACApE,KAAA6E,cAAa2C,KAGbxH,KAAA0B,WAAO8F,KAAKC,gBAAZjD,QAPRuC,eAAgB,WA0BAW,IAAAA,GAFHjG,GACDiG,EAdRC,GAAA,SAAAH,EAAAC,EAAAG,GAGA,MADAH,KAAAD,KACIK,EAAAA,GAAAA,GAEAH,EAAAA,KAOQA,KAGAA,EAAAA,EAAAA,EAAAA,KAAAA,QAAAA,OAAyBC,IACzBD,EAAAA,KAAAA,QAAAA,GACHjG,EAAArB,UAERqB,EAAAL,MAAAK,EAAAR,MARWyG,EAAyBC,EAAwBE,EAAgBpG,EAAOrB,YAUpFsH,EAAAA,EAAAzE,QAAAxB,EAAApB,cAAA,OAAAoB,EAAAR,KAEAQ,EAAAJ,MAAAI,EAAAN,OARYuG,EAAyBC,EAAwBE,EAAgBpG,EAAOrB,YAUpFsH,EAAAA,EAAAzE,QAAAxB,EAAApB,cAAA,OAAAoB,EAAAN,MAUQ,IAAA2G,KACAC,KAAAA,GAAAA,KAAAA,GAFJD,EAGcC,EAHd9E,SAAA7C,EAAAyH,EAAAzH,KAQQ4H,QAAAA,GAAOC,EAFEzB,GAGT0B,GAHSH,GANjBvB,EAAA,GAGIpG,EAAU2H,EAAa,GAU3BI,EAAAJ,EAAA,GACAvB,EAAkB4B,IAAMD,EAAxBE,KAAA,WAAA,IARIC,GAUFC,KAAQC,EACNR,MAAIS,EACAP,kBAAAD,EACAS,QAAAA,EAAkBlC,GAAAA,EAAlB4B,MAAA,GAOAxH,EAAA2H,QAAAC,aAAAF,EAAA,SAAAG,GACAC,EAAAA,MAEIC,OAAAA,MAAAA,MACAC,MAAAA,iBAHcD,KAAlB,sBAAAvI,EAFCwI,SAQAC,MAAAH,OAAAI,MAAAtE,UAGJ,IAAAgC,EAAAvD,OAGDwB,OAAMsE,MAAAA,MACjBtI,MAAA,oBAnKLkI,KAAA,mFAyJwBC,SAAWC,MAAUH,OAAOI,MAAMtE,UAjmB1DwE,EAAAP,EAAAM,WAAAvC,MA0mBWxG,KAAKyE,MAAMsE,WAAYjB,OAK9B5B,eAAgBA,EAChBnF,aAAcA","file":"../../../scripts/viz/trackster/filters.js","sourcesContent":["define( [\"libs/underscore\"], function(_) {\n\nvar extend = _.extend;\n\n/**\n * Filters that enable users to show/hide data points dynamically.\n */\nvar Filter = function(obj_dict) {\n    this.manager = null;\n    this.name = obj_dict.name;\n    // Index into payload to filter.\n    this.index = obj_dict.index;\n    this.tool_id = obj_dict.tool_id;\n    // Name to use for filter when building expression for tool.\n    this.tool_exp_name = obj_dict.tool_exp_name;\n};\n\nextend(Filter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function() {\n        return {\n            name: this.name,\n            index: this.index,\n            tool_id: this.tool_id,\n            tool_exp_name: this.tool_exp_name\n        };\n    } \n});\n\n/**\n * Creates an action icon.\n */\nvar create_action_icon =  function(title, css_class, on_click_fn) {\n    return $(\"<a/>\").attr(\"href\", \"javascript:void(0);\").attr(\"title\", title)\n                    .addClass(\"icon-button\").addClass(css_class).tooltip()\n                    .click(on_click_fn);\n};\n\n/**\n * Number filters have a min, max as well as a low, high; low and high are used \n */\nvar NumberFilter = function(obj_dict) {\n    //\n    // Attribute init.\n    //\n    Filter.call(this, obj_dict);\n    // Filter low/high. These values are used to filter elements.\n    this.low = ('low' in obj_dict ? obj_dict.low : -Number.MAX_VALUE);\n    this.high = ('high' in obj_dict ? obj_dict.high : Number.MAX_VALUE);\n    // Slide min/max. These values are used to set/update slider.\n    this.min = ('min' in obj_dict ? obj_dict.min : Number.MAX_VALUE);\n    this.max = ('max' in obj_dict ? obj_dict.max : -Number.MAX_VALUE);\n    // UI elements associated with filter.\n    this.container = null;\n    this.slider = null;\n    this.slider_label = null;\n    \n    //\n    // Create HTML.\n    //\n    \n    // Function that supports inline text editing of slider values.\n    // Enable users to edit parameter's value via a text box.\n    var edit_slider_values = function(container, span, slider) {\n        container.click(function() {\n            var cur_value = span.text(),\n                max = parseFloat(slider.slider(\"option\", \"max\")),\n                input_size = (max <= 1 ? 4 : max <= 1000000 ? max.toString().length : 6),\n                multi_value = false,\n                slider_row = $(this).parents(\".slider-row\");\n                \n            // Row now has input.\n            slider_row.addClass(\"input\");\n                \n            // Increase input size if there are two values.\n            if (slider.slider(\"option\", \"values\")) {\n                input_size = 2*input_size + 1;\n                multi_value = true;\n            }\n            span.text(\"\");\n            // Temporary input for changing value.\n            $(\"<input type='text'/>\").attr(\"size\", input_size).attr(\"maxlength\", input_size)\n                                     .attr(\"value\", cur_value).appendTo(span).focus().select()\n                                     .click(function(e) {\n                // Don't want click to propogate up to values_span and restart everything.\n                e.stopPropagation();\n            }).blur(function() {\n                $(this).remove();\n                span.text(cur_value);\n                slider_row.removeClass(\"input\");\n            }).keyup(function(e) {\n                if (e.keyCode === 27) {\n                    // Escape key.\n                    $(this).trigger(\"blur\");\n                } else if (e.keyCode === 13) {\n                    //\n                    // Enter/return key initiates callback. If new value(s) are in slider range, \n                    // change value (which calls slider's change() function).\n                    //\n                    var slider_min = slider.slider(\"option\", \"min\"),\n                        slider_max = slider.slider(\"option\", \"max\"),\n                        invalid = function(a_val) {\n                            return (isNaN(a_val) || a_val > slider_max || a_val < slider_min);\n                        },\n                        new_value = $(this).val();\n                    if (!multi_value) {\n                        new_value = parseFloat(new_value);\n                        if (invalid(new_value)) {\n                            alert(\"Parameter value must be in the range [\" + slider_min + \"-\" + slider_max + \"]\");\n                            return $(this);\n                        }\n                    }\n                    else { // Multi value.\n                        new_value = new_value.split(\"-\");\n                        new_value = [parseFloat(new_value[0]), parseFloat(new_value[1])];\n                        if (invalid(new_value[0]) || invalid(new_value[1])) {\n                            alert(\"Parameter value must be in the range [\" + slider_min + \"-\" + slider_max + \"]\");\n                            return $(this);\n                        }\n                    }\n                    \n                    // Updating the slider also updates slider values and removes input. \n                    slider.slider((multi_value ? \"values\" : \"value\"), new_value);\n                    slider_row.removeClass(\"input\");\n                }\n            });\n        });\n    };\n    \n    var filter = this;\n    \n    filter.parent_div = $(\"<div/>\").addClass(\"filter-row slider-row\");\n    \n    // Set up filter label (name, values).\n    var filter_label = $(\"<div/>\").addClass(\"elt-label\").appendTo(filter.parent_div),\n        name_span = $(\"<span/>\").addClass(\"slider-name\").text(filter.name + \"  \").appendTo(filter_label),\n        values_span = $(\"<span/>\").text(this.low + \"-\" + this.high),\n        values_span_container = $(\"<span/>\").addClass(\"slider-value\").appendTo(filter_label).append(\"[\").append(values_span).append(\"]\");\n    filter.values_span = values_span;\n            \n    // Set up slider for filter.\n    var slider_div = $(\"<div/>\").addClass(\"slider\").appendTo(filter.parent_div);\n    filter.control_element = $(\"<div/>\").attr(\"id\", filter.name + \"-filter-control\").appendTo(slider_div);\n    filter.control_element.slider({\n        range: true,\n        min: this.min,\n        max: this.max,\n        step: this.get_slider_step(this.min, this.max),\n        values: [this.low, this.high],\n        slide: function(event, ui) { \n            filter.slide(event, ui); \n        },\n        change: function(event, ui) {\n            filter.control_element.slider(\"option\", \"slide\").call(filter.control_element, event, ui);\n        }\n    });\n    filter.slider = filter.control_element;\n    filter.slider_label = values_span;\n    \n    // Enable users to edit slider values via text box.\n    edit_slider_values(values_span_container, values_span, filter.control_element);\n    \n    // Set up filter display controls.\n    var display_controls_div = $(\"<div/>\").addClass(\"display-controls\").appendTo(filter.parent_div);\n    this.transparency_icon = create_action_icon(\"Use filter for data transparency\", \"layer-transparent\", \n                                                function() {\n                                                    if (filter.manager.alpha_filter !== filter) {\n                                                        // Setting this filter as the alpha filter.\n                                                        filter.manager.alpha_filter = filter;\n                                                        // Update UI for new filter.\n                                                        filter.manager.parent_div.find(\".layer-transparent\").removeClass(\"active\").hide();\n                                                        filter.transparency_icon.addClass(\"active\").show();\n                                                    }\n                                                    else {\n                                                        // Clearing filter as alpha filter.\n                                                        filter.manager.alpha_filter = null;\n                                                        filter.transparency_icon.removeClass(\"active\");\n                                                    }\n                                                    filter.manager.track.request_draw({ force: true, clear_after: true });\n                                                } )\n                                                .appendTo(display_controls_div).hide();\n    this.height_icon = create_action_icon(\"Use filter for data height\", \"arrow-resize-090\", \n                                                function() {\n                                                    if (filter.manager.height_filter !== filter) {\n                                                        // Setting this filter as the height filter.\n                                                        filter.manager.height_filter = filter;\n                                                        // Update UI for new filter.\n                                                        filter.manager.parent_div.find(\".arrow-resize-090\").removeClass(\"active\").hide();\n                                                        filter.height_icon.addClass(\"active\").show();\n                                                    }\n                                                    else {\n                                                        // Clearing filter as alpha filter.\n                                                        filter.manager.height_filter = null;\n                                                        filter.height_icon.removeClass(\"active\");\n                                                    }\n                                                    filter.manager.track.request_draw({ force: true, clear_after: true });\n                                                } )\n                                                .appendTo(display_controls_div).hide();\n    filter.parent_div.hover( function() { \n                                filter.transparency_icon.show();\n                                filter.height_icon.show(); \n                            },\n                            function() {\n                                if (filter.manager.alpha_filter !== filter) {\n                                    filter.transparency_icon.hide();\n                                }\n                                if (filter.manager.height_filter !== filter) {\n                                    filter.height_icon.hide();\n                                }\n                            } );\n    \n    // Add to clear floating layout.\n    $(\"<div style='clear: both;'/>\").appendTo(filter.parent_div);\n};\nextend(NumberFilter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function() {\n        var obj_dict = Filter.prototype.to_dict.call(this);\n        return extend(obj_dict, {\n            type: 'number',\n            min: this.min,\n            max: this.max,\n            low: this.low,\n            high: this.high\n        });\n    },\n    /**\n     * Return a copy of filter.\n     */\n    copy: function() {\n        return new NumberFilter( \n            {\n                name: this.name, \n                index: this.index, \n                tool_id: this.tool_id, \n                tool_exp_name: this.tool_exp_name\n            });\n    },\n    /**\n     * Get step for slider.\n     */\n    // FIXME: make this a \"static\" function.\n    get_slider_step: function(min, max) {\n        var range = max - min;\n        return (range <= 2 ? 0.01 : 1);\n    },\n    /**\n     * Handle slide events.\n     */\n    slide: function(event, ui) {\n        var values = ui.values;\n\n        // Set new values in UI.\n        this.values_span.text(values[0] + \"-\" + values[1]);\n\n        // Set new values in filter.\n        this.low = values[0];\n        this.high = values[1];\n         \n        // Set timeout to update if filter low, high are stable.\n        var self = this;\n        setTimeout(function() {\n            if (values[0] === self.low && values[1] === self.high) {\n                self.manager.track.request_draw({ force: true, clear_after: true });\n            }\n        }, 25);\n         \n     },\n    /** \n     * Returns true if filter can be applied to element.\n     */\n    applies_to: function(element) {\n        if (element.length > this.index) {\n            return true;\n        }\n        return false;\n    },\n    /**\n     * Helper function: returns true if value in in filter's [low, high] range.\n     */\n    _keep_val: function(val) {\n        return (isNaN(val) || (val >= this.low && val <= this.high));\n    },    \n    /**\n     * Returns true if (a) element's value(s) is in [low, high] (range is inclusive) \n     * or (b) if value is non-numeric and hence unfilterable.\n     */\n    keep: function(element) {\n        if ( !this.applies_to( element ) ) {\n            // No element to filter on.\n            return true;\n        }\n\n        // Keep value function.\n        var filter = this;\n\n        // Do filtering.\n        var to_filter = element[this.index];\n        if (to_filter instanceof Array) {\n            var returnVal = true;\n            for (var i = 0; i < to_filter.length; i++) {\n                if (!this._keep_val(to_filter[i])) {\n                    // Exclude element.\n                    returnVal = false;\n                    break;\n                }\n            }\n            return returnVal;\n        }\n        else {\n            return this._keep_val(element[this.index]);\n        }\n    },\n    /**\n     * Update filter's min and max values based on element's values.\n     */\n    update_attrs: function(element) {\n        var updated = false;\n        if (!this.applies_to(element) ) {\n            return updated;\n        }\n        \n        //\n        // Update filter's min, max based on element values.\n        //\n        \n        // Make value(s) into an Array.\n        var values = element[this.index];\n        if (!(values instanceof Array)) {\n            values = [values];\n        }\n        \n        // Loop through values and update min, max.\n        for (var i = 0; i < values.length; i++) {\n            var value = values[i];\n            if (value < this.min) {\n                this.min = Math.floor(value);\n                updated = true;\n            }\n            if (value > this.max) {\n                this.max = Math.ceil(value);\n                updated = true;\n            }\n        }\n        return updated;\n    },\n    /**\n     * Update filter's slider.\n     */\n    update_ui_elt: function () {\n        // Only show filter if min < max because filter is not useful otherwise. This\n        // covers all corner cases, such as when min, max have not been defined and\n        // when min == max.\n        if (this.min < this.max) {\n            this.parent_div.show();\n        }\n        else {\n            this.parent_div.hide();\n        }\n        \n        var \n            slider_min = this.slider.slider(\"option\", \"min\"),\n            slider_max = this.slider.slider(\"option\", \"max\");\n        if (this.min < slider_min || this.max > slider_max) {\n            // Update slider min, max, step.\n            this.slider.slider(\"option\", \"min\", this.min);\n            this.slider.slider(\"option\", \"max\", this.max);\n            this.slider.slider(\"option\", \"step\", this.get_slider_step(this.min, this.max));\n            // Refresh slider:\n            // TODO: do we want to keep current values or reset to min/max?\n            // Currently we reset values:\n            this.slider.slider(\"option\", \"values\", [this.min, this.max]);\n            // To use the current values.\n            //var values = this.slider.slider( \"option\", \"values\" );\n            //this.slider.slider( \"option\", \"values\", values );\n        }\n    }\n});\n \n/**\n * Manages a set of filters.\n */\nvar FiltersManager = function(track, obj_dict) {\n    this.track = track;\n    this.alpha_filter = null;\n    this.height_filter = null;\n    this.filters = [];\n    \n    //\n    // Create HTML.\n    //\n        \n    //\n    // Create parent div.\n    //\n    this.parent_div = $(\"<div/>\").addClass(\"filters\").hide();\n    // Disable dragging, double clicking, keys on div so that actions on slider do not impact viz.\n    this.parent_div.bind(\"drag\", function(e) {\n        e.stopPropagation();\n    }).click(function(e) {\n        e.stopPropagation();\n    }).bind(\"dblclick\", function(e) {\n        e.stopPropagation();\n    }).bind(\"keydown\", function(e) {\n        e.stopPropagation();\n    });\n    \n    //\n    // Restore state from dict.\n    //\n    if (obj_dict && 'filters' in obj_dict) { // Second condition needed for backward compatibility.\n        var \n            alpha_filter_name = ('alpha_filter' in obj_dict ? obj_dict.alpha_filter : null),\n            height_filter_name = ('height_filter' in obj_dict ? obj_dict.height_filter : null),            \n            filters_dict = obj_dict.filters,\n            filter;\n        for (var i = 0; i < filters_dict.length; i++) {\n            if (filters_dict[i].type === 'number') {\n                filter = new NumberFilter(filters_dict[i]);\n                this.add_filter(filter);\n                if (filter.name === alpha_filter_name) {\n                    this.alpha_filter = filter;\n                    filter.transparency_icon.addClass(\"active\").show();\n                }\n                if (filter.name === height_filter_name) {\n                    this.height_filter = filter;\n                    filter.height_icon.addClass(\"active\").show();\n                }\n            } \n            else {\n                console.log(\"ERROR: unsupported filter: \", name, type);\n            }\n        }\n        \n        \n        if ('visible' in obj_dict && obj_dict.visible) {\n            this.parent_div.show();\n        }\n    }\n    \n    // Add button to filter complete dataset.\n    if (this.filters.length !== 0) {\n        var run_buttons_row = $(\"<div/>\").addClass(\"param-row\").appendTo(this.parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'/>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_buttons_row);\n        var filter_manager = this;\n        run_on_dataset_button.click( function() {\n            filter_manager.run_on_dataset();\n        });\n    }\n        \n};\n\nextend(FiltersManager.prototype, {\n    // HTML manipulation and inspection.\n    show: function() { this.parent_div.show(); },\n    hide: function() { this.parent_div.hide(); },\n    toggle: function() { this.parent_div.toggle(); },\n    visible: function() { return this.parent_div.is(\":visible\"); },\n    /**\n     * Returns dictionary for manager.\n     */\n    to_dict: function() {\n        var obj_dict = {},\n            filter_dicts = [],\n            filter;\n            \n        // Include individual filter states.\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            filter_dicts.push(filter.to_dict());\n        }\n        obj_dict.filters = filter_dicts;\n        \n        // Include transparency, height filters.\n        obj_dict.alpha_filter = (this.alpha_filter ? this.alpha_filter.name : null);\n        obj_dict.height_filter = (this.height_filter ? this.height_filter.name : null);\n        \n        // Include visibility.\n        obj_dict.visible = this.parent_div.is(\":visible\");\n        \n        return obj_dict;\n    },\n    /**\n     * Return a copy of the manager.\n     */\n    copy: function(new_track) {\n        var copy = new FiltersManager(new_track);\n        for (var i = 0; i < this.filters.length; i++) {\n            copy.add_filter(this.filters[i].copy());\n        }\n        return copy;\n    },\n    /**\n     * Add a filter to the manager.\n     */\n    add_filter: function(filter) {\n        filter.manager = this;\n        this.parent_div.append(filter.parent_div);\n        this.filters.push(filter);  \n    },\n    /**\n     * Remove all filters from manager.\n     */\n    remove_all: function() {\n        this.filters = [];\n        this.parent_div.children().remove();\n    },\n    /**\n     * Initialize filters.\n     */ \n    init_filters: function() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.update_ui_elt();\n        }\n    },\n    /**\n     * Clear filters so that they do not impact track display.\n     */\n    clear_filters: function() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.slider.slider(\"option\", \"values\", [filter.min, filter.max]);\n        }\n        this.alpha_filter = null;\n        this.height_filter = null;\n        \n        // Hide icons for setting filters.\n        this.parent_div.find(\".icon-button\").hide();\n    },\n    run_on_dataset: function() {\n        // Get or create dictionary item.\n        var get_or_create_dict_item = function(dict, key, new_item) {\n            // Add new item to dict if \n            if (!(key in dict)) {\n                dict[key] = new_item;\n            }\n            return dict[key];\n        };\n        \n        //\n        // Find and group active filters. Active filters are those being used to hide data.\n        // Filters with the same tool id are grouped.\n        //\n        var active_filters = {},\n            filter, \n            tool_filter_conditions;\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            if (filter.tool_id) {\n                // Add filtering conditions if filter low/high are set.\n                if (filter.min !== filter.low) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = filter.tool_exp_name + \" >= \" + filter.low;\n                }\n                if (filter.max !== filter.high) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = filter.tool_exp_name + \" <= \" + filter.high;\n                }\n            }\n        }\n        \n        //\n        // Use tools to run filters.\n        //\n        \n        // Create list of (tool_id, tool_filters) tuples.\n        var active_filters_list = [];\n        for (var tool_id in active_filters) {\n            active_filters_list[active_filters_list.length] = [tool_id, active_filters[tool_id]];\n        }\n        \n        // Invoke recursive function to run filters; this enables chaining of filters via\n        // iteratively application.\n        (function run_filter(input_dataset_id, filters) {\n            var \n                // Set up filtering info and params.\n                filter_tuple = filters[0],\n                tool_id = filter_tuple[0],\n                tool_filters = filter_tuple[1],\n                tool_filter_str = \"(\" + tool_filters.join(\") and (\") + \")\",\n                url_params = {\n                    cond: tool_filter_str,\n                    input: input_dataset_id,\n                    target_dataset_id: input_dataset_id,\n                    tool_id: tool_id\n                };\n\n            // Remove current filter.\n            filters = filters.slice(1);\n                \n            $.getJSON(run_tool_url, url_params, function(response) {\n                if (response.error) {\n                    // General error.\n                    Galaxy.modal.show({\n                        title: \"Filter Dataset\",\n                        body : \"Error running tool \" + tool_id,\n                        buttons : { \"Close\" : Galaxy.modal.hide() }\n                    });\n                }\n                else if (filters.length === 0) {\n                    // No more filters to run.\n                    Galaxy.modal.show({\n                        title: \"Filtering Dataset\",\n                        body: \"Filter(s) are running on the complete dataset. Outputs are in dataset's history.\",\n                        buttons: { \"Close\" : Galaxy.modal.hide() }\n                    });\n                }\n                else {\n                    // More filters to run.\n                    run_filter(response.dataset_id, filters);\n                }\n            });\n              \n        })(this.track.dataset_id, active_filters_list);        \n    }\n});\n\nreturn {\n    FiltersManager: FiltersManager,\n    NumberFilter: NumberFilter\n};\n\n});\n"]}