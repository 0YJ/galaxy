{"version":3,"sources":["viz/sweepster.js"],"names":["_","d3","ToolInputsSettings","Backbone","Model","extend","defaults","inputs","values","ToolParameterTree","tool","tree_data","initialize","options","self","this","get","each","input","on","set_tree_data","add_param","remove_param","config","input_config","name","set","param","get_tree_params","length","params_samples","map","samples","get_samples","id","node_id","children","index","param_samples","settings","setting","value","create_tree_data","where","sortBy","get_num_leaves","reduce","memo","target_node","fixed_settings","get_inputs_dict","cur_node","parent","depth","get_settings","node","flatten","c","clone","isArray","all_settings","get_connected_nodes","parents","cur_parent","get_subtree_nodes","push","a_node","get_leaf","child","find_child","toJSON","max","num_samples","track","mode","regions","track_config","SweepsterTrack","converted_datasets_state_url","Galaxy","root","_tracks2","default","object_from_template","same_settings","data_url","prop","other_settings","this_settings","to_dict","model","SweepsterVisualization","_visualization2","Visualization","prototype","dataset","parameter_tree","tracks","_data2","Dataset","default_mode","_tools2","Tool","GenomeRegionCollection","TrackCollection","tool_with_samplable_inputs","remove_inputs","add_track","add","title","tool_id","tree_config","type","dataset_id","SweepsterTrackView","View","tagName","TILE_LEN","canvas_manager","render","draw_tiles","settings_td","$","addClass","run_on_dataset_button","settings_div","hide","on_click","css","text","icon_class","$el","icon_menu","appendTo","click","append","trigger","create_icon_buttons_menu","toggle","tile_containers","remove","prepend","region","canvas","height","number_input_template","select_input_template","find","when","data_is_ready","then","data_ok","sweep_inputs_row","resolution","w_scale","single_input_row","data_manager","get_data","tile_data","new_canvas","template","width","options_text","empty","ToolInputValOrSweepView","change","val","IntegerToolParameter","ToolParameterTreeDesignView","className","option","join","tool_form_view","insertAfter","menu","tool_row","show","cluster","size","attr","nodes","position","ToolFormView","not","i","at","ToolParameterTreeView","tree_params","tool_param_tree_view","layout","diagonal","svg","projection","d","y","x","key","uniq","pluck","label","default_value","left","center_left","select","data","links","selectAll","enter","tree_design_view","connected_node_ids","undefined","toString","tracks_div","help_div","helpText","CanvasManager","track_collection_container","handle_node_clicks","view","_config2","ConfigSettingCollection","from_models_and_saved_values","window","location","modes","mode_mapping","make_popupmenu","get_base_color","get_value","run_tool_on_dataset","tool_name","hide_modal","track_view","hover","tr","first","pm_track","close_button","_iconButton2","param_tree","new_tracks","setTimeout","tooltip_config","placement","track_obj","SweepsterVisualizationView","base","toLowerCase","set_input_values","rerun","outputs","show_modal","Ok","settings_leaf","filter","style","get_node_settings","run_jobs_deferred","Deferred","resolve","run_jobs","output","prefs","to_key_value_dict","init_for_tool_data"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\nimport * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport util from \"viz/trackster/util\";\nimport visualization from \"viz/visualization\";\nimport tracks from \"viz/trackster/tracks\";\nimport tools from \"mvc/tool/tools\";\nimport data from \"mvc/dataset/data\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get(\"tool\")\n            .get(\"inputs\")\n            .each(function(input) {\n                // Listen for changes to input's attributes.\n                input.on(\n                    \"change:min change:max change:num_samples\",\n                    function(input) {\n                        if (input.get(\"in_ptree\")) {\n                            self.set_tree_data();\n                        }\n                    },\n                    self\n                );\n                input.on(\n                    \"change:in_ptree\",\n                    function(input) {\n                        if (input.get(\"in_ptree\")) {\n                            self.add_param(input);\n                        } else {\n                            self.remove_param(input);\n                        }\n                        self.set_tree_data();\n                    },\n                    self\n                );\n            });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, function(input_config) {\n                var input = self\n                    .get(\"tool\")\n                    .get(\"inputs\")\n                    .find(function(input) {\n                        return input.get(\"name\") === input_config.name;\n                    });\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get(\"ptree_index\")) {\n            return;\n        }\n\n        param.set(\"in_ptree\", true);\n        param.set(\"ptree_index\", this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set(\"in_ptree\", false);\n        param.set(\"ptree_index\", null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each(function(input, index) {\n            // +1 to use 1-based indexing.\n            input.set(\"ptree_index\", index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), function(param) {\n            return {\n                param: param,\n                samples: param.get_samples()\n            };\n        });\n        var node_id = 0;\n\n        var // Creates tree data recursively.\n        create_tree_data = function(params_samples, index) {\n            var param_samples = params_samples[index],\n                param = param_samples.param,\n                param_label = param.get(\"label\"),\n                settings = param_samples.samples;\n\n            // Create leaves when last parameter setting is reached.\n            if (params_samples.length - 1 === index) {\n                return _.map(settings, function(setting) {\n                    return {\n                        id: node_id++,\n                        name: setting,\n                        param: param,\n                        value: setting\n                    };\n                });\n            }\n\n            // Recurse to handle other parameters.\n            return _.map(settings, function(setting) {\n                return {\n                    id: node_id++,\n                    name: setting,\n                    param: param,\n                    value: setting,\n                    children: create_tree_data(params_samples, index + 1)\n                };\n            });\n        };\n\n        this.set(\"tree_data\", {\n            name: \"Root\",\n            id: node_id++,\n            children:\n                params_samples.length !== 0\n                    ? create_tree_data(params_samples, 0)\n                    : null\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(\n            this.get(\"tool\")\n                .get(\"inputs\")\n                .where({ in_ptree: true })\n        ).sortBy(function(input) {\n            return input.get(\"ptree_index\");\n        });\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce(function(memo, param) {\n            return memo * param.get_samples().length;\n        }, 1);\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while (cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get(\"name\")] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this;\n\n        var get_settings = function(node, settings) {\n            // Add setting for this node. Root node does not have a param,\n            // however.\n            if (node.param) {\n                settings[node.param.get(\"name\")] = node.value;\n            }\n\n            if (!node.children) {\n                // At leaf node, so return settings.\n                return new ToolInputsSettings({\n                    inputs: self.get(\"tool\").get(\"inputs\"),\n                    values: settings\n                });\n            } else {\n                // At interior node: return list of subtree settings.\n                return _.flatten(\n                    _.map(node.children, function(c) {\n                        return get_settings(c, _.clone(settings));\n                    })\n                );\n            }\n        };\n\n        var all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) {\n            all_settings = [all_settings];\n        }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = function(a_node) {\n            if (!a_node.children) {\n                return a_node;\n            } else {\n                // At interior node: return subtree nodes.\n                return _.flatten([\n                    a_node,\n                    _.map(a_node.children, function(c) {\n                        return get_subtree_nodes(c);\n                    })\n                ]);\n            }\n        };\n\n        // Get node's parents.\n        var parents = [];\n\n        var cur_parent = node.parent;\n        while (cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get(\"tree_data\");\n\n        var find_child = function(children) {\n            return _.find(children, function(child) {\n                return settings[child.param.get(\"name\")] === child.value;\n            });\n        };\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(function(param) {\n            return {\n                name: param.get(\"name\"),\n                min: param.get(\"min\"),\n                max: param.get(\"max\"),\n                num_samples: param.get(\"num_samples\")\n            };\n        });\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: \"Pack\",\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set(\"regions\", options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend(\n                {\n                    data_url: Galaxy.root + \"dummy1\",\n                    converted_datasets_state_url: Galaxy.root + \"dummy2\"\n                },\n                options.track\n            );\n            this.set(\n                \"track\",\n                tracks.object_from_template(track_config, {}, null)\n            );\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get(\"settings\");\n        var other_settings = a_track.get(\"settings\");\n        for (var prop in this_settings) {\n            if (\n                !other_settings[prop] ||\n                this_settings[prop] !== other_settings[prop]\n            ) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get(\"track\").to_dict(),\n            settings: this.get(\"settings\"),\n            regions: this.get(\"regions\")\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: \"Pack\"\n    }),\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data.Dataset(options.dataset));\n        this.set(\"tool\", new tools.Tool(options.tool));\n        this.set(\n            \"regions\",\n            new visualization.GenomeRegionCollection(options.regions)\n        );\n        this.set(\"tracks\", new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get(\"tool\");\n        this.set(\"tool_with_samplable_inputs\", tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs([\n            \"data\",\n            \"hidden_data\",\n            \"conditional\",\n            \"text\"\n        ]);\n\n        this.set(\n            \"parameter_tree\",\n            new ToolParameterTree({\n                tool: tool_with_samplable_inputs,\n                config: options.tree_config\n            })\n        );\n    },\n\n    add_track: function(track) {\n        this.get(\"tracks\").add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get(\"id\"),\n            title:\n                \"Parameter exploration for dataset '\" +\n                this.get(\"dataset\").get(\"name\") +\n                \"'\",\n            type: \"sweepster\",\n            dataset_id: this.get(\"dataset\").id,\n            tool_id: this.get(\"tool\").id,\n            regions: this.get(\"regions\").toJSON(),\n            tree_config: this.get(\"parameter_tree\").toJSON(),\n            tracks: this.get(\"tracks\").toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: \"tr\",\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on(\"change:track change:mode\", this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get(\"settings\");\n\n        var values = settings.get(\"values\");\n\n        var settings_td = $(\"<td/>\")\n            .addClass(\"settings\")\n            .appendTo(this.$el);\n\n        var settings_div = $(\"<div/>\")\n            .addClass(\"track-info\")\n            .hide()\n            .appendTo(settings_td);\n\n        settings_div.append(\n            $(\"<div/>\")\n                .css(\"font-weight\", \"bold\")\n                .text(\"Track Settings\")\n        );\n        settings.get(\"inputs\").each(function(input) {\n            settings_div.append(\n                input.get(\"label\") + \": \" + values[input.get(\"name\")] + \"<br/>\"\n            );\n        });\n        var self = this;\n\n        var run_on_dataset_button = $(\"<button/>\")\n            .appendTo(settings_div)\n            .text(\"Run on complete dataset\")\n            .click(function() {\n                settings_div.toggle();\n                self.trigger(\"run_on_dataset\", settings);\n            });\n\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Settings\",\n                icon_class: \"gear track-settings\",\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: \"Remove\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    self.$el.remove();\n                    $(\".tooltip\").remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get(\"regions\").each(function() {\n            self.$el.append(\n                $(\"<td/>\")\n                    .addClass(\"tile\")\n                    .html(\n                        $(\"<img/>\").attr(\n                            \"src\",\n                            Galaxy.root + \"images/loading_large_white_bg.gif\"\n                        )\n                    )\n            );\n        });\n\n        if (this.model.get(\"track\")) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this;\n        var track = this.model.get(\"track\");\n        var regions = this.model.get(\"regions\");\n        var tile_containers = this.$el.find(\"td.tile\");\n\n        // Do nothing if track is not defined.\n        if (!track) {\n            return;\n        }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(function(data_ok) {\n            // Draw tile for each region.\n            regions.each(function(region, index) {\n                var resolution = region.length() / self.TILE_LEN;\n                var w_scale = 1 / resolution;\n                var mode = self.model.get(\"mode\");\n                $.when(\n                    track.data_manager.get_data(region, mode, resolution, {})\n                ).then(function(tile_data) {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(\n                        tile_data,\n                        mode,\n                        w_scale,\n                        canvas.width\n                    );\n                    track.draw_tile(\n                        tile_data,\n                        canvas.getContext(\"2d\"),\n                        mode,\n                        region,\n                        w_scale\n                    );\n                    $(tile_containers[index])\n                        .empty()\n                        .append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n    // Template for rendering sweep inputs:\n    number_input_template:\n        '<div class=\"form-row-input sweep\">' +\n        '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n        '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n        ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n        \"</div>\",\n\n    select_input_template:\n        '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model;\n        var type = input.get(\"type\");\n        var single_input_row = this.$el.find(\".form-row-input\");\n        var sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(\":input\").change(function() {\n            input.set(\"value\", $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $(\n                _.template(this.number_input_template)(this.model.toJSON())\n            );\n        } else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find(\"select option\"), function(\n                option\n            ) {\n                return $(option).val();\n            });\n\n            var options_text = options.join(\", \");\n            sweep_inputs_row = $(\n                _.template(this.select_input_template)({\n                    options: options_text\n                })\n            );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    title: \"Add parameter to tree\",\n                    icon_class: \"plus-button\",\n                    on_click: function() {\n                        input.set(\"in_ptree\", true);\n                        single_input_row.hide();\n                        sweep_inputs_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.toggle\").show();\n                    }\n                },\n                {\n                    title: \"Remove parameter from tree\",\n                    icon_class: \"toggle\",\n                    on_click: function() {\n                        // Remove parameter from tree params where name matches clicked paramter.\n                        input.set(\"in_ptree\", false);\n                        sweep_inputs_row.hide();\n                        single_input_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.plus-button\").show();\n                    }\n                }\n            ],\n            {}\n        );\n\n        this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get(\"in_ptree\")) {\n            single_input_row.hide();\n            self.$el.find(\".icon-button.plus-button\").hide();\n        } else {\n            self.$el.find(\".icon-button.toggle\").hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each([\"min\", \"max\", \"num_samples\"], function(attr) {\n            sweep_inputs_row.find(\".\" + attr).change(function() {\n                input.set(attr, parseFloat($(this).val()));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: \"tree-design\",\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get(\"tool\")\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this;\n\n        var inputs = self.model.get(\"tool\").get(\"inputs\");\n        this.$el\n            .find(\".form-row\")\n            .not(\".form-actions\")\n            .each(function(i) {\n                var input_view = new ToolInputValOrSweepView({\n                    model: inputs.at(i),\n                    tool_row: $(this)\n                });\n            });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: \"tool-parameter-tree\",\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on(\"change:tree_data\", this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster().size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal().projection(function(d) {\n            return [d.y, d.x];\n        });\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, function(param, index) {\n            var x = param_depths[index + 1];\n            var center_left = $(\"#center\").position().left;\n            self.$el.append(\n                $(\"<div>\")\n                    .addClass(\"label\")\n                    .text(param.get(\"label\"))\n                    .css(\"left\", x + center_left)\n            );\n        });\n\n        // Set up vis element.\n        var vis = d3\n            .select(this.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis\n            .selectAll(\"path.link\")\n            .data(cluster.links(nodes))\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis\n            .selectAll(\"g.node\")\n            .data(nodes)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + d.y + \",\" + d.x + \")\";\n            })\n            .on(\"mouseover\", function(a_node) {\n                var connected_node_ids = _.pluck(\n                    self.model.get_connected_nodes(a_node),\n                    \"id\"\n                );\n                // TODO: probably can use enter() to do this more easily.\n                node\n                    .filter(function(d) {\n                        return (\n                            _.find(connected_node_ids, function(id) {\n                                return id === d.id;\n                            }) !== undefined\n                        );\n                    })\n                    .style(\"fill\", \"#f00\");\n            })\n            .on(\"mouseout\", function() {\n                node.style(\"fill\", \"#000\");\n            });\n\n        node.append(\"circle\").attr(\"r\", 9);\n\n        node\n            .append(\"text\")\n            .attr(\"dx\", function(d) {\n                return d.children ? -12 : 12;\n            })\n            .attr(\"dy\", 3)\n            .attr(\"text-anchor\", function(d) {\n                return d.children ? \"end\" : \"start\";\n            })\n            .text(function(d) {\n                return d.name;\n            });\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: \"Sweepster\",\n\n    helpText:\n        \"<div><h4>Getting Started</h4>\" +\n        \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n        \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n        \"<li>Run the tool with different settings by clicking on tree nodes\" +\n        \"</ol></div>\",\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(\n            this.$el.parents(\"body\")\n        );\n        this.tool_param_tree_view = new ToolParameterTreeView({\n            model: this.model.get(\"parameter_tree\")\n        });\n        this.track_collection_container = $(\"<table/>\").addClass(\"tracks\");\n\n        // Handle node clicks for tree data.\n        this.model\n            .get(\"parameter_tree\")\n            .on(\"change:tree_data\", this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get(\"tracks\").each(function(track) {\n            track.get(\"track\").view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\"\n                }\n            ],\n            {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get(\"parameter_tree\")\n        });\n\n        $(\"#left\").append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this;\n\n        var regions = self.model.get(\"regions\");\n        var tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n        regions.each(function(region) {\n            tr.append($(\"<th>\").text(region.toString()));\n        });\n        tr\n            .children()\n            .first()\n            .attr(\"colspan\", 2);\n\n        var tracks_div = $(\"<div>\").addClass(\"tiles\");\n        $(\"#right\").append(tracks_div.append(this.track_collection_container));\n\n        self.model.get(\"tracks\").each(function(track) {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass(\"help\");\n\n        var close_button = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Close\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    $(\".tooltip\").remove();\n                    help_div.remove();\n                }\n            }\n        ]);\n\n        help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n        $(\"#center\").append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $(\"#center\").append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Set display mode\"\n                },\n                // Close viz.\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        window.location =\n                            \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n        var modes = [\"Squish\", \"Pack\"];\n\n        var mode_mapping = {};\n        _.each(modes, function(mode) {\n            mode_mapping[mode] = function() {\n                self.model.set(\"default_mode\", mode);\n                self.model.get(\"tracks\").each(function(track) {\n                    track.set(\"mode\", mode);\n                });\n            };\n        });\n\n        make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(base.toLowerCase() + \"_color\") ||\n            this.config.get_value(\"n_color\")\n        );\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get(\"tool\");\n        var tool_name = tool.get(\"name\");\n        var dataset = this.model.get(\"dataset\");\n        tool.set_input_values(settings.get(\"values\"));\n        $.when(tool.rerun(dataset)).then(function(outputs) {\n            // TODO.\n        });\n\n        show_modal(\n            \"Running \" + tool_name + \" on complete dataset\",\n            tool_name +\n                \" is running on dataset '\" +\n                dataset.get(\"name\") +\n                \"'. Outputs are in the dataset's history.\",\n            {\n                Ok: function() {\n                    hide_modal();\n                }\n            }\n        );\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this;\n        var param_tree = this.model.get(\"parameter_tree\");\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(\n            function() {\n                var settings_leaf = param_tree.get_leaf(\n                    pm_track.get(\"settings\").get(\"values\")\n                );\n                var connected_node_ids = _.pluck(\n                    param_tree.get_connected_nodes(settings_leaf),\n                    \"id\"\n                );\n\n                // TODO: can do faster with enter?\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .filter(function(d) {\n                        return (\n                            _.find(connected_node_ids, function(id) {\n                                return id === d.id;\n                            }) !== undefined\n                        );\n                    })\n                    .style(\"fill\", \"#f00\");\n            },\n            function() {\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .style(\"fill\", \"#000\");\n            }\n        );\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this;\n\n        var param_tree = this.model.get(\"parameter_tree\");\n        var regions = this.model.get(\"regions\");\n\n        var node = d3\n            .select(this.tool_param_tree_view.$el[0])\n            .selectAll(\"g.node\");\n\n        node.on(\"click\", function(d, i) {\n            // Get all settings corresponding to node.\n            var tool = self.model.get(\"tool\");\n\n            var dataset = self.model.get(\"dataset\");\n            var all_settings = param_tree.get_node_settings(d);\n            var run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\n                    \"Whoa there cowboy!\",\n                    \"You clicked on a node to try \" +\n                        self.model.get(\"tool\").get(\"name\") +\n                        \" with \" +\n                        all_settings.length +\n                        \" different combinations of settings. You can only run 10 jobs at a time.\",\n                    {\n                        Ok: function() {\n                            hide_modal();\n                            run_jobs_deferred.resolve(false);\n                        }\n                    }\n                );\n            } else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(function(run_jobs) {\n                if (!run_jobs) {\n                    return;\n                }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, function(settings) {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get(\"default_mode\")\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, function(pm_track, index) {\n                    setTimeout(function() {\n                        // Set inputs and run tool.\n                        tool.set_input_values(\n                            pm_track.get(\"settings\").get(\"values\")\n                        );\n                        $.when(tool.rerun(dataset, regions)).then(function(\n                            output\n                        ) {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first();\n\n                            var track_config = dataset.get(\"track_config\");\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(\n                                track_config,\n                                self,\n                                null\n                            );\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set(\"track\", track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nexport default {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n"]}