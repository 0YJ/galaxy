{"version":3,"sources":["viz/sweepster.js"],"names":["_","d3","ToolInputsSettings","Backbone","Model","extend","defaults","inputs","values","ToolParameterTree","tool","tree_data","initialize","options","self","this","get","each","input","on","set_tree_data","add_param","remove_param","config","input_config","name","set","param","get_tree_params","length","index","params_samples","map","samples","get_samples","node_id","id","children","create_tree_data","param_samples","settings","setting","get_num_leaves","reduce","memo","get_node_settings","target_node","get_inputs_dict","cur_node","parent","depth","fixed_settings","value","all_settings","get_settings","node","flatten","c","isArray","get_connected_nodes","parents","cur_parent","push","get_subtree_nodes","a_node","get_leaf","find","child","find_child","toJSON","min","max","SweepsterTrack","track","mode","regions","track_config","data_url","Galaxy","root","converted_datasets_state_url","num_samples","same_settings","a_track","this_settings","prop","other_settings","to_dict","TrackCollection","model","SweepsterVisualization","_visualization2","default","Visualization","prototype","default_mode","Collection","dataset","GenomeRegionCollection","tracks","tool_with_samplable_inputs","parameter_tree","remove_inputs","tree_config","add_track","add","dataset_id","title","type","SweepsterTrackView","View","tagName","TILE_LEN","canvas_manager","draw_tiles","render","settings_td","addClass","appendTo","settings_div","hide","css","run_on_dataset_button","trigger","icon_menu","$","on_click","click","toggle","create_icon_buttons_menu","icon_class","$el","remove","prepend","tile_containers","html","attr","ToolInputValOrSweepView","data_ok","number_input_template","resolution","region","select_input_template","get_data","tile_data","canvas","new_canvas","width","height","get_canvas_height","single_input_row","sweep_inputs_row","draw_tile","getContext","w_scale","tool_row","show","change","val","_tools2","IntegerToolParameter","SelectToolParameter","option","join","options_text","insertAfter","menu","tool_form_view","append","input_view","parseFloat","ToolParameterTreeDesignView","className","cluster","nodes","ToolFormView","param_depths","tree_params","vis","not","i","selectAll","at","ToolParameterTreeView","undefined","style","SweepsterVisualizationView","helpText","layout","size","svg","diagonal","d","y","x","uniq","pluck","center_left","position","left","view","label","default_value","key","links","filter","connected_node_ids","text","help_div","close_button","tool_param_tree_view","_config2","ConfigSettingCollection","from_models_and_saved_values","tooltip_config","mode_mapping","modes","tree_design_view","get_base_color","tool_name","set_input_values","when","rerun","then","tr","toString","Ok","hide_modal","first","tracks_div","track_collection_container","pm_track","track_view","settings_leaf","select","handle_node_clicks","_iconButton2","run_jobs_deferred","window","location","placement","base","get_value","track_obj","init_for_tool_data","outputs","show_modal","param_tree","run_tool_on_dataset","hover","Deferred","resolve","run_jobs","new_tracks","setTimeout","output","prefs","to_key_value_dict","_tracks2","object_from_template"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\nimport * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport util from \"viz/trackster/util\";\nimport visualization from \"viz/visualization\";\nimport tracks from \"viz/trackster/tracks\";\nimport tools from \"mvc/tool/tools\";\nimport data from \"mvc/dataset/data\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get(\"tool\")\n            .get(\"inputs\")\n            .each(input => {\n                // Listen for changes to input's attributes.\n                input.on(\n                    \"change:min change:max change:num_samples\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.set_tree_data();\n                        }\n                    },\n                    self\n                );\n                input.on(\n                    \"change:in_ptree\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.add_param(input);\n                        } else {\n                            self.remove_param(input);\n                        }\n                        self.set_tree_data();\n                    },\n                    self\n                );\n            });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, input_config => {\n                var input = self\n                    .get(\"tool\")\n                    .get(\"inputs\")\n                    .find(input => input.get(\"name\") === input_config.name);\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get(\"ptree_index\")) {\n            return;\n        }\n\n        param.set(\"in_ptree\", true);\n        param.set(\"ptree_index\", this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set(\"in_ptree\", false);\n        param.set(\"ptree_index\", null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each((input, index) => {\n            // +1 to use 1-based indexing.\n            input.set(\"ptree_index\", index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), param => ({\n            param: param,\n            samples: param.get_samples()\n        }));\n        var node_id = 0;\n\n        var // Creates tree data recursively.\n        create_tree_data = (params_samples, index) => {\n            var param_samples = params_samples[index],\n                param = param_samples.param,\n                param_label = param.get(\"label\"),\n                settings = param_samples.samples;\n\n            // Create leaves when last parameter setting is reached.\n            if (params_samples.length - 1 === index) {\n                return _.map(settings, setting => ({\n                    id: node_id++,\n                    name: setting,\n                    param: param,\n                    value: setting\n                }));\n            }\n\n            // Recurse to handle other parameters.\n            return _.map(settings, setting => ({\n                id: node_id++,\n                name: setting,\n                param: param,\n                value: setting,\n                children: create_tree_data(params_samples, index + 1)\n            }));\n        };\n\n        this.set(\"tree_data\", {\n            name: \"Root\",\n            id: node_id++,\n            children:\n                params_samples.length !== 0\n                    ? create_tree_data(params_samples, 0)\n                    : null\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(\n            this.get(\"tool\")\n                .get(\"inputs\")\n                .where({ in_ptree: true })\n        ).sortBy(input => input.get(\"ptree_index\"));\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce(\n            (memo, param) => memo * param.get_samples().length,\n            1\n        );\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while (cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get(\"name\")] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this;\n\n        var get_settings = (node, settings) => {\n            // Add setting for this node. Root node does not have a param,\n            // however.\n            if (node.param) {\n                settings[node.param.get(\"name\")] = node.value;\n            }\n\n            if (!node.children) {\n                // At leaf node, so return settings.\n                return new ToolInputsSettings({\n                    inputs: self.get(\"tool\").get(\"inputs\"),\n                    values: settings\n                });\n            } else {\n                // At interior node: return list of subtree settings.\n                return _.flatten(\n                    _.map(node.children, c =>\n                        get_settings(c, _.clone(settings))\n                    )\n                );\n            }\n        };\n\n        var all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) {\n            all_settings = [all_settings];\n        }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = a_node => {\n            if (!a_node.children) {\n                return a_node;\n            } else {\n                // At interior node: return subtree nodes.\n                return _.flatten([\n                    a_node,\n                    _.map(a_node.children, c => get_subtree_nodes(c))\n                ]);\n            }\n        };\n\n        // Get node's parents.\n        var parents = [];\n\n        var cur_parent = node.parent;\n        while (cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get(\"tree_data\");\n\n        var find_child = children =>\n            _.find(\n                children,\n                child => settings[child.param.get(\"name\")] === child.value\n            );\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(param => ({\n            name: param.get(\"name\"),\n            min: param.get(\"min\"),\n            max: param.get(\"max\"),\n            num_samples: param.get(\"num_samples\")\n        }));\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: \"Pack\",\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set(\"regions\", options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend(\n                {\n                    data_url: Galaxy.root + \"dummy1\",\n                    converted_datasets_state_url: Galaxy.root + \"dummy2\"\n                },\n                options.track\n            );\n            this.set(\n                \"track\",\n                tracks.object_from_template(track_config, {}, null)\n            );\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get(\"settings\");\n        var other_settings = a_track.get(\"settings\");\n        for (var prop in this_settings) {\n            if (\n                !other_settings[prop] ||\n                this_settings[prop] !== other_settings[prop]\n            ) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get(\"track\").to_dict(),\n            settings: this.get(\"settings\"),\n            regions: this.get(\"regions\")\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: \"Pack\"\n    }),\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data.Dataset(options.dataset));\n        this.set(\"tool\", new tools.Tool(options.tool));\n        this.set(\n            \"regions\",\n            new visualization.GenomeRegionCollection(options.regions)\n        );\n        this.set(\"tracks\", new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get(\"tool\");\n        this.set(\"tool_with_samplable_inputs\", tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs([\n            \"data\",\n            \"hidden_data\",\n            \"conditional\",\n            \"text\"\n        ]);\n\n        this.set(\n            \"parameter_tree\",\n            new ToolParameterTree({\n                tool: tool_with_samplable_inputs,\n                config: options.tree_config\n            })\n        );\n    },\n\n    add_track: function(track) {\n        this.get(\"tracks\").add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get(\"id\"),\n            title:\n                \"Parameter exploration for dataset '\" +\n                this.get(\"dataset\").get(\"name\") +\n                \"'\",\n            type: \"sweepster\",\n            dataset_id: this.get(\"dataset\").id,\n            tool_id: this.get(\"tool\").id,\n            regions: this.get(\"regions\").toJSON(),\n            tree_config: this.get(\"parameter_tree\").toJSON(),\n            tracks: this.get(\"tracks\").toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: \"tr\",\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on(\"change:track change:mode\", this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get(\"settings\");\n\n        var values = settings.get(\"values\");\n\n        var settings_td = $(\"<td/>\")\n            .addClass(\"settings\")\n            .appendTo(this.$el);\n\n        var settings_div = $(\"<div/>\")\n            .addClass(\"track-info\")\n            .hide()\n            .appendTo(settings_td);\n\n        settings_div.append(\n            $(\"<div/>\")\n                .css(\"font-weight\", \"bold\")\n                .text(\"Track Settings\")\n        );\n        settings.get(\"inputs\").each(input => {\n            settings_div.append(\n                input.get(\"label\") + \": \" + values[input.get(\"name\")] + \"<br/>\"\n            );\n        });\n        var self = this;\n\n        var run_on_dataset_button = $(\"<button/>\")\n            .appendTo(settings_div)\n            .text(\"Run on complete dataset\")\n            .click(() => {\n                settings_div.toggle();\n                self.trigger(\"run_on_dataset\", settings);\n            });\n\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Settings\",\n                icon_class: \"gear track-settings\",\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: \"Remove\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    self.$el.remove();\n                    $(\".tooltip\").remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get(\"regions\").each(() => {\n            self.$el.append(\n                $(\"<td/>\")\n                    .addClass(\"tile\")\n                    .html(\n                        $(\"<img/>\").attr(\n                            \"src\",\n                            Galaxy.root + \"images/loading_large_white_bg.gif\"\n                        )\n                    )\n            );\n        });\n\n        if (this.model.get(\"track\")) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this;\n        var track = this.model.get(\"track\");\n        var regions = this.model.get(\"regions\");\n        var tile_containers = this.$el.find(\"td.tile\");\n\n        // Do nothing if track is not defined.\n        if (!track) {\n            return;\n        }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(data_ok => {\n            // Draw tile for each region.\n            regions.each((region, index) => {\n                var resolution = region.length() / self.TILE_LEN;\n                var w_scale = 1 / resolution;\n                var mode = self.model.get(\"mode\");\n                $.when(\n                    track.data_manager.get_data(region, mode, resolution, {})\n                ).then(tile_data => {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(\n                        tile_data,\n                        mode,\n                        w_scale,\n                        canvas.width\n                    );\n                    track.draw_tile(\n                        tile_data,\n                        canvas.getContext(\"2d\"),\n                        mode,\n                        region,\n                        w_scale\n                    );\n                    $(tile_containers[index])\n                        .empty()\n                        .append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n    // Template for rendering sweep inputs:\n    number_input_template:\n        '<div class=\"form-row-input sweep\">' +\n        '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n        '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n        ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n        \"</div>\",\n\n    select_input_template:\n        '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model;\n        var type = input.get(\"type\");\n        var single_input_row = this.$el.find(\".form-row-input\");\n        var sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(\":input\").change(function() {\n            input.set(\"value\", $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $(\n                _.template(this.number_input_template)(this.model.toJSON())\n            );\n        } else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find(\"select option\"), option =>\n                $(option).val()\n            );\n\n            var options_text = options.join(\", \");\n            sweep_inputs_row = $(\n                _.template(this.select_input_template)({\n                    options: options_text\n                })\n            );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    title: \"Add parameter to tree\",\n                    icon_class: \"plus-button\",\n                    on_click: function() {\n                        input.set(\"in_ptree\", true);\n                        single_input_row.hide();\n                        sweep_inputs_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.toggle\").show();\n                    }\n                },\n                {\n                    title: \"Remove parameter from tree\",\n                    icon_class: \"toggle\",\n                    on_click: function() {\n                        // Remove parameter from tree params where name matches clicked paramter.\n                        input.set(\"in_ptree\", false);\n                        sweep_inputs_row.hide();\n                        single_input_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.plus-button\").show();\n                    }\n                }\n            ],\n            {}\n        );\n\n        this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get(\"in_ptree\")) {\n            single_input_row.hide();\n            self.$el.find(\".icon-button.plus-button\").hide();\n        } else {\n            self.$el.find(\".icon-button.toggle\").hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each([\"min\", \"max\", \"num_samples\"], attr => {\n            sweep_inputs_row.find(\".\" + attr).change(function() {\n                input.set(attr, parseFloat($(this).val()));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: \"tree-design\",\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get(\"tool\")\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this;\n\n        var inputs = self.model.get(\"tool\").get(\"inputs\");\n        this.$el\n            .find(\".form-row\")\n            .not(\".form-actions\")\n            .each(function(i) {\n                var input_view = new ToolInputValOrSweepView({\n                    model: inputs.at(i),\n                    tool_row: $(this)\n                });\n            });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: \"tool-parameter-tree\",\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on(\"change:tree_data\", this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster().size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, (param, index) => {\n            var x = param_depths[index + 1];\n            var center_left = $(\"#center\").position().left;\n            self.$el.append(\n                $(\"<div>\")\n                    .addClass(\"label\")\n                    .text(param.get(\"label\"))\n                    .css(\"left\", x + center_left)\n            );\n        });\n\n        // Set up vis element.\n        var vis = d3\n            .select(this.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis\n            .selectAll(\"path.link\")\n            .data(cluster.links(nodes))\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis\n            .selectAll(\"g.node\")\n            .data(nodes)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", d => \"translate(\" + d.y + \",\" + d.x + \")\")\n            .on(\"mouseover\", a_node => {\n                var connected_node_ids = _.pluck(\n                    self.model.get_connected_nodes(a_node),\n                    \"id\"\n                );\n                // TODO: probably can use enter() to do this more easily.\n                node\n                    .filter(\n                        d =>\n                            _.find(connected_node_ids, id => id === d.id) !==\n                            undefined\n                    )\n                    .style(\"fill\", \"#f00\");\n            })\n            .on(\"mouseout\", () => {\n                node.style(\"fill\", \"#000\");\n            });\n\n        node.append(\"circle\").attr(\"r\", 9);\n\n        node\n            .append(\"text\")\n            .attr(\"dx\", d => (d.children ? -12 : 12))\n            .attr(\"dy\", 3)\n            .attr(\"text-anchor\", d => (d.children ? \"end\" : \"start\"))\n            .text(d => d.name);\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: \"Sweepster\",\n\n    helpText:\n        \"<div><h4>Getting Started</h4>\" +\n        \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n        \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n        \"<li>Run the tool with different settings by clicking on tree nodes\" +\n        \"</ol></div>\",\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(\n            this.$el.parents(\"body\")\n        );\n        this.tool_param_tree_view = new ToolParameterTreeView({\n            model: this.model.get(\"parameter_tree\")\n        });\n        this.track_collection_container = $(\"<table/>\").addClass(\"tracks\");\n\n        // Handle node clicks for tree data.\n        this.model\n            .get(\"parameter_tree\")\n            .on(\"change:tree_data\", this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get(\"tracks\").each(track => {\n            track.get(\"track\").view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\"\n                }\n            ],\n            {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get(\"parameter_tree\")\n        });\n\n        $(\"#left\").append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this;\n\n        var regions = self.model.get(\"regions\");\n        var tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n        regions.each(region => {\n            tr.append($(\"<th>\").text(region.toString()));\n        });\n        tr\n            .children()\n            .first()\n            .attr(\"colspan\", 2);\n\n        var tracks_div = $(\"<div>\").addClass(\"tiles\");\n        $(\"#right\").append(tracks_div.append(this.track_collection_container));\n\n        self.model.get(\"tracks\").each(track => {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass(\"help\");\n\n        var close_button = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Close\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    $(\".tooltip\").remove();\n                    help_div.remove();\n                }\n            }\n        ]);\n\n        help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n        $(\"#center\").append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $(\"#center\").append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Set display mode\"\n                },\n                // Close viz.\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        window.location =\n                            \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n        var modes = [\"Squish\", \"Pack\"];\n\n        var mode_mapping = {};\n        _.each(modes, mode => {\n            mode_mapping[mode] = () => {\n                self.model.set(\"default_mode\", mode);\n                self.model.get(\"tracks\").each(track => {\n                    track.set(\"mode\", mode);\n                });\n            };\n        });\n\n        make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(base.toLowerCase() + \"_color\") ||\n            this.config.get_value(\"n_color\")\n        );\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get(\"tool\");\n        var tool_name = tool.get(\"name\");\n        var dataset = this.model.get(\"dataset\");\n        tool.set_input_values(settings.get(\"values\"));\n        $.when(tool.rerun(dataset)).then(outputs => {\n            // TODO.\n        });\n\n        show_modal(\n            \"Running \" + tool_name + \" on complete dataset\",\n            tool_name +\n                \" is running on dataset '\" +\n                dataset.get(\"name\") +\n                \"'. Outputs are in the dataset's history.\",\n            {\n                Ok: function() {\n                    hide_modal();\n                }\n            }\n        );\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this;\n        var param_tree = this.model.get(\"parameter_tree\");\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(\n            () => {\n                var settings_leaf = param_tree.get_leaf(\n                    pm_track.get(\"settings\").get(\"values\")\n                );\n                var connected_node_ids = _.pluck(\n                    param_tree.get_connected_nodes(settings_leaf),\n                    \"id\"\n                );\n\n                // TODO: can do faster with enter?\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .filter(\n                        d =>\n                            _.find(connected_node_ids, id => id === d.id) !==\n                            undefined\n                    )\n                    .style(\"fill\", \"#f00\");\n            },\n            () => {\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .style(\"fill\", \"#000\");\n            }\n        );\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this;\n\n        var param_tree = this.model.get(\"parameter_tree\");\n        var regions = this.model.get(\"regions\");\n\n        var node = d3\n            .select(this.tool_param_tree_view.$el[0])\n            .selectAll(\"g.node\");\n\n        node.on(\"click\", (d, i) => {\n            // Get all settings corresponding to node.\n            var tool = self.model.get(\"tool\");\n\n            var dataset = self.model.get(\"dataset\");\n            var all_settings = param_tree.get_node_settings(d);\n            var run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\n                    \"Whoa there cowboy!\",\n                    \"You clicked on a node to try \" +\n                        self.model.get(\"tool\").get(\"name\") +\n                        \" with \" +\n                        all_settings.length +\n                        \" different combinations of settings. You can only run 10 jobs at a time.\",\n                    {\n                        Ok: function() {\n                            hide_modal();\n                            run_jobs_deferred.resolve(false);\n                        }\n                    }\n                );\n            } else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(run_jobs => {\n                if (!run_jobs) {\n                    return;\n                }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, settings => {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get(\"default_mode\")\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, (pm_track, index) => {\n                    setTimeout(() => {\n                        // Set inputs and run tool.\n                        tool.set_input_values(\n                            pm_track.get(\"settings\").get(\"values\")\n                        );\n                        $.when(tool.rerun(dataset, regions)).then(output => {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first();\n\n                            var track_config = dataset.get(\"track_config\");\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(\n                                track_config,\n                                self,\n                                null\n                            );\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set(\"track\", track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nexport default {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n"]}