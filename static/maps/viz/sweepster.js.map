{"version":3,"sources":["viz/sweepster.js"],"names":["define","_","d3","util","visualization","tracks","tools","data","config","mod_icon_btn","ToolInputsSettings","Backbone","Model","extend","defaults","inputs","values","ToolParameterTree","tool","tree_data","initialize","options","self","this","get","each","input","on","set_tree_data","add_param","remove_param","input_config","find","name","set","param","get_tree_params","length","index","params_samples","map","samples","get_samples","node_id","create_tree_data","param_samples","settings","setting","id","value","children","where","in_ptree","sortBy","get_num_leaves","reduce","memo","get_node_settings","target_node","fixed_settings","get_inputs_dict","cur_node","parent","depth","get_settings","node","flatten","c","clone","all_settings","isArray","get_connected_nodes","get_subtree_nodes","a_node","parents","cur_parent","push","get_leaf","child","toJSON","min","max","num_samples","SweepsterTrack","track","mode","regions","track_config","data_url","Galaxy","root","converted_datasets_state_url","object_from_template","same_settings","a_track","this_settings","other_settings","prop","to_dict","TrackCollection","Collection","model","SweepsterVisualization","Visualization","prototype","dataset","parameter_tree","default_mode","Dataset","Tool","GenomeRegionCollection","tool_with_samplable_inputs","remove_inputs","tree_config","add_track","add","title","type","dataset_id","tool_id","SweepsterTrackView","View","tagName","TILE_LEN","canvas_manager","render","draw_tiles","settings_td","$","addClass","appendTo","$el","settings_div","hide","append","css","text","icon_menu","click","toggle","trigger","create_icon_buttons_menu","icon_class","on_click","remove","prepend","html","attr","tile_containers","when","data_manager","data_is_ready","then","data_ok","region","resolution","w_scale","get_data","tile_data","canvas","new_canvas","width","height","get_canvas_height","draw_tile","getContext","empty","ToolInputValOrSweepView","number_input_template","select_input_template","tool_row","single_input_row","sweep_inputs_row","change","val","IntegerToolParameter","template","SelectToolParameter","option","options_text","join","insertAfter","menu","show","parseFloat","ToolParameterTreeDesignView","className","tool_form_view","ToolFormView","not","i","at","ToolParameterTreeView","tree_params","cluster","layout","size","diagonal","svg","projection","d","y","x","nodes","param_depths","uniq","pluck","center_left","position","left","vis","select","selectAll","links","enter","connected_node_ids","filter","undefined","style","SweepsterVisualizationView","helpText","CanvasManager","tool_param_tree_view","track_collection_container","handle_node_clicks","view","ConfigSettingCollection","from_models_and_saved_values","key","label","default_value","tree_design_view","tr","toString","first","tracks_div","help_div","close_button","window","location","tooltip_config","placement","modes","mode_mapping","make_popupmenu","get_base_color","base","get_value","toLowerCase","run_tool_on_dataset","tool_name","set_input_values","rerun","outputs","show_modal","Ok","hide_modal","pm_track","param_tree","track_view","hover","settings_leaf","run_jobs_deferred","Deferred","resolve","run_jobs","new_tracks","setTimeout","output","prefs","to_key_value_dict","track_obj","init_for_tool_data"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\ndefine([\n    \"libs/underscore\",\n    \"libs/d3\",\n    \"viz/trackster/util\",\n    \"viz/visualization\",\n    \"viz/trackster/tracks\",\n    \"mvc/tool/tools\",\n    \"mvc/dataset/data\",\n    \"utils/config\",\n    \"mvc/ui/icon-button\"\n\n], function(_, d3, util, visualization, tracks, tools, data, config, mod_icon_btn) {\n\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get('tool').get('inputs').each(function(input) {\n            // Listen for changes to input's attributes.\n            input.on('change:min change:max change:num_samples', function(input) {\n                if (input.get('in_ptree')) {\n                    self.set_tree_data();\n                }\n            }, self);\n            input.on('change:in_ptree', function(input) {\n                if (input.get('in_ptree')) {\n                    self.add_param(input);\n                }\n                else {\n                    self.remove_param(input);\n                }\n                self.set_tree_data();\n            }, self);\n        });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, function(input_config) {\n                var input = self.get('tool').get('inputs').find(function(input) {\n                    return input.get('name') === input_config.name;\n                });\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get('ptree_index')) { return; }\n\n        param.set('in_ptree', true);\n        param.set('ptree_index', this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set('in_ptree', false);\n        param.set('ptree_index', null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each(function(input, index) {\n            // +1 to use 1-based indexing.\n            input.set('ptree_index', index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), function(param) {\n                return {\n                    param: param,\n                    samples: param.get_samples()\n                };\n            });\n        var node_id = 0,\n            // Creates tree data recursively.\n            create_tree_data = function(params_samples, index) {\n                var param_samples = params_samples[index],\n                    param = param_samples.param,\n                    param_label = param.get('label'),\n                    settings = param_samples.samples;\n\n                // Create leaves when last parameter setting is reached.\n                if (params_samples.length - 1 === index) {\n                    return _.map(settings, function(setting) {\n                        return {\n                            id: node_id++,\n                            name: setting,\n                            param: param,\n                            value: setting\n                        };\n                    });\n                }\n\n                // Recurse to handle other parameters.\n                return _.map(settings, function(setting) {\n                    return {\n                        id: node_id++,\n                        name: setting,\n                        param: param,\n                        value: setting,\n                        children: create_tree_data(params_samples, index + 1)\n                    };\n                });\n            };\n\n        this.set('tree_data', {\n            name: 'Root',\n            id: node_id++,\n            children: (params_samples.length !== 0 ? create_tree_data(params_samples, 0) : null)\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(this.get('tool').get('inputs').where( {in_ptree: true} ))\n                 .sortBy( function(input) { return input.get('ptree_index'); } );\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce(function(memo, param) { return memo * param.get_samples().length; }, 1);\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get('tool').get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while(cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get('name')] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this,\n            get_settings = function(node, settings) {\n                // Add setting for this node. Root node does not have a param,\n                // however.\n                if (node.param) {\n                    settings[node.param.get('name')] = node.value;\n                }\n\n                if (!node.children) {\n                    // At leaf node, so return settings.\n                    return new ToolInputsSettings({\n                        inputs: self.get('tool').get('inputs'),\n                        values: settings\n                    });\n                }\n                else {\n                    // At interior node: return list of subtree settings.\n                    return _.flatten( _.map(node.children, function(c) { return get_settings(c, _.clone(settings)); }) );\n                }\n            },\n            all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) { all_settings = [ all_settings ]; }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = function(a_node) {\n            if (!a_node.children) {\n                return a_node;\n            }\n            else {\n                // At interior node: return subtree nodes.\n                return _.flatten( [a_node, _.map(a_node.children, function(c) { return get_subtree_nodes(c); })] );\n            }\n        };\n\n        // Get node's parents.\n        var parents = [],\n            cur_parent = node.parent;\n        while(cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get('tree_data'),\n            find_child = function(children) {\n                return _.find(children, function(child) {\n                    return settings[child.param.get('name')] === child.value;\n                });\n            };\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(function(param) {\n            return {\n                name: param.get('name'),\n                min: param.get('min'),\n                max: param.get('max'),\n                num_samples: param.get('num_samples')\n            };\n        });\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: 'Pack',\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set('regions', options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend({\n                                    data_url: Galaxy.root + 'dummy1',\n                                    converted_datasets_state_url: Galaxy.root + 'dummy2'\n                                }, options.track);\n            this.set('track', tracks.object_from_template(track_config, {}, null));\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get('settings'),\n            other_settings = a_track.get('settings');\n        for (var prop in this_settings) {\n            if (!other_settings[prop] ||\n                this_settings[prop] !== other_settings[prop]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get('track').to_dict(),\n            settings: this.get('settings'),\n            regions: this.get('regions')\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: 'Pack'\n    }),\n\n    initialize: function(options) {\n        this.set('dataset', new data.Dataset(options.dataset));\n        this.set('tool', new tools.Tool(options.tool));\n        this.set('regions', new visualization.GenomeRegionCollection(options.regions));\n        this.set('tracks', new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get('tool');\n        this.set('tool_with_samplable_inputs', tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs( [ 'data', 'hidden_data', 'conditional', 'text' ] );\n\n        this.set('parameter_tree', new ToolParameterTree({\n            tool: tool_with_samplable_inputs,\n            config: options.tree_config\n        }));\n    },\n\n    add_track: function(track) {\n        this.get('tracks').add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get('id'),\n            title: 'Parameter exploration for dataset \\''  + this.get('dataset').get('name') + '\\'',\n            type: 'sweepster',\n            dataset_id: this.get('dataset').id,\n            tool_id: this.get('tool').id,\n            regions: this.get('regions').toJSON(),\n            tree_config: this.get('parameter_tree').toJSON(),\n            tracks: this.get('tracks').toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: 'tr',\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on('change:track change:mode', this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get('settings'),\n            values = settings.get('values'),\n            settings_td = $('<td/>').addClass('settings').appendTo(this.$el),\n            settings_div = $('<div/>').addClass('track-info').hide().appendTo(settings_td);\n        settings_div.append( $('<div/>').css('font-weight', 'bold').text('Track Settings') );\n        settings.get('inputs').each(function(input) {\n            settings_div.append( input.get('label') + ': ' + values[input.get('name')] + '<br/>');\n        });\n        var self = this,\n            run_on_dataset_button = $('<button/>').appendTo(settings_div).text('Run on complete dataset').click(function() {\n                settings_div.toggle();\n                self.trigger('run_on_dataset', settings);\n            });\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: 'Settings',\n                icon_class: 'gear track-settings',\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: 'Remove',\n                icon_class: 'cross-circle',\n                on_click: function() {\n                    self.$el.remove();\n                    $('.tooltip').remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get('regions').each(function() {\n            self.$el.append($('<td/>').addClass('tile').html(\n                $('<img/>').attr('src', Galaxy.root + 'images/loading_large_white_bg.gif')\n            ));\n        });\n\n        if (this.model.get('track')) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this,\n            track = this.model.get('track'),\n            regions = this.model.get('regions'),\n            tile_containers = this.$el.find('td.tile');\n\n        // Do nothing if track is not defined.\n        if (!track) { return; }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(function(data_ok) {\n            // Draw tile for each region.\n            regions.each(function(region, index) {\n                var resolution = region.length() / self.TILE_LEN,\n                    w_scale = 1/resolution,\n                    mode = self.model.get('mode');\n                $.when(track.data_manager.get_data(region, mode, resolution, {})).then(function(tile_data) {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(tile_data, mode, w_scale, canvas.width);\n                    track.draw_tile(tile_data, canvas.getContext('2d'), mode, region, w_scale);\n                    $(tile_containers[index]).empty().append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n\n    // Template for rendering sweep inputs:\n    number_input_template: '<div class=\"form-row-input sweep\">' +\n                           '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n                           '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n                           ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n                           '</div>',\n\n    select_input_template: '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model,\n            type = input.get('type'),\n            single_input_row = this.$el.find('.form-row-input'),\n            sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(':input').change(function() {\n            input.set('value', $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $( _.template(this.number_input_template)(this.model.toJSON()) );\n        }\n        else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find('select option'), function(option) {\n                    return $(option).val();\n                }),\n                options_text = options.join(', ');\n            sweep_inputs_row = $( _.template(this.select_input_template)({\n                options: options_text\n            }) );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: 'Add parameter to tree',\n                icon_class: 'plus-button',\n                on_click: function () {\n                    input.set('in_ptree', true);\n                    single_input_row.hide();\n                    sweep_inputs_row.show();\n                    $(this).hide();\n                    self.$el.find('.icon-button.toggle').show();\n                }\n\n            },\n            {\n                title: 'Remove parameter from tree',\n                icon_class: 'toggle',\n                on_click: function() {\n                    // Remove parameter from tree params where name matches clicked paramter.\n                    input.set('in_ptree', false);\n                    sweep_inputs_row.hide();\n                    single_input_row.show();\n                    $(this).hide();\n                    self.$el.find('.icon-button.plus-button').show();\n                }\n            }\n            ],\n            {\n\n            });\n            this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get('in_ptree')) {\n            single_input_row.hide();\n            self.$el.find('.icon-button.plus-button').hide();\n        }\n        else {\n            self.$el.find('.icon-button.toggle').hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each(['min', 'max', 'num_samples'], function(attr) {\n            sweep_inputs_row.find('.' + attr).change(function() {\n                input.set(attr, parseFloat( $(this).val() ));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: 'tree-design',\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get('tool')\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this,\n            inputs = self.model.get('tool').get('inputs');\n        this.$el.find('.form-row').not('.form-actions').each(function(i) {\n            var input_view = new ToolInputValOrSweepView({\n                model: inputs.at(i),\n                tool_row: $(this)\n            });\n        });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: 'tool-parameter-tree',\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on('change:tree_data', this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster()\n            .size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal()\n            .projection(function(d) { return [d.y, d.x]; });\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get('tree_data'));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, function(param, index) {\n            var x = param_depths[index+1],\n                center_left = $('#center').position().left;\n            self.$el.append( $('<div>').addClass('label')\n                                       .text(param.get('label'))\n                                       .css('left', x + center_left) );\n        });\n\n        // Set up vis element.\n        var vis = d3.select(this.$el[0])\n          .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n          .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis.selectAll(\"path.link\")\n          .data(cluster.links(nodes))\n        .enter().append(\"path\")\n          .attr(\"class\", \"link\")\n          .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis.selectAll(\"g.node\")\n          .data(nodes)\n        .enter().append(\"g\")\n          .attr(\"class\", \"node\")\n          .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; })\n          .on('mouseover', function(a_node) {\n            var connected_node_ids = _.pluck(self.model.get_connected_nodes(a_node), 'id');\n            // TODO: probably can use enter() to do this more easily.\n            node.filter(function(d) {\n                return _.find(connected_node_ids, function(id) { return id === d.id; }) !== undefined;\n            }).style('fill', '#f00');\n          })\n          .on('mouseout', function() {\n            node.style('fill', '#000');\n          });\n\n        node.append(\"circle\")\n          .attr(\"r\", 9);\n\n        node.append(\"text\")\n          .attr(\"dx\", function(d) { return d.children ? -12 : 12; })\n          .attr(\"dy\", 3)\n          .attr(\"text-anchor\", function(d) { return d.children ? \"end\" : \"start\"; })\n          .text(function(d) { return d.name; });\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: 'Sweepster',\n\n    helpText:\n        '<div><h4>Getting Started</h4>' +\n        '<ol><li>Create a parameter tree by using the icons next to the tool\\'s parameter names to add or remove parameters.' +\n        '<li>Adjust the tree by using parameter inputs to select min, max, and number of samples' +\n        '<li>Run the tool with different settings by clicking on tree nodes' +\n        '</ol></div>',\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(this.$el.parents('body'));\n        this.tool_param_tree_view = new ToolParameterTreeView({ model: this.model.get('parameter_tree') });\n        this.track_collection_container = $('<table/>').addClass('tracks');\n\n        // Handle node clicks for tree data.\n        this.model.get('parameter_tree').on('change:tree_data', this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get('tracks').each(function(track) {\n            track.get('track').view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                { key: 'name', label: 'Name', type: 'text', default_value: '' },\n                { key: 'a_color', label: 'A Color', type: 'color', default_value: \"#FF0000\" },\n                { key: 'c_color', label: 'C Color', type: 'color', default_value: \"#00FF00\" },\n                { key: 'g_color', label: 'G Color', type: 'color', default_value: \"#0000FF\" },\n                { key: 't_color', label: 'T Color', type: 'color', default_value: \"#FF00FF\" },\n                { key: 'n_color', label: 'N Color', type: 'color', default_value: \"#AAAAAA\" },\n                { key: 'block_color', label: 'Block color', type: 'color' },\n                { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color' },\n            ], {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get('parameter_tree')\n        });\n\n        $('#left').append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this,\n            regions = self.model.get('regions'),\n            tr = $('<tr/>').appendTo(this.track_collection_container);\n\n        regions.each(function(region) {\n            tr.append( $('<th>').text(region.toString()) );\n        });\n        tr.children().first().attr('colspan', 2);\n\n        var tracks_div = $('<div>').addClass('tiles');\n        $('#right').append( tracks_div.append(this.track_collection_container) );\n\n        self.model.get('tracks').each(function(track) {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass('help'),\n            close_button = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: 'Close',\n                icon_class: 'cross-circle',\n                on_click: function() {\n                    $('.tooltip').remove();\n                    help_div.remove();\n                }\n            }\n            ]);\n\n        help_div.prepend(close_button.$el.css('float', 'right'));\n        $('#center').append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $('#center').append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: 'chevron-expand',\n                    title: 'Set display mode'\n                },\n                // Close viz.\n                {\n                    icon_class: 'cross-circle',\n                    title: 'Close',\n                    on_click: function() {\n                        window.location = \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: {placement: 'bottom'}\n            });\n\n            // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n            var modes = ['Squish', 'Pack'],\n                mode_mapping = {};\n            _.each(modes, function(mode) {\n                mode_mapping[mode] = function() {\n                    self.model.set('default_mode', mode);\n                    self.model.get('tracks').each(function(track) {\n                        track.set('mode', mode);\n                    });\n                };\n            });\n\n            make_popupmenu(menu.$el.find('.chevron-expand'), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(base.toLowerCase() + '_color') ||\n               this.config.get_value('n_color');\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get('tool'),\n            tool_name = tool.get('name'),\n            dataset = this.model.get('dataset');\n        tool.set_input_values(settings.get('values'));\n        $.when(tool.rerun(dataset)).then(function(outputs) {\n            // TODO.\n        });\n\n        show_modal('Running ' + tool_name + ' on complete dataset',\n                       tool_name + ' is running on dataset \\'' +\n                       dataset.get('name') + '\\'. Outputs are in the dataset\\'s history.',\n                       {\n                        'Ok': function() { hide_modal(); }\n                       });\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this,\n            param_tree = this.model.get('parameter_tree');\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on('run_on_dataset', self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(function() {\n            var settings_leaf = param_tree.get_leaf(pm_track.get('settings').get('values'));\n            var connected_node_ids = _.pluck(param_tree.get_connected_nodes(settings_leaf), 'id');\n\n            // TODO: can do faster with enter?\n            d3.select(self.tool_param_tree_view.$el[0]).selectAll(\"g.node\")\n            .filter(function(d) {\n                return _.find(connected_node_ids, function(id) { return id === d.id; }) !== undefined;\n            }).style('fill', '#f00');\n        },\n        function() {\n            d3.select(self.tool_param_tree_view.$el[0]).selectAll(\"g.node\").style('fill', '#000');\n        });\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this,\n            param_tree = this.model.get('parameter_tree'),\n            regions = this.model.get('regions'),\n            node = d3.select(this.tool_param_tree_view.$el[0]).selectAll(\"g.node\");\n        node.on(\"click\", function(d, i) {\n            // Get all settings corresponding to node.\n            var tool = self.model.get('tool'),\n                dataset = self.model.get('dataset'),\n                all_settings = param_tree.get_node_settings(d),\n                run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\"Whoa there cowboy!\",\n                            \"You clicked on a node to try \" + self.model.get('tool').get('name') +\n                            \" with \" + all_settings.length +\n                            \" different combinations of settings. You can only run 10 jobs at a time.\",\n                            {\n                                \"Ok\": function() { hide_modal(); run_jobs_deferred.resolve(false); }\n                            });\n            }\n            else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(function(run_jobs) {\n                if (!run_jobs) { return; }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, function(settings) {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get('default_mode')\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, function(pm_track, index) {\n                    setTimeout(function() {\n                        // Set inputs and run tool.\n                        tool.set_input_values(pm_track.get('settings').get('values'));\n                        $.when(tool.rerun(dataset, regions)).then(function(output) {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first(),\n                                track_config = dataset.get('track_config');\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(track_config, self, null);\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set('track', track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nreturn {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n\n});\n"]}