{"version":3,"sources":["viz/sweepster.js"],"names":["ToolInputsSettings","Backbone","Model","extend","defaults","inputs","values","ToolParameterTree","tool","tree_data","initialize","options","this","each","input","on","get","self","set_tree_data","add_param","remove_param","config","input_config","name","set","param","get_tree_params","length","index","_underscore2","default","map","samples","get_samples","node_id","id","value","setting","create_tree_data","params_samples","param_samples","settings","param_label","children","where","in_ptree","sortBy","get_num_leaves","reduce","memo","get_node_settings","target_node","fixed_settings","get_inputs_dict","cur_node","parent","depth","all_settings","get_settings","node","flatten","c","clone","isArray","get_connected_nodes","cur_parent","parents","push","a_node","get_subtree_nodes","get_leaf","find_child","find","child","toJSON","min","max","num_samples","track","mode","regions","track_config","converted_datasets_state_url","data_url","Galaxy","root","this_settings","other_settings","_tracks2","prop","same_settings","a_track","to_dict","parameter_tree","Collection","SweepsterVisualization","_visualization2","Visualization","Dataset","dataset","tool_with_samplable_inputs","tracks","default_mode","tree_config","GenomeRegionCollection","add","remove_inputs","title","type","dataset_id","tool_id","add_track","tagName","TILE_LEN","canvas_manager","model","render","trigger","View","on_click","settings_div","toggle","draw_tiles","settings_td","$","prepend","appendTo","$el","append","css","text","icon_menu","tile_containers","click","_iconButton2","create_icon_buttons_menu","when","data_manager","icon_class","canvas","draw_tile","addClass","ToolInputValOrSweepView","attr","number_input_template","single_input_row","sweep_inputs_row","options_text","then","data_ok","resolution","region","w_scale","insertAfter","get_data","tile_data","menu","width","get_canvas_height","getContext","select_input_template","tool_row","ToolParameterTreeDesignView","change","val","_tools2","IntegerToolParameter","i","option","join","template","remove","tree_params","hide","show","layout","cluster","diagonal","d","param_depths","center_left","vis","selectAll","className","tool_form_view","ToolFormView","not","SweepsterVisualizationView","ToolParameterTreeView","track_collection_container","key","label","default_value","size","height","projection","y","x","uniq","pluck","nodes","position","left","data","links","tr","enter","tracks_div","help_div","helpText","close_button","undefined","connected_node_ids","style","handle_node_clicks","CanvasManager","window","tooltip_config","mode_mapping","modes","_config2","ConfigSettingCollection","from_models_and_saved_values","make_popupmenu","get_base_color","tool_name","set_input_values","show_modal","param_tree","track_view","pm_track","tree_design_view","toString","first","run_jobs_deferred","Deferred","resolve","location","placement","base","get_value","toLowerCase","run_tool_on_dataset","rerun","outputs","Ok","hide_modal","SweepsterTrackView","hover","settings_leaf","_d2","select","tool_param_tree_view","filter","run_jobs","new_tracks","SweepsterTrack","setTimeout","output","prefs","to_key_value_dict","track_obj","object_from_template","init_for_tool_data"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\nimport _ from \"libs/underscore\";\nimport d3 from \"libs/d3\";\nimport util from \"viz/trackster/util\";\nimport visualization from \"viz/visualization\";\nimport tracks from \"viz/trackster/tracks\";\nimport tools from \"mvc/tool/tools\";\nimport data from \"mvc/dataset/data\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get(\"tool\")\n            .get(\"inputs\")\n            .each(function(input) {\n                // Listen for changes to input's attributes.\n                input.on(\n                    \"change:min change:max change:num_samples\",\n                    function(input) {\n                        if (input.get(\"in_ptree\")) {\n                            self.set_tree_data();\n                        }\n                    },\n                    self\n                );\n                input.on(\n                    \"change:in_ptree\",\n                    function(input) {\n                        if (input.get(\"in_ptree\")) {\n                            self.add_param(input);\n                        } else {\n                            self.remove_param(input);\n                        }\n                        self.set_tree_data();\n                    },\n                    self\n                );\n            });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, function(input_config) {\n                var input = self\n                    .get(\"tool\")\n                    .get(\"inputs\")\n                    .find(function(input) {\n                        return input.get(\"name\") === input_config.name;\n                    });\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get(\"ptree_index\")) {\n            return;\n        }\n\n        param.set(\"in_ptree\", true);\n        param.set(\"ptree_index\", this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set(\"in_ptree\", false);\n        param.set(\"ptree_index\", null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each(function(input, index) {\n            // +1 to use 1-based indexing.\n            input.set(\"ptree_index\", index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), function(param) {\n            return {\n                param: param,\n                samples: param.get_samples()\n            };\n        });\n        var node_id = 0,\n            // Creates tree data recursively.\n            create_tree_data = function(params_samples, index) {\n                var param_samples = params_samples[index],\n                    param = param_samples.param,\n                    param_label = param.get(\"label\"),\n                    settings = param_samples.samples;\n\n                // Create leaves when last parameter setting is reached.\n                if (params_samples.length - 1 === index) {\n                    return _.map(settings, function(setting) {\n                        return {\n                            id: node_id++,\n                            name: setting,\n                            param: param,\n                            value: setting\n                        };\n                    });\n                }\n\n                // Recurse to handle other parameters.\n                return _.map(settings, function(setting) {\n                    return {\n                        id: node_id++,\n                        name: setting,\n                        param: param,\n                        value: setting,\n                        children: create_tree_data(params_samples, index + 1)\n                    };\n                });\n            };\n\n        this.set(\"tree_data\", {\n            name: \"Root\",\n            id: node_id++,\n            children:\n                params_samples.length !== 0\n                    ? create_tree_data(params_samples, 0)\n                    : null\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(\n            this.get(\"tool\")\n                .get(\"inputs\")\n                .where({ in_ptree: true })\n        ).sortBy(function(input) {\n            return input.get(\"ptree_index\");\n        });\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce(function(memo, param) {\n            return memo * param.get_samples().length;\n        }, 1);\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while (cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get(\"name\")] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this,\n            get_settings = function(node, settings) {\n                // Add setting for this node. Root node does not have a param,\n                // however.\n                if (node.param) {\n                    settings[node.param.get(\"name\")] = node.value;\n                }\n\n                if (!node.children) {\n                    // At leaf node, so return settings.\n                    return new ToolInputsSettings({\n                        inputs: self.get(\"tool\").get(\"inputs\"),\n                        values: settings\n                    });\n                } else {\n                    // At interior node: return list of subtree settings.\n                    return _.flatten(\n                        _.map(node.children, function(c) {\n                            return get_settings(c, _.clone(settings));\n                        })\n                    );\n                }\n            },\n            all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) {\n            all_settings = [all_settings];\n        }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = function(a_node) {\n            if (!a_node.children) {\n                return a_node;\n            } else {\n                // At interior node: return subtree nodes.\n                return _.flatten([\n                    a_node,\n                    _.map(a_node.children, function(c) {\n                        return get_subtree_nodes(c);\n                    })\n                ]);\n            }\n        };\n\n        // Get node's parents.\n        var parents = [],\n            cur_parent = node.parent;\n        while (cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get(\"tree_data\"),\n            find_child = function(children) {\n                return _.find(children, function(child) {\n                    return settings[child.param.get(\"name\")] === child.value;\n                });\n            };\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(function(param) {\n            return {\n                name: param.get(\"name\"),\n                min: param.get(\"min\"),\n                max: param.get(\"max\"),\n                num_samples: param.get(\"num_samples\")\n            };\n        });\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: \"Pack\",\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set(\"regions\", options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend(\n                {\n                    data_url: Galaxy.root + \"dummy1\",\n                    converted_datasets_state_url: Galaxy.root + \"dummy2\"\n                },\n                options.track\n            );\n            this.set(\n                \"track\",\n                tracks.object_from_template(track_config, {}, null)\n            );\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get(\"settings\"),\n            other_settings = a_track.get(\"settings\");\n        for (var prop in this_settings) {\n            if (\n                !other_settings[prop] ||\n                this_settings[prop] !== other_settings[prop]\n            ) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get(\"track\").to_dict(),\n            settings: this.get(\"settings\"),\n            regions: this.get(\"regions\")\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: \"Pack\"\n    }),\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data.Dataset(options.dataset));\n        this.set(\"tool\", new tools.Tool(options.tool));\n        this.set(\n            \"regions\",\n            new visualization.GenomeRegionCollection(options.regions)\n        );\n        this.set(\"tracks\", new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get(\"tool\");\n        this.set(\"tool_with_samplable_inputs\", tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs([\n            \"data\",\n            \"hidden_data\",\n            \"conditional\",\n            \"text\"\n        ]);\n\n        this.set(\n            \"parameter_tree\",\n            new ToolParameterTree({\n                tool: tool_with_samplable_inputs,\n                config: options.tree_config\n            })\n        );\n    },\n\n    add_track: function(track) {\n        this.get(\"tracks\").add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get(\"id\"),\n            title:\n                \"Parameter exploration for dataset '\" +\n                this.get(\"dataset\").get(\"name\") +\n                \"'\",\n            type: \"sweepster\",\n            dataset_id: this.get(\"dataset\").id,\n            tool_id: this.get(\"tool\").id,\n            regions: this.get(\"regions\").toJSON(),\n            tree_config: this.get(\"parameter_tree\").toJSON(),\n            tracks: this.get(\"tracks\").toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: \"tr\",\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on(\"change:track change:mode\", this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get(\"settings\"),\n            values = settings.get(\"values\"),\n            settings_td = $(\"<td/>\")\n                .addClass(\"settings\")\n                .appendTo(this.$el),\n            settings_div = $(\"<div/>\")\n                .addClass(\"track-info\")\n                .hide()\n                .appendTo(settings_td);\n        settings_div.append(\n            $(\"<div/>\")\n                .css(\"font-weight\", \"bold\")\n                .text(\"Track Settings\")\n        );\n        settings.get(\"inputs\").each(function(input) {\n            settings_div.append(\n                input.get(\"label\") + \": \" + values[input.get(\"name\")] + \"<br/>\"\n            );\n        });\n        var self = this,\n            run_on_dataset_button = $(\"<button/>\")\n                .appendTo(settings_div)\n                .text(\"Run on complete dataset\")\n                .click(function() {\n                    settings_div.toggle();\n                    self.trigger(\"run_on_dataset\", settings);\n                });\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Settings\",\n                icon_class: \"gear track-settings\",\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: \"Remove\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    self.$el.remove();\n                    $(\".tooltip\").remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get(\"regions\").each(function() {\n            self.$el.append(\n                $(\"<td/>\")\n                    .addClass(\"tile\")\n                    .html(\n                        $(\"<img/>\").attr(\n                            \"src\",\n                            Galaxy.root + \"images/loading_large_white_bg.gif\"\n                        )\n                    )\n            );\n        });\n\n        if (this.model.get(\"track\")) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this,\n            track = this.model.get(\"track\"),\n            regions = this.model.get(\"regions\"),\n            tile_containers = this.$el.find(\"td.tile\");\n\n        // Do nothing if track is not defined.\n        if (!track) {\n            return;\n        }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(function(data_ok) {\n            // Draw tile for each region.\n            regions.each(function(region, index) {\n                var resolution = region.length() / self.TILE_LEN,\n                    w_scale = 1 / resolution,\n                    mode = self.model.get(\"mode\");\n                $.when(\n                    track.data_manager.get_data(region, mode, resolution, {})\n                ).then(function(tile_data) {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(\n                        tile_data,\n                        mode,\n                        w_scale,\n                        canvas.width\n                    );\n                    track.draw_tile(\n                        tile_data,\n                        canvas.getContext(\"2d\"),\n                        mode,\n                        region,\n                        w_scale\n                    );\n                    $(tile_containers[index])\n                        .empty()\n                        .append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n    // Template for rendering sweep inputs:\n    number_input_template:\n        '<div class=\"form-row-input sweep\">' +\n        '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n        '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n        ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n        \"</div>\",\n\n    select_input_template:\n        '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model,\n            type = input.get(\"type\"),\n            single_input_row = this.$el.find(\".form-row-input\"),\n            sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(\":input\").change(function() {\n            input.set(\"value\", $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $(\n                _.template(this.number_input_template)(this.model.toJSON())\n            );\n        } else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find(\"select option\"), function(\n                    option\n                ) {\n                    return $(option).val();\n                }),\n                options_text = options.join(\", \");\n            sweep_inputs_row = $(\n                _.template(this.select_input_template)({\n                    options: options_text\n                })\n            );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu(\n                [\n                    {\n                        title: \"Add parameter to tree\",\n                        icon_class: \"plus-button\",\n                        on_click: function() {\n                            input.set(\"in_ptree\", true);\n                            single_input_row.hide();\n                            sweep_inputs_row.show();\n                            $(this).hide();\n                            self.$el.find(\".icon-button.toggle\").show();\n                        }\n                    },\n                    {\n                        title: \"Remove parameter from tree\",\n                        icon_class: \"toggle\",\n                        on_click: function() {\n                            // Remove parameter from tree params where name matches clicked paramter.\n                            input.set(\"in_ptree\", false);\n                            sweep_inputs_row.hide();\n                            single_input_row.show();\n                            $(this).hide();\n                            self.$el.find(\".icon-button.plus-button\").show();\n                        }\n                    }\n                ],\n                {}\n            );\n        this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get(\"in_ptree\")) {\n            single_input_row.hide();\n            self.$el.find(\".icon-button.plus-button\").hide();\n        } else {\n            self.$el.find(\".icon-button.toggle\").hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each([\"min\", \"max\", \"num_samples\"], function(attr) {\n            sweep_inputs_row.find(\".\" + attr).change(function() {\n                input.set(attr, parseFloat($(this).val()));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: \"tree-design\",\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get(\"tool\")\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this,\n            inputs = self.model.get(\"tool\").get(\"inputs\");\n        this.$el\n            .find(\".form-row\")\n            .not(\".form-actions\")\n            .each(function(i) {\n                var input_view = new ToolInputValOrSweepView({\n                    model: inputs.at(i),\n                    tool_row: $(this)\n                });\n            });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: \"tool-parameter-tree\",\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on(\"change:tree_data\", this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster().size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal().projection(function(d) {\n            return [d.y, d.x];\n        });\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, function(param, index) {\n            var x = param_depths[index + 1],\n                center_left = $(\"#center\").position().left;\n            self.$el.append(\n                $(\"<div>\")\n                    .addClass(\"label\")\n                    .text(param.get(\"label\"))\n                    .css(\"left\", x + center_left)\n            );\n        });\n\n        // Set up vis element.\n        var vis = d3\n            .select(this.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis\n            .selectAll(\"path.link\")\n            .data(cluster.links(nodes))\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis\n            .selectAll(\"g.node\")\n            .data(nodes)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + d.y + \",\" + d.x + \")\";\n            })\n            .on(\"mouseover\", function(a_node) {\n                var connected_node_ids = _.pluck(\n                    self.model.get_connected_nodes(a_node),\n                    \"id\"\n                );\n                // TODO: probably can use enter() to do this more easily.\n                node\n                    .filter(function(d) {\n                        return (\n                            _.find(connected_node_ids, function(id) {\n                                return id === d.id;\n                            }) !== undefined\n                        );\n                    })\n                    .style(\"fill\", \"#f00\");\n            })\n            .on(\"mouseout\", function() {\n                node.style(\"fill\", \"#000\");\n            });\n\n        node.append(\"circle\").attr(\"r\", 9);\n\n        node\n            .append(\"text\")\n            .attr(\"dx\", function(d) {\n                return d.children ? -12 : 12;\n            })\n            .attr(\"dy\", 3)\n            .attr(\"text-anchor\", function(d) {\n                return d.children ? \"end\" : \"start\";\n            })\n            .text(function(d) {\n                return d.name;\n            });\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: \"Sweepster\",\n\n    helpText:\n        \"<div><h4>Getting Started</h4>\" +\n        \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n        \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n        \"<li>Run the tool with different settings by clicking on tree nodes\" +\n        \"</ol></div>\",\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(\n            this.$el.parents(\"body\")\n        );\n        this.tool_param_tree_view = new ToolParameterTreeView({\n            model: this.model.get(\"parameter_tree\")\n        });\n        this.track_collection_container = $(\"<table/>\").addClass(\"tracks\");\n\n        // Handle node clicks for tree data.\n        this.model\n            .get(\"parameter_tree\")\n            .on(\"change:tree_data\", this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get(\"tracks\").each(function(track) {\n            track.get(\"track\").view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\"\n                }\n            ],\n            {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get(\"parameter_tree\")\n        });\n\n        $(\"#left\").append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this,\n            regions = self.model.get(\"regions\"),\n            tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n        regions.each(function(region) {\n            tr.append($(\"<th>\").text(region.toString()));\n        });\n        tr\n            .children()\n            .first()\n            .attr(\"colspan\", 2);\n\n        var tracks_div = $(\"<div>\").addClass(\"tiles\");\n        $(\"#right\").append(tracks_div.append(this.track_collection_container));\n\n        self.model.get(\"tracks\").each(function(track) {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass(\"help\"),\n            close_button = mod_icon_btn.create_icon_buttons_menu([\n                {\n                    title: \"Close\",\n                    icon_class: \"cross-circle\",\n                    on_click: function() {\n                        $(\".tooltip\").remove();\n                        help_div.remove();\n                    }\n                }\n            ]);\n\n        help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n        $(\"#center\").append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $(\"#center\").append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Set display mode\"\n                },\n                // Close viz.\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        window.location =\n                            \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n        var modes = [\"Squish\", \"Pack\"],\n            mode_mapping = {};\n        _.each(modes, function(mode) {\n            mode_mapping[mode] = function() {\n                self.model.set(\"default_mode\", mode);\n                self.model.get(\"tracks\").each(function(track) {\n                    track.set(\"mode\", mode);\n                });\n            };\n        });\n\n        make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(base.toLowerCase() + \"_color\") ||\n            this.config.get_value(\"n_color\")\n        );\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get(\"tool\"),\n            tool_name = tool.get(\"name\"),\n            dataset = this.model.get(\"dataset\");\n        tool.set_input_values(settings.get(\"values\"));\n        $.when(tool.rerun(dataset)).then(function(outputs) {\n            // TODO.\n        });\n\n        show_modal(\n            \"Running \" + tool_name + \" on complete dataset\",\n            tool_name +\n                \" is running on dataset '\" +\n                dataset.get(\"name\") +\n                \"'. Outputs are in the dataset's history.\",\n            {\n                Ok: function() {\n                    hide_modal();\n                }\n            }\n        );\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this,\n            param_tree = this.model.get(\"parameter_tree\");\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(\n            function() {\n                var settings_leaf = param_tree.get_leaf(\n                    pm_track.get(\"settings\").get(\"values\")\n                );\n                var connected_node_ids = _.pluck(\n                    param_tree.get_connected_nodes(settings_leaf),\n                    \"id\"\n                );\n\n                // TODO: can do faster with enter?\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .filter(function(d) {\n                        return (\n                            _.find(connected_node_ids, function(id) {\n                                return id === d.id;\n                            }) !== undefined\n                        );\n                    })\n                    .style(\"fill\", \"#f00\");\n            },\n            function() {\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .style(\"fill\", \"#000\");\n            }\n        );\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this,\n            param_tree = this.model.get(\"parameter_tree\"),\n            regions = this.model.get(\"regions\"),\n            node = d3\n                .select(this.tool_param_tree_view.$el[0])\n                .selectAll(\"g.node\");\n        node.on(\"click\", function(d, i) {\n            // Get all settings corresponding to node.\n            var tool = self.model.get(\"tool\"),\n                dataset = self.model.get(\"dataset\"),\n                all_settings = param_tree.get_node_settings(d),\n                run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\n                    \"Whoa there cowboy!\",\n                    \"You clicked on a node to try \" +\n                        self.model.get(\"tool\").get(\"name\") +\n                        \" with \" +\n                        all_settings.length +\n                        \" different combinations of settings. You can only run 10 jobs at a time.\",\n                    {\n                        Ok: function() {\n                            hide_modal();\n                            run_jobs_deferred.resolve(false);\n                        }\n                    }\n                );\n            } else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(function(run_jobs) {\n                if (!run_jobs) {\n                    return;\n                }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, function(settings) {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get(\"default_mode\")\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, function(pm_track, index) {\n                    setTimeout(function() {\n                        // Set inputs and run tool.\n                        tool.set_input_values(\n                            pm_track.get(\"settings\").get(\"values\")\n                        );\n                        $.when(tool.rerun(dataset, regions)).then(function(\n                            output\n                        ) {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first(),\n                                track_config = dataset.get(\"track_config\");\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(\n                                track_config,\n                                self,\n                                null\n                            );\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set(\"track\", track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nexport default {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n"]}