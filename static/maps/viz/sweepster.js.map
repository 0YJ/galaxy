{"version":3,"sources":["viz/sweepster.js"],"names":["define","defaults","values","visualization","tracks","tools","data","config","mod_icon_btn","ToolInputsSettings","Backbone","Model","extend","tool","ToolParameterTree","input","tree_data","initialize","options","self","this","add_param","get","set_tree_data","on","remove_param","input_config","find","param","name","set","get_tree_params","length","_","each","index","node_id","params_samples","map","create_tree_data","param_samples","id","children","settings","samples","setting","value","where","in_ptree","get_num_leaves","reduce","memo","get_samples","get_node_settings","fixed_settings","get_inputs_dict","cur_node","depth","parent","all_settings","node","get_settings","target_node","c","clone","inputs","flatten","isArray","get_connected_nodes","get_subtree_nodes","parents","cur_parent","push","a_node","get_leaf","find_child","child","toJSON","min","max","num_samples","SweepsterTrack","track","mode","regions","track_config","Galaxy","root","converted_datasets_state_url","object_from_template","same_settings","a_track","this_settings","other_settings","prop","to_dict","model","Visualization","dataset","prototype","parameter_tree","default_mode","Tool","TrackCollection","tool_with_samplable_inputs","remove_inputs","tree_config","add_track","add","title","type","dataset_id","tool_id","tagName","View","TILE_LEN","canvas_manager","render","draw_tiles","settings_td","$","settings_div","addClass","appendTo","hide","$el","append","css","text","run_on_dataset_button","click","toggle","trigger","create_icon_buttons_menu","on_click","remove","html","attr","tile_containers","when","data_manager","data_is_ready","then","data_ok","resolution","canvas","width","height","tile_data","getContext","region","w_scale","empty","get_canvas_height","draw_tile","ToolInputValOrSweepView","select_input_template","single_input_row","sweep_inputs_row","change","option","val","options_text","template","number_input_template","insertAfter","SelectToolParameter","menu","icon_class","show","prepend","ToolParameterTreeDesignView","tool_form_view","ToolFormView","className","input_view","not","i","at","tool_row","ToolParameterTreeView","diagonal","d3","tree_params","param_depths","pluck","cluster","layout","size","svg","projection","d","y","x","nodes","uniq","connected_node_ids","position","left","center_left","vis","select","selectAll","enter","SweepsterVisualizationView","helpText","undefined","tool_param_tree_view","style","track_collection_container","ConfigSettingCollection","from_models_and_saved_values","SweepsterVisualization","tr","first","CanvasManager","handle_node_clicks","view","label","default_value","help_div","key","close_button","tree_design_view","toString","tracks_div","window","location","modes","mode_mapping","tooltip_config","placement","track_view","hover","settings_leaf","param_tree","make_popupmenu","get_base_color","base","get_value","toLowerCase","run_tool_on_dataset","tool_name","set_input_values","outputs","show_modal","Ok","hide_modal","pm_track","run_jobs_deferred","resolve","run_jobs","filter","setTimeout","track_obj","init_for_tool_data","Deferred","new_tracks","rerun","output","prefs","to_key_value_dict"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\ndefine([\n    \"libs/underscore\",\n    \"libs/d3\",\n    \"viz/trackster/util\",\n    \"viz/visualization\",\n    \"viz/trackster/tracks\",\n    \"mvc/tool/tools\",\n    \"mvc/dataset/data\",\n    \"utils/config\",\n    \"mvc/ui/icon-button\"\n\n], function(_, d3, util, visualization, tracks, tools, data, config, mod_icon_btn) {\n\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get('tool').get('inputs').each(function(input) {\n            // Listen for changes to input's attributes.\n            input.on('change:min change:max change:num_samples', function(input) {\n                if (input.get('in_ptree')) {\n                    self.set_tree_data();\n                }\n            }, self);\n            input.on('change:in_ptree', function(input) {\n                if (input.get('in_ptree')) {\n                    self.add_param(input);\n                }\n                else {\n                    self.remove_param(input);\n                }\n                self.set_tree_data();\n            }, self);\n        });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, function(input_config) {\n                var input = self.get('tool').get('inputs').find(function(input) {\n                    return input.get('name') === input_config.name;\n                });\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get('ptree_index')) { return; }\n\n        param.set('in_ptree', true);\n        param.set('ptree_index', this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set('in_ptree', false);\n        param.set('ptree_index', null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each(function(input, index) {\n            // +1 to use 1-based indexing.\n            input.set('ptree_index', index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), function(param) {\n                return {\n                    param: param,\n                    samples: param.get_samples()\n                };\n            });\n        var node_id = 0,\n            // Creates tree data recursively.\n            create_tree_data = function(params_samples, index) {\n                var param_samples = params_samples[index],\n                    param = param_samples.param,\n                    param_label = param.get('label'),\n                    settings = param_samples.samples;\n\n                // Create leaves when last parameter setting is reached.\n                if (params_samples.length - 1 === index) {\n                    return _.map(settings, function(setting) {\n                        return {\n                            id: node_id++,\n                            name: setting,\n                            param: param,\n                            value: setting\n                        };\n                    });\n                }\n\n                // Recurse to handle other parameters.\n                return _.map(settings, function(setting) {\n                    return {\n                        id: node_id++,\n                        name: setting,\n                        param: param,\n                        value: setting,\n                        children: create_tree_data(params_samples, index + 1)\n                    };\n                });\n            };\n\n        this.set('tree_data', {\n            name: 'Root',\n            id: node_id++,\n            children: (params_samples.length !== 0 ? create_tree_data(params_samples, 0) : null)\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(this.get('tool').get('inputs').where( {in_ptree: true} ))\n                 .sortBy( function(input) { return input.get('ptree_index'); } );\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce(function(memo, param) { return memo * param.get_samples().length; }, 1);\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get('tool').get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while(cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get('name')] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this,\n            get_settings = function(node, settings) {\n                // Add setting for this node. Root node does not have a param,\n                // however.\n                if (node.param) {\n                    settings[node.param.get('name')] = node.value;\n                }\n\n                if (!node.children) {\n                    // At leaf node, so return settings.\n                    return new ToolInputsSettings({\n                        inputs: self.get('tool').get('inputs'),\n                        values: settings\n                    });\n                }\n                else {\n                    // At interior node: return list of subtree settings.\n                    return _.flatten( _.map(node.children, function(c) { return get_settings(c, _.clone(settings)); }) );\n                }\n            },\n            all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) { all_settings = [ all_settings ]; }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = function(a_node) {\n            if (!a_node.children) {\n                return a_node;\n            }\n            else {\n                // At interior node: return subtree nodes.\n                return _.flatten( [a_node, _.map(a_node.children, function(c) { return get_subtree_nodes(c); })] );\n            }\n        };\n\n        // Get node's parents.\n        var parents = [],\n            cur_parent = node.parent;\n        while(cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get('tree_data'),\n            find_child = function(children) {\n                return _.find(children, function(child) {\n                    return settings[child.param.get('name')] === child.value;\n                });\n            };\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(function(param) {\n            return {\n                name: param.get('name'),\n                min: param.get('min'),\n                max: param.get('max'),\n                num_samples: param.get('num_samples')\n            };\n        });\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: 'Pack',\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set('regions', options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend({\n                                    data_url: Galaxy.root + 'dummy1',\n                                    converted_datasets_state_url: Galaxy.root + 'dummy2'\n                                }, options.track);\n            this.set('track', tracks.object_from_template(track_config, {}, null));\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get('settings'),\n            other_settings = a_track.get('settings');\n        for (var prop in this_settings) {\n            if (!other_settings[prop] ||\n                this_settings[prop] !== other_settings[prop]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get('track').to_dict(),\n            settings: this.get('settings'),\n            regions: this.get('regions')\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: 'Pack'\n    }),\n\n    initialize: function(options) {\n        this.set('dataset', new data.Dataset(options.dataset));\n        this.set('tool', new tools.Tool(options.tool));\n        this.set('regions', new visualization.GenomeRegionCollection(options.regions));\n        this.set('tracks', new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get('tool');\n        this.set('tool_with_samplable_inputs', tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs( [ 'data', 'hidden_data', 'conditional', 'text' ] );\n\n        this.set('parameter_tree', new ToolParameterTree({\n            tool: tool_with_samplable_inputs,\n            config: options.tree_config\n        }));\n    },\n\n    add_track: function(track) {\n        this.get('tracks').add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get('id'),\n            title: 'Parameter exploration for dataset \\''  + this.get('dataset').get('name') + '\\'',\n            type: 'sweepster',\n            dataset_id: this.get('dataset').id,\n            tool_id: this.get('tool').id,\n            regions: this.get('regions').toJSON(),\n            tree_config: this.get('parameter_tree').toJSON(),\n            tracks: this.get('tracks').toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: 'tr',\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on('change:track change:mode', this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get('settings'),\n            values = settings.get('values'),\n            settings_td = $('<td/>').addClass('settings').appendTo(this.$el),\n            settings_div = $('<div/>').addClass('track-info').hide().appendTo(settings_td);\n        settings_div.append( $('<div/>').css('font-weight', 'bold').text('Track Settings') );\n        settings.get('inputs').each(function(input) {\n            settings_div.append( input.get('label') + ': ' + values[input.get('name')] + '<br/>');\n        });\n        var self = this,\n            run_on_dataset_button = $('<button/>').appendTo(settings_div).text('Run on complete dataset').click(function() {\n                settings_div.toggle();\n                self.trigger('run_on_dataset', settings);\n            });\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: 'Settings',\n                icon_class: 'gear track-settings',\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: 'Remove',\n                icon_class: 'cross-circle',\n                on_click: function() {\n                    self.$el.remove();\n                    $('.tooltip').remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get('regions').each(function() {\n            self.$el.append($('<td/>').addClass('tile').html(\n                $('<img/>').attr('src', Galaxy.root + 'images/loading_large_white_bg.gif')\n            ));\n        });\n\n        if (this.model.get('track')) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this,\n            track = this.model.get('track'),\n            regions = this.model.get('regions'),\n            tile_containers = this.$el.find('td.tile');\n\n        // Do nothing if track is not defined.\n        if (!track) { return; }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(function(data_ok) {\n            // Draw tile for each region.\n            regions.each(function(region, index) {\n                var resolution = region.length() / self.TILE_LEN,\n                    w_scale = 1/resolution,\n                    mode = self.model.get('mode');\n                $.when(track.data_manager.get_data(region, mode, resolution, {})).then(function(tile_data) {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(tile_data, mode, w_scale, canvas.width);\n                    track.draw_tile(tile_data, canvas.getContext('2d'), mode, region, w_scale);\n                    $(tile_containers[index]).empty().append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n\n    // Template for rendering sweep inputs:\n    number_input_template: '<div class=\"form-row-input sweep\">' +\n                           '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n                           '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n                           ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n                           '</div>',\n\n    select_input_template: '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model,\n            type = input.get('type'),\n            single_input_row = this.$el.find('.form-row-input'),\n            sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(':input').change(function() {\n            input.set('value', $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $( _.template(this.number_input_template)(this.model.toJSON()) );\n        }\n        else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find('select option'), function(option) {\n                    return $(option).val();\n                }),\n                options_text = options.join(', ');\n            sweep_inputs_row = $( _.template(this.select_input_template)({\n                options: options_text\n            }) );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: 'Add parameter to tree',\n                icon_class: 'plus-button',\n                on_click: function () {\n                    input.set('in_ptree', true);\n                    single_input_row.hide();\n                    sweep_inputs_row.show();\n                    $(this).hide();\n                    self.$el.find('.icon-button.toggle').show();\n                }\n\n            },\n            {\n                title: 'Remove parameter from tree',\n                icon_class: 'toggle',\n                on_click: function() {\n                    // Remove parameter from tree params where name matches clicked paramter.\n                    input.set('in_ptree', false);\n                    sweep_inputs_row.hide();\n                    single_input_row.show();\n                    $(this).hide();\n                    self.$el.find('.icon-button.plus-button').show();\n                }\n            }\n            ],\n            {\n\n            });\n            this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get('in_ptree')) {\n            single_input_row.hide();\n            self.$el.find('.icon-button.plus-button').hide();\n        }\n        else {\n            self.$el.find('.icon-button.toggle').hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each(['min', 'max', 'num_samples'], function(attr) {\n            sweep_inputs_row.find('.' + attr).change(function() {\n                input.set(attr, parseFloat( $(this).val() ));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: 'tree-design',\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get('tool')\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this,\n            inputs = self.model.get('tool').get('inputs');\n        this.$el.find('.form-row').not('.form-actions').each(function(i) {\n            var input_view = new ToolInputValOrSweepView({\n                model: inputs.at(i),\n                tool_row: $(this)\n            });\n        });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: 'tool-parameter-tree',\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on('change:tree_data', this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster()\n            .size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal()\n            .projection(function(d) { return [d.y, d.x]; });\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get('tree_data'));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, function(param, index) {\n            var x = param_depths[index+1],\n                center_left = $('#center').position().left;\n            self.$el.append( $('<div>').addClass('label')\n                                       .text(param.get('label'))\n                                       .css('left', x + center_left) );\n        });\n\n        // Set up vis element.\n        var vis = d3.select(this.$el[0])\n          .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n          .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis.selectAll(\"path.link\")\n          .data(cluster.links(nodes))\n        .enter().append(\"path\")\n          .attr(\"class\", \"link\")\n          .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis.selectAll(\"g.node\")\n          .data(nodes)\n        .enter().append(\"g\")\n          .attr(\"class\", \"node\")\n          .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; })\n          .on('mouseover', function(a_node) {\n            var connected_node_ids = _.pluck(self.model.get_connected_nodes(a_node), 'id');\n            // TODO: probably can use enter() to do this more easily.\n            node.filter(function(d) {\n                return _.find(connected_node_ids, function(id) { return id === d.id; }) !== undefined;\n            }).style('fill', '#f00');\n          })\n          .on('mouseout', function() {\n            node.style('fill', '#000');\n          });\n\n        node.append(\"circle\")\n          .attr(\"r\", 9);\n\n        node.append(\"text\")\n          .attr(\"dx\", function(d) { return d.children ? -12 : 12; })\n          .attr(\"dy\", 3)\n          .attr(\"text-anchor\", function(d) { return d.children ? \"end\" : \"start\"; })\n          .text(function(d) { return d.name; });\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: 'Sweepster',\n\n    helpText:\n        '<div><h4>Getting Started</h4>' +\n        '<ol><li>Create a parameter tree by using the icons next to the tool\\'s parameter names to add or remove parameters.' +\n        '<li>Adjust the tree by using parameter inputs to select min, max, and number of samples' +\n        '<li>Run the tool with different settings by clicking on tree nodes' +\n        '</ol></div>',\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(this.$el.parents('body'));\n        this.tool_param_tree_view = new ToolParameterTreeView({ model: this.model.get('parameter_tree') });\n        this.track_collection_container = $('<table/>').addClass('tracks');\n\n        // Handle node clicks for tree data.\n        this.model.get('parameter_tree').on('change:tree_data', this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get('tracks').each(function(track) {\n            track.get('track').view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                { key: 'name', label: 'Name', type: 'text', default_value: '' },\n                { key: 'a_color', label: 'A Color', type: 'color', default_value: \"#FF0000\" },\n                { key: 'c_color', label: 'C Color', type: 'color', default_value: \"#00FF00\" },\n                { key: 'g_color', label: 'G Color', type: 'color', default_value: \"#0000FF\" },\n                { key: 't_color', label: 'T Color', type: 'color', default_value: \"#FF00FF\" },\n                { key: 'n_color', label: 'N Color', type: 'color', default_value: \"#AAAAAA\" },\n                { key: 'block_color', label: 'Block color', type: 'color' },\n                { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color' },\n            ], {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get('parameter_tree')\n        });\n\n        $('#left').append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this,\n            regions = self.model.get('regions'),\n            tr = $('<tr/>').appendTo(this.track_collection_container);\n\n        regions.each(function(region) {\n            tr.append( $('<th>').text(region.toString()) );\n        });\n        tr.children().first().attr('colspan', 2);\n\n        var tracks_div = $('<div>').addClass('tiles');\n        $('#right').append( tracks_div.append(this.track_collection_container) );\n\n        self.model.get('tracks').each(function(track) {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass('help'),\n            close_button = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: 'Close',\n                icon_class: 'cross-circle',\n                on_click: function() {\n                    $('.tooltip').remove();\n                    help_div.remove();\n                }\n            }\n            ]);\n\n        help_div.prepend(close_button.$el.css('float', 'right'));\n        $('#center').append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $('#center').append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: 'chevron-expand',\n                    title: 'Set display mode'\n                },\n                // Close viz.\n                {\n                    icon_class: 'cross-circle',\n                    title: 'Close',\n                    on_click: function() {\n                        window.location = \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: {placement: 'bottom'}\n            });\n\n            // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n            var modes = ['Squish', 'Pack'],\n                mode_mapping = {};\n            _.each(modes, function(mode) {\n                mode_mapping[mode] = function() {\n                    self.model.set('default_mode', mode);\n                    self.model.get('tracks').each(function(track) {\n                        track.set('mode', mode);\n                    });\n                };\n            });\n\n            make_popupmenu(menu.$el.find('.chevron-expand'), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(base.toLowerCase() + '_color') ||\n               this.config.get_value('n_color');\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get('tool'),\n            tool_name = tool.get('name'),\n            dataset = this.model.get('dataset');\n        tool.set_input_values(settings.get('values'));\n        $.when(tool.rerun(dataset)).then(function(outputs) {\n            // TODO.\n        });\n\n        show_modal('Running ' + tool_name + ' on complete dataset',\n                       tool_name + ' is running on dataset \\'' +\n                       dataset.get('name') + '\\'. Outputs are in the dataset\\'s history.',\n                       {\n                        'Ok': function() { hide_modal(); }\n                       });\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this,\n            param_tree = this.model.get('parameter_tree');\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on('run_on_dataset', self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(function() {\n            var settings_leaf = param_tree.get_leaf(pm_track.get('settings').get('values'));\n            var connected_node_ids = _.pluck(param_tree.get_connected_nodes(settings_leaf), 'id');\n\n            // TODO: can do faster with enter?\n            d3.select(self.tool_param_tree_view.$el[0]).selectAll(\"g.node\")\n            .filter(function(d) {\n                return _.find(connected_node_ids, function(id) { return id === d.id; }) !== undefined;\n            }).style('fill', '#f00');\n        },\n        function() {\n            d3.select(self.tool_param_tree_view.$el[0]).selectAll(\"g.node\").style('fill', '#000');\n        });\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this,\n            param_tree = this.model.get('parameter_tree'),\n            regions = this.model.get('regions'),\n            node = d3.select(this.tool_param_tree_view.$el[0]).selectAll(\"g.node\");\n        node.on(\"click\", function(d, i) {\n            // Get all settings corresponding to node.\n            var tool = self.model.get('tool'),\n                dataset = self.model.get('dataset'),\n                all_settings = param_tree.get_node_settings(d),\n                run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\"Whoa there cowboy!\",\n                            \"You clicked on a node to try \" + self.model.get('tool').get('name') +\n                            \" with \" + all_settings.length +\n                            \" different combinations of settings. You can only run 10 jobs at a time.\",\n                            {\n                                \"Ok\": function() { hide_modal(); run_jobs_deferred.resolve(false); }\n                            });\n            }\n            else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(function(run_jobs) {\n                if (!run_jobs) { return; }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, function(settings) {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get('default_mode')\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, function(pm_track, index) {\n                    setTimeout(function() {\n                        // Set inputs and run tool.\n                        tool.set_input_values(pm_track.get('settings').get('values'));\n                        $.when(tool.rerun(dataset, regions)).then(function(output) {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first(),\n                                track_config = dataset.get('track_config');\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(track_config, self, null);\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set('track', track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nreturn {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n\n});\n"]}