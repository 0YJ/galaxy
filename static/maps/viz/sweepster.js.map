{"version":3,"sources":["viz/sweepster.js"],"names":["define","defaults","inputs","_","d3","util","visualization","tracks","tools","tool","tree_data","ToolInputsSettings","get","Model","each","input","values","ToolParameterTree","Backbone","extend","self","initialize","options","add_param","set_tree_data","on","get_tree_params","remove_param","set","config","input_config","find","name","params_samples","param","param_samples","param_label","length","settings","index","id","this","value","samples","get_samples","fixed_settings","cur_node","node_id","children","create_tree_data","map","setting","node","where","in_ptree","sortBy","get_num_leaves","reduce","memo","get_node_settings","target_node","get_inputs_dict","get_connected_nodes","parent","get_subtree_nodes","a_node","all_settings","get_settings","cur_parent","flatten","c","find_child","clone","parents","isArray","regions","push","track_config","get_leaf","this_settings","child","other_settings","toJSON","model","SweepsterTrack","min","max","num_samples","default_mode","mode","TrackCollection","track","tool_with_samplable_inputs","remove_inputs","converted_datasets_state_url","Galaxy","root","object_from_template","a_track","title","type","dataset_id","prop","tool_id","tree_config","to_dict","Collection","TILE_LEN","SweepsterVisualization","Visualization","prototype","settings_td","settings_div","run_on_dataset_button","toggle","data","Dataset","dataset","trigger","Tool","icon_menu","GenomeRegionCollection","on_click","icon_class","$","remove","add_track","add","tile_containers","when","data_manager","data_is_ready","then","SweepsterTrackView","View","tagName","canvas_manager","render","ToolInputValOrSweepView","draw_tiles","number_input_template","$el","single_input_row","sweep_inputs_row","hide","appendTo","css","text","IntegerToolParameter","option","val","click","mod_icon_btn","create_icon_buttons_menu","show","prepend","append","addClass","attr","tool_form_view","data_ok","region","input_view","at","resolution","tool_row","get_data","tile_data","ToolParameterTreeView","new_canvas","canvas","width","height","get_canvas_height","w_scale","draw_tile","tree_params","empty","select_input_template","vis","link","selectAll","change","filter","style","SelectToolParameter","options_text","d","join","template","SweepsterVisualizationView","helpText","menu","tool_param_tree_view","track_collection_container","view","ConfigSettingCollection","label","key","default_value","parseFloat","ToolFormView","tr","i","className","close_button","help_div","cluster","layout","size","diagonal","svg","projection","y","x","nodes","param_depths","uniq","pluck","center_left","position","left","select","window","links","modes","mode_mapping","enter","make_popupmenu","connected_node_ids","run_tool_on_dataset","undefined","Ok","hide_modal","pm_track","param_tree","track_view","CanvasManager","handle_node_clicks","run_jobs_deferred","Deferred","show_modal","from_models_and_saved_values","new_tracks","setTimeout","tree_design_view","ToolParameterTreeDesignView","toString","first","tracks_div","location","tooltip_config","placement","get_base_color","base","get_value","toLowerCase","tool_name","set_input_values","rerun","outputs","hover","settings_leaf","resolve","run_jobs","output","prefs","to_key_value_dict","track_obj","init_for_tool_data"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\ndefine(\n    [\n        \"libs/underscore\",\n        \"libs/d3\",\n        \"viz/trackster/util\",\n        \"viz/visualization\",\n        \"viz/trackster/tracks\",\n        \"mvc/tool/tools\",\n        \"mvc/dataset/data\",\n        \"utils/config\",\n        \"mvc/ui/icon-button\"\n    ],\n    function(\n        _,\n        d3,\n        util,\n        visualization,\n        tracks,\n        tools,\n        data,\n        config,\n        mod_icon_btn\n    ) {\n        /**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\n        var ToolInputsSettings = Backbone.Model.extend({\n            defaults: {\n                inputs: null,\n                values: null\n            }\n        });\n\n        /**\n * Tree for a tool's parameters.\n */\n        var ToolParameterTree = Backbone.Model.extend({\n            defaults: {\n                tool: null,\n                tree_data: null\n            },\n\n            initialize: function(options) {\n                // Set up tool parameters to work with tree.\n                var self = this;\n                this.get(\"tool\")\n                    .get(\"inputs\")\n                    .each(function(input) {\n                        // Listen for changes to input's attributes.\n                        input.on(\n                            \"change:min change:max change:num_samples\",\n                            function(input) {\n                                if (input.get(\"in_ptree\")) {\n                                    self.set_tree_data();\n                                }\n                            },\n                            self\n                        );\n                        input.on(\n                            \"change:in_ptree\",\n                            function(input) {\n                                if (input.get(\"in_ptree\")) {\n                                    self.add_param(input);\n                                } else {\n                                    self.remove_param(input);\n                                }\n                                self.set_tree_data();\n                            },\n                            self\n                        );\n                    });\n\n                // If there is a config, use it.\n                if (options.config) {\n                    _.each(options.config, function(input_config) {\n                        var input = self\n                            .get(\"tool\")\n                            .get(\"inputs\")\n                            .find(function(input) {\n                                return input.get(\"name\") === input_config.name;\n                            });\n                        self.add_param(input);\n                        input.set(input_config);\n                    });\n                }\n            },\n\n            add_param: function(param) {\n                // If parameter already present, do not add it.\n                if (param.get(\"ptree_index\")) {\n                    return;\n                }\n\n                param.set(\"in_ptree\", true);\n                param.set(\"ptree_index\", this.get_tree_params().length);\n            },\n\n            remove_param: function(param) {\n                // Remove param from tree.\n                param.set(\"in_ptree\", false);\n                param.set(\"ptree_index\", null);\n\n                // Update ptree indices for remaining params.\n                _(this.get_tree_params()).each(function(input, index) {\n                    // +1 to use 1-based indexing.\n                    input.set(\"ptree_index\", index + 1);\n                });\n            },\n\n            /**\n     * Sets tree data using tool's inputs.\n     */\n            set_tree_data: function() {\n                // Get samples for each parameter.\n                var params_samples = _.map(this.get_tree_params(), function(\n                    param\n                ) {\n                    return {\n                        param: param,\n                        samples: param.get_samples()\n                    };\n                });\n                var node_id = 0,\n                    // Creates tree data recursively.\n                    create_tree_data = function(params_samples, index) {\n                        var param_samples = params_samples[index],\n                            param = param_samples.param,\n                            param_label = param.get(\"label\"),\n                            settings = param_samples.samples;\n\n                        // Create leaves when last parameter setting is reached.\n                        if (params_samples.length - 1 === index) {\n                            return _.map(settings, function(setting) {\n                                return {\n                                    id: node_id++,\n                                    name: setting,\n                                    param: param,\n                                    value: setting\n                                };\n                            });\n                        }\n\n                        // Recurse to handle other parameters.\n                        return _.map(settings, function(setting) {\n                            return {\n                                id: node_id++,\n                                name: setting,\n                                param: param,\n                                value: setting,\n                                children: create_tree_data(\n                                    params_samples,\n                                    index + 1\n                                )\n                            };\n                        });\n                    };\n\n                this.set(\"tree_data\", {\n                    name: \"Root\",\n                    id: node_id++,\n                    children:\n                        params_samples.length !== 0\n                            ? create_tree_data(params_samples, 0)\n                            : null\n                });\n            },\n\n            get_tree_params: function() {\n                // Filter and sort parameters to get list in tree.\n                return _(\n                    this.get(\"tool\")\n                        .get(\"inputs\")\n                        .where({ in_ptree: true })\n                ).sortBy(function(input) {\n                    return input.get(\"ptree_index\");\n                });\n            },\n\n            /**\n     * Returns number of leaves in tree.\n     */\n            get_num_leaves: function() {\n                return this.get_tree_params().reduce(function(memo, param) {\n                    return memo * param.get_samples().length;\n                }, 1);\n            },\n\n            /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n            get_node_settings: function(target_node) {\n                // -- Get fixed settings from tool and parent nodes.\n\n                // Start with tool's settings.\n                var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n                // Get fixed settings using node's parents.\n                var cur_node = target_node.parent;\n                if (cur_node) {\n                    while (cur_node.depth !== 0) {\n                        fixed_settings[cur_node.param.get(\"name\")] =\n                            cur_node.value;\n                        cur_node = cur_node.parent;\n                    }\n                }\n\n                // Walk subtree starting at clicked node to get full list of settings.\n                var self = this,\n                    get_settings = function(node, settings) {\n                        // Add setting for this node. Root node does not have a param,\n                        // however.\n                        if (node.param) {\n                            settings[node.param.get(\"name\")] = node.value;\n                        }\n\n                        if (!node.children) {\n                            // At leaf node, so return settings.\n                            return new ToolInputsSettings({\n                                inputs: self.get(\"tool\").get(\"inputs\"),\n                                values: settings\n                            });\n                        } else {\n                            // At interior node: return list of subtree settings.\n                            return _.flatten(\n                                _.map(node.children, function(c) {\n                                    return get_settings(c, _.clone(settings));\n                                })\n                            );\n                        }\n                    },\n                    all_settings = get_settings(target_node, fixed_settings);\n\n                // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n                if (!_.isArray(all_settings)) {\n                    all_settings = [all_settings];\n                }\n\n                return all_settings;\n            },\n\n            /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n            get_connected_nodes: function(node) {\n                var get_subtree_nodes = function(a_node) {\n                    if (!a_node.children) {\n                        return a_node;\n                    } else {\n                        // At interior node: return subtree nodes.\n                        return _.flatten([\n                            a_node,\n                            _.map(a_node.children, function(c) {\n                                return get_subtree_nodes(c);\n                            })\n                        ]);\n                    }\n                };\n\n                // Get node's parents.\n                var parents = [],\n                    cur_parent = node.parent;\n                while (cur_parent) {\n                    parents.push(cur_parent);\n                    cur_parent = cur_parent.parent;\n                }\n\n                return _.flatten([parents, get_subtree_nodes(node)]);\n            },\n\n            /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n            get_leaf: function(settings) {\n                var cur_node = this.get(\"tree_data\"),\n                    find_child = function(children) {\n                        return _.find(children, function(child) {\n                            return (\n                                settings[child.param.get(\"name\")] ===\n                                child.value\n                            );\n                        });\n                    };\n\n                while (cur_node.children) {\n                    cur_node = find_child(cur_node.children);\n                }\n                return cur_node;\n            },\n\n            /**\n     * Returns a list of parameters used in tree.\n     */\n            toJSON: function() {\n                // FIXME: returning and jsonifying complete param causes trouble on the server side,\n                // so just use essential attributes for now.\n                return this.get_tree_params().map(function(param) {\n                    return {\n                        name: param.get(\"name\"),\n                        min: param.get(\"min\"),\n                        max: param.get(\"max\"),\n                        num_samples: param.get(\"num_samples\")\n                    };\n                });\n            }\n        });\n\n        var SweepsterTrack = Backbone.Model.extend({\n            defaults: {\n                track: null,\n                mode: \"Pack\",\n                settings: null,\n                regions: null\n            },\n\n            initialize: function(options) {\n                this.set(\"regions\", options.regions);\n                if (options.track) {\n                    // FIXME: find a better way to deal with needed URLs:\n                    var track_config = _.extend(\n                        {\n                            data_url: Galaxy.root + \"dummy1\",\n                            converted_datasets_state_url: Galaxy.root + \"dummy2\"\n                        },\n                        options.track\n                    );\n                    this.set(\n                        \"track\",\n                        tracks.object_from_template(track_config, {}, null)\n                    );\n                }\n            },\n\n            same_settings: function(a_track) {\n                var this_settings = this.get(\"settings\"),\n                    other_settings = a_track.get(\"settings\");\n                for (var prop in this_settings) {\n                    if (\n                        !other_settings[prop] ||\n                        this_settings[prop] !== other_settings[prop]\n                    ) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n\n            toJSON: function() {\n                return {\n                    track: this.get(\"track\").to_dict(),\n                    settings: this.get(\"settings\"),\n                    regions: this.get(\"regions\")\n                };\n            }\n        });\n\n        var TrackCollection = Backbone.Collection.extend({\n            model: SweepsterTrack\n        });\n\n        /**\n * Sweepster visualization model.\n */\n        var SweepsterVisualization = visualization.Visualization.extend({\n            defaults: _.extend(\n                {},\n                visualization.Visualization.prototype.defaults,\n                {\n                    dataset: null,\n                    tool: null,\n                    parameter_tree: null,\n                    regions: null,\n                    tracks: null,\n                    default_mode: \"Pack\"\n                }\n            ),\n\n            initialize: function(options) {\n                this.set(\"dataset\", new data.Dataset(options.dataset));\n                this.set(\"tool\", new tools.Tool(options.tool));\n                this.set(\n                    \"regions\",\n                    new visualization.GenomeRegionCollection(options.regions)\n                );\n                this.set(\"tracks\", new TrackCollection(options.tracks));\n\n                var tool_with_samplable_inputs = this.get(\"tool\");\n                this.set(\n                    \"tool_with_samplable_inputs\",\n                    tool_with_samplable_inputs\n                );\n                // Remove complex parameters for now.\n                tool_with_samplable_inputs.remove_inputs([\n                    \"data\",\n                    \"hidden_data\",\n                    \"conditional\",\n                    \"text\"\n                ]);\n\n                this.set(\n                    \"parameter_tree\",\n                    new ToolParameterTree({\n                        tool: tool_with_samplable_inputs,\n                        config: options.tree_config\n                    })\n                );\n            },\n\n            add_track: function(track) {\n                this.get(\"tracks\").add(track);\n            },\n\n            toJSON: function() {\n                return {\n                    id: this.get(\"id\"),\n                    title:\n                        \"Parameter exploration for dataset '\" +\n                        this.get(\"dataset\").get(\"name\") +\n                        \"'\",\n                    type: \"sweepster\",\n                    dataset_id: this.get(\"dataset\").id,\n                    tool_id: this.get(\"tool\").id,\n                    regions: this.get(\"regions\").toJSON(),\n                    tree_config: this.get(\"parameter_tree\").toJSON(),\n                    tracks: this.get(\"tracks\").toJSON()\n                };\n            }\n        });\n\n        /**\n * --- Views ---\n */\n\n        /**\n * Sweepster track view.\n */\n        var SweepsterTrackView = Backbone.View.extend({\n            tagName: \"tr\",\n\n            TILE_LEN: 250,\n\n            initialize: function(options) {\n                this.canvas_manager = options.canvas_manager;\n                this.render();\n                this.model.on(\n                    \"change:track change:mode\",\n                    this.draw_tiles,\n                    this\n                );\n            },\n\n            render: function() {\n                // Render settings icon and popup.\n                // TODO: use template.\n                var settings = this.model.get(\"settings\"),\n                    values = settings.get(\"values\"),\n                    settings_td = $(\"<td/>\")\n                        .addClass(\"settings\")\n                        .appendTo(this.$el),\n                    settings_div = $(\"<div/>\")\n                        .addClass(\"track-info\")\n                        .hide()\n                        .appendTo(settings_td);\n                settings_div.append(\n                    $(\"<div/>\")\n                        .css(\"font-weight\", \"bold\")\n                        .text(\"Track Settings\")\n                );\n                settings.get(\"inputs\").each(function(input) {\n                    settings_div.append(\n                        input.get(\"label\") +\n                            \": \" +\n                            values[input.get(\"name\")] +\n                            \"<br/>\"\n                    );\n                });\n                var self = this,\n                    run_on_dataset_button = $(\"<button/>\")\n                        .appendTo(settings_div)\n                        .text(\"Run on complete dataset\")\n                        .click(function() {\n                            settings_div.toggle();\n                            self.trigger(\"run_on_dataset\", settings);\n                        });\n                var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n                    {\n                        title: \"Settings\",\n                        icon_class: \"gear track-settings\",\n                        on_click: function() {\n                            settings_div.toggle();\n                        }\n                    },\n                    {\n                        title: \"Remove\",\n                        icon_class: \"cross-circle\",\n                        on_click: function() {\n                            self.$el.remove();\n                            $(\".tooltip\").remove();\n                            // TODO: remove track from viz collection.\n                        }\n                    }\n                ]);\n                settings_td.prepend(icon_menu.$el);\n\n                // Render tile placeholders.\n                this.model.get(\"regions\").each(function() {\n                    self.$el.append(\n                        $(\"<td/>\")\n                            .addClass(\"tile\")\n                            .html(\n                                $(\"<img/>\").attr(\n                                    \"src\",\n                                    Galaxy.root +\n                                        \"images/loading_large_white_bg.gif\"\n                                )\n                            )\n                    );\n                });\n\n                if (this.model.get(\"track\")) {\n                    this.draw_tiles();\n                }\n            },\n\n            /**\n     * Draw tiles for regions.\n     */\n            draw_tiles: function() {\n                var self = this,\n                    track = this.model.get(\"track\"),\n                    regions = this.model.get(\"regions\"),\n                    tile_containers = this.$el.find(\"td.tile\");\n\n                // Do nothing if track is not defined.\n                if (!track) {\n                    return;\n                }\n\n                // When data is ready, draw tiles.\n                $.when(track.data_manager.data_is_ready()).then(function(\n                    data_ok\n                ) {\n                    // Draw tile for each region.\n                    regions.each(function(region, index) {\n                        var resolution = region.length() / self.TILE_LEN,\n                            w_scale = 1 / resolution,\n                            mode = self.model.get(\"mode\");\n                        $.when(\n                            track.data_manager.get_data(\n                                region,\n                                mode,\n                                resolution,\n                                {}\n                            )\n                        ).then(function(tile_data) {\n                            var canvas = self.canvas_manager.new_canvas();\n                            canvas.width = self.TILE_LEN;\n                            canvas.height = track.get_canvas_height(\n                                tile_data,\n                                mode,\n                                w_scale,\n                                canvas.width\n                            );\n                            track.draw_tile(\n                                tile_data,\n                                canvas.getContext(\"2d\"),\n                                mode,\n                                region,\n                                w_scale\n                            );\n                            $(tile_containers[index])\n                                .empty()\n                                .append(canvas);\n                        });\n                    });\n                });\n            }\n        });\n\n        /**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\n        var ToolInputValOrSweepView = Backbone.View.extend({\n            // Template for rendering sweep inputs:\n            number_input_template:\n                '<div class=\"form-row-input sweep\">' +\n                '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n                '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n                ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n                \"</div>\",\n\n            select_input_template:\n                '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n            initialize: function(options) {\n                this.$el = options.tool_row;\n                this.render();\n            },\n\n            render: function() {\n                var input = this.model,\n                    type = input.get(\"type\"),\n                    single_input_row = this.$el.find(\".form-row-input\"),\n                    sweep_inputs_row = null;\n\n                // Update tool inputs as single input changes.\n                single_input_row.find(\":input\").change(function() {\n                    input.set(\"value\", $(this).val());\n                });\n\n                // Add row for parameter sweep inputs.\n                if (input instanceof tools.IntegerToolParameter) {\n                    sweep_inputs_row = $(\n                        _.template(this.number_input_template)(\n                            this.model.toJSON()\n                        )\n                    );\n                } else if (input instanceof tools.SelectToolParameter) {\n                    var options = _.map(\n                            this.$el.find(\"select option\"),\n                            function(option) {\n                                return $(option).val();\n                            }\n                        ),\n                        options_text = options.join(\", \");\n                    sweep_inputs_row = $(\n                        _.template(this.select_input_template)({\n                            options: options_text\n                        })\n                    );\n                }\n                sweep_inputs_row.insertAfter(single_input_row);\n\n                // Add buttons for adding/removing parameter.\n                var self = this,\n                    menu = mod_icon_btn.create_icon_buttons_menu(\n                        [\n                            {\n                                title: \"Add parameter to tree\",\n                                icon_class: \"plus-button\",\n                                on_click: function() {\n                                    input.set(\"in_ptree\", true);\n                                    single_input_row.hide();\n                                    sweep_inputs_row.show();\n                                    $(this).hide();\n                                    self.$el.find(\".icon-button.toggle\").show();\n                                }\n                            },\n                            {\n                                title: \"Remove parameter from tree\",\n                                icon_class: \"toggle\",\n                                on_click: function() {\n                                    // Remove parameter from tree params where name matches clicked paramter.\n                                    input.set(\"in_ptree\", false);\n                                    sweep_inputs_row.hide();\n                                    single_input_row.show();\n                                    $(this).hide();\n                                    self.$el\n                                        .find(\".icon-button.plus-button\")\n                                        .show();\n                                }\n                            }\n                        ],\n                        {}\n                    );\n                this.$el.prepend(menu.$el);\n\n                // Show/hide input rows and icons depending on whether parameter is in the tree.\n                if (input.get(\"in_ptree\")) {\n                    single_input_row.hide();\n                    self.$el.find(\".icon-button.plus-button\").hide();\n                } else {\n                    self.$el.find(\".icon-button.toggle\").hide();\n                    sweep_inputs_row.hide();\n                }\n\n                // Update input's min, max, number of samples as values change.\n                _.each([\"min\", \"max\", \"num_samples\"], function(attr) {\n                    sweep_inputs_row.find(\".\" + attr).change(function() {\n                        input.set(attr, parseFloat($(this).val()));\n                    });\n                });\n            }\n        });\n\n        var ToolParameterTreeDesignView = Backbone.View.extend({\n            className: \"tree-design\",\n\n            initialize: function(options) {\n                this.render();\n            },\n\n            render: function() {\n                // Start with tool form view.\n                var tool_form_view = new tools.ToolFormView({\n                    model: this.model.get(\"tool\")\n                });\n                tool_form_view.render();\n                this.$el.append(tool_form_view.$el);\n\n                // Set up views for each tool input.\n                var self = this,\n                    inputs = self.model.get(\"tool\").get(\"inputs\");\n                this.$el\n                    .find(\".form-row\")\n                    .not(\".form-actions\")\n                    .each(function(i) {\n                        var input_view = new ToolInputValOrSweepView({\n                            model: inputs.at(i),\n                            tool_row: $(this)\n                        });\n                    });\n            }\n        });\n\n        /**\n * Displays and updates parameter tree.\n */\n        var ToolParameterTreeView = Backbone.View.extend({\n            className: \"tool-parameter-tree\",\n\n            initialize: function(options) {\n                // When tree data changes, re-render.\n                this.model.on(\"change:tree_data\", this.render, this);\n            },\n\n            render: function() {\n                // Start fresh.\n                this.$el.children().remove();\n\n                var tree_params = this.model.get_tree_params();\n                if (!tree_params.length) {\n                    return;\n                }\n\n                // Set width, height based on params and samples.\n                this.width = 100 * (2 + tree_params.length);\n                this.height = 15 * this.model.get_num_leaves();\n\n                var self = this;\n\n                // Layout tree.\n                var cluster = d3.layout\n                    .cluster()\n                    .size([this.height, this.width - 160]);\n\n                var diagonal = d3.svg.diagonal().projection(function(d) {\n                    return [d.y, d.x];\n                });\n\n                // Layout nodes.\n                var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n                // Setup and add labels for tree levels.\n                var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n                _.each(tree_params, function(param, index) {\n                    var x = param_depths[index + 1],\n                        center_left = $(\"#center\").position().left;\n                    self.$el.append(\n                        $(\"<div>\")\n                            .addClass(\"label\")\n                            .text(param.get(\"label\"))\n                            .css(\"left\", x + center_left)\n                    );\n                });\n\n                // Set up vis element.\n                var vis = d3\n                    .select(this.$el[0])\n                    .append(\"svg\")\n                    .attr(\"width\", this.width)\n                    .attr(\"height\", this.height + 30)\n                    .append(\"g\")\n                    .attr(\"transform\", \"translate(40, 20)\");\n\n                // Draw links.\n                var link = vis\n                    .selectAll(\"path.link\")\n                    .data(cluster.links(nodes))\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"class\", \"link\")\n                    .attr(\"d\", diagonal);\n\n                // Draw nodes.\n                var node = vis\n                    .selectAll(\"g.node\")\n                    .data(nodes)\n                    .enter()\n                    .append(\"g\")\n                    .attr(\"class\", \"node\")\n                    .attr(\"transform\", function(d) {\n                        return \"translate(\" + d.y + \",\" + d.x + \")\";\n                    })\n                    .on(\"mouseover\", function(a_node) {\n                        var connected_node_ids = _.pluck(\n                            self.model.get_connected_nodes(a_node),\n                            \"id\"\n                        );\n                        // TODO: probably can use enter() to do this more easily.\n                        node\n                            .filter(function(d) {\n                                return (\n                                    _.find(connected_node_ids, function(id) {\n                                        return id === d.id;\n                                    }) !== undefined\n                                );\n                            })\n                            .style(\"fill\", \"#f00\");\n                    })\n                    .on(\"mouseout\", function() {\n                        node.style(\"fill\", \"#000\");\n                    });\n\n                node.append(\"circle\").attr(\"r\", 9);\n\n                node\n                    .append(\"text\")\n                    .attr(\"dx\", function(d) {\n                        return d.children ? -12 : 12;\n                    })\n                    .attr(\"dy\", 3)\n                    .attr(\"text-anchor\", function(d) {\n                        return d.children ? \"end\" : \"start\";\n                    })\n                    .text(function(d) {\n                        return d.name;\n                    });\n            }\n        });\n\n        /**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\n        var SweepsterVisualizationView = Backbone.View.extend({\n            className: \"Sweepster\",\n\n            helpText:\n                \"<div><h4>Getting Started</h4>\" +\n                \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n                \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n                \"<li>Run the tool with different settings by clicking on tree nodes\" +\n                \"</ol></div>\",\n\n            initialize: function(options) {\n                this.canvas_manager = new visualization.CanvasManager(\n                    this.$el.parents(\"body\")\n                );\n                this.tool_param_tree_view = new ToolParameterTreeView({\n                    model: this.model.get(\"parameter_tree\")\n                });\n                this.track_collection_container = $(\"<table/>\").addClass(\n                    \"tracks\"\n                );\n\n                // Handle node clicks for tree data.\n                this.model\n                    .get(\"parameter_tree\")\n                    .on(\"change:tree_data\", this.handle_node_clicks, this);\n\n                // Each track must have a view so it has a canvas manager.\n                var self = this;\n                this.model.get(\"tracks\").each(function(track) {\n                    track.get(\"track\").view = self;\n                });\n\n                // Set block, reverse strand block colors; these colors will be used for all tracks.\n                this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n                    [\n                        {\n                            key: \"name\",\n                            label: \"Name\",\n                            type: \"text\",\n                            default_value: \"\"\n                        },\n                        {\n                            key: \"a_color\",\n                            label: \"A Color\",\n                            type: \"color\",\n                            default_value: \"#FF0000\"\n                        },\n                        {\n                            key: \"c_color\",\n                            label: \"C Color\",\n                            type: \"color\",\n                            default_value: \"#00FF00\"\n                        },\n                        {\n                            key: \"g_color\",\n                            label: \"G Color\",\n                            type: \"color\",\n                            default_value: \"#0000FF\"\n                        },\n                        {\n                            key: \"t_color\",\n                            label: \"T Color\",\n                            type: \"color\",\n                            default_value: \"#FF00FF\"\n                        },\n                        {\n                            key: \"n_color\",\n                            label: \"N Color\",\n                            type: \"color\",\n                            default_value: \"#AAAAAA\"\n                        },\n                        {\n                            key: \"block_color\",\n                            label: \"Block color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"reverse_strand_color\",\n                            label: \"Antisense strand color\",\n                            type: \"color\"\n                        }\n                    ],\n                    {}\n                );\n            },\n\n            render: function() {\n                // Render tree design view in left panel.\n                var tree_design_view = new ToolParameterTreeDesignView({\n                    model: this.model.get(\"parameter_tree\")\n                });\n\n                $(\"#left\").append(tree_design_view.$el);\n\n                // Render track collection container/view in right panel.\n                var self = this,\n                    regions = self.model.get(\"regions\"),\n                    tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n                regions.each(function(region) {\n                    tr.append($(\"<th>\").text(region.toString()));\n                });\n                tr\n                    .children()\n                    .first()\n                    .attr(\"colspan\", 2);\n\n                var tracks_div = $(\"<div>\").addClass(\"tiles\");\n                $(\"#right\").append(\n                    tracks_div.append(this.track_collection_container)\n                );\n\n                self.model.get(\"tracks\").each(function(track) {\n                    self.add_track(track);\n                });\n\n                // -- Render help and tool parameter tree in center panel. --\n\n                // Help includes text and a close button.\n                var help_div = $(this.helpText).addClass(\"help\"),\n                    close_button = mod_icon_btn.create_icon_buttons_menu([\n                        {\n                            title: \"Close\",\n                            icon_class: \"cross-circle\",\n                            on_click: function() {\n                                $(\".tooltip\").remove();\n                                help_div.remove();\n                            }\n                        }\n                    ]);\n\n                help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n                $(\"#center\").append(help_div);\n\n                // Parameter tree:\n                this.tool_param_tree_view.render();\n                $(\"#center\").append(this.tool_param_tree_view.$el);\n\n                // Set up handler for tree node clicks.\n                this.handle_node_clicks();\n\n                // Set up visualization menu.\n                var menu = mod_icon_btn.create_icon_buttons_menu(\n                    [\n                        // Save.\n                        /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                        // Change track modes.\n                        {\n                            icon_class: \"chevron-expand\",\n                            title: \"Set display mode\"\n                        },\n                        // Close viz.\n                        {\n                            icon_class: \"cross-circle\",\n                            title: \"Close\",\n                            on_click: function() {\n                                window.location =\n                                    \"${h.url_for( controller='visualization', action='list' )}\";\n                            }\n                        }\n                    ],\n                    {\n                        tooltip_config: { placement: \"bottom\" }\n                    }\n                );\n\n                // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n                var modes = [\"Squish\", \"Pack\"],\n                    mode_mapping = {};\n                _.each(modes, function(mode) {\n                    mode_mapping[mode] = function() {\n                        self.model.set(\"default_mode\", mode);\n                        self.model.get(\"tracks\").each(function(track) {\n                            track.set(\"mode\", mode);\n                        });\n                    };\n                });\n\n                make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n                menu.$el.attr(\"style\", \"float: right\");\n                $(\"#right .unified-panel-header-inner\").append(menu.$el);\n            },\n\n            get_base_color: function(base) {\n                return (\n                    this.config.get_value(base.toLowerCase() + \"_color\") ||\n                    this.config.get_value(\"n_color\")\n                );\n            },\n\n            run_tool_on_dataset: function(settings) {\n                var tool = this.model.get(\"tool\"),\n                    tool_name = tool.get(\"name\"),\n                    dataset = this.model.get(\"dataset\");\n                tool.set_input_values(settings.get(\"values\"));\n                $.when(tool.rerun(dataset)).then(function(outputs) {\n                    // TODO.\n                });\n\n                show_modal(\n                    \"Running \" + tool_name + \" on complete dataset\",\n                    tool_name +\n                        \" is running on dataset '\" +\n                        dataset.get(\"name\") +\n                        \"'. Outputs are in the dataset's history.\",\n                    {\n                        Ok: function() {\n                            hide_modal();\n                        }\n                    }\n                );\n            },\n\n            /**\n     * Add track to model and view.\n     */\n            add_track: function(pm_track) {\n                var self = this,\n                    param_tree = this.model.get(\"parameter_tree\");\n\n                // Add track to model.\n                self.model.add_track(pm_track);\n\n                var track_view = new SweepsterTrackView({\n                    model: pm_track,\n                    canvas_manager: self.canvas_manager\n                });\n                track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n                self.track_collection_container.append(track_view.$el);\n                track_view.$el.hover(\n                    function() {\n                        var settings_leaf = param_tree.get_leaf(\n                            pm_track.get(\"settings\").get(\"values\")\n                        );\n                        var connected_node_ids = _.pluck(\n                            param_tree.get_connected_nodes(settings_leaf),\n                            \"id\"\n                        );\n\n                        // TODO: can do faster with enter?\n                        d3\n                            .select(self.tool_param_tree_view.$el[0])\n                            .selectAll(\"g.node\")\n                            .filter(function(d) {\n                                return (\n                                    _.find(connected_node_ids, function(id) {\n                                        return id === d.id;\n                                    }) !== undefined\n                                );\n                            })\n                            .style(\"fill\", \"#f00\");\n                    },\n                    function() {\n                        d3\n                            .select(self.tool_param_tree_view.$el[0])\n                            .selectAll(\"g.node\")\n                            .style(\"fill\", \"#000\");\n                    }\n                );\n                return pm_track;\n            },\n\n            /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n            handle_node_clicks: function() {\n                // When node clicked in tree, run tool and add tracks to model.\n                var self = this,\n                    param_tree = this.model.get(\"parameter_tree\"),\n                    regions = this.model.get(\"regions\"),\n                    node = d3\n                        .select(this.tool_param_tree_view.$el[0])\n                        .selectAll(\"g.node\");\n                node.on(\"click\", function(d, i) {\n                    // Get all settings corresponding to node.\n                    var tool = self.model.get(\"tool\"),\n                        dataset = self.model.get(\"dataset\"),\n                        all_settings = param_tree.get_node_settings(d),\n                        run_jobs_deferred = $.Deferred();\n\n                    // Do not allow 10+ jobs to be run.\n                    if (all_settings.length >= 10) {\n                        show_modal(\n                            \"Whoa there cowboy!\",\n                            \"You clicked on a node to try \" +\n                                self.model.get(\"tool\").get(\"name\") +\n                                \" with \" +\n                                all_settings.length +\n                                \" different combinations of settings. You can only run 10 jobs at a time.\",\n                            {\n                                Ok: function() {\n                                    hide_modal();\n                                    run_jobs_deferred.resolve(false);\n                                }\n                            }\n                        );\n                    } else {\n                        run_jobs_deferred.resolve(true);\n                    }\n\n                    // Take action when deferred resolves.\n                    $.when(run_jobs_deferred).then(function(run_jobs) {\n                        if (!run_jobs) {\n                            return;\n                        }\n\n                        // Create and add tracks for each settings group.\n                        var new_tracks = _.map(all_settings, function(\n                            settings\n                        ) {\n                            var pm_track = new SweepsterTrack({\n                                settings: settings,\n                                regions: regions,\n                                mode: self.model.get(\"default_mode\")\n                            });\n                            self.add_track(pm_track);\n                            return pm_track;\n                        });\n\n                        // For each track, run tool using track's settings and update track.\n                        _.each(new_tracks, function(pm_track, index) {\n                            setTimeout(function() {\n                                // Set inputs and run tool.\n                                tool.set_input_values(\n                                    pm_track.get(\"settings\").get(\"values\")\n                                );\n                                $.when(\n                                    tool.rerun(dataset, regions)\n                                ).then(function(output) {\n                                    // HACKish: output is an HDA with track config attribute. To create a track\n                                    // that works correctly with Backbone relational, it is necessary to\n                                    // use a modified version of the track config.\n                                    var dataset = output.first(),\n                                        track_config = dataset.get(\n                                            \"track_config\"\n                                        );\n                                    // Set dataset to be the tool's output.\n                                    track_config.dataset = dataset;\n                                    // Set tool to null so that it is not unpacked; unpacking it messes with\n                                    // the tool parameters and parameter tree.\n                                    track_config.tool = null;\n\n                                    track_config.prefs = self.config.to_key_value_dict();\n\n                                    // Create and add track for output dataset.\n                                    var track_obj = tracks.object_from_template(\n                                        track_config,\n                                        self,\n                                        null\n                                    );\n                                    track_obj.init_for_tool_data();\n\n                                    pm_track.set(\"track\", track_obj);\n                                });\n                            }, index * 10000);\n                        });\n                    });\n                });\n            }\n        });\n\n        return {\n            SweepsterVisualization: SweepsterVisualization,\n            SweepsterVisualizationView: SweepsterVisualizationView\n        };\n    }\n);\n"]}