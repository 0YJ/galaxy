{"version":3,"sources":["viz/sweepster.js"],"names":["_","d3","ToolInputsSettings","Backbone","Model","extend","defaults","inputs","values","ToolParameterTree","tool","tree_data","initialize","options","self","this","get","each","input","on","set_tree_data","add_param","remove_param","config","input_config","name","set","param","get_tree_params","length","index","params_samples","map","samples","get_samples","node_id","id","children","create_tree_data","param_samples","settings","setting","get_num_leaves","reduce","memo","get_node_settings","target_node","get_inputs_dict","cur_node","parent","depth","fixed_settings","value","all_settings","get_settings","node","flatten","c","isArray","get_connected_nodes","parents","cur_parent","push","get_subtree_nodes","a_node","get_leaf","find","child","find_child","toJSON","min","max","SweepsterTrack","track","mode","regions","track_config","data_url","Galaxy","root","converted_datasets_state_url","num_samples","same_settings","a_track","this_settings","prop","other_settings","to_dict","TrackCollection","model","SweepsterVisualization","_visualization2","default","Visualization","prototype","default_mode","Collection","dataset","GenomeRegionCollection","tracks","tool_with_samplable_inputs","parameter_tree","remove_inputs","tree_config","add_track","add","type","tool_id","title","SweepsterTrackView","View","tagName","TILE_LEN","canvas_manager","render","draw_tiles","settings_td","$","addClass","appendTo","$el","settings_div","hide","text","run_on_dataset_button","toggle","on_click","icon_class","trigger","create_icon_buttons_menu","append","remove","prepend","icon_menu","tile_containers","attr","canvas","when","data_manager","data_is_ready","then","data_ok","region","number_input_template","w_scale","resolution","select_input_template","get_data","new_canvas","width","height","get_canvas_height","tile_data","single_input_row","draw_tile","sweep_inputs_row","ToolInputValOrSweepView","tool_row","change","val","_tools2","IntegerToolParameter","SelectToolParameter","options_text","option","join","insertAfter","className","tool_form_view","show","at","menu","tree_params","parseFloat","ToolParameterTreeDesignView","cluster","ToolFormView","nodes","param_depths","not","vis","i","link","selectAll","ToolParameterTreeView","layout","size","diagonal","svg","projection","d","y","x","tool_param_tree_view","track_collection_container","center_left","position","left","view","key","label","default_value","links","pluck","undefined","connected_node_ids","style","tr","CanvasManager","help_div","handle_node_clicks","from_models_and_saved_values","tooltip_config","modes","mode_mapping","tree_design_view","set_input_values","toString","show_modal","Ok","hide_modal","tracks_div","pm_track","close_button","track_view","hover","_iconButton2","run_jobs_deferred","window","location","placement","get_base_color","base","get_value","toLowerCase","run_tool_on_dataset","tool_name","track_obj","param_tree","settings_leaf","select","filter","Deferred","resolve","run_jobs","new_tracks","setTimeout","rerun","output","first","prefs","to_key_value_dict","_tracks2","object_from_template","init_for_tool_data","SweepsterVisualizationView"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\nimport * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport util from \"viz/trackster/util\";\nimport visualization from \"viz/visualization\";\nimport tracks from \"viz/trackster/tracks\";\nimport tools from \"mvc/tool/tools\";\nimport data from \"mvc/dataset/data\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get(\"tool\")\n            .get(\"inputs\")\n            .each(input => {\n                // Listen for changes to input's attributes.\n                input.on(\n                    \"change:min change:max change:num_samples\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.set_tree_data();\n                        }\n                    },\n                    self\n                );\n                input.on(\n                    \"change:in_ptree\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.add_param(input);\n                        } else {\n                            self.remove_param(input);\n                        }\n                        self.set_tree_data();\n                    },\n                    self\n                );\n            });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, input_config => {\n                var input = self\n                    .get(\"tool\")\n                    .get(\"inputs\")\n                    .find(input => input.get(\"name\") === input_config.name);\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get(\"ptree_index\")) {\n            return;\n        }\n\n        param.set(\"in_ptree\", true);\n        param.set(\"ptree_index\", this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set(\"in_ptree\", false);\n        param.set(\"ptree_index\", null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each((input, index) => {\n            // +1 to use 1-based indexing.\n            input.set(\"ptree_index\", index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), param => ({\n            param: param,\n            samples: param.get_samples()\n        }));\n        var node_id = 0;\n\n        var // Creates tree data recursively.\n        create_tree_data = (params_samples, index) => {\n            var param_samples = params_samples[index],\n                param = param_samples.param,\n                param_label = param.get(\"label\"),\n                settings = param_samples.samples;\n\n            // Create leaves when last parameter setting is reached.\n            if (params_samples.length - 1 === index) {\n                return _.map(settings, setting => ({\n                    id: node_id++,\n                    name: setting,\n                    param: param,\n                    value: setting\n                }));\n            }\n\n            // Recurse to handle other parameters.\n            return _.map(settings, setting => ({\n                id: node_id++,\n                name: setting,\n                param: param,\n                value: setting,\n                children: create_tree_data(params_samples, index + 1)\n            }));\n        };\n\n        this.set(\"tree_data\", {\n            name: \"Root\",\n            id: node_id++,\n            children:\n                params_samples.length !== 0\n                    ? create_tree_data(params_samples, 0)\n                    : null\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(\n            this.get(\"tool\")\n                .get(\"inputs\")\n                .where({ in_ptree: true })\n        ).sortBy(input => input.get(\"ptree_index\"));\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce(\n            (memo, param) => memo * param.get_samples().length,\n            1\n        );\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while (cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get(\"name\")] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this;\n\n        var get_settings = (node, settings) => {\n            // Add setting for this node. Root node does not have a param,\n            // however.\n            if (node.param) {\n                settings[node.param.get(\"name\")] = node.value;\n            }\n\n            if (!node.children) {\n                // At leaf node, so return settings.\n                return new ToolInputsSettings({\n                    inputs: self.get(\"tool\").get(\"inputs\"),\n                    values: settings\n                });\n            } else {\n                // At interior node: return list of subtree settings.\n                return _.flatten(\n                    _.map(node.children, c =>\n                        get_settings(c, _.clone(settings))\n                    )\n                );\n            }\n        };\n\n        var all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) {\n            all_settings = [all_settings];\n        }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = a_node => {\n            if (!a_node.children) {\n                return a_node;\n            } else {\n                // At interior node: return subtree nodes.\n                return _.flatten([\n                    a_node,\n                    _.map(a_node.children, c => get_subtree_nodes(c))\n                ]);\n            }\n        };\n\n        // Get node's parents.\n        var parents = [];\n\n        var cur_parent = node.parent;\n        while (cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get(\"tree_data\");\n\n        var find_child = children =>\n            _.find(\n                children,\n                child => settings[child.param.get(\"name\")] === child.value\n            );\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(param => ({\n            name: param.get(\"name\"),\n            min: param.get(\"min\"),\n            max: param.get(\"max\"),\n            num_samples: param.get(\"num_samples\")\n        }));\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: \"Pack\",\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set(\"regions\", options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend(\n                {\n                    data_url: `${Galaxy.root}dummy1`,\n                    converted_datasets_state_url: `${Galaxy.root}dummy2`\n                },\n                options.track\n            );\n            this.set(\n                \"track\",\n                tracks.object_from_template(track_config, {}, null)\n            );\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get(\"settings\");\n        var other_settings = a_track.get(\"settings\");\n        for (var prop in this_settings) {\n            if (\n                !other_settings[prop] ||\n                this_settings[prop] !== other_settings[prop]\n            ) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get(\"track\").to_dict(),\n            settings: this.get(\"settings\"),\n            regions: this.get(\"regions\")\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: \"Pack\"\n    }),\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data.Dataset(options.dataset));\n        this.set(\"tool\", new tools.Tool(options.tool));\n        this.set(\n            \"regions\",\n            new visualization.GenomeRegionCollection(options.regions)\n        );\n        this.set(\"tracks\", new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get(\"tool\");\n        this.set(\"tool_with_samplable_inputs\", tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs([\n            \"data\",\n            \"hidden_data\",\n            \"conditional\",\n            \"text\"\n        ]);\n\n        this.set(\n            \"parameter_tree\",\n            new ToolParameterTree({\n                tool: tool_with_samplable_inputs,\n                config: options.tree_config\n            })\n        );\n    },\n\n    add_track: function(track) {\n        this.get(\"tracks\").add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get(\"id\"),\n            title: `Parameter exploration for dataset '${this.get(\n                \"dataset\"\n            ).get(\"name\")}'`,\n            type: \"sweepster\",\n            dataset_id: this.get(\"dataset\").id,\n            tool_id: this.get(\"tool\").id,\n            regions: this.get(\"regions\").toJSON(),\n            tree_config: this.get(\"parameter_tree\").toJSON(),\n            tracks: this.get(\"tracks\").toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: \"tr\",\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on(\"change:track change:mode\", this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get(\"settings\");\n\n        var values = settings.get(\"values\");\n\n        var settings_td = $(\"<td/>\")\n            .addClass(\"settings\")\n            .appendTo(this.$el);\n\n        var settings_div = $(\"<div/>\")\n            .addClass(\"track-info\")\n            .hide()\n            .appendTo(settings_td);\n\n        settings_div.append(\n            $(\"<div/>\")\n                .css(\"font-weight\", \"bold\")\n                .text(\"Track Settings\")\n        );\n        settings.get(\"inputs\").each(input => {\n            settings_div.append(\n                `${input.get(\"label\")}: ${values[input.get(\"name\")]}<br/>`\n            );\n        });\n        var self = this;\n\n        var run_on_dataset_button = $(\"<button/>\")\n            .appendTo(settings_div)\n            .text(\"Run on complete dataset\")\n            .click(() => {\n                settings_div.toggle();\n                self.trigger(\"run_on_dataset\", settings);\n            });\n\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Settings\",\n                icon_class: \"gear track-settings\",\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: \"Remove\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    self.$el.remove();\n                    $(\".tooltip\").remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get(\"regions\").each(() => {\n            self.$el.append(\n                $(\"<td/>\")\n                    .addClass(\"tile\")\n                    .html(\n                        $(\"<img/>\").attr(\n                            \"src\",\n                            `${Galaxy.root}images/loading_large_white_bg.gif`\n                        )\n                    )\n            );\n        });\n\n        if (this.model.get(\"track\")) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this;\n        var track = this.model.get(\"track\");\n        var regions = this.model.get(\"regions\");\n        var tile_containers = this.$el.find(\"td.tile\");\n\n        // Do nothing if track is not defined.\n        if (!track) {\n            return;\n        }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(data_ok => {\n            // Draw tile for each region.\n            regions.each((region, index) => {\n                var resolution = region.length() / self.TILE_LEN;\n                var w_scale = 1 / resolution;\n                var mode = self.model.get(\"mode\");\n                $.when(\n                    track.data_manager.get_data(region, mode, resolution, {})\n                ).then(tile_data => {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(\n                        tile_data,\n                        mode,\n                        w_scale,\n                        canvas.width\n                    );\n                    track.draw_tile(\n                        tile_data,\n                        canvas.getContext(\"2d\"),\n                        mode,\n                        region,\n                        w_scale\n                    );\n                    $(tile_containers[index])\n                        .empty()\n                        .append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n    // Template for rendering sweep inputs:\n    number_input_template:\n        '<div class=\"form-row-input sweep\">' +\n        '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n        '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n        ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n        \"</div>\",\n\n    select_input_template:\n        '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model;\n        var type = input.get(\"type\");\n        var single_input_row = this.$el.find(\".form-row-input\");\n        var sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(\":input\").change(function() {\n            input.set(\"value\", $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $(\n                _.template(this.number_input_template)(this.model.toJSON())\n            );\n        } else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find(\"select option\"), option =>\n                $(option).val()\n            );\n\n            var options_text = options.join(\", \");\n            sweep_inputs_row = $(\n                _.template(this.select_input_template)({\n                    options: options_text\n                })\n            );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    title: \"Add parameter to tree\",\n                    icon_class: \"plus-button\",\n                    on_click: function() {\n                        input.set(\"in_ptree\", true);\n                        single_input_row.hide();\n                        sweep_inputs_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.toggle\").show();\n                    }\n                },\n                {\n                    title: \"Remove parameter from tree\",\n                    icon_class: \"toggle\",\n                    on_click: function() {\n                        // Remove parameter from tree params where name matches clicked paramter.\n                        input.set(\"in_ptree\", false);\n                        sweep_inputs_row.hide();\n                        single_input_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.plus-button\").show();\n                    }\n                }\n            ],\n            {}\n        );\n\n        this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get(\"in_ptree\")) {\n            single_input_row.hide();\n            self.$el.find(\".icon-button.plus-button\").hide();\n        } else {\n            self.$el.find(\".icon-button.toggle\").hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each([\"min\", \"max\", \"num_samples\"], attr => {\n            sweep_inputs_row.find(`.${attr}`).change(function() {\n                input.set(attr, parseFloat($(this).val()));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: \"tree-design\",\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get(\"tool\")\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this;\n\n        var inputs = self.model.get(\"tool\").get(\"inputs\");\n        this.$el\n            .find(\".form-row\")\n            .not(\".form-actions\")\n            .each(function(i) {\n                var input_view = new ToolInputValOrSweepView({\n                    model: inputs.at(i),\n                    tool_row: $(this)\n                });\n            });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: \"tool-parameter-tree\",\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on(\"change:tree_data\", this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster().size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, (param, index) => {\n            var x = param_depths[index + 1];\n            var center_left = $(\"#center\").position().left;\n            self.$el.append(\n                $(\"<div>\")\n                    .addClass(\"label\")\n                    .text(param.get(\"label\"))\n                    .css(\"left\", x + center_left)\n            );\n        });\n\n        // Set up vis element.\n        var vis = d3\n            .select(this.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis\n            .selectAll(\"path.link\")\n            .data(cluster.links(nodes))\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis\n            .selectAll(\"g.node\")\n            .data(nodes)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", d => `translate(${d.y},${d.x})`)\n            .on(\"mouseover\", a_node => {\n                var connected_node_ids = _.pluck(\n                    self.model.get_connected_nodes(a_node),\n                    \"id\"\n                );\n                // TODO: probably can use enter() to do this more easily.\n                node\n                    .filter(\n                        d =>\n                            _.find(connected_node_ids, id => id === d.id) !==\n                            undefined\n                    )\n                    .style(\"fill\", \"#f00\");\n            })\n            .on(\"mouseout\", () => {\n                node.style(\"fill\", \"#000\");\n            });\n\n        node.append(\"circle\").attr(\"r\", 9);\n\n        node\n            .append(\"text\")\n            .attr(\"dx\", d => (d.children ? -12 : 12))\n            .attr(\"dy\", 3)\n            .attr(\"text-anchor\", d => (d.children ? \"end\" : \"start\"))\n            .text(d => d.name);\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: \"Sweepster\",\n\n    helpText:\n        \"<div><h4>Getting Started</h4>\" +\n        \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n        \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n        \"<li>Run the tool with different settings by clicking on tree nodes\" +\n        \"</ol></div>\",\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(\n            this.$el.parents(\"body\")\n        );\n        this.tool_param_tree_view = new ToolParameterTreeView({\n            model: this.model.get(\"parameter_tree\")\n        });\n        this.track_collection_container = $(\"<table/>\").addClass(\"tracks\");\n\n        // Handle node clicks for tree data.\n        this.model\n            .get(\"parameter_tree\")\n            .on(\"change:tree_data\", this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get(\"tracks\").each(track => {\n            track.get(\"track\").view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\"\n                }\n            ],\n            {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get(\"parameter_tree\")\n        });\n\n        $(\"#left\").append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this;\n\n        var regions = self.model.get(\"regions\");\n        var tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n        regions.each(region => {\n            tr.append($(\"<th>\").text(region.toString()));\n        });\n        tr\n            .children()\n            .first()\n            .attr(\"colspan\", 2);\n\n        var tracks_div = $(\"<div>\").addClass(\"tiles\");\n        $(\"#right\").append(tracks_div.append(this.track_collection_container));\n\n        self.model.get(\"tracks\").each(track => {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass(\"help\");\n\n        var close_button = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Close\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    $(\".tooltip\").remove();\n                    help_div.remove();\n                }\n            }\n        ]);\n\n        help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n        $(\"#center\").append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $(\"#center\").append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Set display mode\"\n                },\n                // Close viz.\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        window.location =\n                            \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n        var modes = [\"Squish\", \"Pack\"];\n\n        var mode_mapping = {};\n        _.each(modes, mode => {\n            mode_mapping[mode] = () => {\n                self.model.set(\"default_mode\", mode);\n                self.model.get(\"tracks\").each(track => {\n                    track.set(\"mode\", mode);\n                });\n            };\n        });\n\n        make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(`${base.toLowerCase()}_color`) ||\n            this.config.get_value(\"n_color\")\n        );\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get(\"tool\");\n        var tool_name = tool.get(\"name\");\n        var dataset = this.model.get(\"dataset\");\n        tool.set_input_values(settings.get(\"values\"));\n        $.when(tool.rerun(dataset)).then(outputs => {\n            // TODO.\n        });\n\n        show_modal(\n            `Running ${tool_name} on complete dataset`,\n            `${tool_name} is running on dataset '${dataset.get(\n                \"name\"\n            )}'. Outputs are in the dataset's history.`,\n            {\n                Ok: function() {\n                    hide_modal();\n                }\n            }\n        );\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this;\n        var param_tree = this.model.get(\"parameter_tree\");\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(\n            () => {\n                var settings_leaf = param_tree.get_leaf(\n                    pm_track.get(\"settings\").get(\"values\")\n                );\n                var connected_node_ids = _.pluck(\n                    param_tree.get_connected_nodes(settings_leaf),\n                    \"id\"\n                );\n\n                // TODO: can do faster with enter?\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .filter(\n                        d =>\n                            _.find(connected_node_ids, id => id === d.id) !==\n                            undefined\n                    )\n                    .style(\"fill\", \"#f00\");\n            },\n            () => {\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .style(\"fill\", \"#000\");\n            }\n        );\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this;\n\n        var param_tree = this.model.get(\"parameter_tree\");\n        var regions = this.model.get(\"regions\");\n\n        var node = d3\n            .select(this.tool_param_tree_view.$el[0])\n            .selectAll(\"g.node\");\n\n        node.on(\"click\", (d, i) => {\n            // Get all settings corresponding to node.\n            var tool = self.model.get(\"tool\");\n\n            var dataset = self.model.get(\"dataset\");\n            var all_settings = param_tree.get_node_settings(d);\n            var run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\n                    \"Whoa there cowboy!\",\n                    `You clicked on a node to try ${self.model\n                        .get(\"tool\")\n                        .get(\n                            \"name\"\n                        )} with ${all_settings.length} different combinations of settings. You can only run 10 jobs at a time.`,\n                    {\n                        Ok: function() {\n                            hide_modal();\n                            run_jobs_deferred.resolve(false);\n                        }\n                    }\n                );\n            } else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(run_jobs => {\n                if (!run_jobs) {\n                    return;\n                }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, settings => {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get(\"default_mode\")\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, (pm_track, index) => {\n                    setTimeout(() => {\n                        // Set inputs and run tool.\n                        tool.set_input_values(\n                            pm_track.get(\"settings\").get(\"values\")\n                        );\n                        $.when(tool.rerun(dataset, regions)).then(output => {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first();\n\n                            var track_config = dataset.get(\"track_config\");\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(\n                                track_config,\n                                self,\n                                null\n                            );\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set(\"track\", track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nexport default {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n"]}