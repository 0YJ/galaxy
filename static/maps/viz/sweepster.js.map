{"version":3,"sources":["viz/sweepster.js"],"names":["_","d3","ToolInputsSettings","Backbone","Model","extend","defaults","inputs","values","ToolParameterTree","tool","tree_data","initialize","options","self","this","get","each","input","on","set_tree_data","add_param","remove_param","config","input_config","name","set","param","get_tree_params","length","params_samples","map","samples","get_samples","id","node_id","children","create_tree_data","index","param_samples","settings","setting","value","where","in_ptree","sortBy","get_num_leaves","reduce","memo","get_node_settings","target_node","fixed_settings","get_inputs_dict","cur_node","parent","depth","all_settings","get_settings","node","flatten","c","clone","isArray","get_connected_nodes","parents","cur_parent","get_subtree_nodes","a_node","get_leaf","child","toJSON","min","find_child","num_samples","SweepsterTrack","track","mode","regions","max","track_config","data_url","Galaxy","root","_tracks2","default","object_from_template","same_settings","a_track","this_settings","converted_datasets_state_url","other_settings","prop","to_dict","model","_visualization2","Visualization","prototype","dataset","parameter_tree","SweepsterVisualization","_data2","Dataset","tracks","_tools2","Tool","default_mode","GenomeRegionCollection","TrackCollection","tool_with_samplable_inputs","add_track","tree_config","dataset_id","tool_id","type","SweepsterTrackView","View","tagName","render","canvas_manager","settings_td","draw_tiles","appendTo","run_on_dataset_button","settings_div","trigger","$el","icon_menu","title","icon_class","on_click","$","css","remove","text","create_icon_buttons_menu","toggle","tile_containers","prepend","addClass","w_scale","html","when","data_manager","canvas","width","ToolInputValOrSweepView","number_input_template","select_input_template","find","data_is_ready","then","data_ok","single_input_row","sweep_inputs_row","TILE_LEN","resolution","get_data","region","tile_data","new_canvas","get_canvas_height","option","options_text","empty","append","tool_row","change","attr","parseFloat","IntegerToolParameter","ToolParameterTreeDesignView","SelectToolParameter","val","join","tool_form_view","insertAfter","menu","_iconButton2","input_view","hide","show","cluster","size","nodes","position","ToolFormView","connected_node_ids","not","i","at","ToolParameterTreeView","className","helpText","tree_params","height","diagonal","svg","projection","d","y","x","label","param_depths","uniq","pluck","key","left","default_value","center_left","enter","data","tree_design_view","undefined","toString","tracks_div","help_div","close_button","SweepsterVisualizationView","CanvasManager","tool_param_tree_view","track_collection_container","handle_node_clicks","view","ConfigSettingCollection","from_models_and_saved_values","window","tooltip_config","placement","modes","mode_mapping","make_popupmenu","get_base_color","tool_name","set_input_values","show_modal","pm_track","track_view","hover","tr","settings_leaf","param_tree","first","hide_modal","run_jobs_deferred","location","base","get_value","toLowerCase","run_tool_on_dataset","rerun","outputs","Ok","select","selectAll","filter","style","Deferred","resolve","run_jobs","new_tracks","setTimeout","output","prefs","to_key_value_dict","track_obj","init_for_tool_data"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\nimport * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport util from \"viz/trackster/util\";\nimport visualization from \"viz/visualization\";\nimport tracks from \"viz/trackster/tracks\";\nimport tools from \"mvc/tool/tools\";\nimport data from \"mvc/dataset/data\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get(\"tool\")\n            .get(\"inputs\")\n            .each(function(input) {\n                // Listen for changes to input's attributes.\n                input.on(\n                    \"change:min change:max change:num_samples\",\n                    function(input) {\n                        if (input.get(\"in_ptree\")) {\n                            self.set_tree_data();\n                        }\n                    },\n                    self\n                );\n                input.on(\n                    \"change:in_ptree\",\n                    function(input) {\n                        if (input.get(\"in_ptree\")) {\n                            self.add_param(input);\n                        } else {\n                            self.remove_param(input);\n                        }\n                        self.set_tree_data();\n                    },\n                    self\n                );\n            });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, function(input_config) {\n                var input = self\n                    .get(\"tool\")\n                    .get(\"inputs\")\n                    .find(function(input) {\n                        return input.get(\"name\") === input_config.name;\n                    });\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get(\"ptree_index\")) {\n            return;\n        }\n\n        param.set(\"in_ptree\", true);\n        param.set(\"ptree_index\", this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set(\"in_ptree\", false);\n        param.set(\"ptree_index\", null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each(function(input, index) {\n            // +1 to use 1-based indexing.\n            input.set(\"ptree_index\", index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), function(param) {\n            return {\n                param: param,\n                samples: param.get_samples()\n            };\n        });\n        var node_id = 0,\n            // Creates tree data recursively.\n            create_tree_data = function(params_samples, index) {\n                var param_samples = params_samples[index],\n                    param = param_samples.param,\n                    param_label = param.get(\"label\"),\n                    settings = param_samples.samples;\n\n                // Create leaves when last parameter setting is reached.\n                if (params_samples.length - 1 === index) {\n                    return _.map(settings, function(setting) {\n                        return {\n                            id: node_id++,\n                            name: setting,\n                            param: param,\n                            value: setting\n                        };\n                    });\n                }\n\n                // Recurse to handle other parameters.\n                return _.map(settings, function(setting) {\n                    return {\n                        id: node_id++,\n                        name: setting,\n                        param: param,\n                        value: setting,\n                        children: create_tree_data(params_samples, index + 1)\n                    };\n                });\n            };\n\n        this.set(\"tree_data\", {\n            name: \"Root\",\n            id: node_id++,\n            children:\n                params_samples.length !== 0\n                    ? create_tree_data(params_samples, 0)\n                    : null\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(\n            this.get(\"tool\")\n                .get(\"inputs\")\n                .where({ in_ptree: true })\n        ).sortBy(function(input) {\n            return input.get(\"ptree_index\");\n        });\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce(function(memo, param) {\n            return memo * param.get_samples().length;\n        }, 1);\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while (cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get(\"name\")] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this,\n            get_settings = function(node, settings) {\n                // Add setting for this node. Root node does not have a param,\n                // however.\n                if (node.param) {\n                    settings[node.param.get(\"name\")] = node.value;\n                }\n\n                if (!node.children) {\n                    // At leaf node, so return settings.\n                    return new ToolInputsSettings({\n                        inputs: self.get(\"tool\").get(\"inputs\"),\n                        values: settings\n                    });\n                } else {\n                    // At interior node: return list of subtree settings.\n                    return _.flatten(\n                        _.map(node.children, function(c) {\n                            return get_settings(c, _.clone(settings));\n                        })\n                    );\n                }\n            },\n            all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) {\n            all_settings = [all_settings];\n        }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = function(a_node) {\n            if (!a_node.children) {\n                return a_node;\n            } else {\n                // At interior node: return subtree nodes.\n                return _.flatten([\n                    a_node,\n                    _.map(a_node.children, function(c) {\n                        return get_subtree_nodes(c);\n                    })\n                ]);\n            }\n        };\n\n        // Get node's parents.\n        var parents = [],\n            cur_parent = node.parent;\n        while (cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get(\"tree_data\"),\n            find_child = function(children) {\n                return _.find(children, function(child) {\n                    return settings[child.param.get(\"name\")] === child.value;\n                });\n            };\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(function(param) {\n            return {\n                name: param.get(\"name\"),\n                min: param.get(\"min\"),\n                max: param.get(\"max\"),\n                num_samples: param.get(\"num_samples\")\n            };\n        });\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: \"Pack\",\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set(\"regions\", options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend(\n                {\n                    data_url: Galaxy.root + \"dummy1\",\n                    converted_datasets_state_url: Galaxy.root + \"dummy2\"\n                },\n                options.track\n            );\n            this.set(\n                \"track\",\n                tracks.object_from_template(track_config, {}, null)\n            );\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get(\"settings\"),\n            other_settings = a_track.get(\"settings\");\n        for (var prop in this_settings) {\n            if (\n                !other_settings[prop] ||\n                this_settings[prop] !== other_settings[prop]\n            ) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get(\"track\").to_dict(),\n            settings: this.get(\"settings\"),\n            regions: this.get(\"regions\")\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: \"Pack\"\n    }),\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data.Dataset(options.dataset));\n        this.set(\"tool\", new tools.Tool(options.tool));\n        this.set(\n            \"regions\",\n            new visualization.GenomeRegionCollection(options.regions)\n        );\n        this.set(\"tracks\", new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get(\"tool\");\n        this.set(\"tool_with_samplable_inputs\", tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs([\n            \"data\",\n            \"hidden_data\",\n            \"conditional\",\n            \"text\"\n        ]);\n\n        this.set(\n            \"parameter_tree\",\n            new ToolParameterTree({\n                tool: tool_with_samplable_inputs,\n                config: options.tree_config\n            })\n        );\n    },\n\n    add_track: function(track) {\n        this.get(\"tracks\").add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get(\"id\"),\n            title:\n                \"Parameter exploration for dataset '\" +\n                this.get(\"dataset\").get(\"name\") +\n                \"'\",\n            type: \"sweepster\",\n            dataset_id: this.get(\"dataset\").id,\n            tool_id: this.get(\"tool\").id,\n            regions: this.get(\"regions\").toJSON(),\n            tree_config: this.get(\"parameter_tree\").toJSON(),\n            tracks: this.get(\"tracks\").toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: \"tr\",\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on(\"change:track change:mode\", this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get(\"settings\"),\n            values = settings.get(\"values\"),\n            settings_td = $(\"<td/>\")\n                .addClass(\"settings\")\n                .appendTo(this.$el),\n            settings_div = $(\"<div/>\")\n                .addClass(\"track-info\")\n                .hide()\n                .appendTo(settings_td);\n        settings_div.append(\n            $(\"<div/>\")\n                .css(\"font-weight\", \"bold\")\n                .text(\"Track Settings\")\n        );\n        settings.get(\"inputs\").each(function(input) {\n            settings_div.append(\n                input.get(\"label\") + \": \" + values[input.get(\"name\")] + \"<br/>\"\n            );\n        });\n        var self = this,\n            run_on_dataset_button = $(\"<button/>\")\n                .appendTo(settings_div)\n                .text(\"Run on complete dataset\")\n                .click(function() {\n                    settings_div.toggle();\n                    self.trigger(\"run_on_dataset\", settings);\n                });\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: \"Settings\",\n                icon_class: \"gear track-settings\",\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: \"Remove\",\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    self.$el.remove();\n                    $(\".tooltip\").remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get(\"regions\").each(function() {\n            self.$el.append(\n                $(\"<td/>\")\n                    .addClass(\"tile\")\n                    .html(\n                        $(\"<img/>\").attr(\n                            \"src\",\n                            Galaxy.root + \"images/loading_large_white_bg.gif\"\n                        )\n                    )\n            );\n        });\n\n        if (this.model.get(\"track\")) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this,\n            track = this.model.get(\"track\"),\n            regions = this.model.get(\"regions\"),\n            tile_containers = this.$el.find(\"td.tile\");\n\n        // Do nothing if track is not defined.\n        if (!track) {\n            return;\n        }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(function(data_ok) {\n            // Draw tile for each region.\n            regions.each(function(region, index) {\n                var resolution = region.length() / self.TILE_LEN,\n                    w_scale = 1 / resolution,\n                    mode = self.model.get(\"mode\");\n                $.when(\n                    track.data_manager.get_data(region, mode, resolution, {})\n                ).then(function(tile_data) {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(\n                        tile_data,\n                        mode,\n                        w_scale,\n                        canvas.width\n                    );\n                    track.draw_tile(\n                        tile_data,\n                        canvas.getContext(\"2d\"),\n                        mode,\n                        region,\n                        w_scale\n                    );\n                    $(tile_containers[index])\n                        .empty()\n                        .append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n    // Template for rendering sweep inputs:\n    number_input_template:\n        '<div class=\"form-row-input sweep\">' +\n        '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n        '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n        ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n        \"</div>\",\n\n    select_input_template:\n        '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model,\n            type = input.get(\"type\"),\n            single_input_row = this.$el.find(\".form-row-input\"),\n            sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(\":input\").change(function() {\n            input.set(\"value\", $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $(\n                _.template(this.number_input_template)(this.model.toJSON())\n            );\n        } else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find(\"select option\"), function(\n                    option\n                ) {\n                    return $(option).val();\n                }),\n                options_text = options.join(\", \");\n            sweep_inputs_row = $(\n                _.template(this.select_input_template)({\n                    options: options_text\n                })\n            );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu(\n                [\n                    {\n                        title: \"Add parameter to tree\",\n                        icon_class: \"plus-button\",\n                        on_click: function() {\n                            input.set(\"in_ptree\", true);\n                            single_input_row.hide();\n                            sweep_inputs_row.show();\n                            $(this).hide();\n                            self.$el.find(\".icon-button.toggle\").show();\n                        }\n                    },\n                    {\n                        title: \"Remove parameter from tree\",\n                        icon_class: \"toggle\",\n                        on_click: function() {\n                            // Remove parameter from tree params where name matches clicked paramter.\n                            input.set(\"in_ptree\", false);\n                            sweep_inputs_row.hide();\n                            single_input_row.show();\n                            $(this).hide();\n                            self.$el.find(\".icon-button.plus-button\").show();\n                        }\n                    }\n                ],\n                {}\n            );\n        this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get(\"in_ptree\")) {\n            single_input_row.hide();\n            self.$el.find(\".icon-button.plus-button\").hide();\n        } else {\n            self.$el.find(\".icon-button.toggle\").hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each([\"min\", \"max\", \"num_samples\"], function(attr) {\n            sweep_inputs_row.find(\".\" + attr).change(function() {\n                input.set(attr, parseFloat($(this).val()));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: \"tree-design\",\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get(\"tool\")\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this,\n            inputs = self.model.get(\"tool\").get(\"inputs\");\n        this.$el\n            .find(\".form-row\")\n            .not(\".form-actions\")\n            .each(function(i) {\n                var input_view = new ToolInputValOrSweepView({\n                    model: inputs.at(i),\n                    tool_row: $(this)\n                });\n            });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: \"tool-parameter-tree\",\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on(\"change:tree_data\", this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster().size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal().projection(function(d) {\n            return [d.y, d.x];\n        });\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, function(param, index) {\n            var x = param_depths[index + 1],\n                center_left = $(\"#center\").position().left;\n            self.$el.append(\n                $(\"<div>\")\n                    .addClass(\"label\")\n                    .text(param.get(\"label\"))\n                    .css(\"left\", x + center_left)\n            );\n        });\n\n        // Set up vis element.\n        var vis = d3\n            .select(this.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis\n            .selectAll(\"path.link\")\n            .data(cluster.links(nodes))\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis\n            .selectAll(\"g.node\")\n            .data(nodes)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + d.y + \",\" + d.x + \")\";\n            })\n            .on(\"mouseover\", function(a_node) {\n                var connected_node_ids = _.pluck(\n                    self.model.get_connected_nodes(a_node),\n                    \"id\"\n                );\n                // TODO: probably can use enter() to do this more easily.\n                node\n                    .filter(function(d) {\n                        return (\n                            _.find(connected_node_ids, function(id) {\n                                return id === d.id;\n                            }) !== undefined\n                        );\n                    })\n                    .style(\"fill\", \"#f00\");\n            })\n            .on(\"mouseout\", function() {\n                node.style(\"fill\", \"#000\");\n            });\n\n        node.append(\"circle\").attr(\"r\", 9);\n\n        node\n            .append(\"text\")\n            .attr(\"dx\", function(d) {\n                return d.children ? -12 : 12;\n            })\n            .attr(\"dy\", 3)\n            .attr(\"text-anchor\", function(d) {\n                return d.children ? \"end\" : \"start\";\n            })\n            .text(function(d) {\n                return d.name;\n            });\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: \"Sweepster\",\n\n    helpText:\n        \"<div><h4>Getting Started</h4>\" +\n        \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n        \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n        \"<li>Run the tool with different settings by clicking on tree nodes\" +\n        \"</ol></div>\",\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(\n            this.$el.parents(\"body\")\n        );\n        this.tool_param_tree_view = new ToolParameterTreeView({\n            model: this.model.get(\"parameter_tree\")\n        });\n        this.track_collection_container = $(\"<table/>\").addClass(\"tracks\");\n\n        // Handle node clicks for tree data.\n        this.model\n            .get(\"parameter_tree\")\n            .on(\"change:tree_data\", this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get(\"tracks\").each(function(track) {\n            track.get(\"track\").view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\"\n                }\n            ],\n            {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get(\"parameter_tree\")\n        });\n\n        $(\"#left\").append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this,\n            regions = self.model.get(\"regions\"),\n            tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n        regions.each(function(region) {\n            tr.append($(\"<th>\").text(region.toString()));\n        });\n        tr\n            .children()\n            .first()\n            .attr(\"colspan\", 2);\n\n        var tracks_div = $(\"<div>\").addClass(\"tiles\");\n        $(\"#right\").append(tracks_div.append(this.track_collection_container));\n\n        self.model.get(\"tracks\").each(function(track) {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass(\"help\"),\n            close_button = mod_icon_btn.create_icon_buttons_menu([\n                {\n                    title: \"Close\",\n                    icon_class: \"cross-circle\",\n                    on_click: function() {\n                        $(\".tooltip\").remove();\n                        help_div.remove();\n                    }\n                }\n            ]);\n\n        help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n        $(\"#center\").append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $(\"#center\").append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Set display mode\"\n                },\n                // Close viz.\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        window.location =\n                            \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n        var modes = [\"Squish\", \"Pack\"],\n            mode_mapping = {};\n        _.each(modes, function(mode) {\n            mode_mapping[mode] = function() {\n                self.model.set(\"default_mode\", mode);\n                self.model.get(\"tracks\").each(function(track) {\n                    track.set(\"mode\", mode);\n                });\n            };\n        });\n\n        make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return (\n            this.config.get_value(base.toLowerCase() + \"_color\") ||\n            this.config.get_value(\"n_color\")\n        );\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get(\"tool\"),\n            tool_name = tool.get(\"name\"),\n            dataset = this.model.get(\"dataset\");\n        tool.set_input_values(settings.get(\"values\"));\n        $.when(tool.rerun(dataset)).then(function(outputs) {\n            // TODO.\n        });\n\n        show_modal(\n            \"Running \" + tool_name + \" on complete dataset\",\n            tool_name +\n                \" is running on dataset '\" +\n                dataset.get(\"name\") +\n                \"'. Outputs are in the dataset's history.\",\n            {\n                Ok: function() {\n                    hide_modal();\n                }\n            }\n        );\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this,\n            param_tree = this.model.get(\"parameter_tree\");\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(\n            function() {\n                var settings_leaf = param_tree.get_leaf(\n                    pm_track.get(\"settings\").get(\"values\")\n                );\n                var connected_node_ids = _.pluck(\n                    param_tree.get_connected_nodes(settings_leaf),\n                    \"id\"\n                );\n\n                // TODO: can do faster with enter?\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .filter(function(d) {\n                        return (\n                            _.find(connected_node_ids, function(id) {\n                                return id === d.id;\n                            }) !== undefined\n                        );\n                    })\n                    .style(\"fill\", \"#f00\");\n            },\n            function() {\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .style(\"fill\", \"#000\");\n            }\n        );\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this,\n            param_tree = this.model.get(\"parameter_tree\"),\n            regions = this.model.get(\"regions\"),\n            node = d3\n                .select(this.tool_param_tree_view.$el[0])\n                .selectAll(\"g.node\");\n        node.on(\"click\", function(d, i) {\n            // Get all settings corresponding to node.\n            var tool = self.model.get(\"tool\"),\n                dataset = self.model.get(\"dataset\"),\n                all_settings = param_tree.get_node_settings(d),\n                run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\n                    \"Whoa there cowboy!\",\n                    \"You clicked on a node to try \" +\n                        self.model.get(\"tool\").get(\"name\") +\n                        \" with \" +\n                        all_settings.length +\n                        \" different combinations of settings. You can only run 10 jobs at a time.\",\n                    {\n                        Ok: function() {\n                            hide_modal();\n                            run_jobs_deferred.resolve(false);\n                        }\n                    }\n                );\n            } else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(function(run_jobs) {\n                if (!run_jobs) {\n                    return;\n                }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, function(settings) {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get(\"default_mode\")\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, function(pm_track, index) {\n                    setTimeout(function() {\n                        // Set inputs and run tool.\n                        tool.set_input_values(\n                            pm_track.get(\"settings\").get(\"values\")\n                        );\n                        $.when(tool.rerun(dataset, regions)).then(function(\n                            output\n                        ) {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first(),\n                                track_config = dataset.get(\"track_config\");\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(\n                                track_config,\n                                self,\n                                null\n                            );\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set(\"track\", track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nexport default {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n"]}