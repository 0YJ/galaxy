{"version":3,"sources":["viz/trackster.js"],"names":["ui","view","require","mod_utils","define","cssLoadFile","Base","initialize","visualization","mod_icon_btn","query_string","GridView","this","save_viz","apply","arguments","extend","Backbone","Model","position","annotation","baseURL","Galaxy","modal","show","title","bookmarks","$","ajax","url","type","children","text","dataType","overview_track_name","overview_drawable","config","get_value","viz_config","to_dict","success","chrom","vis_info","start","low","end","high","overview","hide","window","history","pushState","error","vis_id","body","buttons","dbkey","vis_json","JSON","stringify","has_changes","createButtonMenu","location","hash","self","_","each","Cancel","icon_class","on_click","create_icon_buttons_menu","select_datasets","track","add_drawable","tracks","object_from_template","handle_unsaved_changes","DrawableGroup","name","tooltip_config","placement","force_right_panel","css","bookmarks_container","new_bookmark","position_link","go_to","delete_icon_container","num_rows","editable","help_text","addClass","appendTo","position_div","annotation_div","click","create_visualization","prependTo","slideUp","editor","load_chroms_deferred","viewport_config","use_textarea","overview_drawable_name","view_config","drawables_config","bookmarks_config","TracksterView","header","when","length","undefined","drawables","set_overview","change_chrom","chrom_info","bookmark","i","set_up_router","init_keyboard_nav","document","keyup","move_fraction","options","TrackBrowserRouter","e","is","Math","round","viewport_container","height","scrollTop","TracksterUI","off","root","Save","then","append","resize_window","View","choose_existing_or_new","buttonMenu","$el","dataset_id","get","hda_ldda","galaxy_config","app","id","view_new","listTracksParams","dataset_params","view_in_saved","url_base","dict_format","View in saved visualization","View in new visualization","view_existing","viewport","embedded","init_editor","tracks_grid","Add to visualization","parent","find","val","param","container","data","alert","response","template_view_new","Create","create_browser","dbkeys_in_genomes","map","r","default_dbkey","contains","focus","select2","html","add_dataset","gene_region","GalaxyApp","data_type","track_data","add_bookmark","on"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui              = null;\nvar view            = null;\nvar browser_router  = null;\n\n// load required libraries\nrequire([\n    'utils/utils',\n    'libs/jquery/jquery.event.drag',\n    'libs/jquery/jquery.event.hover',\n    'libs/jquery/jquery.mousewheel',\n    'libs/jquery/jquery-ui',\n    'libs/jquery/select2',\n    'libs/farbtastic',\n    'libs/jquery/jquery.form',\n    'libs/jquery/jquery.rating',\n    'ui/editable-text',\n], function(mod_utils) {\n    mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n    mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n    mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n    mod_utils.cssLoadFile(\"static/style/library.css\");\n    mod_utils.cssLoadFile(\"static/style/trackster.css\");\n});\n\n// trackster viewer\ndefine([\n    \"libs/underscore\",\n    \"viz/trackster/tracks\",\n    \"viz/visualization\",\n    \"mvc/ui/icon-button\",\n    \"utils/query-string-parsing\",\n    \"mvc/grid/grid-view\"\n], function(_, tracks, visualization, mod_icon_btn, query_string, GridView) {\n\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if( this.initialize ) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function( baseURL ) {\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this).children(\".position\").text(),\n                annotation: $(this).children(\".annotation\").text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = (view.overview_drawable ? view.overview_drawable.config.get_value('name') : null),\n            viz_config = {\n                'view': view.to_dict(),\n                'viewport': { 'chrom': view.chrom, 'start': view.low , 'end': view.high, 'overview': overview_track_name },\n                'bookmarks': bookmarks\n            };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: Galaxy.root + \"visualization/save\",\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                'id'        : view.vis_id,\n                'title'     : view.config.get_value('name'),\n                'dbkey'     : view.dbkey,\n                'type'      : 'trackster',\n                'vis_json'  : JSON.stringify(viz_config)\n            }\n        }).success(function(vis_info) {\n            Galaxy.modal.hide();\n            view.vis_id = vis_info.vis_id;\n            view.has_changes = false;\n\n            // Needed to set URL when first saving a visualization.\n            window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n        }).error(function() {\n            // show dialog\n            Galaxy.modal.show({\n                title   : \"Could Not Save\",\n                body    : \"Could not save visualization. Please try again later.\",\n                buttons : { \"Cancel\": function() { Galaxy.modal.hide(); } }\n            });\n        });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu([\n            { icon_class: 'plus-button', title: 'Add tracks', on_click: function() {\n                visualization.select_datasets({ 'dbkey': view.dbkey },\n                function(new_tracks) {\n                    _.each(new_tracks, function(track) {\n                        view.add_drawable( tracks.object_from_template(track, view, view) );\n                    });\n                });\n            } },\n            { icon_class: 'block--plus', title: 'Add group', on_click: function() {\n                view.add_drawable( new tracks.DrawableGroup(view, view, { name: \"New Group\" }) );\n            } },\n            { icon_class: 'bookmarks', title: 'Bookmarks', on_click: function() {\n                // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                force_right_panel(($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\"));\n            } },\n            {\n                icon_class: 'globe',\n                title: 'Circster',\n                on_click: function() {\n                    window.location = self.baseURL + 'visualization/circster?id=' + view.vis_id;\n                }\n            },\n            { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                self.save_viz();\n            } },\n            {\n                icon_class: 'cross-circle',\n                title: 'Close',\n                on_click: function() {\n                    self.handle_unsaved_changes(view);\n                }\n            }\n        ],\n        {\n            tooltip_config: { placement: 'bottom' }\n        });\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\"),\n            new_bookmark = $(\"<div/>\").addClass(\"bookmark\").appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\").addClass(\"position\").appendTo(new_bookmark),\n            position_link = $(\"<a href=''/>\").text(position).appendTo(position_div).click(function() {\n                view.go_to(position);\n                return false;\n            }),\n            annotation_div = $(\"<div/>\").text(annotation).appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\").addClass(\"delete-icon-container\").prependTo(new_bookmark).click(function (){\n                    // Remove bookmark.\n                    new_bookmark.slideUp(\"fast\");\n                    new_bookmark.remove();\n                    view.has_changes = true;\n                    return false;\n                }),\n                delete_icon = $(\"<a href=''/>\").addClass(\"icon-button delete\").appendTo(delete_icon_container);\n            annotation_div.make_text_editable({\n                num_rows: 3,\n                use_textarea: true,\n                help_text: \"Edit bookmark note\"\n            }).addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n\n        // Create view.\n        var self = this,\n            view = new tracks.TracksterView(_.extend(view_config, {header: false}));\n        view.editor = true;\n        $.when( view.load_chroms_deferred ).then(function(chrom_info) {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom,\n                    start = viewport_config.start,\n                    end = viewport_config.end,\n                    overview_drawable_name = viewport_config.overview;\n\n                if (chrom && (start !== undefined) && end) {\n                    view.change_chrom(chrom, start, end);\n                }\n                else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            }\n            else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config,\n                    drawable_type,\n                    drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable( tracks.object_from_template( drawables_config[i], view, view ) );\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (view.drawables[i].config.get_value('name') === overview_drawable_name) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(bookmark['position'], bookmark['annotation'], editable);\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({view: view});\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router : function(options) {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(function(e) {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(':input')) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch(e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(view.viewport_container.height()/15.0);\n                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() - 20);\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(view.viewport_container.height()/15.0);\n                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() + 20);\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body: \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    \"Cancel\": function() { Galaxy.modal.hide(); },\n                    \"Leave without Saving\" : function() {\n                        $(window).off('beforeunload');\n                        window.location = Galaxy.root + 'visualization';\n                    },\n                    \"Save\" : function() {\n                        $.when(self.save_viz()).then(function() {\n                            window.location = Galaxy.root + 'visualization';\n                        });\n                    }\n                }\n            });\n\n        }\n        else {\n            window.location = Galaxy.root + 'visualization';\n        }\n    }\n\n});\n\nvar TracksterView = Backbone.View.extend( {\n    // initalize trackster\n    initialize : function () {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\");\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(function() { view.resize_window(); });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n        // check if id is available\n        if (galaxy_config.app.id){\n            this.view_existing();\n        } else if( query_string.get( 'dataset_id' ) ){\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new : function () {\n        var self = this;\n        var dbkey = query_string.get( 'dbkey' ),\n            listTracksParams = {},\n            dataset_params = {\n                dbkey       : dbkey,\n                dataset_id  : query_string.get( 'dataset_id' ),\n                hda_ldda    : query_string.get( 'hda_ldda' ),\n                gene_region : query_string.get( 'gene_region' ),\n            };\n        if (dbkey){\n            listTracksParams[ 'f-dbkey' ] = dbkey;\n        }\n\n        Galaxy.modal.show({\n            title : \"View Data in a New or Saved Visualization?\",\n            // either have text in here or have to remove body and the header/footer margins\n            body  : (\n                \"<p><ul style='list-style: disc inside none'>You can add this dataset as:\" +\n                    \"<li>a new track to one of your existing, saved Trackster \" +\n                    \"sessions if they share the genome build: <b>\" + ( dbkey || \"Not available.\" ) + \"</b></li>\" +\n                    \"<li>or create a new session with this dataset as the only track</li>\" +\n                \"</ul></p>\"\n            ),\n            buttons : {\n                \"Cancel\": function() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"View in saved visualization\": function() {\n                    self.view_in_saved( dataset_params );\n                },\n                \"View in new visualization\": function() {\n                    self.view_new();\n                }\n            }\n        });\n    },\n\n    // view\n    view_in_saved : function( dataset_params ) {\n        var tracks_grid = new GridView( {\n            url_base    : Galaxy.root + 'visualization/list_tracks',\n            dict_format : true,\n            embedded    : true\n        });\n        Galaxy.modal.show({\n            title   : \"Add Data to Saved Visualization\",\n            body    : tracks_grid.$el,\n            buttons : {\n                \"Cancel\": function() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"Add to visualization\": function() {\n                    $(parent.document).find('input[name=id]:checked').each(function() {\n                        dataset_params.id = $(this).val();\n                        window.location = Galaxy.root + \"visualization/trackster?\" + $.param(dataset_params);\n                    });\n                }\n            }\n        });\n    },\n\n    // view\n    view_existing : function () {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization( {\n            container: $(\"#center .unified-panel-body\"),\n            name: viz_config.title,\n            vis_id: viz_config.vis_id,\n            dbkey: viz_config.dbkey\n        }, viz_config.viewport, viz_config.tracks, viz_config.bookmarks, true);\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new : function () {\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax( {\n            url: Galaxy.root + \"api/genomes?chrom_info=True\",\n            data: {},\n            error: function() { alert( \"Couldn't create new browser.\" ); },\n            success: function(response) {\n                // show dialog\n                Galaxy.modal.show({\n                    title   : \"New Visualization\",\n                    body    : self.template_view_new(response),\n                    buttons : {\n                        \"Cancel\": function() { window.location = Galaxy.root + \"visualizations/list\"; },\n                        \"Create\": function() { self.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val()); Galaxy.modal.hide(); }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map( function( r ){ return r[1]; });\n                if (galaxy_config.app.default_dbkey && _.contains(dbkeys_in_genomes,galaxy_config.app.default_dbkey)) {\n                    $(\"#new-dbkey\").val( galaxy_config.app.default_dbkey );\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response) {\n        // start template\n        var html =  '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n                        '<div class=\"form-row\">' +\n                            '<label for=\"new-title\">Browser name:</label>' +\n                            '<div class=\"form-row-input\">' +\n                                '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n                            '</div>' +\n                            '<div style=\"clear: both;\"></div>' +\n                        '</div>' +\n                        '<div class=\"form-row\">' +\n                            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n                            '<div class=\"form-row-input\">' +\n                                '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html += '<option value=\"' + response[i][1] + '\">' + response[i][0] + '</option>';\n        }\n\n        // close selection/finalize template\n        html +=                 '</select>' +\n                            '</div>' +\n                            '<div style=\"clear: both;\"></div>' +\n                        '</div>' +\n                        '<div class=\"form-row\">' +\n                            'Is the build not listed here? ' +\n                            '<a href=\"' + Galaxy.root + 'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n                        '</div>' +\n                    '</form>';\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser : function(name, dbkey) {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization ({\n            container: $(\"#center .unified-panel-body\"),\n            name: name,\n            dbkey: dbkey\n        }, galaxy_config.app.gene_region);\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor : function () {\n        // set title\n        $(\"#center .unified-panel-title\").text(view.config.get_value('name') + \" (\" + view.dbkey + \")\");\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url: Galaxy.root + \"api/datasets/\" + galaxy_config.app.add_dataset,\n                data: { hda_ldda: 'hda', data_type: 'track_config' },\n                dataType: \"json\",\n                success: function(track_data) { view.add_drawable( tracks.object_from_template(track_data, view, view) ); }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(function() {\n            // add new bookmark.\n            var position = view.chrom + \":\" + view.low + \"-\" + view.high,\n                annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on('beforeunload', function() {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nreturn {\n    TracksterUI: TracksterUI,\n    GalaxyApp : TracksterView\n};\n\n});\n"]}