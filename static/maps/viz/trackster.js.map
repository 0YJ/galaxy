{"version":3,"sources":["viz/trackster.js"],"names":["_","ui","view","_utils2","default","cssLoadFile","Base","this","initialize","apply","arguments","extend","Backbone","Model","TracksterUI","baseURL","save_viz","Galaxy","modal","show","title","body","bookmarks","$","position","children","text","annotation","overview_track_name","overview_drawable","config","get_value","to_dict","viewport","chrom","start","low","end","high","overview","ajax","url","dbkey","type","vis_json","JSON","stringify","viz_config","hide","vis_id","window","history","pushState","vis_info","location","hash","dataType","data","id","createButtonMenu","create_icon_buttons_menu","Cancel","on_click","_visualization2","select_datasets","new_tracks","each","track","add_drawable","_tracks2","object_from_template","icon_class","DrawableGroup","name","force_right_panel","css","self","handle_unsaved_changes","bookmarks_container","buttonMenu","position_div","menu","add_bookmark","editable","delete_icon_container","new_bookmark","addClass","appendTo","delete_icon","annotation_div","num_rows","use_textarea","help_text","create_visualization","prependTo","viewport_config","slideUp","load_chroms_deferred","has_changes","overview_drawable_name","make_text_editable","change_chrom","drawables_config","bookmarks_config","set_overview","view_config","header","editor","when","then","chrom_info","bookmark","undefined","set_up_router","i","length","drawables","move_fraction","options","init_keyboard_nav","document","keyup","e","is","TracksterView","Math","round","viewport_container","height","scrollTop","append","choose_existing_or_new","view_new","dataset_params","off","dataset_id","root","gene_region","View","$el","attr","embedded","galaxy_config","app","view_existing","_queryStringParsing2","get","container","listTracksParams","error","success","template_view_new","buttons","view_in_saved","tracks_grid","_gridView2","url_base","dbkeys_in_genomes","dict_format","select2","Add to visualization","parent","find","val","param","create_browser","trigger","init_editor","response","map","r","default_dbkey","focus","html","add_dataset","hda_ldda","data_type","track_data","click","on","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// trackster viewer\nimport * as _ from \"libs/underscore\";\nimport tracks from \"viz/trackster/tracks\";\nimport visualization from \"viz/visualization\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport query_string from \"utils/query-string-parsing\";\nimport GridView from \"mvc/grid/grid-view\";\nimport mod_utils from \"utils/utils\";\nimport \"libs/jquery/jquery.event.drag\";\nimport \"libs/jquery/jquery.event.hover\";\nimport \"libs/jquery/jquery.mousewheel\";\nimport \"libs/jquery/jquery-ui\";\nimport \"libs/jquery/select2\";\nimport \"libs/farbtastic\";\nimport \"libs/jquery/jquery.form\";\nimport \"libs/jquery/jquery.rating\";\nimport \"ui/editable-text\";\nmod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\nmod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\nmod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\nmod_utils.cssLoadFile(\"static/style/library.css\");\nmod_utils.cssLoadFile(\"static/style/trackster.css\");\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if (this.initialize) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function(baseURL) {\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this)\n                    .children(\".position\")\n                    .text(),\n                annotation: $(this)\n                    .children(\".annotation\")\n                    .text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = view.overview_drawable\n                ? view.overview_drawable.config.get_value(\"name\")\n                : null,\n            viz_config = {\n                view: view.to_dict(),\n                viewport: {\n                    chrom: view.chrom,\n                    start: view.low,\n                    end: view.high,\n                    overview: overview_track_name\n                },\n                bookmarks: bookmarks\n            };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: Galaxy.root + \"visualization/save\",\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                id: view.vis_id,\n                title: view.config.get_value(\"name\"),\n                dbkey: view.dbkey,\n                type: \"trackster\",\n                vis_json: JSON.stringify(viz_config)\n            }\n        })\n            .success(function(vis_info) {\n                Galaxy.modal.hide();\n                view.vis_id = vis_info.vis_id;\n                view.has_changes = false;\n\n                // Needed to set URL when first saving a visualization.\n                window.history.pushState(\n                    {},\n                    \"\",\n                    vis_info.url + window.location.hash\n                );\n            })\n            .error(function() {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Could Not Save\",\n                    body:\n                        \"Could not save visualization. Please try again later.\",\n                    buttons: {\n                        Cancel: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu(\n                [\n                    {\n                        icon_class: \"plus-button\",\n                        title: \"Add tracks\",\n                        on_click: function() {\n                            visualization.select_datasets(\n                                { dbkey: view.dbkey },\n                                function(new_tracks) {\n                                    _.each(new_tracks, function(track) {\n                                        view.add_drawable(\n                                            tracks.object_from_template(\n                                                track,\n                                                view,\n                                                view\n                                            )\n                                        );\n                                    });\n                                }\n                            );\n                        }\n                    },\n                    {\n                        icon_class: \"block--plus\",\n                        title: \"Add group\",\n                        on_click: function() {\n                            view.add_drawable(\n                                new tracks.DrawableGroup(view, view, {\n                                    name: \"New Group\"\n                                })\n                            );\n                        }\n                    },\n                    {\n                        icon_class: \"bookmarks\",\n                        title: \"Bookmarks\",\n                        on_click: function() {\n                            // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                            force_right_panel(\n                                $(\"div#right\").css(\"right\") == \"0px\"\n                                    ? \"hide\"\n                                    : \"show\"\n                            );\n                        }\n                    },\n                    {\n                        icon_class: \"globe\",\n                        title: \"Circster\",\n                        on_click: function() {\n                            window.location =\n                                self.baseURL +\n                                \"visualization/circster?id=\" +\n                                view.vis_id;\n                        }\n                    },\n                    {\n                        icon_class: \"disk--arrow\",\n                        title: \"Save\",\n                        on_click: function() {\n                            self.save_viz();\n                        }\n                    },\n                    {\n                        icon_class: \"cross-circle\",\n                        title: \"Close\",\n                        on_click: function() {\n                            self.handle_unsaved_changes(view);\n                        }\n                    }\n                ],\n                {\n                    tooltip_config: { placement: \"bottom\" }\n                }\n            );\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\"),\n            new_bookmark = $(\"<div/>\")\n                .addClass(\"bookmark\")\n                .appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\")\n                .addClass(\"position\")\n                .appendTo(new_bookmark),\n            position_link = $(\"<a href=''/>\")\n                .text(position)\n                .appendTo(position_div)\n                .click(function() {\n                    view.go_to(position);\n                    return false;\n                }),\n            annotation_div = $(\"<div/>\")\n                .text(annotation)\n                .appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\")\n                    .addClass(\"delete-icon-container\")\n                    .prependTo(new_bookmark)\n                    .click(function() {\n                        // Remove bookmark.\n                        new_bookmark.slideUp(\"fast\");\n                        new_bookmark.remove();\n                        view.has_changes = true;\n                        return false;\n                    }),\n                delete_icon = $(\"<a href=''/>\")\n                    .addClass(\"icon-button delete\")\n                    .appendTo(delete_icon_container);\n            annotation_div\n                .make_text_editable({\n                    num_rows: 3,\n                    use_textarea: true,\n                    help_text: \"Edit bookmark note\"\n                })\n                .addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(\n        view_config,\n        viewport_config,\n        drawables_config,\n        bookmarks_config,\n        editable\n    ) {\n        // Create view.\n        var self = this,\n            view = new tracks.TracksterView(\n                _.extend(view_config, { header: false })\n            );\n        view.editor = true;\n        $.when(view.load_chroms_deferred).then(function(chrom_info) {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom,\n                    start = viewport_config.start,\n                    end = viewport_config.end,\n                    overview_drawable_name = viewport_config.overview;\n\n                if (chrom && start !== undefined && end) {\n                    view.change_chrom(chrom, start, end);\n                } else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            } else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config, drawable_type, drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable(\n                        tracks.object_from_template(\n                            drawables_config[i],\n                            view,\n                            view\n                        )\n                    );\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (\n                    view.drawables[i].config.get_value(\"name\") ===\n                    overview_drawable_name\n                ) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(\n                        bookmark[\"position\"],\n                        bookmark[\"annotation\"],\n                        editable\n                    );\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({ view: view });\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router: function(options) {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(function(e) {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(\":input\")) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch (e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(\n                        view.viewport_container.height() / 15.0\n                    );\n                    view.viewport_container.scrollTop(\n                        view.viewport_container.scrollTop() - 20\n                    );\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(\n                        view.viewport_container.height() / 15.0\n                    );\n                    view.viewport_container.scrollTop(\n                        view.viewport_container.scrollTop() + 20\n                    );\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body:\n                    \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    Cancel: function() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Leave without Saving\": function() {\n                        $(window).off(\"beforeunload\");\n                        window.location = Galaxy.root + \"visualization\";\n                    },\n                    Save: function() {\n                        $.when(self.save_viz()).then(function() {\n                            window.location = Galaxy.root + \"visualization\";\n                        });\n                    }\n                }\n            });\n        } else {\n            window.location = Galaxy.root + \"visualization\";\n        }\n    }\n});\n\nvar TracksterView = Backbone.View.extend({\n    // initalize trackster\n    initialize: function() {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\n            \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n        );\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(function() {\n            view.resize_window();\n        });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n        // check if id is available\n        if (galaxy_config.app.id) {\n            this.view_existing();\n        } else if (query_string.get(\"dataset_id\")) {\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new: function() {\n        var self = this;\n        var dbkey = query_string.get(\"dbkey\"),\n            listTracksParams = {},\n            dataset_params = {\n                dbkey: dbkey,\n                dataset_id: query_string.get(\"dataset_id\"),\n                hda_ldda: query_string.get(\"hda_ldda\"),\n                gene_region: query_string.get(\"gene_region\")\n            };\n        if (dbkey) {\n            listTracksParams[\"f-dbkey\"] = dbkey;\n        }\n\n        Galaxy.modal.show({\n            title: \"View Data in a New or Saved Visualization?\",\n            // either have text in here or have to remove body and the header/footer margins\n            body:\n                \"<p><ul style='list-style: disc inside none'>You can add this dataset as:\" +\n                \"<li>a new track to one of your existing, saved Trackster \" +\n                \"sessions if they share the genome build: <b>\" +\n                (dbkey || \"Not available.\") +\n                \"</b></li>\" +\n                \"<li>or create a new session with this dataset as the only track</li>\" +\n                \"</ul></p>\",\n            buttons: {\n                Cancel: function() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"View in saved visualization\": function() {\n                    self.view_in_saved(dataset_params);\n                },\n                \"View in new visualization\": function() {\n                    self.view_new();\n                }\n            }\n        });\n    },\n\n    // view\n    view_in_saved: function(dataset_params) {\n        var tracks_grid = new GridView({\n            url_base: Galaxy.root + \"visualization/list_tracks\",\n            dict_format: true,\n            embedded: true\n        });\n        Galaxy.modal.show({\n            title: \"Add Data to Saved Visualization\",\n            body: tracks_grid.$el,\n            buttons: {\n                Cancel: function() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"Add to visualization\": function() {\n                    $(parent.document)\n                        .find(\"input[name=id]:checked\")\n                        .each(function() {\n                            dataset_params.id = $(this).val();\n                            window.location =\n                                Galaxy.root +\n                                \"visualization/trackster?\" +\n                                $.param(dataset_params);\n                        });\n                }\n            }\n        });\n    },\n\n    // view\n    view_existing: function() {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: viz_config.title,\n                vis_id: viz_config.vis_id,\n                dbkey: viz_config.dbkey\n            },\n            viz_config.viewport,\n            viz_config.tracks,\n            viz_config.bookmarks,\n            true\n        );\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new: function() {\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax({\n            url: Galaxy.root + \"api/genomes?chrom_info=True\",\n            data: {},\n            error: function() {\n                alert(\"Couldn't create new browser.\");\n            },\n            success: function(response) {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"New Visualization\",\n                    body: self.template_view_new(response),\n                    buttons: {\n                        Cancel: function() {\n                            window.location =\n                                Galaxy.root + \"visualizations/list\";\n                        },\n                        Create: function() {\n                            self.create_browser(\n                                $(\"#new-title\").val(),\n                                $(\"#new-dbkey\").val()\n                            );\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map(function(r) {\n                    return r[1];\n                });\n                if (\n                    galaxy_config.app.default_dbkey &&\n                    _.contains(\n                        dbkeys_in_genomes,\n                        galaxy_config.app.default_dbkey\n                    )\n                ) {\n                    $(\"#new-dbkey\").val(galaxy_config.app.default_dbkey);\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response) {\n        // start template\n        var html =\n            '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-title\">Browser name:</label>' +\n            '<div class=\"form-row-input\">' +\n            '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n            '<div class=\"form-row-input\">' +\n            '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html +=\n                '<option value=\"' +\n                response[i][1] +\n                '\">' +\n                response[i][0] +\n                \"</option>\";\n        }\n\n        // close selection/finalize template\n        html +=\n            \"</select>\" +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            \"Is the build not listed here? \" +\n            '<a href=\"' +\n            Galaxy.root +\n            'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n            \"</div>\" +\n            \"</form>\";\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser: function(name, dbkey) {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: name,\n                dbkey: dbkey\n            },\n            galaxy_config.app.gene_region\n        );\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor: function() {\n        // set title\n        $(\"#center .unified-panel-title\").text(\n            view.config.get_value(\"name\") + \" (\" + view.dbkey + \")\"\n        );\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url:\n                    Galaxy.root +\n                    \"api/datasets/\" +\n                    galaxy_config.app.add_dataset,\n                data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                dataType: \"json\",\n                success: function(track_data) {\n                    view.add_drawable(\n                        tracks.object_from_template(track_data, view, view)\n                    );\n                }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(function() {\n            // add new bookmark.\n            var position = view.chrom + \":\" + view.low + \"-\" + view.high,\n                annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on(\"beforeunload\", function() {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nexport default {\n    TracksterUI: TracksterUI,\n    GalaxyApp: TracksterView\n};\n"]}