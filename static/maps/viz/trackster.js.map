{"version":3,"sources":["viz/trackster.js"],"names":["ui","view","require","mod_utils","mod_icon_btn","cssLoadFile","Base","initialize","visualization","query_string","this","save_viz","apply","arguments","extend","Backbone","Model","position","annotation","baseURL","Galaxy","modal","show","title","bookmarks","$","ajax","url","type","children","text","dataType","overview_track_name","overview_drawable","config","get_value","viz_config","to_dict","success","chrom","vis_info","start","low","end","high","overview","hide","window","history","pushState","error","vis_id","body","buttons","dbkey","vis_json","JSON","stringify","has_changes","createButtonMenu","location","hash","self","_","each","Cancel","icon_class","on_click","create_icon_buttons_menu","select_datasets","root","f-dbkey","track","add_drawable","tracks","object_from_template","handle_unsaved_changes","DrawableGroup","name","tooltip_config","placement","force_right_panel","css","data","add_bookmarks","table_html","Insert","first","id","bookmarks_container","attr","hda_id","ldda_id","then","i","length","row","add_bookmark","new_bookmark","remove","editable","addClass","appendTo","position_div","annotation_div","click","create_visualization","go_to","editor","when","load_chroms_deferred","chrom_info","prependTo","viewport_config","delete_icon_container","use_textarea","help_text","drawable_config","drawable_type","drawables_config","bookmarks_config","TracksterView","view_config","header","overview_drawable_name","undefined","change_chrom","bookmark","drawables","set_overview","set_up_router","options","TrackBrowserRouter","init_keyboard_nav","e","is","move_fraction","viewport_container","height","scrollTop","Math","round","buttonMenu","Leave without Saving","off","Save","View","$el","append","resize_window","get","choose_existing_or_new","view_new","dataset_params","listTracksParams","dataset_id","hda_ldda","show_choice","param","alert","view_in_saved","Add to visualization","parent","document","find","val","container","View in saved visualization","View in new visualization","console","debug","app","viewport","init_editor","template_view_new","html","response","Create","create_browser","map","r","galaxy_config","default_dbkey","contains","dbkeys_in_genomes","focus","select2","trigger","gene_region","add_dataset","data_type","track_data","on","TracksterUI","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui              = null;\nvar view            = null;\nvar browser_router  = null;\n\n// load required libraries\nrequire(\n[\n    // load js libraries\n    'utils/utils',\n    'libs/jquery/jquery.event.drag',\n    'libs/jquery/jquery.event.hover',\n    'libs/jquery/jquery.mousewheel',\n    'libs/jquery/jquery-ui',\n    'libs/jquery/select2',\n    'libs/farbtastic',\n    'libs/jquery/jquery.form',\n    'libs/jquery/jquery.rating',\n    \"ui/editable-text\",\n], function(mod_utils, mod_icon_btn)\n{\n    // load css\n    mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n    mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n    mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n    mod_utils.cssLoadFile(\"static/style/library.css\");\n    mod_utils.cssLoadFile(\"static/style/trackster.css\");\n});\n\n// trackster viewer\ndefine([\n    \"libs/underscore\",\n    \"viz/trackster/tracks\",\n    \"viz/visualization\",\n    \"mvc/ui/icon-button\",\n    \"utils/query-string-parsing\"\n], function(_, tracks, visualization, mod_icon_btn, query_string) {\n\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if( this.initialize ) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function( baseURL ) {\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this).children(\".position\").text(),\n                annotation: $(this).children(\".annotation\").text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = (view.overview_drawable ? view.overview_drawable.config.get_value('name') : null),\n            viz_config = {\n                'view': view.to_dict(),\n                'viewport': { 'chrom': view.chrom, 'start': view.low , 'end': view.high, 'overview': overview_track_name },\n                'bookmarks': bookmarks\n            };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: Galaxy.root + \"visualization/save\",\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                'id'        : view.vis_id,\n                'title'     : view.config.get_value('name'),\n                'dbkey'     : view.dbkey,\n                'type'      : 'trackster',\n                'vis_json'  : JSON.stringify(viz_config)\n            }\n        }).success(function(vis_info) {\n            Galaxy.modal.hide();\n            view.vis_id = vis_info.vis_id;\n            view.has_changes = false;\n\n            // Needed to set URL when first saving a visualization.\n            window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n        }).error(function() {\n            // show dialog\n            Galaxy.modal.show({\n                title   : \"Could Not Save\",\n                body    : \"Could not save visualization. Please try again later.\",\n                buttons : { \"Cancel\": function() { Galaxy.modal.hide(); } }\n            });\n        });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu([\n            { icon_class: 'plus-button', title: 'Add tracks', on_click: function() {\n                visualization.select_datasets(Galaxy.root + \"visualization/list_current_history_datasets\", Galaxy.root + \"api/datasets\", { 'f-dbkey': view.dbkey },\n                function(new_tracks) {\n                    _.each(new_tracks, function(track) {\n                        view.add_drawable( tracks.object_from_template(track, view, view) );\n                    });\n                });\n            } },\n            { icon_class: 'block--plus', title: 'Add group', on_click: function() {\n                view.add_drawable( new tracks.DrawableGroup(view, view, { name: \"New Group\" }) );\n            } },\n            { icon_class: 'bookmarks', title: 'Bookmarks', on_click: function() {\n                // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                force_right_panel(($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\"));\n            } },\n            {\n                icon_class: 'globe',\n                title: 'Circster',\n                on_click: function() {\n                    window.location = self.baseURL + 'visualization/circster?id=' + view.vis_id;\n                }\n            },\n            { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                self.save_viz();\n            } },\n            {\n                icon_class: 'cross-circle',\n                title: 'Close',\n                on_click: function() {\n                    self.handle_unsaved_changes(view);\n                }\n            }\n        ],\n        {\n            tooltip_config: { placement: 'bottom' }\n        });\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Use a popup to select a dataset of create bookmarks from\n     */\n    add_bookmarks: function() {\n        var self = this,\n            baseURL = this.baseURL;\n\n        // show modal while loading history\n        Galaxy.modal.show({title: \"Select dataset for new bookmarks\", body: \"progress\" });\n\n        $.ajax({\n            url: this.baseURL + \"/visualization/list_histories\",\n            data: { \"f-dbkey\": view.dbkey },\n            error: function() { alert( \"Grid failed\" ); },\n            success: function(table_html) {\n\n                // show modal to select bookmarks\n                Galaxy.modal.show(\n                {\n                    title   : \"Select dataset for new bookmarks\",\n                    body    : table_html,\n                    buttons :\n                    {\n                        \"Cancel\": function()\n                        {\n                            Galaxy.modal.hide();\n                        },\n\n                        \"Insert\": function()\n                        {\n                            // Just use the first selected\n                            $('input[name=id]:checked,input[name=ldda_ids]:checked').first().each(function()\n                            {\n                                var data, id = $(this).val();\n                                if ($(this).attr(\"name\") === \"id\")\n                                    data = { hda_id: id };\n                                else\n                                    data = { ldda_id: id};\n\n                                $.ajax({\n                                    url: this.baseURL + \"/visualization/bookmarks_from_dataset\",\n                                    data: data,\n                                    dataType: \"json\"\n                                }).then( function(data) {\n                                    for( i = 0; i < data.data.length; i++ ) {\n                                        var row = data.data[i];\n                                        self.add_bookmark( row[0], row[1] );\n                                    }\n                                });\n                            });\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\"),\n            new_bookmark = $(\"<div/>\").addClass(\"bookmark\").appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\").addClass(\"position\").appendTo(new_bookmark),\n            position_link = $(\"<a href=''/>\").text(position).appendTo(position_div).click(function() {\n                view.go_to(position);\n                return false;\n            }),\n            annotation_div = $(\"<div/>\").text(annotation).appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\").addClass(\"delete-icon-container\").prependTo(new_bookmark).click(function (){\n                    // Remove bookmark.\n                    new_bookmark.slideUp(\"fast\");\n                    new_bookmark.remove();\n                    view.has_changes = true;\n                    return false;\n                }),\n                delete_icon = $(\"<a href=''/>\").addClass(\"icon-button delete\").appendTo(delete_icon_container);\n            annotation_div.make_text_editable({\n                num_rows: 3,\n                use_textarea: true,\n                help_text: \"Edit bookmark note\"\n            }).addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n\n        // Create view.\n        var self = this,\n            view = new tracks.TracksterView(_.extend(view_config, {header: false}));\n        view.editor = true;\n        $.when( view.load_chroms_deferred ).then(function(chrom_info) {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom,\n                    start = viewport_config.start,\n                    end = viewport_config.end,\n                    overview_drawable_name = viewport_config.overview;\n\n                if (chrom && (start !== undefined) && end) {\n                    view.change_chrom(chrom, start, end);\n                }\n                else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            }\n            else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config,\n                    drawable_type,\n                    drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable( tracks.object_from_template( drawables_config[i], view, view ) );\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (view.drawables[i].config.get_value('name') === overview_drawable_name) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(bookmark['position'], bookmark['annotation'], editable);\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({view: view});\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router : function(options)\n    {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(function(e) {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(':input')) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch(e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(view.viewport_container.height()/15.0);\n                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() - 20);\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(view.viewport_container.height()/15.0);\n                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() + 20);\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body: \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    \"Cancel\": function() { Galaxy.modal.hide(); },\n                    \"Leave without Saving\" : function() {\n                        $(window).off('beforeunload');\n                        window.location = Galaxy.root + 'visualization';\n                    },\n                    \"Save\" : function() {\n                        $.when(self.save_viz()).then(function() {\n                            window.location = Galaxy.root + 'visualization';\n                        });\n                    }\n                }\n            });\n\n        }\n        else {\n            window.location = Galaxy.root + 'visualization';\n        }\n    }\n\n});\n\nvar TracksterView = Backbone.View.extend(\n{\n    // initalize trackster\n    initialize : function ()\n    {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\");\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(function() { view.resize_window(); });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n\n        // check if id is available\n        if (galaxy_config.app.id){\n            this.view_existing();\n        } else if( query_string.get( 'dataset_id' ) ){\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new : function () {\n        var self = this;\n        var dbkey = query_string.get( 'dbkey' ),\n            listTracksParams = {},\n            dataset_params = {\n                dbkey       : dbkey,\n                dataset_id  : query_string.get( 'dataset_id' ),\n                hda_ldda    : query_string.get( 'hda_ldda' )\n            };\n        if (dbkey){\n            listTracksParams[ 'f-dbkey' ] = dbkey;\n        }\n        $.ajax({\n            url: Galaxy.root + 'visualization/list_tracks?' + $.param( listTracksParams ),\n            dataType: \"html\",\n            error: function() { alert( \"Could not add this dataset to browser.\" ); },\n\n            success: function(table_html) {\n                console.debug( 'success' );\n                function view_in_saved(){\n                    // Show new modal with saved visualizations.\n                    Galaxy.modal.show({\n                        title : \"Add Data to Saved Visualization\",\n                        body : table_html,\n                        buttons : {\n                            \"Cancel\": function() {\n                                // go back to the first choice\n                                show_choice();\n                            },\n                            \"Add to visualization\": function() {\n                                $(parent.document).find('input[name=id]:checked').each(function() {\n                                    var vis_id = $(this).val();\n                                    dataset_params.id = vis_id;\n                                    window.location = Galaxy.root + \"visualization/trackster?\" + $.param(dataset_params);\n                                });\n                            }\n                        }\n                    });\n                }\n                function show_choice(){\n                    Galaxy.modal.show({\n                        title : \"View Data in a New or Saved Visualization?\",\n                        // either have text in here or have to remove body and the header/footer margins\n                        body  : (\n                            // TODO: yay. inline styles. thanks, galaxy\n                            '<p><ul style=\"list-style: disc inside none\">You can add this dataset as:' +\n                                \"<li>a new track to one of your existing, saved Trackster \" +\n                                \"sessions if they share the genome build: <b>\" + dbkey + \"</b></li>\" +\n                                \"<li>or create a new session with this dataset as the only track</li>\" +\n                            \"</ul></p>\"\n                        ),\n                        buttons : {\n                            \"Cancel\": function() {\n                                window.location = Galaxy.root + \"visualization/list\";\n                            },\n                            \"View in saved visualization\": function() {\n                                view_in_saved();\n                            },\n                            \"View in new visualization\": function() {\n                                self.view_new();\n                            }\n                        }\n                    });\n                }\n                show_choice();\n            }\n        });\n    },\n\n    // view\n    view_existing : function ()\n    {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization(\n        {\n            container: $(\"#center .unified-panel-body\"),\n            name: viz_config.title,\n            vis_id: viz_config.vis_id,\n            dbkey: viz_config.dbkey\n        }, viz_config.viewport, viz_config.tracks, viz_config.bookmarks, true);\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new : function ()\n    {\n        // availability of default database key\n        /*if (galaxy_config.app.default_dbkey !== undefined)\n        {\n            this.create_browser(\"Unnamed\", galaxy_config.app.default_dbkey);\n            return;\n        }*/\n\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax(\n        {\n            url: Galaxy.root + \"api/genomes?chrom_info=True\",\n            data: {},\n            error: function() { alert( \"Couldn't create new browser.\" ); },\n            success: function(response)\n            {\n                // show dialog\n                Galaxy.modal.show({\n                    title   : \"New Visualization\",\n                    body    : self.template_view_new(response),\n                    buttons : {\n                        \"Cancel\": function() { window.location = Galaxy.root + \"visualization/list\"; },\n                        \"Create\": function() { self.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val()); Galaxy.modal.hide(); }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map( function( r ){ return r[1]; });\n                if (galaxy_config.app.default_dbkey && _.contains(dbkeys_in_genomes,galaxy_config.app.default_dbkey)) {\n                    $(\"#new-dbkey\").val( galaxy_config.app.default_dbkey );\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response)\n    {\n        // start template\n        var html =  '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n                        '<div class=\"form-row\">' +\n                            '<label for=\"new-title\">Browser name:</label>' +\n                            '<div class=\"form-row-input\">' +\n                                '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n                            '</div>' +\n                            '<div style=\"clear: both;\"></div>' +\n                        '</div>' +\n                        '<div class=\"form-row\">' +\n                            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n                            '<div class=\"form-row-input\">' +\n                                '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html += '<option value=\"' + response[i][1] + '\">' + response[i][0] + '</option>';\n        }\n\n        // close selection/finalize template\n        html +=                 '</select>' +\n                            '</div>' +\n                            '<div style=\"clear: both;\"></div>' +\n                        '</div>' +\n                        '<div class=\"form-row\">' +\n                            'Is the build not listed here? ' +\n                            '<a href=\"' + Galaxy.root + 'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n                        '</div>' +\n                    '</form>';\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser : function(name, dbkey)\n    {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization (\n        {\n            container: $(\"#center .unified-panel-body\"),\n            name: name,\n            dbkey: dbkey\n        }, galaxy_config.app.gene_region);\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor : function ()\n    {\n        // set title\n        $(\"#center .unified-panel-title\").text(view.config.get_value('name') + \" (\" + view.dbkey + \")\");\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url: Galaxy.root + \"api/datasets/\" + galaxy_config.app.add_dataset,\n                data: { hda_ldda: 'hda', data_type: 'track_config' },\n                dataType: \"json\",\n                success: function(track_data) { view.add_drawable( tracks.object_from_template(track_data, view, view) ); }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(function()\n        {\n            // add new bookmark.\n            var position = view.chrom + \":\" + view.low + \"-\" + view.high,\n                annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on('beforeunload', function() {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nreturn {\n    TracksterUI: TracksterUI,\n    GalaxyApp : TracksterView\n};\n\n});\n"]}