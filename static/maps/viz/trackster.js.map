{"version":3,"sources":["viz/trackster.js"],"names":["ui","view","browser_router","require","mod_utils","mod_icon_btn","cssLoadFile","define","_","tracks","visualization","query_string","Base","this","initialize","apply","arguments","extend","Backbone","Model","TracksterUI","baseURL","save_viz","Galaxy","modal","show","title","body","bookmarks","$","each","push","position","children","text","annotation","overview_track_name","overview_drawable","config","get_value","viz_config","to_dict","viewport","chrom","start","low","end","high","overview","ajax","url","root","type","dataType","data","id","vis_id","dbkey","vis_json","JSON","stringify","success","vis_info","hide","has_changes","window","history","pushState","location","hash","error","buttons","Cancel","createButtonMenu","self","menu","create_icon_buttons_menu","icon_class","on_click","select_datasets","f-dbkey","new_tracks","track","add_drawable","object_from_template","DrawableGroup","name","force_right_panel","css","handle_unsaved_changes","tooltip_config","placement","buttonMenu","add_bookmarks","alert","table_html","Insert","first","val","attr","hda_id","ldda_id","then","i","length","row","add_bookmark","editable","bookmarks_container","new_bookmark","addClass","appendTo","position_div","annotation_div","click","go_to","delete_icon_container","prependTo","slideUp","remove","make_text_editable","num_rows","use_textarea","help_text","create_visualization","view_config","viewport_config","drawables_config","bookmarks_config","TracksterView","header","editor","when","load_chroms_deferred","chrom_info","overview_drawable_name","undefined","change_chrom","drawables","set_overview","bookmark","set_up_router","options","TrackBrowserRouter","init_keyboard_nav","document","keyup","e","srcElement","is","which","move_fraction","Math","round","viewport_container","height","scrollTop","Leave without Saving","off","Save","View","$el","append","resize_window","galaxy_config","app","view_existing","get","choose_existing_or_new","view_new","listTracksParams","dataset_params","dataset_id","hda_ldda","param","view_in_saved","show_choice","Add to visualization","parent","find","View in saved visualization","View in new visualization","console","debug","container","init_editor","response","template_view_new","Create","create_browser","dbkeys_in_genomes","map","r","default_dbkey","contains","focus","select2","html","trigger","gene_region","add_dataset","data_type","track_data","on","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui              = null;\nvar view            = null;\nvar browser_router  = null;\n\n// load required libraries\nrequire(\n[\n    // load js libraries\n    'utils/utils',\n    'libs/jquery/jquery.event.drag',\n    'libs/jquery/jquery.event.hover',\n    'libs/jquery/jquery.mousewheel',\n    'libs/jquery/jquery-ui',\n    'libs/jquery/select2',\n    'libs/farbtastic',\n    'libs/jquery/jquery.form',\n    'libs/jquery/jquery.rating',\n    \"ui/editable-text\",\n], function(mod_utils, mod_icon_btn)\n{\n    // load css\n    mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n    mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n    mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n    mod_utils.cssLoadFile(\"static/style/library.css\");\n    mod_utils.cssLoadFile(\"static/style/trackster.css\");\n});\n\n// trackster viewer\ndefine([\n    \"libs/underscore\",\n    \"viz/trackster/tracks\",\n    \"viz/visualization\",\n    \"mvc/ui/icon-button\",\n    \"utils/query-string-parsing\"\n], function(_, tracks, visualization, mod_icon_btn, query_string) {\n\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if( this.initialize ) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function( baseURL ) {\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this).children(\".position\").text(),\n                annotation: $(this).children(\".annotation\").text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = (view.overview_drawable ? view.overview_drawable.config.get_value('name') : null),\n            viz_config = {\n                'view': view.to_dict(),\n                'viewport': { 'chrom': view.chrom, 'start': view.low , 'end': view.high, 'overview': overview_track_name },\n                'bookmarks': bookmarks\n            };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: Galaxy.root + \"visualization/save\",\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                'id'        : view.vis_id,\n                'title'     : view.config.get_value('name'),\n                'dbkey'     : view.dbkey,\n                'type'      : 'trackster',\n                'vis_json'  : JSON.stringify(viz_config)\n            }\n        }).success(function(vis_info) {\n            Galaxy.modal.hide();\n            view.vis_id = vis_info.vis_id;\n            view.has_changes = false;\n\n            // Needed to set URL when first saving a visualization.\n            window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n        }).error(function() {\n            // show dialog\n            Galaxy.modal.show({\n                title   : \"Could Not Save\",\n                body    : \"Could not save visualization. Please try again later.\",\n                buttons : { \"Cancel\": function() { Galaxy.modal.hide(); } }\n            });\n        });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu([\n            { icon_class: 'plus-button', title: 'Add tracks', on_click: function() {\n                visualization.select_datasets(Galaxy.root + \"visualization/list_current_history_datasets\", Galaxy.root + \"api/datasets\", { 'f-dbkey': view.dbkey },\n                function(new_tracks) {\n                    _.each(new_tracks, function(track) {\n                        view.add_drawable( tracks.object_from_template(track, view, view) );\n                    });\n                });\n            } },\n            { icon_class: 'block--plus', title: 'Add group', on_click: function() {\n                view.add_drawable( new tracks.DrawableGroup(view, view, { name: \"New Group\" }) );\n            } },\n            { icon_class: 'bookmarks', title: 'Bookmarks', on_click: function() {\n                // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                force_right_panel(($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\"));\n            } },\n            {\n                icon_class: 'globe',\n                title: 'Circster',\n                on_click: function() {\n                    window.location = self.baseURL + 'visualization/circster?id=' + view.vis_id;\n                }\n            },\n            { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                self.save_viz();\n            } },\n            {\n                icon_class: 'cross-circle',\n                title: 'Close',\n                on_click: function() {\n                    self.handle_unsaved_changes(view);\n                }\n            }\n        ],\n        {\n            tooltip_config: { placement: 'bottom' }\n        });\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Use a popup to select a dataset of create bookmarks from\n     */\n    add_bookmarks: function() {\n        var self = this,\n            baseURL = this.baseURL;\n\n        // show modal while loading history\n        Galaxy.modal.show({title: \"Select dataset for new bookmarks\", body: \"progress\" });\n\n        $.ajax({\n            url: this.baseURL + \"/visualization/list_histories\",\n            data: { \"f-dbkey\": view.dbkey },\n            error: function() { alert( \"Grid failed\" ); },\n            success: function(table_html) {\n\n                // show modal to select bookmarks\n                Galaxy.modal.show(\n                {\n                    title   : \"Select dataset for new bookmarks\",\n                    body    : table_html,\n                    buttons :\n                    {\n                        \"Cancel\": function()\n                        {\n                            Galaxy.modal.hide();\n                        },\n\n                        \"Insert\": function()\n                        {\n                            // Just use the first selected\n                            $('input[name=id]:checked,input[name=ldda_ids]:checked').first().each(function()\n                            {\n                                var data, id = $(this).val();\n                                if ($(this).attr(\"name\") === \"id\")\n                                    data = { hda_id: id };\n                                else\n                                    data = { ldda_id: id};\n\n                                $.ajax({\n                                    url: this.baseURL + \"/visualization/bookmarks_from_dataset\",\n                                    data: data,\n                                    dataType: \"json\"\n                                }).then( function(data) {\n                                    for( i = 0; i < data.data.length; i++ ) {\n                                        var row = data.data[i];\n                                        self.add_bookmark( row[0], row[1] );\n                                    }\n                                });\n                            });\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\"),\n            new_bookmark = $(\"<div/>\").addClass(\"bookmark\").appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\").addClass(\"position\").appendTo(new_bookmark),\n            position_link = $(\"<a href=''/>\").text(position).appendTo(position_div).click(function() {\n                view.go_to(position);\n                return false;\n            }),\n            annotation_div = $(\"<div/>\").text(annotation).appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\").addClass(\"delete-icon-container\").prependTo(new_bookmark).click(function (){\n                    // Remove bookmark.\n                    new_bookmark.slideUp(\"fast\");\n                    new_bookmark.remove();\n                    view.has_changes = true;\n                    return false;\n                }),\n                delete_icon = $(\"<a href=''/>\").addClass(\"icon-button delete\").appendTo(delete_icon_container);\n            annotation_div.make_text_editable({\n                num_rows: 3,\n                use_textarea: true,\n                help_text: \"Edit bookmark note\"\n            }).addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n\n        // Create view.\n        var self = this,\n            view = new tracks.TracksterView(_.extend(view_config, {header: false}));\n        view.editor = true;\n        $.when( view.load_chroms_deferred ).then(function(chrom_info) {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom,\n                    start = viewport_config.start,\n                    end = viewport_config.end,\n                    overview_drawable_name = viewport_config.overview;\n\n                if (chrom && (start !== undefined) && end) {\n                    view.change_chrom(chrom, start, end);\n                }\n                else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            }\n            else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config,\n                    drawable_type,\n                    drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable( tracks.object_from_template( drawables_config[i], view, view ) );\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (view.drawables[i].config.get_value('name') === overview_drawable_name) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(bookmark['position'], bookmark['annotation'], editable);\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({view: view});\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router : function(options)\n    {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(function(e) {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(':input')) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch(e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(view.viewport_container.height()/15.0);\n                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() - 20);\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(view.viewport_container.height()/15.0);\n                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() + 20);\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body: \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    \"Cancel\": function() { Galaxy.modal.hide(); },\n                    \"Leave without Saving\" : function() {\n                        $(window).off('beforeunload');\n                        window.location = Galaxy.root + 'visualization';\n                    },\n                    \"Save\" : function() {\n                        $.when(self.save_viz()).then(function() {\n                            window.location = Galaxy.root + 'visualization';\n                        });\n                    }\n                }\n            });\n\n        }\n        else {\n            window.location = Galaxy.root + 'visualization';\n        }\n    }\n\n});\n\nvar TracksterView = Backbone.View.extend(\n{\n    // initalize trackster\n    initialize : function ()\n    {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\");\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(function() { view.resize_window(); });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n\n        // check if id is available\n        if (galaxy_config.app.id){\n            this.view_existing();\n        } else if( query_string.get( 'dataset_id' ) ){\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new : function () {\n        var self = this;\n        var dbkey = query_string.get( 'dbkey' ),\n            listTracksParams = {},\n            dataset_params = {\n                dbkey       : dbkey,\n                dataset_id  : query_string.get( 'dataset_id' ),\n                hda_ldda    : query_string.get( 'hda_ldda' )\n            };\n        if (dbkey){\n            listTracksParams[ 'f-dbkey' ] = dbkey;\n        }\n        $.ajax({\n            url: Galaxy.root + 'visualization/list_tracks?' + $.param( listTracksParams ),\n            dataType: \"html\",\n            error: function() { alert( \"Could not add this dataset to browser.\" ); },\n\n            success: function(table_html) {\n                console.debug( 'success' );\n                function view_in_saved(){\n                    // Show new modal with saved visualizations.\n                    Galaxy.modal.show({\n                        title : \"Add Data to Saved Visualization\",\n                        body : table_html,\n                        buttons : {\n                            \"Cancel\": function() {\n                                // go back to the first choice\n                                show_choice();\n                            },\n                            \"Add to visualization\": function() {\n                                $(parent.document).find('input[name=id]:checked').each(function() {\n                                    var vis_id = $(this).val();\n                                    dataset_params.id = vis_id;\n                                    window.location = Galaxy.root + \"visualization/trackster?\" + $.param(dataset_params);\n                                });\n                            }\n                        }\n                    });\n                }\n                function show_choice(){\n                    Galaxy.modal.show({\n                        title : \"View Data in a New or Saved Visualization?\",\n                        // either have text in here or have to remove body and the header/footer margins\n                        body  : (\n                            // TODO: yay. inline styles. thanks, galaxy\n                            '<p><ul style=\"list-style: disc inside none\">You can add this dataset as:' +\n                                \"<li>a new track to one of your existing, saved Trackster \" +\n                                \"sessions if they share the genome build: <b>\" + dbkey + \"</b></li>\" +\n                                \"<li>or create a new session with this dataset as the only track</li>\" +\n                            \"</ul></p>\"\n                        ),\n                        buttons : {\n                            \"Cancel\": function() {\n                                window.location = Galaxy.root + \"visualization/list\";\n                            },\n                            \"View in saved visualization\": function() {\n                                view_in_saved();\n                            },\n                            \"View in new visualization\": function() {\n                                self.view_new();\n                            }\n                        }\n                    });\n                }\n                show_choice();\n            }\n        });\n    },\n\n    // view\n    view_existing : function ()\n    {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization(\n        {\n            container: $(\"#center .unified-panel-body\"),\n            name: viz_config.title,\n            vis_id: viz_config.vis_id,\n            dbkey: viz_config.dbkey\n        }, viz_config.viewport, viz_config.tracks, viz_config.bookmarks, true);\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new : function ()\n    {\n        // availability of default database key\n        /*if (galaxy_config.app.default_dbkey !== undefined)\n        {\n            this.create_browser(\"Unnamed\", galaxy_config.app.default_dbkey);\n            return;\n        }*/\n\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax(\n        {\n            url: Galaxy.root + \"api/genomes?chrom_info=True\",\n            data: {},\n            error: function() { alert( \"Couldn't create new browser.\" ); },\n            success: function(response)\n            {\n                // show dialog\n                Galaxy.modal.show({\n                    title   : \"New Visualization\",\n                    body    : self.template_view_new(response),\n                    buttons : {\n                        \"Cancel\": function() { window.location = Galaxy.root + \"visualization/list\"; },\n                        \"Create\": function() { self.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val()); Galaxy.modal.hide(); }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map( function( r ){ return r[1]; });\n                if (galaxy_config.app.default_dbkey && _.contains(dbkeys_in_genomes,galaxy_config.app.default_dbkey)) {\n                    $(\"#new-dbkey\").val( galaxy_config.app.default_dbkey );\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response)\n    {\n        // start template\n        var html =  '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n                        '<div class=\"form-row\">' +\n                            '<label for=\"new-title\">Browser name:</label>' +\n                            '<div class=\"form-row-input\">' +\n                                '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n                            '</div>' +\n                            '<div style=\"clear: both;\"></div>' +\n                        '</div>' +\n                        '<div class=\"form-row\">' +\n                            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n                            '<div class=\"form-row-input\">' +\n                                '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html += '<option value=\"' + response[i][1] + '\">' + response[i][0] + '</option>';\n        }\n\n        // close selection/finalize template\n        html +=                 '</select>' +\n                            '</div>' +\n                            '<div style=\"clear: both;\"></div>' +\n                        '</div>' +\n                        '<div class=\"form-row\">' +\n                            'Is the build not listed here? ' +\n                            '<a href=\"' + Galaxy.root + 'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n                        '</div>' +\n                    '</form>';\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser : function(name, dbkey)\n    {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization (\n        {\n            container: $(\"#center .unified-panel-body\"),\n            name: name,\n            dbkey: dbkey\n        }, galaxy_config.app.gene_region);\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor : function ()\n    {\n        // set title\n        $(\"#center .unified-panel-title\").text(view.config.get_value('name') + \" (\" + view.dbkey + \")\");\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url: Galaxy.root + \"api/datasets/\" + galaxy_config.app.add_dataset,\n                data: { hda_ldda: 'hda', data_type: 'track_config' },\n                dataType: \"json\",\n                success: function(track_data) { view.add_drawable( tracks.object_from_template(track_data, view, view) ); }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(function()\n        {\n            // add new bookmark.\n            var position = view.chrom + \":\" + view.low + \"-\" + view.high,\n                annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on('beforeunload', function() {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nreturn {\n    TracksterUI: TracksterUI,\n    GalaxyApp : TracksterView\n};\n\n});\n"]}