{"version":3,"sources":["viz/trackster.js"],"names":["_","ui","view","_utils2","default","cssLoadFile","Base","this","initialize","apply","arguments","extend","Backbone","Model","TracksterUI","baseURL","save_viz","Galaxy","modal","show","title","body","bookmarks","$","position","children","text","annotation","overview_track_name","overview_drawable","config","get_value","viewport","chrom","start","low","end","high","overview","each","id","vis_id","dbkey","type","hide","window","history","pushState","vis_info","url","location","hash","dataType","data","vis_json","stringify","createButtonMenu","create_icon_buttons_menu","on_click","_visualization2","select_datasets","new_tracks","track","add_drawable","_tracks2","object_from_template","icon_class","DrawableGroup","name","force_right_panel","css","self","tooltip_config","buttonMenu","handle_unsaved_changes","placement","bookmarks_container","menu","editable","new_bookmark","annotation_div","addClass","appendTo","position_div","delete_icon_container","use_textarea","has_changes","click","delete_icon","help_text","prependTo","slideUp","create_visualization","remove","editor","when","load_chroms_deferred","make_text_editable","num_rows","viewport_config","overview_drawable_name","view_config","drawables_config","bookmarks_config","TracksterView","header","drawables","set_overview","undefined","bookmark","add_bookmark","change_chrom","chrom_info","i","length","document","keyup","srcElement","viewport_container","scrollTop","set_up_router","Cancel","options","e","is","which","move_fraction","Math","round","height","append","galaxy_config","app","view_existing","choose_existing_or_new","buttons","off","listTracksParams","root","dataset_params","then","View","view_new","$el","view_in_saved","get","container","viz_config","alert","url_base","Create","tracks_grid","dbkeys_in_genomes","response","Add to visualization","parent","val","param","html","tracks","ajax","success","template_view_new","create_browser","map","r","default_dbkey","contains","init_keyboard_nav","focus","select2","trigger","gene_region","init_editor","add_dataset","hda_ldda","data_type","track_data","on","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// trackster viewer\nimport * as _ from \"libs/underscore\";\nimport tracks from \"viz/trackster/tracks\";\nimport visualization from \"viz/visualization\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport query_string from \"utils/query-string-parsing\";\nimport GridView from \"mvc/grid/grid-view\";\nimport mod_utils from \"utils/utils\";\nimport \"libs/jquery/jquery.event.drag\";\nimport \"libs/jquery/jquery.event.hover\";\nimport \"libs/jquery/jquery.mousewheel\";\nimport \"libs/jquery/jquery-ui\";\nimport \"libs/jquery/select2\";\nimport \"libs/farbtastic\";\nimport \"libs/jquery/jquery.form\";\nimport \"libs/jquery/jquery.rating\";\nimport \"ui/editable-text\";\nmod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\nmod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\nmod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\nmod_utils.cssLoadFile(\"static/style/library.css\");\nmod_utils.cssLoadFile(\"static/style/trackster.css\");\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if (this.initialize) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function(baseURL) {\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this)\n                    .children(\".position\")\n                    .text(),\n                annotation: $(this)\n                    .children(\".annotation\")\n                    .text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = view.overview_drawable\n            ? view.overview_drawable.config.get_value(\"name\")\n            : null;\n\n        var viz_config = {\n            view: view.to_dict(),\n            viewport: {\n                chrom: view.chrom,\n                start: view.low,\n                end: view.high,\n                overview: overview_track_name\n            },\n            bookmarks: bookmarks\n        };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: `${Galaxy.root}visualization/save`,\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                id: view.vis_id,\n                title: view.config.get_value(\"name\"),\n                dbkey: view.dbkey,\n                type: \"trackster\",\n                vis_json: JSON.stringify(viz_config)\n            }\n        })\n            .success(vis_info => {\n                Galaxy.modal.hide();\n                view.vis_id = vis_info.vis_id;\n                view.has_changes = false;\n\n                // Needed to set URL when first saving a visualization.\n                window.history.pushState(\n                    {},\n                    \"\",\n                    vis_info.url + window.location.hash\n                );\n            })\n            .error(() => {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Could Not Save\",\n                    body:\n                        \"Could not save visualization. Please try again later.\",\n                    buttons: {\n                        Cancel: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"plus-button\",\n                    title: \"Add tracks\",\n                    on_click: function() {\n                        visualization.select_datasets(\n                            { dbkey: view.dbkey },\n                            new_tracks => {\n                                _.each(new_tracks, track => {\n                                    view.add_drawable(\n                                        tracks.object_from_template(\n                                            track,\n                                            view,\n                                            view\n                                        )\n                                    );\n                                });\n                            }\n                        );\n                    }\n                },\n                {\n                    icon_class: \"block--plus\",\n                    title: \"Add group\",\n                    on_click: function() {\n                        view.add_drawable(\n                            new tracks.DrawableGroup(view, view, {\n                                name: \"New Group\"\n                            })\n                        );\n                    }\n                },\n                {\n                    icon_class: \"bookmarks\",\n                    title: \"Bookmarks\",\n                    on_click: function() {\n                        // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                        force_right_panel(\n                            $(\"div#right\").css(\"right\") == \"0px\"\n                                ? \"hide\"\n                                : \"show\"\n                        );\n                    }\n                },\n                {\n                    icon_class: \"globe\",\n                    title: \"Circster\",\n                    on_click: function() {\n                        window.location = `${self.baseURL}visualization/circster?id=${view.vis_id}`;\n                    }\n                },\n                {\n                    icon_class: \"disk--arrow\",\n                    title: \"Save\",\n                    on_click: function() {\n                        self.save_viz();\n                    }\n                },\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        self.handle_unsaved_changes(view);\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\");\n\n        var new_bookmark = $(\"<div/>\")\n            .addClass(\"bookmark\")\n            .appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\")\n            .addClass(\"position\")\n            .appendTo(new_bookmark);\n\n        var position_link = $(\"<a href=''/>\")\n            .text(position)\n            .appendTo(position_div)\n            .click(() => {\n                view.go_to(position);\n                return false;\n            });\n\n        var annotation_div = $(\"<div/>\")\n            .text(annotation)\n            .appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\")\n                .addClass(\"delete-icon-container\")\n                .prependTo(new_bookmark)\n                .click(() => {\n                    // Remove bookmark.\n                    new_bookmark.slideUp(\"fast\");\n                    new_bookmark.remove();\n                    view.has_changes = true;\n                    return false;\n                });\n\n            var delete_icon = $(\"<a href=''/>\")\n                .addClass(\"icon-button delete\")\n                .appendTo(delete_icon_container);\n\n            annotation_div\n                .make_text_editable({\n                    num_rows: 3,\n                    use_textarea: true,\n                    help_text: \"Edit bookmark note\"\n                })\n                .addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(\n        view_config,\n        viewport_config,\n        drawables_config,\n        bookmarks_config,\n        editable\n    ) {\n        // Create view.\n        var self = this;\n\n        var view = new tracks.TracksterView(\n            _.extend(view_config, { header: false })\n        );\n\n        view.editor = true;\n        $.when(view.load_chroms_deferred).then(chrom_info => {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom;\n                var start = viewport_config.start;\n                var end = viewport_config.end;\n                var overview_drawable_name = viewport_config.overview;\n\n                if (chrom && start !== undefined && end) {\n                    view.change_chrom(chrom, start, end);\n                } else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            } else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config;\n\n                var drawable_type;\n                var drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable(\n                        tracks.object_from_template(\n                            drawables_config[i],\n                            view,\n                            view\n                        )\n                    );\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (\n                    view.drawables[i].config.get_value(\"name\") ===\n                    overview_drawable_name\n                ) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(\n                        bookmark[\"position\"],\n                        bookmark[\"annotation\"],\n                        editable\n                    );\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({ view: view });\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router: function(options) {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(e => {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(\":input\")) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch (e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(\n                        view.viewport_container.height() / 15.0\n                    );\n                    view.viewport_container.scrollTop(\n                        view.viewport_container.scrollTop() - 20\n                    );\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(\n                        view.viewport_container.height() / 15.0\n                    );\n                    view.viewport_container.scrollTop(\n                        view.viewport_container.scrollTop() + 20\n                    );\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body:\n                    \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    Cancel: function() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Leave without Saving\": function() {\n                        $(window).off(\"beforeunload\");\n                        window.location = `${Galaxy.root}visualization`;\n                    },\n                    Save: function() {\n                        $.when(self.save_viz()).then(() => {\n                            window.location = `${Galaxy.root}visualization`;\n                        });\n                    }\n                }\n            });\n        } else {\n            window.location = `${Galaxy.root}visualization`;\n        }\n    }\n});\n\nvar TracksterView = Backbone.View.extend({\n    // initalize trackster\n    initialize: function() {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\n            \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n        );\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(() => {\n            view.resize_window();\n        });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n        // check if id is available\n        if (galaxy_config.app.id) {\n            this.view_existing();\n        } else if (query_string.get(\"dataset_id\")) {\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new: function() {\n        var self = this;\n        var dbkey = query_string.get(\"dbkey\");\n        var listTracksParams = {};\n\n        var dataset_params = {\n            dbkey: dbkey,\n            dataset_id: query_string.get(\"dataset_id\"),\n            hda_ldda: query_string.get(\"hda_ldda\"),\n            gene_region: query_string.get(\"gene_region\")\n        };\n\n        if (dbkey) {\n            listTracksParams[\"f-dbkey\"] = dbkey;\n        }\n\n        Galaxy.modal.show({\n            title: \"View Data in a New or Saved Visualization?\",\n            // either have text in here or have to remove body and the header/footer margins\n            body: `<p><ul style='list-style: disc inside none'>You can add this dataset as:<li>a new track to one of your existing, saved Trackster sessions if they share the genome build: <b>${dbkey ||\n                \"Not available.\"}</b></li><li>or create a new session with this dataset as the only track</li></ul></p>`,\n            buttons: {\n                Cancel: function() {\n                    window.location = `${Galaxy.root}visualizations/list`;\n                },\n                \"View in saved visualization\": function() {\n                    self.view_in_saved(dataset_params);\n                },\n                \"View in new visualization\": function() {\n                    self.view_new();\n                }\n            }\n        });\n    },\n\n    // view\n    view_in_saved: function(dataset_params) {\n        var tracks_grid = new GridView({\n            url_base: `${Galaxy.root}visualization/list_tracks`,\n            dict_format: true,\n            embedded: true\n        });\n        Galaxy.modal.show({\n            title: \"Add Data to Saved Visualization\",\n            body: tracks_grid.$el,\n            buttons: {\n                Cancel: function() {\n                    window.location = `${Galaxy.root}visualizations/list`;\n                },\n                \"Add to visualization\": function() {\n                    $(parent.document)\n                        .find(\"input[name=id]:checked\")\n                        .each(function() {\n                            dataset_params.id = $(this).val();\n                            window.location = `${Galaxy.root}visualization/trackster?${$.param(\n                                dataset_params\n                            )}`;\n                        });\n                }\n            }\n        });\n    },\n\n    // view\n    view_existing: function() {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: viz_config.title,\n                vis_id: viz_config.vis_id,\n                dbkey: viz_config.dbkey\n            },\n            viz_config.viewport,\n            viz_config.tracks,\n            viz_config.bookmarks,\n            true\n        );\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new: function() {\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax({\n            url: `${Galaxy.root}api/genomes?chrom_info=True`,\n            data: {},\n            error: function() {\n                alert(\"Couldn't create new browser.\");\n            },\n            success: function(response) {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"New Visualization\",\n                    body: self.template_view_new(response),\n                    buttons: {\n                        Cancel: function() {\n                            window.location = `${Galaxy.root}visualizations/list`;\n                        },\n                        Create: function() {\n                            self.create_browser(\n                                $(\"#new-title\").val(),\n                                $(\"#new-dbkey\").val()\n                            );\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map(r => r[1]);\n                if (\n                    galaxy_config.app.default_dbkey &&\n                    _.contains(\n                        dbkeys_in_genomes,\n                        galaxy_config.app.default_dbkey\n                    )\n                ) {\n                    $(\"#new-dbkey\").val(galaxy_config.app.default_dbkey);\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response) {\n        // start template\n        var html =\n            '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-title\">Browser name:</label>' +\n            '<div class=\"form-row-input\">' +\n            '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n            '<div class=\"form-row-input\">' +\n            '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html += `<option value=\"${response[i][1]}\">${response[\n                i\n            ][0]}</option>`;\n        }\n\n        // close selection/finalize template\n        html += `</select></div><div style=\"clear: both;\"></div></div><div class=\"form-row\">Is the build not listed here? <a href=\"${Galaxy.root}user/dbkeys?use_panels=True\">Add a Custom Build</a></div></form>`;\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser: function(name, dbkey) {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: name,\n                dbkey: dbkey\n            },\n            galaxy_config.app.gene_region\n        );\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor: function() {\n        // set title\n        $(\"#center .unified-panel-title\").text(\n            `${view.config.get_value(\"name\")} (${view.dbkey})`\n        );\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url: `${Galaxy.root}api/datasets/${galaxy_config.app\n                    .add_dataset}`,\n                data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                dataType: \"json\",\n                success: function(track_data) {\n                    view.add_drawable(\n                        tracks.object_from_template(track_data, view, view)\n                    );\n                }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(() => {\n            // add new bookmark.\n            var position = `${view.chrom}:${view.low}-${view.high}`;\n\n            var annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on(\"beforeunload\", () => {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nexport default {\n    TracksterUI: TracksterUI,\n    GalaxyApp: TracksterView\n};\n"]}