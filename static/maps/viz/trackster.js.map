{"version":3,"sources":["viz/trackster.js"],"names":["ui","view","require","mod_utils","define","cssLoadFile","Base","initialize","_","tracks","visualization","mod_icon_btn","query_string","GridView","save_viz","this","apply","arguments","extend","Backbone","Model","annotation","baseURL","viewport","start","low","body","bookmarks","push","position","$","children","text","url","dataType","type","overview_drawable","vis_json","viz_config","success","Galaxy","modal","hide","has_changes","chrom","end","high","history","pushState","buttons","Cancel","data","id","vis_id","title","config","get_value","dbkey","JSON","stringify","createButtonMenu","vis_info","self","menu","create_icon_buttons_menu","icon_class","select_datasets","window","location","hash","error","show","on_click","name","new_tracks","each","track","add_drawable","object_from_template","bookmarks_container","DrawableGroup","addClass","force_right_panel","slideUp","css","num_rows","use_textarea","help_text","load_chroms_deferred","viewport_config","handle_unsaved_changes","tooltip_config","placement","buttonMenu","add_bookmark","editable","new_bookmark","drawables_config","appendTo","drawable_config","annotation_div","click","i","drawables","set_overview","bookmark","delete_icon_container","bookmarks_config","remove","set_up_router","make_text_editable","view_config","move_fraction","header","editor","viewport_container","scrollTop","overview_drawable_name","undefined","change_chrom","chrom_info","length","root","$el","resize_window","view_existing","options","choose_existing_or_new","document","get","dataset_params","is","e","which","listTracksParams","Math","round","height","view_new","tracks_grid","parent","Leave without Saving","off","Save","when","then","container","TracksterView","View","init_editor","TracksterUI","attr","append","galaxy_config","app","dbkeys_in_genomes","dataset_id","hda_ldda","gene_region","template_view_new","html","View in saved visualization","create_visualization","url_base","dict_format","find","val","param","ajax","alert","response","Create","create_browser","map","r","default_dbkey","contains","focus","select2","trigger","add_dataset","data_type","track_data","init_keyboard_nav","on","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// load required libraries\nrequire([\n    \"utils/utils\",\n    \"libs/jquery/jquery.event.drag\",\n    \"libs/jquery/jquery.event.hover\",\n    \"libs/jquery/jquery.mousewheel\",\n    \"libs/jquery/jquery-ui\",\n    \"libs/jquery/select2\",\n    \"libs/farbtastic\",\n    \"libs/jquery/jquery.form\",\n    \"libs/jquery/jquery.rating\",\n    \"ui/editable-text\"\n], function(mod_utils) {\n    mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n    mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n    mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n    mod_utils.cssLoadFile(\"static/style/library.css\");\n    mod_utils.cssLoadFile(\"static/style/trackster.css\");\n});\n\n// trackster viewer\ndefine(\n    [\n        \"libs/underscore\",\n        \"viz/trackster/tracks\",\n        \"viz/visualization\",\n        \"mvc/ui/icon-button\",\n        \"utils/query-string-parsing\",\n        \"mvc/grid/grid-view\"\n    ],\n    function(_, tracks, visualization, mod_icon_btn, query_string, GridView) {\n        /**\n * Base Object/Model for inhertiance.\n */\n        var Base = function() {\n            if (this.initialize) {\n                this.initialize.apply(this, arguments);\n            }\n        };\n        Base.extend = Backbone.Model.extend;\n\n        /**\n * User interface controls for trackster\n */\n        var TracksterUI = Base.extend({\n            initialize: function(baseURL) {\n                this.baseURL = baseURL;\n            },\n\n            /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n            save_viz: function() {\n                // show dialog\n                Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n                // Save bookmarks.\n                var bookmarks = [];\n                $(\".bookmark\").each(function() {\n                    bookmarks.push({\n                        position: $(this)\n                            .children(\".position\")\n                            .text(),\n                        annotation: $(this)\n                            .children(\".annotation\")\n                            .text()\n                    });\n                });\n\n                // FIXME: give unique IDs to Drawables and save overview as ID.\n                var overview_track_name = view.overview_drawable\n                        ? view.overview_drawable.config.get_value(\"name\")\n                        : null,\n                    viz_config = {\n                        view: view.to_dict(),\n                        viewport: {\n                            chrom: view.chrom,\n                            start: view.low,\n                            end: view.high,\n                            overview: overview_track_name\n                        },\n                        bookmarks: bookmarks\n                    };\n\n                // Make call to save visualization.\n                return $.ajax({\n                    url: Galaxy.root + \"visualization/save\",\n                    type: \"POST\",\n                    dataType: \"json\",\n                    data: {\n                        id: view.vis_id,\n                        title: view.config.get_value(\"name\"),\n                        dbkey: view.dbkey,\n                        type: \"trackster\",\n                        vis_json: JSON.stringify(viz_config)\n                    }\n                })\n                    .success(function(vis_info) {\n                        Galaxy.modal.hide();\n                        view.vis_id = vis_info.vis_id;\n                        view.has_changes = false;\n\n                        // Needed to set URL when first saving a visualization.\n                        window.history.pushState(\n                            {},\n                            \"\",\n                            vis_info.url + window.location.hash\n                        );\n                    })\n                    .error(function() {\n                        // show dialog\n                        Galaxy.modal.show({\n                            title: \"Could Not Save\",\n                            body:\n                                \"Could not save visualization. Please try again later.\",\n                            buttons: {\n                                Cancel: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    });\n            },\n\n            /**\n     * Create button menu\n     */\n            createButtonMenu: function() {\n                var self = this,\n                    menu = mod_icon_btn.create_icon_buttons_menu(\n                        [\n                            {\n                                icon_class: \"plus-button\",\n                                title: \"Add tracks\",\n                                on_click: function() {\n                                    visualization.select_datasets(\n                                        { dbkey: view.dbkey },\n                                        function(new_tracks) {\n                                            _.each(new_tracks, function(track) {\n                                                view.add_drawable(\n                                                    tracks.object_from_template(\n                                                        track,\n                                                        view,\n                                                        view\n                                                    )\n                                                );\n                                            });\n                                        }\n                                    );\n                                }\n                            },\n                            {\n                                icon_class: \"block--plus\",\n                                title: \"Add group\",\n                                on_click: function() {\n                                    view.add_drawable(\n                                        new tracks.DrawableGroup(view, view, {\n                                            name: \"New Group\"\n                                        })\n                                    );\n                                }\n                            },\n                            {\n                                icon_class: \"bookmarks\",\n                                title: \"Bookmarks\",\n                                on_click: function() {\n                                    // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                                    force_right_panel(\n                                        $(\"div#right\").css(\"right\") == \"0px\"\n                                            ? \"hide\"\n                                            : \"show\"\n                                    );\n                                }\n                            },\n                            {\n                                icon_class: \"globe\",\n                                title: \"Circster\",\n                                on_click: function() {\n                                    window.location =\n                                        self.baseURL +\n                                        \"visualization/circster?id=\" +\n                                        view.vis_id;\n                                }\n                            },\n                            {\n                                icon_class: \"disk--arrow\",\n                                title: \"Save\",\n                                on_click: function() {\n                                    self.save_viz();\n                                }\n                            },\n                            {\n                                icon_class: \"cross-circle\",\n                                title: \"Close\",\n                                on_click: function() {\n                                    self.handle_unsaved_changes(view);\n                                }\n                            }\n                        ],\n                        {\n                            tooltip_config: { placement: \"bottom\" }\n                        }\n                    );\n                this.buttonMenu = menu;\n                return menu;\n            },\n\n            /**\n     * Add bookmark.\n     */\n            add_bookmark: function(position, annotation, editable) {\n                // Create HTML.\n                var bookmarks_container = $(\"#right .unified-panel-body\"),\n                    new_bookmark = $(\"<div/>\")\n                        .addClass(\"bookmark\")\n                        .appendTo(bookmarks_container);\n\n                var position_div = $(\"<div/>\")\n                        .addClass(\"position\")\n                        .appendTo(new_bookmark),\n                    position_link = $(\"<a href=''/>\")\n                        .text(position)\n                        .appendTo(position_div)\n                        .click(function() {\n                            view.go_to(position);\n                            return false;\n                        }),\n                    annotation_div = $(\"<div/>\")\n                        .text(annotation)\n                        .appendTo(new_bookmark);\n\n                // If editable, enable bookmark deletion and annotation editing.\n                if (editable) {\n                    var delete_icon_container = $(\"<div/>\")\n                            .addClass(\"delete-icon-container\")\n                            .prependTo(new_bookmark)\n                            .click(function() {\n                                // Remove bookmark.\n                                new_bookmark.slideUp(\"fast\");\n                                new_bookmark.remove();\n                                view.has_changes = true;\n                                return false;\n                            }),\n                        delete_icon = $(\"<a href=''/>\")\n                            .addClass(\"icon-button delete\")\n                            .appendTo(delete_icon_container);\n                    annotation_div\n                        .make_text_editable({\n                            num_rows: 3,\n                            use_textarea: true,\n                            help_text: \"Edit bookmark note\"\n                        })\n                        .addClass(\"annotation\");\n                }\n\n                view.has_changes = true;\n                return new_bookmark;\n            },\n\n            /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n            create_visualization: function(\n                view_config,\n                viewport_config,\n                drawables_config,\n                bookmarks_config,\n                editable\n            ) {\n                // Create view.\n                var self = this,\n                    view = new tracks.TracksterView(\n                        _.extend(view_config, { header: false })\n                    );\n                view.editor = true;\n                $.when(view.load_chroms_deferred).then(function(chrom_info) {\n                    // Viewport config.\n                    if (viewport_config) {\n                        var chrom = viewport_config.chrom,\n                            start = viewport_config.start,\n                            end = viewport_config.end,\n                            overview_drawable_name = viewport_config.overview;\n\n                        if (chrom && start !== undefined && end) {\n                            view.change_chrom(chrom, start, end);\n                        } else {\n                            // No valid viewport, so use first chromosome.\n                            view.change_chrom(chrom_info[0].chrom);\n                        }\n                    } else {\n                        // No viewport, so use first chromosome.\n                        view.change_chrom(chrom_info[0].chrom);\n                    }\n\n                    // Add drawables to view.\n                    if (drawables_config) {\n                        // FIXME: can from_dict() be used to create view and add drawables?\n                        var drawable_config, drawable_type, drawable;\n                        for (var i = 0; i < drawables_config.length; i++) {\n                            view.add_drawable(\n                                tracks.object_from_template(\n                                    drawables_config[i],\n                                    view,\n                                    view\n                                )\n                            );\n                        }\n                    }\n\n                    // Set overview.\n                    var overview_drawable;\n                    for (var i = 0; i < view.drawables.length; i++) {\n                        if (\n                            view.drawables[i].config.get_value(\"name\") ===\n                            overview_drawable_name\n                        ) {\n                            view.set_overview(view.drawables[i]);\n                            break;\n                        }\n                    }\n\n                    // Load bookmarks.\n                    if (bookmarks_config) {\n                        var bookmark;\n                        for (var i = 0; i < bookmarks_config.length; i++) {\n                            bookmark = bookmarks_config[i];\n                            self.add_bookmark(\n                                bookmark[\"position\"],\n                                bookmark[\"annotation\"],\n                                editable\n                            );\n                        }\n                    }\n\n                    // View has no changes as of yet.\n                    view.has_changes = false;\n                });\n\n                // Final initialization.\n                this.set_up_router({ view: view });\n\n                return view;\n            },\n\n            /**\n     * Set up location router to use hashes as track browser locations.\n     */\n            set_up_router: function(options) {\n                new visualization.TrackBrowserRouter(options);\n                Backbone.history.start();\n            },\n\n            /**\n     * Set up keyboard navigation for a visualization.\n     */\n            init_keyboard_nav: function(view) {\n                // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n                $(document).keyup(function(e) {\n                    // Do not navigate if arrow keys used in input element.\n                    if ($(e.srcElement).is(\":input\")) {\n                        return;\n                    }\n\n                    // Key codes: left == 37, up == 38, right == 39, down == 40\n                    switch (e.which) {\n                        case 37:\n                            view.move_fraction(0.25);\n                            break;\n                        case 38:\n                            var change = Math.round(\n                                view.viewport_container.height() / 15.0\n                            );\n                            view.viewport_container.scrollTop(\n                                view.viewport_container.scrollTop() - 20\n                            );\n                            break;\n                        case 39:\n                            view.move_fraction(-0.25);\n                            break;\n                        case 40:\n                            var change = Math.round(\n                                view.viewport_container.height() / 15.0\n                            );\n                            view.viewport_container.scrollTop(\n                                view.viewport_container.scrollTop() + 20\n                            );\n                            break;\n                    }\n                });\n            },\n\n            /**\n     * Handle unsaved changes in visualization.\n     */\n            handle_unsaved_changes: function(view) {\n                if (view.has_changes) {\n                    var self = this;\n                    Galaxy.modal.show({\n                        title: \"Close visualization\",\n                        body:\n                            \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                        buttons: {\n                            Cancel: function() {\n                                Galaxy.modal.hide();\n                            },\n                            \"Leave without Saving\": function() {\n                                $(window).off(\"beforeunload\");\n                                window.location = Galaxy.root + \"visualization\";\n                            },\n                            Save: function() {\n                                $.when(self.save_viz()).then(function() {\n                                    window.location =\n                                        Galaxy.root + \"visualization\";\n                                });\n                            }\n                        }\n                    });\n                } else {\n                    window.location = Galaxy.root + \"visualization\";\n                }\n            }\n        });\n\n        var TracksterView = Backbone.View.extend({\n            // initalize trackster\n            initialize: function() {\n                // load ui\n                ui = new TracksterUI(Galaxy.root);\n\n                // create button menu\n                ui.createButtonMenu();\n\n                // attach the button menu to the panel header and float it left\n                ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n                // add to center panel\n                $(\"#center .unified-panel-header-inner\").append(\n                    ui.buttonMenu.$el\n                );\n\n                // configure right panel\n                $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n                $(\"#right .unified-panel-icons\").append(\n                    \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n                );\n\n                // resize view when showing/hiding right panel (bookmarks for now).\n                $(\"#right-border\").click(function() {\n                    view.resize_window();\n                });\n\n                // hide right panel\n                force_right_panel(\"hide\");\n\n                // check if id is available\n                if (galaxy_config.app.id) {\n                    this.view_existing();\n                } else if (query_string.get(\"dataset_id\")) {\n                    this.choose_existing_or_new();\n                } else {\n                    this.view_new();\n                }\n            },\n\n            choose_existing_or_new: function() {\n                var self = this;\n                var dbkey = query_string.get(\"dbkey\"),\n                    listTracksParams = {},\n                    dataset_params = {\n                        dbkey: dbkey,\n                        dataset_id: query_string.get(\"dataset_id\"),\n                        hda_ldda: query_string.get(\"hda_ldda\"),\n                        gene_region: query_string.get(\"gene_region\")\n                    };\n                if (dbkey) {\n                    listTracksParams[\"f-dbkey\"] = dbkey;\n                }\n\n                Galaxy.modal.show({\n                    title: \"View Data in a New or Saved Visualization?\",\n                    // either have text in here or have to remove body and the header/footer margins\n                    body:\n                        \"<p><ul style='list-style: disc inside none'>You can add this dataset as:\" +\n                        \"<li>a new track to one of your existing, saved Trackster \" +\n                        \"sessions if they share the genome build: <b>\" +\n                        (dbkey || \"Not available.\") +\n                        \"</b></li>\" +\n                        \"<li>or create a new session with this dataset as the only track</li>\" +\n                        \"</ul></p>\",\n                    buttons: {\n                        Cancel: function() {\n                            window.location =\n                                Galaxy.root + \"visualizations/list\";\n                        },\n                        \"View in saved visualization\": function() {\n                            self.view_in_saved(dataset_params);\n                        },\n                        \"View in new visualization\": function() {\n                            self.view_new();\n                        }\n                    }\n                });\n            },\n\n            // view\n            view_in_saved: function(dataset_params) {\n                var tracks_grid = new GridView({\n                    url_base: Galaxy.root + \"visualization/list_tracks\",\n                    dict_format: true,\n                    embedded: true\n                });\n                Galaxy.modal.show({\n                    title: \"Add Data to Saved Visualization\",\n                    body: tracks_grid.$el,\n                    buttons: {\n                        Cancel: function() {\n                            window.location =\n                                Galaxy.root + \"visualizations/list\";\n                        },\n                        \"Add to visualization\": function() {\n                            $(parent.document)\n                                .find(\"input[name=id]:checked\")\n                                .each(function() {\n                                    dataset_params.id = $(this).val();\n                                    window.location =\n                                        Galaxy.root +\n                                        \"visualization/trackster?\" +\n                                        $.param(dataset_params);\n                                });\n                        }\n                    }\n                });\n            },\n\n            // view\n            view_existing: function() {\n                // get config\n                var viz_config = galaxy_config.app.viz_config;\n\n                // view\n                view = ui.create_visualization(\n                    {\n                        container: $(\"#center .unified-panel-body\"),\n                        name: viz_config.title,\n                        vis_id: viz_config.vis_id,\n                        dbkey: viz_config.dbkey\n                    },\n                    viz_config.viewport,\n                    viz_config.tracks,\n                    viz_config.bookmarks,\n                    true\n                );\n\n                // initialize editor\n                this.init_editor();\n            },\n\n            // view\n            view_new: function() {\n                // reference this\n                var self = this;\n\n                // ajax\n                $.ajax({\n                    url: Galaxy.root + \"api/genomes?chrom_info=True\",\n                    data: {},\n                    error: function() {\n                        alert(\"Couldn't create new browser.\");\n                    },\n                    success: function(response) {\n                        // show dialog\n                        Galaxy.modal.show({\n                            title: \"New Visualization\",\n                            body: self.template_view_new(response),\n                            buttons: {\n                                Cancel: function() {\n                                    window.location =\n                                        Galaxy.root + \"visualizations/list\";\n                                },\n                                Create: function() {\n                                    self.create_browser(\n                                        $(\"#new-title\").val(),\n                                        $(\"#new-dbkey\").val()\n                                    );\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n\n                        // select default\n                        var dbkeys_in_genomes = response.map(function(r) {\n                            return r[1];\n                        });\n                        if (\n                            galaxy_config.app.default_dbkey &&\n                            _.contains(\n                                dbkeys_in_genomes,\n                                galaxy_config.app.default_dbkey\n                            )\n                        ) {\n                            $(\"#new-dbkey\").val(\n                                galaxy_config.app.default_dbkey\n                            );\n                        }\n\n                        // change focus\n                        $(\"#new-title\").focus();\n                        $(\"select[name='dbkey']\").select2();\n\n                        // to support the large number of options for dbkey, enable scrolling in overlay.\n                        $(\"#overlay\").css(\"overflow\", \"auto\");\n                    }\n                });\n            },\n\n            // new browser form\n            template_view_new: function(response) {\n                // start template\n                var html =\n                    '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n                    '<div class=\"form-row\">' +\n                    '<label for=\"new-title\">Browser name:</label>' +\n                    '<div class=\"form-row-input\">' +\n                    '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n                    \"</div>\" +\n                    '<div style=\"clear: both;\"></div>' +\n                    \"</div>\" +\n                    '<div class=\"form-row\">' +\n                    '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n                    '<div class=\"form-row-input\">' +\n                    '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n                // add dbkeys\n                for (var i = 0; i < response.length; i++) {\n                    html +=\n                        '<option value=\"' +\n                        response[i][1] +\n                        '\">' +\n                        response[i][0] +\n                        \"</option>\";\n                }\n\n                // close selection/finalize template\n                html +=\n                    \"</select>\" +\n                    \"</div>\" +\n                    '<div style=\"clear: both;\"></div>' +\n                    \"</div>\" +\n                    '<div class=\"form-row\">' +\n                    \"Is the build not listed here? \" +\n                    '<a href=\"' +\n                    Galaxy.root +\n                    'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n                    \"</div>\" +\n                    \"</form>\";\n\n                // return\n                return html;\n            },\n\n            // create\n            create_browser: function(name, dbkey) {\n                $(document).trigger(\"convert_to_values\");\n\n                view = ui.create_visualization(\n                    {\n                        container: $(\"#center .unified-panel-body\"),\n                        name: name,\n                        dbkey: dbkey\n                    },\n                    galaxy_config.app.gene_region\n                );\n\n                // initialize editor\n                this.init_editor();\n\n                // modify view setting\n                view.editor = true;\n            },\n\n            // initialization for editor-specific functions.\n            init_editor: function() {\n                // set title\n                $(\"#center .unified-panel-title\").text(\n                    view.config.get_value(\"name\") + \" (\" + view.dbkey + \")\"\n                );\n\n                // add dataset\n                if (galaxy_config.app.add_dataset)\n                    $.ajax({\n                        url:\n                            Galaxy.root +\n                            \"api/datasets/\" +\n                            galaxy_config.app.add_dataset,\n                        data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                        dataType: \"json\",\n                        success: function(track_data) {\n                            view.add_drawable(\n                                tracks.object_from_template(\n                                    track_data,\n                                    view,\n                                    view\n                                )\n                            );\n                        }\n                    });\n\n                // initialize icons\n                $(\"#add-bookmark-button\").click(function() {\n                    // add new bookmark.\n                    var position =\n                            view.chrom + \":\" + view.low + \"-\" + view.high,\n                        annotation = \"Bookmark description\";\n                    return ui.add_bookmark(position, annotation, true);\n                });\n\n                // initialize keyboard\n                ui.init_keyboard_nav(view);\n\n                $(window).on(\"beforeunload\", function() {\n                    if (view.has_changes) {\n                        return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n                    }\n                });\n            }\n        });\n\n        return {\n            TracksterUI: TracksterUI,\n            GalaxyApp: TracksterView\n        };\n    }\n);\n"]}