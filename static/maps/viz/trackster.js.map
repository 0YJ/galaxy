{"version":3,"sources":["viz/trackster.js"],"names":["ui","view","_utils2","default","cssLoadFile","Base","browser_router","this","initialize","apply","arguments","extend","Backbone","TracksterUI","baseURL","save_viz","Galaxy","modal","show","title","body","$","bookmarks","push","position","children","text","annotation","overview_drawable","config","get_value","to_dict","viewport","chrom","start","low","overview_track_name","viz_config","overview","url","root","dataType","data","id","vis_id","ajax","type","JSON","stringify","dbkey","vis_info","vis_json","hide","window","location","hash","error","buttons","Cancel","createButtonMenu","self","menu","icon_class","create_icon_buttons_menu","add_drawable","_visualization2","select_datasets","new_tracks","_underscore2","each","track","_tracks2","object_from_template","DrawableGroup","name","on_click","force_right_panel","css","handle_unsaved_changes","position_div","position_link","delete_icon_container","addClass","tooltip_config","placement","num_rows","annotation_div","has_changes","editable","bookmarks_container","new_bookmark","appendTo","create_visualization","editor","when","load_chroms_deferred","click","viewport_config","end","change_chrom","prependTo","slideUp","chrom_info","remove","drawable_config","i","make_text_editable","use_textarea","help_text","bookmark","drawables_config","bookmarks_config","TracksterView","view_config","header","then","set_up_router","undefined","document","e","which","length","move_fraction","change","viewport_container","scrollTop","drawables","overview_drawable_name","set_overview","TrackBrowserRouter","options","init_keyboard_nav","buttonMenu","$el","srcElement","is","resize_window","Math","round","height","galaxy_config","view_existing","choose_existing_or_new","listTracksParams","Leave without Saving","off","view_in_saved","dataset_params","Save","view_new","View","append","app","init_editor","get","_queryStringParsing2","alert","hda_ldda","success","response","Create","View in new visualization","tracks_grid","_gridView2","url_base","template_view_new","embedded","html","parent","find","val","param","container","create_browser","dbkeys_in_genomes","map","r","default_dbkey","contains","focus","select2","trigger","gene_region","add_dataset","data_type","track_data","high","add_bookmark","on","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// trackster viewer\nimport _ from \"libs/underscore\";\nimport tracks from \"viz/trackster/tracks\";\nimport visualization from \"viz/visualization\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport query_string from \"utils/query-string-parsing\";\nimport GridView from \"mvc/grid/grid-view\";\nimport mod_utils from \"utils/utils\";\nimport \"libs/jquery/jquery.event.drag\";\nimport \"libs/jquery/jquery.event.hover\";\nimport \"libs/jquery/jquery.mousewheel\";\nimport \"libs/jquery/jquery-ui\";\nimport \"libs/jquery/select2\";\nimport \"libs/farbtastic\";\nimport \"libs/jquery/jquery.form\";\nimport \"libs/jquery/jquery.rating\";\nimport \"ui/editable-text\";\nmod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\nmod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\nmod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\nmod_utils.cssLoadFile(\"static/style/library.css\");\nmod_utils.cssLoadFile(\"static/style/trackster.css\");\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if (this.initialize) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function(baseURL) {\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this)\n                    .children(\".position\")\n                    .text(),\n                annotation: $(this)\n                    .children(\".annotation\")\n                    .text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = view.overview_drawable\n                ? view.overview_drawable.config.get_value(\"name\")\n                : null,\n            viz_config = {\n                view: view.to_dict(),\n                viewport: {\n                    chrom: view.chrom,\n                    start: view.low,\n                    end: view.high,\n                    overview: overview_track_name\n                },\n                bookmarks: bookmarks\n            };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: Galaxy.root + \"visualization/save\",\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                id: view.vis_id,\n                title: view.config.get_value(\"name\"),\n                dbkey: view.dbkey,\n                type: \"trackster\",\n                vis_json: JSON.stringify(viz_config)\n            }\n        })\n            .success(function(vis_info) {\n                Galaxy.modal.hide();\n                view.vis_id = vis_info.vis_id;\n                view.has_changes = false;\n\n                // Needed to set URL when first saving a visualization.\n                window.history.pushState(\n                    {},\n                    \"\",\n                    vis_info.url + window.location.hash\n                );\n            })\n            .error(function() {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Could Not Save\",\n                    body:\n                        \"Could not save visualization. Please try again later.\",\n                    buttons: {\n                        Cancel: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu(\n                [\n                    {\n                        icon_class: \"plus-button\",\n                        title: \"Add tracks\",\n                        on_click: function() {\n                            visualization.select_datasets(\n                                { dbkey: view.dbkey },\n                                function(new_tracks) {\n                                    _.each(new_tracks, function(track) {\n                                        view.add_drawable(\n                                            tracks.object_from_template(\n                                                track,\n                                                view,\n                                                view\n                                            )\n                                        );\n                                    });\n                                }\n                            );\n                        }\n                    },\n                    {\n                        icon_class: \"block--plus\",\n                        title: \"Add group\",\n                        on_click: function() {\n                            view.add_drawable(\n                                new tracks.DrawableGroup(view, view, {\n                                    name: \"New Group\"\n                                })\n                            );\n                        }\n                    },\n                    {\n                        icon_class: \"bookmarks\",\n                        title: \"Bookmarks\",\n                        on_click: function() {\n                            // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                            force_right_panel(\n                                $(\"div#right\").css(\"right\") == \"0px\"\n                                    ? \"hide\"\n                                    : \"show\"\n                            );\n                        }\n                    },\n                    {\n                        icon_class: \"globe\",\n                        title: \"Circster\",\n                        on_click: function() {\n                            window.location =\n                                self.baseURL +\n                                \"visualization/circster?id=\" +\n                                view.vis_id;\n                        }\n                    },\n                    {\n                        icon_class: \"disk--arrow\",\n                        title: \"Save\",\n                        on_click: function() {\n                            self.save_viz();\n                        }\n                    },\n                    {\n                        icon_class: \"cross-circle\",\n                        title: \"Close\",\n                        on_click: function() {\n                            self.handle_unsaved_changes(view);\n                        }\n                    }\n                ],\n                {\n                    tooltip_config: { placement: \"bottom\" }\n                }\n            );\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\"),\n            new_bookmark = $(\"<div/>\")\n                .addClass(\"bookmark\")\n                .appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\")\n                .addClass(\"position\")\n                .appendTo(new_bookmark),\n            position_link = $(\"<a href=''/>\")\n                .text(position)\n                .appendTo(position_div)\n                .click(function() {\n                    view.go_to(position);\n                    return false;\n                }),\n            annotation_div = $(\"<div/>\")\n                .text(annotation)\n                .appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\")\n                    .addClass(\"delete-icon-container\")\n                    .prependTo(new_bookmark)\n                    .click(function() {\n                        // Remove bookmark.\n                        new_bookmark.slideUp(\"fast\");\n                        new_bookmark.remove();\n                        view.has_changes = true;\n                        return false;\n                    }),\n                delete_icon = $(\"<a href=''/>\")\n                    .addClass(\"icon-button delete\")\n                    .appendTo(delete_icon_container);\n            annotation_div\n                .make_text_editable({\n                    num_rows: 3,\n                    use_textarea: true,\n                    help_text: \"Edit bookmark note\"\n                })\n                .addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(\n        view_config,\n        viewport_config,\n        drawables_config,\n        bookmarks_config,\n        editable\n    ) {\n        // Create view.\n        var self = this,\n            view = new tracks.TracksterView(\n                _.extend(view_config, { header: false })\n            );\n        view.editor = true;\n        $.when(view.load_chroms_deferred).then(function(chrom_info) {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom,\n                    start = viewport_config.start,\n                    end = viewport_config.end,\n                    overview_drawable_name = viewport_config.overview;\n\n                if (chrom && start !== undefined && end) {\n                    view.change_chrom(chrom, start, end);\n                } else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            } else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config, drawable_type, drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable(\n                        tracks.object_from_template(\n                            drawables_config[i],\n                            view,\n                            view\n                        )\n                    );\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (\n                    view.drawables[i].config.get_value(\"name\") ===\n                    overview_drawable_name\n                ) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(\n                        bookmark[\"position\"],\n                        bookmark[\"annotation\"],\n                        editable\n                    );\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({ view: view });\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router: function(options) {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(function(e) {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(\":input\")) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch (e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(\n                        view.viewport_container.height() / 15.0\n                    );\n                    view.viewport_container.scrollTop(\n                        view.viewport_container.scrollTop() - 20\n                    );\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(\n                        view.viewport_container.height() / 15.0\n                    );\n                    view.viewport_container.scrollTop(\n                        view.viewport_container.scrollTop() + 20\n                    );\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body:\n                    \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    Cancel: function() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Leave without Saving\": function() {\n                        $(window).off(\"beforeunload\");\n                        window.location = Galaxy.root + \"visualization\";\n                    },\n                    Save: function() {\n                        $.when(self.save_viz()).then(function() {\n                            window.location = Galaxy.root + \"visualization\";\n                        });\n                    }\n                }\n            });\n        } else {\n            window.location = Galaxy.root + \"visualization\";\n        }\n    }\n});\n\nvar TracksterView = Backbone.View.extend({\n    // initalize trackster\n    initialize: function() {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\n            \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n        );\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(function() {\n            view.resize_window();\n        });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n        // check if id is available\n        if (galaxy_config.app.id) {\n            this.view_existing();\n        } else if (query_string.get(\"dataset_id\")) {\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new: function() {\n        var self = this;\n        var dbkey = query_string.get(\"dbkey\"),\n            listTracksParams = {},\n            dataset_params = {\n                dbkey: dbkey,\n                dataset_id: query_string.get(\"dataset_id\"),\n                hda_ldda: query_string.get(\"hda_ldda\"),\n                gene_region: query_string.get(\"gene_region\")\n            };\n        if (dbkey) {\n            listTracksParams[\"f-dbkey\"] = dbkey;\n        }\n\n        Galaxy.modal.show({\n            title: \"View Data in a New or Saved Visualization?\",\n            // either have text in here or have to remove body and the header/footer margins\n            body:\n                \"<p><ul style='list-style: disc inside none'>You can add this dataset as:\" +\n                \"<li>a new track to one of your existing, saved Trackster \" +\n                \"sessions if they share the genome build: <b>\" +\n                (dbkey || \"Not available.\") +\n                \"</b></li>\" +\n                \"<li>or create a new session with this dataset as the only track</li>\" +\n                \"</ul></p>\",\n            buttons: {\n                Cancel: function() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"View in saved visualization\": function() {\n                    self.view_in_saved(dataset_params);\n                },\n                \"View in new visualization\": function() {\n                    self.view_new();\n                }\n            }\n        });\n    },\n\n    // view\n    view_in_saved: function(dataset_params) {\n        var tracks_grid = new GridView({\n            url_base: Galaxy.root + \"visualization/list_tracks\",\n            dict_format: true,\n            embedded: true\n        });\n        Galaxy.modal.show({\n            title: \"Add Data to Saved Visualization\",\n            body: tracks_grid.$el,\n            buttons: {\n                Cancel: function() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"Add to visualization\": function() {\n                    $(parent.document)\n                        .find(\"input[name=id]:checked\")\n                        .each(function() {\n                            dataset_params.id = $(this).val();\n                            window.location =\n                                Galaxy.root +\n                                \"visualization/trackster?\" +\n                                $.param(dataset_params);\n                        });\n                }\n            }\n        });\n    },\n\n    // view\n    view_existing: function() {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: viz_config.title,\n                vis_id: viz_config.vis_id,\n                dbkey: viz_config.dbkey\n            },\n            viz_config.viewport,\n            viz_config.tracks,\n            viz_config.bookmarks,\n            true\n        );\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new: function() {\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax({\n            url: Galaxy.root + \"api/genomes?chrom_info=True\",\n            data: {},\n            error: function() {\n                alert(\"Couldn't create new browser.\");\n            },\n            success: function(response) {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"New Visualization\",\n                    body: self.template_view_new(response),\n                    buttons: {\n                        Cancel: function() {\n                            window.location =\n                                Galaxy.root + \"visualizations/list\";\n                        },\n                        Create: function() {\n                            self.create_browser(\n                                $(\"#new-title\").val(),\n                                $(\"#new-dbkey\").val()\n                            );\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map(function(r) {\n                    return r[1];\n                });\n                if (\n                    galaxy_config.app.default_dbkey &&\n                    _.contains(\n                        dbkeys_in_genomes,\n                        galaxy_config.app.default_dbkey\n                    )\n                ) {\n                    $(\"#new-dbkey\").val(galaxy_config.app.default_dbkey);\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response) {\n        // start template\n        var html =\n            '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-title\">Browser name:</label>' +\n            '<div class=\"form-row-input\">' +\n            '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n            '<div class=\"form-row-input\">' +\n            '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html +=\n                '<option value=\"' +\n                response[i][1] +\n                '\">' +\n                response[i][0] +\n                \"</option>\";\n        }\n\n        // close selection/finalize template\n        html +=\n            \"</select>\" +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            \"Is the build not listed here? \" +\n            '<a href=\"' +\n            Galaxy.root +\n            'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n            \"</div>\" +\n            \"</form>\";\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser: function(name, dbkey) {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: name,\n                dbkey: dbkey\n            },\n            galaxy_config.app.gene_region\n        );\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor: function() {\n        // set title\n        $(\"#center .unified-panel-title\").text(\n            view.config.get_value(\"name\") + \" (\" + view.dbkey + \")\"\n        );\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url:\n                    Galaxy.root +\n                    \"api/datasets/\" +\n                    galaxy_config.app.add_dataset,\n                data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                dataType: \"json\",\n                success: function(track_data) {\n                    view.add_drawable(\n                        tracks.object_from_template(track_data, view, view)\n                    );\n                }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(function() {\n            // add new bookmark.\n            var position = view.chrom + \":\" + view.low + \"-\" + view.high,\n                annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on(\"beforeunload\", function() {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nexport default {\n    TracksterUI: TracksterUI,\n    GalaxyApp: TracksterView\n};\n"]}