{"version":3,"sources":["viz/trackster.js"],"names":["_","ui","view","_utils2","default","cssLoadFile","Base","this","initialize","apply","arguments","extend","Backbone","Model","TracksterUI","baseURL","save_viz","Galaxy","modal","show","title","body","bookmarks","$","position","children","text","annotation","overview_track_name","overview_drawable","config","get_value","viewport","chrom","start","low","end","high","overview","root","id","vis_id","dbkey","type","hide","window","history","pushState","vis_info","url","location","hash","dataType","data","vis_json","stringify","createButtonMenu","create_icon_buttons_menu","on_click","_visualization2","select_datasets","new_tracks","each","track","add_drawable","_tracks2","object_from_template","icon_class","DrawableGroup","name","force_right_panel","css","self","handle_unsaved_changes","buttonMenu","menu","tooltip_config","placement","add_bookmark","editable","bookmarks_container","new_bookmark","addClass","delete_icon_container","appendTo","annotation_div","position_div","use_textarea","num_rows","has_changes","prependTo","create_visualization","slideUp","remove","viewport_config","make_text_editable","change_chrom","view_config","drawables_config","bookmarks_config","TracksterView","when","load_chroms_deferred","then","chrom_info","overview_drawable_name","bookmark","i","set_up_router","length","drawables","set_overview","move_fraction","options","init_keyboard_nav","document","keyup","e","is","Math","round","viewport_container","height","scrollTop","append","choose_existing_or_new","view_new","Leave without Saving","dataset_params","off","hda_ldda","gene_region","Cancel","View","view_in_saved","$el","attr","url_base","dict_format","embedded","tracks_grid","buttons","view_existing","_queryStringParsing2","get","viz_config","listTracksParams","container","error","success","template_view_new","_gridView2","dbkeys_in_genomes","select2","Add to visualization","parent","find","val","param","galaxy_config","app","create_browser","trigger","init_editor","ajax","response","map","r","default_dbkey","contains","focus","html","editor","add_dataset","data_type","track_data","click","on","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// trackster viewer\nimport * as _ from \"libs/underscore\";\nimport tracks from \"viz/trackster/tracks\";\nimport visualization from \"viz/visualization\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\nimport query_string from \"utils/query-string-parsing\";\nimport GridView from \"mvc/grid/grid-view\";\nimport mod_utils from \"utils/utils\";\nimport \"libs/jquery/jquery.event.drag\";\nimport \"libs/jquery/jquery.event.hover\";\nimport \"libs/jquery/jquery.mousewheel\";\nimport \"libs/jquery/jquery-ui\";\nimport \"libs/jquery/select2\";\nimport \"libs/farbtastic\";\nimport \"libs/jquery/jquery.form\";\nimport \"libs/jquery/jquery.rating\";\nimport \"ui/editable-text\";\nmod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\nmod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\nmod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\nmod_utils.cssLoadFile(\"static/style/library.css\");\nmod_utils.cssLoadFile(\"static/style/trackster.css\");\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if (this.initialize) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function(baseURL) {\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this)\n                    .children(\".position\")\n                    .text(),\n                annotation: $(this)\n                    .children(\".annotation\")\n                    .text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = view.overview_drawable\n            ? view.overview_drawable.config.get_value(\"name\")\n            : null;\n\n        var viz_config = {\n            view: view.to_dict(),\n            viewport: {\n                chrom: view.chrom,\n                start: view.low,\n                end: view.high,\n                overview: overview_track_name\n            },\n            bookmarks: bookmarks\n        };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: Galaxy.root + \"visualization/save\",\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                id: view.vis_id,\n                title: view.config.get_value(\"name\"),\n                dbkey: view.dbkey,\n                type: \"trackster\",\n                vis_json: JSON.stringify(viz_config)\n            }\n        })\n            .success(vis_info => {\n                Galaxy.modal.hide();\n                view.vis_id = vis_info.vis_id;\n                view.has_changes = false;\n\n                // Needed to set URL when first saving a visualization.\n                window.history.pushState(\n                    {},\n                    \"\",\n                    vis_info.url + window.location.hash\n                );\n            })\n            .error(() => {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Could Not Save\",\n                    body:\n                        \"Could not save visualization. Please try again later.\",\n                    buttons: {\n                        Cancel: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"plus-button\",\n                    title: \"Add tracks\",\n                    on_click: function() {\n                        visualization.select_datasets(\n                            { dbkey: view.dbkey },\n                            new_tracks => {\n                                _.each(new_tracks, track => {\n                                    view.add_drawable(\n                                        tracks.object_from_template(\n                                            track,\n                                            view,\n                                            view\n                                        )\n                                    );\n                                });\n                            }\n                        );\n                    }\n                },\n                {\n                    icon_class: \"block--plus\",\n                    title: \"Add group\",\n                    on_click: function() {\n                        view.add_drawable(\n                            new tracks.DrawableGroup(view, view, {\n                                name: \"New Group\"\n                            })\n                        );\n                    }\n                },\n                {\n                    icon_class: \"bookmarks\",\n                    title: \"Bookmarks\",\n                    on_click: function() {\n                        // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                        force_right_panel(\n                            $(\"div#right\").css(\"right\") == \"0px\"\n                                ? \"hide\"\n                                : \"show\"\n                        );\n                    }\n                },\n                {\n                    icon_class: \"globe\",\n                    title: \"Circster\",\n                    on_click: function() {\n                        window.location =\n                            self.baseURL +\n                            \"visualization/circster?id=\" +\n                            view.vis_id;\n                    }\n                },\n                {\n                    icon_class: \"disk--arrow\",\n                    title: \"Save\",\n                    on_click: function() {\n                        self.save_viz();\n                    }\n                },\n                {\n                    icon_class: \"cross-circle\",\n                    title: \"Close\",\n                    on_click: function() {\n                        self.handle_unsaved_changes(view);\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\");\n\n        var new_bookmark = $(\"<div/>\")\n            .addClass(\"bookmark\")\n            .appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\")\n            .addClass(\"position\")\n            .appendTo(new_bookmark);\n\n        var position_link = $(\"<a href=''/>\")\n            .text(position)\n            .appendTo(position_div)\n            .click(() => {\n                view.go_to(position);\n                return false;\n            });\n\n        var annotation_div = $(\"<div/>\")\n            .text(annotation)\n            .appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\")\n                .addClass(\"delete-icon-container\")\n                .prependTo(new_bookmark)\n                .click(() => {\n                    // Remove bookmark.\n                    new_bookmark.slideUp(\"fast\");\n                    new_bookmark.remove();\n                    view.has_changes = true;\n                    return false;\n                });\n\n            var delete_icon = $(\"<a href=''/>\")\n                .addClass(\"icon-button delete\")\n                .appendTo(delete_icon_container);\n\n            annotation_div\n                .make_text_editable({\n                    num_rows: 3,\n                    use_textarea: true,\n                    help_text: \"Edit bookmark note\"\n                })\n                .addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(\n        view_config,\n        viewport_config,\n        drawables_config,\n        bookmarks_config,\n        editable\n    ) {\n        // Create view.\n        var self = this;\n\n        var view = new tracks.TracksterView(\n            _.extend(view_config, { header: false })\n        );\n\n        view.editor = true;\n        $.when(view.load_chroms_deferred).then(chrom_info => {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom;\n                var start = viewport_config.start;\n                var end = viewport_config.end;\n                var overview_drawable_name = viewport_config.overview;\n\n                if (chrom && start !== undefined && end) {\n                    view.change_chrom(chrom, start, end);\n                } else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            } else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config;\n\n                var drawable_type;\n                var drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable(\n                        tracks.object_from_template(\n                            drawables_config[i],\n                            view,\n                            view\n                        )\n                    );\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (\n                    view.drawables[i].config.get_value(\"name\") ===\n                    overview_drawable_name\n                ) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(\n                        bookmark[\"position\"],\n                        bookmark[\"annotation\"],\n                        editable\n                    );\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({ view: view });\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router: function(options) {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(e => {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(\":input\")) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch (e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(\n                        view.viewport_container.height() / 15.0\n                    );\n                    view.viewport_container.scrollTop(\n                        view.viewport_container.scrollTop() - 20\n                    );\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(\n                        view.viewport_container.height() / 15.0\n                    );\n                    view.viewport_container.scrollTop(\n                        view.viewport_container.scrollTop() + 20\n                    );\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body:\n                    \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    Cancel: function() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Leave without Saving\": function() {\n                        $(window).off(\"beforeunload\");\n                        window.location = Galaxy.root + \"visualization\";\n                    },\n                    Save: function() {\n                        $.when(self.save_viz()).then(() => {\n                            window.location = Galaxy.root + \"visualization\";\n                        });\n                    }\n                }\n            });\n        } else {\n            window.location = Galaxy.root + \"visualization\";\n        }\n    }\n});\n\nvar TracksterView = Backbone.View.extend({\n    // initalize trackster\n    initialize: function() {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\n            \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n        );\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(() => {\n            view.resize_window();\n        });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n        // check if id is available\n        if (galaxy_config.app.id) {\n            this.view_existing();\n        } else if (query_string.get(\"dataset_id\")) {\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new: function() {\n        var self = this;\n        var dbkey = query_string.get(\"dbkey\");\n        var listTracksParams = {};\n\n        var dataset_params = {\n            dbkey: dbkey,\n            dataset_id: query_string.get(\"dataset_id\"),\n            hda_ldda: query_string.get(\"hda_ldda\"),\n            gene_region: query_string.get(\"gene_region\")\n        };\n\n        if (dbkey) {\n            listTracksParams[\"f-dbkey\"] = dbkey;\n        }\n\n        Galaxy.modal.show({\n            title: \"View Data in a New or Saved Visualization?\",\n            // either have text in here or have to remove body and the header/footer margins\n            body:\n                \"<p><ul style='list-style: disc inside none'>You can add this dataset as:\" +\n                \"<li>a new track to one of your existing, saved Trackster \" +\n                \"sessions if they share the genome build: <b>\" +\n                (dbkey || \"Not available.\") +\n                \"</b></li>\" +\n                \"<li>or create a new session with this dataset as the only track</li>\" +\n                \"</ul></p>\",\n            buttons: {\n                Cancel: function() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"View in saved visualization\": function() {\n                    self.view_in_saved(dataset_params);\n                },\n                \"View in new visualization\": function() {\n                    self.view_new();\n                }\n            }\n        });\n    },\n\n    // view\n    view_in_saved: function(dataset_params) {\n        var tracks_grid = new GridView({\n            url_base: Galaxy.root + \"visualization/list_tracks\",\n            dict_format: true,\n            embedded: true\n        });\n        Galaxy.modal.show({\n            title: \"Add Data to Saved Visualization\",\n            body: tracks_grid.$el,\n            buttons: {\n                Cancel: function() {\n                    window.location = Galaxy.root + \"visualizations/list\";\n                },\n                \"Add to visualization\": function() {\n                    $(parent.document)\n                        .find(\"input[name=id]:checked\")\n                        .each(function() {\n                            dataset_params.id = $(this).val();\n                            window.location =\n                                Galaxy.root +\n                                \"visualization/trackster?\" +\n                                $.param(dataset_params);\n                        });\n                }\n            }\n        });\n    },\n\n    // view\n    view_existing: function() {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: viz_config.title,\n                vis_id: viz_config.vis_id,\n                dbkey: viz_config.dbkey\n            },\n            viz_config.viewport,\n            viz_config.tracks,\n            viz_config.bookmarks,\n            true\n        );\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new: function() {\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax({\n            url: Galaxy.root + \"api/genomes?chrom_info=True\",\n            data: {},\n            error: function() {\n                alert(\"Couldn't create new browser.\");\n            },\n            success: function(response) {\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"New Visualization\",\n                    body: self.template_view_new(response),\n                    buttons: {\n                        Cancel: function() {\n                            window.location =\n                                Galaxy.root + \"visualizations/list\";\n                        },\n                        Create: function() {\n                            self.create_browser(\n                                $(\"#new-title\").val(),\n                                $(\"#new-dbkey\").val()\n                            );\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map(r => r[1]);\n                if (\n                    galaxy_config.app.default_dbkey &&\n                    _.contains(\n                        dbkeys_in_genomes,\n                        galaxy_config.app.default_dbkey\n                    )\n                ) {\n                    $(\"#new-dbkey\").val(galaxy_config.app.default_dbkey);\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response) {\n        // start template\n        var html =\n            '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-title\">Browser name:</label>' +\n            '<div class=\"form-row-input\">' +\n            '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n            '<div class=\"form-row-input\">' +\n            '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html +=\n                '<option value=\"' +\n                response[i][1] +\n                '\">' +\n                response[i][0] +\n                \"</option>\";\n        }\n\n        // close selection/finalize template\n        html +=\n            \"</select>\" +\n            \"</div>\" +\n            '<div style=\"clear: both;\"></div>' +\n            \"</div>\" +\n            '<div class=\"form-row\">' +\n            \"Is the build not listed here? \" +\n            '<a href=\"' +\n            Galaxy.root +\n            'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n            \"</div>\" +\n            \"</form>\";\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser: function(name, dbkey) {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization(\n            {\n                container: $(\"#center .unified-panel-body\"),\n                name: name,\n                dbkey: dbkey\n            },\n            galaxy_config.app.gene_region\n        );\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor: function() {\n        // set title\n        $(\"#center .unified-panel-title\").text(\n            view.config.get_value(\"name\") + \" (\" + view.dbkey + \")\"\n        );\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url:\n                    Galaxy.root +\n                    \"api/datasets/\" +\n                    galaxy_config.app.add_dataset,\n                data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                dataType: \"json\",\n                success: function(track_data) {\n                    view.add_drawable(\n                        tracks.object_from_template(track_data, view, view)\n                    );\n                }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(() => {\n            // add new bookmark.\n            var position = view.chrom + \":\" + view.low + \"-\" + view.high;\n\n            var annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on(\"beforeunload\", () => {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nexport default {\n    TracksterUI: TracksterUI,\n    GalaxyApp: TracksterView\n};\n"]}