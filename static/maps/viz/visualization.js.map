{"version":3,"sources":["viz/visualization.js"],"names":["_","CustomToJSON","toJSON","self","this","json","each","constructor","to_json_keys","k","val","get","to_json_mappers","dataType","data","data_type","hda_ldda","dummy_canvas","new_canvas","dummy_context","getContext","font","default_font","char_width_px","measureText","width","patterns","load_pattern","arguments","success_fn","track_defs","Galaxy","extend","CanvasManager","prototype","key","path","image","Image","root","createPattern","get_pattern","canvas","$","manager","Cache","Backbone","defaults","num_elements","onload","key_ary","initialize","clear","get_elt","obj_cache","attributes","key_str","toString","index","indexOf","stale","splice","move_key_to_end","set_elt","length","shift","value","push","size","most_recently_added","GenomeDataManager","dataset","genome","init_data","min_region_size","filters_manager","data_mode_compatible","can_subset","entry","options","call","initial_entries","add_data","entries","set","set_data","region","data_is_ready","ready_deferred","Deferred","query_type","ajax_settings","url","interval","response","when","ss_deferred","go","then","ServerStateDeferred","search_features","query","params","getJSON","load_data","resolution","extra_params","chrom","low","high","mode","filter_names","filters","i","name","JSON","stringify","result","get_data","entry_region","is_subregion","contains","is_deferred","_util2","default","subset_entry","copy","last_request","trim","DEEP_DATA_REQ","BROAD_DATA_REQ","get_more_data","req_type","cur_data","_mark_stale","query_low","start_val","max_high","data_manager","query_region","new_data_available","get_more_detailed_data","new_data_request","concat","max_low","can_get_more_detailed_data","message","replace","resolve","console","log","dataset_type","detail_multiplier","get_genome_wide_data","num_samples","all_data_available","start","end","chrom_info","chrom_data","gw_data","map","GenomeRegion","subset_fns","len","refseq","deferred","subregion_data","genome_wide_data","subregion","bigwig","filter","data_point","seq_start","chroms_info","slice","get_chroms_info","same","GenomeReferenceDataManager","get_chrom_len","chr_name","dataset_placeholder","urlRoot","data_url","Genome","Model","id","dbkey","get_chrom_region","find","compute_overlap","first_chrom","second_chrom","a_region","first_start","pieces","from_str","split","start_end","first_end","overlap","overlap_results","parseInt","second_end","str_val","on","DIF_CHROMS","BEFORE","CONTAINS","OVERLAP_START","OVERLAP_END","CONTAINED_BY","GenomeRegionCollection","second_start","AFTER","models","label","type","chrom_len","preloaded_data","overlaps","d","Collection","model","BrowserBookmark","note","vis_json","BackboneTrack","GenomeVisualization","bookmarks","viewport","_data2","Dataset","default_value","unset","ConfigSettingCollection","from_models_and_saved_values","prefs","content_visible","p","view","go_to","new_loc","select_datasets","Visualization","title","save","ajax","drawables","BackboneTrackCollection","tracks","_config2","add_tracks","add","dummy","obj_type","TrackBrowserRouter","Router","route","navigate","change_location","BrowserBookmarkCollection","history_grid","_gridView2","url_base","dict_format","tabs","_uiTabs2","View","$el","append","library_grid","modal","show","body","closing_events","buttons","Cancel","hide","Add","window","requests","current","apply","arg"],"mappings":"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","file":"../../scripts/viz/visualization.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport data_mod from \"mvc/dataset/data\";\nimport util_mod from \"viz/trackster/util\";\nimport config_mod from \"utils/config\";\nimport GridView from \"mvc/grid/grid-view\";\nimport Tabs from \"mvc/ui/ui-tabs\";\nimport Ui from \"mvc/ui/ui-misc\";\n/**\n * Mixin for returning custom JSON representation from toJSON. Class attribute to_json_keys defines a set of attributes\n * to include in the representation; to_json_mappers defines mappers for returned objects.\n */\nvar CustomToJSON = {\n    /**\n     * Returns JSON representation of object using to_json_keys and to_json_mappers.\n     */\n    toJSON: function() {\n        var self = this;\n        var json = {};\n        _.each(self.constructor.to_json_keys, function(k) {\n            var val = self.get(k);\n            if (k in self.constructor.to_json_mappers) {\n                val = self.constructor.to_json_mappers[k](val, self);\n            }\n            json[k] = val;\n        });\n        return json;\n    }\n};\n\n/**\n * Model, view, and controller objects for Galaxy visualization framework.\n *\n * Models have no references to views, instead using events to indicate state\n * changes; this is advantageous because multiple views can use the same object\n * and models can be used without views.\n */\n\n/**\n * Use a popup grid to select datasets from histories or libraries. After datasets are selected,\n * track definitions are obtained from the server and the success_fn is called with the list of\n * definitions for selected datasets.\n */\nvar select_datasets = function(filters, success_fn) {\n    // history dataset selection tab\n    var history_grid = new GridView({\n        url_base: Galaxy.root + \"visualization/list_history_datasets\",\n        filters: filters,\n        dict_format: true,\n        embedded: true\n    });\n\n    // library dataset selection tab\n    var library_grid = new GridView({\n        url_base: Galaxy.root + \"visualization/list_library_datasets\",\n        dict_format: true,\n        embedded: true\n    });\n\n    // build tabs\n    var tabs = new Tabs.View();\n    tabs.add({\n        id: \"histories\",\n        title: \"Histories\",\n        $el: $(\"<div/>\").append(history_grid.$el)\n    });\n    tabs.add({\n        id: \"libraries\",\n        title: \"Libraries\",\n        $el: $(\"<div/>\").append(library_grid.$el)\n    });\n\n    // modal\n    Galaxy.modal.show({\n        title: \"Select datasets for new tracks\",\n        body: tabs.$el,\n        closing_events: true,\n        buttons: {\n            Cancel: function() {\n                Galaxy.modal.hide();\n            },\n            Add: function() {\n                var requests = [];\n                tabs\n                    .$(\"input.grid-row-select-checkbox[name=id]:checked\")\n                    .each(function() {\n                        window.console.log($(this).val());\n                        requests[requests.length] = $.ajax({\n                            url: Galaxy.root + \"api/datasets/\" + $(this).val(),\n                            dataType: \"json\",\n                            data: {\n                                data_type: \"track_config\",\n                                hda_ldda:\n                                    tabs.current() == \"histories\"\n                                        ? \"hda\"\n                                        : \"ldda\"\n                            }\n                        });\n                    });\n                // To preserve order, wait until there are definitions for all tracks and then add\n                // them sequentially.\n                $.when.apply($, requests).then(function() {\n                    // jQuery always returns an Array for arguments, so need to look at first element\n                    // to determine whether multiple requests were made and consequently how to\n                    // map arguments to track definitions.\n                    var track_defs =\n                        arguments[0] instanceof Array\n                            ? $.map(arguments, function(arg) {\n                                  return arg[0];\n                              })\n                            : [arguments[0]];\n                    success_fn(track_defs);\n                });\n                Galaxy.modal.hide();\n            }\n        }\n    });\n};\n\n// --------- Models ---------\n\n/**\n * Canvas manager is used to create canvases for browsers as well as providing a pattern cache\n */\nvar CanvasManager = function(default_font) {\n    this.default_font =\n        default_font !== undefined\n            ? default_font\n            : \"9px Monaco, Lucida Console, monospace\";\n\n    this.dummy_canvas = this.new_canvas();\n    this.dummy_context = this.dummy_canvas.getContext(\"2d\");\n    this.dummy_context.font = this.default_font;\n\n    this.char_width_px = this.dummy_context.measureText(\"A\").width;\n\n    this.patterns = {};\n\n    // FIXME: move somewhere to make this more general\n    this.load_pattern(\"right_strand\", \"/visualization/strand_right.png\");\n    this.load_pattern(\"left_strand\", \"/visualization/strand_left.png\");\n    this.load_pattern(\n        \"right_strand_inv\",\n        \"/visualization/strand_right_inv.png\"\n    );\n    this.load_pattern(\"left_strand_inv\", \"/visualization/strand_left_inv.png\");\n};\n\n_.extend(CanvasManager.prototype, {\n    load_pattern: function(key, path) {\n        var patterns = this.patterns;\n        var dummy_context = this.dummy_context;\n        var image = new Image();\n        image.src = Galaxy.root + \"static/images\" + path;\n        image.onload = function() {\n            patterns[key] = dummy_context.createPattern(image, \"repeat\");\n        };\n    },\n    get_pattern: function(key) {\n        return this.patterns[key];\n    },\n    new_canvas: function() {\n        var canvas = $(\"<canvas/>\")[0];\n        // Keep a reference back to the manager\n        canvas.manager = this;\n        return canvas;\n    }\n});\n\n/**\n * Generic cache that handles key/value pairs. Keys can be any object that can be\n * converted to a String and compared.\n */\nvar Cache = Backbone.Model.extend({\n    defaults: {\n        num_elements: 20,\n        // Objects in cache; indexes into cache are strings of keys.\n        obj_cache: null,\n        // key_ary contains keys for objects in cache.\n        key_ary: null\n    },\n\n    initialize: function(options) {\n        this.clear();\n    },\n\n    /**\n     * Get an element from the cache using its key.\n     */\n    get_elt: function(key) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n\n        var index = _.indexOf(key_ary, function(k) {\n            return k.toString() === key_str;\n        });\n\n        // Update cache.\n        if (index !== -1) {\n            // Object is in cache, so update it.\n            if (obj_cache[key_str].stale) {\n                // Object is stale: remove key and object.\n                key_ary.splice(index, 1);\n                delete obj_cache[key_str];\n            } else {\n                // Move key to back because it is most recently used.\n                this.move_key_to_end(key, index);\n            }\n        }\n\n        return obj_cache[key_str];\n    },\n\n    /**\n     * Put an element into the cache.\n     */\n    set_elt: function(key, value) {\n        var obj_cache = this.attributes.obj_cache;\n        var key_ary = this.attributes.key_ary;\n        var key_str = key.toString();\n        var num_elements = this.attributes.num_elements;\n\n        // Update keys, objects.\n        if (!obj_cache[key_str]) {\n            // Add object to cache.\n\n            if (key_ary.length >= num_elements) {\n                // Cache full, so remove first element.\n                var deleted_key = key_ary.shift();\n                delete obj_cache[deleted_key.toString()];\n            }\n\n            // Add key.\n            key_ary.push(key);\n        }\n\n        // Add object.\n        obj_cache[key_str] = value;\n        return value;\n    },\n\n    /**\n     * Move key to end of cache. Keys are removed from the front, so moving a key to the end\n     * delays the key's removal.\n     */\n    move_key_to_end: function(key, index) {\n        this.attributes.key_ary.splice(index, 1);\n        this.attributes.key_ary.push(key);\n    },\n\n    /**\n     * Clear all elements from the cache.\n     */\n    clear: function() {\n        this.attributes.obj_cache = {};\n        this.attributes.key_ary = [];\n    },\n\n    /** Returns the number of elements in the cache. */\n    size: function() {\n        return this.attributes.key_ary.length;\n    },\n\n    /** Returns key most recently added to cache. */\n    most_recently_added: function() {\n        return this.size() === 0\n            ? null\n            : // Most recent key is at the end of key array.\n              this.attributes.key_ary[this.attributes.key_ary.length - 1];\n    }\n});\n\n/**\n * Data manager for genomic data. Data is connected to and queryable by genomic regions.\n */\nvar GenomeDataManager = Cache.extend({\n    defaults: _.extend({}, Cache.prototype.defaults, {\n        dataset: null,\n        genome: null,\n        init_data: null,\n        min_region_size: 200,\n        filters_manager: null,\n        data_type: \"data\",\n        data_mode_compatible: function(entry, mode) {\n            return true;\n        },\n        can_subset: function(entry) {\n            return false;\n        }\n    }),\n\n    /**\n     * Initialization.\n     */\n    initialize: function(options) {\n        Cache.prototype.initialize.call(this);\n\n        // Set initial entries in data manager.\n        var initial_entries = this.get(\"init_data\");\n        if (initial_entries) {\n            this.add_data(initial_entries);\n        }\n    },\n\n    /**\n     * Add data entries to manager; each entry should be a dict with attributes region (key), data, and data_type.\n     * If necessary, manager size is increased to hold all data.\n     */\n    add_data: function(entries) {\n        // Increase size to accomodate all entries.\n        if (this.get(\"num_elements\") < entries.length) {\n            this.set(\"num_elements\", entries.length);\n        }\n\n        // Put data into manager.\n        var self = this;\n        _.each(entries, function(entry) {\n            self.set_data(entry.region, entry);\n        });\n    },\n\n    /**\n     * Returns deferred that resolves to true when dataset is ready (or false if dataset\n     * cannot be used).\n     */\n    data_is_ready: function() {\n        var dataset = this.get(\"dataset\");\n        var ready_deferred = $.Deferred();\n\n        var // If requesting raw data, query dataset state; if requesting (converted) data,\n        // need to query converted datasets state.\n        query_type =\n            this.get(\"data_type\") === \"raw_data\"\n                ? \"state\"\n                : this.get(\"data_type\") === \"data\"\n                  ? \"converted_datasets_state\"\n                  : \"error\";\n\n        var ss_deferred = new util_mod.ServerStateDeferred({\n            ajax_settings: {\n                url: this.get(\"dataset\").url(),\n                data: {\n                    hda_ldda: dataset.get(\"hda_ldda\"),\n                    data_type: query_type\n                },\n                dataType: \"json\"\n            },\n            interval: 5000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        $.when(ss_deferred.go()).then(function(response) {\n            ready_deferred.resolve(response === \"ok\" || response === \"data\");\n        });\n        return ready_deferred;\n    },\n\n    /**\n     * Perform a feature search from server; returns Deferred object that resolves when data is available.\n     */\n    search_features: function(query) {\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            query: query,\n            hda_ldda: dataset.get(\"hda_ldda\"),\n            data_type: \"features\"\n        };\n\n        return $.getJSON(dataset.url(), params);\n    },\n\n    /**\n     * Load data from server and manages data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function(region, mode, resolution, extra_params) {\n        // Setup data request params.\n        var dataset = this.get(\"dataset\");\n\n        var params = {\n            data_type: this.get(\"data_type\"),\n            chrom: region.get(\"chrom\"),\n            low: region.get(\"start\"),\n            high: region.get(\"end\"),\n            mode: mode,\n            resolution: resolution,\n            hda_ldda: dataset.get(\"hda_ldda\")\n        };\n\n        $.extend(params, extra_params);\n\n        // Add track filters to params.\n        var filters_manager = this.get(\"filters_manager\");\n        if (filters_manager) {\n            var filter_names = [];\n            var filters = filters_manager.filters;\n            for (var i = 0; i < filters.length; i++) {\n                filter_names.push(filters[i].name);\n            }\n            params.filter_cols = JSON.stringify(filter_names);\n        }\n\n        // Do request.\n        var manager = this;\n\n        var entry = $.getJSON(dataset.url(), params, function(result) {\n            // Add region to the result.\n            result.region = region;\n            manager.set_data(region, result);\n        });\n\n        this.set_data(region, entry);\n        return entry;\n    },\n\n    /**\n     * Get data from dataset.\n     */\n    get_data: function(region, mode, resolution, extra_params) {\n        // Look for entry and return if it's a deferred or if data available is compatible with mode.\n        var entry = this.get_elt(region);\n        if (\n            entry &&\n            (util_mod.is_deferred(entry) ||\n                this.get(\"data_mode_compatible\")(entry, mode))\n        ) {\n            return entry;\n        }\n\n        //\n        // Look in cache for data that can be used.\n        // TODO: this logic could be improved if the visualization knew whether\n        // the data was \"index\" or \"data.\"\n        //\n        var key_ary = this.get(\"key_ary\");\n\n        var obj_cache = this.get(\"obj_cache\");\n        var entry_region;\n        var is_subregion;\n        for (var i = 0; i < key_ary.length; i++) {\n            entry_region = key_ary[i];\n\n            if (entry_region.contains(region)) {\n                is_subregion = true;\n\n                // This entry has data in the requested range. Return if data\n                // is compatible and can be subsetted.\n                entry = obj_cache[entry_region.toString()];\n                if (\n                    util_mod.is_deferred(entry) ||\n                    (this.get(\"data_mode_compatible\")(entry, mode) &&\n                        this.get(\"can_subset\")(entry))\n                ) {\n                    this.move_key_to_end(entry_region, i);\n\n                    // If there's data, subset it.\n                    if (!util_mod.is_deferred(entry)) {\n                        var subset_entry = this.subset_entry(entry, region);\n                        this.set_data(region, subset_entry);\n                        entry = subset_entry;\n                    }\n\n                    return entry;\n                }\n            }\n        }\n\n        // FIXME: There _may_ be instances where region is a subregion of another entry but cannot be\n        // subsetted. For these cases, do not increase length because region will never be found (and\n        // an infinite loop will occur.)\n        // If needed, extend region to make it minimum size.\n        if (\n            !is_subregion &&\n            region.length() < this.attributes.min_region_size\n        ) {\n            // IDEA: alternative heuristic is to find adjacent cache entry to region and use that to extend.\n            // This would prevent bad extensions when zooming in/out while still preserving the behavior\n            // below.\n\n            // Use copy of region to avoid changing actual region.\n            region = region.copy();\n\n            // Use heuristic to extend region: extend relative to last data request.\n            var last_request = this.most_recently_added();\n            if (\n                !last_request ||\n                region.get(\"start\") > last_request.get(\"start\")\n            ) {\n                // This request is after the last request, so extend right.\n                region.set(\n                    \"end\",\n                    region.get(\"start\") + this.attributes.min_region_size\n                );\n            } else {\n                // This request is after the last request, so extend left.\n                region.set(\n                    \"start\",\n                    region.get(\"end\") - this.attributes.min_region_size\n                );\n            }\n\n            // Trim region to avoid invalid coordinates.\n            region.set(\"genome\", this.attributes.genome);\n            region.trim();\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Alias for set_elt for readbility.\n     */\n    set_data: function(region, entry) {\n        this.set_elt(region, entry);\n    },\n\n    /** \"Deep\" data request; used as a parameter for DataManager.get_more_data() */\n    DEEP_DATA_REQ: \"deep\",\n\n    /** \"Broad\" data request; used as a parameter for DataManager.get_more_data() */\n    BROAD_DATA_REQ: \"breadth\",\n\n    /**\n     * Gets more data for a region using either a depth-first or a breadth-first approach.\n     */\n    get_more_data: function(region, mode, resolution, extra_params, req_type) {\n        var cur_data = this._mark_stale(region);\n        if (!(cur_data && this.get(\"data_mode_compatible\")(cur_data, mode))) {\n            console.log(\n                \"ERROR: problem with getting more data: current data is not compatible\"\n            );\n            return;\n        }\n\n        //\n        // Set parameters based on request type.\n        //\n        var query_low = region.get(\"start\");\n        if (req_type === this.DEEP_DATA_REQ) {\n            // Use same interval but set start_val to skip data that's already in cur_data.\n            $.extend(extra_params, {\n                start_val: cur_data.data.length + 1\n            });\n        } else if (req_type === this.BROAD_DATA_REQ) {\n            // To get past an area of extreme feature depth, set query low to be after either\n            // (a) the maximum high or HACK/FIXME (b) the end of the last feature returned.\n            query_low =\n                (cur_data.max_high\n                    ? cur_data.max_high\n                    : cur_data.data[cur_data.data.length - 1][2]) + 1;\n        }\n        var query_region = region.copy().set(\"start\", query_low);\n\n        //\n        // Get additional data, append to current data, and set new data. Use a custom deferred object\n        // to signal when new data is available.\n        //\n        var data_manager = this;\n\n        var new_data_request = this.load_data(\n            query_region,\n            mode,\n            resolution,\n            extra_params\n        );\n\n        var new_data_available = $.Deferred();\n        // load_data sets cache to new_data_request, but use custom deferred object so that signal and data\n        // is all data, not just new data.\n        this.set_data(region, new_data_available);\n        $.when(new_data_request).then(function(result) {\n            // Update data and message.\n            if (result.data) {\n                result.data = cur_data.data.concat(result.data);\n                if (result.max_low) {\n                    result.max_low = cur_data.max_low;\n                }\n                if (result.message) {\n                    // HACK: replace number in message with current data length. Works but is ugly.\n                    result.message = result.message.replace(\n                        /[0-9]+/,\n                        result.data.length\n                    );\n                }\n            }\n            data_manager.set_data(region, result);\n            new_data_available.resolve(result);\n        });\n        return new_data_available;\n    },\n\n    /**\n     * Returns true if more detailed data can be obtained for entry.\n     */\n    can_get_more_detailed_data: function(region) {\n        var cur_data = this.get_elt(region);\n\n        // Can only get more detailed data for bigwig data that has less than 8000 data points.\n        // Summary tree returns *way* too much data, and 8000 data points ~ 500KB.\n        return (\n            cur_data.dataset_type === \"bigwig\" && cur_data.data.length < 8000\n        );\n    },\n\n    /**\n     * Returns more detailed data for an entry.\n     */\n    get_more_detailed_data: function(\n        region,\n        mode,\n        resolution,\n        detail_multiplier,\n        extra_params\n    ) {\n        // Mark current entry as stale.\n        var cur_data = this._mark_stale(region);\n        if (!cur_data) {\n            console.log(\"ERROR getting more detailed data: no current data\");\n            return;\n        }\n\n        if (!extra_params) {\n            extra_params = {};\n        }\n\n        // Use additional parameters to get more detailed data.\n        if (cur_data.dataset_type === \"bigwig\") {\n            // FIXME: constant should go somewhere.\n            extra_params.num_samples = 1000 * detail_multiplier;\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Marks cache data as stale.\n     */\n    _mark_stale: function(region) {\n        var entry = this.get_elt(region);\n        if (!entry) {\n            console.log(\n                \"ERROR: no data to mark as stale: \",\n                this.get(\"dataset\"),\n                region.toString()\n            );\n        }\n        entry.stale = true;\n        return entry;\n    },\n\n    /**\n     * Returns an array of data with each entry representing one chromosome/contig\n     * of data or, if data is not available, returns a Deferred that resolves to the\n     * data when it becomes available.\n     */\n    get_genome_wide_data: function(genome) {\n        // -- Get all data. --\n\n        var self = this;\n\n        var all_data_available = true;\n\n        var //  Map chromosome info into genome data.\n        gw_data = _.map(genome.get(\"chroms_info\").chrom_info, function(\n            chrom_info\n        ) {\n            var chrom_data = self.get_elt(\n                new GenomeRegion({\n                    chrom: chrom_info.chrom,\n                    start: 0,\n                    end: chrom_info.len\n                })\n            );\n\n            // Set flag if data is not available.\n            if (!chrom_data) {\n                all_data_available = false;\n            }\n\n            return chrom_data;\n        });\n\n        // -- If all data is available, return it. --\n        if (all_data_available) {\n            return gw_data;\n        }\n\n        // -- All data is not available, so load from server. --\n\n        var deferred = $.Deferred();\n        $.getJSON(\n            this.get(\"dataset\").url(),\n            { data_type: \"genome_data\" },\n            function(genome_wide_data) {\n                self.add_data(genome_wide_data.data);\n                deferred.resolve(genome_wide_data.data);\n            }\n        );\n\n        return deferred;\n    },\n\n    /**\n     * Returns entry with only data in the subregion.\n     */\n    subset_entry: function(entry, subregion) {\n        // Dictionary from entry type to function for subsetting data.\n        var subset_fns = {\n            bigwig: function(data, subregion) {\n                return _.filter(data, function(data_point) {\n                    return (\n                        data_point[0] >= subregion.get(\"start\") &&\n                        data_point[0] <= subregion.get(\"end\")\n                    );\n                });\n            },\n            refseq: function(data, subregion) {\n                var seq_start =\n                    subregion.get(\"start\") - entry.region.get(\"start\");\n                return entry.data.slice(\n                    seq_start,\n                    seq_start + subregion.length()\n                );\n            }\n        };\n\n        // Subset entry if there is a function for subsetting and regions are not the same.\n        var subregion_data = entry.data;\n        if (!entry.region.same(subregion) && entry.dataset_type in subset_fns) {\n            subregion_data = subset_fns[entry.dataset_type](\n                entry.data,\n                subregion\n            );\n        }\n\n        // Return entry with subregion's data.\n        return {\n            region: subregion,\n            data: subregion_data,\n            dataset_type: entry.dataset_type\n        };\n    }\n});\n\nvar GenomeReferenceDataManager = GenomeDataManager.extend({\n    initialize: function(options) {\n        // Use generic object in place of dataset and set urlRoot to fetch data.\n        var dataset_placeholder = new Backbone.Model();\n        dataset_placeholder.urlRoot = options.data_url;\n        this.set(\"dataset\", dataset_placeholder);\n    },\n\n    load_data: function(region, mode, resolution, extra_params) {\n        // Fetch data if region is not too large.\n        return region.length() <= 100000\n            ? GenomeDataManager.prototype.load_data.call(\n                  this,\n                  region,\n                  mode,\n                  resolution,\n                  extra_params\n              )\n            : { data: null, region: region };\n    }\n});\n\n/**\n * A genome build.\n */\nvar Genome = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        key: null,\n        chroms_info: null\n    },\n\n    initialize: function(options) {\n        this.id = options.dbkey;\n    },\n\n    /**\n     * Shorthand for getting to chromosome information.\n     */\n    get_chroms_info: function() {\n        return this.attributes.chroms_info.chrom_info;\n    },\n\n    /**\n     * Returns a GenomeRegion object denoting a complete chromosome.\n     */\n    get_chrom_region: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        var chrom_info = _.find(this.get_chroms_info(), function(chrom_info) {\n            return chrom_info.chrom === chr_name;\n        });\n        return new GenomeRegion({\n            chrom: chrom_info.chrom,\n            end: chrom_info.len\n        });\n    },\n\n    /** Returns the length of a chromosome. */\n    get_chrom_len: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        return _.find(this.get_chroms_info(), function(chrom_info) {\n            return chrom_info.chrom === chr_name;\n        }).len;\n    }\n});\n\n/**\n * A genomic region.\n */\nvar GenomeRegion = Backbone.Model.extend(\n    {\n        defaults: {\n            chrom: null,\n            start: 0,\n            end: 0,\n            str_val: null,\n            genome: null\n        },\n\n        /**\n     * Returns true if this region is the same as a given region.\n     * It does not test the genome right now.\n     */\n        same: function(region) {\n            return (\n                this.attributes.chrom === region.get(\"chrom\") &&\n                this.attributes.start === region.get(\"start\") &&\n                this.attributes.end === region.get(\"end\")\n            );\n        },\n\n        /**\n     * If from_str specified, use it to initialize attributes.\n     */\n        initialize: function(options) {\n            if (options.from_str) {\n                var pieces = options.from_str.split(\":\");\n                var chrom = pieces[0];\n                var start_end = pieces[1].split(\"-\");\n                this.set({\n                    chrom: chrom,\n                    start: parseInt(start_end[0], 10),\n                    end: parseInt(start_end[1], 10)\n                });\n            }\n\n            // Keep a copy of region's string value for fast lookup.\n            this.attributes.str_val =\n                this.get(\"chrom\") +\n                \":\" +\n                this.get(\"start\") +\n                \"-\" +\n                this.get(\"end\");\n\n            // Set str_val on attribute change.\n            this.on(\n                \"change\",\n                function() {\n                    this.attributes.str_val =\n                        this.get(\"chrom\") +\n                        \":\" +\n                        this.get(\"start\") +\n                        \"-\" +\n                        this.get(\"end\");\n                },\n                this\n            );\n        },\n\n        copy: function() {\n            return new GenomeRegion({\n                chrom: this.get(\"chrom\"),\n                start: this.get(\"start\"),\n                end: this.get(\"end\")\n            });\n        },\n\n        length: function() {\n            return this.get(\"end\") - this.get(\"start\");\n        },\n\n        /** Returns region in canonical form chrom:start-end */\n        toString: function() {\n            return this.attributes.str_val;\n        },\n\n        toJSON: function() {\n            return {\n                chrom: this.get(\"chrom\"),\n                start: this.get(\"start\"),\n                end: this.get(\"end\")\n            };\n        },\n\n        /**\n     * Compute the type of overlap between this region and another region. The overlap is computed relative to the given/second region;\n     * hence, OVERLAP_START indicates that the first region overlaps the start (but not the end) of the second region.\n     */\n        compute_overlap: function(a_region) {\n            var first_chrom = this.get(\"chrom\");\n            var second_chrom = a_region.get(\"chrom\");\n            var first_start = this.get(\"start\");\n            var second_start = a_region.get(\"start\");\n            var first_end = this.get(\"end\");\n            var second_end = a_region.get(\"end\");\n            var overlap;\n\n            // Compare chroms.\n            if (first_chrom && second_chrom && first_chrom !== second_chrom) {\n                return GenomeRegion.overlap_results.DIF_CHROMS;\n            }\n\n            // Compare regions.\n            if (first_start < second_start) {\n                if (first_end < second_start) {\n                    overlap = GenomeRegion.overlap_results.BEFORE;\n                } else if (first_end < second_end) {\n                    overlap = GenomeRegion.overlap_results.OVERLAP_START;\n                } else {\n                    // first_end >= second_end\n                    overlap = GenomeRegion.overlap_results.CONTAINS;\n                }\n            } else if (first_start > second_start) {\n                if (first_start > second_end) {\n                    overlap = GenomeRegion.overlap_results.AFTER;\n                } else if (first_end <= second_end) {\n                    overlap = GenomeRegion.overlap_results.CONTAINED_BY;\n                } else {\n                    overlap = GenomeRegion.overlap_results.OVERLAP_END;\n                }\n            } else {\n                // first_start === second_start\n                overlap =\n                    first_end >= second_end\n                        ? GenomeRegion.overlap_results.CONTAINS\n                        : GenomeRegion.overlap_results.CONTAINED_BY;\n            }\n\n            return overlap;\n        },\n\n        /**\n     * Trim a region to match genome's constraints.\n     */\n        trim: function(genome) {\n            // Assume that all chromosome/contigs start at 0.\n            if (this.attributes.start < 0) {\n                this.attributes.start = 0;\n            }\n\n            // Only try to trim the end if genome is set.\n            if (this.attributes.genome) {\n                var chrom_len = this.attributes.genome.get_chrom_len(\n                    this.attributes.chrom\n                );\n                if (this.attributes.end > chrom_len) {\n                    this.attributes.end = chrom_len - 1;\n                }\n            }\n\n            return this;\n        },\n\n        /**\n     * Returns true if this region contains a given region.\n     */\n        contains: function(a_region) {\n            return (\n                this.compute_overlap(a_region) ===\n                GenomeRegion.overlap_results.CONTAINS\n            );\n        },\n\n        /**\n     * Returns true if regions overlap.\n     */\n        overlaps: function(a_region) {\n            return (\n                _.intersection(\n                    [this.compute_overlap(a_region)],\n                    [\n                        GenomeRegion.overlap_results.DIF_CHROMS,\n                        GenomeRegion.overlap_results.BEFORE,\n                        GenomeRegion.overlap_results.AFTER\n                    ]\n                ).length === 0\n            );\n        }\n    },\n    {\n        overlap_results: {\n            DIF_CHROMS: 1000,\n            BEFORE: 1001,\n            CONTAINS: 1002,\n            OVERLAP_START: 1003,\n            OVERLAP_END: 1004,\n            CONTAINED_BY: 1005,\n            AFTER: 1006\n        }\n    }\n);\n\nvar GenomeRegionCollection = Backbone.Collection.extend({\n    model: GenomeRegion\n});\n\n/**\n * A genome browser bookmark.\n */\nvar BrowserBookmark = Backbone.Model.extend({\n    defaults: {\n        region: null,\n        note: \"\"\n    },\n\n    initialize: function(options) {\n        this.set(\"region\", new GenomeRegion(options.region));\n    }\n});\n\n/**\n * Bookmarks collection.\n */\nvar BrowserBookmarkCollection = Backbone.Collection.extend({\n    model: BrowserBookmark\n});\n\n/**\n * A track of data in a genome visualization.\n */\n// TODO: rename to Track and merge with Trackster's Track object.\nvar BackboneTrack = Backbone.Model.extend(CustomToJSON).extend(\n    {\n        defaults: {\n            mode: \"Auto\"\n        },\n\n        initialize: function(options) {\n            this.set(\"dataset\", new data_mod.Dataset(options.dataset));\n\n            // -- Set up config settings. --\n            var models = [\n                {\n                    key: \"name\",\n                    default_value: this.get(\"dataset\").get(\"name\")\n                },\n                { key: \"color\" },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: 0\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: 1\n                }\n            ];\n\n            this.set(\n                \"config\",\n                config_mod.ConfigSettingCollection.from_models_and_saved_values(\n                    models,\n                    options.prefs\n                )\n            );\n\n            // -- Set up data manager. --\n            var preloaded_data = this.get(\"preloaded_data\");\n            if (preloaded_data) {\n                preloaded_data = preloaded_data.data;\n            } else {\n                preloaded_data = [];\n            }\n            this.set(\n                \"data_manager\",\n                new GenomeDataManager({\n                    dataset: this.get(\"dataset\"),\n                    init_data: preloaded_data\n                })\n            );\n        }\n    },\n    {\n        // This definition matches that produced by to_dict() methods in tracks.js\n        to_json_keys: [\n            \"track_type\",\n            \"dataset\",\n            \"prefs\",\n            \"mode\",\n            \"filters\",\n            \"tool_state\"\n        ],\n        to_json_mappers: {\n            prefs: function(p, self) {\n                if (_.size(p) === 0) {\n                    p = {\n                        name: self\n                            .get(\"config\")\n                            .get(\"name\")\n                            .get(\"value\"),\n                        color: self\n                            .get(\"config\")\n                            .get(\"color\")\n                            .get(\"value\")\n                    };\n                }\n                return p;\n            },\n            dataset: function(d) {\n                return {\n                    id: d.id,\n                    hda_ldda: d.get(\"hda_ldda\")\n                };\n            }\n        }\n    }\n);\n\nvar BackboneTrackCollection = Backbone.Collection.extend({\n    model: BackboneTrack\n});\n\n/**\n * A visualization.\n */\nvar Visualization = Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        type: \"\"\n    },\n\n    urlRoot: Galaxy.root + \"api/visualizations\",\n\n    /**\n     * POSTs visualization's JSON to its URL using the parameter 'vis_json'\n     * Note: This is necessary because (a) Galaxy requires keyword args and\n     * (b) Galaxy does not handle PUT now.\n     */\n    save: function() {\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                vis_json: JSON.stringify(this)\n            }\n        });\n    }\n});\n\n/**\n * A visualization of genome data.\n */\nvar GenomeVisualization = Visualization.extend(CustomToJSON).extend(\n    {\n        defaults: _.extend({}, Visualization.prototype.defaults, {\n            dbkey: \"\",\n            drawables: null,\n            bookmarks: null,\n            viewport: null\n        }),\n\n        initialize: function(options) {\n            // Replace drawables with tracks.\n            this.set(\"drawables\", new BackboneTrackCollection(options.tracks));\n\n            var models = [];\n            this.set(\n                \"config\",\n                config_mod.ConfigSettingCollection.from_models_and_saved_values(\n                    models,\n                    options.prefs\n                )\n            );\n\n            // Clear track and data definitions to avoid storing large objects.\n            this.unset(\"tracks\");\n            this.get(\"drawables\").each(function(d) {\n                d.unset(\"preloaded_data\");\n            });\n        },\n\n        /**\n     * Add a track or array of tracks to the visualization.\n     */\n        add_tracks: function(tracks) {\n            this.get(\"drawables\").add(tracks);\n        }\n    },\n    {\n        // This definition matches that produced by to_dict() methods in tracks.js\n        to_json_keys: [\"view\", \"viewport\", \"bookmarks\"],\n\n        to_json_mappers: {\n            view: function(dummy, self) {\n                return {\n                    obj_type: \"View\",\n                    prefs: {\n                        name: self.get(\"title\"),\n                        content_visible: true\n                    },\n                    drawables: self.get(\"drawables\")\n                };\n            }\n        }\n    }\n);\n\n/**\n * -- Routers --\n */\n\n/**\n * Router for track browser.\n */\nvar TrackBrowserRouter = Backbone.Router.extend({\n    initialize: function(options) {\n        this.view = options.view;\n\n        // Can't put regular expression in routes dictionary.\n        // NOTE: parentheses are used to denote parameters returned to callback.\n        this.route(/([\\w]+)$/, \"change_location\");\n        this.route(/([\\w\\+]+\\:[\\d,]+-[\\d,]+)$/, \"change_location\");\n\n        // Handle navigate events from view.\n        var self = this;\n        self.view.on(\"navigate\", function(new_loc) {\n            self.navigate(new_loc);\n        });\n    },\n\n    change_location: function(new_loc) {\n        this.view.go_to(new_loc);\n    }\n});\n\nexport default {\n    BackboneTrack: BackboneTrack,\n    BrowserBookmark: BrowserBookmark,\n    BrowserBookmarkCollection: BrowserBookmarkCollection,\n    Cache: Cache,\n    CanvasManager: CanvasManager,\n    Genome: Genome,\n    GenomeDataManager: GenomeDataManager,\n    GenomeRegion: GenomeRegion,\n    GenomeRegionCollection: GenomeRegionCollection,\n    GenomeVisualization: GenomeVisualization,\n    GenomeReferenceDataManager: GenomeReferenceDataManager,\n    TrackBrowserRouter: TrackBrowserRouter,\n    Visualization: Visualization,\n    select_datasets: select_datasets\n};\n"]}