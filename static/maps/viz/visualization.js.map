{"version":3,"sources":["viz/visualization.js"],"names":["define","_","data_mod","util_mod","config_mod","CustomToJSON","toJSON","self","this","json","each","constructor","to_json_keys","k","val","get","to_json_mappers","select_datasets","dataset_url","add_track_async_url","filters","success_fn","$","ajax","url","data","error","alert","success","table_html","Galaxy","modal","show","title","body","buttons","Cancel","hide","Add","requests","data_type","hda_ldda","id","attr","length","dataType","when","apply","then","track_defs","arguments","Array","map","arg","CanvasManager","default_font","undefined","dummy_canvas","new_canvas","dummy_context","getContext","font","char_width_px","measureText","width","patterns","load_pattern","extend","prototype","key","path","image","Image","src","root","onload","createPattern","get_pattern","canvas","manager","Cache","Backbone","Model","defaults","num_elements","obj_cache","key_ary","initialize","options","clear","get_elt","attributes","key_str","toString","index","indexOf","stale","splice","move_key_to_end","set_elt","value","shift","push","size","most_recently_added","GenomeDataManager","dataset","genome","init_data","min_region_size","filters_manager","data_mode_compatible","entry","mode","can_subset","call","initial_entries","add_data","entries","set","set_data","region","data_is_ready","ready_deferred","Deferred","query_type","ss_deferred","ServerStateDeferred","ajax_settings","interval","response","go","resolve","search_features","query","params","getJSON","load_data","resolution","extra_params","chrom","low","high","filter_names","i","name","filter_cols","JSON","stringify","result","get_data","is_deferred","entry_region","is_subregion","contains","subset_entry","copy","last_request","trim","DEEP_DATA_REQ","BROAD_DATA_REQ","get_more_data","req_type","cur_data","_mark_stale","console","log","query_low","start_val","max_high","query_region","data_manager","new_data_request","new_data_available","concat","max_low","message","replace","can_get_more_detailed_data","dataset_type","get_more_detailed_data","detail_multiplier","num_samples","get_genome_wide_data","all_data_available","gw_data","chrom_info","chrom_data","GenomeRegion","start","end","len","deferred","genome_wide_data","subregion","subset_fns","bigwig","filter","data_point","refseq","seq_start","slice","subregion_data","same","GenomeReferenceDataManager","dataset_placeholder","urlRoot","data_url","Genome","chroms_info","dbkey","get_chroms_info","get_chrom_region","chr_name","find","get_chrom_len","str_val","from_str","pieces","split","start_end","parseInt","on","compute_overlap","a_region","first_chrom","second_chrom","first_start","second_start","first_end","second_end","overlap_results","DIF_CHROMS","BEFORE","OVERLAP_START","CONTAINS","AFTER","CONTAINED_BY","OVERLAP_END","chrom_len","overlaps","intersection","GenomeRegionCollection","Collection","model","BrowserBookmark","note","BrowserBookmarkCollection","BackboneTrack","Dataset","models","default_value","label","type","ConfigSettingCollection","from_models_and_saved_values","prefs","preloaded_data","p","color","d","BackboneTrackCollection","Visualization","save","vis_json","GenomeVisualization","drawables","bookmarks","viewport","tracks","unset","add_tracks","add","view","dummy","obj_type","content_visible","TrackBrowserRouter","Router","route","new_loc","navigate","change_location","go_to"],"mappings":"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","file":"../../scripts/viz/visualization.js","sourcesContent":["define( [\"libs/underscore\", \"mvc/dataset/data\", \"viz/trackster/util\", \"utils/config\"], function(_, data_mod, util_mod, config_mod) {\n\n/**\n * Mixin for returning custom JSON representation from toJSON. Class attribute to_json_keys defines a set of attributes\n * to include in the representation; to_json_mappers defines mappers for returned objects.\n */\nvar CustomToJSON = {\n    /**\n     * Returns JSON representation of object using to_json_keys and to_json_mappers.\n     */\n    toJSON: function() {\n        var self = this,\n            json = {};\n        _.each(self.constructor.to_json_keys, function(k) {\n            var val = self.get(k);\n            if (k in self.constructor.to_json_mappers) {\n                val = self.constructor.to_json_mappers[k](val, self);\n            }\n            json[k] = val;\n        });\n        return json;\n    }\n};\n\n/**\n * Model, view, and controller objects for Galaxy visualization framework.\n *\n * Models have no references to views, instead using events to indicate state\n * changes; this is advantageous because multiple views can use the same object\n * and models can be used without views.\n */\n\n/**\n * Use a popup grid to select datasets from histories or libraries. After datasets are selected,\n * track definitions are obtained from the server and the success_fn is called with the list of\n * definitions for selected datasets.\n */\nvar select_datasets = function(dataset_url, add_track_async_url, filters, success_fn) {\n    $.ajax({\n        url: dataset_url,\n        data: filters,\n        error: function() { alert( \"Grid failed\" ); },\n        success: function(table_html) {\n            Galaxy.modal.show({\n                title   : \"Select datasets for new tracks\",\n                body    : table_html,\n                buttons :\n                {\n                    \"Cancel\": function() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Add\": function() {\n                       var requests = [];\n                        $('input[name=id]:checked,input[name=ldda_ids]:checked').each(function() {\n                            var data = {\n                                    data_type: 'track_config',\n                                   'hda_ldda': 'hda'\n                                },\n                                id = $(this).val();\n                               if ($(this).attr(\"name\") !== \"id\") {\n                                    data.hda_ldda = 'ldda';\n                                }\n                                requests[requests.length] = $.ajax({\n                                   url: add_track_async_url + \"/\" + id,\n                                    data: data,\n                                    dataType: \"json\"\n                                });\n                        });\n                        // To preserve order, wait until there are definitions for all tracks and then add\n                        // them sequentially.\n                        $.when.apply($, requests).then(function() {\n                            // jQuery always returns an Array for arguments, so need to look at first element\n                            // to determine whether multiple requests were made and consequently how to\n                            // map arguments to track definitions.\n                            var track_defs = (arguments[0] instanceof Array ?\n                                               $.map(arguments, function(arg) { return arg[0]; }) :\n                                               [ arguments[0] ]\n                                               );\n                            success_fn(track_defs);\n                        });\n                        Galaxy.modal.hide();\n                    }\n               }\n            });\n        }\n    });\n};\n\n// --------- Models ---------\n\n/**\n * Canvas manager is used to create canvases for browsers as well as providing a pattern cache\n */\nvar CanvasManager = function(default_font) {\n    this.default_font = default_font !== undefined ? default_font : \"9px Monaco, Lucida Console, monospace\";\n\n    this.dummy_canvas = this.new_canvas();\n    this.dummy_context = this.dummy_canvas.getContext('2d');\n    this.dummy_context.font = this.default_font;\n\n    this.char_width_px = this.dummy_context.measureText(\"A\").width;\n\n    this.patterns = {};\n\n    // FIXME: move somewhere to make this more general\n    this.load_pattern( 'right_strand', \"/visualization/strand_right.png\" );\n    this.load_pattern( 'left_strand', \"/visualization/strand_left.png\" );\n    this.load_pattern( 'right_strand_inv', \"/visualization/strand_right_inv.png\" );\n    this.load_pattern( 'left_strand_inv', \"/visualization/strand_left_inv.png\" );\n};\n\n_.extend( CanvasManager.prototype, {\n    load_pattern: function( key, path ) {\n        var patterns = this.patterns,\n            dummy_context = this.dummy_context,\n            image = new Image();\n        image.src = Galaxy.root + \"static/images\" + path;\n        image.onload = function() {\n            patterns[key] = dummy_context.createPattern( image, \"repeat\" );\n        };\n    },\n    get_pattern: function( key ) {\n        return this.patterns[key];\n    },\n    new_canvas: function() {\n        var canvas = $(\"<canvas/>\")[0];\n        // Keep a reference back to the manager\n        canvas.manager = this;\n        return canvas;\n    }\n});\n\n/**\n * Generic cache that handles key/value pairs. Keys can be any object that can be\n * converted to a String and compared.\n */\nvar Cache = Backbone.Model.extend({\n    defaults: {\n        num_elements: 20,\n        // Objects in cache; indexes into cache are strings of keys.\n        obj_cache: null,\n        // key_ary contains keys for objects in cache.\n        key_ary: null\n    },\n\n    initialize: function(options) {\n        this.clear();\n    },\n\n    /**\n     * Get an element from the cache using its key.\n     */\n    get_elt: function(key) {\n        var obj_cache = this.attributes.obj_cache,\n            key_ary = this.attributes.key_ary,\n            key_str = key.toString(),\n            index = _.indexOf(key_ary, function(k) {\n                return k.toString() === key_str;\n            });\n\n        // Update cache.\n        if (index !== -1) {\n            // Object is in cache, so update it.\n            if (obj_cache[key_str].stale) {\n                // Object is stale: remove key and object.\n                key_ary.splice(index, 1);\n                delete obj_cache[key_str];\n            }\n            else {\n                // Move key to back because it is most recently used.\n                this.move_key_to_end(key, index);\n            }\n        }\n\n        return obj_cache[key_str];\n    },\n\n    /**\n     * Put an element into the cache.\n     */\n    set_elt: function(key, value) {\n        var obj_cache = this.attributes.obj_cache,\n            key_ary = this.attributes.key_ary,\n            key_str = key.toString(),\n            num_elements = this.attributes.num_elements;\n\n        // Update keys, objects.\n        if (!obj_cache[key_str]) {\n            // Add object to cache.\n\n            if (key_ary.length >= num_elements) {\n                // Cache full, so remove first element.\n                var deleted_key = key_ary.shift();\n                delete obj_cache[deleted_key.toString()];\n            }\n\n            // Add key.\n            key_ary.push(key);\n        }\n\n        // Add object.\n        obj_cache[key_str] = value;\n        return value;\n    },\n\n    /**\n     * Move key to end of cache. Keys are removed from the front, so moving a key to the end\n     * delays the key's removal.\n     */\n    move_key_to_end: function(key, index) {\n        this.attributes.key_ary.splice(index, 1);\n        this.attributes.key_ary.push(key);\n    },\n\n    /**\n     * Clear all elements from the cache.\n     */\n    clear: function() {\n        this.attributes.obj_cache = {};\n        this.attributes.key_ary = [];\n    },\n\n    /** Returns the number of elements in the cache. */\n    size: function() {\n        return this.attributes.key_ary.length;\n    },\n\n    /** Returns key most recently added to cache. */\n    most_recently_added: function() {\n        return this.size() === 0 ? null :\n               // Most recent key is at the end of key array.\n               this.attributes.key_ary[this.attributes.key_ary.length - 1];\n    }\n});\n\n/**\n * Data manager for genomic data. Data is connected to and queryable by genomic regions.\n */\nvar GenomeDataManager = Cache.extend({\n    defaults: _.extend({}, Cache.prototype.defaults, {\n        dataset: null,\n        genome: null,\n        init_data: null,\n        min_region_size: 200,\n        filters_manager: null,\n        data_type: \"data\",\n        data_mode_compatible: function(entry, mode) { return true; },\n        can_subset: function(entry) { return false; }\n    }),\n\n    /**\n     * Initialization.\n     */\n    initialize: function(options) {\n        Cache.prototype.initialize.call(this);\n\n        // Set initial entries in data manager.\n        var initial_entries = this.get('init_data');\n        if (initial_entries) {\n            this.add_data(initial_entries);\n        }\n    },\n\n    /**\n     * Add data entries to manager; each entry should be a dict with attributes region (key), data, and data_type.\n     * If necessary, manager size is increased to hold all data.\n     */\n    add_data: function(entries) {\n        // Increase size to accomodate all entries.\n        if (this.get('num_elements') < entries.length) {\n            this.set('num_elements', entries.length);\n        }\n\n        // Put data into manager.\n        var self = this;\n        _.each(entries, function(entry) {\n            self.set_data(entry.region, entry);\n        });\n    },\n\n    /**\n     * Returns deferred that resolves to true when dataset is ready (or false if dataset\n     * cannot be used).\n     */\n    data_is_ready: function() {\n        var dataset = this.get('dataset'),\n            ready_deferred = $.Deferred(),\n            // If requesting raw data, query dataset state; if requesting (converted) data,\n            // need to query converted datasets state.\n            query_type = (this.get('data_type') === 'raw_data' ? 'state' :\n                          this.get('data_type') === 'data' ? 'converted_datasets_state' : \"error\" ),\n            ss_deferred = new util_mod.ServerStateDeferred({\n                ajax_settings: {\n                    url: this.get('dataset').url(),\n                    data: {\n                        hda_ldda: dataset.get('hda_ldda'),\n                        data_type: query_type\n                    },\n                    dataType: \"json\"\n                },\n                interval: 5000,\n                success_fn: function(response) { return response !== \"pending\"; }\n            });\n\n        $.when(ss_deferred.go()).then(function(response) {\n            ready_deferred.resolve(response === \"ok\" || response === \"data\" );\n        });\n        return ready_deferred;\n    },\n\n    /**\n     * Perform a feature search from server; returns Deferred object that resolves when data is available.\n     */\n    search_features: function(query) {\n        var dataset = this.get('dataset'),\n            params = {\n                query: query,\n                hda_ldda: dataset.get('hda_ldda'),\n                data_type: 'features'\n            };\n        return $.getJSON(dataset.url(), params);\n    },\n\n    /**\n     * Load data from server and manages data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function(region, mode, resolution, extra_params) {\n        // Setup data request params.\n        var dataset = this.get('dataset'),\n            params = {\n                        \"data_type\": this.get('data_type'),\n                        \"chrom\": region.get('chrom'),\n                        \"low\": region.get('start'),\n                        \"high\": region.get('end'),\n                        \"mode\": mode,\n                        \"resolution\": resolution,\n                        \"hda_ldda\": dataset.get('hda_ldda')\n                     };\n\n        $.extend(params, extra_params);\n\n        // Add track filters to params.\n        var filters_manager = this.get('filters_manager');\n        if (filters_manager) {\n            var filter_names = [];\n            var filters = filters_manager.filters;\n            for (var i = 0; i < filters.length; i++) {\n                filter_names.push(filters[i].name);\n            }\n            params.filter_cols = JSON.stringify(filter_names);\n        }\n\n        // Do request.\n        var manager = this,\n            entry = $.getJSON(dataset.url(), params, function (result) {\n                // Add region to the result.\n                result.region = region;\n                manager.set_data(region, result);\n            });\n\n        this.set_data(region, entry);\n        return entry;\n    },\n\n    /**\n     * Get data from dataset.\n     */\n    get_data: function(region, mode, resolution, extra_params) {\n        // Look for entry and return if it's a deferred or if data available is compatible with mode.\n        var entry = this.get_elt(region);\n        if ( entry &&\n             ( util_mod.is_deferred(entry) || this.get('data_mode_compatible')(entry, mode) ) ) {\n            return entry;\n        }\n\n        //\n        // Look in cache for data that can be used.\n        // TODO: this logic could be improved if the visualization knew whether\n        // the data was \"index\" or \"data.\"\n        //\n        var key_ary = this.get('key_ary'),\n            obj_cache = this.get('obj_cache'),\n            entry_region, is_subregion;\n        for (var i = 0; i < key_ary.length; i++) {\n            entry_region = key_ary[i];\n\n            if (entry_region.contains(region)) {\n                is_subregion = true;\n\n                // This entry has data in the requested range. Return if data\n                // is compatible and can be subsetted.\n                entry = obj_cache[entry_region.toString()];\n                if ( util_mod.is_deferred(entry) ||\n                    ( this.get('data_mode_compatible')(entry, mode) && this.get('can_subset')(entry) ) ) {\n                    this.move_key_to_end(entry_region, i);\n\n                    // If there's data, subset it.\n                    if ( !util_mod.is_deferred(entry) ) {\n                        var subset_entry = this.subset_entry(entry, region);\n                        this.set_data(region, subset_entry);\n                        entry = subset_entry;\n                    }\n\n                    return entry;\n                }\n            }\n        }\n\n        // FIXME: There _may_ be instances where region is a subregion of another entry but cannot be\n        // subsetted. For these cases, do not increase length because region will never be found (and\n        // an infinite loop will occur.)\n        // If needed, extend region to make it minimum size.\n        if (!is_subregion && region.length() < this.attributes.min_region_size) {\n            // IDEA: alternative heuristic is to find adjacent cache entry to region and use that to extend.\n            // This would prevent bad extensions when zooming in/out while still preserving the behavior\n            // below.\n\n            // Use copy of region to avoid changing actual region.\n            region = region.copy();\n\n            // Use heuristic to extend region: extend relative to last data request.\n            var last_request = this.most_recently_added();\n            if (!last_request || (region.get('start') > last_request.get('start'))) {\n                // This request is after the last request, so extend right.\n                region.set('end', region.get('start') + this.attributes.min_region_size);\n            }\n            else {\n                // This request is after the last request, so extend left.\n                region.set('start', region.get('end') - this.attributes.min_region_size);\n            }\n\n            // Trim region to avoid invalid coordinates.\n            region.set('genome', this.attributes.genome);\n            region.trim();\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Alias for set_elt for readbility.\n     */\n    set_data: function(region, entry) {\n        this.set_elt(region, entry);\n    },\n\n    /** \"Deep\" data request; used as a parameter for DataManager.get_more_data() */\n    DEEP_DATA_REQ: \"deep\",\n\n    /** \"Broad\" data request; used as a parameter for DataManager.get_more_data() */\n    BROAD_DATA_REQ: \"breadth\",\n\n    /**\n     * Gets more data for a region using either a depth-first or a breadth-first approach.\n     */\n    get_more_data: function(region, mode, resolution, extra_params, req_type) {\n        var cur_data = this._mark_stale(region);\n        if (!(cur_data && this.get('data_mode_compatible')(cur_data, mode))) {\n            console.log('ERROR: problem with getting more data: current data is not compatible');\n            return;\n        }\n\n        //\n        // Set parameters based on request type.\n        //\n        var query_low = region.get('start');\n        if (req_type === this.DEEP_DATA_REQ) {\n            // Use same interval but set start_val to skip data that's already in cur_data.\n            $.extend(extra_params, {start_val: cur_data.data.length + 1});\n        }\n        else if (req_type === this.BROAD_DATA_REQ) {\n            // To get past an area of extreme feature depth, set query low to be after either\n            // (a) the maximum high or HACK/FIXME (b) the end of the last feature returned.\n            query_low = (cur_data.max_high ? cur_data.max_high : cur_data.data[cur_data.data.length - 1][2]) + 1;\n        }\n        var query_region = region.copy().set('start', query_low);\n\n        //\n        // Get additional data, append to current data, and set new data. Use a custom deferred object\n        // to signal when new data is available.\n        //\n        var data_manager = this,\n            new_data_request = this.load_data(query_region, mode, resolution, extra_params),\n            new_data_available = $.Deferred();\n        // load_data sets cache to new_data_request, but use custom deferred object so that signal and data\n        // is all data, not just new data.\n        this.set_data(region, new_data_available);\n        $.when(new_data_request).then(function(result) {\n            // Update data and message.\n            if (result.data) {\n                result.data = cur_data.data.concat(result.data);\n                if (result.max_low) {\n                    result.max_low = cur_data.max_low;\n                }\n                if (result.message) {\n                    // HACK: replace number in message with current data length. Works but is ugly.\n                    result.message = result.message.replace(/[0-9]+/, result.data.length);\n                }\n            }\n            data_manager.set_data(region, result);\n            new_data_available.resolve(result);\n        });\n        return new_data_available;\n    },\n\n    /**\n     * Returns true if more detailed data can be obtained for entry.\n     */\n    can_get_more_detailed_data: function(region) {\n        var cur_data = this.get_elt(region);\n\n        // Can only get more detailed data for bigwig data that has less than 8000 data points.\n        // Summary tree returns *way* too much data, and 8000 data points ~ 500KB.\n        return (cur_data.dataset_type === 'bigwig' && cur_data.data.length < 8000);\n    },\n\n    /**\n     * Returns more detailed data for an entry.\n     */\n    get_more_detailed_data: function(region, mode, resolution, detail_multiplier, extra_params) {\n        // Mark current entry as stale.\n        var cur_data = this._mark_stale(region);\n        if (!cur_data) {\n            console.log(\"ERROR getting more detailed data: no current data\");\n            return;\n        }\n\n        if (!extra_params) { extra_params = {}; }\n\n        // Use additional parameters to get more detailed data.\n        if (cur_data.dataset_type === 'bigwig') {\n            // FIXME: constant should go somewhere.\n            extra_params.num_samples = 1000 * detail_multiplier;\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Marks cache data as stale.\n     */\n    _mark_stale: function(region) {\n        var entry = this.get_elt(region);\n        if (!entry) {\n            console.log(\"ERROR: no data to mark as stale: \", this.get('dataset'), region.toString());\n        }\n        entry.stale = true;\n        return entry;\n    },\n\n    /**\n     * Returns an array of data with each entry representing one chromosome/contig\n     * of data or, if data is not available, returns a Deferred that resolves to the\n     * data when it becomes available.\n     */\n    get_genome_wide_data: function(genome) {\n        // -- Get all data. --\n\n        var self = this,\n            all_data_available = true,\n\n            //  Map chromosome info into genome data.\n            gw_data = _.map(genome.get('chroms_info').chrom_info, function(chrom_info) {\n                var chrom_data = self.get_elt(\n                    new GenomeRegion({\n                        chrom: chrom_info.chrom,\n                        start: 0,\n                        end: chrom_info.len\n                    })\n                );\n\n                // Set flag if data is not available.\n                if (!chrom_data) { all_data_available = false; }\n\n                return chrom_data;\n            });\n\n        // -- If all data is available, return it. --\n        if (all_data_available) {\n            return gw_data;\n        }\n\n        // -- All data is not available, so load from server. --\n\n        var deferred = $.Deferred();\n        $.getJSON(this.get('dataset').url(), { data_type: 'genome_data' }, function(genome_wide_data) {\n            self.add_data(genome_wide_data.data);\n            deferred.resolve(genome_wide_data.data);\n        });\n\n        return deferred;\n    },\n\n    /**\n     * Returns entry with only data in the subregion.\n     */\n    subset_entry: function(entry, subregion) {\n        // Dictionary from entry type to function for subsetting data.\n        var subset_fns = {\n            bigwig: function(data, subregion) {\n                return _.filter(data, function(data_point) {\n                    return data_point[0] >= subregion.get('start') &&\n                           data_point[0] <= subregion.get('end');\n                });\n            },\n            refseq: function(data, subregion) {\n                var seq_start = subregion.get('start') - entry.region.get('start');\n                return entry.data.slice(seq_start, seq_start + subregion.length());\n            }\n        };\n\n        // Subset entry if there is a function for subsetting and regions are not the same.\n        var subregion_data = entry.data;\n        if (!entry.region.same(subregion) && entry.dataset_type in subset_fns) {\n            subregion_data = subset_fns[entry.dataset_type](entry.data, subregion);\n        }\n\n        // Return entry with subregion's data.\n        return {\n            region: subregion,\n            data: subregion_data,\n            dataset_type: entry.dataset_type\n        };\n    }\n});\n\nvar GenomeReferenceDataManager = GenomeDataManager.extend({\n    initialize: function(options) {\n        // Use generic object in place of dataset and set urlRoot to fetch data.\n        var dataset_placeholder = new Backbone.Model();\n        dataset_placeholder.urlRoot = options.data_url;\n        this.set('dataset', dataset_placeholder);\n    },\n\n    load_data: function(region, mode, resolution, extra_params) {\n        // Fetch data if region is not too large.\n        return ( region.length() <= 100000 ?\n                 GenomeDataManager.prototype.load_data.call(this, region, mode, resolution, extra_params) :\n                 { data: null, region: region } );\n    }\n});\n\n/**\n * A genome build.\n */\nvar Genome = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        key: null,\n        chroms_info: null\n    },\n\n    initialize: function(options) {\n        this.id = options.dbkey;\n    },\n\n    /**\n     * Shorthand for getting to chromosome information.\n     */\n    get_chroms_info: function() {\n        return this.attributes.chroms_info.chrom_info;\n    },\n\n    /**\n     * Returns a GenomeRegion object denoting a complete chromosome.\n     */\n    get_chrom_region: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        var chrom_info = _.find(this.get_chroms_info(), function(chrom_info) {\n            return chrom_info.chrom === chr_name;\n        });\n        return new GenomeRegion({\n            chrom: chrom_info.chrom,\n            end: chrom_info.len\n        });\n    },\n\n    /** Returns the length of a chromosome. */\n    get_chrom_len: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        return _.find(this.get_chroms_info(), function(chrom_info) {\n            return chrom_info.chrom === chr_name;\n        }).len;\n    }\n});\n\n/**\n * A genomic region.\n */\nvar GenomeRegion = Backbone.Model.extend({\n    defaults: {\n        chrom: null,\n        start: 0,\n        end: 0,\n        str_val: null,\n        genome: null\n    },\n\n    /**\n     * Returns true if this region is the same as a given region.\n     * It does not test the genome right now.\n     */\n    same: function(region) {\n        return this.attributes.chrom === region.get('chrom') &&\n               this.attributes.start === region.get('start') &&\n               this.attributes.end === region.get('end');\n    },\n\n    /**\n     * If from_str specified, use it to initialize attributes.\n     */\n    initialize: function(options) {\n        if (options.from_str) {\n            var pieces = options.from_str.split(':'),\n                chrom = pieces[0],\n                start_end = pieces[1].split('-');\n            this.set({\n                chrom: chrom,\n                start: parseInt(start_end[0], 10),\n                end: parseInt(start_end[1], 10)\n            });\n        }\n\n        // Keep a copy of region's string value for fast lookup.\n        this.attributes.str_val = this.get('chrom') + \":\" + this.get('start') + \"-\" + this.get('end');\n\n        // Set str_val on attribute change.\n        this.on('change', function() {\n            this.attributes.str_val = this.get('chrom') + \":\" + this.get('start') + \"-\" + this.get('end');\n        }, this);\n    },\n\n    copy: function() {\n        return new GenomeRegion({\n            chrom: this.get('chrom'),\n            start: this.get('start'),\n            end: this.get('end')\n        });\n    },\n\n    length: function() {\n        return this.get('end') - this.get('start');\n    },\n\n    /** Returns region in canonical form chrom:start-end */\n    toString: function() {\n        return this.attributes.str_val;\n    },\n\n    toJSON: function() {\n        return {\n            chrom: this.get('chrom'),\n            start: this.get('start'),\n            end: this.get('end')\n        };\n    },\n\n    /**\n     * Compute the type of overlap between this region and another region. The overlap is computed relative to the given/second region;\n     * hence, OVERLAP_START indicates that the first region overlaps the start (but not the end) of the second region.\n     */\n    compute_overlap: function(a_region) {\n        var first_chrom = this.get('chrom'), second_chrom = a_region.get('chrom'),\n            first_start = this.get('start'), second_start = a_region.get('start'),\n            first_end = this.get('end'), second_end = a_region.get('end'),\n            overlap;\n\n        // Compare chroms.\n        if (first_chrom && second_chrom && first_chrom !== second_chrom) {\n            return GenomeRegion.overlap_results.DIF_CHROMS;\n        }\n\n        // Compare regions.\n        if (first_start < second_start) {\n            if (first_end < second_start) {\n                overlap = GenomeRegion.overlap_results.BEFORE;\n            }\n            else if (first_end < second_end) {\n                overlap = GenomeRegion.overlap_results.OVERLAP_START;\n            }\n            else { // first_end >= second_end\n                overlap = GenomeRegion.overlap_results.CONTAINS;\n            }\n        }\n        else if (first_start > second_start) {\n            if (first_start > second_end) {\n                overlap = GenomeRegion.overlap_results.AFTER;\n            }\n            else if (first_end <= second_end) {\n                overlap = GenomeRegion.overlap_results.CONTAINED_BY;\n            }\n            else {\n                overlap = GenomeRegion.overlap_results.OVERLAP_END;\n            }\n        }\n        else { // first_start === second_start\n            overlap = (first_end >= second_end ?\n                       GenomeRegion.overlap_results.CONTAINS :\n                       GenomeRegion.overlap_results.CONTAINED_BY);\n        }\n\n        return overlap;\n    },\n\n    /**\n     * Trim a region to match genome's constraints.\n     */\n    trim: function(genome) {\n        // Assume that all chromosome/contigs start at 0.\n        if (this.attributes.start < 0) {\n            this.attributes.start = 0;\n        }\n\n        // Only try to trim the end if genome is set.\n        if (this.attributes.genome) {\n            var chrom_len = this.attributes.genome.get_chrom_len(this.attributes.chrom);\n            if (this.attributes.end > chrom_len) {\n                this.attributes.end = chrom_len - 1;\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Returns true if this region contains a given region.\n     */\n    contains: function(a_region) {\n        return this.compute_overlap(a_region) === GenomeRegion.overlap_results.CONTAINS;\n    },\n\n    /**\n     * Returns true if regions overlap.\n     */\n    overlaps: function(a_region) {\n        return _.intersection( [this.compute_overlap(a_region)],\n                               [GenomeRegion.overlap_results.DIF_CHROMS, GenomeRegion.overlap_results.BEFORE, GenomeRegion.overlap_results.AFTER] ).length === 0;\n    }\n},\n{\n    overlap_results: {\n        DIF_CHROMS: 1000,\n        BEFORE: 1001,\n        CONTAINS: 1002,\n        OVERLAP_START: 1003,\n        OVERLAP_END: 1004,\n        CONTAINED_BY: 1005,\n        AFTER: 1006\n    }\n});\n\nvar GenomeRegionCollection = Backbone.Collection.extend({\n    model: GenomeRegion\n});\n\n/**\n * A genome browser bookmark.\n */\nvar BrowserBookmark = Backbone.Model.extend({\n    defaults: {\n        region: null,\n        note: ''\n    },\n\n    initialize: function(options) {\n        this.set('region', new GenomeRegion(options.region));\n    }\n});\n\n/**\n * Bookmarks collection.\n */\nvar BrowserBookmarkCollection = Backbone.Collection.extend({\n    model: BrowserBookmark\n});\n\n/**\n * A track of data in a genome visualization.\n */\n// TODO: rename to Track and merge with Trackster's Track object.\nvar BackboneTrack = Backbone.Model.extend(CustomToJSON).extend({\n    defaults: {\n        mode: 'Auto'\n    },\n\n    initialize: function(options) {\n        this.set('dataset', new data_mod.Dataset(options.dataset));\n\n        // -- Set up config settings. --\n        var models =  [\n            { key: 'name', default_value: this.get('dataset').get('name') },\n            { key: 'color' },\n            { key: 'min_value', label: 'Min Value', type: 'float', default_value: 0 },\n            { key: 'max_value', label: 'Max Value', type: 'float', default_value: 1 }\n        ];\n\n        this.set('config', config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n        // -- Set up data manager. --\n        var preloaded_data = this.get('preloaded_data');\n        if (preloaded_data) {\n            preloaded_data = preloaded_data.data;\n        }\n        else {\n            preloaded_data = [];\n        }\n        this.set('data_manager', new GenomeDataManager({\n            dataset: this.get('dataset'),\n            init_data: preloaded_data\n        }));\n    }\n},\n{\n    // This definition matches that produced by to_dict() methods in tracks.js\n    to_json_keys: [\n        'track_type',\n        'dataset',\n        'prefs',\n        'mode',\n        'filters',\n        'tool_state'\n    ],\n    to_json_mappers: {\n        prefs: function(p, self) {\n            if (_.size(p) === 0) {\n                p = {\n                    name: self.get('config').get('name').get('value'),\n                    color: self.get('config').get('color').get('value')\n                };\n            }\n            return p;\n        },\n        dataset: function(d) {\n            return {\n                id: d.id,\n                hda_ldda: d.get('hda_ldda')\n            };\n        }\n    }\n});\n\nvar BackboneTrackCollection = Backbone.Collection.extend({\n    model: BackboneTrack\n});\n\n/**\n * A visualization.\n */\nvar Visualization = Backbone.Model.extend({\n    defaults: {\n        title: '',\n        type: ''\n    },\n\n    urlRoot: Galaxy.root + \"api/visualizations\",\n\n    /**\n     * POSTs visualization's JSON to its URL using the parameter 'vis_json'\n     * Note: This is necessary because (a) Galaxy requires keyword args and\n     * (b) Galaxy does not handle PUT now.\n     */\n    save: function() {\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                vis_json: JSON.stringify(this)\n            }\n        });\n    }\n});\n\n/**\n * A visualization of genome data.\n */\nvar GenomeVisualization = Visualization.extend(CustomToJSON).extend({\n    defaults: _.extend({}, Visualization.prototype.defaults, {\n        dbkey: '',\n        drawables: null,\n        bookmarks: null,\n        viewport: null\n    }),\n\n    initialize: function(options) {\n        // Replace drawables with tracks.\n        this.set('drawables', new BackboneTrackCollection(options.tracks));\n\n        var models = [];\n        this.set('config', config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n        // Clear track and data definitions to avoid storing large objects.\n        this.unset('tracks');\n        this.get('drawables').each(function(d) {\n            d.unset('preloaded_data');\n        });\n    },\n\n    /**\n     * Add a track or array of tracks to the visualization.\n     */\n    add_tracks: function(tracks) {\n        this.get('drawables').add(tracks);\n    }\n},\n{\n    // This definition matches that produced by to_dict() methods in tracks.js\n    to_json_keys: [\n        'view',\n        'viewport',\n        'bookmarks'\n    ],\n\n    to_json_mappers: {\n        'view': function(dummy, self) {\n            return {\n                obj_type: 'View',\n                prefs: {\n                    name: self.get('title'),\n                    content_visible: true\n                },\n                drawables: self.get('drawables')\n            };\n        }\n    }\n}\n);\n\n/**\n * -- Routers --\n */\n\n/**\n * Router for track browser.\n */\nvar TrackBrowserRouter = Backbone.Router.extend({\n    initialize: function(options) {\n        this.view = options.view;\n\n        // Can't put regular expression in routes dictionary.\n        // NOTE: parentheses are used to denote parameters returned to callback.\n        this.route(/([\\w]+)$/, 'change_location');\n        this.route(/([\\w\\+]+\\:[\\d,]+-[\\d,]+)$/, 'change_location');\n\n        // Handle navigate events from view.\n        var self = this;\n        self.view.on(\"navigate\", function(new_loc) {\n            self.navigate(new_loc);\n        });\n    },\n\n    change_location: function(new_loc) {\n        this.view.go_to(new_loc);\n    }\n});\n\nreturn {\n    BackboneTrack: BackboneTrack,\n    BrowserBookmark: BrowserBookmark,\n    BrowserBookmarkCollection: BrowserBookmarkCollection,\n    Cache: Cache,\n    CanvasManager: CanvasManager,\n    Genome: Genome,\n    GenomeDataManager: GenomeDataManager,\n    GenomeRegion: GenomeRegion,\n    GenomeRegionCollection: GenomeRegionCollection,\n    GenomeVisualization: GenomeVisualization,\n    GenomeReferenceDataManager: GenomeReferenceDataManager,\n    TrackBrowserRouter: TrackBrowserRouter,\n    Visualization: Visualization,\n    select_datasets: select_datasets\n};\n\n});"]}