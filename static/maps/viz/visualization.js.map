{"version":3,"sources":["viz/visualization.js"],"names":["define","_","data_mod","util_mod","config_mod","CustomToJSON","toJSON","self","this","json","each","to_json_keys","k","get","constructor","val","to_json_mappers","select_datasets","dataset_url","add_track_async_url","filters","success_fn","$","ajax","url","alert","data","table_html","error","modal","show","body","success","title","hide","Add","Galaxy","requests","hda_ldda","data_type","attr","length","id","when","apply","then","track_defs","arguments","Array","map","arg","CanvasManager","default_font","undefined","dummy_canvas","dummy_context","getContext","new_canvas","char_width_px","font","width","patterns","load_pattern","extend","prototype","key","path","image","src","onload","createPattern","get_pattern","canvas","manager","Cache","Backbone","Model","defaults","num_elements","obj_cache","initialize","options","clear","get_elt","attributes","key_ary","key_str","index","stale","move_key_to_end","set_elt","value","toString","shift","push","splice","size","most_recently_added","GenomeDataManager","dataset","genome","init_data","min_region_size","filters_manager","entry","mode","data_mode_compatible","call","initial_entries","add_data","entries","set","set_data","region","data_is_ready","ready_deferred","Deferred","ss_deferred","ajax_settings","query_type","go","response","interval","resolve","search_features","query","params","load_data","resolution","extra_params","chrom","low","high","filter_names","i","name","stringify","result","filter_cols","get_data","is_deferred","entry_region","is_subregion","contains","last_request","copy","BROAD_DATA_REQ","req_type","cur_data","_mark_stale","console","log","query_low","DEEP_DATA_REQ","start_val","query_region","data_manager","new_data_request","new_data_available","max_low","message","can_get_more_detailed_data","get_more_detailed_data","detail_multiplier","dataset_type","get_genome_wide_data","all_data_available","gw_data","chrom_info","chrom_data","GenomeRegion","start","end","len","deferred","getJSON","genome_wide_data","subset_entry","subregion","subset_fns","bigwig","filter","data_point","refseq","seq_start","subregion_data","same","dataset_placeholder","urlRoot","data_url","Genome","chroms_info","dbkey","get_chroms_info","get_chrom_region","chr_name","find","get_chrom_len","from_str","start_end","pieces","str_val","on","compute_overlap","a_region","first_chrom","second_chrom","second_start","first_end","second_end","DIF_CHROMS","first_start","overlap_results","BEFORE","OVERLAP_START","CONTAINS","overlap","AFTER","OVERLAP_END","CONTAINED_BY","trim","chrom_len","overlaps","intersection","GenomeRegionCollection","Collection","model","note","BrowserBookmarkCollection","BrowserBookmark","BackboneTrack","models","default_value","preloaded_data","label","type","ConfigSettingCollection","from_models_and_saved_values","prefs","p","BackboneTrackCollection","color","d","dataType","vis_json","root","drawables","bookmarks","viewport","JSON","GenomeVisualization","Visualization","add_tracks","tracks","unset","obj_type","add","view","route","TrackBrowserRouter","new_loc","change_location","go_to","GenomeReferenceDataManager"],"mappings":"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","file":"../../scripts/viz/visualization.js","sourcesContent":["define( [\"libs/underscore\", \"mvc/dataset/data\", \"viz/trackster/util\", \"utils/config\"], function(_, data_mod, util_mod, config_mod) {\n\n/**\n * Mixin for returning custom JSON representation from toJSON. Class attribute to_json_keys defines a set of attributes\n * to include in the representation; to_json_mappers defines mappers for returned objects.\n */\nvar CustomToJSON = {\n    /**\n     * Returns JSON representation of object using to_json_keys and to_json_mappers.\n     */\n    toJSON: function() {\n        var self = this,\n            json = {};\n        _.each(self.constructor.to_json_keys, function(k) {\n            var val = self.get(k);\n            if (k in self.constructor.to_json_mappers) {\n                val = self.constructor.to_json_mappers[k](val, self);\n            }\n            json[k] = val;\n        });\n        return json;\n    }\n};\n\n/**\n * Model, view, and controller objects for Galaxy visualization framework.\n *\n * Models have no references to views, instead using events to indicate state\n * changes; this is advantageous because multiple views can use the same object\n * and models can be used without views.\n */\n\n/**\n * Use a popup grid to select datasets from histories or libraries. After datasets are selected,\n * track definitions are obtained from the server and the success_fn is called with the list of\n * definitions for selected datasets.\n */\nvar select_datasets = function(dataset_url, add_track_async_url, filters, success_fn) {\n    $.ajax({\n        url: dataset_url,\n        data: filters,\n        error: function() { alert( \"Grid failed\" ); },\n        success: function(table_html) {\n            Galaxy.modal.show({\n                title   : \"Select datasets for new tracks\",\n                body    : table_html,\n                buttons :\n                {\n                    \"Cancel\": function() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Add\": function() {\n                       var requests = [];\n                        $('input[name=id]:checked,input[name=ldda_ids]:checked').each(function() {\n                            var data = {\n                                    data_type: 'track_config',\n                                   'hda_ldda': 'hda'\n                                },\n                                id = $(this).val();\n                               if ($(this).attr(\"name\") !== \"id\") {\n                                    data.hda_ldda = 'ldda';\n                                }\n                                requests[requests.length] = $.ajax({\n                                   url: add_track_async_url + \"/\" + id,\n                                    data: data,\n                                    dataType: \"json\"\n                                });\n                        });\n                        // To preserve order, wait until there are definitions for all tracks and then add\n                        // them sequentially.\n                        $.when.apply($, requests).then(function() {\n                            // jQuery always returns an Array for arguments, so need to look at first element\n                            // to determine whether multiple requests were made and consequently how to\n                            // map arguments to track definitions.\n                            var track_defs = (arguments[0] instanceof Array ?\n                                               $.map(arguments, function(arg) { return arg[0]; }) :\n                                               [ arguments[0] ]\n                                               );\n                            success_fn(track_defs);\n                        });\n                        Galaxy.modal.hide();\n                    }\n               }\n            });\n        }\n    });\n};\n\n// --------- Models ---------\n\n/**\n * Canvas manager is used to create canvases for browsers as well as providing a pattern cache\n */\nvar CanvasManager = function(default_font) {\n    this.default_font = default_font !== undefined ? default_font : \"9px Monaco, Lucida Console, monospace\";\n\n    this.dummy_canvas = this.new_canvas();\n    this.dummy_context = this.dummy_canvas.getContext('2d');\n    this.dummy_context.font = this.default_font;\n\n    this.char_width_px = this.dummy_context.measureText(\"A\").width;\n\n    this.patterns = {};\n\n    // FIXME: move somewhere to make this more general\n    this.load_pattern( 'right_strand', \"/visualization/strand_right.png\" );\n    this.load_pattern( 'left_strand', \"/visualization/strand_left.png\" );\n    this.load_pattern( 'right_strand_inv', \"/visualization/strand_right_inv.png\" );\n    this.load_pattern( 'left_strand_inv', \"/visualization/strand_left_inv.png\" );\n};\n\n_.extend( CanvasManager.prototype, {\n    load_pattern: function( key, path ) {\n        var patterns = this.patterns,\n            dummy_context = this.dummy_context,\n            image = new Image();\n        image.src = Galaxy.root + \"static/images\" + path;\n        image.onload = function() {\n            patterns[key] = dummy_context.createPattern( image, \"repeat\" );\n        };\n    },\n    get_pattern: function( key ) {\n        return this.patterns[key];\n    },\n    new_canvas: function() {\n        var canvas = $(\"<canvas/>\")[0];\n        // Keep a reference back to the manager\n        canvas.manager = this;\n        return canvas;\n    }\n});\n\n/**\n * Generic cache that handles key/value pairs. Keys can be any object that can be\n * converted to a String and compared.\n */\nvar Cache = Backbone.Model.extend({\n    defaults: {\n        num_elements: 20,\n        // Objects in cache; indexes into cache are strings of keys.\n        obj_cache: null,\n        // key_ary contains keys for objects in cache.\n        key_ary: null\n    },\n\n    initialize: function(options) {\n        this.clear();\n    },\n\n    /**\n     * Get an element from the cache using its key.\n     */\n    get_elt: function(key) {\n        var obj_cache = this.attributes.obj_cache,\n            key_ary = this.attributes.key_ary,\n            key_str = key.toString(),\n            index = _.indexOf(key_ary, function(k) {\n                return k.toString() === key_str;\n            });\n\n        // Update cache.\n        if (index !== -1) {\n            // Object is in cache, so update it.\n            if (obj_cache[key_str].stale) {\n                // Object is stale: remove key and object.\n                key_ary.splice(index, 1);\n                delete obj_cache[key_str];\n            }\n            else {\n                // Move key to back because it is most recently used.\n                this.move_key_to_end(key, index);\n            }\n        }\n\n        return obj_cache[key_str];\n    },\n\n    /**\n     * Put an element into the cache.\n     */\n    set_elt: function(key, value) {\n        var obj_cache = this.attributes.obj_cache,\n            key_ary = this.attributes.key_ary,\n            key_str = key.toString(),\n            num_elements = this.attributes.num_elements;\n\n        // Update keys, objects.\n        if (!obj_cache[key_str]) {\n            // Add object to cache.\n\n            if (key_ary.length >= num_elements) {\n                // Cache full, so remove first element.\n                var deleted_key = key_ary.shift();\n                delete obj_cache[deleted_key.toString()];\n            }\n\n            // Add key.\n            key_ary.push(key);\n        }\n\n        // Add object.\n        obj_cache[key_str] = value;\n        return value;\n    },\n\n    /**\n     * Move key to end of cache. Keys are removed from the front, so moving a key to the end\n     * delays the key's removal.\n     */\n    move_key_to_end: function(key, index) {\n        this.attributes.key_ary.splice(index, 1);\n        this.attributes.key_ary.push(key);\n    },\n\n    /**\n     * Clear all elements from the cache.\n     */\n    clear: function() {\n        this.attributes.obj_cache = {};\n        this.attributes.key_ary = [];\n    },\n\n    /** Returns the number of elements in the cache. */\n    size: function() {\n        return this.attributes.key_ary.length;\n    },\n\n    /** Returns key most recently added to cache. */\n    most_recently_added: function() {\n        return this.size() === 0 ? null :\n               // Most recent key is at the end of key array.\n               this.attributes.key_ary[this.attributes.key_ary.length - 1];\n    }\n});\n\n/**\n * Data manager for genomic data. Data is connected to and queryable by genomic regions.\n */\nvar GenomeDataManager = Cache.extend({\n    defaults: _.extend({}, Cache.prototype.defaults, {\n        dataset: null,\n        genome: null,\n        init_data: null,\n        min_region_size: 200,\n        filters_manager: null,\n        data_type: \"data\",\n        data_mode_compatible: function(entry, mode) { return true; },\n        can_subset: function(entry) { return false; }\n    }),\n\n    /**\n     * Initialization.\n     */\n    initialize: function(options) {\n        Cache.prototype.initialize.call(this);\n\n        // Set initial entries in data manager.\n        var initial_entries = this.get('init_data');\n        if (initial_entries) {\n            this.add_data(initial_entries);\n        }\n    },\n\n    /**\n     * Add data entries to manager; each entry should be a dict with attributes region (key), data, and data_type.\n     * If necessary, manager size is increased to hold all data.\n     */\n    add_data: function(entries) {\n        // Increase size to accomodate all entries.\n        if (this.get('num_elements') < entries.length) {\n            this.set('num_elements', entries.length);\n        }\n\n        // Put data into manager.\n        var self = this;\n        _.each(entries, function(entry) {\n            self.set_data(entry.region, entry);\n        });\n    },\n\n    /**\n     * Returns deferred that resolves to true when dataset is ready (or false if dataset\n     * cannot be used).\n     */\n    data_is_ready: function() {\n        var dataset = this.get('dataset'),\n            ready_deferred = $.Deferred(),\n            // If requesting raw data, query dataset state; if requesting (converted) data,\n            // need to query converted datasets state.\n            query_type = (this.get('data_type') === 'raw_data' ? 'state' :\n                          this.get('data_type') === 'data' ? 'converted_datasets_state' : \"error\" ),\n            ss_deferred = new util_mod.ServerStateDeferred({\n                ajax_settings: {\n                    url: this.get('dataset').url(),\n                    data: {\n                        hda_ldda: dataset.get('hda_ldda'),\n                        data_type: query_type\n                    },\n                    dataType: \"json\"\n                },\n                interval: 5000,\n                success_fn: function(response) { return response !== \"pending\"; }\n            });\n\n        $.when(ss_deferred.go()).then(function(response) {\n            ready_deferred.resolve(response === \"ok\" || response === \"data\" );\n        });\n        return ready_deferred;\n    },\n\n    /**\n     * Perform a feature search from server; returns Deferred object that resolves when data is available.\n     */\n    search_features: function(query) {\n        var dataset = this.get('dataset'),\n            params = {\n                query: query,\n                hda_ldda: dataset.get('hda_ldda'),\n                data_type: 'features'\n            };\n        return $.getJSON(dataset.url(), params);\n    },\n\n    /**\n     * Load data from server and manages data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function(region, mode, resolution, extra_params) {\n        // Setup data request params.\n        var dataset = this.get('dataset'),\n            params = {\n                        \"data_type\": this.get('data_type'),\n                        \"chrom\": region.get('chrom'),\n                        \"low\": region.get('start'),\n                        \"high\": region.get('end'),\n                        \"mode\": mode,\n                        \"resolution\": resolution,\n                        \"hda_ldda\": dataset.get('hda_ldda')\n                     };\n\n        $.extend(params, extra_params);\n\n        // Add track filters to params.\n        var filters_manager = this.get('filters_manager');\n        if (filters_manager) {\n            var filter_names = [];\n            var filters = filters_manager.filters;\n            for (var i = 0; i < filters.length; i++) {\n                filter_names.push(filters[i].name);\n            }\n            params.filter_cols = JSON.stringify(filter_names);\n        }\n\n        // Do request.\n        var manager = this,\n            entry = $.getJSON(dataset.url(), params, function (result) {\n                // Add region to the result.\n                result.region = region;\n                manager.set_data(region, result);\n            });\n\n        this.set_data(region, entry);\n        return entry;\n    },\n\n    /**\n     * Get data from dataset.\n     */\n    get_data: function(region, mode, resolution, extra_params) {\n        // Look for entry and return if it's a deferred or if data available is compatible with mode.\n        var entry = this.get_elt(region);\n        if ( entry &&\n             ( util_mod.is_deferred(entry) || this.get('data_mode_compatible')(entry, mode) ) ) {\n            return entry;\n        }\n\n        //\n        // Look in cache for data that can be used.\n        // TODO: this logic could be improved if the visualization knew whether\n        // the data was \"index\" or \"data.\"\n        //\n        var key_ary = this.get('key_ary'),\n            obj_cache = this.get('obj_cache'),\n            entry_region, is_subregion;\n        for (var i = 0; i < key_ary.length; i++) {\n            entry_region = key_ary[i];\n\n            if (entry_region.contains(region)) {\n                is_subregion = true;\n\n                // This entry has data in the requested range. Return if data\n                // is compatible and can be subsetted.\n                entry = obj_cache[entry_region.toString()];\n                if ( util_mod.is_deferred(entry) ||\n                    ( this.get('data_mode_compatible')(entry, mode) && this.get('can_subset')(entry) ) ) {\n                    this.move_key_to_end(entry_region, i);\n\n                    // If there's data, subset it.\n                    if ( !util_mod.is_deferred(entry) ) {\n                        var subset_entry = this.subset_entry(entry, region);\n                        this.set_data(region, subset_entry);\n                        entry = subset_entry;\n                    }\n\n                    return entry;\n                }\n            }\n        }\n\n        // FIXME: There _may_ be instances where region is a subregion of another entry but cannot be\n        // subsetted. For these cases, do not increase length because region will never be found (and\n        // an infinite loop will occur.)\n        // If needed, extend region to make it minimum size.\n        if (!is_subregion && region.length() < this.attributes.min_region_size) {\n            // IDEA: alternative heuristic is to find adjacent cache entry to region and use that to extend.\n            // This would prevent bad extensions when zooming in/out while still preserving the behavior\n            // below.\n\n            // Use copy of region to avoid changing actual region.\n            region = region.copy();\n\n            // Use heuristic to extend region: extend relative to last data request.\n            var last_request = this.most_recently_added();\n            if (!last_request || (region.get('start') > last_request.get('start'))) {\n                // This request is after the last request, so extend right.\n                region.set('end', region.get('start') + this.attributes.min_region_size);\n            }\n            else {\n                // This request is after the last request, so extend left.\n                region.set('start', region.get('end') - this.attributes.min_region_size);\n            }\n\n            // Trim region to avoid invalid coordinates.\n            region.set('genome', this.attributes.genome);\n            region.trim();\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Alias for set_elt for readbility.\n     */\n    set_data: function(region, entry) {\n        this.set_elt(region, entry);\n    },\n\n    /** \"Deep\" data request; used as a parameter for DataManager.get_more_data() */\n    DEEP_DATA_REQ: \"deep\",\n\n    /** \"Broad\" data request; used as a parameter for DataManager.get_more_data() */\n    BROAD_DATA_REQ: \"breadth\",\n\n    /**\n     * Gets more data for a region using either a depth-first or a breadth-first approach.\n     */\n    get_more_data: function(region, mode, resolution, extra_params, req_type) {\n        var cur_data = this._mark_stale(region);\n        if (!(cur_data && this.get('data_mode_compatible')(cur_data, mode))) {\n            console.log('ERROR: problem with getting more data: current data is not compatible');\n            return;\n        }\n\n        //\n        // Set parameters based on request type.\n        //\n        var query_low = region.get('start');\n        if (req_type === this.DEEP_DATA_REQ) {\n            // Use same interval but set start_val to skip data that's already in cur_data.\n            $.extend(extra_params, {start_val: cur_data.data.length + 1});\n        }\n        else if (req_type === this.BROAD_DATA_REQ) {\n            // To get past an area of extreme feature depth, set query low to be after either\n            // (a) the maximum high or HACK/FIXME (b) the end of the last feature returned.\n            query_low = (cur_data.max_high ? cur_data.max_high : cur_data.data[cur_data.data.length - 1][2]) + 1;\n        }\n        var query_region = region.copy().set('start', query_low);\n\n        //\n        // Get additional data, append to current data, and set new data. Use a custom deferred object\n        // to signal when new data is available.\n        //\n        var data_manager = this,\n            new_data_request = this.load_data(query_region, mode, resolution, extra_params),\n            new_data_available = $.Deferred();\n        // load_data sets cache to new_data_request, but use custom deferred object so that signal and data\n        // is all data, not just new data.\n        this.set_data(region, new_data_available);\n        $.when(new_data_request).then(function(result) {\n            // Update data and message.\n            if (result.data) {\n                result.data = cur_data.data.concat(result.data);\n                if (result.max_low) {\n                    result.max_low = cur_data.max_low;\n                }\n                if (result.message) {\n                    // HACK: replace number in message with current data length. Works but is ugly.\n                    result.message = result.message.replace(/[0-9]+/, result.data.length);\n                }\n            }\n            data_manager.set_data(region, result);\n            new_data_available.resolve(result);\n        });\n        return new_data_available;\n    },\n\n    /**\n     * Returns true if more detailed data can be obtained for entry.\n     */\n    can_get_more_detailed_data: function(region) {\n        var cur_data = this.get_elt(region);\n\n        // Can only get more detailed data for bigwig data that has less than 8000 data points.\n        // Summary tree returns *way* too much data, and 8000 data points ~ 500KB.\n        return (cur_data.dataset_type === 'bigwig' && cur_data.data.length < 8000);\n    },\n\n    /**\n     * Returns more detailed data for an entry.\n     */\n    get_more_detailed_data: function(region, mode, resolution, detail_multiplier, extra_params) {\n        // Mark current entry as stale.\n        var cur_data = this._mark_stale(region);\n        if (!cur_data) {\n            console.log(\"ERROR getting more detailed data: no current data\");\n            return;\n        }\n\n        if (!extra_params) { extra_params = {}; }\n\n        // Use additional parameters to get more detailed data.\n        if (cur_data.dataset_type === 'bigwig') {\n            // FIXME: constant should go somewhere.\n            extra_params.num_samples = 1000 * detail_multiplier;\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Marks cache data as stale.\n     */\n    _mark_stale: function(region) {\n        var entry = this.get_elt(region);\n        if (!entry) {\n            console.log(\"ERROR: no data to mark as stale: \", this.get('dataset'), region.toString());\n        }\n        entry.stale = true;\n        return entry;\n    },\n\n    /**\n     * Returns an array of data with each entry representing one chromosome/contig\n     * of data or, if data is not available, returns a Deferred that resolves to the\n     * data when it becomes available.\n     */\n    get_genome_wide_data: function(genome) {\n        // -- Get all data. --\n\n        var self = this,\n            all_data_available = true,\n\n            //  Map chromosome info into genome data.\n            gw_data = _.map(genome.get('chroms_info').chrom_info, function(chrom_info) {\n                var chrom_data = self.get_elt(\n                    new GenomeRegion({\n                        chrom: chrom_info.chrom,\n                        start: 0,\n                        end: chrom_info.len\n                    })\n                );\n\n                // Set flag if data is not available.\n                if (!chrom_data) { all_data_available = false; }\n\n                return chrom_data;\n            });\n\n        // -- If all data is available, return it. --\n        if (all_data_available) {\n            return gw_data;\n        }\n\n        // -- All data is not available, so load from server. --\n\n        var deferred = $.Deferred();\n        $.getJSON(this.get('dataset').url(), { data_type: 'genome_data' }, function(genome_wide_data) {\n            self.add_data(genome_wide_data.data);\n            deferred.resolve(genome_wide_data.data);\n        });\n\n        return deferred;\n    },\n\n    /**\n     * Returns entry with only data in the subregion.\n     */\n    subset_entry: function(entry, subregion) {\n        // Dictionary from entry type to function for subsetting data.\n        var subset_fns = {\n            bigwig: function(data, subregion) {\n                return _.filter(data, function(data_point) {\n                    return data_point[0] >= subregion.get('start') &&\n                           data_point[0] <= subregion.get('end');\n                });\n            },\n            refseq: function(data, subregion) {\n                var seq_start = subregion.get('start') - entry.region.get('start');\n                return entry.data.slice(seq_start, seq_start + subregion.length());\n            }\n        };\n\n        // Subset entry if there is a function for subsetting and regions are not the same.\n        var subregion_data = entry.data;\n        if (!entry.region.same(subregion) && entry.dataset_type in subset_fns) {\n            subregion_data = subset_fns[entry.dataset_type](entry.data, subregion);\n        }\n\n        // Return entry with subregion's data.\n        return {\n            region: subregion,\n            data: subregion_data,\n            dataset_type: entry.dataset_type\n        };\n    }\n});\n\nvar GenomeReferenceDataManager = GenomeDataManager.extend({\n    initialize: function(options) {\n        // Use generic object in place of dataset and set urlRoot to fetch data.\n        var dataset_placeholder = new Backbone.Model();\n        dataset_placeholder.urlRoot = options.data_url;\n        this.set('dataset', dataset_placeholder);\n    },\n\n    load_data: function(region, mode, resolution, extra_params) {\n        // Fetch data if region is not too large.\n        return ( region.length() <= 100000 ?\n                 GenomeDataManager.prototype.load_data.call(this, region, mode, resolution, extra_params) :\n                 { data: null, region: region } );\n    }\n});\n\n/**\n * A genome build.\n */\nvar Genome = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        key: null,\n        chroms_info: null\n    },\n\n    initialize: function(options) {\n        this.id = options.dbkey;\n    },\n\n    /**\n     * Shorthand for getting to chromosome information.\n     */\n    get_chroms_info: function() {\n        return this.attributes.chroms_info.chrom_info;\n    },\n\n    /**\n     * Returns a GenomeRegion object denoting a complete chromosome.\n     */\n    get_chrom_region: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        var chrom_info = _.find(this.get_chroms_info(), function(chrom_info) {\n            return chrom_info.chrom === chr_name;\n        });\n        return new GenomeRegion({\n            chrom: chrom_info.chrom,\n            end: chrom_info.len\n        });\n    },\n\n    /** Returns the length of a chromosome. */\n    get_chrom_len: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        return _.find(this.get_chroms_info(), function(chrom_info) {\n            return chrom_info.chrom === chr_name;\n        }).len;\n    }\n});\n\n/**\n * A genomic region.\n */\nvar GenomeRegion = Backbone.Model.extend({\n    defaults: {\n        chrom: null,\n        start: 0,\n        end: 0,\n        str_val: null,\n        genome: null\n    },\n\n    /**\n     * Returns true if this region is the same as a given region.\n     * It does not test the genome right now.\n     */\n    same: function(region) {\n        return this.attributes.chrom === region.get('chrom') &&\n               this.attributes.start === region.get('start') &&\n               this.attributes.end === region.get('end');\n    },\n\n    /**\n     * If from_str specified, use it to initialize attributes.\n     */\n    initialize: function(options) {\n        if (options.from_str) {\n            var pieces = options.from_str.split(':'),\n                chrom = pieces[0],\n                start_end = pieces[1].split('-');\n            this.set({\n                chrom: chrom,\n                start: parseInt(start_end[0], 10),\n                end: parseInt(start_end[1], 10)\n            });\n        }\n\n        // Keep a copy of region's string value for fast lookup.\n        this.attributes.str_val = this.get('chrom') + \":\" + this.get('start') + \"-\" + this.get('end');\n\n        // Set str_val on attribute change.\n        this.on('change', function() {\n            this.attributes.str_val = this.get('chrom') + \":\" + this.get('start') + \"-\" + this.get('end');\n        }, this);\n    },\n\n    copy: function() {\n        return new GenomeRegion({\n            chrom: this.get('chrom'),\n            start: this.get('start'),\n            end: this.get('end')\n        });\n    },\n\n    length: function() {\n        return this.get('end') - this.get('start');\n    },\n\n    /** Returns region in canonical form chrom:start-end */\n    toString: function() {\n        return this.attributes.str_val;\n    },\n\n    toJSON: function() {\n        return {\n            chrom: this.get('chrom'),\n            start: this.get('start'),\n            end: this.get('end')\n        };\n    },\n\n    /**\n     * Compute the type of overlap between this region and another region. The overlap is computed relative to the given/second region;\n     * hence, OVERLAP_START indicates that the first region overlaps the start (but not the end) of the second region.\n     */\n    compute_overlap: function(a_region) {\n        var first_chrom = this.get('chrom'), second_chrom = a_region.get('chrom'),\n            first_start = this.get('start'), second_start = a_region.get('start'),\n            first_end = this.get('end'), second_end = a_region.get('end'),\n            overlap;\n\n        // Compare chroms.\n        if (first_chrom && second_chrom && first_chrom !== second_chrom) {\n            return GenomeRegion.overlap_results.DIF_CHROMS;\n        }\n\n        // Compare regions.\n        if (first_start < second_start) {\n            if (first_end < second_start) {\n                overlap = GenomeRegion.overlap_results.BEFORE;\n            }\n            else if (first_end < second_end) {\n                overlap = GenomeRegion.overlap_results.OVERLAP_START;\n            }\n            else { // first_end >= second_end\n                overlap = GenomeRegion.overlap_results.CONTAINS;\n            }\n        }\n        else if (first_start > second_start) {\n            if (first_start > second_end) {\n                overlap = GenomeRegion.overlap_results.AFTER;\n            }\n            else if (first_end <= second_end) {\n                overlap = GenomeRegion.overlap_results.CONTAINED_BY;\n            }\n            else {\n                overlap = GenomeRegion.overlap_results.OVERLAP_END;\n            }\n        }\n        else { // first_start === second_start\n            overlap = (first_end >= second_end ?\n                       GenomeRegion.overlap_results.CONTAINS :\n                       GenomeRegion.overlap_results.CONTAINED_BY);\n        }\n\n        return overlap;\n    },\n\n    /**\n     * Trim a region to match genome's constraints.\n     */\n    trim: function(genome) {\n        // Assume that all chromosome/contigs start at 0.\n        if (this.attributes.start < 0) {\n            this.attributes.start = 0;\n        }\n\n        // Only try to trim the end if genome is set.\n        if (this.attributes.genome) {\n            var chrom_len = this.attributes.genome.get_chrom_len(this.attributes.chrom);\n            if (this.attributes.end > chrom_len) {\n                this.attributes.end = chrom_len - 1;\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Returns true if this region contains a given region.\n     */\n    contains: function(a_region) {\n        return this.compute_overlap(a_region) === GenomeRegion.overlap_results.CONTAINS;\n    },\n\n    /**\n     * Returns true if regions overlap.\n     */\n    overlaps: function(a_region) {\n        return _.intersection( [this.compute_overlap(a_region)],\n                               [GenomeRegion.overlap_results.DIF_CHROMS, GenomeRegion.overlap_results.BEFORE, GenomeRegion.overlap_results.AFTER] ).length === 0;\n    }\n},\n{\n    overlap_results: {\n        DIF_CHROMS: 1000,\n        BEFORE: 1001,\n        CONTAINS: 1002,\n        OVERLAP_START: 1003,\n        OVERLAP_END: 1004,\n        CONTAINED_BY: 1005,\n        AFTER: 1006\n    }\n});\n\nvar GenomeRegionCollection = Backbone.Collection.extend({\n    model: GenomeRegion\n});\n\n/**\n * A genome browser bookmark.\n */\nvar BrowserBookmark = Backbone.Model.extend({\n    defaults: {\n        region: null,\n        note: ''\n    },\n\n    initialize: function(options) {\n        this.set('region', new GenomeRegion(options.region));\n    }\n});\n\n/**\n * Bookmarks collection.\n */\nvar BrowserBookmarkCollection = Backbone.Collection.extend({\n    model: BrowserBookmark\n});\n\n/**\n * A track of data in a genome visualization.\n */\n// TODO: rename to Track and merge with Trackster's Track object.\nvar BackboneTrack = Backbone.Model.extend(CustomToJSON).extend({\n    defaults: {\n        mode: 'Auto'\n    },\n\n    initialize: function(options) {\n        this.set('dataset', new data_mod.Dataset(options.dataset));\n\n        // -- Set up config settings. --\n        var models =  [\n            { key: 'name', default_value: this.get('dataset').get('name') },\n            { key: 'color' },\n            { key: 'min_value', label: 'Min Value', type: 'float', default_value: 0 },\n            { key: 'max_value', label: 'Max Value', type: 'float', default_value: 1 }\n        ];\n\n        this.set('config', config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n        // -- Set up data manager. --\n        var preloaded_data = this.get('preloaded_data');\n        if (preloaded_data) {\n            preloaded_data = preloaded_data.data;\n        }\n        else {\n            preloaded_data = [];\n        }\n        this.set('data_manager', new GenomeDataManager({\n            dataset: this.get('dataset'),\n            init_data: preloaded_data\n        }));\n    }\n},\n{\n    // This definition matches that produced by to_dict() methods in tracks.js\n    to_json_keys: [\n        'track_type',\n        'dataset',\n        'prefs',\n        'mode',\n        'filters',\n        'tool_state'\n    ],\n    to_json_mappers: {\n        prefs: function(p, self) {\n            if (_.size(p) === 0) {\n                p = {\n                    name: self.get('config').get('name').get('value'),\n                    color: self.get('config').get('color').get('value')\n                };\n            }\n            return p;\n        },\n        dataset: function(d) {\n            return {\n                id: d.id,\n                hda_ldda: d.get('hda_ldda')\n            };\n        }\n    }\n});\n\nvar BackboneTrackCollection = Backbone.Collection.extend({\n    model: BackboneTrack\n});\n\n/**\n * A visualization.\n */\nvar Visualization = Backbone.Model.extend({\n    defaults: {\n        title: '',\n        type: ''\n    },\n\n    urlRoot: Galaxy.root + \"api/visualizations\",\n\n    /**\n     * POSTs visualization's JSON to its URL using the parameter 'vis_json'\n     * Note: This is necessary because (a) Galaxy requires keyword args and\n     * (b) Galaxy does not handle PUT now.\n     */\n    save: function() {\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                vis_json: JSON.stringify(this)\n            }\n        });\n    }\n});\n\n/**\n * A visualization of genome data.\n */\nvar GenomeVisualization = Visualization.extend(CustomToJSON).extend({\n    defaults: _.extend({}, Visualization.prototype.defaults, {\n        dbkey: '',\n        drawables: null,\n        bookmarks: null,\n        viewport: null\n    }),\n\n    initialize: function(options) {\n        // Replace drawables with tracks.\n        this.set('drawables', new BackboneTrackCollection(options.tracks));\n\n        var models = [];\n        this.set('config', config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n        // Clear track and data definitions to avoid storing large objects.\n        this.unset('tracks');\n        this.get('drawables').each(function(d) {\n            d.unset('preloaded_data');\n        });\n    },\n\n    /**\n     * Add a track or array of tracks to the visualization.\n     */\n    add_tracks: function(tracks) {\n        this.get('drawables').add(tracks);\n    }\n},\n{\n    // This definition matches that produced by to_dict() methods in tracks.js\n    to_json_keys: [\n        'view',\n        'viewport',\n        'bookmarks'\n    ],\n\n    to_json_mappers: {\n        'view': function(dummy, self) {\n            return {\n                obj_type: 'View',\n                prefs: {\n                    name: self.get('title'),\n                    content_visible: true\n                },\n                drawables: self.get('drawables')\n            };\n        }\n    }\n}\n);\n\n/**\n * -- Routers --\n */\n\n/**\n * Router for track browser.\n */\nvar TrackBrowserRouter = Backbone.Router.extend({\n    initialize: function(options) {\n        this.view = options.view;\n\n        // Can't put regular expression in routes dictionary.\n        // NOTE: parentheses are used to denote parameters returned to callback.\n        this.route(/([\\w]+)$/, 'change_location');\n        this.route(/([\\w\\+]+\\:[\\d,]+-[\\d,]+)$/, 'change_location');\n\n        // Handle navigate events from view.\n        var self = this;\n        self.view.on(\"navigate\", function(new_loc) {\n            self.navigate(new_loc);\n        });\n    },\n\n    change_location: function(new_loc) {\n        this.view.go_to(new_loc);\n    }\n});\n\nreturn {\n    BackboneTrack: BackboneTrack,\n    BrowserBookmark: BrowserBookmark,\n    BrowserBookmarkCollection: BrowserBookmarkCollection,\n    Cache: Cache,\n    CanvasManager: CanvasManager,\n    Genome: Genome,\n    GenomeDataManager: GenomeDataManager,\n    GenomeRegion: GenomeRegion,\n    GenomeRegionCollection: GenomeRegionCollection,\n    GenomeVisualization: GenomeVisualization,\n    GenomeReferenceDataManager: GenomeReferenceDataManager,\n    TrackBrowserRouter: TrackBrowserRouter,\n    Visualization: Visualization,\n    select_datasets: select_datasets\n};\n\n});"]}