{"version":3,"sources":["viz/bbi-data-manager.js"],"names":["define","visualization","bigwig","BBIDataManager","GenomeDataManager","extend","load_data","region","mode","resolution","extra_params","deferred","$","Deferred","this","set_data","url","Galaxy","root","get","id","self","when","makeBwg","then","bb","err","readWigData","data","result","prev","max","Number","MIN_VALUE","forEach","d","min","push","score","entry","dataset_type","resolve"],"mappings":"AAAAA,QAAS,oBAAqB,mBACtB,SAASC,EAAeC,GA6D5B,OACIC,eAzDiBF,EAAcG,kBAAkBC,QAOjDC,UAAW,SAASC,EAAQC,EAAMC,EAAYC,GAC1C,GAAIC,GAAWC,EAAEC,UACjBC,MAAKC,SAASR,EAAQI,EAEtB,IAAIK,GAAMC,OAAOC,KAAO,YAAcJ,KAAKK,IAAI,WAAWC,GAAK,WAC3DC,EAAOP,IACO,IAAIF,GAAEC,QAuCxB,OAtCID,GAAEU,KAAKpB,EAAOqB,QAAQP,IAAMQ,KAAK,SAASC,EAAIC,GAC1Cd,EAAEU,KAAKG,EAAGE,YAAYpB,EAAOY,IAAI,SAAUZ,EAAOY,IAAI,SAAUZ,EAAOY,IAAI,SAASK,KAAK,SAASI,GAGlG,GAAIC,MACAC,GAASC,IAAKC,OAAOC,UACzBL,GAAKM,QAAQ,SAASC,GAGdL,EAAKC,MAAQI,EAAEC,IAAM,IAErBP,EAAOQ,MAAMP,EAAKC,IAAM,EAAG,IAG3BF,EAAOQ,MAAMF,EAAEC,IAAM,EAAG,KAK5BP,EAAOQ,MAAMF,EAAEC,IAAM,EAAGD,EAAEG,QAG1BT,EAAOQ,MAAMF,EAAEJ,IAAKI,EAAEG,QAEtBR,EAAOK,GAGX,IAAII,IACIX,KAAMC,EACNtB,OAAQA,EACRiC,aAAc,SAGtBnB,GAAKN,SAASR,EAAQgC,GACtB5B,EAAS8B,QAAQF,OAIlB5B","file":"../../scripts/viz/bbi-data-manager.js","sourcesContent":["define( [\"viz/visualization\", \"libs/bbi/bigwig\"],\n        function(visualization, bigwig) {\n\n    /**\n     * Data manager for BBI datasets/files, including BigWig and BigBed.\n     */\n    var BBIDataManager = visualization.GenomeDataManager.extend({\n\n        /**\n         * Load data from server and manage data entries. Adds a Deferred to manager\n         * for region; when data becomes available, replaces Deferred with data.\n         * Returns the Deferred that resolves when data is available.\n         */\n        load_data: function(region, mode, resolution, extra_params) {\n            var deferred = $.Deferred();\n            this.set_data(region, deferred);\n\n            var url = Galaxy.root + 'datasets/' + this.get('dataset').id + '/display',\n                self = this;\n                var promise = new $.Deferred();\n                $.when(bigwig.makeBwg(url)).then(function(bb, err) {\n                    $.when(bb.readWigData(region.get(\"chrom\"), region.get(\"start\"), region.get(\"end\"))).then(function(data) {\n                    // Transform data into \"bigwig\" format for LinePainter. \"bigwig\" format is an array of 2-element arrays\n                    // where each element is [position, score]; unlike real bigwig format, no gaps are allowed.\n                    var result = [],\n                        prev = { max: Number.MIN_VALUE };\n                    data.forEach(function(d) {\n                        // If there is a gap between prev and d, fill it with an interval with score 0.\n                        // This is necessary for LinePainter to draw correctly.\n                        if (prev.max !== d.min - 1) {\n                            // +1 to start after previous region.\n                            result.push([prev.max + 1, 0]);\n                            // -2 = -1 for converting from 1-based to 0-based coordinates,\n                            //      -1 for ending before current region.\n                            result.push([d.min - 2, 0]);\n                        }\n\n                        // Add data point for entry start. -1 to convert from wiggle\n                        // 1-based coordinates to 0-based browser coordinates.\n                        result.push([d.min - 1, d.score]);\n\n                        // Add data point for entry end:\n                        result.push([d.max, d.score]);\n\n                        prev = d;\n                    });\n\n                    var entry = {\n                            data: result,\n                            region: region,\n                            dataset_type: 'bigwig'\n                        };\n\n                    self.set_data(region, entry);\n                    deferred.resolve(entry);\n                });\n            });\n\n            return deferred;\n        },\n    });\n\n    return {\n        BBIDataManager: BBIDataManager\n    };\n\n});\n"]}