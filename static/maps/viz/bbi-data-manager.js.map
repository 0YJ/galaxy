{"version":3,"sources":["viz/bbi-data-manager.js"],"names":["BBIDataManager","_visualization2","default","GenomeDataManager","extend","load_data","region","mode","resolution","extra_params","deferred","$","Deferred","this","set_data","url","Galaxy","root","get","id","self","dataset_type","when","_bigwig2","makeBwg","then","bb","err","readWigData","data","result","Number","MIN_VALUE","d","push","prev","max","forEach","min","entry","resolve"],"mappings":"4MAKIA,EAAiBC,EAAAC,QAAcC,kBAAkBC,QAMjDC,UAAW,SAASC,EAAQC,EAAMC,EAAYC,GAC1C,IAAIC,EAAWC,EAAEC,WACjBC,KAAKC,SAASR,EAAQI,GAEtB,IAAIK,EACIC,OAAOC,KAAO,YAAcJ,KAAKK,IAAI,WAAWC,GAAK,WAdrEC,EAAAP,KAgBsB,IAAIF,EAAEC,SAqCRS,OApCZV,EAAEW,KAAKC,EAAArB,QAAOsB,QAAQT,IAAMU,KAAK,SAASC,EAAIC,GAdlD3B,EAAAA,KACA0B,EAAAE,YAgBgBtB,EAAOY,IAAI,SACXZ,EAAOY,IAAI,SACXZ,EAAOY,IAAI,SAb3Bb,KAAW,SAAAwB,GAkBC,IAAIC,KAdRf,GACWE,IAAPc,OAAcC,WAClBZ,EAAAA,QAFJ,SAAAa,GAMQP,EAAGE,MAAHK,EACI3B,IAAOY,IAMXY,EAAAI,MAAAC,EAAAC,IAAA,EAAA,IAGAP,EAAKQ,MAAQJ,EAAAK,IAAA,EAAY,KAKjBR,EAAAA,MAAAA,EAAOI,IAAMC,EAAAA,EAAKC,QAGlBN,EAAAA,MAAAA,EAAOI,IAAKD,EAACA,QAUjBE,EAAOF,IALPH,IAAAA,GASAD,KAAMC,EAPNxB,OAAAA,EACAwB,aAAOI,UAGVd,EAnBDN,SAAAR,EAAAiC,GA4BA7B,EAAS8B,QAAQD,OAJblB,gBAKPrB,eAxCDA","file":"../../scripts/viz/bbi-data-manager.js","sourcesContent":["import visualization from \"viz/visualization\";\nimport bigwig from \"libs/bbi/bigwig\";\n/**\n     * Data manager for BBI datasets/files, including BigWig and BigBed.\n     */\nvar BBIDataManager = visualization.GenomeDataManager.extend({\n    /**\n         * Load data from server and manage data entries. Adds a Deferred to manager\n         * for region; when data becomes available, replaces Deferred with data.\n         * Returns the Deferred that resolves when data is available.\n         */\n    load_data: function(region, mode, resolution, extra_params) {\n        var deferred = $.Deferred();\n        this.set_data(region, deferred);\n\n        var url =\n                Galaxy.root + \"datasets/\" + this.get(\"dataset\").id + \"/display\",\n            self = this;\n        var promise = new $.Deferred();\n        $.when(bigwig.makeBwg(url)).then(function(bb, err) {\n            $.when(\n                bb.readWigData(\n                    region.get(\"chrom\"),\n                    region.get(\"start\"),\n                    region.get(\"end\")\n                )\n            ).then(function(data) {\n                // Transform data into \"bigwig\" format for LinePainter. \"bigwig\" format is an array of 2-element arrays\n                // where each element is [position, score]; unlike real bigwig format, no gaps are allowed.\n                var result = [],\n                    prev = { max: Number.MIN_VALUE };\n                data.forEach(function(d) {\n                    // If there is a gap between prev and d, fill it with an interval with score 0.\n                    // This is necessary for LinePainter to draw correctly.\n                    if (prev.max !== d.min - 1) {\n                        // +1 to start after previous region.\n                        result.push([prev.max + 1, 0]);\n                        // -2 = -1 for converting from 1-based to 0-based coordinates,\n                        //      -1 for ending before current region.\n                        result.push([d.min - 2, 0]);\n                    }\n\n                    // Add data point for entry start. -1 to convert from wiggle\n                    // 1-based coordinates to 0-based browser coordinates.\n                    result.push([d.min - 1, d.score]);\n\n                    // Add data point for entry end:\n                    result.push([d.max, d.score]);\n\n                    prev = d;\n                });\n\n                var entry = {\n                    data: result,\n                    region: region,\n                    dataset_type: \"bigwig\"\n                };\n\n                self.set_data(region, entry);\n                deferred.resolve(entry);\n            });\n        });\n\n        return deferred;\n    }\n});\n\nexport default {\n    BBIDataManager: BBIDataManager\n};\n"]}