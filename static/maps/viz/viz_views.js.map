{"version":3,"sources":["viz/viz_views.js"],"names":["define","_","TrackHeaderView","Backbone","View","extend","className","initialize","this","model","config","get","on","update_name","render","$el","append","$","addClass","drag_handle_class","text","get_value","action_icons","render_action_icons","dblclick","e","stopPropagation","find","self","icons_div","hide","appendTo","each","action_icons_def","icon_dict","add_action_icon","name","title","css_class","on_click_fn","prepend","set_display_modes","display_modes","attr","tooltip","click","new_modes","init_mode","mode","mode_icon","track","mode_mapping","i","len","length","change_mode","make_popupmenu"],"mappings":"AAAAA,QAAS,mBAAoB,SAASC,GA+FtC,OACIC,gBA3FkBC,SAASC,KAAKC,QAChCC,UAAW,eAEXC,WAAY,WAERC,KAAKC,MAAMC,OAAOC,IAAI,QAAQC,GAAG,eAAgBJ,KAAKK,YAAaL,MACnEA,KAAKM,UAGTA,OAAQ,WACJN,KAAKO,IAAIC,OAAOC,EAAE,UAAUC,SAASV,KAAKC,MAAMU,oBAChDX,KAAKO,IAAIC,OAAOC,EAAE,UAAUC,SAAS,cACTE,KAAKZ,KAAKC,MAAMC,OAAOW,UAAU,UAG7Db,KAAKc,gBACLd,KAAKe,sBAGLf,KAAKO,IAAIS,SAAU,SAASC,GAAKA,EAAEC,oBAGnClB,KAAKO,IAAIC,OAAQC,EAAE,gCAGvBJ,YAAa,WACTL,KAAKO,IAAIY,KAAK,eAAeP,KAAKZ,KAAKC,MAAMC,OAAOW,UAAU,UAGlEE,oBAAqB,WACjB,GAAIK,GAAOpB,IACXA,MAAKqB,UAAYZ,EAAE,UAAUC,SAAS,eAAeY,OAAOC,SAASvB,KAAKO,KAC1Ed,EAAE+B,KAAKxB,KAAKC,MAAMwB,iBAAkB,SAASC,GACzCN,EAAKO,gBAAgBD,EAAUE,KAAMF,EAAUG,MAAOH,EAAUI,UAC3CJ,EAAUK,YAAaL,EAAUM,QAASN,EAAUJ,QAI7EtB,KAAKiC,kBAAkBjC,KAAKC,MAAMiC,gBAMtCP,gBAAiB,SAASC,EAAMC,EAAOC,EAAWC,EAAaC,EAASV,GACpE,GAAIF,GAAOpB,IACXA,MAAKc,aAAac,GAAQnB,EAAE,QAAQ0B,KAAK,QAASN,GACdnB,SAAS,eAAeA,SAASoB,GAAWM,UAC5CC,MAAO,WAAaN,EAAYX,EAAKnB,SACrCsB,SAASvB,KAAKqB,WAC9CC,GACAtB,KAAKc,aAAac,GAAMN,QAOhCW,kBAAmB,SAASK,EAAWC,GACnC,GAAKD,EAAL,CAKAtC,KAAKC,MAAMiC,cAAgBI,EAC3BtC,KAAKC,MAAMuC,KAAQD,GAAavC,KAAKC,MAAMC,OAAOW,UAAU,SAAWb,KAAKC,MAAMiC,cAAc,GAEhGlC,KAAKc,aAAa2B,UAAUN,KAAK,QAAS,0BAA4BnC,KAAKwC,KAAO,IAMlF,KAAK,GAFDE,GAAQ1C,KAAKC,MACb0C,KACKC,EAAI,EAAGC,EAAMH,EAAMR,cAAcY,OAAQF,EAAIC,EAAKD,IAAK,CAC5D,GAAIJ,GAAOE,EAAMR,cAAcU,EAC/BD,GAAaH,GAAQ,SAASA,GAC1B,MAAO,YACHE,EAAMK,YAAYP,KAMxBA,GAGNQ,eAAehD,KAAKc,aAAa2B,UAAWE","file":"../../scripts/viz/viz_views.js","sourcesContent":["define( [\"libs/underscore\"], function(_) {\n\n/**\n * View for track/group header.\n */\nvar TrackHeaderView = Backbone.View.extend({\n    className: 'track-header',\n\n    initialize: function() {\n        // Watch and update name changes.\n        this.model.config.get('name').on('change:value', this.update_name, this);\n        this.render();\n    },\n\n    render: function() {\n        this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n        this.$el.append($(\"<div/>\").addClass(\"track-name\")\n                                   .text(this.model.config.get_value('name')));\n\n        // Icons container.\n        this.action_icons = {};\n        this.render_action_icons();\n\n        // Suppress double clicks in header so that they do not impact viz under header.\n        this.$el.dblclick( function(e) { e.stopPropagation(); } );\n        \n        // Needed for floating elts in header.\n        this.$el.append( $(\"<div style='clear: both'/>\") );\n    },\n\n    update_name: function() {\n        this.$el.find('.track-name').text(this.model.config.get_value('name'));\n    },\n\n    render_action_icons: function() {\n        var self = this;\n        this.icons_div = $(\"<div/>\").addClass('track-icons').hide().appendTo(this.$el);\n        _.each(this.model.action_icons_def, function(icon_dict) {\n            self.add_action_icon(icon_dict.name, icon_dict.title, icon_dict.css_class, \n                                 icon_dict.on_click_fn, icon_dict.prepend, icon_dict.hide);\n        });\n\n        // Set up behavior for modes popup.\n        this.set_display_modes(this.model.display_modes);\n    },\n\n    /**\n     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n     */\n    add_action_icon: function(name, title, css_class, on_click_fn, prepend, hide) {\n        var self = this;\n        this.action_icons[name] = $(\"<a/>\").attr(\"title\", title)\n                                           .addClass(\"icon-button\").addClass(css_class).tooltip()\n                                           .click( function() { on_click_fn(self.model); } )\n                                           .appendTo(this.icons_div);\n        if (hide) {\n            this.action_icons[name].hide();\n        }\n    },\n\n    /**\n     * Set track's modes and update mode icon popup.\n     */\n    set_display_modes: function(new_modes, init_mode) {\n        if (!new_modes) { return; }\n\n        // HACK: move this out of view and into track.\n\n        // Set modes, init mode.\n        this.model.display_modes = new_modes;\n        this.model.mode = (init_mode || this.model.config.get_value('mode') || this.model.display_modes[0]);\n        \n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + this.mode + \")\");\n\n        // Setup popup menu for changing modes.\n        var self = this,\n            track = this.model,\n            mode_mapping = {};\n        for (var i = 0, len = track.display_modes.length; i < len; i++) {\n            var mode = track.display_modes[i];\n            mode_mapping[mode] = function(mode) {\n                return function() { \n                    track.change_mode(mode);\n                    // HACK: the popup menu messes with the track's hover event, so manually show/hide\n                    // icons div for now.\n                    //self.icons_div.show(); \n                    //track.container_div.mouseleave(function() { track.icons_div.hide(); } ); \n                };\n            }(mode);\n        }\n\n        make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n    }\n});\n\nreturn {\n    TrackHeaderView: TrackHeaderView\n};\n\n});"]}