{"version":3,"sources":["viz/viz_views.js"],"names":["_","TrackHeaderView","Backbone","View","extend","className","initialize","this","model","config","get","on","update_name","render","$el","append","$","addClass","drag_handle_class","text","get_value","action_icons","render_action_icons","dblclick","e","find","self","icons_div","hide","appendTo","each","action_icons_def","icon_dict","stopPropagation","title","css_class","on_click_fn","set_display_modes","display_modes","add_action_icon","name","prepend","attr","tooltip","click","new_modes","init_mode","mode","track","mode_mapping","i","len","length","make_popupmenu","change_mode","mode_icon"],"mappings":"qIAAYA,6JAIRC,EAAkBC,SAASC,KAAKC,QAChCC,UAAW,eAEXC,WAAY,WAERC,KAAKC,MAAMC,OACNC,IAAI,QACJC,GAAG,eAAgBJ,KAAKK,YAAaL,MAC1CA,KAAKM,UAGTA,OAAQ,WACJN,KAAKO,IAAIC,OAAOC,EAAE,UAAUC,SAASV,KAAKC,MAAMU,oBAChDX,KAAKO,IAAIC,OACLC,EAAE,UACGC,SAAS,cACTE,KAAKZ,KAAKC,MAAMC,OAAOW,UAAU,UAI1Cb,KAAKc,gBACLd,KAAKe,sBAGLf,KAAKO,IAAIS,SAAS,SAASC,GAxB/BvB,EAAAA,oBAIIM,KAAAO,IAAAC,OAAAC,EAAA,gCAKHJ,YATsC,WAiCnCL,KAAKO,IAAIW,KAAK,eAAeN,KAAKZ,KAAKC,MAAMC,OAAOW,UAAU,UApB9DE,oBAASP,WAwBT,IAAIW,EAAOnB,KAlBXA,KAAAoB,UAAAX,EAAA,UACAC,SAAKI,eACLO,OAoBKC,SAAStB,KAAKO,KAlBnBd,EAAA8B,KAAAvB,KAAAC,MAAAuB,iBAAA,SAAAC,GACAN,EAAKZ,gBACDU,EAAES,KADND,EAAAE,MAsBQF,EAAUG,UAlBlBH,EAAAI,YACAJ,EAASjB,QA7B0BiB,EAAAJ,QAsDnCrB,KAAK8B,kBAAkB9B,KAAKC,MAAM8B,gBAHjCC,gBATD,SAmBAC,EARAN,EACAC,EACHC,EAUGK,EARJb,GAWI,IAAIF,EAAOnB,KARfgC,KAAAA,aAAiBC,GAAAxB,EAAA,QAQb0B,KAAIhB,QAAJQ,GACAjB,SAAKI,eAMGe,SAAAA,GANkBO,UAS1BC,MAAIhB,WACAQ,EAAKf,EAALb,SA/E+BqB,SAAAtB,KAAAoB,WA8E/BC,GAKRrB,KAAAc,aAAAmB,GAAAZ,QAGAS,kBAAmB,SAASQ,EAAWC,GAKnC,GAAAD,EAAA,CAGAtC,KAAKC,MAAM8B,cAAgBO,EAW3BtC,KAAAC,MAAAuC,KACAD,GAAAvC,KACIyC,MAAAA,OAAaxC,UADjB,SAAAD,KAEI0C,MAAAA,cAFJ,GAII1C,KAAAc,aAAI0B,UAAaT,KACjBW,QACI,0BAAkB1C,KAAAwC,KAAA,KAOrB,IAAA,IAFOC,EAAAzC,KAAAC,MACHyC,KAPgBC,EAQlBH,EARHI,EAAAH,EAAAV,cAAAc,OAAAF,EAAAC,EAAAD,IAAA,CASH,IAAAH,EAAAC,EAAAV,cAAAY,GATGD,EAAaF,GAAS,SAASA,GAWnCM,OAAAA,WACHL,EAAAM,YAAAP,IAZ6B,CAQnBA,GAGPM,eAAe9C,KAAKc,aAAakC,UAAWN,kBAKhDhD,gBAAiBA","file":"../../scripts/viz/viz_views.js","sourcesContent":["import * as _ from \"libs/underscore\";\n/**\n * View for track/group header.\n */\nvar TrackHeaderView = Backbone.View.extend({\n    className: \"track-header\",\n\n    initialize: function() {\n        // Watch and update name changes.\n        this.model.config\n            .get(\"name\")\n            .on(\"change:value\", this.update_name, this);\n        this.render();\n    },\n\n    render: function() {\n        this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n        this.$el.append(\n            $(\"<div/>\")\n                .addClass(\"track-name\")\n                .text(this.model.config.get_value(\"name\"))\n        );\n\n        // Icons container.\n        this.action_icons = {};\n        this.render_action_icons();\n\n        // Suppress double clicks in header so that they do not impact viz under header.\n        this.$el.dblclick(function(e) {\n            e.stopPropagation();\n        });\n\n        // Needed for floating elts in header.\n        this.$el.append($(\"<div style='clear: both'/>\"));\n    },\n\n    update_name: function() {\n        this.$el.find(\".track-name\").text(this.model.config.get_value(\"name\"));\n    },\n\n    render_action_icons: function() {\n        var self = this;\n        this.icons_div = $(\"<div/>\")\n            .addClass(\"track-icons\")\n            .hide()\n            .appendTo(this.$el);\n        _.each(this.model.action_icons_def, function(icon_dict) {\n            self.add_action_icon(\n                icon_dict.name,\n                icon_dict.title,\n                icon_dict.css_class,\n                icon_dict.on_click_fn,\n                icon_dict.prepend,\n                icon_dict.hide\n            );\n        });\n\n        // Set up behavior for modes popup.\n        this.set_display_modes(this.model.display_modes);\n    },\n\n    /**\n     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n     */\n    add_action_icon: function(\n        name,\n        title,\n        css_class,\n        on_click_fn,\n        prepend,\n        hide\n    ) {\n        var self = this;\n        this.action_icons[name] = $(\"<a/>\")\n            .attr(\"title\", title)\n            .addClass(\"icon-button\")\n            .addClass(css_class)\n            .tooltip()\n            .click(function() {\n                on_click_fn(self.model);\n            })\n            .appendTo(this.icons_div);\n        if (hide) {\n            this.action_icons[name].hide();\n        }\n    },\n\n    /**\n     * Set track's modes and update mode icon popup.\n     */\n    set_display_modes: function(new_modes, init_mode) {\n        if (!new_modes) {\n            return;\n        }\n\n        // HACK: move this out of view and into track.\n\n        // Set modes, init mode.\n        this.model.display_modes = new_modes;\n        this.model.mode =\n            init_mode ||\n            this.model.config.get_value(\"mode\") ||\n            this.model.display_modes[0];\n\n        this.action_icons.mode_icon.attr(\n            \"title\",\n            \"Set display mode (now: \" + this.mode + \")\"\n        );\n\n        // Setup popup menu for changing modes.\n        var self = this,\n            track = this.model,\n            mode_mapping = {};\n        for (var i = 0, len = track.display_modes.length; i < len; i++) {\n            var mode = track.display_modes[i];\n            mode_mapping[mode] = (function(mode) {\n                return function() {\n                    track.change_mode(mode);\n                    // HACK: the popup menu messes with the track's hover event, so manually show/hide\n                    // icons div for now.\n                    //self.icons_div.show();\n                    //track.container_div.mouseleave(function() { track.icons_div.hide(); } );\n                };\n            })(mode);\n        }\n\n        make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n    }\n});\n\nexport default {\n    TrackHeaderView: TrackHeaderView\n};\n"]}