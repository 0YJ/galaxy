{"version":3,"sources":["viz/viz_views.js"],"names":["define","_","TrackHeaderView","Backbone","View","extend","className","initialize","this","model","config","on","update_name","render","append","$","addClass","drag_handle_class","$el","text","get_value","action_icons","render_action_icons","dblclick","e","stopPropagation","find","self","icons_div","set_display_modes","hide","appendTo","each","action_icons_def","icon_dict","add_action_icon","name","title","css_class","on_click_fn","display_modes","prepend","mode_icon","attr","tooltip","click","mode_mapping","len","track","change_mode","new_modes","init_mode","mode","i","length","make_popupmenu"],"mappings":"kCAAAA,QAAQ,mBAAoB,SAASC,GAoIjC,OACIC,gBApIJC,SAAAC,KAAAC,QAIIC,UAAW,eADfC,WAAIL,WAKIM,KAAKC,MAAMC,OAFfH,IAAAA,QACII,GAAA,eAAAH,KAAAI,YAAAJ,MACAA,KAAAK,UAMJA,OAAQ,WAARA,KAAAA,IAAQC,OAAAC,EAAA,UAAWC,SAAAR,KAAAC,MAAAQ,oBACfT,KAAAU,IAAKA,OACLH,EAAA,UAESC,SAAS,cAIlBG,KAAAX,KAAAC,MAAAC,OAAAU,UAAA,UAIAZ,KAAAa,gBACAb,KAAAc,sBAAAd,KAAKU,IAAIK,SAAS,SAASC,GAI3BA,EAAAC,oBAIJb,KAAAA,IAAAA,OAAaG,EAAA,gCAAbH,YAAa,WAMbU,KAAAA,IACII,KAAIC,eACJR,KAAKS,KAAAA,MAAYb,OAAEK,UACdJ,UAYJM,oBATD,WALA,IAAIK,EAAOnB,KAgBXA,KAAAoB,UAAAb,EAAA,UACAC,SAAKa,eAxD8BC,OA2C9BC,SAASvB,KAAKU,KAgBvBjB,EAAA+B,KAAAxB,KAAAC,MAAAwB,iBAAA,SAAAC,GAdQP,EAAKQ,gBACDD,EAAUE,KAgBtBD,EAAiBE,MAQTV,EAAOW,UACXJ,EAAKb,YAMGkB,EAAAA,QAEHR,EAASD,QAvBdtB,KAAKqB,kBAAkBrB,KAAKC,MAAM+B,gBAkC9BL,gBAAA,SACHC,EA3BDC,EA6BAC,EA3BAC,EA6BAE,EACAX,GA1BA,IAAIH,EAAOnB,KAgCXA,KAAAa,aAAKA,GAAaqB,EAAAA,QA9BbC,KAAK,QAASN,GAmCnBrB,SAAA,eACAA,SAAIW,GAAJiB,UAAAC,MAEIC,WACJP,EAAgBQ,EAAAA,SAEZD,SAAAA,KAAAA,WACIhB,GACIkB,KAAAA,aAAMC,GAAAA,QAOjBpB,kBAAA,SAAAqB,EAAAC,GAjCD,GAAKD,EAAL,CAuCR1C,KAAAC,MAAA+B,cAAAU,EApIJ1C,KAAAC,MAAA2C,KAsGgBD,GACA3C,KAAKC,MAAMC,OAAOU,UAAU,SAC5BZ,KAAKC,MAAM+B,cAAc,GAE7BhC,KAAKa,aAAaqB,UAAUC,KACxB,QACA,0BAA4BnC,KAAK4C,KAAO,KAO5C,IAAK,IAFDJ,EAAQxC,KAAKC,MACbqC,KACKO,EAAI,EAAGN,EAAMC,EAAMR,cAAcc,OAAQD,EAAIN,EAAKM,IAAK,CAC5D,IAAID,EAAOJ,EAAMR,cAAca,GAC/BP,EAAaM,GAAS,SAASA,GAC3B,OAAO,WACHJ,EAAMC,YAAYG,IAFJ,CAQnBA,GAGPG,eAAe/C,KAAKa,aAAaqB,UAAWI","file":"../../scripts/viz/viz_views.js","sourcesContent":["define([\"libs/underscore\"], function(_) {\n    /**\n * View for track/group header.\n */\n    var TrackHeaderView = Backbone.View.extend({\n        className: \"track-header\",\n\n        initialize: function() {\n            // Watch and update name changes.\n            this.model.config\n                .get(\"name\")\n                .on(\"change:value\", this.update_name, this);\n            this.render();\n        },\n\n        render: function() {\n            this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n            this.$el.append(\n                $(\"<div/>\")\n                    .addClass(\"track-name\")\n                    .text(this.model.config.get_value(\"name\"))\n            );\n\n            // Icons container.\n            this.action_icons = {};\n            this.render_action_icons();\n\n            // Suppress double clicks in header so that they do not impact viz under header.\n            this.$el.dblclick(function(e) {\n                e.stopPropagation();\n            });\n\n            // Needed for floating elts in header.\n            this.$el.append($(\"<div style='clear: both'/>\"));\n        },\n\n        update_name: function() {\n            this.$el\n                .find(\".track-name\")\n                .text(this.model.config.get_value(\"name\"));\n        },\n\n        render_action_icons: function() {\n            var self = this;\n            this.icons_div = $(\"<div/>\")\n                .addClass(\"track-icons\")\n                .hide()\n                .appendTo(this.$el);\n            _.each(this.model.action_icons_def, function(icon_dict) {\n                self.add_action_icon(\n                    icon_dict.name,\n                    icon_dict.title,\n                    icon_dict.css_class,\n                    icon_dict.on_click_fn,\n                    icon_dict.prepend,\n                    icon_dict.hide\n                );\n            });\n\n            // Set up behavior for modes popup.\n            this.set_display_modes(this.model.display_modes);\n        },\n\n        /**\n     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n     */\n        add_action_icon: function(\n            name,\n            title,\n            css_class,\n            on_click_fn,\n            prepend,\n            hide\n        ) {\n            var self = this;\n            this.action_icons[name] = $(\"<a/>\")\n                .attr(\"title\", title)\n                .addClass(\"icon-button\")\n                .addClass(css_class)\n                .tooltip()\n                .click(function() {\n                    on_click_fn(self.model);\n                })\n                .appendTo(this.icons_div);\n            if (hide) {\n                this.action_icons[name].hide();\n            }\n        },\n\n        /**\n     * Set track's modes and update mode icon popup.\n     */\n        set_display_modes: function(new_modes, init_mode) {\n            if (!new_modes) {\n                return;\n            }\n\n            // HACK: move this out of view and into track.\n\n            // Set modes, init mode.\n            this.model.display_modes = new_modes;\n            this.model.mode =\n                init_mode ||\n                this.model.config.get_value(\"mode\") ||\n                this.model.display_modes[0];\n\n            this.action_icons.mode_icon.attr(\n                \"title\",\n                \"Set display mode (now: \" + this.mode + \")\"\n            );\n\n            // Setup popup menu for changing modes.\n            var self = this,\n                track = this.model,\n                mode_mapping = {};\n            for (var i = 0, len = track.display_modes.length; i < len; i++) {\n                var mode = track.display_modes[i];\n                mode_mapping[mode] = (function(mode) {\n                    return function() {\n                        track.change_mode(mode);\n                        // HACK: the popup menu messes with the track's hover event, so manually show/hide\n                        // icons div for now.\n                        //self.icons_div.show();\n                        //track.container_div.mouseleave(function() { track.icons_div.hide(); } );\n                    };\n                })(mode);\n            }\n\n            make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n        }\n    });\n\n    return {\n        TrackHeaderView: TrackHeaderView\n    };\n});\n"]}