{"version":3,"sources":["viz/viz_views.js"],"names":["define","_","TrackHeaderView","Backbone","View","extend","className","initialize","get","on","this","update_name","render","$el","append","$","addClass","model","drag_handle_class","text","config","get_value","action_icons","render_action_icons","dblclick","e","stopPropagation","find","self","icons_div","hide","appendTo","icon_dict","name","title","css_class","set_display_modes","display_modes","add_action_icon","on_click_fn","prepend","attr","tooltip","click","new_modes","init_mode","mode","track","mode_mapping","len","length","i","make_popupmenu","mode_icon"],"mappings":"YAAAA,SAAS,mBAAoB,SAASC,GA4FjC,OAvFsCC,gBAArBC,SAASC,KAAKC,QAChCC,UAAW,eAAXA,WAAAA,WAEAC,KAAAA,MAAAA,OAAYC,IAAA,QAAAC,GAAA,eAAWC,KAAAC,YAAAD,MACnBA,KAAAE,UAGHA,OAPsC,WAUnCF,KAAKG,IAAIC,OAAOC,EAAE,UAAUC,SAASN,KAAKO,MAAMC,oBADpDN,KAAAA,IAAQE,OAAAC,EAAA,UAAWC,SAAA,cACGG,KAAUH,KAAAA,MAASI,OAAAC,UAAWH,UAIhDR,KAAAY,gBACAZ,KAAAa,sBAGAb,KAAAG,IAAAW,SAAA,SAAAC,GAAAA,EAAAC,oBACuDhB,KAAvDG,IAAAC,OAAAC,EAAA,gCAGAJ,YAAKE,WACRH,KAvBsCG,IAAAc,KAAA,eAAAR,KAAAT,KAAAO,MAAAG,OAAAC,UAAA,UA0BnCE,oBAAA,WACH,GA3BsCK,GAAAlB,IA+BnCA,MAAKmB,UAAYd,EAAE,UAAUC,SAAS,eAAec,OAAOC,SAASrB,KAAKG,KAF9EU,EAAAA,KAAAA,KAAAA,MAAAA,iBAAqB,SAAAS,GACjBJ,EAAIA,gBAAJI,EAAAC,KAAAD,EAAAE,MAAAF,EAAAG,UACmBH,EAAUhB,YAASgB,EAAeF,QAAOC,EAASD,QAOrEpB,KAAK0B,kBAAkB1B,KAAKO,MAAMoB,gBAMtCC,gBAAiB,SAASL,EAAMC,EAAOC,EAAWI,EAAaC,EAASV,GACpE,GAAIF,GAAOlB,IADf4B,MAAAA,aAAiBL,GAAAlB,EAAA,QAAA0B,KAAA,QAAeP,GAC5BlB,SAAA,eAAAA,SAAAmB,GAAAO,UAC4BC,MAAQF,WAAcP,EACdlB,EAASC,SACWc,SAAArB,KAAAmB,WAA0BC,GAElFpB,KAAIoB,aAAMG,GAAAH,QAQdM,kBAAmB,SAASQ,EAAWC,GAAvCT,GAAAA,EAAAA,CAGI1B,KAAAO,MAAAoB,cAAAO,EAIAlC,KAAKO,MAAM6B,KAAQD,GAAanC,KAAKO,MAAMG,OAAOC,UAAU,SAAWX,KAAKO,MAAMoB,cAAc,GADhG3B,KAAAY,aAAWe,UAAXI,KAA2BG,QAA3B,0BAAAlC,KAAAoC,KAAA,IAMA,KAAA,GACIC,GAAQrC,KAAKO,MAFjB+B,KACIpB,EAAAA,EAAOqB,EAAXF,EAAAV,cAAAa,OAAAC,EAAAF,EAAAE,IAAA,CAAA,GACIJ,GAAAA,EAAa9B,cADjBkC,EAAAH,GAEIA,GAFJ,SAAAF,GAGA,MAASK,YACDL,EAAAA,YAAaT,KAMTS,GAGPM,eARD1C,KAAAY,aAAA+B,UAAAL","file":"../../scripts/viz/viz_views.js","sourcesContent":["define( [\"libs/underscore\"], function(_) {\n\n/**\n * View for track/group header.\n */\nvar TrackHeaderView = Backbone.View.extend({\n    className: 'track-header',\n\n    initialize: function() {\n        // Watch and update name changes.\n        this.model.config.get('name').on('change:value', this.update_name, this);\n        this.render();\n    },\n\n    render: function() {\n        this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n        this.$el.append($(\"<div/>\").addClass(\"track-name\")\n                                   .text(this.model.config.get_value('name')));\n\n        // Icons container.\n        this.action_icons = {};\n        this.render_action_icons();\n\n        // Suppress double clicks in header so that they do not impact viz under header.\n        this.$el.dblclick( function(e) { e.stopPropagation(); } );\n        \n        // Needed for floating elts in header.\n        this.$el.append( $(\"<div style='clear: both'/>\") );\n    },\n\n    update_name: function() {\n        this.$el.find('.track-name').text(this.model.config.get_value('name'));\n    },\n\n    render_action_icons: function() {\n        var self = this;\n        this.icons_div = $(\"<div/>\").addClass('track-icons').hide().appendTo(this.$el);\n        _.each(this.model.action_icons_def, function(icon_dict) {\n            self.add_action_icon(icon_dict.name, icon_dict.title, icon_dict.css_class, \n                                 icon_dict.on_click_fn, icon_dict.prepend, icon_dict.hide);\n        });\n\n        // Set up behavior for modes popup.\n        this.set_display_modes(this.model.display_modes);\n    },\n\n    /**\n     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n     */\n    add_action_icon: function(name, title, css_class, on_click_fn, prepend, hide) {\n        var self = this;\n        this.action_icons[name] = $(\"<a/>\").attr(\"title\", title)\n                                           .addClass(\"icon-button\").addClass(css_class).tooltip()\n                                           .click( function() { on_click_fn(self.model); } )\n                                           .appendTo(this.icons_div);\n        if (hide) {\n            this.action_icons[name].hide();\n        }\n    },\n\n    /**\n     * Set track's modes and update mode icon popup.\n     */\n    set_display_modes: function(new_modes, init_mode) {\n        if (!new_modes) { return; }\n\n        // HACK: move this out of view and into track.\n\n        // Set modes, init mode.\n        this.model.display_modes = new_modes;\n        this.model.mode = (init_mode || this.model.config.get_value('mode') || this.model.display_modes[0]);\n        \n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + this.mode + \")\");\n\n        // Setup popup menu for changing modes.\n        var self = this,\n            track = this.model,\n            mode_mapping = {};\n        for (var i = 0, len = track.display_modes.length; i < len; i++) {\n            var mode = track.display_modes[i];\n            mode_mapping[mode] = function(mode) {\n                return function() { \n                    track.change_mode(mode);\n                    // HACK: the popup menu messes with the track's hover event, so manually show/hide\n                    // icons div for now.\n                    //self.icons_div.show(); \n                    //track.container_div.mouseleave(function() { track.icons_div.hide(); } ); \n                };\n            }(mode);\n        }\n\n        make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n    }\n});\n\nreturn {\n    TrackHeaderView: TrackHeaderView\n};\n\n});"]}