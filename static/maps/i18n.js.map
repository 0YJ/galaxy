{"version":3,"sources":["i18n.js"],"names":["addPart","locale","master","needed","toLoad","prefix","suffix","push","addIfExists","req","fullName","require","_fileExists","toUrl","mixin","target","source","force","prop","hasOwnProperty","nlsRegExp","define","module","masterConfig","config","version","load","name","onLoad","masterName","i","part","match","exec","parts","split","value","current","navigator","language","userLanguage","toLowerCase","isBuild","length","partBundle"],"mappings":"CAoCC,WACG,YAaA,SAASA,GAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,GACjDJ,EAAOD,KACPE,EAAOI,KAAKN,IACW,IAAnBC,EAAOD,IAAuC,IAAnBC,EAAOD,IAClCG,EAAOG,KAAKF,EAASJ,EAAS,IAAMK,IAKhD,QAASE,GAAYC,EAAKR,EAAQG,EAAQC,EAAQC,GAC9C,GAAII,GAAWL,EAASJ,EAAS,IAAMK,CACnCK,SAAQC,YAAYH,EAAII,MAAMH,EAAW,SACzCN,EAAOG,KAAKG,GAWpB,QAASI,GAAMC,EAAQC,EAAQC,GAC3B,GAAIC,EACJ,KAAKA,IAAQF,IACLA,EAAOG,eAAeD,IAAWH,EAAOI,eAAeD,KAASD,EAEjC,gBAAjBD,GAAOE,MAChBH,EAAOG,IAASF,EAAOE,KACxBH,EAAOG,OAEXJ,EAAMC,EAAOG,GAAOF,EAAOE,GAAOD,IALlCF,EAAOG,GAAQF,EAAOE,GAhClC,GAAIE,GAAY,yCA0ChBC,SAAQ,UAAW,SAAUC,GACzB,GAAIC,GAAeD,EAAOE,OAASF,EAAOE,WAE1C,QACIC,QAAS,QAITC,KAAM,SAAUC,EAAMlB,EAAKmB,EAAQJ,GAC/BA,EAASA,MAELA,EAAOvB,SACPsB,EAAatB,OAASuB,EAAOvB,OAGjC,IAAI4B,GAQAC,EAAGC,EAPHC,EAAQZ,EAAUa,KAAKN,GACvBtB,EAAS2B,EAAM,GACf/B,EAAS+B,EAAM,GACf1B,EAAS0B,EAAM,GACfE,EAAQjC,EAAOkC,MAAM,KACrB/B,KACAgC,KACSC,EAAU,EAuBvB,IAlBIL,EAAM,IAEN3B,EAAS2B,EAAM,GACfH,EAAaxB,EAASC,IAGtBuB,EAAaF,EACbrB,EAAS0B,EAAM,GACf/B,EAASsB,EAAatB,OACjBA,IACDA,EAASsB,EAAatB,OACG,mBAAdqC,WAA4B,QAClCA,UAAUC,UACVD,UAAUE,cAAgB,QAAQC,eAE3CP,EAAQjC,EAAOkC,MAAM,MAGrBX,EAAOkB,QAAS,CAKhB,IAFAtC,EAAOG,KAAKsB,GACZrB,EAAYC,EAAK,OAAQL,EAAQC,EAAQC,GACpCwB,EAAI,EAAGA,EAAII,EAAMS,OAAQb,IAC1BC,EAAOG,EAAMJ,GACbO,IAAYA,EAAU,IAAM,IAAMN,EAClCvB,EAAYC,EAAK4B,EAASjC,EAAQC,EAAQC,EAG9CG,GAAIL,EAAQ,WACRwB,UAIJnB,IAAKoB,GAAa,SAAU3B,GAExB,GACI6B,GADA5B,IAKJ,KADAH,EAAQ,OAAQE,EAAQC,EAAQC,EAAQC,EAAQC,GAC3CwB,EAAI,EAAGA,EAAII,EAAMS,OAAQb,IAC1BC,EAAOG,EAAMJ,GACbO,IAAYA,EAAU,IAAM,IAAMN,EAClC/B,EAAQqC,EAASnC,EAAQC,EAAQC,EAAQC,EAAQC,EAIrDG,GAAIL,EAAQ,WACR,GAAI0B,GAAGc,EAAYb,CACnB,KAAKD,EAAI3B,EAAOwC,OAAS,EAAGb,GAAK,GAAK3B,EAAO2B,GAAIA,IAC7CC,EAAO5B,EAAO2B,GACdc,EAAa1C,EAAO6B,IACD,IAAfa,GAAsC,IAAfA,IACvBA,EAAanC,EAAIJ,EAAS0B,EAAO,IAAMzB,IAE3CQ,EAAMsB,EAAOQ,EAIjBhB,GAAOQ","file":"../scripts/i18n.js","sourcesContent":["/**\n * @license RequireJS i18n 2.0.4 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/i18n for details\n */\n/*jslint regexp: true */\n/*global require: false, navigator: false, define: false */\n\n/**\n * This plugin handles i18n! prefixed modules. It does the following:\n *\n * 1) A regular module can have a dependency on an i18n bundle, but the regular\n * module does not want to specify what locale to load. So it just specifies\n * the top-level bundle, like \"i18n!nls/colors\".\n *\n * This plugin will load the i18n bundle at nls/colors, see that it is a root/master\n * bundle since it does not have a locale in its name. It will then try to find\n * the best match locale available in that master bundle, then request all the\n * locale pieces for that best match locale. For instance, if the locale is \"en-us\",\n * then the plugin will ask for the \"en-us\", \"en\" and \"root\" bundles to be loaded\n * (but only if they are specified on the master bundle).\n *\n * Once all the bundles for the locale pieces load, then it mixes in all those\n * locale pieces into each other, then finally sets the context.defined value\n * for the nls/colors bundle to be that mixed in locale.\n *\n * 2) A regular module specifies a specific locale to load. For instance,\n * i18n!nls/fr-fr/colors. In this case, the plugin needs to load the master bundle\n * first, at nls/colors, then figure out what the best match locale is for fr-fr,\n * since maybe only fr or just root is defined for that locale. Once that best\n * fit is found, all of its locale pieces need to have their bundles loaded.\n *\n * Once all the bundles for the locale pieces load, then it mixes in all those\n * locale pieces into each other, then finally sets the context.defined value\n * for the nls/fr-fr/colors bundle to be that mixed in locale.\n */\n(function () {\n    'use strict';\n\n    //regexp for reconstructing the master bundle name from parts of the regexp match\n    //nlsRegExp.exec(\"foo/bar/baz/nls/en-ca/foo\") gives:\n    //[\"foo/bar/baz/nls/en-ca/foo\", \"foo/bar/baz/nls/\", \"/\", \"/\", \"en-ca\", \"foo\"]\n    //nlsRegExp.exec(\"foo/bar/baz/nls/foo\") gives:\n    //[\"foo/bar/baz/nls/foo\", \"foo/bar/baz/nls/\", \"/\", \"/\", \"foo\", \"\"]\n    //so, if match[5] is blank, it means this is the top bundle definition.\n    var nlsRegExp = /(^.*(^|\\/)nls(\\/|$))([^\\/]*)\\/?([^\\/]*)/;\n\n    //Helper function to avoid repeating code. Lots of arguments in the\n    //desire to stay functional and support RequireJS contexts without having\n    //to know about the RequireJS contexts.\n    function addPart(locale, master, needed, toLoad, prefix, suffix) {\n        if (master[locale]) {\n            needed.push(locale);\n            if (master[locale] === true || master[locale] === 1) {\n                toLoad.push(prefix + locale + '/' + suffix);\n            }\n        }\n    }\n\n    function addIfExists(req, locale, toLoad, prefix, suffix) {\n        var fullName = prefix + locale + '/' + suffix;\n        if (require._fileExists(req.toUrl(fullName + '.js'))) {\n            toLoad.push(fullName);\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     * This is not robust in IE for transferring methods that match\n     * Object.prototype names, but the uses of mixin here seem unlikely to\n     * trigger a problem related to that.\n     */\n    function mixin(target, source, force) {\n        var prop;\n        for (prop in source) {\n            if (source.hasOwnProperty(prop) && (!target.hasOwnProperty(prop) || force)) {\n                target[prop] = source[prop];\n            } else if (typeof source[prop] === 'object') {\n                if (!target[prop] && source[prop]) {\n                    target[prop] = {};\n                }\n                mixin(target[prop], source[prop], force);\n            }\n        }\n    }\n\n    define(['module'], function (module) {\n        var masterConfig = module.config ? module.config() : {};\n\n        return {\n            version: '2.0.4',\n            /**\n             * Called when a dependency needs to be loaded.\n             */\n            load: function (name, req, onLoad, config) {\n                config = config || {};\n\n                if (config.locale) {\n                    masterConfig.locale = config.locale;\n                }\n\n                var masterName,\n                    match = nlsRegExp.exec(name),\n                    prefix = match[1],\n                    locale = match[4],\n                    suffix = match[5],\n                    parts = locale.split(\"-\"),\n                    toLoad = [],\n                    value = {},\n                    i, part, current = \"\";\n\n                //If match[5] is blank, it means this is the top bundle definition,\n                //so it does not have to be handled. Locale-specific requests\n                //will have a match[4] value but no match[5]\n                if (match[5]) {\n                    //locale-specific bundle\n                    prefix = match[1];\n                    masterName = prefix + suffix;\n                } else {\n                    //Top-level bundle.\n                    masterName = name;\n                    suffix = match[4];\n                    locale = masterConfig.locale;\n                    if (!locale) {\n                        locale = masterConfig.locale =\n                            typeof navigator === \"undefined\" ? \"root\" :\n                            (navigator.language ||\n                             navigator.userLanguage || \"root\").toLowerCase();\n                    }\n                    parts = locale.split(\"-\");\n                }\n\n                if (config.isBuild) {\n                    //Check for existence of all locale possible files and\n                    //require them if exist.\n                    toLoad.push(masterName);\n                    addIfExists(req, \"root\", toLoad, prefix, suffix);\n                    for (i = 0; i < parts.length; i++) {\n                        part = parts[i];\n                        current += (current ? \"-\" : \"\") + part;\n                        addIfExists(req, current, toLoad, prefix, suffix);\n                    }\n\n                    req(toLoad, function () {\n                        onLoad();\n                    });\n                } else {\n                    //First, fetch the master bundle, it knows what locales are available.\n                    req([masterName], function (master) {\n                        //Figure out the best fit\n                        var needed = [],\n                            part;\n\n                        //Always allow for root, then do the rest of the locale parts.\n                        addPart(\"root\", master, needed, toLoad, prefix, suffix);\n                        for (i = 0; i < parts.length; i++) {\n                            part = parts[i];\n                            current += (current ? \"-\" : \"\") + part;\n                            addPart(current, master, needed, toLoad, prefix, suffix);\n                        }\n\n                        //Load all the parts missing.\n                        req(toLoad, function () {\n                            var i, partBundle, part;\n                            for (i = needed.length - 1; i > -1 && needed[i]; i--) {\n                                part = needed[i];\n                                partBundle = master[part];\n                                if (partBundle === true || partBundle === 1) {\n                                    partBundle = req(prefix + part + '/' + suffix);\n                                }\n                                mixin(value, partBundle);\n                            }\n\n                            //All done, notify the loader.\n                            onLoad(value);\n                        });\n                    });\n                }\n            }\n        };\n    });\n}());\n"]}