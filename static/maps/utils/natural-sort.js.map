{"version":3,"sources":["utils/natural-sort.js"],"names":["define","a","b","re","x","naturalSort","y","toString","toLowerCase","nC","fromCharCode","xN","split","yN","xD","String","yD","replace","getTime","oFxNcL","oFyNcL","cLoc","numS","Math","max","length","parseFloat"],"mappings":"kCAAAA,UAAW,WAuCV,OArCG,SAAqBC,EAAGC,GADxB,IAAAC,EAAA,gBACAC,EAAAH,EAASI,WAAYJ,eAAM,GACvBK,EAAAJ,EAAAK,WAAAC,eAAA,GACAC,EAAIN,OAAKO,aAAT,GAAAC,EACIP,EAAAA,QAAMG,EAAFE,EAAaD,KAAAA,GAAbI,MADRH,GAAAI,EAEIP,EAAAA,QAAMC,EAAFE,EAAaD,KAAAA,GAAbI,MAFRH,GAAAK,EAGIL,IAAKM,KAAAA,GAAOL,UAHhBM,EAIIL,EAAKP,IAAEa,KAAQd,GAAVe,UAAc,KAJvB,GAAAF,EAMIF,CANJ,GAOIE,EAAKF,EACT,OAAA,EACA,GAAQA,EAAAE,EACJ,OAAIF,EAKP,IACD,IAFKK,EAAAC,EAELC,EAAA,EAAAC,EAAAC,KAAAC,IAAAb,EAAAc,OAAAZ,EAAAY,QACAJ,EAAIF,EACJE,IAKIF,CAGI,GAFJC,EAAAA,WAASM,EAAAA,KAAAf,EAAAU,GACTD,EAAID,WAASC,EAAbC,KAAqBR,EAAAQ,GACjBF,EAAAC,EACH,OAAM,EACH,GAAAD,EAAAC,EACH,OAAA,EAGR,OAAA","file":"../../scripts/utils/natural-sort.js","sourcesContent":["define([], function() {\n    // Alphanumeric/natural sort fn\n    function naturalSort(a, b) {\n        // setup temp-scope variables for comparison evauluation\n        var re = /(-?[0-9\\.]+)/g,\n            x = a.toString().toLowerCase() || \"\",\n            y = b.toString().toLowerCase() || \"\",\n            nC = String.fromCharCode(0),\n            xN = x.replace(re, nC + \"$1\" + nC).split(nC),\n            yN = y.replace(re, nC + \"$1\" + nC).split(nC),\n            xD = new Date(x).getTime(),\n            yD = xD ? new Date(y).getTime() : null;\n        // natural sorting of dates\n        if (yD) {\n            if (xD < yD) {\n                return -1;\n            } else if (xD > yD) {\n                return 1;\n            }\n        }\n        // natural sorting through split numeric strings and default strings\n        var oFxNcL, oFyNcL;\n        for (\n            var cLoc = 0, numS = Math.max(xN.length, yN.length);\n            cLoc < numS;\n            cLoc++\n        ) {\n            oFxNcL = parseFloat(xN[cLoc]) || xN[cLoc];\n            oFyNcL = parseFloat(yN[cLoc]) || yN[cLoc];\n            if (oFxNcL < oFyNcL) {\n                return -1;\n            } else if (oFxNcL > oFyNcL) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    return naturalSort;\n});\n"]}