{"version":3,"sources":["utils/add-logging.js"],"names":["define","LOGGING_FNS","obj","namespace","addTo","undefined","prototype","addLogging","forEach","logFn","this","logger","arguments","apply"],"mappings":"kCAAAA,UAAW,WAEP,IAAIC,GAAe,MAAO,QAAS,OAAQ,OAAQ,QAAS,UA0C/D,OArCG,SAAoBC,EAAKC,GACrB,IAAIC,OAA0BC,IAAlBH,EAAII,UAA0BJ,EAAII,UAAYJ,EAgC7D,YA/BqBG,IAAdF,IAFRC,EAASG,cAAgBJ,GAQrBF,EAAAO,QAAA,SAAAC,GAIIL,EAAMK,GAAS,WAFnB,GAAAC,KAAAC,OAGQ,OAAAD,KAAKC,OAAKA,KACND,KAAOL,OAAAA,KACVI,EACGC,KAAKC,cACLC,WAOAF,KAAAC,OAAAF,GAIHC,KAAAC,OAAAF,GAAAI,MAAAH,KAAAC,OAAAC,gBAJG,KASfV","file":"../../scripts/utils/add-logging.js","sourcesContent":["define([], function() {\n    //==============================================================================\n    var LOGGING_FNS = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"];\n    /** adds logging functions to an obj.prototype (or obj directly) adding a namespace for filtering\n *  @param {Object} obj\n *  @param {String} namespace\n */\n    function addLogging(obj, namespace) {\n        var addTo = obj.prototype !== undefined ? obj.prototype : obj;\n        if (namespace !== undefined) {\n            addTo._logNamespace = namespace;\n        }\n        //yagni?: without this, may not capture Galaxy.config.debug and add Galaxy.logger properly\n        // if( window.Galaxy && window.Galaxy.config && window.Galaxy.config.debug ){\n        //     addTo.logger = window.Galaxy.logger;\n        // }\n\n        // give the object each\n        LOGGING_FNS.forEach(function(logFn) {\n            addTo[logFn] = function() {\n                if (!this.logger) {\n                    return undefined;\n                }\n                if (this.logger.emit) {\n                    return this.logger.emit(\n                        logFn,\n                        this._logNamespace,\n                        arguments\n                    );\n                }\n                if (this.logger[logFn]) {\n                    //TODO:! there has to be a way to get the lineno/file into this\n                    // http://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\n                    // http://www.paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\n                    return this.logger[logFn].apply(this.logger, arguments);\n                }\n                return undefined;\n            };\n        });\n        return obj;\n    }\n\n    //==============================================================================\n    return addLogging;\n});\n"]}