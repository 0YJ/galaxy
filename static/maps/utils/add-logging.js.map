{"version":3,"sources":["utils/add-logging.js"],"names":["define","addLogging","obj","namespace","addTo","prototype","undefined","LOGGING_FNS","forEach","logFn","this","logger","emit","_logNamespace","arguments","apply"],"mappings":"YAAAA,WACG,WAOH,QAASC,GAAYC,EAAKC,GAA1B,GAAAC,OAA0BD,KAAjBF,EAAAA,UAA4BC,EAAAG,UAAAH,CA2BhC,YA1BaA,KAAdC,IACAC,EAAID,cAAcG,GAQlBC,EAAAC,QAAA,SAAAC,GACAF,EAAAA,GAAYC,WACRJ,GAAAA,KAAOK,OAGF,MAAAC,MAAAC,OAAAC,KACGF,KAAKC,OAAOC,KAAMH,EAAAC,KAAAG,cAAAC,WAErBJ,KAAAC,OAAAF,GAIbC,KAAAC,OAAAF,GAAAM,MAAAL,KAAAC,OAAAG,eAJa,MAPTZ,EAjBJ,GAAAK,IAAA,MAAA,QAAA,OAAA,OAAA,QAAA,SAqCA,OAAAN","file":"../../scripts/utils/add-logging.js","sourcesContent":["define([\n], function(){\n//==============================================================================\nvar LOGGING_FNS = [ 'log', 'debug', 'info', 'warn', 'error', 'metric' ];\n/** adds logging functions to an obj.prototype (or obj directly) adding a namespace for filtering\n *  @param {Object} obj\n *  @param {String} namespace\n */\nfunction addLogging( obj, namespace ){\n    var addTo = ( obj.prototype !== undefined )?( obj.prototype ):( obj );\n    if( namespace !== undefined ){\n        addTo._logNamespace = namespace;\n    }\n    //yagni?: without this, may not capture Galaxy.config.debug and add Galaxy.logger properly\n    // if( window.Galaxy && window.Galaxy.config && window.Galaxy.config.debug ){\n    //     addTo.logger = window.Galaxy.logger;\n    // }\n\n    // give the object each\n    LOGGING_FNS.forEach( function( logFn ){\n        addTo[ logFn ] = function(){\n            if( !this.logger ){\n                return undefined;\n            }\n            if( this.logger.emit ){\n                return this.logger.emit( logFn, this._logNamespace, arguments );\n            }\n            if( this.logger[ logFn ] ){\n//TODO:! there has to be a way to get the lineno/file into this\n// http://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\n// http://www.paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\n                return this.logger[ logFn ].apply( this.logger, arguments );\n            }\n            return undefined;\n        };\n    });\n    return obj;\n}\n\n//==============================================================================\nreturn addLogging;\n});\n"]}