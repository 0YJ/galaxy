{"version":3,"sources":["utils/uploadbox.js"],"names":["$","jQuery","event","props","push","uploadpost","config","cnf","extend","data","success","error","progress","url","maxfilesize","error_filesize","error_default","error_server","error_message","form","key","append","payload","sizes","files","name","d","size","file","xhr","open","XMLHttpRequest","setRequestHeader","onreadystatechange","readyState","DONE","response","extra_info","responseText","err_msg","status","text","statusText","upload","addEventListener","e","lengthComputable","Math","round","loaded","total","Galaxy","emit","debug","send","opts","fn","uploadinput","options","el","$input","ondragover","ondragleave","onchange","on","preventDefault","stopPropagation","target","this","val","dataTransfer","uploadbox","dragover","dragleave","announce","alert","trigger","queue_index","add","remove","queue","length","queue_running","index","queue_length","mode","_","filter","f","queue_stop","each","duplicate","process","message","start","percentage","multiple","m","select","dialog","stop","reset","window","configure","compatible","File","FormData","FileList"],"mappings":"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","file":"../../scripts/utils/uploadbox.js","sourcesContent":["/*\n    galaxy upload plugins - requires FormData and XMLHttpRequest\n*/\n($ => {\n    // add event properties\n    jQuery.event.props.push(\"dataTransfer\");\n\n    /**\n        Posts file data to the API\n    */\n    $.uploadpost = config => {\n        // parse options\n        var cnf = $.extend(\n            {},\n            {\n                data: {},\n                success: function() {},\n                error: function() {},\n                progress: function() {},\n                url: null,\n                maxfilesize: 2048,\n                error_filesize: \"File exceeds 2GB. Please use a FTP client.\",\n                error_default: \"Please make sure the file is available.\",\n                error_server: \"Upload request failed.\",\n                error_login: \"Uploads require you to log in.\"\n            },\n            config\n        );\n\n        // link data\n        var data = cnf.data;\n\n        // check errors\n        if (data.error_message) {\n            cnf.error(data.error_message);\n            return;\n        }\n\n        // construct form data\n        var form = new FormData();\n        for (var key in data.payload) {\n            form.append(key, data.payload[key]);\n        }\n\n        // add files to submission\n        var sizes = 0;\n        for (var key in data.files) {\n            var d = data.files[key];\n            form.append(d.name, d.file, d.file.name);\n            sizes += d.file.size;\n        }\n\n        // check file size, unless it's an ftp file\n        if (sizes > 1048576 * cnf.maxfilesize) {\n            cnf.error(cnf.error_filesize);\n            return;\n        }\n\n        // prepare request\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", cnf.url, true);\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n        // captures state changes\n        xhr.onreadystatechange = () => {\n            // check for request completed, server connection closed\n            if (xhr.readyState == xhr.DONE) {\n                // parse response\n                var response = null;\n                var extra_info = \"\";\n                if (xhr.responseText) {\n                    try {\n                        response = jQuery.parseJSON(xhr.responseText);\n                        extra_info = response.err_msg;\n                    } catch (e) {\n                        response = xhr.responseText;\n                        extra_info = response;\n                    }\n                }\n                // pass any error to the error option\n                if (xhr.status < 200 || xhr.status > 299) {\n                    var text = xhr.statusText;\n                    if (xhr.status == 403) {\n                        text = cnf.error_login;\n                    } else if (xhr.status == 0) {\n                        text = cnf.error_server;\n                    } else if (!text) {\n                        text = cnf.error_default;\n                    }\n                    cnf.error(text + \" (\" + xhr.status + \"). \" + extra_info);\n                } else {\n                    cnf.success(response);\n                }\n            }\n        };\n\n        // prepare upload progress\n        xhr.upload.addEventListener(\n            \"progress\",\n            e => {\n                if (e.lengthComputable) {\n                    cnf.progress(Math.round(e.loaded * 100 / e.total));\n                }\n            },\n            false\n        );\n\n        // send request\n        Galaxy.emit.debug(\n            \"uploadbox::uploadpost()\",\n            \"Posting following data.\",\n            cnf\n        );\n        xhr.send(form);\n    };\n\n    /**\n        Handles the upload events drag/drop etc.\n    */\n    $.fn.uploadinput = function(options) {\n        // initialize\n        var el = this;\n        var opts = $.extend(\n            {},\n            {\n                ondragover: function() {},\n                ondragleave: function() {},\n                onchange: function() {},\n                multiple: false\n            },\n            options\n        );\n\n        // append hidden upload field\n        var $input = $(\n            '<input type=\"file\" style=\"display: none\" ' +\n                ((opts.multiple && \"multiple\") || \"\") +\n                \"/>\"\n        );\n        el.append(\n            $input.change(function(e) {\n                opts.onchange(e.target.files);\n                $(this).val(\"\");\n            })\n        );\n\n        // drag/drop events\n        el.on(\"drop\", e => {\n            opts.ondragleave(e);\n            if (e.dataTransfer) {\n                opts.onchange(e.dataTransfer.files);\n                e.preventDefault();\n            }\n        });\n        el.on(\"dragover\", e => {\n            e.preventDefault();\n            opts.ondragover(e);\n        });\n        el.on(\"dragleave\", e => {\n            e.stopPropagation();\n            opts.ondragleave(e);\n        });\n\n        // exports\n        return {\n            dialog: function() {\n                $input.trigger(\"click\");\n            }\n        };\n    };\n\n    /**\n        Handles the upload queue and events such as drag/drop etc.\n    */\n    $.fn.uploadbox = function(options) {\n        // parse options\n        var opts = $.extend(\n            {},\n            {\n                dragover: function() {},\n                dragleave: function() {},\n                announce: function(d) {},\n                initialize: function(d) {},\n                progress: function(d, m) {},\n                success: function(d, m) {},\n                error: function(d, m) {\n                    alert(m);\n                },\n                complete: function() {}\n            },\n            options\n        );\n\n        // file queue\n        var queue = {};\n\n        // queue index/length counter\n        var queue_index = 0;\n        var queue_length = 0;\n\n        // indicates if queue is currently running\n        var queue_running = false;\n        var queue_stop = false;\n\n        // element\n        var uploadinput = $(this).uploadinput({\n            multiple: true,\n            onchange: function(files) {\n                add(files);\n            },\n            ondragover: options.ondragover,\n            ondragleave: options.ondragleave\n        });\n\n        // add new files to upload queue\n        function add(files) {\n            if (files && files.length && !queue_running) {\n                var index = undefined;\n                _.each(files, (file, key) => {\n                    if (\n                        file.mode !== \"new\" &&\n                        _.filter(\n                            queue,\n                            f => f.name === file.name && f.size === file.size\n                        ).length\n                    ) {\n                        file.duplicate = true;\n                    }\n                });\n                _.each(files, file => {\n                    if (!file.duplicate) {\n                        index = String(queue_index++);\n                        queue[index] = file;\n                        opts.announce(index, queue[index]);\n                        queue_length++;\n                    }\n                });\n                return index;\n            }\n        }\n\n        // remove file from queue\n        function remove(index) {\n            if (queue[index]) {\n                delete queue[index];\n                queue_length--;\n            }\n        }\n\n        // process an upload, recursive\n        function process() {\n            // validate\n            if (queue_length == 0 || queue_stop) {\n                queue_stop = false;\n                queue_running = false;\n                opts.complete();\n                return;\n            } else {\n                queue_running = true;\n            }\n\n            // get an identifier from the queue\n            var index = -1;\n            for (var key in queue) {\n                index = key;\n                break;\n            }\n\n            // get current file from queue\n            var file = queue[index];\n\n            // remove from queue\n            remove(index);\n\n            // create and submit data\n            $.uploadpost({\n                url: opts.url,\n                data: opts.initialize(index),\n                success: function(message) {\n                    opts.success(index, message);\n                    process();\n                },\n                error: function(message) {\n                    opts.error(index, message);\n                    process();\n                },\n                progress: function(percentage) {\n                    opts.progress(index, percentage);\n                }\n            });\n        }\n\n        /*\n            public interface\n        */\n\n        // open file browser for selection\n        function select() {\n            uploadinput.dialog();\n        }\n\n        // remove all entries from queue\n        function reset(index) {\n            for (index in queue) {\n                remove(index);\n            }\n        }\n\n        // initiate upload process\n        function start() {\n            if (!queue_running) {\n                queue_running = true;\n                process();\n            }\n        }\n\n        // stop upload process\n        function stop() {\n            queue_stop = true;\n        }\n\n        // set options\n        function configure(options) {\n            opts = $.extend({}, opts, options);\n            return opts;\n        }\n\n        // verify browser compatibility\n        function compatible() {\n            return (\n                window.File &&\n                window.FormData &&\n                window.XMLHttpRequest &&\n                window.FileList\n            );\n        }\n\n        // export functions\n        return {\n            select: select,\n            add: add,\n            remove: remove,\n            start: start,\n            stop: stop,\n            reset: reset,\n            configure: configure,\n            compatible: compatible\n        };\n    };\n})(jQuery);\n"]}