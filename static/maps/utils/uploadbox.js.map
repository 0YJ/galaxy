{"version":3,"sources":["utils/uploadbox.js"],"names":["$","jQuery","event","props","push","uploadpost","config","extend","data","cnf","success","error","progress","url","maxfilesize","error_filesize","error_default","error_server","error_message","form","FormData","key","payload","sizes","files","file","d","name","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","DONE","readyState","responseText","response","parseJSON","e","status","text","statusText","error_login","upload","addEventListener","lengthComputable","loaded","total","Galaxy","emit","debug","send","fn","uploadinput","options","opts","el","ondragover","ondragleave","onchange","$input","multiple","append","change","target","on","dataTransfer","preventDefault","stopPropagation","dialog","trigger","uploadbox","add","queue_running","_","each","mode","filter","queue","f","size","duplicate","length","String","queue_index","announce","index","queue_length","current_index","remove","process","queue_stop","complete","initialize","message","percentage","select","reset","stop","compatible","File","window","FileList","dragover","dragleave","m","alert","this","start","configure"],"mappings":"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","file":"../../scripts/utils/uploadbox.js","sourcesContent":["/*\n    galaxy upload plugins - requires FormData and XMLHttpRequest\n*/\n;(function($){\n    // add event properties\n    jQuery.event.props.push(\"dataTransfer\");\n\n    /**\n        Posts file data to the API\n    */\n    $.uploadpost = function (config) {\n        // parse options\n        var cnf = $.extend({}, {\n            data            : {},\n            success         : function() {},\n            error           : function() {},\n            progress        : function() {},\n            url             : null,\n            maxfilesize     : 2048,\n            error_filesize  : 'File exceeds 2GB. Please use a FTP client.',\n            error_default   : 'Please make sure the file is available.',\n            error_server    : 'Upload request failed.',\n            error_login     : 'Uploads require you to log in.'\n        }, config);\n\n        // link data\n        var data = cnf.data;\n\n        // check errors\n        if (data.error_message) {\n            cnf.error(data.error_message);\n            return;\n        }\n\n        // construct form data\n        var form = new FormData();\n        for (var key in data.payload) {\n            form.append(key, data.payload[key]);\n        }\n\n        // add files to submission\n        var sizes = 0;\n        for (var key in data.files) {\n            var d = data.files[key];\n            form.append(d.name, d.file, d.file.name);\n            sizes += d.file.size;\n        }\n\n        // check file size, unless it's an ftp file\n        if (sizes > 1048576 * cnf.maxfilesize) {\n            cnf.error(cnf.error_filesize);\n            return;\n        }\n\n        // prepare request\n        xhr = new XMLHttpRequest();\n        xhr.open('POST', cnf.url, true);\n        xhr.setRequestHeader('Accept', 'application/json');\n        xhr.setRequestHeader('Cache-Control', 'no-cache');\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n        // captures state changes\n        xhr.onreadystatechange = function() {\n            // check for request completed, server connection closed\n            if (xhr.readyState == xhr.DONE) {\n                // parse response\n                var response = null;\n                if (xhr.responseText) {\n                    try {\n                        response = jQuery.parseJSON(xhr.responseText);\n                    } catch (e) {\n                        response = xhr.responseText;\n                    }\n                }\n                // pass any error to the error option\n                if (xhr.status < 200 || xhr.status > 299) {\n                    var text = xhr.statusText;\n                    if (xhr.status == 403) {\n                        text = cnf.error_login;\n                    } else if (xhr.status == 0) {\n                        text = cnf.error_server;\n                    } else if (!text) {\n                        text = cnf.error_default;\n                    }\n                    cnf.error(text + ' (' + xhr.status + ')');\n                } else {\n                    cnf.success(response);\n                }\n            }\n        }\n\n        // prepare upload progress\n        xhr.upload.addEventListener('progress', function(e) {\n            if (e.lengthComputable) {\n                cnf.progress(Math.round((e.loaded * 100) / e.total));\n            }\n        }, false);\n\n        // send request\n        Galaxy.emit.debug('uploadbox::uploadpost()', 'Posting following data.', cnf);\n        xhr.send(form);\n    }\n\n    /**\n        Handles the upload events drag/drop etc.\n    */\n    $.fn.uploadinput = function(options) {\n        // initialize\n        var el = this;\n        var opts = $.extend({}, {\n            ondragover  : function() {},\n            ondragleave : function() {},\n            onchange    : function() {},\n            multiple    : false\n        }, options);\n\n        // append hidden upload field\n        var $input = $('<input type=\"file\" style=\"display: none\" ' + (opts.multiple && 'multiple' || '') + '/>');\n        el.append($input.change(function (e) {\n            opts.onchange(e.target.files);\n            $(this).val('');\n        }));\n\n        // drag/drop events\n        el.on('drop', function (e) {\n            opts.ondragleave(e);\n            if(e.dataTransfer) {\n                opts.onchange(e.dataTransfer.files);\n                e.preventDefault();\n            }\n        });\n        el.on('dragover',  function (e) {\n            e.preventDefault();\n            opts.ondragover(e);\n        });\n        el.on('dragleave', function (e) {\n            e.stopPropagation();\n            opts.ondragleave(e);\n        });\n\n        // exports\n        return {\n            dialog: function () {\n                $input.trigger('click');\n            }\n        }\n    }\n\n    /**\n        Handles the upload queue and events such as drag/drop etc.\n    */\n    $.fn.uploadbox = function(options) {\n        // parse options\n        var opts = $.extend({}, {\n            dragover        : function() {},\n            dragleave       : function() {},\n            announce        : function(d) {},\n            initialize      : function(d) {},\n            progress        : function(d, m) {},\n            success         : function(d, m) {},\n            error           : function(d, m) { alert(m); },\n            complete        : function() {}\n        }, options);\n\n        // file queue\n        var queue = {};\n\n        // queue index/length counter\n        var queue_index = 0;\n        var queue_length = 0;\n\n        // indicates if queue is currently running\n        var queue_running = false;\n        var queue_stop = false;\n\n        // element\n        var uploadinput = $(this).uploadinput({\n            multiple    : true,\n            onchange    : function(files) { add(files); },\n            ondragover  : options.ondragover,\n            ondragleave : options.ondragleave\n        });\n\n        // add new files to upload queue\n        function add(files) {\n            if (files && files.length && !queue_running) {\n                var current_index = queue_index;\n                _.each(files, function(file, key) {\n                    if (file.mode !== 'new' && _.filter(queue, function(f) {\n                        return f.name === file.name && f.size === file.size;\n                    }).length) {\n                        file.duplicate = true;\n                    }\n                });\n                _.each(files, function(file) {\n                    if (!file.duplicate) {\n                        var index = String(queue_index++);\n                        queue[index] = file;\n                        opts.announce(index, queue[index]);\n                        queue_length++;\n                    }\n                });\n                return current_index;\n            }\n        }\n\n        // remove file from queue\n        function remove(index) {\n            if (queue[index]) {\n                delete queue[index];\n                queue_length--;\n            }\n        }\n\n        // process an upload, recursive\n        function process() {\n            // validate\n            if (queue_length == 0 || queue_stop) {\n                queue_stop = false;\n                queue_running = false;\n                opts.complete();\n                return;\n            } else {\n                queue_running = true;\n            }\n\n            // get an identifier from the queue\n            var index = -1;\n            for (var key in queue) {\n                index = key;\n                break;\n            }\n\n            // get current file from queue\n            var file = queue[index];\n\n            // remove from queue\n            remove(index)\n\n            // create and submit data\n            $.uploadpost({\n                url      : opts.url,\n                data     : opts.initialize(index),\n                success  : function(message) { opts.success(index, message); process();},\n                error    : function(message) { opts.error(index, message); process();},\n                progress : function(percentage) { opts.progress(index, percentage); }\n            });\n        }\n\n        /*\n            public interface\n        */\n\n        // open file browser for selection\n        function select() {\n            uploadinput.dialog();\n        }\n\n        // remove all entries from queue\n        function reset(index) {\n            for (index in queue) {\n                remove(index);\n            }\n        }\n\n        // initiate upload process\n        function start() {\n            if (!queue_running) {\n                queue_running = true;\n                process();\n            }\n        }\n\n        // stop upload process\n        function stop() {\n            queue_stop = true;\n        }\n\n        // set options\n        function configure(options) {\n            opts = $.extend({}, opts, options);\n            return opts;\n        }\n\n        // verify browser compatibility\n        function compatible() {\n            return window.File && window.FormData && window.XMLHttpRequest && window.FileList;\n        }\n\n        // export functions\n        return {\n            'select'        : select,\n            'add'           : add,\n            'remove'        : remove,\n            'start'         : start,\n            'stop'          : stop,\n            'reset'         : reset,\n            'configure'     : configure,\n            'compatible'    : compatible\n        };\n    }\n})(jQuery);\n\n"]}