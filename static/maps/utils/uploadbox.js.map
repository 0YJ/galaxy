{"version":3,"sources":["utils/uploadbox.js"],"names":["$","jQuery","event","props","push","uploadpost","config","cnf","extend","data","success","error","progress","url","maxfilesize","error_filesize","error_default","error_server","error_login","error_message","form","FormData","key","payload","append","sizes","files","d","name","file","size","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","response","responseText","parseJSON","e","status","text","statusText","upload","addEventListener","lengthComputable","Math","round","loaded","total","Galaxy","emit","debug","send","fn","uploadinput","options","el","this","opts","ondragover","ondragleave","onchange","multiple","$input","change","target","val","on","dataTransfer","preventDefault","stopPropagation","dialog","trigger","uploadbox","add","length","queue_running","current_index","queue_index","_","each","mode","filter","queue","f","duplicate","index","String","announce","queue_length","remove","process","queue_stop","complete","initialize","message","percentage","select","reset","start","stop","configure","compatible","window","File","FileList","dragover","dragleave","m","alert"],"mappings":"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","file":"../../scripts/utils/uploadbox.js","sourcesContent":["/*\n    galaxy upload plugins - requires FormData and XMLHttpRequest\n*/\n;(function($){\n    // add event properties\n    jQuery.event.props.push(\"dataTransfer\");\n\n    /**\n        Posts file data to the API\n    */\n    $.uploadpost = function (config) {\n        // parse options\n        var cnf = $.extend({}, {\n            data            : {},\n            success         : function() {},\n            error           : function() {},\n            progress        : function() {},\n            url             : null,\n            maxfilesize     : 2048,\n            error_filesize  : 'File exceeds 2GB. Please use a FTP client.',\n            error_default   : 'Please make sure the file is available.',\n            error_server    : 'Upload request failed.',\n            error_login     : 'Uploads require you to log in.'\n        }, config);\n\n        // link data\n        var data = cnf.data;\n\n        // check errors\n        if (data.error_message) {\n            cnf.error(data.error_message);\n            return;\n        }\n\n        // construct form data\n        var form = new FormData();\n        for (var key in data.payload) {\n            form.append(key, data.payload[key]);\n        }\n\n        // add files to submission\n        var sizes = 0;\n        for (var key in data.files) {\n            var d = data.files[key];\n            form.append(d.name, d.file, d.file.name);\n            sizes += d.file.size;\n        }\n\n        // check file size, unless it's an ftp file\n        if (sizes > 1048576 * cnf.maxfilesize) {\n            cnf.error(cnf.error_filesize);\n            return;\n        }\n\n        // prepare request\n        xhr = new XMLHttpRequest();\n        xhr.open('POST', cnf.url, true);\n        xhr.setRequestHeader('Accept', 'application/json');\n        xhr.setRequestHeader('Cache-Control', 'no-cache');\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n        // captures state changes\n        xhr.onreadystatechange = function() {\n            // check for request completed, server connection closed\n            if (xhr.readyState == xhr.DONE) {\n                // parse response\n                var response = null;\n                if (xhr.responseText) {\n                    try {\n                        response = jQuery.parseJSON(xhr.responseText);\n                    } catch (e) {\n                        response = xhr.responseText;\n                    }\n                }\n                // pass any error to the error option\n                if (xhr.status < 200 || xhr.status > 299) {\n                    var text = xhr.statusText;\n                    if (xhr.status == 403) {\n                        text = cnf.error_login;\n                    } else if (xhr.status == 0) {\n                        text = cnf.error_server;\n                    } else if (!text) {\n                        text = cnf.error_default;\n                    }\n                    cnf.error(text + ' (' + xhr.status + ')');\n                } else {\n                    cnf.success(response);\n                }\n            }\n        }\n\n        // prepare upload progress\n        xhr.upload.addEventListener('progress', function(e) {\n            if (e.lengthComputable) {\n                cnf.progress(Math.round((e.loaded * 100) / e.total));\n            }\n        }, false);\n\n        // send request\n        Galaxy.emit.debug('uploadbox::uploadpost()', 'Posting following data.', cnf);\n        xhr.send(form);\n    }\n\n    /**\n        Handles the upload events drag/drop etc.\n    */\n    $.fn.uploadinput = function(options) {\n        // initialize\n        var el = this;\n        var opts = $.extend({}, {\n            ondragover  : function() {},\n            ondragleave : function() {},\n            onchange    : function() {},\n            multiple    : false\n        }, options);\n\n        // append hidden upload field\n        var $input = $('<input type=\"file\" style=\"display: none\" ' + (opts.multiple && 'multiple' || '') + '/>');\n        el.append($input.change(function (e) {\n            opts.onchange(e.target.files);\n            $(this).val('');\n        }));\n\n        // drag/drop events\n        el.on('drop', function (e) {\n            opts.ondragleave(e);\n            if(e.dataTransfer) {\n                opts.onchange(e.dataTransfer.files);\n                e.preventDefault();\n            }\n        });\n        el.on('dragover',  function (e) {\n            e.preventDefault();\n            opts.ondragover(e);\n        });\n        el.on('dragleave', function (e) {\n            e.stopPropagation();\n            opts.ondragleave(e);\n        });\n\n        // exports\n        return {\n            dialog: function () {\n                $input.trigger('click');\n            }\n        }\n    }\n\n    /**\n        Handles the upload queue and events such as drag/drop etc.\n    */\n    $.fn.uploadbox = function(options) {\n        // parse options\n        var opts = $.extend({}, {\n            dragover        : function() {},\n            dragleave       : function() {},\n            announce        : function(d) {},\n            initialize      : function(d) {},\n            progress        : function(d, m) {},\n            success         : function(d, m) {},\n            error           : function(d, m) { alert(m); },\n            complete        : function() {}\n        }, options);\n\n        // file queue\n        var queue = {};\n\n        // queue index/length counter\n        var queue_index = 0;\n        var queue_length = 0;\n\n        // indicates if queue is currently running\n        var queue_running = false;\n        var queue_stop = false;\n\n        // element\n        var uploadinput = $(this).uploadinput({\n            multiple    : true,\n            onchange    : function(files) { add(files); },\n            ondragover  : options.ondragover,\n            ondragleave : options.ondragleave\n        });\n\n        // add new files to upload queue\n        function add(files) {\n            if (files && files.length && !queue_running) {\n                var current_index = queue_index;\n                _.each(files, function(file, key) {\n                    if (file.mode !== 'new' && _.filter(queue, function(f) {\n                        return f.name === file.name && f.size === file.size;\n                    }).length) {\n                        file.duplicate = true;\n                    }\n                });\n                _.each(files, function(file) {\n                    if (!file.duplicate) {\n                        var index = String(queue_index++);\n                        queue[index] = file;\n                        opts.announce(index, queue[index]);\n                        queue_length++;\n                    }\n                });\n                return current_index;\n            }\n        }\n\n        // remove file from queue\n        function remove(index) {\n            if (queue[index]) {\n                delete queue[index];\n                queue_length--;\n            }\n        }\n\n        // process an upload, recursive\n        function process() {\n            // validate\n            if (queue_length == 0 || queue_stop) {\n                queue_stop = false;\n                queue_running = false;\n                opts.complete();\n                return;\n            } else {\n                queue_running = true;\n            }\n\n            // get an identifier from the queue\n            var index = -1;\n            for (var key in queue) {\n                index = key;\n                break;\n            }\n\n            // get current file from queue\n            var file = queue[index];\n\n            // remove from queue\n            remove(index)\n\n            // create and submit data\n            $.uploadpost({\n                url      : opts.url,\n                data     : opts.initialize(index),\n                success  : function(message) { opts.success(index, message); process();},\n                error    : function(message) { opts.error(index, message); process();},\n                progress : function(percentage) { opts.progress(index, percentage); }\n            });\n        }\n\n        /*\n            public interface\n        */\n\n        // open file browser for selection\n        function select() {\n            uploadinput.dialog();\n        }\n\n        // remove all entries from queue\n        function reset(index) {\n            for (index in queue) {\n                remove(index);\n            }\n        }\n\n        // initiate upload process\n        function start() {\n            if (!queue_running) {\n                queue_running = true;\n                process();\n            }\n        }\n\n        // stop upload process\n        function stop() {\n            queue_stop = true;\n        }\n\n        // set options\n        function configure(options) {\n            opts = $.extend({}, opts, options);\n            return opts;\n        }\n\n        // verify browser compatibility\n        function compatible() {\n            return window.File && window.FormData && window.XMLHttpRequest && window.FileList;\n        }\n\n        // export functions\n        return {\n            'select'        : select,\n            'add'           : add,\n            'remove'        : remove,\n            'start'         : start,\n            'stop'          : stop,\n            'reset'         : reset,\n            'configure'     : configure,\n            'compatible'    : compatible\n        };\n    }\n})(jQuery);\n\n"]}