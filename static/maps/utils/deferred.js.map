{"version":3,"sources":["utils/deferred.js"],"names":["define","Utils","Backbone","Model","extend","initialize","this","active","execute","callback","self","id","uid","has_deferred","process","promise","always","debug","charAt","toUpperCase","state","slice","last","reject","resolve","reset","Galaxy","emit","i","ready","$","isEmptyObject"],"mappings":"kCAAAA,QAAA,eAAA,SAAAC,GAII,OAAOC,SAASC,MAAMC,QAClBC,WAAY,WAFZC,KAAAC,UACJD,KAAOJ,KAASC,MAMZK,QAAA,SAAAC,GAII,IAAIC,EAAOJ,KACPK,EAAKV,EAAMW,MAFnBJ,EAASC,EAASA,OAAU,EAGxBH,KAAAC,OAAIM,IAAAA,EAGJ,IAAAC,EAAKP,EAAOI,WAIZG,EAAQC,UAAUC,OAAO,kBAFzBN,EAAAH,OAAAI,GACAE,GACAC,OAAQC,KAARE,MACI,sBACAJ,KAAAA,QAFJK,OAAA,GAOiBC,cAOjBb,KAAAc,QAAAC,MAAA,GACYC,IACJZ,KASAI,EAAAA,KAAAA,KAAAA,MAAAA,OAAQS,WACXb,EAAAH,OAAAI,IAXLE,GAaKS,OAAOR,KAAQC,MA/CC,sBAuCL,WAAaJ,GAErBF,EAASK,IAWdD,GAAWC,EAAAU,WAEdV,EAAAS,WAGHjB,KAzDwBgB,KAAAR,EAAAC,WA8DrBU,MAAA,WACHC,OAAAC,KAAAV,MAAA,sBAAA,SA/DL,IAAA,IAAAW,KAAAtB,KAAAC,OADJD,KAAAC,OAAAqB,IAAA,GA8DQC,MAAO,WACH,OAAOC,EAAEC,cAAczB,KAAKC","file":"../../scripts/utils/deferred.js","sourcesContent":["/**\n *  This class defines a queue to ensure that multiple deferred callbacks are executed sequentially.\n */\ndefine([\"utils/utils\"], function(Utils) {\n    return Backbone.Model.extend({\n        initialize: function() {\n            this.active = {};\n            this.last = null;\n        },\n\n        /** Adds a callback to the queue. Upon execution a deferred object is parsed to the callback i.e. callback( deferred ).\n     *  If the callback does not take any arguments, the deferred is resolved instantly.\n    */\n        execute: function(callback) {\n            var self = this;\n            var id = Utils.uid();\n            var has_deferred = callback.length > 0;\n\n            // register process\n            this.active[id] = true;\n\n            // deferred process\n            var process = $.Deferred();\n            process.promise().always(function() {\n                delete self.active[id];\n                has_deferred &&\n                    Galaxy.emit.debug(\n                        \"deferred::execute()\",\n                        this.state()\n                            .charAt(0)\n                            .toUpperCase() +\n                            this.state().slice(1) +\n                            \" \" +\n                            id\n                    );\n            });\n\n            // deferred queue\n            $.when(this.last).always(function() {\n                if (self.active[id]) {\n                    has_deferred &&\n                        Galaxy.emit.debug(\n                            \"deferred::execute()\",\n                            \"Running \" + id\n                        );\n                    callback(process);\n                    !has_deferred && process.resolve();\n                } else {\n                    process.reject();\n                }\n            });\n            this.last = process.promise();\n        },\n\n        /** Resets the promise queue. All currently queued but unexecuted callbacks/promises will be rejected.\n    */\n        reset: function() {\n            Galaxy.emit.debug(\"deferred::execute()\", \"Reset\");\n            for (var i in this.active) {\n                this.active[i] = false;\n            }\n        },\n\n        /** Returns true if all processes are done.\n    */\n        ready: function() {\n            return $.isEmptyObject(this.active);\n        }\n    });\n});\n"]}