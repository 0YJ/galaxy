{"version":3,"sources":["utils/deferred.js"],"names":["define","Utils","Backbone","Model","extend","this","initialize","execute","callback","self","uid","has_deferred","length","active","id","process","$","Deferred","promise","always","Galaxy","debug","state","charAt","toUpperCase","slice","when","last","emit","reset","i","ready","isEmptyObject"],"mappings":"aAGAA,QAAQ,eAAgB,SAAUC,GAClC,OAAOC,SAASC,MAAMC,QADtBJ,WAAQ,WACRK,KAAOH,UACHI,KAAAA,KAAY,MAQZC,QAAS,SAAUC,GACf,IAAIC,EAAOJ,KADfE,EAASN,EAAAS,MACLC,EAAAH,EAAAI,OAAA,EAKAP,KAAKQ,OAAQC,IAAO,EAGpB,IAAIC,EAAUC,EAAEC,WADhBF,EAAAG,UAAAC,OAAA,kBACIJ,EAAAA,OAAYE,GAChBF,GAAAK,OAAkBD,KAAOE,MAAA,sBAAWhB,KAAAiB,QAAAC,OAAA,GAAAC,cAAAnB,KAAAiB,QAAAG,MAAA,GAAA,IAAAX,KAMpCE,EAAEU,KAAMrB,KAAKsB,MAAOR,OAAO,WAD3BV,EAAAI,OAAAC,IACEY,GAAkBP,OAAOS,KAAAP,MAAW,sBAAA,WAAAP,GAClCN,EAAUK,IACNF,GAAAA,EAAgBS,WAEhBL,EAACJ,WAGJN,KAAAsB,KAAAZ,EAAAG,WAKTW,MAAA,WAGIT,OAAOQ,KAAKP,MAAM,sBAAuB,SAD7CQ,IAAAA,IAAOC,KAAAzB,KAAAQ,OACHO,KAAAA,OAAYC,IAAM,GAMtBU,MAAA,WAGI,OAAOf,EAAEgB,cAAe3B,KAAKQ","file":"../../scripts/utils/deferred.js","sourcesContent":["/**\n *  This class defines a queue to ensure that multiple deferred callbacks are executed sequentially.\n */\ndefine(['utils/utils'], function( Utils ) {\nreturn Backbone.Model.extend({\n    initialize: function(){\n        this.active = {};\n        this.last = null;\n    },\n\n    /** Adds a callback to the queue. Upon execution a deferred object is parsed to the callback i.e. callback( deferred ).\n     *  If the callback does not take any arguments, the deferred is resolved instantly.\n    */\n    execute: function( callback ) {\n        var self = this;\n        var id = Utils.uid();\n        var has_deferred = callback.length > 0;\n\n        // register process\n        this.active[ id ] = true;\n\n        // deferred process\n        var process = $.Deferred();\n        process.promise().always(function() {\n            delete self.active[ id ];\n            has_deferred && Galaxy.emit.debug( 'deferred::execute()', this.state().charAt(0).toUpperCase() + this.state().slice(1) + ' ' + id );\n        });\n\n        // deferred queue\n        $.when( this.last ).always(function() {\n            if ( self.active[ id ] ) {\n                has_deferred && Galaxy.emit.debug( 'deferred::execute()', 'Running ' + id );\n                callback( process );\n                !has_deferred && process.resolve();\n            } else {\n                process.reject();\n            }\n        });\n        this.last = process.promise();\n    },\n\n    /** Resets the promise queue. All currently queued but unexecuted callbacks/promises will be rejected.\n    */\n    reset: function() {\n        Galaxy.emit.debug('deferred::execute()', 'Reset');\n        for ( var i in this.active ) {\n            this.active[ i ] = false;\n        }\n    },\n\n    /** Returns true if all processes are done.\n    */\n    ready: function() {\n        return $.isEmptyObject( this.active );\n    }\n});\n\n});"]}