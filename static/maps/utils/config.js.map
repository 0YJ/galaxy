{"version":3,"sources":["utils/config.js"],"names":["ConfigSetting","Backbone","Model","extend","initialize","options","key","this","get","set","defaults","_underscore2","default","find","label","type","default_value","mode","hidden","s","undefined","set_value","_util2","get_random_color","value","parseInt","parseFloat","ConfigSettingCollection","Collection","to_key_value_dict","rval","get_value","each","setting","set_default_value","from_models_and_saved_values","models","saved_values","ConfigSettingCollectionView","map","m","View","className","render","container","$el","collection","param","index","row","$","id","append","appendTo","attr","text","select","container_div","tip","css","click","option","e","stopPropagation","val","document","hide","input","new_color_icon","removeClass","tip_arrow","farb_obj","position","left","width","top","height","fixed_farb_obj","bind","unbind","addClass","cancel_fn","modal","tooltip","ok_fn","update_from_form","tip_inner","keyCode","farbtastic","callback","title","body","buttons","setColor","OK","help","render_in_modal","self","Galaxy","window","which","children","length","show","Cancel","is"],"mappings":"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","file":"../../scripts/utils/config.js","sourcesContent":["import _ from \"libs/underscore\";\nimport util_mod from \"viz/trackster/util\";\nimport config_mod from \"utils/config\";\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get(\"key\");\n        this.set(\"id\", key);\n\n        // Set defaults based on key.\n        var defaults = _.find(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"color\",\n                    label: \"Color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 32,\n                    hidden: true\n                },\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                }\n            ],\n            function(s) {\n                return s.key === key;\n            }\n        );\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (\n            this.get(\"value\") === undefined &&\n            this.get(\"default_value\") !== undefined\n        ) {\n            // Use default to set value (if present).\n            this.set_value(this.get(\"default_value\"));\n\n            // If no default value for color config, set random color.\n            if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                // For color setting, set random color.\n                this.set(\"value\", util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get(\"type\");\n\n        if (type === \"float\") {\n            value = parseFloat(value);\n        } else if (type === \"int\") {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({ value: value }, options);\n    }\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend(\n    {\n        model: ConfigSetting,\n\n        /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n        to_key_value_dict: function() {\n            var rval = {};\n            this.each(function(setting) {\n                rval[setting.get(\"key\")] = setting.get(\"value\");\n            });\n\n            return rval;\n        },\n\n        /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n        get_value: function(key) {\n            var s = this.get(key);\n            if (s) {\n                return s.get(\"value\");\n            }\n\n            return undefined;\n        },\n\n        /**\n     * Set value for a setting.\n     */\n        set_value: function(key, value, options) {\n            var s = this.get(key);\n            if (s) {\n                return s.set_value(value, options);\n            }\n\n            return undefined;\n        },\n\n        /**\n      * Set default value for a setting.\n      */\n        set_default_value: function(key, default_value) {\n            var s = this.get(key);\n            if (s) {\n                return s.set(\"default_value\", default_value);\n            }\n\n            return undefined;\n        }\n    },\n    {\n        /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n        from_models_and_saved_values: function(models, saved_values) {\n            // If there are saved values, copy models and update with saved values.\n            if (saved_values) {\n                models = _.map(models, function(m) {\n                    return _.extend({}, m, { value: saved_values[m.key] });\n                });\n            }\n\n            return new ConfigSettingCollection(models);\n        }\n    }\n);\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: \"config-settings-view\",\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each(function(param, index) {\n            // Hidden params have no representation in the form\n            if (param.get(\"hidden\")) {\n                return;\n            }\n\n            // Build row for param.\n            var id = \"param_\" + index,\n                type = param.get(\"type\"),\n                value = param.get(\"value\");\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append(\n                $(\"<label />\")\n                    .attr(\"for\", id)\n                    .text(param.get(\"label\") + \":\")\n            );\n            // Draw parameter as checkbox\n            if (type === \"bool\") {\n                row.append(\n                    $('<input type=\"checkbox\" />')\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .attr(\"checked\", value)\n                );\n            } else if (type === \"text\") {\n                // Draw parameter as textbox\n                row.append(\n                    $('<input type=\"text\"/>')\n                        .attr(\"id\", id)\n                        .val(value)\n                        .click(function() {\n                            $(this).select();\n                        })\n                );\n            } else if (type === \"select\") {\n                // Draw parameter as select area\n                var select = $(\"<select />\").attr(\"id\", id);\n                _.each(param.get(\"options\"), function(option) {\n                    $(\"<option/>\")\n                        .text(option.label)\n                        .attr(\"value\", option.value)\n                        .appendTo(select);\n                });\n                select.val(value);\n                row.append(select);\n            } else if (type === \"color\") {\n                // Draw parameter as color picker\n                var container_div = $(\"<div/>\").appendTo(row),\n                    input = $(\"<input />\")\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .val(value)\n                        .css(\"float\", \"left\")\n                        .appendTo(container_div)\n                        .click(function(e) {\n                            // Hide other pickers.\n                            $(\".tooltip\").removeClass(\"in\");\n\n                            // Show input's color picker.\n                            var tip = $(this)\n                                .siblings(\".tooltip\")\n                                .addClass(\"in\");\n                            tip\n                                .css({\n                                    // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                    // top: $(this).position().top + $(this.height)\n                                    left:\n                                        $(this).position().left +\n                                        $(this).width() +\n                                        5,\n                                    top:\n                                        $(this).position().top -\n                                        $(tip).height() / 2 +\n                                        $(this).height() / 2\n                                })\n                                .show();\n\n                            // Click management:\n\n                            // Keep showing tip if clicking in tip.\n                            tip.click(function(e) {\n                                e.stopPropagation();\n                            });\n\n                            // Hide tip if clicking outside of tip.\n                            $(document).bind(\"click.color-picker\", function() {\n                                tip.hide();\n                                $(document).unbind(\"click.color-picker\");\n                            });\n\n                            // No propagation to avoid triggering document click (and tip hiding) above.\n                            e.stopPropagation();\n                        }),\n                    // Icon for setting a new random color; behavior set below.\n                    new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                        .addClass(\"icon-button arrow-circle\")\n                        .appendTo(container_div)\n                        .attr(\"title\", \"Set new random color\")\n                        .tooltip(),\n                    // Color picker in tool tip style.\n                    tip = $(\n                        \"<div class='tooltip right' style='position: absolute;' />\"\n                    )\n                        .appendTo(container_div)\n                        .hide(),\n                    // Inner div for padding purposes\n                    tip_inner = $(\n                        \"<div class='tooltip-inner' style='text-align: inherit'></div>\"\n                    ).appendTo(tip),\n                    tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(\n                        tip\n                    ),\n                    farb_obj = $.farbtastic(tip_inner, {\n                        width: 100,\n                        height: 100,\n                        callback: input,\n                        color: value\n                    });\n\n                // Clear floating.\n                container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (function(fixed_farb_obj) {\n                    new_color_icon.click(function() {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n            } else {\n                row.append(\n                    $(\"<input />\")\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .val(value)\n                );\n            }\n            // Help text\n            if (param.help) {\n                row.append($(\"<div class='help'/>\").text(param.help));\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this,\n            cancel_fn = function() {\n                Galaxy.modal.hide();\n                $(window).unbind(\"keypress.check_enter_esc\");\n            },\n            ok_fn = function() {\n                Galaxy.modal.hide();\n                $(window).unbind(\"keypress.check_enter_esc\");\n                self.update_from_form();\n            },\n            check_enter_esc = function(e) {\n                if ((e.keyCode || e.which) === 27) {\n                    // Escape key\n                    cancel_fn();\n                } else if ((e.keyCode || e.which) === 13) {\n                    // Enter key\n                    ok_fn();\n                }\n            };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                Cancel: cancel_fn,\n                OK: ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each(function(setting, index) {\n            if (!setting.get(\"hidden\")) {\n                // Set value from view.\n                var id = \"param_\" + index;\n                var value = self.$el.find(\"#\" + id).val();\n                if (setting.get(\"type\") === \"bool\") {\n                    value = self.$el.find(\"#\" + id).is(\":checked\");\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n});\n\nexport default {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n"]}