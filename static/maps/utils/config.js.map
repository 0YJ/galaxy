{"version":3,"sources":["utils/config.js"],"names":["define","_","util_mod","config_mod","ConfigSetting","Backbone","Model","extend","initialize","options","key","this","get","set","defaults","find","known_settings_defaults","s","undefined","set_value","get_random_color","value","type","parseFloat","parseInt","label","default_value","mode","hidden","ConfigSettingCollection","Collection","model","to_key_value_dict","rval","each","setting","get_value","set_default_value","from_models_and_saved_values","models","saved_values","map","m","ConfigSettingCollectionView","View","className","render","container","$el","collection","param","index","id","row","$","appendTo","append","attr","text","val","click","select","option","container_div","input","css","e","removeClass","tip","siblings","addClass","left","position","width","top","height","show","stopPropagation","document","bind","hide","unbind","new_color_icon","tooltip","tip_inner","farb_obj","farbtastic","callback","color","fixed_farb_obj","setColor","help","render_in_modal","title","self","cancel_fn","Galaxy","modal","window","ok_fn","update_from_form","check_enter_esc","keyCode","which","children","length","body","buttons","Cancel","OK","is"],"mappings":"AAAAA,QAAQ,kBAAmB,qBAAsB,gBAAiB,SAASC,EAAGC,EAAUC,GAKxF,GAAIC,GAAgBC,SAASC,MAAMC,QAE/BC,WAAY,SAASC,GAEjB,GAAIC,GAAMC,KAAKC,IAAI,MACnBD,MAAKE,IAAI,KAAMH,EAGf,IAAII,GAAWb,EAAEc,KAAKX,EAAcY,wBAAyB,SAASC,GAAK,MAAOA,GAAEP,MAAQA,GACxFI,IACAH,KAAKE,IAAIZ,EAAEM,UAAWO,EAAUL,QAGVS,KAAtBP,KAAKC,IAAI,cAAwDM,KAA9BP,KAAKC,IAAI,mBAE5CD,KAAKQ,UAAUR,KAAKC,IAAI,kBAGnBD,KAAKC,IAAI,UAAiC,UAArBD,KAAKC,IAAI,SAE/BD,KAAKE,IAAI,QAASX,EAASkB,sBASvCD,UAAW,SAASE,EAAOZ,GACvB,GAAIa,GAAOX,KAAKC,IAAI,OAEP,WAATU,EACAD,EAAQE,WAAWF,GAEL,QAATC,IACLD,EAAQG,SAASH,EAAO,KAI5BV,KAAKE,KAAKQ,MAAOA,GAAQZ,MAI7BO,0BACMN,IAAK,OAAQe,MAAO,OAAQH,KAAM,OAAQI,cAAe,KACzDhB,IAAK,QAASe,MAAO,QAASH,KAAM,QAASI,cAAe,OAC5DhB,IAAK,YAAae,MAAO,YAAaH,KAAM,QAASI,cAAe,OACpEhB,IAAK,YAAae,MAAO,YAAaH,KAAM,QAASI,cAAe,OACpEhB,IAAK,OAAQY,KAAM,SAAUI,cAAef,KAAKgB,KAAMC,QAAQ,IAC/DlB,IAAK,SAAUY,KAAM,MAAOI,cAAe,GAAIE,QAAQ,IACvDlB,IAAK,YAAae,MAAO,iBAAkBH,KAAM,QAASI,cAAe,YACzEhB,IAAK,YAAae,MAAO,iBAAkBH,KAAM,QAASI,cAAe,YACzEhB,IAAK,cAAee,MAAO,cAAeH,KAAM,QAASI,cAAe,OACxEhB,IAAK,cAAee,MAAO,cAAeH,KAAM,QAASI,cAAe,UACxEhB,IAAK,kBAAmBe,MAAO,kBAAmBH,KAAM,OAAQI,eAAe,IAC/EhB,IAAK,cAAee,MAAO,sBAAuBH,KAAM,OAAQI,eAAe,IAC/EhB,IAAK,OAAQY,KAAM,SAAUI,cAAef,KAAKgB,KAAMC,QAAQ,IAC/DlB,IAAK,uBAAwBe,MAAO,yBAA0BH,KAAM,QAASI,cAAe,OAC5FhB,IAAK,mBAAoBe,MAAO,wBAAyBH,KAAM,OAAQI,eAAe,IACtFhB,IAAK,OAAQY,KAAM,SAAUI,cAAef,KAAKgB,KAAMC,QAAQ,MAOrEC,EAA0BxB,SAASyB,WAAWvB,QAC9CwB,MAAO3B,EAMP4B,kBAAmB,WACf,GAAIC,KAKJ,OAJAtB,MAAKuB,KAAK,SAASC,GACfF,EAAKE,EAAQvB,IAAI,QAAUuB,EAAQvB,IAAI,WAGpCqB,GAMXG,UAAW,SAAS1B,GAChB,GAAIO,GAAIN,KAAKC,IAAIF,EACjB,IAAIO,EACA,MAAOA,GAAEL,IAAI,UASrBO,UAAW,SAAST,EAAKW,EAAOZ,GAC5B,GAAIQ,GAAIN,KAAKC,IAAIF,EACjB,IAAIO,EACA,MAAOA,GAAEE,UAAUE,EAAOZ,IASjC4B,kBAAmB,SAAS3B,EAAKgB,GAC9B,GAAIT,GAAIN,KAAKC,IAAIF,EACjB,IAAIO,EACA,MAAOA,GAAEJ,IAAI,gBAAiBa,MAWtCY,6BAA8B,SAASC,EAAQC,GAQ3C,MANIA,KACAD,EAAStC,EAAEwC,IAAIF,EAAQ,SAASG,GAC5B,MAAOzC,GAAEM,UAAWmC,GAAKrB,MAAOmB,EAAaE,EAAEhC,UAIhD,GAAImB,GAAwBU,MAOvCI,EAA8BtC,SAASuC,KAAKrC,QAC5CsC,UAAW,uBAKXC,OAAQ,WACJ,GAAIC,GAAYpC,KAAKqC,GA8FrB,OA5FArC,MAAKsC,WAAWf,KAAK,SAASgB,EAAOC,GAEjC,IAAID,EAAMtC,IAAI,UAAd,CAGA,GAAIwC,GAAK,SAAWD,EAChB7B,EAAO4B,EAAMtC,IAAI,QACjBS,EAAQ6B,EAAMtC,IAAI,SAClByC,EAAMC,EAAE,4BAA4BC,SAASR,EAGjD,IAFAM,EAAIG,OAAOF,EAAE,aAAaG,KAAK,MAAOL,GAAKM,KAAKR,EAAMtC,IAAI,SAAW,MAEvD,SAATU,EACD+B,EAAIG,OAAQF,EAAE,6BAA6BG,KAAK,KAAML,GAAKK,KAAK,OAAQL,GAAKK,KAAM,UAAWpC,QAG7F,IAAc,SAATC,EACN+B,EAAIG,OAAQF,EAAE,wBAAwBG,KAAK,KAAML,GAAKO,IAAItC,GAAOuC,MAAO,WAAaN,EAAE3C,MAAMkD,gBAG5F,IAAc,WAATvC,EAAoB,CAC1B,GAAIuC,GAASP,EAAE,cAAcG,KAAK,KAAML,EACxCnD,GAAEiC,KAAKgB,EAAMtC,IAAI,WAAY,SAASkD,GAClCR,EAAE,aAAaI,KAAMI,EAAOrC,OAAQgC,KAAM,QAASK,EAAOzC,OAAQkC,SAAUM,KAEhFA,EAAOF,IAAKtC,GACZgC,EAAIG,OAAQK,OAIX,IAAc,UAATvC,EAAmB,CACzB,GACIyC,GAAgBT,EAAE,UAAUC,SAASF,GACrCW,EAAQV,EAAE,aAAaG,KAAK,KAAML,GAAKK,KAAK,OAAQL,GAAKO,IAAKtC,GAAQ4C,IAAI,QAAS,QAC9EV,SAASQ,GAAeH,MAAM,SAASM,GAExCZ,EAAE,YAAYa,YAAa,KAG3B,IAAIC,GAAMd,EAAE3C,MAAM0D,SAAS,YAAYC,SAAU,KACjDF,GAAIH,KAGAM,KAAMjB,EAAE3C,MAAM6D,WAAWD,KAAOjB,EAAE3C,MAAM8D,QAAU,EAClDC,IAAKpB,EAAE3C,MAAM6D,WAAWE,IAAQpB,EAAEc,GAAKO,SAAW,EAAQrB,EAAE3C,MAAMgE,SAAW,IACzEC,OAKRR,EAAIR,MAAM,SAASM,GACfA,EAAEW,oBAINvB,EAAEwB,UAAUC,KAAM,qBAAsB,WACpCX,EAAIY,OACJ1B,EAAEwB,UAAUG,OAAQ,wBAIxBf,EAAEW,oBAGNK,EAAiB5B,EAAE,kCAAkCgB,SAAS,4BAA4Bf,SAASQ,GACjFN,KAAK,QAAS,wBAAwB0B,UAExDf,EAAMd,EAAG,6DAA8DC,SAASQ,GAAeiB,OAE/FI,EAAY9B,EAAE,iEAAiEC,SAASa,GAExFiB,GADY/B,EAAE,qCAAqCC,SAASa,GACjDd,EAAEgC,WAAWF,GAAaX,MAAO,IAAKE,OAAQ,IAAKY,SAAUvB,EAAOwB,MAAOnE,IAG1F0C,GAAcP,OAAQF,EAAE,UAAUW,IAAI,QAAS,SAG/C,SAAUwB,GACNP,EAAetB,MAAM,WACjB6B,EAAeC,SAASxF,EAASkB,uBAEtCiE,OAIHhC,GAAIG,OAAQF,EAAE,aAAaG,KAAK,KAAML,GAAKK,KAAK,OAAQL,GAAKO,IAAKtC,GAGjE6B,GAAMyC,MACPtC,EAAIG,OAAQF,EAAE,uBAAuBI,KAAMR,EAAMyC,UAIlDhF,MAMXiF,gBAAiB,SAASC,GAEtB,GAAIC,GAAOnF,KACPoF,EAAY,WAAaC,OAAOC,MAAMjB,OAAQ1B,EAAE4C,QAAQjB,OAAO,6BAC/DkB,EAAQ,WACJH,OAAOC,MAAMjB,OACb1B,EAAE4C,QAAQjB,OAAO,4BACjBa,EAAKM,oBAETC,EAAkB,SAASnC,GACQ,MAA1BA,EAAEoC,SAAWpC,EAAEqC,OAChBR,IACkC,MAA1B7B,EAAEoC,SAAWpC,EAAEqC,QACvBJ,IAKZ7C,GAAE4C,QAAQnB,KAAK,2BAA4BsB,GAGR,IAA/B1F,KAAKqC,IAAIwD,WAAWC,QACpB9F,KAAKmC,SAETkD,OAAOC,MAAMrB,MACTiB,MAAOA,GAAS,YAChBa,KAAM/F,KAAKqC,IACX2D,SACIC,OAAUb,EACVc,GAAMV,MAQlBC,iBAAkB,WACd,GAAIN,GAAOnF,IACXA,MAAKsC,WAAWf,KAAK,SAASC,EAASgB,GACnC,IAAMhB,EAAQvB,IAAI,UAAY,CAE1B,GAAIwC,GAAK,SAAWD,EAChB9B,EAAQyE,EAAK9C,IAAIjC,KAAM,IAAMqC,GAAKO,KACT,UAAxBxB,EAAQvB,IAAI,UACbS,EAAQyE,EAAK9C,IAAIjC,KAAM,IAAMqC,GAAK0D,GAAI,aAE1C3E,EAAQhB,UAAUE,QAOlC,QACIjB,cAAeA,EACfyB,wBAAyBA,EACzBc,4BAA6BA","file":"../../scripts/utils/config.js","sourcesContent":["define(['libs/underscore', 'viz/trackster/util', 'utils/config'], function(_, util_mod, config_mod) {\n\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get('key');\n        this.set('id', key);\n\n        // Set defaults based on key.\n        var defaults = _.find(ConfigSetting.known_settings_defaults, function(s) { return s.key === key; });\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (this.get('value') === undefined && this.get('default_value') !== undefined) {\n            // Use default to set value (if present).\n            this.set_value(this.get('default_value'));\n\n            // If no default value for color config, set random color.\n            if (!this.get('value') && this.get('type') === 'color') {\n                // For color setting, set random color.\n                this.set('value', util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get('type');\n\n        if (type === 'float') {\n            value = parseFloat(value);\n        }\n        else if (type === 'int') {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({value: value}, options);\n    }\n}, {\n    // This is a master list of default settings for known settings.\n    known_settings_defaults: [\n        { key: 'name', label: 'Name', type: 'text', default_value: '' },\n        { key: 'color', label: 'Color', type: 'color', default_value: null },\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: null },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: null },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 32, hidden: true },\n        { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n        { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n        { key: 'block_color', label: 'Block color', type: 'color', default_value: null },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color', default_value: null },\n        { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true }\n    ]\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend({\n    model: ConfigSetting,\n\n    /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n    to_key_value_dict: function() {\n        var rval = {};\n        this.each(function(setting) {\n            rval[setting.get('key')] = setting.get('value');\n        });\n\n        return rval;\n    },\n\n    /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n    get_value: function(key) {\n        var s = this.get(key);\n        if (s) {\n            return s.get('value');\n        }\n\n        return undefined;\n    },\n\n    /**\n     * Set value for a setting.\n     */\n    set_value: function(key, value, options) {\n        var s = this.get(key);\n        if (s) {\n            return s.set_value(value, options);\n        }\n\n        return undefined;\n     },\n\n     /**\n      * Set default value for a setting.\n      */\n     set_default_value: function(key, default_value) {\n        var s = this.get(key);\n        if (s) {\n            return s.set('default_value', default_value);\n        }\n\n        return undefined;\n     }\n},\n{\n    /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n    from_models_and_saved_values: function(models, saved_values) {\n        // If there are saved values, copy models and update with saved values.\n        if (saved_values) {\n            models = _.map(models, function(m) {\n                return _.extend({}, m, { value: saved_values[m.key] });\n            });\n        }\n\n        return new ConfigSettingCollection(models);\n    }\n});\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: 'config-settings-view',\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each(function(param, index) {\n            // Hidden params have no representation in the form\n            if (param.get('hidden')) { return; }\n\n            // Build row for param.\n            var id = 'param_' + index,\n                type = param.get('type'),\n                value = param.get('value');\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append($('<label />').attr(\"for\", id ).text(param.get('label') + \":\" ));\n            // Draw parameter as checkbox\n            if ( type === 'bool' ) {\n                row.append( $('<input type=\"checkbox\" />').attr(\"id\", id ).attr(\"name\", id ).attr( 'checked', value ) );\n            }\n            // Draw parameter as textbox\n            else if ( type === 'text' ) {\n                row.append( $('<input type=\"text\"/>').attr(\"id\", id ).val(value).click( function() { $(this).select(); }));\n            }\n            // Draw parameter as select area\n            else if ( type === 'select' ) {\n                var select = $('<select />').attr(\"id\", id);\n                _.each(param.get('options'), function(option) {\n                    $(\"<option/>\").text( option.label ).attr( \"value\", option.value ).appendTo( select );\n                });\n                select.val( value );\n                row.append( select );\n\n            }\n            // Draw parameter as color picker\n            else if ( type === 'color' ) {\n                var\n                    container_div = $(\"<div/>\").appendTo(row),\n                    input = $('<input />').attr(\"id\", id ).attr(\"name\", id ).val( value ).css(\"float\", \"left\")\n                        .appendTo(container_div).click(function(e) {\n                        // Hide other pickers.\n                        $(\".tooltip\").removeClass( \"in\" );\n\n                        // Show input's color picker.\n                        var tip = $(this).siblings(\".tooltip\").addClass( \"in\" );\n                        tip.css( {\n                            // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                            // top: $(this).position().top + $(this.height)\n                            left: $(this).position().left + $(this).width() + 5,\n                            top: $(this).position().top - ( $(tip).height() / 2 ) + ( $(this).height() / 2 )\n                            } ).show();\n\n                        // Click management:\n\n                        // Keep showing tip if clicking in tip.\n                        tip.click(function(e) {\n                            e.stopPropagation();\n                        });\n\n                        // Hide tip if clicking outside of tip.\n                        $(document).bind( \"click.color-picker\", function() {\n                            tip.hide();\n                            $(document).unbind( \"click.color-picker\" );\n                        });\n\n                        // No propagation to avoid triggering document click (and tip hiding) above.\n                        e.stopPropagation();\n                    }),\n                    // Icon for setting a new random color; behavior set below.\n                    new_color_icon = $(\"<a href='javascript:void(0)'/>\").addClass(\"icon-button arrow-circle\").appendTo(container_div)\n                                     .attr(\"title\", \"Set new random color\").tooltip(),\n                    // Color picker in tool tip style.\n                    tip = $( \"<div class='tooltip right' style='position: absolute;' />\" ).appendTo(container_div).hide(),\n                    // Inner div for padding purposes\n                    tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip),\n                    tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(tip),\n                    farb_obj = $.farbtastic(tip_inner, { width: 100, height: 100, callback: input, color: value });\n\n                // Clear floating.\n                container_div.append( $(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (function(fixed_farb_obj) {\n                    new_color_icon.click(function() {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n\n            }\n            else {\n                row.append( $('<input />').attr(\"id\", id ).attr(\"name\", id ).val( value ) );\n            }\n            // Help text\n            if ( param.help ) {\n                row.append( $(\"<div class='help'/>\").text( param.help ) );\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this,\n            cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n            ok_fn = function() {\n                Galaxy.modal.hide();\n                $(window).unbind(\"keypress.check_enter_esc\");\n                self.update_from_form();\n            },\n            check_enter_esc = function(e) {\n                if ((e.keyCode || e.which) === 27) { // Escape key\n                    cancel_fn();\n                } else if ((e.keyCode || e.which) === 13) { // Enter key\n                    ok_fn();\n                }\n            };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                \"Cancel\": cancel_fn,\n                \"OK\": ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each(function(setting, index) {\n            if ( !setting.get('hidden') ) {\n                // Set value from view.\n                var id = 'param_' + index;\n                var value = self.$el.find( '#' + id ).val();\n                if ( setting.get('type') === 'bool' ) {\n                    value = self.$el.find( '#' + id ).is( ':checked' );\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n\n});\n\nreturn {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n\n});"]}