{"version":3,"sources":["utils/config.js"],"names":["_","ConfigSetting","Backbone","Model","extend","initialize","options","key","this","get","set","defaults","find","label","type","default_value","mode","hidden","undefined","set_value","_util2","default","get_random_color","value","parseFloat","parseInt","ConfigSettingCollection","Collection","model","to_key_value_dict","rval","each","setting","get_value","s","set_default_value","from_models_and_saved_values","models","saved_values","map","m","ConfigSettingCollectionView","View","className","render","container","$el","title","collection","param","index","id","row","append","$","attr","text","click","select","val","option","container_div","input","removeClass","appendTo","tip","css","left","top","show","e","stopPropagation","siblings","addClass","document","position","width","height","new_color_icon","tip_arrow","bind","callback","color","fixed_farb_obj","farb_obj","tooltip","hide","tip_inner","render_in_modal","farbtastic","cancel_fn","Galaxy","window","unbind","check_enter_esc","keyCode","which","ok_fn","help","children","self","modal","update_from_form","length","body","buttons","Cancel","OK","is"],"mappings":"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","file":"../../scripts/utils/config.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport util_mod from \"viz/trackster/util\";\nimport config_mod from \"utils/config\";\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get(\"key\");\n        this.set(\"id\", key);\n\n        // Set defaults based on key.\n        var defaults = _.find(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"color\",\n                    label: \"Color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 32,\n                    hidden: true\n                },\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                }\n            ],\n            s => s.key === key\n        );\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (\n            this.get(\"value\") === undefined &&\n            this.get(\"default_value\") !== undefined\n        ) {\n            // Use default to set value (if present).\n            this.set_value(this.get(\"default_value\"));\n\n            // If no default value for color config, set random color.\n            if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                // For color setting, set random color.\n                this.set(\"value\", util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get(\"type\");\n\n        if (type === \"float\") {\n            value = parseFloat(value);\n        } else if (type === \"int\") {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({ value: value }, options);\n    }\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend(\n    {\n        model: ConfigSetting,\n\n        /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n        to_key_value_dict: function() {\n            var rval = {};\n            this.each(setting => {\n                rval[setting.get(\"key\")] = setting.get(\"value\");\n            });\n\n            return rval;\n        },\n\n        /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n        get_value: function(key) {\n            var s = this.get(key);\n            if (s) {\n                return s.get(\"value\");\n            }\n\n            return undefined;\n        },\n\n        /**\n     * Set value for a setting.\n     */\n        set_value: function(key, value, options) {\n            var s = this.get(key);\n            if (s) {\n                return s.set_value(value, options);\n            }\n\n            return undefined;\n        },\n\n        /**\n      * Set default value for a setting.\n      */\n        set_default_value: function(key, default_value) {\n            var s = this.get(key);\n            if (s) {\n                return s.set(\"default_value\", default_value);\n            }\n\n            return undefined;\n        }\n    },\n    {\n        /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n        from_models_and_saved_values: function(models, saved_values) {\n            // If there are saved values, copy models and update with saved values.\n            if (saved_values) {\n                models = _.map(models, m =>\n                    _.extend({}, m, { value: saved_values[m.key] })\n                );\n            }\n\n            return new ConfigSettingCollection(models);\n        }\n    }\n);\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: \"config-settings-view\",\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each((param, index) => {\n            // Hidden params have no representation in the form\n            if (param.get(\"hidden\")) {\n                return;\n            }\n\n            // Build row for param.\n            var id = \"param_\" + index;\n\n            var type = param.get(\"type\");\n            var value = param.get(\"value\");\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append(\n                $(\"<label />\")\n                    .attr(\"for\", id)\n                    .text(param.get(\"label\") + \":\")\n            );\n            // Draw parameter as checkbox\n            if (type === \"bool\") {\n                row.append(\n                    $('<input type=\"checkbox\" />')\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .attr(\"checked\", value)\n                );\n            } else if (type === \"text\") {\n                // Draw parameter as textbox\n                row.append(\n                    $('<input type=\"text\"/>')\n                        .attr(\"id\", id)\n                        .val(value)\n                        .click(function() {\n                            $(this).select();\n                        })\n                );\n            } else if (type === \"select\") {\n                // Draw parameter as select area\n                var select = $(\"<select />\").attr(\"id\", id);\n                _.each(param.get(\"options\"), option => {\n                    $(\"<option/>\")\n                        .text(option.label)\n                        .attr(\"value\", option.value)\n                        .appendTo(select);\n                });\n                select.val(value);\n                row.append(select);\n            } else if (type === \"color\") {\n                // Draw parameter as color picker\n                var container_div = $(\"<div/>\").appendTo(row);\n\n                var input = $(\"<input />\")\n                    .attr(\"id\", id)\n                    .attr(\"name\", id)\n                    .val(value)\n                    .css(\"float\", \"left\")\n                    .appendTo(container_div)\n                    .click(function(e) {\n                        // Hide other pickers.\n                        $(\".tooltip\").removeClass(\"in\");\n\n                        // Show input's color picker.\n                        var tip = $(this)\n                            .siblings(\".tooltip\")\n                            .addClass(\"in\");\n                        tip\n                            .css({\n                                // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                // top: $(this).position().top + $(this.height)\n                                left:\n                                    $(this).position().left +\n                                    $(this).width() +\n                                    5,\n                                top:\n                                    $(this).position().top -\n                                    $(tip).height() / 2 +\n                                    $(this).height() / 2\n                            })\n                            .show();\n\n                        // Click management:\n\n                        // Keep showing tip if clicking in tip.\n                        tip.click(e => {\n                            e.stopPropagation();\n                        });\n\n                        // Hide tip if clicking outside of tip.\n                        $(document).bind(\"click.color-picker\", () => {\n                            tip.hide();\n                            $(document).unbind(\"click.color-picker\");\n                        });\n\n                        // No propagation to avoid triggering document click (and tip hiding) above.\n                        e.stopPropagation();\n                    });\n\n                var // Icon for setting a new random color; behavior set below.\n                new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                    .addClass(\"icon-button arrow-circle\")\n                    .appendTo(container_div)\n                    .attr(\"title\", \"Set new random color\")\n                    .tooltip();\n\n                var // Color picker in tool tip style.\n                tip = $(\n                    \"<div class='tooltip right' style='position: absolute;' />\"\n                )\n                    .appendTo(container_div)\n                    .hide();\n\n                var // Inner div for padding purposes\n                tip_inner = $(\n                    \"<div class='tooltip-inner' style='text-align: inherit'></div>\"\n                ).appendTo(tip);\n\n                var tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(\n                    tip\n                );\n\n                var farb_obj = $.farbtastic(tip_inner, {\n                    width: 100,\n                    height: 100,\n                    callback: input,\n                    color: value\n                });\n\n                // Clear floating.\n                container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (fixed_farb_obj => {\n                    new_color_icon.click(() => {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n            } else {\n                row.append(\n                    $(\"<input />\")\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .val(value)\n                );\n            }\n            // Help text\n            if (param.help) {\n                row.append($(\"<div class='help'/>\").text(param.help));\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this;\n\n        var cancel_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n        };\n\n        var ok_fn = () => {\n            Galaxy.modal.hide();\n            $(window).unbind(\"keypress.check_enter_esc\");\n            self.update_from_form();\n        };\n\n        var check_enter_esc = e => {\n            if ((e.keyCode || e.which) === 27) {\n                // Escape key\n                cancel_fn();\n            } else if ((e.keyCode || e.which) === 13) {\n                // Enter key\n                ok_fn();\n            }\n        };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                Cancel: cancel_fn,\n                OK: ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each((setting, index) => {\n            if (!setting.get(\"hidden\")) {\n                // Set value from view.\n                var id = \"param_\" + index;\n                var value = self.$el.find(\"#\" + id).val();\n                if (setting.get(\"type\") === \"bool\") {\n                    value = self.$el.find(\"#\" + id).is(\":checked\");\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n});\n\nexport default {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n"]}