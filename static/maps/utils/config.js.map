{"version":3,"sources":["utils/config.js"],"names":["define","_","util_mod","config_mod","ConfigSetting","Backbone","Model","extend","initialize","options","key","this","get","set","defaults","find","type","label","default_value","s","mode","hidden","undefined","set_value","get_random_color","value","parseFloat","parseInt","ConfigSettingCollection","Collection","model","to_key_value_dict","rval","each","setting","get_value","from_models_and_saved_values","models","saved_values","className","map","m","container","ConfigSettingCollectionView","View","row","$el","Galaxy","append","param","index","$","appendTo","attr","id","text","option","val","click","select","container_div","removeClass","left","top","input","css","e","tip","siblings","addClass","width","unbind","height","show","stopPropagation","hide","document","new_color_icon","tooltip","tip_inner","farb_obj","farbtastic","callback","color","fixed_farb_obj","setColor","self","help","cancel_fn","render_in_modal","title","modal","window","ok_fn","update_from_form","buttons","keyCode","which","children","length","render","body","collection","is"],"mappings":"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","file":"../../scripts/utils/config.js","sourcesContent":["define(['libs/underscore', 'viz/trackster/util', 'utils/config'], function(_, util_mod, config_mod) {\n\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n\n\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get('key');\n        this.set('id', key);\n\n        // Set defaults based on key.\n        var defaults = _.find([\n                { key: 'name', label: 'Name', type: 'text', default_value: '' },\n                { key: 'color', label: 'Color', type: 'color', default_value: null },\n                { key: 'min_value', label: 'Min Value', type: 'float', default_value: null },\n                { key: 'max_value', label: 'Max Value', type: 'float', default_value: null },\n                { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n                { key: 'height', type: 'int', default_value: 32, hidden: true },\n                { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n                { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n                { key: 'block_color', label: 'Block color', type: 'color', default_value: null },\n                { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n                { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n                { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n                { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color', default_value: null },\n                { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true }\n            ], function(s) { return s.key === key; });\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (this.get('value') === undefined && this.get('default_value') !== undefined) {\n            // Use default to set value (if present).\n            this.set_value(this.get('default_value'));\n\n            // If no default value for color config, set random color.\n            if (!this.get('value') && this.get('type') === 'color') {\n                // For color setting, set random color.\n                this.set('value', util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get('type');\n\n        if (type === 'float') {\n            value = parseFloat(value);\n        }\n        else if (type === 'int') {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({value: value}, options);\n    }\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend({\n    model: ConfigSetting,\n\n    /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n    to_key_value_dict: function() {\n        var rval = {};\n        this.each(function(setting) {\n            rval[setting.get('key')] = setting.get('value');\n        });\n\n        return rval;\n    },\n\n    /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n    get_value: function(key) {\n        var s = this.get(key);\n        if (s) {\n            return s.get('value');\n        }\n\n        return undefined;\n    },\n\n    /**\n     * Set value for a setting.\n     */\n    set_value: function(key, value, options) {\n        var s = this.get(key);\n        if (s) {\n            return s.set_value(value, options);\n        }\n\n        return undefined;\n     },\n\n     /**\n      * Set default value for a setting.\n      */\n     set_default_value: function(key, default_value) {\n        var s = this.get(key);\n        if (s) {\n            return s.set('default_value', default_value);\n        }\n\n        return undefined;\n     }\n},\n{\n    /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n    from_models_and_saved_values: function(models, saved_values) {\n        // If there are saved values, copy models and update with saved values.\n        if (saved_values) {\n            models = _.map(models, function(m) {\n                return _.extend({}, m, { value: saved_values[m.key] });\n            });\n        }\n\n        return new ConfigSettingCollection(models);\n    }\n});\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: 'config-settings-view',\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each(function(param, index) {\n            // Hidden params have no representation in the form\n            if (param.get('hidden')) { return; }\n\n            // Build row for param.\n            var id = 'param_' + index,\n                type = param.get('type'),\n                value = param.get('value');\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append($('<label />').attr(\"for\", id ).text(param.get('label') + \":\" ));\n            // Draw parameter as checkbox\n            if ( type === 'bool' ) {\n                row.append( $('<input type=\"checkbox\" />').attr(\"id\", id ).attr(\"name\", id ).attr( 'checked', value ) );\n            }\n            // Draw parameter as textbox\n            else if ( type === 'text' ) {\n                row.append( $('<input type=\"text\"/>').attr(\"id\", id ).val(value).click( function() { $(this).select(); }));\n            }\n            // Draw parameter as select area\n            else if ( type === 'select' ) {\n                var select = $('<select />').attr(\"id\", id);\n                _.each(param.get('options'), function(option) {\n                    $(\"<option/>\").text( option.label ).attr( \"value\", option.value ).appendTo( select );\n                });\n                select.val( value );\n                row.append( select );\n\n            }\n            // Draw parameter as color picker\n            else if ( type === 'color' ) {\n                var\n                    container_div = $(\"<div/>\").appendTo(row),\n                    input = $('<input />').attr(\"id\", id ).attr(\"name\", id ).val( value ).css(\"float\", \"left\")\n                        .appendTo(container_div).click(function(e) {\n                        // Hide other pickers.\n                        $(\".tooltip\").removeClass( \"in\" );\n\n                        // Show input's color picker.\n                        var tip = $(this).siblings(\".tooltip\").addClass( \"in\" );\n                        tip.css( {\n                            // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                            // top: $(this).position().top + $(this.height)\n                            left: $(this).position().left + $(this).width() + 5,\n                            top: $(this).position().top - ( $(tip).height() / 2 ) + ( $(this).height() / 2 )\n                            } ).show();\n\n                        // Click management:\n\n                        // Keep showing tip if clicking in tip.\n                        tip.click(function(e) {\n                            e.stopPropagation();\n                        });\n\n                        // Hide tip if clicking outside of tip.\n                        $(document).bind( \"click.color-picker\", function() {\n                            tip.hide();\n                            $(document).unbind( \"click.color-picker\" );\n                        });\n\n                        // No propagation to avoid triggering document click (and tip hiding) above.\n                        e.stopPropagation();\n                    }),\n                    // Icon for setting a new random color; behavior set below.\n                    new_color_icon = $(\"<a href='javascript:void(0)'/>\").addClass(\"icon-button arrow-circle\").appendTo(container_div)\n                                     .attr(\"title\", \"Set new random color\").tooltip(),\n                    // Color picker in tool tip style.\n                    tip = $( \"<div class='tooltip right' style='position: absolute;' />\" ).appendTo(container_div).hide(),\n                    // Inner div for padding purposes\n                    tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip),\n                    tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(tip),\n                    farb_obj = $.farbtastic(tip_inner, { width: 100, height: 100, callback: input, color: value });\n\n                // Clear floating.\n                container_div.append( $(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (function(fixed_farb_obj) {\n                    new_color_icon.click(function() {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n\n            }\n            else {\n                row.append( $('<input />').attr(\"id\", id ).attr(\"name\", id ).val( value ) );\n            }\n            // Help text\n            if ( param.help ) {\n                row.append( $(\"<div class='help'/>\").text( param.help ) );\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this,\n            cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n            ok_fn = function() {\n                Galaxy.modal.hide();\n                $(window).unbind(\"keypress.check_enter_esc\");\n                self.update_from_form();\n            },\n            check_enter_esc = function(e) {\n                if ((e.keyCode || e.which) === 27) { // Escape key\n                    cancel_fn();\n                } else if ((e.keyCode || e.which) === 13) { // Enter key\n                    ok_fn();\n                }\n            };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                \"Cancel\": cancel_fn,\n                \"OK\": ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each(function(setting, index) {\n            if ( !setting.get('hidden') ) {\n                // Set value from view.\n                var id = 'param_' + index;\n                var value = self.$el.find( '#' + id ).val();\n                if ( setting.get('type') === 'bool' ) {\n                    value = self.$el.find( '#' + id ).is( ':checked' );\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n\n});\n\nreturn {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n\n});\n"]}