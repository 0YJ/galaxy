{"version":3,"sources":["utils/config.js"],"names":["define","_","util_mod","initialize","Backbone","Model","extend","options","key","set","get","this","find","default_value","label","type","hidden","mode","defaults","s","set_value","parseFloat","value","undefined","get_random_color","rval","each","setting","parseInt","ConfigSettingCollection","Collection","model","ConfigSetting","to_key_value_dict","get_value","set_default_value","from_models_and_saved_values","param","saved_values","models","map","m","ConfigSettingCollectionView","View","row","render","collection","index","append","id","$","appendTo","container","tip","attr","text","click","select","new_color_icon","option","tip_inner","tip_arrow","farb_obj","farbtastic","height","callback","color","val","css","container_div","e","fixed_farb_obj","siblings","addClass","left","position","width","top","show","hide","stopPropagation","unbind","bind","update_from_form","which","children","length","modal","title","Cancel","input","setColor","help","render_in_modal","self","cancel_fn","Galaxy","window","ok_fn","keyCode","$el","body","buttons","OK","is"],"mappings":"kCAAAA,QAAQ,kBAAmB,qBAAsB,gBAAiB,SAC9DC,EACAC,EAFJF,GASQG,IAAAA,EAAYC,SAAAC,MAAAC,QACRH,WAAA,SAAAI,GAEA,IAAAC,EAAKC,KAAIC,IAAMF,OAAfG,KAAKF,IAAI,KAAMD,GAMHA,IAAAA,EAAKP,EAAAW,OAGLC,IAAAA,OAEJC,MAAA,OACIN,KAAK,OACLM,cAFJ,KAMAN,IAAA,QACIA,MAAK,QACLM,KAAO,QACPC,cAHJ,OAOIP,IAAK,YACLM,MAAO,YACPC,KAAM,QACNF,cAAe,OAIfE,IAAM,YACNF,MAAAA,YACAG,KAAQ,QAEZH,cAAA,OAGIA,IAAAA,OACAG,KAAQ,SAEZH,cAAAF,KAAAM,KACIT,QAAK,IAGLK,IAAAA,SAEJE,KAAA,MACIP,cADJ,GAEIM,QAAO,IAIXN,IAAA,YACIA,MAAK,iBACLM,KAAO,QACPC,cAHJ,YAOIP,IAAK,YACLM,MAAO,iBACPC,KAAM,QACNF,cAAe,YAIfC,IAAO,cACPC,MAAM,cACNF,KAAAA,QAEJA,cAAA,OAGIE,IAAM,cACNF,MAAAA,cAEJE,KAAA,QACIP,cAAK,UAGLK,IAAAA,kBAEJC,MAAA,kBACIN,KAAK,OACLM,eAAO,IAKfN,IAAA,cACIM,MAASN,sBAxFjBO,KAAA,OA2FIG,eAAU,IAhBFV,IAAK,uBAqBbM,MAAS,yBAGTC,KAAA,QACAF,cAAe,OAGXL,IAAC,mBACDM,MAAA,wBACAC,KAAKN,OACRI,eAAA,IAnBD,SAASM,GAuBjB,OAAAA,EAAAX,MAAAA,IAnBQU,GAuBRE,KAAAA,IAAWnB,EAAAK,UAAAY,EAAAX,SAIKc,IAARC,KAAAA,IAAAA,eACuBC,IAA1BZ,KAFDD,IAEO,mBAGPC,KAAAS,UAAAT,KAAAD,IAAA,kBAGHC,KAAAD,IAAA,UAAA,UAAAC,KAAAD,IAAA,SApBWC,KAAKF,IAAI,QAASP,EAASsB,sBASvCJ,UAAW,SAASE,EAAOf,GACvB,IAAIQ,EAAOJ,KAAKD,IAAI,QAyBZe,UAAJV,EACAO,EAAKI,WAAKJ,GACDK,QAALF,IACHH,EAFDM,SAAAN,EAAA,KAjBJX,KAAKF,KAAMa,MAAOA,GAASf,MA8BnBsB,EAAazB,SAAb0B,WAAAxB,QArBRyB,MAAOC,EAMPC,kBAAmB,WAwBnBb,IAAAA,KAlBI,OAmBAT,KAAIQ,KAAI,SAASX,GACbW,EAAGQ,EAAAjB,IAAA,QAAAiB,EAAAjB,IAAA,WApBAe,GAMXS,UAAW,SAAS1B,GAwBpB2B,IAAAA,EAAAA,KAAAA,IAAmB3B,GACf,GAAIW,EACAA,OAAGA,EAAAT,IAAA,UAdXU,UAAW,SAASZ,EAAKc,EAAOf,GAC5B,IAAIY,EAAIR,KAAKD,IAAIF,GAyBrB4B,GAAAA,EACI,OAAAjB,EAAAC,UAAAE,EAAAf,IA3DZ4B,kBAAA,SAAA3B,EAAAK,GA6CY,IAAIM,EAAIR,KAAKD,IAAIF,GA0B7B,GAAAW,EAxBgB,OAAOA,EAAEV,IAAI,gBAAiBI,MAoCtCuB,6BAAqB,SAASC,EAATC,GAOjB,OALAA,IACIC,EAAAtC,EAAAuC,IAAAD,EAAA,SAAAE,GACH,OAAAxC,EAAAK,UAAAmC,GAAAnB,MAAAgB,EAAAG,EAAAjC,UAGD,IACIO,EADJwB,MAkBIG,EAAAtC,SAAAuC,KAAArC,QACAsC,UAAAA,uBAUAC,OAAA,WACA5C,IAAAA,EAAEyB,KAAKW,IAgHf,OA3GS1B,KAAAmC,WALDpB,KAAA,SAAAW,EAAAU,GAOAH,IAAAA,EAAAA,IAAII,UAAJJ,CAWY,IAAAK,EAAA,SAAAF,EACAG,EAAAA,EAAExC,IAAA,QA/CdY,EAAQe,EAAM3B,IAAI,SAiDNkC,EAAAM,EAAA,4BAAAC,SAAAC,GAKS,GAJTR,EAAAI,OAGAK,EAAAA,aAEQC,KAAA,MAAAL,GACAM,KAAAlB,EAAA3B,IAAA,SAAA,MAHR,SACSK,EA7CrB6B,EAAII,OA2DQE,EAAA,6BAzDHI,KAAK,KAAML,GA2DRK,KAAA,OAAAL,GACAI,KAAIG,UAAMlC,SAET,GAFD,SAECP,EAED6B,EAAAI,OACAE,EAAAA,wBAGQG,KAAAA,KAAAJ,GACAC,IAAAA,GAJRM,MAAA,WAtDAN,EAAEvC,MAAM8C,iBAkEX,GAlDT,WAAA1C,EAAA,CAmDI,IAAA0C,EAAAP,EAAA,cAAAI,KAAA,KAAAL,GACAS,EAAAA,KAAAA,EAAAA,IAAAA,WAAmB,SAAAC,GA7DnBT,EAAE,aAkEFK,KAAAI,EAAA7C,OACAuC,KACI,QAAAM,EAAArC,OAjEC6B,SAASM,KAsEdG,EAAAA,IAAAA,GAhEJhB,EAAAI,OAmEIa,QAnEJ,GAsEIC,UAtEJ/C,EAsEiBgD,CAETC,IAAAA,EAF+Bd,EAAA,UAAAC,SAAAP,GAG/BqB,EAAAA,EAAAA,aACAC,KAAAA,KAAO5C,GA1EfgC,KAAA,OAAAL,GAISkB,IAAI7C,GAyEb8C,IAAA,QAAA,QACAC,SAAcrB,GAvELQ,MAAM,SAASc,GA0EvBpB,EAAA,YAASqB,YAAgB,MACtB,IAAAlB,EAAAH,EAAAvC,MADJ6D,SAAA,YAOGC,SAAA,MACCzB,EAMPoB,KAGgBM,KAChBxB,EAAAvC,MAAAgE,WAAAD,KAlJLxB,EAAAvC,MAAAiE,QAqEgC,EAgFhCC,IA9J+C3B,EAAAvC,MAAAgE,WAAAE,IAiFf3B,EAAEG,GAAKW,SAAW,EAgFtDd,EAAAvC,MAAAqD,SAAA,IA7E6Bc,OAoFjBzB,EAAa0B,MAAb,SAAAT,GACAA,EAAiBU,oBAIPC,EAAAA,UAAOC,KACZC,qBARb,WAUsB9B,EAAA0B,OACMK,EAAAA,UAAWH,OAC3B,wBAZZX,EAAAU,oBAqBAtB,EAAeR,EAAA,kCA9EEuB,SAAS,4BAgF1BtB,SAAAkB,GACagB,KAAAA,QAAWC,wBACfzC,UAEF0C,EAAMT,EACFU,6DAEErC,SAAAkB,GACLoB,OADK7B,EAAAV,EAHb,iEAjM+CC,SAAAE,GA8HnCS,GAHYZ,EAgF5B,qCA9EkBC,SAASE,GACAH,EAAEa,WAAWH,GAgFxCuB,MAAkB,IACHnB,OAAX,IACKlB,SAAgB4C,EACZ/D,MAAQjB,KAIT2D,EAAI1C,OAAYuB,EAAA,UAAYkB,IAAA,QAAQ,SAGpCzC,SAAAA,GACH+B,EAAAF,MAAA,WATLe,EAAAoB,SAWHzF,EAAAsB,sBAHWG,CAMTmC,QAEHjC,EAAAA,OACAa,EAAAA,aAHJY,KAAA,KAAAL,GA1bJK,KAAA,OAAAL,GAiX6BkB,IAAI7C,IAIbe,EAAMuD,MACNhD,EAAII,OAAOE,EAAE,uBAAuBK,KAAKlB,EAAMuD,UAIhDjF,MAMXkF,gBAAiB,SAASL,GAEtB,IAAIM,EAAOnF,KACPoF,EAAY,WACRC,OAAOT,MAAMR,OACb7B,EAAE+C,QAAQhB,OAAO,6BAErBiB,EAAQ,WACJF,OAAOT,MAAMR,OACb7B,EAAE+C,QAAQhB,OAAO,4BACjBa,EAAKX,oBAabjC,EAAE+C,QAAQf,KAAK,2BAXO,SAASZ,GACQ,MAA1BA,EAAE6B,SAAW7B,EAAEc,OAEhBW,IACkC,MAA1BzB,EAAE6B,SAAW7B,EAAEc,QAEvBc,MAQuB,IAA/BvF,KAAKyF,IAAIf,WAAWC,QACpB3E,KAAKkC,SAETmD,OAAOT,MAAMT,MACTU,MAAOA,GAAS,YAChBa,KAAM1F,KAAKyF,IACXE,SACIb,OAAQM,EACRQ,GAAIL,MAQhBf,iBAAkB,WACd,IAAIW,EAAOnF,KACXA,KAAKmC,WAAWpB,KAAK,SAASC,EAASoB,GACnC,IAAKpB,EAAQjB,IAAI,UAAW,CAExB,IAAIuC,EAAK,SAAWF,EAChBzB,EAAQwE,EAAKM,IAAIxF,KAAK,IAAMqC,GAAIkB,MACR,SAAxBxC,EAAQjB,IAAI,UACZY,EAAQwE,EAAKM,IAAIxF,KAAK,IAAMqC,GAAIuD,GAAG,aAEvC7E,EAAQP,UAAUE,SAMlC,OACIU,cAAeA,EACfH,wBAAyBA,EACzBa,4BAA6BA","file":"../../scripts/utils/config.js","sourcesContent":["define([\"libs/underscore\", \"viz/trackster/util\", \"utils/config\"], function(\n    _,\n    util_mod,\n    config_mod\n) {\n    /**\n * A configuration setting. Currently key is used as id.\n */\n    var ConfigSetting = Backbone.Model.extend({\n        initialize: function(options) {\n            // Use key as id for now.\n            var key = this.get(\"key\");\n            this.set(\"id\", key);\n\n            // Set defaults based on key.\n            var defaults = _.find(\n                [\n                    {\n                        key: \"name\",\n                        label: \"Name\",\n                        type: \"text\",\n                        default_value: \"\"\n                    },\n                    {\n                        key: \"color\",\n                        label: \"Color\",\n                        type: \"color\",\n                        default_value: null\n                    },\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"float\",\n                        default_value: null\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"float\",\n                        default_value: null\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 32,\n                        hidden: true\n                    },\n                    {\n                        key: \"pos_color\",\n                        label: \"Positive Color\",\n                        type: \"color\",\n                        default_value: \"#FF8C00\"\n                    },\n                    {\n                        key: \"neg_color\",\n                        label: \"Negative Color\",\n                        type: \"color\",\n                        default_value: \"#4169E1\"\n                    },\n                    {\n                        key: \"block_color\",\n                        label: \"Block color\",\n                        type: \"color\",\n                        default_value: null\n                    },\n                    {\n                        key: \"label_color\",\n                        label: \"Label color\",\n                        type: \"color\",\n                        default_value: \"black\"\n                    },\n                    {\n                        key: \"show_insertions\",\n                        label: \"Show insertions\",\n                        type: \"bool\",\n                        default_value: false\n                    },\n                    {\n                        key: \"show_counts\",\n                        label: \"Show summary counts\",\n                        type: \"bool\",\n                        default_value: true\n                    },\n                    {\n                        key: \"reverse_strand_color\",\n                        label: \"Antisense strand color\",\n                        type: \"color\",\n                        default_value: null\n                    },\n                    {\n                        key: \"show_differences\",\n                        label: \"Show differences only\",\n                        type: \"bool\",\n                        default_value: true\n                    }\n                ],\n                function(s) {\n                    return s.key === key;\n                }\n            );\n            if (defaults) {\n                this.set(_.extend({}, defaults, options));\n            }\n\n            if (\n                this.get(\"value\") === undefined &&\n                this.get(\"default_value\") !== undefined\n            ) {\n                // Use default to set value (if present).\n                this.set_value(this.get(\"default_value\"));\n\n                // If no default value for color config, set random color.\n                if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                    // For color setting, set random color.\n                    this.set(\"value\", util_mod.get_random_color());\n                }\n            }\n        },\n\n        /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n        set_value: function(value, options) {\n            var type = this.get(\"type\");\n\n            if (type === \"float\") {\n                value = parseFloat(value);\n            } else if (type === \"int\") {\n                value = parseInt(value, 10);\n            }\n            // TODO: handle casting from string to bool?\n\n            this.set({ value: value }, options);\n        }\n    });\n\n    /**\n * Collection of config settings.\n */\n    var ConfigSettingCollection = Backbone.Collection.extend(\n        {\n            model: ConfigSetting,\n\n            /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n            to_key_value_dict: function() {\n                var rval = {};\n                this.each(function(setting) {\n                    rval[setting.get(\"key\")] = setting.get(\"value\");\n                });\n\n                return rval;\n            },\n\n            /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n            get_value: function(key) {\n                var s = this.get(key);\n                if (s) {\n                    return s.get(\"value\");\n                }\n\n                return undefined;\n            },\n\n            /**\n     * Set value for a setting.\n     */\n            set_value: function(key, value, options) {\n                var s = this.get(key);\n                if (s) {\n                    return s.set_value(value, options);\n                }\n\n                return undefined;\n            },\n\n            /**\n      * Set default value for a setting.\n      */\n            set_default_value: function(key, default_value) {\n                var s = this.get(key);\n                if (s) {\n                    return s.set(\"default_value\", default_value);\n                }\n\n                return undefined;\n            }\n        },\n        {\n            /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n            from_models_and_saved_values: function(models, saved_values) {\n                // If there are saved values, copy models and update with saved values.\n                if (saved_values) {\n                    models = _.map(models, function(m) {\n                        return _.extend({}, m, { value: saved_values[m.key] });\n                    });\n                }\n\n                return new ConfigSettingCollection(models);\n            }\n        }\n    );\n\n    /**\n * Viewer for config settings collection.\n */\n    var ConfigSettingCollectionView = Backbone.View.extend({\n        className: \"config-settings-view\",\n\n        /**\n     * Renders form for editing configuration settings.\n     */\n        render: function() {\n            var container = this.$el;\n\n            this.collection.each(function(param, index) {\n                // Hidden params have no representation in the form\n                if (param.get(\"hidden\")) {\n                    return;\n                }\n\n                // Build row for param.\n                var id = \"param_\" + index,\n                    type = param.get(\"type\"),\n                    value = param.get(\"value\");\n                var row = $(\"<div class='form-row' />\").appendTo(container);\n                row.append(\n                    $(\"<label />\")\n                        .attr(\"for\", id)\n                        .text(param.get(\"label\") + \":\")\n                );\n                // Draw parameter as checkbox\n                if (type === \"bool\") {\n                    row.append(\n                        $('<input type=\"checkbox\" />')\n                            .attr(\"id\", id)\n                            .attr(\"name\", id)\n                            .attr(\"checked\", value)\n                    );\n                } else if (type === \"text\") {\n                    // Draw parameter as textbox\n                    row.append(\n                        $('<input type=\"text\"/>')\n                            .attr(\"id\", id)\n                            .val(value)\n                            .click(function() {\n                                $(this).select();\n                            })\n                    );\n                } else if (type === \"select\") {\n                    // Draw parameter as select area\n                    var select = $(\"<select />\").attr(\"id\", id);\n                    _.each(param.get(\"options\"), function(option) {\n                        $(\"<option/>\")\n                            .text(option.label)\n                            .attr(\"value\", option.value)\n                            .appendTo(select);\n                    });\n                    select.val(value);\n                    row.append(select);\n                } else if (type === \"color\") {\n                    // Draw parameter as color picker\n                    var container_div = $(\"<div/>\").appendTo(row),\n                        input = $(\"<input />\")\n                            .attr(\"id\", id)\n                            .attr(\"name\", id)\n                            .val(value)\n                            .css(\"float\", \"left\")\n                            .appendTo(container_div)\n                            .click(function(e) {\n                                // Hide other pickers.\n                                $(\".tooltip\").removeClass(\"in\");\n\n                                // Show input's color picker.\n                                var tip = $(this)\n                                    .siblings(\".tooltip\")\n                                    .addClass(\"in\");\n                                tip\n                                    .css({\n                                        // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                        // top: $(this).position().top + $(this.height)\n                                        left:\n                                            $(this).position().left +\n                                            $(this).width() +\n                                            5,\n                                        top:\n                                            $(this).position().top -\n                                            $(tip).height() / 2 +\n                                            $(this).height() / 2\n                                    })\n                                    .show();\n\n                                // Click management:\n\n                                // Keep showing tip if clicking in tip.\n                                tip.click(function(e) {\n                                    e.stopPropagation();\n                                });\n\n                                // Hide tip if clicking outside of tip.\n                                $(document).bind(\n                                    \"click.color-picker\",\n                                    function() {\n                                        tip.hide();\n                                        $(document).unbind(\n                                            \"click.color-picker\"\n                                        );\n                                    }\n                                );\n\n                                // No propagation to avoid triggering document click (and tip hiding) above.\n                                e.stopPropagation();\n                            }),\n                        // Icon for setting a new random color; behavior set below.\n                        new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                            .addClass(\"icon-button arrow-circle\")\n                            .appendTo(container_div)\n                            .attr(\"title\", \"Set new random color\")\n                            .tooltip(),\n                        // Color picker in tool tip style.\n                        tip = $(\n                            \"<div class='tooltip right' style='position: absolute;' />\"\n                        )\n                            .appendTo(container_div)\n                            .hide(),\n                        // Inner div for padding purposes\n                        tip_inner = $(\n                            \"<div class='tooltip-inner' style='text-align: inherit'></div>\"\n                        ).appendTo(tip),\n                        tip_arrow = $(\n                            \"<div class='tooltip-arrow'></div>\"\n                        ).appendTo(tip),\n                        farb_obj = $.farbtastic(tip_inner, {\n                            width: 100,\n                            height: 100,\n                            callback: input,\n                            color: value\n                        });\n\n                    // Clear floating.\n                    container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                    // Use function to fix farb_obj value.\n                    (function(fixed_farb_obj) {\n                        new_color_icon.click(function() {\n                            fixed_farb_obj.setColor(\n                                util_mod.get_random_color()\n                            );\n                        });\n                    })(farb_obj);\n                } else {\n                    row.append(\n                        $(\"<input />\")\n                            .attr(\"id\", id)\n                            .attr(\"name\", id)\n                            .val(value)\n                    );\n                }\n                // Help text\n                if (param.help) {\n                    row.append($(\"<div class='help'/>\").text(param.help));\n                }\n            });\n\n            return this;\n        },\n\n        /**\n     * Render view in modal.\n     */\n        render_in_modal: function(title) {\n            // Set up handlers for cancel, ok button and for handling esc key.\n            var self = this,\n                cancel_fn = function() {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                },\n                ok_fn = function() {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                    self.update_from_form();\n                },\n                check_enter_esc = function(e) {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n\n            // Set keypress handler.\n            $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n            // Show modal.\n            if (this.$el.children().length === 0) {\n                this.render();\n            }\n            Galaxy.modal.show({\n                title: title || \"Configure\",\n                body: this.$el,\n                buttons: {\n                    Cancel: cancel_fn,\n                    OK: ok_fn\n                }\n            });\n        },\n\n        /**\n     * Update settings with new values entered via form.\n     */\n        update_from_form: function() {\n            var self = this;\n            this.collection.each(function(setting, index) {\n                if (!setting.get(\"hidden\")) {\n                    // Set value from view.\n                    var id = \"param_\" + index;\n                    var value = self.$el.find(\"#\" + id).val();\n                    if (setting.get(\"type\") === \"bool\") {\n                        value = self.$el.find(\"#\" + id).is(\":checked\");\n                    }\n                    setting.set_value(value);\n                }\n            });\n        }\n    });\n\n    return {\n        ConfigSetting: ConfigSetting,\n        ConfigSettingCollection: ConfigSettingCollection,\n        ConfigSettingCollectionView: ConfigSettingCollectionView\n    };\n});\n"]}