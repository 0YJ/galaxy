{"version":3,"sources":["utils/config.js"],"names":["_","ConfigSetting","Backbone","Model","extend","initialize","options","key","this","get","set","defaults","find","label","type","default_value","mode","hidden","s","undefined","_util2","default","get_random_color","set_value","value","parseFloat","parseInt","ConfigSettingCollection","Collection","model","to_key_value_dict","rval","each","setting","get_value","set_default_value","from_models_and_saved_values","saved_values","models","m","ConfigSettingCollectionView","View","className","render","container","$el","buttons","param","index","collection","row","$","appendTo","append","attr","id","text","val","click","select","option","container_div","input","tip","left","top","show","css","e","removeClass","siblings","document","stopPropagation","position","width","height","bind","hide","unbind","new_color_icon","addClass","tooltip","tip_inner","self","render_in_modal","farbtastic","cancel_fn","modal","callback","color","update_from_form","keyCode","farb_obj","help","title","ok_fn","Galaxy","window","which","children","length","body","Cancel","OK","is"],"mappings":"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","file":"../../scripts/utils/config.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport util_mod from \"viz/trackster/util\";\nimport config_mod from \"utils/config\";\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get(\"key\");\n        this.set(\"id\", key);\n\n        // Set defaults based on key.\n        var defaults = _.find(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"color\",\n                    label: \"Color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"min_value\",\n                    label: \"Min Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"max_value\",\n                    label: \"Max Value\",\n                    type: \"float\",\n                    default_value: null\n                },\n                {\n                    key: \"mode\",\n                    type: \"string\",\n                    default_value: this.mode,\n                    hidden: true\n                },\n                {\n                    key: \"height\",\n                    type: \"int\",\n                    default_value: 32,\n                    hidden: true\n                },\n                {\n                    key: \"pos_color\",\n                    label: \"Positive Color\",\n                    type: \"color\",\n                    default_value: \"#FF8C00\"\n                },\n                {\n                    key: \"neg_color\",\n                    label: \"Negative Color\",\n                    type: \"color\",\n                    default_value: \"#4169E1\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"label_color\",\n                    label: \"Label color\",\n                    type: \"color\",\n                    default_value: \"black\"\n                },\n                {\n                    key: \"show_insertions\",\n                    label: \"Show insertions\",\n                    type: \"bool\",\n                    default_value: false\n                },\n                {\n                    key: \"show_counts\",\n                    label: \"Show summary counts\",\n                    type: \"bool\",\n                    default_value: true\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\",\n                    default_value: null\n                },\n                {\n                    key: \"show_differences\",\n                    label: \"Show differences only\",\n                    type: \"bool\",\n                    default_value: true\n                }\n            ],\n            function(s) {\n                return s.key === key;\n            }\n        );\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (\n            this.get(\"value\") === undefined &&\n            this.get(\"default_value\") !== undefined\n        ) {\n            // Use default to set value (if present).\n            this.set_value(this.get(\"default_value\"));\n\n            // If no default value for color config, set random color.\n            if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                // For color setting, set random color.\n                this.set(\"value\", util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get(\"type\");\n\n        if (type === \"float\") {\n            value = parseFloat(value);\n        } else if (type === \"int\") {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({ value: value }, options);\n    }\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend(\n    {\n        model: ConfigSetting,\n\n        /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n        to_key_value_dict: function() {\n            var rval = {};\n            this.each(function(setting) {\n                rval[setting.get(\"key\")] = setting.get(\"value\");\n            });\n\n            return rval;\n        },\n\n        /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n        get_value: function(key) {\n            var s = this.get(key);\n            if (s) {\n                return s.get(\"value\");\n            }\n\n            return undefined;\n        },\n\n        /**\n     * Set value for a setting.\n     */\n        set_value: function(key, value, options) {\n            var s = this.get(key);\n            if (s) {\n                return s.set_value(value, options);\n            }\n\n            return undefined;\n        },\n\n        /**\n      * Set default value for a setting.\n      */\n        set_default_value: function(key, default_value) {\n            var s = this.get(key);\n            if (s) {\n                return s.set(\"default_value\", default_value);\n            }\n\n            return undefined;\n        }\n    },\n    {\n        /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n        from_models_and_saved_values: function(models, saved_values) {\n            // If there are saved values, copy models and update with saved values.\n            if (saved_values) {\n                models = _.map(models, function(m) {\n                    return _.extend({}, m, { value: saved_values[m.key] });\n                });\n            }\n\n            return new ConfigSettingCollection(models);\n        }\n    }\n);\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: \"config-settings-view\",\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each(function(param, index) {\n            // Hidden params have no representation in the form\n            if (param.get(\"hidden\")) {\n                return;\n            }\n\n            // Build row for param.\n            var id = \"param_\" + index,\n                type = param.get(\"type\"),\n                value = param.get(\"value\");\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append(\n                $(\"<label />\")\n                    .attr(\"for\", id)\n                    .text(param.get(\"label\") + \":\")\n            );\n            // Draw parameter as checkbox\n            if (type === \"bool\") {\n                row.append(\n                    $('<input type=\"checkbox\" />')\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .attr(\"checked\", value)\n                );\n            } else if (type === \"text\") {\n                // Draw parameter as textbox\n                row.append(\n                    $('<input type=\"text\"/>')\n                        .attr(\"id\", id)\n                        .val(value)\n                        .click(function() {\n                            $(this).select();\n                        })\n                );\n            } else if (type === \"select\") {\n                // Draw parameter as select area\n                var select = $(\"<select />\").attr(\"id\", id);\n                _.each(param.get(\"options\"), function(option) {\n                    $(\"<option/>\")\n                        .text(option.label)\n                        .attr(\"value\", option.value)\n                        .appendTo(select);\n                });\n                select.val(value);\n                row.append(select);\n            } else if (type === \"color\") {\n                // Draw parameter as color picker\n                var container_div = $(\"<div/>\").appendTo(row),\n                    input = $(\"<input />\")\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .val(value)\n                        .css(\"float\", \"left\")\n                        .appendTo(container_div)\n                        .click(function(e) {\n                            // Hide other pickers.\n                            $(\".tooltip\").removeClass(\"in\");\n\n                            // Show input's color picker.\n                            var tip = $(this)\n                                .siblings(\".tooltip\")\n                                .addClass(\"in\");\n                            tip\n                                .css({\n                                    // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                    // top: $(this).position().top + $(this.height)\n                                    left:\n                                        $(this).position().left +\n                                        $(this).width() +\n                                        5,\n                                    top:\n                                        $(this).position().top -\n                                        $(tip).height() / 2 +\n                                        $(this).height() / 2\n                                })\n                                .show();\n\n                            // Click management:\n\n                            // Keep showing tip if clicking in tip.\n                            tip.click(function(e) {\n                                e.stopPropagation();\n                            });\n\n                            // Hide tip if clicking outside of tip.\n                            $(document).bind(\"click.color-picker\", function() {\n                                tip.hide();\n                                $(document).unbind(\"click.color-picker\");\n                            });\n\n                            // No propagation to avoid triggering document click (and tip hiding) above.\n                            e.stopPropagation();\n                        }),\n                    // Icon for setting a new random color; behavior set below.\n                    new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                        .addClass(\"icon-button arrow-circle\")\n                        .appendTo(container_div)\n                        .attr(\"title\", \"Set new random color\")\n                        .tooltip(),\n                    // Color picker in tool tip style.\n                    tip = $(\n                        \"<div class='tooltip right' style='position: absolute;' />\"\n                    )\n                        .appendTo(container_div)\n                        .hide(),\n                    // Inner div for padding purposes\n                    tip_inner = $(\n                        \"<div class='tooltip-inner' style='text-align: inherit'></div>\"\n                    ).appendTo(tip),\n                    tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(\n                        tip\n                    ),\n                    farb_obj = $.farbtastic(tip_inner, {\n                        width: 100,\n                        height: 100,\n                        callback: input,\n                        color: value\n                    });\n\n                // Clear floating.\n                container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (function(fixed_farb_obj) {\n                    new_color_icon.click(function() {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n            } else {\n                row.append(\n                    $(\"<input />\")\n                        .attr(\"id\", id)\n                        .attr(\"name\", id)\n                        .val(value)\n                );\n            }\n            // Help text\n            if (param.help) {\n                row.append($(\"<div class='help'/>\").text(param.help));\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this,\n            cancel_fn = function() {\n                Galaxy.modal.hide();\n                $(window).unbind(\"keypress.check_enter_esc\");\n            },\n            ok_fn = function() {\n                Galaxy.modal.hide();\n                $(window).unbind(\"keypress.check_enter_esc\");\n                self.update_from_form();\n            },\n            check_enter_esc = function(e) {\n                if ((e.keyCode || e.which) === 27) {\n                    // Escape key\n                    cancel_fn();\n                } else if ((e.keyCode || e.which) === 13) {\n                    // Enter key\n                    ok_fn();\n                }\n            };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                Cancel: cancel_fn,\n                OK: ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each(function(setting, index) {\n            if (!setting.get(\"hidden\")) {\n                // Set value from view.\n                var id = \"param_\" + index;\n                var value = self.$el.find(\"#\" + id).val();\n                if (setting.get(\"type\") === \"bool\") {\n                    value = self.$el.find(\"#\" + id).is(\":checked\");\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n});\n\nexport default {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n"]}