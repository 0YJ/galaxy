{"version":3,"sources":["utils/ajax-queue.js"],"names":["define","AjaxQueue","initialFunctions","self","this","deferred","jQuery","Deferred","queue","responses","numToProcess","running","init","start","NamedAjaxQueue","names","call","prototype","forEach","fn","add","index","length","push","fnIndex","xhr","done","response","notify","curr","total","always","shift","stop","causeFail","msg","reject","resolve","fail","progress","create","constructor","obj","hasOwnProperty","Error","JSON","stringify","name","clear"],"mappings":"AAAAA,UACG,WAWH,QAASC,GAAWC,GAEhB,GAAIC,GAAOC,IAeX,OAbAD,GAAKE,SAAWC,OAAOC,WAEvBJ,EAAKK,SAELL,EAAKM,aAELN,EAAKO,aAAe,EAEpBP,EAAKQ,SAAU,EAEfR,EAAKS,KAAMV,OACXC,EAAKU,QAEEV,EAwGX,QAASW,GAAgBZ,GACrB,GAAIC,GAAOC,IAGX,OAFAD,GAAKY,SACLd,EAAUe,KAAMZ,KAAMF,GACfC,EAqCP,MA7IJF,GAAUgB,UAAUL,KAAO,SAAeV,GACtC,GAAIC,GAAOC,IACXF,GAAiBgB,QAAS,SAAUC,GAChChB,EAAKiB,IAAKD,MAKlBlB,EAAUgB,UAAUG,IAAM,SAAcD,GAEpC,GAAIhB,GAAOC,KACPiB,EAAQjB,KAAKI,MAAMc,MAqBvB,OApBAlB,MAAKM,cAAgB,EAErBN,KAAKI,MAAMe,KAAM,WACb,GAAIC,GAAUH,EACVI,EAAMN,GAEVM,GAAIC,KAAM,SAAUC,GAChBxB,EAAKE,SAASuB,QAASC,KAAML,EAASM,MAAO3B,EAAKO,aAAciB,SAAUA,MAI9EF,EAAIM,OAAQ,SAAUJ,GAClBxB,EAAKM,UAAUc,KAAMI,GACjBxB,EAAKK,MAAMc,OACXnB,EAAKK,MAAMwB,UAEX7B,EAAK8B,WAIV7B,MAIXH,EAAUgB,UAAUJ,MAAQ,WAKxB,MAJIT,MAAKI,MAAMc,SACXlB,KAAKO,SAAU,EACfP,KAAKI,MAAMwB,WAER5B,MAOXH,EAAUgB,UAAUgB,KAAO,SAAeC,EAAWC,GAYjD,MAVA/B,MAAKO,SAAU,EACfP,KAAKI,SACD0B,EAEA9B,KAAKC,SAAS+B,OAAQD,GAEtB/B,KAAKC,SAASgC,QAASjC,KAAKK,WAEhCL,KAAKM,aAAe,EACpBN,KAAKC,SAAWC,OAAOC,WAChBH,MAKXH,EAAUgB,UAAUS,KAAO,SAAeP,GACtC,MAAOf,MAAKC,SAASqB,KAAMP,IAG/BlB,EAAUgB,UAAUqB,KAAO,SAAenB,GACtC,MAAOf,MAAKC,SAASiC,KAAMnB,IAG/BlB,EAAUgB,UAAUc,OAAS,SAAiBZ,GAC1C,MAAOf,MAAKC,SAAS0B,OAAQZ,IAGjClB,EAAUgB,UAAUsB,SAAW,SAAmBpB,GAC9C,MAAOf,MAAKC,SAASkC,SAAUpB,IAMnClB,EAAUuC,OAAS,SAAiBtC,GAChC,MAAO,IAAID,GAAWC,GAAmBG,UAqB7CS,EAAeG,UAAY,GAAIhB,GAC/Ba,EAAeG,UAAUwB,YAAc3B,EAGvCA,EAAeG,UAAUG,IAAM,SAAcsB,GAGzC,IAAOA,EAAIC,eAAgB,UAAYD,EAAIC,eAAgB,MACvD,KAAM,IAAIC,OAAO,oEAAsEC,KAAKC,UAAWJ,GAE3G,KAAItC,KAAKW,MAAM4B,eAAgBD,EAAIK,MAMnC,MAFA3C,MAAKW,MAAO2B,EAAIK,OAAS,EAElB9C,EAAUgB,UAAUG,IAAIJ,KAAMZ,KAAMsC,EAAIvB,KAKnDL,EAAeG,UAAU+B,MAAQ,WAE7B,MADA5C,MAAKW,SACEX,MAMXU,EAAe0B,OAAS,SAAiBtC,GACrC,MAAO,IAAIY,GAAgBZ,GAAmBG,WAM1CJ,UAAkBA,EAClBa,eAAkBA","file":"../../scripts/utils/ajax-queue.js","sourcesContent":["define([\n], function(){\n//ASSUMES: jquery\n//=============================================================================\n/** @class AjaxQueue\n *  Class that allows queueing functions that return jQuery promises (such\n *  as ajax calls). Each function waits for the previous to complete before\n *  being called\n *\n *  @constructor accepts a list of functions and automatically begins\n *      processing them\n */\nfunction AjaxQueue( initialFunctions ){\n    //TODO: possibly rename to DeferredQueue\n    var self = this;\n    /** the main deferred for the entire queue - note: also sends notifications of progress */\n    self.deferred = jQuery.Deferred();\n    /** the queue array of functions */\n    self.queue = [];\n    /** cache the response from each deferred call - error or success */\n    self.responses = [];\n    /** total number of fn's to process */\n    self.numToProcess = 0;\n    /** is the queue processing/waiting for any calls to return? */\n    self.running = false;\n\n    self.init( initialFunctions || [] );\n    self.start();\n\n    return self;\n}\n\n/** add all fns in initialFunctions (if any) to the queue */\nAjaxQueue.prototype.init = function init( initialFunctions ){\n    var self = this;\n    initialFunctions.forEach( function( fn ){\n        self.add( fn );\n    });\n};\n\n/** add a fn to the queue */\nAjaxQueue.prototype.add = function add( fn ){\n    //console.debug( 'AjaxQueue.prototype.add:', fn );\n    var self = this,\n        index = this.queue.length;\n    this.numToProcess += 1;\n\n    this.queue.push( function(){\n        var fnIndex = index,\n            xhr = fn();\n        // if successful, notify using the deferred to allow tracking progress\n        xhr.done( function( response ){\n            self.deferred.notify({ curr: fnIndex, total: self.numToProcess, response: response });\n        });\n        // (regardless of previous error or success) if not last ajax call, shift and call the next\n        //  if last fn, resolve deferred\n        xhr.always( function( response ){\n            self.responses.push( response );\n            if( self.queue.length ){\n                self.queue.shift()();\n            } else {\n                self.stop();\n            }\n        });\n    });\n    return this;\n};\n\n/** start processing the queue */\nAjaxQueue.prototype.start = function start(){\n    if( this.queue.length ){\n        this.running = true;\n        this.queue.shift()();\n    }\n    return this;\n};\n\n/** stop the queue\n *  @param {boolean} causeFail  cause an error/fail on the main deferred\n *  @param {String} msg         message to send when rejecting the main deferred\n */\nAjaxQueue.prototype.stop = function stop( causeFail, msg ){\n    //TODO: doesn't abort current call\n    this.running = false;\n    this.queue = [];\n    if( causeFail ){\n        //TODO: spliced args instead\n        this.deferred.reject( msg );\n    } else {\n        this.deferred.resolve( this.responses );\n    }\n    this.numToProcess = 0;\n    this.deferred = jQuery.Deferred();\n    return this;\n};\n\n// only a handful of the deferred interface for now - possible YAGNI\n/** implement done from the jq deferred interface */\nAjaxQueue.prototype.done = function done( fn ){\n    return this.deferred.done( fn );\n};\n/** implement fail from the jq deferred interface */\nAjaxQueue.prototype.fail = function fail( fn ){\n    return this.deferred.fail( fn );\n};\n/** implement always from the jq deferred interface */\nAjaxQueue.prototype.always = function always( fn ){\n    return this.deferred.always( fn );\n};\n/** implement progress from the jq deferred interface */\nAjaxQueue.prototype.progress = function progress( fn ){\n    return this.deferred.progress( fn );\n};\n\n/** shortcut constructor / fire and forget\n *  @returns {Deferred} the queue's main deferred\n */\nAjaxQueue.create = function create( initialFunctions ){\n    return new AjaxQueue( initialFunctions ).deferred;\n};\n\n\n//=============================================================================\n/** @class NamedAjaxQueue\n *  @augments AjaxQueue\n *  Allows associating a name with a deferring fn and prevents adding deferring\n *  fns if the name has already been used. Useful to prevent build up of duplicate\n *  async calls.\n *  Both the array initialFunctions sent to constructor and any added later with\n *  add() should be objects (NOT functions) of the form:\n *  { name: some unique id,\n *    fn:   the deferring fn or ajax call }\n */\nfunction NamedAjaxQueue( initialFunctions ){\n    var self = this;\n    self.names = {};\n    AjaxQueue.call( this, initialFunctions );\n    return self;\n}\nNamedAjaxQueue.prototype = new AjaxQueue();\nNamedAjaxQueue.prototype.constructor = NamedAjaxQueue;\n\n/** add the obj.fn to the queue if obj.name hasn't been used before */\nNamedAjaxQueue.prototype.add = function add( obj ){\n    //console.debug( 'NamedAjaxQueue.adding:', obj )\n    //console.debug( 'NamedAjaxQueue.prototype.add:', obj );\n    if( !( obj.hasOwnProperty( 'name' ) && obj.hasOwnProperty( 'fn' ) ) ){\n        throw new Error( 'NamedAjaxQueue.add requires an object with both \"name\" and \"fn\": ' + JSON.stringify( obj ) );\n    }\n    if( this.names.hasOwnProperty( obj.name ) ){\n        //console.warn( 'name has been used:', obj.name );\n        return;\n    }\n    this.names[ obj.name ] = true;\n    //console.debug( '\\t names: ', this.names )\n    return AjaxQueue.prototype.add.call( this, obj.fn );\n    //console.debug( '\\t queue: ', this.queue.length );\n};\n\n/** override to remove names */\nNamedAjaxQueue.prototype.clear = function clear(){\n    this.names = {};\n    return this;\n};\n\n/** shortcut constructor / fire and forget\n *  @returns {Deferred} the queue's main deferred\n */\nNamedAjaxQueue.create = function create( initialFunctions ){\n    return new NamedAjaxQueue( initialFunctions ).deferred;\n};\n\n\n//=============================================================================\n    return {\n        AjaxQueue       : AjaxQueue,\n        NamedAjaxQueue  : NamedAjaxQueue\n    };\n});\n"]}