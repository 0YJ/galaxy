{"version":3,"sources":["utils/utils.js"],"names":["define","iframe","src","deepeach","dict","callback","i","_","isObject","d","new_dict","linkify","inputText","replacedText","replacePattern1","replacePattern2","replacePattern3","replace","clone","obj","JSON","parse","stringify","isJSON","text","test","sanitize","content","html","isEmpty","value","Array","length","undefined","indexOf","textify","lst","$","isArray","toString","pos","substr","get","options","top","__utils__get__","cache_key","cache","debug","url","request","data","response","success","error","status","ajaxConfig","contentType","type","isEmptyObject","dataType","ajax","done","console","e","fail","response_text","jQuery","parseJSON","responseText","always","complete","cssGetAttribute","classname","name","el","appendTo","css","remove","cssLoadFile","Galaxy","root","merge","optionsDefault","defaults","roundToDecimalPlaces","number","numPlaces","placesMultiplier","Math","round","bytesToString","size","normal_font","numberPlaces","unit","tb","gb","mb","kb","rounded","uid","__utils__uid__","time","Date","getHours","minutes","getMinutes","datetime","getDate","getMonth","getFullYear","hours"],"mappings":"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","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n*/\ndefine( [], function() {\n\n    /** Builds a basic iframe */\n    function iframe( src ) {\n        return '<iframe src=\"' + src + '\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>';\n    }\n\n    /** Traverse through json */\n    function deepeach( dict, callback ) {\n        for( var i in dict ) {\n            var d = dict[ i ];\n            if( _.isObject( d ) ) {\n                var new_dict = callback( d );\n                new_dict && ( dict[ i ] = new_dict );\n                deepeach( d, callback );\n            }\n        }\n    }\n\n    /** Identifies urls and replaces them with anchors */\n    function linkify( inputText ) {\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n        // URLs starting with http://, https://, or ftp://\n        replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = inputText.replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n        // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n        replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n        // Change email addresses to mailto:: links.\n        replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\n\n        return replacedText;\n    }\n\n    /** Clone */\n    function clone( obj ) {\n        return JSON.parse( JSON.stringify( obj ) || null );\n    }\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n    };\n\n    /**\n     * Sanitize/escape a string\n     * @param{String}   content - Content to be sanitized\n     */\n    function sanitize(content) {\n        return $('<div/>').text(content).html();\n    };\n\n    /**\n     * Checks if a value or list of values is `empty`\n     * usually used for selectable options\n     * @param{String}   value - Value or list to be validated\n     */\n    function isEmpty ( value ) {\n        if ( !( value instanceof Array ) ) {\n            value = [ value ];\n        }\n        if ( value.length === 0 ) {\n            return true;\n        }\n        for( var i in value ) {\n            if ( [ '__null__', '__undefined__', null, undefined ].indexOf( value[ i ] ) > -1 ) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    /**\n     * Convert list to pretty string\n     * @param{String}   lst - List of strings to be converted in human readable list sentence\n     */\n    function textify( lst ) {\n        if ( $.isArray( lst ) ) {\n            var lst = lst.toString().replace( /,/g, ', ' );\n            var pos = lst.lastIndexOf( ', ' );\n            if ( pos != -1 ) {\n                lst = lst.substr( 0, pos ) + ' or ' + lst.substr( pos + 2 );\n            }\n            return lst;\n        }\n        return '';\n    };\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get (options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify( options );\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n        } else {\n            request({\n                url     : options.url,\n                data    : options.data,\n                success : function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error : function(response, status) {\n                    options.error && options.error(response, status);\n                }\n            });\n        }\n    };\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request (options) {\n        // prepare ajax\n        var ajaxConfig = {\n            contentType : 'application/json',\n            type        : options.type || 'GET',\n            data        : options.data || {},\n            url         : options.url\n        }\n        // encode data into url\n        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = 'json';\n            ajaxConfig.url      = ajaxConfig.url;\n            ajaxConfig.data     = JSON.stringify(ajaxConfig.data);\n        }\n\n        // make request\n        $.ajax(ajaxConfig).done(function(response) {\n            if (typeof response === 'string') {\n                try {\n                    response = response.replace('Infinity,', '\"Infinity\",');\n                    response = jQuery.parseJSON(response);\n                } catch (e) {\n                    console.debug(e);\n                }\n            }\n            options.success && options.success(response);\n        }).fail(function(response) {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON(response.responseText);\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error(response_text, response.status);\n        }).always(function() {\n            options.complete && options.complete();\n        });\n    };\n\n    /**\n     * Read a property value from CSS\n     * @param{String}   classname   - CSS class\n     * @param{String}   name        - CSS property\n     */\n    function cssGetAttribute (classname, name) {\n        var el = $('<div class=\"' + classname + '\"></div>');\n        el.appendTo(':eq(0)');\n        var value = el.css(name);\n        el.remove();\n        return value;\n    };\n\n    /**\n     * Load a CSS file\n     * @param{String}   url - Url of CSS file\n     */\n    function cssLoadFile (url) {\n        if (!$('link[href^=\"' + url + '\"]').length) {\n            $('<link href=\"' + Galaxy.root + url + '\" rel=\"stylesheet\">').appendTo('head');\n        }\n    };\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge (options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    };\n\n\n    /**\n     * Round floaing point 'number' to 'numPlaces' number of decimal places.\n     * @param{Object}   number      a floaing point number\n     * @param{Object}   numPlaces   number of decimal places\n     */\n    function roundToDecimalPlaces( number, numPlaces ){\n        var placesMultiplier = 1;\n        for( var i=0; i<numPlaces; i++ ){\n            placesMultiplier *= 10;\n        }\n        return Math.round( number * placesMultiplier ) / placesMultiplier;\n    }\n\n    // calculate on import\n    var kb = 1024,\n        mb = kb * kb,\n        gb = mb * kb,\n        tb = gb * kb;\n    /**\n     * Format byte size to string with units\n     * @param{Integer}   size           - Size in bytes\n     * @param{Boolean}   normal_font    - Switches font between normal and bold\n     */\n    function bytesToString (size, normal_font, numberPlaces) {\n        numberPlaces = numberPlaces !== undefined? numberPlaces: 1;\n        // identify unit\n        var unit = \"\";\n        if (size >= tb){ size = size / tb; unit = 'TB'; } else\n        if (size >= gb){ size = size / gb; unit = 'GB'; } else\n        if (size >= mb){ size = size / mb; unit = 'MB'; } else\n        if (size >= kb){ size = size / kb; unit = 'KB'; } else\n        if (size >  0){ unit = 'b'; }\n        else { return normal_font? '0 b': '<strong>-</strong>'; }\n        // return formatted string\n        var rounded = unit == 'b'? size: roundToDecimalPlaces( size, numberPlaces );\n        if (normal_font) {\n           return  rounded + ' ' + unit;\n        } else {\n            return '<strong>' + rounded + '</strong> ' + unit;\n        }\n    };\n\n    /** Create a unique id */\n    function uid(){\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return 'uid-' + top.__utils__uid__++;\n    };\n\n    /** Create a time stamp */\n    function time() {\n        var d = new Date();\n        var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n        var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes()\n        return datetime = d.getDate() + \"/\"\n                    + (d.getMonth() + 1)  + \"/\"\n                    + d.getFullYear() + \", \"\n                    + hours + \":\"\n                    + minutes;\n    };\n\n    return {\n        cssLoadFile: cssLoadFile,\n        cssGetAttribute: cssGetAttribute,\n        get: get,\n        merge: merge,\n        iframe: iframe,\n        bytesToString: bytesToString,\n        uid: uid,\n        time: time,\n        request: request,\n        sanitize: sanitize,\n        textify: textify,\n        isEmpty: isEmpty,\n        deepeach: deepeach,\n        isJSON: isJSON,\n        clone: clone,\n        linkify: linkify\n    };\n});"]}