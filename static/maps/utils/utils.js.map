{"version":3,"sources":["utils/utils.js"],"names":["define","_l","deepeach","dict","callback","i","_","isObject","d","new_dict","request","options","ajaxConfig","contentType","type","data","url","isEmptyObject","indexOf","dataType","$","ajax","done","response","replace","console","debug","e","success","fail","response_text","jQuery","parseJSON","responseText","error","status","always","complete","roundToDecimalPlaces","number","numPlaces","placesMultiplier","Math","round","kb","mb","gb","tb","cssLoadFile","length","Galaxy","root","appendTo","cssGetAttribute","classname","name","el","css","remove","get","top","__utils__get__","cache_key","stringify","cache","optionsDefault","defaults","src","size","normal_font","numberPlaces","undefined","unit","rounded","merge","__utils__uid__","iframe","Date","getHours","minutes","getMinutes","datetime","getDate","getMonth","getFullYear","hours","bytesToString","uid","content","sanitize","html","time","lst","textify","isArray","toString","pos","substr","value","isEmpty","Array","text","test","obj","JSON","parse","inputText","replacedText","replacePattern1","replacePattern2","replacePattern3","isJSON","script","appendScriptStyle","styles","clone","key","decodeURIComponent","window","location","search","RegExp","encodeURIComponent","linkify","document","title","config","brand"],"mappings":"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","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n*/\ndefine( ['utils/localization'], function(_l) {\n\n    /** Builds a basic iframe */\n    function iframe( src ) {\n        return '<iframe src=\"' + src + '\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>';\n    }\n\n    /** Traverse through json */\n    function deepeach( dict, callback ) {\n        for( var i in dict ) {\n            var d = dict[ i ];\n            if( _.isObject( d ) ) {\n                var new_dict = callback( d );\n                new_dict && ( dict[ i ] = new_dict );\n                deepeach( d, callback );\n            }\n        }\n    }\n\n    /** Identifies urls and replaces them with anchors */\n    function linkify( inputText ) {\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n        // URLs starting with http://, https://, or ftp://\n        replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = inputText.replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n        // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n        replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n        // Change email addresses to mailto:: links.\n        replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\n\n        return replacedText;\n    }\n\n    /** Clone */\n    function clone( obj ) {\n        return JSON.parse( JSON.stringify( obj ) || null );\n    }\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n    }\n\n    /**\n     * Sanitize/escape a string\n     * @param{String}   content - Content to be sanitized\n     */\n    function sanitize(content) {\n        return $('<div/>').text(content).html();\n    }\n\n    /**\n     * Checks if a value or list of values is `empty`\n     * usually used for selectable options\n     * @param{String}   value - Value or list to be validated\n     */\n    function isEmpty ( value ) {\n        if ( !( value instanceof Array ) ) {\n            value = [ value ];\n        }\n        if ( value.length === 0 ) {\n            return true;\n        }\n        for( var i in value ) {\n            if ( [ '__null__', '__undefined__', null, undefined ].indexOf( value[ i ] ) > -1 ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Convert list to pretty string\n     * @param{String}   lst - List of strings to be converted in human readable list sentence\n     */\n    function textify( lst ) {\n        if ( $.isArray( lst ) ) {\n            var lst = lst.toString().replace( /,/g, ', ' );\n            var pos = lst.lastIndexOf( ', ' );\n            if ( pos != -1 ) {\n                lst = lst.substr( 0, pos ) + ' or ' + lst.substr( pos + 2 );\n            }\n            return lst;\n        }\n        return '';\n    }\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get (options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify( options );\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n        } else {\n            request({\n                url     : options.url,\n                data    : options.data,\n                success : function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error : function(response, status) {\n                    options.error && options.error(response, status);\n                }\n            });\n        }\n    }\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request (options) {\n        // prepare ajax\n        var ajaxConfig = {\n            contentType : 'application/json',\n            type        : options.type || 'GET',\n            data        : options.data || {},\n            url         : options.url\n        };\n        // encode data into url\n        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = 'json';\n            ajaxConfig.url      = ajaxConfig.url;\n            ajaxConfig.data     = JSON.stringify(ajaxConfig.data);\n        }\n\n        // make request\n        $.ajax(ajaxConfig).done(function(response) {\n            if (typeof response === 'string') {\n                try {\n                    response = response.replace('Infinity,', '\"Infinity\",');\n                    response = jQuery.parseJSON(response);\n                } catch (e) {\n                    console.debug(e);\n                }\n            }\n            options.success && options.success(response);\n        }).fail(function(response) {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON(response.responseText);\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error(response_text, response.status);\n        }).always(function() {\n            options.complete && options.complete();\n        });\n    }\n\n    /**\n     * Read a property value from CSS\n     * @param{String}   classname   - CSS class\n     * @param{String}   name        - CSS property\n     */\n    function cssGetAttribute (classname, name) {\n        var el = $('<div class=\"' + classname + '\"></div>');\n        el.appendTo(':eq(0)');\n        var value = el.css(name);\n        el.remove();\n        return value;\n    }\n\n    /**\n     * Load a CSS file\n     * @param{String}   url - Url of CSS file\n     */\n    function cssLoadFile (url) {\n        if (!$('link[href^=\"' + url + '\"]').length) {\n            $('<link href=\"' + Galaxy.root + url + '\" rel=\"stylesheet\">').appendTo('head');\n        }\n    }\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge (options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    }\n\n\n    /**\n     * Round floaing point 'number' to 'numPlaces' number of decimal places.\n     * @param{Object}   number      a floaing point number\n     * @param{Object}   numPlaces   number of decimal places\n     */\n    function roundToDecimalPlaces( number, numPlaces ){\n        var placesMultiplier = 1;\n        for( var i=0; i<numPlaces; i++ ){\n            placesMultiplier *= 10;\n        }\n        return Math.round( number * placesMultiplier ) / placesMultiplier;\n    }\n\n    // calculate on import\n    var kb = 1024,\n        mb = kb * kb,\n        gb = mb * kb,\n        tb = gb * kb;\n    /**\n     * Format byte size to string with units\n     * @param{Integer}   size           - Size in bytes\n     * @param{Boolean}   normal_font    - Switches font between normal and bold\n     */\n    function bytesToString (size, normal_font, numberPlaces) {\n        numberPlaces = numberPlaces !== undefined? numberPlaces: 1;\n        // identify unit\n        var unit = \"\";\n        if (size >= tb){ size = size / tb; unit = 'TB'; } else\n        if (size >= gb){ size = size / gb; unit = 'GB'; } else\n        if (size >= mb){ size = size / mb; unit = 'MB'; } else\n        if (size >= kb){ size = size / kb; unit = 'KB'; } else\n        if (size >  0){ unit = 'b'; }\n        else { return normal_font? '0 b': '<strong>-</strong>'; }\n        // return formatted string\n        var rounded = unit == 'b'? size: roundToDecimalPlaces( size, numberPlaces );\n        if (normal_font) {\n           return  rounded + ' ' + unit;\n        } else {\n            return '<strong>' + rounded + '</strong> ' + unit;\n        }\n    }\n\n    /** Create a unique id */\n    function uid(){\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return 'uid-' + top.__utils__uid__++;\n    }\n\n    /** Create a time stamp */\n    function time() {\n        var d = new Date();\n        var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n        var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes()\n        return datetime = d.getDate() + \"/\"\n                    + (d.getMonth() + 1)  + \"/\"\n                    + d.getFullYear() + \", \"\n                    + hours + \":\"\n                    + minutes;\n    }\n\n    /** Append script and style tags to Galaxy main application */\n    function appendScriptStyle( data ) {\n        // create a script tag inside head tag\n        if( data.script && data.script !== \"\" ) {\n            $(  '<script/>', { type: 'text/javascript' } ).text( data.script ).appendTo( 'head' );\n        }\n        // create a style tag inside head tag\n        if( data.styles && data.styles !== \"\" ) {\n            $( '<style/>', { type: 'text/css' } ).text( data.styles ).appendTo( 'head' );\n        }\n    }\n\n    /** Get querystrings from url */\n    function getQueryString( key ) {\n        return decodeURIComponent( window.location.search.replace(new RegExp(\"^(?:.*[&\\\\?]\" + encodeURIComponent( key ).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\", \"i\"), \"$1\") );\n    }\n\n    function setWindowTitle(title){\n        if (title) {\n            window.document.title = \"Galaxy \" + (window.Galaxy.config.brand ? \" | \" + window.Galaxy.config.brand : '') + \" | \" + _l(title);\n        } else {\n            window.document.title = \"Galaxy \" + (window.Galaxy.config.brand ? \" | \" + window.Galaxy.config.brand : '');\n        }\n    }\n\n    return {\n        cssLoadFile: cssLoadFile,\n        cssGetAttribute: cssGetAttribute,\n        get: get,\n        merge: merge,\n        iframe: iframe,\n        bytesToString: bytesToString,\n        uid: uid,\n        time: time,\n        request: request,\n        sanitize: sanitize,\n        textify: textify,\n        isEmpty: isEmpty,\n        deepeach: deepeach,\n        isJSON: isJSON,\n        clone: clone,\n        linkify: linkify,\n        appendScriptStyle: appendScriptStyle,\n        getQueryString: getQueryString,\n        setWindowTitle: setWindowTitle\n    };\n});\n"]}