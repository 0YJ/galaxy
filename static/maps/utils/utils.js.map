{"version":3,"sources":["utils/utils.js"],"names":["define","deepeach","dict","callback","i","_","isObject","d","new_dict","request","options","ajaxConfig","contentType","type","data","url","$","isEmptyObject","indexOf","param","dataType","JSON","stringify","ajax","done","response","replace","jQuery","parseJSON","e","console","debug","success","fail","response_text","responseText","error","status","always","complete","placesMultiplier","number","numPlaces","Math","round","mb","kb","gb","tb","cssLoadFile","length","Galaxy","root","appendTo","cssGetAttribute","classname","name","el","value","css","remove","top","__utils__get__","cache_key","cache","optionsDefault","defaults","get","src","merge","numberPlaces","undefined","size","unit","rounded","roundToDecimalPlaces","iframe","__utils__uid__","bytesToString","hours","getHours","minutes","getMinutes","datetime","getDate","getMonth","getFullYear","Date","uid","time","content","sanitize","html","lst","textify","isArray","toString","pos","substr","isEmpty","Array","text","test","obj","parse","isJSON","inputText","replacedText","replacePattern1","replacePattern2","replacePattern3","clone","appendScriptStyle","script","styles","linkify","key","decodeURIComponent","window","location","search","RegExp","encodeURIComponent"],"mappings":"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","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n*/\ndefine( [], function() {\n\n    /** Builds a basic iframe */\n    function iframe( src ) {\n        return '<iframe src=\"' + src + '\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>';\n    }\n\n    /** Traverse through json */\n    function deepeach( dict, callback ) {\n        for( var i in dict ) {\n            var d = dict[ i ];\n            if( _.isObject( d ) ) {\n                var new_dict = callback( d );\n                new_dict && ( dict[ i ] = new_dict );\n                deepeach( d, callback );\n            }\n        }\n    }\n\n    /** Identifies urls and replaces them with anchors */\n    function linkify( inputText ) {\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n        // URLs starting with http://, https://, or ftp://\n        replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = inputText.replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n        // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n        replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n        // Change email addresses to mailto:: links.\n        replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\n\n        return replacedText;\n    }\n\n    /** Clone */\n    function clone( obj ) {\n        return JSON.parse( JSON.stringify( obj ) || null );\n    }\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n    };\n\n    /**\n     * Sanitize/escape a string\n     * @param{String}   content - Content to be sanitized\n     */\n    function sanitize(content) {\n        return $('<div/>').text(content).html();\n    };\n\n    /**\n     * Checks if a value or list of values is `empty`\n     * usually used for selectable options\n     * @param{String}   value - Value or list to be validated\n     */\n    function isEmpty ( value ) {\n        if ( !( value instanceof Array ) ) {\n            value = [ value ];\n        }\n        if ( value.length === 0 ) {\n            return true;\n        }\n        for( var i in value ) {\n            if ( [ '__null__', '__undefined__', null, undefined ].indexOf( value[ i ] ) > -1 ) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    /**\n     * Convert list to pretty string\n     * @param{String}   lst - List of strings to be converted in human readable list sentence\n     */\n    function textify( lst ) {\n        if ( $.isArray( lst ) ) {\n            var lst = lst.toString().replace( /,/g, ', ' );\n            var pos = lst.lastIndexOf( ', ' );\n            if ( pos != -1 ) {\n                lst = lst.substr( 0, pos ) + ' or ' + lst.substr( pos + 2 );\n            }\n            return lst;\n        }\n        return '';\n    };\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get (options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify( options );\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n        } else {\n            request({\n                url     : options.url,\n                data    : options.data,\n                success : function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error : function(response, status) {\n                    options.error && options.error(response, status);\n                }\n            });\n        }\n    };\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request (options) {\n        // prepare ajax\n        var ajaxConfig = {\n            contentType : 'application/json',\n            type        : options.type || 'GET',\n            data        : options.data || {},\n            url         : options.url\n        }\n        // encode data into url\n        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = 'json';\n            ajaxConfig.url      = ajaxConfig.url;\n            ajaxConfig.data     = JSON.stringify(ajaxConfig.data);\n        }\n\n        // make request\n        $.ajax(ajaxConfig).done(function(response) {\n            if (typeof response === 'string') {\n                try {\n                    response = response.replace('Infinity,', '\"Infinity\",');\n                    response = jQuery.parseJSON(response);\n                } catch (e) {\n                    console.debug(e);\n                }\n            }\n            options.success && options.success(response);\n        }).fail(function(response) {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON(response.responseText);\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error(response_text, response.status);\n        }).always(function() {\n            options.complete && options.complete();\n        });\n    };\n\n    /**\n     * Read a property value from CSS\n     * @param{String}   classname   - CSS class\n     * @param{String}   name        - CSS property\n     */\n    function cssGetAttribute (classname, name) {\n        var el = $('<div class=\"' + classname + '\"></div>');\n        el.appendTo(':eq(0)');\n        var value = el.css(name);\n        el.remove();\n        return value;\n    };\n\n    /**\n     * Load a CSS file\n     * @param{String}   url - Url of CSS file\n     */\n    function cssLoadFile (url) {\n        if (!$('link[href^=\"' + url + '\"]').length) {\n            $('<link href=\"' + Galaxy.root + url + '\" rel=\"stylesheet\">').appendTo('head');\n        }\n    };\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge (options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    };\n\n\n    /**\n     * Round floaing point 'number' to 'numPlaces' number of decimal places.\n     * @param{Object}   number      a floaing point number\n     * @param{Object}   numPlaces   number of decimal places\n     */\n    function roundToDecimalPlaces( number, numPlaces ){\n        var placesMultiplier = 1;\n        for( var i=0; i<numPlaces; i++ ){\n            placesMultiplier *= 10;\n        }\n        return Math.round( number * placesMultiplier ) / placesMultiplier;\n    }\n\n    // calculate on import\n    var kb = 1024,\n        mb = kb * kb,\n        gb = mb * kb,\n        tb = gb * kb;\n    /**\n     * Format byte size to string with units\n     * @param{Integer}   size           - Size in bytes\n     * @param{Boolean}   normal_font    - Switches font between normal and bold\n     */\n    function bytesToString (size, normal_font, numberPlaces) {\n        numberPlaces = numberPlaces !== undefined? numberPlaces: 1;\n        // identify unit\n        var unit = \"\";\n        if (size >= tb){ size = size / tb; unit = 'TB'; } else\n        if (size >= gb){ size = size / gb; unit = 'GB'; } else\n        if (size >= mb){ size = size / mb; unit = 'MB'; } else\n        if (size >= kb){ size = size / kb; unit = 'KB'; } else\n        if (size >  0){ unit = 'b'; }\n        else { return normal_font? '0 b': '<strong>-</strong>'; }\n        // return formatted string\n        var rounded = unit == 'b'? size: roundToDecimalPlaces( size, numberPlaces );\n        if (normal_font) {\n           return  rounded + ' ' + unit;\n        } else {\n            return '<strong>' + rounded + '</strong> ' + unit;\n        }\n    };\n\n    /** Create a unique id */\n    function uid(){\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return 'uid-' + top.__utils__uid__++;\n    };\n\n    /** Create a time stamp */\n    function time() {\n        var d = new Date();\n        var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n        var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes()\n        return datetime = d.getDate() + \"/\"\n                    + (d.getMonth() + 1)  + \"/\"\n                    + d.getFullYear() + \", \"\n                    + hours + \":\"\n                    + minutes;\n    };\n\n    /** Append script and style tags to Galaxy main application */\n    function appendScriptStyle( data ) {\n        // create a script tag inside head tag\n        if( data.script && data.script !== \"\" ) {\n            $(  '<script/>', { type: 'text/javascript' } ).text( data.script ).appendTo( 'head' );\n        }\n        // create a style tag inside head tag\n        if( data.styles && data.styles !== \"\" ) {\n            $( '<style/>', { type: 'text/css' } ).text( data.styles ).appendTo( 'head' );\n        }\n    };\n\n    /** Get querystrings from url */\n    function getQueryString( key ) {\n        return decodeURIComponent( window.location.search.replace(new RegExp(\"^(?:.*[&\\\\?]\" + encodeURIComponent( key ).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\", \"i\"), \"$1\") );\n    };\n\n    return {\n        cssLoadFile: cssLoadFile,\n        cssGetAttribute: cssGetAttribute,\n        get: get,\n        merge: merge,\n        iframe: iframe,\n        bytesToString: bytesToString,\n        uid: uid,\n        time: time,\n        request: request,\n        sanitize: sanitize,\n        textify: textify,\n        isEmpty: isEmpty,\n        deepeach: deepeach,\n        isJSON: isJSON,\n        clone: clone,\n        linkify: linkify,\n        appendScriptStyle: appendScriptStyle,\n        getQueryString: getQueryString\n    };\n});\n"]}