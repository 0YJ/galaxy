{"version":3,"sources":["utils/utils.js"],"names":["deepeach","dict","callback","i","d","_","isObject","new_dict","request","ajaxConfig","type","options","url","stringify","$","isEmptyObject","data","indexOf","param","response","jQuery","JSON","done","fail","response_text","parseJSON","responseText","console","debug","e","complete","cssGetAttribute","classname","name","status","el","appendTo","value","roundToDecimalPlaces","number","numPlaces","placesMultiplier","Math","bytesToString","numberPlaces","kb","unit","gb","mb","size","cssLoadFile","defaults","Galaxy","root","css","remove","get","success","top","__utils__get__","cache_key","error","merge","optionsDefault","iframe","src","normal_font","undefined","tb","rounded","__utils__uid__","uid","getMinutes","script","time","Date","hours","getHours","minutes","getDate","getMonth","getFullYear","sanitize","content","text","html","textify","lst","isArray","pos","toString","replace","lastIndexOf","substr","isEmpty","Array","length","isJSON","test","clone","obj","replacedText","linkify","inputText","replacePattern1","replacePattern2","replacePattern3","appendScriptStyle","title","window","document","styles","getQueryString","key","search","encodeURIComponent","setWindowTitle","config","brand","_localization2","default"],"mappings":"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","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n*/\nimport _l from \"utils/localization\";\n/** Builds a basic iframe */\nfunction iframe(src) {\n    return `<iframe src=\"${src}\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>`;\n}\n\n/** Traverse through json */\nfunction deepeach(dict, callback) {\n    for (var i in dict) {\n        var d = dict[i];\n        if (_.isObject(d)) {\n            var new_dict = callback(d);\n            new_dict && (dict[i] = new_dict);\n            deepeach(d, callback);\n        }\n    }\n}\n\n/** Identifies urls and replaces them with anchors */\nfunction linkify(inputText) {\n    var replacedText;\n    var replacePattern1;\n    var replacePattern2;\n    var replacePattern3;\n\n    // URLs starting with http://, https://, or ftp://\n    replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n    replacedText = inputText.replace(\n        replacePattern1,\n        '<a href=\"$1\" target=\"_blank\">$1</a>'\n    );\n\n    // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n    replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n    replacedText = replacedText.replace(\n        replacePattern2,\n        '$1<a href=\"http://$2\" target=\"_blank\">$2</a>'\n    );\n\n    // Change email addresses to mailto:: links.\n    replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n    replacedText = replacedText.replace(\n        replacePattern3,\n        '<a href=\"mailto:$1\">$1</a>'\n    );\n\n    return replacedText;\n}\n\n/** Clone */\nfunction clone(obj) {\n    return JSON.parse(JSON.stringify(obj) || null);\n}\n\n/**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\nfunction isJSON(text) {\n    return /^[\\],:{}\\s]*$/.test(\n        text\n            .replace(/\\\\[\"\\\\\\/bfnrtu]/g, \"@\")\n            .replace(\n                /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\n                \"]\"\n            )\n            .replace(/(?:^|:|,)(?:\\s*\\[)+/g, \"\")\n    );\n}\n\n/**\n     * Sanitize/escape a string\n     * @param{String}   content - Content to be sanitized\n     */\nfunction sanitize(content) {\n    return $(\"<div/>\")\n        .text(content)\n        .html();\n}\n\n/**\n     * Checks if a value or list of values is `empty`\n     * usually used for selectable options\n     * @param{String}   value - Value or list to be validated\n     */\nfunction isEmpty(value) {\n    if (!(value instanceof Array)) {\n        value = [value];\n    }\n    if (value.length === 0) {\n        return true;\n    }\n    for (var i in value) {\n        if (\n            [\"__null__\", \"__undefined__\", null, undefined].indexOf(value[i]) >\n            -1\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n     * Convert list to pretty string\n     * @param{String}   lst - List of strings to be converted in human readable list sentence\n     */\nfunction textify(lst) {\n    if ($.isArray(lst)) {\n        var lst = lst.toString().replace(/,/g, \", \");\n        var pos = lst.lastIndexOf(\", \");\n        if (pos != -1) {\n            lst = `${lst.substr(0, pos)} or ${lst.substr(pos + 2)}`;\n        }\n        return lst;\n    }\n    return \"\";\n}\n\n/**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\nfunction get(options) {\n    top.__utils__get__ = top.__utils__get__ || {};\n    var cache_key = JSON.stringify(options);\n    if (options.cache && top.__utils__get__[cache_key]) {\n        options.success && options.success(top.__utils__get__[cache_key]);\n        window.console.debug(\n            `utils.js::get() - Fetching from cache [${options.url}].`\n        );\n    } else {\n        request({\n            url: options.url,\n            data: options.data,\n            success: function(response) {\n                top.__utils__get__[cache_key] = response;\n                options.success && options.success(response);\n            },\n            error: function(response, status) {\n                options.error && options.error(response, status);\n            }\n        });\n    }\n}\n\n/**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\nfunction request(options) {\n    // prepare ajax\n    var ajaxConfig = {\n        contentType: \"application/json\",\n        type: options.type || \"GET\",\n        data: options.data || {},\n        url: options.url\n    };\n    // encode data into url\n    if (ajaxConfig.type == \"GET\" || ajaxConfig.type == \"DELETE\") {\n        if (!$.isEmptyObject(ajaxConfig.data)) {\n            ajaxConfig.url += ajaxConfig.url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            ajaxConfig.url += $.param(ajaxConfig.data, true);\n        }\n        ajaxConfig.data = null;\n    } else {\n        ajaxConfig.dataType = \"json\";\n        ajaxConfig.url = ajaxConfig.url;\n        ajaxConfig.data = JSON.stringify(ajaxConfig.data);\n    }\n\n    // make request\n    $.ajax(ajaxConfig)\n        .done(response => {\n            if (typeof response === \"string\") {\n                try {\n                    response = response.replace(\"Infinity,\", '\"Infinity\",');\n                    response = jQuery.parseJSON(response);\n                } catch (e) {\n                    console.debug(e);\n                }\n            }\n            options.success && options.success(response);\n        })\n        .fail(response => {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON(response.responseText);\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error(response_text, response.status);\n        })\n        .always(() => {\n            options.complete && options.complete();\n        });\n}\n\n/**\n     * Read a property value from CSS\n     * @param{String}   classname   - CSS class\n     * @param{String}   name        - CSS property\n     */\nfunction cssGetAttribute(classname, name) {\n    var el = $(`<div class=\"${classname}\"></div>`);\n    el.appendTo(\":eq(0)\");\n    var value = el.css(name);\n    el.remove();\n    return value;\n}\n\n/**\n     * Load a CSS file\n     * @param{String}   url - Url of CSS file\n     */\nfunction cssLoadFile(url) {\n    if (!$(`link[href^=\"${url}\"]`).length) {\n        $(`<link href=\"${Galaxy.root}${url}\" rel=\"stylesheet\">`).appendTo(\n            \"head\"\n        );\n    }\n}\n\n/**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\nfunction merge(options, optionsDefault) {\n    if (options) {\n        return _.defaults(options, optionsDefault);\n    } else {\n        return optionsDefault;\n    }\n}\n\n/**\n     * Round floaing point 'number' to 'numPlaces' number of decimal places.\n     * @param{Object}   number      a floaing point number\n     * @param{Object}   numPlaces   number of decimal places\n     */\nfunction roundToDecimalPlaces(number, numPlaces) {\n    var placesMultiplier = 1;\n    for (var i = 0; i < numPlaces; i++) {\n        placesMultiplier *= 10;\n    }\n    return Math.round(number * placesMultiplier) / placesMultiplier;\n}\n\n// calculate on import\nvar kb = 1024;\n\nvar mb = kb * kb;\nvar gb = mb * kb;\nvar tb = gb * kb;\n/**\n     * Format byte size to string with units\n     * @param{Integer}   size           - Size in bytes\n     * @param{Boolean}   normal_font    - Switches font between normal and bold\n     */\nfunction bytesToString(size, normal_font, numberPlaces) {\n    numberPlaces = numberPlaces !== undefined ? numberPlaces : 1;\n    // identify unit\n    var unit = \"\";\n    if (size >= tb) {\n        size = size / tb;\n        unit = \"TB\";\n    } else if (size >= gb) {\n        size = size / gb;\n        unit = \"GB\";\n    } else if (size >= mb) {\n        size = size / mb;\n        unit = \"MB\";\n    } else if (size >= kb) {\n        size = size / kb;\n        unit = \"KB\";\n    } else if (size > 0) {\n        unit = \"b\";\n    } else {\n        return normal_font ? \"0 b\" : \"<strong>-</strong>\";\n    }\n    // return formatted string\n    var rounded = unit == \"b\" ? size : roundToDecimalPlaces(size, numberPlaces);\n    if (normal_font) {\n        return `${rounded} ${unit}`;\n    } else {\n        return `<strong>${rounded}</strong> ${unit}`;\n    }\n}\n\n/** Create a unique id */\nfunction uid() {\n    top.__utils__uid__ = top.__utils__uid__ || 0;\n    return `uid-${top.__utils__uid__++}`;\n}\n\n/** Create a time stamp */\nfunction time() {\n    var d = new Date();\n    var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n    var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes();\n    return `${d.getDate()}/${d.getMonth() +\n        1}/${d.getFullYear()}, ${hours}:${minutes}`;\n}\n\n/** Append script and style tags to Galaxy main application */\nfunction appendScriptStyle(data) {\n    // create a script tag inside head tag\n    if (data.script && data.script !== \"\") {\n        $(\"<script/>\", { type: \"text/javascript\" })\n            .text(data.script)\n            .appendTo(\"head\");\n    }\n    // create a style tag inside head tag\n    if (data.styles && data.styles !== \"\") {\n        $(\"<style/>\", { type: \"text/css\" })\n            .text(data.styles)\n            .appendTo(\"head\");\n    }\n}\n\n/** Get querystrings from url */\nfunction getQueryString(key) {\n    return decodeURIComponent(\n        window.location.search.replace(\n            new RegExp(\n                `^(?:.*[&\\\\?]${encodeURIComponent(key).replace(\n                    /[\\.\\+\\*]/g,\n                    \"\\\\$&\"\n                )}(?:\\\\=([^&]*))?)?.*$`,\n                \"i\"\n            ),\n            \"$1\"\n        )\n    );\n}\n\nfunction setWindowTitle(title) {\n    if (title) {\n        window.document.title = `Galaxy ${window.Galaxy.config.brand\n            ? ` | ${window.Galaxy.config.brand}`\n            : \"\"} | ${_l(title)}`;\n    } else {\n        window.document.title = `Galaxy ${window.Galaxy.config.brand\n            ? ` | ${window.Galaxy.config.brand}`\n            : \"\"}`;\n    }\n}\n\nexport default {\n    cssLoadFile: cssLoadFile,\n    cssGetAttribute: cssGetAttribute,\n    get: get,\n    merge: merge,\n    iframe: iframe,\n    bytesToString: bytesToString,\n    uid: uid,\n    time: time,\n    request: request,\n    sanitize: sanitize,\n    textify: textify,\n    isEmpty: isEmpty,\n    deepeach: deepeach,\n    isJSON: isJSON,\n    clone: clone,\n    linkify: linkify,\n    appendScriptStyle: appendScriptStyle,\n    getQueryString: getQueryString,\n    setWindowTitle: setWindowTitle\n};\n"]}