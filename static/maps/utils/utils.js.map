{"version":3,"sources":["utils/utils.js"],"names":["define","_l","deepeach","dict","i","d","_","isObject","new_dict","callback","response","ajaxConfig","console","type","options","data","success","response_text","parseJSON","url","indexOf","responseText","JSON","stringify","$","ajax","done","cssGetAttribute","classname","jQuery","value","css","debug","e","fail","cssLoadFile","Galaxy","root","error","status","always","complete","unit","number","numPlaces","size","placesMultiplier","kb","mb","rounded","gb","normal_font","tb","appendTo","name","el","remove","get","top","__utils__get__","cache_key","cache","window","contentType","isEmptyObject","merge","optionsDefault","numberPlaces","iframe","src","bytesToString","undefined","time","Date","hours","minutes","datetime","appendScriptStyle","roundToDecimalPlaces","getQueryString","key","uid","document","title","__utils__uid__","getHours","getMinutes","request","sanitize","textify","isEmpty","content","text","html","lst","toString","replace","lastIndexOf","substr","pos","Array","length","isJSON","test","clone","obj","parse","linkify","replacedText","replacePattern1","replacePattern2","replacePattern3","inputText","setWindowTitle","script","styles","decodeURIComponent","location","search","RegExp","encodeURIComponent","config","brand"],"mappings":"kCAIAA,QAAQ,sBAAuB,SAASC,GAYhC,SAAAC,EAAAC,EAAcA,GACV,IAAA,IAAAC,KAAIC,EAAIF,CACR,IAAAE,EAAIC,EAAEC,GACF,GAAAD,EAAAC,SAAIC,GAAAA,CACJA,IAAAA,EAAAA,EAAaH,GACbH,IAASG,EAAGI,GAAAA,GACfP,EAAAG,EAAAI,KAuKWC,SAAAA,EAAAA,GAEH,IAAAC,GACGC,YAAAA,mBACHC,KAAAC,EAAAD,MAAA,MACJE,KAAAD,EAAAC,SACDD,IAAAA,EAAQE,KAIJ,OAAJL,EAAIE,MAAA,UAAAF,EAAAE,MACAI,EAAAA,cAAAA,EAAuBC,QAC1BP,EAACQ,MAAU,GAAAR,EAAAQ,IAAAC,QAAA,KAAA,IAAA,IACRH,EAAAA,KAAAA,EAAgBP,MAAAA,EAASW,MAAzB,IAEJP,EAAAA,KAAA,OAGAA,EAAAA,SAAA,OACHH,EAvBLQ,IAAAR,EAAAQ,IAwBHR,EAAAI,KAAAO,KAAAC,UAAAZ,EAAAI,OAxBGS,EAAEC,KAAKd,GACFe,KAAK,SAAShB,GACX,GAAwB,iBAAbA,EA6BdiB,IACMjB,EAAAA,EAAiBkB,QAAY,YAAxC,eACYlB,EAAZmB,OAAAX,UAAAR,GACIoB,MAAWC,GACfnB,QAAAoB,MAAAC,GAzBQnB,EAAQE,SAAWF,EAAQE,QAAQN,KAEtCwB,KAAK,SAASxB,GACX,IAAIO,EAAgB,KACpB,IA6BHkB,EAAiBN,OAAAX,UAAAR,EAAAW,cACjBG,MAAES,GAEChB,EAAiBmB,EAAOC,aAGnCvB,EAAAwB,OAAAxB,EAAAwB,MAAArB,EAAAP,EAAA6B,UAEDC,OAAA,WA7BY1B,EAAQ2B,UAAY3B,EAAQ2B,aA6EhCC,SAAAA,EAAAC,EAAAC,GAEAC,IAAAA,IADHC,EAAkBC,EACfF,EAAAA,EAAOA,EAAAA,EAAPzC,IACAsC,GAAA,GAEAA,OAAAA,KAAAA,MAAAC,EAAAG,GAAAA,EAIJ,IAAAC,EAAA,KACAC,EAAAD,EAAIE,EAEJC,EAAAF,EAAIG,EACAC,EAAAF,EAAAH,EA8ER,OACIZ,YAtHC,SAAAhB,GACDK,EAAA,eAAkBmB,EAAAA,MAASG,QAC9BtB,EA7BW,eAAiBY,OAAOC,KAAOlB,EAAM,uBA+BjDkC,SAAA,SAmHI1B,gBAnIC,SAAAC,EAAA0B,GACJ,IAAAC,EAAA/B,EAAA,eAAAI,EAAA,YA7BG2B,EAAGF,SAAS,UA+BhB,IAAAvB,EAAAyB,EAAAxB,IAAAuB,GA5BI,OADAC,EAAGC,SACI1B,GA6JP2B,IAtPJ,SAAa3C,GACT4C,IAAIC,eAAiBD,IAAIC,mBACzB,IAAIC,EAAYtC,KAAKC,UAAUT,GAC3BA,EAAQ+C,OAASH,IAAIC,eAAeC,IACpC9C,EAAQE,SAAWF,EAAQE,QAAQ0C,IAAIC,eAAeC,IACtDE,OAAOlD,QAAQoB,MA0BvB,0CAA0BlB,EAAAK,IAAA,OAGlB4C,GACAlD,IAAAA,EAAMC,IACNC,KAAMD,EAAQC,KACdI,QAAKL,SAAQK,GAJjBuC,IAAAC,eAAAC,GAAAlD,EAMAI,EAAAE,SAAAF,EAAAE,QAAAN,IAEI4B,MAAO0B,SAAAA,EAAcrD,GACjBA,EAAAA,OAAAG,EAAkBH,MAAWQ,EAAYoB,OA6MjD0B,MA1IJ,SAAenD,EAASoD,GA+BxB,OAAApD,EACIqD,EAAAA,SAAeA,EAAAA,GAEXzB,GAyGJ0B,OAtXJ,SAAgBC,GAFpBrE,MACI,gBACAqE,EACI,0DAsXAC,cA9EJ,SAAAzB,EAAAM,EAAAgB,GACAA,OAAeI,IAAAJ,EAAAA,EAAA,EAEX,IAAAzB,EAAO,GACV,GAAAG,GAAAO,EA9BOP,GAAcO,EAgCtBV,EAAA,UACA,GAAS8B,GAAOtB,EACZL,GAAY4B,EACZ/B,EAAIgC,UACJ,GAAIC,GAAWtE,EACfwC,GAAQ+B,EAUXlC,EAAA,UAvCU,GAAIG,GAAQE,EAyCvBF,GAAAE,EACAL,EAASmC,SACL,CAAA,KAAAhC,EAAA,GAKC,OAAAM,EAAA,MAAA,qBAJDT,EAAI3B,IAOAS,IAAAA,EAGH,KAAAkB,EAAAG,EAAAiC,EAAAjC,EAAAsB,GACJ,OAAAhB,EA3CcF,EAAU,IAAMP,EA8CtBqC,WAAeC,EAAK,aAAAtC,GAuCzBuC,IAxBA,WAQC,OAPGnB,IAAAA,eAAOoB,IAASC,gBACZ,EAFR,OAQOzB,IAAA0B,kBAiBPZ,KAzEJ,WAiEA,IAAAnE,EAAO,IAAAoE,KACHtC,GAAAA,EAAAA,WADG,GAAA,IAAA,IAAA9B,EAAAgF,WAEH1D,GAAAA,EAAAA,aAAiBA,GAFd,IAAA,IAAAtB,EAAAiF,aAGH7B,OAAAA,SACAQ,EAAAA,UACAG,KACAE,EAAAA,WAAeA,GACfW,IACAT,EAAAA,cACAe,KACAC,EACAC,IACAC,GAHAH,QAASA,EACTC,SA/RI,SACKG,GAID,OAAAnE,EAAA,UACHoE,KAAAD,GACJE,QAyRDJ,QA1PI3E,SAAAA,GACAgD,GAAAA,EAAAA,QAAAA,GAAOlD,CAGV,IACG2E,GANJO,EAKOA,EAAAC,WAAAC,QAAA,KAAA,OACKC,YAAA,MAIAvC,OAHJvC,GAAAA,IACAJ,EAAAA,EAAMD,OAAAA,EAAQC,GAFV,OAAA+E,EAAAI,OAAAC,EAAA,IAIAzC,EAEH,MAAA,IAgPTgC,QAlRJ,SAASD,GAID,GAHJ3D,aAAAsE,QACItE,GAAIgE,IAEJ,IAAAhE,EAAAuE,OACIP,OAAAA,EAEJ,IAAA,IAAA1F,KAAA0B,EACH,IACD,WAAA,gBAAA,UAAAyC,GAAAnD,QACHU,EAAA1B,KAtBgB,EAEL,OAAO,EAGf,OAAO,GA0RPF,SAAUA,EACVoG,OArTA,SAAO9E,GAGV,MAAA,gBAAA+E,KAlBOX,EAoBRI,QAAA,mBAAA,KAlBaA,QACG,mEACA,KAqBPN,QAAQ5D,uBAAO,MA4SpB0E,MAtUA,SAAAC,GASH,OAAAnF,KAAAoF,MAAApF,KAAAC,UAAAkF,IAAA,OA8TGE,QA3WA,SAAIC,GAAJ,IAAIA,EAAcC,EAAiBC,EAAiBC,EAuBpD,OAnBAH,EAAAA,0EAAAA,EAAeI,EAAUhB,QAKzBa,EACAC,uCAOAC,EAAAA,iCACAH,EAAAA,EAAeA,QANXE,EAWJ,gDAIJC,EAAA,2DACIH,EAAOtF,EAAgBC,QAC1BwF,EATO,+BAwVJlC,kBADA8B,SAhBG5F,GAkBHgE,EAAAA,QAlBG,KAkBHA,EAAgBA,QAChBkC,EAAAA,aAAgBA,KAAAA,oBAnBpBrB,KAAA7E,EAAAmG,QAnXJ7D,SAAA,QA2UYtC,EAAKoG,QAA0B,KAAhBpG,EAAKoG,QACpB3F,EAAE,YAAcX,KAAM,aACjB+E,KAAK7E,EAAKoG,QACV9D,SAAS,SAuDlB0B,eAlDJ,SAAwBC,GACpB,OAAOoC,mBACHtD,OAAOuD,SAASC,OAAOtB,QACnB,IAAIuB,OACA,eACIC,mBAAmBxC,GAAKgB,QAAQ,YAAa,QAC7C,uBACJ,KAEJ,QA0CRiB,eArCJ,SAAwB9B,GAEhBrB,OAAOoB,SAASC,MADhBA,EAEI,WACCrB,OAAO1B,OAAOqF,OAAOC,MAChB,MAAQ5D,OAAO1B,OAAOqF,OAAOC,MAC7B,IACN,MACAzH,EAAGkF,GAGH,WACCrB,OAAO1B,OAAOqF,OAAOC,MAChB,MAAQ5D,OAAO1B,OAAOqF,OAAOC,MAC7B","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n*/\ndefine([\"utils/localization\"], function(_l) {\n    /** Builds a basic iframe */\n    function iframe(src) {\n        return (\n            '<iframe src=\"' +\n            src +\n            '\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>'\n        );\n    }\n\n    /** Traverse through json */\n    function deepeach(dict, callback) {\n        for (var i in dict) {\n            var d = dict[i];\n            if (_.isObject(d)) {\n                var new_dict = callback(d);\n                new_dict && (dict[i] = new_dict);\n                deepeach(d, callback);\n            }\n        }\n    }\n\n    /** Identifies urls and replaces them with anchors */\n    function linkify(inputText) {\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n        // URLs starting with http://, https://, or ftp://\n        replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = inputText.replace(\n            replacePattern1,\n            '<a href=\"$1\" target=\"_blank\">$1</a>'\n        );\n\n        // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n        replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(\n            replacePattern2,\n            '$1<a href=\"http://$2\" target=\"_blank\">$2</a>'\n        );\n\n        // Change email addresses to mailto:: links.\n        replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(\n            replacePattern3,\n            '<a href=\"mailto:$1\">$1</a>'\n        );\n\n        return replacedText;\n    }\n\n    /** Clone */\n    function clone(obj) {\n        return JSON.parse(JSON.stringify(obj) || null);\n    }\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(\n            text\n                .replace(/\\\\[\"\\\\\\/bfnrtu]/g, \"@\")\n                .replace(\n                    /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\n                    \"]\"\n                )\n                .replace(/(?:^|:|,)(?:\\s*\\[)+/g, \"\")\n        );\n    }\n\n    /**\n     * Sanitize/escape a string\n     * @param{String}   content - Content to be sanitized\n     */\n    function sanitize(content) {\n        return $(\"<div/>\")\n            .text(content)\n            .html();\n    }\n\n    /**\n     * Checks if a value or list of values is `empty`\n     * usually used for selectable options\n     * @param{String}   value - Value or list to be validated\n     */\n    function isEmpty(value) {\n        if (!(value instanceof Array)) {\n            value = [value];\n        }\n        if (value.length === 0) {\n            return true;\n        }\n        for (var i in value) {\n            if (\n                [\"__null__\", \"__undefined__\", null, undefined].indexOf(\n                    value[i]\n                ) > -1\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Convert list to pretty string\n     * @param{String}   lst - List of strings to be converted in human readable list sentence\n     */\n    function textify(lst) {\n        if ($.isArray(lst)) {\n            var lst = lst.toString().replace(/,/g, \", \");\n            var pos = lst.lastIndexOf(\", \");\n            if (pos != -1) {\n                lst = lst.substr(0, pos) + \" or \" + lst.substr(pos + 2);\n            }\n            return lst;\n        }\n        return \"\";\n    }\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get(options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify(options);\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug(\n                \"utils.js::get() - Fetching from cache [\" + options.url + \"].\"\n            );\n        } else {\n            request({\n                url: options.url,\n                data: options.data,\n                success: function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error: function(response, status) {\n                    options.error && options.error(response, status);\n                }\n            });\n        }\n    }\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request(options) {\n        // prepare ajax\n        var ajaxConfig = {\n            contentType: \"application/json\",\n            type: options.type || \"GET\",\n            data: options.data || {},\n            url: options.url\n        };\n        // encode data into url\n        if (ajaxConfig.type == \"GET\" || ajaxConfig.type == \"DELETE\") {\n            if (!$.isEmptyObject(ajaxConfig.data)) {\n                ajaxConfig.url += ajaxConfig.url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = \"json\";\n            ajaxConfig.url = ajaxConfig.url;\n            ajaxConfig.data = JSON.stringify(ajaxConfig.data);\n        }\n\n        // make request\n        $.ajax(ajaxConfig)\n            .done(function(response) {\n                if (typeof response === \"string\") {\n                    try {\n                        response = response.replace(\"Infinity,\", '\"Infinity\",');\n                        response = jQuery.parseJSON(response);\n                    } catch (e) {\n                        console.debug(e);\n                    }\n                }\n                options.success && options.success(response);\n            })\n            .fail(function(response) {\n                var response_text = null;\n                try {\n                    response_text = jQuery.parseJSON(response.responseText);\n                } catch (e) {\n                    response_text = response.responseText;\n                }\n                options.error && options.error(response_text, response.status);\n            })\n            .always(function() {\n                options.complete && options.complete();\n            });\n    }\n\n    /**\n     * Read a property value from CSS\n     * @param{String}   classname   - CSS class\n     * @param{String}   name        - CSS property\n     */\n    function cssGetAttribute(classname, name) {\n        var el = $('<div class=\"' + classname + '\"></div>');\n        el.appendTo(\":eq(0)\");\n        var value = el.css(name);\n        el.remove();\n        return value;\n    }\n\n    /**\n     * Load a CSS file\n     * @param{String}   url - Url of CSS file\n     */\n    function cssLoadFile(url) {\n        if (!$('link[href^=\"' + url + '\"]').length) {\n            $(\n                '<link href=\"' + Galaxy.root + url + '\" rel=\"stylesheet\">'\n            ).appendTo(\"head\");\n        }\n    }\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge(options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    }\n\n    /**\n     * Round floaing point 'number' to 'numPlaces' number of decimal places.\n     * @param{Object}   number      a floaing point number\n     * @param{Object}   numPlaces   number of decimal places\n     */\n    function roundToDecimalPlaces(number, numPlaces) {\n        var placesMultiplier = 1;\n        for (var i = 0; i < numPlaces; i++) {\n            placesMultiplier *= 10;\n        }\n        return Math.round(number * placesMultiplier) / placesMultiplier;\n    }\n\n    // calculate on import\n    var kb = 1024,\n        mb = kb * kb,\n        gb = mb * kb,\n        tb = gb * kb;\n    /**\n     * Format byte size to string with units\n     * @param{Integer}   size           - Size in bytes\n     * @param{Boolean}   normal_font    - Switches font between normal and bold\n     */\n    function bytesToString(size, normal_font, numberPlaces) {\n        numberPlaces = numberPlaces !== undefined ? numberPlaces : 1;\n        // identify unit\n        var unit = \"\";\n        if (size >= tb) {\n            size = size / tb;\n            unit = \"TB\";\n        } else if (size >= gb) {\n            size = size / gb;\n            unit = \"GB\";\n        } else if (size >= mb) {\n            size = size / mb;\n            unit = \"MB\";\n        } else if (size >= kb) {\n            size = size / kb;\n            unit = \"KB\";\n        } else if (size > 0) {\n            unit = \"b\";\n        } else {\n            return normal_font ? \"0 b\" : \"<strong>-</strong>\";\n        }\n        // return formatted string\n        var rounded =\n            unit == \"b\" ? size : roundToDecimalPlaces(size, numberPlaces);\n        if (normal_font) {\n            return rounded + \" \" + unit;\n        } else {\n            return \"<strong>\" + rounded + \"</strong> \" + unit;\n        }\n    }\n\n    /** Create a unique id */\n    function uid() {\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return \"uid-\" + top.__utils__uid__++;\n    }\n\n    /** Create a time stamp */\n    function time() {\n        var d = new Date();\n        var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n        var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes();\n        return (datetime =\n            d.getDate() +\n            \"/\" +\n            (d.getMonth() + 1) +\n            \"/\" +\n            d.getFullYear() +\n            \", \" +\n            hours +\n            \":\" +\n            minutes);\n    }\n\n    /** Append script and style tags to Galaxy main application */\n    function appendScriptStyle(data) {\n        // create a script tag inside head tag\n        if (data.script && data.script !== \"\") {\n            $(\"<script/>\", { type: \"text/javascript\" })\n                .text(data.script)\n                .appendTo(\"head\");\n        }\n        // create a style tag inside head tag\n        if (data.styles && data.styles !== \"\") {\n            $(\"<style/>\", { type: \"text/css\" })\n                .text(data.styles)\n                .appendTo(\"head\");\n        }\n    }\n\n    /** Get querystrings from url */\n    function getQueryString(key) {\n        return decodeURIComponent(\n            window.location.search.replace(\n                new RegExp(\n                    \"^(?:.*[&\\\\?]\" +\n                        encodeURIComponent(key).replace(/[\\.\\+\\*]/g, \"\\\\$&\") +\n                        \"(?:\\\\=([^&]*))?)?.*$\",\n                    \"i\"\n                ),\n                \"$1\"\n            )\n        );\n    }\n\n    function setWindowTitle(title) {\n        if (title) {\n            window.document.title =\n                \"Galaxy \" +\n                (window.Galaxy.config.brand\n                    ? \" | \" + window.Galaxy.config.brand\n                    : \"\") +\n                \" | \" +\n                _l(title);\n        } else {\n            window.document.title =\n                \"Galaxy \" +\n                (window.Galaxy.config.brand\n                    ? \" | \" + window.Galaxy.config.brand\n                    : \"\");\n        }\n    }\n\n    return {\n        cssLoadFile: cssLoadFile,\n        cssGetAttribute: cssGetAttribute,\n        get: get,\n        merge: merge,\n        iframe: iframe,\n        bytesToString: bytesToString,\n        uid: uid,\n        time: time,\n        request: request,\n        sanitize: sanitize,\n        textify: textify,\n        isEmpty: isEmpty,\n        deepeach: deepeach,\n        isJSON: isJSON,\n        clone: clone,\n        linkify: linkify,\n        appendScriptStyle: appendScriptStyle,\n        getQueryString: getQueryString,\n        setWindowTitle: setWindowTitle\n    };\n});\n"]}