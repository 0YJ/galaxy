{"version":3,"sources":["utils/utils.js"],"names":["define","iframe","src","deepeach","dict","callback","i","d","_","isObject","new_dict","linkify","inputText","replacedText","replacePattern1","replacePattern2","replacePattern3","replace","clone","obj","JSON","parse","stringify","isJSON","text","test","sanitize","content","$","html","isEmpty","value","Array","length","undefined","indexOf","textify","lst","isArray","toString","pos","lastIndexOf","substr","get","options","top","__utils__get__","cache_key","cache","success","window","console","debug","url","request","data","response","error","status","ajaxConfig","contentType","type","isEmptyObject","param","dataType","ajax","done","jQuery","parseJSON","e","fail","response_text","responseText","always","complete","cssGetAttribute","classname","name","el","appendTo","css","remove","cssLoadFile","Galaxy","root","merge","optionsDefault","defaults","roundToDecimalPlaces","number","numPlaces","placesMultiplier","Math","round","bytesToString","size","normal_font","numberPlaces","unit","tb","gb","mb","kb","rounded","uid","__utils__uid__","time","Date","hours","getHours","minutes","getMinutes","datetime","getDate","getMonth","getFullYear"],"mappings":"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","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n*/\ndefine( [], function() {\n\n    /** Builds a basic iframe */\n    function iframe( src ) {\n        return '<iframe src=\"' + src + '\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>';\n    }\n\n    /** Traverse through json */\n    function deepeach( dict, callback ) {\n        for( var i in dict ) {\n            var d = dict[ i ];\n            if( _.isObject( d ) ) {\n                var new_dict = callback( d );\n                new_dict && ( dict[ i ] = new_dict );\n                deepeach( d, callback );\n            }\n        }\n    }\n\n    /** Identifies urls and replaces them with anchors */\n    function linkify( inputText ) {\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n        // URLs starting with http://, https://, or ftp://\n        replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = inputText.replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n        // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n        replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n        // Change email addresses to mailto:: links.\n        replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\n\n        return replacedText;\n    }\n\n    /** Clone */\n    function clone( obj ) {\n        return JSON.parse( JSON.stringify( obj ) || null );\n    }\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n            replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n            replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''));\n    };\n\n    /**\n     * Sanitize/escape a string\n     * @param{String}   content - Content to be sanitized\n     */\n    function sanitize(content) {\n        return $('<div/>').text(content).html();\n    };\n\n    /**\n     * Checks if a value or list of values is `empty`\n     * usually used for selectable options\n     * @param{String}   value - Value or list to be validated\n     */\n    function isEmpty ( value ) {\n        if ( !( value instanceof Array ) ) {\n            value = [ value ];\n        }\n        if ( value.length === 0 ) {\n            return true;\n        }\n        for( var i in value ) {\n            if ( [ '__null__', '__undefined__', null, undefined ].indexOf( value[ i ] ) > -1 ) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    /**\n     * Convert list to pretty string\n     * @param{String}   lst - List of strings to be converted in human readable list sentence\n     */\n    function textify( lst ) {\n        if ( $.isArray( lst ) ) {\n            var lst = lst.toString().replace( /,/g, ', ' );\n            var pos = lst.lastIndexOf( ', ' );\n            if ( pos != -1 ) {\n                lst = lst.substr( 0, pos ) + ' or ' + lst.substr( pos + 2 );\n            }\n            return lst;\n        }\n        return '';\n    };\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get (options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify( options );\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug('utils.js::get() - Fetching from cache [' + options.url + '].');\n        } else {\n            request({\n                url     : options.url,\n                data    : options.data,\n                success : function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error : function(response, status) {\n                    options.error && options.error(response, status);\n                }\n            });\n        }\n    };\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request (options) {\n        // prepare ajax\n        var ajaxConfig = {\n            contentType : 'application/json',\n            type        : options.type || 'GET',\n            data        : options.data || {},\n            url         : options.url\n        }\n        // encode data into url\n        if ( ajaxConfig.type == 'GET' || ajaxConfig.type == 'DELETE' ) {\n            if ( !$.isEmptyObject(ajaxConfig.data) ) {\n                ajaxConfig.url += ajaxConfig.url.indexOf('?') == -1 ? '?' : '&';\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = 'json';\n            ajaxConfig.url      = ajaxConfig.url;\n            ajaxConfig.data     = JSON.stringify(ajaxConfig.data);\n        }\n\n        // make request\n        $.ajax(ajaxConfig).done(function(response) {\n            if (typeof response === 'string') {\n                try {\n                    response = response.replace('Infinity,', '\"Infinity\",');\n                    response = jQuery.parseJSON(response);\n                } catch (e) {\n                    console.debug(e);\n                }\n            }\n            options.success && options.success(response);\n        }).fail(function(response) {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON(response.responseText);\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error(response_text, response.status);\n        }).always(function() {\n            options.complete && options.complete();\n        });\n    };\n\n    /**\n     * Read a property value from CSS\n     * @param{String}   classname   - CSS class\n     * @param{String}   name        - CSS property\n     */\n    function cssGetAttribute (classname, name) {\n        var el = $('<div class=\"' + classname + '\"></div>');\n        el.appendTo(':eq(0)');\n        var value = el.css(name);\n        el.remove();\n        return value;\n    };\n\n    /**\n     * Load a CSS file\n     * @param{String}   url - Url of CSS file\n     */\n    function cssLoadFile (url) {\n        if (!$('link[href^=\"' + url + '\"]').length) {\n            $('<link href=\"' + Galaxy.root + url + '\" rel=\"stylesheet\">').appendTo('head');\n        }\n    };\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge (options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    };\n\n\n    /**\n     * Round floaing point 'number' to 'numPlaces' number of decimal places.\n     * @param{Object}   number      a floaing point number\n     * @param{Object}   numPlaces   number of decimal places\n     */\n    function roundToDecimalPlaces( number, numPlaces ){\n        var placesMultiplier = 1;\n        for( var i=0; i<numPlaces; i++ ){\n            placesMultiplier *= 10;\n        }\n        return Math.round( number * placesMultiplier ) / placesMultiplier;\n    }\n\n    // calculate on import\n    var kb = 1024,\n        mb = kb * kb,\n        gb = mb * kb,\n        tb = gb * kb;\n    /**\n     * Format byte size to string with units\n     * @param{Integer}   size           - Size in bytes\n     * @param{Boolean}   normal_font    - Switches font between normal and bold\n     */\n    function bytesToString (size, normal_font, numberPlaces) {\n        numberPlaces = numberPlaces !== undefined? numberPlaces: 1;\n        // identify unit\n        var unit = \"\";\n        if (size >= tb){ size = size / tb; unit = 'TB'; } else\n        if (size >= gb){ size = size / gb; unit = 'GB'; } else\n        if (size >= mb){ size = size / mb; unit = 'MB'; } else\n        if (size >= kb){ size = size / kb; unit = 'KB'; } else\n        if (size >  0){ unit = 'b'; }\n        else { return normal_font? '0 b': '<strong>-</strong>'; }\n        // return formatted string\n        var rounded = unit == 'b'? size: roundToDecimalPlaces( size, numberPlaces );\n        if (normal_font) {\n           return  rounded + ' ' + unit;\n        } else {\n            return '<strong>' + rounded + '</strong> ' + unit;\n        }\n    };\n\n    /** Create a unique id */\n    function uid(){\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return 'uid-' + top.__utils__uid__++;\n    };\n\n    /** Create a time stamp */\n    function time() {\n        var d = new Date();\n        var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n        var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes()\n        return datetime = d.getDate() + \"/\"\n                    + (d.getMonth() + 1)  + \"/\"\n                    + d.getFullYear() + \", \"\n                    + hours + \":\"\n                    + minutes;\n    };\n\n    return {\n        cssLoadFile: cssLoadFile,\n        cssGetAttribute: cssGetAttribute,\n        get: get,\n        merge: merge,\n        iframe: iframe,\n        bytesToString: bytesToString,\n        uid: uid,\n        time: time,\n        request: request,\n        sanitize: sanitize,\n        textify: textify,\n        isEmpty: isEmpty,\n        deepeach: deepeach,\n        isJSON: isJSON,\n        clone: clone,\n        linkify: linkify\n    };\n});"]}