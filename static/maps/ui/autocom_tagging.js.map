{"version":3,"sources":["ui/autocom_tagging.js"],"names":["factory","define","amd","jQuery","init_tag_click_function","tag_elt","click_func","$","find","each","this","click","tag_str","text","tag_name_and_value","split","fn","autocomplete_tagging","options","init_delete_tag_image","delete_img","mouseenter","attr","settings","delete_tag_img_rollover","mouseleave","delete_tag_img","tag_button","parent","tag_name_elt","eq","tag_name","tag_value","prev_button","prev","remove","tags","new_text","get_toggle_link_text_fn","toggle_link","ajax","url","ajax_delete_tag_url","data","error","hasClass","after","tag_area","prepend","alert","success","build_tag_button","addClass","tag_click_fn","append","editable","defaults","num_tags","_","size","name","value","input_size","in_form","use_toggle_link","item_id","add_tag_img","add_tag_img_rollover","ajax_autocomplete_tag_url","ajax_retag_url","ajax_add_tag_url","extend","this_obj","tag_input_field","add_tag_button","after_toggle_fn","is","length","blur","slideToggle","hide","keyup","e","keyCode","trigger","new_value","indexOf","substring","trim","new_tag_button","tag_buttons","children","last_tag_button","slice","zz","new_tag","cacheFlush","format_item_func","key","row_position","num_rows","search_term","autocomplete_options","selectFirst","formatItem","autoFill","highlight","autocomplete_verheul","bind","show","removeClass","is_active","target","focus","handle_document_click","window","unbind"],"mappings":"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","file":"../../scripts/ui/autocom_tagging.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([ 'jquery' ], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n\n}(function ( jQuery ) {\n'use_strict';\n\nvar $ = jQuery;\n\n// ============================================================================\n/**\n* JQuery extension for tagging with autocomplete.\n* @author: Jeremy Goecks\n* @require: jquery.autocomplete plugin\n*/\n//\n// Initialize \"tag click functions\" for tags.\n//\nfunction init_tag_click_function(tag_elt, click_func) {\n    $(tag_elt).find('.tag-name').each( function() {\n        $(this).click( function() {\n            var tag_str = $(this).text();\n            var tag_name_and_value = tag_str.split(\":\");\n            click_func(tag_name_and_value[0], tag_name_and_value[1]);\n            return true;\n        });\n    });\n}\n\njQuery.fn.autocomplete_tagging = function(options) {\n\n    var defaults = {\n        get_toggle_link_text_fn: function(tags) {\n            var text = \"\";\n            var num_tags = _.size(tags);\n            if (num_tags > 0) {\n                text = num_tags + (num_tags > 1 ? \" Tags\" : \" Tag\");\n            } else {\n                text = \"Add tags\";\n            }\n            return text;\n        },\n        tag_click_fn : function (name, value) {},\n        editable: true,\n        input_size: 20,\n        in_form: false,\n        tags : {},\n        use_toggle_link: true,\n        item_id: \"\",\n        add_tag_img: \"\",\n        add_tag_img_rollover: \"\",\n        delete_tag_img: \"\",\n        ajax_autocomplete_tag_url: \"\",\n        ajax_retag_url: \"\",\n        ajax_delete_tag_url: \"\",\n        ajax_add_tag_url: \"\"\n    };\n\n    var settings = jQuery.extend(defaults, options);\n\n    //\n    // Initalize object's elements.\n    //\n\n    // Get elements for this object. For this_obj, assume the last element with the id is the \"this\"; this is somewhat of a hack to address the problem\n    // that there may be two tagging elements for a single item if there are both community and individual tags for an element.\n    var this_obj = $(this);\n    var tag_area = this_obj.find('.tag-area');\n    var toggle_link = this_obj.find('.toggle-link');\n    var tag_input_field = this_obj.find('.tag-input');\n    var add_tag_button = this_obj.find('.add-tag-button');\n\n    // Initialize toggle link.\n    toggle_link.click( function() {\n        // Take special actions depending on whether toggle is showing or hiding link.\n        var after_toggle_fn;\n        if (tag_area.is(\":hidden\")) {\n            after_toggle_fn = function() {\n                // If there are no tags, go right to editing mode by generating a click on the area.\n                var num_tags = $(this).find('.tag-button').length;\n                if (num_tags === 0) {\n                    tag_area.click();\n                }\n            };\n        } else {\n            after_toggle_fn = function() {\n                tag_area.blur();\n            };\n        }\n        tag_area.slideToggle(\"fast\", after_toggle_fn);\n        return $(this);\n    });\n\n    // Initialize tag input field.\n    if (settings.editable) {\n        tag_input_field.hide();\n    }\n    tag_input_field.keyup( function(e) {\n        if ( e.keyCode === 27 ) {\n            // Escape key\n            $(this).trigger( \"blur\" );\n        } else if (\n            ( e.keyCode === 13 ) || // Return Key\n            ( e.keyCode === 188 ) || // Comma\n            ( e.keyCode === 32 ) // Space\n        ) {\n            //\n            // Check input.\n            //\n\n            var new_value = this.value;\n\n            // Suppress space after a \":\"\n            if ( new_value.indexOf(\": \", new_value.length - 2) !== -1) {\n                this.value = new_value.substring(0, new_value.length-1);\n                return false;\n            }\n\n            // Remove trigger keys from input.\n            if ( (e.keyCode === 188) || (e.keyCode === 32) ) {\n                new_value = new_value.substring( 0 , new_value.length - 1 );\n            }\n\n            // Trim whitespace.\n            new_value = $.trim(new_value);\n\n            // Too short?\n            if (new_value.length < 2) {\n                return false;\n            }\n\n            //\n            // New tag OK - apply it.\n            //\n\n            this.value = \"\"; // Reset text field now that tag is being added\n\n            // Add button for tag after all other tag buttons.\n            var new_tag_button = build_tag_button(new_value);\n            var tag_buttons = tag_area.children(\".tag-button\");\n            if (tag_buttons.length !== 0) {\n                var last_tag_button = tag_buttons.slice(tag_buttons.length-1);\n                last_tag_button.after(new_tag_button);\n            } else {\n                tag_area.prepend(new_tag_button);\n            }\n\n            // Add tag to internal list.\n            var tag_name_and_value = new_value.split(\":\");\n            settings.tags[tag_name_and_value[0]] = tag_name_and_value[1];\n\n            // Update toggle link text.\n            var new_text = settings.get_toggle_link_text_fn(settings.tags);\n            toggle_link.text(new_text);\n\n            // Commit tag to server.\n            var zz = $(this);\n            $.ajax({\n                url: settings.ajax_add_tag_url,\n                data: { new_tag: new_value },\n                error: function() {\n                    // Failed. Roll back changes and show alert.\n                    new_tag_button.remove();\n                    delete settings.tags[tag_name_and_value[0]];\n                    var new_text = settings.get_toggle_link_text_fn(settings.tags);\n                    toggle_link.text(new_text);\n                    alert( \"Add tag failed\" );\n                },\n                success: function() {\n                    // Flush autocomplete cache because it's not out of date.\n                    // TODO: in the future, we could remove the particular item\n                    // that was chosen from the cache rather than flush it.\n                    zz.data('autocompleter').cacheFlush();\n                }\n            });\n\n            return false;\n        }\n    });\n\n    // Add autocomplete to input.\n    var format_item_func = function(key, row_position, num_rows, value, search_term) {\n        var tag_name_and_value = value.split(\":\");\n        return (tag_name_and_value.length === 1 ? tag_name_and_value[0] : tag_name_and_value[1]);\n    };\n    var autocomplete_options = { selectFirst: false, formatItem: format_item_func,\n            autoFill: false, highlight: false };\n    tag_input_field.autocomplete_verheul(settings.ajax_autocomplete_tag_url, autocomplete_options);\n\n\n    // Initialize delete tag images for current tags.\n    this_obj.find('.delete-tag-img').each(function() {\n        init_delete_tag_image( $(this) );\n    });\n\n\n    // Initialize tag click function.\n    init_tag_click_function($(this), settings.tag_click_fn);\n\n    // Initialize \"add tag\" button.\n    add_tag_button.click( function() {\n        $(this).hide();\n\n        // Clicking on button is the same as clicking on the tag area.\n        tag_area.click();\n        return false;\n    });\n\n    //\n    // Set up tag area interactions; these are needed only if tags are editable.\n    //\n    if (settings.editable) {\n        // When the tag area blurs, go to \"view tag\" mode.\n        tag_area.bind(\"blur\", function(e) {\n            if (_.size(settings.tags) > 0) {\n                add_tag_button.show();\n                tag_input_field.hide();\n                tag_area.removeClass(\"active-tag-area\");\n                // tag_area.addClass(\"tooltip\");\n            } else {\n                // No tags, so do nothing to ensure that input is still visible.\n            }\n        });\n\n        // On click, enable user to add tags.\n        tag_area.click( function(e) {\n            var is_active = $(this).hasClass(\"active-tag-area\");\n\n            // If a \"delete image\" object was pressed and area is inactive, do nothing.\n            if ($(e.target).hasClass(\"delete-tag-img\") && !is_active) {\n                return false;\n            }\n\n            // If a \"tag name\" object was pressed and area is inactive, do nothing.\n            if ($(e.target).hasClass(\"tag-name\") && !is_active) {\n                return false;\n            }\n\n            // Remove tooltip.\n            // $(this).removeClass(\"tooltip\");\n\n            // Hide add tag button, show tag_input field. Change background to show\n            // area is active.\n            $(this).addClass(\"active-tag-area\");\n            add_tag_button.hide();\n            tag_input_field.show();\n            tag_input_field.focus();\n\n            // Add handler to document that will call blur when the tag area is blurred;\n            // a tag area is blurred when a user clicks on an element outside the area.\n            var handle_document_click = function(e)  {\n                var check_click = function(tag_area, target) {\n                    var tag_area_id = tag_area.attr(\"id\");\n                    // Blur the tag area if the element clicked on is not in the tag area.\n                    if (target !== tag_area) {\n                        tag_area.blur();\n                        $(window).unbind(\"click.tagging_blur\");\n                        $(this).addClass(\"tooltip\");\n                    }\n                };\n                check_click(tag_area, $(e.target));\n            };\n            // TODO: we should attach the click handler to all frames in order to capture\n            // clicks outside the frame that this element is in.\n            //window.parent.document.onclick = handle_document_click;\n            //var temp = $(window.parent.document.body).contents().find(\"iframe\").html();\n            //alert(temp);\n            //$(document).parent().click(handle_document_click);\n            $(window).bind(\"click.tagging_blur\", handle_document_click);\n\n            return false;\n        });\n    }\n\n    // If using toggle link, hide the tag area. Otherwise, show the tag area.\n    if (settings.use_toggle_link) {\n        tag_area.hide();\n    }\n\n    //\n    // Helper functions.\n    //\n\n    //\n    // Collapse tag name + value into a single string.\n    //\n    function build_tag_str(tag_name, tag_value) {\n        return tag_name + ( tag_value ? \":\" + tag_value : \"\");\n    }\n\n\n    // Initialize a \"delete tag image\": when click, delete tag from UI and send delete request to server.\n    function init_delete_tag_image(delete_img) {\n        $(delete_img).mouseenter( function () {\n            $(this).attr(\"src\", settings.delete_tag_img_rollover);\n        });\n        $(delete_img).mouseleave( function () {\n            $(this).attr(\"src\", settings.delete_tag_img);\n        });\n        $(delete_img).click( function () {\n            // Tag button is image's parent.\n            var tag_button = $(this).parent();\n\n            // Get tag name, value.\n            var tag_name_elt = tag_button.find(\".tag-name\").eq(0);\n            var tag_str = tag_name_elt.text();\n            var tag_name_and_value = tag_str.split(\":\");\n            var tag_name = tag_name_and_value[0];\n            var tag_value = tag_name_and_value[1];\n\n            var prev_button = tag_button.prev();\n            tag_button.remove();\n\n            // Remove tag from local list for consistency.\n            delete settings.tags[tag_name];\n\n            // Update toggle link text.\n            var new_text = settings.get_toggle_link_text_fn(settings.tags);\n            toggle_link.text(new_text);\n\n            // Delete tag.\n            $.ajax({\n                url: settings.ajax_delete_tag_url,\n                data: { tag_name: tag_name },\n                error: function() {\n                    // Failed. Roll back changes and show alert.\n                    settings.tags[tag_name] = tag_value;\n                    if (prev_button.hasClass(\"tag-button\")) {\n                        prev_button.after(tag_button);\n                    } else {\n                        tag_area.prepend(tag_button);\n                    }\n                    alert( \"Remove tag failed\" );\n\n                    toggle_link.text(settings.get_toggle_link_text_fn(settings.tags));\n\n                    // TODO: no idea why it's necessary to set this up again.\n                    delete_img.mouseenter( function () {\n                        $(this).attr(\"src\", settings.delete_tag_img_rollover);\n                    });\n                    delete_img.mouseleave( function () {\n                        $(this).attr(\"src\", settings.delete_tag_img);\n                    });\n                },\n                success: function() {}\n            });\n\n            return true;\n        });\n    }\n\n    //\n    // Function that builds a tag button.\n    //\n    function build_tag_button(tag_str) {\n        // Build \"delete tag\" image.\n        var delete_img = $(\"<img/>\").attr(\"src\", settings.delete_tag_img).addClass(\"delete-tag-img\");\n        init_delete_tag_image(delete_img);\n\n        // Build tag button.\n        var tag_name_elt = $(\"<span>\").text(tag_str).addClass(\"tag-name\");\n        tag_name_elt.click( function() {\n            var tag_name_and_value = tag_str.split(\":\");\n            settings.tag_click_fn(tag_name_and_value[0], tag_name_and_value[1]);\n            return true;\n        });\n\n        var tag_button = $(\"<span></span>\").addClass(\"tag-button\");\n        tag_button.append(tag_name_elt);\n        // Allow delete only if element is editable.\n        if (settings.editable) {\n            tag_button.append(delete_img);\n        }\n\n        return tag_button;\n    }\n\n};\n\n// ============================================================================\n    return init_tag_click_function;\n}));\n"]}