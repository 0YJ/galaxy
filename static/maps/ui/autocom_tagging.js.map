{"version":3,"sources":["ui/autocom_tagging.js"],"names":["factory","define","amd","jQuery","init_tag_click_function","tag_elt","click_func","$","find","each","tag_str","this","text","split","tag_name_and_value","fn","autocomplete_tagging","options","init_delete_tag_image","delete_img","tag_value","attr","settings","delete_tag_img_rollover","tag_button","delete_tag_img","click","parent","eq","url","ajax_delete_tag_url","data","tag_name","prev_button","prev","tags","alert","get_toggle_link_text_fn","toggle_link","new_text","ajax","error","hasClass","after","tag_area","prepend","build_tag_button","tag_name_elt","success","addClass","tag_click_fn","append","editable","num_tags","_","size","name","value","input_size","in_form","use_toggle_link","item_id","add_tag_img","add_tag_img_rollover","ajax_autocomplete_tag_url","ajax_retag_url","extend","defaults","this_obj","tag_input_field","add_tag_button","after_toggle_fn","length","slideToggle","keyup","e","trigger","keyCode","new_value","indexOf","substring","new_tag_button","tag_buttons","children","last_tag_button","new_tag","zz","cacheFlush","autocomplete_options","selectFirst","formatItem","autoFill","highlight","search_term","hide","bind","show","removeClass","is_active","target","handle_document_click","check_click","focus","window","blur","unbind"],"mappings":"mCAEA,SAAUA,GAFV,mBAAAC,QAAAA,OAAAC,IAIQD,QAAA,UAAAD,GAGAC,EAAAA,QALR,CAOQ,SAAAE,GACAH,aAaJ,SAAAI,EAAAC,EAAAC,GACAC,EAAAF,GACAG,KAAA,aACAC,KAASL,WACHC,EAAAA,MACGG,MAAK,WAEA,IACME,EADMH,EAAAI,MAAWC,OACrBC,MAAA,KAEAP,OADAA,EAAIQ,EAAqBJ,GAAQG,EAAjC,KACAP,MArBnB,IAAEC,EAAAJ,EAoZC,OAzXAA,EAAOY,GAAGC,qBAAuB,SAASC,GAqS9B,SAAAC,EAAeJ,GACfP,EAAAY,GAAIC,WAAYN,WAdhBP,EAAEI,MAAMU,KAAK,MAAOC,EAASC,2BAiB7BC,EAAAA,GAAAA,WAAA,WAdAjB,EAAEI,MAAMU,KAAK,MAAOC,EAASG,kBAiB7BlB,EAAAY,GAAAO,MAAOJ,WAEP,IAAAE,EAAAjB,EAAAI,MAAAgB,SAKApB,EAjBmBiB,EAAWhB,KAAK,aAAaoB,GAAG,GAgBnDhB,OACOC,MAAA,KACHgB,EAAKP,EAASQ,GACdC,EAAQC,EAAF,GAEFC,EAAAT,EAAAU,OACAZ,EAAAA,gBAGCA,EAFDa,KAEOH,GAGPI,IAAAA,EAAAA,EAAMC,wBAANf,EAAAa,MA+CZ,OA7DIG,EAAY1B,KAAK2B,GAoBThC,EAAAiC,MACArB,IAAAA,EAAAA,oBACIZ,MAAAA,SAAAyB,GAIHS,MAAA,WAEGlC,EAAAA,KAAAyB,GAAAZ,EACHa,EAFDS,SAAA,cAxBDT,EAAAU,MAAAnB,GAAPoB,EAAAC,QAAArB,GA+BAY,MAAO,qBAEdE,EAAA1B,KAnBmBU,EAASe,wBAAwBf,EAASa,OAwBrDW,EAAAA,WAAT,WACIvC,EAAAI,MAAAU,KACIF,MAGJD,EAAsBC,2BAGlB4B,EAAexC,WAAA,WAGnBwC,EAAarB,MAAML,KAAA,MAAWC,EAAAG,mBAM1BuB,QAAO,gBAGPxB,IAOJ,SAAAsB,EAAApC,GApXR,IAAAS,EAAAZ,EAAA,UA4Vac,KAAK,MAAOC,EAASG,gBA4BlCwB,SAAA,kBACA/B,EAAOd,GAxBC,IAAI2C,EAAexC,EAAE,UAChBK,KAAKF,GACLuC,SAAS,YACdF,EAAarB,MAAM,WACf,IAAIZ,EAAqBJ,EAAQG,MAAM,KAKvC,OAJAS,EAAS4B,aACLpC,EAAmB,GACnBA,EAAmB,KAEhB,IAGX,IAAIU,EAAajB,EAAE,iBAAiB0C,SAAS,cAO7C,OANAzB,EAAW2B,OAAOJ,GAEdzB,EAAS8B,UACT5B,EAAW2B,OAAOhC,GAGfK,EApXfrB,IAAAA,GACIkC,wBAAe,SAAAF,GACXE,IACIgB,EAAWC,EAAXC,KAAApB,GAMC,OALDkB,EAAIA,EACAA,GAAcA,EAAA,EAAA,QAAA,QAEX,YAIVH,aAVU,SAAAM,EAAAC,KAWXP,UAAAA,EACAE,WAAAA,GACAM,SAAAA,EACAC,QACAxB,iBAfW,EAgBXyB,QAAAA,GACAC,YAAS,GACTC,qBAlBW,GAmBXC,eAAAA,GACAtC,0BApBW,GAqBXuC,eAAAA,GACAC,oBAAgB,GAChBnC,iBAAAA,IAIAR,EAAWnB,EAAO+D,OAAOC,EAAUlD,GAOvCmD,EAAA7D,EAAAI,MACAiC,EAAIwB,EAAa5D,KAAjB,aACA8B,EAAIM,EAAWwB,KAAA,gBACfC,EAAkBD,EAAS5D,KAAK,cAChC8D,EAAID,EAAkBD,KAAS5D,mBAG/B8B,EAAAZ,MAAA,WAEI,IAAA6C,EAeA3B,OAbA2B,EADA3B,EAAI2B,GAAAA,WACY,WAGJlB,IADJ9C,EAAAI,MAAAH,KAAA,eAAAgE,QAEA5B,EAAIS,SAIL,WACHkB,EAAAA,QAGH3B,EAAA6B,YAAA,OAAAF,GACD3B,EAAAA,QAIJtB,EAAA8B,UACAiB,EAAajB,OAEZiB,EAAAK,MAAA,SAAAC,GACDN,GAAgBK,KAAhBL,EAAAA,QAEQ9D,EAAAI,MAAAiE,QAAA,aACArE,GAEEsE,KADLF,EAHDE,SAKkB,MAAdF,EAAEE,SACY,KAAdF,EAAEE,QAHC,CASH,IAAAC,EAAIA,KAAAA,MAGJ,IAA+C,IAA/CA,EAAIA,QAAUC,KAAAA,EAAcD,OAAUN,GAElC,OADA7D,KAAA8C,MAAKA,EAAQqB,UAAUE,EAAAA,EAAaF,OAAUN,IAC9C,EAYJ,GARMK,MAANF,EAAAE,SAA2BA,KAAvBF,EAAcE,UACdC,EAAAA,EAAYA,UAAUE,EAAAA,EAAaF,OAAUN,KAIjDM,EAAAA,EAAAA,KAAAA,IAGIA,OAAUN,EACV,OAAA,EAOJ7D,KAAA8C,MAAKA,GAGL,IAAAwB,EAAIA,EAAiBnC,GACrBoC,EAAIA,EAActC,SAASuC,eACXX,IAAhBU,EAAIA,OACIE,EAAkBF,MAGtBE,EAAAA,OAAgBzC,GAEhBC,MAASC,GAATD,EAASC,QAAQoC,GAIrB,IAAInE,EAAqBgE,EAAUjE,MAAM,KAGzCS,EAAAa,KAAArB,EAAA,IAAAA,EAAA,GACA,IAAIyB,EAAWjB,EAASe,wBAAwBf,EAASa,MAGzDG,EAAA1B,KAAA2B,GAGIV,IAAAA,EAAAA,EAAAA,MAwBZ,OAvBYE,EAAAA,MACAU,IAAAA,EAAAA,iBACIV,MAAAsD,QAAAP,GACAG,MAAAA,WAEAA,EAAI1C,gBAGJD,EAAAA,KAAY1B,EAAZ,IACAwB,IAAAA,EAAMd,EAAAe,wBACTf,EAZEa,MAcCG,EAAA1B,KAAA2B,GACAH,MAAA,mBAEAkD,QAAAA,WAIRA,EAAAvD,KAAO,iBAAPwD,iBAIR,KAaA,IAAIC,GAgBJC,aAAA,EACArF,WAjBIoF,SACAC,EACAC,EACAC,EACAC,EAJuBC,GALvB,IAAI/E,EAAqB2C,EAAM5C,MAAM,KAgBzC,OAAA,IAAAC,EAAA0D,OACAJ,EAAc,GACVlD,EAAAA,IAVAyE,UAAU,EAgBdC,WAAA,GAEIrF,EAAQuF,qBAdRxE,EAAS0C,0BAgBTwB,GAXJpB,EAAS5D,KAAK,mBAAmBC,KAAK,WAgBtCS,EAAAX,EAAAI,SAIIP,EAAAG,EAAAI,MAAAW,EAAA4B,cAGQoB,EAAAA,MAAAA,WAKA,OAJAD,EAAAA,MAAAA,OAGHzB,EALDlB,SAMI,IAMJJ,EAAA8B,WAEAR,EAAAmD,KAAA,OAAA,SAAApB,GACArB,EAAAC,KAAMoB,EAAUjC,MAAZ,IACA4B,EAAO0B,OACV3B,EAAAyB,OAdGlD,EAASqD,YAAY,sBAQ7BrD,EAASlB,MAAM,SAASiD,GAgBpB,IAAAuB,EAAA3F,EAAAI,MAAA+B,SAAA,mBAGA4B,GAAAA,EAAAA,EAAAA,QAAAA,SAAA,oBAAA4B,EACA7B,OAAAA,EAIA,GAAA9D,EAAAoE,EAAAwB,QAAAzD,SAAA,cAAAwD,EACA,OAAIE,EAQK7F,EAAAI,MAAAsC,SAAA,mBACJqB,EARDwB,OASAO,EAAAA,OACHhC,EAXDiC,QAmCR,OAFA/F,EAAAgG,QAAAR,KAAA,qBAlBQ,SAAApB,IACA,SAAA/B,EAAAuD,GACAvD,EAAAvB,KAAA,MAbY8E,IAAWvD,IAgBhBA,EAAP4D,OA7CJjG,EAAAgG,QAAAE,OAAA,sBA+CHlG,EAAAI,MAAAsC,SAAA,YAGG3B,CAASsC,EAAiBrD,EAAAoE,EAAAwB,YAU9B,KAKA7E,EAAAsC,iBACAhB,EAAS1B,QAmGNd","file":"../../scripts/ui/autocom_tagging.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function(jQuery) {\n    \"use_strict\";\n\n    var $ = jQuery;\n\n    // ============================================================================\n    /**\n* JQuery extension for tagging with autocomplete.\n* @author: Jeremy Goecks\n* @require: jquery.autocomplete plugin\n*/\n    //\n    // Initialize \"tag click functions\" for tags.\n    //\n    function init_tag_click_function(tag_elt, click_func) {\n        $(tag_elt)\n            .find(\".tag-name\")\n            .each(function() {\n                $(this).click(function() {\n                    var tag_str = $(this).text();\n                    var tag_name_and_value = tag_str.split(\":\");\n                    click_func(tag_name_and_value[0], tag_name_and_value[1]);\n                    return true;\n                });\n            });\n    }\n\n    jQuery.fn.autocomplete_tagging = function(options) {\n        var defaults = {\n            get_toggle_link_text_fn: function(tags) {\n                var text = \"\";\n                var num_tags = _.size(tags);\n                if (num_tags > 0) {\n                    text = num_tags + (num_tags > 1 ? \" Tags\" : \" Tag\");\n                } else {\n                    text = \"Add tags\";\n                }\n                return text;\n            },\n            tag_click_fn: function(name, value) {},\n            editable: true,\n            input_size: 20,\n            in_form: false,\n            tags: {},\n            use_toggle_link: true,\n            item_id: \"\",\n            add_tag_img: \"\",\n            add_tag_img_rollover: \"\",\n            delete_tag_img: \"\",\n            ajax_autocomplete_tag_url: \"\",\n            ajax_retag_url: \"\",\n            ajax_delete_tag_url: \"\",\n            ajax_add_tag_url: \"\"\n        };\n\n        var settings = jQuery.extend(defaults, options);\n\n        //\n        // Initalize object's elements.\n        //\n\n        // Get elements for this object. For this_obj, assume the last element with the id is the \"this\"; this is somewhat of a hack to address the problem\n        // that there may be two tagging elements for a single item if there are both community and individual tags for an element.\n        var this_obj = $(this);\n        var tag_area = this_obj.find(\".tag-area\");\n        var toggle_link = this_obj.find(\".toggle-link\");\n        var tag_input_field = this_obj.find(\".tag-input\");\n        var add_tag_button = this_obj.find(\".add-tag-button\");\n\n        // Initialize toggle link.\n        toggle_link.click(function() {\n            // Take special actions depending on whether toggle is showing or hiding link.\n            var after_toggle_fn;\n            if (tag_area.is(\":hidden\")) {\n                after_toggle_fn = function() {\n                    // If there are no tags, go right to editing mode by generating a click on the area.\n                    var num_tags = $(this).find(\".tag-button\").length;\n                    if (num_tags === 0) {\n                        tag_area.click();\n                    }\n                };\n            } else {\n                after_toggle_fn = function() {\n                    tag_area.blur();\n                };\n            }\n            tag_area.slideToggle(\"fast\", after_toggle_fn);\n            return $(this);\n        });\n\n        // Initialize tag input field.\n        if (settings.editable) {\n            tag_input_field.hide();\n        }\n        tag_input_field.keyup(function(e) {\n            if (e.keyCode === 27) {\n                // Escape key\n                $(this).trigger(\"blur\");\n            } else if (\n                e.keyCode === 13 || // Return Key\n                e.keyCode === 188 || // Comma\n                e.keyCode === 32 // Space\n            ) {\n                //\n                // Check input.\n                //\n\n                var new_value = this.value;\n\n                // Suppress space after a \":\"\n                if (new_value.indexOf(\": \", new_value.length - 2) !== -1) {\n                    this.value = new_value.substring(0, new_value.length - 1);\n                    return false;\n                }\n\n                // Remove trigger keys from input.\n                if (e.keyCode === 188 || e.keyCode === 32) {\n                    new_value = new_value.substring(0, new_value.length - 1);\n                }\n\n                // Trim whitespace.\n                new_value = $.trim(new_value);\n\n                // Too short?\n                if (new_value.length < 2) {\n                    return false;\n                }\n\n                //\n                // New tag OK - apply it.\n                //\n\n                this.value = \"\"; // Reset text field now that tag is being added\n\n                // Add button for tag after all other tag buttons.\n                var new_tag_button = build_tag_button(new_value);\n                var tag_buttons = tag_area.children(\".tag-button\");\n                if (tag_buttons.length !== 0) {\n                    var last_tag_button = tag_buttons.slice(\n                        tag_buttons.length - 1\n                    );\n                    last_tag_button.after(new_tag_button);\n                } else {\n                    tag_area.prepend(new_tag_button);\n                }\n\n                // Add tag to internal list.\n                var tag_name_and_value = new_value.split(\":\");\n                settings.tags[tag_name_and_value[0]] = tag_name_and_value[1];\n\n                // Update toggle link text.\n                var new_text = settings.get_toggle_link_text_fn(settings.tags);\n                toggle_link.text(new_text);\n\n                // Commit tag to server.\n                var zz = $(this);\n                $.ajax({\n                    url: settings.ajax_add_tag_url,\n                    data: { new_tag: new_value },\n                    error: function() {\n                        // Failed. Roll back changes and show alert.\n                        new_tag_button.remove();\n                        delete settings.tags[tag_name_and_value[0]];\n                        var new_text = settings.get_toggle_link_text_fn(\n                            settings.tags\n                        );\n                        toggle_link.text(new_text);\n                        alert(\"Add tag failed\");\n                    },\n                    success: function() {\n                        // Flush autocomplete cache because it's not out of date.\n                        // TODO: in the future, we could remove the particular item\n                        // that was chosen from the cache rather than flush it.\n                        zz.data(\"autocompleter\").cacheFlush();\n                    }\n                });\n\n                return false;\n            }\n        });\n\n        // Add autocomplete to input.\n        var format_item_func = function(\n            key,\n            row_position,\n            num_rows,\n            value,\n            search_term\n        ) {\n            var tag_name_and_value = value.split(\":\");\n            return tag_name_and_value.length === 1\n                ? tag_name_and_value[0]\n                : tag_name_and_value[1];\n        };\n        var autocomplete_options = {\n            selectFirst: false,\n            formatItem: format_item_func,\n            autoFill: false,\n            highlight: false\n        };\n        tag_input_field.autocomplete_verheul(\n            settings.ajax_autocomplete_tag_url,\n            autocomplete_options\n        );\n\n        // Initialize delete tag images for current tags.\n        this_obj.find(\".delete-tag-img\").each(function() {\n            init_delete_tag_image($(this));\n        });\n\n        // Initialize tag click function.\n        init_tag_click_function($(this), settings.tag_click_fn);\n\n        // Initialize \"add tag\" button.\n        add_tag_button.click(function() {\n            $(this).hide();\n\n            // Clicking on button is the same as clicking on the tag area.\n            tag_area.click();\n            return false;\n        });\n\n        //\n        // Set up tag area interactions; these are needed only if tags are editable.\n        //\n        if (settings.editable) {\n            // When the tag area blurs, go to \"view tag\" mode.\n            tag_area.bind(\"blur\", function(e) {\n                if (_.size(settings.tags) > 0) {\n                    add_tag_button.show();\n                    tag_input_field.hide();\n                    tag_area.removeClass(\"active-tag-area\");\n                    // tag_area.addClass(\"tooltip\");\n                } else {\n                    // No tags, so do nothing to ensure that input is still visible.\n                }\n            });\n\n            // On click, enable user to add tags.\n            tag_area.click(function(e) {\n                var is_active = $(this).hasClass(\"active-tag-area\");\n\n                // If a \"delete image\" object was pressed and area is inactive, do nothing.\n                if ($(e.target).hasClass(\"delete-tag-img\") && !is_active) {\n                    return false;\n                }\n\n                // If a \"tag name\" object was pressed and area is inactive, do nothing.\n                if ($(e.target).hasClass(\"tag-name\") && !is_active) {\n                    return false;\n                }\n\n                // Remove tooltip.\n                // $(this).removeClass(\"tooltip\");\n\n                // Hide add tag button, show tag_input field. Change background to show\n                // area is active.\n                $(this).addClass(\"active-tag-area\");\n                add_tag_button.hide();\n                tag_input_field.show();\n                tag_input_field.focus();\n\n                // Add handler to document that will call blur when the tag area is blurred;\n                // a tag area is blurred when a user clicks on an element outside the area.\n                var handle_document_click = function(e) {\n                    var check_click = function(tag_area, target) {\n                        var tag_area_id = tag_area.attr(\"id\");\n                        // Blur the tag area if the element clicked on is not in the tag area.\n                        if (target !== tag_area) {\n                            tag_area.blur();\n                            $(window).unbind(\"click.tagging_blur\");\n                            $(this).addClass(\"tooltip\");\n                        }\n                    };\n                    check_click(tag_area, $(e.target));\n                };\n                // TODO: we should attach the click handler to all frames in order to capture\n                // clicks outside the frame that this element is in.\n                //window.parent.document.onclick = handle_document_click;\n                //var temp = $(window.parent.document.body).contents().find(\"iframe\").html();\n                //alert(temp);\n                //$(document).parent().click(handle_document_click);\n                $(window).bind(\"click.tagging_blur\", handle_document_click);\n\n                return false;\n            });\n        }\n\n        // If using toggle link, hide the tag area. Otherwise, show the tag area.\n        if (settings.use_toggle_link) {\n            tag_area.hide();\n        }\n\n        //\n        // Helper functions.\n        //\n\n        //\n        // Collapse tag name + value into a single string.\n        //\n        function build_tag_str(tag_name, tag_value) {\n            return tag_name + (tag_value ? \":\" + tag_value : \"\");\n        }\n\n        // Initialize a \"delete tag image\": when click, delete tag from UI and send delete request to server.\n        function init_delete_tag_image(delete_img) {\n            $(delete_img).mouseenter(function() {\n                $(this).attr(\"src\", settings.delete_tag_img_rollover);\n            });\n            $(delete_img).mouseleave(function() {\n                $(this).attr(\"src\", settings.delete_tag_img);\n            });\n            $(delete_img).click(function() {\n                // Tag button is image's parent.\n                var tag_button = $(this).parent();\n\n                // Get tag name, value.\n                var tag_name_elt = tag_button.find(\".tag-name\").eq(0);\n                var tag_str = tag_name_elt.text();\n                var tag_name_and_value = tag_str.split(\":\");\n                var tag_name = tag_name_and_value[0];\n                var tag_value = tag_name_and_value[1];\n\n                var prev_button = tag_button.prev();\n                tag_button.remove();\n\n                // Remove tag from local list for consistency.\n                delete settings.tags[tag_name];\n\n                // Update toggle link text.\n                var new_text = settings.get_toggle_link_text_fn(settings.tags);\n                toggle_link.text(new_text);\n\n                // Delete tag.\n                $.ajax({\n                    url: settings.ajax_delete_tag_url,\n                    data: { tag_name: tag_name },\n                    error: function() {\n                        // Failed. Roll back changes and show alert.\n                        settings.tags[tag_name] = tag_value;\n                        if (prev_button.hasClass(\"tag-button\")) {\n                            prev_button.after(tag_button);\n                        } else {\n                            tag_area.prepend(tag_button);\n                        }\n                        alert(\"Remove tag failed\");\n\n                        toggle_link.text(\n                            settings.get_toggle_link_text_fn(settings.tags)\n                        );\n\n                        // TODO: no idea why it's necessary to set this up again.\n                        delete_img.mouseenter(function() {\n                            $(this).attr(\n                                \"src\",\n                                settings.delete_tag_img_rollover\n                            );\n                        });\n                        delete_img.mouseleave(function() {\n                            $(this).attr(\"src\", settings.delete_tag_img);\n                        });\n                    },\n                    success: function() {}\n                });\n\n                return true;\n            });\n        }\n\n        //\n        // Function that builds a tag button.\n        //\n        function build_tag_button(tag_str) {\n            // Build \"delete tag\" image.\n            var delete_img = $(\"<img/>\")\n                .attr(\"src\", settings.delete_tag_img)\n                .addClass(\"delete-tag-img\");\n            init_delete_tag_image(delete_img);\n\n            // Build tag button.\n            var tag_name_elt = $(\"<span>\")\n                .text(tag_str)\n                .addClass(\"tag-name\");\n            tag_name_elt.click(function() {\n                var tag_name_and_value = tag_str.split(\":\");\n                settings.tag_click_fn(\n                    tag_name_and_value[0],\n                    tag_name_and_value[1]\n                );\n                return true;\n            });\n\n            var tag_button = $(\"<span></span>\").addClass(\"tag-button\");\n            tag_button.append(tag_name_elt);\n            // Allow delete only if element is editable.\n            if (settings.editable) {\n                tag_button.append(delete_img);\n            }\n\n            return tag_button;\n        }\n    };\n\n    // ============================================================================\n    return init_tag_click_function;\n});\n"]}