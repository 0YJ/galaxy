{"version":3,"sources":["ui/autocom_tagging.js"],"names":["factory","define","amd","jQuery","init_tag_click_function","tag_elt","click_func","$","tag_str","this","text","tag_name_and_value","split","fn","autocomplete_tagging","options","init_delete_tag_image","delete_img","mouseleave","attr","settings","delete_tag_img","click","tag_button","tag_name_elt","eq","tag_value","tag_name","prev_button","prev","remove","new_text","get_toggle_link_text_fn","tags","error","url","ajax_delete_tag_url","tag_area","after","prepend","alert","mouseenter","success","addClass","tag_click_fn","editable","defaults","num_tags","_","size","name","value","input_size","in_form","use_toggle_link","item_id","add_tag_img","add_tag_img_rollover","ajax_autocomplete_tag_url","ajax_retag_url","extend","this_obj","find","toggle_link","tag_input_field","add_tag_button","after_toggle_fn","length","slideToggle","keyup","e","trigger","keyCode","new_value","indexOf","substring","new_tag_button","build_tag_button","tag_buttons","children","last_tag_button","zz","data","new_tag","cacheFlush","format_item_func","key","row_position","autocomplete_options","selectFirst","formatItem","autoFill","highlight","autocomplete_verheul","each","hide","removeClass","is_active","hasClass","target","show","focus","handle_document_click","tag_area_id","window","blur","unbind","bind"],"mappings":"cAAA,SAAAA,GACA,kBAAAC,SAAAA,OAAAC,IAIQD,QAAA,UAAAD,GAFJA,EAKOG,SAGN,SAAAA,GAEJ,YAaD,SAAAC,GAAAC,EAAAC,GACAC,EAAAF,GAASD,KAAAA,aAAAA,KAAwBC,WAC7BE,EAAEF,MAAAA,MAAF,WACIE,GAAEC,GAAaD,EAAAE,MAAAC,OACXC,EAAcH,EAAdI,MAAA,IAEAN,OADAA,GAAIK,EAAqBH,GAAAA,EAAzB,KACAF,MAhBZ,GAAIC,GAAIJ,CAqXJ,OA/VJA,GAAOU,GAAGC,qBAAuB,SAASC,GA0QjC,QAFDC,GAAAC,GAGAV,EAAAA,GAAEU,WAAYC,WACVX,EAAAA,MAAEY,KAAMA,MAAKC,EAAOA,2BAExBb,EAAAA,GAAEU,WAAmB,WACjBV,EAAAE,MAAAU,KAAA,MAAAC,EAAAC,kBADJd,EAAEU,GAAYK,MAAO,WAKjB,GAAAC,GAAIC,EAAAA,MAAeD,SAGnBC,EAAeb,EAAAA,KAAAA,aAAfc,GAAA,GACAjB,EAAIkB,EAAYf,OAFZA,EAAqBH,EAAQI,MAAM,KAIvCe,EAAIC,EAAyBC,GAC7BN,EAAWO,EAAX,GAEAF,EAAAL,EAAAM,MACAN,GAAOH,eAGPA,GAAIW,KAAWX,EAGf,IAAAW,GAAAX,EAAAY,wBAAAZ,EAAAa,KA2BA,OA1BA1B,GAAOG,KAAAqB,GAGHG,EAAAA,MACIC,IAAAf,EAAAgB,oBACAhB,MAAAA,SAASa,GACTC,MAAA,WAECd,EAFDa,KAEON,GAAAD,EACHW,EAAAA,SAAiBd,cACpBK,EAAAU,MAAAf,GADGc,EAASE,QAAQhB,GAErBiB,MAAO,qBAKPvB,EAAAA,KAAWwB,EAAYT,wBAAYZ,EAAAa,OAGnChB,EAAAA,WAAWC,WACPX,EAAAA,MAAEY,KAAMA,MAAKC,EAAOA,2BAE3BH,EAtBEC,WAAA,WAuBHwB,EAAAA,MAASvB,KAAA,MAAAC,EAAaC,mBAG1BqB,QAAO,gBAAA,IAUX1B,QAAAA,GAAAA,GAEA,GAAAC,GAAAV,EAAA,UAAAY,KAAA,MAAAC,EAAAC,gBAAAsB,SAAA,iBACA3B,GAAIQ,EAGAJ,IAAAA,GAASwB,EAAAA,UAAajC,KAAAA,GAAAA,SAAuBA,WAC7Ca,GAAAF,MAAA,WACH,GAJDX,GAAAH,EAAAI,MAAA,IAMA,OAJIQ,GAASwB,aAAajC,EAAmB,GAAIA,EAAmB,KAIhEY,GAGJ,IAAAA,GAAasB,EAAAA,iBAAUF,SAAA,aAIvB,OAHIpB,GAAAA,OAAAA,GADAH,EAASyB,UAIbtB,EAAOA,OAAPN,GAAOM,EAvVX,GAAIuB,IAAJd,wBAAe,SAAAC,GACXD,GACIe,GAAWC,EAAXC,KAAAhB,EAMC,OALDc,GAAIA,EACAA,GAAcA,EAAA,EAAA,QAAA,QAEX,YAIVH,aAVU,SAAAM,EAAAC,KAWXP,UAAAA,EACAC,WAAAA,GACAO,SAAAA,EACAC,QACApB,iBAfW,EAgBXqB,QAAAA,GACAC,YAAS,GACTC,qBAlBW,GAmBXC,eAAAA,GACApC,0BApBW,GAqBXqC,eAAAA,GACAC,oBAAgB,GAChBvB,iBAAAA,IAIAhB,EAAWjB,EAAOyD,OAAOd,EAAU/B,GAOvC8C,EAAAtD,EAAAE,MACA4B,EAAIwB,EAAaC,KAAjB,aACAC,EAAI1B,EAAWwB,KAAA,gBACfG,EAAkBH,EAASC,KAAK,cAChCG,EAAID,EAAkBH,KAASC,kBAG/BC,GAAAzC,MAAA,WAEI,GAAA4C,EAeA7B,OAbA6B,GADA7B,EAAI6B,GAAAA,WACY,WAGJnB,IADJxC,EAAAE,MAAAqD,KAAA,eAAAK,QAEA9B,EAAIU,SAIL,WACHmB,EAAAA,QAGH7B,EAAA+B,YAAA,OAAAF,GACD7B,EAAAA,QAIJjB,EAAAyB,UACAmB,EAAanB,OAEZmB,EAAAK,MAAA,SAAAC,GACDN,GAAgBK,KAAhBL,EAAAA,QAEQzD,EAAAE,MAAA8D,QAAA,YACAhE,IAEIiE,KAJRF,EAAAE,SAKoB,MAAZA,EAAAA,SAFD,KAGCA,EAAAA,QAHD,CASH,GAAAC,GAAIA,KAAAA,KAGJ,KAAK,IAALA,EAAKA,QAAUC,KAAVD,EAAwBA,OAAUN,GAEnC,MADA1D,MAAA0C,MAAKA,EAAQsB,UAAUE,EAAAA,EAAaF,OAAAA,IACpC,CAYJ,IARQD,MAARF,EAAAE,SAA6B,KAAxBF,EAAAE,UACDC,EAAAA,EAAYA,UAAUE,EAAAA,EAAeF,OAAUN,IAInDM,EAAAA,EAAAA,KAAAA,GAGAA,EAAIA,OAAUN,EACV,OAAA,CAOJ1D,MAAA0C,MAAKA,EAGL,IAAAyB,GAAIA,EAAiBC,GACrBC,EAAIA,EAAczC,SAAS0C,cAC3B,IAAgBZ,IAAhBW,EAAIA,OAAA,CACA,GAAAE,GAAIA,EAAkBF,MAAAA,EAAkBA,OAAAA,EACxCE,GAAAA,MAAAA,OAEA3C,GAAAA,QAASE,EAIb,IAAA5B,GAAIA,EAAqB8D,MAAAA,IACzBrD,GAAAA,KAAAA,EAAcT,IAAAA,EAAyBA,EAGvC,IAAAoB,GAAIA,EAAWX,wBAASY,EAAwBZ,KAChD2C,GAAAA,KAAAA,EAGA,IAAAkB,GAAA1E,EAAAE,KAoBA,OAnBAF,GAAAA,MACI4B,IAAAA,EAAKf,iBACL8D,MAAAA,QAAQC,GACRjD,MAAAA,WAEI0C,EAAAA,eACAxD,GAAOA,KAAAA,EAAcT,GACrB,IAAAoB,GAAIA,EAAWX,wBAASY,EAAwBZ,KAChD2C,GAAAA,KAAAA,GACAvB,MAAAA,mBAEJE,QAAAA,WAIIuC,EAAAA,KAAAA,iBAAQG,iBAIhB,IAKR,IAAAC,GAAIA,SAAmBC,EAAnBD,EAAAA,EAAiCE,EAAAA,GACjC,GAAA5E,GAAIA,EAAqBwC,MAAMvC,IAC/B,OAAQ,KAARD,EAAQA,OAAAA,EAAkCA,GAAlCA,EAA0DA,IAEtE6E,GAAIA,aAAyBC,EAAaC,WAAOA,EACzCC,UAAU,EAAOC,WAAW,EACpC5B,GAAAA,qBAAgB6B,EAAqBzE,0BAASsC,GAK1C1C,EAAAA,KAAAA,mBAAyB8E,KAAzB,WACH9E,EAFDT,EAAAE,SAQAL,EAAAG,EAAAE,MAAAW,EAAAwB,cACAqB,EAAe3C,MAAO,WAKlB,MAFAf,GAAAE,MAAAsF,OAGH1D,EANDf,SAKW,IAQPe,EAAAA,WAEQ4B,EAAAA,KAAAA,OAAAA,SAAAK,GACAN,EAAAA,KAAAA,EAAAA,MAAA,IACA3B,EAAS2D,OACThC,EAAA+B,OACH1D,EAAM2D,YAAA,sBAMX3D,EAASf,MAAO,SAASgD,GAGrB,GAAA2B,GAAA1F,EAAAE,MAAAyF,SAAA,kBAGC,IAAA3F,EAAA+D,EAAA6B,QAAAD,SAAA,oBAAAD,EADG,OAAO,CAMV,IAAA1F,EAAA+D,EAAA6B,QAAAD,SAAA,cAAAD,EADG,OAAO,CAUXjC,GAAAA,MAAAA,SAAAA,mBACAA,EAAAA,OADAA,EAAgBoC,OAGhBpC,EAAAqC,OAIQ,IAAAC,GAAIC,SAAclE,IAClB,SAAAA,EAAA8D,GACIA,EAAJhF,KAAyB,KAErBZ,KAAEiG,IACFjG,EAAEkG,OACLlG,EAAAiG,QAAAE,OAAA,sBAPLnG,EAAAE,MAAAkC,SAAA,aAWJN,EAAA9B,EAAA+D,EAAA6B,SAUP,OAFO5F,GAAAiG,QAAAG,KAAO,qBAAPL,IAEP,KAKAlF,EAAAkC,iBADGjB,EAAS0D,QAwGN3F","file":"../../scripts/ui/autocom_tagging.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([ 'jquery' ], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n\n}(function ( jQuery ) {\n'use_strict';\n\nvar $ = jQuery;\n\n// ============================================================================\n/**\n* JQuery extension for tagging with autocomplete.\n* @author: Jeremy Goecks\n* @require: jquery.autocomplete plugin\n*/\n//\n// Initialize \"tag click functions\" for tags.\n//\nfunction init_tag_click_function(tag_elt, click_func) {\n    $(tag_elt).find('.tag-name').each( function() {\n        $(this).click( function() {\n            var tag_str = $(this).text();\n            var tag_name_and_value = tag_str.split(\":\");\n            click_func(tag_name_and_value[0], tag_name_and_value[1]);\n            return true;\n        });\n    });\n}\n\njQuery.fn.autocomplete_tagging = function(options) {\n\n    var defaults = {\n        get_toggle_link_text_fn: function(tags) {\n            var text = \"\";\n            var num_tags = _.size(tags);\n            if (num_tags > 0) {\n                text = num_tags + (num_tags > 1 ? \" Tags\" : \" Tag\");\n            } else {\n                text = \"Add tags\";\n            }\n            return text;\n        },\n        tag_click_fn : function (name, value) {},\n        editable: true,\n        input_size: 20,\n        in_form: false,\n        tags : {},\n        use_toggle_link: true,\n        item_id: \"\",\n        add_tag_img: \"\",\n        add_tag_img_rollover: \"\",\n        delete_tag_img: \"\",\n        ajax_autocomplete_tag_url: \"\",\n        ajax_retag_url: \"\",\n        ajax_delete_tag_url: \"\",\n        ajax_add_tag_url: \"\"\n    };\n\n    var settings = jQuery.extend(defaults, options);\n\n    //\n    // Initalize object's elements.\n    //\n\n    // Get elements for this object. For this_obj, assume the last element with the id is the \"this\"; this is somewhat of a hack to address the problem\n    // that there may be two tagging elements for a single item if there are both community and individual tags for an element.\n    var this_obj = $(this);\n    var tag_area = this_obj.find('.tag-area');\n    var toggle_link = this_obj.find('.toggle-link');\n    var tag_input_field = this_obj.find('.tag-input');\n    var add_tag_button = this_obj.find('.add-tag-button');\n\n    // Initialize toggle link.\n    toggle_link.click( function() {\n        // Take special actions depending on whether toggle is showing or hiding link.\n        var after_toggle_fn;\n        if (tag_area.is(\":hidden\")) {\n            after_toggle_fn = function() {\n                // If there are no tags, go right to editing mode by generating a click on the area.\n                var num_tags = $(this).find('.tag-button').length;\n                if (num_tags === 0) {\n                    tag_area.click();\n                }\n            };\n        } else {\n            after_toggle_fn = function() {\n                tag_area.blur();\n            };\n        }\n        tag_area.slideToggle(\"fast\", after_toggle_fn);\n        return $(this);\n    });\n\n    // Initialize tag input field.\n    if (settings.editable) {\n        tag_input_field.hide();\n    }\n    tag_input_field.keyup( function(e) {\n        if ( e.keyCode === 27 ) {\n            // Escape key\n            $(this).trigger( \"blur\" );\n        } else if (\n            ( e.keyCode === 13 ) || // Return Key\n            ( e.keyCode === 188 ) || // Comma\n            ( e.keyCode === 32 ) // Space\n        ) {\n            //\n            // Check input.\n            //\n\n            var new_value = this.value;\n\n            // Suppress space after a \":\"\n            if ( new_value.indexOf(\": \", new_value.length - 2) !== -1) {\n                this.value = new_value.substring(0, new_value.length-1);\n                return false;\n            }\n\n            // Remove trigger keys from input.\n            if ( (e.keyCode === 188) || (e.keyCode === 32) ) {\n                new_value = new_value.substring( 0 , new_value.length - 1 );\n            }\n\n            // Trim whitespace.\n            new_value = $.trim(new_value);\n\n            // Too short?\n            if (new_value.length < 2) {\n                return false;\n            }\n\n            //\n            // New tag OK - apply it.\n            //\n\n            this.value = \"\"; // Reset text field now that tag is being added\n\n            // Add button for tag after all other tag buttons.\n            var new_tag_button = build_tag_button(new_value);\n            var tag_buttons = tag_area.children(\".tag-button\");\n            if (tag_buttons.length !== 0) {\n                var last_tag_button = tag_buttons.slice(tag_buttons.length-1);\n                last_tag_button.after(new_tag_button);\n            } else {\n                tag_area.prepend(new_tag_button);\n            }\n\n            // Add tag to internal list.\n            var tag_name_and_value = new_value.split(\":\");\n            settings.tags[tag_name_and_value[0]] = tag_name_and_value[1];\n\n            // Update toggle link text.\n            var new_text = settings.get_toggle_link_text_fn(settings.tags);\n            toggle_link.text(new_text);\n\n            // Commit tag to server.\n            var zz = $(this);\n            $.ajax({\n                url: settings.ajax_add_tag_url,\n                data: { new_tag: new_value },\n                error: function() {\n                    // Failed. Roll back changes and show alert.\n                    new_tag_button.remove();\n                    delete settings.tags[tag_name_and_value[0]];\n                    var new_text = settings.get_toggle_link_text_fn(settings.tags);\n                    toggle_link.text(new_text);\n                    alert( \"Add tag failed\" );\n                },\n                success: function() {\n                    // Flush autocomplete cache because it's not out of date.\n                    // TODO: in the future, we could remove the particular item\n                    // that was chosen from the cache rather than flush it.\n                    zz.data('autocompleter').cacheFlush();\n                }\n            });\n\n            return false;\n        }\n    });\n\n    // Add autocomplete to input.\n    var format_item_func = function(key, row_position, num_rows, value, search_term) {\n        var tag_name_and_value = value.split(\":\");\n        return (tag_name_and_value.length === 1 ? tag_name_and_value[0] : tag_name_and_value[1]);\n    };\n    var autocomplete_options = { selectFirst: false, formatItem: format_item_func,\n            autoFill: false, highlight: false };\n    tag_input_field.autocomplete_verheul(settings.ajax_autocomplete_tag_url, autocomplete_options);\n\n\n    // Initialize delete tag images for current tags.\n    this_obj.find('.delete-tag-img').each(function() {\n        init_delete_tag_image( $(this) );\n    });\n\n\n    // Initialize tag click function.\n    init_tag_click_function($(this), settings.tag_click_fn);\n\n    // Initialize \"add tag\" button.\n    add_tag_button.click( function() {\n        $(this).hide();\n\n        // Clicking on button is the same as clicking on the tag area.\n        tag_area.click();\n        return false;\n    });\n\n    //\n    // Set up tag area interactions; these are needed only if tags are editable.\n    //\n    if (settings.editable) {\n        // When the tag area blurs, go to \"view tag\" mode.\n        tag_area.bind(\"blur\", function(e) {\n            if (_.size(settings.tags) > 0) {\n                add_tag_button.show();\n                tag_input_field.hide();\n                tag_area.removeClass(\"active-tag-area\");\n                // tag_area.addClass(\"tooltip\");\n            } else {\n                // No tags, so do nothing to ensure that input is still visible.\n            }\n        });\n\n        // On click, enable user to add tags.\n        tag_area.click( function(e) {\n            var is_active = $(this).hasClass(\"active-tag-area\");\n\n            // If a \"delete image\" object was pressed and area is inactive, do nothing.\n            if ($(e.target).hasClass(\"delete-tag-img\") && !is_active) {\n                return false;\n            }\n\n            // If a \"tag name\" object was pressed and area is inactive, do nothing.\n            if ($(e.target).hasClass(\"tag-name\") && !is_active) {\n                return false;\n            }\n\n            // Remove tooltip.\n            // $(this).removeClass(\"tooltip\");\n\n            // Hide add tag button, show tag_input field. Change background to show\n            // area is active.\n            $(this).addClass(\"active-tag-area\");\n            add_tag_button.hide();\n            tag_input_field.show();\n            tag_input_field.focus();\n\n            // Add handler to document that will call blur when the tag area is blurred;\n            // a tag area is blurred when a user clicks on an element outside the area.\n            var handle_document_click = function(e)  {\n                var check_click = function(tag_area, target) {\n                    var tag_area_id = tag_area.attr(\"id\");\n                    // Blur the tag area if the element clicked on is not in the tag area.\n                    if (target !== tag_area) {\n                        tag_area.blur();\n                        $(window).unbind(\"click.tagging_blur\");\n                        $(this).addClass(\"tooltip\");\n                    }\n                };\n                check_click(tag_area, $(e.target));\n            };\n            // TODO: we should attach the click handler to all frames in order to capture\n            // clicks outside the frame that this element is in.\n            //window.parent.document.onclick = handle_document_click;\n            //var temp = $(window.parent.document.body).contents().find(\"iframe\").html();\n            //alert(temp);\n            //$(document).parent().click(handle_document_click);\n            $(window).bind(\"click.tagging_blur\", handle_document_click);\n\n            return false;\n        });\n    }\n\n    // If using toggle link, hide the tag area. Otherwise, show the tag area.\n    if (settings.use_toggle_link) {\n        tag_area.hide();\n    }\n\n    //\n    // Helper functions.\n    //\n\n    //\n    // Collapse tag name + value into a single string.\n    //\n    function build_tag_str(tag_name, tag_value) {\n        return tag_name + ( tag_value ? \":\" + tag_value : \"\");\n    }\n\n\n    // Initialize a \"delete tag image\": when click, delete tag from UI and send delete request to server.\n    function init_delete_tag_image(delete_img) {\n        $(delete_img).mouseenter( function () {\n            $(this).attr(\"src\", settings.delete_tag_img_rollover);\n        });\n        $(delete_img).mouseleave( function () {\n            $(this).attr(\"src\", settings.delete_tag_img);\n        });\n        $(delete_img).click( function () {\n            // Tag button is image's parent.\n            var tag_button = $(this).parent();\n\n            // Get tag name, value.\n            var tag_name_elt = tag_button.find(\".tag-name\").eq(0);\n            var tag_str = tag_name_elt.text();\n            var tag_name_and_value = tag_str.split(\":\");\n            var tag_name = tag_name_and_value[0];\n            var tag_value = tag_name_and_value[1];\n\n            var prev_button = tag_button.prev();\n            tag_button.remove();\n\n            // Remove tag from local list for consistency.\n            delete settings.tags[tag_name];\n\n            // Update toggle link text.\n            var new_text = settings.get_toggle_link_text_fn(settings.tags);\n            toggle_link.text(new_text);\n\n            // Delete tag.\n            $.ajax({\n                url: settings.ajax_delete_tag_url,\n                data: { tag_name: tag_name },\n                error: function() {\n                    // Failed. Roll back changes and show alert.\n                    settings.tags[tag_name] = tag_value;\n                    if (prev_button.hasClass(\"tag-button\")) {\n                        prev_button.after(tag_button);\n                    } else {\n                        tag_area.prepend(tag_button);\n                    }\n                    alert( \"Remove tag failed\" );\n\n                    toggle_link.text(settings.get_toggle_link_text_fn(settings.tags));\n\n                    // TODO: no idea why it's necessary to set this up again.\n                    delete_img.mouseenter( function () {\n                        $(this).attr(\"src\", settings.delete_tag_img_rollover);\n                    });\n                    delete_img.mouseleave( function () {\n                        $(this).attr(\"src\", settings.delete_tag_img);\n                    });\n                },\n                success: function() {}\n            });\n\n            return true;\n        });\n    }\n\n    //\n    // Function that builds a tag button.\n    //\n    function build_tag_button(tag_str) {\n        // Build \"delete tag\" image.\n        var delete_img = $(\"<img/>\").attr(\"src\", settings.delete_tag_img).addClass(\"delete-tag-img\");\n        init_delete_tag_image(delete_img);\n\n        // Build tag button.\n        var tag_name_elt = $(\"<span>\").text(tag_str).addClass(\"tag-name\");\n        tag_name_elt.click( function() {\n            var tag_name_and_value = tag_str.split(\":\");\n            settings.tag_click_fn(tag_name_and_value[0], tag_name_and_value[1]);\n            return true;\n        });\n\n        var tag_button = $(\"<span></span>\").addClass(\"tag-button\");\n        tag_button.append(tag_name_elt);\n        // Allow delete only if element is editable.\n        if (settings.editable) {\n            tag_button.append(delete_img);\n        }\n\n        return tag_button;\n    }\n\n};\n\n// ============================================================================\n    return init_tag_click_function;\n}));\n"]}