{"version":3,"sources":["ui/autocom_tagging.js"],"names":["init_tag_click_function","tag_elt","click_func","$","find","this","click","tag_name_and_value","text","split","_jquery2","default","fn","autocomplete_tagging","options","delete_img","mouseenter","mouseleave","delete_tag_img_rollover","settings","delete_tag_img","tag_button","parent","tag_str","eq","tag_name","tag_value","prev_button","prev","remove","tags","new_text","get_toggle_link_text_fn","toggle_link","data","error","ajax_delete_tag_url","hasClass","tag_area","prepend","alert","attr","success","build_tag_button","tag_name_elt","addClass","tag_click_fn","append","editable","defaults","num_tags","in_form","use_toggle_link","add_tag_img","ajax_autocomplete_tag_url","ajax_retag_url","extend","ajax_add_tag_url","this_obj","tag_input_field","add_tag_button","after_toggle_fn","is","length","blur","hide","e","trigger","keyCode","value","new_value","substring","new_tag_button","tag_buttons","children","slice","after","last_tag_button","zz","ajax","url","autocomplete_options","selectFirst","key","row_position","num_rows","search_term","format_item_func","formatItem","autoFill","autocomplete_verheul","each","init_delete_tag_image","removeClass","is_active","target","show","focus","window","bind","tag_area_id","unbind","check_click"],"mappings":"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","file":"../../scripts/ui/autocom_tagging.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n\n// ============================================================================\n/**\n* JQuery extension for tagging with autocomplete.\n* @author: Jeremy Goecks\n* @require: jquery.autocomplete plugin\n*/\n//\n// Initialize \"tag click functions\" for tags.\n//\nfunction init_tag_click_function(tag_elt, click_func) {\n    $(tag_elt)\n        .find(\".tag-name\")\n        .each(function() {\n            $(this).click(function() {\n                var tag_str = $(this).text();\n                var tag_name_and_value = tag_str.split(\":\");\n                click_func(tag_name_and_value[0], tag_name_and_value[1]);\n                return true;\n            });\n        });\n}\n\njQuery.fn.autocomplete_tagging = function(options) {\n    var defaults = {\n        get_toggle_link_text_fn: function(tags) {\n            var text = \"\";\n            var num_tags = _.size(tags);\n            if (num_tags > 0) {\n                text = num_tags + (num_tags > 1 ? \" Tags\" : \" Tag\");\n            } else {\n                text = \"Add tags\";\n            }\n            return text;\n        },\n        tag_click_fn: function(name, value) {},\n        editable: true,\n        input_size: 20,\n        in_form: false,\n        tags: {},\n        use_toggle_link: true,\n        item_id: \"\",\n        add_tag_img: \"\",\n        add_tag_img_rollover: \"\",\n        delete_tag_img: \"\",\n        ajax_autocomplete_tag_url: \"\",\n        ajax_retag_url: \"\",\n        ajax_delete_tag_url: \"\",\n        ajax_add_tag_url: \"\"\n    };\n\n    var settings = jQuery.extend(defaults, options);\n\n    //\n    // Initalize object's elements.\n    //\n\n    // Get elements for this object. For this_obj, assume the last element with the id is the \"this\"; this is somewhat of a hack to address the problem\n    // that there may be two tagging elements for a single item if there are both community and individual tags for an element.\n    var this_obj = $(this);\n    var tag_area = this_obj.find(\".tag-area\");\n    var toggle_link = this_obj.find(\".toggle-link\");\n    var tag_input_field = this_obj.find(\".tag-input\");\n    var add_tag_button = this_obj.find(\".add-tag-button\");\n\n    // Initialize toggle link.\n    toggle_link.click(function() {\n        // Take special actions depending on whether toggle is showing or hiding link.\n        var after_toggle_fn;\n        if (tag_area.is(\":hidden\")) {\n            after_toggle_fn = function() {\n                // If there are no tags, go right to editing mode by generating a click on the area.\n                var num_tags = $(this).find(\".tag-button\").length;\n                if (num_tags === 0) {\n                    tag_area.click();\n                }\n            };\n        } else {\n            after_toggle_fn = () => {\n                tag_area.blur();\n            };\n        }\n        tag_area.slideToggle(\"fast\", after_toggle_fn);\n        return $(this);\n    });\n\n    // Initialize tag input field.\n    if (settings.editable) {\n        tag_input_field.hide();\n    }\n    tag_input_field.keyup(function(e) {\n        if (e.keyCode === 27) {\n            // Escape key\n            $(this).trigger(\"blur\");\n        } else if (\n            e.keyCode === 13 || // Return Key\n            e.keyCode === 188 || // Comma\n            e.keyCode === 32 // Space\n        ) {\n            //\n            // Check input.\n            //\n\n            var new_value = this.value;\n\n            // Suppress space after a \":\"\n            if (new_value.indexOf(\": \", new_value.length - 2) !== -1) {\n                this.value = new_value.substring(0, new_value.length - 1);\n                return false;\n            }\n\n            // Remove trigger keys from input.\n            if (e.keyCode === 188 || e.keyCode === 32) {\n                new_value = new_value.substring(0, new_value.length - 1);\n            }\n\n            // Trim whitespace.\n            new_value = $.trim(new_value);\n\n            // Too short?\n            if (new_value.length < 2) {\n                return false;\n            }\n\n            //\n            // New tag OK - apply it.\n            //\n\n            this.value = \"\"; // Reset text field now that tag is being added\n\n            // Add button for tag after all other tag buttons.\n            var new_tag_button = build_tag_button(new_value);\n            var tag_buttons = tag_area.children(\".tag-button\");\n            if (tag_buttons.length !== 0) {\n                var last_tag_button = tag_buttons.slice(tag_buttons.length - 1);\n                last_tag_button.after(new_tag_button);\n            } else {\n                tag_area.prepend(new_tag_button);\n            }\n\n            // Add tag to internal list.\n            var tag_name_and_value = new_value.split(\":\");\n            settings.tags[tag_name_and_value[0]] = tag_name_and_value[1];\n\n            // Update toggle link text.\n            var new_text = settings.get_toggle_link_text_fn(settings.tags);\n            toggle_link.text(new_text);\n\n            // Commit tag to server.\n            var zz = $(this);\n            $.ajax({\n                url: settings.ajax_add_tag_url,\n                data: { new_tag: new_value },\n                error: function() {\n                    // Failed. Roll back changes and show alert.\n                    new_tag_button.remove();\n                    delete settings.tags[tag_name_and_value[0]];\n                    var new_text = settings.get_toggle_link_text_fn(\n                        settings.tags\n                    );\n                    toggle_link.text(new_text);\n                    alert(\"Add tag failed\");\n                },\n                success: function() {\n                    // Flush autocomplete cache because it's not out of date.\n                    // TODO: in the future, we could remove the particular item\n                    // that was chosen from the cache rather than flush it.\n                    zz.data(\"autocompleter\").cacheFlush();\n                }\n            });\n\n            return false;\n        }\n    });\n\n    // Add autocomplete to input.\n    var format_item_func = (\n        key,\n        row_position,\n        num_rows,\n        value,\n        search_term\n    ) => {\n        var tag_name_and_value = value.split(\":\");\n        return tag_name_and_value.length === 1\n            ? tag_name_and_value[0]\n            : tag_name_and_value[1];\n    };\n    var autocomplete_options = {\n        selectFirst: false,\n        formatItem: format_item_func,\n        autoFill: false,\n        highlight: false\n    };\n    tag_input_field.autocomplete_verheul(\n        settings.ajax_autocomplete_tag_url,\n        autocomplete_options\n    );\n\n    // Initialize delete tag images for current tags.\n    this_obj.find(\".delete-tag-img\").each(function() {\n        init_delete_tag_image($(this));\n    });\n\n    // Initialize tag click function.\n    init_tag_click_function($(this), settings.tag_click_fn);\n\n    // Initialize \"add tag\" button.\n    add_tag_button.click(function() {\n        $(this).hide();\n\n        // Clicking on button is the same as clicking on the tag area.\n        tag_area.click();\n        return false;\n    });\n\n    //\n    // Set up tag area interactions; these are needed only if tags are editable.\n    //\n    if (settings.editable) {\n        // When the tag area blurs, go to \"view tag\" mode.\n        tag_area.bind(\"blur\", e => {\n            if (_.size(settings.tags) > 0) {\n                add_tag_button.show();\n                tag_input_field.hide();\n                tag_area.removeClass(\"active-tag-area\");\n                // tag_area.addClass(\"tooltip\");\n            } else {\n                // No tags, so do nothing to ensure that input is still visible.\n            }\n        });\n\n        // On click, enable user to add tags.\n        tag_area.click(function(e) {\n            var is_active = $(this).hasClass(\"active-tag-area\");\n\n            // If a \"delete image\" object was pressed and area is inactive, do nothing.\n            if ($(e.target).hasClass(\"delete-tag-img\") && !is_active) {\n                return false;\n            }\n\n            // If a \"tag name\" object was pressed and area is inactive, do nothing.\n            if ($(e.target).hasClass(\"tag-name\") && !is_active) {\n                return false;\n            }\n\n            // Remove tooltip.\n            // $(this).removeClass(\"tooltip\");\n\n            // Hide add tag button, show tag_input field. Change background to show\n            // area is active.\n            $(this).addClass(\"active-tag-area\");\n            add_tag_button.hide();\n            tag_input_field.show();\n            tag_input_field.focus();\n\n            // Add handler to document that will call blur when the tag area is blurred;\n            // a tag area is blurred when a user clicks on an element outside the area.\n            var handle_document_click = e => {\n                var check_click = function(tag_area, target) {\n                    var tag_area_id = tag_area.attr(\"id\");\n                    // Blur the tag area if the element clicked on is not in the tag area.\n                    if (target !== tag_area) {\n                        tag_area.blur();\n                        $(window).unbind(\"click.tagging_blur\");\n                        $(this).addClass(\"tooltip\");\n                    }\n                };\n                check_click(tag_area, $(e.target));\n            };\n            // TODO: we should attach the click handler to all frames in order to capture\n            // clicks outside the frame that this element is in.\n            //window.parent.document.onclick = handle_document_click;\n            //var temp = $(window.parent.document.body).contents().find(\"iframe\").html();\n            //alert(temp);\n            //$(document).parent().click(handle_document_click);\n            $(window).bind(\"click.tagging_blur\", handle_document_click);\n\n            return false;\n        });\n    }\n\n    // If using toggle link, hide the tag area. Otherwise, show the tag area.\n    if (settings.use_toggle_link) {\n        tag_area.hide();\n    }\n\n    //\n    // Helper functions.\n    //\n\n    //\n    // Collapse tag name + value into a single string.\n    //\n    function build_tag_str(tag_name, tag_value) {\n        return tag_name + (tag_value ? \":\" + tag_value : \"\");\n    }\n\n    // Initialize a \"delete tag image\": when click, delete tag from UI and send delete request to server.\n    function init_delete_tag_image(delete_img) {\n        $(delete_img).mouseenter(function() {\n            $(this).attr(\"src\", settings.delete_tag_img_rollover);\n        });\n        $(delete_img).mouseleave(function() {\n            $(this).attr(\"src\", settings.delete_tag_img);\n        });\n        $(delete_img).click(function() {\n            // Tag button is image's parent.\n            var tag_button = $(this).parent();\n\n            // Get tag name, value.\n            var tag_name_elt = tag_button.find(\".tag-name\").eq(0);\n            var tag_str = tag_name_elt.text();\n            var tag_name_and_value = tag_str.split(\":\");\n            var tag_name = tag_name_and_value[0];\n            var tag_value = tag_name_and_value[1];\n\n            var prev_button = tag_button.prev();\n            tag_button.remove();\n\n            // Remove tag from local list for consistency.\n            delete settings.tags[tag_name];\n\n            // Update toggle link text.\n            var new_text = settings.get_toggle_link_text_fn(settings.tags);\n            toggle_link.text(new_text);\n\n            // Delete tag.\n            $.ajax({\n                url: settings.ajax_delete_tag_url,\n                data: { tag_name: tag_name },\n                error: function() {\n                    // Failed. Roll back changes and show alert.\n                    settings.tags[tag_name] = tag_value;\n                    if (prev_button.hasClass(\"tag-button\")) {\n                        prev_button.after(tag_button);\n                    } else {\n                        tag_area.prepend(tag_button);\n                    }\n                    alert(\"Remove tag failed\");\n\n                    toggle_link.text(\n                        settings.get_toggle_link_text_fn(settings.tags)\n                    );\n\n                    // TODO: no idea why it's necessary to set this up again.\n                    delete_img.mouseenter(function() {\n                        $(this).attr(\"src\", settings.delete_tag_img_rollover);\n                    });\n                    delete_img.mouseleave(function() {\n                        $(this).attr(\"src\", settings.delete_tag_img);\n                    });\n                },\n                success: function() {}\n            });\n\n            return true;\n        });\n    }\n\n    //\n    // Function that builds a tag button.\n    //\n    function build_tag_button(tag_str) {\n        // Build \"delete tag\" image.\n        var delete_img = $(\"<img/>\")\n            .attr(\"src\", settings.delete_tag_img)\n            .addClass(\"delete-tag-img\");\n        init_delete_tag_image(delete_img);\n\n        // Build tag button.\n        var tag_name_elt = $(\"<span>\")\n            .text(tag_str)\n            .addClass(\"tag-name\");\n        tag_name_elt.click(() => {\n            var tag_name_and_value = tag_str.split(\":\");\n            settings.tag_click_fn(tag_name_and_value[0], tag_name_and_value[1]);\n            return true;\n        });\n\n        var tag_button = $(\"<span></span>\").addClass(\"tag-button\");\n        tag_button.append(tag_name_elt);\n        // Allow delete only if element is editable.\n        if (settings.editable) {\n            tag_button.append(delete_img);\n        }\n\n        return tag_button;\n    }\n};\n\n// ============================================================================\nexport default init_tag_click_function;\n"]}