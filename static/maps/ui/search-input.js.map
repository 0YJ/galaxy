{"version":3,"sources":["ui/search-input.js"],"names":["factory","define","amd","jQuery","searchInput","parentNode","options","clearSearchInput","event","$","this","parent","children","val","trigger","blur","search","searchTerms","firstSearch","inputTemplate","name","placeholder","classes","join","KEYCODE_ESC","KEYCODE_RETURN","$parentNode","defaults","initialVal","inputVal","onclear","onfirstsearch","onsearch","type","toggle","extend","each","prepend","focus","select","keyup","preventDefault","stopPropagation","which","escWillClear","call","minSearchLen","_l","tooltip","placement","click","toggleLoadingIndicator","find","window","s","fn"],"mappings":"cAAA,SAAAA,GACA,kBAAAC,SAAAA,OAAAC,IAIQD,UAAAD,GAFJA,EAKOG,SAGN,WAeD,QAASC,GAAaC,EAAYC,GAoB9B,QAASC,GAAkBC,GAF3BC,EAAAC,MAAAC,SAAAC,SAAA,SACAC,IAAA,IAAAC,QAAA,qBAAAC,OACAT,EAASC,UAIR,QAAAS,GAAAR,EAAAS,GAIG,IAAKA,EAFT,MAAAV,IAEIE,GAAAC,MAAKO,QAAa,gBAAAA,GACd,kBAAOV,GAAAA,eAAPW,GACHA,GAAA,EACEZ,EAAOQ,cAASG,IAEfC,EAAAA,SAAcD,GAKrB,QAAAE,KAED,OAAA,4BAAAb,EAAAc,KAAA,kBAAAd,EAAAe,YAAA,KACSF,uBAAeb,EAAAgB,QAAA,KAAA,MAAAC,KAAA,IAxCxB,GAAIC,GAAkB,GAClBC,EAAkB,GAF1BC,EAAsBrB,EAAAA,GACdmB,GAAJ,EACIC,GACAC,WAAqBrB,GACrBa,KAHJ,SAIIS,YAAW,SACPC,QADO,GAEPR,QAFO,aAGPC,cAHO,KAIPC,SAJO,SAAAO,KAKPC,aAAkB,EAClBC,cANO,EAOPC,OAAkB,aA2F1B,OAA+B,WAA3B7B,OAAO8B,KAAM3B,IAOjB,mBAAAA,GARA,WACIH,EAAaG,KAAAA,mBAAwB4B,SACrCR,EAAIpB,KAAY,iBAAkB4B,YASrCR,IAF8B,WAA3BvB,OAAO8B,KAAM3B,KAOrBA,EAAAH,OAAAgC,QAAA,KAAAR,EAAArB,IAGQoB,EAAYU,SAAM,gBAAUC,SAzEhC,WADA,MAAA5B,GAAAU,KAEImB,MAAUnB,SAAAA,GACNV,EAAAC,MAAA6B,WADGC,MAAA,SAAAhC,GAWC,GANJA,EAAAiC,iBACQjC,EAAAkC,kBAKAlC,EAAMmC,QAAUnB,GAAelB,EAAQsC,aAD3CrC,EAAAsC,KAAAnC,KAAAF,OAEID,CAEG,GAAAU,GAAAR,EAAAC,MAAAG,OAEHL,EAAAmC,QAAAlB,GACYkB,EAANG,cAAF7B,EACU6B,QAAAA,EAAgB7B,eAC1BD,EAAA6B,KAAAnC,KAAAF,EAA0BS,MAK7CJ,IAAAP,EAAAsB,eAKG,WAIIrB,MAAAA,IAAAA,iDAJJ,UAAAwC,EAAA,sBAAA,aAAAxB,KAAA,KAMHyB,SAAAC,UAAA,WAHIC,MAAO,SAAU1C,GAKtBD,EAAAsC,KAAAnC,KAAAF,QAQA,WACA,MAAAC,IAAA,sDACS0C,UAATJ,EAAiC,cAAA,aAAAxB,KAAA,KAC7BG,OAAY0B,SAAMH,UAAA,iBA9G5B,GAAAF,GAAAM,OAAYN,IAAA,SAAAO,GAAA,MAAAA,GAoIOnD,QAAjBoD,GAAApB,QA/IJ/B,YAAA,SAAAE,GAiJY,MAAOI,MAAK0B,KAAM,WACd,MAAOhC,GAAaM,KAAMJ","file":"../../scripts/ui/search-input.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n\n}(function () {\n    var _l = window._l || function( s ){ return s; };\n\n    //TODO: consolidate with tool menu functionality, use there\n\n    /** searchInput: (jQuery plugin)\n     *      Creates a search input, a clear button, and loading indicator\n     *      within the selected node.\n     *\n     *      When the user either presses return or enters some minimal number\n     *      of characters, a callback is called. Pressing ESC when the input\n     *      is focused will clear the input and call a separate callback.\n     */\n    function searchInput( parentNode, options ){\n        var KEYCODE_ESC     = 27,\n            KEYCODE_RETURN  = 13,\n            $parentNode     = $( parentNode ),\n            firstSearch     = true,\n            defaults = {\n                initialVal      : '',\n                name            : 'search',\n                placeholder     : 'search',\n                classes         : '',\n                onclear         : function(){},\n                onfirstsearch   : null,\n                onsearch        : function( inputVal ){},\n                minSearchLen    : 0,\n                escWillClear    : true,\n                oninit          : function(){}\n            };\n\n        // .................................................................... input rendering and events\n        // visually clear the search, trigger an event, and call the callback\n        function clearSearchInput( event ){\n            var $input = $( this ).parent().children( 'input' );\n            $input.val( '' ).trigger( 'searchInput.clear' ).blur();\n            options.onclear();\n        }\n\n        // search for searchTerms, trigger an event, call the appropo callback (based on whether this is the first)\n        function search( event, searchTerms ){\n            if( !searchTerms ){\n                return clearSearchInput();\n            }\n            $( this ).trigger( 'search.search', searchTerms );\n            if( typeof options.onfirstsearch === 'function' && firstSearch ){\n                firstSearch = false;\n                options.onfirstsearch( searchTerms );\n            } else {\n                options.onsearch( searchTerms );\n            }\n        }\n\n        // .................................................................... input rendering and events\n        function inputTemplate(){\n            // class search-query is bootstrap 2.3 style that now lives in base.less\n            return [ '<input type=\"text\" name=\"', options.name, '\" placeholder=\"', options.placeholder, '\" ',\n                            'class=\"search-query ', options.classes, '\" ', '/>' ].join( '' );\n        }\n\n        // the search input that responds to keyboard events and displays the search value\n        function $input(){\n            return $( inputTemplate() )\n                // select all text on a focus\n                .focus( function( event ){\n                    $( this ).select();\n                })\n                // attach behaviors to esc, return if desired, search on some min len string\n                .keyup( function( event ){\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    // esc key will clear if desired\n                    if( event.which === KEYCODE_ESC && options.escWillClear ){\n                        clearSearchInput.call( this, event );\n\n                    } else {\n                        var searchTerms = $( this ).val();\n                        // return key or the search string len > minSearchLen (if not 0) triggers search\n                        if( ( event.which === KEYCODE_RETURN )\n                        ||  ( options.minSearchLen && searchTerms.length >= options.minSearchLen ) ){\n                            search.call( this, event, searchTerms );\n                        }\n                    }\n                })\n                .val( options.initialVal );\n        }\n\n        // .................................................................... clear button rendering and events\n        // a button for clearing the search bar, placed on the right hand side\n        function $clearBtn(){\n            return $([ '<span class=\"search-clear fa fa-times-circle\" ',\n                             'title=\"', _l( 'clear search (esc)' ), '\"></span>' ].join('') )\n            .tooltip({ placement: 'bottom' })\n            .click( function( event ){\n                clearSearchInput.call( this, event );\n            });\n        }\n\n        // .................................................................... loadingIndicator rendering\n        // a button for clearing the search bar, placed on the right hand side\n        function $loadingIndicator(){\n            return $([ '<span class=\"search-loading fa fa-spinner fa-spin\" ',\n                             'title=\"', _l( 'loading...' ), '\"></span>' ].join('') )\n                .hide().tooltip({ placement: 'bottom' });\n        }\n\n        // .................................................................... commands\n        // visually swap the load, clear buttons\n        function toggleLoadingIndicator(){\n            $parentNode.find( '.search-loading' ).toggle();\n            $parentNode.find( '.search-clear' ).toggle();\n        }\n\n        // .................................................................... init\n        // string command (not constructor)\n        if( jQuery.type( options ) === 'string' ){\n            if( options === 'toggle-loading' ){\n                toggleLoadingIndicator();\n            }\n            return $parentNode;\n        }\n\n        // initial render\n        if( jQuery.type( options ) === 'object' ){\n            options = jQuery.extend( true, {}, defaults, options );\n        }\n        //NOTE: prepended\n        return $parentNode.addClass( 'search-input' ).prepend([ $input(), $clearBtn(), $loadingIndicator() ]);\n    }\n\n    // as jq plugin\n    jQuery.fn.extend({\n        searchInput : function $searchInput( options ){\n            return this.each( function(){\n                return searchInput( this, options );\n            });\n        }\n    });\n}));\n"]}