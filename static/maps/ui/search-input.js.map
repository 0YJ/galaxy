{"version":3,"sources":["ui/search-input.js"],"names":["searchInput","parentNode","options","onsearch","event","minSearchLen","escWillClear","oninit","val","trigger","blur","onclear","search","searchTerms","clearSearchInput","$","this","firstSearch","inputTemplate","name","placeholder","$input","join","focus","KEYCODE_ESC","KEYCODE_RETURN","$parentNode","defaults","initialVal","inputVal","_jquery2","default","type","find","toggle","extend","addClass","prepend","which","keyup","preventDefault","call","$loadingIndicator","_l","toggleLoadingIndicator","click","hide","tooltip","placement","window","s","fn","each"],"mappings":"2CAYA,SAAAA,EAAAC,EAAAC,GAoBYC,SAAAA,EAAUC,GACVC,EAAAA,MACAC,SACAC,SAAQ,SAUPC,IAAI,IAPbC,QAAA,qBACAC,OACAR,EAAAS,UASC,SAAAC,EAAAR,EAAAS,GAIG,IAAKA,EAFT,OAAAC,IAEIC,EAAAC,MAAIP,QAACI,gBAAaA,GACd,mBAAAX,EAAOY,eAAPG,GACHA,GAAA,EACDF,EAAQN,cAAQI,IAEZI,EAAAA,SAAAA,GAKP,SAAAC,IAED,OACA,4BACIhB,EAAAiB,KACA,kBAWHjB,EAAAkB,YANO,KAQR,uBACAlB,EAASmB,QACL,KAEQ,MADJC,KAEKC,IAjEb,IAAIC,EAAc,GACdC,EAAiB,GACjBC,EAAcX,EAAEd,GAChBgB,GAAc,EACdU,GACIC,WAAY,GACZT,KAAM,SAPlBC,YAAqBnB,SACbuB,QAAAA,GACAC,QAAAA,aACAC,cAAcX,KACdE,SAAAA,SAHJY,KAIIF,aAAW,EACPC,cADO,EAEPT,OAAM,cA+Hd,MAA6B,WAAzBW,EAAAC,QAAOC,KAAK9B,IACI,mBAAZA,IAPJwB,EAAYO,KAAK,mBAAmBC,SACpCR,EAAYO,KAAK,iBAAiBC,UAS3BR,IAIkB,WAAzBI,EAAAC,QAAOC,KAAK9B,KACZA,EAAU4B,EAAAC,QAAOI,QAAO,KAAUR,EAAUzB,IAGzCwB,EACFU,SAAS,gBACTC,SA5EWjC,EAAAA,KAEAmB,MAAA,SAAAnB,GACIA,EAAAA,MAAMkC,WAGNC,MAAA,SAAI1B,GASP,GARGT,EAAAoC,iBACApC,EACIA,kBAMPA,EAAAkC,QAAAd,GAAAtB,EAAAI,aAEAJ,EA1BbuC,KAAAzB,KAAAZ,OA4BH,CAbmB,IAAIS,EAAcE,EAAEC,MAAMR,OAiB9CJ,EAAqBkC,QAAAb,GAGTvB,EAAAG,cAQAS,EAA4BV,QAA5BF,EAAAG,eAEXO,EAAA6B,KAAAzB,KAAAZ,EAAAS,MAIQ6B,IAAAA,EAAAA,YAgBLhB,GAEH,iDA/BW,UAiCZiB,EAAA,sBACA,aACIrB,KAAA,KAEIsB,SAAAA,UAAAA,WACHC,MAAA,SAAAzC,GACDU,EAAA2B,KAAAzB,KAAAZ,KAOJW,GAIH,sDAjCe,UAmChB4B,EAAA,cACA,aACI3C,KAAAA,KAEQ8C,OADGC,SAAPC,UAAA,yEA3KJjC,EAAAA,EAAAA,QACA4B,EACAM,OAAON,IACP,SAASO,GACL,OAAOA,GAqKfpB,EAAAC,QAAOoB,GAAGhB,QACNnC,YAAa,SAAsBE,GAC/B,OAAOc,KAAKoC,KAAK,WACb,OAAOpD,EAAYgB,KAAMd","file":"../../scripts/ui/search-input.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\nvar _l =\n    window._l ||\n    function(s) {\n        return s;\n    };\n\n//TODO: consolidate with tool menu functionality, use there\n\n/** searchInput: (jQuery plugin)\n     *      Creates a search input, a clear button, and loading indicator\n     *      within the selected node.\n     *\n     *      When the user either presses return or enters some minimal number\n     *      of characters, a callback is called. Pressing ESC when the input\n     *      is focused will clear the input and call a separate callback.\n     */\nfunction searchInput(parentNode, options) {\n    var KEYCODE_ESC = 27,\n        KEYCODE_RETURN = 13,\n        $parentNode = $(parentNode),\n        firstSearch = true,\n        defaults = {\n            initialVal: \"\",\n            name: \"search\",\n            placeholder: \"search\",\n            classes: \"\",\n            onclear: function() {},\n            onfirstsearch: null,\n            onsearch: function(inputVal) {},\n            minSearchLen: 0,\n            escWillClear: true,\n            oninit: function() {}\n        };\n\n    // .................................................................... input rendering and events\n    // visually clear the search, trigger an event, and call the callback\n    function clearSearchInput(event) {\n        var $input = $(this)\n            .parent()\n            .children(\"input\");\n        $input\n            .val(\"\")\n            .trigger(\"searchInput.clear\")\n            .blur();\n        options.onclear();\n    }\n\n    // search for searchTerms, trigger an event, call the appropo callback (based on whether this is the first)\n    function search(event, searchTerms) {\n        if (!searchTerms) {\n            return clearSearchInput();\n        }\n        $(this).trigger(\"search.search\", searchTerms);\n        if (typeof options.onfirstsearch === \"function\" && firstSearch) {\n            firstSearch = false;\n            options.onfirstsearch(searchTerms);\n        } else {\n            options.onsearch(searchTerms);\n        }\n    }\n\n    // .................................................................... input rendering and events\n    function inputTemplate() {\n        // class search-query is bootstrap 2.3 style that now lives in base.less\n        return [\n            '<input type=\"text\" name=\"',\n            options.name,\n            '\" placeholder=\"',\n            options.placeholder,\n            '\" ',\n            'class=\"search-query ',\n            options.classes,\n            '\" ',\n            \"/>\"\n        ].join(\"\");\n    }\n\n    // the search input that responds to keyboard events and displays the search value\n    function $input() {\n        return (\n            $(inputTemplate())\n                // select all text on a focus\n                .focus(function(event) {\n                    $(this).select();\n                })\n                // attach behaviors to esc, return if desired, search on some min len string\n                .keyup(function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    // esc key will clear if desired\n                    if (event.which === KEYCODE_ESC && options.escWillClear) {\n                        clearSearchInput.call(this, event);\n                    } else {\n                        var searchTerms = $(this).val();\n                        // return key or the search string len > minSearchLen (if not 0) triggers search\n                        if (\n                            event.which === KEYCODE_RETURN ||\n                            (options.minSearchLen &&\n                                searchTerms.length >= options.minSearchLen)\n                        ) {\n                            search.call(this, event, searchTerms);\n                        }\n                    }\n                })\n                .val(options.initialVal)\n        );\n    }\n\n    // .................................................................... clear button rendering and events\n    // a button for clearing the search bar, placed on the right hand side\n    function $clearBtn() {\n        return $(\n            [\n                '<span class=\"search-clear fa fa-times-circle\" ',\n                'title=\"',\n                _l(\"clear search (esc)\"),\n                '\"></span>'\n            ].join(\"\")\n        )\n            .tooltip({ placement: \"bottom\" })\n            .click(function(event) {\n                clearSearchInput.call(this, event);\n            });\n    }\n\n    // .................................................................... loadingIndicator rendering\n    // a button for clearing the search bar, placed on the right hand side\n    function $loadingIndicator() {\n        return $(\n            [\n                '<span class=\"search-loading fa fa-spinner fa-spin\" ',\n                'title=\"',\n                _l(\"loading...\"),\n                '\"></span>'\n            ].join(\"\")\n        )\n            .hide()\n            .tooltip({ placement: \"bottom\" });\n    }\n\n    // .................................................................... commands\n    // visually swap the load, clear buttons\n    function toggleLoadingIndicator() {\n        $parentNode.find(\".search-loading\").toggle();\n        $parentNode.find(\".search-clear\").toggle();\n    }\n\n    // .................................................................... init\n    // string command (not constructor)\n    if (jQuery.type(options) === \"string\") {\n        if (options === \"toggle-loading\") {\n            toggleLoadingIndicator();\n        }\n        return $parentNode;\n    }\n\n    // initial render\n    if (jQuery.type(options) === \"object\") {\n        options = jQuery.extend(true, {}, defaults, options);\n    }\n    //NOTE: prepended\n    return $parentNode\n        .addClass(\"search-input\")\n        .prepend([$input(), $clearBtn(), $loadingIndicator()]);\n}\n\n// as jq plugin\njQuery.fn.extend({\n    searchInput: function $searchInput(options) {\n        return this.each(function() {\n            return searchInput(this, options);\n        });\n    }\n});\n"]}