{"version":3,"sources":["ui/mode-button.js"],"names":["factory","define","amd","jQuery","ModeButton","element","options","this","currModeIndex","prototype","DATA_KEY","defaults","_init","$element","modes","modeButton","event","callModeFn","switchModesOnClick","_incModeIndex","html","reset","length","_getModeIndex","modeKey","i","mode","Error","_setModeByIndex","index","newMode","currentMode","current","getMode","err","hasMode","initialMode","setMode","modeFn","onclick","$","call","get","fn","type","map","$this","data","button","fnName","$first","apply","makeArray","arguments","slice"],"mappings":"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","file":"../../scripts/ui/mode-button.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n\n}(function () {\n\n    /** Multi 'mode' button (or any element really) that changes the html\n     *      contents of itself when clicked. Pass in an ordered list of\n     *      objects with 'html' and (optional) onclick functions.\n     *\n     *      When clicked in a particular node, the onclick function will\n     *      be called (with the element as this) and the element will\n     *      switch to the next mode, replacing its html content with\n     *      that mode's html.\n     *\n     *      If there is no next mode, the element will switch back to\n     *      the first mode.\n     * @example:\n     *     $( '.myElement' ).modeButton({\n     *         modes : [\n     *             {\n     *                 mode: 'bler',\n     *                 html: '<h5>Bler</h5>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'red' );\n     *                 }\n     *             },\n     *             {\n     *                 mode: 'bloo',\n     *                 html: '<h4>Bloo</h4>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'blue' );\n     *                 }\n     *             },\n     *             {\n     *                 mode: 'blah',\n     *                 html: '<h3>Blah</h3>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'grey' );\n     *                 }\n     *             },\n     *         ]\n     *     });\n     *     $( '.myElement' ).modeButton( 'callModeFn', 'bler' );\n     */\n    /** constructor */\n    function ModeButton( element, options ){\n\t\tthis.currModeIndex = 0;\n\t\treturn this._init( element, options );\n    }\n\n    /** html5 data key to store this object inside an element */\n\tModeButton.prototype.DATA_KEY = 'mode-button';\n    /** default options */\n\tModeButton.prototype.defaults = {\n        switchModesOnClick : true\n\t};\n\n    // ---- private interface\n    /** set up options, intial mode, and the click handler */\n\tModeButton.prototype._init = function _init( element, options ){\n        //console.debug( 'ModeButton._init:', element, options );\n\t\toptions = options || {};\n\t\tthis.$element = $( element );\n\t\tthis.options = $.extend( true, {}, this.defaults, options );\n        if( !options.modes ){\n            throw new Error( 'ModeButton requires a \"modes\" array' );\n        }\n\n\t\tvar modeButton = this;\n\t\tthis.$element.click( function _ModeButtonClick( event ){\n\t\t\t// call the curr mode fn\n\t\t\tmodeButton.callModeFn();\n\t\t\t// inc the curr mode index\n\t\t\tif( modeButton.options.switchModesOnClick ){ modeButton._incModeIndex(); }\n\t\t\t// set the element html\n\t\t\t$( this ).html( modeButton.options.modes[ modeButton.currModeIndex ].html );\n\t\t});\n\t\treturn this.reset();\n\t};\n    /** increment the mode index to the next in the array, looping back to zero if at the last */\n\tModeButton.prototype._incModeIndex = function _incModeIndex(){\n\t\tthis.currModeIndex += 1;\n\t\tif( this.currModeIndex >= this.options.modes.length ){\n\t\t\tthis.currModeIndex = 0;\n\t\t}\n\t\treturn this;\n\t};\n    /** get the mode index in the modes array for the given key (mode name) */\n\tModeButton.prototype._getModeIndex = function _getModeIndex( modeKey ){\n\t\tfor( var i=0; i<this.options.modes.length; i+=1 ){\n\t\t\tif( this.options.modes[ i ].mode === modeKey ){ return i; }\n\t\t}\n\t\tthrow new Error( 'mode not found: ' + modeKey );\n\t};\n    /** set the current mode to the one with the given index and set button html */\n\tModeButton.prototype._setModeByIndex = function _setModeByIndex( index ){\n        var newMode = this.options.modes[ index ];\n        if( !newMode ){\n            throw new Error( 'mode index not found: ' + index );\n        }\n        this.currModeIndex = index;\n        if( newMode.html ){\n            this.$element.html( newMode.html );\n        }\n\t\treturn this;\n\t};\n\n    // ---- public interface\n    /** get the current mode object (not just the mode name) */\n\tModeButton.prototype.currentMode = function currentMode(){\n\t\treturn this.options.modes[ this.currModeIndex ];\n\t};\n    /** return the mode key of the current mode */\n\tModeButton.prototype.current = function current(){\n        // sugar for returning mode name\n\t\treturn this.currentMode().mode;\n\t};\n    /** get the mode with the given modeKey or the current mode if modeKey is undefined */\n\tModeButton.prototype.getMode = function getMode( modeKey ){\n\t\tif( !modeKey ){ return this.currentMode(); }\n\t\treturn this.options.modes[( this._getModeIndex( modeKey ) )];\n\t};\n    /** T/F if the button has the given mode */\n\tModeButton.prototype.hasMode = function hasMode( modeKey ){\n        try {\n            return !!this.getMode( modeKey );\n        } catch( err ){}\n        return false;\n\t};\n    /** set the current mode to the mode with the given name */\n\tModeButton.prototype.setMode = function setMode( modeKey ){\n        return this._setModeByIndex( this._getModeIndex( modeKey ) );\n\t};\n    /** reset to the initial mode */\n\tModeButton.prototype.reset = function reset(){\n\t\tthis.currModeIndex = 0;\n\t\tif( this.options.initialMode ){\n\t\t\tthis.currModeIndex = this._getModeIndex( this.options.initialMode );\n\t\t}\n        return this._setModeByIndex( this.currModeIndex );\n\t};\n    /** manually call the click handler of the given mode */\n\tModeButton.prototype.callModeFn = function callModeFn( modeKey ){\n\t\tvar modeFn = this.getMode( modeKey ).onclick;\n\t\tif( modeFn && $.type( modeFn === 'function' ) ){\n            // call with the element as context (std jquery pattern)\n\t\t\treturn modeFn.call( this.$element.get(0) );\n\t\t}\n\t\treturn undefined;\n\t};\n\n    // as jq plugin\n    $.fn.modeButton = function $modeButton( options ){\n        if( !this.length ){ return this; }\n\n        //TODO: does map still work with jq multi selection (i.e. $( '.class-for-many-btns' ).modeButton)?\n        if( $.type( options ) === 'object' ){\n            return this.map( function(){\n                var $this = $( this );\n                $this.data( 'mode-button', new ModeButton( $this, options ) );\n                return this;\n            });\n        }\n\n        var $first = $( this[0] ),\n            button = $first.data( 'mode-button' );\n\n        if( !button ){\n            throw new Error( 'modeButton needs an options object or string name of a function' );\n        }\n\n        if( button && $.type( options ) === 'string' ){\n            var fnName = options;\n            if( button && $.type( button[ fnName ] ) === 'function' ){\n                return button[ fnName ].apply( button, $.makeArray( arguments ).slice( 1 ) );\n            }\n        }\n        return button;\n    };\n\n}));\n"]}