{"version":3,"sources":["ui/mode-button.js"],"names":["factory","define","amd","jQuery","ModeButton","element","options","this","currModeIndex","_init","prototype","DATA_KEY","defaults","switchModesOnClick","$element","$","extend","modes","Error","modeButton","click","event","callModeFn","_incModeIndex","html","reset","length","_getModeIndex","modeKey","i","mode","_setModeByIndex","index","newMode","currentMode","current","getMode","hasMode","err","setMode","initialMode","modeFn","onclick","type","call","get","fn","map","$this","data","$first","button","fnName","apply","makeArray","arguments","slice"],"mappings":"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","file":"../../scripts/ui/mode-button.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n\n}(function () {\n\n    /** Multi 'mode' button (or any element really) that changes the html\n     *      contents of itself when clicked. Pass in an ordered list of\n     *      objects with 'html' and (optional) onclick functions.\n     *\n     *      When clicked in a particular node, the onclick function will\n     *      be called (with the element as this) and the element will\n     *      switch to the next mode, replacing its html content with\n     *      that mode's html.\n     *\n     *      If there is no next mode, the element will switch back to\n     *      the first mode.\n     * @example:\n     *     $( '.myElement' ).modeButton({\n     *         modes : [\n     *             {\n     *                 mode: 'bler',\n     *                 html: '<h5>Bler</h5>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'red' );\n     *                 }\n     *             },\n     *             {\n     *                 mode: 'bloo',\n     *                 html: '<h4>Bloo</h4>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'blue' );\n     *                 }\n     *             },\n     *             {\n     *                 mode: 'blah',\n     *                 html: '<h3>Blah</h3>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'grey' );\n     *                 }\n     *             },\n     *         ]\n     *     });\n     *     $( '.myElement' ).modeButton( 'callModeFn', 'bler' );\n     */\n    /** constructor */\n    function ModeButton( element, options ){\n\t\tthis.currModeIndex = 0;\n\t\treturn this._init( element, options );\n    }\n\n    /** html5 data key to store this object inside an element */\n\tModeButton.prototype.DATA_KEY = 'mode-button';\n    /** default options */\n\tModeButton.prototype.defaults = {\n        switchModesOnClick : true\n\t};\n\n    // ---- private interface\n    /** set up options, intial mode, and the click handler */\n\tModeButton.prototype._init = function _init( element, options ){\n        //console.debug( 'ModeButton._init:', element, options );\n\t\toptions = options || {};\n\t\tthis.$element = $( element );\n\t\tthis.options = $.extend( true, {}, this.defaults, options );\n        if( !options.modes ){\n            throw new Error( 'ModeButton requires a \"modes\" array' );\n        }\n\n\t\tvar modeButton = this;\n\t\tthis.$element.click( function _ModeButtonClick( event ){\n\t\t\t// call the curr mode fn\n\t\t\tmodeButton.callModeFn();\n\t\t\t// inc the curr mode index\n\t\t\tif( modeButton.options.switchModesOnClick ){ modeButton._incModeIndex(); }\n\t\t\t// set the element html\n\t\t\t$( this ).html( modeButton.options.modes[ modeButton.currModeIndex ].html );\n\t\t});\n\t\treturn this.reset();\n\t};\n    /** increment the mode index to the next in the array, looping back to zero if at the last */\n\tModeButton.prototype._incModeIndex = function _incModeIndex(){\n\t\tthis.currModeIndex += 1;\n\t\tif( this.currModeIndex >= this.options.modes.length ){\n\t\t\tthis.currModeIndex = 0;\n\t\t}\n\t\treturn this;\n\t};\n    /** get the mode index in the modes array for the given key (mode name) */\n\tModeButton.prototype._getModeIndex = function _getModeIndex( modeKey ){\n\t\tfor( var i=0; i<this.options.modes.length; i+=1 ){\n\t\t\tif( this.options.modes[ i ].mode === modeKey ){ return i; }\n\t\t}\n\t\tthrow new Error( 'mode not found: ' + modeKey );\n\t};\n    /** set the current mode to the one with the given index and set button html */\n\tModeButton.prototype._setModeByIndex = function _setModeByIndex( index ){\n        var newMode = this.options.modes[ index ];\n        if( !newMode ){\n            throw new Error( 'mode index not found: ' + index );\n        }\n        this.currModeIndex = index;\n        if( newMode.html ){\n            this.$element.html( newMode.html );\n        }\n\t\treturn this;\n\t};\n\n    // ---- public interface\n    /** get the current mode object (not just the mode name) */\n\tModeButton.prototype.currentMode = function currentMode(){\n\t\treturn this.options.modes[ this.currModeIndex ];\n\t};\n    /** return the mode key of the current mode */\n\tModeButton.prototype.current = function current(){\n        // sugar for returning mode name\n\t\treturn this.currentMode().mode;\n\t};\n    /** get the mode with the given modeKey or the current mode if modeKey is undefined */\n\tModeButton.prototype.getMode = function getMode( modeKey ){\n\t\tif( !modeKey ){ return this.currentMode(); }\n\t\treturn this.options.modes[( this._getModeIndex( modeKey ) )];\n\t};\n    /** T/F if the button has the given mode */\n\tModeButton.prototype.hasMode = function hasMode( modeKey ){\n        try {\n            return !!this.getMode( modeKey );\n        } catch( err ){}\n        return false;\n\t};\n    /** set the current mode to the mode with the given name */\n\tModeButton.prototype.setMode = function setMode( modeKey ){\n        return this._setModeByIndex( this._getModeIndex( modeKey ) );\n\t};\n    /** reset to the initial mode */\n\tModeButton.prototype.reset = function reset(){\n\t\tthis.currModeIndex = 0;\n\t\tif( this.options.initialMode ){\n\t\t\tthis.currModeIndex = this._getModeIndex( this.options.initialMode );\n\t\t}\n        return this._setModeByIndex( this.currModeIndex );\n\t};\n    /** manually call the click handler of the given mode */\n\tModeButton.prototype.callModeFn = function callModeFn( modeKey ){\n\t\tvar modeFn = this.getMode( modeKey ).onclick;\n\t\tif( modeFn && $.type( modeFn === 'function' ) ){\n            // call with the element as context (std jquery pattern)\n\t\t\treturn modeFn.call( this.$element.get(0) );\n\t\t}\n\t\treturn undefined;\n\t};\n\n    // as jq plugin\n    $.fn.modeButton = function $modeButton( options ){\n        if( !this.length ){ return this; }\n\n        //TODO: does map still work with jq multi selection (i.e. $( '.class-for-many-btns' ).modeButton)?\n        if( $.type( options ) === 'object' ){\n            return this.map( function(){\n                var $this = $( this );\n                $this.data( 'mode-button', new ModeButton( $this, options ) );\n                return this;\n            });\n        }\n\n        var $first = $( this[0] ),\n            button = $first.data( 'mode-button' );\n\n        if( !button ){\n            throw new Error( 'modeButton needs an options object or string name of a function' );\n        }\n\n        if( button && $.type( options ) === 'string' ){\n            var fnName = options;\n            if( button && $.type( button[ fnName ] ) === 'function' ){\n                return button[ fnName ].apply( button, $.makeArray( arguments ).slice( 1 ) );\n            }\n        }\n        return button;\n    };\n\n}));\n"]}