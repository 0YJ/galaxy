{"version":3,"sources":["ui/mode-button.js"],"names":["factory","define","amd","ModeButton","element","options","this","currModeIndex","_init","prototype","DATA_KEY","defaults","$","extend","$element","modeButton","click","event","switchModesOnClick","callModeFn","modes","html","reset","_incModeIndex","length","_getModeIndex","modeKey","i","Error","_setModeByIndex","index","newMode","currentMode","current","mode","getMode","hasMode","err","setMode","initialMode","onclick","modeFn","call","get","fn","type","$this","map","data","button","fnName","apply","arguments","slice"],"mappings":"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","file":"../../scripts/ui/mode-button.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function() {\n    /** Multi 'mode' button (or any element really) that changes the html\n     *      contents of itself when clicked. Pass in an ordered list of\n     *      objects with 'html' and (optional) onclick functions.\n     *\n     *      When clicked in a particular node, the onclick function will\n     *      be called (with the element as this) and the element will\n     *      switch to the next mode, replacing its html content with\n     *      that mode's html.\n     *\n     *      If there is no next mode, the element will switch back to\n     *      the first mode.\n     * @example:\n     *     $( '.myElement' ).modeButton({\n     *         modes : [\n     *             {\n     *                 mode: 'bler',\n     *                 html: '<h5>Bler</h5>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'red' );\n     *                 }\n     *             },\n     *             {\n     *                 mode: 'bloo',\n     *                 html: '<h4>Bloo</h4>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'blue' );\n     *                 }\n     *             },\n     *             {\n     *                 mode: 'blah',\n     *                 html: '<h3>Blah</h3>',\n     *                 onclick : function(){\n     *                     $( 'body' ).css( 'background-color', 'grey' );\n     *                 }\n     *             },\n     *         ]\n     *     });\n     *     $( '.myElement' ).modeButton( 'callModeFn', 'bler' );\n     */\n    /** constructor */\n    function ModeButton(element, options) {\n        this.currModeIndex = 0;\n        return this._init(element, options);\n    }\n\n    /** html5 data key to store this object inside an element */\n    ModeButton.prototype.DATA_KEY = \"mode-button\";\n    /** default options */\n    ModeButton.prototype.defaults = {\n        switchModesOnClick: true\n    };\n\n    // ---- private interface\n    /** set up options, intial mode, and the click handler */\n    ModeButton.prototype._init = function _init(element, options) {\n        //console.debug( 'ModeButton._init:', element, options );\n        options = options || {};\n        this.$element = $(element);\n        this.options = $.extend(true, {}, this.defaults, options);\n        if (!options.modes) {\n            throw new Error('ModeButton requires a \"modes\" array');\n        }\n\n        var modeButton = this;\n        this.$element.click(function _ModeButtonClick(event) {\n            // call the curr mode fn\n            modeButton.callModeFn();\n            // inc the curr mode index\n            if (modeButton.options.switchModesOnClick) {\n                modeButton._incModeIndex();\n            }\n            // set the element html\n            $(this).html(\n                modeButton.options.modes[modeButton.currModeIndex].html\n            );\n        });\n        return this.reset();\n    };\n    /** increment the mode index to the next in the array, looping back to zero if at the last */\n    ModeButton.prototype._incModeIndex = function _incModeIndex() {\n        this.currModeIndex += 1;\n        if (this.currModeIndex >= this.options.modes.length) {\n            this.currModeIndex = 0;\n        }\n        return this;\n    };\n    /** get the mode index in the modes array for the given key (mode name) */\n    ModeButton.prototype._getModeIndex = function _getModeIndex(modeKey) {\n        for (var i = 0; i < this.options.modes.length; i += 1) {\n            if (this.options.modes[i].mode === modeKey) {\n                return i;\n            }\n        }\n        throw new Error(\"mode not found: \" + modeKey);\n    };\n    /** set the current mode to the one with the given index and set button html */\n    ModeButton.prototype._setModeByIndex = function _setModeByIndex(index) {\n        var newMode = this.options.modes[index];\n        if (!newMode) {\n            throw new Error(\"mode index not found: \" + index);\n        }\n        this.currModeIndex = index;\n        if (newMode.html) {\n            this.$element.html(newMode.html);\n        }\n        return this;\n    };\n\n    // ---- public interface\n    /** get the current mode object (not just the mode name) */\n    ModeButton.prototype.currentMode = function currentMode() {\n        return this.options.modes[this.currModeIndex];\n    };\n    /** return the mode key of the current mode */\n    ModeButton.prototype.current = function current() {\n        // sugar for returning mode name\n        return this.currentMode().mode;\n    };\n    /** get the mode with the given modeKey or the current mode if modeKey is undefined */\n    ModeButton.prototype.getMode = function getMode(modeKey) {\n        if (!modeKey) {\n            return this.currentMode();\n        }\n        return this.options.modes[this._getModeIndex(modeKey)];\n    };\n    /** T/F if the button has the given mode */\n    ModeButton.prototype.hasMode = function hasMode(modeKey) {\n        try {\n            return !!this.getMode(modeKey);\n        } catch (err) {}\n        return false;\n    };\n    /** set the current mode to the mode with the given name */\n    ModeButton.prototype.setMode = function setMode(modeKey) {\n        return this._setModeByIndex(this._getModeIndex(modeKey));\n    };\n    /** reset to the initial mode */\n    ModeButton.prototype.reset = function reset() {\n        this.currModeIndex = 0;\n        if (this.options.initialMode) {\n            this.currModeIndex = this._getModeIndex(this.options.initialMode);\n        }\n        return this._setModeByIndex(this.currModeIndex);\n    };\n    /** manually call the click handler of the given mode */\n    ModeButton.prototype.callModeFn = function callModeFn(modeKey) {\n        var modeFn = this.getMode(modeKey).onclick;\n        if (modeFn && $.type(modeFn === \"function\")) {\n            // call with the element as context (std jquery pattern)\n            return modeFn.call(this.$element.get(0));\n        }\n        return undefined;\n    };\n\n    // as jq plugin\n    $.fn.modeButton = function $modeButton(options) {\n        if (!this.length) {\n            return this;\n        }\n\n        //TODO: does map still work with jq multi selection (i.e. $( '.class-for-many-btns' ).modeButton)?\n        if ($.type(options) === \"object\") {\n            return this.map(function() {\n                var $this = $(this);\n                $this.data(\"mode-button\", new ModeButton($this, options));\n                return this;\n            });\n        }\n\n        var $first = $(this[0]),\n            button = $first.data(\"mode-button\");\n\n        if (!button) {\n            throw new Error(\n                \"modeButton needs an options object or string name of a function\"\n            );\n        }\n\n        if (button && $.type(options) === \"string\") {\n            var fnName = options;\n            if (button && $.type(button[fnName]) === \"function\") {\n                return button[fnName].apply(\n                    button,\n                    $.makeArray(arguments).slice(1)\n                );\n            }\n        }\n        return button;\n    };\n});\n"]}