{"version":3,"sources":["ui/pagination.js"],"names":["factory","define","amd","jQuery","$","Pagination","element","options","this","numPages","currPage","_make$Li","contents","join","prototype","DATA_KEY","defaults","startingPage","perPage","totalDataSize","currDataSize","init","$element","data","_render","_renderPages","_scrollToActivePage","_renderPrevNext","pagination","$prev","addClass","$paginationContainer","prevPage","click","$next","nextPage","html","append","$scrollingContainer","i","page$LiClick","ev","goToPage","$pageLi","$container","length","midpoint","width","scrollLeft","$activePage","position","left","page","trigger","create","fn","extend","nonOptionsArgs","makeArray","arguments","slice","map","type","previousControl"],"mappings":"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","file":"../../scripts/ui/pagination.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n\n}(function ($) {\n\n    /** Builds (twitter bootstrap styled) pagination controls.\n     *  If the totalDataSize is not null, a horizontal list of page buttons is displayed.\n     *  If totalDataSize is null, two links ('Prev' and 'Next) are displayed.\n     *  When pages are changed, a 'pagination.page-change' event is fired\n     *      sending the event and the (0-based) page requested.\n     */\n    function Pagination( element, options ){\n        /** the total number of pages */\n        this.numPages = null;\n        /** the current, active page */\n\t\tthis.currPage = 0;\n\t\treturn this.init( element, options );\n    }\n\n    /** data key under which this object will be stored in the element */\n\tPagination.prototype.DATA_KEY = 'pagination';\n    /** default options */\n    Pagination.prototype.defaults = {\n        /** which page to begin at */\n        startingPage    : 0,\n        /** number of data per page */\n        perPage         : 20,\n        /** the total number of data (null == unknown) */\n        totalDataSize   : null,\n        /** size of current data on current page */\n        currDataSize    : null\n\t};\n\n    /** init the control, calc numPages if possible, and render\n     *  @param {jQuery} the element that will contain the pagination control\n     *  @param {Object} options a map containing overrides to the pagination default options\n     */\n\tPagination.prototype.init = function _init( $element, options ){\n\t\toptions = options || {};\n\t\tthis.$element = $element;\n\t\tthis.options = jQuery.extend( true, {}, this.defaults, options );\n\n        this.currPage = this.options.startingPage;\n        if( this.options.totalDataSize !== null ){\n            this.numPages = Math.ceil( this.options.totalDataSize / this.options.perPage );\n            // limit currPage by numPages\n            if( this.currPage >= this.numPages ){\n                this.currPage = this.numPages - 1;\n            }\n        }\n        //console.debug( 'Pagination.prototype.init:', this.$element, this.currPage );\n        //console.debug( JSON.stringify( this.options ) );\n\n        // bind to data of element\n        this.$element.data( Pagination.prototype.DATA_KEY, this );\n\n        this._render();\n\t\treturn this;\n\t};\n\n    /** helper to create a simple li + a combo */\n    function _make$Li( contents ){\n        return $([\n            '<li><a href=\"javascript:void(0);\">', contents, '</a></li>'\n        ].join( '' ));\n    }\n\n    /** render previous and next pagination buttons */\n    Pagination.prototype._render = function __render(){\n        // no data - no pagination\n        if( this.options.totalDataSize === 0 ){ return this; }\n        // only one page\n        if( this.numPages === 1 ){ return this; }\n\n        // when the number of pages are known, render each page as a link\n        if( this.numPages > 0 ){\n            this._renderPages();\n            this._scrollToActivePage();\n\n        // when the number of pages is not known, render previous or next\n        } else {\n            this._renderPrevNext();\n        }\n\t\treturn this;\n    };\n\n    /** render previous and next pagination buttons */\n    Pagination.prototype._renderPrevNext = function __renderPrevNext(){\n        var pagination = this,\n            $prev = _make$Li( 'Prev' ),\n            $next = _make$Li( 'Next' ),\n            $paginationContainer = $( '<ul/>' ).addClass( 'pagination pagination-prev-next' );\n\n        // disable if it either end\n        if( this.currPage === 0 ){\n            $prev.addClass( 'disabled' );\n        } else {\n            $prev.click( function(){ pagination.prevPage(); });\n        }\n        if( ( this.numPages && this.currPage === ( this.numPages - 1 ) )\n        ||  ( this.options.currDataSize && this.options.currDataSize < this.options.perPage ) ){\n            $next.addClass( 'disabled' );\n        } else {\n            $next.click( function(){ pagination.nextPage(); });\n        }\n\n        this.$element.html( $paginationContainer.append([ $prev, $next ]) );\n        //console.debug( this.$element, this.$element.html() );\n        return this.$element;\n    };\n\n    /** render page links for each possible page (if we can) */\n    Pagination.prototype._renderPages = function __renderPages(){\n        // it's better to scroll the control and let the user see all pages\n        //  than to force her/him to change pages in order to find the one they want (as traditional << >> does)\n        var pagination = this,\n            $scrollingContainer = $( '<div>' ).addClass( 'pagination-scroll-container' ),\n            $paginationContainer = $( '<ul/>' ).addClass( 'pagination pagination-page-list' ),\n            page$LiClick = function( ev ){\n                pagination.goToPage( $( this ).data( 'page' ) );\n            };\n\n        for( var i=0; i<this.numPages; i+=1 ){\n            // add html5 data tag 'page' for later click event handler use\n            var $pageLi = _make$Li( i + 1 ).attr( 'data-page', i ).click( page$LiClick );\n            // highlight the current page\n            if( i === this.currPage ){\n                $pageLi.addClass( 'active' );\n            }\n            //console.debug( '\\t', $pageLi );\n            $paginationContainer.append( $pageLi );\n        }\n        return this.$element.html( $scrollingContainer.html( $paginationContainer ) );\n    };\n\n    /** scroll scroll-container (if any) to show the active page */\n    Pagination.prototype._scrollToActivePage = function __scrollToActivePage(){\n        // scroll to show active page in center of scrollable area\n        var $container = this.$element.find( '.pagination-scroll-container' );\n        // no scroll container : don't scroll\n        if( !$container.length ){ return this; }\n\n        var $activePage = this.$element.find( 'li.active' ),\n            midpoint = $container.width() / 2;\n        //console.debug( $container, $activePage, midpoint );\n        $container.scrollLeft( $container.scrollLeft() + $activePage.position().left - midpoint );\n        return this;\n    };\n\n    /** go to a certain page */\n    Pagination.prototype.goToPage = function goToPage( page ){\n        if( page <= 0 ){ page = 0; }\n        if( this.numPages && page >= this.numPages ){ page = this.numPages - 1; }\n        if( page === this.currPage ){ return this; }\n\n        //console.debug( '\\t going to page ' + page )\n        this.currPage = page;\n        this.$element.trigger( 'pagination.page-change', this.currPage );\n        //console.info( 'pagination:page-change', this.currPage );\n        this._render();\n        return this;\n    };\n\n    /** go to the previous page */\n    Pagination.prototype.prevPage = function prevPage(){\n        return this.goToPage( this.currPage - 1 );\n    };\n\n    /** go to the next page */\n    Pagination.prototype.nextPage = function nextPage(){\n        return this.goToPage( this.currPage + 1 );\n    };\n\n    /** return the current page */\n    Pagination.prototype.page = function page(){\n        return this.currPage;\n    };\n\n    // alternate constructor invocation\n    Pagination.create = function _create( $element, options ){\n        return new Pagination( $element, options );\n    };\n\n    // as jq plugin\n    jQuery.fn.extend({\n        pagination : function $pagination( options ){\n\t\t\tvar nonOptionsArgs = jQuery.makeArray( arguments ).slice( 1 );\n\n            // if passed an object - use that as an options map to create pagination for each selected\n            if( jQuery.type( options ) === 'object' ){\n                return this.map( function(){\n                    Pagination.create( $( this ), options );\n                    return this;\n                });\n            }\n\n            // (other invocations only work on the first element in selected)\n            var $firstElement = $( this[0] ),\n                previousControl = $firstElement.data( Pagination.prototype.DATA_KEY );\n            // if a pagination control was found for this element, either...\n            if( previousControl ){\n                // invoke a function on the pagination object if passed a string (the function name)\n                if( jQuery.type( options ) === 'string' ){\n                    var fn = previousControl[ options ];\n                    if( jQuery.type( fn ) === 'function' ){\n                        return fn.apply( previousControl, nonOptionsArgs );\n                    }\n\n                // if passed nothing, return the previously set control\n                } else {\n                    return previousControl;\n                }\n            }\n            // if there is no control already set, return undefined\n            return undefined;\n        }\n    });\n}));\n"]}