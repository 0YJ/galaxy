{"version":3,"sources":["ui/pagination.js"],"names":["factory","define","amd","$","Pagination","element","options","this","numPages","currPage","_make$Li","contents","join","prototype","DATA_KEY","defaults","startingPage","perPage","totalDataSize","currDataSize","init","$element","_init","Math","ceil","data","_render","_renderPages","_scrollToActivePage","_renderPrevNext","pagination","$paginationContainer","$prev","$next","addClass","prevPage","html","append","click","nextPage","$pageLi","$scrollingContainer","i","$container","ev","width","scrollLeft","find","page","length","$activePage","midpoint","position","left","goToPage","trigger","jQuery","fn","extend","type","create","previousControl","$firstElement","nonOptionsArgs","apply","map"],"mappings":"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","file":"../../scripts/ui/pagination.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function($) {\n    /** Builds (twitter bootstrap styled) pagination controls.\n     *  If the totalDataSize is not null, a horizontal list of page buttons is displayed.\n     *  If totalDataSize is null, two links ('Prev' and 'Next) are displayed.\n     *  When pages are changed, a 'pagination.page-change' event is fired\n     *      sending the event and the (0-based) page requested.\n     */\n    function Pagination(element, options) {\n        /** the total number of pages */\n        this.numPages = null;\n        /** the current, active page */\n        this.currPage = 0;\n        return this.init(element, options);\n    }\n\n    /** data key under which this object will be stored in the element */\n    Pagination.prototype.DATA_KEY = \"pagination\";\n    /** default options */\n    Pagination.prototype.defaults = {\n        /** which page to begin at */\n        startingPage: 0,\n        /** number of data per page */\n        perPage: 20,\n        /** the total number of data (null == unknown) */\n        totalDataSize: null,\n        /** size of current data on current page */\n        currDataSize: null\n    };\n\n    /** init the control, calc numPages if possible, and render\n     *  @param {jQuery} the element that will contain the pagination control\n     *  @param {Object} options a map containing overrides to the pagination default options\n     */\n    Pagination.prototype.init = function _init($element, options) {\n        options = options || {};\n        this.$element = $element;\n        this.options = jQuery.extend(true, {}, this.defaults, options);\n\n        this.currPage = this.options.startingPage;\n        if (this.options.totalDataSize !== null) {\n            this.numPages = Math.ceil(\n                this.options.totalDataSize / this.options.perPage\n            );\n            // limit currPage by numPages\n            if (this.currPage >= this.numPages) {\n                this.currPage = this.numPages - 1;\n            }\n        }\n        //console.debug( 'Pagination.prototype.init:', this.$element, this.currPage );\n        //console.debug( JSON.stringify( this.options ) );\n\n        // bind to data of element\n        this.$element.data(Pagination.prototype.DATA_KEY, this);\n\n        this._render();\n        return this;\n    };\n\n    /** helper to create a simple li + a combo */\n    function _make$Li(contents) {\n        return $(\n            ['<li><a href=\"javascript:void(0);\">', contents, \"</a></li>\"].join(\n                \"\"\n            )\n        );\n    }\n\n    /** render previous and next pagination buttons */\n    Pagination.prototype._render = function __render() {\n        // no data - no pagination\n        if (this.options.totalDataSize === 0) {\n            return this;\n        }\n        // only one page\n        if (this.numPages === 1) {\n            return this;\n        }\n\n        // when the number of pages are known, render each page as a link\n        if (this.numPages > 0) {\n            this._renderPages();\n            this._scrollToActivePage();\n\n            // when the number of pages is not known, render previous or next\n        } else {\n            this._renderPrevNext();\n        }\n        return this;\n    };\n\n    /** render previous and next pagination buttons */\n    Pagination.prototype._renderPrevNext = function __renderPrevNext() {\n        var pagination = this,\n            $prev = _make$Li(\"Prev\"),\n            $next = _make$Li(\"Next\"),\n            $paginationContainer = $(\"<ul/>\").addClass(\n                \"pagination pagination-prev-next\"\n            );\n\n        // disable if it either end\n        if (this.currPage === 0) {\n            $prev.addClass(\"disabled\");\n        } else {\n            $prev.click(function() {\n                pagination.prevPage();\n            });\n        }\n        if (\n            (this.numPages && this.currPage === this.numPages - 1) ||\n            (this.options.currDataSize &&\n                this.options.currDataSize < this.options.perPage)\n        ) {\n            $next.addClass(\"disabled\");\n        } else {\n            $next.click(function() {\n                pagination.nextPage();\n            });\n        }\n\n        this.$element.html($paginationContainer.append([$prev, $next]));\n        //console.debug( this.$element, this.$element.html() );\n        return this.$element;\n    };\n\n    /** render page links for each possible page (if we can) */\n    Pagination.prototype._renderPages = function __renderPages() {\n        // it's better to scroll the control and let the user see all pages\n        //  than to force her/him to change pages in order to find the one they want (as traditional << >> does)\n        var pagination = this,\n            $scrollingContainer = $(\"<div>\").addClass(\n                \"pagination-scroll-container\"\n            ),\n            $paginationContainer = $(\"<ul/>\").addClass(\n                \"pagination pagination-page-list\"\n            ),\n            page$LiClick = function(ev) {\n                pagination.goToPage($(this).data(\"page\"));\n            };\n\n        for (var i = 0; i < this.numPages; i += 1) {\n            // add html5 data tag 'page' for later click event handler use\n            var $pageLi = _make$Li(i + 1)\n                .attr(\"data-page\", i)\n                .click(page$LiClick);\n            // highlight the current page\n            if (i === this.currPage) {\n                $pageLi.addClass(\"active\");\n            }\n            //console.debug( '\\t', $pageLi );\n            $paginationContainer.append($pageLi);\n        }\n        return this.$element.html(\n            $scrollingContainer.html($paginationContainer)\n        );\n    };\n\n    /** scroll scroll-container (if any) to show the active page */\n    Pagination.prototype._scrollToActivePage = function __scrollToActivePage() {\n        // scroll to show active page in center of scrollable area\n        var $container = this.$element.find(\".pagination-scroll-container\");\n        // no scroll container : don't scroll\n        if (!$container.length) {\n            return this;\n        }\n\n        var $activePage = this.$element.find(\"li.active\"),\n            midpoint = $container.width() / 2;\n        //console.debug( $container, $activePage, midpoint );\n        $container.scrollLeft(\n            $container.scrollLeft() + $activePage.position().left - midpoint\n        );\n        return this;\n    };\n\n    /** go to a certain page */\n    Pagination.prototype.goToPage = function goToPage(page) {\n        if (page <= 0) {\n            page = 0;\n        }\n        if (this.numPages && page >= this.numPages) {\n            page = this.numPages - 1;\n        }\n        if (page === this.currPage) {\n            return this;\n        }\n\n        //console.debug( '\\t going to page ' + page )\n        this.currPage = page;\n        this.$element.trigger(\"pagination.page-change\", this.currPage);\n        //console.info( 'pagination:page-change', this.currPage );\n        this._render();\n        return this;\n    };\n\n    /** go to the previous page */\n    Pagination.prototype.prevPage = function prevPage() {\n        return this.goToPage(this.currPage - 1);\n    };\n\n    /** go to the next page */\n    Pagination.prototype.nextPage = function nextPage() {\n        return this.goToPage(this.currPage + 1);\n    };\n\n    /** return the current page */\n    Pagination.prototype.page = function page() {\n        return this.currPage;\n    };\n\n    // alternate constructor invocation\n    Pagination.create = function _create($element, options) {\n        return new Pagination($element, options);\n    };\n\n    // as jq plugin\n    jQuery.fn.extend({\n        pagination: function $pagination(options) {\n            var nonOptionsArgs = jQuery.makeArray(arguments).slice(1);\n\n            // if passed an object - use that as an options map to create pagination for each selected\n            if (jQuery.type(options) === \"object\") {\n                return this.map(function() {\n                    Pagination.create($(this), options);\n                    return this;\n                });\n            }\n\n            // (other invocations only work on the first element in selected)\n            var $firstElement = $(this[0]),\n                previousControl = $firstElement.data(\n                    Pagination.prototype.DATA_KEY\n                );\n            // if a pagination control was found for this element, either...\n            if (previousControl) {\n                // invoke a function on the pagination object if passed a string (the function name)\n                if (jQuery.type(options) === \"string\") {\n                    var fn = previousControl[options];\n                    if (jQuery.type(fn) === \"function\") {\n                        return fn.apply(previousControl, nonOptionsArgs);\n                    }\n\n                    // if passed nothing, return the previously set control\n                } else {\n                    return previousControl;\n                }\n            }\n            // if there is no control already set, return undefined\n            return undefined;\n        }\n    });\n});\n"]}