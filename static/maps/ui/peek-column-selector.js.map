{"version":3,"sources":["ui/peek-column-selector.js"],"names":["factory","define","amd","jQuery","$","validateControl","control","disabled","type","Error","JSON","stringify","multiselect","selected","label","id","indexOf","buildButton","columnIndex","addClass","BUTTON_CLASS","text","buildControlCell","$td","html","attr","COLUMN_INDEX_DATA_KEY","DISABLED_CLASS","setSelectedText","$cell","$button","children","hasClass","SELECTED_CLASS","undefined","selectedText","unselectedText","buildSingleSelectCell","click","ev","this","parent","removeClass","each","eventData","key","val","data","parents","trigger","CHANGE_EVENT","buildMultiSelectCell","toggleClass","selectedColumnIndeces","find","map","i","e","makeArray","buildControlCells","count","$cells","push","buildControlRow","cellCount","includePrompts","$controlRow","ROW_CLASS","$promptCell","PROMPT_CLASS","append","peekColumnSelector","options","extend","defaults","$peek","PEEKCONTROL_CLASS","$peektable","columnCount","length","rowCount","$commentRows","$this","match","RegExp","commentChar","css","get","hideCommentRows","hide","$topLeft","topLeftContent","first","prepend","$headers","replace","name","columnNames","COLUMN_NAME_DATA_KEY","renameColumns","RENAMABLE_HEADER_CLASS","index","prevName","newColumnName","prompt","RENAME_EVENT","controls","forEach","fn","call"],"mappings":"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","file":"../../scripts/ui/peek-column-selector.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n\n}(function ($) {\n    //==============================================================================\n    /** Column selection using the peek display as the control.\n     *  Adds rows to the bottom of the peek with clickable areas in each cell\n     *      to allow the user to select columns.\n     *  Column selection can be limited to a single column or multiple.\n     *  (Optionally) adds a left hand column of column selection prompts.\n     *  (Optionally) allows the column headers to be clicked/renamed\n     *      and set to some initial value.\n     *  (Optionally) hides comment rows.\n     *  (Optionally) allows pre-selecting and disabling certain columns for\n     *      each row control.\n     *\n     *  Construct by selecting a peek table to be used with jQuery and\n     *      calling 'peekColumnSelector' with options.\n     *  Options must include a 'controls' array and can include other options\n     *      listed below.\n     *  @example:\n     *  $( 'pre.peek' ).peekColumnSelector({\n     *          columnNames : [\"Chromosome\", \"Start\", \"Base\", \"\", \"\", \"Qual\" ],\n     *          controls : [\n     *              { label: 'X Column',  id: 'xColumn' },\n     *              { label: 'Y Column',  id: 'yColumn', selected: 2 },\n     *              { label: 'ID Column', id: 'idColumn', selected: 4, disabled: [ 1, 5 ] },\n     *              { label: 'Heatmap',   id: 'heatmap', selected: [ 2, 4 ], disabled: [ 0, 1 ], multiselect: true,\n     *                selectedText: 'Included', unselectedText: 'Excluded' }\n     *          ],\n     *          renameColumns       : true,\n     *          hideCommentRows     : true,\n     *          includePrompts      : true,\n     *          topLeftContent      : 'Data sample:'\n     *      }).on( 'peek-column-selector.change', function( ev, selection ){\n     *          console.info( 'new selection:', selection );\n     *          //{ yColumn: 2 }\n     *      }).on( 'peek-column-selector.rename', function( ev, names ){\n     *          console.info( 'column names', names );\n     *          //[ 'Bler', 'Start', 'Base', '', '', 'Qual' ]\n     *      });\n     *\n     *  An event is fired when column selection is changed and the event\n     *      is passed an object in the form: { the row id : the new selection value }.\n     *  An event is also fired when the table headers are re-named and\n     *      is passed the new array of column names.\n     */\n\n    /** option defaults */\n    var defaults = {\n            /** does this control allow renaming headers? */\n            renameColumns   : false,\n            /** does this control allow renaming headers? */\n            columnNames     : [],\n            /** the comment character used by the peek's datatype */\n            commentChar     : '#',\n            /** should comment rows be shown or hidden in the peek */\n            hideCommentRows : false,\n            /** should a column of row control prompts be used */\n            includePrompts  : true,\n            /** what is the content of the top left cell (often a title) */\n            topLeftContent  : 'Columns:'\n        },\n        /** class added to the pre.peek element (to allow css on just the control) */\n        PEEKCONTROL_CLASS = 'peek-column-selector',\n        /** the string of the event fired when a control row changes */\n        CHANGE_EVENT   = 'peek-column-selector.change',\n        /** the string of the event fired when a column is renamed */\n        RENAME_EVENT   = 'peek-column-selector.rename',\n        /** class added to the control rows */\n        ROW_CLASS      = 'control',\n        /** class added to the left-hand cells that serve as row prompts */\n        PROMPT_CLASS   = 'control-prompt',\n        /** class added to selected _cells_/tds */\n        SELECTED_CLASS = 'selected',\n        /** class added to disabled/un-clickable cells/tds */\n        DISABLED_CLASS = 'disabled',\n        /** class added to the clickable surface within a cell to select it */\n        BUTTON_CLASS   = 'button',\n        /** class added to peek table header (th) cells to indicate they can be clicked and are renamable */\n        RENAMABLE_HEADER_CLASS = 'renamable-header',\n        /** the data key used for each cell to store the column index ('data-...') */\n        COLUMN_INDEX_DATA_KEY = 'column-index',\n        /** renamable header data key used to store the column name (w/o the number and dot: '1.Bler') */\n        COLUMN_NAME_DATA_KEY = 'column-name';\n\n    //TODO: not happy with pure functional here - rows should polymorph (multi, single, etc.)\n    //TODO: needs clean up, move handlers to outer scope\n\n    // ........................................................................\n    /** validate the control data sent in for each row */\n    function validateControl( control ){\n        if( control.disabled && jQuery.type( control.disabled ) !== 'array' ){\n            throw new Error( '\"disabled\" must be defined as an array of indeces: ' + JSON.stringify( control ) );\n        }\n        if( control.multiselect && control.selected && jQuery.type( control.selected ) !== 'array' ){\n            throw new Error( 'Mulitselect rows need an array for \"selected\": ' + JSON.stringify( control ) );\n        }\n        if( !control.label || !control.id ){\n            throw new Error( 'Peek controls need a label and id for each control row: ' + JSON.stringify( control ) );\n        }\n        if( control.disabled && control.disabled.indexOf( control.selected ) !== -1 ){\n            throw new Error( 'Selected column is in the list of disabled columns: ' + JSON.stringify( control ) );\n        }\n        return control;\n    }\n\n    /** build the inner control surface (i.e. button-like) */\n    function buildButton( control, columnIndex ){\n        return $( '<div/>' ).addClass( BUTTON_CLASS ).text( control.label );\n    }\n\n    /** build the basic (shared) cell structure */\n    function buildControlCell( control, columnIndex ){\n        var $td = $( '<td/>' )\n            .html( buildButton( control, columnIndex ) )\n            .attr( 'data-' + COLUMN_INDEX_DATA_KEY, columnIndex );\n\n        // disable if index in disabled array\n        if( control.disabled && control.disabled.indexOf( columnIndex ) !== -1 ){\n            $td.addClass( DISABLED_CLASS );\n        }\n        return $td;\n    }\n\n    /** set the text of the control based on selected/un */\n    function setSelectedText( $cell, control, columnIndex ){\n        var $button = $cell.children( '.' + BUTTON_CLASS );\n        if( $cell.hasClass( SELECTED_CLASS ) ){\n            $button.html( ( control.selectedText !== undefined )?( control.selectedText ):( control.label ) );\n        } else {\n            $button.html( ( control.unselectedText !== undefined )?( control.unselectedText ):( control.label ) );\n        }\n    }\n\n    /** build a cell for a row that only allows one selection */\n    function buildSingleSelectCell( control, columnIndex ){\n        // only one selection - selected is single index\n        var $cell = buildControlCell( control, columnIndex );\n        if( control.selected === columnIndex ){\n            $cell.addClass( SELECTED_CLASS );\n        }\n        setSelectedText( $cell, control, columnIndex );\n\n        // only add the handler to non-disabled controls\n        if( !$cell.hasClass( DISABLED_CLASS ) ){\n            $cell.click( function selectClick( ev ){\n                var $cell = $( this );\n                // don't re-select or fire event if already selected\n                if( !$cell.hasClass( SELECTED_CLASS ) ){\n                    // only one can be selected - remove selected on all others, add it here\n                    var $otherSelected = $cell.parent().children( '.' + SELECTED_CLASS ).removeClass( SELECTED_CLASS );\n                    $otherSelected.each( function(){\n                        setSelectedText( $( this ), control, columnIndex );\n                    });\n\n                    $cell.addClass( SELECTED_CLASS );\n                    setSelectedText( $cell, control, columnIndex );\n\n                    // fire the event from the table itself, passing the id and index of selected\n                    var eventData = {},\n                        key = $cell.parent().attr( 'id' ),\n                        val = $cell.data( COLUMN_INDEX_DATA_KEY );\n                    eventData[ key ] = val;\n                    $cell.parents( '.peek' ).trigger( CHANGE_EVENT, eventData );\n                }\n            });\n        }\n        return $cell;\n    }\n\n    /** build a cell for a row that allows multiple selections */\n    function buildMultiSelectCell( control, columnIndex ){\n        var $cell = buildControlCell( control, columnIndex );\n        // multiple selection - selected is an array\n        if( control.selected && control.selected.indexOf( columnIndex ) !== -1 ){\n            $cell.addClass( SELECTED_CLASS );\n        }\n        setSelectedText( $cell, control, columnIndex );\n\n        // only add the handler to non-disabled controls\n        if( !$cell.hasClass( DISABLED_CLASS ) ){\n            $cell.click( function multiselectClick( ev ){\n                var $cell = $( this );\n                // can be more than one selected - toggle selected on this cell\n                $cell.toggleClass( SELECTED_CLASS );\n                setSelectedText( $cell, control, columnIndex );\n                var selectedColumnIndeces = $cell.parent().find( '.' + SELECTED_CLASS ).map( function( i, e ){\n                    return $( e ).data( COLUMN_INDEX_DATA_KEY );\n                });\n                // fire the event from the table itself, passing the id and index of selected\n                var eventData = {},\n                    key = $cell.parent().attr( 'id' ),\n                    val = jQuery.makeArray( selectedColumnIndeces );\n                eventData[ key ] = val;\n                $cell.parents( '.peek' ).trigger( CHANGE_EVENT, eventData );\n            });\n        }\n        return $cell;\n    }\n\n    /** iterate over columns in peek and create a control for each */\n    function buildControlCells( count, control ){\n        var $cells = [];\n        // build a control for each column - using a build fn based on control\n        for( var columnIndex=0; columnIndex<count; columnIndex+=1 ){\n            $cells.push( control.multiselect?  buildMultiSelectCell( control, columnIndex )\n                                            : buildSingleSelectCell( control, columnIndex ) );\n        }\n        return $cells;\n    }\n\n    /** build a row of controls for the peek */\n    function buildControlRow( cellCount, control, includePrompts ){\n        var $controlRow = $( '<tr/>' ).attr( 'id', control.id ).addClass( ROW_CLASS );\n        if( includePrompts ){\n            var $promptCell = $( '<td/>' ).addClass( PROMPT_CLASS ).text( control.label + ':' );\n            $controlRow.append( $promptCell );\n        }\n        $controlRow.append( buildControlCells( cellCount, control ) );\n        return $controlRow;\n    }\n\n    // ........................................................................\n    /** add to the peek, using options for configuration, return the peek */\n    function peekColumnSelector( options ){\n        options = jQuery.extend( true, {}, defaults, options );\n\n        var $peek = $( this ).addClass( PEEKCONTROL_CLASS ),\n            $peektable = $peek.find( 'table' ),\n            // get the size of the tables - width and height, number of comment rows\n            columnCount = $peektable.find( 'th' ).length,\n            rowCount = $peektable.find( 'tr' ).length,\n            // get the rows containing text starting with the comment char (also make them grey)\n            $commentRows = $peektable.find( 'td[colspan]' ).map( function( e, i ){\n                var $this = $( this );\n                if( $this.text() && $this.text().match( new RegExp( '^' + options.commentChar ) ) ){\n                    return $( this ).css( 'color', 'grey' ).parent().get(0);\n                }\n                return null;\n            });\n\n        // should comment rows in the peek be hidden?\n        if( options.hideCommentRows ){\n            $commentRows.hide();\n            rowCount -= $commentRows.length;\n        }\n        //console.debug( 'rowCount:', rowCount, 'columnCount:', columnCount, '$commentRows:', $commentRows );\n\n        // should a first column of control prompts be added?\n        if( options.includePrompts ){\n            var $topLeft = $( '<th/>' ).addClass( 'top-left' ).text( options.topLeftContent )\n                .attr( 'rowspan', rowCount );\n            $peektable.find( 'tr' ).first().prepend( $topLeft );\n        }\n\n        // save either the options column name or the parsed text of each column header in html5 data attr and text\n        var $headers = $peektable.find( 'th:not(.top-left)' ).each( function( i, e ){\n            var $this = $( this ),\n                // can be '1.name' or '1'\n                text  = $this.text().replace( /^\\d+\\.*/, '' ),\n                name  = options.columnNames[ i ] || text;\n            $this.attr( 'data-' + COLUMN_NAME_DATA_KEY, name )\n                .text( ( i + 1 ) + (( name )?( '.' + name ):( '' )) );\n        });\n\n        // allow renaming of columns when the header is clicked\n        if( options.renameColumns ){\n            $headers.addClass( RENAMABLE_HEADER_CLASS )\n                .click( function renameColumn(){\n                    // prompt for new name\n                    var $this = $( this ),\n                        index = $this.index() + ( options.includePrompts? 0: 1 ),\n                        prevName = $this.data( COLUMN_NAME_DATA_KEY ),\n                        newColumnName = prompt( 'New column name:', prevName );\n                    if( newColumnName !== null && newColumnName !== prevName ){\n                        // set the new text and data\n                        $this.text( index + ( newColumnName?( '.' + newColumnName ):'' ) )\n                            .data( COLUMN_NAME_DATA_KEY, newColumnName )\n                            .attr( 'data-', COLUMN_NAME_DATA_KEY, newColumnName );\n                        // fire event for new column names\n                        var columnNames = jQuery.makeArray(\n                                $this.parent().children( 'th:not(.top-left)' ).map( function(){\n                                    return $( this ).data( COLUMN_NAME_DATA_KEY );\n                                }));\n                        $this.parents( '.peek' ).trigger( RENAME_EVENT, columnNames );\n                    }\n                });\n        }\n\n        // build a row for each control\n        options.controls.forEach( function( control, i ){\n            validateControl( control );\n            var $controlRow = buildControlRow( columnCount, control, options.includePrompts );\n            $peektable.find( 'tbody' ).append( $controlRow );\n        });\n        return this;\n    }\n\n    // ........................................................................\n    // as jq plugin\n    jQuery.fn.extend({\n        peekColumnSelector : function $peekColumnSelector( options ){\n            return this.map( function(){\n                return peekColumnSelector.call( this, options );\n            });\n        }\n    });\n}));\n"]}