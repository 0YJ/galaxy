{"version":3,"sources":["ui/peek-column-selector.js"],"names":["COLUMN_INDEX_DATA_KEY","control","disabled","_jquery2","default","type","Error","JSON","stringify","multiselect","validateControl","selected","label","id","indexOf","buildButton","$td","addClass","DISABLED_CLASS","$","BUTTON_CLASS","text","buildControlCell","$cell","children","$button","selectedText","attr","columnIndex","SELECTED_CLASS","setSelectedText","html","undefined","hasClass","click","unselectedText","$otherSelected","buildSingleSelectCell","eventData","ev","this","selectedColumnIndeces","key","data","parents","trigger","CHANGE_EVENT","$cells","parent","buildControlRow","$controlRow","e","append","buildControlCells","makeArray","val","$peek","find","columnCount","$peektable","length","push","rowCount","buildMultiSelectCell","cellCount","includePrompts","options","$commentRows","PROMPT_CLASS","$promptCell","peekColumnSelector","$this","defaults","PEEKCONTROL_CLASS","replace","COLUMN_NAME_DATA_KEY","$headers","RENAMABLE_HEADER_CLASS","i","index","newColumnName","css","hideCommentRows","hide","topLeftContent","first","prepend","fn","each","name","columnNames","renameColumns","prevName","prompt","map","RENAME_EVENT","controls","forEach","commentChar","ROW_CLASS","extend","call"],"mappings":"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","file":"../../scripts/ui/peek-column-selector.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\nimport jQuery from \"jquery\";\nvar $ = jQuery;\n\n//==============================================================================\n/** Column selection using the peek display as the control.\n     *  Adds rows to the bottom of the peek with clickable areas in each cell\n     *      to allow the user to select columns.\n     *  Column selection can be limited to a single column or multiple.\n     *  (Optionally) adds a left hand column of column selection prompts.\n     *  (Optionally) allows the column headers to be clicked/renamed\n     *      and set to some initial value.\n     *  (Optionally) hides comment rows.\n     *  (Optionally) allows pre-selecting and disabling certain columns for\n     *      each row control.\n     *\n     *  Construct by selecting a peek table to be used with jQuery and\n     *      calling 'peekColumnSelector' with options.\n     *  Options must include a 'controls' array and can include other options\n     *      listed below.\n     *  @example:\n     *  $( 'pre.peek' ).peekColumnSelector({\n     *          columnNames : [\"Chromosome\", \"Start\", \"Base\", \"\", \"\", \"Qual\" ],\n     *          controls : [\n     *              { label: 'X Column',  id: 'xColumn' },\n     *              { label: 'Y Column',  id: 'yColumn', selected: 2 },\n     *              { label: 'ID Column', id: 'idColumn', selected: 4, disabled: [ 1, 5 ] },\n     *              { label: 'Heatmap',   id: 'heatmap', selected: [ 2, 4 ], disabled: [ 0, 1 ], multiselect: true,\n     *                selectedText: 'Included', unselectedText: 'Excluded' }\n     *          ],\n     *          renameColumns       : true,\n     *          hideCommentRows     : true,\n     *          includePrompts      : true,\n     *          topLeftContent      : 'Data sample:'\n     *      }).on( 'peek-column-selector.change', function( ev, selection ){\n     *          console.info( 'new selection:', selection );\n     *          //{ yColumn: 2 }\n     *      }).on( 'peek-column-selector.rename', function( ev, names ){\n     *          console.info( 'column names', names );\n     *          //[ 'Bler', 'Start', 'Base', '', '', 'Qual' ]\n     *      });\n     *\n     *  An event is fired when column selection is changed and the event\n     *      is passed an object in the form: { the row id : the new selection value }.\n     *  An event is also fired when the table headers are re-named and\n     *      is passed the new array of column names.\n     */\n\n/** option defaults */\nvar defaults = {\n    /** does this control allow renaming headers? */\n    renameColumns: false,\n    /** does this control allow renaming headers? */\n    columnNames: [],\n    /** the comment character used by the peek's datatype */\n    commentChar: \"#\",\n    /** should comment rows be shown or hidden in the peek */\n    hideCommentRows: false,\n    /** should a column of row control prompts be used */\n    includePrompts: true,\n    /** what is the content of the top left cell (often a title) */\n    topLeftContent: \"Columns:\"\n};\n\nvar /** class added to the pre.peek element (to allow css on just the control) */\nPEEKCONTROL_CLASS = \"peek-column-selector\";\n\nvar /** the string of the event fired when a control row changes */\nCHANGE_EVENT = \"peek-column-selector.change\";\n\nvar /** the string of the event fired when a column is renamed */\nRENAME_EVENT = \"peek-column-selector.rename\";\n\nvar /** class added to the control rows */\nROW_CLASS = \"control\";\n\nvar /** class added to the left-hand cells that serve as row prompts */\nPROMPT_CLASS = \"control-prompt\";\n\nvar /** class added to selected _cells_/tds */\nSELECTED_CLASS = \"selected\";\n\nvar /** class added to disabled/un-clickable cells/tds */\nDISABLED_CLASS = \"disabled\";\n\nvar /** class added to the clickable surface within a cell to select it */\nBUTTON_CLASS = \"button\";\n\nvar /** class added to peek table header (th) cells to indicate they can be clicked and are renamable */\nRENAMABLE_HEADER_CLASS = \"renamable-header\";\n\nvar /** the data key used for each cell to store the column index ('data-...') */\nCOLUMN_INDEX_DATA_KEY = \"column-index\";\n\nvar /** renamable header data key used to store the column name (w/o the number and dot: '1.Bler') */\nCOLUMN_NAME_DATA_KEY = \"column-name\";\n\n//TODO: not happy with pure functional here - rows should polymorph (multi, single, etc.)\n//TODO: needs clean up, move handlers to outer scope\n\n// ........................................................................\n/** validate the control data sent in for each row */\nfunction validateControl(control) {\n    if (control.disabled && jQuery.type(control.disabled) !== \"array\") {\n        throw new Error(\n            `\"disabled\" must be defined as an array of indeces: ${JSON.stringify(\n                control\n            )}`\n        );\n    }\n    if (\n        control.multiselect &&\n        control.selected &&\n        jQuery.type(control.selected) !== \"array\"\n    ) {\n        throw new Error(\n            `Mulitselect rows need an array for \"selected\": ${JSON.stringify(\n                control\n            )}`\n        );\n    }\n    if (!control.label || !control.id) {\n        throw new Error(\n            `Peek controls need a label and id for each control row: ${JSON.stringify(\n                control\n            )}`\n        );\n    }\n    if (control.disabled && control.disabled.indexOf(control.selected) !== -1) {\n        throw new Error(\n            `Selected column is in the list of disabled columns: ${JSON.stringify(\n                control\n            )}`\n        );\n    }\n    return control;\n}\n\n/** build the inner control surface (i.e. button-like) */\nfunction buildButton(control, columnIndex) {\n    return $(\"<div/>\")\n        .addClass(BUTTON_CLASS)\n        .text(control.label);\n}\n\n/** build the basic (shared) cell structure */\nfunction buildControlCell(control, columnIndex) {\n    var $td = $(\"<td/>\")\n        .html(buildButton(control, columnIndex))\n        .attr(`data-${COLUMN_INDEX_DATA_KEY}`, columnIndex);\n\n    // disable if index in disabled array\n    if (control.disabled && control.disabled.indexOf(columnIndex) !== -1) {\n        $td.addClass(DISABLED_CLASS);\n    }\n    return $td;\n}\n\n/** set the text of the control based on selected/un */\nfunction setSelectedText($cell, control, columnIndex) {\n    var $button = $cell.children(`.${BUTTON_CLASS}`);\n    if ($cell.hasClass(SELECTED_CLASS)) {\n        $button.html(\n            control.selectedText !== undefined\n                ? control.selectedText\n                : control.label\n        );\n    } else {\n        $button.html(\n            control.unselectedText !== undefined\n                ? control.unselectedText\n                : control.label\n        );\n    }\n}\n\n/** build a cell for a row that only allows one selection */\nfunction buildSingleSelectCell(control, columnIndex) {\n    // only one selection - selected is single index\n    var $cell = buildControlCell(control, columnIndex);\n    if (control.selected === columnIndex) {\n        $cell.addClass(SELECTED_CLASS);\n    }\n    setSelectedText($cell, control, columnIndex);\n\n    // only add the handler to non-disabled controls\n    if (!$cell.hasClass(DISABLED_CLASS)) {\n        $cell.click(function selectClick(ev) {\n            var $cell = $(this);\n            // don't re-select or fire event if already selected\n            if (!$cell.hasClass(SELECTED_CLASS)) {\n                // only one can be selected - remove selected on all others, add it here\n                var $otherSelected = $cell\n                    .parent()\n                    .children(`.${SELECTED_CLASS}`)\n                    .removeClass(SELECTED_CLASS);\n                $otherSelected.each(function() {\n                    setSelectedText($(this), control, columnIndex);\n                });\n\n                $cell.addClass(SELECTED_CLASS);\n                setSelectedText($cell, control, columnIndex);\n\n                // fire the event from the table itself, passing the id and index of selected\n                var eventData = {};\n\n                var key = $cell.parent().attr(\"id\");\n                var val = $cell.data(COLUMN_INDEX_DATA_KEY);\n                eventData[key] = val;\n                $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n            }\n        });\n    }\n    return $cell;\n}\n\n/** build a cell for a row that allows multiple selections */\nfunction buildMultiSelectCell(control, columnIndex) {\n    var $cell = buildControlCell(control, columnIndex);\n    // multiple selection - selected is an array\n    if (control.selected && control.selected.indexOf(columnIndex) !== -1) {\n        $cell.addClass(SELECTED_CLASS);\n    }\n    setSelectedText($cell, control, columnIndex);\n\n    // only add the handler to non-disabled controls\n    if (!$cell.hasClass(DISABLED_CLASS)) {\n        $cell.click(function multiselectClick(ev) {\n            var $cell = $(this);\n            // can be more than one selected - toggle selected on this cell\n            $cell.toggleClass(SELECTED_CLASS);\n            setSelectedText($cell, control, columnIndex);\n            var selectedColumnIndeces = $cell\n                .parent()\n                .find(`.${SELECTED_CLASS}`)\n                .map((i, e) => $(e).data(COLUMN_INDEX_DATA_KEY));\n\n            // fire the event from the table itself, passing the id and index of selected\n            var eventData = {};\n\n            var key = $cell.parent().attr(\"id\");\n            var val = jQuery.makeArray(selectedColumnIndeces);\n            eventData[key] = val;\n            $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n        });\n    }\n    return $cell;\n}\n\n/** iterate over columns in peek and create a control for each */\nfunction buildControlCells(count, control) {\n    var $cells = [];\n    // build a control for each column - using a build fn based on control\n    for (var columnIndex = 0; columnIndex < count; columnIndex += 1) {\n        $cells.push(\n            control.multiselect\n                ? buildMultiSelectCell(control, columnIndex)\n                : buildSingleSelectCell(control, columnIndex)\n        );\n    }\n    return $cells;\n}\n\n/** build a row of controls for the peek */\nfunction buildControlRow(cellCount, control, includePrompts) {\n    var $controlRow = $(\"<tr/>\")\n        .attr(\"id\", control.id)\n        .addClass(ROW_CLASS);\n    if (includePrompts) {\n        var $promptCell = $(\"<td/>\")\n            .addClass(PROMPT_CLASS)\n            .text(`${control.label}:`);\n        $controlRow.append($promptCell);\n    }\n    $controlRow.append(buildControlCells(cellCount, control));\n    return $controlRow;\n}\n\n// ........................................................................\n/** add to the peek, using options for configuration, return the peek */\nfunction peekColumnSelector(options) {\n    options = jQuery.extend(true, {}, defaults, options);\n\n    var $peek = $(this).addClass(PEEKCONTROL_CLASS);\n    var $peektable = $peek.find(\"table\");\n\n    var // get the size of the tables - width and height, number of comment rows\n    columnCount = $peektable.find(\"th\").length;\n\n    var rowCount = $peektable.find(\"tr\").length;\n\n    var // get the rows containing text starting with the comment char (also make them grey)\n    $commentRows = $peektable.find(\"td[colspan]\").map(function(e, i) {\n        var $this = $(this);\n        if (\n            $this.text() &&\n            $this.text().match(new RegExp(`^${options.commentChar}`))\n        ) {\n            return $(this)\n                .css(\"color\", \"grey\")\n                .parent()\n                .get(0);\n        }\n        return null;\n    });\n\n    // should comment rows in the peek be hidden?\n    if (options.hideCommentRows) {\n        $commentRows.hide();\n        rowCount -= $commentRows.length;\n    }\n    //console.debug( 'rowCount:', rowCount, 'columnCount:', columnCount, '$commentRows:', $commentRows );\n\n    // should a first column of control prompts be added?\n    if (options.includePrompts) {\n        var $topLeft = $(\"<th/>\")\n            .addClass(\"top-left\")\n            .text(options.topLeftContent)\n            .attr(\"rowspan\", rowCount);\n        $peektable\n            .find(\"tr\")\n            .first()\n            .prepend($topLeft);\n    }\n\n    // save either the options column name or the parsed text of each column header in html5 data attr and text\n    var $headers = $peektable.find(\"th:not(.top-left)\").each(function(i, e) {\n        var $this = $(this);\n\n        var // can be '1.name' or '1'\n        text = $this.text().replace(/^\\d+\\.*/, \"\");\n\n        var name = options.columnNames[i] || text;\n        $this\n            .attr(`data-${COLUMN_NAME_DATA_KEY}`, name)\n            .text(i + 1 + (name ? `.${name}` : \"\"));\n    });\n\n    // allow renaming of columns when the header is clicked\n    if (options.renameColumns) {\n        $headers\n            .addClass(RENAMABLE_HEADER_CLASS)\n            .click(function renameColumn() {\n                // prompt for new name\n                var $this = $(this);\n\n                var index = $this.index() + (options.includePrompts ? 0 : 1);\n                var prevName = $this.data(COLUMN_NAME_DATA_KEY);\n                var newColumnName = prompt(\"New column name:\", prevName);\n                if (newColumnName !== null && newColumnName !== prevName) {\n                    // set the new text and data\n                    $this\n                        .text(\n                            index + (newColumnName ? `.${newColumnName}` : \"\")\n                        )\n                        .data(COLUMN_NAME_DATA_KEY, newColumnName)\n                        .attr(\"data-\", COLUMN_NAME_DATA_KEY, newColumnName);\n                    // fire event for new column names\n                    var columnNames = jQuery.makeArray(\n                        $this\n                            .parent()\n                            .children(\"th:not(.top-left)\")\n                            .map(function() {\n                                return $(this).data(COLUMN_NAME_DATA_KEY);\n                            })\n                    );\n                    $this.parents(\".peek\").trigger(RENAME_EVENT, columnNames);\n                }\n            });\n    }\n\n    // build a row for each control\n    options.controls.forEach((control, i) => {\n        validateControl(control);\n        var $controlRow = buildControlRow(\n            columnCount,\n            control,\n            options.includePrompts\n        );\n        $peektable.find(\"tbody\").append($controlRow);\n    });\n    return this;\n}\n\n// ........................................................................\n// as jq plugin\njQuery.fn.extend({\n    peekColumnSelector: function $peekColumnSelector(options) {\n        return this.map(function() {\n            return peekColumnSelector.call(this, options);\n        });\n    }\n});\n"]}