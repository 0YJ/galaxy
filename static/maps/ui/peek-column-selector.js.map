{"version":3,"sources":["ui/peek-column-selector.js"],"names":["factory","define","amd","$","validateControl","control","RENAMABLE_HEADER_CLASS","type","disabled","Error","COLUMN_INDEX_DATA_KEY","COLUMN_NAME_DATA_KEY","multiselect","selected","jQuery","label","id","JSON","stringify","buildButton","buildControlCell","$td","addClass","BUTTON_CLASS","text","columnIndex","html","attr","$button","$cell","SELECTED_CLASS","indexOf","setSelectedText","buildSingleSelectCell","hasClass","selectedText","DISABLED_CLASS","click","unselectedText","val","eventData","ev","parents","parent","children","removeClass","buildMultiSelectCell","data","multiselectClick","trigger","CHANGE_EVENT","makeArray","buildControlCells","$cells","this","selectedColumnIndeces","find","map","i","e","includePrompts","$promptCell","$controlRow","append","key","options","extend","$peektable","$peek","count","push","columnCount","length","rowCount","$commentRows","buildControlRow","cellCount","ROW_CLASS","hideCommentRows","peekColumnSelector","defaults","$this","PEEKCONTROL_CLASS","replace","name","columnNames","renameColumns","$headers","match","commentChar","index","prevName","newColumnName","hide","controls","forEach","first","prepend","$topLeft","each","prompt","RENAME_EVENT","topLeftContent","PROMPT_CLASS","fn","call"],"mappings":"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","file":"../../scripts/ui/peek-column-selector.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function($) {\n    //==============================================================================\n    /** Column selection using the peek display as the control.\n     *  Adds rows to the bottom of the peek with clickable areas in each cell\n     *      to allow the user to select columns.\n     *  Column selection can be limited to a single column or multiple.\n     *  (Optionally) adds a left hand column of column selection prompts.\n     *  (Optionally) allows the column headers to be clicked/renamed\n     *      and set to some initial value.\n     *  (Optionally) hides comment rows.\n     *  (Optionally) allows pre-selecting and disabling certain columns for\n     *      each row control.\n     *\n     *  Construct by selecting a peek table to be used with jQuery and\n     *      calling 'peekColumnSelector' with options.\n     *  Options must include a 'controls' array and can include other options\n     *      listed below.\n     *  @example:\n     *  $( 'pre.peek' ).peekColumnSelector({\n     *          columnNames : [\"Chromosome\", \"Start\", \"Base\", \"\", \"\", \"Qual\" ],\n     *          controls : [\n     *              { label: 'X Column',  id: 'xColumn' },\n     *              { label: 'Y Column',  id: 'yColumn', selected: 2 },\n     *              { label: 'ID Column', id: 'idColumn', selected: 4, disabled: [ 1, 5 ] },\n     *              { label: 'Heatmap',   id: 'heatmap', selected: [ 2, 4 ], disabled: [ 0, 1 ], multiselect: true,\n     *                selectedText: 'Included', unselectedText: 'Excluded' }\n     *          ],\n     *          renameColumns       : true,\n     *          hideCommentRows     : true,\n     *          includePrompts      : true,\n     *          topLeftContent      : 'Data sample:'\n     *      }).on( 'peek-column-selector.change', function( ev, selection ){\n     *          console.info( 'new selection:', selection );\n     *          //{ yColumn: 2 }\n     *      }).on( 'peek-column-selector.rename', function( ev, names ){\n     *          console.info( 'column names', names );\n     *          //[ 'Bler', 'Start', 'Base', '', '', 'Qual' ]\n     *      });\n     *\n     *  An event is fired when column selection is changed and the event\n     *      is passed an object in the form: { the row id : the new selection value }.\n     *  An event is also fired when the table headers are re-named and\n     *      is passed the new array of column names.\n     */\n\n    /** option defaults */\n    var defaults = {\n            /** does this control allow renaming headers? */\n            renameColumns: false,\n            /** does this control allow renaming headers? */\n            columnNames: [],\n            /** the comment character used by the peek's datatype */\n            commentChar: \"#\",\n            /** should comment rows be shown or hidden in the peek */\n            hideCommentRows: false,\n            /** should a column of row control prompts be used */\n            includePrompts: true,\n            /** what is the content of the top left cell (often a title) */\n            topLeftContent: \"Columns:\"\n        },\n        /** class added to the pre.peek element (to allow css on just the control) */\n        PEEKCONTROL_CLASS = \"peek-column-selector\",\n        /** the string of the event fired when a control row changes */\n        CHANGE_EVENT = \"peek-column-selector.change\",\n        /** the string of the event fired when a column is renamed */\n        RENAME_EVENT = \"peek-column-selector.rename\",\n        /** class added to the control rows */\n        ROW_CLASS = \"control\",\n        /** class added to the left-hand cells that serve as row prompts */\n        PROMPT_CLASS = \"control-prompt\",\n        /** class added to selected _cells_/tds */\n        SELECTED_CLASS = \"selected\",\n        /** class added to disabled/un-clickable cells/tds */\n        DISABLED_CLASS = \"disabled\",\n        /** class added to the clickable surface within a cell to select it */\n        BUTTON_CLASS = \"button\",\n        /** class added to peek table header (th) cells to indicate they can be clicked and are renamable */\n        RENAMABLE_HEADER_CLASS = \"renamable-header\",\n        /** the data key used for each cell to store the column index ('data-...') */\n        COLUMN_INDEX_DATA_KEY = \"column-index\",\n        /** renamable header data key used to store the column name (w/o the number and dot: '1.Bler') */\n        COLUMN_NAME_DATA_KEY = \"column-name\";\n\n    //TODO: not happy with pure functional here - rows should polymorph (multi, single, etc.)\n    //TODO: needs clean up, move handlers to outer scope\n\n    // ........................................................................\n    /** validate the control data sent in for each row */\n    function validateControl(control) {\n        if (control.disabled && jQuery.type(control.disabled) !== \"array\") {\n            throw new Error(\n                '\"disabled\" must be defined as an array of indeces: ' +\n                    JSON.stringify(control)\n            );\n        }\n        if (\n            control.multiselect &&\n            control.selected &&\n            jQuery.type(control.selected) !== \"array\"\n        ) {\n            throw new Error(\n                'Mulitselect rows need an array for \"selected\": ' +\n                    JSON.stringify(control)\n            );\n        }\n        if (!control.label || !control.id) {\n            throw new Error(\n                \"Peek controls need a label and id for each control row: \" +\n                    JSON.stringify(control)\n            );\n        }\n        if (\n            control.disabled &&\n            control.disabled.indexOf(control.selected) !== -1\n        ) {\n            throw new Error(\n                \"Selected column is in the list of disabled columns: \" +\n                    JSON.stringify(control)\n            );\n        }\n        return control;\n    }\n\n    /** build the inner control surface (i.e. button-like) */\n    function buildButton(control, columnIndex) {\n        return $(\"<div/>\")\n            .addClass(BUTTON_CLASS)\n            .text(control.label);\n    }\n\n    /** build the basic (shared) cell structure */\n    function buildControlCell(control, columnIndex) {\n        var $td = $(\"<td/>\")\n            .html(buildButton(control, columnIndex))\n            .attr(\"data-\" + COLUMN_INDEX_DATA_KEY, columnIndex);\n\n        // disable if index in disabled array\n        if (control.disabled && control.disabled.indexOf(columnIndex) !== -1) {\n            $td.addClass(DISABLED_CLASS);\n        }\n        return $td;\n    }\n\n    /** set the text of the control based on selected/un */\n    function setSelectedText($cell, control, columnIndex) {\n        var $button = $cell.children(\".\" + BUTTON_CLASS);\n        if ($cell.hasClass(SELECTED_CLASS)) {\n            $button.html(\n                control.selectedText !== undefined\n                    ? control.selectedText\n                    : control.label\n            );\n        } else {\n            $button.html(\n                control.unselectedText !== undefined\n                    ? control.unselectedText\n                    : control.label\n            );\n        }\n    }\n\n    /** build a cell for a row that only allows one selection */\n    function buildSingleSelectCell(control, columnIndex) {\n        // only one selection - selected is single index\n        var $cell = buildControlCell(control, columnIndex);\n        if (control.selected === columnIndex) {\n            $cell.addClass(SELECTED_CLASS);\n        }\n        setSelectedText($cell, control, columnIndex);\n\n        // only add the handler to non-disabled controls\n        if (!$cell.hasClass(DISABLED_CLASS)) {\n            $cell.click(function selectClick(ev) {\n                var $cell = $(this);\n                // don't re-select or fire event if already selected\n                if (!$cell.hasClass(SELECTED_CLASS)) {\n                    // only one can be selected - remove selected on all others, add it here\n                    var $otherSelected = $cell\n                        .parent()\n                        .children(\".\" + SELECTED_CLASS)\n                        .removeClass(SELECTED_CLASS);\n                    $otherSelected.each(function() {\n                        setSelectedText($(this), control, columnIndex);\n                    });\n\n                    $cell.addClass(SELECTED_CLASS);\n                    setSelectedText($cell, control, columnIndex);\n\n                    // fire the event from the table itself, passing the id and index of selected\n                    var eventData = {},\n                        key = $cell.parent().attr(\"id\"),\n                        val = $cell.data(COLUMN_INDEX_DATA_KEY);\n                    eventData[key] = val;\n                    $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n                }\n            });\n        }\n        return $cell;\n    }\n\n    /** build a cell for a row that allows multiple selections */\n    function buildMultiSelectCell(control, columnIndex) {\n        var $cell = buildControlCell(control, columnIndex);\n        // multiple selection - selected is an array\n        if (control.selected && control.selected.indexOf(columnIndex) !== -1) {\n            $cell.addClass(SELECTED_CLASS);\n        }\n        setSelectedText($cell, control, columnIndex);\n\n        // only add the handler to non-disabled controls\n        if (!$cell.hasClass(DISABLED_CLASS)) {\n            $cell.click(function multiselectClick(ev) {\n                var $cell = $(this);\n                // can be more than one selected - toggle selected on this cell\n                $cell.toggleClass(SELECTED_CLASS);\n                setSelectedText($cell, control, columnIndex);\n                var selectedColumnIndeces = $cell\n                    .parent()\n                    .find(\".\" + SELECTED_CLASS)\n                    .map(function(i, e) {\n                        return $(e).data(COLUMN_INDEX_DATA_KEY);\n                    });\n                // fire the event from the table itself, passing the id and index of selected\n                var eventData = {},\n                    key = $cell.parent().attr(\"id\"),\n                    val = jQuery.makeArray(selectedColumnIndeces);\n                eventData[key] = val;\n                $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n            });\n        }\n        return $cell;\n    }\n\n    /** iterate over columns in peek and create a control for each */\n    function buildControlCells(count, control) {\n        var $cells = [];\n        // build a control for each column - using a build fn based on control\n        for (var columnIndex = 0; columnIndex < count; columnIndex += 1) {\n            $cells.push(\n                control.multiselect\n                    ? buildMultiSelectCell(control, columnIndex)\n                    : buildSingleSelectCell(control, columnIndex)\n            );\n        }\n        return $cells;\n    }\n\n    /** build a row of controls for the peek */\n    function buildControlRow(cellCount, control, includePrompts) {\n        var $controlRow = $(\"<tr/>\")\n            .attr(\"id\", control.id)\n            .addClass(ROW_CLASS);\n        if (includePrompts) {\n            var $promptCell = $(\"<td/>\")\n                .addClass(PROMPT_CLASS)\n                .text(control.label + \":\");\n            $controlRow.append($promptCell);\n        }\n        $controlRow.append(buildControlCells(cellCount, control));\n        return $controlRow;\n    }\n\n    // ........................................................................\n    /** add to the peek, using options for configuration, return the peek */\n    function peekColumnSelector(options) {\n        options = jQuery.extend(true, {}, defaults, options);\n\n        var $peek = $(this).addClass(PEEKCONTROL_CLASS),\n            $peektable = $peek.find(\"table\"),\n            // get the size of the tables - width and height, number of comment rows\n            columnCount = $peektable.find(\"th\").length,\n            rowCount = $peektable.find(\"tr\").length,\n            // get the rows containing text starting with the comment char (also make them grey)\n            $commentRows = $peektable.find(\"td[colspan]\").map(function(e, i) {\n                var $this = $(this);\n                if (\n                    $this.text() &&\n                    $this.text().match(new RegExp(\"^\" + options.commentChar))\n                ) {\n                    return $(this)\n                        .css(\"color\", \"grey\")\n                        .parent()\n                        .get(0);\n                }\n                return null;\n            });\n\n        // should comment rows in the peek be hidden?\n        if (options.hideCommentRows) {\n            $commentRows.hide();\n            rowCount -= $commentRows.length;\n        }\n        //console.debug( 'rowCount:', rowCount, 'columnCount:', columnCount, '$commentRows:', $commentRows );\n\n        // should a first column of control prompts be added?\n        if (options.includePrompts) {\n            var $topLeft = $(\"<th/>\")\n                .addClass(\"top-left\")\n                .text(options.topLeftContent)\n                .attr(\"rowspan\", rowCount);\n            $peektable\n                .find(\"tr\")\n                .first()\n                .prepend($topLeft);\n        }\n\n        // save either the options column name or the parsed text of each column header in html5 data attr and text\n        var $headers = $peektable\n            .find(\"th:not(.top-left)\")\n            .each(function(i, e) {\n                var $this = $(this),\n                    // can be '1.name' or '1'\n                    text = $this.text().replace(/^\\d+\\.*/, \"\"),\n                    name = options.columnNames[i] || text;\n                $this\n                    .attr(\"data-\" + COLUMN_NAME_DATA_KEY, name)\n                    .text(i + 1 + (name ? \".\" + name : \"\"));\n            });\n\n        // allow renaming of columns when the header is clicked\n        if (options.renameColumns) {\n            $headers\n                .addClass(RENAMABLE_HEADER_CLASS)\n                .click(function renameColumn() {\n                    // prompt for new name\n                    var $this = $(this),\n                        index =\n                            $this.index() + (options.includePrompts ? 0 : 1),\n                        prevName = $this.data(COLUMN_NAME_DATA_KEY),\n                        newColumnName = prompt(\"New column name:\", prevName);\n                    if (newColumnName !== null && newColumnName !== prevName) {\n                        // set the new text and data\n                        $this\n                            .text(\n                                index +\n                                    (newColumnName ? \".\" + newColumnName : \"\")\n                            )\n                            .data(COLUMN_NAME_DATA_KEY, newColumnName)\n                            .attr(\"data-\", COLUMN_NAME_DATA_KEY, newColumnName);\n                        // fire event for new column names\n                        var columnNames = jQuery.makeArray(\n                            $this\n                                .parent()\n                                .children(\"th:not(.top-left)\")\n                                .map(function() {\n                                    return $(this).data(COLUMN_NAME_DATA_KEY);\n                                })\n                        );\n                        $this\n                            .parents(\".peek\")\n                            .trigger(RENAME_EVENT, columnNames);\n                    }\n                });\n        }\n\n        // build a row for each control\n        options.controls.forEach(function(control, i) {\n            validateControl(control);\n            var $controlRow = buildControlRow(\n                columnCount,\n                control,\n                options.includePrompts\n            );\n            $peektable.find(\"tbody\").append($controlRow);\n        });\n        return this;\n    }\n\n    // ........................................................................\n    // as jq plugin\n    jQuery.fn.extend({\n        peekColumnSelector: function $peekColumnSelector(options) {\n            return this.map(function() {\n                return peekColumnSelector.call(this, options);\n            });\n        }\n    });\n});\n"]}