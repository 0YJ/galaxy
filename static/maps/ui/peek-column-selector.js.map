{"version":3,"sources":["ui/peek-column-selector.js"],"names":["validateControl","control","disabled","_jquery2","default","type","DISABLED_CLASS","JSON","stringify","RENAMABLE_HEADER_CLASS","selected","Error","COLUMN_NAME_DATA_KEY","label","id","indexOf","buildButton","columnIndex","$","addClass","BUTTON_CLASS","text","buildControlCell","$td","html","attr","setSelectedText","$cell","$button","selectedText","undefined","unselectedText","buildSingleSelectCell","hasClass","SELECTED_CLASS","$otherSelected","this","parent","children","eventData","removeClass","data","val","key","buildMultiSelectCell","parents","trigger","CHANGE_EVENT","multiselectClick","toggleClass","click","ev","selectedColumnIndeces","find","map","i","e","COLUMN_INDEX_DATA_KEY","$cells","push","multiselect","buildControlCells","$promptCell","$controlRow","cellCount","options","buildControlRow","includePrompts","columnCount","$peektable","rowCount","$commentRows","$this","append","hide","length","PEEKCONTROL_CLASS","$topLeft","$headers","match","RegExp","commentChar","replace","name","hideCommentRows","index","topLeftContent","first","prepend","each","columnNames","renameColumns","prevName","newColumnName","prompt","makeArray","RENAME_EVENT","controls","forEach","defaults","ROW_CLASS","PROMPT_CLASS","fn","extend","peekColumnSelector","call"],"mappings":"2CA2FA,SAASA,EAAgBC,GAhBrB,GAAAA,EAAAC,UAAA,UAAAC,EAAAC,QAAAC,KAAAJ,EAAAC,UACAI,MAAAA,IAAAA,MAkBQ,sDAjBRC,KAAAC,UAAAP,IAEA,GACAQ,EAAAA,aAoBIR,EAAQS,UAnBZ,UAAAP,EAAAC,QAAAC,KAAAJ,EAAAS,UAsBI,MAAM,IAAIC,MApBd,kDACAC,KAAAA,UAAuBX,IAG3B,IAAAA,EAAAY,QAAAZ,EAAAa,GAsBQ,MAAM,IAAIH,MApBlB,2DACAJ,KAAAC,UAAAP,IAGQ,GAAAA,EAAAC,WACI,IAAAD,EAAAC,SAAAa,QAAAd,EAAAS,UAGP,MAAA,IAAAC,MAEGV,uDAIAM,KAAMC,UACFP,IAKJ,OAAAA,EAUH,SAAAe,EAAAf,EAAAgB,GACD,OAAAC,EAAA,UACHC,SAAAC,GAMQC,KAAKpB,EAAQY,OACrB,SAAAS,EAAArB,EAAAgB,GAIG,IAAIM,EAAML,EAAE,SAFhBM,KAAAR,EAAAf,EAAAgB,IACAQ,KAASH,QAAAA,EAA0BL,GAQ9B,OAHDhB,EAAAC,WAAA,IAAAD,EAAAC,SAAAa,QAAAE,IACAM,EAAItB,SAAQC,GAEXqB,EAIL,SAAAG,EAAAC,EAAA1B,EAAAgB,GACA,IAAAW,EAASF,EAAAA,SAAgBC,IAAO1B,GAC5B0B,EAAIC,SAAUD,GACdC,EAAID,UAEYE,IADZD,EAAQJ,aAKLvB,EAAA4B,aACHD,EACI3B,OADJ2B,EAAQJ,UAQhBM,IAAA7B,EAAA8B,eACSC,EAAAA,eACL/B,EAAAY,OADJ,SAASmB,EAAsB/B,EAASgB,GASpC,IAAAU,EAAKA,EAAerB,EAAfW,GAoCLS,OAnCIC,EAAAA,WAAYV,GACRU,EAAAR,SAAIQ,GAEJD,EAAIC,EAAOM,EAASC,GAMhBC,EAAAA,SAAAA,IACIT,EAAAA,MAAAA,SAAgBR,GACnB,IAAAS,EAFDT,EAAAkB,MAIAT,IAAAA,EAAAA,SAAMR,GAAN,CARqBQ,EAWrBU,SACAC,SAAIC,IAAYL,GAAhBM,YACUb,GACAA,KAAMc,WAChBF,EAAArB,EAAiBwB,MAAjBzC,EAAAgB,KApBRU,EAAAR,SAAAe,GAwBHR,EAAAC,EAAA1B,EAAAgB,GAPW,IAAIsB,KAWpBI,EAAAhB,EAAAU,SAAAZ,KAAA,MACSmB,EAAAA,EAAAA,KAAqB3C,GACtB0B,EAAQL,GAAAA,EACZK,EAAAkB,QAAA,SAAAC,QAAAC,EAAAR,MAIAb,EAIIC,SAAAA,EAAY1B,EAAS+C,GACjB,IAAArB,EAAAL,EAAcrB,EAAdgB,GAmCZ,OAjCYU,EAAAA,WAAA,IAAMsB,EAAYf,SAAAA,QAAlBjB,IACAS,EAAAA,SAAAA,GAKQA,EAAAC,EAAOT,EAAAD,GAGfU,EAAAM,SAAIM,IAAJZ,EAAAuB,MACIP,SAA0BQ,GAD9B,IAAAxB,EAEIe,EAAMN,MAEVT,EAAAA,YAAcO,GACjBR,EAjBDC,EAAA1B,EAAAgB,GAkBH,IAAAmC,EAAAzB,EACMA,SACV0B,KAAA,IAAAnB,GAZgBoB,IAAI,SAASC,EAAGC,GAcjC,OAAAtC,EAAAsC,GAAAf,KAAAgB,KAGIlB,KACKI,EAAI1B,EAAAA,SAAiBA,KAAAA,MACtByC,EAAOC,EAAAA,QACH1D,UAAQ2D,GAIfrB,EAAAI,GAAAD,EACDf,EAAO+B,QAAP,SAAAZ,QAAAC,EAAAR,KAGJZ,EAMQ,SAAAkC,EAAIC,EAAgB7D,GAKxB8D,IAAAA,IAFIA,KAEJA,EAAmBF,EAAAA,EAAAA,EAAkBG,GAArC,EACAN,EAAOK,KACV9D,EAAA2D,YApBiBhB,EAAqB3C,EAASgB,GAsBhDe,EAAA/B,EAAAgB,IAGIgD,OAAAA,EAjBJ,SAASC,EAAgBF,EAAW/D,EAASkE,GAqBrC,IAAAJ,EAAA7C,EAAA,SACAkD,KAAAA,KAAAA,EAAcC,IAHlBlD,SAIImD,GAnBJ,GAAIH,EAAgB,CAoBhB,IAAAL,EAAA5C,EAAA,SACAqD,SAAAA,GACIlD,KAAImD,EAAU3D,MAAd,KACAkD,EACIS,OAAAV,GAQJ,OADCC,EAAAU,OAAAZ,EAAAG,EAAA/D,IACD8D,EAKJQ,SAAAA,EAAaG,GACbJ,EAAAA,EAAAA,QAAAA,QAAYC,KAAaI,EAAzBV,GAEJ,IAxBII,EAwBJnD,EAAAkB,MAAAjB,SAAAyD,GAxBuBvB,KAAK,SA2B5Be,EAAYD,EAAAA,KAAgB,MAAAQ,OACxBL,EAAIO,EAAaxB,KAAA,MACZlC,OAORoD,EAAAF,EAAAhB,KAAA,eAAAC,IAAA,SAAAE,EAAAD,GA9BO,IAAIiB,EAAQtD,EAAEkB,MAgCtB,OACI0C,EAAAA,QACIN,EAAAA,OAAUO,MAAd,IAAAC,OAAA,IAAAf,EAAAgB,cACI/D,EAAAkB,MACOoC,IAAMnD,QAAO6D,QACpBC,SAEC1D,IAAK,GA7BC,OA6CC+C,GAPJP,EAAAmB,kBACAb,EAAIC,OAAJF,GACIe,EAAQb,QAKRA,EAAAA,eAEQa,CAIR,IAAAR,EAAA3D,EAAA,SACAC,SAAA,YAKYE,KAAA4C,EAAAqB,gBACH7D,KAAA,UANT6C,GAQAE,EACHnB,KAAA,MA1BTkC,QA4BHC,QAAAX,GAIG7E,IAAAA,EAAAA,EAAgBC,KAAhB,qBAAAwF,KAAA,SAAAlC,EAAAC,GACA,IAAAgB,EAAIT,EAAAA,MAFR1C,EAAAmD,EAAAnD,OAAA6D,QAAA,UAAA,IASAC,EAAAlB,EAAAyB,YAAAnC,IAAAlC,EACHmD,EA/CY/C,KAAK,QAAUb,EAAsBuE,GAiDlD9D,KAAAkC,EAAA,GAAA4B,EAAA,IAAAA,EAAA,OAHI,OAOIlB,EAAA0B,eACIb,EADG3D,SAAPV,GAGHyC,MAAA,WA9CW,IAAIsB,EAAQtD,EAAEkB,MACViD,EAAQb,EAAMa,SAAWpB,EAAQE,eAAiB,EAAI,GACtDyB,EAAWpB,EAAM/B,KAAK7B,GACtBiF,EAAgBC,OAAO,mBAAoBF,GAC/C,GAAsB,OAAlBC,GAA0BA,IAAkBD,EAAU,CAEtDpB,EACKnD,KACGgE,GAASQ,EAAgB,IAAMA,EAAgB,KAElDpD,KAAK7B,EAAsBiF,GAC3BpE,KAAK,QAASb,EAAsBiF,GAEzC,IAAIH,EAAcvF,EAAAC,QAAO2F,UACrBvB,EACKnC,SACAC,SAAS,qBACTgB,IAAI,WACD,OAAOpC,EAAEkB,MAAMK,KAAK7B,MAGhC4D,EAAM3B,QAAQ,SAASC,QAAQkD,EAAcN,MAM7DzB,EAAQgC,SAASC,QAAQ,SAASjG,EAASsD,GACvCvD,EAAgBC,GAChB,IAAI8D,EAAcG,EACdE,EACAnE,EACAgE,EAAQE,gBAEZE,EAAWhB,KAAK,SAASoB,OAAOV,KAE7B3B,gEApWPlB,EAAAA,EAAAA,QA8CAiF,GAEIR,eAAe,EAEfD,eAEAT,YAAa,IAvDrBG,iBAAA,EAiDIe,gBAAW,EAEPR,eAAe,YAGff,EAAA,uBAEA7B,EAAA,8BAEAiD,EAAA,8BAEAI,EAAA,UAXOC,EAAf,iBAcInE,EAAA,WAaA5B,EAAiB,WAVjByC,EAAe,SACftC,EAAA,mBAeAgD,EAAwB,eAZxB2C,EArBJ,cA2TAjG,EAAAC,QAAOkG,GAAGC,QACNC,mBAAoB,SAA6BvC,GAC7C,OAAO7B,KAAKkB,IAAI,WACZ,OAAOkD,EAAmBC,KAAKrE,KAAM6B","file":"../../scripts/ui/peek-column-selector.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\nimport jQuery from \"jquery\";\nvar $ = jQuery;\n//==============================================================================\n/** Column selection using the peek display as the control.\n     *  Adds rows to the bottom of the peek with clickable areas in each cell\n     *      to allow the user to select columns.\n     *  Column selection can be limited to a single column or multiple.\n     *  (Optionally) adds a left hand column of column selection prompts.\n     *  (Optionally) allows the column headers to be clicked/renamed\n     *      and set to some initial value.\n     *  (Optionally) hides comment rows.\n     *  (Optionally) allows pre-selecting and disabling certain columns for\n     *      each row control.\n     *\n     *  Construct by selecting a peek table to be used with jQuery and\n     *      calling 'peekColumnSelector' with options.\n     *  Options must include a 'controls' array and can include other options\n     *      listed below.\n     *  @example:\n     *  $( 'pre.peek' ).peekColumnSelector({\n     *          columnNames : [\"Chromosome\", \"Start\", \"Base\", \"\", \"\", \"Qual\" ],\n     *          controls : [\n     *              { label: 'X Column',  id: 'xColumn' },\n     *              { label: 'Y Column',  id: 'yColumn', selected: 2 },\n     *              { label: 'ID Column', id: 'idColumn', selected: 4, disabled: [ 1, 5 ] },\n     *              { label: 'Heatmap',   id: 'heatmap', selected: [ 2, 4 ], disabled: [ 0, 1 ], multiselect: true,\n     *                selectedText: 'Included', unselectedText: 'Excluded' }\n     *          ],\n     *          renameColumns       : true,\n     *          hideCommentRows     : true,\n     *          includePrompts      : true,\n     *          topLeftContent      : 'Data sample:'\n     *      }).on( 'peek-column-selector.change', function( ev, selection ){\n     *          console.info( 'new selection:', selection );\n     *          //{ yColumn: 2 }\n     *      }).on( 'peek-column-selector.rename', function( ev, names ){\n     *          console.info( 'column names', names );\n     *          //[ 'Bler', 'Start', 'Base', '', '', 'Qual' ]\n     *      });\n     *\n     *  An event is fired when column selection is changed and the event\n     *      is passed an object in the form: { the row id : the new selection value }.\n     *  An event is also fired when the table headers are re-named and\n     *      is passed the new array of column names.\n     */\n\n/** option defaults */\nvar defaults = {\n        /** does this control allow renaming headers? */\n        renameColumns: false,\n        /** does this control allow renaming headers? */\n        columnNames: [],\n        /** the comment character used by the peek's datatype */\n        commentChar: \"#\",\n        /** should comment rows be shown or hidden in the peek */\n        hideCommentRows: false,\n        /** should a column of row control prompts be used */\n        includePrompts: true,\n        /** what is the content of the top left cell (often a title) */\n        topLeftContent: \"Columns:\"\n    },\n    /** class added to the pre.peek element (to allow css on just the control) */\n    PEEKCONTROL_CLASS = \"peek-column-selector\",\n    /** the string of the event fired when a control row changes */\n    CHANGE_EVENT = \"peek-column-selector.change\",\n    /** the string of the event fired when a column is renamed */\n    RENAME_EVENT = \"peek-column-selector.rename\",\n    /** class added to the control rows */\n    ROW_CLASS = \"control\",\n    /** class added to the left-hand cells that serve as row prompts */\n    PROMPT_CLASS = \"control-prompt\",\n    /** class added to selected _cells_/tds */\n    SELECTED_CLASS = \"selected\",\n    /** class added to disabled/un-clickable cells/tds */\n    DISABLED_CLASS = \"disabled\",\n    /** class added to the clickable surface within a cell to select it */\n    BUTTON_CLASS = \"button\",\n    /** class added to peek table header (th) cells to indicate they can be clicked and are renamable */\n    RENAMABLE_HEADER_CLASS = \"renamable-header\",\n    /** the data key used for each cell to store the column index ('data-...') */\n    COLUMN_INDEX_DATA_KEY = \"column-index\",\n    /** renamable header data key used to store the column name (w/o the number and dot: '1.Bler') */\n    COLUMN_NAME_DATA_KEY = \"column-name\";\n\n//TODO: not happy with pure functional here - rows should polymorph (multi, single, etc.)\n//TODO: needs clean up, move handlers to outer scope\n\n// ........................................................................\n/** validate the control data sent in for each row */\nfunction validateControl(control) {\n    if (control.disabled && jQuery.type(control.disabled) !== \"array\") {\n        throw new Error(\n            '\"disabled\" must be defined as an array of indeces: ' +\n                JSON.stringify(control)\n        );\n    }\n    if (\n        control.multiselect &&\n        control.selected &&\n        jQuery.type(control.selected) !== \"array\"\n    ) {\n        throw new Error(\n            'Mulitselect rows need an array for \"selected\": ' +\n                JSON.stringify(control)\n        );\n    }\n    if (!control.label || !control.id) {\n        throw new Error(\n            \"Peek controls need a label and id for each control row: \" +\n                JSON.stringify(control)\n        );\n    }\n    if (control.disabled && control.disabled.indexOf(control.selected) !== -1) {\n        throw new Error(\n            \"Selected column is in the list of disabled columns: \" +\n                JSON.stringify(control)\n        );\n    }\n    return control;\n}\n\n/** build the inner control surface (i.e. button-like) */\nfunction buildButton(control, columnIndex) {\n    return $(\"<div/>\")\n        .addClass(BUTTON_CLASS)\n        .text(control.label);\n}\n\n/** build the basic (shared) cell structure */\nfunction buildControlCell(control, columnIndex) {\n    var $td = $(\"<td/>\")\n        .html(buildButton(control, columnIndex))\n        .attr(\"data-\" + COLUMN_INDEX_DATA_KEY, columnIndex);\n\n    // disable if index in disabled array\n    if (control.disabled && control.disabled.indexOf(columnIndex) !== -1) {\n        $td.addClass(DISABLED_CLASS);\n    }\n    return $td;\n}\n\n/** set the text of the control based on selected/un */\nfunction setSelectedText($cell, control, columnIndex) {\n    var $button = $cell.children(\".\" + BUTTON_CLASS);\n    if ($cell.hasClass(SELECTED_CLASS)) {\n        $button.html(\n            control.selectedText !== undefined\n                ? control.selectedText\n                : control.label\n        );\n    } else {\n        $button.html(\n            control.unselectedText !== undefined\n                ? control.unselectedText\n                : control.label\n        );\n    }\n}\n\n/** build a cell for a row that only allows one selection */\nfunction buildSingleSelectCell(control, columnIndex) {\n    // only one selection - selected is single index\n    var $cell = buildControlCell(control, columnIndex);\n    if (control.selected === columnIndex) {\n        $cell.addClass(SELECTED_CLASS);\n    }\n    setSelectedText($cell, control, columnIndex);\n\n    // only add the handler to non-disabled controls\n    if (!$cell.hasClass(DISABLED_CLASS)) {\n        $cell.click(function selectClick(ev) {\n            var $cell = $(this);\n            // don't re-select or fire event if already selected\n            if (!$cell.hasClass(SELECTED_CLASS)) {\n                // only one can be selected - remove selected on all others, add it here\n                var $otherSelected = $cell\n                    .parent()\n                    .children(\".\" + SELECTED_CLASS)\n                    .removeClass(SELECTED_CLASS);\n                $otherSelected.each(function() {\n                    setSelectedText($(this), control, columnIndex);\n                });\n\n                $cell.addClass(SELECTED_CLASS);\n                setSelectedText($cell, control, columnIndex);\n\n                // fire the event from the table itself, passing the id and index of selected\n                var eventData = {},\n                    key = $cell.parent().attr(\"id\"),\n                    val = $cell.data(COLUMN_INDEX_DATA_KEY);\n                eventData[key] = val;\n                $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n            }\n        });\n    }\n    return $cell;\n}\n\n/** build a cell for a row that allows multiple selections */\nfunction buildMultiSelectCell(control, columnIndex) {\n    var $cell = buildControlCell(control, columnIndex);\n    // multiple selection - selected is an array\n    if (control.selected && control.selected.indexOf(columnIndex) !== -1) {\n        $cell.addClass(SELECTED_CLASS);\n    }\n    setSelectedText($cell, control, columnIndex);\n\n    // only add the handler to non-disabled controls\n    if (!$cell.hasClass(DISABLED_CLASS)) {\n        $cell.click(function multiselectClick(ev) {\n            var $cell = $(this);\n            // can be more than one selected - toggle selected on this cell\n            $cell.toggleClass(SELECTED_CLASS);\n            setSelectedText($cell, control, columnIndex);\n            var selectedColumnIndeces = $cell\n                .parent()\n                .find(\".\" + SELECTED_CLASS)\n                .map(function(i, e) {\n                    return $(e).data(COLUMN_INDEX_DATA_KEY);\n                });\n            // fire the event from the table itself, passing the id and index of selected\n            var eventData = {},\n                key = $cell.parent().attr(\"id\"),\n                val = jQuery.makeArray(selectedColumnIndeces);\n            eventData[key] = val;\n            $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n        });\n    }\n    return $cell;\n}\n\n/** iterate over columns in peek and create a control for each */\nfunction buildControlCells(count, control) {\n    var $cells = [];\n    // build a control for each column - using a build fn based on control\n    for (var columnIndex = 0; columnIndex < count; columnIndex += 1) {\n        $cells.push(\n            control.multiselect\n                ? buildMultiSelectCell(control, columnIndex)\n                : buildSingleSelectCell(control, columnIndex)\n        );\n    }\n    return $cells;\n}\n\n/** build a row of controls for the peek */\nfunction buildControlRow(cellCount, control, includePrompts) {\n    var $controlRow = $(\"<tr/>\")\n        .attr(\"id\", control.id)\n        .addClass(ROW_CLASS);\n    if (includePrompts) {\n        var $promptCell = $(\"<td/>\")\n            .addClass(PROMPT_CLASS)\n            .text(control.label + \":\");\n        $controlRow.append($promptCell);\n    }\n    $controlRow.append(buildControlCells(cellCount, control));\n    return $controlRow;\n}\n\n// ........................................................................\n/** add to the peek, using options for configuration, return the peek */\nfunction peekColumnSelector(options) {\n    options = jQuery.extend(true, {}, defaults, options);\n\n    var $peek = $(this).addClass(PEEKCONTROL_CLASS),\n        $peektable = $peek.find(\"table\"),\n        // get the size of the tables - width and height, number of comment rows\n        columnCount = $peektable.find(\"th\").length,\n        rowCount = $peektable.find(\"tr\").length,\n        // get the rows containing text starting with the comment char (also make them grey)\n        $commentRows = $peektable.find(\"td[colspan]\").map(function(e, i) {\n            var $this = $(this);\n            if (\n                $this.text() &&\n                $this.text().match(new RegExp(\"^\" + options.commentChar))\n            ) {\n                return $(this)\n                    .css(\"color\", \"grey\")\n                    .parent()\n                    .get(0);\n            }\n            return null;\n        });\n\n    // should comment rows in the peek be hidden?\n    if (options.hideCommentRows) {\n        $commentRows.hide();\n        rowCount -= $commentRows.length;\n    }\n    //console.debug( 'rowCount:', rowCount, 'columnCount:', columnCount, '$commentRows:', $commentRows );\n\n    // should a first column of control prompts be added?\n    if (options.includePrompts) {\n        var $topLeft = $(\"<th/>\")\n            .addClass(\"top-left\")\n            .text(options.topLeftContent)\n            .attr(\"rowspan\", rowCount);\n        $peektable\n            .find(\"tr\")\n            .first()\n            .prepend($topLeft);\n    }\n\n    // save either the options column name or the parsed text of each column header in html5 data attr and text\n    var $headers = $peektable.find(\"th:not(.top-left)\").each(function(i, e) {\n        var $this = $(this),\n            // can be '1.name' or '1'\n            text = $this.text().replace(/^\\d+\\.*/, \"\"),\n            name = options.columnNames[i] || text;\n        $this\n            .attr(\"data-\" + COLUMN_NAME_DATA_KEY, name)\n            .text(i + 1 + (name ? \".\" + name : \"\"));\n    });\n\n    // allow renaming of columns when the header is clicked\n    if (options.renameColumns) {\n        $headers\n            .addClass(RENAMABLE_HEADER_CLASS)\n            .click(function renameColumn() {\n                // prompt for new name\n                var $this = $(this),\n                    index = $this.index() + (options.includePrompts ? 0 : 1),\n                    prevName = $this.data(COLUMN_NAME_DATA_KEY),\n                    newColumnName = prompt(\"New column name:\", prevName);\n                if (newColumnName !== null && newColumnName !== prevName) {\n                    // set the new text and data\n                    $this\n                        .text(\n                            index + (newColumnName ? \".\" + newColumnName : \"\")\n                        )\n                        .data(COLUMN_NAME_DATA_KEY, newColumnName)\n                        .attr(\"data-\", COLUMN_NAME_DATA_KEY, newColumnName);\n                    // fire event for new column names\n                    var columnNames = jQuery.makeArray(\n                        $this\n                            .parent()\n                            .children(\"th:not(.top-left)\")\n                            .map(function() {\n                                return $(this).data(COLUMN_NAME_DATA_KEY);\n                            })\n                    );\n                    $this.parents(\".peek\").trigger(RENAME_EVENT, columnNames);\n                }\n            });\n    }\n\n    // build a row for each control\n    options.controls.forEach(function(control, i) {\n        validateControl(control);\n        var $controlRow = buildControlRow(\n            columnCount,\n            control,\n            options.includePrompts\n        );\n        $peektable.find(\"tbody\").append($controlRow);\n    });\n    return this;\n}\n\n// ........................................................................\n// as jq plugin\njQuery.fn.extend({\n    peekColumnSelector: function $peekColumnSelector(options) {\n        return this.map(function() {\n            return peekColumnSelector.call(this, options);\n        });\n    }\n});\n"]}