{"version":3,"sources":["ui/popupmenu.js"],"names":["make_popupmenu","button_element","initial_options","$","data","element_menu_exists","bind","e","setTimeout","attr","options","_","size","appendTo","menu_element","each","remove","v","action","append","url","html","k","click","addClass","wrapper","x","Math","top","pageY","width","left","document","scrollLeft","window","close_popup","el","unbind","frame_id","frames","length","make_popup_menus","link_dom","parent","target","find","menu","this","link","confirmtext","getAttribute","href","text","event","preventDefault","confirm","open","box"],"mappings":"sEAaA,SAASA,EAAeC,EAAgBC,GAVxC,IAAIC,EAAJF,EAAAG,KAAA,gBAeIH,EAAeG,KAAK,eAAgBF,GAXxCG,GAkBIJ,EAAeK,KAAK,mBAAoB,SAASC,GA4E7C,OAxFRJ,EAAA,oBAAwBF,SAiBhBO,WAAW,WAZfP,IAAAA,EAAoBE,EAeR,iCAbZF,EAAAQ,KAAA,MACIJ,gBAEHK,EAAAT,EAAAG,KAAA,gBAeWO,EAAEC,KAAKF,IAAY,GAb/BT,EAAAA,wBAAoBY,SAAoBC,GAEpCX,EAAEY,KAAAL,EAAA,SAAoBM,EAAtBC,GAeQ,GAAIA,EAAG,CAZfT,IAAWU,EAAAD,EAAWC,QAAAD,EAClBH,EAAAK,OACIL,EAAAA,aACAK,OAIAT,EAAUT,OACHS,KAAP,OAAsBO,EAAAG,KACpBC,KAAAC,GACLC,MAAAL,UAIOJ,EAAII,OACJJ,EAAAA,aAQGU,SAAA,QACHV,OAAAA,EAAaK,oBACTE,KACKG,OAKjB,IAAIC,EAAUtB,EAMd,uFAQAuB,OAAIC,GAVCd,SAAS,QAaVe,EAAAA,EAAAA,MAAOC,EADCC,QAAA,EAERC,EAAAA,KAAAA,IAFQL,EAIbvB,EAnDH6B,UAAAC,aAyCY9B,EAAE+B,QAAQJ,QAYtBtB,EAAAA,GAAWsB,QACP,GAEAJ,EAAAC,KAAIQ,IAAAA,EAAAA,EAAAA,UAAcF,aAASG,GAEnBjC,EAAAA,KACAiC,IAAAA,EAAAA,MACHL,KAHDL,KAKJS,IAEA3B,WAAA,WAGI2B,IAAAA,EAAAA,SAAAC,GACHjC,EAAAiC,GAAA9B,KAAA,oBAAA,WAfLH,EAAA,oBAAAa,SAMYoB,EAAGC,OAAO,wBAc7BF,EAAAhC,EAAA+B,OAAAF,WAVWG,EAAYhC,EAAE+B,OAAON,IAAII,WAYrC,IAAA,IAAAM,EAAAJ,OAAAN,IAAAW,OAAAC,OAAAF,KARgBH,EADYhC,EAAE+B,OAAON,IAAIW,OAAOD,GAAUN,YAG/C,KAEI,yDAlGX7B,uDAAAA,mBA+KAH,eAAgBA,EAChByC,iBAlDY,SAAIC,GAGJC,EAAAA,GAAIC,SAZhBzC,EAAEwC,GAcUE,KAAA,kBACA9B,KAAA,WACIL,IAAAA,KACHoC,EAAM3C,EAAA4C,MAGC7B,EAAAA,KAAAA,KAAAA,KAAQ,WACJ,IAAA8B,EAAA7C,EAAA4C,MACAL,EAAAM,EAAKC,IAAAA,GACDA,EAAAP,EAAAQ,aAAA,WACAC,EAAAT,EAAAQ,aAAA,QACAN,EAAAF,EAAIE,aAAQ,UAMXlC,EAAAsC,EAAAI,QAHAD,GAIJ/B,IAVD+B,EAWIE,OAAAA,SAAMC,GAEb,IAAAL,GAAAM,QAAAN,GAAA,CA5Bb,GAAAL,EAiCU,OADVV,OAAAsB,KAAAL,EAAAP,IAC+BE,EAG/BE,EAAAzB,aAGI8B,EAAAC,mBAjBoB,OA7BhC,IAAAG,EAAAtD,EAAAwC,GAAAE,KAAA,IAAAC,EAAArC,KAAA,cA4CQgD,EAAIZ,KAAK,KAaNvC,KAAA,QAAA,SAAAC,GAEXkC,OADAzC,EAAAA,mBACAyC,IATQzC,EAAeyD,EAAK/C,GACpB+C,EAAIjC,SAAS,SACbsB,EAAK9B","file":"../../scripts/ui/popupmenu.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n\n// ============================================================================\n// TODO: unify popup menus and/or eliminate this\n/**\n * Sets up popupmenu rendering and binds options functions to the appropriate links.\n * initial_options is a dict with text describing the option pointing to either (a) a\n * function to perform; or (b) another dict with two required keys, 'url' and 'action' (the\n * function to perform. (b) is useful for exposing the underlying URL of the option.\n */\nfunction make_popupmenu(button_element, initial_options) {\n    /*  Use the $.data feature to store options with the link element.\n        This allows options to be changed at a later time\n    */\n    var element_menu_exists = button_element.data(\"menu_options\");\n    button_element.data(\"menu_options\", initial_options);\n\n    // If element already has menu, nothing else to do since HTML and actions are already set.\n    if (element_menu_exists) {\n        return;\n    }\n\n    button_element.bind(\"click.show_popup\", function(e) {\n        // Close existing visible menus\n        $(\".popmenu-wrapper\").remove();\n\n        // Need setTimeouts so clicks don't interfere with each other\n        setTimeout(function() {\n            // Dynamically generate the wrapper holding all the selectable options of the menu.\n            var menu_element = $(\n                \"<ul class='dropdown-menu' id='\" +\n                    button_element.attr(\"id\") +\n                    \"-menu'></ul>\"\n            );\n            var options = button_element.data(\"menu_options\");\n            if (_.size(options) <= 0) {\n                $(\"<li>No Options.</li>\").appendTo(menu_element);\n            }\n            $.each(options, function(k, v) {\n                if (v) {\n                    // Action can be either an anonymous function and a mapped dict.\n                    var action = v.action || v;\n                    menu_element.append(\n                        $(\"<li></li>\").append(\n                            $(\"<a>\")\n                                .attr(\"href\", v.url)\n                                .html(k)\n                                .click(action)\n                        )\n                    );\n                } else {\n                    menu_element.append(\n                        $(\"<li></li>\")\n                            .addClass(\"head\")\n                            .append($(\"<a href='#'></a>\").html(k))\n                    );\n                }\n            });\n            var wrapper = $(\n                \"<div class='popmenu-wrapper' style='position: absolute;left: 0; top: -1000;'></div>\"\n            )\n                .append(menu_element)\n                .appendTo(\"body\");\n\n            var x = e.pageX - wrapper.width() / 2;\n            x = Math.min(\n                x,\n                $(document).scrollLeft() +\n                    $(window).width() -\n                    $(wrapper).width() -\n                    5\n            );\n            x = Math.max(x, $(document).scrollLeft() + 5);\n\n            wrapper.css({\n                top: e.pageY,\n                left: x\n            });\n        }, 10);\n\n        setTimeout(function() {\n            // Bind click event to current window and all frames to remove any visible menus\n            // Bind to document object instead of window object for IE compat\n            var close_popup = function(el) {\n                $(el).bind(\"click.close_popup\", function() {\n                    $(\".popmenu-wrapper\").remove();\n                    el.unbind(\"click.close_popup\");\n                });\n            };\n            close_popup($(window.document)); // Current frame\n            close_popup($(window.top.document)); // Parent frame\n            for (var frame_id = window.top.frames.length; frame_id--; ) {\n                // Sibling frames\n                var frame = $(window.top.frames[frame_id].document);\n                close_popup(frame);\n            }\n        }, 50);\n\n        return false;\n    });\n}\n\n/**\n *  Convert two seperate (often adjacent) divs into galaxy popupmenu\n *  - div 1 contains a number of anchors which become the menu options\n *  - div 1 should have a 'popupmenu' attribute\n *  - this popupmenu attribute contains the id of div 2\n *  - div 2 becomes the 'face' of the popupmenu\n *\n *  NOTE: make_popup_menus finds and operates on all divs with a popupmenu attr (no need to point it at something)\n *          but (since that selector searches the dom on the page), you can send a parent in\n *  NOTE: make_popup_menus, and make_popupmenu are horrible names\n */\nfunction make_popup_menus(parent) {\n    // find all popupmenu menu divs (divs that contains anchors to be converted to menu options)\n    //  either in the parent or the document if no parent passed\n    parent = parent || document;\n    $(parent)\n        .find(\"div[popupmenu]\")\n        .each(function() {\n            var options = {};\n            var menu = $(this);\n\n            // find each anchor in the menu, convert them into an options map: { a.text : click_function }\n            menu.find(\"a\").each(function() {\n                var link = $(this);\n                var link_dom = link.get(0);\n                var confirmtext = link_dom.getAttribute(\"confirm\");\n                var href = link_dom.getAttribute(\"href\");\n                var target = link_dom.getAttribute(\"target\");\n\n                // no href - no function (gen. a label)\n                if (!href) {\n                    options[link.text()] = null;\n                } else {\n                    options[link.text()] = {\n                        url: href,\n                        action: function(event) {\n                            // if theres confirm text, send the dialog\n                            if (!confirmtext || confirm(confirmtext)) {\n                                // link.click() doesn't use target for some reason,\n                                // so manually do it here.\n                                if (target) {\n                                    window.open(href, target);\n                                    return false;\n                                } else {\n                                    // For all other links, do the default action.\n                                    link.click();\n                                }\n                            } else {\n                                event.preventDefault();\n                            }\n                        }\n                    };\n                }\n            });\n            // locate the element with the id corresponding to the menu's popupmenu attr\n            var box = $(parent).find(\"#\" + menu.attr(\"popupmenu\"));\n\n            // For menus with clickable link text, make clicking on the link go through instead\n            // of activating the popup menu\n            box.find(\"a\").bind(\"click\", function(e) {\n                e.stopPropagation(); // Stop bubbling so clicking on the link goes through\n                return true;\n            });\n\n            // attach the click events and menu box building to the box element\n            make_popupmenu(box, options);\n            box.addClass(\"popup\");\n            menu.remove();\n        });\n}\n\n// ============================================================================\nexport default {\n    make_popupmenu: make_popupmenu,\n    make_popup_menus: make_popup_menus\n};\n"]}