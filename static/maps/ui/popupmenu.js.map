{"version":3,"sources":["ui/popupmenu.js"],"names":["define","jQuery","make_popupmenu","button_element","initial_options","element_menu_exists","data","bind","e","$","remove","setTimeout","menu_element","attr","options","_","size","appendTo","each","k","v","action","append","url","html","click","addClass","wrapper","x","pageX","width","Math","min","document","scrollLeft","window","max","css","top","pageY","left","close_popup","el","unbind","frame_id","frames","length","make_popup_menus","parent","find","menu","this","link","link_dom","get","confirmtext","getAttribute","href","target","text","event","confirm","open","preventDefault","box","stopPropagation"],"mappings":"AAAAA,QAAS,UAAY,SAAUC,GAC/B,YAYA,SAASC,GAAeC,EAAgBC,GAIpC,GAAIC,GAAuBF,EAAeG,KAAK,eAC/CH,GAAeG,KAAK,eAAgBF,GAGhCC,GAEJF,EAAeI,KAAK,mBAAoB,SAASC,GAmD7C,MAjDAC,GAAE,oBAAoBC,SAGtBC,WAAY,WAER,GAAIC,GAAeH,EAAG,iCAAmCN,EAAeU,KAAK,MAAQ,gBACjFC,EAAUX,EAAeG,KAAK,eAC9BS,GAAEC,KAAKF,IAAY,GACnBL,EAAE,wBAAwBQ,SAASL,GAEvCH,EAAES,KAAMJ,EAAS,SAAUK,EAAGC,GAC1B,GAAIA,EAAG,CAEH,GAAIC,GAASD,EAAEC,QAAUD,CACzBR,GAAaU,OAAQb,EAAE,aAAaa,OAAQb,EAAE,OAAOI,KAAK,OAAQO,EAAEG,KAAKC,KAAKL,GAAGM,MAAMJ,SAEvFT,GAAaU,OAAQb,EAAE,aAAaiB,SAAU,QAASJ,OAAQb,EAAE,oBAAoBe,KAAKL,MAGlG,IAAIQ,GAAUlB,EAAG,uFACZa,OAAQV,GAAeK,SAAU,QAElCW,EAAIpB,EAAEqB,MAAQF,EAAQG,QAAU,CACpCF,GAAIG,KAAKC,IAAKJ,EAAGnB,EAAEwB,UAAUC,aAAezB,EAAE0B,QAAQL,QAAUrB,EAAEkB,GAASG,QAAU,GACrFF,EAAIG,KAAKK,IAAKR,EAAGnB,EAAEwB,UAAUC,aAAe,GAE5CP,EAAQU,KACLC,IAAK9B,EAAE+B,MACPC,KAAMZ,KAEV,IAEHjB,WAAY,WAGR,GAAI8B,GAAc,SAASC,GACvBjC,EAAEiC,GAAInC,KAAK,oBAAqB,WAC5BE,EAAE,oBAAoBC,SACtBgC,EAAGC,OAAO,uBAGlBF,GAAahC,EAAE0B,OAAOF,WACtBQ,EAAahC,EAAE0B,OAAOG,IAAIL,UAC1B,KAAK,GAAIW,GAAWT,OAAOG,IAAIO,OAAOC,OAAQF,KAAa,CAEvDH,EADYhC,EAAE0B,OAAOG,IAAIO,OAAOD,GAAUX,aAG/C,KAEI,IAgBf,QAASc,GAAkBC,GAGvBA,EAASA,GAAUf,SACnBxB,EAAGuC,GAASC,KAAM,kBAAmB/B,KAAM,WACvC,GAAIJ,MACAoC,EAAOzC,EAAE0C,KAGbD,GAAKD,KAAM,KAAM/B,KAAM,WACnB,GAAIkC,GAAO3C,EAAE0C,MACTE,EAAWD,EAAKE,IAAI,GACpBC,EAAcF,EAASG,aAAc,WACrCC,EAAOJ,EAASG,aAAc,QAC9BE,EAASL,EAASG,aAAc,SAOhC1C,GAASsC,EAAKO,QAJbF,GAKGlC,IAAKkC,EACLpC,OAAQ,SAAUuC,GAGd,IAAML,GAAeM,QAASN,GAAgB,CAG1C,GAAIG,EAEA,MADAvB,QAAO2B,KAAKL,EAAMC,IACX,CAIPN,GAAK3B,YAGLmC,GAAMG,mBApBG,MA4BjC,IAAIC,GAAMvD,EAAGuC,GAASC,KAAM,IAAMC,EAAKrC,KAAM,aAI7CmD,GAAIf,KAAK,KAAK1C,KAAK,QAAS,SAASC,GAEjC,MADAA,GAAEyD,mBACK,IAIX/D,EAAe8D,EAAKlD,GACpBkD,EAAItC,SAAS,SACbwB,EAAKxC,WAjJb,GAAID,GAAIR,CAsJJ,QACIC,eAAiBA,EACjB6C,iBAAmBA","file":"../../scripts/ui/popupmenu.js","sourcesContent":["define([ 'jquery' ], function( jQuery ){\n'use_strict';\n\nvar $ = jQuery;\n\n// ============================================================================\n// TODO: unify popup menus and/or eliminate this\n/**\n * Sets up popupmenu rendering and binds options functions to the appropriate links.\n * initial_options is a dict with text describing the option pointing to either (a) a\n * function to perform; or (b) another dict with two required keys, 'url' and 'action' (the\n * function to perform. (b) is useful for exposing the underlying URL of the option.\n */\nfunction make_popupmenu(button_element, initial_options) {\n    /*  Use the $.data feature to store options with the link element.\n        This allows options to be changed at a later time\n    */\n    var element_menu_exists = (button_element.data(\"menu_options\"));\n    button_element.data(\"menu_options\", initial_options);\n\n    // If element already has menu, nothing else to do since HTML and actions are already set.\n    if (element_menu_exists) { return; }\n\n    button_element.bind(\"click.show_popup\", function(e) {\n        // Close existing visible menus\n        $(\".popmenu-wrapper\").remove();\n\n        // Need setTimeouts so clicks don't interfere with each other\n        setTimeout( function() {\n            // Dynamically generate the wrapper holding all the selectable options of the menu.\n            var menu_element = $( \"<ul class='dropdown-menu' id='\" + button_element.attr('id') + \"-menu'></ul>\" );\n            var options = button_element.data(\"menu_options\");\n            if (_.size(options) <= 0) {\n                $(\"<li>No Options.</li>\").appendTo(menu_element);\n            }\n            $.each( options, function( k, v ) {\n                if (v) {\n                    // Action can be either an anonymous function and a mapped dict.\n                    var action = v.action || v;\n                    menu_element.append( $(\"<li></li>\").append( $(\"<a>\").attr(\"href\", v.url).html(k).click(action) ) );\n                } else {\n                    menu_element.append( $(\"<li></li>\").addClass( \"head\" ).append( $(\"<a href='#'></a>\").html(k) ) );\n                }\n            });\n            var wrapper = $( \"<div class='popmenu-wrapper' style='position: absolute;left: 0; top: -1000;'></div>\" )\n                .append( menu_element ).appendTo( \"body\" );\n\n            var x = e.pageX - wrapper.width() / 2 ;\n            x = Math.min( x, $(document).scrollLeft() + $(window).width() - $(wrapper).width() - 5 );\n            x = Math.max( x, $(document).scrollLeft() + 5 );\n\n            wrapper.css({\n               top: e.pageY,\n               left: x\n            });\n        }, 10);\n\n        setTimeout( function() {\n            // Bind click event to current window and all frames to remove any visible menus\n            // Bind to document object instead of window object for IE compat\n            var close_popup = function(el) {\n                $(el).bind(\"click.close_popup\", function() {\n                    $(\".popmenu-wrapper\").remove();\n                    el.unbind(\"click.close_popup\");\n                });\n            };\n            close_popup( $(window.document) ); // Current frame\n            close_popup( $(window.top.document) ); // Parent frame\n            for (var frame_id = window.top.frames.length; frame_id--;) { // Sibling frames\n                var frame = $(window.top.frames[frame_id].document);\n                close_popup(frame);\n            }\n        }, 50);\n\n        return false;\n    });\n\n}\n\n/**\n *  Convert two seperate (often adjacent) divs into galaxy popupmenu\n *  - div 1 contains a number of anchors which become the menu options\n *  - div 1 should have a 'popupmenu' attribute\n *  - this popupmenu attribute contains the id of div 2\n *  - div 2 becomes the 'face' of the popupmenu\n *\n *  NOTE: make_popup_menus finds and operates on all divs with a popupmenu attr (no need to point it at something)\n *          but (since that selector searches the dom on the page), you can send a parent in\n *  NOTE: make_popup_menus, and make_popupmenu are horrible names\n */\nfunction make_popup_menus( parent ) {\n    // find all popupmenu menu divs (divs that contains anchors to be converted to menu options)\n    //  either in the parent or the document if no parent passed\n    parent = parent || document;\n    $( parent ).find( \"div[popupmenu]\" ).each( function() {\n        var options = {};\n        var menu = $(this);\n\n        // find each anchor in the menu, convert them into an options map: { a.text : click_function }\n        menu.find( \"a\" ).each( function() {\n            var link = $(this),\n                link_dom = link.get(0),\n                confirmtext = link_dom.getAttribute( \"confirm\" ),\n                href = link_dom.getAttribute( \"href\" ),\n                target = link_dom.getAttribute( \"target\" );\n\n            // no href - no function (gen. a label)\n            if (!href) {\n                options[ link.text() ] = null;\n\n            } else {\n                options[ link.text() ] = {\n                    url: href,\n                    action: function( event ) {\n\n                        // if theres confirm text, send the dialog\n                        if ( !confirmtext || confirm( confirmtext ) ) {\n                            // link.click() doesn't use target for some reason,\n                            // so manually do it here.\n                            if (target) {\n                                window.open(href, target);\n                                return false;\n                            }\n                            // For all other links, do the default action.\n                            else {\n                                link.click();\n                            }\n                        } else {\n                                event.preventDefault();\n                        }\n\n                    }\n                };\n            }\n        });\n        // locate the element with the id corresponding to the menu's popupmenu attr\n        var box = $( parent ).find( \"#\" + menu.attr( 'popupmenu' ) );\n\n        // For menus with clickable link text, make clicking on the link go through instead\n        // of activating the popup menu\n        box.find(\"a\").bind(\"click\", function(e) {\n            e.stopPropagation(); // Stop bubbling so clicking on the link goes through\n            return true;\n        });\n\n        // attach the click events and menu box building to the box element\n        make_popupmenu(box, options);\n        box.addClass(\"popup\");\n        menu.remove();\n    });\n}\n\n// ============================================================================\n    return {\n        make_popupmenu : make_popupmenu,\n        make_popup_menus : make_popup_menus\n    };\n});\n"]}