{"version":3,"sources":["ui/filter-control.js"],"names":["factory","define","amd","$","dropDownSelect","options","selected","_","isEmpty","$select","length","find","$this","addClass","attr","newSelection","selectThis","option","join","click","event","this","parents","text","trigger","FilterControl","element","init","keys","filters","$keySelect","currFilter","filterControl","$element","render","_triggerChange","empty","append","_renderOpSelect","_renderValueInput","prototype","_renderKeySelect","$valueSelect","filter","key","on","selection","$value","ops","$opSelect","value","jQuery","extend","map","values","data","fn","apply","val","op","hasClass","nonOptionsArgs","makeArray","arguments","slice","DATA_KEY","type"],"mappings":"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","file":"../../scripts/ui/filter-control.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function($) {\n    //==============================================================================\n    /**\n\t *  Template function that produces a bootstrap dropdown to replace the\n\t *  vanilla HTML select input. Pass in an array of options and an initial selection:\n\t *  $( '.my-div' ).append( dropDownSelect( [ 'option1', 'option2' ], 'option2' );\n\t *\n\t *  When the user changes the selected option a 'change.dropdown-select' event will\n\t *  fire with both the jq event and the new selection text as arguments.\n\t *\n\t *  Get the currently selected choice using:\n\t *  var userChoice = $( '.my-div .dropdown-select .dropdown-select-selected' ).text();\n\t *\n\t */\n    function dropDownSelect(options, selected) {\n        // replacement for vanilla select element using bootstrap dropdowns instead\n        selected = selected || (!_.isEmpty(options) ? options[0] : \"\");\n        var $select = $(\n            [\n                '<div class=\"dropdown-select btn-group\">',\n                '<button type=\"button\" class=\"btn btn-default\">',\n                '<span class=\"dropdown-select-selected\">' +\n                    selected +\n                    \"</span>\",\n                \"</button>\",\n                \"</div>\"\n            ].join(\"\\n\")\n        );\n\n        // if there's only one option, do not style/create as buttons, dropdown - use simple span\n        // otherwise, a dropdown displaying the current selection\n        if (options && options.length > 1) {\n            $select\n                .find(\"button\")\n                .addClass(\"dropdown-toggle\")\n                .attr(\"data-toggle\", \"dropdown\")\n                .append(' <span class=\"caret\"></span>');\n            $select.append(\n                [\n                    '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    _.map(options, function(option) {\n                        return [\n                            '<li><a href=\"javascript:void(0)\">',\n                            option,\n                            \"</a></li>\"\n                        ].join(\"\");\n                    }).join(\"\\n\"),\n                    \"</ul>\"\n                ].join(\"\\n\")\n            );\n        }\n\n        // trigger 'change.dropdown-select' when a new selection is made using the dropdown\n        function selectThis(event) {\n            var $this = $(this),\n                $select = $this.parents(\".dropdown-select\"),\n                newSelection = $this.text();\n            $select.find(\".dropdown-select-selected\").text(newSelection);\n            $select.trigger(\"change.dropdown-select\", newSelection);\n        }\n\n        $select.find(\"a\").click(selectThis);\n        return $select;\n    }\n\n    //==============================================================================\n    /**\n     *  Creates a three part bootstrap button group (key, op, value) meant to\n     *  allow the user control of filters (e.g. { key: 'name', op: 'contains', value: 'my_history' })\n     *\n     *  Each field uses a dropDownSelect (from ui.js) to allow selection\n     *  (with the 'value' field appearing as an input when set to do so).\n     *\n     *  Any change or update in any of the fields will trigger a 'change.filter-control'\n     *  event which will be passed an object containing those fields (as the example above).\n     *\n     *  Pass in an array of possible filter objects to control what the user can select.\n     *  Each filter object should have:\n     *      key : generally the attribute name on which to filter something\n     *      ops : an array of 1 or more filter operations (e.g. [ 'is', '<', 'contains', '!=' ])\n     *      values (optional) : an array of possible values for the filter (e.g. [ 'true', 'false' ])\n     *  @example:\n     *  $( '.my-div' ).filterControl({\n     *      filters : [\n     *          { key: 'name',    ops: [ 'is exactly', 'contains' ] }\n     *          { key: 'deleted', ops: [ 'is' ], values: [ 'true', 'false' ] }\n     *      ]\n     *  });\n     *  // after initialization, you can prog. get the current value using:\n     *  $( '.my-div' ).filterControl( 'val' )\n     *\n     */\n    function FilterControl(element, options) {\n        return this.init(element, options);\n    }\n    /** the data key that this object will be stored under in the DOM element */\n    FilterControl.prototype.DATA_KEY = \"filter-control\";\n\n    /** parses options, sets up instance vars, and does initial render */\n    FilterControl.prototype.init = function _init(element, options) {\n        options = options || { filters: [] };\n        this.$element = $(element).addClass(\"filter-control btn-group\");\n        this.options = jQuery.extend(true, {}, this.defaults, options);\n\n        this.currFilter = this.options.filters[0];\n        return this.render();\n    };\n\n    /** render (or re-render) the controls on the element */\n    FilterControl.prototype.render = function _render() {\n        this.$element\n            .empty()\n            .append([\n                this._renderKeySelect(),\n                this._renderOpSelect(),\n                this._renderValueInput()\n            ]);\n        return this;\n    };\n\n    /** render the key dropDownSelect, bind a change event to it, and return it */\n    FilterControl.prototype._renderKeySelect = function __renderKeySelect() {\n        var filterControl = this;\n        var keys = this.options.filters.map(function(filter) {\n            return filter.key;\n        });\n        this.$keySelect = dropDownSelect(keys, this.currFilter.key)\n            .addClass(\"filter-control-key\")\n            .on(\"change.dropdown-select\", function(event, selection) {\n                filterControl.currFilter = _.findWhere(\n                    filterControl.options.filters,\n                    { key: selection }\n                );\n                // when the filter/key changes, re-render the control entirely\n                filterControl.render()._triggerChange();\n            });\n        return this.$keySelect;\n    };\n\n    /** render the op dropDownSelect, bind a change event to it, and return it */\n    FilterControl.prototype._renderOpSelect = function __renderOpSelect() {\n        var filterControl = this,\n            ops = this.currFilter.ops;\n        //TODO: search for currOp in avail. ops: use that for selected if there; otherwise: first op\n        this.$opSelect = dropDownSelect(ops, ops[0])\n            .addClass(\"filter-control-op\")\n            .on(\"change.dropdown-select\", function(event, selection) {\n                filterControl._triggerChange();\n            });\n        return this.$opSelect;\n    };\n\n    /** render the value control, bind a change event to it, and return it */\n    FilterControl.prototype._renderValueInput = function __renderValueInput() {\n        var filterControl = this;\n        // if a values attribute is prov. on the filter - make this a dropdown; otherwise, use an input\n        if (this.currFilter.values) {\n            this.$valueSelect = dropDownSelect(\n                this.currFilter.values,\n                this.currFilter.values[0]\n            ).on(\"change.dropdown-select\", function(event, selection) {\n                filterControl._triggerChange();\n            });\n        } else {\n            //TODO: allow setting a value type (mainly for which html5 input to use: range, number, etc.)\n            this.$valueSelect = $(\"<input/>\")\n                .addClass(\"form-control\")\n                .on(\"change\", function(event, value) {\n                    filterControl._triggerChange();\n                });\n        }\n        this.$valueSelect.addClass(\"filter-control-value\");\n        return this.$valueSelect;\n    };\n\n    /** return the current state/setting for the filter as a three key object: key, op, value */\n    FilterControl.prototype.val = function _val() {\n        var key = this.$element\n                .find(\".filter-control-key .dropdown-select-selected\")\n                .text(),\n            op = this.$element\n                .find(\".filter-control-op .dropdown-select-selected\")\n                .text(),\n            // handle either a dropdown or plain input\n            $value = this.$element.find(\".filter-control-value\"),\n            value = $value.hasClass(\"dropdown-select\")\n                ? $value.find(\".dropdown-select-selected\").text()\n                : $value.val();\n        return { key: key, op: op, value: value };\n    };\n\n    // single point of change for change event\n    FilterControl.prototype._triggerChange = function __triggerChange() {\n        this.$element.trigger(\"change.filter-control\", this.val());\n    };\n\n    // as jq plugin\n    jQuery.fn.extend({\n        filterControl: function $filterControl(options) {\n            var nonOptionsArgs = jQuery.makeArray(arguments).slice(1);\n            return this.map(function() {\n                var $this = $(this),\n                    data = $this.data(FilterControl.prototype.DATA_KEY);\n\n                if (jQuery.type(options) === \"object\") {\n                    data = new FilterControl($this, options);\n                    $this.data(FilterControl.prototype.DATA_KEY, data);\n                }\n                if (data && jQuery.type(options) === \"string\") {\n                    var fn = data[options];\n                    if (jQuery.type(fn) === \"function\") {\n                        return fn.apply(data, nonOptionsArgs);\n                    }\n                }\n                return this;\n            });\n        }\n    });\n});\n"]}