{"version":3,"sources":["ui/filter-control.js"],"names":["dropDownSelect","options","selected","_","isEmpty","$select","$","join","length","find","append","map","option","selectThis","newSelection","trigger","click","event","$this","this","parents","text","FilterControl","element","init","render","prototype","DATA_KEY","filters","$element","addClass","_jquery2","default","extend","defaults","currFilter","filterControl","keys","_renderKeySelect","_renderOpSelect","_renderValueInput","$opSelect","filter","$keySelect","key","selection","findWhere","_triggerChange","$valueSelect","ops","value","values","on","data","val","op","$value","hasClass","fn","nonOptionsArgs","makeArray","arguments","slice","type","apply"],"mappings":"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","file":"../../scripts/ui/filter-control.js","sourcesContent":["import jQuery from \"jquery\";\n(\"use_strict\");\n\nvar $ = jQuery;\n//==============================================================================\n/**\n\t *  Template function that produces a bootstrap dropdown to replace the\n\t *  vanilla HTML select input. Pass in an array of options and an initial selection:\n\t *  $( '.my-div' ).append( dropDownSelect( [ 'option1', 'option2' ], 'option2' );\n\t *\n\t *  When the user changes the selected option a 'change.dropdown-select' event will\n\t *  fire with both the jq event and the new selection text as arguments.\n\t *\n\t *  Get the currently selected choice using:\n\t *  var userChoice = $( '.my-div .dropdown-select .dropdown-select-selected' ).text();\n\t *\n\t */\nfunction dropDownSelect(options, selected) {\n    // replacement for vanilla select element using bootstrap dropdowns instead\n    selected = selected || (!_.isEmpty(options) ? options[0] : \"\");\n    var $select = $(\n        [\n            '<div class=\"dropdown-select btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default\">',\n            '<span class=\"dropdown-select-selected\">' + selected + \"</span>\",\n            \"</button>\",\n            \"</div>\"\n        ].join(\"\\n\")\n    );\n\n    // if there's only one option, do not style/create as buttons, dropdown - use simple span\n    // otherwise, a dropdown displaying the current selection\n    if (options && options.length > 1) {\n        $select\n            .find(\"button\")\n            .addClass(\"dropdown-toggle\")\n            .attr(\"data-toggle\", \"dropdown\")\n            .append(' <span class=\"caret\"></span>');\n        $select.append(\n            [\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                _.map(options, function(option) {\n                    return [\n                        '<li><a href=\"javascript:void(0)\">',\n                        option,\n                        \"</a></li>\"\n                    ].join(\"\");\n                }).join(\"\\n\"),\n                \"</ul>\"\n            ].join(\"\\n\")\n        );\n    }\n\n    // trigger 'change.dropdown-select' when a new selection is made using the dropdown\n    function selectThis(event) {\n        var $this = $(this),\n            $select = $this.parents(\".dropdown-select\"),\n            newSelection = $this.text();\n        $select.find(\".dropdown-select-selected\").text(newSelection);\n        $select.trigger(\"change.dropdown-select\", newSelection);\n    }\n\n    $select.find(\"a\").click(selectThis);\n    return $select;\n}\n\n//==============================================================================\n/**\n     *  Creates a three part bootstrap button group (key, op, value) meant to\n     *  allow the user control of filters (e.g. { key: 'name', op: 'contains', value: 'my_history' })\n     *\n     *  Each field uses a dropDownSelect (from ui.js) to allow selection\n     *  (with the 'value' field appearing as an input when set to do so).\n     *\n     *  Any change or update in any of the fields will trigger a 'change.filter-control'\n     *  event which will be passed an object containing those fields (as the example above).\n     *\n     *  Pass in an array of possible filter objects to control what the user can select.\n     *  Each filter object should have:\n     *      key : generally the attribute name on which to filter something\n     *      ops : an array of 1 or more filter operations (e.g. [ 'is', '<', 'contains', '!=' ])\n     *      values (optional) : an array of possible values for the filter (e.g. [ 'true', 'false' ])\n     *  @example:\n     *  $( '.my-div' ).filterControl({\n     *      filters : [\n     *          { key: 'name',    ops: [ 'is exactly', 'contains' ] }\n     *          { key: 'deleted', ops: [ 'is' ], values: [ 'true', 'false' ] }\n     *      ]\n     *  });\n     *  // after initialization, you can prog. get the current value using:\n     *  $( '.my-div' ).filterControl( 'val' )\n     *\n     */\nfunction FilterControl(element, options) {\n    return this.init(element, options);\n}\n/** the data key that this object will be stored under in the DOM element */\nFilterControl.prototype.DATA_KEY = \"filter-control\";\n\n/** parses options, sets up instance vars, and does initial render */\nFilterControl.prototype.init = function _init(element, options) {\n    options = options || { filters: [] };\n    this.$element = $(element).addClass(\"filter-control btn-group\");\n    this.options = jQuery.extend(true, {}, this.defaults, options);\n\n    this.currFilter = this.options.filters[0];\n    return this.render();\n};\n\n/** render (or re-render) the controls on the element */\nFilterControl.prototype.render = function _render() {\n    this.$element\n        .empty()\n        .append([\n            this._renderKeySelect(),\n            this._renderOpSelect(),\n            this._renderValueInput()\n        ]);\n    return this;\n};\n\n/** render the key dropDownSelect, bind a change event to it, and return it */\nFilterControl.prototype._renderKeySelect = function __renderKeySelect() {\n    var filterControl = this;\n    var keys = this.options.filters.map(function(filter) {\n        return filter.key;\n    });\n    this.$keySelect = dropDownSelect(keys, this.currFilter.key)\n        .addClass(\"filter-control-key\")\n        .on(\"change.dropdown-select\", function(event, selection) {\n            filterControl.currFilter = _.findWhere(\n                filterControl.options.filters,\n                { key: selection }\n            );\n            // when the filter/key changes, re-render the control entirely\n            filterControl.render()._triggerChange();\n        });\n    return this.$keySelect;\n};\n\n/** render the op dropDownSelect, bind a change event to it, and return it */\nFilterControl.prototype._renderOpSelect = function __renderOpSelect() {\n    var filterControl = this,\n        ops = this.currFilter.ops;\n    //TODO: search for currOp in avail. ops: use that for selected if there; otherwise: first op\n    this.$opSelect = dropDownSelect(ops, ops[0])\n        .addClass(\"filter-control-op\")\n        .on(\"change.dropdown-select\", function(event, selection) {\n            filterControl._triggerChange();\n        });\n    return this.$opSelect;\n};\n\n/** render the value control, bind a change event to it, and return it */\nFilterControl.prototype._renderValueInput = function __renderValueInput() {\n    var filterControl = this;\n    // if a values attribute is prov. on the filter - make this a dropdown; otherwise, use an input\n    if (this.currFilter.values) {\n        this.$valueSelect = dropDownSelect(\n            this.currFilter.values,\n            this.currFilter.values[0]\n        ).on(\"change.dropdown-select\", function(event, selection) {\n            filterControl._triggerChange();\n        });\n    } else {\n        //TODO: allow setting a value type (mainly for which html5 input to use: range, number, etc.)\n        this.$valueSelect = $(\"<input/>\")\n            .addClass(\"form-control\")\n            .on(\"change\", function(event, value) {\n                filterControl._triggerChange();\n            });\n    }\n    this.$valueSelect.addClass(\"filter-control-value\");\n    return this.$valueSelect;\n};\n\n/** return the current state/setting for the filter as a three key object: key, op, value */\nFilterControl.prototype.val = function _val() {\n    var key = this.$element\n            .find(\".filter-control-key .dropdown-select-selected\")\n            .text(),\n        op = this.$element\n            .find(\".filter-control-op .dropdown-select-selected\")\n            .text(),\n        // handle either a dropdown or plain input\n        $value = this.$element.find(\".filter-control-value\"),\n        value = $value.hasClass(\"dropdown-select\")\n            ? $value.find(\".dropdown-select-selected\").text()\n            : $value.val();\n    return { key: key, op: op, value: value };\n};\n\n// single point of change for change event\nFilterControl.prototype._triggerChange = function __triggerChange() {\n    this.$element.trigger(\"change.filter-control\", this.val());\n};\n\n// as jq plugin\njQuery.fn.extend({\n    filterControl: function $filterControl(options) {\n        var nonOptionsArgs = jQuery.makeArray(arguments).slice(1);\n        return this.map(function() {\n            var $this = $(this),\n                data = $this.data(FilterControl.prototype.DATA_KEY);\n\n            if (jQuery.type(options) === \"object\") {\n                data = new FilterControl($this, options);\n                $this.data(FilterControl.prototype.DATA_KEY, data);\n            }\n            if (data && jQuery.type(options) === \"string\") {\n                var fn = data[options];\n                if (jQuery.type(fn) === \"function\") {\n                    return fn.apply(data, nonOptionsArgs);\n                }\n            }\n            return this;\n        });\n    }\n});\n"]}