{"version":3,"sources":["ui/filter-control.js"],"names":["factory","define","amd","jQuery","$","dropDownSelect","options","selected","selectThis","event","$this","this","$select","parents","newSelection","text","find","trigger","_","isEmpty","length","addClass","attr","append","map","option","join","click","FilterControl","element","init","prototype","filters","$element","_renderKeySelect","defaults","__renderKeySelect","keys","render","filterControl","_renderOpSelect","_renderValueInput","ops","currFilter","filter","key","_triggerChange","on","selection","findWhere","$opSelect","$valueSelect","_val","values","$value","hasClass","value","extend","data","op","type","val","fn","nonOptionsArgs","makeArray","arguments","slice","DATA_KEY","apply"],"mappings":"cAAA,SAAAA,GACA,kBAAAC,SAAAA,OAAAC,IAEQD,QAAOA,UAAWD,GAAtBA,EAGOG,SAGN,SAAAC,GAgBJ,QAASC,GAAgBC,EAASC,GA0C/B,QAAAC,GAAAC,GAZD,GAAIC,GAAQN,EAAGO,MACdC,EAAUF,EAAMG,QAAS,oBACzBC,EAAeJ,EAAMK,MACtBH,GAAQI,KAAM,6BAA8BD,KAAMD,GAClDF,EAAQK,QAAS,yBAA0BH,GAjC5CP,EAAAA,IAAAW,EAAAC,QAAAb,GAAA,GAAAA,EAAA,GACAC,IAAAA,GAAAA,GACA,0CAEG,iDAMH,0CAAAA,EAAA,UACA,YACA,UACCK,KAAAA,MAwBD,OAZCN,IAAAA,EAAAc,OAAA,IAZAR,EAAQI,KAAM,UAcfK,SAAA,mBAAAC,KAAA,cAAA,YACAC,OAAA,gCACCX,EAAAW,QAAA,yCAAAL,EAAAM,IAAAlB,EAECQ,SAAeJ,GAChBE,OACAA,oCAAiBa,EAAjB,aACAC,KAAA,MAZKA,KAAM,MAcZd,SACAc,KAAA,QADAd,EAAQI,KAAM,KAAMW,MAAOnB,GACpBI,EA2CP,QAAAgB,GAAAC,EAAAvB,GACA,MAPDK,MAAAmB,KAAAD,EAAAvB,GAUAsB,EAAAA,UAAcG,SAAd,iBAIIH,EAJJG,UAAAD,KAAA,SAAAD,EAAAvB,GAUW,MAnBVA,GAAUA,IAAa0B,YAerBrB,KAAAsB,SAAA7B,EAAAyB,GAAAR,SAAA,4BACHO,KAAAA,QAAAA,OAAcG,QAAUG,KAAAA,KAAmBC,SAASC,GAE7CzB,KAAI0B,WAAY/B,KAALA,QAAA0B,QAA0B,GACjCrB,KAAA2B,UAMIV,EAAAG,UAAAO,OAAA,WAGR,MAFQC,MAAAA,SAAAA,QALRhB,QAAAZ,KAAAuB,mBAAAvB,KAAA6B,kBAAA7B,KAAA8B,sBAOO9B,MAIdiB,EAAAA,UAAcG,iBAAd,WACO,GAAIQ,GAAgB5B,KAChB+B,EAAM/B,KAAKgC,QAAAA,QADfnB,IAAA,SAAAoB,GAEA,MAAAA,GAAAC,KAWA,OAPQN,MAAAA,WAAcO,EAAdT,EAAA1B,KAAAgC,WAAAE,KAHRxB,SAAA,sBAKA0B,GAAO,yBAAP,SAAAtC,EAAAuC,GATPT,EAAAI,WAAAzB,EAAA+B,UAAAV,EAAAjC,QAAA0B,SAAAa,IAAAG,IAYGT,EAAAD,SAAAQ,mBAEQP,KAAAA,YAKQA,EAAAA,UAAAA,gBAAcO,WACjB,GAAAP,GAHL5B,KADJ+B,EAKO/B,KAAAgC,WAAAD,GAQP,OANI/B,MAAAuC,UAAKC,EAAkBT,EAAarB,EAAAA,IAE5BkB,SAAAA,qBAFYQ,GAApB,yBAAA,SAAAtC,EAAAuC,GAIHT,EAAAO,mBAEMnC,KAAKwC,WAInBvB,EAAAA,UAAcG,kBAAyBqB,WAChC,GAAIP,GAAWZ,IAenB9B,OAjCQQ,MAAKgC,WAAWU,OAoBhB1C,KAAAwC,aAAA9C,EAAAM,KAAAgC,WAAAU,OAAA1C,KAAAgC,WAAAU,OAAA,IACSN,GAAA,yBAAoB,SAAAtC,EAHjCuC,GAIcM,EAAOC,mBAKzB5C,KAAAwC,aAAA/C,EAAA,YAAAiB,SAAA,gBACHO,GAAcG,SAAUe,SAAAA,EAAiBU,GAC7BvB,EAAkBa,mBAG3BnC,KAAAwC,aAAA9B,SAAA,wBACUoC,KAAVN,cAIAvB,EAAAG,UAAIrB,IAAW,WAAf,GAAAmC,GAAAlC,KACC+C,SAAOhD,KAAYkB,iDADpBb,OAlBQ4C,EAAMhD,KAAKsB,SAASjB,KAAM,gDAAkDD,OAsBnF2C,EAAAA,KAAAA,SAAW9B,KAAAA,wBAGZ,QAAAiB,IAAIa,EAAAA,GAAQvD,EAAOyD,MAFlBlD,EAAMgD,SAAM9B,mBAAZ0B,EAAAtC,KAAA,6BAAAD,OACAuC,EAAAO,QAKCjC,EAAAG,UAAAe,eAAA,WACDnC,KAAAsB,SAAAhB,QAAA,wBAAAN,KAAAkD,QAhBgB1D,OAAjB2D,GAAAL,QApLJlB,cAAA,SAAAjC,GAsLG,GAAIyD,GAAiB5D,OAAO6D,UAAWC,WAAYC,MAAO,EACjD,OAAOvD,MAAKa,IAAK,WACzB,GAAId,GAAQN,EAAGO,MACd+C,EAAOhD,EAAMgD,KAAM9B,EAAcG,UAAUoC,SAM5C,IAJ+B,WAA3BhE,OAAOyD,KAAMtD,KAChBoD,EAAO,GAAI9B,GAAelB,EAAOJ,GACjCI,EAAMgD,KAAM9B,EAAcG,UAAUoC,SAAUT,IAE3CA,GAAmC,WAA3BvD,OAAOyD,KAAMtD,GAAwB,CAChD,GAAIwD,GAAKJ,EAAMpD,EACf,IAA0B,aAAtBH,OAAOyD,KAAME,GAChB,MAAOA,GAAGM,MAAOV,EAAMK,GAGzB,MAAOpD","file":"../../scripts/ui/filter-control.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n\n}(function ($) {\n\t//==============================================================================\n\t/**\n\t *  Template function that produces a bootstrap dropdown to replace the\n\t *  vanilla HTML select input. Pass in an array of options and an initial selection:\n\t *  $( '.my-div' ).append( dropDownSelect( [ 'option1', 'option2' ], 'option2' );\n\t *\n\t *  When the user changes the selected option a 'change.dropdown-select' event will\n\t *  fire with both the jq event and the new selection text as arguments.\n\t *\n\t *  Get the currently selected choice using:\n\t *  var userChoice = $( '.my-div .dropdown-select .dropdown-select-selected' ).text();\n\t *\n\t */\n\tfunction dropDownSelect( options, selected ){\n\t\t// replacement for vanilla select element using bootstrap dropdowns instead\n\t\tselected = selected || (( !_.isEmpty( options ) )?( options[0] ):( '' ));\n\t\tvar $select = $([\n\t\t\t\t'<div class=\"dropdown-select btn-group\">',\n\t\t\t\t\t'<button type=\"button\" class=\"btn btn-default\">',\n\t\t\t\t\t\t'<span class=\"dropdown-select-selected\">' + selected + '</span>',\n\t\t\t\t\t'</button>',\n\t\t\t\t'</div>'\n\t\t\t].join( '\\n' ));\n\n\t\t// if there's only one option, do not style/create as buttons, dropdown - use simple span\n\t\t// otherwise, a dropdown displaying the current selection\n\t\tif( options && options.length > 1 ){\n\t\t\t$select.find( 'button' )\n\t\t\t\t.addClass( 'dropdown-toggle' ).attr( 'data-toggle', 'dropdown' )\n\t\t\t\t.append( ' <span class=\"caret\"></span>' );\n\t\t\t$select.append([\n\t\t\t\t'<ul class=\"dropdown-menu\" role=\"menu\">',\n\t\t\t\t\t_.map( options, function( option ){\n\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t'<li><a href=\"javascript:void(0)\">', option, '</a></li>'\n\t\t\t\t\t\t].join( '' );\n\t\t\t\t\t}).join( '\\n' ),\n\t\t\t\t'</ul>'\n\t\t\t].join( '\\n' ));\n\t\t}\n\n\t\t// trigger 'change.dropdown-select' when a new selection is made using the dropdown\n\t\tfunction selectThis( event ){\n\t\t\tvar $this = $( this ),\n\t\t\t\t$select = $this.parents( '.dropdown-select' ),\n\t\t\t\tnewSelection = $this.text();\n\t\t\t$select.find( '.dropdown-select-selected' ).text( newSelection );\n\t\t\t$select.trigger( 'change.dropdown-select', newSelection );\n\t\t}\n\n\t\t$select.find( 'a' ).click( selectThis );\n\t\treturn $select;\n\t}\n\n\t//==============================================================================\n    /**\n     *  Creates a three part bootstrap button group (key, op, value) meant to\n     *  allow the user control of filters (e.g. { key: 'name', op: 'contains', value: 'my_history' })\n     *\n     *  Each field uses a dropDownSelect (from ui.js) to allow selection\n     *  (with the 'value' field appearing as an input when set to do so).\n     *\n     *  Any change or update in any of the fields will trigger a 'change.filter-control'\n     *  event which will be passed an object containing those fields (as the example above).\n     *\n     *  Pass in an array of possible filter objects to control what the user can select.\n     *  Each filter object should have:\n     *      key : generally the attribute name on which to filter something\n     *      ops : an array of 1 or more filter operations (e.g. [ 'is', '<', 'contains', '!=' ])\n     *      values (optional) : an array of possible values for the filter (e.g. [ 'true', 'false' ])\n     *  @example:\n     *  $( '.my-div' ).filterControl({\n     *      filters : [\n     *          { key: 'name',    ops: [ 'is exactly', 'contains' ] }\n     *          { key: 'deleted', ops: [ 'is' ], values: [ 'true', 'false' ] }\n     *      ]\n     *  });\n     *  // after initialization, you can prog. get the current value using:\n     *  $( '.my-div' ).filterControl( 'val' )\n     *\n     */\n    function FilterControl( element, options ){\n\t\treturn this.init( element, options );\n    }\n    /** the data key that this object will be stored under in the DOM element */\n\tFilterControl.prototype.DATA_KEY = 'filter-control';\n\n    /** parses options, sets up instance vars, and does initial render */\n\tFilterControl.prototype.init = function _init( element, options ){\n\t\toptions = options || { filters: [] };\n\t\tthis.$element = $( element ).addClass( 'filter-control btn-group' );\n\t\tthis.options = jQuery.extend( true, {}, this.defaults, options );\n\n        this.currFilter = this.options.filters[0];\n\t\treturn this.render();\n\t};\n\n    /** render (or re-render) the controls on the element */\n\tFilterControl.prototype.render = function _render(){\n        this.$element.empty()\n            .append([ this._renderKeySelect(), this._renderOpSelect(), this._renderValueInput() ]);\n        return this;\n    };\n\n    /** render the key dropDownSelect, bind a change event to it, and return it */\n\tFilterControl.prototype._renderKeySelect = function __renderKeySelect(){\n        var filterControl = this;\n        var keys = this.options.filters.map( function( filter ){\n            return filter.key;\n        });\n        this.$keySelect = dropDownSelect( keys, this.currFilter.key )\n            .addClass( 'filter-control-key' )\n            .on( 'change.dropdown-select', function( event, selection ){\n                filterControl.currFilter = _.findWhere( filterControl.options.filters, { key: selection });\n                // when the filter/key changes, re-render the control entirely\n                filterControl.render()._triggerChange();\n            });\n        return this.$keySelect;\n    };\n\n    /** render the op dropDownSelect, bind a change event to it, and return it */\n\tFilterControl.prototype._renderOpSelect = function __renderOpSelect(){\n        var filterControl = this,\n            ops = this.currFilter.ops;\n        //TODO: search for currOp in avail. ops: use that for selected if there; otherwise: first op\n        this.$opSelect = dropDownSelect( ops, ops[0] )\n            .addClass( 'filter-control-op' )\n            .on( 'change.dropdown-select', function( event, selection ){\n                filterControl._triggerChange();\n            });\n        return this.$opSelect;\n    };\n\n    /** render the value control, bind a change event to it, and return it */\n\tFilterControl.prototype._renderValueInput = function __renderValueInput(){\n        var filterControl = this;\n        // if a values attribute is prov. on the filter - make this a dropdown; otherwise, use an input\n        if( this.currFilter.values ){\n            this.$valueSelect = dropDownSelect( this.currFilter.values, this.currFilter.values[0] )\n                .on( 'change.dropdown-select', function( event, selection ){\n                    filterControl._triggerChange();\n                });\n        } else {\n            //TODO: allow setting a value type (mainly for which html5 input to use: range, number, etc.)\n            this.$valueSelect = $( '<input/>' ).addClass( 'form-control' )\n                .on( 'change', function( event, value ){\n                    filterControl._triggerChange();\n                });\n        }\n        this.$valueSelect.addClass( 'filter-control-value' );\n        return this.$valueSelect;\n    };\n\n    /** return the current state/setting for the filter as a three key object: key, op, value */\n\tFilterControl.prototype.val = function _val(){\n        var key = this.$element.find( '.filter-control-key .dropdown-select-selected' ).text(),\n            op  = this.$element.find( '.filter-control-op .dropdown-select-selected'  ).text(),\n            // handle either a dropdown or plain input\n            $value = this.$element.find( '.filter-control-value' ),\n            value = ( $value.hasClass( 'dropdown-select' ) )?( $value.find( '.dropdown-select-selected' ).text() )\n                                                            :( $value.val() );\n        return { key: key, op: op, value: value };\n    };\n\n    // single point of change for change event\n\tFilterControl.prototype._triggerChange = function __triggerChange(){\n        this.$element.trigger( 'change.filter-control', this.val() );\n    };\n\n    // as jq plugin\n    jQuery.fn.extend({\n        filterControl : function $filterControl( options ){\n\t\t\tvar nonOptionsArgs = jQuery.makeArray( arguments ).slice( 1 );\n            return this.map( function(){\n\t\t\t\tvar $this = $( this ),\n\t\t\t\t\tdata = $this.data( FilterControl.prototype.DATA_KEY );\n\n\t\t\t\tif( jQuery.type( options ) === 'object' ){\n\t\t\t\t\tdata = new FilterControl( $this, options );\n\t\t\t\t\t$this.data( FilterControl.prototype.DATA_KEY, data );\n\t\t\t\t}\n\t\t\t\tif( data && jQuery.type( options ) === 'string' ){\n\t\t\t\t\tvar fn = data[ options ];\n\t\t\t\t\tif( jQuery.type( fn ) === 'function' ){\n\t\t\t\t\t\treturn fn.apply( data, nonOptionsArgs );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n            });\n        }\n    });\n}));\n"]}