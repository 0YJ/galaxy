{"version":3,"sources":["onload.js"],"names":["replace_big_select_inputs","min_length","max_length","select_elts","select_elt","$","element","options","refresh_select2","is","placeholder","closeOnSelect","containerCssClass","jQuery","fn","select2","undefined","this","not","find","length","num_options","hasClass","init_refresh_on_change","change","select_field","select_val","val","ref_on_change_vals","attr","split","last_selected_value","inArray","window","trigger","document","get","form","submit","off","click","refresh","_","Backbone","panels","require","async_save_text","extend","POPUPMENU","make_popupmenu","make_popup_menus","init_tag_click_function","ready","tooltip","placement","href","anchor","indexOf","parent","frames","galaxy_main","galaxy_main_exists","et","parse","sessionStorage","TOURS","JSON","getItem","hooked_tour_from_data","steps","tour","Tour","top","tour_opts","init","restart","getJSON","webhooks","each","webhook","activate","script","type","text","appendTo","styles"],"mappings":"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","file":"../scripts/onload.js","sourcesContent":["// ============================================================================\n// Globals (temporary)\n// ============================================================================\n// HACK: add these to global scope until we stop asking for them there...\n// Via webpack: these are required here automatically by the provider plugin\n// Via script tag: these are redundant (identities) since they're already global\nwindow[ 'jQuery' ] = jQuery; // a weird form to prevent webpack from sub'ing 'window.jQuery' in the provider plugin\nwindow.$ = jQuery;\nwindow._ = _;\nwindow.Backbone = Backbone;\n// console.debug('globals loaded:', window.jQuery, window.Backbone, '...');\n\n// these are galaxy globals not defined in the provider (although they could be - but why encourage that?)\nwindow.panels = require( 'layout/panel' );\n// using extend bc there are multiple fns/objs to decorate the window with\n_.extend( window, require( 'layout/modal' ) );\nwindow.async_save_text = require( 'utils/async-save-text' );\nvar POPUPMENU = require( 'ui/popupmenu' );\nwindow.make_popupmenu = POPUPMENU.make_popupmenu;\nwindow.make_popup_menus = POPUPMENU.make_popup_menus;\nwindow.init_tag_click_function = require( 'ui/autocom_tagging' );\nvar TOURS = require( 'mvc/tours' );\nvar QUERY_STRING = require( 'utils/query-string-parsing' );\n// console.debug( 'galaxy globals loaded' );\n\n// ============================================================================\n// jquery on document ready\n// ============================================================================\n// Replace select box with a text input box + autocomplete.\nfunction replace_big_select_inputs(min_length, max_length, select_elts) {\n\n    function refresh_select2( element ) {\n        var select_elt = $(element);\n        var options = { placeholder:'Click to select',\n                        closeOnSelect: !select_elt.is(\"[MULTIPLE]\"),\n                        dropdownAutoWidth   : true,\n                        containerCssClass: 'select2-minwidth'\n                      };\n        return element.select2( options );\n    }\n\n    // To do replace, the select2 plugin must be loaded.\n    if (!jQuery.fn.select2) {\n        return;\n    }\n\n    // Set default for min_length and max_length\n    if (min_length === undefined) {\n        min_length = 20;\n    }\n    if (max_length === undefined) {\n        max_length = 3000;\n    }\n\n    select_elts = select_elts || $('select');\n\n    select_elts.each( function() {\n        var select_elt = $(this).not('[multiple]');\n        // Make sure that options is within range.\n        var num_options = select_elt.find('option').length;\n        if ( (num_options < min_length) || (num_options > max_length) ) {\n            return;\n        }\n\n        if (select_elt.hasClass(\"no-autocomplete\")) {\n            return;\n        }\n\n        /* Replaced jQuery.autocomplete with select2, notes:\n         * - multiple selects are supported\n         * - the original element is updated with the value, convert_to_values should not be needed\n         * - events are fired when updating the original element, so refresh_on_change should just work\n         *\n         * - should we still sort dbkey fields here?\n         */\n        refresh_select2( select_elt );\n    });\n}\n\n// Initialize refresh events.\nfunction init_refresh_on_change () {\n    $(\"select[refresh_on_change='true']\")\n        .off('change')\n        .change(function() {\n            var select_field = $(this),\n                select_val = select_field.val(),\n                refresh = false,\n                ref_on_change_vals = select_field.attr(\"refresh_on_change_values\");\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(',');\n                var last_selected_value = select_field.attr(\"last_selected_value\");\n                if ($.inArray(select_val, ref_on_change_vals) === -1 && $.inArray(last_selected_value, ref_on_change_vals) === -1) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            $(document).trigger(\"convert_to_values\"); // Convert autocomplete text to values\n            select_field.get(0).form.submit();\n        });\n\n    // checkboxes refresh on change\n    $(\":checkbox[refresh_on_change='true']\")\n        .off('click')\n        .click( function() {\n            var select_field = $(this),\n                select_val = select_field.val(),\n                refresh = false,\n                ref_on_change_vals = select_field.attr(\"refresh_on_change_values\");\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(',');\n                var last_selected_value = select_field.attr(\"last_selected_value\");\n                if ($.inArray(select_val, ref_on_change_vals) === -1 && $.inArray(last_selected_value, ref_on_change_vals) === -1) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            select_field.get(0).form.submit();\n        });\n\n    // Links with confirmation\n    $( \"a[confirm]\" )\n        .off('click')\n        .click( function() {\n            return confirm( $(this).attr(\"confirm\") );\n        });\n}\n// used globally in grid-view\nwindow.init_refresh_on_change = init_refresh_on_change;\n\n$(document).ready( function() {\n    // Refresh events for form fields.\n    init_refresh_on_change();\n\n    // Tooltips\n    if ( $.fn.tooltip ) {\n        // Put tooltips below items in panel header so that they do not overlap masthead.\n        $(\".unified-panel-header [title]\").tooltip( { placement: 'bottom' } );\n\n        // default tooltip initialization, it will follow the data-placement tag for tooltip location\n        // and fallback to 'top' if not present\n        $(\"[title]\").tooltip();\n    }\n    // Make popup menus.\n    make_popup_menus();\n\n    // Replace big selects.\n    replace_big_select_inputs(20, 1500);\n\n    // If galaxy_main frame does not exist and link targets galaxy_main,\n    // add use_panels=True and set target to self.\n    $(\"a\").click( function() {\n        var anchor = $(this);\n        var galaxy_main_exists = (parent.frames && parent.frames.galaxy_main);\n        if ( ( anchor.attr( \"target\" ) == \"galaxy_main\" ) && ( !galaxy_main_exists ) ) {\n            var href = anchor.attr(\"href\");\n            if (href.indexOf(\"?\") == -1) {\n                href += \"?\";\n            }\n            else {\n                href += \"&\";\n            }\n            href += \"use_panels=True\";\n            anchor.attr(\"href\", href);\n            anchor.attr(\"target\", \"_self\");\n        }\n        return anchor;\n    });\n\n    var et = JSON.parse(sessionStorage.getItem('activeGalaxyTour'));\n    if (et){\n        et = TOURS.hooked_tour_from_data(et);\n        if (et && et.steps){\n            if (window && window.self === window.top){\n                // Only kick off a new tour if this is the toplevel window (non-iframe).  This\n                // functionality actually *could* be useful, but we'd need to handle it better and\n                // come up with some design guidelines for tours jumping between windows.\n                // Disabling for now.\n                var tour = new Tour(_.extend({\n                    steps: et.steps,\n                }, TOURS.tour_opts));\n                tour.init();\n                tour.restart();\n            }\n        }\n    }\n\n    // Load all webhooks with the type 'onload'\n    $.getJSON('/api/webhooks/onload/all', function(webhooks) {\n        _.each(webhooks, function(webhook) {\n            if (webhook.activate && webhook.script) {\n                $('<script/>', {type: 'text/javascript'}).text(webhook.script).appendTo('head');\n                $('<style/>', {type: 'text/css'}).text(webhook.styles).appendTo('head');\n            }\n        });\n    });\n});\n"]}