{"version":3,"sources":["onload.js"],"names":["replace_big_select_inputs","min_length","max_length","select_elts","refresh_select2","element","panels","placeholder","closeOnSelect","$","is","dropdownAutoWidth","containerCssClass","window","async_save_text","options","jQuery","fn","select2","undefined","num_options","select_elt","find","length","init_refresh_on_change","off","change","select_field","this","select_val","val","ref_on_change_vals","attr","split","last_selected_value","inArray","document","trigger","submit","click","refresh","get","form","confirm","_","Backbone","_panel2","default","extend","_modal2","_asyncSaveText2","make_popupmenu","_popupmenu2","make_popup_menus","init_tag_click_function","_autocom_tagging2","webhooks","each","webhook","activate","script","type","onloadWebhooks","appendTo","setTimeout","tooltip","placement","anchor","galaxy_main_exists","parent","frames","galaxy_main","href","et","JSON","parse","sessionStorage","getItem","steps","hooked_tour_from_data","tour","Tour","tour_opts","init","restart"],"mappings":"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","file":"../scripts/onload.js","sourcesContent":["// ============================================================================\n// Globals (temporary)\n// ============================================================================\n// HACK: add these to global scope until we stop asking for them there...\n// Via webpack: these are required here automatically by the provider plugin\n// Via script tag: these are redundant (identities) since they're already global\nwindow[\"jQuery\"] = jQuery; // a weird form to prevent webpack from sub'ing 'window.jQuery' in the provider plugin\nwindow.$ = jQuery;\nwindow._ = _;\nwindow.Backbone = Backbone;\n// console.debug('globals loaded:', window.jQuery, window.Backbone, '...');\n\n// these are galaxy globals not defined in the provider (although they could be - but why encourage that?)\nimport Panel from \"layout/panel\";\nwindow.panels = Panel;\n\n// using extend bc there are multiple fns/objs to decorate the window with\nimport layout_modal from \"layout/modal\";\n_.extend(window, layout_modal);\nimport async_save_text from \"utils/async-save-text\";\nwindow.async_save_text = async_save_text;\nimport POPUPMENU from \"ui/popupmenu\";\nwindow.make_popupmenu = POPUPMENU.make_popupmenu;\nwindow.make_popup_menus = POPUPMENU.make_popup_menus;\nimport init_tag_click_function from \"ui/autocom_tagging\";\nwindow.init_tag_click_function = init_tag_click_function;\nimport TOURS from \"mvc/tours\";\nimport QUERY_STRING from \"utils/query-string-parsing\";\n// console.debug( 'galaxy globals loaded' );\n\n// ============================================================================\n// jquery on document ready\n// ============================================================================\n// Replace select box with a text input box + autocomplete.\nfunction replace_big_select_inputs(min_length, max_length, select_elts) {\n    function refresh_select2(element) {\n        var select_elt = $(element);\n        var options = {\n            placeholder: \"Click to select\",\n            closeOnSelect: !select_elt.is(\"[MULTIPLE]\"),\n            dropdownAutoWidth: true,\n            containerCssClass: \"select2-minwidth\"\n        };\n        return element.select2(options);\n    }\n\n    // To do replace, the select2 plugin must be loaded.\n    if (!jQuery.fn.select2) {\n        return;\n    }\n\n    // Set default for min_length and max_length\n    if (min_length === undefined) {\n        min_length = 20;\n    }\n    if (max_length === undefined) {\n        max_length = 3000;\n    }\n\n    select_elts = select_elts || $(\"select\");\n\n    select_elts.each(function() {\n        var select_elt = $(this).not(\"[multiple]\");\n        // Make sure that options is within range.\n        var num_options = select_elt.find(\"option\").length;\n        if (num_options < min_length || num_options > max_length) {\n            return;\n        }\n\n        if (select_elt.hasClass(\"no-autocomplete\")) {\n            return;\n        }\n\n        /* Replaced jQuery.autocomplete with select2, notes:\n         * - multiple selects are supported\n         * - the original element is updated with the value, convert_to_values should not be needed\n         * - events are fired when updating the original element, so refresh_on_change should just work\n         *\n         * - should we still sort dbkey fields here?\n         */\n        refresh_select2(select_elt);\n    });\n}\n\n// Initialize refresh events.\nfunction init_refresh_on_change() {\n    $(\"select[refresh_on_change='true']\")\n        .off(\"change\")\n        .change(function() {\n            var select_field = $(this),\n                select_val = select_field.val(),\n                refresh = false,\n                ref_on_change_vals = select_field.attr(\n                    \"refresh_on_change_values\"\n                );\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(\",\");\n                var last_selected_value = select_field.attr(\n                    \"last_selected_value\"\n                );\n                if (\n                    $.inArray(select_val, ref_on_change_vals) === -1 &&\n                    $.inArray(last_selected_value, ref_on_change_vals) === -1\n                ) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            $(document).trigger(\"convert_to_values\"); // Convert autocomplete text to values\n            select_field.get(0).form.submit();\n        });\n\n    // checkboxes refresh on change\n    $(\":checkbox[refresh_on_change='true']\")\n        .off(\"click\")\n        .click(function() {\n            var select_field = $(this),\n                select_val = select_field.val(),\n                refresh = false,\n                ref_on_change_vals = select_field.attr(\n                    \"refresh_on_change_values\"\n                );\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(\",\");\n                var last_selected_value = select_field.attr(\n                    \"last_selected_value\"\n                );\n                if (\n                    $.inArray(select_val, ref_on_change_vals) === -1 &&\n                    $.inArray(last_selected_value, ref_on_change_vals) === -1\n                ) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            select_field.get(0).form.submit();\n        });\n\n    // Links with confirmation\n    $(\"a[confirm]\")\n        .off(\"click\")\n        .click(function() {\n            return confirm($(this).attr(\"confirm\"));\n        });\n}\n// used globally in grid-view\nwindow.init_refresh_on_change = init_refresh_on_change;\n\n$(document).ready(function() {\n    // Refresh events for form fields.\n    init_refresh_on_change();\n\n    // Tooltips\n    if ($.fn.tooltip) {\n        // Put tooltips below items in panel header so that they do not overlap masthead.\n        $(\".unified-panel-header [title]\").tooltip({ placement: \"bottom\" });\n\n        // default tooltip initialization, it will follow the data-placement tag for tooltip location\n        // and fallback to 'top' if not present\n        $(\"[title]\").tooltip();\n    }\n    // Make popup menus.\n    make_popup_menus();\n\n    // Replace big selects.\n    replace_big_select_inputs(20, 1500);\n\n    // If galaxy_main frame does not exist and link targets galaxy_main,\n    // add use_panels=True and set target to self.\n    $(\"a\").click(function() {\n        var anchor = $(this);\n        var galaxy_main_exists = parent.frames && parent.frames.galaxy_main;\n        if (anchor.attr(\"target\") == \"galaxy_main\" && !galaxy_main_exists) {\n            var href = anchor.attr(\"href\");\n            if (href.indexOf(\"?\") == -1) {\n                href += \"?\";\n            } else {\n                href += \"&\";\n            }\n            href += \"use_panels=True\";\n            anchor.attr(\"href\", href);\n            anchor.attr(\"target\", \"_self\");\n        }\n        return anchor;\n    });\n\n    var et = JSON.parse(sessionStorage.getItem(\"activeGalaxyTour\"));\n    if (et) {\n        et = TOURS.hooked_tour_from_data(et);\n        if (et && et.steps) {\n            if (window && window.self === window.top) {\n                // Only kick off a new tour if this is the toplevel window (non-iframe).  This\n                // functionality actually *could* be useful, but we'd need to handle it better and\n                // come up with some design guidelines for tours jumping between windows.\n                // Disabling for now.\n                var tour = new Tour(\n                    _.extend(\n                        {\n                            steps: et.steps\n                        },\n                        TOURS.tour_opts\n                    )\n                );\n                tour.init();\n                tour.restart();\n            }\n        }\n    }\n\n    function onloadWebhooks() {\n        if (Galaxy.root !== undefined) {\n            // Load all webhooks with the type 'onload'\n            $.getJSON(Galaxy.root + \"api/webhooks/onload/all\", function(\n                webhooks\n            ) {\n                _.each(webhooks, function(webhook) {\n                    if (webhook.activate && webhook.script) {\n                        $(\"<script/>\", { type: \"text/javascript\" })\n                            .text(webhook.script)\n                            .appendTo(\"head\");\n                        $(\"<style/>\", { type: \"text/css\" })\n                            .text(webhook.styles)\n                            .appendTo(\"head\");\n                    }\n                });\n            });\n        } else {\n            setTimeout(onloadWebhooks, 100);\n        }\n    }\n    onloadWebhooks();\n});\n"]}