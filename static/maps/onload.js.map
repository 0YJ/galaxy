{"version":3,"sources":["onload.js"],"names":["window","panels","min_length","max_length","select_elts","refresh_select2","element","async_save_text","placeholder","make_popupmenu","$","is","make_popup_menus","init_tag_click_function","select2","options","jQuery","fn","undefined","dropdownAutoWidth","containerCssClass","each","this","not","num_options","select_elt","find","length","hasClass","init_refresh_on_change","off","change","select_field","select_val","val","ref_on_change_vals","attr","split","last_selected_value","inArray","refresh","document","get","submit","trigger","form","confirm","_popupmenu","require","_tours","_","Backbone","extend","_popupmenu2","default","ready","tooltip","onloadWebhooks","Galaxy","root","getJSON","webhooks","webhook","activate","script","type","text","appendTo","styles","setTimeout","placement","replace_big_select_inputs","click","href","galaxy_main_exists","parent","frames","galaxy_main","anchor","indexOf","et","parse","sessionStorage","JSON","getItem","_tours2","hooked_tour_from_data","steps","tour","Tour","top","restart"],"mappings":"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","file":"../scripts/onload.js","sourcesContent":["// ============================================================================\n// Globals (temporary)\n// ============================================================================\n// HACK: add these to global scope until we stop asking for them there...\n// Via webpack: these are required here automatically by the provider plugin\n// Via script tag: these are redundant (identities) since they're already global\nwindow[\"jQuery\"] = jQuery; // a weird form to prevent webpack from sub'ing 'window.jQuery' in the provider plugin\nwindow.$ = jQuery;\nwindow._ = _;\nwindow.Backbone = Backbone;\n// console.debug('globals loaded:', window.jQuery, window.Backbone, '...');\n\n// these are galaxy globals not defined in the provider (although they could be - but why encourage that?)\nwindow.panels = require(\"layout/panel\");\n// using extend bc there are multiple fns/objs to decorate the window with\n_.extend(window, require(\"layout/modal\"));\nwindow.async_save_text = require(\"utils/async-save-text\");\nimport POPUPMENU from \"ui/popupmenu\";\nwindow.make_popupmenu = POPUPMENU.make_popupmenu;\nwindow.make_popup_menus = POPUPMENU.make_popup_menus;\nwindow.init_tag_click_function = require(\"ui/autocom_tagging\");\nimport TOURS from \"mvc/tours\";\nimport QUERY_STRING from \"utils/query-string-parsing\";\n// console.debug( 'galaxy globals loaded' );\n\n// ============================================================================\n// jquery on document ready\n// ============================================================================\n// Replace select box with a text input box + autocomplete.\nfunction replace_big_select_inputs(min_length, max_length, select_elts) {\n    function refresh_select2(element) {\n        var select_elt = $(element);\n        var options = {\n            placeholder: \"Click to select\",\n            closeOnSelect: !select_elt.is(\"[MULTIPLE]\"),\n            dropdownAutoWidth: true,\n            containerCssClass: \"select2-minwidth\"\n        };\n        return element.select2(options);\n    }\n\n    // To do replace, the select2 plugin must be loaded.\n    if (!jQuery.fn.select2) {\n        return;\n    }\n\n    // Set default for min_length and max_length\n    if (min_length === undefined) {\n        min_length = 20;\n    }\n    if (max_length === undefined) {\n        max_length = 3000;\n    }\n\n    select_elts = select_elts || $(\"select\");\n\n    select_elts.each(function() {\n        var select_elt = $(this).not(\"[multiple]\");\n        // Make sure that options is within range.\n        var num_options = select_elt.find(\"option\").length;\n        if (num_options < min_length || num_options > max_length) {\n            return;\n        }\n\n        if (select_elt.hasClass(\"no-autocomplete\")) {\n            return;\n        }\n\n        /* Replaced jQuery.autocomplete with select2, notes:\n         * - multiple selects are supported\n         * - the original element is updated with the value, convert_to_values should not be needed\n         * - events are fired when updating the original element, so refresh_on_change should just work\n         *\n         * - should we still sort dbkey fields here?\n         */\n        refresh_select2(select_elt);\n    });\n}\n\n// Initialize refresh events.\nfunction init_refresh_on_change() {\n    $(\"select[refresh_on_change='true']\")\n        .off(\"change\")\n        .change(function() {\n            var select_field = $(this),\n                select_val = select_field.val(),\n                refresh = false,\n                ref_on_change_vals = select_field.attr(\n                    \"refresh_on_change_values\"\n                );\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(\",\");\n                var last_selected_value = select_field.attr(\n                    \"last_selected_value\"\n                );\n                if (\n                    $.inArray(select_val, ref_on_change_vals) === -1 &&\n                    $.inArray(last_selected_value, ref_on_change_vals) === -1\n                ) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            $(document).trigger(\"convert_to_values\"); // Convert autocomplete text to values\n            select_field.get(0).form.submit();\n        });\n\n    // checkboxes refresh on change\n    $(\":checkbox[refresh_on_change='true']\")\n        .off(\"click\")\n        .click(function() {\n            var select_field = $(this),\n                select_val = select_field.val(),\n                refresh = false,\n                ref_on_change_vals = select_field.attr(\n                    \"refresh_on_change_values\"\n                );\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(\",\");\n                var last_selected_value = select_field.attr(\n                    \"last_selected_value\"\n                );\n                if (\n                    $.inArray(select_val, ref_on_change_vals) === -1 &&\n                    $.inArray(last_selected_value, ref_on_change_vals) === -1\n                ) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            select_field.get(0).form.submit();\n        });\n\n    // Links with confirmation\n    $(\"a[confirm]\")\n        .off(\"click\")\n        .click(function() {\n            return confirm($(this).attr(\"confirm\"));\n        });\n}\n// used globally in grid-view\nwindow.init_refresh_on_change = init_refresh_on_change;\n\n$(document).ready(function() {\n    // Refresh events for form fields.\n    init_refresh_on_change();\n\n    // Tooltips\n    if ($.fn.tooltip) {\n        // Put tooltips below items in panel header so that they do not overlap masthead.\n        $(\".unified-panel-header [title]\").tooltip({ placement: \"bottom\" });\n\n        // default tooltip initialization, it will follow the data-placement tag for tooltip location\n        // and fallback to 'top' if not present\n        $(\"[title]\").tooltip();\n    }\n    // Make popup menus.\n    make_popup_menus();\n\n    // Replace big selects.\n    replace_big_select_inputs(20, 1500);\n\n    // If galaxy_main frame does not exist and link targets galaxy_main,\n    // add use_panels=True and set target to self.\n    $(\"a\").click(function() {\n        var anchor = $(this);\n        var galaxy_main_exists = parent.frames && parent.frames.galaxy_main;\n        if (anchor.attr(\"target\") == \"galaxy_main\" && !galaxy_main_exists) {\n            var href = anchor.attr(\"href\");\n            if (href.indexOf(\"?\") == -1) {\n                href += \"?\";\n            } else {\n                href += \"&\";\n            }\n            href += \"use_panels=True\";\n            anchor.attr(\"href\", href);\n            anchor.attr(\"target\", \"_self\");\n        }\n        return anchor;\n    });\n\n    var et = JSON.parse(sessionStorage.getItem(\"activeGalaxyTour\"));\n    if (et) {\n        et = TOURS.hooked_tour_from_data(et);\n        if (et && et.steps) {\n            if (window && window.self === window.top) {\n                // Only kick off a new tour if this is the toplevel window (non-iframe).  This\n                // functionality actually *could* be useful, but we'd need to handle it better and\n                // come up with some design guidelines for tours jumping between windows.\n                // Disabling for now.\n                var tour = new Tour(\n                    _.extend(\n                        {\n                            steps: et.steps\n                        },\n                        TOURS.tour_opts\n                    )\n                );\n                tour.init();\n                tour.restart();\n            }\n        }\n    }\n\n    function onloadWebhooks() {\n        if (Galaxy.root !== undefined) {\n            // Load all webhooks with the type 'onload'\n            $.getJSON(Galaxy.root + \"api/webhooks/onload/all\", function(\n                webhooks\n            ) {\n                _.each(webhooks, function(webhook) {\n                    if (webhook.activate && webhook.script) {\n                        $(\"<script/>\", { type: \"text/javascript\" })\n                            .text(webhook.script)\n                            .appendTo(\"head\");\n                        $(\"<style/>\", { type: \"text/css\" })\n                            .text(webhook.styles)\n                            .appendTo(\"head\");\n                    }\n                });\n            });\n        } else {\n            setTimeout(onloadWebhooks, 100);\n        }\n    }\n    onloadWebhooks();\n});\n"]}