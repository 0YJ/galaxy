{"version":3,"sources":["admin.toolshed.js"],"names":["AdminToolshedRouter","Backbone","Router","extend","initialize","this","routesHit","history","on","bind","trackPageview","routes","","sheds","queue","workflows","status/r/:repositories","category/s/:tool_shed/c/:cateory_id","repository/s/:tool_shed/r/:repository_id","back","status","trigger","replace","GalaxyAdminToolshedApp","View","app_config","known_views","Galaxy","admintoolshedapp","admin_toolshed_router","adminRepoQueueView","reDraw","_repositoryQueueView2","default","RepoQueueView","adminShedListView","ShedListView","tool_shed","adminShedCategoriesView","_categoriesView2","CategoryView","category_id","adminShedCategoryView","_repositoriesView2","Category","repository_id","_repositoryView2","RepoDetails","repositories","split","adminRepoStatusView","_repoStatusView2","RepoStatus","adminWorkflowsView","_workflowsView2","Workflows","GalaxyApp"],"mappings":"ocAOIA,EAAsBC,SAASC,OAAOC,QACtCC,WAAY,WACRC,KAAKC,UAAY,EAEjBL,SAASM,QAAQC,GACb,QACA,WACIH,KAAKC,aAETD,MAEJA,KAAKI,KAAK,QAASJ,KAAKK,gBAG5BC,QACIC,GAAI,YACJC,MAAO,YACPC,MAAO,QACPC,UAAW,YACXC,yBAA0B,SAnB9BhB,OAAAA,SACAI,0BAAY,aACRa,sCAAA,eACAC,2CAAA,cAaAL,KAAAA,WACAC,KAAAA,UAHI,EAIJC,OAAAA,QAAWI,OAEXC,KAAAA,SAAQ,KANJC,SAAA,EAAAC,SAAA,OA2BRC,EAAyBtB,SAASuB,KAAKrB,QAfvCsB,YAiBIC,aACI,YACA,QACA,SACA,aAfRP,eACI,gBAICf,WAAA,WACJuB,OAAAC,iBAAAvB,KAtCLA,KAAAwB,sBAAA,IAAA7B,EAyCIuB,KAAAA,sBAAyBtB,GAAAA,cAAA,WACzBwB,OAAYG,iBAAAE,mBACRJ,OAAAA,iBAEII,mBAEAC,SAcIJ,OAAOC,iBAAiBE,mBAAqB,IAAIE,EAAAC,QAAmBC,gBAN5E7B,KAAAwB,sBAAKA,GAAL,kBAAiC7B,WAUzB2B,OAAOC,iBAAiBO,kBARhCR,OAAKE,iBAAsBrB,kBAAkBuB,SAErCJ,OAAAA,iBAAOC,kBAAiBE,IAAmBC,EAAAA,QAA3CK,eAGH/B,KAAAwB,sBAAArB,GAAA,mBAAA,SAAA6B,GALLV,OAAAC,iBAAAU,wBAOAX,OAAKE,iBAAsBrB,wBAAsBuB,QACzCJ,UAAOC,EAAAA,QAAiBO,MAAAA,SAGxBR,OAAAA,iBAAOC,wBAAqC,IAAIW,EAAAN,QAAAO,cACnDH,UAAAA,EAAAf,QAAA,MAAA,WAIGK,KAAAA,sBAAOC,GAAAA,qBAAiBU,SACpBD,EADmDI,GAIvDd,OAAAA,iBAAOC,sBAGVD,OAAAC,iBAAAc,sBAAAX,QATLM,UAAAA,EAAAf,QAAA,MAAA,OAWKO,YAAAA,IAMOQ,OAAAA,iBAAWA,sBAAyB,IADaM,EAAAV,QAAAW,UAArDP,UAAAA,EAAAf,QAAA,MAAA,OAIGmB,YAAAA,MAONpC,KAAAwB,sBAAArB,GAAA,mBAAA,SACJ6B,EACDQ,GAKQlB,OAAAA,iBAAOC,oBACHS,OAAAA,iBAAWA,oBAAyBN,QACpCc,UAAAA,EAAeA,QAAAA,MAAAA,OAFgCA,cAAnDA,IAOQR,OAAAA,iBAAWA,oBAAyB,IADxCS,EAAAb,QAAAc,aADJV,UAAAA,EAAAf,QAAA,MAAA,OAMHuB,cAAAA,MAKOG,KAAAA,sBAAAA,GAAcA,eAAaC,SAAbD,GADiCrB,OAAnDC,iBAAAsB,oBAGHvB,OAAMC,iBAAAsB,oBAAAnB,QACHJ,aAAOC,EAAiBsB,MAAAA,OAKhCvB,OAAKE,iBAAsBrB,oBAAsB,IAAA2C,EAAAlB,QAAWmB,YACpDzB,aAAOC,EAAiByB,MAAAA,SAI3BhD,KAAAwB,sBAAArB,GAAA,kBAAA,WALLmB,OAAAC,iBAAAyB,mBAEQ1B,OAAOC,iBAAiByB,mBAAmBtB,SAOtDJ,OAAAC,iBAAAyB,mBAAA,IAAAC,EAAArB,QAAAsB,YAIDC,SAAAA,QAAWjC,OAAAA,WAAAA,kBAAXiC,UAAWjC","file":"../scripts/admin.toolshed.js","sourcesContent":["import mod_shed_list_view from \"mvc/toolshed/shed-list-view\";\nimport mod_categories_view from \"mvc/toolshed/categories-view\";\nimport mod_repositories_view from \"mvc/toolshed/repositories-view\";\nimport mod_repository_view from \"mvc/toolshed/repository-view\";\nimport mod_repoqueue_view from \"mvc/toolshed/repository-queue-view\";\nimport mod_repo_status_view from \"mvc/toolshed/repo-status-view\";\nimport mod_workflows_view from \"mvc/toolshed/workflows-view\";\nvar AdminToolshedRouter = Backbone.Router.extend({\n    initialize: function() {\n        this.routesHit = 0;\n        // keep count of number of routes handled by the application\n        Backbone.history.on(\n            \"route\",\n            function() {\n                this.routesHit++;\n            },\n            this\n        );\n        this.bind(\"route\", this.trackPageview);\n    },\n\n    routes: {\n        \"\": \"toolsheds\",\n        sheds: \"toolsheds\",\n        queue: \"queue\",\n        workflows: \"workflows\",\n        \"status/r/:repositories\": \"status\",\n        status: \"status\",\n        \"categories/s/:tool_shed\": \"categories\",\n        \"category/s/:tool_shed/c/:cateory_id\": \"repositories\",\n        \"repository/s/:tool_shed/r/:repository_id\": \"repository\"\n    },\n\n    /**\n        * If more than one route has been hit the user did not land on current\n        * page directly so we can go back safely. Otherwise go to the home page.\n        * Use replaceState if available so the navigation doesn't create an\n        * extra history entry\n        */\n    back: function() {\n        if (this.routesHit > 1) {\n            window.history.back();\n        } else {\n            this.navigate(\"#\", { trigger: true, replace: true });\n        }\n    }\n});\n\nvar GalaxyAdminToolshedApp = Backbone.View.extend({\n    app_config: {\n        known_views: [\n            \"toolsheds\",\n            \"queue\",\n            \"status\",\n            \"categories\",\n            \"repositories\",\n            \"repoository\"\n        ]\n    },\n\n    initialize: function() {\n        Galaxy.admintoolshedapp = this;\n        this.admin_toolshed_router = new AdminToolshedRouter();\n\n        this.admin_toolshed_router.on(\"route:queue\", function() {\n            if (Galaxy.admintoolshedapp.adminRepoQueueView) {\n                Galaxy.admintoolshedapp.adminRepoQueueView.reDraw();\n            } else {\n                Galaxy.admintoolshedapp.adminRepoQueueView = new mod_repoqueue_view.RepoQueueView();\n            }\n        });\n        this.admin_toolshed_router.on(\"route:toolsheds\", function() {\n            if (Galaxy.admintoolshedapp.adminShedListView) {\n                Galaxy.admintoolshedapp.adminShedListView.reDraw();\n            } else {\n                Galaxy.admintoolshedapp.adminShedListView = new mod_shed_list_view.ShedListView();\n            }\n        });\n        this.admin_toolshed_router.on(\"route:categories\", function(tool_shed) {\n            if (Galaxy.admintoolshedapp.adminShedCategoriesView) {\n                Galaxy.admintoolshedapp.adminShedCategoriesView.reDraw({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\")\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminShedCategoriesView = new mod_categories_view.CategoryView(\n                    { tool_shed: tool_shed.replace(/\\//g, \"%2f\") }\n                );\n            }\n        });\n        this.admin_toolshed_router.on(\"route:repositories\", function(\n            tool_shed,\n            category_id\n        ) {\n            if (Galaxy.admintoolshedapp.adminShedCategoryView) {\n                Galaxy.admintoolshedapp.adminShedCategoryView.reDraw({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    category_id: category_id\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminShedCategoryView = new mod_repositories_view.Category(\n                    {\n                        tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                        category_id: category_id\n                    }\n                );\n            }\n        });\n        this.admin_toolshed_router.on(\"route:repository\", function(\n            tool_shed,\n            repository_id\n        ) {\n            if (Galaxy.admintoolshedapp.adminRepositoryView) {\n                Galaxy.admintoolshedapp.adminRepositoryView.reDraw({\n                    tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                    repository_id: repository_id\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminRepositoryView = new mod_repository_view.RepoDetails(\n                    {\n                        tool_shed: tool_shed.replace(/\\//g, \"%2f\"),\n                        repository_id: repository_id\n                    }\n                );\n            }\n        });\n        this.admin_toolshed_router.on(\"route:status\", function(repositories) {\n            if (Galaxy.admintoolshedapp.adminRepoStatusView) {\n                Galaxy.admintoolshedapp.adminRepoStatusView.reDraw({\n                    repositories: repositories.split(\"|\")\n                });\n            } else {\n                Galaxy.admintoolshedapp.adminRepoStatusView = new mod_repo_status_view.RepoStatus(\n                    { repositories: repositories.split(\"|\") }\n                );\n            }\n        });\n        this.admin_toolshed_router.on(\"route:workflows\", function() {\n            if (Galaxy.admintoolshedapp.adminWorkflowsView) {\n                Galaxy.admintoolshedapp.adminWorkflowsView.reDraw();\n            } else {\n                Galaxy.admintoolshedapp.adminWorkflowsView = new mod_workflows_view.Workflows();\n            }\n        });\n\n        Backbone.history.start({ pushState: false });\n    }\n});\n\nexport default {\n    GalaxyApp: GalaxyAdminToolshedApp\n};\n"]}