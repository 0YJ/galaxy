{"version":3,"sources":["mvc/base-mvc.js"],"names":["define","_","Backbone","addLogging","_l","mixin","mixinHash1","propsHash","args","Array","prototype","slice","call","arguments","lastArg","pop","unshift","defaults","apply","wrapTemplate","template","jsonNamespace","templateFn","join","json","view","templateVars","buildComparator","attribute_name","options","ascending","a","b","get","LoggableMixin","logger","_logNamespace","SessionStorageModel","Model","extend","initialize","initialAttrs","this","_checkEnabledSessionStorage","id","Error","existing","isNew","_read","clear","silent","save","on","window","sessionStorage","length","err","alert","sync","method","model","trigger","returned","_create","_update","_delete","undefined","success","error","toJSON","set","setItem","JSON","stringify","DOMException","navigator","userAgent","indexOf","parse","getItem","removeItem","hasOwnProperty","_log","toString","omit","SearchableModelMixin","searchAttributes","searchAliases","searchAttribute","attrKey","searchFor","attrVal","isArray","_searchArrayAttribute","toLowerCase","array","any","elem","search","filter","key","matches","term","split","matchesAll","terms","match","s","all","replace","HiddenUntilActivatedViewMixin","hiddenUntilActivated","$activator","HUAVOptions","$elementShown","$el","showFn","jQuery","toggle","showSpeed","hasBeenShown","is","hidden","isHidden","ev","isFunction","onshowFirstTime","onshow","onhide","DraggableViewMixin","attributes","draggable","$dragHandle","$","toggleDraggable","draggableOff","draggableOn","dragStartHandler","bind","_dragStartHandler","dragEndHandler","_dragEndHandler","handle","attr","addEventListener","removeEventListener","event","dataTransfer","effectAllowed","setData","SelectableViewMixin","selectable","selected","$selector","_renderSelected","find","toggleClass","toggleSelector","hideSelector","showSelector","speed","fxSpeed","show","hide","toggleSelect","deselect","select"],"mappings":"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","file":"../../scripts/mvc/base-mvc.js","sourcesContent":["define([\n    'libs/underscore',\n    'libs/backbone',\n    'utils/add-logging',\n    'utils/localization'\n], function( _, Backbone, addLogging, _l ){\n'use strict';\n\n//==============================================================================\n/** @class Mixin to add logging capabilities to an object.\n *      Designed to allow switching an objects log output off/on at one central\n *      statement. Can be used with plain browser console (or something more\n *      complex like an AJAX logger).\n *  <br />NOTE: currently only uses the console.debug log function\n *  (as opposed to debug, error, warn, etc.)\n *  @name LoggableMixin\n *\n *  @example\n *  // Add to your models/views at the definition using chaining:\n *      var MyModel = Backbone.Model.extend( LoggableMixin ).extend({ // ... });\n *\n *  // or - more explicitly AFTER the definition:\n *      var MyModel = Backbone.Model.extend({\n *          logger  : console\n *          // ...\n *          this.log( '$#%& it! - broken already...' );\n *      })\n *      _.extend( MyModel.prototype, LoggableMixin )\n *\n */\nvar LoggableMixin =  /** @lends LoggableMixin# */{\n    // replace null with console (if available) to see all logs for a particular view/model\n    /** The logging object whose log function will be used to output\n     *      messages. Null will supress all logging. Commonly set to console.\n     */\n    logger        : null,\n    /** @type {String} a namespace for filtering/focusing log output */\n    _logNamespace : '.',\n\n};\naddLogging( LoggableMixin );\n\n\n//==============================================================================\n/** Backbone model that syncs to the browser's sessionStorage API.\n *      This all largely happens behind the scenes and no special calls are required.\n */\nvar SessionStorageModel = Backbone.Model.extend({\n    initialize : function( initialAttrs ){\n        // check for sessionStorage and error if no id is provided\n        this._checkEnabledSessionStorage();\n        if( !initialAttrs.id ){\n            throw new Error( 'SessionStorageModel requires an id in the initial attributes' );\n        }\n        this.id = initialAttrs.id;\n\n        // load existing from storage (if any), clear any attrs set by bbone before init is called,\n        //  layer initial over existing and defaults, and save\n        var existing = ( !this.isNew() )?( this._read( this ) ):( {} );\n        this.clear({ silent: true });\n        this.save( _.extend( {}, this.defaults, existing, initialAttrs ), { silent: true });\n\n        // save on any change to it immediately\n        this.on( 'change', function(){\n            this.save();\n        });\n    },\n\n    _checkEnabledSessionStorage : function(){\n        try {\n            return window.sessionStorage.length >= 0;\n        } catch( err ){\n            alert( 'Please enable cookies in your browser for this Galaxy site' );\n            return false;\n        }\n    },\n\n    /** override of bbone sync to save to sessionStorage rather than REST\n     *      bbone options (success, errror, etc.) should still apply\n     */\n    sync : function( method, model, options ){\n        if( !options.silent ){\n            model.trigger( 'request', model, {}, options );\n        }\n        var returned = {};\n        switch( method ){\n            case 'create'   : returned = this._create( model ); break;\n            case 'read'     : returned = this._read( model );   break;\n            case 'update'   : returned = this._update( model ); break;\n            case 'delete'   : returned = this._delete( model ); break;\n        }\n        if( returned !== undefined || returned !== null ){\n            if( options.success ){ options.success(); }\n        } else {\n            if( options.error ){ options.error(); }\n        }\n        return returned;\n    },\n\n    /** set storage to the stringified item */\n    _create : function( model ){\n        try {\n            var json = model.toJSON(),\n                set = sessionStorage.setItem( model.id, JSON.stringify( json ) );\n            return ( set === null )?( set ):( json );\n        // DOMException is thrown in Safari if in private browsing mode and sessionStorage is attempted:\n        // http://stackoverflow.com/questions/14555347\n        // TODO: this could probably use a more general soln - like detecting priv. mode + safari => non-ajaxing Model\n        } catch( err ){\n            if( !( ( err instanceof DOMException ) && ( navigator.userAgent.indexOf(\"Safari\") > -1 ) ) ){\n                throw err;\n            }\n        }\n        return null;\n    },\n\n    /** read and parse json from storage */\n    _read : function( model ){\n        return JSON.parse( sessionStorage.getItem( model.id ) );\n    },\n\n    /** set storage to the item (alias to create) */\n    _update : function( model ){\n        return model._create( model );\n    },\n\n    /** remove the item from storage */\n    _delete : function( model ){\n        return sessionStorage.removeItem( model.id );\n    },\n\n    /** T/F whether sessionStorage contains the model's id (data is present) */\n    isNew : function(){\n        return !sessionStorage.hasOwnProperty( this.id );\n    },\n\n    _log : function(){\n        return JSON.stringify( this.toJSON(), null, '  ' );\n    },\n    toString : function(){\n        return 'SessionStorageModel(' + this.id + ')';\n    }\n\n});\n(function(){\n    SessionStorageModel.prototype = _.omit( SessionStorageModel.prototype, 'url', 'urlRoot' );\n}());\n\n\n//==============================================================================\n/** Function that allows mixing of hashs into bbone MVC while showing the mixins first\n *      (before the more local class overrides/hash).\n *      Basically, a simple reversal of param order on _.defaults() - to show mixins in top of definition.\n *  @example:\n *      var NewModel = Something.extend( mixin( MyMixinA, MyMixinB, { ... myVars : ... }) );\n *\n *  NOTE: this does not combine any hashes (like events, etc.) and you're expected to handle that\n */\nfunction mixin( mixinHash1, /* mixinHash2, etc: ... variadic */ propsHash ){\n    var args = Array.prototype.slice.call( arguments, 0 ),\n        lastArg = args.pop();\n    args.unshift( lastArg );\n    return _.defaults.apply( _, args );\n}\n\n\n//==============================================================================\n/** A mixin for models that allow T/F/Matching to their attributes - useful when\n *      searching or filtering collections of models.\n * @example:\n *      see hda-model for searchAttribute and searchAliases definition examples.\n *      see history-contents.matches for how collections are filtered\n *      and see readonly-history-view.searchHdas for how user input is connected to the filtering\n */\nvar SearchableModelMixin = {\n\n    /** what attributes of an HDA will be used in a text search */\n    searchAttributes : [\n        // override\n    ],\n\n    /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n    searchAliases : {\n        // override\n    },\n\n    /** search the attribute with key attrKey for the string searchFor; T/F if found */\n    searchAttribute : function( attrKey, searchFor ){\n        var attrVal = this.get( attrKey );\n        //this.debug( 'searchAttribute', attrKey, attrVal, searchFor );\n        // bail if empty searchFor or unsearchable values\n        if( !searchFor\n        ||  ( attrVal === undefined || attrVal === null ) ){\n            return false;\n        }\n        // pass to sep. fn for deep search of array attributes\n        if( _.isArray( attrVal ) ){ return this._searchArrayAttribute( attrVal, searchFor ); }\n        return ( attrVal.toString().toLowerCase().indexOf( searchFor.toLowerCase() ) !== -1 );\n    },\n\n    /** deep(er) search for array attributes; T/F if found */\n    _searchArrayAttribute : function( array, searchFor ){\n        //this.debug( '_searchArrayAttribute', array, searchFor );\n        searchFor = searchFor.toLowerCase();\n        //precondition: searchFor has already been validated as non-empty string\n        //precondition: assumes only 1 level array\n        //TODO: could possibly break up searchFor more (CSV...)\n        return _.any( array, function( elem ){\n            return ( elem.toString().toLowerCase().indexOf( searchFor.toLowerCase() ) !== -1 );\n        });\n    },\n\n    /** search all searchAttributes for the string searchFor,\n     *      returning a list of keys of attributes that contain searchFor\n     */\n    search : function( searchFor ){\n        var model = this;\n        return _.filter( this.searchAttributes, function( key ){\n            return model.searchAttribute( key, searchFor );\n        });\n    },\n\n    /** alias of search, but returns a boolean; accepts attribute specifiers where\n     *      the attributes searched can be narrowed to a single attribute using\n     *      the form: matches( 'genome_build=hg19' )\n     *      (the attribute keys allowed can also be aliases to the true attribute key;\n     *          see searchAliases above)\n     *  @param {String} term   plain text or ATTR_SPECIFIER sep. key=val pair\n     *  @returns {Boolean} was term found in (any) attribute(s)\n     */\n    matches : function( term ){\n        var ATTR_SPECIFIER = '=',\n            split = term.split( ATTR_SPECIFIER );\n        // attribute is specified - search only that\n        if( split.length >= 2 ){\n            var attrKey = split[0];\n            attrKey = this.searchAliases[ attrKey ] || attrKey;\n            return this.searchAttribute( attrKey, split[1] );\n        }\n        // no attribute is specified - search all attributes in searchAttributes\n        return !!this.search( term ).length;\n    },\n\n    /** an implicit AND search for all terms; IOW, a model must match all terms given\n     *      where terms is a whitespace separated value string.\n     *      e.g. given terms of: 'blah bler database=hg19'\n     *          an HDA would have to have attributes containing blah AND bler AND a genome_build == hg19\n     *      To include whitespace in terms: wrap the term in double quotations (name=\"blah bler\").\n     */\n    matchesAll : function( terms ){\n        var model = this;\n        // break the terms up by whitespace and filter out the empty strings\n        terms = terms.match( /(\".*\"|\\w*=\".*\"|\\S*)/g ).filter( function( s ){ return !!s; });\n        return _.all( terms, function( term ){\n            term = term.replace( /\"/g, '' );\n            return model.matches( term );\n        });\n    }\n};\n\n\n//==============================================================================\n/** A view that renders hidden and shows when some activator is clicked.\n *      options:\n *          showFn: the effect used to show/hide the View (defaults to jq.toggle)\n *          $elementShown: some jqObject (defaults to this.$el) to be shown/hidden\n *          onShowFirstTime: fn called the first time the view is shown\n *          onshow: fn called every time the view is shown\n *          onhide: fn called every time the view is hidden\n *      events:\n *          hiddenUntilActivated:shown (the view is passed as an arg)\n *          hiddenUntilActivated:hidden (the view is passed as an arg)\n *      instance vars:\n *          view.hidden {boolean} is the view in the hidden state\n */\nvar HiddenUntilActivatedViewMixin = /** @lends hiddenUntilActivatedMixin# */{\n//TODO: since this is a mixin, consider moving toggle, hidden into HUAVOptions\n\n    /** call this in your initialize to set up the mixin\n     *  @param {jQuery} $activator the 'button' that's clicked to show/hide the view\n     *  @param {Object} hash with mixin options\n     */\n    hiddenUntilActivated : function( $activator, options ){\n        // call this in your view's initialize fn\n        options = options || {};\n//TODO: flesh out options - show them all here\n        this.HUAVOptions = {\n            $elementShown   : this.$el,\n            showFn          : jQuery.prototype.toggle,\n            showSpeed       : 'fast'\n        };\n        _.extend( this.HUAVOptions, options || {});\n        /** has this been shown already (and onshowFirstTime called)? */\n        this.HUAVOptions.hasBeenShown = this.HUAVOptions.$elementShown.is( ':visible' );\n        this.hidden = this.isHidden();\n\n        if( $activator ){\n            var mixin = this;\n            $activator.on( 'click', function( ev ){\n                mixin.toggle( mixin.HUAVOptions.showSpeed );\n            });\n        }\n    },\n\n//TODO:?? remove? use .hidden?\n    /** returns T/F if the view is hidden */\n    isHidden : function(){\n        return ( this.HUAVOptions.$elementShown.is( ':hidden' ) );\n    },\n\n    /** toggle the hidden state, show/hide $elementShown, call onshow/hide, trigger events */\n    toggle : function(){\n//TODO: more specific name - toggle is too general\n        // can be called manually as well with normal toggle arguments\n        //TODO: better as a callback (when the show/hide is actually done)\n        // show\n        if( this.hidden ){\n            // fire the optional fns on the first/each showing - good for render()\n            if( !this.HUAVOptions.hasBeenShown ){\n                if( _.isFunction( this.HUAVOptions.onshowFirstTime ) ){\n                    this.HUAVOptions.hasBeenShown = true;\n                    this.HUAVOptions.onshowFirstTime.call( this );\n                }\n            }\n            if( _.isFunction( this.HUAVOptions.onshow ) ){\n                this.HUAVOptions.onshow.call( this );\n                this.trigger( 'hiddenUntilActivated:shown', this );\n            }\n            this.hidden = false;\n\n        // hide\n        } else {\n            if( _.isFunction( this.HUAVOptions.onhide ) ){\n                this.HUAVOptions.onhide.call( this );\n                this.trigger( 'hiddenUntilActivated:hidden', this );\n            }\n            this.hidden = true;\n        }\n        return this.HUAVOptions.showFn.apply( this.HUAVOptions.$elementShown, arguments );\n    }\n};\n\n\n//==============================================================================\n/** Mixin for views that can be dragged and dropped\n *      Allows for the drag behavior to be turned on/off, setting/removing jQuery event\n *          handlers each time.\n *      dataTransfer data is set to the JSON string of the view's model.toJSON\n *      Override '$dragHandle' to define the draggable DOM sub-element.\n */\nvar DraggableViewMixin = {\n\n    /** set up instance vars to track whether this view is currently draggable */\n    initialize : function( attributes ){\n        /** is the body of this hda view expanded/not? */\n        this.draggable  = attributes.draggable || false;\n    },\n\n    /** what part of the view's DOM triggers the dragging */\n    $dragHandle : function(){\n//TODO: make abstract/general - move this to listItem\n        // override to the element you want to be your view's handle\n        return this.$( '.title-bar' );\n    },\n\n    /** toggle whether this view is draggable */\n    toggleDraggable : function(){\n        if( this.draggable ){\n            this.draggableOff();\n        } else {\n            this.draggableOn();\n        }\n    },\n\n    /** allow the view to be dragged, set up event handlers */\n    draggableOn : function(){\n        this.draggable = true;\n        this.dragStartHandler = _.bind( this._dragStartHandler, this );\n        this.dragEndHandler   = _.bind( this._dragEndHandler,   this );\n\n        var handle = this.$dragHandle().attr( 'draggable', true ).get(0);\n        handle.addEventListener( 'dragstart', this.dragStartHandler, false );\n        handle.addEventListener( 'dragend',   this.dragEndHandler,   false );\n    },\n\n    /** turn of view dragging and remove event listeners */\n    draggableOff : function(){\n        this.draggable = false;\n        var handle = this.$dragHandle().attr( 'draggable', false ).get(0);\n        handle.removeEventListener( 'dragstart', this.dragStartHandler, false );\n        handle.removeEventListener( 'dragend',   this.dragEndHandler,   false );\n    },\n\n    /** sets the dataTransfer data to the model's toJSON\n     *  @fires draggable:dragstart (bbone event) which is passed the event and this view\n     */\n    _dragStartHandler : function( event ){\n        event.dataTransfer.effectAllowed = 'move';\n        //ASSUMES: this.model\n        //TODO: all except IE: should be 'application/json', IE: must be 'text'\n        event.dataTransfer.setData( 'text', JSON.stringify( this.model.toJSON() ) );\n        this.trigger( 'draggable:dragstart', event, this );\n        return false;\n    },\n\n    /** handle the dragend\n     *  @fires draggable:dragend (bbone event) which is passed the event and this view\n     */\n    _dragEndHandler : function( event ){\n        this.trigger( 'draggable:dragend', event, this );\n        return false;\n    }\n};\n\n\n//==============================================================================\n/** Mixin that allows a view to be selected (gen. from a list).\n *      Selection controls ($selector) may be hidden/shown/toggled.\n *          The bbone event 'selectable' is fired when the controls are shown/hidden (passed T/F).\n *      Default rendering is a font-awesome checkbox.\n *      Default selector is '.selector' within the view's $el.\n *      The bbone events 'selected' and 'de-selected' are fired when the $selector is clicked.\n *          Both events are passed the view and the (jQuery) event.\n */\nvar SelectableViewMixin = {\n\n    /** Set up instance state vars for whether the selector is shown and whether the view has been selected */\n    initialize : function( attributes ){\n        /** is the view currently in selection mode? */\n        this.selectable = attributes.selectable || false;\n        /** is the view currently selected? */\n        this.selected   = attributes.selected || false;\n    },\n\n    /** $el sub-element where the selector is rendered and what can be clicked to select. */\n    $selector : function(){\n        return this.$( '.selector' );\n    },\n\n    /** How the selector is rendered - defaults to font-awesome checkbox */\n    _renderSelected : function(){\n        // override\n        this.$selector().find( 'span' )\n            .toggleClass( 'fa-check-square-o', this.selected ).toggleClass( 'fa-square-o', !this.selected );\n    },\n\n    /** Toggle whether the selector is shown */\n    toggleSelector : function(){\n//TODO: use this.selectable\n        if( !this.$selector().is( ':visible' ) ){\n            this.showSelector();\n        } else {\n            this.hideSelector();\n        }\n    },\n\n    /** Display the selector control.\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed true (IOW, the selector is shown) and the view\n     */\n    showSelector : function( speed ){\n        speed = speed !== undefined? speed : this.fxSpeed;\n        // make sure selected state is represented properly\n        this.selectable = true;\n        this.trigger( 'selectable', true, this );\n        this._renderSelected();\n        if( speed ){\n            this.$selector().show( speed );\n        } else {\n            this.$selector().show();\n        }\n    },\n\n    /** remove the selector control\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed false (IOW, the selector is not shown) and the view\n     */\n    hideSelector : function( speed ){\n        speed = speed !== undefined? speed : this.fxSpeed;\n        // reverse the process from showSelect\n        this.selectable = false;\n        this.trigger( 'selectable', false, this );\n        if( speed ){\n            this.$selector().hide( speed );\n        } else {\n            this.$selector().hide();\n        }\n    },\n\n    /** Toggle whether the view is selected */\n    toggleSelect : function( event ){\n        if( this.selected ){\n            this.deselect( event );\n        } else {\n            this.select( event );\n        }\n    },\n\n    /** Select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    select : function( event ){\n        // switch icon, set selected, and trigger event\n        if( !this.selected ){\n            this.trigger( 'selected', this, event );\n            this.selected = true;\n            this._renderSelected();\n        }\n        return false;\n    },\n\n    /** De-select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: de-selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n    deselect : function( event ){\n        // switch icon, set selected, and trigger event\n        if( this.selected ){\n            this.trigger( 'de-selected', this, event );\n            this.selected = false;\n            this._renderSelected();\n        }\n        return false;\n    }\n};\n\n\n//==============================================================================\n/** Return an underscore template fn from an array of strings.\n *  @param {String[]} template      the template strings to compile into the underscore template fn\n *  @param {String} jsonNamespace   an optional namespace for the json data passed in (defaults to 'model')\n *  @returns {Function} the (wrapped) underscore template fn\n *      The function accepts:\n *\n *  The template strings can access:\n *      the json/model hash using model (\"<%- model.myAttr %>) using the jsonNamespace above\n *      _l: the localizer function\n *      view (if passed): ostensibly, the view using the template (handy for view instance vars)\n *      Because they're namespaced, undefined attributes will not throw an error.\n *\n *  @example:\n *      templateBler : BASE_MVC.wrapTemplate([\n *          '<div class=\"myclass <%- mynamespace.modelClass %>\">',\n *              '<span><% print( _l( mynamespace.message ) ); %>:<%= view.status %></span>'\n *          '</div>'\n *      ], 'mynamespace' )\n *\n *  Meant to be called in a View's definition in order to compile only once.\n *\n */\nfunction wrapTemplate( template, jsonNamespace ){\n    jsonNamespace = jsonNamespace || 'model';\n    var templateFn = _.template( template.join( '' ) );\n    return function( json, view ){\n        var templateVars = { view : view || {}, _l : _l };\n        templateVars[ jsonNamespace ] = json || {};\n        return templateFn( templateVars );\n    };\n}\n\n\n//==============================================================================\n/** Return a comparator function for sorted Collections */\nfunction buildComparator( attribute_name, options ){\n    options = options || {};\n    var ascending = options.ascending? 1 : -1;\n    return function __comparator( a, b ){\n        a = a.get( attribute_name );\n        b = b.get( attribute_name );\n        return ( a < b? -1 : ( a > b? 1 : 0 ) ) * ascending;\n    };\n}\n\n\n//==============================================================================\n    return {\n        LoggableMixin                   : LoggableMixin,\n        SessionStorageModel             : SessionStorageModel,\n        mixin                           : mixin,\n        SearchableModelMixin            : SearchableModelMixin,\n        HiddenUntilActivatedViewMixin   : HiddenUntilActivatedViewMixin,\n        DraggableViewMixin              : DraggableViewMixin,\n        SelectableViewMixin             : SelectableViewMixin,\n        wrapTemplate                    : wrapTemplate,\n        buildComparator                 : buildComparator,\n    };\n});\n"]}