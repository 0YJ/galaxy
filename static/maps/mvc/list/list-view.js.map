{"version":3,"sources":["mvc/list/list-view.js"],"names":["ListPanel","Backbone","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","viewClass","_listItem2","ListItemView","collectionClass","Collection","tagName","className","fxSpeed","emptyMsg","_localization2","noneFoundMsg","initialize","attributes","options","logger","this","log","_","has","searchFor","selecting","undefined","lastSelected","dragItems","views","collection","_createDefaultCollection","filters","$scrollContainer","title","_setUpListeners","subtitle","on","error","model","xhr","msg","details","loading","_showLoadingIndicator","_hideLoadingIndicator","once","trigger","_setUpCollectionListeners","_setUpViewListeners","listenTo","update","stopListening","renderAll","changes","added","length","renderItems","first","removed","removeItemView","view:selected","lastSelectedView","ev","selectRange","view","viewFromModelId","selected","id","altKey","showSelectors","push","without","view:de-selected","render","speed","$newRender","_buildNewRender","_setUpBehaviors","debug","_renderSubtitle","_renderSearch","el","_renderControls","_renderTitle","$controls","$","templates","controls","find","replaceWith","$where","queue","next","panel","fadeOut","_swapNewRender","$el","fadeIn","append","children","_renderMultiselectActionMenu","empty","$newMenu","$menu","actions","multiselectActions","join","$actions","map","action","html","click","preventDefault","func","$whereTo","freeViews","parent","shownModels","$list","$messages","_filterCollection","itemModel","_createItemView","ViewClass","_getItemViewClass","_renderEmptyMessage","toggle","filter","bind","_filterItem","self","every","fn","_destroyItemViews","matchesAll","_getItemViewOptions","expanded","_destroyItemView","v","args","prototype","json","_attachItems","contains","draggable","_setUpItemViewListeners","_renderItemView$el","Array","slice","call","arguments","apply","text","getSelectedModels","expand","toJSON","dataTransfer","setData","JSON","stringify","modelIndex","$emptyMessage","_attachView","expandAll","collapseAll","splice","_insertIntoListAt","addItemView","indexOf","prepend","is","useFx","isUndefined","hide","slideDown","show","viewRange","index","viewsWhereModel","$what","eq","after","indexA","indexB","initialVal","viewB","remove","viewFromModel","searchItems","properties","isMatch","viewA","$search","clearSearch","val","searchInput","placeholder","searchPlaceholder","onfirstsearch","_firstSearch","onsearch","hideSelectors","hideSelector","toggleSelectors","force","selectAll","each","deselectAll","deselect","getSelectedViews","THROTTLE_SELECTOR_FX_AT","showSelector","slideUp","indicator","event","scrollPosition","animate","range","scrollToTop","select","scrollToItem","scrollToId","constructor","callback","toString","_loadingIndicator2","controlsTemplate","elTemplate","ModelListPanel","scrollTop","pos","scrollTo","events","click .select-all","click .deselect-all","wrapTemplate","_setUpModelListeners","modelCollectionKey","setModel","freeModel","oldModelId","get","unshift","info","clone"],"mappings":"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","file":"../../../scripts/mvc/list/list-view.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport LoadingIndicator from \"ui/loading-indicator\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/search-input\";\n\nvar logNamespace = \"list\";\n/* ============================================================================\nTODO:\n\n============================================================================ */\n/** @class View for a list/collection of models and the sub-views of those models.\n *      Sub-views must (at least have the interface if not) inherit from ListItemView.\n *      (For a list panel that also includes some 'container' model (History->HistoryContents)\n *      use ModelWithListPanel)\n *\n *  Allows for:\n *      searching collection/sub-views\n *      selecting/multi-selecting sub-views\n *\n *  Currently used:\n *      for dataset/dataset-choice\n *      as superclass of ModelListPanel\n */\nvar ListPanel = Backbone.View.extend(BASE_MVC.LoggableMixin).extend(\n    /** @lends ListPanel.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** class to use for constructing the sub-views */\n        viewClass: LIST_ITEM.ListItemView,\n        /** class to used for constructing collection of sub-view models */\n        collectionClass: Backbone.Collection,\n\n        tagName: \"div\",\n        className: \"list-panel\",\n\n        /** (in ms) that jquery effects will use */\n        fxSpeed: \"fast\",\n\n        /** string to display when the collection has no contents */\n        emptyMsg: _l(\"This list is empty\"),\n        /** displayed when no items match the search terms */\n        noneFoundMsg: _l(\"No matching items found\"),\n        /** string used for search placeholder */\n        searchPlaceholder: _l(\"search\"),\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the list\n     */\n        initialize: function(attributes, options) {\n            attributes = attributes || {};\n            // set the logger if requested\n            if (attributes.logger) {\n                this.logger = attributes.logger;\n            }\n            this.log(this + \".initialize:\", attributes);\n\n            // ---- instance vars\n            /** how quickly should jquery fx run? */\n            this.fxSpeed = _.has(attributes, \"fxSpeed\")\n                ? attributes.fxSpeed\n                : this.fxSpeed;\n\n            /** filters for displaying subviews */\n            this.filters = [];\n            /** current search terms */\n            this.searchFor = attributes.searchFor || \"\";\n\n            /** loading indicator */\n            // this.indicator = new LoadingIndicator( this.$el );\n\n            /** currently showing selectors on items? */\n            this.selecting =\n                attributes.selecting !== undefined\n                    ? attributes.selecting\n                    : true;\n            //this.selecting = false;\n\n            /** cached selected item.model.ids to persist btwn renders */\n            this.selected = attributes.selected || [];\n            /** the last selected item.model.id */\n            this.lastSelected = null;\n\n            /** are sub-views draggable */\n            this.dragItems = attributes.dragItems || false;\n\n            /** list item view class (when passed models) */\n            this.viewClass = attributes.viewClass || this.viewClass;\n\n            /** list item views */\n            this.views = [];\n            /** list item models */\n            this.collection =\n                attributes.collection || this._createDefaultCollection();\n\n            /** filter fns run over collection items to see if they should show in the list */\n            this.filters = attributes.filters || [];\n\n            /** override $scrollContainer fn via attributes - fn should return jq for elem to call scrollTo on */\n            this.$scrollContainer =\n                attributes.$scrollContainer || this.$scrollContainer;\n\n            /** @type {String} generic title */\n            this.title = attributes.title || \"\";\n            /** @type {String} generic subtitle */\n            this.subtitle = attributes.subtitle || \"\";\n\n            this._setUpListeners();\n        },\n\n        // ------------------------------------------------------------------------ listeners\n        /** create any event listeners for the list */\n        _setUpListeners: function() {\n            this.off();\n\n            //TODO: move errorHandler down into list-view from history-view or\n            //  pass to global error handler (Galaxy)\n            this.on({\n                error: function(model, xhr, options, msg, details) {\n                    //this.errorHandler( model, xhr, options, msg, details );\n                    console.error(model, xhr, options, msg, details);\n                },\n                // show hide the loading indicator\n                loading: function() {\n                    this._showLoadingIndicator(\"loading...\", 40);\n                },\n                \"loading-done\": function() {\n                    this._hideLoadingIndicator(40);\n                }\n            });\n\n            // throw the first render up as a diff namespace using once (for outside consumption)\n            this.once(\"rendered\", function() {\n                this.trigger(\"rendered:initial\", this);\n            });\n\n            this._setUpCollectionListeners();\n            this._setUpViewListeners();\n            return this;\n        },\n\n        /** create and return a collection for when none is initially passed */\n        _createDefaultCollection: function() {\n            // override\n            return new this.collectionClass([]);\n        },\n\n        /** listening for collection events */\n        _setUpCollectionListeners: function() {\n            this.log(this + \"._setUpCollectionListeners\", this.collection);\n            this.stopListening(this.collection);\n\n            // bubble up error events\n            this.listenTo(this.collection, {\n                error: function(model, xhr, options, msg, details) {\n                    this.trigger(\"error\", model, xhr, options, msg, details);\n                },\n                update: function(collection, options) {\n                    var changes = options.changes;\n                    // console.info( collection + ', update:', changes, '\\noptions:', options );\n                    // more than one: render everything\n                    if (\n                        options.renderAll ||\n                        changes.added.length + changes.removed.length > 1\n                    ) {\n                        return this.renderItems();\n                    }\n                    // otherwise, let the single add/remove handlers do it\n                    if (changes.added.length === 1) {\n                        return this.addItemView(\n                            _.first(changes.added),\n                            collection,\n                            options\n                        );\n                    }\n                    if (changes.removed.length === 1) {\n                        return this.removeItemView(\n                            _.first(changes.removed),\n                            collection,\n                            options\n                        );\n                    }\n                }\n            });\n            return this;\n        },\n\n        /** listening for sub-view events that bubble up with the 'view:' prefix */\n        _setUpViewListeners: function() {\n            this.log(this + \"._setUpViewListeners\");\n\n            // shift to select a range\n            this.on({\n                \"view:selected\": function(view, ev) {\n                    if (ev && ev.shiftKey && this.lastSelected) {\n                        var lastSelectedView = this.viewFromModelId(\n                            this.lastSelected\n                        );\n                        if (lastSelectedView) {\n                            this.selectRange(view, lastSelectedView);\n                        }\n                    } else if (ev && ev.altKey && !this.selecting) {\n                        this.showSelectors();\n                    }\n                    this.selected.push(view.model.id);\n                    this.lastSelected = view.model.id;\n                },\n\n                \"view:de-selected\": function(view, ev) {\n                    this.selected = _.without(this.selected, view.model.id);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ rendering\n        /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n        render: function(speed) {\n            this.log(this + \".render\", speed);\n            var $newRender = this._buildNewRender();\n            this._setUpBehaviors($newRender);\n            this._queueNewRender($newRender, speed);\n            return this;\n        },\n\n        /** Build a temp div containing the new children for the view's $el. */\n        _buildNewRender: function() {\n            this.debug(this + \"(ListPanel)._buildNewRender\");\n            var $newRender = $(this.templates.el({}, this));\n            this._renderControls($newRender);\n            this._renderTitle($newRender);\n            this._renderSubtitle($newRender);\n            this._renderSearch($newRender);\n            this.renderItems($newRender);\n            return $newRender;\n        },\n\n        /** Build a temp div containing the new children for the view's $el. */\n        _renderControls: function($newRender) {\n            this.debug(this + \"(ListPanel)._renderControls\");\n            var $controls = $(this.templates.controls({}, this));\n            $newRender.find(\".controls\").replaceWith($controls);\n            return $controls;\n        },\n\n        /** return a jQuery object containing the title DOM */\n        _renderTitle: function($where) {\n            //$where = $where || this.$el;\n            //$where.find( '.title' ).replaceWith( ... )\n        },\n\n        /** return a jQuery object containing the subtitle DOM (if any) */\n        _renderSubtitle: function($where) {\n            //$where = $where || this.$el;\n            //$where.find( '.title' ).replaceWith( ... )\n        },\n\n        /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n        _queueNewRender: function($newRender, speed) {\n            speed = speed === undefined ? this.fxSpeed : speed;\n            var panel = this;\n            panel.log(\"_queueNewRender:\", $newRender, speed);\n\n            $(panel).queue(\"fx\", [\n                function(next) {\n                    panel.$el.fadeOut(speed, next);\n                },\n                function(next) {\n                    panel._swapNewRender($newRender);\n                    next();\n                },\n                function(next) {\n                    panel.$el.fadeIn(speed, next);\n                },\n                function(next) {\n                    panel.trigger(\"rendered\", panel);\n                    next();\n                }\n            ]);\n        },\n\n        /** empty out the current el, move the $newRender's children in */\n        _swapNewRender: function($newRender) {\n            this.$el\n                .empty()\n                .attr(\"class\", this.className)\n                .append($newRender.children());\n            if (this.selecting) {\n                this.showSelectors(0);\n            }\n            return this;\n        },\n\n        /** Set up any behaviors, handlers (ep. plugins) that need to be called when the entire view has been built but\n     *  not attached to the page yet.\n     */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            this.$controls($where)\n                .find(\"[title]\")\n                .tooltip();\n            // set up the pupup for actions available when multi selecting\n            this._renderMultiselectActionMenu($where);\n            return this;\n        },\n\n        /** render a menu containing the actions available to sets of selected items */\n        _renderMultiselectActionMenu: function($where) {\n            $where = $where || this.$el;\n            var $menu = $where.find(\".list-action-menu\"),\n                actions = this.multiselectActions();\n            if (!actions.length) {\n                return $menu.empty();\n            }\n\n            var $newMenu = $(\n                [\n                    '<div class=\"list-action-menu btn-group\">',\n                    '<button class=\"list-action-menu-btn btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                    _l(\"For all selected\"),\n                    \"...\",\n                    \"</button>\",\n                    '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n                    \"</ul>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n            var $actions = actions.map(function(action) {\n                var html = [\n                    '<li><a href=\"javascript:void(0);\">',\n                    action.html,\n                    \"</a></li>\"\n                ].join(\"\");\n                return $(html).click(function(ev) {\n                    ev.preventDefault();\n                    return action.func(ev);\n                });\n            });\n            $newMenu.find(\"ul\").append($actions);\n            $menu.replaceWith($newMenu);\n            return $newMenu;\n        },\n\n        /** return a list of plain objects used to render multiselect actions menu. Each object should have:\n     *      html: an html string used as the anchor contents\n     *      func: a function called when the anchor is clicked (passed the click event)\n     */\n        multiselectActions: function() {\n            return [];\n        },\n\n        // ------------------------------------------------------------------------ sub-$element shortcuts\n        /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n        $scrollContainer: function($where) {\n            // override or set via attributes.$scrollContainer\n            return ($where || this.$el).parent().parent();\n        },\n        /** convenience selector for the section that displays the list controls */\n        $controls: function($where) {\n            return ($where || this.$el).find(\"> .controls\");\n        },\n        /** list-items: where the subviews are contained in the view's dom */\n        $list: function($where) {\n            return ($where || this.$el).find(\"> .list-items\");\n        },\n        /** container where list messages are attached */\n        $messages: function($where) {\n            //TODO: controls isn't really correct here (only for ModelListPanel)\n            return ($where || this.$el).find(\"> .controls .messages\");\n        },\n        /** the message displayed when no views can be shown (no views, none matching search) */\n        $emptyMessage: function($where) {\n            return ($where || this.$el).find(\"> .empty-message\");\n        },\n\n        // ------------------------------------------------------------------------ hda sub-views\n        /** render the subviews for the list's collection */\n        renderItems: function($whereTo) {\n            $whereTo = $whereTo || this.$el;\n            var panel = this;\n            panel.log(this + \".renderItems\", $whereTo);\n\n            var $list = panel.$list($whereTo);\n            panel.freeViews();\n            // console.log( 'views freed' );\n            //TODO:? cache and re-use views?\n            var shownModels = panel._filterCollection();\n            // console.log( 'models filtered:', shownModels );\n\n            panel.views = shownModels.map(function(itemModel) {\n                var view = panel._createItemView(itemModel);\n                return view;\n            });\n\n            $list.empty();\n            // console.log( 'list emptied' );\n            if (panel.views.length) {\n                panel._attachItems($whereTo);\n                // console.log( 'items attached' );\n            }\n            panel._renderEmptyMessage($whereTo).toggle(!panel.views.length);\n            panel.trigger(\"views:ready\", panel.views);\n\n            // console.log( '------------------------------------------- rendering items' );\n            return panel.views;\n        },\n\n        /** Filter the collection to only those models that should be currently viewed */\n        _filterCollection: function() {\n            // override this\n            var panel = this;\n            return panel.collection.filter(_.bind(panel._filterItem, panel));\n        },\n\n        /** Should the model be viewable in the current state?\n     *     Checks against this.filters and this.searchFor\n     */\n        _filterItem: function(model) {\n            // override this\n            var panel = this;\n            return (\n                _.every(\n                    panel.filters.map(function(fn) {\n                        return fn.call(model);\n                    })\n                ) &&\n                (!panel.searchFor || model.matchesAll(panel.searchFor))\n            );\n        },\n\n        /** Create a view for a model and set up it's listeners */\n        _createItemView: function(model) {\n            var ViewClass = this._getItemViewClass(model);\n            var options = _.extend(this._getItemViewOptions(model), {\n                model: model\n            });\n            var view = new ViewClass(options);\n            this._setUpItemViewListeners(view);\n            return view;\n        },\n\n        /** Free a view for a model. Note: does not remove it from the DOM */\n        _destroyItemView: function(view) {\n            this.stopListening(view);\n            this.views = _.without(this.views, view);\n        },\n\n        _destroyItemViews: function(view) {\n            var self = this;\n            self.views.forEach(function(v) {\n                self.stopListening(v);\n            });\n            self.views = [];\n            return self;\n        },\n\n        /** free any sub-views the list has */\n        freeViews: function() {\n            return this._destroyItemViews();\n        },\n\n        /** Get the bbone view class based on the model */\n        _getItemViewClass: function(model) {\n            // override this\n            return this.viewClass;\n        },\n\n        /** Get the options passed to the new view based on the model */\n        _getItemViewOptions: function(model) {\n            // override this\n            return {\n                //logger      : this.logger,\n                fxSpeed: this.fxSpeed,\n                expanded: false,\n                selectable: this.selecting,\n                selected: _.contains(this.selected, model.id),\n                draggable: this.dragItems\n            };\n        },\n\n        /** Set up listeners for new models */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            // send all events to the panel, re-namspaceing them with the view prefix\n            this.listenTo(view, \"all\", function() {\n                var args = Array.prototype.slice.call(arguments, 0);\n                args[0] = \"view:\" + args[0];\n                panel.trigger.apply(panel, args);\n            });\n\n            // drag multiple - hijack ev.setData to add all selected items\n            this.listenTo(\n                view,\n                \"draggable:dragstart\",\n                function(ev, v) {\n                    //TODO: set multiple drag data here\n                    var json = {},\n                        selected = this.getSelectedModels();\n                    if (selected.length) {\n                        json = selected.toJSON();\n                    } else {\n                        json = [v.model.toJSON()];\n                    }\n                    ev.dataTransfer.setData(\"text\", JSON.stringify(json));\n                    //ev.dataTransfer.setDragImage( v.el, 60, 60 );\n                },\n                this\n            );\n\n            return panel;\n        },\n\n        /** Attach views in this.views to the model based on $whereTo */\n        _attachItems: function($whereTo) {\n            var self = this;\n            // console.log( '_attachItems:', $whereTo, this.$list( $whereTo ) );\n            //ASSUMES: $list has been emptied\n            this.$list($whereTo).append(\n                this.views.map(function(view) {\n                    return self._renderItemView$el(view);\n                })\n            );\n            return this;\n        },\n\n        /** get a given subview's $el (or whatever may wrap it) and return it */\n        _renderItemView$el: function(view) {\n            // useful to wrap and override\n            return view.render(0).$el;\n        },\n\n        /** render the empty/none-found message */\n        _renderEmptyMessage: function($whereTo) {\n            this.debug(\"_renderEmptyMessage\", $whereTo, this.searchFor);\n            var text = this.searchFor ? this.noneFoundMsg : this.emptyMsg;\n            return this.$emptyMessage($whereTo).text(text);\n        },\n\n        /** expand all item views */\n        expandAll: function() {\n            _.each(this.views, function(view) {\n                view.expand();\n            });\n        },\n\n        /** collapse all item views */\n        collapseAll: function() {\n            _.each(this.views, function(view) {\n                view.collapse();\n            });\n        },\n\n        // ------------------------------------------------------------------------ collection/views syncing\n        /** Add a view (if the model should be viewable) to the panel */\n        addItemView: function(model, collection, options) {\n            // console.log( this + '.addItemView:', model );\n            var panel = this;\n            // get the index of the model in the list of filtered models shown by this list\n            // in order to insert the view in the proper place\n            //TODO:? potentially expensive\n            var modelIndex = panel._filterCollection().indexOf(model);\n            if (modelIndex === -1) {\n                return undefined;\n            }\n            var view = panel._createItemView(model);\n            // console.log( 'adding and rendering:', modelIndex, view.toString() );\n\n            $(view).queue(\"fx\", [\n                function(next) {\n                    // hide the empty message first if only view\n                    if (panel.$emptyMessage().is(\":visible\")) {\n                        panel.$emptyMessage().fadeOut(panel.fxSpeed, next);\n                    } else {\n                        next();\n                    }\n                },\n                function(next) {\n                    panel._attachView(view, modelIndex);\n                    next();\n                }\n            ]);\n            return view;\n        },\n\n        /** internal fn to add view (to both panel.views and panel.$list) */\n        _attachView: function(view, modelIndex, useFx) {\n            // console.log( this + '._attachView:', view, modelIndex, useFx );\n            useFx = _.isUndefined(useFx) ? true : useFx;\n            modelIndex = modelIndex || 0;\n            var panel = this;\n\n            // use the modelIndex to splice into views and insert at the proper index in the DOM\n            panel.views.splice(modelIndex, 0, view);\n            panel._insertIntoListAt(\n                modelIndex,\n                panel._renderItemView$el(view).hide()\n            );\n\n            panel.trigger(\"view:attached\", view);\n            if (useFx) {\n                view.$el.slideDown(panel.fxSpeed, function() {\n                    panel.trigger(\"view:attached:rendered\");\n                });\n            } else {\n                view.$el.show();\n                panel.trigger(\"view:attached:rendered\");\n            }\n            return view;\n        },\n\n        /** insert a jq object as a child of list-items at the specified *DOM index* */\n        _insertIntoListAt: function(index, $what) {\n            // console.log( this + '._insertIntoListAt:', index, $what );\n            var $list = this.$list();\n            if (index === 0) {\n                $list.prepend($what);\n            } else {\n                $list\n                    .children()\n                    .eq(index - 1)\n                    .after($what);\n            }\n            return $what;\n        },\n\n        /** Remove a view from the panel (if found) */\n        removeItemView: function(model, collection, options) {\n            var panel = this;\n            var view = _.find(panel.views, function(v) {\n                return v.model === model;\n            });\n            if (!view) {\n                return undefined;\n            }\n            panel.views = _.without(panel.views, view);\n            panel.trigger(\"view:removed\", view);\n\n            // potentially show the empty message if no views left\n            // use anonymous queue here - since remove can happen multiple times\n            $({}).queue(\"fx\", [\n                function(next) {\n                    view.$el.fadeOut(panel.fxSpeed, next);\n                },\n                function(next) {\n                    view.remove();\n                    panel.trigger(\"view:removed:rendered\");\n                    if (!panel.views.length) {\n                        panel._renderEmptyMessage().fadeIn(panel.fxSpeed, next);\n                    } else {\n                        next();\n                    }\n                }\n            ]);\n            return view;\n        },\n\n        /** get views based on model.id */\n        viewFromModelId: function(id) {\n            return _.find(this.views, function(v) {\n                return v.model.id === id;\n            });\n        },\n\n        /** get views based on model */\n        viewFromModel: function(model) {\n            return model ? this.viewFromModelId(model.id) : undefined;\n        },\n\n        /** get views based on model properties */\n        viewsWhereModel: function(properties) {\n            return this.views.filter(function(view) {\n                return _.isMatch(view.model.attributes, properties);\n            });\n        },\n\n        /** A range of views between (and including) viewA and viewB */\n        viewRange: function(viewA, viewB) {\n            if (viewA === viewB) {\n                return viewA ? [viewA] : [];\n            }\n\n            var indexA = this.views.indexOf(viewA),\n                indexB = this.views.indexOf(viewB);\n\n            // handle not found\n            if (indexA === -1 || indexB === -1) {\n                if (indexA === indexB) {\n                    return [];\n                }\n                return indexA === -1 ? [viewB] : [viewA];\n            }\n            // reverse if indeces are\n            //note: end inclusive\n            return indexA < indexB\n                ? this.views.slice(indexA, indexB + 1)\n                : this.views.slice(indexB, indexA + 1);\n        },\n\n        // ------------------------------------------------------------------------ searching\n        /** render a search input for filtering datasets shown\n     *      (see SearchableMixin in base-mvc for implementation of the actual searching)\n     *      return will start the search\n     *      esc will clear the search\n     *      clicking the clear button will clear the search\n     *      uses searchInput in ui.js\n     */\n        _renderSearch: function($where) {\n            $where.find(\".controls .search-input\").searchInput({\n                placeholder: this.searchPlaceholder,\n                initialVal: this.searchFor,\n                onfirstsearch: _.bind(this._firstSearch, this),\n                onsearch: _.bind(this.searchItems, this),\n                onclear: _.bind(this.clearSearch, this)\n            });\n            return $where;\n        },\n\n        /** What to do on the first search entered */\n        _firstSearch: function(searchFor) {\n            // override to load model details if necc.\n            this.log(\"onFirstSearch\", searchFor);\n            return this.searchItems(searchFor);\n        },\n\n        /** filter view list to those that contain the searchFor terms */\n        searchItems: function(searchFor, force) {\n            this.log(\"searchItems\", searchFor, this.searchFor, force);\n            if (!force && this.searchFor === searchFor) {\n                return this;\n            }\n            this.searchFor = searchFor;\n            this.renderItems();\n            this.trigger(\"search:searching\", searchFor, this);\n            var $search = this.$(\"> .controls .search-query\");\n            if ($search.val() !== searchFor) {\n                $search.val(searchFor);\n            }\n            return this;\n        },\n\n        /** clear the search filters and show all views that are normally shown */\n        clearSearch: function(searchFor) {\n            //this.log( 'onSearchClear', this );\n            this.searchFor = \"\";\n            this.trigger(\"search:clear\", this);\n            this.$(\"> .controls .search-query\").val(\"\");\n            this.renderItems();\n            return this;\n        },\n\n        // ------------------------------------------------------------------------ selection\n        /** @type Integer when the number of list item views is >= to this, don't animate selectors */\n        THROTTLE_SELECTOR_FX_AT: 20,\n\n        /** show selectors on all visible itemViews and associated controls */\n        showSelectors: function(speed) {\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            this.selecting = true;\n            this.$(\".list-actions\").slideDown(speed);\n            speed =\n                this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n            _.each(this.views, function(view) {\n                view.showSelector(speed);\n            });\n            //this.selected = [];\n            //this.lastSelected = null;\n        },\n\n        /** hide selectors on all visible itemViews and associated controls */\n        hideSelectors: function(speed) {\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            this.selecting = false;\n            this.$(\".list-actions\").slideUp(speed);\n            speed =\n                this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n            _.each(this.views, function(view) {\n                view.hideSelector(speed);\n            });\n            this.selected = [];\n            this.lastSelected = null;\n        },\n\n        /** show or hide selectors on all visible itemViews and associated controls */\n        toggleSelectors: function() {\n            if (!this.selecting) {\n                this.showSelectors();\n            } else {\n                this.hideSelectors();\n            }\n        },\n\n        /** select all visible items */\n        selectAll: function(event) {\n            _.each(this.views, function(view) {\n                view.select(event);\n            });\n        },\n\n        /** deselect all visible items */\n        deselectAll: function(event) {\n            this.lastSelected = null;\n            _.each(this.views, function(view) {\n                view.deselect(event);\n            });\n        },\n\n        /** select a range of datasets between A and B */\n        selectRange: function(viewA, viewB) {\n            var range = this.viewRange(viewA, viewB);\n            _.each(range, function(view) {\n                view.select();\n            });\n            return range;\n        },\n\n        /** return an array of all currently selected itemViews */\n        getSelectedViews: function() {\n            return _.filter(this.views, function(v) {\n                return v.selected;\n            });\n        },\n\n        /** return a collection of the models of all currenly selected items */\n        getSelectedModels: function() {\n            // console.log( '(getSelectedModels)' );\n            return new this.collection.constructor(\n                _.map(this.getSelectedViews(), function(view) {\n                    return view.model;\n                })\n            );\n        },\n\n        // ------------------------------------------------------------------------ loading indicator\n        /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n        _showLoadingIndicator: function(msg, speed, callback) {\n            this.debug(\n                \"_showLoadingIndicator\",\n                this.indicator,\n                msg,\n                speed,\n                callback\n            );\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            if (!this.indicator) {\n                this.indicator = new LoadingIndicator(this.$el);\n                this.debug(\"\\t created\", this.indicator);\n            }\n            if (!this.$el.is(\":visible\")) {\n                this.indicator.show(0, callback);\n            } else {\n                this.$el.fadeOut(speed);\n                this.indicator.show(msg, speed, callback);\n            }\n        },\n\n        /** hide the loading indicator */\n        _hideLoadingIndicator: function(speed, callback) {\n            this.debug(\n                \"_hideLoadingIndicator\",\n                this.indicator,\n                speed,\n                callback\n            );\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            if (this.indicator) {\n                this.indicator.hide(speed, callback);\n            }\n        },\n\n        // ------------------------------------------------------------------------ scrolling\n        /** get the current scroll position of the panel in its parent */\n        scrollPosition: function() {\n            return this.$scrollContainer().scrollTop();\n        },\n\n        /** set the current scroll position of the panel in its parent */\n        scrollTo: function(pos, speed) {\n            speed = speed || 0;\n            this.$scrollContainer().animate({ scrollTop: pos }, speed);\n            return this;\n        },\n\n        /** Scrolls the panel to the top. */\n        scrollToTop: function(speed) {\n            return this.scrollTo(0, speed);\n        },\n\n        /** scroll to the given view in list-items */\n        scrollToItem: function(view, speed) {\n            if (!view) {\n                return this;\n            }\n            return this;\n        },\n\n        /** Scrolls the panel to show the content with the given id. */\n        scrollToId: function(id, speed) {\n            return this.scrollToItem(this.viewFromModelId(id), speed);\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: {\n            \"click .select-all\": \"selectAll\",\n            \"click .deselect-all\": \"deselectAll\"\n        },\n\n        // ------------------------------------------------------------------------ misc\n        /** Return a string rep of the panel */\n        toString: function() {\n            return \"ListPanel(\" + this.collection + \")\";\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nListPanel.prototype.templates = (function() {\n    var elTemplate = BASE_MVC.wrapTemplate([\n        // temp container\n        \"<div>\",\n        '<div class=\"controls\"></div>',\n        '<div class=\"list-items\"></div>',\n        '<div class=\"empty-message infomessagesmall\"></div>',\n        \"</div>\"\n    ]);\n\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n        '<div class=\"title\">',\n        '<div class=\"name\"><%- view.title %></div>',\n        \"</div>\",\n        '<div class=\"subtitle\"><%- view.subtitle %></div>',\n        // buttons, controls go here\n        '<div class=\"actions\"></div>',\n        // deleted msg, etc.\n        '<div class=\"messages\"></div>',\n\n        '<div class=\"search\">',\n        '<div class=\"search-input\"></div>',\n        \"</div>\",\n\n        // show when selectors are shown\n        '<div class=\"list-actions\">',\n        '<div class=\"btn-group\">',\n        '<button class=\"select-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"All\"),\n        \"</button>\",\n        '<button class=\"deselect-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"None\"),\n        \"</button>\",\n        \"</div>\",\n        '<div class=\"list-action-menu btn-group\">',\n        \"</div>\",\n        \"</div>\",\n        \"</div>\"\n    ]);\n\n    return {\n        el: elTemplate,\n        controls: controlsTemplate\n    };\n})();\n\n//=============================================================================\n/** View for a model that has a sub-collection (e.g. History, DatasetCollection)\n *  Allows:\n *      the model to be reset\n *      auto assign panel.collection to panel.model[ panel.modelCollectionKey ]\n *\n */\nvar ModelListPanel = ListPanel.extend({\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey: \"contents\",\n\n    initialize: function(attributes) {\n        ListPanel.prototype.initialize.call(this, attributes);\n        this.selecting =\n            attributes.selecting !== undefined ? attributes.selecting : false;\n\n        this.setModel(this.model, attributes);\n    },\n\n    /** release/free/shutdown old models and set up panel for new models\n     *  @fires new-model with the panel as parameter\n     */\n    setModel: function(model, attributes) {\n        attributes = attributes || {};\n        this.debug(this + \".setModel:\", model, attributes);\n\n        this.freeModel();\n        this.freeViews();\n\n        if (model) {\n            var oldModelId = this.model ? this.model.get(\"id\") : null;\n\n            // set up the new model with user, logger, storage, events\n            this.model = model;\n            if (this.logger) {\n                this.model.logger = this.logger;\n            }\n            this._setUpModelListeners();\n\n            //TODO: relation btwn model, collection becoming tangled here\n            // free the collection, and assign the new collection to either\n            //  the model[ modelCollectionKey ], attributes.collection, or an empty vanilla collection\n            this.stopListening(this.collection);\n            this.collection =\n                this.model[this.modelCollectionKey] ||\n                attributes.collection ||\n                this._createDefaultCollection();\n            this._setUpCollectionListeners();\n\n            if (oldModelId && model.get(\"id\") !== oldModelId) {\n                this.trigger(\"new-model\", this);\n            }\n        }\n        return this;\n    },\n\n    /** free the current model and all listeners for it, free any views for the model */\n    freeModel: function() {\n        // stop/release the previous model, and clear cache to sub-views\n        if (this.model) {\n            this.stopListening(this.model);\n            //TODO: see base-mvc\n            //this.model.free();\n            //this.model = null;\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ listening\n    /** listening for model events */\n    _setUpModelListeners: function() {\n        // override\n        this.log(this + \"._setUpModelListeners\", this.model);\n        // bounce model errors up to the panel\n        this.listenTo(\n            this.model,\n            \"error\",\n            function() {\n                var args = Array.prototype.slice.call(arguments, 0);\n                //args.unshift( 'model:error' );\n                args.unshift(\"error\");\n                this.trigger.apply(this, args);\n            },\n            this\n        );\n\n        // debugging\n        if (this.logger) {\n            this.listenTo(this.model, \"all\", function(event) {\n                this.info(this + \"(model)\", event, arguments);\n            });\n        }\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el.\n     */\n    _renderControls: function($newRender) {\n        this.debug(this + \"(ModelListPanel)._renderControls\");\n        var json = this.model ? this.model.toJSON() : {},\n            $controls = $(this.templates.controls(json, this));\n        $newRender.find(\".controls\").replaceWith($controls);\n        return $controls;\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** Return a string rep of the panel */\n    toString: function() {\n        return \"ModelListPanel(\" + this.model + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nModelListPanel.prototype.templates = (function() {\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n        '<div class=\"title\">',\n        //TODO: this is really the only difference - consider factoring titlebar out\n        '<div class=\"name\"><%- model.name %></div>',\n        \"</div>\",\n        '<div class=\"subtitle\"><%- view.subtitle %></div>',\n        '<div class=\"actions\"></div>',\n        '<div class=\"messages\"></div>',\n\n        '<div class=\"search\">',\n        '<div class=\"search-input\"></div>',\n        \"</div>\",\n\n        '<div class=\"list-actions\">',\n        '<div class=\"btn-group\">',\n        '<button class=\"select-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"All\"),\n        \"</button>\",\n        '<button class=\"deselect-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"None\"),\n        \"</button>\",\n        \"</div>\",\n        '<div class=\"list-action-menu btn-group\">',\n        \"</div>\",\n        \"</div>\",\n        \"</div>\"\n    ]);\n\n    return _.extend(_.clone(ListPanel.prototype.templates), {\n        controls: controlsTemplate\n    });\n})();\n\n//=============================================================================\nexport default {\n    ListPanel: ListPanel,\n    ModelListPanel: ModelListPanel\n};\n"]}