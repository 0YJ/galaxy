{"version":3,"sources":["mvc/list/list-view.js"],"names":["_listItem","require","_loadingIndicator","_baseMvc","_localization","logNamespace","ListPanel","Backbone","View","extend","_baseMvc2","default","LoggableMixin","viewClass","_listItem2","ListItemView","collectionClass","Collection","tagName","className","fxSpeed","emptyMsg","_localization2","noneFoundMsg","initialize","attributes","options","logger","this","log","_","has","filters","searchFor","selecting","selected","lastSelected","collection","_createDefaultCollection","dragItems","$scrollContainer","title","views","subtitle","_setUpListeners","on","msg","details","error","model","xhr","loading","_showLoadingIndicator","loading-done","_hideLoadingIndicator","once","console","_setUpViewListeners","_setUpCollectionListeners","listenTo","update","changes","renderAll","stopListening","removed","length","renderItems","trigger","added","addItemView","first","removeItemView","view:selected","view","ev","shiftKey","lastSelectedView","selectRange","altKey","showSelectors","push","id","view:de-selected","without","render","speed","$newRender","_buildNewRender","_setUpBehaviors","_queueNewRender","debug","$","templates","el","_renderControls","_renderTitle","_renderSubtitle","_renderSearch","$controls","controls","find","replaceWith","$where","undefined","panel","queue","fadeOut","$el","next","_swapNewRender","empty","attr","append","children","_renderMultiselectActionMenu","$menu","actions","html","click","preventDefault","action","func","$newMenu","multiselectActions","join","$actions","map","$whereTo","parent","freeViews","$list","$messages","$emptyMessage","_attachItems","_filterCollection","filter","shownModels","itemModel","_createItemView","call","_renderEmptyMessage","toggle","bind","_filterItem","_destroyItemViews","self","forEach","every","fn","matchesAll","_getItemViewClass","_getItemViewOptions","_setUpItemViewListeners","expanded","selectable","v","json","contains","draggable","collapseAll","args","Array","prototype","slice","arguments","apply","getSelectedModels","toJSON","setData","JSON","stringify","_renderItemView$el","is","text","each","expand","useFx","isUndefined","modelIndex","indexOf","_insertIntoListAt","$what","_attachView","splice","hide","slideDown","show","index","viewFromModel","prepend","eq","after","viewRange","viewA","viewB","indexA","indexB","fadeIn","placeholder","searchPlaceholder","initialVal","onfirstsearch","viewFromModelId","viewsWhereModel","searchItems","isMatch","properties","$search","searchInput","_firstSearch","onsearch","onclear","clearSearch","slideUp","force","toggleSelectors","hideSelectors","val","select","deselectAll","THROTTLE_SELECTOR_FX_AT","showSelector","constructor","hideSelector","indicator","selectAll","event","deselect","range","getSelectedViews","scrollToTop","scrollTo","callback","_loadingIndicator2","elTemplate","wrapTemplate","scrollPosition","scrollTop","pos","modelCollectionKey","ModelListPanel","animate","scrollToItem","scrollToId","events","click .select-all","click .deselect-all","toString","freeModel","_setUpModelListeners","clone","setModel","oldModelId","get","unshift","info","controlsTemplate"],"mappings":"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","file":"../../../scripts/mvc/list/list-view.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport LoadingIndicator from \"ui/loading-indicator\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/search-input\";\n\nvar logNamespace = \"list\";\n/* ============================================================================\nTODO:\n\n============================================================================ */\n/** @class View for a list/collection of models and the sub-views of those models.\n *      Sub-views must (at least have the interface if not) inherit from ListItemView.\n *      (For a list panel that also includes some 'container' model (History->HistoryContents)\n *      use ModelWithListPanel)\n *\n *  Allows for:\n *      searching collection/sub-views\n *      selecting/multi-selecting sub-views\n *\n *  Currently used:\n *      for dataset/dataset-choice\n *      as superclass of ModelListPanel\n */\nvar ListPanel = Backbone.View.extend(BASE_MVC.LoggableMixin).extend(\n    /** @lends ListPanel.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** class to use for constructing the sub-views */\n        viewClass: LIST_ITEM.ListItemView,\n        /** class to used for constructing collection of sub-view models */\n        collectionClass: Backbone.Collection,\n\n        tagName: \"div\",\n        className: \"list-panel\",\n\n        /** (in ms) that jquery effects will use */\n        fxSpeed: \"fast\",\n\n        /** string to display when the collection has no contents */\n        emptyMsg: _l(\"This list is empty\"),\n        /** displayed when no items match the search terms */\n        noneFoundMsg: _l(\"No matching items found\"),\n        /** string used for search placeholder */\n        searchPlaceholder: _l(\"search\"),\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the list\n     */\n        initialize: function(attributes, options) {\n            attributes = attributes || {};\n            // set the logger if requested\n            if (attributes.logger) {\n                this.logger = attributes.logger;\n            }\n            this.log(this + \".initialize:\", attributes);\n\n            // ---- instance vars\n            /** how quickly should jquery fx run? */\n            this.fxSpeed = _.has(attributes, \"fxSpeed\")\n                ? attributes.fxSpeed\n                : this.fxSpeed;\n\n            /** filters for displaying subviews */\n            this.filters = [];\n            /** current search terms */\n            this.searchFor = attributes.searchFor || \"\";\n\n            /** loading indicator */\n            // this.indicator = new LoadingIndicator( this.$el );\n\n            /** currently showing selectors on items? */\n            this.selecting =\n                attributes.selecting !== undefined\n                    ? attributes.selecting\n                    : true;\n            //this.selecting = false;\n\n            /** cached selected item.model.ids to persist btwn renders */\n            this.selected = attributes.selected || [];\n            /** the last selected item.model.id */\n            this.lastSelected = null;\n\n            /** are sub-views draggable */\n            this.dragItems = attributes.dragItems || false;\n\n            /** list item view class (when passed models) */\n            this.viewClass = attributes.viewClass || this.viewClass;\n\n            /** list item views */\n            this.views = [];\n            /** list item models */\n            this.collection =\n                attributes.collection || this._createDefaultCollection();\n\n            /** filter fns run over collection items to see if they should show in the list */\n            this.filters = attributes.filters || [];\n\n            /** override $scrollContainer fn via attributes - fn should return jq for elem to call scrollTo on */\n            this.$scrollContainer =\n                attributes.$scrollContainer || this.$scrollContainer;\n\n            /** @type {String} generic title */\n            this.title = attributes.title || \"\";\n            /** @type {String} generic subtitle */\n            this.subtitle = attributes.subtitle || \"\";\n\n            this._setUpListeners();\n        },\n\n        // ------------------------------------------------------------------------ listeners\n        /** create any event listeners for the list */\n        _setUpListeners: function() {\n            this.off();\n\n            //TODO: move errorHandler down into list-view from history-view or\n            //  pass to global error handler (Galaxy)\n            this.on({\n                error: function(model, xhr, options, msg, details) {\n                    //this.errorHandler( model, xhr, options, msg, details );\n                    console.error(model, xhr, options, msg, details);\n                },\n                // show hide the loading indicator\n                loading: function() {\n                    this._showLoadingIndicator(\"loading...\", 40);\n                },\n                \"loading-done\": function() {\n                    this._hideLoadingIndicator(40);\n                }\n            });\n\n            // throw the first render up as a diff namespace using once (for outside consumption)\n            this.once(\"rendered\", function() {\n                this.trigger(\"rendered:initial\", this);\n            });\n\n            this._setUpCollectionListeners();\n            this._setUpViewListeners();\n            return this;\n        },\n\n        /** create and return a collection for when none is initially passed */\n        _createDefaultCollection: function() {\n            // override\n            return new this.collectionClass([]);\n        },\n\n        /** listening for collection events */\n        _setUpCollectionListeners: function() {\n            this.log(this + \"._setUpCollectionListeners\", this.collection);\n            this.stopListening(this.collection);\n\n            // bubble up error events\n            this.listenTo(this.collection, {\n                error: function(model, xhr, options, msg, details) {\n                    this.trigger(\"error\", model, xhr, options, msg, details);\n                },\n                update: function(collection, options) {\n                    var changes = options.changes;\n                    // console.info( collection + ', update:', changes, '\\noptions:', options );\n                    // more than one: render everything\n                    if (\n                        options.renderAll ||\n                        changes.added.length + changes.removed.length > 1\n                    ) {\n                        return this.renderItems();\n                    }\n                    // otherwise, let the single add/remove handlers do it\n                    if (changes.added.length === 1) {\n                        return this.addItemView(\n                            _.first(changes.added),\n                            collection,\n                            options\n                        );\n                    }\n                    if (changes.removed.length === 1) {\n                        return this.removeItemView(\n                            _.first(changes.removed),\n                            collection,\n                            options\n                        );\n                    }\n                }\n            });\n            return this;\n        },\n\n        /** listening for sub-view events that bubble up with the 'view:' prefix */\n        _setUpViewListeners: function() {\n            this.log(this + \"._setUpViewListeners\");\n\n            // shift to select a range\n            this.on({\n                \"view:selected\": function(view, ev) {\n                    if (ev && ev.shiftKey && this.lastSelected) {\n                        var lastSelectedView = this.viewFromModelId(\n                            this.lastSelected\n                        );\n                        if (lastSelectedView) {\n                            this.selectRange(view, lastSelectedView);\n                        }\n                    } else if (ev && ev.altKey && !this.selecting) {\n                        this.showSelectors();\n                    }\n                    this.selected.push(view.model.id);\n                    this.lastSelected = view.model.id;\n                },\n\n                \"view:de-selected\": function(view, ev) {\n                    this.selected = _.without(this.selected, view.model.id);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ rendering\n        /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n        render: function(speed) {\n            this.log(this + \".render\", speed);\n            var $newRender = this._buildNewRender();\n            this._setUpBehaviors($newRender);\n            this._queueNewRender($newRender, speed);\n            return this;\n        },\n\n        /** Build a temp div containing the new children for the view's $el. */\n        _buildNewRender: function() {\n            this.debug(this + \"(ListPanel)._buildNewRender\");\n            var $newRender = $(this.templates.el({}, this));\n            this._renderControls($newRender);\n            this._renderTitle($newRender);\n            this._renderSubtitle($newRender);\n            this._renderSearch($newRender);\n            this.renderItems($newRender);\n            return $newRender;\n        },\n\n        /** Build a temp div containing the new children for the view's $el. */\n        _renderControls: function($newRender) {\n            this.debug(this + \"(ListPanel)._renderControls\");\n            var $controls = $(this.templates.controls({}, this));\n            $newRender.find(\".controls\").replaceWith($controls);\n            return $controls;\n        },\n\n        /** return a jQuery object containing the title DOM */\n        _renderTitle: function($where) {\n            //$where = $where || this.$el;\n            //$where.find( '.title' ).replaceWith( ... )\n        },\n\n        /** return a jQuery object containing the subtitle DOM (if any) */\n        _renderSubtitle: function($where) {\n            //$where = $where || this.$el;\n            //$where.find( '.title' ).replaceWith( ... )\n        },\n\n        /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n        _queueNewRender: function($newRender, speed) {\n            speed = speed === undefined ? this.fxSpeed : speed;\n            var panel = this;\n            panel.log(\"_queueNewRender:\", $newRender, speed);\n\n            $(panel).queue(\"fx\", [\n                function(next) {\n                    panel.$el.fadeOut(speed, next);\n                },\n                function(next) {\n                    panel._swapNewRender($newRender);\n                    next();\n                },\n                function(next) {\n                    panel.$el.fadeIn(speed, next);\n                },\n                function(next) {\n                    panel.trigger(\"rendered\", panel);\n                    next();\n                }\n            ]);\n        },\n\n        /** empty out the current el, move the $newRender's children in */\n        _swapNewRender: function($newRender) {\n            this.$el\n                .empty()\n                .attr(\"class\", this.className)\n                .append($newRender.children());\n            if (this.selecting) {\n                this.showSelectors(0);\n            }\n            return this;\n        },\n\n        /** Set up any behaviors, handlers (ep. plugins) that need to be called when the entire view has been built but\n     *  not attached to the page yet.\n     */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            this.$controls($where)\n                .find(\"[title]\")\n                .tooltip();\n            // set up the pupup for actions available when multi selecting\n            this._renderMultiselectActionMenu($where);\n            return this;\n        },\n\n        /** render a menu containing the actions available to sets of selected items */\n        _renderMultiselectActionMenu: function($where) {\n            $where = $where || this.$el;\n            var $menu = $where.find(\".list-action-menu\"),\n                actions = this.multiselectActions();\n            if (!actions.length) {\n                return $menu.empty();\n            }\n\n            var $newMenu = $(\n                [\n                    '<div class=\"list-action-menu btn-group\">',\n                    '<button class=\"list-action-menu-btn btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                    _l(\"For all selected\"),\n                    \"...\",\n                    \"</button>\",\n                    '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n                    \"</ul>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n            var $actions = actions.map(function(action) {\n                var html = [\n                    '<li><a href=\"javascript:void(0);\">',\n                    action.html,\n                    \"</a></li>\"\n                ].join(\"\");\n                return $(html).click(function(ev) {\n                    ev.preventDefault();\n                    return action.func(ev);\n                });\n            });\n            $newMenu.find(\"ul\").append($actions);\n            $menu.replaceWith($newMenu);\n            return $newMenu;\n        },\n\n        /** return a list of plain objects used to render multiselect actions menu. Each object should have:\n     *      html: an html string used as the anchor contents\n     *      func: a function called when the anchor is clicked (passed the click event)\n     */\n        multiselectActions: function() {\n            return [];\n        },\n\n        // ------------------------------------------------------------------------ sub-$element shortcuts\n        /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n        $scrollContainer: function($where) {\n            // override or set via attributes.$scrollContainer\n            return ($where || this.$el).parent().parent();\n        },\n        /** convenience selector for the section that displays the list controls */\n        $controls: function($where) {\n            return ($where || this.$el).find(\"> .controls\");\n        },\n        /** list-items: where the subviews are contained in the view's dom */\n        $list: function($where) {\n            return ($where || this.$el).find(\"> .list-items\");\n        },\n        /** container where list messages are attached */\n        $messages: function($where) {\n            //TODO: controls isn't really correct here (only for ModelListPanel)\n            return ($where || this.$el).find(\"> .controls .messages\");\n        },\n        /** the message displayed when no views can be shown (no views, none matching search) */\n        $emptyMessage: function($where) {\n            return ($where || this.$el).find(\"> .empty-message\");\n        },\n\n        // ------------------------------------------------------------------------ hda sub-views\n        /** render the subviews for the list's collection */\n        renderItems: function($whereTo) {\n            $whereTo = $whereTo || this.$el;\n            var panel = this;\n            panel.log(this + \".renderItems\", $whereTo);\n\n            var $list = panel.$list($whereTo);\n            panel.freeViews();\n            // console.log( 'views freed' );\n            //TODO:? cache and re-use views?\n            var shownModels = panel._filterCollection();\n            // console.log( 'models filtered:', shownModels );\n\n            panel.views = shownModels.map(function(itemModel) {\n                var view = panel._createItemView(itemModel);\n                return view;\n            });\n\n            $list.empty();\n            // console.log( 'list emptied' );\n            if (panel.views.length) {\n                panel._attachItems($whereTo);\n                // console.log( 'items attached' );\n            }\n            panel._renderEmptyMessage($whereTo).toggle(!panel.views.length);\n            panel.trigger(\"views:ready\", panel.views);\n\n            // console.log( '------------------------------------------- rendering items' );\n            return panel.views;\n        },\n\n        /** Filter the collection to only those models that should be currently viewed */\n        _filterCollection: function() {\n            // override this\n            var panel = this;\n            return panel.collection.filter(_.bind(panel._filterItem, panel));\n        },\n\n        /** Should the model be viewable in the current state?\n     *     Checks against this.filters and this.searchFor\n     */\n        _filterItem: function(model) {\n            // override this\n            var panel = this;\n            return (\n                _.every(\n                    panel.filters.map(function(fn) {\n                        return fn.call(model);\n                    })\n                ) &&\n                (!panel.searchFor || model.matchesAll(panel.searchFor))\n            );\n        },\n\n        /** Create a view for a model and set up it's listeners */\n        _createItemView: function(model) {\n            var ViewClass = this._getItemViewClass(model);\n            var options = _.extend(this._getItemViewOptions(model), {\n                model: model\n            });\n            var view = new ViewClass(options);\n            this._setUpItemViewListeners(view);\n            return view;\n        },\n\n        /** Free a view for a model. Note: does not remove it from the DOM */\n        _destroyItemView: function(view) {\n            this.stopListening(view);\n            this.views = _.without(this.views, view);\n        },\n\n        _destroyItemViews: function(view) {\n            var self = this;\n            self.views.forEach(function(v) {\n                self.stopListening(v);\n            });\n            self.views = [];\n            return self;\n        },\n\n        /** free any sub-views the list has */\n        freeViews: function() {\n            return this._destroyItemViews();\n        },\n\n        /** Get the bbone view class based on the model */\n        _getItemViewClass: function(model) {\n            // override this\n            return this.viewClass;\n        },\n\n        /** Get the options passed to the new view based on the model */\n        _getItemViewOptions: function(model) {\n            // override this\n            return {\n                //logger      : this.logger,\n                fxSpeed: this.fxSpeed,\n                expanded: false,\n                selectable: this.selecting,\n                selected: _.contains(this.selected, model.id),\n                draggable: this.dragItems\n            };\n        },\n\n        /** Set up listeners for new models */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            // send all events to the panel, re-namspaceing them with the view prefix\n            this.listenTo(view, \"all\", function() {\n                var args = Array.prototype.slice.call(arguments, 0);\n                args[0] = \"view:\" + args[0];\n                panel.trigger.apply(panel, args);\n            });\n\n            // drag multiple - hijack ev.setData to add all selected items\n            this.listenTo(\n                view,\n                \"draggable:dragstart\",\n                function(ev, v) {\n                    //TODO: set multiple drag data here\n                    var json = {},\n                        selected = this.getSelectedModels();\n                    if (selected.length) {\n                        json = selected.toJSON();\n                    } else {\n                        json = [v.model.toJSON()];\n                    }\n                    ev.dataTransfer.setData(\"text\", JSON.stringify(json));\n                    //ev.dataTransfer.setDragImage( v.el, 60, 60 );\n                },\n                this\n            );\n\n            return panel;\n        },\n\n        /** Attach views in this.views to the model based on $whereTo */\n        _attachItems: function($whereTo) {\n            var self = this;\n            // console.log( '_attachItems:', $whereTo, this.$list( $whereTo ) );\n            //ASSUMES: $list has been emptied\n            this.$list($whereTo).append(\n                this.views.map(function(view) {\n                    return self._renderItemView$el(view);\n                })\n            );\n            return this;\n        },\n\n        /** get a given subview's $el (or whatever may wrap it) and return it */\n        _renderItemView$el: function(view) {\n            // useful to wrap and override\n            return view.render(0).$el;\n        },\n\n        /** render the empty/none-found message */\n        _renderEmptyMessage: function($whereTo) {\n            this.debug(\"_renderEmptyMessage\", $whereTo, this.searchFor);\n            var text = this.searchFor ? this.noneFoundMsg : this.emptyMsg;\n            return this.$emptyMessage($whereTo).text(text);\n        },\n\n        /** expand all item views */\n        expandAll: function() {\n            _.each(this.views, function(view) {\n                view.expand();\n            });\n        },\n\n        /** collapse all item views */\n        collapseAll: function() {\n            _.each(this.views, function(view) {\n                view.collapse();\n            });\n        },\n\n        // ------------------------------------------------------------------------ collection/views syncing\n        /** Add a view (if the model should be viewable) to the panel */\n        addItemView: function(model, collection, options) {\n            // console.log( this + '.addItemView:', model );\n            var panel = this;\n            // get the index of the model in the list of filtered models shown by this list\n            // in order to insert the view in the proper place\n            //TODO:? potentially expensive\n            var modelIndex = panel._filterCollection().indexOf(model);\n            if (modelIndex === -1) {\n                return undefined;\n            }\n            var view = panel._createItemView(model);\n            // console.log( 'adding and rendering:', modelIndex, view.toString() );\n\n            $(view).queue(\"fx\", [\n                function(next) {\n                    // hide the empty message first if only view\n                    if (panel.$emptyMessage().is(\":visible\")) {\n                        panel.$emptyMessage().fadeOut(panel.fxSpeed, next);\n                    } else {\n                        next();\n                    }\n                },\n                function(next) {\n                    panel._attachView(view, modelIndex);\n                    next();\n                }\n            ]);\n            return view;\n        },\n\n        /** internal fn to add view (to both panel.views and panel.$list) */\n        _attachView: function(view, modelIndex, useFx) {\n            // console.log( this + '._attachView:', view, modelIndex, useFx );\n            useFx = _.isUndefined(useFx) ? true : useFx;\n            modelIndex = modelIndex || 0;\n            var panel = this;\n\n            // use the modelIndex to splice into views and insert at the proper index in the DOM\n            panel.views.splice(modelIndex, 0, view);\n            panel._insertIntoListAt(\n                modelIndex,\n                panel._renderItemView$el(view).hide()\n            );\n\n            panel.trigger(\"view:attached\", view);\n            if (useFx) {\n                view.$el.slideDown(panel.fxSpeed, function() {\n                    panel.trigger(\"view:attached:rendered\");\n                });\n            } else {\n                view.$el.show();\n                panel.trigger(\"view:attached:rendered\");\n            }\n            return view;\n        },\n\n        /** insert a jq object as a child of list-items at the specified *DOM index* */\n        _insertIntoListAt: function(index, $what) {\n            // console.log( this + '._insertIntoListAt:', index, $what );\n            var $list = this.$list();\n            if (index === 0) {\n                $list.prepend($what);\n            } else {\n                $list\n                    .children()\n                    .eq(index - 1)\n                    .after($what);\n            }\n            return $what;\n        },\n\n        /** Remove a view from the panel (if found) */\n        removeItemView: function(model, collection, options) {\n            var panel = this;\n            var view = _.find(panel.views, function(v) {\n                return v.model === model;\n            });\n            if (!view) {\n                return undefined;\n            }\n            panel.views = _.without(panel.views, view);\n            panel.trigger(\"view:removed\", view);\n\n            // potentially show the empty message if no views left\n            // use anonymous queue here - since remove can happen multiple times\n            $({}).queue(\"fx\", [\n                function(next) {\n                    view.$el.fadeOut(panel.fxSpeed, next);\n                },\n                function(next) {\n                    view.remove();\n                    panel.trigger(\"view:removed:rendered\");\n                    if (!panel.views.length) {\n                        panel._renderEmptyMessage().fadeIn(panel.fxSpeed, next);\n                    } else {\n                        next();\n                    }\n                }\n            ]);\n            return view;\n        },\n\n        /** get views based on model.id */\n        viewFromModelId: function(id) {\n            return _.find(this.views, function(v) {\n                return v.model.id === id;\n            });\n        },\n\n        /** get views based on model */\n        viewFromModel: function(model) {\n            return model ? this.viewFromModelId(model.id) : undefined;\n        },\n\n        /** get views based on model properties */\n        viewsWhereModel: function(properties) {\n            return this.views.filter(function(view) {\n                return _.isMatch(view.model.attributes, properties);\n            });\n        },\n\n        /** A range of views between (and including) viewA and viewB */\n        viewRange: function(viewA, viewB) {\n            if (viewA === viewB) {\n                return viewA ? [viewA] : [];\n            }\n\n            var indexA = this.views.indexOf(viewA),\n                indexB = this.views.indexOf(viewB);\n\n            // handle not found\n            if (indexA === -1 || indexB === -1) {\n                if (indexA === indexB) {\n                    return [];\n                }\n                return indexA === -1 ? [viewB] : [viewA];\n            }\n            // reverse if indeces are\n            //note: end inclusive\n            return indexA < indexB\n                ? this.views.slice(indexA, indexB + 1)\n                : this.views.slice(indexB, indexA + 1);\n        },\n\n        // ------------------------------------------------------------------------ searching\n        /** render a search input for filtering datasets shown\n     *      (see SearchableMixin in base-mvc for implementation of the actual searching)\n     *      return will start the search\n     *      esc will clear the search\n     *      clicking the clear button will clear the search\n     *      uses searchInput in ui.js\n     */\n        _renderSearch: function($where) {\n            $where.find(\".controls .search-input\").searchInput({\n                placeholder: this.searchPlaceholder,\n                initialVal: this.searchFor,\n                onfirstsearch: _.bind(this._firstSearch, this),\n                onsearch: _.bind(this.searchItems, this),\n                onclear: _.bind(this.clearSearch, this)\n            });\n            return $where;\n        },\n\n        /** What to do on the first search entered */\n        _firstSearch: function(searchFor) {\n            // override to load model details if necc.\n            this.log(\"onFirstSearch\", searchFor);\n            return this.searchItems(searchFor);\n        },\n\n        /** filter view list to those that contain the searchFor terms */\n        searchItems: function(searchFor, force) {\n            this.log(\"searchItems\", searchFor, this.searchFor, force);\n            if (!force && this.searchFor === searchFor) {\n                return this;\n            }\n            this.searchFor = searchFor;\n            this.renderItems();\n            this.trigger(\"search:searching\", searchFor, this);\n            var $search = this.$(\"> .controls .search-query\");\n            if ($search.val() !== searchFor) {\n                $search.val(searchFor);\n            }\n            return this;\n        },\n\n        /** clear the search filters and show all views that are normally shown */\n        clearSearch: function(searchFor) {\n            //this.log( 'onSearchClear', this );\n            this.searchFor = \"\";\n            this.trigger(\"search:clear\", this);\n            this.$(\"> .controls .search-query\").val(\"\");\n            this.renderItems();\n            return this;\n        },\n\n        // ------------------------------------------------------------------------ selection\n        /** @type Integer when the number of list item views is >= to this, don't animate selectors */\n        THROTTLE_SELECTOR_FX_AT: 20,\n\n        /** show selectors on all visible itemViews and associated controls */\n        showSelectors: function(speed) {\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            this.selecting = true;\n            this.$(\".list-actions\").slideDown(speed);\n            speed =\n                this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n            _.each(this.views, function(view) {\n                view.showSelector(speed);\n            });\n            //this.selected = [];\n            //this.lastSelected = null;\n        },\n\n        /** hide selectors on all visible itemViews and associated controls */\n        hideSelectors: function(speed) {\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            this.selecting = false;\n            this.$(\".list-actions\").slideUp(speed);\n            speed =\n                this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n            _.each(this.views, function(view) {\n                view.hideSelector(speed);\n            });\n            this.selected = [];\n            this.lastSelected = null;\n        },\n\n        /** show or hide selectors on all visible itemViews and associated controls */\n        toggleSelectors: function() {\n            if (!this.selecting) {\n                this.showSelectors();\n            } else {\n                this.hideSelectors();\n            }\n        },\n\n        /** select all visible items */\n        selectAll: function(event) {\n            _.each(this.views, function(view) {\n                view.select(event);\n            });\n        },\n\n        /** deselect all visible items */\n        deselectAll: function(event) {\n            this.lastSelected = null;\n            _.each(this.views, function(view) {\n                view.deselect(event);\n            });\n        },\n\n        /** select a range of datasets between A and B */\n        selectRange: function(viewA, viewB) {\n            var range = this.viewRange(viewA, viewB);\n            _.each(range, function(view) {\n                view.select();\n            });\n            return range;\n        },\n\n        /** return an array of all currently selected itemViews */\n        getSelectedViews: function() {\n            return _.filter(this.views, function(v) {\n                return v.selected;\n            });\n        },\n\n        /** return a collection of the models of all currenly selected items */\n        getSelectedModels: function() {\n            // console.log( '(getSelectedModels)' );\n            return new this.collection.constructor(\n                _.map(this.getSelectedViews(), function(view) {\n                    return view.model;\n                })\n            );\n        },\n\n        // ------------------------------------------------------------------------ loading indicator\n        /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n        _showLoadingIndicator: function(msg, speed, callback) {\n            this.debug(\n                \"_showLoadingIndicator\",\n                this.indicator,\n                msg,\n                speed,\n                callback\n            );\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            if (!this.indicator) {\n                this.indicator = new LoadingIndicator(this.$el);\n                this.debug(\"\\t created\", this.indicator);\n            }\n            if (!this.$el.is(\":visible\")) {\n                this.indicator.show(0, callback);\n            } else {\n                this.$el.fadeOut(speed);\n                this.indicator.show(msg, speed, callback);\n            }\n        },\n\n        /** hide the loading indicator */\n        _hideLoadingIndicator: function(speed, callback) {\n            this.debug(\n                \"_hideLoadingIndicator\",\n                this.indicator,\n                speed,\n                callback\n            );\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            if (this.indicator) {\n                this.indicator.hide(speed, callback);\n            }\n        },\n\n        // ------------------------------------------------------------------------ scrolling\n        /** get the current scroll position of the panel in its parent */\n        scrollPosition: function() {\n            return this.$scrollContainer().scrollTop();\n        },\n\n        /** set the current scroll position of the panel in its parent */\n        scrollTo: function(pos, speed) {\n            speed = speed || 0;\n            this.$scrollContainer().animate({ scrollTop: pos }, speed);\n            return this;\n        },\n\n        /** Scrolls the panel to the top. */\n        scrollToTop: function(speed) {\n            return this.scrollTo(0, speed);\n        },\n\n        /** scroll to the given view in list-items */\n        scrollToItem: function(view, speed) {\n            if (!view) {\n                return this;\n            }\n            return this;\n        },\n\n        /** Scrolls the panel to show the content with the given id. */\n        scrollToId: function(id, speed) {\n            return this.scrollToItem(this.viewFromModelId(id), speed);\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: {\n            \"click .select-all\": \"selectAll\",\n            \"click .deselect-all\": \"deselectAll\"\n        },\n\n        // ------------------------------------------------------------------------ misc\n        /** Return a string rep of the panel */\n        toString: function() {\n            return \"ListPanel(\" + this.collection + \")\";\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nListPanel.prototype.templates = (function() {\n    var elTemplate = BASE_MVC.wrapTemplate([\n        // temp container\n        \"<div>\",\n        '<div class=\"controls\"></div>',\n        '<div class=\"list-items\"></div>',\n        '<div class=\"empty-message infomessagesmall\"></div>',\n        \"</div>\"\n    ]);\n\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n        '<div class=\"title\">',\n        '<div class=\"name\"><%- view.title %></div>',\n        \"</div>\",\n        '<div class=\"subtitle\"><%- view.subtitle %></div>',\n        // buttons, controls go here\n        '<div class=\"actions\"></div>',\n        // deleted msg, etc.\n        '<div class=\"messages\"></div>',\n\n        '<div class=\"search\">',\n        '<div class=\"search-input\"></div>',\n        \"</div>\",\n\n        // show when selectors are shown\n        '<div class=\"list-actions\">',\n        '<div class=\"btn-group\">',\n        '<button class=\"select-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"All\"),\n        \"</button>\",\n        '<button class=\"deselect-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"None\"),\n        \"</button>\",\n        \"</div>\",\n        '<div class=\"list-action-menu btn-group\">',\n        \"</div>\",\n        \"</div>\",\n        \"</div>\"\n    ]);\n\n    return {\n        el: elTemplate,\n        controls: controlsTemplate\n    };\n})();\n\n//=============================================================================\n/** View for a model that has a sub-collection (e.g. History, DatasetCollection)\n *  Allows:\n *      the model to be reset\n *      auto assign panel.collection to panel.model[ panel.modelCollectionKey ]\n *\n */\nvar ModelListPanel = ListPanel.extend({\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey: \"contents\",\n\n    initialize: function(attributes) {\n        ListPanel.prototype.initialize.call(this, attributes);\n        this.selecting =\n            attributes.selecting !== undefined ? attributes.selecting : false;\n\n        this.setModel(this.model, attributes);\n    },\n\n    /** release/free/shutdown old models and set up panel for new models\n     *  @fires new-model with the panel as parameter\n     */\n    setModel: function(model, attributes) {\n        attributes = attributes || {};\n        this.debug(this + \".setModel:\", model, attributes);\n\n        this.freeModel();\n        this.freeViews();\n\n        if (model) {\n            var oldModelId = this.model ? this.model.get(\"id\") : null;\n\n            // set up the new model with user, logger, storage, events\n            this.model = model;\n            if (this.logger) {\n                this.model.logger = this.logger;\n            }\n            this._setUpModelListeners();\n\n            //TODO: relation btwn model, collection becoming tangled here\n            // free the collection, and assign the new collection to either\n            //  the model[ modelCollectionKey ], attributes.collection, or an empty vanilla collection\n            this.stopListening(this.collection);\n            this.collection =\n                this.model[this.modelCollectionKey] ||\n                attributes.collection ||\n                this._createDefaultCollection();\n            this._setUpCollectionListeners();\n\n            if (oldModelId && model.get(\"id\") !== oldModelId) {\n                this.trigger(\"new-model\", this);\n            }\n        }\n        return this;\n    },\n\n    /** free the current model and all listeners for it, free any views for the model */\n    freeModel: function() {\n        // stop/release the previous model, and clear cache to sub-views\n        if (this.model) {\n            this.stopListening(this.model);\n            //TODO: see base-mvc\n            //this.model.free();\n            //this.model = null;\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ listening\n    /** listening for model events */\n    _setUpModelListeners: function() {\n        // override\n        this.log(this + \"._setUpModelListeners\", this.model);\n        // bounce model errors up to the panel\n        this.listenTo(\n            this.model,\n            \"error\",\n            function() {\n                var args = Array.prototype.slice.call(arguments, 0);\n                //args.unshift( 'model:error' );\n                args.unshift(\"error\");\n                this.trigger.apply(this, args);\n            },\n            this\n        );\n\n        // debugging\n        if (this.logger) {\n            this.listenTo(this.model, \"all\", function(event) {\n                this.info(this + \"(model)\", event, arguments);\n            });\n        }\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el.\n     */\n    _renderControls: function($newRender) {\n        this.debug(this + \"(ModelListPanel)._renderControls\");\n        var json = this.model ? this.model.toJSON() : {},\n            $controls = $(this.templates.controls(json, this));\n        $newRender.find(\".controls\").replaceWith($controls);\n        return $controls;\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** Return a string rep of the panel */\n    toString: function() {\n        return \"ModelListPanel(\" + this.model + \")\";\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nModelListPanel.prototype.templates = (function() {\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n        '<div class=\"title\">',\n        //TODO: this is really the only difference - consider factoring titlebar out\n        '<div class=\"name\"><%- model.name %></div>',\n        \"</div>\",\n        '<div class=\"subtitle\"><%- view.subtitle %></div>',\n        '<div class=\"actions\"></div>',\n        '<div class=\"messages\"></div>',\n\n        '<div class=\"search\">',\n        '<div class=\"search-input\"></div>',\n        \"</div>\",\n\n        '<div class=\"list-actions\">',\n        '<div class=\"btn-group\">',\n        '<button class=\"select-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"All\"),\n        \"</button>\",\n        '<button class=\"deselect-all btn btn-default\"',\n        'data-mode=\"select\">',\n        _l(\"None\"),\n        \"</button>\",\n        \"</div>\",\n        '<div class=\"list-action-menu btn-group\">',\n        \"</div>\",\n        \"</div>\",\n        \"</div>\"\n    ]);\n\n    return _.extend(_.clone(ListPanel.prototype.templates), {\n        controls: controlsTemplate\n    });\n})();\n\n//=============================================================================\nexport default {\n    ListPanel: ListPanel,\n    ModelListPanel: ModelListPanel\n};\n"]}