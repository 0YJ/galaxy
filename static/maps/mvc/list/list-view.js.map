{"version":3,"sources":["mvc/list/list-view.js"],"names":["define","logNamespace","LoadingIndicator","BASE_MVC","_l","viewClass","LIST_ITEM","ListItemView","LoggableMixin","extend","_logNamespace","tagName","collectionClass","Backbone","Collection","fxSpeed","className","searchPlaceholder","noneFoundMsg","initialize","attributes","logger","this","log","_","has","filters","searchFor","selecting","undefined","selected","lastSelected","dragItems","views","collection","_createDefaultCollection","$scrollContainer","title","_setUpListeners","subtitle","off","on","error","model","xhr","options","msg","details","console","_showLoadingIndicator","loading","loading-done","_hideLoadingIndicator","once","_setUpCollectionListeners","_setUpViewListeners","listenTo","update","changes","trigger","renderAll","renderItems","length","added","removed","removeItemView","addItemView","first","view:selected","selectRange","view","ev","shiftKey","lastSelectedView","altKey","viewFromModelId","id","showSelectors","push","without","view:de-selected","render","_queueNewRender","speed","$newRender","_buildNewRender","_setUpBehaviors","_renderTitle","debug","_renderSubtitle","_renderSearch","el","_renderControls","$controls","$","templates","controls","find","replaceWith","$where","panel","next","$el","fadeIn","empty","_swapNewRender","attr","append","children","_renderMultiselectActionMenu","tooltip","$menu","$newMenu","actions","html","multiselectActions","preventDefault","join","$actions","map","action","click","func","$list","parent","$whereTo","$emptyMessage","shownModels","_filterCollection","_renderEmptyMessage","itemModel","_attachItems","toggle","filter","bind","_filterItem","ViewClass","every","fn","call","matchesAll","_createItemView","self","_getItemViewClass","_getItemViewOptions","_destroyItemViews","_destroyItemView","stopListening","freeViews","v","contains","_setUpItemViewListeners","args","Array","apply","draggable","getSelectedModels","json","toJSON","arguments","dataTransfer","setData","_renderItemView$el","expandAll","collapseAll","emptyMsg","text","each","modelIndex","indexOf","_attachView","queue","is","useFx","splice","_insertIntoListAt","hide","index","prepend","$what","show","fadeOut","remove","isMatch","properties","viewFromModel","viewRange","viewB","viewsWhereModel","indexA","viewA","indexB","slice","searchInput","placeholder","_firstSearch","onfirstsearch","onsearch","onclear","searchItems","force","$search","clearSearch","val","THROTTLE_SELECTOR_FX_AT","slideDown","hideSelectors","slideUp","toggleSelectors","selectAll","deselectAll","event","range","getSelectedViews","select","constructor","callback","indicator","scrollPosition","scrollTop","scrollToTop","pos","scrollTo","animate","scrollToItem","scrollToId","events","click .select-all","toString","ListPanel","prototype","wrapTemplate","ModelListPanel","modelCollectionKey","setModel","freeModel","oldModelId","get","_setUpModelListeners","unshift","controlsTemplate","info","clone"],"mappings":"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","file":"../../../scripts/mvc/list/list-view.js","sourcesContent":["define([\n    \"mvc/list/list-item\",\n    \"ui/loading-indicator\",\n    \"mvc/base-mvc\",\n    \"utils/localization\",\n    \"ui/search-input\"\n], function( LIST_ITEM, LoadingIndicator, BASE_MVC, _l ){\n\n'use strict';\n\nvar logNamespace = 'list';\n/* ============================================================================\nTODO:\n\n============================================================================ */\n/** @class View for a list/collection of models and the sub-views of those models.\n *      Sub-views must (at least have the interface if not) inherit from ListItemView.\n *      (For a list panel that also includes some 'container' model (History->HistoryContents)\n *      use ModelWithListPanel)\n *\n *  Allows for:\n *      searching collection/sub-views\n *      selecting/multi-selecting sub-views\n *\n *  Currently used:\n *      for dataset/dataset-choice\n *      as superclass of ModelListPanel\n */\nvar ListPanel = Backbone.View.extend( BASE_MVC.LoggableMixin ).extend(/** @lends ListPanel.prototype */{\n    _logNamespace : logNamespace,\n\n    /** class to use for constructing the sub-views */\n    viewClass           : LIST_ITEM.ListItemView,\n    /** class to used for constructing collection of sub-view models */\n    collectionClass     : Backbone.Collection,\n\n    tagName             : 'div',\n    className           : 'list-panel',\n\n    /** (in ms) that jquery effects will use */\n    fxSpeed             : 'fast',\n\n    /** string to display when the collection has no contents */\n    emptyMsg            : _l( 'This list is empty' ),\n    /** displayed when no items match the search terms */\n    noneFoundMsg        : _l( 'No matching items found' ),\n    /** string used for search placeholder */\n    searchPlaceholder   : _l( 'search' ),\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the list\n     */\n    initialize : function( attributes, options ){\n        attributes = attributes || {};\n        // set the logger if requested\n        if( attributes.logger ){\n            this.logger = attributes.logger;\n        }\n        this.log( this + '.initialize:', attributes );\n\n        // ---- instance vars\n        /** how quickly should jquery fx run? */\n        this.fxSpeed = _.has( attributes, 'fxSpeed' )?( attributes.fxSpeed ):( this.fxSpeed );\n\n        /** filters for displaying subviews */\n        this.filters = [];\n        /** current search terms */\n        this.searchFor = attributes.searchFor || '';\n\n        /** loading indicator */\n        // this.indicator = new LoadingIndicator( this.$el );\n\n        /** currently showing selectors on items? */\n        this.selecting = ( attributes.selecting !== undefined )? attributes.selecting : true;\n        //this.selecting = false;\n\n        /** cached selected item.model.ids to persist btwn renders */\n        this.selected = attributes.selected || [];\n        /** the last selected item.model.id */\n        this.lastSelected = null;\n\n        /** are sub-views draggable */\n        this.dragItems = attributes.dragItems || false;\n\n        /** list item view class (when passed models) */\n        this.viewClass = attributes.viewClass || this.viewClass;\n\n        /** list item views */\n        this.views = [];\n        /** list item models */\n        this.collection = attributes.collection || this._createDefaultCollection();\n\n        /** filter fns run over collection items to see if they should show in the list */\n        this.filters = attributes.filters || [];\n\n        /** override $scrollContainer fn via attributes - fn should return jq for elem to call scrollTo on */\n        this.$scrollContainer = attributes.$scrollContainer || this.$scrollContainer;\n\n        /** @type {String} generic title */\n        this.title = attributes.title || '';\n        /** @type {String} generic subtitle */\n        this.subtitle = attributes.subtitle || '';\n\n        this._setUpListeners();\n    },\n\n    // ------------------------------------------------------------------------ listeners\n    /** create any event listeners for the list */\n    _setUpListeners : function(){\n        this.off();\n\n        //TODO: move errorHandler down into list-view from history-view or\n        //  pass to global error handler (Galaxy)\n        this.on({\n            error: function( model, xhr, options, msg, details ){\n                //this.errorHandler( model, xhr, options, msg, details );\n                console.error( model, xhr, options, msg, details );\n            },\n            // show hide the loading indicator\n            loading: function(){\n                this._showLoadingIndicator( 'loading...', 40 );\n            },\n            'loading-done': function(){\n                this._hideLoadingIndicator( 40 );\n            },\n        });\n\n        // throw the first render up as a diff namespace using once (for outside consumption)\n        this.once( 'rendered', function(){\n            this.trigger( 'rendered:initial', this );\n        });\n\n        this._setUpCollectionListeners();\n        this._setUpViewListeners();\n        return this;\n    },\n\n    /** create and return a collection for when none is initially passed */\n    _createDefaultCollection : function(){\n        // override\n        return new this.collectionClass([]);\n    },\n\n    /** listening for collection events */\n    _setUpCollectionListeners : function(){\n        this.log( this + '._setUpCollectionListeners', this.collection );\n        this.stopListening( this.collection );\n\n        // bubble up error events\n        this.listenTo( this.collection, {\n            error   : function( model, xhr, options, msg, details ){\n                this.trigger( 'error', model, xhr, options, msg, details );\n            },\n            update  : function( collection, options ){\n                var changes = options.changes;\n                // console.info( collection + ', update:', changes, '\\noptions:', options );\n                // more than one: render everything\n                if( options.renderAll || ( changes.added.length + changes.removed.length > 1 ) ){\n                    return this.renderItems();\n                }\n                // otherwise, let the single add/remove handlers do it\n                if( changes.added.length === 1 ){\n                    return this.addItemView( _.first( changes.added ), collection, options );\n                }\n                if( changes.removed.length === 1 ){\n                    return this.removeItemView( _.first( changes.removed ), collection, options );\n                }\n            }\n        });\n        return this;\n    },\n\n    /** listening for sub-view events that bubble up with the 'view:' prefix */\n    _setUpViewListeners : function(){\n        this.log( this + '._setUpViewListeners' );\n\n        // shift to select a range\n        this.on({\n            'view:selected': function( view, ev ){\n                if( ev && ev.shiftKey && this.lastSelected ){\n                    var lastSelectedView = this.viewFromModelId( this.lastSelected );\n                    if( lastSelectedView ){\n                        this.selectRange( view, lastSelectedView );\n                    }\n                } else if( ev && ev.altKey && !this.selecting ){\n                    this.showSelectors();\n                }\n                this.selected.push( view.model.id );\n                this.lastSelected = view.model.id;\n            },\n\n            'view:de-selected': function( view, ev ){\n                this.selected = _.without( this.selected, view.model.id );\n            }\n        });\n    },\n\n    // ------------------------------------------------------------------------ rendering\n    /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n    render : function( speed ){\n        this.log( this + '.render', speed );\n        var $newRender = this._buildNewRender();\n        this._setUpBehaviors( $newRender );\n        this._queueNewRender( $newRender, speed );\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el. */\n    _buildNewRender : function(){\n        this.debug( this + '(ListPanel)._buildNewRender' );\n        var $newRender = $( this.templates.el( {}, this ) );\n        this._renderControls( $newRender );\n        this._renderTitle( $newRender );\n        this._renderSubtitle( $newRender );\n        this._renderSearch( $newRender );\n        this.renderItems( $newRender );\n        return $newRender;\n    },\n\n    /** Build a temp div containing the new children for the view's $el. */\n    _renderControls : function( $newRender ){\n        this.debug( this + '(ListPanel)._renderControls' );\n        var $controls = $( this.templates.controls( {}, this ) );\n        $newRender.find( '.controls' ).replaceWith( $controls );\n        return $controls;\n    },\n\n    /** return a jQuery object containing the title DOM */\n    _renderTitle : function( $where ){\n        //$where = $where || this.$el;\n        //$where.find( '.title' ).replaceWith( ... )\n    },\n\n    /** return a jQuery object containing the subtitle DOM (if any) */\n    _renderSubtitle : function( $where ){\n        //$where = $where || this.$el;\n        //$where.find( '.title' ).replaceWith( ... )\n    },\n\n    /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n    _queueNewRender : function( $newRender, speed ) {\n        speed = ( speed === undefined )?( this.fxSpeed ):( speed );\n        var panel = this;\n        panel.log( '_queueNewRender:', $newRender, speed );\n\n        $( panel ).queue( 'fx', [\n            function( next ){\n                panel.$el.fadeOut( speed, next );\n            },\n            function( next ){\n                panel._swapNewRender( $newRender );\n                next();\n            },\n            function( next ){\n                panel.$el.fadeIn( speed, next );\n            },\n            function( next ){\n                panel.trigger( 'rendered', panel );\n                next();\n            }\n        ]);\n    },\n\n    /** empty out the current el, move the $newRender's children in */\n    _swapNewRender : function( $newRender ){\n        this.$el.empty().attr( 'class', this.className ).append( $newRender.children() );\n        if( this.selecting ){ this.showSelectors( 0 ); }\n        return this;\n    },\n\n    /** Set up any behaviors, handlers (ep. plugins) that need to be called when the entire view has been built but\n     *  not attached to the page yet.\n     */\n    _setUpBehaviors : function( $where ){\n        $where = $where || this.$el;\n        this.$controls( $where ).find('[title]').tooltip();\n        // set up the pupup for actions available when multi selecting\n        this._renderMultiselectActionMenu( $where );\n        return this;\n    },\n\n    /** render a menu containing the actions available to sets of selected items */\n    _renderMultiselectActionMenu : function( $where ){\n        $where = $where || this.$el;\n        var $menu = $where.find( '.list-action-menu' ),\n            actions = this.multiselectActions();\n        if( !actions.length ){\n            return $menu.empty();\n        }\n\n        var $newMenu = $([\n            '<div class=\"list-action-menu btn-group\">',\n                '<button class=\"list-action-menu-btn btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                    _l( 'For all selected' ), '...',\n                '</button>',\n                '<ul class=\"dropdown-menu pull-right\" role=\"menu\">', '</ul>',\n            '</div>'\n        ].join(''));\n        var $actions = actions.map( function( action ){\n            var html = [ '<li><a href=\"javascript:void(0);\">', action.html, '</a></li>' ].join( '' );\n            return $( html ).click( function( ev ){\n                ev.preventDefault();\n                return action.func( ev );\n            });\n        });\n        $newMenu.find( 'ul' ).append( $actions );\n        $menu.replaceWith( $newMenu );\n        return $newMenu;\n    },\n\n    /** return a list of plain objects used to render multiselect actions menu. Each object should have:\n     *      html: an html string used as the anchor contents\n     *      func: a function called when the anchor is clicked (passed the click event)\n     */\n    multiselectActions : function(){\n        return [];\n    },\n\n    // ------------------------------------------------------------------------ sub-$element shortcuts\n    /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n    $scrollContainer : function( $where ){\n        // override or set via attributes.$scrollContainer\n        return ( $where || this.$el ).parent().parent();\n    },\n    /** convenience selector for the section that displays the list controls */\n    $controls : function( $where ){\n        return ( $where || this.$el ).find( '> .controls' );\n    },\n    /** list-items: where the subviews are contained in the view's dom */\n    $list : function( $where ){\n        return ( $where || this.$el ).find( '> .list-items' );\n    },\n    /** container where list messages are attached */\n    $messages : function( $where ){\n        //TODO: controls isn't really correct here (only for ModelListPanel)\n        return ( $where || this.$el ).find( '> .controls .messages' );\n    },\n    /** the message displayed when no views can be shown (no views, none matching search) */\n    $emptyMessage : function( $where ){\n        return ( $where || this.$el ).find( '> .empty-message' );\n    },\n\n    // ------------------------------------------------------------------------ hda sub-views\n    /** render the subviews for the list's collection */\n    renderItems : function( $whereTo ){\n        $whereTo = $whereTo || this.$el;\n        var panel = this;\n        panel.log( this + '.renderItems', $whereTo );\n\n        var $list = panel.$list( $whereTo );\n        panel.freeViews();\n        // console.log( 'views freed' );\n        //TODO:? cache and re-use views?\n        var shownModels = panel._filterCollection();\n        // console.log( 'models filtered:', shownModels );\n\n        panel.views = shownModels.map( function( itemModel ){\n            var view = panel._createItemView( itemModel );\n            return view;\n        });\n\n        $list.empty();\n        // console.log( 'list emptied' );\n        if( panel.views.length ){\n            panel._attachItems( $whereTo );\n            // console.log( 'items attached' );\n        }\n        panel._renderEmptyMessage( $whereTo ).toggle( !panel.views.length );\n        panel.trigger( 'views:ready', panel.views );\n\n        // console.log( '------------------------------------------- rendering items' );\n        return panel.views;\n    },\n\n    /** Filter the collection to only those models that should be currently viewed */\n    _filterCollection : function(){\n        // override this\n        var panel = this;\n        return panel.collection.filter( _.bind( panel._filterItem, panel ) );\n    },\n\n    /** Should the model be viewable in the current state?\n     *     Checks against this.filters and this.searchFor\n     */\n    _filterItem : function( model ){\n        // override this\n        var panel = this;\n        return ( _.every( panel.filters.map( function( fn ){ return fn.call( model ); }) ) )\n            && ( !panel.searchFor || model.matchesAll( panel.searchFor ) );\n    },\n\n    /** Create a view for a model and set up it's listeners */\n    _createItemView : function( model ){\n        var ViewClass = this._getItemViewClass( model );\n        var options = _.extend( this._getItemViewOptions( model ), {\n            model : model\n        });\n        var view = new ViewClass( options );\n        this._setUpItemViewListeners( view );\n        return view;\n    },\n\n    /** Free a view for a model. Note: does not remove it from the DOM */\n    _destroyItemView : function( view ){\n        this.stopListening( view );\n        this.views = _.without( this.views, view );\n    },\n\n    _destroyItemViews : function( view ){\n        var self = this;\n        self.views.forEach( function( v ){\n            self.stopListening( v );\n        });\n        self.views = [];\n        return self;\n    },\n\n    /** free any sub-views the list has */\n    freeViews : function(){\n        return this._destroyItemViews();\n    },\n\n    /** Get the bbone view class based on the model */\n    _getItemViewClass : function( model ){\n        // override this\n        return this.viewClass;\n    },\n\n    /** Get the options passed to the new view based on the model */\n    _getItemViewOptions : function( model ){\n        // override this\n        return {\n            //logger      : this.logger,\n            fxSpeed     : this.fxSpeed,\n            expanded    : false,\n            selectable  : this.selecting,\n            selected    : _.contains( this.selected, model.id ),\n            draggable   : this.dragItems\n        };\n    },\n\n    /** Set up listeners for new models */\n    _setUpItemViewListeners : function( view ){\n        var panel = this;\n        // send all events to the panel, re-namspaceing them with the view prefix\n        this.listenTo( view, 'all', function(){\n            var args = Array.prototype.slice.call( arguments, 0 );\n            args[0] = 'view:' + args[0];\n            panel.trigger.apply( panel, args );\n        });\n\n        // drag multiple - hijack ev.setData to add all selected items\n        this.listenTo( view, 'draggable:dragstart', function( ev, v ){\n            //TODO: set multiple drag data here\n            var json = {},\n                selected = this.getSelectedModels();\n            if( selected.length ){\n                json = selected.toJSON();\n            } else {\n                json = [ v.model.toJSON() ];\n            }\n            ev.dataTransfer.setData( 'text', JSON.stringify( json ) );\n            //ev.dataTransfer.setDragImage( v.el, 60, 60 );\n        }, this );\n\n        return panel;\n    },\n\n    /** Attach views in this.views to the model based on $whereTo */\n    _attachItems : function( $whereTo ){\n        var self = this;\n        // console.log( '_attachItems:', $whereTo, this.$list( $whereTo ) );\n        //ASSUMES: $list has been emptied\n        this.$list( $whereTo ).append( this.views.map( function( view ){\n            return self._renderItemView$el( view );\n        }));\n        return this;\n    },\n\n    /** get a given subview's $el (or whatever may wrap it) and return it */\n    _renderItemView$el : function( view ){\n        // useful to wrap and override\n        return view.render(0).$el;\n    },\n\n    /** render the empty/none-found message */\n    _renderEmptyMessage : function( $whereTo ){\n        this.debug( '_renderEmptyMessage', $whereTo, this.searchFor );\n        var text = this.searchFor? this.noneFoundMsg : this.emptyMsg;\n        return this.$emptyMessage( $whereTo ).text( text );\n    },\n\n    /** expand all item views */\n    expandAll : function(){\n        _.each( this.views, function( view ){\n            view.expand();\n        });\n    },\n\n    /** collapse all item views */\n    collapseAll : function(){\n        _.each( this.views, function( view ){\n            view.collapse();\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection/views syncing\n    /** Add a view (if the model should be viewable) to the panel */\n    addItemView : function( model, collection, options ){\n        // console.log( this + '.addItemView:', model );\n        var panel = this;\n        // get the index of the model in the list of filtered models shown by this list\n        // in order to insert the view in the proper place\n        //TODO:? potentially expensive\n        var modelIndex = panel._filterCollection().indexOf( model );\n        if( modelIndex === -1 ){ return undefined; }\n        var view = panel._createItemView( model );\n        // console.log( 'adding and rendering:', modelIndex, view.toString() );\n\n        $( view ).queue( 'fx', [\n            function( next ){\n                // hide the empty message first if only view\n                if( panel.$emptyMessage().is( ':visible' ) ){\n                    panel.$emptyMessage().fadeOut( panel.fxSpeed, next );\n                } else {\n                    next();\n                }\n            },\n            function( next ){\n                panel._attachView( view, modelIndex );\n                next();\n            }\n        ]);\n        return view;\n    },\n\n    /** internal fn to add view (to both panel.views and panel.$list) */\n    _attachView : function( view, modelIndex, useFx ){\n        // console.log( this + '._attachView:', view, modelIndex, useFx );\n        useFx = _.isUndefined( useFx )? true : useFx;\n        modelIndex = modelIndex || 0;\n        var panel = this;\n\n        // use the modelIndex to splice into views and insert at the proper index in the DOM\n        panel.views.splice( modelIndex, 0, view );\n        panel._insertIntoListAt( modelIndex, panel._renderItemView$el( view ).hide() );\n\n        panel.trigger( 'view:attached', view );\n        if( useFx ){\n            view.$el.slideDown( panel.fxSpeed, function(){\n                panel.trigger( 'view:attached:rendered' );\n            });\n        } else {\n            view.$el.show();\n            panel.trigger( 'view:attached:rendered' );\n        }\n        return view;\n    },\n\n    /** insert a jq object as a child of list-items at the specified *DOM index* */\n    _insertIntoListAt : function( index, $what ){\n        // console.log( this + '._insertIntoListAt:', index, $what );\n        var $list = this.$list();\n        if( index === 0 ){\n            $list.prepend( $what );\n        } else {\n            $list.children().eq( index - 1 ).after( $what );\n        }\n        return $what;\n    },\n\n    /** Remove a view from the panel (if found) */\n    removeItemView : function( model, collection, options ){\n        var panel = this;\n        var view = _.find( panel.views, function( v ){ return v.model === model; });\n        if( !view ){ return undefined; }\n        panel.views = _.without( panel.views, view );\n        panel.trigger( 'view:removed', view );\n\n        // potentially show the empty message if no views left\n        // use anonymous queue here - since remove can happen multiple times\n        $({}).queue( 'fx', [\n            function( next ){\n                view.$el.fadeOut( panel.fxSpeed, next );\n            },\n            function( next ){\n                view.remove();\n                panel.trigger( 'view:removed:rendered' );\n                if( !panel.views.length ){\n                    panel._renderEmptyMessage().fadeIn( panel.fxSpeed, next );\n                } else {\n                    next();\n                }\n            }\n        ]);\n        return view;\n    },\n\n    /** get views based on model.id */\n    viewFromModelId : function( id ){\n        return _.find( this.views, function( v ){ return v.model.id === id; });\n    },\n\n    /** get views based on model */\n    viewFromModel : function( model ){\n        return model ? this.viewFromModelId( model.id ) : undefined;\n    },\n\n    /** get views based on model properties */\n    viewsWhereModel : function( properties ){\n        return this.views.filter( function( view ){\n            return _.isMatch( view.model.attributes, properties );\n        });\n    },\n\n    /** A range of views between (and including) viewA and viewB */\n    viewRange : function( viewA, viewB ){\n        if( viewA === viewB ){ return ( viewA )?( [ viewA ] ):( [] ); }\n\n        var indexA = this.views.indexOf( viewA ),\n            indexB = this.views.indexOf( viewB );\n\n        // handle not found\n        if( indexA === -1 || indexB === -1 ){\n            if( indexA === indexB ){ return []; }\n            return ( indexA === -1 )?( [ viewB ] ):( [ viewA ] );\n        }\n        // reverse if indeces are\n        //note: end inclusive\n        return ( indexA < indexB )?\n            this.views.slice( indexA, indexB + 1 ) :\n            this.views.slice( indexB, indexA + 1 );\n    },\n\n    // ------------------------------------------------------------------------ searching\n    /** render a search input for filtering datasets shown\n     *      (see SearchableMixin in base-mvc for implementation of the actual searching)\n     *      return will start the search\n     *      esc will clear the search\n     *      clicking the clear button will clear the search\n     *      uses searchInput in ui.js\n     */\n    _renderSearch : function( $where ){\n        $where.find( '.controls .search-input' ).searchInput({\n            placeholder     : this.searchPlaceholder,\n            initialVal      : this.searchFor,\n            onfirstsearch   : _.bind( this._firstSearch, this ),\n            onsearch        : _.bind( this.searchItems, this ),\n            onclear         : _.bind( this.clearSearch, this )\n        });\n        return $where;\n    },\n\n    /** What to do on the first search entered */\n    _firstSearch : function( searchFor ){\n        // override to load model details if necc.\n        this.log( 'onFirstSearch', searchFor );\n        return this.searchItems( searchFor );\n    },\n\n    /** filter view list to those that contain the searchFor terms */\n    searchItems : function( searchFor, force ){\n        this.log( 'searchItems', searchFor, this.searchFor, force );\n        if( !force && this.searchFor === searchFor ){ return this; }\n        this.searchFor = searchFor;\n        this.renderItems();\n        this.trigger( 'search:searching', searchFor, this );\n        var $search = this.$( '> .controls .search-query' );\n        if( $search.val() !== searchFor ){\n            $search.val( searchFor );\n        }\n        return this;\n    },\n\n    /** clear the search filters and show all views that are normally shown */\n    clearSearch : function( searchFor ){\n        //this.log( 'onSearchClear', this );\n        this.searchFor = '';\n        this.trigger( 'search:clear', this );\n        this.$( '> .controls .search-query' ).val( '' );\n        this.renderItems();\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ selection\n    /** @type Integer when the number of list item views is >= to this, don't animate selectors */\n    THROTTLE_SELECTOR_FX_AT : 20,\n\n    /** show selectors on all visible itemViews and associated controls */\n    showSelectors : function( speed ){\n        speed = ( speed !== undefined )?( speed ):( this.fxSpeed );\n        this.selecting = true;\n        this.$( '.list-actions' ).slideDown( speed );\n        speed = this.views.length >= this.THROTTLE_SELECTOR_FX_AT? 0 : speed;\n        _.each( this.views, function( view ){\n            view.showSelector( speed );\n        });\n        //this.selected = [];\n        //this.lastSelected = null;\n    },\n\n    /** hide selectors on all visible itemViews and associated controls */\n    hideSelectors : function( speed ){\n        speed = ( speed !== undefined )?( speed ):( this.fxSpeed );\n        this.selecting = false;\n        this.$( '.list-actions' ).slideUp( speed );\n        speed = this.views.length >= this.THROTTLE_SELECTOR_FX_AT? 0 : speed;\n        _.each( this.views, function( view ){\n            view.hideSelector( speed );\n        });\n        this.selected = [];\n        this.lastSelected = null;\n    },\n\n    /** show or hide selectors on all visible itemViews and associated controls */\n    toggleSelectors : function(){\n        if( !this.selecting ){\n            this.showSelectors();\n        } else {\n            this.hideSelectors();\n        }\n    },\n\n    /** select all visible items */\n    selectAll : function( event ){\n        _.each( this.views, function( view ){\n            view.select( event );\n        });\n    },\n\n    /** deselect all visible items */\n    deselectAll : function( event ){\n        this.lastSelected = null;\n        _.each( this.views, function( view ){\n            view.deselect( event );\n        });\n    },\n\n    /** select a range of datasets between A and B */\n    selectRange : function( viewA, viewB ){\n        var range = this.viewRange( viewA, viewB );\n        _.each( range, function( view ){\n            view.select();\n        });\n        return range;\n    },\n\n    /** return an array of all currently selected itemViews */\n    getSelectedViews : function(){\n        return _.filter( this.views, function( v ){\n            return v.selected;\n        });\n    },\n\n    /** return a collection of the models of all currenly selected items */\n    getSelectedModels : function(){\n        // console.log( '(getSelectedModels)' );\n        return new this.collection.constructor( _.map( this.getSelectedViews(), function( view ){\n            return view.model;\n        }));\n    },\n\n    // ------------------------------------------------------------------------ loading indicator\n    /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n    _showLoadingIndicator : function( msg, speed, callback ){\n        this.debug( '_showLoadingIndicator', this.indicator, msg, speed, callback );\n        speed = ( speed !== undefined )?( speed ):( this.fxSpeed );\n        if( !this.indicator ){\n            this.indicator = new LoadingIndicator( this.$el );\n            this.debug( '\\t created', this.indicator );\n        }\n        if( !this.$el.is( ':visible' ) ){\n            this.indicator.show( 0, callback );\n        } else {\n            this.$el.fadeOut( speed );\n            this.indicator.show( msg, speed, callback );\n        }\n    },\n\n    /** hide the loading indicator */\n    _hideLoadingIndicator : function( speed, callback ){\n        this.debug( '_hideLoadingIndicator', this.indicator, speed, callback );\n        speed = ( speed !== undefined )?( speed ):( this.fxSpeed );\n        if( this.indicator ){\n            this.indicator.hide( speed, callback );\n        }\n    },\n\n    // ------------------------------------------------------------------------ scrolling\n    /** get the current scroll position of the panel in its parent */\n    scrollPosition : function(){\n        return this.$scrollContainer().scrollTop();\n    },\n\n    /** set the current scroll position of the panel in its parent */\n    scrollTo : function( pos, speed ){\n        speed = speed || 0;\n        this.$scrollContainer().animate({ scrollTop: pos }, speed );\n        return this;\n    },\n\n    /** Scrolls the panel to the top. */\n    scrollToTop : function( speed ){\n        return this.scrollTo( 0, speed );\n    },\n\n    /** scroll to the given view in list-items */\n    scrollToItem : function( view, speed ){\n        if( !view ){ return this; }\n        return this;\n    },\n\n    /** Scrolls the panel to show the content with the given id. */\n    scrollToId : function( id, speed ){\n        return this.scrollToItem( this.viewFromModelId( id ), speed );\n    },\n\n    // ------------------------------------------------------------------------ panel events\n    /** event map */\n    events : {\n        'click .select-all'     : 'selectAll',\n        'click .deselect-all'   : 'deselectAll'\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** Return a string rep of the panel */\n    toString : function(){\n        return 'ListPanel(' + this.collection + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nListPanel.prototype.templates = (function(){\n\n    var elTemplate = BASE_MVC.wrapTemplate([\n        // temp container\n        '<div>',\n            '<div class=\"controls\"></div>',\n            '<div class=\"list-items\"></div>',\n            '<div class=\"empty-message infomessagesmall\"></div>',\n        '</div>'\n    ]);\n\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n            '<div class=\"title\">',\n                '<div class=\"name\"><%- view.title %></div>',\n            '</div>',\n            '<div class=\"subtitle\"><%- view.subtitle %></div>',\n            // buttons, controls go here\n            '<div class=\"actions\"></div>',\n            // deleted msg, etc.\n            '<div class=\"messages\"></div>',\n\n            '<div class=\"search\">',\n                '<div class=\"search-input\"></div>',\n            '</div>',\n\n            // show when selectors are shown\n            '<div class=\"list-actions\">',\n                '<div class=\"btn-group\">',\n                    '<button class=\"select-all btn btn-default\"',\n                            'data-mode=\"select\">', _l( 'All' ), '</button>',\n                    '<button class=\"deselect-all btn btn-default\"',\n                            'data-mode=\"select\">', _l( 'None' ), '</button>',\n                '</div>',\n                '<div class=\"list-action-menu btn-group\">',\n                '</div>',\n            '</div>',\n        '</div>'\n    ]);\n\n    return {\n        el          : elTemplate,\n        controls    : controlsTemplate\n    };\n}());\n\n\n//=============================================================================\n/** View for a model that has a sub-collection (e.g. History, DatasetCollection)\n *  Allows:\n *      the model to be reset\n *      auto assign panel.collection to panel.model[ panel.modelCollectionKey ]\n *\n */\nvar ModelListPanel = ListPanel.extend({\n\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey : 'contents',\n\n    initialize : function( attributes ){\n        ListPanel.prototype.initialize.call( this, attributes );\n        this.selecting = ( attributes.selecting !== undefined )? attributes.selecting : false;\n\n        this.setModel( this.model, attributes );\n    },\n\n    /** release/free/shutdown old models and set up panel for new models\n     *  @fires new-model with the panel as parameter\n     */\n    setModel : function( model, attributes ){\n        attributes = attributes || {};\n        this.debug( this + '.setModel:', model, attributes );\n\n        this.freeModel();\n        this.freeViews();\n\n        if( model ){\n            var oldModelId = this.model? this.model.get( 'id' ): null;\n\n            // set up the new model with user, logger, storage, events\n            this.model = model;\n            if( this.logger ){\n                this.model.logger = this.logger;\n            }\n            this._setUpModelListeners();\n\n            //TODO: relation btwn model, collection becoming tangled here\n            // free the collection, and assign the new collection to either\n            //  the model[ modelCollectionKey ], attributes.collection, or an empty vanilla collection\n            this.stopListening( this.collection );\n            this.collection = this.model[ this.modelCollectionKey ]\n                || attributes.collection\n                || this._createDefaultCollection();\n            this._setUpCollectionListeners();\n\n            if( oldModelId && model.get( 'id' ) !== oldModelId  ){\n                this.trigger( 'new-model', this );\n            }\n        }\n        return this;\n    },\n\n    /** free the current model and all listeners for it, free any views for the model */\n    freeModel : function(){\n        // stop/release the previous model, and clear cache to sub-views\n        if( this.model ){\n            this.stopListening( this.model );\n            //TODO: see base-mvc\n            //this.model.free();\n            //this.model = null;\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ listening\n    /** listening for model events */\n    _setUpModelListeners : function(){\n        // override\n        this.log( this + '._setUpModelListeners', this.model );\n        // bounce model errors up to the panel\n        this.listenTo( this.model, 'error', function(){\n            var args = Array.prototype.slice.call( arguments, 0 );\n            //args.unshift( 'model:error' );\n            args.unshift( 'error' );\n            this.trigger.apply( this, args );\n        }, this );\n\n        // debugging\n        if( this.logger ){\n            this.listenTo( this.model, 'all', function( event ){\n                this.info( this + '(model)', event, arguments );\n            });\n        }\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el.\n     */\n    _renderControls : function( $newRender ){\n        this.debug( this + '(ModelListPanel)._renderControls' );\n        var json = this.model? this.model.toJSON() : {},\n            $controls = $( this.templates.controls( json, this ) );\n        $newRender.find( '.controls' ).replaceWith( $controls );\n        return $controls;\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** Return a string rep of the panel */\n    toString : function(){\n        return 'ModelListPanel(' + this.model + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nModelListPanel.prototype.templates = (function(){\n\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n            '<div class=\"title\">',\n                //TODO: this is really the only difference - consider factoring titlebar out\n                '<div class=\"name\"><%- model.name %></div>',\n            '</div>',\n            '<div class=\"subtitle\"><%- view.subtitle %></div>',\n            '<div class=\"actions\"></div>',\n            '<div class=\"messages\"></div>',\n\n            '<div class=\"search\">',\n                '<div class=\"search-input\"></div>',\n            '</div>',\n\n            '<div class=\"list-actions\">',\n                '<div class=\"btn-group\">',\n                    '<button class=\"select-all btn btn-default\"',\n                            'data-mode=\"select\">', _l( 'All' ), '</button>',\n                    '<button class=\"deselect-all btn btn-default\"',\n                            'data-mode=\"select\">', _l( 'None' ), '</button>',\n                '</div>',\n                '<div class=\"list-action-menu btn-group\">',\n                '</div>',\n            '</div>',\n        '</div>'\n    ]);\n\n    return _.extend( _.clone( ListPanel.prototype.templates ), {\n        controls : controlsTemplate\n    });\n}());\n\n\n//=============================================================================\n    return {\n        ListPanel      : ListPanel,\n        ModelListPanel : ModelListPanel\n    };\n});\n"]}