{"version":3,"sources":["mvc/list/list-item.js"],"names":["_baseMvc","require","_localization","logNamespace","ExpandableView","Backbone","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","attributes","this","expanded","log","fxSpeed","undefined","render","speed","$newRender","_buildNewRender","_setUpBehaviors","_queueNewRender","el","model","toJSON","$details","replaceWith","_renderDetails","show","view","_swapNewRender","trigger","$","queue","next","$el","fadeOut","fadeIn","empty","attr","className","append","children","$where","find","tooltip","placement","$newDetails","details","expand","collapse","_expand","always","_fetchModelDetails","hasDetails","jQuery","when","fetch","slideDown","debug","slideUp","tagName","SelectableViewMixin","DraggableViewMixin","initialize","call","_setUpListeners","on","isSelectable","hide","prototype","_renderWarnings","selectable","draggable","_renderTitleBar","_renderPrimaryActions","_renderSubtitle","each","templates","warnings","templateFn","$warnings","showSelector","draggableOn","json","_","titleBar","toggleSelect","subtitle","events","click .title-bar","keydown .title-bar","click .selector","_clickTitleBar","KEYCODE_RETURN","event","toggleExpanded","stopPropagation","_keyDownTitleBar","modelString","type","elTemplato","keyCode","titleBarTemplate","wrapTemplate","ListItemView","FoldoutListItemView","foldoutStyle","foldoutPanelClass","_attachFoldout","foldout","$whereTo","_expandByDrilldown","FoldoutClass","_getFoldoutPanelClass","options","_getFoldoutPanelOptions","detailsTemplate","listenTo"],"mappings":"4IAAA,IAAAA,SAAAC,QAAA,2DACAC,cAAAD,QAAA,2EAEIE,aAAe,OAMfC,eAAiBC,SAASC,KAAKC,OAAOC,UAAAC,QAASC,eAAeH,QARlEI,cAAAR,aAEIA,WAAAA,SAAJS,GAEAC,KAAAC,SAAAF,EAAAE,WAAA,EAcQD,KAAKE,IAAI,eAAgBF,KAAKC,UAC9BD,KAAKG,aACsBC,IAAvBL,EAAWI,QAZnBZ,EAAiBC,QACjBM,KAAeR,SAkBfa,QAAS,OARLE,OAAA,SAAAC,GAXiE,IAAAC,EAAAP,KAAAQ,kBAkBrE,OAQIR,KAAKS,gBAAgBF,GATzBP,KAAAU,gBAAAH,EAAAD,GACAN,MAMAK,gBAAQ,WAEJ,IAAAE,EAAKE,EAAAA,KAAgBF,UAArBI,GAAAX,KAAAY,MAAAC,SAAAb,OAcA,OAbAA,KAAKU,UACLV,KAAOc,SAAPP,GAAAQ,YAAAf,KAAAgB,iBAAAC,QAYOV,GAHPG,gBAAST,SAAUM,EAAAD,GAElB,IAAAY,EAAAlB,KAvCgE,KAsC7DM,OAAcC,IAAdD,EAA0BS,KAAAA,QAAYT,IActCY,EAAKC,eAAeZ,GAT5BW,EAAAE,QAAA,WAAAF,IAYQG,EAAEH,GAAMI,MAAM,MACV,SAASC,GATrBb,EAAiBc,IAAAC,QAAAnB,EAAAiB,IAETL,SAAJK,GAWYL,EAAKC,eAAeZ,GAT5BD,KAEAY,SAAaK,GACVL,EAAAM,IAAAE,OAAApB,EAAAiB,IAGKL,SAASO,GAEbP,EAASK,QAAM,WAAAL,GACXA,QASHC,eAdL,SAAAZ,GAgBH,OAAAP,KAAAwB,IAvEgEG,QA8E5DC,KAJT,QACAT,EAAAA,WAAgBnB,KAAA6B,WAAStB,KAAAA,YAAYP,KAAA6B,WA3EgCC,OAAAvB,EAAAwB,aAyFjEC,gBAASA,SAAUA,IACnBA,EAAAA,GAAAhC,KAAAwB,KA1FiES,KAAA,WAAAC,SAAAC,UAAA,YAkGjEH,SAAAA,SAASA,GAlGwD,OAmGjEA,EAAOA,GAAYhC,KAAAwB,KAnG8CS,KAAA,eAwGjEjB,eAAIoB,WACJ,IAAAA,EAAK3B,EAALT,KAAqBoC,UAArBC,QAAArC,KAAAY,MAAAC,SAAAb,OAzGiE,OA0GjEA,KAAAS,gBAAA2B,GA1GiEA,GAkHjEE,eAASA,SAAWlC,GAlH6C,OAmHjEkC,OAAYlC,IAARkC,GAAQtC,KAAAC,SAAAqC,GAAZtC,KAEOsC,SAENtC,KAAAuC,WAvHgEvC,MAgIjEsC,OAAIpB,WACJ,IAAAA,EAAOA,KACHA,OAAAA,EAAKsB,qBAALC,OAAA,WADJvB,EAAAsB,aASAE,mBAAgBC,WACZ,OAAA3C,KAAAY,MAAYA,aA3IiDgC,OAAAC,OA4IhE7C,KAAAY,MAAAkC,SAMDN,QAAItB,WAAJ,IACIkB,EAAAA,KACJlB,EAAgBH,EAAAA,iBAChBG,EAAAJ,WAAAC,YAAAqB,GAEAlB,EAAKJ,UAAWiC,EACZ7B,EAAAA,WAAA6B,UAAa7B,EAAYA,QAAzB,WADJA,EAAAE,QAAA,WAAAF,MASAqB,SAAKS,WACLhD,KAAIkB,MAAOlB,KAAX,6BACAkB,IAAAA,EAAKjB,KACLiB,EAAKJ,UAAWmC,EACZ/B,KAAAA,WAAA+B,QAAa/B,EAAbf,QAAA,WADJe,EAAAE,QAAA,YAAAF,QAoBAgC,aADsE3D,eAAAG,OAEtEmC,UAAAA,QAAAA,MAAWlC,UAAAC,QAF2DuD,oBAAAxD,UAAAC,QAAAwD,oBACtEF,QAAS,MAGTrB,UAAA,YAGIwB,WAAA,SAASF,GACT5D,eAAS6D,UAAAA,WAAmBC,KAAAA,KAAWC,GACvC3D,UAAAC,QAAK2D,oBAALF,WAAAC,KAAAtD,KAAAD,GATkEJ,UAAAC,QAAAwD,mBAAAC,WAAAC,KAAAtD,KAAAD,GASlEC,KAAKuD,mBAMLA,gBACI,WAgBAhD,OAbQP,KAAAwD,GADJ,aAGI,SAAOC,GACVA,EAPTzD,KAAAqB,EAAA,oBAAAqC,OAfkE1D,KAAAqB,EAAA,oBAAAJ,QA8BtEjB,MAEQO,MAeJC,gBAAA,WA/CkE,IAAAD,EAAAhB,eAAAoE,UAAAnD,gBAAA8C,KAiC9DtD,MA8BR4D,OAZAzC,EACI5B,SAAeoE,aACNE,YAAY7D,KAAA4D,mBACjBrD,EACHwB,SAAA,cACQ+B,YAAW9D,KAAA+D,mBAChBxD,EACHwB,SAAA,oBACMD,OAAP9B,KAAAgE,yBA3DkEzD,EA6C7D0B,KAAK,0BAiBdlB,YAAAf,KAAAiE,mBACAL,GAIIzC,eAAA,SAAAZ,GAQJwD,OAPMG,eAAUC,UAAUC,eAAmBC,KAAAA,KAAY9D,GACjD+D,KAAAA,YADJtE,KAAAuE,aAAA,GApEkEvE,KAAA8D,WAyD9D9D,KAAKwE,cAkBbT,KAAiBvC,KAIjBoC,gBAAA,WACAI,IAAAA,EAAAA,KACIM,EAAAjD,EAAA,gCACOoD,EAAPvD,EAAAN,MAAAC,SAKA,OAnBA6D,EAAER,KAAKhD,EAAKiD,UAAUC,SAAU,SAASC,GAiB7CC,EAAAxC,OAAAT,EAAAgD,EAAAI,EAAAvD,OAEaoD,GAIbP,gBAAA,WACQ,OAAA1C,EAAArB,KAAAmE,UAAAQ,SAAA3E,KAAAY,MAAAC,SAAAb,QAIJgE,sBAAmB,WAdnB,UAoBAC,gBAAA,WACI,OAAKW,EAAAA,KAAAA,UAALC,SAAA7E,KAAAY,MAAAC,SAAAb,QAKA8E,QA5G8DC,mBAAA,iBA+FlEC,qBAAsB,mBAiB1BC,kBAAA,gBAGIC,eACIC,SADJC,GAGIA,EAAAA,kBAKAA,EAAKC,QACLD,KAAME,aAANF,GACOpF,KAAP6D,YACH7D,KAAAuE,gBAlBGvE,KAAKqF,kBA0BTE,iBAAO,SAAkBC,GAKrC,OACAJ,GACuBjB,YAAVR,EAAb8B,MA9IA,KA+IQC,EAAaC,SA1BY,KA4BzBP,EAAAO,UArBQ3F,KAAKqF,iBAwBbD,EAAAE,mBACA,IAYAlB,SAAAA,WAEAwB,MAAAA,iBA7BsB5F,KAAKY,MAAQZ,KAAKY,MAAQ,GAAK,cA6BzBiF,QAgB5BC,aAAAnC,UAAAQ,WAkDA2B,GAjDAnG,UAAAC,QAAAiG,cApCA,6BAwCA,+BAIJ,yBACIlF,6CACAyD,SAEAS,sCACAxC,gCApCA,8BAwCR,WAiCQ+B,YAtBsCO,SA7CnBhF,UAAAC,QAASiG,cAGxB,6CAEA,mCAwCRE,sBACA,gDAtCQ,SACA,+BACA,UAyCR,WAtBIlB,SAyBJlF,UAAAC,QAAAiG,cArCI,iCAqDJxD,QAXa2D,UAAAA,QAAiBH,cAEzB,iCAyBWjF,IAAAA,oBAAOA,aAAAA,QAMvBoF,aAAA,UAEIC,kBAAA,KAMA5C,WAAO,SAAAtD,GACH,cAAAC,KAAAgG,eACAA,KAAAA,UAAc,GAFXhG,KAAPgG,aAAAjG,EAAAiG,cAAAhG,KAAAgG,aAvDsChG,KAAAiG,kBAmBlClG,EAAWkG,mBAAqBjG,KAAKiG,kBA4C7CC,aAAgBvC,UAAAN,WAAAC,KAAS6C,KAASC,GAC9BA,KAAAA,QAAWA,KAAAA,uBAIdpF,eApEyC,WA2BtC,GAA0B,cAAtBhB,KAAKgG,aA2Cb,OAAA3E,IAEI,IAAIH,EAAJ4E,aAAAnC,UAAA3C,eAAAsC,KAAAtD,MACA,OAAOkB,KAAKwB,eAAAA,KAALyD,QAAiC/D,IAIhClB,oBAAKmF,WACR,IAAAzF,EAAAZ,KAAAY,MALL0F,EAAAtG,KAAAuG,sBAAA3F,GAzEsC4F,EAAAxG,KAAAyG,wBAAA7F,GAsF1CyF,OA/CkB,IAAIC,EA2CtB5B,EAAAhF,OAAA8G,GAzCgB5F,MAAOA,MAiDfM,sBAAa,WAEjBA,OAAKE,KAAL6E,mBAIRQ,wBAAA,WACA,OAEQC,aAAkB1G,KAAAgG,aAGd7F,QAAAH,KAAAG,UAM8C+F,eAAtD,SAAAC,EAAAC,GAzCI,OA+BRA,EAAAA,GAAApG,KAAAqB,EAAA,cAjCQrB,KAAKmG,QAAUA,EAAQ9F,OAAO,GAgDtC8F,EAAA9E,EAAA,eAAAqC,OA9Ce0C,EA+CAtE,OAAAqE,EAAA3E,MA3CXc,OAAQ,WACJ,IAAIpB,EAAOlB,KACX,OAAOkB,EAAKwB,qBAAqBD,OAAO,WACV,YAAtBvB,EAAK8E,aACL9E,EAAKsB,UACwB,cAAtBtB,EAAK8E,cACZ9E,EAAKmF,wBASjBA,mBAAoB,WAChB,IAAInF,EAAOlB,KAEXkB,EAAKyF,SAASzF,EAAKiF,QAAS,QAAS,WACjCjF,EAAKE,QAAQ,sBAAuBF,EAAMA,EAAKiF,WAEnDjF,EAAKE,QAAQ,qBAAsBF,EAAMA,EAAKiF,YAMtDJ,oBAAoBpC,UAAUQ,UAAa,WACvC,IAAIuC,EAAkB/G,UAAAC,QAASiG,cAEvB,wBAEA,UAEJ,cAGJ,OAAOnB,EAAEhF,UAAWoG,aAAanC,UAAUQ,WACvC9B,QAASqE,IAX0B,oBAiBvCnH,eAAgBA,eAChBuG,aAAcA,aACdC,oBAAqBA","file":"../../../scripts/mvc/list/list-item.js","sourcesContent":["import BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"list\";\n//==============================================================================\n/** A view which, when first rendered, shows only summary data/attributes, but\n *      can be expanded to show further details (and optionally fetch those\n *      details from the server).\n */\nvar ExpandableView = Backbone.View.extend(BASE_MVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    //TODO: Although the reasoning behind them is different, this shares a lot with HiddenUntilActivated above: combine them\n    //PRECONDITION: model must have method hasDetails\n    //PRECONDITION: subclasses must have templates.el and templates.details\n\n    initialize: function(attributes) {\n        /** are the details of this view expanded/shown or not? */\n        this.expanded = attributes.expanded || false;\n        this.log(\"\\t expanded:\", this.expanded);\n        this.fxSpeed =\n            attributes.fxSpeed !== undefined\n                ? attributes.fxSpeed\n                : this.fxSpeed;\n    },\n\n    // ........................................................................ render main\n    /** jq fx speed */\n    fxSpeed: \"fast\",\n\n    /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n    render: function(speed) {\n        var $newRender = this._buildNewRender();\n        this._setUpBehaviors($newRender);\n        this._queueNewRender($newRender, speed);\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el.\n     *      If the view is already expanded, build the details as well.\n     */\n    _buildNewRender: function() {\n        // create a new render using a skeleton template, render title buttons, render body, and set up events, etc.\n        var $newRender = $(this.templates.el(this.model.toJSON(), this));\n        if (this.expanded) {\n            this.$details($newRender).replaceWith(this._renderDetails().show());\n        }\n        return $newRender;\n    },\n\n    /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n    _queueNewRender: function($newRender, speed) {\n        speed = speed === undefined ? this.fxSpeed : speed;\n        var view = this;\n\n        if (speed === 0) {\n            view._swapNewRender($newRender);\n            view.trigger(\"rendered\", view);\n        } else {\n            $(view).queue(\"fx\", [\n                function(next) {\n                    view.$el.fadeOut(speed, next);\n                },\n                function(next) {\n                    view._swapNewRender($newRender);\n                    next();\n                },\n                function(next) {\n                    view.$el.fadeIn(speed, next);\n                },\n                function(next) {\n                    view.trigger(\"rendered\", view);\n                    next();\n                }\n            ]);\n        }\n    },\n\n    /** empty out the current el, move the $newRender's children in */\n    _swapNewRender: function($newRender) {\n        return this.$el\n            .empty()\n            .attr(\n                \"class\",\n                _.isFunction(this.className) ? this.className() : this.className\n            )\n            .append($newRender.children());\n    },\n\n    /** set up js behaviors, event handlers for elements within the given container\n     *  @param {jQuery} $container jq object that contains the elements to process (defaults to this.$el)\n     */\n    _setUpBehaviors: function($where) {\n        $where = $where || this.$el;\n        // set up canned behavior on children (bootstrap, popupmenus, editable_text, etc.)\n        //make_popup_menus( $where );\n        $where.find(\"[title]\").tooltip({ placement: \"bottom\" });\n    },\n\n    // ......................................................................... details\n    /** shortcut to details DOM (as jQ) */\n    $details: function($where) {\n        $where = $where || this.$el;\n        return $where.find(\"> .details\");\n    },\n\n    /** build the DOM for the details and set up behaviors on it */\n    _renderDetails: function() {\n        var $newDetails = $(this.templates.details(this.model.toJSON(), this));\n        this._setUpBehaviors($newDetails);\n        return $newDetails;\n    },\n\n    // ......................................................................... expansion/details\n    /** Show or hide the details\n     *  @param {Boolean} expand if true, expand; if false, collapse\n     */\n    toggleExpanded: function(expand) {\n        expand = expand === undefined ? !this.expanded : expand;\n        if (expand) {\n            this.expand();\n        } else {\n            this.collapse();\n        }\n        return this;\n    },\n\n    /** Render and show the full, detailed body of this view including extra data and controls.\n     *      note: if the model does not have detailed data, fetch that data before showing the body\n     *  @fires expanded when a body has been expanded\n     */\n    expand: function() {\n        var view = this;\n        return view._fetchModelDetails().always(function() {\n            view._expand();\n        });\n    },\n\n    /** Check for model details and, if none, fetch them.\n     *  @returns {jQuery.promise} the model.fetch.xhr if details are being fetched, an empty promise if not\n     */\n    _fetchModelDetails: function() {\n        if (!this.model.hasDetails()) {\n            return this.model.fetch();\n        }\n        return jQuery.when();\n    },\n\n    /** Inner fn called when expand (public) has fetched the details */\n    _expand: function() {\n        var view = this,\n            $newDetails = view._renderDetails();\n        view.$details().replaceWith($newDetails);\n        // needs to be set after the above or the slide will not show\n        view.expanded = true;\n        view.$details().slideDown(view.fxSpeed, function() {\n            view.trigger(\"expanded\", view);\n        });\n    },\n\n    /** Hide the body/details of an HDA.\n     *  @fires collapsed when a body has been collapsed\n     */\n    collapse: function() {\n        this.debug(this + \"(ExpandableView).collapse\");\n        var view = this;\n        view.expanded = false;\n        this.$details().slideUp(view.fxSpeed, function() {\n            view.trigger(\"collapsed\", view);\n        });\n    }\n});\n\n//==============================================================================\n/** A view that is displayed in some larger list/grid/collection.\n *      Inherits from Expandable, Selectable, Draggable.\n *  The DOM contains warnings, a title bar, and a series of primary action controls.\n *      Primary actions are meant to be easily accessible item functions (such as delete)\n *      that are rendered in the title bar.\n *\n *  Details are rendered when the user clicks the title bar or presses enter/space when\n *      the title bar is in focus.\n *\n *  Designed as a base class for history panel contents - but usable elsewhere (I hope).\n */\nvar ListItemView = ExpandableView.extend(\n    BASE_MVC.mixin(BASE_MVC.SelectableViewMixin, BASE_MVC.DraggableViewMixin, {\n        tagName: \"div\",\n        className: \"list-item\",\n\n        /** Set up the base class and all mixins */\n        initialize: function(attributes) {\n            ExpandableView.prototype.initialize.call(this, attributes);\n            BASE_MVC.SelectableViewMixin.initialize.call(this, attributes);\n            BASE_MVC.DraggableViewMixin.initialize.call(this, attributes);\n            this._setUpListeners();\n        },\n\n        /** event listeners */\n        _setUpListeners: function() {\n            // hide the primary actions in the title bar when selectable and narrow\n            this.on(\n                \"selectable\",\n                function(isSelectable) {\n                    if (isSelectable) {\n                        this.$(\".primary-actions\").hide();\n                    } else {\n                        this.$(\".primary-actions\").show();\n                    }\n                },\n                this\n            );\n            return this;\n        },\n\n        // ........................................................................ rendering\n        /** In this override, call methods to build warnings, titlebar and primary actions */\n        _buildNewRender: function() {\n            var $newRender = ExpandableView.prototype._buildNewRender.call(\n                this\n            );\n            $newRender\n                .children(\".warnings\")\n                .replaceWith(this._renderWarnings());\n            $newRender\n                .children(\".title-bar\")\n                .replaceWith(this._renderTitleBar());\n            $newRender\n                .children(\".primary-actions\")\n                .append(this._renderPrimaryActions());\n            $newRender\n                .find(\"> .title-bar .subtitle\")\n                .replaceWith(this._renderSubtitle());\n            return $newRender;\n        },\n\n        /** In this override, render the selector controls and set up dragging before the swap */\n        _swapNewRender: function($newRender) {\n            ExpandableView.prototype._swapNewRender.call(this, $newRender);\n            if (this.selectable) {\n                this.showSelector(0);\n            }\n            if (this.draggable) {\n                this.draggableOn();\n            }\n            return this.$el;\n        },\n\n        /** Render any warnings the item may need to show (e.g. \"I'm deleted\") */\n        _renderWarnings: function() {\n            var view = this,\n                $warnings = $('<div class=\"warnings\"></div>'),\n                json = view.model.toJSON();\n            //TODO:! unordered (map)\n            _.each(view.templates.warnings, function(templateFn) {\n                $warnings.append($(templateFn(json, view)));\n            });\n            return $warnings;\n        },\n\n        /** Render the title bar (the main/exposed SUMMARY dom element) */\n        _renderTitleBar: function() {\n            return $(this.templates.titleBar(this.model.toJSON(), this));\n        },\n\n        /** Return an array of jQ objects containing common/easily-accessible item controls */\n        _renderPrimaryActions: function() {\n            // override this\n            return [];\n        },\n\n        /** Render the title bar (the main/exposed SUMMARY dom element) */\n        _renderSubtitle: function() {\n            return $(this.templates.subtitle(this.model.toJSON(), this));\n        },\n\n        // ......................................................................... events\n        /** event map */\n        events: {\n            // expand the body when the title is clicked or when in focus and space or enter is pressed\n            \"click .title-bar\": \"_clickTitleBar\",\n            \"keydown .title-bar\": \"_keyDownTitleBar\",\n            \"click .selector\": \"toggleSelect\"\n        },\n\n        /** expand when the title bar is clicked */\n        _clickTitleBar: function(event) {\n            event.stopPropagation();\n            if (event.altKey) {\n                this.toggleSelect(event);\n                if (!this.selectable) {\n                    this.showSelector();\n                }\n            } else {\n                this.toggleExpanded();\n            }\n        },\n\n        /** expand when the title bar is in focus and enter or space is pressed */\n        _keyDownTitleBar: function(event) {\n            // bail (with propagation) if keydown and not space or enter\n            var KEYCODE_SPACE = 32,\n                KEYCODE_RETURN = 13;\n            if (\n                event &&\n                event.type === \"keydown\" &&\n                (event.keyCode === KEYCODE_SPACE ||\n                    event.keyCode === KEYCODE_RETURN)\n            ) {\n                this.toggleExpanded();\n                event.stopPropagation();\n                return false;\n            }\n            return true;\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? this.model + \"\" : \"(no model)\";\n            return \"ListItemView(\" + modelString + \")\";\n        }\n    })\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nListItemView.prototype.templates = (function() {\n    var elTemplato = BASE_MVC.wrapTemplate([\n        '<div class=\"list-element\">',\n        // errors, messages, etc.\n        '<div class=\"warnings\"></div>',\n\n        // multi-select checkbox\n        '<div class=\"selector\">',\n        '<span class=\"fa fa-2x fa-square-o\"></span>',\n        \"</div>\",\n        // space for title bar buttons - gen. floated to the right\n        '<div class=\"primary-actions\"></div>',\n        '<div class=\"title-bar\"></div>',\n\n        // expandable area for more details\n        '<div class=\"details\"></div>',\n        \"</div>\"\n    ]);\n\n    var warnings = {};\n\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            //TODO: prob. belongs in dataset-list-item\n            '<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- element.name %></span>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            \"</div>\"\n        ],\n        \"element\"\n    );\n\n    var subtitleTemplate = BASE_MVC.wrapTemplate([\n        // override this\n        '<div class=\"subtitle\"></div>'\n    ]);\n\n    var detailsTemplate = BASE_MVC.wrapTemplate([\n        // override this\n        '<div class=\"details\"></div>'\n    ]);\n\n    return {\n        el: elTemplato,\n        warnings: warnings,\n        titleBar: titleBarTemplate,\n        subtitle: subtitleTemplate,\n        details: detailsTemplate\n    };\n})();\n\n//==============================================================================\n/** A view that is displayed in some larger list/grid/collection.\n *  *AND* can display some sub-list of it's own when expanded (e.g. dataset collections).\n *  This list will 'foldout' when the item is expanded depending on this.foldoutStyle:\n *      If 'foldout': will expand vertically to show the nested list\n *      If 'drilldown': will overlay the parent list\n *\n *  Inherits from ListItemView.\n *\n *  _renderDetails does the work of creating this.details: a sub-view that shows the nested list\n */\nvar FoldoutListItemView = ListItemView.extend({\n    /** If 'foldout': show the sub-panel inside the expanded item\n     *  If 'drilldown': only fire events and handle by pub-sub\n     *      (allow the panel containing this item to attach it, hide itself, etc.)\n     */\n    foldoutStyle: \"foldout\",\n    /** Panel view class to instantiate for the sub-panel */\n    foldoutPanelClass: null,\n\n    /** override to:\n     *      add attributes foldoutStyle and foldoutPanelClass for config poly\n     *      disrespect attributes.expanded if drilldown\n     */\n    initialize: function(attributes) {\n        if (this.foldoutStyle === \"drilldown\") {\n            this.expanded = false;\n        }\n        this.foldoutStyle = attributes.foldoutStyle || this.foldoutStyle;\n        this.foldoutPanelClass =\n            attributes.foldoutPanelClass || this.foldoutPanelClass;\n\n        ListItemView.prototype.initialize.call(this, attributes);\n        this.foldout = this._createFoldoutPanel();\n    },\n\n    /** in this override, attach the foldout panel when rendering details */\n    _renderDetails: function() {\n        if (this.foldoutStyle === \"drilldown\") {\n            return $();\n        }\n        var $newDetails = ListItemView.prototype._renderDetails.call(this);\n        return this._attachFoldout(this.foldout, $newDetails);\n    },\n\n    /** In this override, handle collection expansion. */\n    _createFoldoutPanel: function() {\n        var model = this.model;\n        var FoldoutClass = this._getFoldoutPanelClass(model),\n            options = this._getFoldoutPanelOptions(model),\n            foldout = new FoldoutClass(\n                _.extend(options, {\n                    model: model\n                })\n            );\n        return foldout;\n    },\n\n    /** Stub to return proper foldout panel class */\n    _getFoldoutPanelClass: function() {\n        // override\n        return this.foldoutPanelClass;\n    },\n\n    /** Stub to return proper foldout panel options */\n    _getFoldoutPanelOptions: function() {\n        return {\n            // propagate foldout style down\n            foldoutStyle: this.foldoutStyle,\n            fxSpeed: this.fxSpeed\n        };\n    },\n\n    /** Render the foldout panel inside the view, hiding controls */\n    _attachFoldout: function(foldout, $whereTo) {\n        $whereTo = $whereTo || this.$(\"> .details\");\n        this.foldout = foldout.render(0);\n        foldout.$(\"> .controls\").hide();\n        return $whereTo.append(foldout.$el);\n    },\n\n    /** In this override, branch on foldoutStyle to show expanded */\n    expand: function() {\n        var view = this;\n        return view._fetchModelDetails().always(function() {\n            if (view.foldoutStyle === \"foldout\") {\n                view._expand();\n            } else if (view.foldoutStyle === \"drilldown\") {\n                view._expandByDrilldown();\n            }\n        });\n    },\n\n    /** For drilldown, set up close handler and fire expanded:drilldown\n     *      containing views can listen to this and handle other things\n     *      (like hiding themselves) by listening for expanded/collapsed:drilldown\n     */\n    _expandByDrilldown: function() {\n        var view = this;\n        // attachment and rendering done by listener\n        view.listenTo(view.foldout, \"close\", function() {\n            view.trigger(\"collapsed:drilldown\", view, view.foldout);\n        });\n        view.trigger(\"expanded:drilldown\", view, view.foldout);\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nFoldoutListItemView.prototype.templates = (function() {\n    var detailsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            // override with more info (that goes above the panel)\n            \"</div>\"\n        ],\n        \"collection\"\n    );\n\n    return _.extend({}, ListItemView.prototype.templates, {\n        details: detailsTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    ExpandableView: ExpandableView,\n    ListItemView: ListItemView,\n    FoldoutListItemView: FoldoutListItemView\n};\n"]}