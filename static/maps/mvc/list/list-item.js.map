{"version":3,"sources":["mvc/list/list-item.js"],"names":["ExpandableView","Backbone","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","initialize","attributes","this","expanded","log","fxSpeed","undefined","render","speed","$newRender","_setUpBehaviors","_queueNewRender","_buildNewRender","templates","model","toJSON","_renderDetails","show","$","view","_swapNewRender","trigger","queue","next","$el","fadeOut","fadeIn","empty","attr","_","isFunction","className","append","$where","find","tooltip","placement","$details","$newDetails","details","toggleExpanded","expand","collapse","_fetchModelDetails","always","jQuery","_expand","replaceWith","slideDown","debug","slideUp","ListItemView","tagName","SelectableViewMixin","DraggableViewMixin","prototype","call","_setUpListeners","on","isSelectable","hide","children","showSelector","_renderTitleBar","draggableOn","_renderPrimaryActions","_renderSubtitle","each","$warnings","_renderWarnings","json","warnings","templateFn","titleBar","event","stopPropagation","altKey","subtitle","events","click .title-bar","keydown .title-bar","click .selector","_clickTitleBar","KEYCODE_SPACE","KEYCODE_RETURN","_keyDownTitleBar","modelString","type","elTemplato","keyCode","toString","subtitleTemplate","el","wrapTemplate","FoldoutListItemView","foldoutStyle","FoldoutClass","_getFoldoutPanelClass","_getFoldoutPanelOptions","foldoutPanelClass","_attachFoldout","_createFoldoutPanel","$whereTo","foldout","_expandByDrilldown","options","detailsTemplate","listenTo"],"mappings":"mMASIA,QAAiBC,SAASC,KAAKC,OAAOC,EAAAC,QAASC,eAAeH,QAC9DI,cAPe,OAafC,WAAY,SAASC,GAZzBC,KAAAC,SAAAF,EAAAE,WAAA,EACAD,KAAAE,IAAA,eAAAF,KAAAC,UAeQD,KAAKG,aACsBC,IAAvBL,EAAWI,QACLJ,EAAWI,QAbzBb,KAAAA,SAKAa,QAAA,OAKIE,OAAA,SAASC,GACT,IAAAC,EAAAP,KACID,kBAKR,OAFCC,KAfoEQ,gBAAAD,GA2BjEP,KAAKS,gBAAgBF,EAAYD,GAVrCN,MAiBAU,gBAAiB,WATb,IAAAH,EAAIA,EAAAA,KAAaI,UAAKD,GAAAA,KAALE,MAAjBC,SAAAb,OAIH,OAHGA,KAAKQ,UACLR,KAAKS,SAAAA,GAAgBF,YAArBP,KAAAc,iBAAAC,QA3BiER,GAoCjEE,gBAAIF,SAAaS,EAAOL,GAEpB,IAAAM,EAAAjB,KAEGO,KAHPD,OAASL,IAALK,EAAeN,KAAAG,QAAAG,IArC8CW,EAAAC,eAAAX,GAqD7DU,EAAKE,QAAQ,WAAYF,IAEzBD,EAAEC,GAAMG,MAAM,MACV,SAASC,GACLJ,EAAKK,IAAIC,QAAQjB,EAAOe,IATpCf,SAAQA,GACJW,EAAOC,eAAXX,GAYYc,KATRJ,SAAKC,GACLD,EAAKE,IAAQK,OAAAlB,EAAYW,IAEzBD,SAAQI,GAEAH,EAAKK,QAAIC,WAAeF,GAE5BA,QASIA,eAAAA,SAAAA,GACH,OAAArB,KAdLsB,IAgBHG,QAvEgEC,KA+EzD,QALZC,EAAAC,WAAA5B,KAAA6B,WAAA7B,KAAA6B,YAAA7B,KAAA6B,WAEIC,OAAOvB,EACFkB,aAWTjB,gBAAAA,SAAiBuB,IACbA,EAAAA,GAASA,KAAUT,KAGnBS,KAAOC,WAAKC,SAAWA,UAAUC,YAKrCC,SAAAA,SAAUJ,GAEN,OADAA,EAAAA,GAASA,KAAUT,KACZS,KAAOC,eAIlBlB,eAAAA,WACI,IAAAsB,EAAIA,EAAAA,KAAgBzB,UAAKA,QAAU0B,KAAQzB,MAAKA,SAALZ,OAE3C,OADAA,KAAAQ,gBAAKA,GACL4B,GAOJE,eAAAA,SAAgBC,GAOZ,OANAA,OAASA,IAATA,GAASvC,KAAwBC,SAAKA,GAElCD,KAAAuC,SAEAvC,KAAAwC,WAEJxC,MAOJuC,OAAAA,WACI,IAAAtB,EAAIA,KACJ,OAAAA,EAAOA,qBAAKwB,OAAqBC,WAC7BzB,EAAAA,aAORwB,mBAAAA,WACI,OAAAzC,KAAKY,MAAKA,aAGV+B,OAAOA,OAFH3C,KAAOY,MAAKA,SAMpBgC,QAAAA,WACI,IAAA3B,EAAIA,KAAJmB,EACIA,EAAcnB,iBAClBA,EAAAA,WAAKkB,YAAWU,GAEhB5B,EAAAA,UAAKhB,EACLgB,EAAAA,WAAKkB,UAAWW,EAAU7B,QAAKd,WAC3Bc,EAAAA,QAAKE,WAAQF,MAOrBuB,SAAAA,WACIxC,KAAA+C,MAAKA,KAAM,6BACX,IAAA9B,EAAIA,KACJA,EAAAA,UAAKhB,EACLD,KAAAmC,WAAKA,QAAWa,EAAQ/B,QAAKd,WACzBc,EAAAA,QAAKE,YAAQF,SAiBzBgC,EAAIA,EAAe3D,OAEX4D,EAAAA,QAAAA,MAASxD,EAAAC,QAD6DwD,oBAAAzD,EAAAC,QAAAyD,oBAEtEvB,QAAAA,MAAAA,UAAW,YAIPvC,WAAAA,SAAe+D,GACf/D,EAAA+D,UAASF,WAAAA,KAAoBrD,KAAAA,GAC7BJ,EAAAC,QAAAwD,oBAASC,WAAmBtD,KAAAA,KAAWwD,GACvC5D,EAAAC,QAAK4D,mBAALzD,WAAAwD,KAAAtD,KAAAD,GATkEC,KAAAuD,mBAclEA,gBAAA,WAiBJ7C,OAbYV,KAAAwD,GACI,aACH,SAAMC,GACHA,EACHzD,KAAAgB,EAAA,oBAAA0C,OAIT1D,KAAAgB,EAAA,oBAAAD,QAGJf,MAEAU,MAaIH,gBACKyB,WAEL,IAAAzB,EAAAjB,EAAA+D,UAAA3C,gBAAA4C,KA/CkEtD,MA8DtE,OAZAO,EACAW,SAAgB,aACZ5B,YAAe+D,KAAAA,mBACf9C,EACIoD,SAAKC,cACRf,YAAA7C,KAAA6D,mBACDtD,EACIoD,SAAKG,oBACRhC,OAAA9B,KAAA+D,yBACDxD,EA3DkEyB,KAAA,0BA8C7Da,YAAY7C,KAAKgE,mBAgB1BzD,GAEIW,eAEWD,SAAAV,GAQf,OAPIjB,EAAA+D,UAAAnC,eAAAoC,KAAAtD,KAAAO,GACE0D,KAAKhD,YACHiD,KAAAA,aAAiBlD,GAErBhB,KAAOkE,WAvE2DlE,KAAA8D,cA0EtE9D,KAAAsB,KAXA6C,gBAAiB,WAgBjB,IAAAlD,EAAAjB,KACA+D,EAAAA,EAAAA,gCACIK,EAAAnD,EAAAL,MAAAC,SAKJmD,OAtFsErC,EAAAsC,KAAAhD,EAAAN,UAAA0D,SAAA,SAAAC,GAqE9DJ,EAAUpC,OAAOd,EAAEsD,EAAWF,EAAMnD,OAiB5C+C,GAIAH,gBAAA,WACA,OAAA7C,EAAAhB,KAAAW,UAAA4D,SAAAvE,KAAAY,MAAAC,SAAAb,QAII+D,sBAAA,WA/FkE,UAqGlES,gBAAMC,WACN,OAAID,EAAAA,KAAME,UAAQC,SAAA3E,KAAAY,MAAAC,SAAAb,QAKjB4E,QAEAC,mBAAA,iBA7GiEC,qBAAA,mBAgGlEC,kBAAmB,gBAmBnBC,eAAIC,SAAgBT,GAApBA,EACIU,kBAEAV,EAAAA,QAKAxE,KAAKsC,aAAAA,GACLkC,KAAMC,YACNzE,KAAO4D,gBA7HuD5D,KAAAsC,kBAqIlE6C,iBAAIC,SAAmBxE,GAhBvB,OAsBZ4D,GACA,YAAAA,EAAAa,MALS,KAMIhC,EAAAA,SA9Ib,KA+IQiC,EAAaC,UAGbvF,KAAAsC,iBArBQkC,EAAMC,mBAuBd,IAfAe,SAAU,WAEN,MAAO,iBA0BfxF,KAAAY,MAAAZ,KAAAY,MAAA,GAAA,cA1B+C,QA2C/CqC,EAAIwC,UAAAA,WAWAC,GAVAhG,EAAAC,QAAAgG,cACA,6BAGJ,+BAlCI,yBAuCJ,6CACID,SAEAnB,sCACAI,gCAlDR,8BAgBQ,WAuEA1B,YACAsB,SAnEmB7E,EAAAC,QAASgG,cAGxB,6CAEA,mCACA,sBAuCRC,gDACA,SArCQ,+BACA,UAwCRC,WAkBClB,SArDsBjF,EAAAC,QAASgG,cAE5B,iCAaAtD,QA4BQ3C,EAAAC,QAAAgG,cAEJ,iCAsBJ,IAAAC,EAEc3C,EAAI6C,QAlCtBD,aAAc,UA2CdE,kBAAAA,KAMAC,WAAAA,SAAAA,GACW,cAAPhG,KAAA6F,eACI7F,KAAAC,UAAA,GAEAE,KAAAA,aAASJ,EAAKI,cAAAA,KAAAA,aAHXH,KAAPiG,kBAvDsClG,EAAAkG,mBAAAjG,KAAAiG,kBA8D1ChD,EAAAI,UAAAvD,WAAAwD,KAAAtD,KAAAD,GACAmG,KAAAA,QAAAA,KAAgBC,uBAIZrF,eAAOsF,WACV,GApEyC,cAAApG,KAAA6F,aA4BlC,OAAO7E,IA2CfuB,IAAAA,EAAQU,EAAWI,UAAAvC,eAAAwC,KAAAtD,MACf,OAAAA,KAAIiB,eAAJjB,KAAAqG,QAAAjE,IAIK+D,oBAAM,WACHlF,IAAAA,EAAAA,KAAKqF,MACRR,EAAA9F,KAAA+F,sBAAAnF,GACJ2F,EANDvG,KAAAgG,wBAAApF,GA7BA,OA5CsC,IAAAkF,EAwC9BnE,EAAElC,OAAO8G,GA0CrB3F,MAAAA,MAOIK,sBAAcA,WAEb,OAFDjB,KAAAiG,mBAnCJD,wBAAyB,WA0C7B,OAEAJ,aAAoBvC,KAAAA,aACZmD,QAAAA,KAAAA,UAUAnE,eAAAA,SAASmE,EAAAA,GAIjB,OAL0DJ,EAAtDA,GAAApG,KAAAgB,EAAA,cAVJhB,KAAAqG,QAAAA,EAAAhG,OAAA,GAhCQgG,EAAQrF,EAAE,eAAe0C,OA+CjC0C,EAAAtE,OAAAuE,EAAA/E,MAIIsE,OAAAA,WA7CI,IAAI3E,EAAOjB,KACX,OAAOiB,EAAKwB,qBAAqBC,OAAO,WACV,YAAtBzB,EAAK4E,aACL5E,EAAK2B,UACwB,cAAtB3B,EAAK4E,cACZ5E,EAAKqF,wBASjBA,mBAAoB,WAChB,IAAIrF,EAAOjB,KAEXiB,EAAKwF,SAASxF,EAAKoF,QAAS,QAAS,WACjCpF,EAAKE,QAAQ,sBAAuBF,EAAMA,EAAKoF,WAEnDpF,EAAKE,QAAQ,qBAAsBF,EAAMA,EAAKoF,YAMtDT,EAAoBvC,UAAU1C,UAAa,WACvC,IAAI6F,EAAkB9G,EAAAC,QAASgG,cAEvB,wBAEA,UAEJ,cAGJ,OAAOhE,EAAElC,UAAWwD,EAAaI,UAAU1C,WACvC0B,QAASmE,IAX0B,cAiBvClH,eAAgBA,EAChB2D,aAAcA,EACd2C,oBAAqBA","file":"../../../scripts/mvc/list/list-item.js","sourcesContent":["import BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"list\";\n//==============================================================================\n/** A view which, when first rendered, shows only summary data/attributes, but\n *      can be expanded to show further details (and optionally fetch those\n *      details from the server).\n */\nvar ExpandableView = Backbone.View.extend(BASE_MVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    //TODO: Although the reasoning behind them is different, this shares a lot with HiddenUntilActivated above: combine them\n    //PRECONDITION: model must have method hasDetails\n    //PRECONDITION: subclasses must have templates.el and templates.details\n\n    initialize: function(attributes) {\n        /** are the details of this view expanded/shown or not? */\n        this.expanded = attributes.expanded || false;\n        this.log(\"\\t expanded:\", this.expanded);\n        this.fxSpeed =\n            attributes.fxSpeed !== undefined\n                ? attributes.fxSpeed\n                : this.fxSpeed;\n    },\n\n    // ........................................................................ render main\n    /** jq fx speed */\n    fxSpeed: \"fast\",\n\n    /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n    render: function(speed) {\n        var $newRender = this._buildNewRender();\n        this._setUpBehaviors($newRender);\n        this._queueNewRender($newRender, speed);\n        return this;\n    },\n\n    /** Build a temp div containing the new children for the view's $el.\n     *      If the view is already expanded, build the details as well.\n     */\n    _buildNewRender: function() {\n        // create a new render using a skeleton template, render title buttons, render body, and set up events, etc.\n        var $newRender = $(this.templates.el(this.model.toJSON(), this));\n        if (this.expanded) {\n            this.$details($newRender).replaceWith(this._renderDetails().show());\n        }\n        return $newRender;\n    },\n\n    /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n    _queueNewRender: function($newRender, speed) {\n        speed = speed === undefined ? this.fxSpeed : speed;\n        var view = this;\n\n        if (speed === 0) {\n            view._swapNewRender($newRender);\n            view.trigger(\"rendered\", view);\n        } else {\n            $(view).queue(\"fx\", [\n                function(next) {\n                    view.$el.fadeOut(speed, next);\n                },\n                function(next) {\n                    view._swapNewRender($newRender);\n                    next();\n                },\n                function(next) {\n                    view.$el.fadeIn(speed, next);\n                },\n                function(next) {\n                    view.trigger(\"rendered\", view);\n                    next();\n                }\n            ]);\n        }\n    },\n\n    /** empty out the current el, move the $newRender's children in */\n    _swapNewRender: function($newRender) {\n        return this.$el\n            .empty()\n            .attr(\n                \"class\",\n                _.isFunction(this.className) ? this.className() : this.className\n            )\n            .append($newRender.children());\n    },\n\n    /** set up js behaviors, event handlers for elements within the given container\n     *  @param {jQuery} $container jq object that contains the elements to process (defaults to this.$el)\n     */\n    _setUpBehaviors: function($where) {\n        $where = $where || this.$el;\n        // set up canned behavior on children (bootstrap, popupmenus, editable_text, etc.)\n        //make_popup_menus( $where );\n        $where.find(\"[title]\").tooltip({ placement: \"bottom\" });\n    },\n\n    // ......................................................................... details\n    /** shortcut to details DOM (as jQ) */\n    $details: function($where) {\n        $where = $where || this.$el;\n        return $where.find(\"> .details\");\n    },\n\n    /** build the DOM for the details and set up behaviors on it */\n    _renderDetails: function() {\n        var $newDetails = $(this.templates.details(this.model.toJSON(), this));\n        this._setUpBehaviors($newDetails);\n        return $newDetails;\n    },\n\n    // ......................................................................... expansion/details\n    /** Show or hide the details\n     *  @param {Boolean} expand if true, expand; if false, collapse\n     */\n    toggleExpanded: function(expand) {\n        expand = expand === undefined ? !this.expanded : expand;\n        if (expand) {\n            this.expand();\n        } else {\n            this.collapse();\n        }\n        return this;\n    },\n\n    /** Render and show the full, detailed body of this view including extra data and controls.\n     *      note: if the model does not have detailed data, fetch that data before showing the body\n     *  @fires expanded when a body has been expanded\n     */\n    expand: function() {\n        var view = this;\n        return view._fetchModelDetails().always(function() {\n            view._expand();\n        });\n    },\n\n    /** Check for model details and, if none, fetch them.\n     *  @returns {jQuery.promise} the model.fetch.xhr if details are being fetched, an empty promise if not\n     */\n    _fetchModelDetails: function() {\n        if (!this.model.hasDetails()) {\n            return this.model.fetch();\n        }\n        return jQuery.when();\n    },\n\n    /** Inner fn called when expand (public) has fetched the details */\n    _expand: function() {\n        var view = this,\n            $newDetails = view._renderDetails();\n        view.$details().replaceWith($newDetails);\n        // needs to be set after the above or the slide will not show\n        view.expanded = true;\n        view.$details().slideDown(view.fxSpeed, function() {\n            view.trigger(\"expanded\", view);\n        });\n    },\n\n    /** Hide the body/details of an HDA.\n     *  @fires collapsed when a body has been collapsed\n     */\n    collapse: function() {\n        this.debug(this + \"(ExpandableView).collapse\");\n        var view = this;\n        view.expanded = false;\n        this.$details().slideUp(view.fxSpeed, function() {\n            view.trigger(\"collapsed\", view);\n        });\n    }\n});\n\n//==============================================================================\n/** A view that is displayed in some larger list/grid/collection.\n *      Inherits from Expandable, Selectable, Draggable.\n *  The DOM contains warnings, a title bar, and a series of primary action controls.\n *      Primary actions are meant to be easily accessible item functions (such as delete)\n *      that are rendered in the title bar.\n *\n *  Details are rendered when the user clicks the title bar or presses enter/space when\n *      the title bar is in focus.\n *\n *  Designed as a base class for history panel contents - but usable elsewhere (I hope).\n */\nvar ListItemView = ExpandableView.extend(\n    BASE_MVC.mixin(BASE_MVC.SelectableViewMixin, BASE_MVC.DraggableViewMixin, {\n        tagName: \"div\",\n        className: \"list-item\",\n\n        /** Set up the base class and all mixins */\n        initialize: function(attributes) {\n            ExpandableView.prototype.initialize.call(this, attributes);\n            BASE_MVC.SelectableViewMixin.initialize.call(this, attributes);\n            BASE_MVC.DraggableViewMixin.initialize.call(this, attributes);\n            this._setUpListeners();\n        },\n\n        /** event listeners */\n        _setUpListeners: function() {\n            // hide the primary actions in the title bar when selectable and narrow\n            this.on(\n                \"selectable\",\n                function(isSelectable) {\n                    if (isSelectable) {\n                        this.$(\".primary-actions\").hide();\n                    } else {\n                        this.$(\".primary-actions\").show();\n                    }\n                },\n                this\n            );\n            return this;\n        },\n\n        // ........................................................................ rendering\n        /** In this override, call methods to build warnings, titlebar and primary actions */\n        _buildNewRender: function() {\n            var $newRender = ExpandableView.prototype._buildNewRender.call(\n                this\n            );\n            $newRender\n                .children(\".warnings\")\n                .replaceWith(this._renderWarnings());\n            $newRender\n                .children(\".title-bar\")\n                .replaceWith(this._renderTitleBar());\n            $newRender\n                .children(\".primary-actions\")\n                .append(this._renderPrimaryActions());\n            $newRender\n                .find(\"> .title-bar .subtitle\")\n                .replaceWith(this._renderSubtitle());\n            return $newRender;\n        },\n\n        /** In this override, render the selector controls and set up dragging before the swap */\n        _swapNewRender: function($newRender) {\n            ExpandableView.prototype._swapNewRender.call(this, $newRender);\n            if (this.selectable) {\n                this.showSelector(0);\n            }\n            if (this.draggable) {\n                this.draggableOn();\n            }\n            return this.$el;\n        },\n\n        /** Render any warnings the item may need to show (e.g. \"I'm deleted\") */\n        _renderWarnings: function() {\n            var view = this,\n                $warnings = $('<div class=\"warnings\"></div>'),\n                json = view.model.toJSON();\n            //TODO:! unordered (map)\n            _.each(view.templates.warnings, function(templateFn) {\n                $warnings.append($(templateFn(json, view)));\n            });\n            return $warnings;\n        },\n\n        /** Render the title bar (the main/exposed SUMMARY dom element) */\n        _renderTitleBar: function() {\n            return $(this.templates.titleBar(this.model.toJSON(), this));\n        },\n\n        /** Return an array of jQ objects containing common/easily-accessible item controls */\n        _renderPrimaryActions: function() {\n            // override this\n            return [];\n        },\n\n        /** Render the title bar (the main/exposed SUMMARY dom element) */\n        _renderSubtitle: function() {\n            return $(this.templates.subtitle(this.model.toJSON(), this));\n        },\n\n        // ......................................................................... events\n        /** event map */\n        events: {\n            // expand the body when the title is clicked or when in focus and space or enter is pressed\n            \"click .title-bar\": \"_clickTitleBar\",\n            \"keydown .title-bar\": \"_keyDownTitleBar\",\n            \"click .selector\": \"toggleSelect\"\n        },\n\n        /** expand when the title bar is clicked */\n        _clickTitleBar: function(event) {\n            event.stopPropagation();\n            if (event.altKey) {\n                this.toggleSelect(event);\n                if (!this.selectable) {\n                    this.showSelector();\n                }\n            } else {\n                this.toggleExpanded();\n            }\n        },\n\n        /** expand when the title bar is in focus and enter or space is pressed */\n        _keyDownTitleBar: function(event) {\n            // bail (with propagation) if keydown and not space or enter\n            var KEYCODE_SPACE = 32,\n                KEYCODE_RETURN = 13;\n            if (\n                event &&\n                event.type === \"keydown\" &&\n                (event.keyCode === KEYCODE_SPACE ||\n                    event.keyCode === KEYCODE_RETURN)\n            ) {\n                this.toggleExpanded();\n                event.stopPropagation();\n                return false;\n            }\n            return true;\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? this.model + \"\" : \"(no model)\";\n            return \"ListItemView(\" + modelString + \")\";\n        }\n    })\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nListItemView.prototype.templates = (function() {\n    var elTemplato = BASE_MVC.wrapTemplate([\n        '<div class=\"list-element\">',\n        // errors, messages, etc.\n        '<div class=\"warnings\"></div>',\n\n        // multi-select checkbox\n        '<div class=\"selector\">',\n        '<span class=\"fa fa-2x fa-square-o\"></span>',\n        \"</div>\",\n        // space for title bar buttons - gen. floated to the right\n        '<div class=\"primary-actions\"></div>',\n        '<div class=\"title-bar\"></div>',\n\n        // expandable area for more details\n        '<div class=\"details\"></div>',\n        \"</div>\"\n    ]);\n\n    var warnings = {};\n\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            //TODO: prob. belongs in dataset-list-item\n            '<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- element.name %></span>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            \"</div>\"\n        ],\n        \"element\"\n    );\n\n    var subtitleTemplate = BASE_MVC.wrapTemplate([\n        // override this\n        '<div class=\"subtitle\"></div>'\n    ]);\n\n    var detailsTemplate = BASE_MVC.wrapTemplate([\n        // override this\n        '<div class=\"details\"></div>'\n    ]);\n\n    return {\n        el: elTemplato,\n        warnings: warnings,\n        titleBar: titleBarTemplate,\n        subtitle: subtitleTemplate,\n        details: detailsTemplate\n    };\n})();\n\n//==============================================================================\n/** A view that is displayed in some larger list/grid/collection.\n *  *AND* can display some sub-list of it's own when expanded (e.g. dataset collections).\n *  This list will 'foldout' when the item is expanded depending on this.foldoutStyle:\n *      If 'foldout': will expand vertically to show the nested list\n *      If 'drilldown': will overlay the parent list\n *\n *  Inherits from ListItemView.\n *\n *  _renderDetails does the work of creating this.details: a sub-view that shows the nested list\n */\nvar FoldoutListItemView = ListItemView.extend({\n    /** If 'foldout': show the sub-panel inside the expanded item\n     *  If 'drilldown': only fire events and handle by pub-sub\n     *      (allow the panel containing this item to attach it, hide itself, etc.)\n     */\n    foldoutStyle: \"foldout\",\n    /** Panel view class to instantiate for the sub-panel */\n    foldoutPanelClass: null,\n\n    /** override to:\n     *      add attributes foldoutStyle and foldoutPanelClass for config poly\n     *      disrespect attributes.expanded if drilldown\n     */\n    initialize: function(attributes) {\n        if (this.foldoutStyle === \"drilldown\") {\n            this.expanded = false;\n        }\n        this.foldoutStyle = attributes.foldoutStyle || this.foldoutStyle;\n        this.foldoutPanelClass =\n            attributes.foldoutPanelClass || this.foldoutPanelClass;\n\n        ListItemView.prototype.initialize.call(this, attributes);\n        this.foldout = this._createFoldoutPanel();\n    },\n\n    /** in this override, attach the foldout panel when rendering details */\n    _renderDetails: function() {\n        if (this.foldoutStyle === \"drilldown\") {\n            return $();\n        }\n        var $newDetails = ListItemView.prototype._renderDetails.call(this);\n        return this._attachFoldout(this.foldout, $newDetails);\n    },\n\n    /** In this override, handle collection expansion. */\n    _createFoldoutPanel: function() {\n        var model = this.model;\n        var FoldoutClass = this._getFoldoutPanelClass(model),\n            options = this._getFoldoutPanelOptions(model),\n            foldout = new FoldoutClass(\n                _.extend(options, {\n                    model: model\n                })\n            );\n        return foldout;\n    },\n\n    /** Stub to return proper foldout panel class */\n    _getFoldoutPanelClass: function() {\n        // override\n        return this.foldoutPanelClass;\n    },\n\n    /** Stub to return proper foldout panel options */\n    _getFoldoutPanelOptions: function() {\n        return {\n            // propagate foldout style down\n            foldoutStyle: this.foldoutStyle,\n            fxSpeed: this.fxSpeed\n        };\n    },\n\n    /** Render the foldout panel inside the view, hiding controls */\n    _attachFoldout: function(foldout, $whereTo) {\n        $whereTo = $whereTo || this.$(\"> .details\");\n        this.foldout = foldout.render(0);\n        foldout.$(\"> .controls\").hide();\n        return $whereTo.append(foldout.$el);\n    },\n\n    /** In this override, branch on foldoutStyle to show expanded */\n    expand: function() {\n        var view = this;\n        return view._fetchModelDetails().always(function() {\n            if (view.foldoutStyle === \"foldout\") {\n                view._expand();\n            } else if (view.foldoutStyle === \"drilldown\") {\n                view._expandByDrilldown();\n            }\n        });\n    },\n\n    /** For drilldown, set up close handler and fire expanded:drilldown\n     *      containing views can listen to this and handle other things\n     *      (like hiding themselves) by listening for expanded/collapsed:drilldown\n     */\n    _expandByDrilldown: function() {\n        var view = this;\n        // attachment and rendering done by listener\n        view.listenTo(view.foldout, \"close\", function() {\n            view.trigger(\"collapsed:drilldown\", view, view.foldout);\n        });\n        view.trigger(\"expanded:drilldown\", view, view.foldout);\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nFoldoutListItemView.prototype.templates = (function() {\n    var detailsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            // override with more info (that goes above the panel)\n            \"</div>\"\n        ],\n        \"collection\"\n    );\n\n    return _.extend({}, ListItemView.prototype.templates, {\n        details: detailsTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    ExpandableView: ExpandableView,\n    ListItemView: ListItemView,\n    FoldoutListItemView: FoldoutListItemView\n};\n"]}