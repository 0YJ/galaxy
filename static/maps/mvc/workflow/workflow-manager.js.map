{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["define","Connector","Toastr","Workflow","app","canvas_container","this","id_counter","nodes","name","has_changes","active_form_has_changes","workflowOutputLabels","$","extend","prototype","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","warning","attemptUpdateOutputLabel","node","outputName","labelWorkflowOutput","nodeView","redrawWorkflowOutputs","create_node","type","title_text","content_id","prebuildNode","add_node","fit_canvas_to_nodes","canvas_manager","draw_overview","activate_node","id","element","attr","workflow","remove_node","active_node","clear_active_node","remove_all","wf","each","k","v","destroy","rectify_workflow_outputs","using_workflow_outputs","has_existing_pjas","workflow_outputs","length","post_job_actions","pja_id","pja","action_type","self","node_changed","pjas_to_rem","push","i","pja_name","output_terminals","ot_id","ot","isWorkflowOutput","output_name","action_arguments","reload_active_node","to_simple","input_connections","input_terminals","t","cons","connectors","c","handle1","con_dict","input_subworkflow_step_id","attributes","input","undefined","act","node_data","tool_state","errors","position","annotation","uuid","steps","from_simple","data","initialImport_","initialImport","offset","Object","keys","max_id","step","workflow_output","init_field_data","css","top","left","parseInt","Math","max","isArray","l","x","other_node","connect","redraw","addWorkflowOutput","callout","find","Galaxy","root","check_changes_in_active_form","submit","make_inactive","showAttributes","showForm","config_form","make_active","force","showWorkflowParameters","layout","n_pred","successors","j","other","node_ids_by_level","level_parents","pred_k","sk","all_nodes","v_pad","ids","sort","a","b","max_width","width","height","_","bounds_for_all_nodes","p","xmin","Infinity","xmax","ymin","ymax","e","min","round_up","n","ceil","fix_delta","new_pos","bounds","parent","xmin_delta","ymin_delta","children"],"mappings":"AAAAA,QACI,kCACA,eAEJ,SAAUC,EAAWC,GACjB,QAASC,GAAUC,EAAKC,GACpBC,KAAKF,IAAMA,EACXE,KAAKD,iBAAmBA,EACxBC,KAAKC,WAAa,EAClBD,KAAKE,SACLF,KAAKG,KAAO,KACZH,KAAKI,aAAc,EACnBJ,KAAKK,yBAA0B,EAC/BL,KAAKM,wBAobT,MAlbAC,GAAEC,OAAQX,EAASY,WACfC,mBAAoB,SAAUC,GAC1B,OAAIA,KACUA,IAASX,MAAKM,uBAMhCM,oBAAqB,SAAUD,GACvBA,IACAX,KAAKM,qBAAqBK,IAAS,IAG3CE,sBAAuB,SAAUF,GACzBA,SACOX,MAAKM,qBAAqBK,IAGzCG,kBAAmB,SAAUC,EAAWC,GAChCD,GACAf,KAAKa,sBAAuBE,GAE1Bf,KAAKU,mBAAoBM,IAC3BpB,EAAOqB,QAAQ,sDAAwDD,EAAU,gDAEjFA,GACAhB,KAAKY,oBAAqBI,IAGlCE,yBAA0B,SAAUC,EAAMC,EAAYT,GAClD,QAAIX,KAAKU,mBAAoBC,KACzBQ,EAAKE,oBAAqBD,EAAYT,GACtCQ,EAAKG,SAASC,yBACP,IAKfC,YAAa,SAAWC,EAAMC,EAAYC,GACtC,GAAIR,GAAOnB,KAAKF,IAAI8B,aAAcH,EAAMC,EAAYC,EAKpD,OAJA3B,MAAK6B,SAAUV,GACfnB,KAAK8B,sBACL9B,KAAKF,IAAIiC,eAAeC,gBACxBhC,KAAKiC,cAAed,GACbA,GAEXU,SAAW,SAAUV,GACjBA,EAAKe,GAAKlC,KAAKC,WACfkB,EAAKgB,QAAQC,KAAM,KAAM,gBAAkBjB,EAAKe,IAChDlC,KAAKC,aACLD,KAAKE,MAAOiB,EAAKe,IAAOf,EACxBnB,KAAKI,aAAc,EACnBe,EAAKkB,SAAWrC,MAEpBsC,YAAc,SAAUnB,GACfnB,KAAKuC,aAAepB,GACrBnB,KAAKwC,0BAEFxC,MAAKE,MAAOiB,EAAKe,IACxBlC,KAAKI,aAAc,GAEvBqC,WAAa,WACTC,GAAK1C,KACLO,EAAEoC,KAAM3C,KAAKE,MAAO,SAAW0C,EAAGC,GAC9BA,EAAEC,UACFJ,GAAGJ,YAAaO,MAGxBE,yBAA2B,WAEvB,GAAIC,IAAyB,EACzBC,GAAoB,CAWxB,IAVA1C,EAAEoC,KAAM3C,KAAKE,MAAO,SAAW0C,EAAGzB,GAC1BA,EAAK+B,kBAAoB/B,EAAK+B,iBAAiBC,OAAS,IACxDH,GAAyB,GAE7BzC,EAAEoC,KAAKxB,EAAKiC,iBAAkB,SAASC,EAAQC,GACnB,sBAApBA,EAAIC,cACJN,GAAoB,QAID,IAA3BD,IAA0D,IAAtBC,EAA4B,CAEhE,GAAIO,GAAOxD,IACXO,GAAEoC,KAAK3C,KAAKE,MAAO,SAAU0C,EAAGzB,GAC5B,GAAkB,SAAdA,EAAKM,KAAgB,CACrB,GAAIgC,IAAe,CACU,OAAzBtC,EAAKiC,mBACLjC,EAAKiC,oBACLK,GAAe,EAEnB,IAAIC,KACJnD,GAAEoC,KAAKxB,EAAKiC,iBAAkB,SAASC,EAAQC,GACpB,qBAAnBA,EAAIC,aACJG,EAAYC,KAAKN,KAGrBK,EAAYP,OAAS,GACrB5C,EAAEoC,KAAKe,EAAa,SAASE,EAAGC,GAC5BJ,GAAe,QACRtC,GAAKiC,iBAAiBS,KAGjCb,GACAzC,EAAEoC,KAAKxB,EAAK2C,iBAAkB,SAASC,EAAOC,GAE1C,IAAmB,IADD7C,EAAK8C,iBAAiBD,EAAG7D,MACnB,CACpBsD,GAAe,CACf,IAAIH,IACAC,YAAc,oBACdW,YAAcF,EAAG7D,KACjBgE,oBAEJhD,GAAKiC,iBAAiB,oBAAoBY,EAAG7D,MAAQ,KACrDgB,EAAKiC,iBAAiB,oBAAoBY,EAAG7D,MAAQmD,KAK7DE,EAAKjB,aAAepB,IAAyB,IAAjBsC,GAC5BD,EAAKY,0BAMzBC,UAAY,WACR,GAAInE,KAoDJ,OAnDAK,GAAEoC,KAAM3C,KAAKE,MAAO,SAAW0D,EAAGzC,GAC9B,GAAImD,KACJ/D,GAAEoC,KAAMxB,EAAKoD,gBAAiB,SAAW3B,EAAG4B,GACxCF,EAAmBE,EAAErE,MAAS,IAG9B,IAAIsE,KACJlE,GAAEoC,KAAM6B,EAAEE,WAAY,SAAWd,EAAGe,GAChC,GAAKA,EAAEC,QAAU,CACb,GAAIC,IAAa3C,GAAIyC,EAAEC,QAAQzD,KAAKe,GAAIgC,YAAaS,EAAEC,QAAQzE,MAC3D2E,EAA4BN,EAAEO,WAAWC,MAAMF,8BACjBG,KAA9BH,IACAD,EAAoC,0BAAIC,GAE5CL,EAAKb,GAAKiB,EACVP,EAAmBE,EAAErE,MAASsE,MAI1C,IAAIrB,KACAjC,GAAKiC,kBACL7C,EAAEoC,KAAMxB,EAAKiC,iBAAkB,SAAWQ,EAAGsB,GACzC,GAAI5B,IACAC,YAAc2B,EAAI3B,YAClBW,YAAcgB,EAAIhB,YAClBC,iBAAmBe,EAAIf,iBAE3Bf,GAAkB8B,EAAI3B,YAAc2B,EAAIhB,aAAgB,KACxDd,EAAkB8B,EAAI3B,YAAc2B,EAAIhB,aAAgBZ,IAG3DnC,EAAK+B,mBACN/B,EAAK+B,oBAGT,IAAIiC,IACAjD,GAAKf,EAAKe,GACVT,KAAON,EAAKM,KACZE,WAAaR,EAAKQ,WAClByD,WAAajE,EAAKiE,WAClBC,OAASlE,EAAKkE,OACdf,kBAAoBA,EACpBgB,SAAW/E,EAAEY,EAAKgB,SAASmD,WAC3BC,WAAYpE,EAAKoE,WACjBnC,iBAAkBjC,EAAKiC,iBACvBoC,KAAMrE,EAAKqE,KACX7E,MAAOQ,EAAKR,MACZuC,iBAAkB/B,EAAK+B,iBAE3BhD,GAAOiB,EAAKe,IAAOiD,KAEdM,MAAOvF,IAEpBwF,YAAc,SAAWC,EAAMC,GAC3B,GAAIC,OAAoCZ,KAAnBW,GAAuCA,CAC5DlD,IAAK1C,IACL,IAAI8F,GAAS,CACTD,GACAnD,GAAGvC,KAAOwF,EAAKxF,KAEf2F,EAASC,OAAOC,KAAKtD,GAAGxC,OAAOiD,MAEnC,IAAI8C,GAASH,EAET9C,GAAyB,CAC7BzC,GAAEoC,KAAMgD,EAAKF,MAAO,SAAUvD,EAAIgE,GAC9B,GAAI/E,GAAOuB,GAAG5C,IAAI8B,aAAcsE,EAAKzE,KAAMyE,EAAK/F,KAAM+F,EAAKvE,WAGrDkE,KACFK,EAAKV,KAAO,KACZjF,EAAEoC,KAAKuD,EAAKhD,iBAAkB,SAAU/C,EAAMgG,GAC1CA,EAAgBX,KAAO,QAG/BrE,EAAKiF,gBAAiBF,GACjBA,EAAKZ,UACNnE,EAAKgB,QAAQkE,KAAOC,IAAKJ,EAAKZ,SAASgB,IAAKC,KAAML,EAAKZ,SAASiB,OAEpEpF,EAAKe,GAAKsE,SAASN,EAAKhE,IAAM4D,EAC9BpD,GAAGxC,MAAOiB,EAAKe,IAAOf,EACtB8E,EAASQ,KAAKC,IAAKT,EAAQO,SAAUtE,GAAO4D,GAGvC9C,IACG7B,EAAK+B,iBAAiBC,OAAS,EAC/BH,GAAyB,EAGzBzC,EAAEoC,KAAKxB,EAAKiC,qBAAwB,SAASC,EAAQC,GACzB,sBAApBA,EAAIC,cACJP,GAAyB,QAM7CN,GAAGzC,WAAagG,EAAS,EAEzB1F,EAAEoC,KAAMgD,EAAKF,MAAO,SAAUvD,EAAIgE,GAC9B,GAAI/E,GAAOuB,GAAGxC,MAAMsG,SAAStE,GAAM4D,EACnCvF,GAAEoC,KAAMuD,EAAK5B,kBAAmB,SAAU1B,EAAGC,GACpCA,IACMtC,EAAEoG,QAAS9D,KACdA,GAAMA,IAEVtC,EAAEoC,KAAME,EAAG,SAAU+D,EAAGC,GACpB,GAAIC,GAAapE,GAAGxC,MAAOsG,SAASK,EAAE3E,IAAM4D,GACxCnB,EAAI,GAAIhF,EACZgF,GAAEoC,QAASD,EAAWhD,iBAAkB+C,EAAE3C,aAC/B/C,EAAKoD,gBAAiB3B,IACjC+B,EAAEqC,cAIXhE,GAECzC,EAAEoC,KAAKxB,EAAK2C,iBAAkB,SAASC,EAAOC,OACgBiB,KAAvD9D,EAAKiC,iBAAiB,oBAAoBY,EAAG7D,QAC5CgB,EAAK8F,kBAAkBjD,EAAG7D,MAC1B+G,QAAU3G,EAAEY,EAAKgB,SAASgF,KAAK,YAAYnD,EAAG7D,MAC9C+G,QAAQC,KAAK,OAAO/E,KAAK,MAAOgF,OAAOC,KAAO,0CAC9C3E,GAAGtC,aAAc,QAMrCkH,6BAA+B,WAEvBtH,KAAKK,0BACLL,KAAKI,aAAc,EAEnBG,EAAE,kBAAkB4G,KAAK,QAAQI,SACjCvH,KAAKK,yBAA0B,IAGvC+D,mBAAqB,WACjB,GAAIpE,KAAKuC,YAAY,CACjB,GAAIpB,GAAOnB,KAAKuC,WAChBvC,MAAKwC,oBACLxC,KAAKiC,cAAcd,KAG3BqB,kBAAoB,WACXxC,KAAKuC,cACNvC,KAAKuC,YAAYiF,gBACjBxH,KAAKuC,YAAc,MAEvBvC,KAAKF,IAAI2H,kBAEbxF,cAAgB,SAAUd,GACjBnB,KAAKuC,aAAepB,IACrBnB,KAAKsH,+BACLtH,KAAKwC,oBACLxC,KAAKF,IAAI4H,SAAUvG,EAAKwG,YAAaxG,GACrCA,EAAKyG,cACL5H,KAAKuC,YAAcpB,IAG3BsC,aAAe,SAAWtC,EAAM0G,GAC5B7H,KAAKI,aAAc,EACdJ,KAAKuC,aAAepB,GAAQ0G,IAE7B7H,KAAKsH,+BACLtH,KAAKF,IAAI4H,SAAUvG,EAAKwG,YAAaxG,IAEzCnB,KAAKF,IAAIgI,0BAEbC,OAAS,WACL/H,KAAKsH,+BACLtH,KAAKI,aAAc,CAEnB,IAAI4H,MACAC,IAqBJ,KAnBA1H,EAAEoC,KAAM3C,KAAKE,MAAO,SAAUgC,EAAIf,OACV8D,KAAf+C,EAAO9F,KAAsB8F,EAAO9F,GAAM,OACvB+C,KAAnBgD,EAAW/F,KAAsB+F,EAAW/F,SAGrD3B,EAAEoC,KAAM3C,KAAKE,MAAO,SAAUgC,EAAIf,GAC9BZ,EAAEoC,KAAMxB,EAAKoD,gBAAiB,SAAW2D,EAAG1D,GACxCjE,EAAEoC,KAAM6B,EAAEE,WAAY,SAAW9B,EAAG+B,GAEhC,GAAIwD,GAAQxD,EAAEC,QAAQzD,IAEtB6G,GAAO7G,EAAKe,KAAO,EAEnB+F,EAAWE,EAAMjG,IAAIyB,KAAMxC,EAAKe,UAK5CkG,uBACe,CAEXC,gBACA,KAAM,GAAIC,KAAUN,GACS,GAApBA,EAAQM,IACTD,cAAc1E,KAAM2E,EAG5B,IAA6B,GAAxBD,cAAclF,OACf,KAEJiF,mBAAkBzE,KAAM0E,cAGxB,KAAM,GAAIzF,KAAKyF,eAAgB,CAC3B,GAAIxF,GAAIwF,cAAczF,SACfoF,GAAOnF,EACd,KAAM,GAAI0F,KAAMN,GAAWpF,GACvBmF,EAAQC,EAAWpF,GAAG0F,KAAS,GAI3C,IAAKP,EAAO7E,OAAZ,CAKA,GAAIqF,GAAYxI,KAAKE,KACLuI,OAAQ,EACxB,IAAIlC,GADQ,EAEZhG,GAAEoC,KAAMyF,kBAAmB,SAAUxE,EAAG8E,GAGpCA,EAAIC,KAAM,SAAUC,EAAGC,GACnB,MAAOtI,GAAEiI,EAAUI,GAAGzG,SAASmD,WAAWgB,IAAM/F,EAAEiI,EAAUK,GAAG1G,SAASmD,WAAWgB,KAGvF,IAAIwC,GAAY,EACZxC,EAAMmC,KACVlI,GAAEoC,KAAM+F,EAAK,SAAUR,EAAGhG,GACtB,GAAIf,GAAOqH,EAAUtG,GACjBC,EAAU5B,EAAEY,EAAKgB,QACrB5B,GAAE4B,GAASkE,KAAOC,IAAKA,EAAKC,KAAMA,IAClCuC,EAAYrC,KAAKC,IAAKoC,EAAWvI,EAAE4B,GAAS4G,SAC5CzC,GAAO/F,EAAE4B,GAAS6G,SAAWP,QAEjClC,GAAQuC,EAlBA,KAqBZvI,EAAEoC,KAAM6F,EAAW,SAAUS,EAAG9H,GAASA,EAAK6F,aAElDkC,qBAAsB,WAClB,GAEIC,GAFAC,EAAOC,EAAAA,EAAUC,GAAQD,EAAAA,EACzBE,EAAOF,EAAAA,EAAUG,GAAQH,EAAAA,CAU7B,OARA9I,GAAEoC,KAAM3C,KAAKE,MAAO,SAAUgC,EAAIf,GAC9BsI,EAAIlJ,EAAEY,EAAKgB,SACXgH,EAAIM,EAAEnE,WACN8D,EAAO3C,KAAKiD,IAAKN,EAAMD,EAAE5C,MACzB+C,EAAO7C,KAAKC,IAAK4C,EAAMH,EAAE5C,KAAOkD,EAAEV,SAClCQ,EAAO9C,KAAKiD,IAAKH,EAAMJ,EAAE7C,KACzBkD,EAAO/C,KAAKC,IAAK8C,EAAML,EAAE7C,IAAMmD,EAAEV,YAE3BK,KAAMA,EAAME,KAAMA,EAAMC,KAAMA,EAAMC,KAAMA,IAExD1H,oBAAqB,WAEjB,QAAS6H,GAAU9C,EAAG+C,GAClB,MAAOnD,MAAKoD,KAAMhD,EAAI+C,GAAMA,EAEhC,QAASE,GAAWjD,EAAG+C,GACnB,MAAK/C,GAAI+C,GAAI/C,EAAI,EAAE+C,GACfG,SAAYtD,KAAKoD,KAAUhD,EAAI+C,EAAQA,GAAM,GAAMA,IACtC/C,EAAIkD,UAEd,EAGX,GAAIC,GAAShK,KAAKkJ,uBACd5D,EAAWtF,KAAKD,iBAAiBuF,WACjC2E,EAASjK,KAAKD,iBAAiBkK,SAE/BC,EAAaJ,EAAWE,EAAOZ,KAAM,KACrCe,EAAaL,EAAWE,EAAOT,KAAM,IAEzCW,GAAazD,KAAKC,IAAKwD,EAAY5E,EAASiB,MAC5C4D,EAAa1D,KAAKC,IAAKyD,EAAY7E,EAASgB,IAC5C,IAAIC,GAAOjB,EAASiB,KAAO2D,EACvB5D,EAAMhB,EAASgB,IAAM6D,EAErBpB,EAAQY,EAAUK,EAAOV,KAAO,IAAK,KAAQY,EAC7ClB,EAASW,EAAUK,EAAOR,KAAO,IAAK,KAAQW,CAClDpB,GAAQtC,KAAKC,IAAKqC,GAASxC,EAAO0D,EAAOlB,SACzCC,EAASvC,KAAKC,IAAKsC,GAAU1C,EAAM2D,EAAOjB,UAE1ChJ,KAAKD,iBAAiBsG,KAClBE,KAAMA,EACND,IAAKA,EACLyC,MAAOA,EACPC,OAAQA,IAGZhJ,KAAKD,iBAAiBqK,WAAWzH,KAAM,WACnC,GAAIwG,GAAI5I,EAAEP,MAAMsF,UAChB/E,GAAEP,MAAMqG,IAAK,OAAQ8C,EAAE5C,KAAO2D,GAC9B3J,EAAEP,MAAMqG,IAAK,MAAO8C,EAAE7C,IAAM6D,QAIjCtK","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["define([\n    'mvc/workflow/workflow-connector',\n    'libs/toastr'\n    ],\nfunction( Connector, Toastr ) {\n    function Workflow( app, canvas_container ) {\n        this.app = app;\n        this.canvas_container = canvas_container;\n        this.id_counter = 0;\n        this.nodes = {};\n        this.name = null;\n        this.has_changes = false;\n        this.active_form_has_changes = false;\n        this.workflowOutputLabels = {};\n    }\n    $.extend( Workflow.prototype, {\n        canLabelOutputWith: function( label ) {\n            if( label ) {\n                return ! (label in this.workflowOutputLabels);\n            } else {\n                // empty labels are non-exclusive, so allow this one.\n                return true;\n            }\n        },\n        registerOutputLabel: function( label ) {\n            if( label ) {\n                this.workflowOutputLabels[label] = true;\n            }\n        },\n        unregisterOutputLabel: function( label ) {\n            if( label ) {\n                delete this.workflowOutputLabels[label];\n            }\n        },\n        updateOutputLabel: function( fromLabel, toLabel ) {\n            if( fromLabel ) {\n                this.unregisterOutputLabel( fromLabel );\n            }\n            if( ! this.canLabelOutputWith( toLabel ) ) {\n                Toastr.warning(\"Workflow contains duplicate workflow output labels \" + toLabel + \". This must be fixed before it can be saved.\");\n            }\n            if( toLabel ) {\n                this.registerOutputLabel( toLabel );\n            }\n        },\n        attemptUpdateOutputLabel: function( node, outputName, label ) {\n            if( this.canLabelOutputWith( label ) ) {\n                node.labelWorkflowOutput( outputName, label );\n                node.nodeView.redrawWorkflowOutputs();\n                return true;\n            } else {\n                return false;\n            }\n        },\n        create_node: function ( type, title_text, content_id ) {\n            var node = this.app.prebuildNode( type, title_text, content_id );\n            this.add_node( node );\n            this.fit_canvas_to_nodes();\n            this.app.canvas_manager.draw_overview();\n            this.activate_node( node );\n            return node;\n        },\n        add_node : function( node ) {\n            node.id = this.id_counter;\n            node.element.attr( 'id', 'wf-node-step-' + node.id );\n            this.id_counter++;\n            this.nodes[ node.id ] = node;\n            this.has_changes = true;\n            node.workflow = this;\n        },\n        remove_node : function( node ) {\n            if ( this.active_node == node ) {\n                this.clear_active_node();\n            }\n            delete this.nodes[ node.id ];\n            this.has_changes = true;\n        },\n        remove_all : function() {\n            wf = this;\n            $.each( this.nodes, function ( k, v ) {\n                v.destroy();\n                wf.remove_node( v );\n            });\n        },\n        rectify_workflow_outputs : function() {\n            // Find out if we're using workflow_outputs or not.\n            var using_workflow_outputs = false;\n            var has_existing_pjas = false;\n            $.each( this.nodes, function ( k, node ) {\n                if (node.workflow_outputs && node.workflow_outputs.length > 0){\n                    using_workflow_outputs = true;\n                }\n                $.each(node.post_job_actions, function(pja_id, pja){\n                    if (pja.action_type === \"HideDatasetAction\"){\n                        has_existing_pjas = true;\n                    }\n                });\n            });\n            if (using_workflow_outputs !== false || has_existing_pjas !== false){\n                // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n                var self = this;\n                $.each(this.nodes, function (k, node ){\n                    if (node.type === 'tool'){\n                        var node_changed = false;\n                        if (node.post_job_actions == null){\n                            node.post_job_actions = {};\n                            node_changed = true;\n                        }\n                        var pjas_to_rem = [];\n                        $.each(node.post_job_actions, function(pja_id, pja){\n                            if (pja.action_type == \"HideDatasetAction\"){\n                                pjas_to_rem.push(pja_id);\n                            }\n                        });\n                        if (pjas_to_rem.length > 0 ) {\n                            $.each(pjas_to_rem, function(i, pja_name){\n                                node_changed = true;\n                                delete node.post_job_actions[pja_name];\n                            });\n                        }\n                        if (using_workflow_outputs){\n                            $.each(node.output_terminals, function(ot_id, ot){\n                                var create_pja = !node.isWorkflowOutput(ot.name);\n                                if (create_pja === true){\n                                    node_changed = true;\n                                    var pja = {\n                                        action_type : \"HideDatasetAction\",\n                                        output_name : ot.name,\n                                        action_arguments : {}\n                                    }\n                                    node.post_job_actions['HideDatasetAction'+ot.name] = null;\n                                    node.post_job_actions['HideDatasetAction'+ot.name] = pja;\n                                }\n                            });\n                        }\n                        // lastly, if this is the active node, and we made changes, reload the display at right.\n                        if (self.active_node == node && node_changed === true) {\n                            self.reload_active_node();\n                        }\n                    }\n                });\n            }\n        },\n        to_simple : function () {\n            var nodes = {};\n            $.each( this.nodes, function ( i, node ) {\n                var input_connections = {};\n                $.each( node.input_terminals, function ( k, t ) {\n                    input_connections[ t.name ] = null;\n                    // There should only be 0 or 1 connectors, so this is\n                    // really a sneaky if statement\n                    var cons = []\n                    $.each( t.connectors, function ( i, c ) {\n                        if ( c.handle1 ) {\n                            var con_dict = { id: c.handle1.node.id, output_name: c.handle1.name };\n                            var input_subworkflow_step_id = t.attributes.input.input_subworkflow_step_id;\n                            if( input_subworkflow_step_id !== undefined ) {\n                                con_dict[\"input_subworkflow_step_id\"] = input_subworkflow_step_id;\n                            }\n                            cons[i] = con_dict;\n                            input_connections[ t.name ] = cons;\n                        }\n                    });\n                });\n                var post_job_actions = {};\n                if (node.post_job_actions){\n                    $.each( node.post_job_actions, function ( i, act ) {\n                        var pja = {\n                            action_type : act.action_type,\n                            output_name : act.output_name,\n                            action_arguments : act.action_arguments\n                        }\n                        post_job_actions[ act.action_type + act.output_name ] = null;\n                        post_job_actions[ act.action_type + act.output_name ] = pja;\n                    });\n                }\n                if (!node.workflow_outputs){\n                    node.workflow_outputs = [];\n                    // Just in case.\n                }\n                var node_data = {\n                    id : node.id,\n                    type : node.type,\n                    content_id : node.content_id,\n                    tool_state : node.tool_state,\n                    errors : node.errors,\n                    input_connections : input_connections,\n                    position : $(node.element).position(),\n                    annotation: node.annotation,\n                    post_job_actions: node.post_job_actions,\n                    uuid: node.uuid,\n                    label: node.label,\n                    workflow_outputs: node.workflow_outputs\n                };\n                nodes[ node.id ] = node_data;\n            });\n            return { steps: nodes };\n        },\n        from_simple : function ( data, initialImport_ ) {\n            var initialImport = (initialImport_ === undefined) ? true : initialImport_;\n            wf = this;\n            var offset = 0;\n            if( initialImport ) {\n                wf.name = data.name;\n            } else {\n                offset = Object.keys(wf.nodes).length;\n            }\n            var max_id = offset;\n            // First pass, nodes\n            var using_workflow_outputs = false;\n            $.each( data.steps, function( id, step ) {\n                var node = wf.app.prebuildNode( step.type, step.name, step.content_id );\n                // If workflow being copied into another, wipe UUID and let\n                // Galaxy assign new ones.\n                if( ! initialImport ) {\n                    step.uuid = null;\n                    $.each(step.workflow_outputs, function( name, workflow_output ) {\n                        workflow_output.uuid = null;\n                    });\n                }\n                node.init_field_data( step );\n                if ( step.position ) {\n                    node.element.css( { top: step.position.top, left: step.position.left } );\n                }\n                node.id = parseInt(step.id) + offset;\n                wf.nodes[ node.id ] = node;\n                max_id = Math.max( max_id, parseInt( id ) + offset );\n                // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n                // Check for either, and then add outputs in the next pass.\n                if (!using_workflow_outputs){\n                    if (node.workflow_outputs.length > 0){\n                        using_workflow_outputs = true;\n                    }\n                    else{\n                        $.each(node.post_job_actions || [], function(pja_id, pja){\n                            if (pja.action_type === \"HideDatasetAction\"){\n                                using_workflow_outputs = true;\n                            }\n                        });\n                    }\n                }\n            });\n            wf.id_counter = max_id + 1;\n            // Second pass, connections\n            $.each( data.steps, function( id, step ) {\n                var node = wf.nodes[parseInt(id) + offset];\n                $.each( step.input_connections, function( k, v ) {\n                    if ( v ) {\n                        if ( ! $.isArray( v ) ) {\n                            v = [ v ];\n                        }\n                        $.each( v, function( l, x ) {\n                            var other_node = wf.nodes[ parseInt(x.id) + offset ];\n                            var c = new Connector();\n                            c.connect( other_node.output_terminals[ x.output_name ],\n                                       node.input_terminals[ k ] );\n                            c.redraw();\n                        });\n                    }\n                });\n                if(using_workflow_outputs){\n                    // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                    $.each(node.output_terminals, function(ot_id, ot){\n                        if(node.post_job_actions['HideDatasetAction'+ot.name] === undefined){\n                            node.addWorkflowOutput(ot.name);\n                            callout = $(node.element).find('.callout.'+ot.name);\n                            callout.find('img').attr('src', Galaxy.root + 'static/images/fugue/asterisk-small.png');\n                            wf.has_changes = true;\n                        }\n                    });\n                }\n            });\n        },\n        check_changes_in_active_form : function() {\n            // If active form has changed, save it\n            if (this.active_form_has_changes) {\n                this.has_changes = true;\n                // Submit form.\n                $(\"#right-content\").find(\"form\").submit();\n                this.active_form_has_changes = false;\n            }\n        },\n        reload_active_node : function() {\n            if (this.active_node){\n                var node = this.active_node;\n                this.clear_active_node();\n                this.activate_node(node);\n            }\n        },\n        clear_active_node : function() {\n            if ( this.active_node ) {\n                this.active_node.make_inactive();\n                this.active_node = null;\n            }\n            this.app.showAttributes();\n        },\n        activate_node : function( node ) {\n            if ( this.active_node != node ) {\n                this.check_changes_in_active_form();\n                this.clear_active_node();\n                this.app.showForm( node.config_form, node );\n                node.make_active();\n                this.active_node = node;\n            }\n        },\n        node_changed : function ( node, force ) {\n            this.has_changes = true;\n            if ( this.active_node == node && force ) {\n                // Force changes to be saved even on new connection (previously dumped)\n                this.check_changes_in_active_form();\n                this.app.showForm( node.config_form, node );\n            }\n            this.app.showWorkflowParameters();\n        },\n        layout : function () {\n            this.check_changes_in_active_form();\n            this.has_changes = true;\n            // Prepare predecessor / successor tracking\n            var n_pred = {};\n            var successors = {};\n            // First pass to initialize arrays even for nodes with no connections\n            $.each( this.nodes, function( id, node ) {\n                if ( n_pred[id] === undefined ) { n_pred[id] = 0; }\n                if ( successors[id] === undefined ) { successors[id] = []; }\n            });\n            // Second pass to count predecessors and successors\n            $.each( this.nodes, function( id, node ) {\n                $.each( node.input_terminals, function ( j, t ) {\n                    $.each( t.connectors, function ( k, c ) {\n                        // A connection exists from `other` to `node`\n                        var other = c.handle1.node;\n                        // node gains a predecessor\n                        n_pred[node.id] += 1;\n                        // other gains a successor\n                        successors[other.id].push( node.id );\n                    });\n                });\n            });\n            // Assemble order, tracking levels\n            node_ids_by_level = [];\n            while ( true ) {\n                // Everything without a predecessor\n                level_parents = [];\n                for ( var pred_k in n_pred ) {\n                    if ( n_pred[ pred_k ] == 0 ) {\n                        level_parents.push( pred_k );\n                    }\n                }\n                if ( level_parents.length == 0 ) {\n                    break;\n                }\n                node_ids_by_level.push( level_parents );\n                // Remove the parents from this level, and decrement the number\n                // of predecessors for each successor\n                for ( var k in level_parents ) {\n                    var v = level_parents[k];\n                    delete n_pred[v];\n                    for ( var sk in successors[v] ) {\n                        n_pred[ successors[v][sk] ] -= 1;\n                    }\n                }\n            }\n            if ( n_pred.length ) {\n                // ERROR: CYCLE! Currently we do nothing\n                return;\n            }\n            // Layout each level\n            var all_nodes = this.nodes;\n            var h_pad = 80; v_pad = 30;\n            var left = h_pad;\n            $.each( node_ids_by_level, function( i, ids ) {\n                // We keep nodes in the same order in a level to give the user\n                // some control over ordering\n                ids.sort( function( a, b ) {\n                    return $(all_nodes[a].element).position().top - $(all_nodes[b].element).position().top;\n                });\n                // Position each node\n                var max_width = 0;\n                var top = v_pad;\n                $.each( ids, function( j, id ) {\n                    var node = all_nodes[id];\n                    var element = $(node.element);\n                    $(element).css( { top: top, left: left } );\n                    max_width = Math.max( max_width, $(element).width() );\n                    top += $(element).height() + v_pad;\n                });\n                left += max_width + h_pad;\n            });\n            // Need to redraw all connectors\n            $.each( all_nodes, function( _, node ) { node.redraw(); } );\n        },\n        bounds_for_all_nodes: function() {\n            var xmin = Infinity, xmax = -Infinity,\n                ymin = Infinity, ymax = -Infinity,\n                p;\n            $.each( this.nodes, function( id, node ) {\n                e = $(node.element);\n                p = e.position();\n                xmin = Math.min( xmin, p.left );\n                xmax = Math.max( xmax, p.left + e.width() );\n                ymin = Math.min( ymin, p.top );\n                ymax = Math.max( ymax, p.top + e.width() );\n            });\n            return  { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n        },\n        fit_canvas_to_nodes: function() {\n            // Math utils\n            function round_up( x, n ) {\n                return Math.ceil( x / n ) * n;\n            }\n            function fix_delta( x, n ) {\n                if ( x < n|| x > 3*n ) {\n                    new_pos = ( Math.ceil( ( ( x % n ) ) / n ) + 1 ) * n;\n                    return ( - ( x - new_pos ) );\n                }\n                return 0;\n            }\n            // Span of all elements\n            var bounds = this.bounds_for_all_nodes();\n            var position = this.canvas_container.position();\n            var parent = this.canvas_container.parent();\n            // Determine amount we need to expand on top/left\n            var xmin_delta = fix_delta( bounds.xmin, 100 );\n            var ymin_delta = fix_delta( bounds.ymin, 100 );\n            // May need to expand farther to fill viewport\n            xmin_delta = Math.max( xmin_delta, position.left );\n            ymin_delta = Math.max( ymin_delta, position.top );\n            var left = position.left - xmin_delta;\n            var top = position.top - ymin_delta;\n            // Same for width/height\n            var width = round_up( bounds.xmax + 100, 100 ) + xmin_delta;\n            var height = round_up( bounds.ymax + 100, 100 ) + ymin_delta;\n            width = Math.max( width, - left + parent.width() );\n            height = Math.max( height, - top + parent.height() );\n            // Grow the canvas container\n            this.canvas_container.css( {\n                left: left,\n                top: top,\n                width: width,\n                height: height\n            });\n            // Move elements back if needed\n            this.canvas_container.children().each( function() {\n                var p = $(this).position();\n                $(this).css( \"left\", p.left + xmin_delta );\n                $(this).css( \"top\", p.top + ymin_delta );\n            });\n        }\n    });\n    return Workflow;\n});\n"]}