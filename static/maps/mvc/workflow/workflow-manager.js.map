{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["Workflow","app","canvas_container","this","id_counter","nodes","name","has_changes","Toastr","workflowOutputLabels","$","extend","prototype","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","active_form_has_changes","node","outputName","nodeView","title_text","content_id","prebuildNode","type","add_node","fit_canvas_to_nodes","canvas_manager","draw_overview","id","workflow","remove_node","clear_active_node","attemptUpdateOutputLabel","each","k","v","destroy","wf","create_node","using_workflow_outputs","has_existing_pjas","activate_node","workflow_outputs","length","post_job_actions","pja_id","pja","action_type","element","active_node","node_changed","pjas_to_rem","push","rectify_workflow_outputs","i","pja_name","output_terminals","ot_id","ot","isWorkflowOutput","output_name","self","to_simple","input_connections","t","create_pja","cons","action_arguments","c","handle1","input_subworkflow_step_id","attributes","input","undefined","con_dict","act","connectors","tool_version","config_form","version","tool_state","errors","position","steps","from_simple","initialImport_","offset","node_data","annotation","uuid","initialImport","step","css","Object","left","data","max_id","init_field_data","Math","max","parseInt","l","x","other_node","input_terminals","redraw","find","attr","root","check_changes_in_active_form","submit","reload_active_node","make_inactive","showAttributes","make_active","force","showWorkflowParameters","layout","n_pred","successors","j","other","node_ids_by_level","pred_k","level_parents","all_nodes","ids","a","b","top","sort","max_width","v_pad","width","_","bounds_for_all_nodes","p","xmax","xmin","ymin","ymax","e","min","round_up","n","fix_delta","new_pos","ceil","bounds","parent","xmin_delta","ymin_delta","height","children"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["import Connector from \"mvc/workflow/workflow-connector\";\nimport * as Toastr from \"libs/toastr\";\nfunction Workflow(app, canvas_container) {\n    this.app = app;\n    this.canvas_container = canvas_container;\n    this.id_counter = 0;\n    this.nodes = {};\n    this.name = null;\n    this.has_changes = false;\n    this.active_form_has_changes = false;\n    this.workflowOutputLabels = {};\n}\n$.extend(Workflow.prototype, {\n    canLabelOutputWith: function(label) {\n        if (label) {\n            return !(label in this.workflowOutputLabels);\n        } else {\n            // empty labels are non-exclusive, so allow this one.\n            return true;\n        }\n    },\n    registerOutputLabel: function(label) {\n        if (label) {\n            this.workflowOutputLabels[label] = true;\n        }\n    },\n    unregisterOutputLabel: function(label) {\n        if (label) {\n            delete this.workflowOutputLabels[label];\n        }\n    },\n    updateOutputLabel: function(fromLabel, toLabel) {\n        if (fromLabel) {\n            this.unregisterOutputLabel(fromLabel);\n        }\n        if (!this.canLabelOutputWith(toLabel)) {\n            Toastr.warning(\n                `Workflow contains duplicate workflow output labels ${toLabel}. This must be fixed before it can be saved.`\n            );\n        }\n        if (toLabel) {\n            this.registerOutputLabel(toLabel);\n        }\n    },\n    attemptUpdateOutputLabel: function(node, outputName, label) {\n        if (this.canLabelOutputWith(label)) {\n            node.labelWorkflowOutput(outputName, label);\n            node.nodeView.redrawWorkflowOutputs();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    create_node: function(type, title_text, content_id) {\n        var node = this.app.prebuildNode(type, title_text, content_id);\n        this.add_node(node);\n        this.fit_canvas_to_nodes();\n        this.app.canvas_manager.draw_overview();\n        this.activate_node(node);\n        return node;\n    },\n    add_node: function(node) {\n        node.id = this.id_counter;\n        node.element.attr(\"id\", `wf-node-step-${node.id}`);\n        this.id_counter++;\n        this.nodes[node.id] = node;\n        this.has_changes = true;\n        node.workflow = this;\n    },\n    remove_node: function(node) {\n        if (this.active_node == node) {\n            this.clear_active_node();\n        }\n        delete this.nodes[node.id];\n        this.has_changes = true;\n    },\n    remove_all: function() {\n        var wf = this;\n        $.each(this.nodes, (k, v) => {\n            v.destroy();\n            wf.remove_node(v);\n        });\n    },\n    rectify_workflow_outputs: function() {\n        // Find out if we're using workflow_outputs or not.\n        var using_workflow_outputs = false;\n        var has_existing_pjas = false;\n        $.each(this.nodes, (k, node) => {\n            if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                using_workflow_outputs = true;\n            }\n            $.each(node.post_job_actions, (pja_id, pja) => {\n                if (pja.action_type === \"HideDatasetAction\") {\n                    has_existing_pjas = true;\n                }\n            });\n        });\n        if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n            // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n            var self = this;\n            $.each(this.nodes, (k, node) => {\n                if (node.type === \"tool\") {\n                    var node_changed = false;\n                    if (node.post_job_actions === null) {\n                        node.post_job_actions = {};\n                        node_changed = true;\n                    }\n                    var pjas_to_rem = [];\n                    $.each(node.post_job_actions, (pja_id, pja) => {\n                        if (pja.action_type == \"HideDatasetAction\") {\n                            pjas_to_rem.push(pja_id);\n                        }\n                    });\n                    if (pjas_to_rem.length > 0) {\n                        $.each(pjas_to_rem, (i, pja_name) => {\n                            node_changed = true;\n                            delete node.post_job_actions[pja_name];\n                        });\n                    }\n                    if (using_workflow_outputs) {\n                        $.each(node.output_terminals, (ot_id, ot) => {\n                            var create_pja = !node.isWorkflowOutput(ot.name);\n                            if (create_pja === true) {\n                                node_changed = true;\n                                var pja = {\n                                    action_type: \"HideDatasetAction\",\n                                    output_name: ot.name,\n                                    action_arguments: {}\n                                };\n                                node.post_job_actions[\n                                    `HideDatasetAction${ot.name}`\n                                ] = null;\n                                node.post_job_actions[\n                                    `HideDatasetAction${ot.name}`\n                                ] = pja;\n                            }\n                        });\n                    }\n                    // lastly, if this is the active node, and we made changes, reload the display at right.\n                    if (self.active_node == node && node_changed === true) {\n                        self.reload_active_node();\n                    }\n                }\n            });\n        }\n    },\n    to_simple: function() {\n        var nodes = {};\n        $.each(this.nodes, (i, node) => {\n            var input_connections = {};\n            $.each(node.input_terminals, (k, t) => {\n                input_connections[t.name] = null;\n                // There should only be 0 or 1 connectors, so this is\n                // really a sneaky if statement\n                var cons = [];\n                $.each(t.connectors, (i, c) => {\n                    if (c.handle1) {\n                        var con_dict = {\n                            id: c.handle1.node.id,\n                            output_name: c.handle1.name\n                        };\n                        var input_subworkflow_step_id =\n                            t.attributes.input.input_subworkflow_step_id;\n                        if (input_subworkflow_step_id !== undefined) {\n                            con_dict[\n                                \"input_subworkflow_step_id\"\n                            ] = input_subworkflow_step_id;\n                        }\n                        cons[i] = con_dict;\n                        input_connections[t.name] = cons;\n                    }\n                });\n            });\n            var post_job_actions = {};\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (i, act) => {\n                    var pja = {\n                        action_type: act.action_type,\n                        output_name: act.output_name,\n                        action_arguments: act.action_arguments\n                    };\n                    post_job_actions[act.action_type + act.output_name] = null;\n                    post_job_actions[act.action_type + act.output_name] = pja;\n                });\n            }\n            if (!node.workflow_outputs) {\n                node.workflow_outputs = [];\n                // Just in case.\n            }\n            var node_data = {\n                id: node.id,\n                type: node.type,\n                content_id: node.content_id,\n                tool_version: node.config_form.version,\n                tool_state: node.tool_state,\n                errors: node.errors,\n                input_connections: input_connections,\n                position: $(node.element).position(),\n                annotation: node.annotation,\n                post_job_actions: node.post_job_actions,\n                uuid: node.uuid,\n                label: node.label,\n                workflow_outputs: node.workflow_outputs\n            };\n            nodes[node.id] = node_data;\n        });\n        return { steps: nodes };\n    },\n    from_simple: function(data, initialImport_) {\n        var initialImport =\n            initialImport_ === undefined ? true : initialImport_;\n        var wf = this;\n        var offset = 0;\n        if (initialImport) {\n            wf.name = data.name;\n        } else {\n            offset = Object.keys(wf.nodes).length;\n        }\n        var max_id = offset;\n        // First pass, nodes\n        var using_workflow_outputs = false;\n        $.each(data.steps, (id, step) => {\n            var node = wf.app.prebuildNode(\n                step.type,\n                step.name,\n                step.content_id\n            );\n            // If workflow being copied into another, wipe UUID and let\n            // Galaxy assign new ones.\n            if (!initialImport) {\n                step.uuid = null;\n                $.each(step.workflow_outputs, (name, workflow_output) => {\n                    workflow_output.uuid = null;\n                });\n            }\n            node.init_field_data(step);\n            if (step.position) {\n                node.element.css({\n                    top: step.position.top,\n                    left: step.position.left\n                });\n            }\n            node.id = parseInt(step.id) + offset;\n            wf.nodes[node.id] = node;\n            max_id = Math.max(max_id, parseInt(id) + offset);\n            // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n            // Check for either, and then add outputs in the next pass.\n            if (!using_workflow_outputs) {\n                if (node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                } else {\n                    $.each(node.post_job_actions || [], (pja_id, pja) => {\n                        if (pja.action_type === \"HideDatasetAction\") {\n                            using_workflow_outputs = true;\n                        }\n                    });\n                }\n            }\n        });\n        wf.id_counter = max_id + 1;\n        // Second pass, connections\n        $.each(data.steps, (id, step) => {\n            var node = wf.nodes[parseInt(id) + offset];\n            $.each(step.input_connections, (k, v) => {\n                if (v) {\n                    if (!$.isArray(v)) {\n                        v = [v];\n                    }\n                    $.each(v, (l, x) => {\n                        var other_node = wf.nodes[parseInt(x.id) + offset];\n                        var c = new Connector();\n                        c.connect(\n                            other_node.output_terminals[x.output_name],\n                            node.input_terminals[k]\n                        );\n                        c.redraw();\n                    });\n                }\n            });\n            if (using_workflow_outputs) {\n                // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                $.each(node.output_terminals, (ot_id, ot) => {\n                    if (\n                        node.post_job_actions[`HideDatasetAction${ot.name}`] ===\n                        undefined\n                    ) {\n                        node.addWorkflowOutput(ot.name);\n                        var callout = $(node.element).find(\n                            `.callout.${ot.name}`\n                        );\n                        callout\n                            .find(\"img\")\n                            .attr(\n                                \"src\",\n                                `${Galaxy.root}static/images/fugue/asterisk-small.png`\n                            );\n                        wf.has_changes = true;\n                    }\n                });\n            }\n        });\n    },\n    check_changes_in_active_form: function() {\n        // If active form has changed, save it\n        if (this.active_form_has_changes) {\n            this.has_changes = true;\n            // Submit form.\n            $(\"#right-content\")\n                .find(\"form\")\n                .submit();\n            this.active_form_has_changes = false;\n        }\n    },\n    reload_active_node: function() {\n        if (this.active_node) {\n            var node = this.active_node;\n            this.clear_active_node();\n            this.activate_node(node);\n        }\n    },\n    clear_active_node: function() {\n        if (this.active_node) {\n            this.active_node.make_inactive();\n            this.active_node = null;\n        }\n        this.app.showAttributes();\n    },\n    activate_node: function(node) {\n        if (this.active_node != node) {\n            this.check_changes_in_active_form();\n            this.clear_active_node();\n            this.app.showForm(node.config_form, node);\n            node.make_active();\n            this.active_node = node;\n        }\n    },\n    node_changed: function(node, force) {\n        this.has_changes = true;\n        if (this.active_node == node && force) {\n            // Force changes to be saved even on new connection (previously dumped)\n            this.check_changes_in_active_form();\n            this.app.showForm(node.config_form, node);\n        }\n        this.app.showWorkflowParameters();\n    },\n    layout: function() {\n        this.check_changes_in_active_form();\n        this.has_changes = true;\n        // Prepare predecessor / successor tracking\n        var n_pred = {};\n        var successors = {};\n        // First pass to initialize arrays even for nodes with no connections\n        $.each(this.nodes, (id, node) => {\n            if (n_pred[id] === undefined) {\n                n_pred[id] = 0;\n            }\n            if (successors[id] === undefined) {\n                successors[id] = [];\n            }\n        });\n        // Second pass to count predecessors and successors\n        $.each(this.nodes, (id, node) => {\n            $.each(node.input_terminals, (j, t) => {\n                $.each(t.connectors, (k, c) => {\n                    // A connection exists from `other` to `node`\n                    var other = c.handle1.node;\n                    // node gains a predecessor\n                    n_pred[node.id] += 1;\n                    // other gains a successor\n                    successors[other.id].push(node.id);\n                });\n            });\n        });\n        // Assemble order, tracking levels\n        var node_ids_by_level = [];\n        while (true) {\n            // Everything without a predecessor\n            var level_parents = [];\n            for (var pred_k in n_pred) {\n                if (n_pred[pred_k] === 0) {\n                    level_parents.push(pred_k);\n                }\n            }\n            if (level_parents.length === 0) {\n                break;\n            }\n            node_ids_by_level.push(level_parents);\n            // Remove the parents from this level, and decrement the number\n            // of predecessors for each successor\n            for (var k in level_parents) {\n                var v = level_parents[k];\n                delete n_pred[v];\n                for (var sk in successors[v]) {\n                    n_pred[successors[v][sk]] -= 1;\n                }\n            }\n        }\n        if (n_pred.length) {\n            // ERROR: CYCLE! Currently we do nothing\n            return;\n        }\n        // Layout each level\n        var all_nodes = this.nodes;\n        var h_pad = 80;\n        var v_pad = 30;\n        var left = h_pad;\n        $.each(node_ids_by_level, (i, ids) => {\n            // We keep nodes in the same order in a level to give the user\n            // some control over ordering\n            ids.sort(\n                (a, b) =>\n                    $(all_nodes[a].element).position().top -\n                    $(all_nodes[b].element).position().top\n            );\n            // Position each node\n            var max_width = 0;\n            var top = v_pad;\n            $.each(ids, (j, id) => {\n                var node = all_nodes[id];\n                var element = $(node.element);\n                $(element).css({ top: top, left: left });\n                max_width = Math.max(max_width, $(element).width());\n                top += $(element).height() + v_pad;\n            });\n            left += max_width + h_pad;\n        });\n        // Need to redraw all connectors\n        $.each(all_nodes, (_, node) => {\n            node.redraw();\n        });\n    },\n    bounds_for_all_nodes: function() {\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n        var p;\n        $.each(this.nodes, (id, node) => {\n            var e = $(node.element);\n            p = e.position();\n            xmin = Math.min(xmin, p.left);\n            xmax = Math.max(xmax, p.left + e.width());\n            ymin = Math.min(ymin, p.top);\n            ymax = Math.max(ymax, p.top + e.width());\n        });\n        return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n    },\n    fit_canvas_to_nodes: function() {\n        // Math utils\n        function round_up(x, n) {\n            return Math.ceil(x / n) * n;\n        }\n        function fix_delta(x, n) {\n            if (x < n || x > 3 * n) {\n                var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                return -(x - new_pos);\n            }\n            return 0;\n        }\n        // Span of all elements\n        var bounds = this.bounds_for_all_nodes();\n        var position = this.canvas_container.position();\n        var parent = this.canvas_container.parent();\n        // Determine amount we need to expand on top/left\n        var xmin_delta = fix_delta(bounds.xmin, 100);\n        var ymin_delta = fix_delta(bounds.ymin, 100);\n        // May need to expand farther to fill viewport\n        xmin_delta = Math.max(xmin_delta, position.left);\n        ymin_delta = Math.max(ymin_delta, position.top);\n        var left = position.left - xmin_delta;\n        var top = position.top - ymin_delta;\n        // Same for width/height\n        var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n        var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n        width = Math.max(width, -left + parent.width());\n        height = Math.max(height, -top + parent.height());\n        // Grow the canvas container\n        this.canvas_container.css({\n            left: left,\n            top: top,\n            width: width,\n            height: height\n        });\n        // Move elements back if needed\n        this.canvas_container.children().each(function() {\n            var p = $(this).position();\n            $(this).css(\"left\", p.left + xmin_delta);\n            $(this).css(\"top\", p.top + ymin_delta);\n        });\n    }\n});\nexport default Workflow;\n"]}