{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["define","Connector","app","canvas_container","this","id_counter","nodes","name","has_changes","active_form_has_changes","workflowOutputLabels","extend","Workflow","$","prototype","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","warning","node","labelWorkflowOutput","outputName","nodeView","redrawWorkflowOutputs","create_node","add_node","type","title_text","content_id","fit_canvas_to_nodes","canvas_manager","activate_node","draw_overview","element","id","workflow","remove_node","clear_active_node","active_node","remove_all","v","wf","k","destroy","rectify_workflow_outputs","using_workflow_outputs","each","has_existing_pjas","workflow_outputs","length","pja_id","pja","action_type","self","node_changed","post_job_actions","pjas_to_rem","push","pja_name","create_pja","ot_id","ot","isWorkflowOutput","output_name","action_arguments","reload_active_node","from_simple","input_terminals","i","input_connections","t","cons","connectors","con_dict","handle1","c","input_subworkflow_step_id","undefined","attributes","act","tool_state","errors","position","annotation","uuid","node_data","steps","data","initialImport_","offset","initialImport","Object","max_id","keys","prebuildNode","step","workflow_output","parseInt","top","left","Math","max","isArray","other_node","connect","redraw","x","output_terminals","callout","attr","Galaxy","addWorkflowOutput","find","root","check_changes_in_active_form","submit","showAttributes","make_inactive","make_active","showForm","config_form","force","layout","n_pred","successors","j","other","node_ids_by_level","level_parents","pred_k","sk","all_nodes","v_pad","ids","sort","a","b","max_width","css","width","height","_","bounds_for_all_nodes","xmin","Infinity","xmax","ymax","ymin","p","min","e","ceil","n","fix_delta","round_up","new_pos","bounds","parent","xmin_delta","ymin_delta","children"],"mappings":"YAAAA,SACI,kCADJA,eAMQ,SAAAC,EAAWC,GACX,QAAKC,GAAAA,EAAAA,GACLC,KAAKC,IAAAA,EACLD,KAAKE,iBAALH,EACAC,KAAKG,WAAL,EACAH,KAAKI,SACLJ,KAAKK,KAAAA,KACLL,KAAKM,aAAAA,EACRN,KAAAK,yBAAA,EACCE,KAAQC,wBA8aEC,MA5aJA,GAAAF,OAAAC,EAAYE,WACRC,mBAAUC,SAASA,GACtB,OAFDA,KAGIA,IAAAZ,MAAAM,uBAMAO,oBAAKP,SAAAA,GACRM,IAZqBZ,KAAAM,qBAAAM,IAAA,IAgBlBE,sBAAYR,SAAAA,GACfM,SAjBqBZ,MAAAM,qBAAAM,IAqBlBG,kBAAKD,SAAAA,EAAuBE,GAC/BA,GACGhB,KAAEc,sBAAyBG,GAE9BjB,KAAAW,mBAAAM,IACGA,EAAJC,QAAc,sDAAAD,EAAA,gDAEbA,GA5BqBjB,KAAAa,oBAAAI,IAgClBE,yBAAKC,SAAqBC,EAAAA,EAA1BT,GACAO,QAAAA,KAAKG,mBAASC,KACdJ,EAAAC,oBAAAC,EAAAT,GAHJO,EAIOG,SAAAC,yBACI,IAKXC,YAAKC,SAALC,EAAAC,EAAAC,GACA,GAAAT,GAAKU,KAAAA,IAAAA,aAALH,EAAAC,EAAAC,EAKJH,OAJIzB,MAAKF,SAAIgC,GACT9B,KAAK+B,sBACL/B,KAAAF,IAAOqB,eAAPa,gBA7CsBhC,KAAA+B,cAAAZ,GA+CfA,GAEPA,SAAKc,SAALd,GACAA,EAAKlB,GAAAA,KAALA,WACAkB,EAAKjB,QAAOiB,KAAZ,KAAwBA,gBAAxBA,EAAAe,IACAlC,KAAKI,aACLe,KAAKgB,MAAAA,EAAWD,IAAhBf,EArDsBnB,KAAAI,aAAA,EAuD1BgC,EAAAA,SAAcpC,MAENoC,YAAKC,SAAAA,GACRrC,KAAAsC,aAAAnB,GACDnB,KAAOqC,0BA3DerC,MAAAE,MAAAiB,EAAAe,IA8D1BK,KAAAA,aAAa,GAET9B,WAAQ,WACJ+B,GAAAA,KACAC,EAAAA,KAAGL,KAAAA,MAAH,SAAAM,EAAAF,GAFJA,EAAAG,UAhEsBF,GAAAL,YAAAI,MAuEtBI,yBAAIC,WAEJpC,GAAEqC,IAA6BJ,EAC3BK,GAASC,CAWT,IAVIH,EAAAA,KAAAA,KAAAA,MAAAA,SAAAA,EAAyB1B,GAC5BA,EAAA6B,kBAAA7B,EAAA6B,iBAAAC,OAAA,IACCH,GAAF,GAEQC,EAAAA,KAAAA,EAAAA,iBAAoB,SAApBG,EAAAC,GACH,sBAAAA,EAAAC,cAHLL,GAAA,QAQA,IAAAF,IAAA,IAAAE,EAAA,CAEI,GAAAM,GAAIlC,IACAV,GAAAqC,KAAA9C,KAAIsD,MAAAA,SAAeZ,EAAnBvB,GACA,GAASoC,SAATpC,EAAIA,KAAKoC,CACLpC,GAAAA,IAAKoC,CACL,OAAAD,EAAAA,mBACHnC,EAAAoC,oBACGC,GAAc,EAEd,IAAAA,KACIA,GAAAA,KAAAA,EAAAA,iBAAiBN,SAAjBA,EAAAC,GACH,qBAAAA,EAAAC,aAHLI,EAAAC,KAAAP,KAOQI,EAAAA,OAAe,GACf7C,EAAAqC,KAAAU,EAAYD,SAAAA,EAALG,GAFXJ,GAAA,QAIHnC,GAAAoC,iBAAAG,KAGOb,GACApC,EAAAqC,KAAA3B,EAAIwC,iBAAoB,SAAAC,EAAAC,GAEpB,IAAU,IADVP,EAAAQ,iBAAAD,EAAA1D,MACU,CACNiD,GAAAA,CACAW,IAAAA,IACAC,YAAAA,oBAHJD,YAAAF,EAAA1D,KAKAgB,oBAEHA,GAAAoC,iBAAA,oBAAAM,EAAA1D,MAAA,KAXLgB,EAAAoC,iBAAA,oBAAAM,EAAA1D,MAAAgD,KAiBHE,EAAAf,aAAAnB,IAAA,IAAAmC,GACJD,EAAAY,0BAMTxD,UAAQ,WACJ,GAAAP,KAoDRgE,OAnDQzD,GAAAA,KAAEqC,KAAM3B,MAAKgD,SAAbC,EAA8BjD,GAC1BkD,GAAAA,KACA5D,GAAAqC,KAAA3B,EAAAgD,gBAAA,SAAAzB,EAAA4B,GACAD,EAAAC,EAAAnE,MAAA,IAGI,IAAAoE,KACI9D,GAAAqC,KAAAwB,EAAAE,WAAIC,SAAmBC,EAAAA,GACvB,GAAAC,EAAAD,QAAIE,CACJ,GAAIA,IAAAA,GAAAA,EAAAA,QAAAA,KAA8BC,GAAAA,YAAYF,EAAAD,QAAAvE,MAC1CsE,EAASH,EAAAQ,WAA+BF,MAAAA,8BAC3CC,KAAAD,IACDL,EAAAA,0BAAAK,GAEHL,EAAAH,GAAAK,EATLJ,EAAAC,EAAAnE,MAAAoE,MAcA9D,IAAAA,KACIU,GAAAoC,kBACIH,EAAAA,KAAAA,EAAAA,iBAAkBA,SADZgB,EAAAW,GAENhB,GAAAA,IACAC,YAAAA,EAAmBe,YAHvBhB,YAAAgB,EAAAhB,YAKAR,iBAAsBH,EAAAA,iBAN1BG,GAAAwB,EAAA3B,YAAA2B,EAAAhB,aAAA,KASHR,EAAAwB,EAAA3B,YAAA2B,EAAAhB,aAAAZ,IAGGhC,EAAA6B,mBACH7B,EAAA6B,oBAGGtB,IAAAA,IACAE,GAAAA,EAAAA,GACAoD,KAAAA,EAAa7D,KACb8D,WAAcA,EAAAA,WACdZ,WAAAA,EAAAA,WACAa,OAAAA,EAAa/D,OACbgE,kBAAiBA,EACjB5B,SAAAA,EAAAA,EAAkBpC,SAAKoC,WACvB6B,WAAWA,EAVCD,WAWZvE,iBAXYO,EAAAoC,iBAYZP,KAAAA,EAAAA,KAZJpC,MAAAO,EAAAP,MAcAV,iBAAmBmF,EAAnBrC,iBAEJ9C,GAASoF,EAAOpF,IAAhBmF,KAEUC,MAAApF,IAEVuC,YAAA,SAAA8C,EAAAC,GACA,GAAIC,OAAJZ,KAAAW,GAAAA,CACA/C,IAAIiD,IACAjD,IAAAA,GAAA,CADJiD,GAGID,GAAAA,KAASE,EAAAA,KAETC,EAASH,OAAbI,KAAApD,GAAAvC,OAAA+C,MAEA,IAAIJ,GAAAA,EAEAA,GAAkBiD,CAClBrF,GAAAqC,KAAAyC,EAAAD,MAAA,SAAApD,EAAA6D,GACA,GAAA5E,GAAAsB,GAAA3C,IAAAgG,aAAAC,EAAArE,KAAAqE,EAAA5F,KAAA4F,EAAAnE,WAGMkB,KACEkD,EAAAA,KAAAA,KACHvF,EAFDqC,KAAAiD,EAAA/C,iBAAA,SAAA7C,EAAA6F,GAGHA,EAAAZ,KAAA,QAGGjE,EAAAA,gBAAkB4E,GACrBA,EAAAb,UACD/D,EAAAc,QAAUgE,KAAc/D,IAAd6D,EAAoBN,SAA9BS,IAAAC,KAAAJ,EAAAb,SAAAiB,OAEAP,EAAAA,GAASQ,SAAUR,EAAV1D,IAAkB+D,EAC3BxD,GAAAvC,MAAAiB,EAAAe,IAAAf,EACAyE,EAAAQ,KAAAC,IAAAT,EAAAK,SAAA/D,GAAAuD,GAGQ5C,IADJ1B,EAGI6B,iBAAAC,OAAA,EACAxC,GAAY8C,EAGP9C,EAAAqC,KAAA3B,EAAAoC,qBAAA,SAAAL,EAAAC,GAHL,sBAAAA,EAAAC,cAKHP,GAAA,QAMLJ,GAAAxC,WAAWwC,EAASwD,EAEhBxF,EAAAqC,KAAAyC,EAAAD,MAAS,SAAApD,EAAA6D,GACL,GAAA5E,GAAAsB,GAAOhC,MAAE6F,SAAepE,GAAAuD,EACpBjD,GAAAA,KAAAA,EAAAA,kBAAA,SAAAE,EAAAF,GACHA,IACOA,EAAR8D,QAAW9D,KACPA,GAAI+D,IAEJ5B,EAAAA,KAAE6B,EAAAA,SAASD,EAAAA,GAEX5B,GAAE8B,GAAFhE,GAAAvC,MAAA+F,SAAAS,EAAAxE,IAAAuD,GALJd,EAAA,GAAA9E,EAOH8E,GAAA6B,QAAAD,EAAAI,iBAAAD,EAAA3C,aAZL5C,EAAAgD,gBAAAzB,IAcGG,EAAAA,cAIS1B,GAEAyF,EAAAA,KAAAA,EAAAA,iBAAoBC,SAApBjD,EAAgCkD,OAChCjC,KAAApC,EAAGrC,iBAAH,oBAAAyD,EAAA1D,QACHgB,EAAA4F,kBAAAlD,EAAA1D,MANLyG,QAAAnG,EAAAU,EAAAc,SAAA+E,KAAA,YAAAnD,EAAA1D,MAQHyG,QAAAI,KAAA,OAAAH,KAAA,MAAAC,OAAAG,KAAA,0CA1BLxE,GAAArC,aAAA,QAiCI8G,6BAAA,WAEAlH,KAAKK,0BACRL,KAAAI,aAAA,EAEL6D,EAAAA,kBAAqB+C,KAAA,QAAAG,SACbnH,KAAKsC,yBAAY,IAGjB2B,mBAAKlC,WACR,GAAA/B,KAAAsC,YAAA,CAhRqB,GAAAnB,GAAAnB,KAAAsC,WAkR1BD,MAAAA,oBACSrC,KAAKsC,cAAcnB,KAGvBkB,kBAAA,WACIvC,KAAIsH,cAvRapH,KAAAsC,YAAA+E,gBAyR1BtF,KAAAA,YAAgB,MAER/B,KAAAF,IAAKoH,kBAELnF,cAAA,SAAmBZ,GACnBA,KAAKmG,aAALnG,IACAnB,KAAKsC,+BACRtC,KAAAqC,oBAhSqBrC,KAAAF,IAAAyH,SAAApG,EAAAqG,YAAArG,GAkS1BmC,EAAAA,cACItD,KAAKI,YAALe,IAGImC,aAAK4D,SAAAA,EAAAA,GACLlH,KAAAI,aAASmH,EACZvH,KAAAsC,aAAAnB,GAAAsG,IAxSqBzH,KAAAkH,+BA2SjBlH,KAAAF,IAAAyH,SAAYpG,EAAAqG,YAAArG,IAEjBnB,KAAKI,IAAAA,0BAELsH,OAAIC,WACJ3H,KAAI4H,+BACJ5H,KAAAI,aAAA,CAEI,IAAAuH,MAAkCA,IAkBtC,KAjBIlH,EAAAqC,KAAK8E,KAAAA,MAAW1F,SAAQ2C,EAAAA,OAAcA,KAAA+C,EAAAA,KAAAD,EAAAzF,GAAA,OAAsB2C,KAAA+C,EAAA1F,KAAA0F,EAAA1F,SAGhEzB,EAAEqC,KAAM9C,KAAKE,MAAO,SAAUgC,EAAIf,GAC9BV,EAAEqC,KAAM3B,EAAKgD,gBAAiB,SAAA0D,EAAAvD,GAC1B7D,EAAEqC,KAAMwB,EAAEE,WAAY,SAAA9B,EAAAiC,GAElB,GAAImD,GAAQnD,EAAED,QAAQvD,IAEtBwG,GAAOxG,EAAKe,KAAO,EAEnB0F,EAAWE,EAAM5F,IAAIuB,KAAMtC,EAAKe,UAK5C6F,uBACe,CAEXC,gBACA,KAAM,GAAIC,KAAUN,GACa,GAAxBA,EAAQM,IACTD,cAAcvE,KAAMwE,EAG5B,IAAA,GAAKD,cAAc/E,OACf,KAEJ8E,mBAAkBtE,KAAMuE,cAGxB,KAAM,GAANtF,KAAesF,eAAgB,CAC3B,GAAIxF,GAAIwF,cAActF,SACfiF,GAAOnF,EACd,KAAM,GAAI0F,KAAMN,GAAApF,GACZmF,EAAQC,EAAApF,GAAc0F,KAAtB,GAIZ,IAAKP,EAAO1E,OAAZ,CAKA,GAAIkF,GAAYnI,KAAKE,KACLkI,OAAQ,EACxB,IAAIjC,GADQ,EAEZ1F,GAAEqC,KAAMiF,kBAAmB,SAAA3D,EAAaiE,GAGpCA,EAAIC,KAAM,SAAAC,EAAAC,GACN,MAAO/H,GAAE0H,EAAUI,GAAGtG,SAASiD,WAAWgB,IAAMzF,EAAE0H,EAAUK,GAAGvG,SAASiD,WAAWgB,KAGvF,IAAIuC,GAAY,EACZvC,EAAMkC,KACV3H,GAAEqC,KAAMuF,EAAK,SAAAR,EAAa3F,GACtB,GAAIf,GAAOgH,EAAUjG,GACjBD,EAAUxB,EAAEU,EAAKc,QACrBxB,GAAEwB,GAASyG,KAAOxC,IAAKA,EAAKC,KAAMA,IAClCsC,EAAYrC,KAAKC,IAAKoC,EAAWhI,EAAEwB,GAAS0G,SAC5CzC,GAAOzF,EAAEwB,GAAS2G,SAAWR,QAEjCjC,GAAQsC,EAlBA,KAqBZhI,EAAEqC,KAAMqF,EAAW,SAAAU,EAAa1H,GAAOA,EAAAsF,aAAkBqC,qBAAzD,WAtXsB,GAyXlBC,GAzXkBA,EAAAC,EAAAA,EAAAC,GAAAD,EAAAA,EAwX1BF,EAAAA,EAAAA,EAAsBI,GAAAF,EAAAA,CAQdC,OAPJxI,GAAAqC,KAAqBmG,KAAQD,MAA7B,SAAA9G,EAAAf,GACIgI,EAAAA,EAAAA,EAAOH,SAAUE,EAAAA,EAAAA,WACjBE,EAFJhD,KAAAiD,IAAAN,EAAAK,EAAAjD,MAGErD,EAAMsD,KAAKlG,IAAO+I,EAAAG,EAAUlH,KAAIf,EAAdwH,SAChBW,EAAMnI,KAAKc,IAAAA,EAAXmH,EAAAlD,KACAkD,EAAMlE,KAAAA,IAANgE,EAAAE,EAAAlD,IAAAoD,EAAAX,YAEAM,KAAY5C,EAAK4C,KAAQ9C,EAAFgD,KAAWR,EAAlCO,KAAAA,IAEAA,oBAAY7C,WAEhB,QAAU0C,GAAFrC,EAAcuC,GApYA,MAAA7C,MAAAmD,KAAA7C,EAAA8C,GAAAA,EAuYtB,QAAAC,GAAA/C,EAAA8C,GACA,MAASE,GAAAA,GAAThD,EAAsB8C,EAAtBA,GACIG,SAAOvD,KAAeoD,KAAtB9C,EAAA8C,EAAAA,GAAA,GAAAA,IACH9C,EAAAiD,UAEQjD,EAGJ,GAAAkD,GAAA5J,KAAA8I,uBACD5D,EAAAlF,KAAAD,iBAAAmF,WACH2E,EAAA7J,KAAAD,iBAAA8J,SAEGD,EAASH,EAAKX,EAAAA,KAAlB,KACI5D,EAAWuE,EAAK1J,EAAAA,KAAiBmF,IAErC4E,GAAA1D,KAAAC,IAAAyD,EAAA5E,EAAAiB,MACA4D,EAAID,KAAaL,IAAAA,EAAkBV,EAAnC7C,IACA,IAAI6D,GAAAA,EAAaN,KAAWG,EAC5B1D,EAAAhB,EAAAgB,IAAA6D,EAEAA,EAAAA,EAAuBA,EAAAA,KAAY7E,IAAAA,KAAnC4E,EACI3D,EAAOjB,EAASiB,EAAO2D,KAA3B,IAAA,KAAAC,CACApB,GAAIzC,KAAMhB,IAAAA,GAAe6E,EAAAA,EAAzBpB,SACAC,EAAAxC,KAAAC,IAAAuC,GAAA1C,EAAA2D,EAAAjB,UAEA5I,KAAI4I,iBAAmBgB,KACvBjB,KAAQvC,EACRwC,IAASxC,EACTuC,MAAAA,EACAC,OAAK7I,IAGD4I,KAAAA,iBAHuBqB,WAAAlH,KAAA,WAIvB8F,GAAAA,GAAQA,EAAAA,MAAAA,UAJZnI,GAAAT,MAAA0I,IAAA,OAAAU,EAAAjD,KAAA2D,GAMArJ,EAAAT,MAAA0I,IAAA,MAAAU,EAAAlD,IAAA6D,QAIItJ","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["define([\n    'mvc/workflow/workflow-connector',\n    'libs/toastr'\n    ],\nfunction( Connector, Toastr ) {\n    function Workflow( app, canvas_container ) {\n        this.app = app;\n        this.canvas_container = canvas_container;\n        this.id_counter = 0;\n        this.nodes = {};\n        this.name = null;\n        this.has_changes = false;\n        this.active_form_has_changes = false;\n        this.workflowOutputLabels = {};\n    }\n    $.extend( Workflow.prototype, {\n        canLabelOutputWith: function( label ) {\n            if( label ) {\n                return ! (label in this.workflowOutputLabels);\n            } else {\n                // empty labels are non-exclusive, so allow this one.\n                return true;\n            }\n        },\n        registerOutputLabel: function( label ) {\n            if( label ) {\n                this.workflowOutputLabels[label] = true;\n            }\n        },\n        unregisterOutputLabel: function( label ) {\n            if( label ) {\n                delete this.workflowOutputLabels[label];\n            }\n        },\n        updateOutputLabel: function( fromLabel, toLabel ) {\n            if( fromLabel ) {\n                this.unregisterOutputLabel( fromLabel );\n            }\n            if( ! this.canLabelOutputWith( toLabel ) ) {\n                Toastr.warning(\"Workflow contains duplicate workflow output labels \" + toLabel + \". This must be fixed before it can be saved.\");\n            }\n            if( toLabel ) {\n                this.registerOutputLabel( toLabel );\n            }\n        },\n        attemptUpdateOutputLabel: function( node, outputName, label ) {\n            if( this.canLabelOutputWith( label ) ) {\n                node.labelWorkflowOutput( outputName, label );\n                node.nodeView.redrawWorkflowOutputs();\n                return true;\n            } else {\n                return false;\n            }\n        },\n        create_node: function ( type, title_text, content_id ) {\n            var node = this.app.prebuildNode( type, title_text, content_id );\n            this.add_node( node );\n            this.fit_canvas_to_nodes();\n            this.app.canvas_manager.draw_overview();\n            this.activate_node( node );\n            return node;\n        },\n        add_node : function( node ) {\n            node.id = this.id_counter;\n            node.element.attr( 'id', 'wf-node-step-' + node.id );\n            this.id_counter++;\n            this.nodes[ node.id ] = node;\n            this.has_changes = true;\n            node.workflow = this;\n        },\n        remove_node : function( node ) {\n            if ( this.active_node == node ) {\n                this.clear_active_node();\n            }\n            delete this.nodes[ node.id ];\n            this.has_changes = true;\n        },\n        remove_all : function() {\n            wf = this;\n            $.each( this.nodes, function ( k, v ) {\n                v.destroy();\n                wf.remove_node( v );\n            });\n        },\n        rectify_workflow_outputs : function() {\n            // Find out if we're using workflow_outputs or not.\n            var using_workflow_outputs = false;\n            var has_existing_pjas = false;\n            $.each( this.nodes, function ( k, node ) {\n                if (node.workflow_outputs && node.workflow_outputs.length > 0){\n                    using_workflow_outputs = true;\n                }\n                $.each(node.post_job_actions, function(pja_id, pja){\n                    if (pja.action_type === \"HideDatasetAction\"){\n                        has_existing_pjas = true;\n                    }\n                });\n            });\n            if (using_workflow_outputs !== false || has_existing_pjas !== false){\n                // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n                var self = this;\n                $.each(this.nodes, function (k, node ){\n                    if (node.type === 'tool'){\n                        var node_changed = false;\n                        if (node.post_job_actions == null){\n                            node.post_job_actions = {};\n                            node_changed = true;\n                        }\n                        var pjas_to_rem = [];\n                        $.each(node.post_job_actions, function(pja_id, pja){\n                            if (pja.action_type == \"HideDatasetAction\"){\n                                pjas_to_rem.push(pja_id);\n                            }\n                        });\n                        if (pjas_to_rem.length > 0 ) {\n                            $.each(pjas_to_rem, function(i, pja_name){\n                                node_changed = true;\n                                delete node.post_job_actions[pja_name];\n                            });\n                        }\n                        if (using_workflow_outputs){\n                            $.each(node.output_terminals, function(ot_id, ot){\n                                var create_pja = !node.isWorkflowOutput(ot.name);\n                                if (create_pja === true){\n                                    node_changed = true;\n                                    var pja = {\n                                        action_type : \"HideDatasetAction\",\n                                        output_name : ot.name,\n                                        action_arguments : {}\n                                    }\n                                    node.post_job_actions['HideDatasetAction'+ot.name] = null;\n                                    node.post_job_actions['HideDatasetAction'+ot.name] = pja;\n                                }\n                            });\n                        }\n                        // lastly, if this is the active node, and we made changes, reload the display at right.\n                        if (self.active_node == node && node_changed === true) {\n                            self.reload_active_node();\n                        }\n                    }\n                });\n            }\n        },\n        to_simple : function () {\n            var nodes = {};\n            $.each( this.nodes, function ( i, node ) {\n                var input_connections = {};\n                $.each( node.input_terminals, function ( k, t ) {\n                    input_connections[ t.name ] = null;\n                    // There should only be 0 or 1 connectors, so this is\n                    // really a sneaky if statement\n                    var cons = []\n                    $.each( t.connectors, function ( i, c ) {\n                        if ( c.handle1 ) {\n                            var con_dict = { id: c.handle1.node.id, output_name: c.handle1.name };\n                            var input_subworkflow_step_id = t.attributes.input.input_subworkflow_step_id;\n                            if( input_subworkflow_step_id !== undefined ) {\n                                con_dict[\"input_subworkflow_step_id\"] = input_subworkflow_step_id;\n                            }\n                            cons[i] = con_dict;\n                            input_connections[ t.name ] = cons;\n                        }\n                    });\n                });\n                var post_job_actions = {};\n                if (node.post_job_actions){\n                    $.each( node.post_job_actions, function ( i, act ) {\n                        var pja = {\n                            action_type : act.action_type,\n                            output_name : act.output_name,\n                            action_arguments : act.action_arguments\n                        }\n                        post_job_actions[ act.action_type + act.output_name ] = null;\n                        post_job_actions[ act.action_type + act.output_name ] = pja;\n                    });\n                }\n                if (!node.workflow_outputs){\n                    node.workflow_outputs = [];\n                    // Just in case.\n                }\n                var node_data = {\n                    id : node.id,\n                    type : node.type,\n                    content_id : node.content_id,\n                    tool_state : node.tool_state,\n                    errors : node.errors,\n                    input_connections : input_connections,\n                    position : $(node.element).position(),\n                    annotation: node.annotation,\n                    post_job_actions: node.post_job_actions,\n                    uuid: node.uuid,\n                    label: node.label,\n                    workflow_outputs: node.workflow_outputs\n                };\n                nodes[ node.id ] = node_data;\n            });\n            return { steps: nodes };\n        },\n        from_simple : function ( data, initialImport_ ) {\n            var initialImport = (initialImport_ === undefined) ? true : initialImport_;\n            wf = this;\n            var offset = 0;\n            if( initialImport ) {\n                wf.name = data.name;\n            } else {\n                offset = Object.keys(wf.nodes).length;\n            }\n            var max_id = offset;\n            // First pass, nodes\n            var using_workflow_outputs = false;\n            $.each( data.steps, function( id, step ) {\n                var node = wf.app.prebuildNode( step.type, step.name, step.content_id );\n                // If workflow being copied into another, wipe UUID and let\n                // Galaxy assign new ones.\n                if( ! initialImport ) {\n                    step.uuid = null;\n                    $.each(step.workflow_outputs, function( name, workflow_output ) {\n                        workflow_output.uuid = null;\n                    });\n                }\n                node.init_field_data( step );\n                if ( step.position ) {\n                    node.element.css( { top: step.position.top, left: step.position.left } );\n                }\n                node.id = parseInt(step.id) + offset;\n                wf.nodes[ node.id ] = node;\n                max_id = Math.max( max_id, parseInt( id ) + offset );\n                // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n                // Check for either, and then add outputs in the next pass.\n                if (!using_workflow_outputs){\n                    if (node.workflow_outputs.length > 0){\n                        using_workflow_outputs = true;\n                    }\n                    else{\n                        $.each(node.post_job_actions || [], function(pja_id, pja){\n                            if (pja.action_type === \"HideDatasetAction\"){\n                                using_workflow_outputs = true;\n                            }\n                        });\n                    }\n                }\n            });\n            wf.id_counter = max_id + 1;\n            // Second pass, connections\n            $.each( data.steps, function( id, step ) {\n                var node = wf.nodes[parseInt(id) + offset];\n                $.each( step.input_connections, function( k, v ) {\n                    if ( v ) {\n                        if ( ! $.isArray( v ) ) {\n                            v = [ v ];\n                        }\n                        $.each( v, function( l, x ) {\n                            var other_node = wf.nodes[ parseInt(x.id) + offset ];\n                            var c = new Connector();\n                            c.connect( other_node.output_terminals[ x.output_name ],\n                                       node.input_terminals[ k ] );\n                            c.redraw();\n                        });\n                    }\n                });\n                if(using_workflow_outputs){\n                    // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                    $.each(node.output_terminals, function(ot_id, ot){\n                        if(node.post_job_actions['HideDatasetAction'+ot.name] === undefined){\n                            node.addWorkflowOutput(ot.name);\n                            callout = $(node.element).find('.callout.'+ot.name);\n                            callout.find('img').attr('src', Galaxy.root + 'static/images/fugue/asterisk-small.png');\n                            wf.has_changes = true;\n                        }\n                    });\n                }\n            });\n        },\n        check_changes_in_active_form : function() {\n            // If active form has changed, save it\n            if (this.active_form_has_changes) {\n                this.has_changes = true;\n                // Submit form.\n                $(\"#right-content\").find(\"form\").submit();\n                this.active_form_has_changes = false;\n            }\n        },\n        reload_active_node : function() {\n            if (this.active_node){\n                var node = this.active_node;\n                this.clear_active_node();\n                this.activate_node(node);\n            }\n        },\n        clear_active_node : function() {\n            if ( this.active_node ) {\n                this.active_node.make_inactive();\n                this.active_node = null;\n            }\n            this.app.showAttributes();\n        },\n        activate_node : function( node ) {\n            if ( this.active_node != node ) {\n                this.check_changes_in_active_form();\n                this.clear_active_node();\n                this.app.showForm( node.config_form, node );\n                node.make_active();\n                this.active_node = node;\n            }\n        },\n        node_changed : function ( node, force ) {\n            this.has_changes = true;\n            if ( this.active_node == node && force ) {\n                // Force changes to be saved even on new connection (previously dumped)\n                this.check_changes_in_active_form();\n                this.app.showForm( node.config_form, node );\n            }\n            this.app.showWorkflowParameters();\n        },\n        layout : function () {\n            this.check_changes_in_active_form();\n            this.has_changes = true;\n            // Prepare predecessor / successor tracking\n            var n_pred = {};\n            var successors = {};\n            // First pass to initialize arrays even for nodes with no connections\n            $.each( this.nodes, function( id, node ) {\n                if ( n_pred[id] === undefined ) { n_pred[id] = 0; }\n                if ( successors[id] === undefined ) { successors[id] = []; }\n            });\n            // Second pass to count predecessors and successors\n            $.each( this.nodes, function( id, node ) {\n                $.each( node.input_terminals, function ( j, t ) {\n                    $.each( t.connectors, function ( k, c ) {\n                        // A connection exists from `other` to `node`\n                        var other = c.handle1.node;\n                        // node gains a predecessor\n                        n_pred[node.id] += 1;\n                        // other gains a successor\n                        successors[other.id].push( node.id );\n                    });\n                });\n            });\n            // Assemble order, tracking levels\n            node_ids_by_level = [];\n            while ( true ) {\n                // Everything without a predecessor\n                level_parents = [];\n                for ( var pred_k in n_pred ) {\n                    if ( n_pred[ pred_k ] == 0 ) {\n                        level_parents.push( pred_k );\n                    }\n                }\n                if ( level_parents.length == 0 ) {\n                    break;\n                }\n                node_ids_by_level.push( level_parents );\n                // Remove the parents from this level, and decrement the number\n                // of predecessors for each successor\n                for ( var k in level_parents ) {\n                    var v = level_parents[k];\n                    delete n_pred[v];\n                    for ( var sk in successors[v] ) {\n                        n_pred[ successors[v][sk] ] -= 1;\n                    }\n                }\n            }\n            if ( n_pred.length ) {\n                // ERROR: CYCLE! Currently we do nothing\n                return;\n            }\n            // Layout each level\n            var all_nodes = this.nodes;\n            var h_pad = 80; v_pad = 30;\n            var left = h_pad;\n            $.each( node_ids_by_level, function( i, ids ) {\n                // We keep nodes in the same order in a level to give the user\n                // some control over ordering\n                ids.sort( function( a, b ) {\n                    return $(all_nodes[a].element).position().top - $(all_nodes[b].element).position().top;\n                });\n                // Position each node\n                var max_width = 0;\n                var top = v_pad;\n                $.each( ids, function( j, id ) {\n                    var node = all_nodes[id];\n                    var element = $(node.element);\n                    $(element).css( { top: top, left: left } );\n                    max_width = Math.max( max_width, $(element).width() );\n                    top += $(element).height() + v_pad;\n                });\n                left += max_width + h_pad;\n            });\n            // Need to redraw all connectors\n            $.each( all_nodes, function( _, node ) { node.redraw(); } );\n        },\n        bounds_for_all_nodes: function() {\n            var xmin = Infinity, xmax = -Infinity,\n                ymin = Infinity, ymax = -Infinity,\n                p;\n            $.each( this.nodes, function( id, node ) {\n                e = $(node.element);\n                p = e.position();\n                xmin = Math.min( xmin, p.left );\n                xmax = Math.max( xmax, p.left + e.width() );\n                ymin = Math.min( ymin, p.top );\n                ymax = Math.max( ymax, p.top + e.width() );\n            });\n            return  { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n        },\n        fit_canvas_to_nodes: function() {\n            // Math utils\n            function round_up( x, n ) {\n                return Math.ceil( x / n ) * n;\n            }\n            function fix_delta( x, n ) {\n                if ( x < n|| x > 3*n ) {\n                    new_pos = ( Math.ceil( ( ( x % n ) ) / n ) + 1 ) * n;\n                    return ( - ( x - new_pos ) );\n                }\n                return 0;\n            }\n            // Span of all elements\n            var bounds = this.bounds_for_all_nodes();\n            var position = this.canvas_container.position();\n            var parent = this.canvas_container.parent();\n            // Determine amount we need to expand on top/left\n            var xmin_delta = fix_delta( bounds.xmin, 100 );\n            var ymin_delta = fix_delta( bounds.ymin, 100 );\n            // May need to expand farther to fill viewport\n            xmin_delta = Math.max( xmin_delta, position.left );\n            ymin_delta = Math.max( ymin_delta, position.top );\n            var left = position.left - xmin_delta;\n            var top = position.top - ymin_delta;\n            // Same for width/height\n            var width = round_up( bounds.xmax + 100, 100 ) + xmin_delta;\n            var height = round_up( bounds.ymax + 100, 100 ) + ymin_delta;\n            width = Math.max( width, - left + parent.width() );\n            height = Math.max( height, - top + parent.height() );\n            // Grow the canvas container\n            this.canvas_container.css( {\n                left: left,\n                top: top,\n                width: width,\n                height: height\n            });\n            // Move elements back if needed\n            this.canvas_container.children().each( function() {\n                var p = $(this).position();\n                $(this).css( \"left\", p.left + xmin_delta );\n                $(this).css( \"top\", p.top + ymin_delta );\n            });\n        }\n    });\n    return Workflow;\n});\n"]}