{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["Workflow","app","canvas_container","this","id_counter","nodes","name","has_changes","Toastr","workflowOutputLabels","$","extend","prototype","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","attemptUpdateOutputLabel","node","outputName","labelWorkflowOutput","nodeView","redrawWorkflowOutputs","create_node","prebuildNode","type","title_text","content_id","add_node","draw_overview","activate_node","id","element","warning","workflow","remove_node","active_node","clear_active_node","remove_all","wf","each","k","v","destroy","rectify_workflow_outputs","using_workflow_outputs","has_existing_pjas","workflow_outputs","length","post_job_actions","pja_id","self","node_changed","pja","action_type","pjas_to_rem","push","i","pja_name","ot_id","ot","isWorkflowOutput","output_name","action_arguments","reload_active_node","to_simple","input_connections","input_terminals","create_pja","t","c","handle1","input_subworkflow_step_id","attributes","input","cons","con_dict","act","tool_version","config_form","version","tool_state","errors","position","node_data","steps","from_simple","data","initialImport_","initialImport","uuid","step","workflow_output","offset","init_field_data","css","max_id","top","left","Math","max","parseInt","x","_workflowConnector2","default","connect","other_node","output_terminals","redraw","addWorkflowOutput","find","callout","check_changes_in_active_form","active_form_has_changes","showForm","force","layout","n_pred","successors","undefined","j","connectors","other","node_ids_by_level","level_parents","pred_k","sk","all_nodes","h_pad","ids","sort","a","b","max_width","v_pad","width","height","_","bounds_for_all_nodes","Infinity","p","xmin","ymax","xmax","e","ymin","fit_canvas_to_nodes","round_up","fix_delta","n","ceil","bounds","xmin_delta","parent","ymin_delta","children"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["import Connector from \"mvc/workflow/workflow-connector\";\nimport * as Toastr from \"libs/toastr\";\nfunction Workflow(app, canvas_container) {\n    this.app = app;\n    this.canvas_container = canvas_container;\n    this.id_counter = 0;\n    this.nodes = {};\n    this.name = null;\n    this.has_changes = false;\n    this.active_form_has_changes = false;\n    this.workflowOutputLabels = {};\n}\n$.extend(Workflow.prototype, {\n    canLabelOutputWith: function(label) {\n        if (label) {\n            return !(label in this.workflowOutputLabels);\n        } else {\n            // empty labels are non-exclusive, so allow this one.\n            return true;\n        }\n    },\n    registerOutputLabel: function(label) {\n        if (label) {\n            this.workflowOutputLabels[label] = true;\n        }\n    },\n    unregisterOutputLabel: function(label) {\n        if (label) {\n            delete this.workflowOutputLabels[label];\n        }\n    },\n    updateOutputLabel: function(fromLabel, toLabel) {\n        if (fromLabel) {\n            this.unregisterOutputLabel(fromLabel);\n        }\n        if (!this.canLabelOutputWith(toLabel)) {\n            Toastr.warning(\n                \"Workflow contains duplicate workflow output labels \" +\n                    toLabel +\n                    \". This must be fixed before it can be saved.\"\n            );\n        }\n        if (toLabel) {\n            this.registerOutputLabel(toLabel);\n        }\n    },\n    attemptUpdateOutputLabel: function(node, outputName, label) {\n        if (this.canLabelOutputWith(label)) {\n            node.labelWorkflowOutput(outputName, label);\n            node.nodeView.redrawWorkflowOutputs();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    create_node: function(type, title_text, content_id) {\n        var node = this.app.prebuildNode(type, title_text, content_id);\n        this.add_node(node);\n        this.fit_canvas_to_nodes();\n        this.app.canvas_manager.draw_overview();\n        this.activate_node(node);\n        return node;\n    },\n    add_node: function(node) {\n        node.id = this.id_counter;\n        node.element.attr(\"id\", \"wf-node-step-\" + node.id);\n        this.id_counter++;\n        this.nodes[node.id] = node;\n        this.has_changes = true;\n        node.workflow = this;\n    },\n    remove_node: function(node) {\n        if (this.active_node == node) {\n            this.clear_active_node();\n        }\n        delete this.nodes[node.id];\n        this.has_changes = true;\n    },\n    remove_all: function() {\n        var wf = this;\n        $.each(this.nodes, function(k, v) {\n            v.destroy();\n            wf.remove_node(v);\n        });\n    },\n    rectify_workflow_outputs: function() {\n        // Find out if we're using workflow_outputs or not.\n        var using_workflow_outputs = false;\n        var has_existing_pjas = false;\n        $.each(this.nodes, function(k, node) {\n            if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                using_workflow_outputs = true;\n            }\n            $.each(node.post_job_actions, function(pja_id, pja) {\n                if (pja.action_type === \"HideDatasetAction\") {\n                    has_existing_pjas = true;\n                }\n            });\n        });\n        if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n            // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n            var self = this;\n            $.each(this.nodes, function(k, node) {\n                if (node.type === \"tool\") {\n                    var node_changed = false;\n                    if (node.post_job_actions === null) {\n                        node.post_job_actions = {};\n                        node_changed = true;\n                    }\n                    var pjas_to_rem = [];\n                    $.each(node.post_job_actions, function(pja_id, pja) {\n                        if (pja.action_type == \"HideDatasetAction\") {\n                            pjas_to_rem.push(pja_id);\n                        }\n                    });\n                    if (pjas_to_rem.length > 0) {\n                        $.each(pjas_to_rem, function(i, pja_name) {\n                            node_changed = true;\n                            delete node.post_job_actions[pja_name];\n                        });\n                    }\n                    if (using_workflow_outputs) {\n                        $.each(node.output_terminals, function(ot_id, ot) {\n                            var create_pja = !node.isWorkflowOutput(ot.name);\n                            if (create_pja === true) {\n                                node_changed = true;\n                                var pja = {\n                                    action_type: \"HideDatasetAction\",\n                                    output_name: ot.name,\n                                    action_arguments: {}\n                                };\n                                node.post_job_actions[\n                                    \"HideDatasetAction\" + ot.name\n                                ] = null;\n                                node.post_job_actions[\n                                    \"HideDatasetAction\" + ot.name\n                                ] = pja;\n                            }\n                        });\n                    }\n                    // lastly, if this is the active node, and we made changes, reload the display at right.\n                    if (self.active_node == node && node_changed === true) {\n                        self.reload_active_node();\n                    }\n                }\n            });\n        }\n    },\n    to_simple: function() {\n        var nodes = {};\n        $.each(this.nodes, function(i, node) {\n            var input_connections = {};\n            $.each(node.input_terminals, function(k, t) {\n                input_connections[t.name] = null;\n                // There should only be 0 or 1 connectors, so this is\n                // really a sneaky if statement\n                var cons = [];\n                $.each(t.connectors, function(i, c) {\n                    if (c.handle1) {\n                        var con_dict = {\n                            id: c.handle1.node.id,\n                            output_name: c.handle1.name\n                        };\n                        var input_subworkflow_step_id =\n                            t.attributes.input.input_subworkflow_step_id;\n                        if (input_subworkflow_step_id !== undefined) {\n                            con_dict[\n                                \"input_subworkflow_step_id\"\n                            ] = input_subworkflow_step_id;\n                        }\n                        cons[i] = con_dict;\n                        input_connections[t.name] = cons;\n                    }\n                });\n            });\n            var post_job_actions = {};\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, function(i, act) {\n                    var pja = {\n                        action_type: act.action_type,\n                        output_name: act.output_name,\n                        action_arguments: act.action_arguments\n                    };\n                    post_job_actions[act.action_type + act.output_name] = null;\n                    post_job_actions[act.action_type + act.output_name] = pja;\n                });\n            }\n            if (!node.workflow_outputs) {\n                node.workflow_outputs = [];\n                // Just in case.\n            }\n            var node_data = {\n                id: node.id,\n                type: node.type,\n                content_id: node.content_id,\n                tool_version: node.config_form.version,\n                tool_state: node.tool_state,\n                errors: node.errors,\n                input_connections: input_connections,\n                position: $(node.element).position(),\n                annotation: node.annotation,\n                post_job_actions: node.post_job_actions,\n                uuid: node.uuid,\n                label: node.label,\n                workflow_outputs: node.workflow_outputs\n            };\n            nodes[node.id] = node_data;\n        });\n        return { steps: nodes };\n    },\n    from_simple: function(data, initialImport_) {\n        var initialImport =\n            initialImport_ === undefined ? true : initialImport_;\n        var wf = this;\n        var offset = 0;\n        if (initialImport) {\n            wf.name = data.name;\n        } else {\n            offset = Object.keys(wf.nodes).length;\n        }\n        var max_id = offset;\n        // First pass, nodes\n        var using_workflow_outputs = false;\n        $.each(data.steps, function(id, step) {\n            var node = wf.app.prebuildNode(\n                step.type,\n                step.name,\n                step.content_id\n            );\n            // If workflow being copied into another, wipe UUID and let\n            // Galaxy assign new ones.\n            if (!initialImport) {\n                step.uuid = null;\n                $.each(step.workflow_outputs, function(name, workflow_output) {\n                    workflow_output.uuid = null;\n                });\n            }\n            node.init_field_data(step);\n            if (step.position) {\n                node.element.css({\n                    top: step.position.top,\n                    left: step.position.left\n                });\n            }\n            node.id = parseInt(step.id) + offset;\n            wf.nodes[node.id] = node;\n            max_id = Math.max(max_id, parseInt(id) + offset);\n            // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n            // Check for either, and then add outputs in the next pass.\n            if (!using_workflow_outputs) {\n                if (node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                } else {\n                    $.each(node.post_job_actions || [], function(pja_id, pja) {\n                        if (pja.action_type === \"HideDatasetAction\") {\n                            using_workflow_outputs = true;\n                        }\n                    });\n                }\n            }\n        });\n        wf.id_counter = max_id + 1;\n        // Second pass, connections\n        $.each(data.steps, function(id, step) {\n            var node = wf.nodes[parseInt(id) + offset];\n            $.each(step.input_connections, function(k, v) {\n                if (v) {\n                    if (!$.isArray(v)) {\n                        v = [v];\n                    }\n                    $.each(v, function(l, x) {\n                        var other_node = wf.nodes[parseInt(x.id) + offset];\n                        var c = new Connector();\n                        c.connect(\n                            other_node.output_terminals[x.output_name],\n                            node.input_terminals[k]\n                        );\n                        c.redraw();\n                    });\n                }\n            });\n            if (using_workflow_outputs) {\n                // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                $.each(node.output_terminals, function(ot_id, ot) {\n                    if (\n                        node.post_job_actions[\"HideDatasetAction\" + ot.name] ===\n                        undefined\n                    ) {\n                        node.addWorkflowOutput(ot.name);\n                        var callout = $(node.element).find(\n                            \".callout.\" + ot.name\n                        );\n                        callout\n                            .find(\"img\")\n                            .attr(\n                                \"src\",\n                                Galaxy.root +\n                                    \"static/images/fugue/asterisk-small.png\"\n                            );\n                        wf.has_changes = true;\n                    }\n                });\n            }\n        });\n    },\n    check_changes_in_active_form: function() {\n        // If active form has changed, save it\n        if (this.active_form_has_changes) {\n            this.has_changes = true;\n            // Submit form.\n            $(\"#right-content\")\n                .find(\"form\")\n                .submit();\n            this.active_form_has_changes = false;\n        }\n    },\n    reload_active_node: function() {\n        if (this.active_node) {\n            var node = this.active_node;\n            this.clear_active_node();\n            this.activate_node(node);\n        }\n    },\n    clear_active_node: function() {\n        if (this.active_node) {\n            this.active_node.make_inactive();\n            this.active_node = null;\n        }\n        this.app.showAttributes();\n    },\n    activate_node: function(node) {\n        if (this.active_node != node) {\n            this.check_changes_in_active_form();\n            this.clear_active_node();\n            this.app.showForm(node.config_form, node);\n            node.make_active();\n            this.active_node = node;\n        }\n    },\n    node_changed: function(node, force) {\n        this.has_changes = true;\n        if (this.active_node == node && force) {\n            // Force changes to be saved even on new connection (previously dumped)\n            this.check_changes_in_active_form();\n            this.app.showForm(node.config_form, node);\n        }\n        this.app.showWorkflowParameters();\n    },\n    layout: function() {\n        this.check_changes_in_active_form();\n        this.has_changes = true;\n        // Prepare predecessor / successor tracking\n        var n_pred = {};\n        var successors = {};\n        // First pass to initialize arrays even for nodes with no connections\n        $.each(this.nodes, function(id, node) {\n            if (n_pred[id] === undefined) {\n                n_pred[id] = 0;\n            }\n            if (successors[id] === undefined) {\n                successors[id] = [];\n            }\n        });\n        // Second pass to count predecessors and successors\n        $.each(this.nodes, function(id, node) {\n            $.each(node.input_terminals, function(j, t) {\n                $.each(t.connectors, function(k, c) {\n                    // A connection exists from `other` to `node`\n                    var other = c.handle1.node;\n                    // node gains a predecessor\n                    n_pred[node.id] += 1;\n                    // other gains a successor\n                    successors[other.id].push(node.id);\n                });\n            });\n        });\n        // Assemble order, tracking levels\n        var node_ids_by_level = [];\n        while (true) {\n            // Everything without a predecessor\n            var level_parents = [];\n            for (var pred_k in n_pred) {\n                if (n_pred[pred_k] === 0) {\n                    level_parents.push(pred_k);\n                }\n            }\n            if (level_parents.length === 0) {\n                break;\n            }\n            node_ids_by_level.push(level_parents);\n            // Remove the parents from this level, and decrement the number\n            // of predecessors for each successor\n            for (var k in level_parents) {\n                var v = level_parents[k];\n                delete n_pred[v];\n                for (var sk in successors[v]) {\n                    n_pred[successors[v][sk]] -= 1;\n                }\n            }\n        }\n        if (n_pred.length) {\n            // ERROR: CYCLE! Currently we do nothing\n            return;\n        }\n        // Layout each level\n        var all_nodes = this.nodes;\n        var h_pad = 80;\n        var v_pad = 30;\n        var left = h_pad;\n        $.each(node_ids_by_level, function(i, ids) {\n            // We keep nodes in the same order in a level to give the user\n            // some control over ordering\n            ids.sort(function(a, b) {\n                return (\n                    $(all_nodes[a].element).position().top -\n                    $(all_nodes[b].element).position().top\n                );\n            });\n            // Position each node\n            var max_width = 0;\n            var top = v_pad;\n            $.each(ids, function(j, id) {\n                var node = all_nodes[id];\n                var element = $(node.element);\n                $(element).css({ top: top, left: left });\n                max_width = Math.max(max_width, $(element).width());\n                top += $(element).height() + v_pad;\n            });\n            left += max_width + h_pad;\n        });\n        // Need to redraw all connectors\n        $.each(all_nodes, function(_, node) {\n            node.redraw();\n        });\n    },\n    bounds_for_all_nodes: function() {\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n        var p;\n        $.each(this.nodes, function(id, node) {\n            var e = $(node.element);\n            p = e.position();\n            xmin = Math.min(xmin, p.left);\n            xmax = Math.max(xmax, p.left + e.width());\n            ymin = Math.min(ymin, p.top);\n            ymax = Math.max(ymax, p.top + e.width());\n        });\n        return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n    },\n    fit_canvas_to_nodes: function() {\n        // Math utils\n        function round_up(x, n) {\n            return Math.ceil(x / n) * n;\n        }\n        function fix_delta(x, n) {\n            if (x < n || x > 3 * n) {\n                var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                return -(x - new_pos);\n            }\n            return 0;\n        }\n        // Span of all elements\n        var bounds = this.bounds_for_all_nodes();\n        var position = this.canvas_container.position();\n        var parent = this.canvas_container.parent();\n        // Determine amount we need to expand on top/left\n        var xmin_delta = fix_delta(bounds.xmin, 100);\n        var ymin_delta = fix_delta(bounds.ymin, 100);\n        // May need to expand farther to fill viewport\n        xmin_delta = Math.max(xmin_delta, position.left);\n        ymin_delta = Math.max(ymin_delta, position.top);\n        var left = position.left - xmin_delta;\n        var top = position.top - ymin_delta;\n        // Same for width/height\n        var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n        var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n        width = Math.max(width, -left + parent.width());\n        height = Math.max(height, -top + parent.height());\n        // Grow the canvas container\n        this.canvas_container.css({\n            left: left,\n            top: top,\n            width: width,\n            height: height\n        });\n        // Move elements back if needed\n        this.canvas_container.children().each(function() {\n            var p = $(this).position();\n            $(this).css(\"left\", p.left + xmin_delta);\n            $(this).css(\"top\", p.top + ymin_delta);\n        });\n    }\n});\nexport default Workflow;\n"]}