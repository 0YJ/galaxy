{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["define","Connector","Toastr","Workflow","app","this","canvas_container","id_counter","nodes","name","has_changes","active_form_has_changes","workflowOutputLabels","$","extend","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","attemptUpdateOutputLabel","node","outputName","labelWorkflowOutput","nodeView","redrawWorkflowOutputs","create_node","canvas_manager","draw_overview","activate_node","type","title_text","content_id","add_node","fit_canvas_to_nodes","id","workflow","remove_node","active_node","clear_active_node","wf","each","k","v","rectify_workflow_outputs","using_workflow_outputs","has_existing_pjas","post_job_actions","workflow_outputs","length","pja_id","pja","action_type","node_changed","self","pjas_to_rem","push","output_terminals","create_pja","isWorkflowOutput","pja_name","output_name","action_arguments","ot_id","ot","reload_active_node","input_subworkflow_step_id","input_connections","con_dict","t","cons","connectors","i","c","handle1","act","tool_version","config_form","tool_state","errors","position","annotation","uuid","steps","initialImport","offset","data","version","Object","max_id","element","from_simple","initialImport_","init_field_data","top","left","keys","step","workflow_output","parseInt","connect","redraw","submit","isArray","l","x","other_node","input_terminals","showForm","check_changes_in_active_form","find","attr","successors","other","make_inactive","showAttributes","n_pred","pred_k","level_parents","force","node_ids_by_level","showWorkflowParameters","undefined","all_nodes","v_pad","h_pad","ids","sort","j","max_width","xmax","Infinity","ymin","p","e","xmin","Math","max","ymax","width","fix_delta","a","b","bounds","parent","xmin_delta","ymin_delta","css","round_up","height","_","bounds_for_all_nodes","min","n","ceil","children"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["define([\"mvc/workflow/workflow-connector\", \"libs/toastr\"], function(\n    Connector,\n    Toastr\n) {\n    function Workflow(app, canvas_container) {\n        this.app = app;\n        this.canvas_container = canvas_container;\n        this.id_counter = 0;\n        this.nodes = {};\n        this.name = null;\n        this.has_changes = false;\n        this.active_form_has_changes = false;\n        this.workflowOutputLabels = {};\n    }\n    $.extend(Workflow.prototype, {\n        canLabelOutputWith: function(label) {\n            if (label) {\n                return !(label in this.workflowOutputLabels);\n            } else {\n                // empty labels are non-exclusive, so allow this one.\n                return true;\n            }\n        },\n        registerOutputLabel: function(label) {\n            if (label) {\n                this.workflowOutputLabels[label] = true;\n            }\n        },\n        unregisterOutputLabel: function(label) {\n            if (label) {\n                delete this.workflowOutputLabels[label];\n            }\n        },\n        updateOutputLabel: function(fromLabel, toLabel) {\n            if (fromLabel) {\n                this.unregisterOutputLabel(fromLabel);\n            }\n            if (!this.canLabelOutputWith(toLabel)) {\n                Toastr.warning(\n                    \"Workflow contains duplicate workflow output labels \" +\n                        toLabel +\n                        \". This must be fixed before it can be saved.\"\n                );\n            }\n            if (toLabel) {\n                this.registerOutputLabel(toLabel);\n            }\n        },\n        attemptUpdateOutputLabel: function(node, outputName, label) {\n            if (this.canLabelOutputWith(label)) {\n                node.labelWorkflowOutput(outputName, label);\n                node.nodeView.redrawWorkflowOutputs();\n                return true;\n            } else {\n                return false;\n            }\n        },\n        create_node: function(type, title_text, content_id) {\n            var node = this.app.prebuildNode(type, title_text, content_id);\n            this.add_node(node);\n            this.fit_canvas_to_nodes();\n            this.app.canvas_manager.draw_overview();\n            this.activate_node(node);\n            return node;\n        },\n        add_node: function(node) {\n            node.id = this.id_counter;\n            node.element.attr(\"id\", \"wf-node-step-\" + node.id);\n            this.id_counter++;\n            this.nodes[node.id] = node;\n            this.has_changes = true;\n            node.workflow = this;\n        },\n        remove_node: function(node) {\n            if (this.active_node == node) {\n                this.clear_active_node();\n            }\n            delete this.nodes[node.id];\n            this.has_changes = true;\n        },\n        remove_all: function() {\n            var wf = this;\n            $.each(this.nodes, function(k, v) {\n                v.destroy();\n                wf.remove_node(v);\n            });\n        },\n        rectify_workflow_outputs: function() {\n            // Find out if we're using workflow_outputs or not.\n            var using_workflow_outputs = false;\n            var has_existing_pjas = false;\n            $.each(this.nodes, function(k, node) {\n                if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                }\n                $.each(node.post_job_actions, function(pja_id, pja) {\n                    if (pja.action_type === \"HideDatasetAction\") {\n                        has_existing_pjas = true;\n                    }\n                });\n            });\n            if (\n                using_workflow_outputs !== false ||\n                has_existing_pjas !== false\n            ) {\n                // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n                var self = this;\n                $.each(this.nodes, function(k, node) {\n                    if (node.type === \"tool\") {\n                        var node_changed = false;\n                        if (node.post_job_actions === null) {\n                            node.post_job_actions = {};\n                            node_changed = true;\n                        }\n                        var pjas_to_rem = [];\n                        $.each(node.post_job_actions, function(pja_id, pja) {\n                            if (pja.action_type == \"HideDatasetAction\") {\n                                pjas_to_rem.push(pja_id);\n                            }\n                        });\n                        if (pjas_to_rem.length > 0) {\n                            $.each(pjas_to_rem, function(i, pja_name) {\n                                node_changed = true;\n                                delete node.post_job_actions[pja_name];\n                            });\n                        }\n                        if (using_workflow_outputs) {\n                            $.each(node.output_terminals, function(ot_id, ot) {\n                                var create_pja = !node.isWorkflowOutput(\n                                    ot.name\n                                );\n                                if (create_pja === true) {\n                                    node_changed = true;\n                                    var pja = {\n                                        action_type: \"HideDatasetAction\",\n                                        output_name: ot.name,\n                                        action_arguments: {}\n                                    };\n                                    node.post_job_actions[\n                                        \"HideDatasetAction\" + ot.name\n                                    ] = null;\n                                    node.post_job_actions[\n                                        \"HideDatasetAction\" + ot.name\n                                    ] = pja;\n                                }\n                            });\n                        }\n                        // lastly, if this is the active node, and we made changes, reload the display at right.\n                        if (self.active_node == node && node_changed === true) {\n                            self.reload_active_node();\n                        }\n                    }\n                });\n            }\n        },\n        to_simple: function() {\n            var nodes = {};\n            $.each(this.nodes, function(i, node) {\n                var input_connections = {};\n                $.each(node.input_terminals, function(k, t) {\n                    input_connections[t.name] = null;\n                    // There should only be 0 or 1 connectors, so this is\n                    // really a sneaky if statement\n                    var cons = [];\n                    $.each(t.connectors, function(i, c) {\n                        if (c.handle1) {\n                            var con_dict = {\n                                id: c.handle1.node.id,\n                                output_name: c.handle1.name\n                            };\n                            var input_subworkflow_step_id =\n                                t.attributes.input.input_subworkflow_step_id;\n                            if (input_subworkflow_step_id !== undefined) {\n                                con_dict[\n                                    \"input_subworkflow_step_id\"\n                                ] = input_subworkflow_step_id;\n                            }\n                            cons[i] = con_dict;\n                            input_connections[t.name] = cons;\n                        }\n                    });\n                });\n                var post_job_actions = {};\n                if (node.post_job_actions) {\n                    $.each(node.post_job_actions, function(i, act) {\n                        var pja = {\n                            action_type: act.action_type,\n                            output_name: act.output_name,\n                            action_arguments: act.action_arguments\n                        };\n                        post_job_actions[\n                            act.action_type + act.output_name\n                        ] = null;\n                        post_job_actions[\n                            act.action_type + act.output_name\n                        ] = pja;\n                    });\n                }\n                if (!node.workflow_outputs) {\n                    node.workflow_outputs = [];\n                    // Just in case.\n                }\n                var node_data = {\n                    id: node.id,\n                    type: node.type,\n                    content_id: node.content_id,\n                    tool_version: node.config_form.version,\n                    tool_state: node.tool_state,\n                    errors: node.errors,\n                    input_connections: input_connections,\n                    position: $(node.element).position(),\n                    annotation: node.annotation,\n                    post_job_actions: node.post_job_actions,\n                    uuid: node.uuid,\n                    label: node.label,\n                    workflow_outputs: node.workflow_outputs\n                };\n                nodes[node.id] = node_data;\n            });\n            return { steps: nodes };\n        },\n        from_simple: function(data, initialImport_) {\n            var initialImport =\n                initialImport_ === undefined ? true : initialImport_;\n            var wf = this;\n            var offset = 0;\n            if (initialImport) {\n                wf.name = data.name;\n            } else {\n                offset = Object.keys(wf.nodes).length;\n            }\n            var max_id = offset;\n            // First pass, nodes\n            var using_workflow_outputs = false;\n            $.each(data.steps, function(id, step) {\n                var node = wf.app.prebuildNode(\n                    step.type,\n                    step.name,\n                    step.content_id\n                );\n                // If workflow being copied into another, wipe UUID and let\n                // Galaxy assign new ones.\n                if (!initialImport) {\n                    step.uuid = null;\n                    $.each(step.workflow_outputs, function(\n                        name,\n                        workflow_output\n                    ) {\n                        workflow_output.uuid = null;\n                    });\n                }\n                node.init_field_data(step);\n                if (step.position) {\n                    node.element.css({\n                        top: step.position.top,\n                        left: step.position.left\n                    });\n                }\n                node.id = parseInt(step.id) + offset;\n                wf.nodes[node.id] = node;\n                max_id = Math.max(max_id, parseInt(id) + offset);\n                // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n                // Check for either, and then add outputs in the next pass.\n                if (!using_workflow_outputs) {\n                    if (node.workflow_outputs.length > 0) {\n                        using_workflow_outputs = true;\n                    } else {\n                        $.each(node.post_job_actions || [], function(\n                            pja_id,\n                            pja\n                        ) {\n                            if (pja.action_type === \"HideDatasetAction\") {\n                                using_workflow_outputs = true;\n                            }\n                        });\n                    }\n                }\n            });\n            wf.id_counter = max_id + 1;\n            // Second pass, connections\n            $.each(data.steps, function(id, step) {\n                var node = wf.nodes[parseInt(id) + offset];\n                $.each(step.input_connections, function(k, v) {\n                    if (v) {\n                        if (!$.isArray(v)) {\n                            v = [v];\n                        }\n                        $.each(v, function(l, x) {\n                            var other_node = wf.nodes[parseInt(x.id) + offset];\n                            var c = new Connector();\n                            c.connect(\n                                other_node.output_terminals[x.output_name],\n                                node.input_terminals[k]\n                            );\n                            c.redraw();\n                        });\n                    }\n                });\n                if (using_workflow_outputs) {\n                    // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                    $.each(node.output_terminals, function(ot_id, ot) {\n                        if (\n                            node.post_job_actions[\n                                \"HideDatasetAction\" + ot.name\n                            ] === undefined\n                        ) {\n                            node.addWorkflowOutput(ot.name);\n                            var callout = $(node.element).find(\n                                \".callout.\" + ot.name\n                            );\n                            callout\n                                .find(\"img\")\n                                .attr(\n                                    \"src\",\n                                    Galaxy.root +\n                                        \"static/images/fugue/asterisk-small.png\"\n                                );\n                            wf.has_changes = true;\n                        }\n                    });\n                }\n            });\n        },\n        check_changes_in_active_form: function() {\n            // If active form has changed, save it\n            if (this.active_form_has_changes) {\n                this.has_changes = true;\n                // Submit form.\n                $(\"#right-content\")\n                    .find(\"form\")\n                    .submit();\n                this.active_form_has_changes = false;\n            }\n        },\n        reload_active_node: function() {\n            if (this.active_node) {\n                var node = this.active_node;\n                this.clear_active_node();\n                this.activate_node(node);\n            }\n        },\n        clear_active_node: function() {\n            if (this.active_node) {\n                this.active_node.make_inactive();\n                this.active_node = null;\n            }\n            this.app.showAttributes();\n        },\n        activate_node: function(node) {\n            if (this.active_node != node) {\n                this.check_changes_in_active_form();\n                this.clear_active_node();\n                this.app.showForm(node.config_form, node);\n                node.make_active();\n                this.active_node = node;\n            }\n        },\n        node_changed: function(node, force) {\n            this.has_changes = true;\n            if (this.active_node == node && force) {\n                // Force changes to be saved even on new connection (previously dumped)\n                this.check_changes_in_active_form();\n                this.app.showForm(node.config_form, node);\n            }\n            this.app.showWorkflowParameters();\n        },\n        layout: function() {\n            this.check_changes_in_active_form();\n            this.has_changes = true;\n            // Prepare predecessor / successor tracking\n            var n_pred = {};\n            var successors = {};\n            // First pass to initialize arrays even for nodes with no connections\n            $.each(this.nodes, function(id, node) {\n                if (n_pred[id] === undefined) {\n                    n_pred[id] = 0;\n                }\n                if (successors[id] === undefined) {\n                    successors[id] = [];\n                }\n            });\n            // Second pass to count predecessors and successors\n            $.each(this.nodes, function(id, node) {\n                $.each(node.input_terminals, function(j, t) {\n                    $.each(t.connectors, function(k, c) {\n                        // A connection exists from `other` to `node`\n                        var other = c.handle1.node;\n                        // node gains a predecessor\n                        n_pred[node.id] += 1;\n                        // other gains a successor\n                        successors[other.id].push(node.id);\n                    });\n                });\n            });\n            // Assemble order, tracking levels\n            var node_ids_by_level = [];\n            while (true) {\n                // Everything without a predecessor\n                var level_parents = [];\n                for (var pred_k in n_pred) {\n                    if (n_pred[pred_k] === 0) {\n                        level_parents.push(pred_k);\n                    }\n                }\n                if (level_parents.length === 0) {\n                    break;\n                }\n                node_ids_by_level.push(level_parents);\n                // Remove the parents from this level, and decrement the number\n                // of predecessors for each successor\n                for (var k in level_parents) {\n                    var v = level_parents[k];\n                    delete n_pred[v];\n                    for (var sk in successors[v]) {\n                        n_pred[successors[v][sk]] -= 1;\n                    }\n                }\n            }\n            if (n_pred.length) {\n                // ERROR: CYCLE! Currently we do nothing\n                return;\n            }\n            // Layout each level\n            var all_nodes = this.nodes;\n            var h_pad = 80;\n            var v_pad = 30;\n            var left = h_pad;\n            $.each(node_ids_by_level, function(i, ids) {\n                // We keep nodes in the same order in a level to give the user\n                // some control over ordering\n                ids.sort(function(a, b) {\n                    return (\n                        $(all_nodes[a].element).position().top -\n                        $(all_nodes[b].element).position().top\n                    );\n                });\n                // Position each node\n                var max_width = 0;\n                var top = v_pad;\n                $.each(ids, function(j, id) {\n                    var node = all_nodes[id];\n                    var element = $(node.element);\n                    $(element).css({ top: top, left: left });\n                    max_width = Math.max(max_width, $(element).width());\n                    top += $(element).height() + v_pad;\n                });\n                left += max_width + h_pad;\n            });\n            // Need to redraw all connectors\n            $.each(all_nodes, function(_, node) {\n                node.redraw();\n            });\n        },\n        bounds_for_all_nodes: function() {\n            var xmin = Infinity,\n                xmax = -Infinity,\n                ymin = Infinity,\n                ymax = -Infinity,\n                p;\n            $.each(this.nodes, function(id, node) {\n                var e = $(node.element);\n                p = e.position();\n                xmin = Math.min(xmin, p.left);\n                xmax = Math.max(xmax, p.left + e.width());\n                ymin = Math.min(ymin, p.top);\n                ymax = Math.max(ymax, p.top + e.width());\n            });\n            return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n        },\n        fit_canvas_to_nodes: function() {\n            // Math utils\n            function round_up(x, n) {\n                return Math.ceil(x / n) * n;\n            }\n            function fix_delta(x, n) {\n                if (x < n || x > 3 * n) {\n                    var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                    return -(x - new_pos);\n                }\n                return 0;\n            }\n            // Span of all elements\n            var bounds = this.bounds_for_all_nodes();\n            var position = this.canvas_container.position();\n            var parent = this.canvas_container.parent();\n            // Determine amount we need to expand on top/left\n            var xmin_delta = fix_delta(bounds.xmin, 100);\n            var ymin_delta = fix_delta(bounds.ymin, 100);\n            // May need to expand farther to fill viewport\n            xmin_delta = Math.max(xmin_delta, position.left);\n            ymin_delta = Math.max(ymin_delta, position.top);\n            var left = position.left - xmin_delta;\n            var top = position.top - ymin_delta;\n            // Same for width/height\n            var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n            var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n            width = Math.max(width, -left + parent.width());\n            height = Math.max(height, -top + parent.height());\n            // Grow the canvas container\n            this.canvas_container.css({\n                left: left,\n                top: top,\n                width: width,\n                height: height\n            });\n            // Move elements back if needed\n            this.canvas_container.children().each(function() {\n                var p = $(this).position();\n                $(this).css(\"left\", p.left + xmin_delta);\n                $(this).css(\"top\", p.top + ymin_delta);\n            });\n        }\n    });\n    return Workflow;\n});\n"]}