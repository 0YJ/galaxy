{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["Workflow","app","canvas_container","this","id_counter","nodes","name","has_changes","active_form_has_changes","workflowOutputLabels","$","extend","prototype","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","node","outputName","labelWorkflowOutput","nodeView","redrawWorkflowOutputs","create_node","type","title_text","content_id","prebuildNode","attemptUpdateOutputLabel","fit_canvas_to_nodes","add_node","id","element","attr","workflow","remove_node","activate_node","active_node","clear_active_node","remove_all","wf","k","v","destroy","rectify_workflow_outputs","using_workflow_outputs","has_existing_pjas","workflow_outputs","length","each","pja_id","pja","action_type","self","post_job_actions","node_changed","pjas_to_rem","push","i","pja_name","ot_id","ot","action_arguments","create_pja","to_simple","input_connections","input_terminals","t","c","output_name","handle1","cons","connectors","input","input_subworkflow_step_id","undefined","con_dict","act","node_data","tool_version","config_form","version","tool_state","errors","position","annotation","uuid","initialImport_","initialImport","from_simple","data","offset","max_id","step","workflow_output","init_field_data","top","left","Math","max","parseInt","other_node","x","connect","output_terminals","callout","Galaxy","addWorkflowOutput","find","check_changes_in_active_form","reload_active_node","showAttributes","submit","showForm","make_active","make_inactive","layout","n_pred","successors","force","showWorkflowParameters","other","node_ids_by_level","pred_k","j","level_parents","ids","sort","sk","all_nodes","max_width","redraw","a","b","bounds_for_all_nodes","ymax","Infinity","p","e","xmin","xmax","width","ymin","_","bounds","parent","ymin_delta","fix_delta","xmin_delta","round_up","height","ceil","n","children","css"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["import Connector from \"mvc/workflow/workflow-connector\";\nimport Toastr from \"libs/toastr\";\nfunction Workflow(app, canvas_container) {\n    this.app = app;\n    this.canvas_container = canvas_container;\n    this.id_counter = 0;\n    this.nodes = {};\n    this.name = null;\n    this.has_changes = false;\n    this.active_form_has_changes = false;\n    this.workflowOutputLabels = {};\n}\n$.extend(Workflow.prototype, {\n    canLabelOutputWith: function(label) {\n        if (label) {\n            return !(label in this.workflowOutputLabels);\n        } else {\n            // empty labels are non-exclusive, so allow this one.\n            return true;\n        }\n    },\n    registerOutputLabel: function(label) {\n        if (label) {\n            this.workflowOutputLabels[label] = true;\n        }\n    },\n    unregisterOutputLabel: function(label) {\n        if (label) {\n            delete this.workflowOutputLabels[label];\n        }\n    },\n    updateOutputLabel: function(fromLabel, toLabel) {\n        if (fromLabel) {\n            this.unregisterOutputLabel(fromLabel);\n        }\n        if (!this.canLabelOutputWith(toLabel)) {\n            Toastr.warning(\n                \"Workflow contains duplicate workflow output labels \" +\n                    toLabel +\n                    \". This must be fixed before it can be saved.\"\n            );\n        }\n        if (toLabel) {\n            this.registerOutputLabel(toLabel);\n        }\n    },\n    attemptUpdateOutputLabel: function(node, outputName, label) {\n        if (this.canLabelOutputWith(label)) {\n            node.labelWorkflowOutput(outputName, label);\n            node.nodeView.redrawWorkflowOutputs();\n            return true;\n        } else {\n            return false;\n        }\n    },\n    create_node: function(type, title_text, content_id) {\n        var node = this.app.prebuildNode(type, title_text, content_id);\n        this.add_node(node);\n        this.fit_canvas_to_nodes();\n        this.app.canvas_manager.draw_overview();\n        this.activate_node(node);\n        return node;\n    },\n    add_node: function(node) {\n        node.id = this.id_counter;\n        node.element.attr(\"id\", \"wf-node-step-\" + node.id);\n        this.id_counter++;\n        this.nodes[node.id] = node;\n        this.has_changes = true;\n        node.workflow = this;\n    },\n    remove_node: function(node) {\n        if (this.active_node == node) {\n            this.clear_active_node();\n        }\n        delete this.nodes[node.id];\n        this.has_changes = true;\n    },\n    remove_all: function() {\n        var wf = this;\n        $.each(this.nodes, function(k, v) {\n            v.destroy();\n            wf.remove_node(v);\n        });\n    },\n    rectify_workflow_outputs: function() {\n        // Find out if we're using workflow_outputs or not.\n        var using_workflow_outputs = false;\n        var has_existing_pjas = false;\n        $.each(this.nodes, function(k, node) {\n            if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                using_workflow_outputs = true;\n            }\n            $.each(node.post_job_actions, function(pja_id, pja) {\n                if (pja.action_type === \"HideDatasetAction\") {\n                    has_existing_pjas = true;\n                }\n            });\n        });\n        if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n            // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n            var self = this;\n            $.each(this.nodes, function(k, node) {\n                if (node.type === \"tool\") {\n                    var node_changed = false;\n                    if (node.post_job_actions === null) {\n                        node.post_job_actions = {};\n                        node_changed = true;\n                    }\n                    var pjas_to_rem = [];\n                    $.each(node.post_job_actions, function(pja_id, pja) {\n                        if (pja.action_type == \"HideDatasetAction\") {\n                            pjas_to_rem.push(pja_id);\n                        }\n                    });\n                    if (pjas_to_rem.length > 0) {\n                        $.each(pjas_to_rem, function(i, pja_name) {\n                            node_changed = true;\n                            delete node.post_job_actions[pja_name];\n                        });\n                    }\n                    if (using_workflow_outputs) {\n                        $.each(node.output_terminals, function(ot_id, ot) {\n                            var create_pja = !node.isWorkflowOutput(ot.name);\n                            if (create_pja === true) {\n                                node_changed = true;\n                                var pja = {\n                                    action_type: \"HideDatasetAction\",\n                                    output_name: ot.name,\n                                    action_arguments: {}\n                                };\n                                node.post_job_actions[\n                                    \"HideDatasetAction\" + ot.name\n                                ] = null;\n                                node.post_job_actions[\n                                    \"HideDatasetAction\" + ot.name\n                                ] = pja;\n                            }\n                        });\n                    }\n                    // lastly, if this is the active node, and we made changes, reload the display at right.\n                    if (self.active_node == node && node_changed === true) {\n                        self.reload_active_node();\n                    }\n                }\n            });\n        }\n    },\n    to_simple: function() {\n        var nodes = {};\n        $.each(this.nodes, function(i, node) {\n            var input_connections = {};\n            $.each(node.input_terminals, function(k, t) {\n                input_connections[t.name] = null;\n                // There should only be 0 or 1 connectors, so this is\n                // really a sneaky if statement\n                var cons = [];\n                $.each(t.connectors, function(i, c) {\n                    if (c.handle1) {\n                        var con_dict = {\n                            id: c.handle1.node.id,\n                            output_name: c.handle1.name\n                        };\n                        var input_subworkflow_step_id =\n                            t.attributes.input.input_subworkflow_step_id;\n                        if (input_subworkflow_step_id !== undefined) {\n                            con_dict[\n                                \"input_subworkflow_step_id\"\n                            ] = input_subworkflow_step_id;\n                        }\n                        cons[i] = con_dict;\n                        input_connections[t.name] = cons;\n                    }\n                });\n            });\n            var post_job_actions = {};\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, function(i, act) {\n                    var pja = {\n                        action_type: act.action_type,\n                        output_name: act.output_name,\n                        action_arguments: act.action_arguments\n                    };\n                    post_job_actions[act.action_type + act.output_name] = null;\n                    post_job_actions[act.action_type + act.output_name] = pja;\n                });\n            }\n            if (!node.workflow_outputs) {\n                node.workflow_outputs = [];\n                // Just in case.\n            }\n            var node_data = {\n                id: node.id,\n                type: node.type,\n                content_id: node.content_id,\n                tool_version: node.config_form.version,\n                tool_state: node.tool_state,\n                errors: node.errors,\n                input_connections: input_connections,\n                position: $(node.element).position(),\n                annotation: node.annotation,\n                post_job_actions: node.post_job_actions,\n                uuid: node.uuid,\n                label: node.label,\n                workflow_outputs: node.workflow_outputs\n            };\n            nodes[node.id] = node_data;\n        });\n        return { steps: nodes };\n    },\n    from_simple: function(data, initialImport_) {\n        var initialImport =\n            initialImport_ === undefined ? true : initialImport_;\n        var wf = this;\n        var offset = 0;\n        if (initialImport) {\n            wf.name = data.name;\n        } else {\n            offset = Object.keys(wf.nodes).length;\n        }\n        var max_id = offset;\n        // First pass, nodes\n        var using_workflow_outputs = false;\n        $.each(data.steps, function(id, step) {\n            var node = wf.app.prebuildNode(\n                step.type,\n                step.name,\n                step.content_id\n            );\n            // If workflow being copied into another, wipe UUID and let\n            // Galaxy assign new ones.\n            if (!initialImport) {\n                step.uuid = null;\n                $.each(step.workflow_outputs, function(name, workflow_output) {\n                    workflow_output.uuid = null;\n                });\n            }\n            node.init_field_data(step);\n            if (step.position) {\n                node.element.css({\n                    top: step.position.top,\n                    left: step.position.left\n                });\n            }\n            node.id = parseInt(step.id) + offset;\n            wf.nodes[node.id] = node;\n            max_id = Math.max(max_id, parseInt(id) + offset);\n            // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n            // Check for either, and then add outputs in the next pass.\n            if (!using_workflow_outputs) {\n                if (node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                } else {\n                    $.each(node.post_job_actions || [], function(pja_id, pja) {\n                        if (pja.action_type === \"HideDatasetAction\") {\n                            using_workflow_outputs = true;\n                        }\n                    });\n                }\n            }\n        });\n        wf.id_counter = max_id + 1;\n        // Second pass, connections\n        $.each(data.steps, function(id, step) {\n            var node = wf.nodes[parseInt(id) + offset];\n            $.each(step.input_connections, function(k, v) {\n                if (v) {\n                    if (!$.isArray(v)) {\n                        v = [v];\n                    }\n                    $.each(v, function(l, x) {\n                        var other_node = wf.nodes[parseInt(x.id) + offset];\n                        var c = new Connector();\n                        c.connect(\n                            other_node.output_terminals[x.output_name],\n                            node.input_terminals[k]\n                        );\n                        c.redraw();\n                    });\n                }\n            });\n            if (using_workflow_outputs) {\n                // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                $.each(node.output_terminals, function(ot_id, ot) {\n                    if (\n                        node.post_job_actions[\"HideDatasetAction\" + ot.name] ===\n                        undefined\n                    ) {\n                        node.addWorkflowOutput(ot.name);\n                        var callout = $(node.element).find(\n                            \".callout.\" + ot.name\n                        );\n                        callout\n                            .find(\"img\")\n                            .attr(\n                                \"src\",\n                                Galaxy.root +\n                                    \"static/images/fugue/asterisk-small.png\"\n                            );\n                        wf.has_changes = true;\n                    }\n                });\n            }\n        });\n    },\n    check_changes_in_active_form: function() {\n        // If active form has changed, save it\n        if (this.active_form_has_changes) {\n            this.has_changes = true;\n            // Submit form.\n            $(\"#right-content\")\n                .find(\"form\")\n                .submit();\n            this.active_form_has_changes = false;\n        }\n    },\n    reload_active_node: function() {\n        if (this.active_node) {\n            var node = this.active_node;\n            this.clear_active_node();\n            this.activate_node(node);\n        }\n    },\n    clear_active_node: function() {\n        if (this.active_node) {\n            this.active_node.make_inactive();\n            this.active_node = null;\n        }\n        this.app.showAttributes();\n    },\n    activate_node: function(node) {\n        if (this.active_node != node) {\n            this.check_changes_in_active_form();\n            this.clear_active_node();\n            this.app.showForm(node.config_form, node);\n            node.make_active();\n            this.active_node = node;\n        }\n    },\n    node_changed: function(node, force) {\n        this.has_changes = true;\n        if (this.active_node == node && force) {\n            // Force changes to be saved even on new connection (previously dumped)\n            this.check_changes_in_active_form();\n            this.app.showForm(node.config_form, node);\n        }\n        this.app.showWorkflowParameters();\n    },\n    layout: function() {\n        this.check_changes_in_active_form();\n        this.has_changes = true;\n        // Prepare predecessor / successor tracking\n        var n_pred = {};\n        var successors = {};\n        // First pass to initialize arrays even for nodes with no connections\n        $.each(this.nodes, function(id, node) {\n            if (n_pred[id] === undefined) {\n                n_pred[id] = 0;\n            }\n            if (successors[id] === undefined) {\n                successors[id] = [];\n            }\n        });\n        // Second pass to count predecessors and successors\n        $.each(this.nodes, function(id, node) {\n            $.each(node.input_terminals, function(j, t) {\n                $.each(t.connectors, function(k, c) {\n                    // A connection exists from `other` to `node`\n                    var other = c.handle1.node;\n                    // node gains a predecessor\n                    n_pred[node.id] += 1;\n                    // other gains a successor\n                    successors[other.id].push(node.id);\n                });\n            });\n        });\n        // Assemble order, tracking levels\n        var node_ids_by_level = [];\n        while (true) {\n            // Everything without a predecessor\n            var level_parents = [];\n            for (var pred_k in n_pred) {\n                if (n_pred[pred_k] === 0) {\n                    level_parents.push(pred_k);\n                }\n            }\n            if (level_parents.length === 0) {\n                break;\n            }\n            node_ids_by_level.push(level_parents);\n            // Remove the parents from this level, and decrement the number\n            // of predecessors for each successor\n            for (var k in level_parents) {\n                var v = level_parents[k];\n                delete n_pred[v];\n                for (var sk in successors[v]) {\n                    n_pred[successors[v][sk]] -= 1;\n                }\n            }\n        }\n        if (n_pred.length) {\n            // ERROR: CYCLE! Currently we do nothing\n            return;\n        }\n        // Layout each level\n        var all_nodes = this.nodes;\n        var h_pad = 80;\n        var v_pad = 30;\n        var left = h_pad;\n        $.each(node_ids_by_level, function(i, ids) {\n            // We keep nodes in the same order in a level to give the user\n            // some control over ordering\n            ids.sort(function(a, b) {\n                return (\n                    $(all_nodes[a].element).position().top -\n                    $(all_nodes[b].element).position().top\n                );\n            });\n            // Position each node\n            var max_width = 0;\n            var top = v_pad;\n            $.each(ids, function(j, id) {\n                var node = all_nodes[id];\n                var element = $(node.element);\n                $(element).css({ top: top, left: left });\n                max_width = Math.max(max_width, $(element).width());\n                top += $(element).height() + v_pad;\n            });\n            left += max_width + h_pad;\n        });\n        // Need to redraw all connectors\n        $.each(all_nodes, function(_, node) {\n            node.redraw();\n        });\n    },\n    bounds_for_all_nodes: function() {\n        var xmin = Infinity,\n            xmax = -Infinity,\n            ymin = Infinity,\n            ymax = -Infinity,\n            p;\n        $.each(this.nodes, function(id, node) {\n            var e = $(node.element);\n            p = e.position();\n            xmin = Math.min(xmin, p.left);\n            xmax = Math.max(xmax, p.left + e.width());\n            ymin = Math.min(ymin, p.top);\n            ymax = Math.max(ymax, p.top + e.width());\n        });\n        return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n    },\n    fit_canvas_to_nodes: function() {\n        // Math utils\n        function round_up(x, n) {\n            return Math.ceil(x / n) * n;\n        }\n        function fix_delta(x, n) {\n            if (x < n || x > 3 * n) {\n                var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                return -(x - new_pos);\n            }\n            return 0;\n        }\n        // Span of all elements\n        var bounds = this.bounds_for_all_nodes();\n        var position = this.canvas_container.position();\n        var parent = this.canvas_container.parent();\n        // Determine amount we need to expand on top/left\n        var xmin_delta = fix_delta(bounds.xmin, 100);\n        var ymin_delta = fix_delta(bounds.ymin, 100);\n        // May need to expand farther to fill viewport\n        xmin_delta = Math.max(xmin_delta, position.left);\n        ymin_delta = Math.max(ymin_delta, position.top);\n        var left = position.left - xmin_delta;\n        var top = position.top - ymin_delta;\n        // Same for width/height\n        var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n        var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n        width = Math.max(width, -left + parent.width());\n        height = Math.max(height, -top + parent.height());\n        // Grow the canvas container\n        this.canvas_container.css({\n            left: left,\n            top: top,\n            width: width,\n            height: height\n        });\n        // Move elements back if needed\n        this.canvas_container.children().each(function() {\n            var p = $(this).position();\n            $(this).css(\"left\", p.left + xmin_delta);\n            $(this).css(\"top\", p.top + ymin_delta);\n        });\n    }\n});\nexport default Workflow;\n"]}