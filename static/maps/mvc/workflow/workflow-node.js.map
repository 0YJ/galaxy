{"version":3,"sources":["mvc/workflow/workflow-node.js"],"names":["define","NodeView","markChanged","Backbone","Model","extend","initialize","app","attr","Node","element","this","input_terminals","output_terminals","getWorkflowOutput","workflow_outputs","outputName","_","findWhere","output_name","isWorkflowOutput","undefined","removeWorkflowOutput","splice","addWorkflowOutput","label","output","labelWorkflowOutput","changed","oldLabel","workflowOutput","workflow","updateOutputLabel","connectedOutputTerminals","_connectedTerminals","connectedTerminals","t","terminals","push","hasConnectedOutputTerminals","outputTerminals","length","connectedMappedInputTerminals","_connectedMappedTerminals","hasConnectedMappedInputTerminals","inputName","inputTerminals","inputTerminal","isMappedOver","mapped_outputs","isCollection","mapOver","mappedInputTerminals","_mappedTerminals","mappedTerminals","hasMappedOverInputTerminals","found","redraw","$","each","destroy","k","remove_node","remove","addClass","get","p","removeChild","appendChild","parentNode","init_field_data","data","type","removeClass","name","config_form","tool_state","errors","tooltip","post_job_actions","annotation","node","nodeView","el","uuid","i","input","data_outputs","data_inputs","render","update_field_data","node_changed","pja_in","renderToolErrors","old_body","new_body","newInputsDiv","addDataInput","terminalView","newTerminalViews","unusedView","terminalViews","difference","updateDataOutput","replaceWith","error","text","b","find","tmp","html"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-node.js","sourcesContent":["define(['mvc/workflow/workflow-view-node'], function( NodeView ) {\n    var Node = Backbone.Model.extend({\n        initialize: function( app, attr ) {\n            this.app = app;\n            this.element = attr.element;\n            this.input_terminals = {};\n            this.output_terminals = {};\n            this.errors = {};\n            this.workflow_outputs = [];\n        },\n        getWorkflowOutput: function(outputName) {\n            return _.findWhere(this.workflow_outputs, {\"output_name\": outputName});\n        },\n        isWorkflowOutput: function(outputName) {\n            return this.getWorkflowOutput(outputName) != undefined;\n        },\n        removeWorkflowOutput: function(outputName) {\n            while(this.isWorkflowOutput(outputName)) {\n                this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n            }\n        },\n        addWorkflowOutput: function(outputName, label) {\n            if(!this.isWorkflowOutput(outputName)){\n                var output = {\"output_name\": outputName};\n                if( label ) {\n                    output[\"label\"] = label;\n                }\n                this.workflow_outputs.push(output);\n                return true\n            }\n            return false;\n        },\n        labelWorkflowOutput: function(outputName, label) {\n            var changed = false;\n            var oldLabel = null;\n            if( this.isWorkflowOutput(outputName) ) {\n                var workflowOutput = this.getWorkflowOutput(outputName);\n                oldLabel = workflowOutput[\"label\"];\n                workflowOutput[\"label\"] = label;\n                changed = oldLabel != label;\n            } else {\n                changed = this.addWorkflowOutput(outputName, label);\n            }\n            if( changed ) {\n                this.app.workflow.updateOutputLabel(oldLabel, label);\n                this.markChanged();\n                this.nodeView.redrawWorkflowOutputs();\n            }\n            return changed;\n        },\n        connectedOutputTerminals: function() {\n            return this._connectedTerminals( this.output_terminals );\n        },\n        _connectedTerminals: function( terminals ) {\n            var connectedTerminals = [];\n            $.each( terminals, function( _, t ) {\n                if( t.connectors.length > 0 ) {\n                    connectedTerminals.push( t );\n                }\n            } );\n            return connectedTerminals;        \n        },\n        hasConnectedOutputTerminals: function() {\n            // return this.connectedOutputTerminals().length > 0; <- optimized this\n            var outputTerminals = this.output_terminals;\n            for( var outputName in outputTerminals ) {\n                if( outputTerminals[ outputName ].connectors.length > 0 ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        connectedMappedInputTerminals: function() {\n            return this._connectedMappedTerminals( this.input_terminals );\n        },\n        hasConnectedMappedInputTerminals: function() {\n            // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n            var inputTerminals = this.input_terminals;\n            for( var inputName in inputTerminals ) {\n                var inputTerminal = inputTerminals[ inputName ];\n                if( inputTerminal.connectors.length > 0 && inputTerminal.isMappedOver() ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        _connectedMappedTerminals: function( terminals ) {\n            var mapped_outputs = [];\n            $.each( terminals, function( _, t ) {\n                var mapOver = t.mapOver();\n                if( mapOver.isCollection ) {\n                    if( t.connectors.length > 0 ) {\n                        mapped_outputs.push( t );\n                    }\n                }\n            });\n            return mapped_outputs;\n        },\n        mappedInputTerminals: function() {\n            return this._mappedTerminals( this.input_terminals );\n        },\n        _mappedTerminals: function( terminals ) {\n            var mappedTerminals = [];\n            $.each( terminals, function( _, t ) {\n                var mapOver = t.mapOver();\n                if( mapOver.isCollection ) {\n                    mappedTerminals.push( t );\n                }\n            } );\n            return mappedTerminals;\n        },\n        hasMappedOverInputTerminals: function() {\n            var found = false;\n            _.each( this.input_terminals, function( t ) {\n                var mapOver = t.mapOver();\n                if( mapOver.isCollection ) {\n                    found = true;\n                }\n            } );\n            return found;\n        },\n        redraw : function () {\n            $.each( this.input_terminals, function( _, t ) {\n                t.redraw();\n            });\n            $.each( this.output_terminals, function( _, t ) {\n                t.redraw();\n            });\n        },\n        destroy : function () {\n            $.each( this.input_terminals, function( k, t ) {\n                t.destroy();\n            });\n            $.each( this.output_terminals, function( k, t ) {\n                t.destroy();\n            });\n            this.app.workflow.remove_node( this );\n            $(this.element).remove();\n        },\n        make_active : function () {\n            $(this.element).addClass( \"toolForm-active\" );\n        },\n        make_inactive : function () {\n            // Keep inactive nodes stacked from most to least recently active\n            // by moving element to the end of parent's node list\n            var element = this.element.get(0);\n            (function(p) { p.removeChild( element ); p.appendChild( element ); })(element.parentNode);\n            // Remove active class\n            $(element).removeClass( \"toolForm-active\" );\n        },\n        init_field_data : function ( data ) {\n            if ( data.type ) {\n                this.type = data.type;\n            }\n            this.name = data.name;\n            this.config_form = data.config_form;\n            this.tool_state = data.tool_state;\n            this.errors = data.errors;\n            this.tooltip = data.tooltip ? data.tooltip : \"\";\n            this.annotation = data.annotation;\n            this.post_job_actions = data.post_job_actions ? data.post_job_actions : {};\n            this.label = data.label;\n            this.uuid = data.uuid;\n            this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n            var node = this;\n            var nodeView = new NodeView({\n                el: this.element[ 0 ],\n                node: node,\n            });\n            node.nodeView = nodeView;\n            $.each( data.data_inputs, function( i, input ) {\n                nodeView.addDataInput( input );\n            });\n            if ( ( data.data_inputs.length > 0 ) && ( data.data_outputs.length > 0 ) ) {\n                nodeView.addRule();\n            }\n            $.each( data.data_outputs, function( i, output ) {\n                nodeView.addDataOutput( output );\n            } );\n            nodeView.render();\n            this.app.workflow.node_changed( this, true);\n        },\n        update_field_data : function( data ) {\n            var node = this;\n            var nodeView = node.nodeView;\n            this.tool_state = data.tool_state;\n            this.config_form = data.config_form;\n            this.errors = data.errors;\n            this.annotation = data['annotation'];\n            this.label = data.label;\n            if( \"post_job_actions\" in data ) {\n                // Won't be present in response for data inputs\n                var pja_in = data.post_job_actions;\n                this.post_job_actions = pja_in ? pja_in : {};\n            }\n            node.nodeView.renderToolErrors();\n            // Update input rows\n            var old_body = nodeView.$( \"div.inputs\" );\n            var new_body = nodeView.newInputsDiv();\n            var newTerminalViews = {};\n            _.each( data.data_inputs, function( input ) {\n                var terminalView = node.nodeView.addDataInput( input, new_body );\n                newTerminalViews[ input.name ] = terminalView;\n            });\n            // Cleanup any leftover terminals\n            _.each( _.difference( _.values( nodeView.terminalViews ), _.values( newTerminalViews ) ), function( unusedView ) {\n                unusedView.el.terminal.destroy();\n            } );\n            nodeView.terminalViews = newTerminalViews;\n            node.nodeView.render();\n            // In general workflow editor assumes tool outputs don't change in # or\n            // type (not really valid right?) but adding special logic here for\n            // data collection input parameters that can have their collection\n            // change.\n            if( data.data_outputs.length == 1 && \"collection_type\" in data.data_outputs[ 0 ] ) {\n                nodeView.updateDataOutput( data.data_outputs[ 0 ] );\n            }\n            old_body.replaceWith( new_body );\n            if( \"workflow_outputs\" in data ) {\n                // Won't be present in response for data inputs\n                this.workflow_outputs = workflow_outputs ? workflow_outputs : [];\n            }\n            // If active, reactivate with new config_form\n            this.markChanged();\n            this.redraw();\n        },\n        error : function ( text ) {\n            var b = $(this.element).find( \".toolFormBody\" );\n            b.find( \"div\" ).remove();\n            var tmp = \"<div style='color: red; text-style: italic;'>\" + text + \"</div>\";\n            this.config_form = tmp;\n            b.html( tmp );\n            this.app.workflow.node_changed( this );\n        },\n        markChanged: function() {\n            this.app.workflow.node_changed( this );\n        }\n    });\n    return Node;\n});"]}