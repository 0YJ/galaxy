{"version":3,"sources":["mvc/workflow/workflow-node.js"],"names":["define","NodeView","Backbone","Model","extend","initialize","app","attr","this","Node","output_terminals","errors","workflow_outputs","getWorkflowOutput","outputName","_","output_name","undefined","isWorkflowOutput","splice","removeWorkflowOutput","addWorkflowOutput","label","output","push","labelWorkflowOutput","changed","oldLabel","workflowOutput","workflow","updateOutputLabel","markChanged","nodeView","connectedOutputTerminals","_connectedTerminals","terminals","connectedTerminals","$","each","t","connectors","length","hasConnectedOutputTerminals","outputTerminals","connectedMappedInputTerminals","_connectedMappedTerminals","input_terminals","hasConnectedMappedInputTerminals","inputTerminals","inputName","inputTerminal","isMappedOver","mapped_outputs","isCollection","_mappedTerminals","mappedTerminals","mapOver","hasMappedOverInputTerminals","found","redraw","destroy","k","remove_node","make_active","element","make_inactive","addClass","p","appendChild","removeChild","removeClass","parentNode","data","init_field_data","name","config_form","type","tool_state","tool_version","tooltip","version","annotation","post_job_actions","uuid","node","el","data_inputs","data_outputs","addDataOutput","input","addDataInput","node_changed","addRule","i","render","unused_outputs","update_field_data","outputViews","output_view","cur_name","data_names","cur_name_in_data_outputs","data_name","unused_output","terminalElement","terminal","wf_output","x","datatypes","renderToolErrors","old_body","new_body","terminalView","newTerminalViews","difference","unusedView","pja_in","updateDataOutput","terminalViews","values","find","remove","b","html","replaceWith","error","text","tmp"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-node.js","sourcesContent":["define([\"mvc/workflow/workflow-view-node\"], function(NodeView) {\n    var Node = Backbone.Model.extend({\n        initialize: function(app, attr) {\n            this.app = app;\n            this.element = attr.element;\n            this.input_terminals = {};\n            this.output_terminals = {};\n            this.errors = {};\n            this.workflow_outputs = [];\n        },\n        getWorkflowOutput: function(outputName) {\n            return _.findWhere(this.workflow_outputs, {\n                output_name: outputName\n            });\n        },\n        isWorkflowOutput: function(outputName) {\n            return this.getWorkflowOutput(outputName) != undefined;\n        },\n        removeWorkflowOutput: function(outputName) {\n            while (this.isWorkflowOutput(outputName)) {\n                this.workflow_outputs.splice(\n                    this.getWorkflowOutput(outputName),\n                    1\n                );\n            }\n        },\n        addWorkflowOutput: function(outputName, label) {\n            if (!this.isWorkflowOutput(outputName)) {\n                var output = { output_name: outputName };\n                if (label) {\n                    output[\"label\"] = label;\n                }\n                this.workflow_outputs.push(output);\n                return true;\n            }\n            return false;\n        },\n        labelWorkflowOutput: function(outputName, label) {\n            var changed = false;\n            var oldLabel = null;\n            if (this.isWorkflowOutput(outputName)) {\n                var workflowOutput = this.getWorkflowOutput(outputName);\n                oldLabel = workflowOutput[\"label\"];\n                workflowOutput[\"label\"] = label;\n                changed = oldLabel != label;\n            } else {\n                changed = this.addWorkflowOutput(outputName, label);\n            }\n            if (changed) {\n                this.app.workflow.updateOutputLabel(oldLabel, label);\n                this.markChanged();\n                this.nodeView.redrawWorkflowOutputs();\n            }\n            return changed;\n        },\n        connectedOutputTerminals: function() {\n            return this._connectedTerminals(this.output_terminals);\n        },\n        _connectedTerminals: function(terminals) {\n            var connectedTerminals = [];\n            $.each(terminals, function(_, t) {\n                if (t.connectors.length > 0) {\n                    connectedTerminals.push(t);\n                }\n            });\n            return connectedTerminals;\n        },\n        hasConnectedOutputTerminals: function() {\n            // return this.connectedOutputTerminals().length > 0; <- optimized this\n            var outputTerminals = this.output_terminals;\n            for (var outputName in outputTerminals) {\n                if (outputTerminals[outputName].connectors.length > 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        connectedMappedInputTerminals: function() {\n            return this._connectedMappedTerminals(this.input_terminals);\n        },\n        hasConnectedMappedInputTerminals: function() {\n            // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n            var inputTerminals = this.input_terminals;\n            for (var inputName in inputTerminals) {\n                var inputTerminal = inputTerminals[inputName];\n                if (\n                    inputTerminal.connectors.length > 0 &&\n                    inputTerminal.isMappedOver()\n                ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        _connectedMappedTerminals: function(terminals) {\n            var mapped_outputs = [];\n            $.each(terminals, function(_, t) {\n                var mapOver = t.mapOver();\n                if (mapOver.isCollection) {\n                    if (t.connectors.length > 0) {\n                        mapped_outputs.push(t);\n                    }\n                }\n            });\n            return mapped_outputs;\n        },\n        mappedInputTerminals: function() {\n            return this._mappedTerminals(this.input_terminals);\n        },\n        _mappedTerminals: function(terminals) {\n            var mappedTerminals = [];\n            $.each(terminals, function(_, t) {\n                var mapOver = t.mapOver();\n                if (mapOver.isCollection) {\n                    mappedTerminals.push(t);\n                }\n            });\n            return mappedTerminals;\n        },\n        hasMappedOverInputTerminals: function() {\n            var found = false;\n            _.each(this.input_terminals, function(t) {\n                var mapOver = t.mapOver();\n                if (mapOver.isCollection) {\n                    found = true;\n                }\n            });\n            return found;\n        },\n        redraw: function() {\n            $.each(this.input_terminals, function(_, t) {\n                t.redraw();\n            });\n            $.each(this.output_terminals, function(_, t) {\n                t.redraw();\n            });\n        },\n        destroy: function() {\n            $.each(this.input_terminals, function(k, t) {\n                t.destroy();\n            });\n            $.each(this.output_terminals, function(k, t) {\n                t.destroy();\n            });\n            this.app.workflow.remove_node(this);\n            $(this.element).remove();\n        },\n        make_active: function() {\n            $(this.element).addClass(\"toolForm-active\");\n        },\n        make_inactive: function() {\n            // Keep inactive nodes stacked from most to least recently active\n            // by moving element to the end of parent's node list\n            var element = this.element.get(0);\n            (function(p) {\n                p.removeChild(element);\n                p.appendChild(element);\n            })(element.parentNode);\n            // Remove active class\n            $(element).removeClass(\"toolForm-active\");\n        },\n        init_field_data: function(data) {\n            if (data.type) {\n                this.type = data.type;\n            }\n            this.name = data.name;\n            this.config_form = data.config_form;\n            this.tool_version = this.config_form && this.config_form.version;\n            this.tool_state = data.tool_state;\n            this.errors = data.errors;\n            this.tooltip = data.tooltip ? data.tooltip : \"\";\n            this.annotation = data.annotation;\n            this.post_job_actions = data.post_job_actions\n                ? data.post_job_actions\n                : {};\n            this.label = data.label;\n            this.uuid = data.uuid;\n            this.workflow_outputs = data.workflow_outputs\n                ? data.workflow_outputs\n                : [];\n            var node = this;\n            var nodeView = new NodeView({\n                el: this.element[0],\n                node: node\n            });\n            node.nodeView = nodeView;\n            $.each(data.data_inputs, function(i, input) {\n                nodeView.addDataInput(input);\n            });\n            if (data.data_inputs.length > 0 && data.data_outputs.length > 0) {\n                nodeView.addRule();\n            }\n            $.each(data.data_outputs, function(i, output) {\n                nodeView.addDataOutput(output);\n            });\n            nodeView.render();\n            this.app.workflow.node_changed(this, true);\n        },\n        update_field_data: function(data) {\n            var node = this;\n            var nodeView = node.nodeView;\n            // remove unused output views and remove pre-existing output views from data.data_outputs,\n            // so that these are not added twice.\n            var unused_outputs = [];\n            // nodeView.outputViews contains pre-existing outputs,\n            // while data.data_output contains what should be displayed.\n            // Now we gather the unused outputs\n            $.each(nodeView.outputViews, function(i, output_view) {\n                var cur_name = output_view.output.name;\n                var data_names = data.data_outputs;\n                var cur_name_in_data_outputs = false;\n                _.each(data_names, function(data_name) {\n                    if (data_name.name == cur_name) {\n                        cur_name_in_data_outputs = true;\n                    }\n                });\n                if (cur_name_in_data_outputs === false) {\n                    unused_outputs.push(cur_name);\n                }\n            });\n\n            // Remove the unused outputs\n            _.each(unused_outputs, function(unused_output) {\n                _.each(\n                    nodeView.outputViews[unused_output].terminalElement.terminal\n                        .connectors,\n                    function(x) {\n                        if (x) {\n                            x.destroy(); // Removes the noodle connectors\n                        }\n                    }\n                );\n                nodeView.outputViews[unused_output].remove(); // removes the rendered output\n                delete nodeView.outputViews[unused_output]; // removes the reference to the output\n                delete node.output_terminals[unused_output]; // removes the output terminal\n            });\n            $.each(node.workflow_outputs, function(i, wf_output) {\n                if (\n                    wf_output &&\n                    !node.output_terminals[wf_output.output_name]\n                ) {\n                    node.workflow_outputs.splice(i, 1); // removes output from list of workflow outputs\n                }\n            });\n            $.each(data.data_outputs, function(i, output) {\n                if (!nodeView.outputViews[output.name]) {\n                    nodeView.addDataOutput(output); // add data output if it does not yet exist\n                } else {\n                    // the output already exists, but the output formats may have changed.\n                    // Therefore we update the datatypes and destroy invalid connections.\n                    node.output_terminals[output.name].datatypes =\n                        output.extensions;\n                    node.output_terminals[\n                        output.name\n                    ].destroyInvalidConnections();\n                }\n            });\n            this.tool_state = data.tool_state;\n            this.config_form = data.config_form;\n            this.tool_version = this.config_form && this.config_form.version;\n            this.errors = data.errors;\n            this.annotation = data[\"annotation\"];\n            this.label = data.label;\n            if (\"post_job_actions\" in data) {\n                // Won't be present in response for data inputs\n                var pja_in = data.post_job_actions;\n                this.post_job_actions = pja_in ? pja_in : {};\n            }\n            node.nodeView.renderToolErrors();\n            // Update input rows\n            var old_body = nodeView.$(\"div.inputs\");\n            var new_body = nodeView.newInputsDiv();\n            var newTerminalViews = {};\n            _.each(data.data_inputs, function(input) {\n                var terminalView = node.nodeView.addDataInput(input, new_body);\n                newTerminalViews[input.name] = terminalView;\n            });\n            // Cleanup any leftover terminals\n            _.each(\n                _.difference(\n                    _.values(nodeView.terminalViews),\n                    _.values(newTerminalViews)\n                ),\n                function(unusedView) {\n                    unusedView.el.terminal.destroy();\n                }\n            );\n            nodeView.terminalViews = newTerminalViews;\n            node.nodeView.render();\n            // In general workflow editor assumes tool outputs don't change in # or\n            // type (not really valid right?) but adding special logic here for\n            // data collection input parameters that can have their collection\n            // change.\n            if (\n                data.data_outputs.length == 1 &&\n                \"collection_type\" in data.data_outputs[0]\n            ) {\n                nodeView.updateDataOutput(data.data_outputs[0]);\n            }\n            old_body.replaceWith(new_body);\n            if (\"workflow_outputs\" in data) {\n                // Won't be present in response for data inputs\n                this.workflow_outputs = workflow_outputs\n                    ? workflow_outputs\n                    : [];\n            }\n            // If active, reactivate with new config_form\n            this.markChanged();\n            this.redraw();\n        },\n        error: function(text) {\n            var b = $(this.element).find(\".toolFormBody\");\n            b.find(\"div\").remove();\n            var tmp =\n                \"<div style='color: red; text-style: italic;'>\" +\n                text +\n                \"</div>\";\n            this.config_form = tmp;\n            b.html(tmp);\n            this.app.workflow.node_changed(this);\n        },\n        markChanged: function() {\n            this.app.workflow.node_changed(this);\n        }\n    });\n    return Node;\n});\n"]}