{"version":3,"sources":["mvc/workflow/workflow-node.js"],"names":["define","NodeView","markChanged","Backbone","Model","extend","initialize","app","attr","Node","element","this","input_terminals","output_terminals","getWorkflowOutput","workflow_outputs","outputName","_","findWhere","output_name","isWorkflowOutput","undefined","removeWorkflowOutput","splice","addWorkflowOutput","label","output","labelWorkflowOutput","changed","oldLabel","workflowOutput","workflow","updateOutputLabel","connectedOutputTerminals","_connectedTerminals","connectedTerminals","t","terminals","push","hasConnectedOutputTerminals","outputTerminals","length","connectedMappedInputTerminals","_connectedMappedTerminals","hasConnectedMappedInputTerminals","inputName","inputTerminals","inputTerminal","isMappedOver","mapped_outputs","isCollection","mapOver","mappedInputTerminals","_mappedTerminals","mappedTerminals","hasMappedOverInputTerminals","found","redraw","$","each","destroy","k","remove_node","remove","addClass","get","p","removeChild","appendChild","parentNode","init_field_data","data","type","removeClass","name","config_form","tool_version","version","tool_state","tooltip","annotation","post_job_actions","errors","node","nodeView","el","uuid","i","input","data_outputs","data_inputs","render","update_field_data","node_changed","unused_outputs","output_view","cur_name","data_names","cur_name_in_data_outputs","outputViews","data_name","unused_output","terminalElement","terminal","connectors","x","wf_output","datatypes","extensions","destroyInvalidConnections","addDataOutput","pja_in","renderToolErrors","old_body","new_body","newInputsDiv","addDataInput","terminalView","newTerminalViews","unusedView","terminalViews","difference","updateDataOutput","replaceWith","error","text","b","find","tmp","html"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-node.js","sourcesContent":["define(['mvc/workflow/workflow-view-node'], function( NodeView ) {\n    var Node = Backbone.Model.extend({\n        initialize: function( app, attr ) {\n            this.app = app;\n            this.element = attr.element;\n            this.input_terminals = {};\n            this.output_terminals = {};\n            this.errors = {};\n            this.workflow_outputs = [];\n        },\n        getWorkflowOutput: function(outputName) {\n            return _.findWhere(this.workflow_outputs, {\"output_name\": outputName});\n        },\n        isWorkflowOutput: function(outputName) {\n            return this.getWorkflowOutput(outputName) != undefined;\n        },\n        removeWorkflowOutput: function(outputName) {\n            while(this.isWorkflowOutput(outputName)) {\n                this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n            }\n        },\n        addWorkflowOutput: function(outputName, label) {\n            if(!this.isWorkflowOutput(outputName)){\n                var output = {\"output_name\": outputName};\n                if( label ) {\n                    output[\"label\"] = label;\n                }\n                this.workflow_outputs.push(output);\n                return true\n            }\n            return false;\n        },\n        labelWorkflowOutput: function(outputName, label) {\n            var changed = false;\n            var oldLabel = null;\n            if( this.isWorkflowOutput(outputName) ) {\n                var workflowOutput = this.getWorkflowOutput(outputName);\n                oldLabel = workflowOutput[\"label\"];\n                workflowOutput[\"label\"] = label;\n                changed = oldLabel != label;\n            } else {\n                changed = this.addWorkflowOutput(outputName, label);\n            }\n            if( changed ) {\n                this.app.workflow.updateOutputLabel(oldLabel, label);\n                this.markChanged();\n                this.nodeView.redrawWorkflowOutputs();\n            }\n            return changed;\n        },\n        connectedOutputTerminals: function() {\n            return this._connectedTerminals( this.output_terminals );\n        },\n        _connectedTerminals: function( terminals ) {\n            var connectedTerminals = [];\n            $.each( terminals, function( _, t ) {\n                if( t.connectors.length > 0 ) {\n                    connectedTerminals.push( t );\n                }\n            } );\n            return connectedTerminals;        \n        },\n        hasConnectedOutputTerminals: function() {\n            // return this.connectedOutputTerminals().length > 0; <- optimized this\n            var outputTerminals = this.output_terminals;\n            for( var outputName in outputTerminals ) {\n                if( outputTerminals[ outputName ].connectors.length > 0 ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        connectedMappedInputTerminals: function() {\n            return this._connectedMappedTerminals( this.input_terminals );\n        },\n        hasConnectedMappedInputTerminals: function() {\n            // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n            var inputTerminals = this.input_terminals;\n            for( var inputName in inputTerminals ) {\n                var inputTerminal = inputTerminals[ inputName ];\n                if( inputTerminal.connectors.length > 0 && inputTerminal.isMappedOver() ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        _connectedMappedTerminals: function( terminals ) {\n            var mapped_outputs = [];\n            $.each( terminals, function( _, t ) {\n                var mapOver = t.mapOver();\n                if( mapOver.isCollection ) {\n                    if( t.connectors.length > 0 ) {\n                        mapped_outputs.push( t );\n                    }\n                }\n            });\n            return mapped_outputs;\n        },\n        mappedInputTerminals: function() {\n            return this._mappedTerminals( this.input_terminals );\n        },\n        _mappedTerminals: function( terminals ) {\n            var mappedTerminals = [];\n            $.each( terminals, function( _, t ) {\n                var mapOver = t.mapOver();\n                if( mapOver.isCollection ) {\n                    mappedTerminals.push( t );\n                }\n            } );\n            return mappedTerminals;\n        },\n        hasMappedOverInputTerminals: function() {\n            var found = false;\n            _.each( this.input_terminals, function( t ) {\n                var mapOver = t.mapOver();\n                if( mapOver.isCollection ) {\n                    found = true;\n                }\n            } );\n            return found;\n        },\n        redraw : function () {\n            $.each( this.input_terminals, function( _, t ) {\n                t.redraw();\n            });\n            $.each( this.output_terminals, function( _, t ) {\n                t.redraw();\n            });\n        },\n        destroy : function () {\n            $.each( this.input_terminals, function( k, t ) {\n                t.destroy();\n            });\n            $.each( this.output_terminals, function( k, t ) {\n                t.destroy();\n            });\n            this.app.workflow.remove_node( this );\n            $(this.element).remove();\n        },\n        make_active : function () {\n            $(this.element).addClass( \"toolForm-active\" );\n        },\n        make_inactive : function () {\n            // Keep inactive nodes stacked from most to least recently active\n            // by moving element to the end of parent's node list\n            var element = this.element.get(0);\n            (function(p) { p.removeChild( element ); p.appendChild( element ); })(element.parentNode);\n            // Remove active class\n            $(element).removeClass( \"toolForm-active\" );\n        },\n        init_field_data : function ( data ) {\n            if ( data.type ) {\n                this.type = data.type;\n            }\n            this.name = data.name;\n            this.config_form = data.config_form;\n            this.tool_version = this.config_form && this.config_form.version;\n            this.tool_state = data.tool_state;\n            this.errors = data.errors;\n            this.tooltip = data.tooltip ? data.tooltip : \"\";\n            this.annotation = data.annotation;\n            this.post_job_actions = data.post_job_actions ? data.post_job_actions : {};\n            this.label = data.label;\n            this.uuid = data.uuid;\n            this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n            var node = this;\n            var nodeView = new NodeView({\n                el: this.element[ 0 ],\n                node: node,\n            });\n            node.nodeView = nodeView;\n            $.each( data.data_inputs, function( i, input ) {\n                nodeView.addDataInput( input );\n            });\n            if ( ( data.data_inputs.length > 0 ) && ( data.data_outputs.length > 0 ) ) {\n                nodeView.addRule();\n            }\n            $.each( data.data_outputs, function( i, output ) {\n                nodeView.addDataOutput( output );\n            } );\n            nodeView.render();\n            this.app.workflow.node_changed( this, true);\n        },\n        update_field_data : function( data ) {\n            var node = this;\n            var nodeView = node.nodeView;\n            // remove unused output views and remove pre-existing output views from data.data_outputs,\n            // so that these are not added twice.\n            var unused_outputs = [];\n            // nodeView.outputViews contains pre-existing outputs,\n            // while data.data_output contains what should be displayed.\n            // Now we gather the unused outputs\n            $.each(nodeView.outputViews, function(i, output_view) {\n                var cur_name = output_view.output.name;\n                var data_names = data.data_outputs;\n                var cur_name_in_data_outputs = false;\n                _.each(data_names, function(data_name) {\n                    if (data_name.name == cur_name) {\n                        cur_name_in_data_outputs = true;\n                    }\n                });\n                if (cur_name_in_data_outputs === false) {\n                    unused_outputs.push(cur_name)\n                }\n            });\n\n            // Remove the unused outputs\n            _.each(unused_outputs, function(unused_output) {\n                _.each(nodeView.outputViews[unused_output].terminalElement.terminal.connectors, function(x) {\n                    if (x) {\n                            x.destroy();  // Removes the noodle connectors\n                        }\n                });\n                nodeView.outputViews[unused_output].remove();  // removes the rendered output\n                delete nodeView.outputViews[unused_output];  // removes the reference to the output\n                delete node.output_terminals[unused_output];  // removes the output terminal\n            });\n            $.each( node.workflow_outputs, function(i, wf_output){\n                if (wf_output && !node.output_terminals[wf_output.output_name]) {\n                    node.workflow_outputs.splice(i, 1);  // removes output from list of workflow outputs\n                }\n            });\n            $.each( data.data_outputs, function( i, output ) {\n                if (!nodeView.outputViews[output.name]) {\n                    nodeView.addDataOutput(output);  // add data output if it does not yet exist\n                } else {\n                    // the output already exists, but the output formats may have changed.\n                    // Therefore we update the datatypes and destroy invalid connections.\n                    node.output_terminals[ output.name ].datatypes = output.extensions;\n                    node.output_terminals[ output.name ].destroyInvalidConnections();\n                }\n            });\n            this.tool_state = data.tool_state;\n            this.config_form = data.config_form;\n            this.tool_version = this.config_form && this.config_form.version;\n            this.errors = data.errors;\n            this.annotation = data['annotation'];\n            this.label = data.label;\n            if( \"post_job_actions\" in data ) {\n                // Won't be present in response for data inputs\n                var pja_in = data.post_job_actions;\n                this.post_job_actions = pja_in ? pja_in : {};\n            }\n            node.nodeView.renderToolErrors();\n            // Update input rows\n            var old_body = nodeView.$( \"div.inputs\" );\n            var new_body = nodeView.newInputsDiv();\n            var newTerminalViews = {};\n            _.each( data.data_inputs, function( input ) {\n                var terminalView = node.nodeView.addDataInput( input, new_body );\n                newTerminalViews[ input.name ] = terminalView;\n            });\n            // Cleanup any leftover terminals\n            _.each( _.difference( _.values( nodeView.terminalViews ), _.values( newTerminalViews ) ), function( unusedView ) {\n                unusedView.el.terminal.destroy();\n            } );\n            nodeView.terminalViews = newTerminalViews;\n            node.nodeView.render();\n            // In general workflow editor assumes tool outputs don't change in # or\n            // type (not really valid right?) but adding special logic here for\n            // data collection input parameters that can have their collection\n            // change.\n            if( data.data_outputs.length == 1 && \"collection_type\" in data.data_outputs[ 0 ] ) {\n                nodeView.updateDataOutput( data.data_outputs[ 0 ] );\n            }\n            old_body.replaceWith( new_body );\n            if( \"workflow_outputs\" in data ) {\n                // Won't be present in response for data inputs\n                this.workflow_outputs = workflow_outputs ? workflow_outputs : [];\n            }\n            // If active, reactivate with new config_form\n            this.markChanged();\n            this.redraw();\n        },\n        error : function ( text ) {\n            var b = $(this.element).find( \".toolFormBody\" );\n            b.find( \"div\" ).remove();\n            var tmp = \"<div style='color: red; text-style: italic;'>\" + text + \"</div>\";\n            this.config_form = tmp;\n            b.html( tmp );\n            this.app.workflow.node_changed( this );\n        },\n        markChanged: function() {\n            this.app.workflow.node_changed( this );\n        }\n    });\n    return Node;\n});\n"]}