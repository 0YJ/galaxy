{"version":3,"sources":["mvc/workflow/workflow-node.js"],"names":["Node","Backbone","Model","extend","initialize","app","attr","this","element","input_terminals","output_terminals","errors","workflow_outputs","getWorkflowOutput","outputName","_","findWhere","output_name","isWorkflowOutput","undefined","removeWorkflowOutput","splice","addWorkflowOutput","label","output","push","labelWorkflowOutput","changed","oldLabel","workflowOutput","workflow","updateOutputLabel","markChanged","connectedOutputTerminals","connectedTerminals","t","connectors","length","hasConnectedOutputTerminals","_connectedTerminals","outputTerminals","connectedMappedInputTerminals","_connectedMappedTerminals","hasConnectedMappedInputTerminals","inputTerminals","inputTerminal","isMappedOver","mapped_outputs","$","each","terminals","inputName","mappedInputTerminals","_mappedTerminals","mapOver","isCollection","mappedTerminals","hasMappedOverInputTerminals","found","redraw","destroy","k","remove","make_active","addClass","get","p","removeChild","appendChild","parentNode","make_inactive","data","type","name","config_form","version","tool_state","removeClass","tooltip","annotation","init_field_data","post_job_actions","uuid","tool_version","node","nodeView","el","input","data_outputs","i","render","data_inputs","update_field_data","addDataOutput","unused_outputs","output_view","cur_name","data_names","data_name","cur_name_in_data_outputs","unused_output","terminalElement","terminal","x","outputViews","wf_output","datatypes","extensions","destroyInvalidConnections","pja_in","renderToolErrors","new_body","newInputsDiv","newTerminalViews","addDataInput","terminalView","difference","values","unusedView","terminalViews","updateDataOutput","old_body","b","find","error","text","tmp","html","node_changed"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-node.js","sourcesContent":["import NodeView from \"mvc/workflow/workflow-view-node\";\nvar Node = Backbone.Model.extend({\n    initialize: function(app, attr) {\n        this.app = app;\n        this.element = attr.element;\n        this.input_terminals = {};\n        this.output_terminals = {};\n        this.errors = {};\n        this.workflow_outputs = [];\n    },\n    getWorkflowOutput: function(outputName) {\n        return _.findWhere(this.workflow_outputs, {\n            output_name: outputName\n        });\n    },\n    isWorkflowOutput: function(outputName) {\n        return this.getWorkflowOutput(outputName) != undefined;\n    },\n    removeWorkflowOutput: function(outputName) {\n        while (this.isWorkflowOutput(outputName)) {\n            this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n        }\n    },\n    addWorkflowOutput: function(outputName, label) {\n        if (!this.isWorkflowOutput(outputName)) {\n            var output = { output_name: outputName };\n            if (label) {\n                output[\"label\"] = label;\n            }\n            this.workflow_outputs.push(output);\n            return true;\n        }\n        return false;\n    },\n    labelWorkflowOutput: function(outputName, label) {\n        var changed = false;\n        var oldLabel = null;\n        if (this.isWorkflowOutput(outputName)) {\n            var workflowOutput = this.getWorkflowOutput(outputName);\n            oldLabel = workflowOutput[\"label\"];\n            workflowOutput[\"label\"] = label;\n            changed = oldLabel != label;\n        } else {\n            changed = this.addWorkflowOutput(outputName, label);\n        }\n        if (changed) {\n            this.app.workflow.updateOutputLabel(oldLabel, label);\n            this.markChanged();\n            this.nodeView.redrawWorkflowOutputs();\n        }\n        return changed;\n    },\n    connectedOutputTerminals: function() {\n        return this._connectedTerminals(this.output_terminals);\n    },\n    _connectedTerminals: function(terminals) {\n        var connectedTerminals = [];\n        $.each(terminals, function(_, t) {\n            if (t.connectors.length > 0) {\n                connectedTerminals.push(t);\n            }\n        });\n        return connectedTerminals;\n    },\n    hasConnectedOutputTerminals: function() {\n        // return this.connectedOutputTerminals().length > 0; <- optimized this\n        var outputTerminals = this.output_terminals;\n        for (var outputName in outputTerminals) {\n            if (outputTerminals[outputName].connectors.length > 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    connectedMappedInputTerminals: function() {\n        return this._connectedMappedTerminals(this.input_terminals);\n    },\n    hasConnectedMappedInputTerminals: function() {\n        // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n        var inputTerminals = this.input_terminals;\n        for (var inputName in inputTerminals) {\n            var inputTerminal = inputTerminals[inputName];\n            if (\n                inputTerminal.connectors.length > 0 &&\n                inputTerminal.isMappedOver()\n            ) {\n                return true;\n            }\n        }\n        return false;\n    },\n    _connectedMappedTerminals: function(terminals) {\n        var mapped_outputs = [];\n        $.each(terminals, function(_, t) {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                if (t.connectors.length > 0) {\n                    mapped_outputs.push(t);\n                }\n            }\n        });\n        return mapped_outputs;\n    },\n    mappedInputTerminals: function() {\n        return this._mappedTerminals(this.input_terminals);\n    },\n    _mappedTerminals: function(terminals) {\n        var mappedTerminals = [];\n        $.each(terminals, function(_, t) {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                mappedTerminals.push(t);\n            }\n        });\n        return mappedTerminals;\n    },\n    hasMappedOverInputTerminals: function() {\n        var found = false;\n        _.each(this.input_terminals, function(t) {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                found = true;\n            }\n        });\n        return found;\n    },\n    redraw: function() {\n        $.each(this.input_terminals, function(_, t) {\n            t.redraw();\n        });\n        $.each(this.output_terminals, function(_, t) {\n            t.redraw();\n        });\n    },\n    destroy: function() {\n        $.each(this.input_terminals, function(k, t) {\n            t.destroy();\n        });\n        $.each(this.output_terminals, function(k, t) {\n            t.destroy();\n        });\n        this.app.workflow.remove_node(this);\n        $(this.element).remove();\n    },\n    make_active: function() {\n        $(this.element).addClass(\"toolForm-active\");\n    },\n    make_inactive: function() {\n        // Keep inactive nodes stacked from most to least recently active\n        // by moving element to the end of parent's node list\n        var element = this.element.get(0);\n        (function(p) {\n            p.removeChild(element);\n            p.appendChild(element);\n        })(element.parentNode);\n        // Remove active class\n        $(element).removeClass(\"toolForm-active\");\n    },\n    init_field_data: function(data) {\n        if (data.type) {\n            this.type = data.type;\n        }\n        this.name = data.name;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.tool_state = data.tool_state;\n        this.errors = data.errors;\n        this.tooltip = data.tooltip ? data.tooltip : \"\";\n        this.annotation = data.annotation;\n        this.post_job_actions = data.post_job_actions\n            ? data.post_job_actions\n            : {};\n        this.label = data.label;\n        this.uuid = data.uuid;\n        this.workflow_outputs = data.workflow_outputs\n            ? data.workflow_outputs\n            : [];\n        var node = this;\n        var nodeView = new NodeView({\n            el: this.element[0],\n            node: node\n        });\n        node.nodeView = nodeView;\n        $.each(data.data_inputs, function(i, input) {\n            nodeView.addDataInput(input);\n        });\n        if (data.data_inputs.length > 0 && data.data_outputs.length > 0) {\n            nodeView.addRule();\n        }\n        $.each(data.data_outputs, function(i, output) {\n            nodeView.addDataOutput(output);\n        });\n        nodeView.render();\n        this.app.workflow.node_changed(this, true);\n    },\n    update_field_data: function(data) {\n        var node = this;\n        var nodeView = node.nodeView;\n        // remove unused output views and remove pre-existing output views from data.data_outputs,\n        // so that these are not added twice.\n        var unused_outputs = [];\n        // nodeView.outputViews contains pre-existing outputs,\n        // while data.data_output contains what should be displayed.\n        // Now we gather the unused outputs\n        $.each(nodeView.outputViews, function(i, output_view) {\n            var cur_name = output_view.output.name;\n            var data_names = data.data_outputs;\n            var cur_name_in_data_outputs = false;\n            _.each(data_names, function(data_name) {\n                if (data_name.name == cur_name) {\n                    cur_name_in_data_outputs = true;\n                }\n            });\n            if (cur_name_in_data_outputs === false) {\n                unused_outputs.push(cur_name);\n            }\n        });\n\n        // Remove the unused outputs\n        _.each(unused_outputs, function(unused_output) {\n            _.each(\n                nodeView.outputViews[unused_output].terminalElement.terminal\n                    .connectors,\n                function(x) {\n                    if (x) {\n                        x.destroy(); // Removes the noodle connectors\n                    }\n                }\n            );\n            nodeView.outputViews[unused_output].remove(); // removes the rendered output\n            delete nodeView.outputViews[unused_output]; // removes the reference to the output\n            delete node.output_terminals[unused_output]; // removes the output terminal\n        });\n        $.each(node.workflow_outputs, function(i, wf_output) {\n            if (wf_output && !node.output_terminals[wf_output.output_name]) {\n                node.workflow_outputs.splice(i, 1); // removes output from list of workflow outputs\n            }\n        });\n        $.each(data.data_outputs, function(i, output) {\n            if (!nodeView.outputViews[output.name]) {\n                nodeView.addDataOutput(output); // add data output if it does not yet exist\n            } else {\n                // the output already exists, but the output formats may have changed.\n                // Therefore we update the datatypes and destroy invalid connections.\n                node.output_terminals[output.name].datatypes =\n                    output.extensions;\n                node.output_terminals[output.name].destroyInvalidConnections();\n            }\n        });\n        this.tool_state = data.tool_state;\n        this.config_form = data.config_form;\n        this.tool_version = this.config_form && this.config_form.version;\n        this.errors = data.errors;\n        this.annotation = data[\"annotation\"];\n        this.label = data.label;\n        if (\"post_job_actions\" in data) {\n            // Won't be present in response for data inputs\n            var pja_in = data.post_job_actions;\n            this.post_job_actions = pja_in ? pja_in : {};\n        }\n        node.nodeView.renderToolErrors();\n        // Update input rows\n        var old_body = nodeView.$(\"div.inputs\");\n        var new_body = nodeView.newInputsDiv();\n        var newTerminalViews = {};\n        _.each(data.data_inputs, function(input) {\n            var terminalView = node.nodeView.addDataInput(input, new_body);\n            newTerminalViews[input.name] = terminalView;\n        });\n        // Cleanup any leftover terminals\n        _.each(\n            _.difference(\n                _.values(nodeView.terminalViews),\n                _.values(newTerminalViews)\n            ),\n            function(unusedView) {\n                unusedView.el.terminal.destroy();\n            }\n        );\n        nodeView.terminalViews = newTerminalViews;\n        node.nodeView.render();\n        // In general workflow editor assumes tool outputs don't change in # or\n        // type (not really valid right?) but adding special logic here for\n        // data collection input parameters that can have their collection\n        // change.\n        if (\n            data.data_outputs.length == 1 &&\n            \"collection_type\" in data.data_outputs[0]\n        ) {\n            nodeView.updateDataOutput(data.data_outputs[0]);\n        }\n        old_body.replaceWith(new_body);\n        if (\"workflow_outputs\" in data) {\n            // Won't be present in response for data inputs\n            this.workflow_outputs = workflow_outputs ? workflow_outputs : [];\n        }\n        // If active, reactivate with new config_form\n        this.markChanged();\n        this.redraw();\n    },\n    error: function(text) {\n        var b = $(this.element).find(\".toolFormBody\");\n        b.find(\"div\").remove();\n        var tmp =\n            \"<div style='color: red; text-style: italic;'>\" + text + \"</div>\";\n        this.config_form = tmp;\n        b.html(tmp);\n        this.app.workflow.node_changed(this);\n    },\n    markChanged: function() {\n        this.app.workflow.node_changed(this);\n    }\n});\nexport default Node;\n"]}