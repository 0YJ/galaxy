{"version":3,"sources":["mvc/workflow/workflow-node.js"],"names":["define","NodeView","Backbone","Model","extend","initialize","app","attr","this","element","input_terminals","output_terminals","errors","workflow_outputs","getWorkflowOutput","outputName","_","findWhere","output_name","isWorkflowOutput","undefined","removeWorkflowOutput","splice","addWorkflowOutput","label","output","push","labelWorkflowOutput","changed","oldLabel","workflowOutput","workflow","updateOutputLabel","markChanged","nodeView","redrawWorkflowOutputs","connectedOutputTerminals","_connectedTerminals","terminals","connectedTerminals","$","each","t","connectors","length","hasConnectedOutputTerminals","outputTerminals","connectedMappedInputTerminals","_connectedMappedTerminals","hasConnectedMappedInputTerminals","inputTerminals","inputName","inputTerminal","isMappedOver","mapped_outputs","mapOver","isCollection","mappedInputTerminals","_mappedTerminals","mappedTerminals","hasMappedOverInputTerminals","found","redraw","destroy","k","remove_node","remove","make_active","addClass","make_inactive","get","p","removeChild","appendChild","parentNode","removeClass","init_field_data","data","type","name","config_form","tool_state","tooltip","annotation","post_job_actions","uuid","node","el","data_inputs","i","input","addDataInput","data_outputs","addRule","addDataOutput","render","node_changed","update_field_data","pja_in","renderToolErrors","old_body","new_body","newInputsDiv","newTerminalViews","terminalView","difference","values","terminalViews","unusedView","terminal","updateDataOutput","replaceWith","error","text","b","find","tmp","html"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-node.js","sourcesContent":["define(['mvc/workflow/workflow-view-node'], function( NodeView ) {\n    var Node = Backbone.Model.extend({\n        initialize: function( app, attr ) {\n            this.app = app;\n            this.element = attr.element;\n            this.input_terminals = {};\n            this.output_terminals = {};\n            this.errors = {};\n            this.workflow_outputs = [];\n        },\n        getWorkflowOutput: function(outputName) {\n            return _.findWhere(this.workflow_outputs, {\"output_name\": outputName});\n        },\n        isWorkflowOutput: function(outputName) {\n            return this.getWorkflowOutput(outputName) != undefined;\n        },\n        removeWorkflowOutput: function(outputName) {\n            while(this.isWorkflowOutput(outputName)) {\n                this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n            }\n        },\n        addWorkflowOutput: function(outputName, label) {\n            if(!this.isWorkflowOutput(outputName)){\n                var output = {\"output_name\": outputName};\n                if( label ) {\n                    output[\"label\"] = label;\n                }\n                this.workflow_outputs.push(output);\n                return true\n            }\n            return false;\n        },\n        labelWorkflowOutput: function(outputName, label) {\n            var changed = false;\n            var oldLabel = null;\n            if( this.isWorkflowOutput(outputName) ) {\n                var workflowOutput = this.getWorkflowOutput(outputName);\n                oldLabel = workflowOutput[\"label\"];\n                workflowOutput[\"label\"] = label;\n                changed = oldLabel != label;\n            } else {\n                changed = this.addWorkflowOutput(outputName, label);\n            }\n            if( changed ) {\n                this.app.workflow.updateOutputLabel(oldLabel, label);\n                this.markChanged();\n                this.nodeView.redrawWorkflowOutputs();\n            }\n            return changed;\n        },\n        connectedOutputTerminals: function() {\n            return this._connectedTerminals( this.output_terminals );\n        },\n        _connectedTerminals: function( terminals ) {\n            var connectedTerminals = [];\n            $.each( terminals, function( _, t ) {\n                if( t.connectors.length > 0 ) {\n                    connectedTerminals.push( t );\n                }\n            } );\n            return connectedTerminals;        \n        },\n        hasConnectedOutputTerminals: function() {\n            // return this.connectedOutputTerminals().length > 0; <- optimized this\n            var outputTerminals = this.output_terminals;\n            for( var outputName in outputTerminals ) {\n                if( outputTerminals[ outputName ].connectors.length > 0 ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        connectedMappedInputTerminals: function() {\n            return this._connectedMappedTerminals( this.input_terminals );\n        },\n        hasConnectedMappedInputTerminals: function() {\n            // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n            var inputTerminals = this.input_terminals;\n            for( var inputName in inputTerminals ) {\n                var inputTerminal = inputTerminals[ inputName ];\n                if( inputTerminal.connectors.length > 0 && inputTerminal.isMappedOver() ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        _connectedMappedTerminals: function( terminals ) {\n            var mapped_outputs = [];\n            $.each( terminals, function( _, t ) {\n                var mapOver = t.mapOver();\n                if( mapOver.isCollection ) {\n                    if( t.connectors.length > 0 ) {\n                        mapped_outputs.push( t );\n                    }\n                }\n            });\n            return mapped_outputs;\n        },\n        mappedInputTerminals: function() {\n            return this._mappedTerminals( this.input_terminals );\n        },\n        _mappedTerminals: function( terminals ) {\n            var mappedTerminals = [];\n            $.each( terminals, function( _, t ) {\n                var mapOver = t.mapOver();\n                if( mapOver.isCollection ) {\n                    mappedTerminals.push( t );\n                }\n            } );\n            return mappedTerminals;\n        },\n        hasMappedOverInputTerminals: function() {\n            var found = false;\n            _.each( this.input_terminals, function( t ) {\n                var mapOver = t.mapOver();\n                if( mapOver.isCollection ) {\n                    found = true;\n                }\n            } );\n            return found;\n        },\n        redraw : function () {\n            $.each( this.input_terminals, function( _, t ) {\n                t.redraw();\n            });\n            $.each( this.output_terminals, function( _, t ) {\n                t.redraw();\n            });\n        },\n        destroy : function () {\n            $.each( this.input_terminals, function( k, t ) {\n                t.destroy();\n            });\n            $.each( this.output_terminals, function( k, t ) {\n                t.destroy();\n            });\n            this.app.workflow.remove_node( this );\n            $(this.element).remove();\n        },\n        make_active : function () {\n            $(this.element).addClass( \"toolForm-active\" );\n        },\n        make_inactive : function () {\n            // Keep inactive nodes stacked from most to least recently active\n            // by moving element to the end of parent's node list\n            var element = this.element.get(0);\n            (function(p) { p.removeChild( element ); p.appendChild( element ); })(element.parentNode);\n            // Remove active class\n            $(element).removeClass( \"toolForm-active\" );\n        },\n        init_field_data : function ( data ) {\n            if ( data.type ) {\n                this.type = data.type;\n            }\n            this.name = data.name;\n            this.config_form = data.config_form;\n            this.tool_state = data.tool_state;\n            this.errors = data.errors;\n            this.tooltip = data.tooltip ? data.tooltip : \"\";\n            this.annotation = data.annotation;\n            this.post_job_actions = data.post_job_actions ? data.post_job_actions : {};\n            this.label = data.label;\n            this.uuid = data.uuid;\n            this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n            var node = this;\n            var nodeView = new NodeView({\n                el: this.element[ 0 ],\n                node: node,\n            });\n            node.nodeView = nodeView;\n            $.each( data.data_inputs, function( i, input ) {\n                nodeView.addDataInput( input );\n            });\n            if ( ( data.data_inputs.length > 0 ) && ( data.data_outputs.length > 0 ) ) {\n                nodeView.addRule();\n            }\n            $.each( data.data_outputs, function( i, output ) {\n                nodeView.addDataOutput( output );\n            } );\n            nodeView.render();\n            this.app.workflow.node_changed( this, true);\n        },\n        update_field_data : function( data ) {\n            var node = this;\n            var nodeView = node.nodeView;\n            this.tool_state = data.tool_state;\n            this.config_form = data.config_form;\n            this.errors = data.errors;\n            this.annotation = data['annotation'];\n            this.label = data.label;\n            if( \"post_job_actions\" in data ) {\n                // Won't be present in response for data inputs\n                var pja_in = data.post_job_actions;\n                this.post_job_actions = pja_in ? pja_in : {};\n            }\n            node.nodeView.renderToolErrors();\n            // Update input rows\n            var old_body = nodeView.$( \"div.inputs\" );\n            var new_body = nodeView.newInputsDiv();\n            var newTerminalViews = {};\n            _.each( data.data_inputs, function( input ) {\n                var terminalView = node.nodeView.addDataInput( input, new_body );\n                newTerminalViews[ input.name ] = terminalView;\n            });\n            // Cleanup any leftover terminals\n            _.each( _.difference( _.values( nodeView.terminalViews ), _.values( newTerminalViews ) ), function( unusedView ) {\n                unusedView.el.terminal.destroy();\n            } );\n            nodeView.terminalViews = newTerminalViews;\n            node.nodeView.render();\n            // In general workflow editor assumes tool outputs don't change in # or\n            // type (not really valid right?) but adding special logic here for\n            // data collection input parameters that can have their collection\n            // change.\n            if( data.data_outputs.length == 1 && \"collection_type\" in data.data_outputs[ 0 ] ) {\n                nodeView.updateDataOutput( data.data_outputs[ 0 ] );\n            }\n            old_body.replaceWith( new_body );\n            if( \"workflow_outputs\" in data ) {\n                // Won't be present in response for data inputs\n                this.workflow_outputs = workflow_outputs ? workflow_outputs : [];\n            }\n            // If active, reactivate with new config_form\n            this.markChanged();\n            this.redraw();\n        },\n        error : function ( text ) {\n            var b = $(this.element).find( \".toolFormBody\" );\n            b.find( \"div\" ).remove();\n            var tmp = \"<div style='color: red; text-style: italic;'>\" + text + \"</div>\";\n            this.config_form = tmp;\n            b.html( tmp );\n            this.app.workflow.node_changed( this );\n        },\n        markChanged: function() {\n            this.app.workflow.node_changed( this );\n        }\n    });\n    return Node;\n});"]}