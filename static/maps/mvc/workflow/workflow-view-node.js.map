{"version":3,"sources":["mvc/workflow/workflow-view-node.js"],"names":["define","_","TerminalViews","DataViews","Backbone","View","extend","initialize","options","node","Math","max","this","$el","width","find","output_width","remove","tool_body","appendTo","newInputsDiv","render","renderToolLabel","renderToolErrors","min","$","text","label","name","errors","addClass","removeClass","updateMaxWidth","newWidth","addRule","append","addDataInput","input","body","skipResize","terminalViews","terminalViewClass","input_type","InputCollectionTerminalView","InputTerminalView","terminalView","terminal","el","update","destroyInvalidConnections","terminalElement","DataInputView","inputView","ib","prepend","terminalElements","addDataOutput","output","collection","OutputCollectionTerminalView","OutputTerminalView","outputView","DataOutputView","nodeView","outputViews","redrawWorkflowOutputs","each","updateDataOutput","output_terminals"],"mappings":"aAAAA,QAAQ,kBAAmB,uCAAwC,mCAAoC,SAAUC,EAAGC,EAAeC,GAC/H,OAAOC,SAASC,KAAKC,QADjBC,WAAA,SAAmBC,GAChBJ,KAAAA,KAAAI,EAAsBC,KACzBF,KAAAA,aAAYG,KAAAC,IAAUH,IAAVI,KAAmBC,IAAAC,SAC3BF,KAAKH,UAAOD,KAAQC,IAApBM,KAAA,iBACAH,KAAKI,UAAAA,KAAeN,OAAUO,SAC9BL,KAAKM,eAAYC,SAAAP,KAAeM,WAChCN,KAAKM,iBACLN,KAAKQ,gBAGRC,OATwB,WAYrBT,KAAKU,kBADTD,KAAQE,mBACJX,KAAKU,IAAAA,IAAAA,QAALZ,KAAAc,IAAA,IAAAd,KAAAC,IAAAC,KAAAC,IAAAC,QAAAF,KAAAI,iBAGHM,gBAfwB,WAkBrBV,KAAKa,EAAG,cAAeC,KAAMd,KAAKH,KAAKkB,OAASf,KAAKH,KAAKmB,OAC7DL,iBAnBwB,WAsBrBX,KAAKH,KAAKoB,OAASjB,KAAKC,IAAIiB,SAAU,mBAAsBlB,KAAKC,IAAIkB,YAAa,oBACrFX,aAvBwB,WA0BrB,OAAOK,EAAG,UAAWK,SAAU,WAClCE,eA3BwB,SAAAC,GA8BrBrB,KAAKI,aAAeN,KAAKC,IAAKC,KAAKI,aAAciB,IACpDC,QA/BwB,WAkCrBtB,KAAKM,UAAUiB,OAAQV,EAAG,UAAWK,SAAU,UAClDM,aAnCwB,SAAAC,EAAAC,GAsCrB,IAAIC,GAAa,EADrBH,IACQG,EAAAA,KAAAA,EAAa,WAGbA,GAAA,GAEAA,IAAAA,EAAa3B,KAAb4B,cAAAH,EAAAT,MACHa,EAAA,sBAAAJ,EAAAK,WAAAxC,EAAAyC,4BAAAzC,EAAA0C,kBAKGC,IAJAA,GAAeA,aAA0BjB,IACzCa,EAAAA,GAAAA,SAAsBJ,UACtBQ,EAAAA,MAEAA,EAKIR,CAFkC,IAAtCS,EAAAD,EAAAE,GAAAD,SADJA,EAKOE,OAAAX,GACHS,EAAIA,iCAPPD,EAAA,IAAAJ,GACII,KAAAA,KAAepC,KAChBoC,MAAAA,IAOAC,KAAAA,cAASG,EAAAA,MAAAA,EACZ,IAAAC,EAAAL,EAAAE,GAOGR,EANCC,IAAeH,EAApBc,eACID,gBAAAA,EACAE,MAAAA,EACAF,SAAAA,KACAb,WAFyCE,IAI7BA,IAEhB,OAN6CD,EAA7CH,OAAAkB,EAAAC,QAAAT,EAAAU,qBAMIF,GAGPG,cAxEwB,SAAAC,GA2ErB,IADJD,EAAe,IACeC,EAAOC,WAAexD,EAAcyD,6BAA+BzD,EAAc0D,qBAAvGnB,KAAAA,KAAAA,KACAI,OAAAA,IAEAY,EAAQA,IAAAA,EAAAA,gBAFZA,OAAAA,EAIII,gBAAiB1D,EAAU2D,GAC3BC,SAAUN,OAEV7C,KAAAoD,YAAYP,EAAA7B,MAAAiC,EAH+BjD,KAA/CM,UAAAiB,OAAA0B,EAAAhD,IAAAsB,OAAAU,EAAAU,sBAOHU,sBAvFwB,WA0FrBhE,EAAEiE,KAAMtD,KAAKoD,YAAa,SAAUH,GADxCI,EAAAA,0BAICE,iBA7FwB,SAAAV,GAgGA7C,KAAKH,KAAK2D,iBAAkBX,EAAO7B,MAD1CoB,OAAAS","file":"../../../scripts/mvc/workflow/workflow-view-node.js","sourcesContent":["define(['libs/underscore', 'mvc/workflow/workflow-view-terminals', 'mvc/workflow/workflow-view-data'], function( _, TerminalViews, DataViews ) {\n    return Backbone.View.extend( {\n        initialize: function( options ){\n            this.node = options.node;\n            this.output_width = Math.max( 150, this.$el.width() );\n            this.tool_body = this.$el.find( '.toolFormBody' );\n            this.tool_body.find( 'div' ).remove();\n            this.newInputsDiv().appendTo( this.tool_body );\n            this.terminalViews = {};\n            this.outputViews = {};\n        },\n\n        render: function() {\n            this.renderToolLabel();\n            this.renderToolErrors();\n            this.$el.css( 'width', Math.min( 250, Math.max( this.$el.width(), this.output_width ) ) );\n        },\n\n        renderToolLabel: function() {\n            this.$( '.nodeTitle' ).text( this.node.label || this.node.name );\n        },\n\n        renderToolErrors: function() {\n            this.node.errors ? this.$el.addClass( 'tool-node-error' ) : this.$el.removeClass( 'tool-node-error' );\n        },\n\n        newInputsDiv: function() {\n            return $( '<div/>' ).addClass( 'inputs' );\n        },\n\n        updateMaxWidth: function( newWidth ) {\n            this.output_width = Math.max( this.output_width, newWidth );\n        },\n\n        addRule: function() {\n            this.tool_body.append( $( '<div/>' ).addClass( 'rule' ) );\n        },\n\n        addDataInput: function( input, body ) {\n            var skipResize = true;\n            if( !body ) {\n                body = this.$( '.inputs' );\n                // initial addition to node - resize input to help calculate node\n                // width.\n                skipResize = false;\n            }\n            var terminalView = this.terminalViews[ input.name ];\n            var terminalViewClass = ( input.input_type == 'dataset_collection' ) ? TerminalViews.InputCollectionTerminalView : TerminalViews.InputTerminalView;\n            if( terminalView && !( terminalView instanceof terminalViewClass ) ) {\n                terminalView.el.terminal.destroy();\n                terminalView = null;\n            }\n            if( !terminalView ) {\n                terminalView = new terminalViewClass( {\n                    node: this.node,\n                    input: input\n                } );             \n            } else {\n                var terminal = terminalView.el.terminal;\n                terminal.update( input );\n                terminal.destroyInvalidConnections();\n            }\n            this.terminalViews[ input.name ] = terminalView;\n            var terminalElement = terminalView.el;\n            var inputView = new DataViews.DataInputView( {\n                terminalElement: terminalElement,\n                input: input, \n                nodeView: this,\n                skipResize: skipResize\n            } );\n            var ib = inputView.$el;\n            body.append( ib.prepend( terminalView.terminalElements() ) );\n            return terminalView;\n        },\n\n        addDataOutput: function( output ) {\n            var terminalViewClass = ( output.collection ) ? TerminalViews.OutputCollectionTerminalView : TerminalViews.OutputTerminalView;\n            var terminalView = new terminalViewClass( {\n                node: this.node,\n                output: output\n            } );\n            var outputView = new DataViews.DataOutputView( {\n                'output': output,\n                'terminalElement': terminalView.el,\n                'nodeView': this,\n            } );\n            this.outputViews[ output.name ] = outputView;\n            this.tool_body.append( outputView.$el.append( terminalView.terminalElements() ) );\n        },\n\n        redrawWorkflowOutputs: function() {\n            _.each( this.outputViews, function( outputView ) {\n                outputView.redrawWorkflowOutput();\n            });\n        },\n\n        updateDataOutput: function( output ) {\n            var outputTerminal = this.node.output_terminals[ output.name ];\n            outputTerminal.update( output );\n        }\n    });\n});"]}