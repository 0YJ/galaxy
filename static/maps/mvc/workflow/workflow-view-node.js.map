{"version":3,"sources":["mvc/workflow/workflow-view-node.js"],"names":["Backbone","View","extend","initialize","options","this","node","output_width","Math","max","$el","width","tool_body","find","remove","newInputsDiv","appendTo","terminalViews","outputViews","render","renderToolLabel","renderToolErrors","css","min","$","name","errors","addClass","removeClass","updateMaxWidth","newWidth","addRule","append","addDataInput","input","skipResize","body","terminalView","terminalViewClass","input_type","InputCollectionTerminalView","InputTerminalView","el","destroy","terminal","update","ib","_workflowViewData2","default","DataInputView","terminalElement","nodeView","output","prepend","_workflowViewTerminals2","OutputCollectionTerminalView","inputView","addDataOutput","DataOutputView","outputView","terminalElements","redrawWorkflowOutputs","_underscore2","each","redrawWorkflowOutput","output_terminals"],"mappings":"oRAGeA,SAASC,KAAKC,QACzBC,WAAY,SAASC,GACjBC,KAAKC,KAAOF,EAAQE,KACpBD,KAAKE,aAAeC,KAAKC,IAAI,IAAKJ,KAAKK,IAAIC,SAC3CN,KAAKO,UAAYP,KAAKK,IAAIG,KAAK,iBAC/BR,KAAKO,UAAUC,KAAK,OAAOC,SAC3BT,KAAKU,eAAeC,SAASX,KAAKO,WAClCP,KAAKY,iBACLZ,KAAKa,gBAGTC,OAAQ,WACJd,KAAKe,kBACLf,KAAKgB,mBACLhB,KAAKK,IAAIY,IACL,QACAd,KAAKe,IAAI,IAhBNvB,KAASC,IAATI,KAAcH,IAAOS,QAAAN,KAAAE,iBAI5Ba,gBAAKR,WACLP,KAAAmB,EAAA,cAAeX,KAAKR,KAAOS,KAAAA,OAA3BT,KAAAC,KAAAmB,OAGAJ,iBAAKH,WACRb,KAT+BC,KAAAoB,OA0BtBrB,KAAKK,IAAIiB,SAAS,mBAf5BR,KAAQT,IAAAkB,YAAW,oBAGfb,aAAKL,WAIR,OAlB+Bc,EAAA,UAAAG,SAAA,WAqB5BE,eAAO,SAAAC,GACVzB,KAtB+BE,aAAAC,KAAAC,IAAAJ,KAAAE,aAAAuB,IAyB5BC,QAAA,WAGH1B,KA5B+BO,UAAAoB,OAAAR,EAAA,UAAAG,SAAA,UA+B5BM,aAAA,SAASC,EAAUP,GACtB,IAhC+BQ,GAAA,EA4CvBC,IAVTP,EAAAA,KAAgBL,EAAA,WAcRW,GAAa,GATjB,IAAAE,EAAeL,KAAAA,cAAmBL,EAAAA,MAvCNW,EAoDJ,sBAApBJ,EAAMK,WAVdN,EAAAA,QAAcO,4BACNL,EAAAA,QAAaM,kBAKbN,IAJJE,GAAWA,aAAAC,IACPF,EAAOM,GAAKlB,SAAEmB,UACdN,EAAA,MAEAF,EAQAE,CACAA,IAAAA,EAAAA,EAAAK,GAAAE,SACHA,EAAAC,OAAAX,GACDU,EAAKP,iCAVJA,EAAA,IAAAC,GACGD,KAAAA,KAAAA,KACAC,MAAAA,IAUIhC,KAAAA,cAAM4B,EAAK5B,MADsB+B,EAEjCH,IAAAA,EAAOA,EAAAA,GAOfY,EATI,IAAAC,EAAAC,QAAAC,eAIHC,gBAAMA,EACHhB,MAAAA,EACAU,SAAAA,KACAA,WAAAA,IAEC3B,IAEL,OADAmB,EAAAJ,OAAIkB,EAAAA,QAAAA,EAAkBb,qBACtBA,GAGIc,cAAAA,SAAUC,GACVjB,IAGJC,EAAeiB,IAHClB,EAAAA,WAJhBmB,EAAAN,QAAAO,6BAMAD,EAAAN,QAASQ,qBAETlD,KAAAD,KAAOgC,KA/EqBe,OAAAA,IAkFhCK,EAAe,IAAAV,EAAAC,QAAAU,gBACXN,OAAId,EAGJY,gBAAIb,EAAmBC,GACnBhC,SAAMD,OAD+BA,KAAtBa,YAAnBkC,EAAA3B,MAAAkC,EAIAtD,KAAAO,UAAI+C,OACAP,EAAAA,IAAQA,OADkCf,EAAAuB,sBAK9CC,sBAAK3C,WACL4C,EAAAd,QAAAe,KAAA1D,KAAKO,YAAL,SACI+C,GAjGwBA,EAAAK,0BAuGxBL,iBAAAA,SAAWK,GADf3D,KAAAC,KAAA2D,iBAAAb,EAAA3B,MAtG4BoB,OAAAO","file":"../../../scripts/mvc/workflow/workflow-view-node.js","sourcesContent":["import _ from \"libs/underscore\";\nimport TerminalViews from \"mvc/workflow/workflow-view-terminals\";\nimport DataViews from \"mvc/workflow/workflow-view-data\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        this.node = options.node;\n        this.output_width = Math.max(150, this.$el.width());\n        this.tool_body = this.$el.find(\".toolFormBody\");\n        this.tool_body.find(\"div\").remove();\n        this.newInputsDiv().appendTo(this.tool_body);\n        this.terminalViews = {};\n        this.outputViews = {};\n    },\n\n    render: function() {\n        this.renderToolLabel();\n        this.renderToolErrors();\n        this.$el.css(\n            \"width\",\n            Math.min(250, Math.max(this.$el.width(), this.output_width))\n        );\n    },\n\n    renderToolLabel: function() {\n        this.$(\".nodeTitle\").text(this.node.label || this.node.name);\n    },\n\n    renderToolErrors: function() {\n        this.node.errors\n            ? this.$el.addClass(\"tool-node-error\")\n            : this.$el.removeClass(\"tool-node-error\");\n    },\n\n    newInputsDiv: function() {\n        return $(\"<div/>\").addClass(\"inputs\");\n    },\n\n    updateMaxWidth: function(newWidth) {\n        this.output_width = Math.max(this.output_width, newWidth);\n    },\n\n    addRule: function() {\n        this.tool_body.append($(\"<div/>\").addClass(\"rule\"));\n    },\n\n    addDataInput: function(input, body) {\n        var skipResize = true;\n        if (!body) {\n            body = this.$(\".inputs\");\n            // initial addition to node - resize input to help calculate node\n            // width.\n            skipResize = false;\n        }\n        var terminalView = this.terminalViews[input.name];\n        var terminalViewClass =\n            input.input_type == \"dataset_collection\"\n                ? TerminalViews.InputCollectionTerminalView\n                : TerminalViews.InputTerminalView;\n        if (terminalView && !(terminalView instanceof terminalViewClass)) {\n            terminalView.el.terminal.destroy();\n            terminalView = null;\n        }\n        if (!terminalView) {\n            terminalView = new terminalViewClass({\n                node: this.node,\n                input: input\n            });\n        } else {\n            var terminal = terminalView.el.terminal;\n            terminal.update(input);\n            terminal.destroyInvalidConnections();\n        }\n        this.terminalViews[input.name] = terminalView;\n        var terminalElement = terminalView.el;\n        var inputView = new DataViews.DataInputView({\n            terminalElement: terminalElement,\n            input: input,\n            nodeView: this,\n            skipResize: skipResize\n        });\n        var ib = inputView.$el;\n        body.append(ib.prepend(terminalView.terminalElements()));\n        return terminalView;\n    },\n\n    addDataOutput: function(output) {\n        var terminalViewClass = output.collection\n            ? TerminalViews.OutputCollectionTerminalView\n            : TerminalViews.OutputTerminalView;\n        var terminalView = new terminalViewClass({\n            node: this.node,\n            output: output\n        });\n        var outputView = new DataViews.DataOutputView({\n            output: output,\n            terminalElement: terminalView.el,\n            nodeView: this\n        });\n        this.outputViews[output.name] = outputView;\n        this.tool_body.append(\n            outputView.$el.append(terminalView.terminalElements())\n        );\n    },\n\n    redrawWorkflowOutputs: function() {\n        _.each(this.outputViews, function(outputView) {\n            outputView.redrawWorkflowOutput();\n        });\n    },\n\n    updateDataOutput: function(output) {\n        var outputTerminal = this.node.output_terminals[output.name];\n        outputTerminal.update(output);\n    }\n});\n"]}