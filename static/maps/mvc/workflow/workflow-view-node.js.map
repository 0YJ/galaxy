{"version":3,"sources":["mvc/workflow/workflow-view-node.js"],"names":["_","Backbone","View","extend","initialize","options","this","node","output_width","Math","max","$el","width","tool_body","find","remove","newInputsDiv","appendTo","terminalViews","outputViews","render","renderToolLabel","renderToolErrors","css","min","$","text","label","name","errors","addClass","removeClass","newWidth","addRule","addDataInput","input","body","skipResize","terminalViewClass","input_type","_workflowViewTerminals2","default","InputCollectionTerminalView","InputTerminalView","terminalView","el","terminal","destroy","update","updateMaxWidth","ib","DataInputView","terminalElement","nodeView","append","output","collection","outputView","destroyInvalidConnections","inputView","redrawWorkflowOutputs","each","redrawWorkflowOutput","addDataOutput"],"mappings":"uRAAYA,qLAGGC,SAASC,KAAKC,QACzBC,WAAY,SAASC,GACjBC,KAAKC,KAAOF,EAAQE,KACpBD,KAAKE,aAAeC,KAAKC,IAAI,IAAKJ,KAAKK,IAAIC,SANvCZ,KAOCa,UAAYP,KAAKK,IAAIG,KAAK,iBAC/BR,KAAKO,UAAUC,KAAK,OAAOC,SAC3BT,KAAKU,eAAeC,SAASX,KAAKO,WAClCP,KAAKY,iBACLZ,KAAKa,gBAGTC,OAAQ,WACJd,KAAKe,kBACLf,KAAKgB,mBACLhB,KAAKK,IAAIY,IACL,QACAd,KAAKe,IAAI,IAAKf,KAAKC,IAAIJ,KAAKK,IAAIC,QAASN,KAAKE,iBAItDa,gBAAiB,WACbf,KAAKmB,EAAE,cAAcC,KAAKpB,KAAKC,KAAKoB,OAASrB,KAAKC,KAAKqB,OAG3DN,iBAAkB,WACdhB,KAAKC,KAAKsB,OACJvB,KAAKK,IAAImB,SAAS,mBAClBxB,KAAKK,IAAIoB,YAAY,oBAG/Bf,aAAc,WACV,OAAOS,EAAE,UAAUK,SAAS,WA9BhC1B,eAAY,SAAA4B,GACR1B,KAAAE,aAAYH,KAAQE,IAApBD,KAAAE,aAAAwB,IAGAC,QAAA,WACA3B,KAAAO,UAAKG,OAALS,EAAoBR,UAASa,SAAKjB,UAGrCqB,aAT+B,SAAAC,EAAAC,GA2C5B,IAAIC,GAAa,EAhCrBjB,IACIgB,EAAKf,KAAAA,EAAAA,WAZuBgB,GAAA,GAoBhChB,IAAAA,EAAiBf,KAAAY,cAAAiB,EAAWP,MACxBU,EArB4B,sBAAAH,EAAAI,WAqDlBC,EAAAC,QAAcC,4BA7B5BpB,EAAAA,QAAkBqB,kBAOd,IANAC,GAAAA,aACwBN,IA1BIM,EAAAC,GAAAC,SAAAC,UAyDxBH,EAAe,MA1BnBA,EA/B4B,CAiExB,IAAIE,EAAWF,EAAaC,GAAGC,SA3BvCb,EAASe,OAAAb,GACLW,EAAKjC,iCAvCuB+B,EAAA,IAAAN,GA6DpB/B,KAAMD,KAAKC,KA3BvB0C,MAAAA,IAmCI3C,KAAKY,cAAciB,EAAMP,MAAQgB,EA3BrCV,IAAAA,EAAcU,EAAAC,GAOTK,EANGb,IAAAA,EAAAA,QAAJc,eACAC,gBAAWA,EACPhB,MAAAA,EACAiB,SAAA/C,KACA+B,WAAAA,IAEH1B,IAED,OADAyB,EAAAkB,OAAIV,EAAAA,QAAeA,EAAK1B,qBACxB0B,GAMIA,cAAAA,SAAAA,GACH,IAGOrC,EAAM,IAHbgD,EAAAC,WACDhB,EAAAC,QAAKG,6BACDA,EAAAA,QAAAA,qBAEIT,KAAAA,KAAAA,KAFiCoB,OAArCA,IAKAE,EAAIX,IAAAA,EAAAA,QAAWF,gBACfE,OAAAA,EACAA,gBAASY,EAAAA,GACZL,SAAA/C,OAEDA,KAAAa,YAAIiC,EAAAA,MAAkBR,EACtBtC,KAAAO,UAAI8C,OACAP,EAAAA,IAAAA,OAAiBA,EAAAA,sBADuBQ,sBAA5C,WAMA5D,EAAA6D,KAAAvD,KAAI4C,YAAevC,SAAAA,GACnByB,EAAA0B,0BAIJC,iBAAAA,SAAeR,GACPjB,KAAAA,KAAoBiB,iBAClBA,EAAA3B,MAEFgB,OAAAA","file":"../../../scripts/mvc/workflow/workflow-view-node.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport TerminalViews from \"mvc/workflow/workflow-view-terminals\";\nimport DataViews from \"mvc/workflow/workflow-view-data\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        this.node = options.node;\n        this.output_width = Math.max(150, this.$el.width());\n        this.tool_body = this.$el.find(\".toolFormBody\");\n        this.tool_body.find(\"div\").remove();\n        this.newInputsDiv().appendTo(this.tool_body);\n        this.terminalViews = {};\n        this.outputViews = {};\n    },\n\n    render: function() {\n        this.renderToolLabel();\n        this.renderToolErrors();\n        this.$el.css(\n            \"width\",\n            Math.min(250, Math.max(this.$el.width(), this.output_width))\n        );\n    },\n\n    renderToolLabel: function() {\n        this.$(\".nodeTitle\").text(this.node.label || this.node.name);\n    },\n\n    renderToolErrors: function() {\n        this.node.errors\n            ? this.$el.addClass(\"tool-node-error\")\n            : this.$el.removeClass(\"tool-node-error\");\n    },\n\n    newInputsDiv: function() {\n        return $(\"<div/>\").addClass(\"inputs\");\n    },\n\n    updateMaxWidth: function(newWidth) {\n        this.output_width = Math.max(this.output_width, newWidth);\n    },\n\n    addRule: function() {\n        this.tool_body.append($(\"<div/>\").addClass(\"rule\"));\n    },\n\n    addDataInput: function(input, body) {\n        var skipResize = true;\n        if (!body) {\n            body = this.$(\".inputs\");\n            // initial addition to node - resize input to help calculate node\n            // width.\n            skipResize = false;\n        }\n        var terminalView = this.terminalViews[input.name];\n        var terminalViewClass =\n            input.input_type == \"dataset_collection\"\n                ? TerminalViews.InputCollectionTerminalView\n                : TerminalViews.InputTerminalView;\n        if (terminalView && !(terminalView instanceof terminalViewClass)) {\n            terminalView.el.terminal.destroy();\n            terminalView = null;\n        }\n        if (!terminalView) {\n            terminalView = new terminalViewClass({\n                node: this.node,\n                input: input\n            });\n        } else {\n            var terminal = terminalView.el.terminal;\n            terminal.update(input);\n            terminal.destroyInvalidConnections();\n        }\n        this.terminalViews[input.name] = terminalView;\n        var terminalElement = terminalView.el;\n        var inputView = new DataViews.DataInputView({\n            terminalElement: terminalElement,\n            input: input,\n            nodeView: this,\n            skipResize: skipResize\n        });\n        var ib = inputView.$el;\n        body.append(ib.prepend(terminalView.terminalElements()));\n        return terminalView;\n    },\n\n    addDataOutput: function(output) {\n        var terminalViewClass = output.collection\n            ? TerminalViews.OutputCollectionTerminalView\n            : TerminalViews.OutputTerminalView;\n        var terminalView = new terminalViewClass({\n            node: this.node,\n            output: output\n        });\n        var outputView = new DataViews.DataOutputView({\n            output: output,\n            terminalElement: terminalView.el,\n            nodeView: this\n        });\n        this.outputViews[output.name] = outputView;\n        this.tool_body.append(\n            outputView.$el.append(terminalView.terminalElements())\n        );\n    },\n\n    redrawWorkflowOutputs: function() {\n        _.each(this.outputViews, outputView => {\n            outputView.redrawWorkflowOutput();\n        });\n    },\n\n    updateDataOutput: function(output) {\n        var outputTerminal = this.node.output_terminals[output.name];\n        outputTerminal.update(output);\n    }\n});\n"]}