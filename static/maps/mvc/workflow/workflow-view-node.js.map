{"version":3,"sources":["mvc/workflow/workflow-view-node.js"],"names":["define","_","TerminalViews","options","Backbone","output_width","initialize","tool_body","this","node","newInputsDiv","appendTo","width","terminalViews","$el","find","outputViews","remove","render","renderToolLabel","renderToolErrors","Math","min","max","$","text","label","name","errors","updateMaxWidth","addClass","addRule","append","addDataInput","newWidth","skipResize","terminalView","input","terminalViewClass","el","input_type","InputCollectionTerminalView","terminal","terminalElement","inputView","update","destroyInvalidConnections","nodeView","output","collection","DataViews","DataInputView","outputView","body","ib","prepend","terminalElements","addDataOutput","redrawWorkflowOutputs","redrawWorkflowOutput","outputTerminal","output_terminals","each","updateDataOutput"],"mappings":"kCAAAA,QAEQ,kBAFRA,uCAOQ,mCAEQ,SAAAC,EAAAC,EAAYC,GACZ,OAAAC,SAAKC,KAAAA,QACLC,WAAKC,SAAYJ,GACjBK,KAAKD,KAAAA,EAAeE,KACpBD,KAAKE,aAAeC,KAAAA,IAAS,IAAKJ,KAAAA,IAAlCK,SACAJ,KAAKK,UAAAA,KAAgBC,IAArBC,KAAA,iBACAP,KAAKQ,UAAAA,KAAc,OAAnBC,SARoBT,KAAAE,eAAAC,SAAAH,KAAAD,WAOpBC,KAAKK,iBAITK,KAAQF,gBAGJE,OAAA,WAdoBV,KAAAW,kBAapBX,KAAKY,mBAOTD,KAAAA,IAAAA,IACI,QArBoBE,KAAAC,IAAA,IAAAD,KAAAE,IAAAf,KAAAM,IAAAF,QAAAJ,KAAAH,iBA4BvBc,gBA5BuB,WAqBpBX,KAAKgB,EAAE,cAAcC,KAAKjB,KAAKC,KAAKiB,OAASlB,KAAKC,KAAKkB,OAW1DP,iBAhCuB,WAyBpBZ,KAAKC,KAAKmB,OASdC,KAAAA,IAAgBC,SAAA,mBACPzB,KAAAA,IAAAA,YAAoBkB,oBAG7BQ,aAAS,WACL,OAAKxB,EAAAA,UAAUyB,SAAS,WAG5BC,eAAc,SAAAC,GACV1B,KAAI2B,aAAad,KAAjBE,IAAAf,KAAAH,aAAA6B,IAGIH,QAAA,WACAvB,KAAAD,UAAAyB,OAAAR,EAAA,UAAAM,SAAA,UAGJG,aAAIG,SAAeC,EAAKxB,GACxB,IAAIyB,GAAAA,EAKAF,IAGAA,EAAAA,KAAAA,EAAaG,WAGbJ,GAAJ,GAEQ1B,IAAAA,EAAWA,KADsBI,cAAAwB,EAAAV,MAEjCU,EAFJ,sBAAqCA,EAArCG,WAIGtC,EAAAuC,4BACCC,EAAWN,kBAQfC,IANAK,GACHN,aAAAE,IAEGK,EAAAA,GAAAA,SAAkBP,UAClBQ,EAAY,MAEZP,EAKCL,CACL,IAAOI,EAAPA,EAAAG,GAAAG,SAlFoBA,EAAAG,OAAAR,GAsEhBK,EAASI,iCAOTC,EAHwC,IAAAT,GAIxCH,KAAAA,KAAYA,KAJhBE,MAAAA,IAYA7B,KAAI8B,cAAAA,EAAoBU,MAAOC,EAG/B,IAAIb,EAAeA,EAAIE,GAOnBS,EANWtC,IAD0ByC,EAAAC,eAErCH,gBAAQA,EAFZX,MAAAA,EAIIe,SAAAA,KACAJ,WAAQA,IAEElC,IAEd,OAL8CuC,EAA9CrB,OAAAsB,EAAAC,QAAAnB,EAAAoB,qBAKKxC,GAbTyC,cAAe,SAAST,GAmBxBU,IACItB,EAAA,IADmBY,EAAAC,WACnB/C,EAAYc,6BACRoC,EAAWO,qBA1GKlD,KAAAD,KAAAC,KA2FhBuC,OAAQA,IAoBRY,EAAAA,IAAiBV,EAAUW,gBAC/BD,OAAAA,EACHjB,gBAAAP,EAAAG,GAjHLQ,SAAAvC,OAkGQA,KAAKQ,YAAYgC,EAAOrB,MAAQyB,EAChC5C,KAAKD,UAAUyB,OACXoB,EAAWtC,IAAIkB,OAAOI,EAAaoB,sBAI3CE,sBAAuB,WACnBzD,EAAE6D,KAAKtD,KAAKQ,YAAa,SAASoC,GAC9BA,EAAWO,0BAInBI,iBAAkB,SAASf,GACFxC,KAAKC,KAAKoD,iBAAiBb,EAAOrB,MACxCkB,OAAOG","file":"../../../scripts/mvc/workflow/workflow-view-node.js","sourcesContent":["define(\n    [\n        \"libs/underscore\",\n        \"mvc/workflow/workflow-view-terminals\",\n        \"mvc/workflow/workflow-view-data\"\n    ],\n    function(_, TerminalViews, DataViews) {\n        return Backbone.View.extend({\n            initialize: function(options) {\n                this.node = options.node;\n                this.output_width = Math.max(150, this.$el.width());\n                this.tool_body = this.$el.find(\".toolFormBody\");\n                this.tool_body.find(\"div\").remove();\n                this.newInputsDiv().appendTo(this.tool_body);\n                this.terminalViews = {};\n                this.outputViews = {};\n            },\n\n            render: function() {\n                this.renderToolLabel();\n                this.renderToolErrors();\n                this.$el.css(\n                    \"width\",\n                    Math.min(250, Math.max(this.$el.width(), this.output_width))\n                );\n            },\n\n            renderToolLabel: function() {\n                this.$(\".nodeTitle\").text(this.node.label || this.node.name);\n            },\n\n            renderToolErrors: function() {\n                this.node.errors\n                    ? this.$el.addClass(\"tool-node-error\")\n                    : this.$el.removeClass(\"tool-node-error\");\n            },\n\n            newInputsDiv: function() {\n                return $(\"<div/>\").addClass(\"inputs\");\n            },\n\n            updateMaxWidth: function(newWidth) {\n                this.output_width = Math.max(this.output_width, newWidth);\n            },\n\n            addRule: function() {\n                this.tool_body.append($(\"<div/>\").addClass(\"rule\"));\n            },\n\n            addDataInput: function(input, body) {\n                var skipResize = true;\n                if (!body) {\n                    body = this.$(\".inputs\");\n                    // initial addition to node - resize input to help calculate node\n                    // width.\n                    skipResize = false;\n                }\n                var terminalView = this.terminalViews[input.name];\n                var terminalViewClass =\n                    input.input_type == \"dataset_collection\"\n                        ? TerminalViews.InputCollectionTerminalView\n                        : TerminalViews.InputTerminalView;\n                if (\n                    terminalView &&\n                    !(terminalView instanceof terminalViewClass)\n                ) {\n                    terminalView.el.terminal.destroy();\n                    terminalView = null;\n                }\n                if (!terminalView) {\n                    terminalView = new terminalViewClass({\n                        node: this.node,\n                        input: input\n                    });\n                } else {\n                    var terminal = terminalView.el.terminal;\n                    terminal.update(input);\n                    terminal.destroyInvalidConnections();\n                }\n                this.terminalViews[input.name] = terminalView;\n                var terminalElement = terminalView.el;\n                var inputView = new DataViews.DataInputView({\n                    terminalElement: terminalElement,\n                    input: input,\n                    nodeView: this,\n                    skipResize: skipResize\n                });\n                var ib = inputView.$el;\n                body.append(ib.prepend(terminalView.terminalElements()));\n                return terminalView;\n            },\n\n            addDataOutput: function(output) {\n                var terminalViewClass = output.collection\n                    ? TerminalViews.OutputCollectionTerminalView\n                    : TerminalViews.OutputTerminalView;\n                var terminalView = new terminalViewClass({\n                    node: this.node,\n                    output: output\n                });\n                var outputView = new DataViews.DataOutputView({\n                    output: output,\n                    terminalElement: terminalView.el,\n                    nodeView: this\n                });\n                this.outputViews[output.name] = outputView;\n                this.tool_body.append(\n                    outputView.$el.append(terminalView.terminalElements())\n                );\n            },\n\n            redrawWorkflowOutputs: function() {\n                _.each(this.outputViews, function(outputView) {\n                    outputView.redrawWorkflowOutput();\n                });\n            },\n\n            updateDataOutput: function(output) {\n                var outputTerminal = this.node.output_terminals[output.name];\n                outputTerminal.update(output);\n            }\n        });\n    }\n);\n"]}