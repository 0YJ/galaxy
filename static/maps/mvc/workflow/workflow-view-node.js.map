{"version":3,"sources":["mvc/workflow/workflow-view-node.js"],"names":["define","_","TerminalViews","DataViews","Backbone","View","extend","initialize","options","this","node","output_width","Math","max","$el","width","tool_body","find","remove","newInputsDiv","appendTo","terminalViews","outputViews","render","renderToolLabel","renderToolErrors","css","min","$","text","label","name","errors","addClass","removeClass","updateMaxWidth","newWidth","addRule","append","addDataInput","input","body","skipResize","terminalView","terminalViewClass","input_type","InputCollectionTerminalView","InputTerminalView","el","terminal","destroy","update","destroyInvalidConnections","terminalElement","inputView","DataInputView","nodeView","ib","prepend","terminalElements","addDataOutput","output","OutputCollectionTerminalView","OutputTerminalView","outputView","DataOutputView","redrawWorkflowOutputs","each","redrawWorkflowOutput","updateDataOutput","output_terminals"],"mappings":"AAAAA,QAAQ,kBAAmB,uCAAwC,mCAAoC,SAAUC,EAAGC,EAAeC,GAC/H,MAAOC,UAASC,KAAKC,QACjBC,WAAY,SAAUC,GAClBC,KAAKC,KAAOF,EAAQE,KACpBD,KAAKE,aAAeC,KAAKC,IAAK,IAAKJ,KAAKK,IAAIC,SAC5CN,KAAKO,UAAYP,KAAKK,IAAIG,KAAM,iBAChCR,KAAKO,UAAUC,KAAM,OAAQC,SAC7BT,KAAKU,eAAeC,SAAUX,KAAKO,WACnCP,KAAKY,iBACLZ,KAAKa,gBAGTC,OAAQ,WACJd,KAAKe,kBACLf,KAAKgB,mBACLhB,KAAKK,IAAIY,IAAK,QAASd,KAAKe,IAAK,IAAKf,KAAKC,IAAKJ,KAAKK,IAAIC,QAASN,KAAKE,iBAG3Ea,gBAAiB,WACbf,KAAKmB,EAAG,cAAeC,KAAMpB,KAAKC,KAAKoB,OAASrB,KAAKC,KAAKqB,OAG9DN,iBAAkB,WACdhB,KAAKC,KAAKsB,OAASvB,KAAKK,IAAImB,SAAU,mBAAsBxB,KAAKK,IAAIoB,YAAa,oBAGtFf,aAAc,WACV,MAAOS,GAAG,UAAWK,SAAU,WAGnCE,eAAgB,SAAUC,GACtB3B,KAAKE,aAAeC,KAAKC,IAAKJ,KAAKE,aAAcyB,IAGrDC,QAAS,WACL5B,KAAKO,UAAUsB,OAAQV,EAAG,UAAWK,SAAU,UAGnDM,aAAc,SAAUC,EAAOC,GAC3B,GAAIC,IAAa,CACZD,KACDA,EAAOhC,KAAKmB,EAAG,WAGfc,GAAa,EAEjB,IAAIC,GAAelC,KAAKY,cAAemB,EAAMT,MACzCa,EAA0C,sBAApBJ,EAAMK,WAAuC3C,EAAc4C,4BAA8B5C,EAAc6C,iBAKjI,KAJIJ,GAAmBA,YAAwBC,KAC3CD,EAAaK,GAAGC,SAASC,UACzBP,EAAe,MAEdA,EAKE,CACH,GAAIM,GAAWN,EAAaK,GAAGC,QAC/BA,GAASE,OAAQX,GACjBS,EAASG,gCAPTT,GAAe,GAAIC,IACflC,KAAMD,KAAKC,KACX8B,MAAOA,GAOf/B,MAAKY,cAAemB,EAAMT,MAASY,CACnC,IAAIU,GAAkBV,EAAaK,GAC/BM,EAAY,GAAInD,GAAUoD,eAC1BF,gBAAiBA,EACjBb,MAAOA,EACPgB,SAAU/C,KACViC,WAAYA,IAEZe,EAAKH,EAAUxC,GAEnB,OADA2B,GAAKH,OAAQmB,EAAGC,QAASf,EAAagB,qBAC/BhB,GAGXiB,cAAe,SAAUC,GACrB,GAAIjB,GAAsBiB,EAAkB,WAAI3D,EAAc4D,6BAA+B5D,EAAc6D,mBACvGpB,EAAe,GAAIC,IACnBlC,KAAMD,KAAKC,KACXmD,OAAQA,IAERG,EAAa,GAAI7D,GAAU8D,gBAC3BJ,OAAUA,EACVR,gBAAmBV,EAAaK,GAChCQ,SAAY/C,MAEhBA,MAAKa,YAAauC,EAAO9B,MAASiC,EAClCvD,KAAKO,UAAUsB,OAAQ0B,EAAWlD,IAAIwB,OAAQK,EAAagB,sBAG/DO,sBAAuB,WACnBjE,EAAEkE,KAAM1D,KAAKa,YAAa,SAAU0C,GAChCA,EAAWI,0BAInBC,iBAAkB,SAAUR,GACHpD,KAAKC,KAAK4D,iBAAkBT,EAAO9B,MACzCoB,OAAQU","file":"../../../scripts/mvc/workflow/workflow-view-node.js","sourcesContent":["define(['libs/underscore', 'mvc/workflow/workflow-view-terminals', 'mvc/workflow/workflow-view-data'], function( _, TerminalViews, DataViews ) {\n    return Backbone.View.extend( {\n        initialize: function( options ){\n            this.node = options.node;\n            this.output_width = Math.max( 150, this.$el.width() );\n            this.tool_body = this.$el.find( '.toolFormBody' );\n            this.tool_body.find( 'div' ).remove();\n            this.newInputsDiv().appendTo( this.tool_body );\n            this.terminalViews = {};\n            this.outputViews = {};\n        },\n\n        render: function() {\n            this.renderToolLabel();\n            this.renderToolErrors();\n            this.$el.css( 'width', Math.min( 250, Math.max( this.$el.width(), this.output_width ) ) );\n        },\n\n        renderToolLabel: function() {\n            this.$( '.nodeTitle' ).text( this.node.label || this.node.name );\n        },\n\n        renderToolErrors: function() {\n            this.node.errors ? this.$el.addClass( 'tool-node-error' ) : this.$el.removeClass( 'tool-node-error' );\n        },\n\n        newInputsDiv: function() {\n            return $( '<div/>' ).addClass( 'inputs' );\n        },\n\n        updateMaxWidth: function( newWidth ) {\n            this.output_width = Math.max( this.output_width, newWidth );\n        },\n\n        addRule: function() {\n            this.tool_body.append( $( '<div/>' ).addClass( 'rule' ) );\n        },\n\n        addDataInput: function( input, body ) {\n            var skipResize = true;\n            if( !body ) {\n                body = this.$( '.inputs' );\n                // initial addition to node - resize input to help calculate node\n                // width.\n                skipResize = false;\n            }\n            var terminalView = this.terminalViews[ input.name ];\n            var terminalViewClass = ( input.input_type == 'dataset_collection' ) ? TerminalViews.InputCollectionTerminalView : TerminalViews.InputTerminalView;\n            if( terminalView && !( terminalView instanceof terminalViewClass ) ) {\n                terminalView.el.terminal.destroy();\n                terminalView = null;\n            }\n            if( !terminalView ) {\n                terminalView = new terminalViewClass( {\n                    node: this.node,\n                    input: input\n                } );             \n            } else {\n                var terminal = terminalView.el.terminal;\n                terminal.update( input );\n                terminal.destroyInvalidConnections();\n            }\n            this.terminalViews[ input.name ] = terminalView;\n            var terminalElement = terminalView.el;\n            var inputView = new DataViews.DataInputView( {\n                terminalElement: terminalElement,\n                input: input, \n                nodeView: this,\n                skipResize: skipResize\n            } );\n            var ib = inputView.$el;\n            body.append( ib.prepend( terminalView.terminalElements() ) );\n            return terminalView;\n        },\n\n        addDataOutput: function( output ) {\n            var terminalViewClass = ( output.collection ) ? TerminalViews.OutputCollectionTerminalView : TerminalViews.OutputTerminalView;\n            var terminalView = new terminalViewClass( {\n                node: this.node,\n                output: output\n            } );\n            var outputView = new DataViews.DataOutputView( {\n                'output': output,\n                'terminalElement': terminalView.el,\n                'nodeView': this,\n            } );\n            this.outputViews[ output.name ] = outputView;\n            this.tool_body.append( outputView.$el.append( terminalView.terminalElements() ) );\n        },\n\n        redrawWorkflowOutputs: function() {\n            _.each( this.outputViews, function( outputView ) {\n                outputView.redrawWorkflowOutput();\n            });\n        },\n\n        updateDataOutput: function( output ) {\n            var outputTerminal = this.node.output_terminals[ output.name ];\n            outputTerminal.update( output );\n        }\n    });\n});"]}