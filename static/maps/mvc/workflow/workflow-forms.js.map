{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["define","Utils","Form","ToolFormBase","_addLabelAnnotation","form","options","model","workflow","node","type","name","label","fixed","annotation","value","area","inputs","unshift","help","new_label","onchange","duplicate","nodes","n","i","id","input_id","data","match","input_element","element_list","_addSections","visit","head","head_list","push","input","action","output_id","pja_arg","payload","p_id","d","post_job_actions","j","action_arguments","slice","attributes","datatypes","Object","keys","output_terminals","String","Boolean","ignore","window","location","host","extensions","input_terminal_names","key","1","input_terminals","sort","a","b","output","input_config","title","flat","getWorkflowOutput","new_value","attemptUpdateOutputLabel","join","Default","Backbone","View","extend","initialize","this","self","merge","request","Galaxy","root","url","content_id","create","update_field_data","render","Tool","text_disable","text_enable","narrow","initial_errors","process","cls","_customize","initialmodel","resolve","get","postchange","current_state","version","tool_id","tool_version","$","debug","config_form","success","set","emit","response","error","reject","info","indexOf","textify","__class__","is_workflow","length","deepeach","collapsible_value","undefined"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["define( [ 'utils/utils', 'mvc/form/form-view', 'mvc/tool/tool-form-base' ], function( Utils, Form, ToolFormBase ) {\n\n    /** Default form wrapper for non-tool modules in the workflow editor. */\n    var Default = Backbone.View.extend({\n        initialize: function( options ) {\n            var self  = this;\n            var node  = options.node;\n            this.form = new Form( Utils.merge( options, {\n                 onchange: function() {\n                    Utils.request({\n                        type    : 'POST',\n                        url     :  Galaxy.root + 'api/workflows/build_module',\n                        data    : {\n                            id          : node.id,\n                            type        : node.type,\n                            content_id  : node.content_id,\n                            inputs      : self.form.data.create()\n                        },\n                        success : function( data ) {\n                            node.update_field_data( data );\n                        }\n                    } );\n                }\n            } ) );\n            _addLabelAnnotation( this.form );\n            this.form.render();\n        }\n    });\n\n    /** Tool form wrapper for the workflow editor. */\n    var Tool = Backbone.View.extend({\n        initialize: function( options ) {\n            var self  = this;\n            var node  = options.node;\n            this.form = new ToolFormBase( Utils.merge( options, {\n                text_enable     : 'Set in Advance',\n                text_disable    : 'Set at Runtime',\n                narrow          : true,\n                initial_errors  : true,\n                cls             : 'ui-portlet-narrow',\n                initialmodel    : function( process, form ) {\n                    self._customize( form );\n                    process.resolve();\n                },\n                buildmodel      : function( process, form ) {\n                    form.model.get( 'postchange' )( process, form );\n                },\n                postchange      : function( process, form ) {\n                    var options = form.model.attributes;\n                    var current_state = {\n                        tool_id         : options.id,\n                        tool_version    : options.version,\n                        type            : 'tool',\n                        inputs          : $.extend( true, {}, form.data.create() )\n                    }\n                    Galaxy.emit.debug( 'tool-form-workflow::postchange()', 'Sending current state.', current_state );\n                    Utils.request({\n                        type    : 'POST',\n                        url     : Galaxy.root + 'api/workflows/build_module',\n                        data    : current_state,\n                        success : function( data ) {\n                            form.model.set( data.config_form );\n                            self._customize( form );\n                            form.update( data.config_form );\n                            form.errors( data.config_form );\n                            // This hasn't modified the workflow, just returned\n                            // module information for the tool to update the workflow\n                            // state stored on the client with. User needs to save\n                            // for this to take effect.\n                            node.update_field_data( data );\n                            Galaxy.emit.debug( 'tool-form-workflow::postchange()', 'Received new model.', data );\n                            process.resolve();\n                        },\n                        error   : function( response ) {\n                            Galaxy.emit.debug( 'tool-form-workflow::postchange()', 'Refresh request failed.', response );\n                            process.reject();\n                        }\n                    });\n                }\n            }));\n        },\n\n        _customize: function( form ) {\n            var options  = form.model.attributes;\n            Utils.deepeach( options.inputs, function( input ) {\n                if ( input.type ) {\n                    if ( [ 'data', 'data_collection' ].indexOf( input.type ) != -1 ) {\n                        input.type = 'hidden';\n                        input.info = 'Data input \\'' + input.name + '\\' (' + Utils.textify( input.extensions ) + ')';\n                        input.value = { '__class__': 'RuntimeValue' };\n                    } else if ( !input.fixed ) {\n                        input.collapsible_value = { '__class__': 'RuntimeValue' };\n                        input.is_workflow = ( input.options && input.options.length == 0 ) ||\n                                            ( [ 'integer', 'float' ].indexOf( input.type ) != -1 );\n                    }\n                }\n            });\n            Utils.deepeach( options.inputs, function( input ) {\n                input.type == 'conditional' && ( input.test_param.collapsible_value = undefined );\n            });\n            _addSections( form );\n            _addLabelAnnotation( form );\n        }\n    });\n\n    /** Augments the module form definition by adding label and annotation fields */\n    function _addLabelAnnotation ( form ) {\n        var options  = form.model.attributes;\n        var workflow = options.workflow;\n        var node     = options.node;\n        options.inputs.unshift({\n            type    : 'text',\n            name    : '__annotation',\n            label   : 'Annotation',\n            fixed   : true,\n            value   : node.annotation,\n            area    : true,\n            help    : 'Add an annotation or notes to this step. Annotations are available when a workflow is viewed.'\n        });\n        options.inputs.unshift({\n            type    : 'text',\n            name    : '__label',\n            label   : 'Label',\n            value   : node.label,\n            help    : 'Add a step label.',\n            fixed   : true,\n            onchange: function( new_label ) {\n                var duplicate = false;\n                for ( var i in workflow.nodes ) {\n                    var n = workflow.nodes[ i ];\n                    if ( n.label && n.label == new_label && n.id != node.id ) {\n                        duplicate = true;\n                        break;\n                    }\n                }\n                var input_id = form.data.match( '__label' );\n                var input_element = form.element_list[ input_id ];\n                input_element.model.set( 'error_text', duplicate && 'Duplicate label. Please fix this before saving the workflow.' );\n                form.trigger( 'change' );\n            }\n        });\n    }\n\n    /** Builds all sub sections */\n    function _addSections( form ) {\n        var options          = form.model.attributes;\n        var inputs           = options.inputs;\n        var datatypes        = options.datatypes;\n        var node             = options.node;\n        var workflow         = options.workflow;\n        var post_job_actions = node.post_job_actions;\n        var output_id        = node.output_terminals && Object.keys( node.output_terminals )[ 0 ];\n\n        /** Visit input nodes and enrich by name/value pairs from server data */\n        function visit( head, head_list ) {\n            head_list = head_list || [];\n            head_list.push( head );\n            for ( var i in head.inputs ) {\n                var input = head.inputs[ i ];\n                var action = input.action;\n                if ( action ) {\n                    input.name = 'pja__' + output_id + '__' + input.action;\n                    if ( input.pja_arg ) {\n                        input.name += '__' + input.pja_arg;\n                    }\n                    if ( input.payload ) {\n                        for ( var p_id in input.payload ) {\n                            input.payload[ input.name + '__' + p_id ] = input.payload[ p_id ];\n                            delete input.payload[ p_id ];\n                        }\n                    }\n                    var d = post_job_actions[ input.action + output_id ];\n                    if ( d ) {\n                        for ( var j in head_list ) {\n                            head_list[ j ].expanded = true;\n                        }\n                        if ( input.pja_arg ) {\n                            input.value = d.action_arguments && d.action_arguments[ input.pja_arg ] || input.value;\n                        } else {\n                            input.value = 'true';\n                        }\n                    }\n                }\n                input.inputs && visit( input, head_list.slice( 0 ) );\n            }\n        }\n\n        /** Builds sub section with step actions/annotation */\n        function _makeSection( output_id, datatypes ) {\n            var extensions = [];\n            var input_terminal_names = [];\n            for (var key in datatypes  ) {\n                extensions.push( { 0 : datatypes[ key ], 1 : datatypes[ key ] } );\n            }\n            for ( key in node.input_terminals ){\n                input_terminal_names.push( node.input_terminals[ key ].name );\n            }\n            extensions.sort( function( a, b ) {\n                return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n            });\n            extensions.unshift({\n                0 : 'Sequences',\n                1 : 'Sequences'\n            });\n            extensions.unshift({\n                0 : 'Roadmaps',\n                1 : 'Roadmaps'\n            });\n            extensions.unshift({\n                0 : 'Leave unchanged',\n                1 : '__empty__'\n            });\n            var output;\n            var input_config = {\n                title   : 'Configure Output: \\'' + output_id + '\\'',\n                type    : 'section',\n                flat    : true,\n                inputs  : [{\n                    label       : 'Label',\n                    type        : 'text',\n                    value       : ( output = node.getWorkflowOutput( output_id ) ) && output.label || '',\n                    help        : 'This will provide a short name to describe the output - this must be unique across workflows.',\n                    onchange    : function( new_value ) {\n                        workflow.attemptUpdateOutputLabel( node, output_id, new_value );\n                    }\n                },{\n                    action      : 'RenameDatasetAction',\n                    pja_arg     : 'newname',\n                    label       : 'Rename dataset',\n                    type        : 'text',\n                    value       : '',\n                    ignore      : '',\n                    help        : 'This action will rename the output dataset. Click <a href=\"https://galaxyproject.org/learn/advanced-workflow/variables/\">here</a> for more information. Valid inputs are: <strong>' + input_terminal_names.join(', ') + '</strong>.'\n                },{\n                    action      : 'ChangeDatatypeAction',\n                    pja_arg     : 'newtype',\n                    label       : 'Change datatype',\n                    type        : 'select',\n                    ignore      : '__empty__',\n                    value       : '__empty__',\n                    options     : extensions,\n                    help        : 'This action will change the datatype of the output to the indicated value.'\n                },{\n                    action      : 'TagDatasetAction',\n                    pja_arg     : 'tags',\n                    label       : 'Add Tags',\n                    type        : 'text',\n                    value       : '',\n                    ignore      : '',\n                    help        : 'This action will set tags for the dataset.'\n                },{\n                    action      : 'RemoveTagDatasetAction',\n                    pja_arg     : 'tags',\n                    label       : 'Remove Tags',\n                    type        : 'text',\n                    value       : '',\n                    ignore      : '',\n                    help        : 'This action will remove tags for the dataset.'\n                },{\n                    title   : 'Assign columns',\n                    type    : 'section',\n                    flat    : true,\n                    inputs  : [{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'chromCol',\n                        label       : 'Chrom column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'startCol',\n                        label       : 'Start column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'endCol',\n                        label       : 'End column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'strandCol',\n                        label       : 'Strand column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'nameCol',\n                        label       : 'Name column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    }],\n                    help    : 'This action will set column assignments in the output dataset. Blank fields are ignored.'\n                }]\n            };\n            visit( input_config );\n            return input_config;\n        }\n\n        if ( output_id ) {\n            inputs.push({\n                name        : 'pja__' + output_id + '__EmailAction',\n                label       : 'Email notification',\n                type        : 'boolean',\n                value       : String( Boolean( post_job_actions[ 'EmailAction' + output_id ] ) ),\n                ignore      : 'false',\n                help        : 'An email notification will be sent when the job has completed.',\n                payload     : {\n                    'host'  : window.location.host\n                }\n            });\n            inputs.push({\n                name        : 'pja__' + output_id + '__DeleteIntermediatesAction',\n                label       : 'Output cleanup',\n                type        : 'boolean',\n                value       : String( Boolean( post_job_actions[ 'DeleteIntermediatesAction' + output_id ] ) ),\n                ignore      : 'false',\n                help        : 'Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.'\n            });\n            for ( var i in node.output_terminals ) {\n                inputs.push( _makeSection( i, datatypes ) );\n            }\n        }\n    }\n\n    return {\n        Default: Default,\n        Tool: Tool\n    };\n});\n"]}