{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["define","Utils","Form","ToolFormBase","Default","Backbone","View","extend","initialize","options","this","form","Tool","self","workflow","node","post_job_actions","deepeach","inputs","input","type","indexOf","info","name","textify","extensions","value","__class__","fixed","collapsible_value","is_workflow","length","test_param","undefined","_makeSections","merge","text_enable","text_disable","narrow","initial_errors","sustain_version","cls","postchange","process","model","attributes","current_state","tool_id","id","tool_version","version","$","data","create","Galaxy","emit","debug","request","url","root","success","update","config_form","errors","update_field_data","resolve","error","response","reject","datatypes","output_id","output_terminals","Object","keys","push","label","String","Boolean","ignore","help","payload","host","window","location","i","_makeSection","visit","head","head_list","action","pja_arg","p_id","p","d","j","expanded","action_arguments","slice","input_terminal_names","key","0","1","input_terminals","sort","a","b","unshift","input_config","title","flat","output","getWorkflowOutput","onchange","new_value","attemptUpdateOutputLabel","join"],"mappings":"AAAAA,QAAU,cAAe,qBAAsB,2BAA6B,SAAUC,EAAOC,EAAMC,GA8P/F,OACIC,QA5PUC,SAASC,KAAKC,QACxBC,WAAY,SAAUC,GAClBC,KAAKC,KAAO,GAAIT,GAAMO,MA2P1BG,KAtPOP,SAASC,KAAKC,QACrBC,WAAY,SAAUC,GAClB,GAAII,GAAOH,IACXA,MAAKI,SAAWL,EAAQK,SACxBJ,KAAKK,KAAWN,EAAQM,KACnBL,KAAKK,MACNL,KAAKM,iBAAmBN,KAAKK,KAAKC,qBAClCf,EAAMgB,SAAUR,EAAQS,OAAQ,SAAUC,GACjCA,EAAMC,QACsD,IAAtD,OAAQ,mBAAoBC,QAASF,EAAMC,OAC9CD,EAAMC,KAAO,SACbD,EAAMG,KAAO,eAAkBH,EAAMI,KAAO,MAAStB,EAAMuB,QAASL,EAAMM,YAAe,IACzFN,EAAMO,OAAUC,UAAa,iBACpBR,EAAMS,QACfT,EAAMU,mBAAsBF,UAAa,gBACzCR,EAAMW,YAAgBX,EAAMV,SAAmC,GAAxBU,EAAMV,QAAQsB,SACkB,IAA/C,UAAW,SAAUV,QAASF,EAAMC,UAIxEnB,EAAMgB,SAAUR,EAAQS,OAAQ,SAAUC,GACxB,eAAdA,EAAMC,OAA2BD,EAAMa,WAAWH,sBAAoBI,MAE1EvB,KAAKwB,cAAezB,GACpBC,KAAKC,KAAO,GAAIR,GAAcF,EAAMkC,MAAO1B,GACvC2B,YAAkB,iBAClBC,aAAkB,iBAClBC,QAAkB,EAClBC,gBAAkB,EAClBC,iBAAkB,EAClBC,IAAkB,oBAClBC,WAAkB,SAAUC,EAAShC,GACjC,GAAIF,GAAUE,EAAKiC,MAAMC,WACrBC,GACAC,QAAkBtC,EAAQuC,GAC1BC,aAAkBxC,EAAQyC,QAC1B9B,KAAkB,OAClBF,OAAkBiC,EAAE5C,QAAQ,KAAUI,EAAKyC,KAAKC,UAEpDC,QAAOC,KAAKC,MAAO,mCAAoC,yBAA0BV,GACjF7C,EAAMwD,SACFrC,KAAU,OACVsC,IAAUJ,OAAOK,KAAO,6BACxBP,KAAUN,EACVc,QAAU,SAAUR,GAChBzC,EAAKkD,OAAQT,EAAKU,aAClBnD,EAAKoD,OAAQX,EAAKU,aAKlBjD,EAAKE,KAAKiD,kBAAmBZ,GAC7BE,OAAOC,KAAKC,MAAO,mCAAoC,sBAAuBJ,GAC9ET,EAAQsB,WAEZC,MAAU,SAAUC,GAChBb,OAAOC,KAAKC,MAAO,mCAAoC,0BAA2BW,GAClFxB,EAAQyB,iBAMxBd,OAAOC,KAAKC,MAAM,mCAAoC,gCAK9DtB,cAAe,SAAUzB,GACrB,GAAIS,GAAST,EAAQS,OACjBmD,EAAY5D,EAAQ4D,UACpBC,EAAY5D,KAAKK,KAAKwD,kBAAoBC,OAAOC,KAAM/D,KAAKK,KAAKwD,kBAAoB,EACzF,IAAKD,EAAY,CACbpD,EAAOwD,MACHnD,KAAc,QAAU+C,EAAY,gBACpCK,MAAc,qBACdvD,KAAc,UACdM,MAAckD,OAAQC,QAASnE,KAAKM,iBAAkB,cAAgBsD,KACtEQ,OAAc,QACdC,KAAc,iEACdC,SACIC,KAAUC,OAAOC,SAASF,QAGlC/D,EAAOwD,MACHnD,KAAc,QAAU+C,EAAY,8BACpCK,MAAc,iBACdvD,KAAc,UACdM,MAAckD,OAAQC,QAASnE,KAAKM,iBAAkB,4BAA8BsD,KACpFQ,OAAc,QACdC,KAAc,oIAElB,KAAM,GAAIK,KAAK1E,MAAKK,KAAKwD,iBACrBrD,EAAOwD,KAAMhE,KAAK2E,aAAcD,EAAGf,MAM/CgB,aAAc,SAAUf,EAAWD,GA2G/B,QAASiB,GAAQC,EAAMC,GACnBA,EAAYA,MACZA,EAAUd,KAAMa,EAChB,KAAM,GAAIH,KAAKG,GAAKrE,OAAS,CACzB,GAAIC,GAAQoE,EAAKrE,OAAQkE,EAEzB,IADajE,EAAMsE,OACL,CAKV,GAJAtE,EAAMI,KAAO,QAAU+C,EAAY,KAAOnD,EAAMsE,OAC3CtE,EAAMuE,UACPvE,EAAMI,MAAQ,KAAOJ,EAAMuE,SAE1BvE,EAAM6D,QACP,IAAM,GAAIW,KAAQxE,GAAM6D,QAAU,CAC9B,GAAIY,GAAIzE,EAAM6D,QAASW,EACvBxE,GAAM6D,QAAS7D,EAAMI,KAAO,KAAOoE,GAASC,QACrCA,GAGf,GAAIC,GAAIhF,EAAKG,iBAAkBG,EAAMsE,OAASnB,EAC9C,IAAKuB,EAAI,CACL,IAAM,GAAIC,KAAKN,GACXA,EAAWM,GAAIC,UAAW,CAEzB5E,GAAMuE,QACPvE,EAAMO,MAAQmE,EAAEG,kBAAoBH,EAAEG,iBAAkB7E,EAAMuE,UAAavE,EAAMO,MAEjFP,EAAMO,MAAQ,QAI1BP,EAAMD,QAAUoE,EAAOnE,EAAOqE,EAAUS,MAAO,KAxIvD,GAAIpF,GAAOH,KACPe,KACAyE,IACJ,KAAMC,MAAO9B,GACT5C,EAAWiD,MAAQ0B,EAAI/B,EAAW8B,KAAOE,EAAIhC,EAAW8B,MAE5D,KAAMA,MAAOzF,MAAKK,KAAKuF,gBACnBJ,EAAqBxB,KAAMhE,KAAKK,KAAKuF,gBAAiBH,KAAM5E,KAEhEE,GAAW8E,KAAM,SAAUC,EAAGC,GAC1B,MAAOD,GAAE7B,MAAQ8B,EAAE9B,MAAQ,EAAI6B,EAAE7B,MAAQ8B,EAAE9B,OAAS,EAAI,IAE5DlD,EAAWiF,SACPN,EAAI,YACJC,EAAI,cAER5E,EAAWiF,SACPN,EAAI,WACJC,EAAI,aAER5E,EAAWiF,SACPN,EAAI,kBACJC,EAAI,aAER,IAAIM,IACAC,MAAU,sBAAyBtC,EAAY,IAC/ClD,KAAU,UACVyF,MAAU,EACV3F,SACIyD,MAAc,QACdvD,KAAc,OACdM,OAAgBoF,OAASpG,KAAKK,KAAKgG,kBAAmBzC,KAAiBwC,OAAOnC,OAAS,GACvFI,KAAc,gGACdiC,SAAc,SAAUC,GACpBpG,EAAKC,SAASoG,yBAA0BrG,EAAKE,KAAMuD,EAAW2C,MAGlExB,OAAc,sBACdC,QAAc,UACdf,MAAc,iBACdvD,KAAc,OACdM,MAAc,GACdoD,OAAc,GACdC,KAAc,wLAA0LmB,EAAqBiB,KAAK,MAAQ,eAE1O1B,OAAc,uBACdC,QAAc,UACdf,MAAc,kBACdvD,KAAc,SACd0D,OAAc,YACdpD,MAAc,YACdjB,QAAcgB,EACdsD,KAAc,+EAEdU,OAAc,mBACdC,QAAc,OACdf,MAAc,OACdvD,KAAc,OACdM,MAAc,GACdoD,OAAc,GACdC,KAAc,+CAEd6B,MAAU,iBACVxF,KAAU,UACVyF,MAAU,EACV3F,SACIuE,OAAc,kBACdC,QAAc,WACdf,MAAc,eACdvD,KAAc,UACdM,MAAc,GACdoD,OAAc,KAEdW,OAAc,kBACdC,QAAc,WACdf,MAAc,eACdvD,KAAc,UACdM,MAAc,GACdoD,OAAc,KAEdW,OAAc,kBACdC,QAAc,SACdf,MAAc,aACdvD,KAAc,UACdM,MAAc,GACdoD,OAAc,KAEdW,OAAc,kBACdC,QAAc,YACdf,MAAc,gBACdvD,KAAc,UACdM,MAAc,GACdoD,OAAc,KAEdW,OAAc,kBACdC,QAAc,UACdf,MAAc,cACdvD,KAAc,UACdM,MAAc,GACdoD,OAAc,KAElBC,KAAU,6FAuClB,OADAO,GAAOqB,GACAA","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["define( [ 'utils/utils', 'mvc/form/form-view', 'mvc/tool/tool-form-base' ], function( Utils, Form, ToolFormBase ) {\n\n    /** Default form wrapper for non-tool modules in the workflow editor. */\n    var Default = Backbone.View.extend({\n        initialize: function( options ) {\n            this.form = new Form( options );\n        }\n    });\n\n    /** Tool form wrapper for the workflow editor. */\n    var Tool = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.workflow = options.workflow;\n            this.node     = options.node;\n            if ( this.node ) {\n                this.post_job_actions = this.node.post_job_actions || {};\n                Utils.deepeach( options.inputs, function( input ) {\n                    if ( input.type ) {\n                        if ( [ 'data', 'data_collection' ].indexOf( input.type ) != -1 ) {\n                            input.type = 'hidden';\n                            input.info = 'Data input \\'' + input.name + '\\' (' + Utils.textify( input.extensions ) + ')';\n                            input.value = { '__class__': 'RuntimeValue' };\n                        } else if ( !input.fixed ) {\n                            input.collapsible_value = { '__class__': 'RuntimeValue' };\n                            input.is_workflow = ( input.options && input.options.length == 0 ) ||\n                                                ( [ 'integer', 'float' ].indexOf( input.type ) != -1 );\n                        }\n                    }\n                });\n                Utils.deepeach( options.inputs, function( input ) {\n                    input.type == 'conditional' && ( input.test_param.collapsible_value = undefined );\n                });\n                this._makeSections( options );\n                this.form = new ToolFormBase( Utils.merge( options, {\n                    text_enable     : 'Set in Advance',\n                    text_disable    : 'Set at Runtime',\n                    narrow          : true,\n                    initial_errors  : true,\n                    sustain_version : true,\n                    cls             : 'ui-portlet-narrow',\n                    postchange      : function( process, form ) {\n                        var options = form.model.attributes;\n                        var current_state = {\n                            tool_id         : options.id,\n                            tool_version    : options.version,\n                            type            : 'tool',\n                            inputs          : $.extend( true, {}, form.data.create() )\n                        }\n                        Galaxy.emit.debug( 'tool-form-workflow::postchange()', 'Sending current state.', current_state );\n                        Utils.request({\n                            type    : 'POST',\n                            url     : Galaxy.root + 'api/workflows/build_module',\n                            data    : current_state,\n                            success : function( data ) {\n                                form.update( data.config_form );\n                                form.errors( data.config_form );\n                                // This hasn't modified the workflow, just returned\n                                // module information for the tool to update the workflow\n                                // state stored on the client with. User needs to save\n                                // for this to take effect.\n                                self.node.update_field_data( data );\n                                Galaxy.emit.debug( 'tool-form-workflow::postchange()', 'Received new model.', data );\n                                process.resolve();\n                            },\n                            error   : function( response ) {\n                                Galaxy.emit.debug( 'tool-form-workflow::postchange()', 'Refresh request failed.', response );\n                                process.reject();\n                            }\n                        });\n                    },\n                }));\n            } else {\n                Galaxy.emit.debug('tool-form-workflow::initialize()', 'Node not found in workflow.');\n            }\n        },\n\n        /** Builds all sub sections */\n        _makeSections: function( options ){\n            var inputs = options.inputs;\n            var datatypes = options.datatypes;\n            var output_id = this.node.output_terminals && Object.keys( this.node.output_terminals )[ 0 ];\n            if ( output_id ) {\n                inputs.push({\n                    name        : 'pja__' + output_id + '__EmailAction',\n                    label       : 'Email notification',\n                    type        : 'boolean',\n                    value       : String( Boolean( this.post_job_actions[ 'EmailAction' + output_id ] ) ),\n                    ignore      : 'false',\n                    help        : 'An email notification will be sent when the job has completed.',\n                    payload     : {\n                        'host'  : window.location.host\n                    }\n                });\n                inputs.push({\n                    name        : 'pja__' + output_id + '__DeleteIntermediatesAction',\n                    label       : 'Output cleanup',\n                    type        : 'boolean',\n                    value       : String( Boolean( this.post_job_actions[ 'DeleteIntermediatesAction' + output_id ] ) ),\n                    ignore      : 'false',\n                    help        : 'Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.'\n                });\n                for ( var i in this.node.output_terminals ) {\n                    inputs.push( this._makeSection( i, datatypes ) );\n                }\n            }\n        },\n\n        /** Builds sub section with step actions/annotation */\n        _makeSection: function( output_id, datatypes ){\n            var self = this;\n            var extensions = [];\n            var input_terminal_names = [];\n            for ( key in datatypes  ) {\n                extensions.push( { 0 : datatypes[ key ], 1 : datatypes[ key ] } );\n            }\n            for ( key in this.node.input_terminals ){\n                input_terminal_names.push( this.node.input_terminals[ key ].name );\n            }\n            extensions.sort( function( a, b ) {\n                return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n            });\n            extensions.unshift({\n                0 : 'Sequences',\n                1 : 'Sequences'\n            });\n            extensions.unshift({\n                0 : 'Roadmaps',\n                1 : 'Roadmaps'\n            });\n            extensions.unshift({\n                0 : 'Leave unchanged',\n                1 : '__empty__'\n            });\n            var input_config = {\n                title   : 'Configure Output: \\'' + output_id + '\\'',\n                type    : 'section',\n                flat    : true,\n                inputs  : [{\n                    label       : 'Label',\n                    type        : 'text',\n                    value       : ( output = this.node.getWorkflowOutput( output_id ) ) && output.label || '',\n                    help        : 'This will provide a short name to describe the output - this must be unique across workflows.',\n                    onchange    : function( new_value ) {\n                        self.workflow.attemptUpdateOutputLabel( self.node, output_id, new_value );\n                    }\n                },{\n                    action      : 'RenameDatasetAction',\n                    pja_arg     : 'newname',\n                    label       : 'Rename dataset',\n                    type        : 'text',\n                    value       : '',\n                    ignore      : '',\n                    help        : 'This action will rename the output dataset. Click <a href=\"https://wiki.galaxyproject.org/Learn/AdvancedWorkflow/Variables\">here</a> for more information. Valid inputs are: <strong>' + input_terminal_names.join(', ') + '</strong>.'\n                },{\n                    action      : 'ChangeDatatypeAction',\n                    pja_arg     : 'newtype',\n                    label       : 'Change datatype',\n                    type        : 'select',\n                    ignore      : '__empty__',\n                    value       : '__empty__',\n                    options     : extensions,\n                    help        : 'This action will change the datatype of the output to the indicated value.'\n                },{\n                    action      : 'TagDatasetAction',\n                    pja_arg     : 'tags',\n                    label       : 'Tags',\n                    type        : 'text',\n                    value       : '',\n                    ignore      : '',\n                    help        : 'This action will set tags for the dataset.'\n                },{\n                    title   : 'Assign columns',\n                    type    : 'section',\n                    flat    : true,\n                    inputs  : [{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'chromCol',\n                        label       : 'Chrom column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'startCol',\n                        label       : 'Start column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'endCol',\n                        label       : 'End column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'strandCol',\n                        label       : 'Strand column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'nameCol',\n                        label       : 'Name column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    }],\n                    help    : 'This action will set column assignments in the output dataset. Blank fields are ignored.'\n                }]\n            };\n\n            // visit input nodes and enrich by name/value pairs from server data\n            function visit ( head, head_list ) {\n                head_list = head_list || [];\n                head_list.push( head );\n                for ( var i in head.inputs ) {\n                    var input = head.inputs[ i ];\n                    var action = input.action;\n                    if ( action ) {\n                        input.name = 'pja__' + output_id + '__' + input.action;\n                        if ( input.pja_arg ) {\n                            input.name += '__' + input.pja_arg;\n                        }\n                        if ( input.payload ) {\n                            for ( var p_id in input.payload ) {\n                                var p = input.payload[ p_id ];\n                                input.payload[ input.name + '__' + p_id ] = p;\n                                delete p;\n                            }\n                        }\n                        var d = self.post_job_actions[ input.action + output_id ];\n                        if ( d ) {\n                            for ( var j in head_list ) {\n                                head_list[ j ].expanded = true;\n                            }\n                            if ( input.pja_arg ) {\n                                input.value = d.action_arguments && d.action_arguments[ input.pja_arg ] || input.value;\n                            } else {\n                                input.value = 'true';\n                            }\n                        }\n                    }\n                    input.inputs && visit( input, head_list.slice( 0 ) );\n                }\n            }\n            visit( input_config );\n            return input_config;\n        }\n    });\n\n    return {\n        Default: Default,\n        Tool: Tool\n    };\n});\n"]}