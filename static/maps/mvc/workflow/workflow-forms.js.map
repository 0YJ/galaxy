{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["type","form","name","model","attributes","label","options","workflow","fixed","node","value","area","help","annotation","unshift","onchange","duplicate","new_label","i","nodes","input_id","data","input_element","element_list","id","match","set","_addSections","inputs","visit","head","input","head_list","action","d","output_id","pja_arg","expanded","payload","p_id","slice","j","_makeSection","extensions","input_terminal_names","datatypes","push","input_terminals","b","post_job_actions","output_terminals","keys","String","Boolean","ignore","host","window","location","key","0","1","output","a","input_config","flat","getWorkflowOutput","new_value","attemptUpdateOutputLabel","join","Tool","Default","Backbone","View","extend","initialize","self","this","_formView2","default","_utils2","merge","request","url","Galaxy","root","content_id","create","update_field_data","success","_toolFormBase2","text_enable","text_disable","_addLabelAnnotation","initial_errors","cls","initialmodel","process","_customize","resolve","get","postchange","tool_id","version","$","buildmodel","current_state","tool_version","config_form","update","emit","debug","error","response","deepeach","indexOf","textify","collapsible_value","__class__","is_workflow","length","test_param","undefined"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Form from \"mvc/form/form-view\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\n/** Default form wrapper for non-tool modules in the workflow editor. */\nvar Default = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new Form(\n            Utils.merge(options, {\n                onchange: function() {\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/workflows/build_module`,\n                        data: {\n                            id: node.id,\n                            type: node.type,\n                            content_id: node.content_id,\n                            inputs: self.form.data.create()\n                        },\n                        success: function(data) {\n                            node.update_field_data(data);\n                        }\n                    });\n                }\n            })\n        );\n        _addLabelAnnotation(this.form);\n        this.form.render();\n    }\n});\n\n/** Tool form wrapper for the workflow editor. */\nvar Tool = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new ToolFormBase(\n            Utils.merge(options, {\n                text_enable: \"Set in Advance\",\n                text_disable: \"Set at Runtime\",\n                narrow: true,\n                initial_errors: true,\n                cls: \"ui-portlet-narrow\",\n                initialmodel: function(process, form) {\n                    self._customize(form);\n                    process.resolve();\n                },\n                buildmodel: function(process, form) {\n                    form.model.get(\"postchange\")(process, form);\n                },\n                postchange: function(process, form) {\n                    var options = form.model.attributes;\n                    var current_state = {\n                        tool_id: options.id,\n                        tool_version: options.version,\n                        type: \"tool\",\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    Galaxy.emit.debug(\n                        \"tool-form-workflow::postchange()\",\n                        \"Sending current state.\",\n                        current_state\n                    );\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/workflows/build_module`,\n                        data: current_state,\n                        success: function(data) {\n                            form.model.set(data.config_form);\n                            self._customize(form);\n                            form.update(data.config_form);\n                            form.errors(data.config_form);\n                            // This hasn't modified the workflow, just returned\n                            // module information for the tool to update the workflow\n                            // state stored on the client with. User needs to save\n                            // for this to take effect.\n                            node.update_field_data(data);\n                            Galaxy.emit.debug(\n                                \"tool-form-workflow::postchange()\",\n                                \"Received new model.\",\n                                data\n                            );\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\n                                \"tool-form-workflow::postchange()\",\n                                \"Refresh request failed.\",\n                                response\n                            );\n                            process.reject();\n                        }\n                    });\n                }\n            })\n        );\n    },\n\n    _customize: function(form) {\n        var options = form.model.attributes;\n        Utils.deepeach(options.inputs, input => {\n            if (input.type) {\n                if ([\"data\", \"data_collection\"].indexOf(input.type) != -1) {\n                    input.type = \"hidden\";\n                    input.info = `Data input '${input.name}' (${Utils.textify(\n                        input.extensions\n                    )})`;\n                    input.value = { __class__: \"RuntimeValue\" };\n                } else if (!input.fixed) {\n                    input.collapsible_value = {\n                        __class__: \"RuntimeValue\"\n                    };\n                    input.is_workflow =\n                        (input.options && input.options.length == 0) ||\n                        [\"integer\", \"float\"].indexOf(input.type) != -1;\n                }\n            }\n        });\n        Utils.deepeach(options.inputs, input => {\n            input.type == \"conditional\" &&\n                (input.test_param.collapsible_value = undefined);\n        });\n        _addSections(form);\n        _addLabelAnnotation(form);\n    }\n});\n\n/** Augments the module form definition by adding label and annotation fields */\nfunction _addLabelAnnotation(form) {\n    var options = form.model.attributes;\n    var workflow = options.workflow;\n    var node = options.node;\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__annotation\",\n        label: \"Annotation\",\n        fixed: true,\n        value: node.annotation,\n        area: true,\n        help:\n            \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n    });\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__label\",\n        label: \"Label\",\n        value: node.label,\n        help: \"Add a step label.\",\n        fixed: true,\n        onchange: function(new_label) {\n            var duplicate = false;\n            for (var i in workflow.nodes) {\n                var n = workflow.nodes[i];\n                if (n.label && n.label == new_label && n.id != node.id) {\n                    duplicate = true;\n                    break;\n                }\n            }\n            var input_id = form.data.match(\"__label\");\n            var input_element = form.element_list[input_id];\n            input_element.model.set(\n                \"error_text\",\n                duplicate &&\n                    \"Duplicate label. Please fix this before saving the workflow.\"\n            );\n            form.trigger(\"change\");\n        }\n    });\n}\n\n/** Builds all sub sections */\nfunction _addSections(form) {\n    var options = form.model.attributes;\n    var inputs = options.inputs;\n    var datatypes = options.datatypes;\n    var node = options.node;\n    var workflow = options.workflow;\n    var post_job_actions = node.post_job_actions;\n    var output_id =\n        node.output_terminals && Object.keys(node.output_terminals)[0];\n\n    /** Visit input nodes and enrich by name/value pairs from server data */\n    function visit(head, head_list) {\n        head_list = head_list || [];\n        head_list.push(head);\n        for (var i in head.inputs) {\n            var input = head.inputs[i];\n            var action = input.action;\n            if (action) {\n                input.name = `pja__${output_id}__${input.action}`;\n                if (input.pja_arg) {\n                    input.name += `__${input.pja_arg}`;\n                }\n                if (input.payload) {\n                    for (var p_id in input.payload) {\n                        input.payload[`${input.name}__${p_id}`] =\n                            input.payload[p_id];\n                        delete input.payload[p_id];\n                    }\n                }\n                var d = post_job_actions[input.action + output_id];\n                if (d) {\n                    for (var j in head_list) {\n                        head_list[j].expanded = true;\n                    }\n                    if (input.pja_arg) {\n                        input.value =\n                            (d.action_arguments &&\n                                d.action_arguments[input.pja_arg]) ||\n                            input.value;\n                    } else {\n                        input.value = \"true\";\n                    }\n                }\n            }\n            input.inputs && visit(input, head_list.slice(0));\n        }\n    }\n\n    /** Builds sub section with step actions/annotation */\n    function _makeSection(output_id, datatypes) {\n        var extensions = [];\n        var input_terminal_names = [];\n        for (var key in datatypes) {\n            extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n        }\n        for (key in node.input_terminals) {\n            input_terminal_names.push(node.input_terminals[key].name);\n        }\n        extensions.sort(\n            (a, b) => (a.label > b.label ? 1 : a.label < b.label ? -1 : 0)\n        );\n        extensions.unshift({\n            0: \"Sequences\",\n            1: \"Sequences\"\n        });\n        extensions.unshift({\n            0: \"Roadmaps\",\n            1: \"Roadmaps\"\n        });\n        extensions.unshift({\n            0: \"Leave unchanged\",\n            1: \"__empty__\"\n        });\n        var output;\n        var input_config = {\n            title: `Configure Output: '${output_id}'`,\n            type: \"section\",\n            flat: true,\n            inputs: [\n                {\n                    label: \"Label\",\n                    type: \"text\",\n                    value:\n                        ((output = node.getWorkflowOutput(output_id)) &&\n                            output.label) ||\n                        \"\",\n                    help:\n                        \"This will provide a short name to describe the output - this must be unique across workflows.\",\n                    onchange: function(new_value) {\n                        workflow.attemptUpdateOutputLabel(\n                            node,\n                            output_id,\n                            new_value\n                        );\n                    }\n                },\n                {\n                    action: \"RenameDatasetAction\",\n                    pja_arg: \"newname\",\n                    label: \"Rename dataset\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: `This action will rename the output dataset. Click <a href=\"https://galaxyproject.org/learn/advanced-workflow/variables/\">here</a> for more information. Valid inputs are: <strong>${input_terminal_names.join(\n                        \", \"\n                    )}</strong>.`\n                },\n                {\n                    action: \"ChangeDatatypeAction\",\n                    pja_arg: \"newtype\",\n                    label: \"Change datatype\",\n                    type: \"select\",\n                    ignore: \"__empty__\",\n                    value: \"__empty__\",\n                    options: extensions,\n                    help:\n                        \"This action will change the datatype of the output to the indicated value.\"\n                },\n                {\n                    action: \"TagDatasetAction\",\n                    pja_arg: \"tags\",\n                    label: \"Add Tags\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: \"This action will set tags for the dataset.\"\n                },\n                {\n                    action: \"RemoveTagDatasetAction\",\n                    pja_arg: \"tags\",\n                    label: \"Remove Tags\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: \"This action will remove tags for the dataset.\"\n                },\n                {\n                    title: \"Assign columns\",\n                    type: \"section\",\n                    flat: true,\n                    inputs: [\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"chromCol\",\n                            label: \"Chrom column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"startCol\",\n                            label: \"Start column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"endCol\",\n                            label: \"End column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"strandCol\",\n                            label: \"Strand column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"nameCol\",\n                            label: \"Name column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        }\n                    ],\n                    help:\n                        \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n                }\n            ]\n        };\n        visit(input_config);\n        return input_config;\n    }\n\n    if (output_id) {\n        inputs.push({\n            name: `pja__${output_id}__EmailAction`,\n            label: \"Email notification\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[`EmailAction${output_id}`])),\n            ignore: \"false\",\n            help:\n                \"An email notification will be sent when the job has completed.\",\n            payload: {\n                host: window.location.host\n            }\n        });\n        inputs.push({\n            name: `pja__${output_id}__DeleteIntermediatesAction`,\n            label: \"Output cleanup\",\n            type: \"boolean\",\n            value: String(\n                Boolean(\n                    post_job_actions[`DeleteIntermediatesAction${output_id}`]\n                )\n            ),\n            ignore: \"false\",\n            help:\n                \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n        });\n        for (var i in node.output_terminals) {\n            inputs.push(_makeSection(i, datatypes));\n        }\n    }\n}\n\nexport default {\n    Default: Default,\n    Tool: Tool\n};\n"]}