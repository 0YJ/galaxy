{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["define","Utils","Form","ToolFormBase","_addLabelAnnotation","form","options","model","attributes","workflow","node","input_id","inputs","input_element","label","fixed","value","annotation","area","help","_addSections","datatypes","post_job_actions","output_id","onchange","new_label","visit","head_list","nodes","push","head","i","input","action","id","pja_arg","p_id","payload","element_list","duplicate","d","trigger","input_terminal_names","extensions","input_terminals","sort","a","name","unshift","j","expanded","input_config","action_arguments","attemptUpdateOutputLabel","output_terminals","Object","keys","type","String","Boolean","ignore","host","window","location","0","key","1","b","title","flat","output","getWorkflowOutput","new_value","join","_makeSection","Tool","Default","Backbone","View","extend","initialize","this","self","merge","request","url","Galaxy","root","data","content_id","create","success","update_field_data","render","text_enable","text_disable","narrow","initial_errors","cls","initialmodel","_customize","process","resolve","buildmodel","postchange","get","current_state","tool_id","tool_version","version","emit","debug","update","errors","config_form","set","reject","response","__class__","indexOf","info","textify","collapsible_value","is_workflow","length","test_param","undefined"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["define(\n    [\"utils/utils\", \"mvc/form/form-view\", \"mvc/tool/tool-form-base\"],\n    function(Utils, Form, ToolFormBase) {\n        /** Default form wrapper for non-tool modules in the workflow editor. */\n        var Default = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                var node = options.node;\n                this.form = new Form(\n                    Utils.merge(options, {\n                        onchange: function() {\n                            Utils.request({\n                                type: \"POST\",\n                                url: Galaxy.root + \"api/workflows/build_module\",\n                                data: {\n                                    id: node.id,\n                                    type: node.type,\n                                    content_id: node.content_id,\n                                    inputs: self.form.data.create()\n                                },\n                                success: function(data) {\n                                    node.update_field_data(data);\n                                }\n                            });\n                        }\n                    })\n                );\n                _addLabelAnnotation(this.form);\n                this.form.render();\n            }\n        });\n\n        /** Tool form wrapper for the workflow editor. */\n        var Tool = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                var node = options.node;\n                this.form = new ToolFormBase(\n                    Utils.merge(options, {\n                        text_enable: \"Set in Advance\",\n                        text_disable: \"Set at Runtime\",\n                        narrow: true,\n                        initial_errors: true,\n                        cls: \"ui-portlet-narrow\",\n                        initialmodel: function(process, form) {\n                            self._customize(form);\n                            process.resolve();\n                        },\n                        buildmodel: function(process, form) {\n                            form.model.get(\"postchange\")(process, form);\n                        },\n                        postchange: function(process, form) {\n                            var options = form.model.attributes;\n                            var current_state = {\n                                tool_id: options.id,\n                                tool_version: options.version,\n                                type: \"tool\",\n                                inputs: $.extend(true, {}, form.data.create())\n                            };\n                            Galaxy.emit.debug(\n                                \"tool-form-workflow::postchange()\",\n                                \"Sending current state.\",\n                                current_state\n                            );\n                            Utils.request({\n                                type: \"POST\",\n                                url: Galaxy.root + \"api/workflows/build_module\",\n                                data: current_state,\n                                success: function(data) {\n                                    form.model.set(data.config_form);\n                                    self._customize(form);\n                                    form.update(data.config_form);\n                                    form.errors(data.config_form);\n                                    // This hasn't modified the workflow, just returned\n                                    // module information for the tool to update the workflow\n                                    // state stored on the client with. User needs to save\n                                    // for this to take effect.\n                                    node.update_field_data(data);\n                                    Galaxy.emit.debug(\n                                        \"tool-form-workflow::postchange()\",\n                                        \"Received new model.\",\n                                        data\n                                    );\n                                    process.resolve();\n                                },\n                                error: function(response) {\n                                    Galaxy.emit.debug(\n                                        \"tool-form-workflow::postchange()\",\n                                        \"Refresh request failed.\",\n                                        response\n                                    );\n                                    process.reject();\n                                }\n                            });\n                        }\n                    })\n                );\n            },\n\n            _customize: function(form) {\n                var options = form.model.attributes;\n                Utils.deepeach(options.inputs, function(input) {\n                    if (input.type) {\n                        if (\n                            [\"data\", \"data_collection\"].indexOf(input.type) !=\n                            -1\n                        ) {\n                            input.type = \"hidden\";\n                            input.info =\n                                \"Data input '\" +\n                                input.name +\n                                \"' (\" +\n                                Utils.textify(input.extensions) +\n                                \")\";\n                            input.value = { __class__: \"RuntimeValue\" };\n                        } else if (!input.fixed) {\n                            input.collapsible_value = {\n                                __class__: \"RuntimeValue\"\n                            };\n                            input.is_workflow =\n                                (input.options && input.options.length == 0) ||\n                                [\"integer\", \"float\"].indexOf(input.type) != -1;\n                        }\n                    }\n                });\n                Utils.deepeach(options.inputs, function(input) {\n                    input.type == \"conditional\" &&\n                        (input.test_param.collapsible_value = undefined);\n                });\n                _addSections(form);\n                _addLabelAnnotation(form);\n            }\n        });\n\n        /** Augments the module form definition by adding label and annotation fields */\n        function _addLabelAnnotation(form) {\n            var options = form.model.attributes;\n            var workflow = options.workflow;\n            var node = options.node;\n            options.inputs.unshift({\n                type: \"text\",\n                name: \"__annotation\",\n                label: \"Annotation\",\n                fixed: true,\n                value: node.annotation,\n                area: true,\n                help:\n                    \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n            });\n            options.inputs.unshift({\n                type: \"text\",\n                name: \"__label\",\n                label: \"Label\",\n                value: node.label,\n                help: \"Add a step label.\",\n                fixed: true,\n                onchange: function(new_label) {\n                    var duplicate = false;\n                    for (var i in workflow.nodes) {\n                        var n = workflow.nodes[i];\n                        if (\n                            n.label &&\n                            n.label == new_label &&\n                            n.id != node.id\n                        ) {\n                            duplicate = true;\n                            break;\n                        }\n                    }\n                    var input_id = form.data.match(\"__label\");\n                    var input_element = form.element_list[input_id];\n                    input_element.model.set(\n                        \"error_text\",\n                        duplicate &&\n                            \"Duplicate label. Please fix this before saving the workflow.\"\n                    );\n                    form.trigger(\"change\");\n                }\n            });\n        }\n\n        /** Builds all sub sections */\n        function _addSections(form) {\n            var options = form.model.attributes;\n            var inputs = options.inputs;\n            var datatypes = options.datatypes;\n            var node = options.node;\n            var workflow = options.workflow;\n            var post_job_actions = node.post_job_actions;\n            var output_id =\n                node.output_terminals && Object.keys(node.output_terminals)[0];\n\n            /** Visit input nodes and enrich by name/value pairs from server data */\n            function visit(head, head_list) {\n                head_list = head_list || [];\n                head_list.push(head);\n                for (var i in head.inputs) {\n                    var input = head.inputs[i];\n                    var action = input.action;\n                    if (action) {\n                        input.name = \"pja__\" + output_id + \"__\" + input.action;\n                        if (input.pja_arg) {\n                            input.name += \"__\" + input.pja_arg;\n                        }\n                        if (input.payload) {\n                            for (var p_id in input.payload) {\n                                input.payload[input.name + \"__\" + p_id] =\n                                    input.payload[p_id];\n                                delete input.payload[p_id];\n                            }\n                        }\n                        var d = post_job_actions[input.action + output_id];\n                        if (d) {\n                            for (var j in head_list) {\n                                head_list[j].expanded = true;\n                            }\n                            if (input.pja_arg) {\n                                input.value =\n                                    (d.action_arguments &&\n                                        d.action_arguments[input.pja_arg]) ||\n                                    input.value;\n                            } else {\n                                input.value = \"true\";\n                            }\n                        }\n                    }\n                    input.inputs && visit(input, head_list.slice(0));\n                }\n            }\n\n            /** Builds sub section with step actions/annotation */\n            function _makeSection(output_id, datatypes) {\n                var extensions = [];\n                var input_terminal_names = [];\n                for (var key in datatypes) {\n                    extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n                }\n                for (key in node.input_terminals) {\n                    input_terminal_names.push(node.input_terminals[key].name);\n                }\n                extensions.sort(function(a, b) {\n                    return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n                });\n                extensions.unshift({\n                    0: \"Sequences\",\n                    1: \"Sequences\"\n                });\n                extensions.unshift({\n                    0: \"Roadmaps\",\n                    1: \"Roadmaps\"\n                });\n                extensions.unshift({\n                    0: \"Leave unchanged\",\n                    1: \"__empty__\"\n                });\n                var output;\n                var input_config = {\n                    title: \"Configure Output: '\" + output_id + \"'\",\n                    type: \"section\",\n                    flat: true,\n                    inputs: [\n                        {\n                            label: \"Label\",\n                            type: \"text\",\n                            value:\n                                ((output = node.getWorkflowOutput(output_id)) &&\n                                    output.label) ||\n                                \"\",\n                            help:\n                                \"This will provide a short name to describe the output - this must be unique across workflows.\",\n                            onchange: function(new_value) {\n                                workflow.attemptUpdateOutputLabel(\n                                    node,\n                                    output_id,\n                                    new_value\n                                );\n                            }\n                        },\n                        {\n                            action: \"RenameDatasetAction\",\n                            pja_arg: \"newname\",\n                            label: \"Rename dataset\",\n                            type: \"text\",\n                            value: \"\",\n                            ignore: \"\",\n                            help:\n                                'This action will rename the output dataset. Click <a href=\"https://galaxyproject.org/learn/advanced-workflow/variables/\">here</a> for more information. Valid inputs are: <strong>' +\n                                input_terminal_names.join(\", \") +\n                                \"</strong>.\"\n                        },\n                        {\n                            action: \"ChangeDatatypeAction\",\n                            pja_arg: \"newtype\",\n                            label: \"Change datatype\",\n                            type: \"select\",\n                            ignore: \"__empty__\",\n                            value: \"__empty__\",\n                            options: extensions,\n                            help:\n                                \"This action will change the datatype of the output to the indicated value.\"\n                        },\n                        {\n                            action: \"TagDatasetAction\",\n                            pja_arg: \"tags\",\n                            label: \"Add Tags\",\n                            type: \"text\",\n                            value: \"\",\n                            ignore: \"\",\n                            help: \"This action will set tags for the dataset.\"\n                        },\n                        {\n                            action: \"RemoveTagDatasetAction\",\n                            pja_arg: \"tags\",\n                            label: \"Remove Tags\",\n                            type: \"text\",\n                            value: \"\",\n                            ignore: \"\",\n                            help:\n                                \"This action will remove tags for the dataset.\"\n                        },\n                        {\n                            title: \"Assign columns\",\n                            type: \"section\",\n                            flat: true,\n                            inputs: [\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"chromCol\",\n                                    label: \"Chrom column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                },\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"startCol\",\n                                    label: \"Start column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                },\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"endCol\",\n                                    label: \"End column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                },\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"strandCol\",\n                                    label: \"Strand column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                },\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"nameCol\",\n                                    label: \"Name column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                }\n                            ],\n                            help:\n                                \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n                        }\n                    ]\n                };\n                visit(input_config);\n                return input_config;\n            }\n\n            if (output_id) {\n                inputs.push({\n                    name: \"pja__\" + output_id + \"__EmailAction\",\n                    label: \"Email notification\",\n                    type: \"boolean\",\n                    value: String(\n                        Boolean(post_job_actions[\"EmailAction\" + output_id])\n                    ),\n                    ignore: \"false\",\n                    help:\n                        \"An email notification will be sent when the job has completed.\",\n                    payload: {\n                        host: window.location.host\n                    }\n                });\n                inputs.push({\n                    name: \"pja__\" + output_id + \"__DeleteIntermediatesAction\",\n                    label: \"Output cleanup\",\n                    type: \"boolean\",\n                    value: String(\n                        Boolean(\n                            post_job_actions[\n                                \"DeleteIntermediatesAction\" + output_id\n                            ]\n                        )\n                    ),\n                    ignore: \"false\",\n                    help:\n                        \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n                });\n                for (var i in node.output_terminals) {\n                    inputs.push(_makeSection(i, datatypes));\n                }\n            }\n        }\n\n        return {\n            Default: Default,\n            Tool: Tool\n        };\n    }\n);\n"]}