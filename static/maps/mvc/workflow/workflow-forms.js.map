{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["fixed","form","value","node","annotation","area","options","workflow","help","inputs","unshift","type","name","label","onchange","duplicate","input_id","input_element","nodes","trigger","i","n","new_label","id","_addSections","data","match","attributes","datatypes","output_id","visit","head","head_list","push","d","post_job_actions","input","action","pja_arg","action_arguments","p_id","payload","_makeSection","j","extensions","expanded","input_terminals","input_terminal_names","sort","a","slice","output_terminals","keys","String","Boolean","ignore","host","window","location","key","0","1","output","b","flat","getWorkflowOutput","new_value","attemptUpdateOutputLabel","title","join","input_config","Tool","Default","Backbone","View","extend","initialize","self","this","_formView2","default","_utils2","merge","request","url","Galaxy","root","content_id","create","update_field_data","success","_toolFormBase2","text_enable","text_disable","_addLabelAnnotation","initial_errors","cls","initialmodel","process","_customize","resolve","model","get","postchange","tool_id","version","$","buildmodel","current_state","tool_version","set","config_form","update","emit","debug","error","response","deepeach","indexOf","__class__","is_workflow","collapsible_value","length","undefined"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Form from \"mvc/form/form-view\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\n/** Default form wrapper for non-tool modules in the workflow editor. */\nvar Default = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new Form(\n            Utils.merge(options, {\n                onchange: function() {\n                    Utils.request({\n                        type: \"POST\",\n                        url: Galaxy.root + \"api/workflows/build_module\",\n                        data: {\n                            id: node.id,\n                            type: node.type,\n                            content_id: node.content_id,\n                            inputs: self.form.data.create()\n                        },\n                        success: function(data) {\n                            node.update_field_data(data);\n                        }\n                    });\n                }\n            })\n        );\n        _addLabelAnnotation(this.form);\n        this.form.render();\n    }\n});\n\n/** Tool form wrapper for the workflow editor. */\nvar Tool = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new ToolFormBase(\n            Utils.merge(options, {\n                text_enable: \"Set in Advance\",\n                text_disable: \"Set at Runtime\",\n                narrow: true,\n                initial_errors: true,\n                cls: \"ui-portlet-narrow\",\n                initialmodel: function(process, form) {\n                    self._customize(form);\n                    process.resolve();\n                },\n                buildmodel: function(process, form) {\n                    form.model.get(\"postchange\")(process, form);\n                },\n                postchange: function(process, form) {\n                    var options = form.model.attributes;\n                    var current_state = {\n                        tool_id: options.id,\n                        tool_version: options.version,\n                        type: \"tool\",\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    Galaxy.emit.debug(\n                        \"tool-form-workflow::postchange()\",\n                        \"Sending current state.\",\n                        current_state\n                    );\n                    Utils.request({\n                        type: \"POST\",\n                        url: Galaxy.root + \"api/workflows/build_module\",\n                        data: current_state,\n                        success: function(data) {\n                            form.model.set(data.config_form);\n                            self._customize(form);\n                            form.update(data.config_form);\n                            form.errors(data.config_form);\n                            // This hasn't modified the workflow, just returned\n                            // module information for the tool to update the workflow\n                            // state stored on the client with. User needs to save\n                            // for this to take effect.\n                            node.update_field_data(data);\n                            Galaxy.emit.debug(\n                                \"tool-form-workflow::postchange()\",\n                                \"Received new model.\",\n                                data\n                            );\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\n                                \"tool-form-workflow::postchange()\",\n                                \"Refresh request failed.\",\n                                response\n                            );\n                            process.reject();\n                        }\n                    });\n                }\n            })\n        );\n    },\n\n    _customize: function(form) {\n        var options = form.model.attributes;\n        Utils.deepeach(options.inputs, function(input) {\n            if (input.type) {\n                if ([\"data\", \"data_collection\"].indexOf(input.type) != -1) {\n                    input.type = \"hidden\";\n                    input.info =\n                        \"Data input '\" +\n                        input.name +\n                        \"' (\" +\n                        Utils.textify(input.extensions) +\n                        \")\";\n                    input.value = { __class__: \"RuntimeValue\" };\n                } else if (!input.fixed) {\n                    input.collapsible_value = {\n                        __class__: \"RuntimeValue\"\n                    };\n                    input.is_workflow =\n                        (input.options && input.options.length == 0) ||\n                        [\"integer\", \"float\"].indexOf(input.type) != -1;\n                }\n            }\n        });\n        Utils.deepeach(options.inputs, function(input) {\n            input.type == \"conditional\" &&\n                (input.test_param.collapsible_value = undefined);\n        });\n        _addSections(form);\n        _addLabelAnnotation(form);\n    }\n});\n\n/** Augments the module form definition by adding label and annotation fields */\nfunction _addLabelAnnotation(form) {\n    var options = form.model.attributes;\n    var workflow = options.workflow;\n    var node = options.node;\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__annotation\",\n        label: \"Annotation\",\n        fixed: true,\n        value: node.annotation,\n        area: true,\n        help:\n            \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n    });\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__label\",\n        label: \"Label\",\n        value: node.label,\n        help: \"Add a step label.\",\n        fixed: true,\n        onchange: function(new_label) {\n            var duplicate = false;\n            for (var i in workflow.nodes) {\n                var n = workflow.nodes[i];\n                if (n.label && n.label == new_label && n.id != node.id) {\n                    duplicate = true;\n                    break;\n                }\n            }\n            var input_id = form.data.match(\"__label\");\n            var input_element = form.element_list[input_id];\n            input_element.model.set(\n                \"error_text\",\n                duplicate &&\n                    \"Duplicate label. Please fix this before saving the workflow.\"\n            );\n            form.trigger(\"change\");\n        }\n    });\n}\n\n/** Builds all sub sections */\nfunction _addSections(form) {\n    var options = form.model.attributes;\n    var inputs = options.inputs;\n    var datatypes = options.datatypes;\n    var node = options.node;\n    var workflow = options.workflow;\n    var post_job_actions = node.post_job_actions;\n    var output_id =\n        node.output_terminals && Object.keys(node.output_terminals)[0];\n\n    /** Visit input nodes and enrich by name/value pairs from server data */\n    function visit(head, head_list) {\n        head_list = head_list || [];\n        head_list.push(head);\n        for (var i in head.inputs) {\n            var input = head.inputs[i];\n            var action = input.action;\n            if (action) {\n                input.name = \"pja__\" + output_id + \"__\" + input.action;\n                if (input.pja_arg) {\n                    input.name += \"__\" + input.pja_arg;\n                }\n                if (input.payload) {\n                    for (var p_id in input.payload) {\n                        input.payload[input.name + \"__\" + p_id] =\n                            input.payload[p_id];\n                        delete input.payload[p_id];\n                    }\n                }\n                var d = post_job_actions[input.action + output_id];\n                if (d) {\n                    for (var j in head_list) {\n                        head_list[j].expanded = true;\n                    }\n                    if (input.pja_arg) {\n                        input.value =\n                            (d.action_arguments &&\n                                d.action_arguments[input.pja_arg]) ||\n                            input.value;\n                    } else {\n                        input.value = \"true\";\n                    }\n                }\n            }\n            input.inputs && visit(input, head_list.slice(0));\n        }\n    }\n\n    /** Builds sub section with step actions/annotation */\n    function _makeSection(output_id, datatypes) {\n        var extensions = [];\n        var input_terminal_names = [];\n        for (var key in datatypes) {\n            extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n        }\n        for (key in node.input_terminals) {\n            input_terminal_names.push(node.input_terminals[key].name);\n        }\n        extensions.sort(function(a, b) {\n            return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n        });\n        extensions.unshift({\n            0: \"Sequences\",\n            1: \"Sequences\"\n        });\n        extensions.unshift({\n            0: \"Roadmaps\",\n            1: \"Roadmaps\"\n        });\n        extensions.unshift({\n            0: \"Leave unchanged\",\n            1: \"__empty__\"\n        });\n        var output;\n        var input_config = {\n            title: \"Configure Output: '\" + output_id + \"'\",\n            type: \"section\",\n            flat: true,\n            inputs: [\n                {\n                    label: \"Label\",\n                    type: \"text\",\n                    value:\n                        ((output = node.getWorkflowOutput(output_id)) &&\n                            output.label) ||\n                        \"\",\n                    help:\n                        \"This will provide a short name to describe the output - this must be unique across workflows.\",\n                    onchange: function(new_value) {\n                        workflow.attemptUpdateOutputLabel(\n                            node,\n                            output_id,\n                            new_value\n                        );\n                    }\n                },\n                {\n                    action: \"RenameDatasetAction\",\n                    pja_arg: \"newname\",\n                    label: \"Rename dataset\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help:\n                        'This action will rename the output dataset. Click <a href=\"https://galaxyproject.org/learn/advanced-workflow/variables/\">here</a> for more information. Valid inputs are: <strong>' +\n                        input_terminal_names.join(\", \") +\n                        \"</strong>.\"\n                },\n                {\n                    action: \"ChangeDatatypeAction\",\n                    pja_arg: \"newtype\",\n                    label: \"Change datatype\",\n                    type: \"select\",\n                    ignore: \"__empty__\",\n                    value: \"__empty__\",\n                    options: extensions,\n                    help:\n                        \"This action will change the datatype of the output to the indicated value.\"\n                },\n                {\n                    action: \"TagDatasetAction\",\n                    pja_arg: \"tags\",\n                    label: \"Add Tags\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: \"This action will set tags for the dataset.\"\n                },\n                {\n                    action: \"RemoveTagDatasetAction\",\n                    pja_arg: \"tags\",\n                    label: \"Remove Tags\",\n                    type: \"text\",\n                    value: \"\",\n                    ignore: \"\",\n                    help: \"This action will remove tags for the dataset.\"\n                },\n                {\n                    title: \"Assign columns\",\n                    type: \"section\",\n                    flat: true,\n                    inputs: [\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"chromCol\",\n                            label: \"Chrom column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"startCol\",\n                            label: \"Start column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"endCol\",\n                            label: \"End column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"strandCol\",\n                            label: \"Strand column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        },\n                        {\n                            action: \"ColumnSetAction\",\n                            pja_arg: \"nameCol\",\n                            label: \"Name column\",\n                            type: \"integer\",\n                            value: \"\",\n                            ignore: \"\"\n                        }\n                    ],\n                    help:\n                        \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n                }\n            ]\n        };\n        visit(input_config);\n        return input_config;\n    }\n\n    if (output_id) {\n        inputs.push({\n            name: \"pja__\" + output_id + \"__EmailAction\",\n            label: \"Email notification\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[\"EmailAction\" + output_id])),\n            ignore: \"false\",\n            help:\n                \"An email notification will be sent when the job has completed.\",\n            payload: {\n                host: window.location.host\n            }\n        });\n        inputs.push({\n            name: \"pja__\" + output_id + \"__DeleteIntermediatesAction\",\n            label: \"Output cleanup\",\n            type: \"boolean\",\n            value: String(\n                Boolean(\n                    post_job_actions[\"DeleteIntermediatesAction\" + output_id]\n                )\n            ),\n            ignore: \"false\",\n            help:\n                \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n        });\n        for (var i in node.output_terminals) {\n            inputs.push(_makeSection(i, datatypes));\n        }\n    }\n}\n\nexport default {\n    Default: Default,\n    Tool: Tool\n};\n"]}