{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["define","Utils","Form","ToolFormBase","Default","Backbone","View","extend","initialize","options","Tool","workflow","this","self","node","post_job_actions","inputs","input","type","info","indexOf","textify","extensions","__class__","fixed","value","is_workflow","length","deepeach","collapsible_value","undefined","_makeSections","merge","text_enable","text_disable","narrow","initial_errors","sustain_version","cls","process","form","postchange","model","attributes","current_state","id","tool_id","version","tool_version","$","data","create","Galaxy","emit","debug","root","url","success","update","config_form","update_field_data","error","response","datatypes","Object","keys","output_terminals","output_id","name","label","String","Boolean","ignore","help","payload","window","location","host","push","i","_makeSection","visit","head","head_list","action","pja_arg","p_id","p","d","j","action_arguments","slice","input_terminal_names","0","key","1","input_terminals","sort","a","b","unshift","input_config","title","flat","output","getWorkflowOutput","new_value","onchange","attemptUpdateOutputLabel","join"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["define( [ 'utils/utils', 'mvc/form/form-view', 'mvc/tool/tool-form-base' ], function( Utils, Form, ToolFormBase ) {\n\n    /** Default form wrapper for non-tool modules in the workflow editor. */\n    var Default = Backbone.View.extend({\n        initialize: function( options ) {\n            this.form = new Form( options );\n        }\n    });\n\n    /** Tool form wrapper for the workflow editor. */\n    var Tool = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.workflow = options.workflow;\n            this.node     = options.node;\n            if ( this.node ) {\n                this.post_job_actions = this.node.post_job_actions || {};\n                Utils.deepeach( options.inputs, function( input ) {\n                    if ( input.type ) {\n                        if ( [ 'data', 'data_collection' ].indexOf( input.type ) != -1 ) {\n                            input.type = 'hidden';\n                            input.info = 'Data input \\'' + input.name + '\\' (' + Utils.textify( input.extensions ) + ')';\n                            input.value = { '__class__': 'RuntimeValue' };\n                        } else if ( !input.fixed ) {\n                            input.collapsible_value = { '__class__': 'RuntimeValue' };\n                            input.is_workflow = ( input.options && input.options.length == 0 ) ||\n                                                ( [ 'integer', 'float' ].indexOf( input.type ) != -1 );\n                        }\n                    }\n                });\n                Utils.deepeach( options.inputs, function( input ) {\n                    input.type == 'conditional' && ( input.test_param.collapsible_value = undefined );\n                });\n                this._makeSections( options );\n                this.form = new ToolFormBase( Utils.merge( options, {\n                    text_enable     : 'Set in Advance',\n                    text_disable    : 'Set at Runtime',\n                    narrow          : true,\n                    initial_errors  : true,\n                    sustain_version : true,\n                    cls             : 'ui-portlet-narrow',\n                    postchange      : function( process, form ) {\n                        var options = form.model.attributes;\n                        var current_state = {\n                            tool_id         : options.id,\n                            tool_version    : options.version,\n                            type            : 'tool',\n                            inputs          : $.extend( true, {}, form.data.create() )\n                        }\n                        Galaxy.emit.debug( 'tool-form-workflow::postchange()', 'Sending current state.', current_state );\n                        Utils.request({\n                            type    : 'POST',\n                            url     : Galaxy.root + 'api/workflows/build_module',\n                            data    : current_state,\n                            success : function( data ) {\n                                form.update( data.config_form );\n                                form.errors( data.config_form );\n                                // This hasn't modified the workflow, just returned\n                                // module information for the tool to update the workflow\n                                // state stored on the client with. User needs to save\n                                // for this to take effect.\n                                self.node.update_field_data( data );\n                                Galaxy.emit.debug( 'tool-form-workflow::postchange()', 'Received new model.', data );\n                                process.resolve();\n                            },\n                            error   : function( response ) {\n                                Galaxy.emit.debug( 'tool-form-workflow::postchange()', 'Refresh request failed.', response );\n                                process.reject();\n                            }\n                        });\n                    },\n                }));\n            } else {\n                Galaxy.emit.debug('tool-form-workflow::initialize()', 'Node not found in workflow.');\n            }\n        },\n\n        /** Builds all sub sections */\n        _makeSections: function( options ){\n            var inputs = options.inputs;\n            var datatypes = options.datatypes;\n            var output_id = this.node.output_terminals && Object.keys( this.node.output_terminals )[ 0 ];\n            if ( output_id ) {\n                inputs.push({\n                    name        : 'pja__' + output_id + '__EmailAction',\n                    label       : 'Email notification',\n                    type        : 'boolean',\n                    value       : String( Boolean( this.post_job_actions[ 'EmailAction' + output_id ] ) ),\n                    ignore      : 'false',\n                    help        : 'An email notification will be sent when the job has completed.',\n                    payload     : {\n                        'host'  : window.location.host\n                    }\n                });\n                inputs.push({\n                    name        : 'pja__' + output_id + '__DeleteIntermediatesAction',\n                    label       : 'Output cleanup',\n                    type        : 'boolean',\n                    value       : String( Boolean( this.post_job_actions[ 'DeleteIntermediatesAction' + output_id ] ) ),\n                    ignore      : 'false',\n                    help        : 'Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.'\n                });\n                for ( var i in this.node.output_terminals ) {\n                    inputs.push( this._makeSection( i, datatypes ) );\n                }\n            }\n        },\n\n        /** Builds sub section with step actions/annotation */\n        _makeSection: function( output_id, datatypes ){\n            var self = this;\n            var extensions = [];\n            var input_terminal_names = [];\n            for ( key in datatypes  ) {\n                extensions.push( { 0 : datatypes[ key ], 1 : datatypes[ key ] } );\n            }\n            for ( key in this.node.input_terminals ){\n                input_terminal_names.push( this.node.input_terminals[ key ].name );\n            }\n            extensions.sort( function( a, b ) {\n                return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n            });\n            extensions.unshift({\n                0 : 'Sequences',\n                1 : 'Sequences'\n            });\n            extensions.unshift({\n                0 : 'Roadmaps',\n                1 : 'Roadmaps'\n            });\n            extensions.unshift({\n                0 : 'Leave unchanged',\n                1 : '__empty__'\n            });\n            var input_config = {\n                title   : 'Configure Output: \\'' + output_id + '\\'',\n                type    : 'section',\n                flat    : true,\n                inputs  : [{\n                    label       : 'Label',\n                    type        : 'text',\n                    value       : ( output = this.node.getWorkflowOutput( output_id ) ) && output.label || '',\n                    help        : 'This will provide a short name to describe the output - this must be unique across workflows.',\n                    onchange    : function( new_value ) {\n                        self.workflow.attemptUpdateOutputLabel( self.node, output_id, new_value );\n                    }\n                },{\n                    action      : 'RenameDatasetAction',\n                    pja_arg     : 'newname',\n                    label       : 'Rename dataset',\n                    type        : 'text',\n                    value       : '',\n                    ignore      : '',\n                    help        : 'This action will rename the output dataset. Click <a href=\"https://wiki.galaxyproject.org/Learn/AdvancedWorkflow/Variables\">here</a> for more information. Valid inputs are: <strong>' + input_terminal_names.join(', ') + '</strong>.'\n                },{\n                    action      : 'ChangeDatatypeAction',\n                    pja_arg     : 'newtype',\n                    label       : 'Change datatype',\n                    type        : 'select',\n                    ignore      : '__empty__',\n                    value       : '__empty__',\n                    options     : extensions,\n                    help        : 'This action will change the datatype of the output to the indicated value.'\n                },{\n                    action      : 'TagDatasetAction',\n                    pja_arg     : 'tags',\n                    label       : 'Tags',\n                    type        : 'text',\n                    value       : '',\n                    ignore      : '',\n                    help        : 'This action will set tags for the dataset.'\n                },{\n                    title   : 'Assign columns',\n                    type    : 'section',\n                    flat    : true,\n                    inputs  : [{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'chromCol',\n                        label       : 'Chrom column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'startCol',\n                        label       : 'Start column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'endCol',\n                        label       : 'End column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'strandCol',\n                        label       : 'Strand column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    },{\n                        action      : 'ColumnSetAction',\n                        pja_arg     : 'nameCol',\n                        label       : 'Name column',\n                        type        : 'integer',\n                        value       : '',\n                        ignore      : ''\n                    }],\n                    help    : 'This action will set column assignments in the output dataset. Blank fields are ignored.'\n                }]\n            };\n\n            // visit input nodes and enrich by name/value pairs from server data\n            function visit ( head, head_list ) {\n                head_list = head_list || [];\n                head_list.push( head );\n                for ( var i in head.inputs ) {\n                    var input = head.inputs[ i ];\n                    var action = input.action;\n                    if ( action ) {\n                        input.name = 'pja__' + output_id + '__' + input.action;\n                        if ( input.pja_arg ) {\n                            input.name += '__' + input.pja_arg;\n                        }\n                        if ( input.payload ) {\n                            for ( var p_id in input.payload ) {\n                                input.payload[ input.name + '__' + p_id ] = p;input.payload[ p_id ];\n                                delete input.payload[ p_id ];\n                            }\n                        }\n                        var d = self.post_job_actions[ input.action + output_id ];\n                        if ( d ) {\n                            for ( var j in head_list ) {\n                                head_list[ j ].expanded = true;\n                            }\n                            if ( input.pja_arg ) {\n                                input.value = d.action_arguments && d.action_arguments[ input.pja_arg ] || input.value;\n                            } else {\n                                input.value = 'true';\n                            }\n                        }\n                    }\n                    input.inputs && visit( input, head_list.slice( 0 ) );\n                }\n            }\n            visit( input_config );\n            return input_config;\n        }\n    });\n\n    return {\n        Default: Default,\n        Tool: Tool\n    };\n});\n"]}