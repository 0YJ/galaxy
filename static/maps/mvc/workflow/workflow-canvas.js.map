{"version":3,"sources":["mvc/workflow/workflow-canvas.js"],"names":["define","CanvasManager","app","canvas_viewport","overview","this","cv","find","cc","ov","ScrollPanel","panel","extend","$","init_drag","prototype","x","y","self","min","width","move","max","Math","css","top","background-position-y","update_viewport_overlay","each","scroll_panel","x_adjust","bind","y_adjust","position","p","offset","d","offsetY","offsetX","draw_overview","e","hasClass","removeClass","in_h","height","in_w","o_w","oc","left","o_h","new_x_offset","pageX","new_y_offset","pageY","addClass","workflow","fit_canvas_to_nodes","op","offsetParent","opo","new_size","cc_pos","canvas_el","cv_w","c","get","parent","getContext","shift_h","cv_h","size","shift_w","ceil","attr","nodes","strokeStyle","id","node","lineWidth","node_element","w","h","fillStyle","workflow_outputs","undefined","length","fillRect","clearTimeout","test","onmove","timeout","panel_pos","panel_w","panel_h","viewport","viewport_w","viewport_h","viewport_offset","min_x","min_y","max_x","p_min_x","p_min_y","p_max_y","p_max_x","close_dist","nudge","t","moved","setTimeout","stop"],"mappings":"YAAAA,WAAW,WACP,QAASC,GAAeC,EAAKC,EAAiBC,GAD3CC,KAAIH,IAAAA,EACPG,KAASJ,GAAAA,EACLI,KAAKH,GAALG,KAAAC,GAAAC,KAAA,qBACAF,KAAKC,SAAKH,EACVE,KAAKG,GAAKJ,EAAQG,KAAM,oBACxBF,KAAKD,GAAAA,EAAWA,KAAhB,sBAEAC,KAAKI,YAyKR,QAAAC,GAAAC,GACCC,KAAQF,MAAAA,EA4DD,MApOLG,GAAAD,OAAKE,EAALC,WACHD,UAAA,WACD,GAAUb,GAAAA,KACNa,EAAY,SAAAE,EAAAC,GACJC,EAAAA,KAAOC,IAAXH,EAAAE,EAAAZ,GAAAc,QAAA,GACIC,EAAAA,KAAOC,IAAAN,GAAPK,EAAoBJ,GAAIG,QAAAF,EAAAZ,GAAAc,QAAA,GACxBJ,EAAIO,KAAKJ,IAALF,EAAaC,EAAKZ,GAAGc,SAAzB,GACAJ,EAAIO,KAAKD,IAALL,GAAeC,EAAAV,GAAQY,SAAUF,EAAQE,GAAAA,SAA7C,GACAH,EAAIM,GAAAA,KACAA,KAAKD,EACTJ,IAAQM,IAEJC,EAAAA,GAAAA,KAAKR,wBAAAA,EAFTS,wBAAAT,IAKeC,EAAAS,0BAGlBtB,MAbDG,GAAAoB,KAAA,WAcAvB,KAAAwB,aAAA,GAAAnB,GAAAL,OAEI,IAAAyB,GAAKD,CACRxB,MAFDC,GAAAyB,KAAA,YAAA,WAGID,GAAAA,GAAJjB,EAAcmB,MAAAA,SACND,EAARb,EAAcV,GAAAyB,UACVD,GAAUE,EAAAT,IAAMU,EAAAA,IAChBL,EAAQZ,EAAKV,KAAGyB,EAAAA,OAChBD,KAAAA,OAAaP,SAAQA,EAArBW,GACAN,EAAAA,EAAAA,QAAWA,EAAXM,EAAAC,QAAAL,KACDD,KAAM,UAAQ,WACbV,EAAMe,IAAEE,SAAUR,sBACnBC,EAAMQ,kBAELrB,KAAAA,SAAKqB,MAAAA,SAALC,GATJ,GAAAtB,EAAAd,SAAAqC,SAAA,eAWKrC,EAALA,SAAqBsC,YAAc,mBAC3BxB,CACAA,GAAAA,GAAKd,EAASsC,GAAAA,QACXC,EAAAzB,EAAAV,GAAAoC,SACCC,EAAAA,EAAO3B,GAAAE,QACPuB,EAAAA,EAAOzB,GAAA0B,SACPE,EAAc1B,EAAAA,MAFlBF,EAAA6B,GAAAZ,SAAAa,KAAA9B,EAAAT,GAAAW,QAAA,EAGI6B,EAAcL,EAAAA,MAHlB1B,EAAA6B,GAAAZ,SAAAV,IAAAP,EAAAT,GAAAmC,SAAA,CAAAvB,KAII6B,EAAiBC,GAAQjC,IACzBkC,EAAiBC,GAAQnC,GAC7BG,EAAMnB,IAAIgD,SAAAA,sBAEVhC,EAAKhB,mBAIbG,KAAAI,GAAAsB,KAAA,OAAA,SAAAS,EAAAJ,GACA,GAAQL,GAAMb,EAAdV,GAAsBY,QACdyB,EAAO3B,EAAKV,GAAGY,SACfuB,EAAAA,EAAOzB,GAAAE,QACP0B,EAAM5B,EAAK6B,GAAG3B,SACd6B,EAAcL,EAAAA,QAHlB1B,EAAAd,SAAA+B,SAAAa,KAIIE,EAAed,EAAEE,QAAUpB,EAAKd,SAAS+B,SAASa,GAJtD3B,KAKI+B,EAAiBf,GAAUnB,IACrBgC,EAAAD,GAAqBJ,KAEhCd,KAAM,UAAW,WAChBb,EAAKd,SAASkD,SAAS,eACvBpC,EAAKhB,IAAIqD,SAASC,sBAClBtC,EAAKqB,kBAGT1B,EAAE,oBAAoBkB,KAAM,OAAQ,SAAAS,EAAAJ,GAChC,GAAIqB,GAAK5C,EAAER,MAAMqD,eACbC,EAAMF,EAAGtB,SACTyB,EAAWrC,KAAKD,IAAKmC,EAAGrC,SAAckB,EAAAA,QAAUqB,EAAIX,MAE3CS,EAAAb,UAAAR,EAAAC,QAAAsB,EAAAlC,KACTL,GAAAA,MAAAA,KACAwB,MAAAA,EAFJA,OAAAgB,IALJ1C,EAAAqB,kBAjE2B1B,EAAA,wBAAAkB,KAAA,OAAA,eAmF3BJ,wBAAA,WAAA,GAEIoB,GAAK1C,KAAK0C,GACVtC,EAAKJ,KAAKI,GACVoC,EAAAA,KAAUzB,GACVuB,EAAAA,KAAUC,GACVE,EAAMC,EAAG3B,QACT6B,EAAMF,EAAGH,SACTiB,EAAAA,EAASrD,QACVgB,EAAKuB,EAAAH,SACJI,EAAUa,EAAAA,UACVpC,GAAAA,KACAuB,OAAAa,EAAAb,KAAAH,GAAAC,EACA1B,MAASd,EAAAmB,IAAaoB,GAAOC,EAJjC1B,MAAAd,EAAAc,QAAAyB,EAAAC,EAAA,EA5F2BF,OAAAtC,EAAAsC,SAAAD,EAAAM,EAAA,KAqG3BV,cACWuB,WADX,GAOIC,GAAAA,EAAOjB,EAAQ1B,EALf4C,EAAIF,EAAUG,oBACdpB,EAAOhC,EAAEqD,SAAAA,SAAF9C,QACPuB,EAAAA,EAASsB,IAAA,GAAAE,WAAqBvB,MAC9BK,EAAKmB,EAAAA,qBAAThD,QACAuB,EAAA9B,EAAA,qBAAA+B,SAGKC,EAAOkB,KAAPzD,GAAeqC,QAChB0B,EAAAhE,KAAAC,GAAAsC,QACAE,GAAMD,GAAOkB,EAAOO,GAEpBrB,EAAMN,EAAO0B,EAAOC,EACpBF,GAAYE,EAAOrB,GAAnB,EALJA,EAMON,EAAKE,EAAcyB,EACtBF,GAAAE,EAAArB,GAAA,GACAmB,EAAAzB,GAEAG,EAAMvB,EACNgD,EAAAA,EALGzB,EAMAvB,KAAAiD,KAAAvB,EAAAJ,EAAAF,GACH4B,GAAAD,EAAAxB,GAAA,IAGAG,EAAM1B,EACN6C,EAAU,EACbnB,EAAA1B,KAAAiD,KAAA1B,EAAAH,EAAAE,GACDiB,GAAAQ,EAAwBrB,GAAA,GAErBxB,EAAK2C,SAFgB5C,KAGrBJ,KAAAA,EACAwB,IAAAA,EAJHxB,MAAA0B,EAMAgB,OAAUW,IAEVX,EAAAW,KAAA,QAAA3B,GACAjC,EAAQ4D,KAASlB,SAASmB,GAEtBV,EAAAA,KAAEW,KAAAA,IAAFpB,SAAgBmB,MAAhB,SAAAE,EAAAC,GACAb,EAAEc,UAAY,UACdd,EAAAW,YAAII,UAAJf,EAAAc,UACI7C,CADJ,IAEIjB,GAAagC,EAAT6B,EAAgBhC,SACpB5B,EAAIgB,EAAAA,WACJ+C,EAAID,EAAAA,KAAa3D,EAAUyB,EAC3BoC,EAAIF,EAAAA,IAAanC,EAAbK,EACJ4B,EAAAA,EAAYzD,QAAAyB,EAAAC,EACZkB,EAAEkB,EAAYtC,SAAdD,EAAAM,CACAe,GAAEW,QAFNX,EAAAkB,UAGgBC,UACZnB,EAAEkB,YAAY,eACdE,KAAET,EAAAA,kBAAFE,EAAAM,iBAAAE,OAAA,IACHrB,EAAAkB,UAAA,UACCI,EAAAA,YAAmBL,WAjBzBjB,EAAAsB,SAAAtE,EAAAC,EAAA+D,EAAAC,GAoBAjB,EAAKrC,WAAAA,EAAAA,EAAAA,EAAAA,KA9JbtB,KAAAsB,6BAwKQ4D,EAAAA,OAAAA,EAAcxE,WACdyE,KAAA,SAAUrC,EAAVsC,GAAAF,aACUlC,KADVqC,QAAA,IAAI1E,GAAIwB,EAAEW,MAENlC,EAAAuB,EAAAa,MAEAsC,EAAAA,EAAAA,KAAYhF,OACZiF,EAAUjF,EAAMS,WAChByE,EAAUlF,EAAMiC,QAAhBiD,EAAUlF,EAAMiC,SAEhBkD,EAAWnF,EAAMuD,SACjB6B,EAAaD,EAAS1E,QACtB4E,EAAaF,EAASlD,SACtBqD,EAAkBH,EAAS3D,SAC3B+D,EAAAD,EAAAjD,KACAkD,EAAQD,EAbZxE,IAcI0E,EAAQF,EAAAA,EAAgBxE,QACxB2E,EAAQF,EAAQJ,EAAS1E,SAGzBiF,IAAcT,EAAYG,EAAa,GADvCO,IAAAT,EAAAG,EAAA,GACAK,EAAcT,EAAYG,EAC1BO,EAAcT,EAAYG,EAE1BO,GAAAA,CAMJ,IAAKvF,EALD,EAKkBkF,GAHlB,GAAAP,EAAA3C,KAAAwD,EAAA,CACAC,GAAAA,GAzBJlF,KAAAJ,IAuBY,GAvBZqF,EAAAb,EAAA3C,KA0BI0D,GA1BJlF,IAAA,OAAAmE,EAAA3C,KAAA2D,GA2BSF,GAAAA,OAED,IAAIE,EAPR,EAOsBD,GAClB/F,GAAAA,EAAWqC,KAAQ2C,EAAU3C,CAC7B4D,GAAAA,GAAQrF,KAARJ,IARI,GAQJwE,EAAA3C,KAAAqD,EACH1F,GAAAa,IAAA,OAAAmE,EAAA3C,KAAA2D,GACEC,GAASH,OAER,IAAIE,EAbR,EAasBD,GAClB/F,GAAAA,EAAWc,IAAX8E,EAAmBZ,CACnBiB,GAAAA,GAAQrF,KAARJ,IAdI,GAcJoF,EAAAZ,EAAAlE,IACHd,GAAAa,IAAA,MAAAmE,EAAAlE,IAAAkF,GACEC,GAASH,OAER,IAAIE,EAnBR,EAmBsBD,GAClB/F,EAAWc,IAAOkE,EAAUlE,CAC5BmF,GAAAA,GAAQrF,KAARJ,IApBI,GAoBJwE,EAAAlE,IAAA4E,EACH1F,GAAAa,IAAA,MAAAmE,EAAAlE,IAAAkF,EAAA,MACEC,GAASH,EAGR9F,GAAAA,EAAAA,CAEH8E,GACJ,IAAA9E,GAAAN,IACIuG,MAALlB,QAAamB,WAAA,WAAAlG,EAAA6E,KAAAhD,EAAAiD,IAAA,MAGTqB,KAAA,SAAInG,EAAAA,GACJ4E,aAAKG,KAAUmB,YAClB5G","file":"../../../scripts/mvc/workflow/workflow-canvas.js","sourcesContent":["define([], function() {\n    function CanvasManager( app, canvas_viewport, overview ) {\n        this.app = app;\n        this.cv = canvas_viewport;\n        this.cc = this.cv.find( \"#canvas-container\" );\n        this.overview = overview;\n        this.oc = overview.find( \"#overview-canvas\" );\n        this.ov = overview.find( \"#overview-viewport\" );\n        // Make overview box draggable\n        this.init_drag();\n    }\n    $.extend( CanvasManager.prototype, {\n        init_drag : function () {\n            var self = this;\n            var move = function( x, y ) {\n                x = Math.min( x, self.cv.width() / 2 );\n                x = Math.max( x, - self.cc.width() + self.cv.width() / 2 );\n                y = Math.min( y, self.cv.height() / 2 );\n                y = Math.max( y, - self.cc.height() + self.cv.height() / 2 );\n                self.cc.css( {\n                    left: x,\n                    top: y\n                });\n                self.cv.css( { \"background-position-x\": x,\n                               \"background-position-y\": y\n                });\n                self.update_viewport_overlay();\n            };\n            // Dragging within canvas background\n            this.cc.each( function() {\n                this.scroll_panel = new ScrollPanel( this );\n            });\n            var x_adjust, y_adjust;\n            this.cv.bind( \"dragstart\", function() {\n                var o = $(this).offset();\n                var p = self.cc.position();\n                y_adjust = p.top - o.top;\n                x_adjust = p.left - o.left;\n            }).bind( \"drag\", function( e, d ) {\n                move( d.offsetX + x_adjust, d.offsetY + y_adjust );\n            }).bind( \"dragend\", function() {\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n            this.overview.click( function( e ) {\n                if (self.overview.hasClass('blockaclick')){\n                    self.overview.removeClass('blockaclick');\n                } else {\n                    var in_w = self.cc.width(),\n                        in_h = self.cc.height(),\n                        o_w = self.oc.width(),\n                        o_h = self.oc.height(),\n                        new_x_offset = e.pageX - self.oc.offset().left - self.ov.width() / 2,\n                        new_y_offset = e.pageY - self.oc.offset().top - self.ov.height() / 2;\n                    move( - ( new_x_offset / o_w * in_w ),\n                          - ( new_y_offset / o_h * in_h ) );\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                }\n            });\n            // Dragging for overview pane\n            this.ov.bind( \"drag\", function( e, d ) {\n                var in_w = self.cc.width(),\n                    in_h = self.cc.height(),\n                    o_w = self.oc.width(),\n                    o_h = self.oc.height(),\n                    new_x_offset = d.offsetX - self.overview.offset().left,\n                    new_y_offset = d.offsetY - self.overview.offset().top;\n                move( - ( new_x_offset / o_w * in_w ),\n                      - ( new_y_offset / o_h * in_h ) );\n            }).bind( \"dragend\", function() {\n                self.overview.addClass('blockaclick');\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n            // Dragging for overview border (resize)\n            $(\"#overview-border\").bind( \"drag\", function( e, d ) {\n                var op = $(this).offsetParent();\n                var opo = op.offset();\n                var new_size = Math.max( op.width() - ( d.offsetX - opo.left ),\n                                         op.height() - ( d.offsetY - opo.top ) );\n                $(this).css( {\n                    width: new_size,\n                    height: new_size\n                });\n                self.draw_overview();\n            });\n\n            /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n            $(\"#overview-border div\").bind(\"drag\", function() { });\n\n        },\n        update_viewport_overlay: function() {\n            var cc = this.cc,\n                cv = this.cv,\n                oc = this.oc,\n                ov = this.ov,\n                in_w = cc.width(),\n                in_h = cc.height(),\n                o_w = oc.width(),\n                o_h = oc.height(),\n                cc_pos = cc.position();\n            ov.css( {\n                left: - ( cc_pos.left / in_w * o_w ),\n                top: - ( cc_pos.top / in_h * o_h ),\n                // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n                width: ( cv.width() / in_w * o_w ) - 2,\n                height: ( cv.height() / in_h * o_h ) - 2\n            });\n        },\n        draw_overview: function() {\n            var canvas_el = $(\"#overview-canvas\"),\n                size = canvas_el.parent().parent().width(),\n                c = canvas_el.get(0).getContext(\"2d\"),\n                in_w = $(\"#canvas-container\").width(),\n                in_h = $(\"#canvas-container\").height();\n            var o_h, shift_h, o_w, shift_w;\n            // Fit canvas into overview area\n            var cv_w = this.cv.width();\n            var cv_h = this.cv.height();\n            if ( in_w < cv_w && in_h < cv_h ) {\n                // Canvas is smaller than viewport\n                o_w = in_w / cv_w * size;\n                shift_w = ( size - o_w ) / 2;\n                o_h = in_h / cv_h * size;\n                shift_h = ( size - o_h ) / 2;\n            } else if ( in_w < in_h ) {\n                // Taller than wide\n                shift_h = 0;\n                o_h = size;\n                o_w = Math.ceil( o_h * in_w / in_h );\n                shift_w = ( size - o_w ) / 2;\n            } else {\n                // Wider than tall\n                o_w = size;\n                shift_w = 0;\n                o_h = Math.ceil( o_w * in_h / in_w );\n                shift_h = ( size - o_h ) / 2;\n            }\n            canvas_el.parent().css( {\n               left: shift_w,\n               top: shift_h,\n               width: o_w,\n               height: o_h\n            });\n            canvas_el.attr( \"width\", o_w );\n            canvas_el.attr( \"height\", o_h );\n            // Draw overview\n            $.each( this.app.workflow.nodes, function( id, node ) {\n                c.fillStyle = \"#D2C099\";\n                c.strokeStyle = \"#D8B365\";\n                c.lineWidth = 1;\n                var node_element = $(node.element),\n                    position = node_element.position(),\n                    x = position.left / in_w * o_w,\n                    y = position.top / in_h * o_h,\n                    w = node_element.width() / in_w * o_w,\n                    h = node_element.height() / in_h * o_h;\n                if (node.errors){\n                    c.fillStyle = \"#FFCCCC\";\n                    c.strokeStyle = \"#AA6666\";\n                } else if (node.workflow_outputs !== undefined && node.workflow_outputs.length > 0){\n                    c.fillStyle = \"#E8A92D\";\n                    c.strokeStyle = \"#E8A92D\";\n                }\n                c.fillRect( x, y, w, h );\n                c.strokeRect( x, y, w, h );\n            });\n            this.update_viewport_overlay();\n        }\n    });\n\n    // FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\n    function ScrollPanel( panel ) {\n        this.panel = panel;\n    }\n    $.extend( ScrollPanel.prototype, {\n        test: function( e, onmove ) {\n            clearTimeout( this.timeout );\n            var x = e.pageX,\n                y = e.pageY,\n                // Panel size and position\n                panel = $(this.panel),\n                panel_pos = panel.position(),\n                panel_w = panel.width(),\n                panel_h = panel.height(),\n                // Viewport size and offset\n                viewport = panel.parent(),\n                viewport_w = viewport.width(),\n                viewport_h = viewport.height(),\n                viewport_offset = viewport.offset(),\n                // Edges of viewport (in page coordinates)\n                min_x = viewport_offset.left,\n                min_y = viewport_offset.top,\n                max_x = min_x + viewport.width(),\n                max_y = min_y + viewport.height(),\n                // Legal panel range\n                p_min_x = - ( panel_w - ( viewport_w / 2 ) ),\n                p_min_y = - ( panel_h - ( viewport_h / 2 )),\n                p_max_x = ( viewport_w / 2 ),\n                p_max_y = ( viewport_h / 2 ),\n                // Did the panel move?\n                moved = false,\n                // Constants\n                close_dist = 5,\n                nudge = 23;\n            if ( x - close_dist < min_x ) {\n                if ( panel_pos.left < p_max_x ) {\n                    var t = Math.min( nudge, p_max_x - panel_pos.left );\n                    panel.css( \"left\", panel_pos.left + t );\n                    moved = true;\n                }\n            } else if ( x + close_dist > max_x ) {\n                if ( panel_pos.left > p_min_x ) {\n                    var t = Math.min( nudge, panel_pos.left  - p_min_x );\n                    panel.css( \"left\", panel_pos.left - t );\n                    moved = true;\n                }\n            } else if ( y - close_dist < min_y ) {\n                if ( panel_pos.top < p_max_y ) {\n                    var t = Math.min( nudge, p_max_y - panel_pos.top );\n                    panel.css( \"top\", panel_pos.top + t );\n                    moved = true;\n                }\n            } else if ( y + close_dist > max_y ) {\n                if ( panel_pos.top > p_min_y ) {\n                    var t = Math.min( nudge, panel_pos.top  - p_min_x );\n                    panel.css( \"top\", ( panel_pos.top - t ) + \"px\" );\n                    moved = true;\n                }\n            }\n            if ( moved ) {\n                // Keep moving even if mouse doesn't move\n                onmove();\n                var panel = this;\n                this.timeout = setTimeout( function() { panel.test( e, onmove ); }, 50 );\n            }\n        },\n        stop: function( e, ui ) {\n            clearTimeout( this.timeout );\n        }\n    });\n    return CanvasManager;\n});\n"]}