{"version":3,"sources":["mvc/workflow/workflow-canvas.js"],"names":["define","CanvasManager","app","canvas_viewport","overview","this","cv","cc","find","oc","ov","init_drag","ScrollPanel","panel","$","extend","prototype","self","move","x","y","Math","min","width","max","height","css","left","top","background-position-x","background-position-y","update_viewport_overlay","each","scroll_panel","x_adjust","y_adjust","bind","o","offset","p","position","e","d","offsetX","offsetY","workflow","fit_canvas_to_nodes","draw_overview","click","hasClass","removeClass","in_w","in_h","o_w","o_h","new_x_offset","pageX","new_y_offset","pageY","addClass","op","offsetParent","opo","new_size","cc_pos","shift_h","shift_w","canvas_el","size","parent","c","get","getContext","cv_w","cv_h","ceil","attr","nodes","id","node","fillStyle","strokeStyle","lineWidth","node_element","element","w","h","errors","undefined","workflow_outputs","length","fillRect","strokeRect","test","onmove","clearTimeout","timeout","panel_pos","panel_w","panel_h","viewport","viewport_w","viewport_h","viewport_offset","min_x","min_y","max_x","max_y","p_min_x","p_min_y","p_max_x","p_max_y","moved","t","setTimeout","stop","ui"],"mappings":"AAAAA,UAAW,WACP,QAASC,GAAeC,EAAKC,EAAiBC,GAC1CC,KAAKH,IAAMA,EACXG,KAAKC,GAAKH,EACVE,KAAKE,GAAKF,KAAKC,GAAGE,KAAM,qBACxBH,KAAKD,SAAWA,EAChBC,KAAKI,GAAKL,EAASI,KAAM,oBACzBH,KAAKK,GAAKN,EAASI,KAAM,sBAEzBH,KAAKM,YAqKT,QAASC,GAAaC,GAClBR,KAAKQ,MAAQA,EAoEjB,MAxOAC,GAAEC,OAAQd,EAAce,WACpBL,UAAY,WACR,GAAIM,GAAOZ,KACPa,EAAO,SAAUC,EAAGC,GACpBD,EAAIE,KAAKC,IAAKH,EAAGF,EAAKX,GAAGiB,QAAU,GACnCJ,EAAIE,KAAKG,IAAKL,GAAKF,EAAKV,GAAGgB,QAAUN,EAAKX,GAAGiB,QAAU,GACvDH,EAAIC,KAAKC,IAAKF,EAAGH,EAAKX,GAAGmB,SAAW,GACpCL,EAAIC,KAAKG,IAAKJ,GAAKH,EAAKV,GAAGkB,SAAWR,EAAKX,GAAGmB,SAAW,GACzDR,EAAKV,GAAGmB,KACJC,KAAMR,EACNS,IAAKR,IAETH,EAAKX,GAAGoB,KAAOG,wBAAyBV,EACzBW,wBAAyBV,IAExCH,EAAKc,0BAGT1B,MAAKE,GAAGyB,KAAM,WACV3B,KAAK4B,aAAe,GAAIrB,GAAaP,OAEzC,IAAI6B,GAAUC,CACd9B,MAAKC,GAAG8B,KAAM,YAAa,WACvB,GAAIC,GAAIvB,EAAET,MAAMiC,SACZC,EAAItB,EAAKV,GAAGiC,UAChBL,GAAWI,EAAEX,IAAMS,EAAET,IACrBM,EAAWK,EAAEZ,KAAOU,EAAEV,OACvBS,KAAM,OAAQ,SAAUK,EAAGC,GAC1BxB,EAAMwB,EAAEC,QAAUT,EAAUQ,EAAEE,QAAUT,KACzCC,KAAM,UAAW,WAChBnB,EAAKf,IAAI2C,SAASC,sBAClB7B,EAAK8B,kBAET1C,KAAKD,SAAS4C,MAAO,SAAUP,GAC3B,GAAIxB,EAAKb,SAAS6C,SAAS,eACvBhC,EAAKb,SAAS8C,YAAY,mBACvB,CACH,GAAIC,GAAOlC,EAAKV,GAAGgB,QACf6B,EAAOnC,EAAKV,GAAGkB,SACf4B,EAAMpC,EAAKR,GAAGc,QACd+B,EAAMrC,EAAKR,GAAGgB,SACd8B,EAAed,EAAEe,MAAQvC,EAAKR,GAAG6B,SAASX,KAAOV,EAAKP,GAAGa,QAAU,EACnEkC,EAAehB,EAAEiB,MAAQzC,EAAKR,GAAG6B,SAASV,IAAMX,EAAKP,GAAGe,SAAW,CACvEP,KAAUqC,EAAeF,GAAMF,IACrBM,EAAeH,GAAMF,GAC/BnC,EAAKf,IAAI2C,SAASC,sBAClB7B,EAAK8B,mBAIb1C,KAAKK,GAAG0B,KAAM,OAAQ,SAAUK,EAAGC,GAC/B,GAAIS,GAAOlC,EAAKV,GAAGgB,QACf6B,EAAOnC,EAAKV,GAAGkB,SACf4B,EAAMpC,EAAKR,GAAGc,QACd+B,EAAMrC,EAAKR,GAAGgB,SACd8B,EAAeb,EAAEC,QAAU1B,EAAKb,SAASkC,SAASX,KAClD8B,EAAef,EAAEE,QAAU3B,EAAKb,SAASkC,SAASV,GACtDV,KAAUqC,EAAeF,GAAMF,IACrBM,EAAeH,GAAMF,KAChChB,KAAM,UAAW,WAChBnB,EAAKb,SAASuD,SAAS,eACvB1C,EAAKf,IAAI2C,SAASC,sBAClB7B,EAAK8B,kBAGTjC,EAAE,oBAAoBsB,KAAM,OAAQ,SAAUK,EAAGC,GAC7C,GAAIkB,GAAK9C,EAAET,MAAMwD,eACbC,EAAMF,EAAGtB,SACTyB,EAAW1C,KAAKG,IAAKoC,EAAGrC,SAAYmB,EAAEC,QAAUmB,EAAInC,MAC/BiC,EAAGnC,UAAaiB,EAAEE,QAAUkB,EAAIlC,KACzDd,GAAET,MAAMqB,KACJH,MAAOwC,EACPtC,OAAQsC,IAEZ9C,EAAK8B,kBAKTjC,EAAE,wBAAwBsB,KAAK,OAAQ,eAG3CL,wBAAyB,WACrB,GAAIxB,GAAKF,KAAKE,GACVD,EAAKD,KAAKC,GACVG,EAAKJ,KAAKI,GACVC,EAAKL,KAAKK,GACVyC,EAAO5C,EAAGgB,QACV6B,EAAO7C,EAAGkB,SACV4B,EAAM5C,EAAGc,QACT+B,EAAM7C,EAAGgB,SACTuC,EAASzD,EAAGiC,UAChB9B,GAAGgB,KACCC,OAAUqC,EAAOrC,KAAOwB,GAAOE,EAC/BzB,MAASoC,EAAOpC,IAAMwB,GAAOE,EAE7B/B,MAASjB,EAAGiB,QAAU4B,EAAOE,EAAQ,EACrC5B,OAAUnB,EAAGmB,SAAW2B,EAAOE,EAAQ,KAG/CP,cAAe,WACX,GAKIO,GAAKW,EAASZ,EAAKa,EALnBC,EAAYrD,EAAE,oBACdsD,EAAOD,EAAUE,SAASA,SAAS9C,QACnC+C,EAAIH,EAAUI,IAAI,GAAGC,WAAW,MAChCrB,EAAOrC,EAAE,qBAAqBS,QAC9B6B,EAAOtC,EAAE,qBAAqBW,SAG9BgD,EAAOpE,KAAKC,GAAGiB,QACfmD,EAAOrE,KAAKC,GAAGmB,QACd0B,GAAOsB,GAAQrB,EAAOsB,GAEvBrB,EAAMF,EAAOsB,EAAOL,EACpBF,GAAYE,EAAOf,GAAQ,EAC3BC,EAAMF,EAAOsB,EAAON,EACpBH,GAAYG,EAAOd,GAAQ,GACnBH,EAAOC,GAEfa,EAAU,EACVX,EAAMc,EACNf,EAAMhC,KAAKsD,KAAMrB,EAAMH,EAAOC,GAC9Bc,GAAYE,EAAOf,GAAQ,IAG3BA,EAAMe,EACNF,EAAU,EACVZ,EAAMjC,KAAKsD,KAAMtB,EAAMD,EAAOD,GAC9Bc,GAAYG,EAAOd,GAAQ,GAE/Ba,EAAUE,SAAS3C,KAChBC,KAAMuC,EACNtC,IAAKqC,EACL1C,MAAO8B,EACP5B,OAAQ6B,IAEXa,EAAUS,KAAM,QAASvB,GACzBc,EAAUS,KAAM,SAAUtB,GAE1BxC,EAAEkB,KAAM3B,KAAKH,IAAI2C,SAASgC,MAAO,SAAUC,EAAIC,GAC3CT,EAAEU,UAAY,UACdV,EAAEW,YAAc,UAChBX,EAAEY,UAAY,CACd,IAAIC,GAAerE,EAAEiE,EAAKK,SACtB5C,EAAW2C,EAAa3C,WACxBrB,EAAIqB,EAASb,KAAOwB,EAAOE,EAC3BjC,EAAIoB,EAASZ,IAAMwB,EAAOE,EAC1B+B,EAAIF,EAAa5D,QAAU4B,EAAOE,EAClCiC,EAAIH,EAAa1D,SAAW2B,EAAOE,CACnCyB,GAAKQ,QACLjB,EAAEU,UAAY,UACdV,EAAEW,YAAc,eACiBO,KAA1BT,EAAKU,kBAAkCV,EAAKU,iBAAiBC,OAAS,IAC7EpB,EAAEU,UAAY,UACdV,EAAEW,YAAc,WAEpBX,EAAEqB,SAAUxE,EAAGC,EAAGiE,EAAGC,GACrBhB,EAAEsB,WAAYzE,EAAGC,EAAGiE,EAAGC,KAE3BjF,KAAK0B,6BAQbjB,EAAEC,OAAQH,EAAYI,WAClB6E,KAAM,SAAUpD,EAAGqD,GACfC,aAAc1F,KAAK2F,QACnB,IAAI7E,GAAIsB,EAAEe,MACNpC,EAAIqB,EAAEiB,MAEN7C,EAAQC,EAAET,KAAKQ,OACfoF,EAAYpF,EAAM2B,WAClB0D,EAAUrF,EAAMU,QAChB4E,EAAUtF,EAAMY,SAEhB2E,EAAWvF,EAAMwD,SACjBgC,EAAaD,EAAS7E,QACtB+E,EAAaF,EAAS3E,SACtB8E,EAAkBH,EAAS9D,SAE3BkE,EAAQD,EAAgB5E,KACxB8E,EAAQF,EAAgB3E,IACxB8E,EAAQF,EAAQJ,EAAS7E,QACzBoF,EAAQF,EAAQL,EAAS3E,SAEzBmF,IAAcV,EAAYG,EAAa,GACvCQ,IAAcV,EAAYG,EAAa,GACvCQ,EAAYT,EAAa,EACzBU,EAAYT,EAAa,EAEzBU,GAAQ,CAIZ,IAAK7F,EAFY,EAEKqF,GAClB,GAAKP,EAAUtE,KAAOmF,EAAU,CAC5B,GAAIG,GAAI5F,KAAKC,IAHT,GAGqBwF,EAAUb,EAAUtE,KAC7Cd,GAAMa,IAAK,OAAQuE,EAAUtE,KAAOsF,GACpCD,GAAQ,OAET,IAAK7F,EARK,EAQYuF,GACzB,GAAKT,EAAUtE,KAAOiF,EAAU,CAC5B,GAAIK,GAAI5F,KAAKC,IATT,GASqB2E,EAAUtE,KAAQiF,EAC3C/F,GAAMa,IAAK,OAAQuE,EAAUtE,KAAOsF,GACpCD,GAAQ,OAET,IAAK5F,EAdK,EAcYqF,GACzB,GAAKR,EAAUrE,IAAMmF,EAAU,CAC3B,GAAIE,GAAI5F,KAAKC,IAfT,GAeqByF,EAAUd,EAAUrE,IAC7Cf,GAAMa,IAAK,MAAOuE,EAAUrE,IAAMqF,GAClCD,GAAQ,OAET,IAAK5F,EApBK,EAoBYuF,GACpBV,EAAUrE,IAAMiF,EAAU,CAC3B,GAAII,GAAI5F,KAAKC,IArBT,GAqBqB2E,EAAUrE,IAAOgF,EAC1C/F,GAAMa,IAAK,MAASuE,EAAUrE,IAAMqF,EAAM,MAC1CD,GAAQ,EAGhB,GAAKA,EAAQ,CAETlB,GACA,IAAIjF,GAAQR,IACZA,MAAK2F,QAAUkB,WAAY,WAAarG,EAAMgF,KAAMpD,EAAGqD,IAAa,MAG5EqB,KAAM,SAAU1E,EAAG2E,GACfrB,aAAc1F,KAAK2F,YAGpB/F","file":"../../../scripts/mvc/workflow/workflow-canvas.js","sourcesContent":["define([], function() {\n    function CanvasManager( app, canvas_viewport, overview ) {\n        this.app = app;\n        this.cv = canvas_viewport;\n        this.cc = this.cv.find( \"#canvas-container\" );\n        this.overview = overview;\n        this.oc = overview.find( \"#overview-canvas\" );\n        this.ov = overview.find( \"#overview-viewport\" );\n        // Make overview box draggable\n        this.init_drag();\n    }\n    $.extend( CanvasManager.prototype, {\n        init_drag : function () {\n            var self = this;\n            var move = function( x, y ) {\n                x = Math.min( x, self.cv.width() / 2 );\n                x = Math.max( x, - self.cc.width() + self.cv.width() / 2 );\n                y = Math.min( y, self.cv.height() / 2 );\n                y = Math.max( y, - self.cc.height() + self.cv.height() / 2 );\n                self.cc.css( {\n                    left: x,\n                    top: y\n                });\n                self.cv.css( { \"background-position-x\": x,\n                               \"background-position-y\": y\n                });\n                self.update_viewport_overlay();\n            };\n            // Dragging within canvas background\n            this.cc.each( function() {\n                this.scroll_panel = new ScrollPanel( this );\n            });\n            var x_adjust, y_adjust;\n            this.cv.bind( \"dragstart\", function() {\n                var o = $(this).offset();\n                var p = self.cc.position();\n                y_adjust = p.top - o.top;\n                x_adjust = p.left - o.left;\n            }).bind( \"drag\", function( e, d ) {\n                move( d.offsetX + x_adjust, d.offsetY + y_adjust );\n            }).bind( \"dragend\", function() {\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n            this.overview.click( function( e ) {\n                if (self.overview.hasClass('blockaclick')){\n                    self.overview.removeClass('blockaclick');\n                } else {\n                    var in_w = self.cc.width(),\n                        in_h = self.cc.height(),\n                        o_w = self.oc.width(),\n                        o_h = self.oc.height(),\n                        new_x_offset = e.pageX - self.oc.offset().left - self.ov.width() / 2,\n                        new_y_offset = e.pageY - self.oc.offset().top - self.ov.height() / 2;\n                    move( - ( new_x_offset / o_w * in_w ),\n                          - ( new_y_offset / o_h * in_h ) );\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                }\n            });\n            // Dragging for overview pane\n            this.ov.bind( \"drag\", function( e, d ) {\n                var in_w = self.cc.width(),\n                    in_h = self.cc.height(),\n                    o_w = self.oc.width(),\n                    o_h = self.oc.height(),\n                    new_x_offset = d.offsetX - self.overview.offset().left,\n                    new_y_offset = d.offsetY - self.overview.offset().top;\n                move( - ( new_x_offset / o_w * in_w ),\n                      - ( new_y_offset / o_h * in_h ) );\n            }).bind( \"dragend\", function() {\n                self.overview.addClass('blockaclick');\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n            // Dragging for overview border (resize)\n            $(\"#overview-border\").bind( \"drag\", function( e, d ) {\n                var op = $(this).offsetParent();\n                var opo = op.offset();\n                var new_size = Math.max( op.width() - ( d.offsetX - opo.left ),\n                                         op.height() - ( d.offsetY - opo.top ) );\n                $(this).css( {\n                    width: new_size,\n                    height: new_size\n                });\n                self.draw_overview();\n            });\n\n            /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n            $(\"#overview-border div\").bind(\"drag\", function() { });\n\n        },\n        update_viewport_overlay: function() {\n            var cc = this.cc,\n                cv = this.cv,\n                oc = this.oc,\n                ov = this.ov,\n                in_w = cc.width(),\n                in_h = cc.height(),\n                o_w = oc.width(),\n                o_h = oc.height(),\n                cc_pos = cc.position();\n            ov.css( {\n                left: - ( cc_pos.left / in_w * o_w ),\n                top: - ( cc_pos.top / in_h * o_h ),\n                // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n                width: ( cv.width() / in_w * o_w ) - 2,\n                height: ( cv.height() / in_h * o_h ) - 2\n            });\n        },\n        draw_overview: function() {\n            var canvas_el = $(\"#overview-canvas\"),\n                size = canvas_el.parent().parent().width(),\n                c = canvas_el.get(0).getContext(\"2d\"),\n                in_w = $(\"#canvas-container\").width(),\n                in_h = $(\"#canvas-container\").height();\n            var o_h, shift_h, o_w, shift_w;\n            // Fit canvas into overview area\n            var cv_w = this.cv.width();\n            var cv_h = this.cv.height();\n            if ( in_w < cv_w && in_h < cv_h ) {\n                // Canvas is smaller than viewport\n                o_w = in_w / cv_w * size;\n                shift_w = ( size - o_w ) / 2;\n                o_h = in_h / cv_h * size;\n                shift_h = ( size - o_h ) / 2;\n            } else if ( in_w < in_h ) {\n                // Taller than wide\n                shift_h = 0;\n                o_h = size;\n                o_w = Math.ceil( o_h * in_w / in_h );\n                shift_w = ( size - o_w ) / 2;\n            } else {\n                // Wider than tall\n                o_w = size;\n                shift_w = 0;\n                o_h = Math.ceil( o_w * in_h / in_w );\n                shift_h = ( size - o_h ) / 2;\n            }\n            canvas_el.parent().css( {\n               left: shift_w,\n               top: shift_h,\n               width: o_w,\n               height: o_h\n            });\n            canvas_el.attr( \"width\", o_w );\n            canvas_el.attr( \"height\", o_h );\n            // Draw overview\n            $.each( this.app.workflow.nodes, function( id, node ) {\n                c.fillStyle = \"#D2C099\";\n                c.strokeStyle = \"#D8B365\";\n                c.lineWidth = 1;\n                var node_element = $(node.element),\n                    position = node_element.position(),\n                    x = position.left / in_w * o_w,\n                    y = position.top / in_h * o_h,\n                    w = node_element.width() / in_w * o_w,\n                    h = node_element.height() / in_h * o_h;\n                if (node.errors){\n                    c.fillStyle = \"#FFCCCC\";\n                    c.strokeStyle = \"#AA6666\";\n                } else if (node.workflow_outputs !== undefined && node.workflow_outputs.length > 0){\n                    c.fillStyle = \"#E8A92D\";\n                    c.strokeStyle = \"#E8A92D\";\n                }\n                c.fillRect( x, y, w, h );\n                c.strokeRect( x, y, w, h );\n            });\n            this.update_viewport_overlay();\n        }\n    });\n\n    // FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\n    function ScrollPanel( panel ) {\n        this.panel = panel;\n    }\n    $.extend( ScrollPanel.prototype, {\n        test: function( e, onmove ) {\n            clearTimeout( this.timeout );\n            var x = e.pageX,\n                y = e.pageY,\n                // Panel size and position\n                panel = $(this.panel),\n                panel_pos = panel.position(),\n                panel_w = panel.width(),\n                panel_h = panel.height(),\n                // Viewport size and offset\n                viewport = panel.parent(),\n                viewport_w = viewport.width(),\n                viewport_h = viewport.height(),\n                viewport_offset = viewport.offset(),\n                // Edges of viewport (in page coordinates)\n                min_x = viewport_offset.left,\n                min_y = viewport_offset.top,\n                max_x = min_x + viewport.width(),\n                max_y = min_y + viewport.height(),\n                // Legal panel range\n                p_min_x = - ( panel_w - ( viewport_w / 2 ) ),\n                p_min_y = - ( panel_h - ( viewport_h / 2 )),\n                p_max_x = ( viewport_w / 2 ),\n                p_max_y = ( viewport_h / 2 ),\n                // Did the panel move?\n                moved = false,\n                // Constants\n                close_dist = 5,\n                nudge = 23;\n            if ( x - close_dist < min_x ) {\n                if ( panel_pos.left < p_max_x ) {\n                    var t = Math.min( nudge, p_max_x - panel_pos.left );\n                    panel.css( \"left\", panel_pos.left + t );\n                    moved = true;\n                }\n            } else if ( x + close_dist > max_x ) {\n                if ( panel_pos.left > p_min_x ) {\n                    var t = Math.min( nudge, panel_pos.left  - p_min_x );\n                    panel.css( \"left\", panel_pos.left - t );\n                    moved = true;\n                }\n            } else if ( y - close_dist < min_y ) {\n                if ( panel_pos.top < p_max_y ) {\n                    var t = Math.min( nudge, p_max_y - panel_pos.top );\n                    panel.css( \"top\", panel_pos.top + t );\n                    moved = true;\n                }\n            } else if ( y + close_dist > max_y ) {\n                if ( panel_pos.top > p_min_y ) {\n                    var t = Math.min( nudge, panel_pos.top  - p_min_x );\n                    panel.css( \"top\", ( panel_pos.top - t ) + \"px\" );\n                    moved = true;\n                }\n            }\n            if ( moved ) {\n                // Keep moving even if mouse doesn't move\n                onmove();\n                var panel = this;\n                this.timeout = setTimeout( function() { panel.test( e, onmove ); }, 50 );\n            }\n        },\n        stop: function( e, ui ) {\n            clearTimeout( this.timeout );\n        }\n    });\n    return CanvasManager;\n});\n"]}