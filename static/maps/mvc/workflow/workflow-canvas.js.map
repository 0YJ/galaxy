{"version":3,"sources":["mvc/workflow/workflow-canvas.js"],"names":["CanvasManager","app","canvas_viewport","overview","this","cv","cc","find","oc","ov","init_drag","viewport","panel","viewport_w","$","extend","prototype","self","move","x","y","width","Math","max","height","top","each","scroll_panel","ScrollPanel","update_viewport_overlay","bind","offset","p","y_adjust","o","x_adjust","left","d","position","offsetY","workflow","fit_canvas_to_nodes","draw_overview","removeClass","hasClass","o_w","o_h","in_w","new_x_offset","new_y_offset","e","pageX","offsetX","addClass","in_h","opo","new_size","op","css","cc_pos","canvas_el","getContext","shift_h","shift_w","c","size","cv_h","cv_w","parent","strokeStyle","fillStyle","node_element","w","attr","node","workflow_outputs","id","undefined","lineWidth","element","strokeRect","h","errors","length","clearTimeout","timeout","fillRect","viewport_offset","test","onmove","min_x","min_y","panel_pos","max_y","panel_w","p_min_x","p_max_x","p_max_y","viewport_h","close_dist","nudge","p_min_y","t","min","moved","max_x","setTimeout","stop","ui"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-canvas.js","sourcesContent":["function CanvasManager(app, canvas_viewport, overview) {\n    this.app = app;\n    this.cv = canvas_viewport;\n    this.cc = this.cv.find(\"#canvas-container\");\n    this.overview = overview;\n    this.oc = overview.find(\"#overview-canvas\");\n    this.ov = overview.find(\"#overview-viewport\");\n    // Make overview box draggable\n    this.init_drag();\n}\n$.extend(CanvasManager.prototype, {\n    init_drag: function() {\n        var self = this;\n        var move = function(x, y) {\n            x = Math.min(x, self.cv.width() / 2);\n            x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n            y = Math.min(y, self.cv.height() / 2);\n            y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n            self.cc.css({\n                left: x,\n                top: y\n            });\n            self.cv.css({\n                \"background-position-x\": x,\n                \"background-position-y\": y\n            });\n            self.update_viewport_overlay();\n        };\n        // Dragging within canvas background\n        this.cc.each(function() {\n            this.scroll_panel = new ScrollPanel(this);\n        });\n        var x_adjust, y_adjust;\n        this.cv\n            .bind(\"dragstart\", function() {\n                var o = $(this).offset();\n                var p = self.cc.position();\n                y_adjust = p.top - o.top;\n                x_adjust = p.left - o.left;\n            })\n            .bind(\"drag\", function(e, d) {\n                move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n            })\n            .bind(\"dragend\", function() {\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        this.overview.click(function(e) {\n            if (self.overview.hasClass(\"blockaclick\")) {\n                self.overview.removeClass(\"blockaclick\");\n            } else {\n                var in_w = self.cc.width(),\n                    in_h = self.cc.height(),\n                    o_w = self.oc.width(),\n                    o_h = self.oc.height(),\n                    new_x_offset =\n                        e.pageX - self.oc.offset().left - self.ov.width() / 2,\n                    new_y_offset =\n                        e.pageY - self.oc.offset().top - self.ov.height() / 2;\n                move(\n                    -(new_x_offset / o_w * in_w),\n                    -(new_y_offset / o_h * in_h)\n                );\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            }\n        });\n        // Dragging for overview pane\n        this.ov\n            .bind(\"drag\", function(e, d) {\n                var in_w = self.cc.width(),\n                    in_h = self.cc.height(),\n                    o_w = self.oc.width(),\n                    o_h = self.oc.height(),\n                    new_x_offset = d.offsetX - self.overview.offset().left,\n                    new_y_offset = d.offsetY - self.overview.offset().top;\n                move(\n                    -(new_x_offset / o_w * in_w),\n                    -(new_y_offset / o_h * in_h)\n                );\n            })\n            .bind(\"dragend\", function() {\n                self.overview.addClass(\"blockaclick\");\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        // Dragging for overview border (resize)\n        $(\"#overview-border\").bind(\"drag\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(\n                op.width() - (d.offsetX - opo.left),\n                op.height() - (d.offsetY - opo.top)\n            );\n            $(this).css({\n                width: new_size,\n                height: new_size\n            });\n            self.draw_overview();\n        });\n\n        /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n        $(\"#overview-border div\").bind(\"drag\", function() {});\n    },\n    update_viewport_overlay: function() {\n        var cc = this.cc,\n            cv = this.cv,\n            oc = this.oc,\n            ov = this.ov,\n            in_w = cc.width(),\n            in_h = cc.height(),\n            o_w = oc.width(),\n            o_h = oc.height(),\n            cc_pos = cc.position();\n        ov.css({\n            left: -(cc_pos.left / in_w * o_w),\n            top: -(cc_pos.top / in_h * o_h),\n            // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n            width: cv.width() / in_w * o_w - 2,\n            height: cv.height() / in_h * o_h - 2\n        });\n    },\n    draw_overview: function() {\n        var canvas_el = $(\"#overview-canvas\"),\n            size = canvas_el\n                .parent()\n                .parent()\n                .width(),\n            c = canvas_el.get(0).getContext(\"2d\"),\n            in_w = $(\"#canvas-container\").width(),\n            in_h = $(\"#canvas-container\").height();\n        var o_h, shift_h, o_w, shift_w;\n        // Fit canvas into overview area\n        var cv_w = this.cv.width();\n        var cv_h = this.cv.height();\n        if (in_w < cv_w && in_h < cv_h) {\n            // Canvas is smaller than viewport\n            o_w = in_w / cv_w * size;\n            shift_w = (size - o_w) / 2;\n            o_h = in_h / cv_h * size;\n            shift_h = (size - o_h) / 2;\n        } else if (in_w < in_h) {\n            // Taller than wide\n            shift_h = 0;\n            o_h = size;\n            o_w = Math.ceil(o_h * in_w / in_h);\n            shift_w = (size - o_w) / 2;\n        } else {\n            // Wider than tall\n            o_w = size;\n            shift_w = 0;\n            o_h = Math.ceil(o_w * in_h / in_w);\n            shift_h = (size - o_h) / 2;\n        }\n        canvas_el.parent().css({\n            left: shift_w,\n            top: shift_h,\n            width: o_w,\n            height: o_h\n        });\n        canvas_el.attr(\"width\", o_w);\n        canvas_el.attr(\"height\", o_h);\n        // Draw overview\n        $.each(this.app.workflow.nodes, function(id, node) {\n            c.fillStyle = \"#D2C099\";\n            c.strokeStyle = \"#D8B365\";\n            c.lineWidth = 1;\n            var node_element = $(node.element),\n                position = node_element.position(),\n                x = position.left / in_w * o_w,\n                y = position.top / in_h * o_h,\n                w = node_element.width() / in_w * o_w,\n                h = node_element.height() / in_h * o_h;\n            if (node.errors) {\n                c.fillStyle = \"#FFCCCC\";\n                c.strokeStyle = \"#AA6666\";\n            } else if (\n                node.workflow_outputs !== undefined &&\n                node.workflow_outputs.length > 0\n            ) {\n                c.fillStyle = \"#E8A92D\";\n                c.strokeStyle = \"#E8A92D\";\n            }\n            c.fillRect(x, y, w, h);\n            c.strokeRect(x, y, w, h);\n        });\n        this.update_viewport_overlay();\n    }\n});\n\n// FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\nfunction ScrollPanel(panel) {\n    this.panel = panel;\n}\n$.extend(ScrollPanel.prototype, {\n    test: function(e, onmove) {\n        clearTimeout(this.timeout);\n        var x = e.pageX,\n            y = e.pageY,\n            // Panel size and position\n            panel = $(this.panel),\n            panel_pos = panel.position(),\n            panel_w = panel.width(),\n            panel_h = panel.height(),\n            // Viewport size and offset\n            viewport = panel.parent(),\n            viewport_w = viewport.width(),\n            viewport_h = viewport.height(),\n            viewport_offset = viewport.offset(),\n            // Edges of viewport (in page coordinates)\n            min_x = viewport_offset.left,\n            min_y = viewport_offset.top,\n            max_x = min_x + viewport.width(),\n            max_y = min_y + viewport.height(),\n            // Legal panel range\n            p_min_x = -(panel_w - viewport_w / 2),\n            p_min_y = -(panel_h - viewport_h / 2),\n            p_max_x = viewport_w / 2,\n            p_max_y = viewport_h / 2,\n            // Did the panel move?\n            moved = false,\n            // Constants\n            close_dist = 5,\n            nudge = 23;\n        if (x - close_dist < min_x) {\n            if (panel_pos.left < p_max_x) {\n                var t = Math.min(nudge, p_max_x - panel_pos.left);\n                panel.css(\"left\", panel_pos.left + t);\n                moved = true;\n            }\n        } else if (x + close_dist > max_x) {\n            if (panel_pos.left > p_min_x) {\n                var t = Math.min(nudge, panel_pos.left - p_min_x);\n                panel.css(\"left\", panel_pos.left - t);\n                moved = true;\n            }\n        } else if (y - close_dist < min_y) {\n            if (panel_pos.top < p_max_y) {\n                var t = Math.min(nudge, p_max_y - panel_pos.top);\n                panel.css(\"top\", panel_pos.top + t);\n                moved = true;\n            }\n        } else if (y + close_dist > max_y) {\n            if (panel_pos.top > p_min_y) {\n                var t = Math.min(nudge, panel_pos.top - p_min_x);\n                panel.css(\"top\", panel_pos.top - t + \"px\");\n                moved = true;\n            }\n        }\n        if (moved) {\n            // Keep moving even if mouse doesn't move\n            onmove();\n            var panel = this;\n            this.timeout = setTimeout(function() {\n                panel.test(e, onmove);\n            }, 50);\n        }\n    },\n    stop: function(e, ui) {\n        clearTimeout(this.timeout);\n    }\n});\nexport default CanvasManager;\n"]}