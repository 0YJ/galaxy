{"version":3,"sources":["mvc/workflow/workflow-canvas.js"],"names":["CanvasManager","app","canvas_viewport","overview","this","cv","cc","find","oc","ov","init_drag","ScrollPanel","panel","viewport","$","extend","prototype","self","move","x","y","width","Math","max","height","top","each","scroll_panel","y_adjust","bind","o","p","position","x_adjust","left","offset","d","offsetY","workflow","fit_canvas_to_nodes","draw_overview","removeClass","hasClass","o_w","o_h","in_w","new_x_offset","e","pageX","new_y_offset","pageY","offsetX","addClass","in_h","opo","new_size","op","css","update_viewport_overlay","cc_pos","canvas_el","size","parent","shift_h","cv_w","shift_w","get","cv_h","c","strokeStyle","fillStyle","node_element","w","attr","node","workflow_outputs","id","undefined","lineWidth","element","strokeRect","h","errors","length","clearTimeout","timeout","fillRect","viewport_w","test","viewport_h","viewport_offset","panel_pos","min_y","panel_w","panel_h","p_min_y","p_max_y","min_x","max_x","nudge","max_y","close_dist","p_max_x","moved","t","p_min_x","min","setTimeout","onmove","stop","ui"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-canvas.js","sourcesContent":["function CanvasManager(app, canvas_viewport, overview) {\n    this.app = app;\n    this.cv = canvas_viewport;\n    this.cc = this.cv.find(\"#canvas-container\");\n    this.overview = overview;\n    this.oc = overview.find(\"#overview-canvas\");\n    this.ov = overview.find(\"#overview-viewport\");\n    // Make overview box draggable\n    this.init_drag();\n}\n$.extend(CanvasManager.prototype, {\n    init_drag: function() {\n        var self = this;\n        var move = function(x, y) {\n            x = Math.min(x, self.cv.width() / 2);\n            x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n            y = Math.min(y, self.cv.height() / 2);\n            y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n            self.cc.css({\n                left: x,\n                top: y\n            });\n            self.cv.css({\n                \"background-position-x\": x,\n                \"background-position-y\": y\n            });\n            self.update_viewport_overlay();\n        };\n        // Dragging within canvas background\n        this.cc.each(function() {\n            this.scroll_panel = new ScrollPanel(this);\n        });\n        var x_adjust;\n        var y_adjust;\n        this.cv\n            .bind(\"dragstart\", function() {\n                var o = $(this).offset();\n                var p = self.cc.position();\n                y_adjust = p.top - o.top;\n                x_adjust = p.left - o.left;\n            })\n            .bind(\"drag\", function(e, d) {\n                move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n            })\n            .bind(\"dragend\", function() {\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        this.overview.click(function(e) {\n            if (self.overview.hasClass(\"blockaclick\")) {\n                self.overview.removeClass(\"blockaclick\");\n            } else {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n\n                var new_x_offset =\n                    e.pageX - self.oc.offset().left - self.ov.width() / 2;\n\n                var new_y_offset =\n                    e.pageY - self.oc.offset().top - self.ov.height() / 2;\n\n                move(\n                    -(new_x_offset / o_w * in_w),\n                    -(new_y_offset / o_h * in_h)\n                );\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            }\n        });\n        // Dragging for overview pane\n        this.ov\n            .bind(\"drag\", function(e, d) {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n                var new_x_offset = d.offsetX - self.overview.offset().left;\n                var new_y_offset = d.offsetY - self.overview.offset().top;\n                move(\n                    -(new_x_offset / o_w * in_w),\n                    -(new_y_offset / o_h * in_h)\n                );\n            })\n            .bind(\"dragend\", function() {\n                self.overview.addClass(\"blockaclick\");\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        // Dragging for overview border (resize)\n        $(\"#overview-border\").bind(\"drag\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(\n                op.width() - (d.offsetX - opo.left),\n                op.height() - (d.offsetY - opo.top)\n            );\n            $(this).css({\n                width: new_size,\n                height: new_size\n            });\n            self.draw_overview();\n        });\n\n        /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n        $(\"#overview-border div\").bind(\"drag\", function() {});\n    },\n    update_viewport_overlay: function() {\n        var cc = this.cc;\n        var cv = this.cv;\n        var oc = this.oc;\n        var ov = this.ov;\n        var in_w = cc.width();\n        var in_h = cc.height();\n        var o_w = oc.width();\n        var o_h = oc.height();\n        var cc_pos = cc.position();\n        ov.css({\n            left: -(cc_pos.left / in_w * o_w),\n            top: -(cc_pos.top / in_h * o_h),\n            // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n            width: cv.width() / in_w * o_w - 2,\n            height: cv.height() / in_h * o_h - 2\n        });\n    },\n    draw_overview: function() {\n        var canvas_el = $(\"#overview-canvas\");\n\n        var size = canvas_el\n            .parent()\n            .parent()\n            .width();\n\n        var c = canvas_el.get(0).getContext(\"2d\");\n        var in_w = $(\"#canvas-container\").width();\n        var in_h = $(\"#canvas-container\").height();\n        var o_h;\n        var shift_h;\n        var o_w;\n        var shift_w;\n        // Fit canvas into overview area\n        var cv_w = this.cv.width();\n        var cv_h = this.cv.height();\n        if (in_w < cv_w && in_h < cv_h) {\n            // Canvas is smaller than viewport\n            o_w = in_w / cv_w * size;\n            shift_w = (size - o_w) / 2;\n            o_h = in_h / cv_h * size;\n            shift_h = (size - o_h) / 2;\n        } else if (in_w < in_h) {\n            // Taller than wide\n            shift_h = 0;\n            o_h = size;\n            o_w = Math.ceil(o_h * in_w / in_h);\n            shift_w = (size - o_w) / 2;\n        } else {\n            // Wider than tall\n            o_w = size;\n            shift_w = 0;\n            o_h = Math.ceil(o_w * in_h / in_w);\n            shift_h = (size - o_h) / 2;\n        }\n        canvas_el.parent().css({\n            left: shift_w,\n            top: shift_h,\n            width: o_w,\n            height: o_h\n        });\n        canvas_el.attr(\"width\", o_w);\n        canvas_el.attr(\"height\", o_h);\n        // Draw overview\n        $.each(this.app.workflow.nodes, function(id, node) {\n            c.fillStyle = \"#D2C099\";\n            c.strokeStyle = \"#D8B365\";\n            c.lineWidth = 1;\n            var node_element = $(node.element);\n            var position = node_element.position();\n            var x = position.left / in_w * o_w;\n            var y = position.top / in_h * o_h;\n            var w = node_element.width() / in_w * o_w;\n            var h = node_element.height() / in_h * o_h;\n            if (node.errors) {\n                c.fillStyle = \"#FFCCCC\";\n                c.strokeStyle = \"#AA6666\";\n            } else if (\n                node.workflow_outputs !== undefined &&\n                node.workflow_outputs.length > 0\n            ) {\n                c.fillStyle = \"#E8A92D\";\n                c.strokeStyle = \"#E8A92D\";\n            }\n            c.fillRect(x, y, w, h);\n            c.strokeRect(x, y, w, h);\n        });\n        this.update_viewport_overlay();\n    }\n});\n\n// FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\nfunction ScrollPanel(panel) {\n    this.panel = panel;\n}\n$.extend(ScrollPanel.prototype, {\n    test: function(e, onmove) {\n        clearTimeout(this.timeout);\n        var x = e.pageX;\n        var y = e.pageY;\n\n        var // Panel size and position\n        panel = $(this.panel);\n\n        var panel_pos = panel.position();\n        var panel_w = panel.width();\n        var panel_h = panel.height();\n\n        var // Viewport size and offset\n        viewport = panel.parent();\n\n        var viewport_w = viewport.width();\n        var viewport_h = viewport.height();\n        var viewport_offset = viewport.offset();\n\n        var // Edges of viewport (in page coordinates)\n        min_x = viewport_offset.left;\n\n        var min_y = viewport_offset.top;\n        var max_x = min_x + viewport.width();\n        var max_y = min_y + viewport.height();\n\n        var // Legal panel range\n        p_min_x = -(panel_w - viewport_w / 2);\n\n        var p_min_y = -(panel_h - viewport_h / 2);\n        var p_max_x = viewport_w / 2;\n        var p_max_y = viewport_h / 2;\n\n        var // Did the panel move?\n        moved = false;\n\n        var // Constants\n        close_dist = 5;\n\n        var nudge = 23;\n        if (x - close_dist < min_x) {\n            if (panel_pos.left < p_max_x) {\n                var t = Math.min(nudge, p_max_x - panel_pos.left);\n                panel.css(\"left\", panel_pos.left + t);\n                moved = true;\n            }\n        } else if (x + close_dist > max_x) {\n            if (panel_pos.left > p_min_x) {\n                var t = Math.min(nudge, panel_pos.left - p_min_x);\n                panel.css(\"left\", panel_pos.left - t);\n                moved = true;\n            }\n        } else if (y - close_dist < min_y) {\n            if (panel_pos.top < p_max_y) {\n                var t = Math.min(nudge, p_max_y - panel_pos.top);\n                panel.css(\"top\", panel_pos.top + t);\n                moved = true;\n            }\n        } else if (y + close_dist > max_y) {\n            if (panel_pos.top > p_min_y) {\n                var t = Math.min(nudge, panel_pos.top - p_min_x);\n                panel.css(\"top\", panel_pos.top - t + \"px\");\n                moved = true;\n            }\n        }\n        if (moved) {\n            // Keep moving even if mouse doesn't move\n            onmove();\n            var panel = this;\n            this.timeout = setTimeout(function() {\n                panel.test(e, onmove);\n            }, 50);\n        }\n    },\n    stop: function(e, ui) {\n        clearTimeout(this.timeout);\n    }\n});\nexport default CanvasManager;\n"]}