{"version":3,"sources":["mvc/workflow/workflow-canvas.js"],"names":["define","CanvasManager","app","canvas_viewport","overview","this","cv","cc","oc","ov","find","init_drag","ScrollPanel","min_y","panel","max_x","$","extend","prototype","self","move","min","x","width","y","height","Math","left","top","background-position-y","update_viewport_overlay","scroll_panel","x_adjust","each","bind","y_adjust","position","p","offset","e","d","offsetX","offsetY","workflow","fit_canvas_to_nodes","draw_overview","click","hasClass","removeClass","in_w","in_h","o_w","o_h","new_x_offset","new_y_offset","pageY","op","offsetParent","opo","addClass","max","css","canvas_el","size","c","shift_h","cc_pos","cv_w","cv_h","shift_w","get","getContext","parent","attr","fillStyle","lineWidth","strokeStyle","h","w","node_element","fillRect","strokeRect","id","node","element","onmove","clearTimeout","undefined","workflow_outputs","length","panel_w","panel_h","viewport","test","p_min_x","p_min_y","p_max_x","panel_pos","moved","close_dist","viewport_w","viewport_h","min_x","viewport_offset","max_y","t","p_max_y","setTimeout","timeout","stop","ui"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-canvas.js","sourcesContent":["define([], function() {\n    function CanvasManager(app, canvas_viewport, overview) {\n        this.app = app;\n        this.cv = canvas_viewport;\n        this.cc = this.cv.find(\"#canvas-container\");\n        this.overview = overview;\n        this.oc = overview.find(\"#overview-canvas\");\n        this.ov = overview.find(\"#overview-viewport\");\n        // Make overview box draggable\n        this.init_drag();\n    }\n    $.extend(CanvasManager.prototype, {\n        init_drag: function() {\n            var self = this;\n            var move = function(x, y) {\n                x = Math.min(x, self.cv.width() / 2);\n                x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n                y = Math.min(y, self.cv.height() / 2);\n                y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n                self.cc.css({\n                    left: x,\n                    top: y\n                });\n                self.cv.css({\n                    \"background-position-x\": x,\n                    \"background-position-y\": y\n                });\n                self.update_viewport_overlay();\n            };\n            // Dragging within canvas background\n            this.cc.each(function() {\n                this.scroll_panel = new ScrollPanel(this);\n            });\n            var x_adjust, y_adjust;\n            this.cv\n                .bind(\"dragstart\", function() {\n                    var o = $(this).offset();\n                    var p = self.cc.position();\n                    y_adjust = p.top - o.top;\n                    x_adjust = p.left - o.left;\n                })\n                .bind(\"drag\", function(e, d) {\n                    move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n                })\n                .bind(\"dragend\", function() {\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                });\n            this.overview.click(function(e) {\n                if (self.overview.hasClass(\"blockaclick\")) {\n                    self.overview.removeClass(\"blockaclick\");\n                } else {\n                    var in_w = self.cc.width(),\n                        in_h = self.cc.height(),\n                        o_w = self.oc.width(),\n                        o_h = self.oc.height(),\n                        new_x_offset =\n                            e.pageX -\n                            self.oc.offset().left -\n                            self.ov.width() / 2,\n                        new_y_offset =\n                            e.pageY -\n                            self.oc.offset().top -\n                            self.ov.height() / 2;\n                    move(\n                        -(new_x_offset / o_w * in_w),\n                        -(new_y_offset / o_h * in_h)\n                    );\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                }\n            });\n            // Dragging for overview pane\n            this.ov\n                .bind(\"drag\", function(e, d) {\n                    var in_w = self.cc.width(),\n                        in_h = self.cc.height(),\n                        o_w = self.oc.width(),\n                        o_h = self.oc.height(),\n                        new_x_offset = d.offsetX - self.overview.offset().left,\n                        new_y_offset = d.offsetY - self.overview.offset().top;\n                    move(\n                        -(new_x_offset / o_w * in_w),\n                        -(new_y_offset / o_h * in_h)\n                    );\n                })\n                .bind(\"dragend\", function() {\n                    self.overview.addClass(\"blockaclick\");\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                });\n            // Dragging for overview border (resize)\n            $(\"#overview-border\").bind(\"drag\", function(e, d) {\n                var op = $(this).offsetParent();\n                var opo = op.offset();\n                var new_size = Math.max(\n                    op.width() - (d.offsetX - opo.left),\n                    op.height() - (d.offsetY - opo.top)\n                );\n                $(this).css({\n                    width: new_size,\n                    height: new_size\n                });\n                self.draw_overview();\n            });\n\n            /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n            $(\"#overview-border div\").bind(\"drag\", function() {});\n        },\n        update_viewport_overlay: function() {\n            var cc = this.cc,\n                cv = this.cv,\n                oc = this.oc,\n                ov = this.ov,\n                in_w = cc.width(),\n                in_h = cc.height(),\n                o_w = oc.width(),\n                o_h = oc.height(),\n                cc_pos = cc.position();\n            ov.css({\n                left: -(cc_pos.left / in_w * o_w),\n                top: -(cc_pos.top / in_h * o_h),\n                // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n                width: cv.width() / in_w * o_w - 2,\n                height: cv.height() / in_h * o_h - 2\n            });\n        },\n        draw_overview: function() {\n            var canvas_el = $(\"#overview-canvas\"),\n                size = canvas_el\n                    .parent()\n                    .parent()\n                    .width(),\n                c = canvas_el.get(0).getContext(\"2d\"),\n                in_w = $(\"#canvas-container\").width(),\n                in_h = $(\"#canvas-container\").height();\n            var o_h, shift_h, o_w, shift_w;\n            // Fit canvas into overview area\n            var cv_w = this.cv.width();\n            var cv_h = this.cv.height();\n            if (in_w < cv_w && in_h < cv_h) {\n                // Canvas is smaller than viewport\n                o_w = in_w / cv_w * size;\n                shift_w = (size - o_w) / 2;\n                o_h = in_h / cv_h * size;\n                shift_h = (size - o_h) / 2;\n            } else if (in_w < in_h) {\n                // Taller than wide\n                shift_h = 0;\n                o_h = size;\n                o_w = Math.ceil(o_h * in_w / in_h);\n                shift_w = (size - o_w) / 2;\n            } else {\n                // Wider than tall\n                o_w = size;\n                shift_w = 0;\n                o_h = Math.ceil(o_w * in_h / in_w);\n                shift_h = (size - o_h) / 2;\n            }\n            canvas_el.parent().css({\n                left: shift_w,\n                top: shift_h,\n                width: o_w,\n                height: o_h\n            });\n            canvas_el.attr(\"width\", o_w);\n            canvas_el.attr(\"height\", o_h);\n            // Draw overview\n            $.each(this.app.workflow.nodes, function(id, node) {\n                c.fillStyle = \"#D2C099\";\n                c.strokeStyle = \"#D8B365\";\n                c.lineWidth = 1;\n                var node_element = $(node.element),\n                    position = node_element.position(),\n                    x = position.left / in_w * o_w,\n                    y = position.top / in_h * o_h,\n                    w = node_element.width() / in_w * o_w,\n                    h = node_element.height() / in_h * o_h;\n                if (node.errors) {\n                    c.fillStyle = \"#FFCCCC\";\n                    c.strokeStyle = \"#AA6666\";\n                } else if (\n                    node.workflow_outputs !== undefined &&\n                    node.workflow_outputs.length > 0\n                ) {\n                    c.fillStyle = \"#E8A92D\";\n                    c.strokeStyle = \"#E8A92D\";\n                }\n                c.fillRect(x, y, w, h);\n                c.strokeRect(x, y, w, h);\n            });\n            this.update_viewport_overlay();\n        }\n    });\n\n    // FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\n    function ScrollPanel(panel) {\n        this.panel = panel;\n    }\n    $.extend(ScrollPanel.prototype, {\n        test: function(e, onmove) {\n            clearTimeout(this.timeout);\n            var x = e.pageX,\n                y = e.pageY,\n                // Panel size and position\n                panel = $(this.panel),\n                panel_pos = panel.position(),\n                panel_w = panel.width(),\n                panel_h = panel.height(),\n                // Viewport size and offset\n                viewport = panel.parent(),\n                viewport_w = viewport.width(),\n                viewport_h = viewport.height(),\n                viewport_offset = viewport.offset(),\n                // Edges of viewport (in page coordinates)\n                min_x = viewport_offset.left,\n                min_y = viewport_offset.top,\n                max_x = min_x + viewport.width(),\n                max_y = min_y + viewport.height(),\n                // Legal panel range\n                p_min_x = -(panel_w - viewport_w / 2),\n                p_min_y = -(panel_h - viewport_h / 2),\n                p_max_x = viewport_w / 2,\n                p_max_y = viewport_h / 2,\n                // Did the panel move?\n                moved = false,\n                // Constants\n                close_dist = 5,\n                nudge = 23;\n            if (x - close_dist < min_x) {\n                if (panel_pos.left < p_max_x) {\n                    var t = Math.min(nudge, p_max_x - panel_pos.left);\n                    panel.css(\"left\", panel_pos.left + t);\n                    moved = true;\n                }\n            } else if (x + close_dist > max_x) {\n                if (panel_pos.left > p_min_x) {\n                    var t = Math.min(nudge, panel_pos.left - p_min_x);\n                    panel.css(\"left\", panel_pos.left - t);\n                    moved = true;\n                }\n            } else if (y - close_dist < min_y) {\n                if (panel_pos.top < p_max_y) {\n                    var t = Math.min(nudge, p_max_y - panel_pos.top);\n                    panel.css(\"top\", panel_pos.top + t);\n                    moved = true;\n                }\n            } else if (y + close_dist > max_y) {\n                if (panel_pos.top > p_min_y) {\n                    var t = Math.min(nudge, panel_pos.top - p_min_x);\n                    panel.css(\"top\", panel_pos.top - t + \"px\");\n                    moved = true;\n                }\n            }\n            if (moved) {\n                // Keep moving even if mouse doesn't move\n                onmove();\n                var panel = this;\n                this.timeout = setTimeout(function() {\n                    panel.test(e, onmove);\n                }, 50);\n            }\n        },\n        stop: function(e, ui) {\n            clearTimeout(this.timeout);\n        }\n    });\n    return CanvasManager;\n});\n"]}