{"version":3,"sources":["mvc/workflow/workflow.js"],"names":["mod_toastr","WorkflowItemView","Backbone","View","extend","tagName","initialize","_","bindAll","this","options","timeOut","events","click #show-in-tool-panel","click #delete-workflow","click #rename-workflow","click #copy-workflow","render","$","el","html","_rowTemplate","showInToolPanel","model","set","get","save","Galaxy","root","wfName","confirm","destroy","success","remove","renameWorkflow","oldName","window","location","prompt","newName","name","copyWorkflow","getJSON","urlRoot","id","wfJson","currentOwner","self","user","attributes","username","create","resp","wait","error","errorThrown","jqXHR","textStatus","responseJSON","err_msg","show","wfId","trHtml","escape","_templateActions","checkboxHtml","renderTagEditor","TagEditor","toggle","_tag2","default","TagsEditor","find","workflow_mode","WorkflowListView","setElement","collection","dragleave","dragover","ev","preventDefault","title","drop","unhighlightDropZone","e","_workflowModel2","WorkflowCollection","dataTransfer","files","bind","appendItem","i","readWorkflowFiles","addClass","reader","wf_json","removeClass","at","f","readAsText","FileReader","_showArgErrors","msg_status","parse","result","header","templateActions","searchWorkflow","once","msg_text","_queryStringParsing2","workflowItemView","item","info","_templateHeader","_templateActionButtons","_templateWorkflowTable","$el_searchinput","tableTemplate","models","each","length","confirmDelete","$el_tabletr","adjustActiondropdown","on","append","workflow","_templateNoWorkflow","min_querylen","tableHtml","val","query","RegExp","hide","filter","regular_expression","test","text","css","_mainTemplate","ImportWorkflowView","$el","empty","url","myexperiment_target_url"],"mappings":"uQACYA,kLAKRC,EAAmBC,SAASC,KAAKC,QACjCC,QANQL,KAORM,WAAY,WACRC,EAAEC,QACEC,KACA,SACA,eACA,kBACA,mBACA,iBACA,gBAEJT,EAAWU,QAAQC,QAAU,MAGjCC,QACIC,4BAA6B,kBAC7BC,yBAA0B,iBAC1BC,yBAA0B,iBAC1BC,uBAAwB,gBAG5BC,OAAQ,WAEJ,OADAC,EAAET,KAAKU,IAAIC,KAAKX,KAAKY,gBACdZ,MAGXa,gBAAiB,WACbb,KAAKc,MAAMC,IACP,sBACCf,KAAKc,MAAME,IAAI,uBA/B5BhB,KAAAc,MAAAG,OAEIrB,OAAAA,SAAesB,OAAAC,KAAfvB,YAWIL,eAAAA,WACH,IAbuC6B,EAAApB,KAAAc,MAAAE,IAAA,QAexCb,OAAQkB,QAARlB,6CAAQiB,EAARjB,QAIIH,KAAAc,MAAAQ,SAnBoCC,QAAA,WA+CxBhC,EAAWgC,QAAX,kCAzBGH,EAyBH,QAKRpB,KAAKwB,WAnBTC,eAAA,WACA,IAAAC,EAAA1B,KAAAc,MAAAE,IAAA,QACAW,EAAOC,OAAPC,OAAOD,kCAnC6BF,EAmC7BE,IAyBHF,GArBJI,IACA9B,KACI2B,MAAON,MAIPU,KAAKjB,IAEGvB,QAAAA,WAGHA,EAAAgC,QAAA,kCALLG,EAKK,SALLI,EAKK,QAMbL,KAAAA,WAOQO,aAAA,WAGQT,IAAAA,EAAAA,KACIhC,EAAAA,KAAAA,MAAAA,IAAWgC,QAGdd,EAAAwB,QAAAjC,KAAAc,MAAAoB,QAAA,IAAAlC,KAAAc,MAAAqB,GAAA,YAAA,SAAAC,GALL,IAAAN,EAAAA,WAFJJ,EAUAW,EAAAC,EAAAxB,MAAAE,IAAA,SACHqB,GAAAnB,OAAAqB,KAAAC,WAAAC,WA1EmCX,GAAAA,mBAAAO,GA6ExCL,EAAAA,KAAcF,EACVQ,EAAIA,WAAJI,OAAAN,GACIV,GAAAA,EACFO,MAAW,EACTV,QAAIO,WACAO,EAAAA,QAAAA,iCAC4BG,EAD5BH,SACiDP,EADjDO,MAIJD,MAAOL,SAAOD,EAAda,EAAA1C,GAGI2C,EAF2BC,MAAA5C,EAAA6C,kBAO1BD,MAAA,SAAAE,EAP0BC,EAAAF,GAQ3BD,EAAAA,MAAOE,EAAAE,aAAAC,YAINtC,aAAA,WAZ0B,IAAAuC,EAA/BnD,KAAAc,MAAAE,IAAA,sBAcHoC,EAAEP,KAAM/B,MAAAqB,GACL5C,EAAAA,8EAAA4D,EAAAA,YAtBJA,EAsBI,IAtGgC,IAsGhC5D,WAtGgC6D,EAsGhC7D,KA0BAuB,MAhBAuC,6FAAsGvD,EAAEwD,OANhH1C,KAAAA,MAAcI,IAAA,SAMN,uCALsBhB,KAAAuD,mBAKtB,oCALJH,EAKI,kCALJpD,KAAAc,MAAAE,IACA,WACAE,OAAIsC,KAAAA,WAAAA,SAGJ,MAWAxD,KAAOqD,MAAPrC,IAAA,UAXI,mBAWJhB,KAAAc,MAAAE,IA3HoC,mBAgHhC,aAQShB,KAAKc,MAAME,IAAI,aAMhCyC,MACI,MAfI,YAeYD,EAfZ,SAegCC,gBAApC,WAKAC,IAAAA,EAAUC,IAAVC,EAAAC,QAAAC,YACAJ,MAAAA,KAAUlD,MArI0BE,GAAAD,EAAAsD,KAAA,IAAA/D,KAAAc,MAAAqB,GAAA,iBAkIhC6B,eAAe,IAOvBT,EAAAA,QAAAA,GACIG,EAAIlD,UAuBH+C,iBAAA,WACJ,OAAAvD,KAAAc,MAAAE,IAAA,WAAAE,OAAAqB,KAAAC,WAAAC,SAlKL,qDAAAvB,OAAAC,KAAA,sBAAAnB,KA4IiBc,MAyBjBqB,GArKA,+BAqKAjB,OAAAC,KArKA,mBAqKAnB,KACIiE,MACO9B,GAvKX,8BAsK4CjB,OAAAC,KAtK5C,uBAsK4CnB,KAExCH,MACSqE,GAzKb,gCAyKQhD,OAAAC,KAzKR,iBAyKQnB,KACED,MACGoE,GA3Kb,qMA2KQjD,OAAAC,KA3KR,6BA2KQnB,KACKmE,MACAA,GA7Kb,2FAsK4C,qDAAAjD,OAAAC,KAAA,kDAAAnB,KAAAc,MAAAE,IAd5B,SAc4B,SAWhChB,KAAAc,MAAAE,IACJoD,QAZoC,+BAWhClD,OAAAC,KAXgC,mBAWhCnB,KAGJqE,MACI5D,GAfgC,mHAehCT,KACAS,MACA6D,GAjBgC,WAiB7BC,OAAHpD,KAjBgC,uCAiBhCnB,KACHc,MAAAqB,GAlBmC,4BAwBvC8B,EAxBuCxE,SAAAC,KAAAC,QACxC6E,MAAO,YAyBPC,WAAM,WACFzE,KAAAkE,WAAA,UACApE,EAAAC,QAAK2E,KAAAA,wBACLC,KAAAA,WAAEJ,IAAFK,EAAAf,QAAAgB,mBACA7E,KAAAmE,WAAYQ,QAAEG,KAAAA,KAAaC,UAC3B/E,KAAAmE,WAAWa,KAAX,MAAAhF,KAAAiF,YACAjF,KAAAmE,WAASe,GAAJ,OAAmBH,KAAAA,OAAxB/E,OAGHG,QAvBGiE,UAAW,sBAyBfe,KAAAA,OACId,SAAI/B,SAAJgC,GACA7D,EAAA,6BAAA2E,SAAA,YACAC,EAAAA,eAAgBD,SAAA,mBACZd,EAAAC,mBAIIhF,oBAAAA,WAGA+F,EAAAA,6BAAAC,YAAA,YACH9E,EAAA,eAAA8E,YAAA,oBAGOC,KAAAA,SAAAA,GAEAjE,KAAAA,sBACIhC,EAAAA,iBAKAA,IAAAA,IAAAA,EAFHwF,EAAAJ,EAAAG,aAP2BC,MAQ5BlC,EAAAA,KACItD,EAAAA,EAAAA,EAAAA,EAAAA,GAAWsD,IACdP,EAAA6C,kBAAAM,IAIbJ,kBAAOK,SAAPD,GACH,IAlEuCnD,EAAAtC,KAuChCqF,EAAS,IAAIM,WA6BrBC,EAAAA,OAAgB9F,SAAAA,GACZ,IAAAwF,EACA,IACIO,EAAAA,KAAaC,MAAAT,EAAAU,QACjB,MAAIF,GACAtG,EAAWsD,MAAXtD,wBAMiBkG,EAAA1D,KANjBxC,2CAQH+F,EAAA,KA/BOA,GAkCJhD,EAAA6B,WAAAzB,OAAW4C,GACfE,GAAA,EACIQ,MAAS,EACbzE,QAAA,WACI0E,EAAkB1E,QAAlB0E,mCACJX,EAAAvD,KADIkE,MAIG9B,MAAAA,SAAPrD,EAA+B6B,EAAA1C,GAC3BV,EAAAsD,MAAA5C,EAAA6C,iBAKJuC,EAAAK,WAAKQ,EAAAA,UAOLN,eAAO9F,EAAAqG,KAAP,WAnCA,IAAIC,EAAWC,EAAAxC,QAAmB7C,IAAI,WAuClCsF,UADID,EAAAxC,QAAA7C,IAAe,UAEnBF,EAAOyF,MACPpC,EAAAA,OAFJiC,GAIE,2DAlCSA,GAsCf7G,EAAAiH,KAAA1G,EAAAwD,OAAA8C,MAG6B5F,OAAA,WAM5B,IA9HuCwF,EAAAhG,KAAAyG,kBAgIxCR,EAAAjG,KAAA0G,yBACAR,EAAgBlG,KAAA2G,yBACZC,KAAAA,IAAAA,KAAAA,EAAmBX,EAASY,GACxB,IAAAvE,EAAAtC,KACAF,EAAAE,KAAAmE,WAAA2C,QAAAC,KAAA,SAAAR,GAEAjE,EAAA2C,WAAU+B,GACN1E,EAAA2E,cAAAV,IACAvG,MAWH,OATGkH,KAAAA,eAEQlH,KAAAS,EAAA,cACAT,KAAAS,EAAA,uBAJRyG,GAQHlH,KAAAmH,uBACGD,KAAAA,iBACHlH,MAvCTiF,WAAY,SAASsB,GA2CrB,IAAAD,EAAA,IAAA9G,GACA2H,MAAAA,EACI1G,WAAW2G,KAAGjD,aAEb1D,EAAA,oBAFD4G,OAAAf,EAAA9F,SAAAE,IAGAD,EAAAgD,mBAtCJwD,cAAe,SAASK,GA2CxBtH,KAAAS,EAAA,wBAAA6G,EAAAnF,IACAoF,MAAqB,WAAA,OACjB5F,OAAON,QAAP,wDAnKoCiG,EA2HvB9E,WAAWT,KAwCxB,SAQJmE,eAAA,SAAAU,EAAAM,EAAAM,GACAb,EAAAA,GAAAA,QAAwB,WACpB,IAAIc,EAAAA,EAAAA,MACAC,MAxCA,GAAIC,EAAMX,QAAUQ,EAAc,CAqD1Cf,IAAAA,EAAiB,IAAAmB,OAAWD,EAAA,KACxBT,EACIW,OAOPX,EApMLY,OAAA,WAwMgB,OAAAC,EAAWC,KAAAvH,EAAAT,MAAAiI,UAEdzH,YAxDG0G,EAAY/D,UAgEnBgE,qBAFD,WAGH1G,EAZyCT,KAAAU,IAAA0G,GAAA,mBAAA,WA7ClC3G,EAAET,KAAKU,IAAIwH,IAAI,WAAY,aA4DnCC,EAAAA,KAAAA,IAAAA,GAAAA,mBAAe,WACX1H,EAAAT,KAAAU,IAAAwH,IAAA,WAAA,WAKJxI,oBAAMuE,WACNmE,MAAAA,yDAtDA1B,uBAAwB,WACpB,MAAA,6PAAoQxF,OAAOC,KAA3Q,8IAA6ZD,OAAOC,KAApa,4CAIJwF,uBAAwB,WAWpB,MAAUc,sTAIdhB,gBAAiB,WACb,MACI,wIAUR2B,EAAqB3I,SAASC,KAAKC,QACnCE,WAAY,WACRG,KAAKkE,WAAW,UAChBlE,KAAKQ,UAITA,OAAQ,WACJ,IAAI8B,EAAOtC,KACXS,EAAEwB,QAAWf,OAAOC,KAApB,kCAA2D,SAAAlB,GACvDqC,EAAK+F,IAAIC,QAAQjB,OAAO/E,EAAK6F,cAAclI,OAKnDkI,cAAe,SAASlI,GACpB,MAAA,oKAA2KiB,OAAOC,KAAlL,gMAAsXlB,EAAQsI,IAA9X,2vBAA4nCtI,EAAQuI,wBAApoC,kOAKJ9I,KAAMuE,EACNmE,mBAAoBA","file":"../../../scripts/mvc/workflow/workflow.js","sourcesContent":["/** Workflow view */\nimport * as mod_toastr from \"libs/toastr\";\nimport TAGS from \"mvc/tag\";\nimport WORKFLOWS from \"mvc/workflow/workflow-model\";\nimport QueryStringParsing from \"utils/query-string-parsing\";\n/** View of the individual workflows */\nvar WorkflowItemView = Backbone.View.extend({\n    tagName: \"tr\", // name of (orphan) root tag in this.el\n    initialize: function() {\n        _.bindAll(\n            this,\n            \"render\",\n            \"_rowTemplate\",\n            \"renderTagEditor\",\n            \"_templateActions\",\n            \"removeWorkflow\",\n            \"copyWorkflow\"\n        ); // every function that uses 'this' as the current object should be in here\n        mod_toastr.options.timeOut = 1500;\n    },\n\n    events: {\n        \"click #show-in-tool-panel\": \"showInToolPanel\",\n        \"click #delete-workflow\": \"removeWorkflow\",\n        \"click #rename-workflow\": \"renameWorkflow\",\n        \"click #copy-workflow\": \"copyWorkflow\"\n    },\n\n    render: function() {\n        $(this.el).html(this._rowTemplate());\n        return this;\n    },\n\n    showInToolPanel: function() {\n        this.model.set(\n            \"show_in_tool_panel\",\n            !this.model.get(\"show_in_tool_panel\")\n        );\n        this.model.save();\n        // This reloads the whole page, so that the workflow appears in the tool panel.\n        // Ideally we would notify only the tool panel of a change\n        window.location = `${Galaxy.root}workflow`;\n    },\n\n    removeWorkflow: function() {\n        var wfName = this.model.get(\"name\");\n        if (\n            window.confirm(\n                `Are you sure you want to delete workflow '${wfName}'?`\n            )\n        ) {\n            this.model.destroy({\n                success: function() {\n                    mod_toastr.success(\n                        `Successfully deleted workflow '${wfName}'`\n                    );\n                }\n            });\n            this.remove();\n        }\n    },\n\n    renameWorkflow: function() {\n        var oldName = this.model.get(\"name\");\n        var newName = window.prompt(\n            `Enter a new Name for workflow '${oldName}'`,\n            oldName\n        );\n        if (newName) {\n            this.model.save(\n                { name: newName },\n                {\n                    success: function() {\n                        mod_toastr.success(\n                            `Successfully renamed workflow '${oldName}' to '${newName}'`\n                        );\n                    }\n                }\n            );\n            this.render();\n        }\n    },\n\n    copyWorkflow: function() {\n        var self = this;\n        var oldName = this.model.get(\"name\");\n        $.getJSON(`${this.model.urlRoot}/${this.model.id}/download`, wfJson => {\n            var newName = `Copy of ${oldName}`;\n            var currentOwner = self.model.get(\"owner\");\n            if (currentOwner != Galaxy.user.attributes.username) {\n                newName += ` shared by user ${currentOwner}`;\n            }\n            wfJson.name = newName;\n            self.collection.create(wfJson, {\n                at: 0,\n                wait: true,\n                success: function() {\n                    mod_toastr.success(\n                        `Successfully copied workflow '${oldName}' to '${newName}'`\n                    );\n                },\n                error: function(model, resp, options) {\n                    // signature seems to have changed over the course of backbone dev\n                    // see https://github.com/jashkenas/backbone/issues/2606#issuecomment-19289483\n                    mod_toastr.error(options.errorThrown);\n                }\n            });\n        }).error((jqXHR, textStatus, errorThrown) => {\n            mod_toastr.error(jqXHR.responseJSON.err_msg);\n        });\n    },\n\n    _rowTemplate: function() {\n        var show = this.model.get(\"show_in_tool_panel\");\n        var wfId = this.model.id;\n        var checkboxHtml = `<input id=\"show-in-tool-panel\" type=\"checkbox\" class=\"show-in-tool-panel\" ${show\n            ? `checked=\"${show}\"`\n            : \"\"} value=\"${wfId}\">`;\n        var trHtml = `<td><div class=\"dropdown\"><button class=\"menubutton\" type=\"button\" data-toggle=\"dropdown\">${_.escape(\n            this.model.get(\"name\")\n        )}<span class=\"caret\"></span></button>${this._templateActions()}</div></td><td><span><div class=\"${wfId} tags-display\"></div></td><td>${this.model.get(\n            \"owner\"\n        ) === Galaxy.user.attributes.username\n            ? \"You\"\n            : this.model.get(\"owner\")}</span></td><td>${this.model.get(\n            \"number_of_steps\"\n        )}</td><td>${this.model.get(\"published\")\n            ? \"Yes\"\n            : \"No\"}</td><td>${checkboxHtml}</td>`;\n        return trHtml;\n    },\n\n    renderTagEditor: function() {\n        var TagEditor = new TAGS.TagsEditor({\n            model: this.model,\n            el: $.find(`.${this.model.id}.tags-display`),\n            workflow_mode: true\n        });\n        TagEditor.toggle(true);\n        TagEditor.render();\n    },\n\n    /** Template for user actions for workflows */\n    _templateActions: function() {\n        if (this.model.get(\"owner\") === Galaxy.user.attributes.username) {\n            return `<ul class=\"dropdown-menu action-dpd\"><li><a href=\"${Galaxy.root}workflow/editor?id=${this\n                .model\n                .id}\">Edit</a></li><li><a href=\"${Galaxy.root}workflow/run?id=${this\n                .model\n                .id}\">Run</a></li><li><a href=\"${Galaxy.root}workflow/sharing?id=${this\n                .model\n                .id}\">Share</a></li><li><a href=\"${Galaxy.root}api/workflows/${this\n                .model\n                .id}/download?format=json-download\">Download</a></li><li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li><li><a id=\"rename-workflow\" style=\"cursor: pointer;\">Rename</a></li><li><a href=\"${Galaxy.root}workflow/display_by_id?id=${this\n                .model\n                .id}\">View</a></li><li><a id=\"delete-workflow\" style=\"cursor: pointer;\">Delete</a></li></ul>`;\n        } else {\n            return `<ul class=\"dropdown-menu action-dpd\"><li><a href=\"${Galaxy.root}workflow/display_by_username_and_slug?username=${this.model.get(\n                \"owner\"\n            )}&slug=${this.model.get(\n                \"slug\"\n            )}\">View</a></li><li><a href=\"${Galaxy.root}workflow/run?id=${this\n                .model\n                .id}\">Run</a></li><li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li><li><a class=\"link-confirm-shared-${this\n                .model\n                .id}\" href=\"${Galaxy.root}workflow/sharing?unshare_me=True&id=${this\n                .model.id}\">Remove</a></li></ul>`;\n        }\n    }\n});\n\n/** View of the main workflow list page */\nvar WorkflowListView = Backbone.View.extend({\n    title: \"Workflows\",\n    initialize: function() {\n        this.setElement(\"<div/>\");\n        _.bindAll(this, \"adjustActiondropdown\");\n        this.collection = new WORKFLOWS.WorkflowCollection();\n        this.collection.fetch().done(this.render());\n        this.collection.bind(\"add\", this.appendItem);\n        this.collection.on(\"sync\", this.render, this);\n    },\n\n    events: {\n        dragleave: \"unhighlightDropZone\",\n        drop: \"drop\",\n        dragover: function(ev) {\n            $(\".hidden_description_layer\").addClass(\"dragover\");\n            $(\".menubutton\").addClass(\"background-none\");\n            ev.preventDefault();\n        }\n    },\n\n    unhighlightDropZone: function() {\n        $(\".hidden_description_layer\").removeClass(\"dragover\");\n        $(\".menubutton\").removeClass(\"background-none\");\n    },\n\n    drop: function(e) {\n        // TODO: check that file is valid galaxy workflow\n        this.unhighlightDropZone();\n        e.preventDefault();\n        var files = e.dataTransfer.files;\n        var self = this;\n        for (var i = 0, f; (f = files[i]); i++) {\n            self.readWorkflowFiles(f);\n        }\n    },\n\n    readWorkflowFiles: function(f) {\n        var self = this;\n        var reader = new FileReader();\n        reader.onload = theFile => {\n            var wf_json;\n            try {\n                wf_json = JSON.parse(reader.result);\n            } catch (e) {\n                mod_toastr.error(\n                    `Could not read file '${f.name}'. Verify it is a valid Galaxy workflow`\n                );\n                wf_json = null;\n            }\n            if (wf_json) {\n                self.collection.create(wf_json, {\n                    at: 0,\n                    wait: true,\n                    success: function() {\n                        mod_toastr.success(\n                            `Successfully imported workflow '${wf_json.name}'`\n                        );\n                    },\n                    error: function(model, resp, options) {\n                        mod_toastr.error(options.errorThrown);\n                    }\n                });\n            }\n        };\n        reader.readAsText(f, \"utf-8\");\n    },\n\n    _showArgErrors: _.once(() => {\n        // Parse args out of params, display if there's a message.\n        var msg_text = QueryStringParsing.get(\"message\");\n        var msg_status = QueryStringParsing.get(\"status\");\n        if (msg_status === \"error\") {\n            mod_toastr.error(\n                _.escape(\n                    msg_text ||\n                        \"Unknown Error, please report this to an administrator.\"\n                )\n            );\n        } else if (msg_text) {\n            mod_toastr.info(_.escape(msg_text));\n        }\n    }),\n\n    render: function() {\n        // Add workflow header\n        var header = this._templateHeader();\n        // Add the actions buttons\n        var templateActions = this._templateActionButtons();\n        var tableTemplate = this._templateWorkflowTable();\n        this.$el.html(header + templateActions + tableTemplate);\n        var self = this;\n        _(this.collection.models).each(item => {\n            // in case collection is not empty\n            self.appendItem(item);\n            self.confirmDelete(item);\n        }, this);\n        var minQueryLength = 3;\n        this.searchWorkflow(\n            this.$(\".search-wf\"),\n            this.$(\".workflow-search tr\"),\n            minQueryLength\n        );\n        this.adjustActiondropdown();\n        this._showArgErrors();\n        return this;\n    },\n\n    appendItem: function(item) {\n        var workflowItemView = new WorkflowItemView({\n            model: item,\n            collection: this.collection\n        });\n        $(\".workflow-search\").append(workflowItemView.render().el);\n        workflowItemView.renderTagEditor();\n    },\n\n    /** Add confirm box before removing/unsharing workflow */\n    confirmDelete: function(workflow) {\n        var $el_shared_wf_link = this.$(`.link-confirm-shared-${workflow.id}`);\n        $el_shared_wf_link.click(() =>\n            window.confirm(\n                `Are you sure you want to remove the shared workflow '${workflow\n                    .attributes.name}'?`\n            )\n        );\n    },\n\n    /** Implement client side workflow search/filtering */\n    searchWorkflow: function($el_searchinput, $el_tabletr, min_querylen) {\n        $el_searchinput.on(\"keyup\", function() {\n            var query = $(this).val();\n            // Filter when query is at least 3 characters\n            // otherwise show all rows\n            if (query.length >= min_querylen) {\n                // Ignore the query's case using 'i'\n                var regular_expression = new RegExp(query, \"i\");\n                $el_tabletr.hide();\n                $el_tabletr\n                    .filter(function() {\n                        // Apply regular expression on each row's text\n                        // and show when there is a match\n                        return regular_expression.test($(this).text());\n                    })\n                    .show();\n            } else {\n                $el_tabletr.show();\n            }\n        });\n    },\n\n    /** Ajust the position of dropdown with respect to table */\n    adjustActiondropdown: function() {\n        $(this.el).on(\"show.bs.dropdown\", function() {\n            $(this.el).css(\"overflow\", \"inherit\");\n        });\n        $(this.el).on(\"hide.bs.dropdown\", function() {\n            $(this.el).css(\"overflow\", \"auto\");\n        });\n    },\n\n    /** Template for no workflow */\n    _templateNoWorkflow: function() {\n        return '<div class=\"wf-nodata\"> You have no workflows. </div>';\n    },\n\n    /** Template for actions buttons */\n    _templateActionButtons: function() {\n        return `<ul class=\"manage-table-actions\"><li><input class=\"search-wf form-control\" type=\"text\" autocomplete=\"off\" placeholder=\"search for workflow...\"></li><li><a class=\"action-button fa fa-plus wf-action\" id=\"new-workflow\" title=\"Create new workflow\" href=\"${Galaxy.root}workflow/create\"></a></li><li><a class=\"action-button fa fa-upload wf-action\" id=\"import-workflow\" title=\"Upload or import workflow\" href=\"${Galaxy.root}workflow/import_workflow\"></a></li></ul>`;\n    },\n\n    /** Template for workflow table */\n    _templateWorkflowTable: function() {\n        var tableHtml =\n            '<table class=\"table colored\"><thead>' +\n            '<tr class=\"header\">' +\n            \"<th>Name</th>\" +\n            \"<th>Tags</th>\" +\n            \"<th>Owner</th>\" +\n            \"<th># of Steps</th>\" +\n            \"<th>Published</th>\" +\n            \"<th>Show in tools panel</th>\" +\n            \"</tr></thead>\";\n        return `${tableHtml}<tbody class=\"workflow-search \"><div class=\"hidden_description_layer\"><p>Drop workflow files here to import</p></tbody></table></div>`;\n    },\n\n    /** Main template */\n    _templateHeader: function() {\n        return (\n            '<div class=\"page-container\">' +\n            '<div class=\"user-workflows wf\">' +\n            '<div class=\"response-message\"></div>' +\n            \"<h2>Your workflows</h2>\" +\n            \"</div>\" +\n            \"</div>\"\n        );\n    }\n});\n\nvar ImportWorkflowView = Backbone.View.extend({\n    initialize: function() {\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Open page to import workflow */\n    render: function() {\n        var self = this;\n        $.getJSON(`${Galaxy.root}workflow/upload_import_workflow`, options => {\n            self.$el.empty().append(self._mainTemplate(options));\n        });\n    },\n\n    /** Template for the import workflow page */\n    _mainTemplate: function(options) {\n        return `<div class='toolForm'><div class='toolFormTitle'>Import Galaxy workflow</div><div class='toolFormBody'><form name='import_workflow' id='import_workflow' action='${Galaxy.root}workflow/upload_import_workflow' enctype='multipart/form-data' method='POST'><div class='form-row'><label>Galaxy workflow URL:</label><input type='text' name='url' class='input-url' value='${options.url}' size='40'><div class='toolParamHelp' style='clear: both;'>If the workflow is accessible via a URL, enter the URL above and click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><label>Galaxy workflow file:</label><div class='form-row-input'><input type='file' name='file_data' class='input-file'/></div><div class='toolParamHelp' style='clear: both;'>If the workflow is in a file on your computer, choose it and then click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><input type='submit' class='primary-button wf-import' name='import_button' value='Import'></div></form><hr/><div class='form-row'><label>Import a Galaxy workflow from myExperiment:</label><div class='form-row-input'><a href='${options.myexperiment_target_url}'> Visit myExperiment</a></div><div class='toolParamHelp' style='clear: both;'>Click the link above to visit myExperiment and browse for Galaxy workflows.</div><div style='clear: both'></div></div></div></div>`;\n    }\n});\n\nexport default {\n    View: WorkflowListView,\n    ImportWorkflowView: ImportWorkflowView\n};\n"]}