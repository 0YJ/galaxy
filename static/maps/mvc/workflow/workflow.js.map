{"version":3,"sources":["mvc/workflow/workflow.js"],"names":["define","mod_toastr","TAGS","WORKFLOWS","QueryStringParsing","WorkflowItemView","Backbone","View","extend","tagName","this","initialize","options","timeOut","events","click #show-in-tool-panel","click #rename-workflow","click #copy-workflow","render","$","el","html","_rowTemplate","showInToolPanel","model","set","get","window","location","Galaxy","root","removeWorkflow","wfName","destroy","confirm","success","remove","renameWorkflow","oldName","prompt","newName","copyWorkflow","self","getJSON","urlRoot","id","wfJson","currentOwner","user","attributes","username","name","collection","create","at","wait","resp","errorThrown","error","jqXHR","textStatus","responseJSON","err_msg","show","wfId","checkboxHtml","_","escape","TagsEditor","renderTagEditor","TagEditor","find","workflow_mode","toggle","setElement","WorkflowCollection","appendItem","title","e","preventDefault","files","dataTransfer","bindAll","f","readWorkflowFiles","bind","on","dragleave","reader","onload","dragover","wf_json","ev","addClass","JSON","unhighlightDropZone","removeClass","i","_showArgErrors","once","msg_text","msg_status","parse","result","info","_templateHeader","templateActions","_templateWorkflowTable","models","minQueryLength","workflowItemView","item","header","$el_shared_wf_link","_templateActionButtons","click","$el","tableTemplate","each","confirmDelete","searchWorkflow","val","adjustActiondropdown","$el_tabletr","filter","append","workflow","$el_searchinput","min_querylen","query","_templateNoWorkflow","regular_expression","RegExp","hide","test","text","tableHtml","css","ImportWorkflowView","empty","_mainTemplate","url","myexperiment_target_url"],"mappings":"aACAA,QAAU,cAAe,UAAW,8BAA+B,8BAAgC,SAAUC,EAAYC,EAAMC,EAAWC,GAGtI,IAAIC,EAAmBC,SAASC,KAAKC,QADrCC,QAAA,KACIJ,WAAAA,WACAI,EAAAA,QADwCC,KACzB,SAAA,eAAA,kBAAA,mBAAA,iBAAA,gBACfC,EAAYC,QAAAC,QAAA,MAGXC,QAGGC,4BAA6B,kBADjCD,yBAAQ,iBACJE,yBAA6B,iBAC7BC,uBAA6B,gBAFzBC,OAPgC,WAcxCA,OACIC,EAAET,KAAKU,IAAIC,KAAKX,KAAKY,gBADjBZ,MAGPa,gBAjBuC,WAoBpCb,KAAKc,MAAMC,IAAI,sBAAuBf,KAAKc,MAAME,IAAI,uBADzDH,KAAAA,MAAAA,OAGII,OAAAC,SAAAC,OAAAC,KAAA,YAGHC,eAzBuC,WA4BpC,IAAIC,EAAStB,KAAKc,MAAME,IAAI,QADhCK,OAAAA,QAAgB,6CAAUC,EAAA,QAClBA,KAAAA,MAASC,SACTN,QAAOO,WACFV,EAAcW,QAAA,kCAAAH,EAAA,QAGVtB,KAAA0B,WAIhBC,eArCuC,WAwCpC,IAAIC,EAAU5B,KAAKc,MAAME,IAAI,QADjCW,EAAgBV,OAAAY,OAAA,kCAAUD,EAAA,IAAAA,GAClBA,IACAE,KAAAA,MAAUb,MACVa,KAASA,IACJhB,QAAL,WAGQvB,EAAWkC,QAAQ,kCAAoCG,EAAU,SAAWE,EAAU,QAG9F9B,KAAKQ,WAIbuB,aAAc,WACV,IAAIC,EAAOhC,KACP4B,EAAU5B,KAAKc,MAAME,IAAI,QAC7BP,EAAEwB,QAAQjC,KAAKc,MAAMoB,QAAU,IAAMlC,KAAKc,MAAMqB,GAAK,YAAa,SAAAC,GAC9D,IAAIN,EAAU,WAAaF,EACvBS,EAAeL,EAAKlB,MAAME,IAAI,SAC9BqB,GAAgBlB,OAAOmB,KAAKC,WAAWC,WACvCV,GAAW,mBAAqBO,GAEpCD,EAAOK,KAAOX,EACdE,EAAKU,WAAWC,OAAOP,GAAUQ,GAAI,EAANC,MAAA,EAEsBpB,QAAA,WACGlC,EAAAkC,QAAA,iCAAAG,EAAnB,SAAAE,EAAA,MAEoBgB,MAAM5C,SAASY,EAAAgC,EAAA5C,GAGV6C,EAAzBC,MAAA9C,EAAA6C,kBAGtCC,MAAM,SAAAC,EAAAC,EAAAH,GACHxD,EAAWyD,MAAMC,EAAME,aAAaC,YAI9CxC,aAAc,WACV,IAAIyC,EAAOrD,KAAKc,MAAME,IAAI,sBACtBsC,EAAOtD,KAAKc,MAAMqB,GAClBoB,EAAe,8EAAgFF,EAAO,YAAcA,EAAO,IAAM,IAAM,WAAaC,EAAO,KA0BnK,MAzBkB,6FAGWE,EAAEC,OAAQzD,KAAKc,MAAME,IAAI,SAAY,uCAc1CxB,KAAKkE,mBACF5C,oCADvBwC,EAAA,kCAIAtD,KAAAc,MAAAE,IAAA,WAAAG,OAAAmB,KAAAC,WAAAC,SAAA,MAAAxC,KAAAc,MAAAE,IAAA,UAAA,mBACAhB,KAAAc,MAAAE,IAAA,mBAAA,aAzGoChB,KAAAc,MAAAE,IAAA,aAAA,MAAA,MAAA,YA+FduC,EAAe,SAgBjCI,gBAAO,WAUV,IAXDC,EAYK,IAAApE,EAAAkE,YACD5C,MAAOd,KAAAc,MAMVJ,GAAAD,EAAAoD,KAAA,IAAA7D,KAAAc,MAAAqB,GAAA,iBACJ2B,eAAA,IAlILF,EAAAG,QAAA,GAyGQH,EAAUpD,UA+BdP,iBAAY,WACR,OAAAD,KAAKgE,MAALhD,IAAiB,WAAjBG,OAAAmB,KAAAC,WAAAC,SACU,qDACsByB,OAAAA,KAAAA,sBAAhCjE,KAAAc,MAAAqB,GAAA,+BAC6BhB,OAAKX,KAAlC,mBAAAR,KAAAc,MAAAqB,GAAA,8BAC4BhB,OAAK+C,KAAjC,uBAAAlE,KAAAc,MAAAqB,GAAA,gCACgC3B,OAAhCY,KAAA,iBAAApB,KAAAc,MAAAqB,GAAA,qMAGIhB,OAAAC,KAAA,6BAAApB,KAAAc,MAAAqB,GAAA,2FAKE,qDACFhB,OAAAC,KAAA,kDAAApB,KAAAc,MAAAE,IAAA,SAAA,SAAAhB,KAAAc,MAAAE,IAAA,QAAA,+BACHG,OAAAC,KAAA,mBAAApB,KAAAc,MAAAqB,GAAA,mHAzBkDnC,KAAKc,MAAMqB,GAAI,WAAYhB,OAAOC,KAAM,uCAAwCpB,KAAKc,MAAMqB,GAAI,4BAgQ1J,OACItC,KA/NID,SAAAC,KAAAC,QACAqE,MAAA,YACAC,WAAEC,WACFrE,KAAIsE,WAAUC,UACdf,EAAAgB,QAAIxC,KAAJ,wBACAhC,KAAK0C,WAAL,IAAmB+B,EAAnBR,mBACIjC,KAAAA,WAAK0C,QAAAA,KAAL1E,KAAAQ,UACHR,KAAA0C,WAAAiC,KAAA,MAAA3E,KAAAkE,YAlCmClE,KAAA0C,WAAAkC,GAAA,OAAA5E,KAAAQ,OAAAR,OAsChCI,QACAyE,UAAa,sBACbC,KAAOC,OACHC,SAAIC,SAAJC,GACAzE,EAAA,6BAAI0E,SAAA,YACAF,EAAAA,eAAUG,SAAWN,mBACxBI,EAACb,mBAIFgB,oBAAa,WACTrD,EAAAA,6BAAuBiD,YAAS,YAC5BrC,EAAAA,eAD4B0C,YAAA,oBAIxB/F,KAAAA,SAAAA,GAEJyD,KAAAA,sBACIzD,EAAAA,iBAGX,IAAA,IAAAkF,EAFQH,EAAAF,EAAAG,aAAAD,MAR2BtC,EAAhChC,KAUHuF,EAAA,EAAAd,EAAAH,EAAAiB,GAAAA,IAnBLvD,EAAA0C,kBAAAD,IAwBRe,kBAAkBC,SAAKhB,GACnB,IAAAzC,EAAAhC,KACI0F,EAAWhG,IAAAA,WACXiG,EAAAA,OAAajG,SAAAA,GACbiG,IAAAA,EACApG,IACOmG,EAASN,KAAAQ,MAAAd,EAAAe,QAChBtG,MAAWuG,GACdvG,EAAAyD,MAAA,wBAAAyB,EAAAhC,KAAA,2CAxEmCwC,EAAA,KA2EhCA,GACJjD,EAAAU,WAAAC,OAAAsC,GACarC,GAAKmD,EAClBlD,MAAA,EACImD,QAAkB,WACFzG,EAAK0G,QAAAA,mCAAzBhB,EAAAxC,KAAA,MAEAO,MAAA,SAAAlC,EAAAgC,EAAA5C,GACkBgG,EAAalD,MAAA9C,EAAA6C,iBAI3BoD,EAAAA,WAAJ1B,EAAA,UAGAe,eAAKA,EAAAA,KAAL,WA1FoC,IAAAE,EAAAhG,EAAAsB,IAAA,WA8F5B,UA3BStB,EAAmBsB,IAAI,UA4BpCoF,EAAAA,MAAAA,EAAmB3C,OAAI9D,GAAAA,2DAChB0G,GACP3D,EAAAA,KAAYc,EAAKd,OAAAA,MAIxBlC,OArGuC,WAuGxC,IAAA8F,EAAAtG,KAAA+F,kBAEQQ,EAAAA,KAAqBC,yBACzBD,EAAmBE,KAAOR,yBACtBjG,KAAA0G,IAAA/F,KAAOM,EAAOO,EAASmF,GAC1B,IAFD3E,EAAAhC,KA1GoCwD,EAAAxD,KAAA0C,WAAAwD,QAAAU,KAAA,SAAAP,GAoFhCrE,EAAKkC,WAAWmC,GA2BxBrE,EAAA6E,cAAAR,IACAS,MAKQ,OAHA9G,KAAA8G,eAAe9G,KAAO+G,EAAtB,cAAA/G,KAAAS,EAAA,uBADgB,GAEhBT,KAAAgH,uBACAhH,KAAAwF,iBACAxF,MAGIiH,WAAAA,SAAAA,GACAA,IAAAA,EAAYC,IAAOvH,GACfmB,MAAAuF,EACA3D,WAAA1C,KAAA0C,aAEHjC,EAAA,oBAJD0G,OAAAf,EAAA5F,SAAAE,IAKH0F,EACIzC,mBAIZkD,cAnIuC,SAAAO,GAyGXpH,KAAKS,EAAG,wBAA0B2G,EAASjF,IA4BxEsE,MAAA,WACAO,OAAAA,OAAsBxF,QAAA,wDAAY4F,EAAA7E,WAAAE,KAAA,SAK1BhC,eAAOC,SAAS2G,EAAhBJ,EAAAK,GACHD,EAFDzC,GAAA,QAAA,WA1IoC,IAAA2C,EAAA9G,EAAAT,MAAA+G,MAgJxCS,GAAAA,EAAAA,QAAqBF,EAAA,CAhJmB,IAAAG,EAAA,IAAAC,OAAAH,EAAA,KAwH5BN,EAAYU,OA4BxBV,EAAAC,OAAA,WApJwC,OAAAO,EAAAG,KAAAnH,EAAAT,MAAA6H,UA6HzBxE,YA0CPyE,EAAYzE,UAchB2D,qBAAO,WAMVvG,EAAAT,KAAAU,IAAAkE,GAAA,mBAAA,WA3LLnE,EAAAT,KAAAU,IAAAqH,IAAA,WAAA,aA8LIC,EAAAA,KAAAA,IAAAA,GAAAA,mBAAmClI,WAnD3BW,EAAET,KAAKU,IAAIqH,IAAK,WAAY,WAKpCP,oBAAqB,WAqDrB,MAAA,yDAIQxF,uBAAA,WACH,MAFD,6PASYb,OAAAC,KAFL,8IA0CRD,OAAAC,KAAA,4CAnFH6E,uBAAwB,WAUpB,MAAO6B,sTAIX/B,gBAAiB,WACb,MAAO,wIAsEXiC,mBA7DqBpI,SAASC,KAAKC,QAEnCG,WAAY,WACRD,KAAKgE,WAAY,UACjBhE,KAAKQ,UAITA,OAAQ,WACJ,IAAIwB,EAAOhC,KACXS,EAAEwB,QAASd,OAAOC,KAAO,kCAAmC,SAAUlB,GAClE8B,EAAK0E,IAAIuB,QAAQd,OAAQnF,EAAKkG,cAAehI,OAKrDgI,cAAe,SAAUhI,GACrB,MAAO,oKAGuEiB,OAAOC,KAAO,gMAGblB,EAAQiI,IAAK,2vBAwBvDjI,EAAQkI,wBAA0B","file":"../../../scripts/mvc/workflow/workflow.js","sourcesContent":["/** Workflow view */\ndefine( [ \"libs/toastr\", \"mvc/tag\", \"mvc/workflow/workflow-model\", \"utils/query-string-parsing\" ], function( mod_toastr, TAGS, WORKFLOWS, QueryStringParsing ) {\n\n    /** View of the individual workflows */\n    var WorkflowItemView = Backbone.View.extend({\n        tagName: 'tr', // name of (orphan) root tag in this.el\n        initialize: function(){\n            _.bindAll(this, 'render', '_rowTemplate', 'renderTagEditor', '_templateActions', 'removeWorkflow', 'copyWorkflow'); // every function that uses 'this' as the current object should be in here\n            mod_toastr.options.timeOut = 1500;\n        },\n\n        events: {\n            'click #show-in-tool-panel': 'showInToolPanel',\n            'click #delete-workflow'   : 'removeWorkflow',\n            'click #rename-workflow'   : 'renameWorkflow',\n            'click #copy-workflow'     : 'copyWorkflow',\n        },\n\n        render: function(){\n            $(this.el).html(this._rowTemplate());\n            return this;\n        },\n\n        showInToolPanel: function(){\n            this.model.set('show_in_tool_panel', !this.model.get('show_in_tool_panel'));\n            this.model.save();\n            // This reloads the whole page, so that the workflow appears in the tool panel.\n            // Ideally we would notify only the tool panel of a change\n            window.location = Galaxy.root + 'workflow';\n        },\n\n        removeWorkflow: function(){\n            var wfName = this.model.get('name');\n            if (window.confirm( \"Are you sure you want to delete workflow '\" + wfName + \"'?\" )) {\n                this.model.destroy({\n                    success: function() {\n                        mod_toastr.success(\"Successfully deleted workflow '\" + wfName + \"'\");\n                        }\n                });\n                this.remove();\n            }\n        },\n\n        renameWorkflow: function(){\n            var oldName = this.model.get('name');\n            var newName = window.prompt(\"Enter a new Name for workflow '\" + oldName + \"'\", oldName );\n            if (newName) {\n                this.model.save(\n                    { 'name': newName },\n                    { success: function() {\n                        mod_toastr.success(\"Successfully renamed workflow '\" + oldName + \"' to '\" + newName + \"'\");\n                    }\n                });\n                this.render();\n            }\n        },\n\n        copyWorkflow: function(){\n            var self = this;\n            var oldName = this.model.get('name');\n            $.getJSON(this.model.urlRoot + '/' + this.model.id + '/download', function(wfJson) {\n                var newName = 'Copy of ' + oldName;\n                var currentOwner = self.model.get('owner');\n                if (currentOwner != Galaxy.user.attributes.username) {\n                    newName += ' shared by user ' + currentOwner;\n                }\n                wfJson.name = newName;\n                self.collection.create(wfJson, { at: 0,\n                                                 wait: true,\n                                                 success: function() {\n                                                     mod_toastr.success(\"Successfully copied workflow '\" + oldName + \"' to '\" + newName + \"'\");\n                                                 },\n                                                 error : function(model, resp, options) {\n                                                     // signature seems to have changed over the course of backbone dev\n                                                     // see https://github.com/jashkenas/backbone/issues/2606#issuecomment-19289483\n                                                     mod_toastr.error(options.errorThrown);\n                                                 }\n                });\n            }).error(function(jqXHR, textStatus, errorThrown) {\n                  mod_toastr.error(jqXHR.responseJSON.err_msg);\n            });\n        },\n\n        _rowTemplate: function() {\n            var show = this.model.get(\"show_in_tool_panel\");\n            var wfId = this.model.id;\n            var checkboxHtml = '<input id=\"show-in-tool-panel\" type=\"checkbox\" class=\"show-in-tool-panel\" '+ ( show ? 'checked=\"' + show + '\"' : \"\" ) +' value=\"' + wfId + '\">';\n            var trHtml =  '<td>' +\n                             '<div class=\"dropdown\">' +\n                                 '<button class=\"menubutton\" type=\"button\" data-toggle=\"dropdown\">' +\n                                     _.escape( this.model.get(\"name\") ) + '<span class=\"caret\"></span>' +\n                                 '</button>' +\n                                 this._templateActions( ) +\n                             '</div>' +\n                          '</td>' +\n                          '<td><span>' + '<div class=\"' + wfId + ' tags-display\"></div>' + '</td>' +\n                          '<td>' + ( this.model.get('owner') === Galaxy.user.attributes.username ? \"You\" : this.model.get('owner') ) +'</span></td>' +\n                          '<td>' + this.model.get(\"number_of_steps\") + '</td>' +\n                          '<td>' + ( this.model.get(\"published\") ? \"Yes\" : \"No\" ) + '</td>' +\n                          '<td>'+ checkboxHtml + '</td>';\n            return trHtml;\n        },\n\n        renderTagEditor: function(){\n            var TagEditor = new TAGS.TagsEditor({\n            model           : this.model,\n            el              : $.find( '.' + this.model.id + '.tags-display' ),\n            workflow_mode   : true });\n            TagEditor.toggle( true );\n            TagEditor.render();\n        },\n\n        /** Template for user actions for workflows */\n        _templateActions: function( ) {\n            if( this.model.get(\"owner\") === Galaxy.user.attributes.username ) {\n                return '<ul class=\"dropdown-menu action-dpd\">' +\n                           '<li><a href=\"'+ Galaxy.root +'workflow/editor?id='+ this.model.id +'\">Edit</a></li>' +\n                           '<li><a href=\"'+ Galaxy.root +'workflow/run?id='+ this.model.id +'\">Run</a></li>' +\n                           '<li><a href=\"'+ Galaxy.root +'workflow/sharing?id='+ this.model.id +'\">Share</a></li>' +\n                           '<li><a href=\"'+ Galaxy.root +'api/workflows/'+ this.model.id +'/download?format=json-download\">Download</a></li>' +\n                           '<li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li>' +\n                           '<li><a id=\"rename-workflow\" style=\"cursor: pointer;\">Rename</a></li>' +\n                           '<li><a href=\"'+ Galaxy.root +'workflow/display_by_id?id='+ this.model.id +'\">View</a></li>' +\n                           '<li><a id=\"delete-workflow\" style=\"cursor: pointer;\">Delete</a></li>' +\n                      '</ul>';\n            }\n            else {\n                return '<ul class=\"dropdown-menu action-dpd\">' +\n                         '<li><a href=\"'+ Galaxy.root +'workflow/display_by_username_and_slug?username='+ this.model.get(\"owner\") +'&slug='+ this.model.get(\"slug\") +'\">View</a></li>' +\n                         '<li><a href=\"'+ Galaxy.root +'workflow/run?id='+ this.model.id +'\">Run</a></li>' +\n                         '<li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li>' +\n                         '<li><a class=\"link-confirm-shared-'+ this.model.id +'\" href=\"'+ Galaxy.root +'workflow/sharing?unshare_me=True&id='+ this.model.id +'\">Remove</a></li>' +\n                      '</ul>';\n            }\n        },\n    });\n\n    /** View of the main workflow list page */\n    var WorkflowListView = Backbone.View.extend({\n        title: \"Workflows\",\n        initialize: function() {\n            this.setElement( '<div/>' );\n            _.bindAll(this, 'adjustActiondropdown');\n            this.collection = new WORKFLOWS.WorkflowCollection();\n            this.collection.fetch().done(this.render());\n            this.collection.bind('add', this.appendItem);\n            this.collection.on('sync', this.render, this);\n        },\n\n        events: {\n            'dragleave' : 'unhighlightDropZone',\n            'drop' : 'drop',\n            'dragover': function(ev) {\n                $( '.hidden_description_layer' ).addClass( 'dragover' );\n                $('.menubutton').addClass('background-none');\n                ev.preventDefault();\n            }\n        },\n\n        unhighlightDropZone: function() {\n            $( '.hidden_description_layer' ).removeClass( 'dragover' );\n            $('.menubutton').removeClass('background-none');\n        },\n\n        drop: function(e) {\n            // TODO: check that file is valid galaxy workflow\n            this.unhighlightDropZone();\n            e.preventDefault();\n            var files = e.dataTransfer.files;\n            var self = this;\n            for (var i = 0, f; f = files[i]; i++) {\n                self.readWorkflowFiles(f);\n            }\n        },\n\n        readWorkflowFiles: function(f) {\n                var self = this;\n                var reader = new FileReader();\n                reader.onload = function(theFile) {\n                    var wf_json;\n                    try {\n                        wf_json = JSON.parse(reader.result);\n                    } catch(e) {\n                        mod_toastr.error(\"Could not read file '\" + f.name + \"'. Verify it is a valid Galaxy workflow\");\n                        wf_json = null;\n                    }\n                    if (wf_json) {\n                        self.collection.create(wf_json, {\n                            at: 0,\n                            wait: true,\n                            success: function() {\n                                mod_toastr.success(\"Successfully imported workflow '\" + wf_json.name + \"'\");\n                            },\n                            error : function(model, resp, options) {\n                                mod_toastr.error(options.errorThrown);\n                            }\n                        });\n                    }\n                };\n                reader.readAsText(f, 'utf-8');\n            },\n\n        _showArgErrors: _.once(function(){\n            // Parse args out of params, display if there's a message.\n            var msg_text = QueryStringParsing.get('message');\n            var msg_status = QueryStringParsing.get('status');\n            if (msg_status === \"error\"){\n                mod_toastr.error(_.escape(msg_text || \"Unknown Error, please report this to an administrator.\"));\n            } else if (msg_text){\n                mod_toastr.info(_.escape(msg_text));\n            }\n        }),\n\n        render: function() {\n            // Add workflow header\n            var header = this._templateHeader();\n            // Add the actions buttons\n            var templateActions = this._templateActionButtons();\n            var tableTemplate = this._templateWorkflowTable();\n            this.$el.html( header + templateActions + tableTemplate);\n            var self = this;\n            _(this.collection.models).each(function(item){ // in case collection is not empty\n                self.appendItem(item);\n                self.confirmDelete(item);\n            }, this);\n            var minQueryLength = 3;\n            this.searchWorkflow( this.$( '.search-wf' ), this.$( '.workflow-search tr' ), minQueryLength );\n            this.adjustActiondropdown();\n            this._showArgErrors();\n            return this;\n        },\n\n        appendItem: function(item){\n            var workflowItemView = new WorkflowItemView({\n                model: item,\n                collection: this.collection,\n            });\n            $( '.workflow-search' ).append(workflowItemView.render().el);\n            workflowItemView.renderTagEditor();\n        },\n\n        /** Add confirm box before removing/unsharing workflow */\n        confirmDelete: function( workflow ) {\n            var $el_shared_wf_link = this.$( '.link-confirm-shared-' + workflow.id );\n            $el_shared_wf_link.click( function() {\n                return window.confirm( \"Are you sure you want to remove the shared workflow '\" + workflow.attributes.name + \"'?\" );\n            });\n        },\n\n        /** Implement client side workflow search/filtering */\n        searchWorkflow: function( $el_searchinput, $el_tabletr, min_querylen ) {\n            $el_searchinput.on( 'keyup', function () {\n                var query = $( this ).val();\n                // Filter when query is at least 3 characters\n                // otherwise show all rows\n                if( query.length >= min_querylen ) {\n                    // Ignore the query's case using 'i'\n                    var regular_expression = new RegExp( query, 'i' );\n                    $el_tabletr.hide();\n                    $el_tabletr.filter(function () {\n                        // Apply regular expression on each row's text\n                        // and show when there is a match\n                        return regular_expression.test( $( this ).text() );\n                    }).show();\n                }\n                else {\n                    $el_tabletr.show();\n                }\n            });\n        },\n\n        /** Ajust the position of dropdown with respect to table */\n        adjustActiondropdown: function( ) {\n            $(this.el).on( 'show.bs.dropdown', function () {\n                $(this.el).css( \"overflow\", \"inherit\" );\n            });\n            $(this.el).on( 'hide.bs.dropdown', function () {\n                $(this.el).css( \"overflow\", \"auto\" );\n            });\n        },\n\n        /** Template for no workflow */\n        _templateNoWorkflow: function() {\n            return '<div class=\"wf-nodata\"> You have no workflows. </div>';\n        },\n\n        /** Template for actions buttons */\n        _templateActionButtons: function() {\n           return '<ul class=\"manage-table-actions\">' +\n                '<li>' +\n                    '<input class=\"search-wf form-control\" type=\"text\" autocomplete=\"off\" placeholder=\"search for workflow...\">' +\n                '</li>' +\n                '<li>' +\n                    '<a class=\"action-button fa fa-plus wf-action\" id=\"new-workflow\" title=\"Create new workflow\" href=\"'+ Galaxy.root +'workflow/create\">' +\n                    '</a>' +\n                '</li>' +\n                '<li>' +\n                    '<a class=\"action-button fa fa-upload wf-action\" id=\"import-workflow\" title=\"Upload or import workflow\" href=\"'+ Galaxy.root +'workflow/import_workflow\">' +\n                    '</a>' +\n                '</li>' +\n            '</ul>';\n        },\n\n        /** Template for workflow table */\n        _templateWorkflowTable: function( ) {\n            var tableHtml = '<table class=\"table colored\"><thead>' +\n                    '<tr class=\"header\">' +\n                        '<th>Name</th>' +\n                        '<th>Tags</th>' +\n                        '<th>Owner</th>' +\n                        '<th># of Steps</th>' +\n                        '<th>Published</th>' +\n                        '<th>Show in tools panel</th>' +\n                    '</tr></thead>';\n            return tableHtml + '<tbody class=\"workflow-search \"><div class=\"hidden_description_layer\"><p>Drop workflow files here to import</p>' + '</tbody></table></div>';\n        },\n\n        /** Main template */\n        _templateHeader: function() {\n            return '<div class=\"page-container\">' +\n                       '<div class=\"user-workflows wf\">' +\n                           '<div class=\"response-message\"></div>' +\n                           '<h2>Your workflows</h2>' +\n                       '</div>'+\n                   '</div>';\n        }\n    });\n\n    var ImportWorkflowView = Backbone.View.extend({\n\n        initialize: function() {\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        /** Open page to import workflow */\n        render: function() {\n            var self = this;\n            $.getJSON( Galaxy.root + 'workflow/upload_import_workflow', function( options ) {\n                self.$el.empty().append( self._mainTemplate( options ) );\n            });\n        },\n\n        /** Template for the import workflow page */\n        _mainTemplate: function( options ) {\n            return \"<div class='toolForm'>\" +\n                       \"<div class='toolFormTitle'>Import Galaxy workflow</div>\" +\n                        \"<div class='toolFormBody'>\" +\n                            \"<form name='import_workflow' id='import_workflow' action='\"+ Galaxy.root + 'workflow/upload_import_workflow' +\"' enctype='multipart/form-data' method='POST'>\" +\n                            \"<div class='form-row'>\" +\n                                \"<label>Galaxy workflow URL:</label>\" + \n                                \"<input type='text' name='url' class='input-url' value='\"+ options.url +\"' size='40'>\" +\n                                \"<div class='toolParamHelp' style='clear: both;'>\" +\n                                    \"If the workflow is accessible via a URL, enter the URL above and click <b>Import</b>.\" +\n                                \"</div>\" +\n                                \"<div style='clear: both'></div>\" +\n                            \"</div>\" +\n                            \"<div class='form-row'>\" +\n                                \"<label>Galaxy workflow file:</label>\" +\n                            \"<div class='form-row-input'>\" +\n                                \"<input type='file' name='file_data' class='input-file'/>\" +\n                            \"</div>\" +\n                            \"<div class='toolParamHelp' style='clear: both;'>\" +\n                                \"If the workflow is in a file on your computer, choose it and then click <b>Import</b>.\" +\n                            \"</div>\" +\n                            \"<div style='clear: both'></div>\" +\n                            \"</div>\" +\n                            \"<div class='form-row'>\" +\n                                \"<input type='submit' class='primary-button wf-import' name='import_button' value='Import'>\" +\n                            \"</div>\" +\n                            \"</form>\" +\n                           \"<hr/>\" +\n                           \"<div class='form-row'>\" +\n                               \"<label>Import a Galaxy workflow from myExperiment:</label>\" +\n                               \"<div class='form-row-input'>\" +\n                                   \"<a href='\" + options.myexperiment_target_url + \"'> Visit myExperiment</a>\" +\n                               \"</div>\" +\n                               \"<div class='toolParamHelp' style='clear: both;'>\" +\n                                   \"Click the link above to visit myExperiment and browse for Galaxy workflows.\" +\n                               \"</div>\" +\n                               \"<div style='clear: both'></div>\" +\n                           \"</div>\" +\n                       \"</div>\" +\n                   \"</div>\";\n        },\n    });\n\n    return {\n        View  : WorkflowListView,\n        ImportWorkflowView : ImportWorkflowView\n    };\n});\n"]}