{"version":3,"sources":["mvc/workflow/workflow-view-terminals.js"],"names":["define","className","Connector","initialize","Backbone","View","options","tagName","mapText","$el","model","render","tooltip","delay","title","this","mapOver","isCollection","hide","show","mouseenter","TerminalMappingView","extend","mouseleave","click","onMouseEnter","e","terminal","connected","onMouseLeave","css","onClick","resetMapping","setupMappingView","terminalMappingView","terminalMappingClass","terminalMapping","terminalMappingViewClass","terminalElements","el","BaseInputTerminalView","node","input","name","multiple","terminalForInput","input_terminals","events","dropinit","dropend","drop","hover","onDropInit","d","hasClass","proxy","connectors","canAccept","drag","onDropStart","inner_color","onDropEnd","onDrop","element","redraw","onHover","$","length","t","remove","bind","display","append","offset","width","_","x","destroy","InputTerminalMappingView","InputCollectionTerminalView","Terminals","TerminalMapping","InputTerminalView","BaseOutputTerminalView","TerminalView","output","output_terminals","InputCollectionTerminal","dragstart","dragend","Globals","canvas_manager","terminalForOutput","onmove","onDragStart","available","addClass","onDrag","c","dragging","connect","offsetParent","offsetX","po","left","connector","top","y","update_viewport_overlay","removeClass","OutputTerminalView","h","OutputTerminal","collection_type","datatypes","get","scroll_panel","stop","OutputCollectionTerminalView","type","extensions","collection_type_source","OutputCollectionTerminal"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view-terminals.js","sourcesContent":["define(\n    [\n        \"mvc/workflow/workflow-globals\",\n        \"mvc/workflow/workflow-terminals\",\n        \"mvc/workflow/workflow-connector\"\n    ],\n    function(Globals, Terminals, Connector) {\n        var TerminalMappingView = Backbone.View.extend({\n            tagName: \"div\",\n            className: \"fa-icon-button fa fa-folder-o\",\n            initialize: function(options) {\n                var mapText = \"Run tool in parallel over collection\";\n                this.$el.tooltip({ delay: 500, title: mapText });\n                this.model.bind(\"change\", _.bind(this.render, this));\n            },\n            render: function() {\n                if (this.model.mapOver.isCollection) {\n                    this.$el.show();\n                } else {\n                    this.$el.hide();\n                }\n            }\n        });\n\n        var InputTerminalMappingView = TerminalMappingView.extend({\n            events: {\n                click: \"onClick\",\n                mouseenter: \"onMouseEnter\",\n                mouseleave: \"onMouseLeave\"\n            },\n            onMouseEnter: function(e) {\n                var model = this.model;\n                if (!model.terminal.connected() && model.mapOver.isCollection) {\n                    this.$el.css(\"color\", \"red\");\n                }\n            },\n            onMouseLeave: function(e) {\n                this.$el.css(\"color\", \"black\");\n            },\n            onClick: function(e) {\n                var model = this.model;\n                if (!model.terminal.connected() && model.mapOver.isCollection) {\n                    // TODO: Consider prompting...\n                    model.terminal.resetMapping();\n                }\n            }\n        });\n\n        var TerminalView = Backbone.View.extend({\n            setupMappingView: function(terminal) {\n                var terminalMapping = new this.terminalMappingClass({\n                    terminal: terminal\n                });\n                var terminalMappingView = new this.terminalMappingViewClass({\n                    model: terminalMapping\n                });\n                terminalMappingView.render();\n                terminal.terminalMappingView = terminalMappingView;\n                this.terminalMappingView = terminalMappingView;\n            },\n            terminalElements: function() {\n                if (this.terminalMappingView) {\n                    return [this.terminalMappingView.el, this.el];\n                } else {\n                    return [this.el];\n                }\n            }\n        });\n\n        var BaseInputTerminalView = TerminalView.extend({\n            className: \"terminal input-terminal\",\n            initialize: function(options) {\n                var node = options.node;\n                var input = options.input;\n                var name = input.name;\n                var terminal = this.terminalForInput(input);\n                if (!terminal.multiple) {\n                    this.setupMappingView(terminal);\n                }\n                this.el.terminal = terminal;\n                terminal.node = node;\n                terminal.name = name;\n                node.input_terminals[name] = terminal;\n            },\n            events: {\n                dropinit: \"onDropInit\",\n                dropstart: \"onDropStart\",\n                dropend: \"onDropEnd\",\n                drop: \"onDrop\",\n                hover: \"onHover\"\n            },\n            onDropInit: function(e, d) {\n                var terminal = this.el.terminal;\n                // Accept a dragable if it is an output terminal and has a\n                // compatible type\n                return (\n                    $(d.drag).hasClass(\"output-terminal\") &&\n                    terminal.canAccept(d.drag.terminal)\n                );\n            },\n            onDropStart: function(e, d) {\n                if (d.proxy.terminal) {\n                    d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n                }\n            },\n            onDropEnd: function(e, d) {\n                if (d.proxy.terminal) {\n                    d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n                }\n            },\n            onDrop: function(e, d) {\n                var terminal = this.el.terminal;\n                new Connector(d.drag.terminal, terminal).redraw();\n            },\n            onHover: function() {\n                var element = this.el;\n                var terminal = element.terminal;\n                // If connected, create a popup to allow disconnection\n                if (terminal.connectors.length > 0) {\n                    // Create callout\n                    var t = $(\"<div class='callout'></div>\")\n                        .css({ display: \"none\" })\n                        .appendTo(\"body\")\n                        .append(\n                            $(\"<div class='button'></div>\").append(\n                                $(\"<div/>\")\n                                    .addClass(\"fa-icon-button fa fa-times\")\n                                    .click(function() {\n                                        $.each(terminal.connectors, function(\n                                            _,\n                                            x\n                                        ) {\n                                            if (x) {\n                                                x.destroy();\n                                            }\n                                        });\n                                        t.remove();\n                                    })\n                            )\n                        )\n                        .bind(\"mouseleave\", function() {\n                            $(this).remove();\n                        });\n                    // Position it and show\n                    t\n                        .css({\n                            top: $(element).offset().top - 2,\n                            left: $(element).offset().left - t.width(),\n                            \"padding-right\": $(element).width()\n                        })\n                        .show();\n                }\n            }\n        });\n\n        var InputTerminalView = BaseInputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: InputTerminalMappingView,\n            terminalForInput: function(input) {\n                return new Terminals.InputTerminal({\n                    element: this.el,\n                    input: input\n                });\n            }\n        });\n\n        var InputCollectionTerminalView = BaseInputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: InputTerminalMappingView,\n            terminalForInput: function(input) {\n                return new Terminals.InputCollectionTerminal({\n                    element: this.el,\n                    input: input\n                });\n            }\n        });\n\n        var BaseOutputTerminalView = TerminalView.extend({\n            className: \"terminal output-terminal\",\n            initialize: function(options) {\n                var node = options.node;\n                var output = options.output;\n                var name = output.name;\n                var terminal = this.terminalForOutput(output);\n                this.setupMappingView(terminal);\n                this.el.terminal = terminal;\n                terminal.node = node;\n                terminal.name = name;\n                node.output_terminals[name] = terminal;\n            },\n            events: {\n                drag: \"onDrag\",\n                dragstart: \"onDragStart\",\n                dragend: \"onDragEnd\"\n            },\n            onDrag: function(e, d) {\n                var onmove = function() {\n                    var po = $(d.proxy)\n                            .offsetParent()\n                            .offset(),\n                        x = d.offsetX - po.left,\n                        y = d.offsetY - po.top;\n                    $(d.proxy).css({ left: x, top: y });\n                    d.proxy.terminal.redraw();\n                    // FIXME: global\n                    Globals.canvas_manager.update_viewport_overlay();\n                };\n                onmove();\n                $(\"#canvas-container\")\n                    .get(0)\n                    .scroll_panel.test(e, onmove);\n            },\n            onDragStart: function(e, d) {\n                $(d.available).addClass(\"input-terminal-active\");\n                // Save PJAs in the case of change datatype actions.\n                Globals.workflow.check_changes_in_active_form();\n                // Drag proxy div\n                var h = $(\n                    '<div class=\"drag-terminal\" style=\"position: absolute;\"></div>'\n                )\n                    .appendTo(\"#canvas-container\")\n                    .get(0);\n                // Terminal and connection to display noodle while dragging\n                h.terminal = new Terminals.OutputTerminal({ element: h });\n                var c = new Connector();\n                c.dragging = true;\n                c.connect(this.el.terminal, h.terminal);\n                return h;\n            },\n            onDragEnd: function(e, d) {\n                var connector = d.proxy.terminal.connectors[0];\n                // check_changes_in_active_form may change the state and cause a\n                // the connection to have already been destroyed. There must be better\n                // ways to handle this but the following check fixes some serious GUI\n                // bugs for now.\n                if (connector) {\n                    connector.destroy();\n                }\n                $(d.proxy).remove();\n                $(d.available).removeClass(\"input-terminal-active\");\n                $(\"#canvas-container\")\n                    .get(0)\n                    .scroll_panel.stop();\n            }\n        });\n\n        var OutputTerminalView = BaseOutputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: TerminalMappingView,\n            terminalForOutput: function(output) {\n                var type = output.extensions;\n                var terminal = new Terminals.OutputTerminal({\n                    element: this.el,\n                    datatypes: type\n                });\n                return terminal;\n            }\n        });\n\n        var OutputCollectionTerminalView = BaseOutputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: TerminalMappingView,\n            terminalForOutput: function(output) {\n                var collection_type = output.collection_type;\n                var collection_type_source = output.collection_type_source;\n                var terminal = new Terminals.OutputCollectionTerminal({\n                    element: this.el,\n                    collection_type: collection_type,\n                    collection_type_source: collection_type_source,\n                    datatypes: output.extensions\n                });\n                return terminal;\n            }\n        });\n\n        return {\n            InputTerminalView: InputTerminalView,\n            OutputTerminalView: OutputTerminalView,\n            InputCollectionTerminalView: InputCollectionTerminalView,\n            OutputCollectionTerminalView: OutputCollectionTerminalView\n        };\n    }\n);\n"]}