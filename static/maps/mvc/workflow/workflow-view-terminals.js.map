{"version":3,"sources":["mvc/workflow/workflow-view-terminals.js"],"names":["window","workflow_globals","TerminalMappingView","Backbone","View","extend","tagName","className","initialize","options","this","$el","tooltip","delay","title","model","bind","_","render","mapOver","isCollection","show","events","click","mouseenter","mouseleave","onMouseEnter","terminal","connected","hide","onMouseLeave","e","css","resetMapping","TerminalView","setupMappingView","terminalMappingClass","onClick","terminalMappingViewClass","terminalMappingView","terminalElements","el","terminalMapping","BaseInputTerminalView","node","input","multiple","name","input_terminals","dropstart","dropend","drop","hover","onDropInit","canAccept","d","drag","connectors","inner_color","proxy","onDrop","onDropStart","_workflowConnector2","default","redraw","onHover","element","onDropEnd","length","t","$","display","append","addClass","each","x","destroy","remove","top","offset","left","width","padding-right","InputTerminalMappingView","terminalForInput","InputTerminal","InputCollectionTerminal","output","output_terminals","dragstart","dragend","onDrag","onmove","po","offsetParent","y","offsetY","canvas_manager","get","scroll_panel","onDragStart","h","available","workflow","check_changes_in_active_form","c","connect","onDragEnd","connector","_workflowTerminals2","OutputTerminal","dragging","removeClass","OutputTerminalView","terminalForOutput","extensions","datatypes","BaseOutputTerminalView","TerminalMapping","OutputCollectionTerminalView","collection_type","collection_type_source","InputTerminalView","InputCollectionTerminalView"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view-terminals.js","sourcesContent":["import Terminals from \"mvc/workflow/workflow-terminals\";\nimport Connector from \"mvc/workflow/workflow-connector\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\nvar TerminalMappingView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"fa-icon-button fa fa-folder-o\",\n    initialize: function(options) {\n        var mapText = \"Run tool in parallel over collection\";\n        this.$el.tooltip({ delay: 500, title: mapText });\n        this.model.bind(\"change\", _.bind(this.render, this));\n    },\n    render: function() {\n        if (this.model.mapOver.isCollection) {\n            this.$el.show();\n        } else {\n            this.$el.hide();\n        }\n    }\n});\n\nvar InputTerminalMappingView = TerminalMappingView.extend({\n    events: {\n        click: \"onClick\",\n        mouseenter: \"onMouseEnter\",\n        mouseleave: \"onMouseLeave\"\n    },\n    onMouseEnter: function(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            this.$el.css(\"color\", \"red\");\n        }\n    },\n    onMouseLeave: function(e) {\n        this.$el.css(\"color\", \"black\");\n    },\n    onClick: function(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            // TODO: Consider prompting...\n            model.terminal.resetMapping();\n        }\n    }\n});\n\nvar TerminalView = Backbone.View.extend({\n    setupMappingView: function(terminal) {\n        var terminalMapping = new this.terminalMappingClass({\n            terminal: terminal\n        });\n        var terminalMappingView = new this.terminalMappingViewClass({\n            model: terminalMapping\n        });\n        terminalMappingView.render();\n        terminal.terminalMappingView = terminalMappingView;\n        this.terminalMappingView = terminalMappingView;\n    },\n    terminalElements: function() {\n        if (this.terminalMappingView) {\n            return [this.terminalMappingView.el, this.el];\n        } else {\n            return [this.el];\n        }\n    }\n});\n\nvar BaseInputTerminalView = TerminalView.extend({\n    className: \"terminal input-terminal\",\n    initialize: function(options) {\n        var node = options.node;\n        var input = options.input;\n        var name = input.name;\n        var terminal = this.terminalForInput(input);\n        if (!terminal.multiple) {\n            this.setupMappingView(terminal);\n        }\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.input_terminals[name] = terminal;\n    },\n    events: {\n        dropinit: \"onDropInit\",\n        dropstart: \"onDropStart\",\n        dropend: \"onDropEnd\",\n        drop: \"onDrop\",\n        hover: \"onHover\"\n    },\n    onDropInit: function(e, d) {\n        var terminal = this.el.terminal;\n        // Accept a dragable if it is an output terminal and has a\n        // compatible type\n        return (\n            $(d.drag).hasClass(\"output-terminal\") &&\n            terminal.canAccept(d.drag.terminal)\n        );\n    },\n    onDropStart: function(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n        }\n    },\n    onDropEnd: function(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n        }\n    },\n    onDrop: function(e, d) {\n        var terminal = this.el.terminal;\n        new Connector(d.drag.terminal, terminal).redraw();\n    },\n    onHover: function() {\n        var element = this.el;\n        var terminal = element.terminal;\n        // If connected, create a popup to allow disconnection\n        if (terminal.connectors.length > 0) {\n            // Create callout\n            var t = $(\"<div class='callout'></div>\")\n                .css({ display: \"none\" })\n                .appendTo(\"body\")\n                .append(\n                    $(\"<div class='button'></div>\").append(\n                        $(\"<div/>\")\n                            .addClass(\"fa-icon-button fa fa-times\")\n                            .click(function() {\n                                $.each(terminal.connectors, function(_, x) {\n                                    if (x) {\n                                        x.destroy();\n                                    }\n                                });\n                                t.remove();\n                            })\n                    )\n                )\n                .bind(\"mouseleave\", function() {\n                    $(this).remove();\n                });\n            // Position it and show\n            t\n                .css({\n                    top: $(element).offset().top - 2,\n                    left: $(element).offset().left - t.width(),\n                    \"padding-right\": $(element).width()\n                })\n                .show();\n        }\n    }\n});\n\nvar InputTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function(input) {\n        return new Terminals.InputTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar InputCollectionTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function(input) {\n        return new Terminals.InputCollectionTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar BaseOutputTerminalView = TerminalView.extend({\n    className: \"terminal output-terminal\",\n    initialize: function(options) {\n        var node = options.node;\n        var output = options.output;\n        var name = output.name;\n        var terminal = this.terminalForOutput(output);\n        this.setupMappingView(terminal);\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.output_terminals[name] = terminal;\n    },\n    events: {\n        drag: \"onDrag\",\n        dragstart: \"onDragStart\",\n        dragend: \"onDragEnd\"\n    },\n    onDrag: function(e, d) {\n        var onmove = function() {\n            var po = $(d.proxy)\n                .offsetParent()\n                .offset();\n\n            var x = d.offsetX - po.left;\n            var y = d.offsetY - po.top;\n            $(d.proxy).css({ left: x, top: y });\n            d.proxy.terminal.redraw();\n            // FIXME: global\n            window.workflow_globals.canvas_manager.update_viewport_overlay();\n        };\n        onmove();\n        $(\"#canvas-container\")\n            .get(0)\n            .scroll_panel.test(e, onmove);\n    },\n    onDragStart: function(e, d) {\n        $(d.available).addClass(\"input-terminal-active\");\n        // Save PJAs in the case of change datatype actions.\n        window.workflow_globals.workflow.check_changes_in_active_form();\n        // Drag proxy div\n        var h = $(\n            '<div class=\"drag-terminal\" style=\"position: absolute;\"></div>'\n        )\n            .appendTo(\"#canvas-container\")\n            .get(0);\n        // Terminal and connection to display noodle while dragging\n        h.terminal = new Terminals.OutputTerminal({ element: h });\n        var c = new Connector();\n        c.dragging = true;\n        c.connect(this.el.terminal, h.terminal);\n        return h;\n    },\n    onDragEnd: function(e, d) {\n        var connector = d.proxy.terminal.connectors[0];\n        // check_changes_in_active_form may change the state and cause a\n        // the connection to have already been destroyed. There must be better\n        // ways to handle this but the following check fixes some serious GUI\n        // bugs for now.\n        if (connector) {\n            connector.destroy();\n        }\n        $(d.proxy).remove();\n        $(d.available).removeClass(\"input-terminal-active\");\n        $(\"#canvas-container\")\n            .get(0)\n            .scroll_panel.stop();\n    }\n});\n\nvar OutputTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function(output) {\n        var type = output.extensions;\n        var terminal = new Terminals.OutputTerminal({\n            element: this.el,\n            datatypes: type\n        });\n        return terminal;\n    }\n});\n\nvar OutputCollectionTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function(output) {\n        var collection_type = output.collection_type;\n        var collection_type_source = output.collection_type_source;\n        var terminal = new Terminals.OutputCollectionTerminal({\n            element: this.el,\n            collection_type: collection_type,\n            collection_type_source: collection_type_source,\n            datatypes: output.extensions\n        });\n        return terminal;\n    }\n});\n\nexport default {\n    InputTerminalView: InputTerminalView,\n    OutputTerminalView: OutputTerminalView,\n    InputCollectionTerminalView: InputCollectionTerminalView,\n    OutputCollectionTerminalView: OutputCollectionTerminalView\n};\n"]}