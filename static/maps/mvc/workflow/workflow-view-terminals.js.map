{"version":3,"sources":["mvc/workflow/workflow-view-terminals.js"],"names":["TerminalMappingView","Backbone","View","extend","tagName","className","initialize","options","this","$el","tooltip","delay","title","model","bind","_","render","mapOver","isCollection","show","hide","mouseenter","mapText","mouseleave","onMouseEnter","e","terminal","onMouseLeave","css","onClick","InputTerminalMappingView","events","connected","resetMapping","TerminalView","setupMappingView","terminalMapping","terminalMappingClass","terminalMappingView","terminalMappingViewClass","terminalElements","el","BaseInputTerminalView","name","terminalForInput","input","node","input_terminals","drop","hover","onDropInit","d","multiple","drag","dropinit","dropstart","connectors","inner_color","proxy","onDrop","hasClass","_workflowConnector2","default","redraw","onHover","element","onDropEnd","length","display","appendTo","append","$","addClass","click","each","x","destroy","t","remove","top","offset","left","width","InputTerminalView","InputTerminal","InputCollectionTerminalView","InputCollectionTerminal","BaseOutputTerminalView","output","dragstart","onDrag","onmove","po","y","offsetY","_workflowGlobals2","canvas_manager","update_viewport_overlay","onDragStart","test","available","workflow","check_changes_in_active_form","h","c","get","connector","OutputTerminal","dragging","connect","terminalForOutput","type","scroll_panel","OutputTerminalView","_workflowTerminals2","TerminalMapping","OutputCollectionTerminalView","collection_type_source","datatypes","extensions","collection_type","OutputCollectionTerminal"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view-terminals.js","sourcesContent":["import Globals from \"mvc/workflow/workflow-globals\";\nimport Terminals from \"mvc/workflow/workflow-terminals\";\nimport Connector from \"mvc/workflow/workflow-connector\";\nvar TerminalMappingView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"fa-icon-button fa fa-folder-o\",\n    initialize: function(options) {\n        var mapText = \"Run tool in parallel over collection\";\n        this.$el.tooltip({ delay: 500, title: mapText });\n        this.model.bind(\"change\", _.bind(this.render, this));\n    },\n    render: function() {\n        if (this.model.mapOver.isCollection) {\n            this.$el.show();\n        } else {\n            this.$el.hide();\n        }\n    }\n});\n\nvar InputTerminalMappingView = TerminalMappingView.extend({\n    events: {\n        click: \"onClick\",\n        mouseenter: \"onMouseEnter\",\n        mouseleave: \"onMouseLeave\"\n    },\n    onMouseEnter: function(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            this.$el.css(\"color\", \"red\");\n        }\n    },\n    onMouseLeave: function(e) {\n        this.$el.css(\"color\", \"black\");\n    },\n    onClick: function(e) {\n        var model = this.model;\n        if (!model.terminal.connected() && model.mapOver.isCollection) {\n            // TODO: Consider prompting...\n            model.terminal.resetMapping();\n        }\n    }\n});\n\nvar TerminalView = Backbone.View.extend({\n    setupMappingView: function(terminal) {\n        var terminalMapping = new this.terminalMappingClass({\n            terminal: terminal\n        });\n        var terminalMappingView = new this.terminalMappingViewClass({\n            model: terminalMapping\n        });\n        terminalMappingView.render();\n        terminal.terminalMappingView = terminalMappingView;\n        this.terminalMappingView = terminalMappingView;\n    },\n    terminalElements: function() {\n        if (this.terminalMappingView) {\n            return [this.terminalMappingView.el, this.el];\n        } else {\n            return [this.el];\n        }\n    }\n});\n\nvar BaseInputTerminalView = TerminalView.extend({\n    className: \"terminal input-terminal\",\n    initialize: function(options) {\n        var node = options.node;\n        var input = options.input;\n        var name = input.name;\n        var terminal = this.terminalForInput(input);\n        if (!terminal.multiple) {\n            this.setupMappingView(terminal);\n        }\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.input_terminals[name] = terminal;\n    },\n    events: {\n        dropinit: \"onDropInit\",\n        dropstart: \"onDropStart\",\n        dropend: \"onDropEnd\",\n        drop: \"onDrop\",\n        hover: \"onHover\"\n    },\n    onDropInit: function(e, d) {\n        var terminal = this.el.terminal;\n        // Accept a dragable if it is an output terminal and has a\n        // compatible type\n        return (\n            $(d.drag).hasClass(\"output-terminal\") &&\n            terminal.canAccept(d.drag.terminal)\n        );\n    },\n    onDropStart: function(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n        }\n    },\n    onDropEnd: function(e, d) {\n        if (d.proxy.terminal) {\n            d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n        }\n    },\n    onDrop: function(e, d) {\n        var terminal = this.el.terminal;\n        new Connector(d.drag.terminal, terminal).redraw();\n    },\n    onHover: function() {\n        var element = this.el;\n        var terminal = element.terminal;\n        // If connected, create a popup to allow disconnection\n        if (terminal.connectors.length > 0) {\n            // Create callout\n            var t = $(\"<div class='callout'></div>\")\n                .css({ display: \"none\" })\n                .appendTo(\"body\")\n                .append(\n                    $(\"<div class='button'></div>\").append(\n                        $(\"<div/>\")\n                            .addClass(\"fa-icon-button fa fa-times\")\n                            .click(function() {\n                                $.each(terminal.connectors, function(_, x) {\n                                    if (x) {\n                                        x.destroy();\n                                    }\n                                });\n                                t.remove();\n                            })\n                    )\n                )\n                .bind(\"mouseleave\", function() {\n                    $(this).remove();\n                });\n            // Position it and show\n            t\n                .css({\n                    top: $(element).offset().top - 2,\n                    left: $(element).offset().left - t.width(),\n                    \"padding-right\": $(element).width()\n                })\n                .show();\n        }\n    }\n});\n\nvar InputTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function(input) {\n        return new Terminals.InputTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar InputCollectionTerminalView = BaseInputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: InputTerminalMappingView,\n    terminalForInput: function(input) {\n        return new Terminals.InputCollectionTerminal({\n            element: this.el,\n            input: input\n        });\n    }\n});\n\nvar BaseOutputTerminalView = TerminalView.extend({\n    className: \"terminal output-terminal\",\n    initialize: function(options) {\n        var node = options.node;\n        var output = options.output;\n        var name = output.name;\n        var terminal = this.terminalForOutput(output);\n        this.setupMappingView(terminal);\n        this.el.terminal = terminal;\n        terminal.node = node;\n        terminal.name = name;\n        node.output_terminals[name] = terminal;\n    },\n    events: {\n        drag: \"onDrag\",\n        dragstart: \"onDragStart\",\n        dragend: \"onDragEnd\"\n    },\n    onDrag: function(e, d) {\n        var onmove = function() {\n            var po = $(d.proxy)\n                    .offsetParent()\n                    .offset(),\n                x = d.offsetX - po.left,\n                y = d.offsetY - po.top;\n            $(d.proxy).css({ left: x, top: y });\n            d.proxy.terminal.redraw();\n            // FIXME: global\n            Globals.canvas_manager.update_viewport_overlay();\n        };\n        onmove();\n        $(\"#canvas-container\")\n            .get(0)\n            .scroll_panel.test(e, onmove);\n    },\n    onDragStart: function(e, d) {\n        $(d.available).addClass(\"input-terminal-active\");\n        // Save PJAs in the case of change datatype actions.\n        Globals.workflow.check_changes_in_active_form();\n        // Drag proxy div\n        var h = $(\n            '<div class=\"drag-terminal\" style=\"position: absolute;\"></div>'\n        )\n            .appendTo(\"#canvas-container\")\n            .get(0);\n        // Terminal and connection to display noodle while dragging\n        h.terminal = new Terminals.OutputTerminal({ element: h });\n        var c = new Connector();\n        c.dragging = true;\n        c.connect(this.el.terminal, h.terminal);\n        return h;\n    },\n    onDragEnd: function(e, d) {\n        var connector = d.proxy.terminal.connectors[0];\n        // check_changes_in_active_form may change the state and cause a\n        // the connection to have already been destroyed. There must be better\n        // ways to handle this but the following check fixes some serious GUI\n        // bugs for now.\n        if (connector) {\n            connector.destroy();\n        }\n        $(d.proxy).remove();\n        $(d.available).removeClass(\"input-terminal-active\");\n        $(\"#canvas-container\")\n            .get(0)\n            .scroll_panel.stop();\n    }\n});\n\nvar OutputTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function(output) {\n        var type = output.extensions;\n        var terminal = new Terminals.OutputTerminal({\n            element: this.el,\n            datatypes: type\n        });\n        return terminal;\n    }\n});\n\nvar OutputCollectionTerminalView = BaseOutputTerminalView.extend({\n    terminalMappingClass: Terminals.TerminalMapping,\n    terminalMappingViewClass: TerminalMappingView,\n    terminalForOutput: function(output) {\n        var collection_type = output.collection_type;\n        var collection_type_source = output.collection_type_source;\n        var terminal = new Terminals.OutputCollectionTerminal({\n            element: this.el,\n            collection_type: collection_type,\n            collection_type_source: collection_type_source,\n            datatypes: output.extensions\n        });\n        return terminal;\n    }\n});\n\nexport default {\n    InputTerminalView: InputTerminalView,\n    OutputTerminalView: OutputTerminalView,\n    InputCollectionTerminalView: InputCollectionTerminalView,\n    OutputCollectionTerminalView: OutputCollectionTerminalView\n};\n"]}