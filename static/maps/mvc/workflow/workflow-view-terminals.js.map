{"version":3,"sources":["mvc/workflow/workflow-view-terminals.js"],"names":["define","Globals","Terminals","Connector","TerminalMappingView","Backbone","View","extend","tagName","className","initialize","options","this","$el","tooltip","delay","title","model","bind","_","render","mapOver","isCollection","show","hide","InputTerminalMappingView","events","click","mouseenter","mouseleave","onMouseEnter","e","terminal","connected","css","onMouseLeave","onClick","resetMapping","TerminalView","setupMappingView","terminalMapping","terminalMappingClass","terminalMappingView","terminalMappingViewClass","terminalElements","el","BaseInputTerminalView","node","input","name","terminalForInput","multiple","input_terminals","dropinit","dropstart","dropend","drop","hover","onDropInit","d","$","drag","hasClass","canAccept","onDropStart","proxy","connectors","inner_color","onDropEnd","onDrop","redraw","onHover","element","length","t","display","appendTo","append","addClass","each","x","destroy","remove","top","offset","left","width","padding-right","InputTerminalView","TerminalMapping","InputTerminal","InputCollectionTerminalView","InputCollectionTerminal","BaseOutputTerminalView","output","terminalForOutput","output_terminals","dragstart","dragend","onDrag","onmove","po","offsetParent","offsetX","y","offsetY","canvas_manager","update_viewport_overlay","get","scroll_panel","test","onDragStart","available","workflow","check_changes_in_active_form","h","OutputTerminal","c","dragging","connect","onDragEnd","connector","removeClass","stop","OutputTerminalView","type","extensions","datatypes","OutputCollectionTerminalView","collection_type","OutputCollectionTerminal"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view-terminals.js","sourcesContent":["define(['mvc/workflow/workflow-globals', 'mvc/workflow/workflow-terminals',\n        'mvc/workflow/workflow-connector'], function( Globals, Terminals, Connector ) {\n\n    var TerminalMappingView = Backbone.View.extend( {\n        tagName: \"div\",\n        className: \"fa-icon-button fa fa-folder-o\",\n        initialize: function( options ) {\n            var mapText = \"Run tool in parallel over collection\";\n            this.$el.tooltip( {delay: 500, title: mapText } );\n            this.model.bind( \"change\", _.bind( this.render, this ) );\n        },\n        render: function() {\n            if( this.model.mapOver.isCollection ) {\n                this.$el.show();\n            } else {\n                this.$el.hide();\n            }\n        }\n    });\n\n    var InputTerminalMappingView = TerminalMappingView.extend( {\n        events: {\n            \"click\": \"onClick\",\n            \"mouseenter\": \"onMouseEnter\",\n            \"mouseleave\": \"onMouseLeave\",\n        },\n        onMouseEnter: function( e ) {\n            var model = this.model;\n            if( ! model.terminal.connected() && model.mapOver.isCollection ) {\n                this.$el.css( \"color\", \"red\" );\n            }\n        },\n        onMouseLeave: function( e ) {\n            this.$el.css( \"color\", \"black\" );\n        },\n        onClick: function( e ) {\n            var model = this.model;\n            if( ! model.terminal.connected() && model.mapOver.isCollection ) {\n                // TODO: Consider prompting...\n                model.terminal.resetMapping();\n            }\n        }\n    });\n\n    var TerminalView = Backbone.View.extend( {\n        setupMappingView: function( terminal ) {\n            var terminalMapping = new this.terminalMappingClass( { terminal: terminal } );\n            var terminalMappingView = new this.terminalMappingViewClass( { model: terminalMapping } );\n            terminalMappingView.render();\n            terminal.terminalMappingView = terminalMappingView;\n            this.terminalMappingView = terminalMappingView;\n        },\n        terminalElements: function() {\n            if( this.terminalMappingView ) {\n                return [ this.terminalMappingView.el, this.el ];\n            } else{\n                return [ this.el ];\n            }\n        }\n    });\n\n    var BaseInputTerminalView = TerminalView.extend( {\n        className: \"terminal input-terminal\",\n        initialize: function( options ) {\n            var node = options.node;\n            var input = options.input;\n            var name = input.name;\n            var terminal = this.terminalForInput( input );\n            if( ! terminal.multiple ) {\n                this.setupMappingView( terminal );\n            }\n            this.el.terminal = terminal;\n            terminal.node = node;\n            terminal.name = name;\n            node.input_terminals[name] = terminal;\n        },\n        events: {\n            \"dropinit\": \"onDropInit\",\n            \"dropstart\": \"onDropStart\",\n            \"dropend\": \"onDropEnd\",\n            \"drop\": \"onDrop\",\n            \"hover\": \"onHover\",\n        },\n        onDropInit: function( e, d ) {\n            var terminal = this.el.terminal;\n            // Accept a dragable if it is an output terminal and has a\n            // compatible type\n            return $(d.drag).hasClass( \"output-terminal\" ) && terminal.canAccept( d.drag.terminal );\n        },\n        onDropStart: function( e, d  ) {\n            if (d.proxy.terminal) { \n                d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n            }\n        },\n        onDropEnd: function ( e, d ) {\n            if (d.proxy.terminal) { \n                d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n            }\n        },\n        onDrop: function( e, d ) {\n            var terminal = this.el.terminal;        \n            new Connector( d.drag.terminal, terminal ).redraw();\n        },\n        onHover: function() {\n            var element = this.el;\n            var terminal = element.terminal;\n            // If connected, create a popup to allow disconnection\n            if ( terminal.connectors.length > 0 ) {\n                // Create callout\n                var t = $(\"<div class='callout'></div>\")\n                    .css( { display: 'none' } )\n                    .appendTo( \"body\" )\n                    .append(\n                        $(\"<div class='button'></div>\").append(\n                            $(\"<div/>\").addClass(\"fa-icon-button fa fa-times\").click( function() {\n                                $.each( terminal.connectors, function( _, x ) {\n                                    if (x) {\n                                        x.destroy();\n                                    }\n                                });\n                                t.remove();\n                            })))\n                    .bind( \"mouseleave\", function() {\n                        $(this).remove();\n                    });\n                // Position it and show\n                t.css({\n                        top: $(element).offset().top - 2,\n                        left: $(element).offset().left - t.width(),\n                        'padding-right': $(element).width()\n                    }).show();\n            }\n        }\n    });\n\n    var InputTerminalView = BaseInputTerminalView.extend( {\n        terminalMappingClass: Terminals.TerminalMapping,\n        terminalMappingViewClass: InputTerminalMappingView,\n        terminalForInput: function( input ) {\n            return new Terminals.InputTerminal( { element: this.el, input: input } );\n        }\n    });\n\n    var InputCollectionTerminalView = BaseInputTerminalView.extend( {\n        terminalMappingClass: Terminals.TerminalMapping,\n        terminalMappingViewClass: InputTerminalMappingView,\n        terminalForInput: function( input ) {\n            return new Terminals.InputCollectionTerminal( { element: this.el, input: input } );\n        }\n    });\n\n    var BaseOutputTerminalView = TerminalView.extend( {\n        className: \"terminal output-terminal\",\n        initialize: function( options ) {\n            var node = options.node;\n            var output = options.output;\n            var name = output.name;\n            var terminal = this.terminalForOutput( output );\n            this.setupMappingView( terminal );\n            this.el.terminal = terminal;\n            terminal.node = node;\n            terminal.name = name;\n            node.output_terminals[name] = terminal;\n        },\n        events: {\n            \"drag\": \"onDrag\",\n            \"dragstart\": \"onDragStart\",\n            \"dragend\": \"onDragEnd\",\n        },\n        onDrag: function ( e, d ) {\n            var onmove = function() {\n                var po = $(d.proxy).offsetParent().offset(),\n                    x = d.offsetX - po.left,\n                    y = d.offsetY - po.top;\n                $(d.proxy).css( { left: x, top: y } );\n                d.proxy.terminal.redraw();\n                // FIXME: global\n                Globals.canvas_manager.update_viewport_overlay();\n            };\n            onmove();\n            $(\"#canvas-container\").get(0).scroll_panel.test( e, onmove );\n        },\n        onDragStart: function( e, d ) { \n            $( d.available ).addClass( \"input-terminal-active\" );\n            // Save PJAs in the case of change datatype actions.\n            Globals.workflow.check_changes_in_active_form(); \n            // Drag proxy div\n            var h = $( '<div class=\"drag-terminal\" style=\"position: absolute;\"></div>' )\n                .appendTo( \"#canvas-container\" ).get(0);\n            // Terminal and connection to display noodle while dragging\n            h.terminal = new Terminals.OutputTerminal( { element: h } );\n            var c = new Connector();\n            c.dragging = true;\n            c.connect( this.el.terminal, h.terminal );\n            return h;\n        },\n        onDragEnd: function ( e, d ) {\n            var connector = d.proxy.terminal.connectors[0];\n            // check_changes_in_active_form may change the state and cause a\n            // the connection to have already been destroyed. There must be better\n            // ways to handle this but the following check fixes some serious GUI\n            // bugs for now.\n            if(connector) {\n                connector.destroy();\n            }\n            $(d.proxy).remove();\n            $( d.available ).removeClass( \"input-terminal-active\" );\n            $(\"#canvas-container\").get(0).scroll_panel.stop();\n        }\n    });\n\n    var OutputTerminalView = BaseOutputTerminalView.extend( {\n        terminalMappingClass: Terminals.TerminalMapping,\n        terminalMappingViewClass: TerminalMappingView,\n        terminalForOutput: function( output ) {\n            var type = output.extensions;\n            var terminal = new Terminals.OutputTerminal( { element: this.el, datatypes: type } );\n            return terminal;\n        }\n    });\n\n    var OutputCollectionTerminalView = BaseOutputTerminalView.extend( {\n        terminalMappingClass: Terminals.TerminalMapping,\n        terminalMappingViewClass: TerminalMappingView,\n        terminalForOutput: function( output ) {\n            var collection_type = output.collection_type;\n            var terminal = new Terminals.OutputCollectionTerminal( { element: this.el, collection_type: collection_type, datatypes: output.extensions } );\n            return terminal;\n        }\n    });\n\n    return {\n        InputTerminalView               : InputTerminalView,\n        OutputTerminalView              : OutputTerminalView,\n        InputCollectionTerminalView     : InputCollectionTerminalView,\n        OutputCollectionTerminalView    : OutputCollectionTerminalView\n    }\n});"]}