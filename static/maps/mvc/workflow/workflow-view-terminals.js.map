{"version":3,"sources":["mvc/workflow/workflow-view-terminals.js"],"names":["define","Globals","Terminals","Connector","TerminalMappingView","Backbone","View","extend","tagName","className","options","this","mapText","delay","title","$el","tooltip","_","bind","render","model","mapOver","isCollection","hide","InputTerminalMappingView","events","mouseenter","mouseleave","onMouseEnter","e","terminal","connected","onMouseLeave","onClick","resetMapping","TerminalView","setupMappingView","terminalMappingClass","terminalMapping","terminalMappingView","terminalElements","el","BaseInputTerminalView","initialize","node","input","name","multiple","dropstart","dropend","drop","hover","onDropInit","d","$","drag","hasClass","canAccept","onDropStart","proxy","connectors","inner_color","onDropEnd","onDrop","redraw","onHover","element","length","t","display","append","x","addClass","click","each","destroy","remove","top","offset","left","css","width","padding-right","InputTerminalView","TerminalMapping","terminalMappingViewClass","InputCollectionTerminalView","BaseOutputTerminalView","InputCollectionTerminal","output","output_terminals","onDrag","onmove","dragstart","dragend","po","offsetParent","canvas_manager","update_viewport_overlay","y","offsetY","onDragStart","check_changes_in_active_form","available","workflow","c","connect","appendTo","get","onDragEnd","OutputTerminal","h","connector","dragging","OutputTerminalView","stop","terminalForOutput","OutputCollectionTerminalView","datatypes","type","OutputCollectionTerminal","collection_type","collection_type_source","extensions"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view-terminals.js","sourcesContent":["define(['mvc/workflow/workflow-globals', 'mvc/workflow/workflow-terminals',\n        'mvc/workflow/workflow-connector'], function( Globals, Terminals, Connector ) {\n\n    var TerminalMappingView = Backbone.View.extend( {\n        tagName: \"div\",\n        className: \"fa-icon-button fa fa-folder-o\",\n        initialize: function( options ) {\n            var mapText = \"Run tool in parallel over collection\";\n            this.$el.tooltip( {delay: 500, title: mapText } );\n            this.model.bind( \"change\", _.bind( this.render, this ) );\n        },\n        render: function() {\n            if( this.model.mapOver.isCollection ) {\n                this.$el.show();\n            } else {\n                this.$el.hide();\n            }\n        }\n    });\n\n    var InputTerminalMappingView = TerminalMappingView.extend( {\n        events: {\n            \"click\": \"onClick\",\n            \"mouseenter\": \"onMouseEnter\",\n            \"mouseleave\": \"onMouseLeave\",\n        },\n        onMouseEnter: function( e ) {\n            var model = this.model;\n            if( ! model.terminal.connected() && model.mapOver.isCollection ) {\n                this.$el.css( \"color\", \"red\" );\n            }\n        },\n        onMouseLeave: function( e ) {\n            this.$el.css( \"color\", \"black\" );\n        },\n        onClick: function( e ) {\n            var model = this.model;\n            if( ! model.terminal.connected() && model.mapOver.isCollection ) {\n                // TODO: Consider prompting...\n                model.terminal.resetMapping();\n            }\n        }\n    });\n\n    var TerminalView = Backbone.View.extend( {\n        setupMappingView: function( terminal ) {\n            var terminalMapping = new this.terminalMappingClass( { terminal: terminal } );\n            var terminalMappingView = new this.terminalMappingViewClass( { model: terminalMapping } );\n            terminalMappingView.render();\n            terminal.terminalMappingView = terminalMappingView;\n            this.terminalMappingView = terminalMappingView;\n        },\n        terminalElements: function() {\n            if( this.terminalMappingView ) {\n                return [ this.terminalMappingView.el, this.el ];\n            } else{\n                return [ this.el ];\n            }\n        }\n    });\n\n    var BaseInputTerminalView = TerminalView.extend( {\n        className: \"terminal input-terminal\",\n        initialize: function( options ) {\n            var node = options.node;\n            var input = options.input;\n            var name = input.name;\n            var terminal = this.terminalForInput( input );\n            if( ! terminal.multiple ) {\n                this.setupMappingView( terminal );\n            }\n            this.el.terminal = terminal;\n            terminal.node = node;\n            terminal.name = name;\n            node.input_terminals[name] = terminal;\n        },\n        events: {\n            \"dropinit\": \"onDropInit\",\n            \"dropstart\": \"onDropStart\",\n            \"dropend\": \"onDropEnd\",\n            \"drop\": \"onDrop\",\n            \"hover\": \"onHover\",\n        },\n        onDropInit: function( e, d ) {\n            var terminal = this.el.terminal;\n            // Accept a dragable if it is an output terminal and has a\n            // compatible type\n            return $(d.drag).hasClass( \"output-terminal\" ) && terminal.canAccept( d.drag.terminal );\n        },\n        onDropStart: function( e, d  ) {\n            if (d.proxy.terminal) { \n                d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n            }\n        },\n        onDropEnd: function ( e, d ) {\n            if (d.proxy.terminal) { \n                d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n            }\n        },\n        onDrop: function( e, d ) {\n            var terminal = this.el.terminal;        \n            new Connector( d.drag.terminal, terminal ).redraw();\n        },\n        onHover: function() {\n            var element = this.el;\n            var terminal = element.terminal;\n            // If connected, create a popup to allow disconnection\n            if ( terminal.connectors.length > 0 ) {\n                // Create callout\n                var t = $(\"<div class='callout'></div>\")\n                    .css( { display: 'none' } )\n                    .appendTo( \"body\" )\n                    .append(\n                        $(\"<div class='button'></div>\").append(\n                            $(\"<div/>\").addClass(\"fa-icon-button fa fa-times\").click( function() {\n                                $.each( terminal.connectors, function( _, x ) {\n                                    if (x) {\n                                        x.destroy();\n                                    }\n                                });\n                                t.remove();\n                            })))\n                    .bind( \"mouseleave\", function() {\n                        $(this).remove();\n                    });\n                // Position it and show\n                t.css({\n                        top: $(element).offset().top - 2,\n                        left: $(element).offset().left - t.width(),\n                        'padding-right': $(element).width()\n                    }).show();\n            }\n        }\n    });\n\n    var InputTerminalView = BaseInputTerminalView.extend( {\n        terminalMappingClass: Terminals.TerminalMapping,\n        terminalMappingViewClass: InputTerminalMappingView,\n        terminalForInput: function( input ) {\n            return new Terminals.InputTerminal( { element: this.el, input: input } );\n        }\n    });\n\n    var InputCollectionTerminalView = BaseInputTerminalView.extend( {\n        terminalMappingClass: Terminals.TerminalMapping,\n        terminalMappingViewClass: InputTerminalMappingView,\n        terminalForInput: function( input ) {\n            return new Terminals.InputCollectionTerminal( { element: this.el, input: input } );\n        }\n    });\n\n    var BaseOutputTerminalView = TerminalView.extend( {\n        className: \"terminal output-terminal\",\n        initialize: function( options ) {\n            var node = options.node;\n            var output = options.output;\n            var name = output.name;\n            var terminal = this.terminalForOutput( output );\n            this.setupMappingView( terminal );\n            this.el.terminal = terminal;\n            terminal.node = node;\n            terminal.name = name;\n            node.output_terminals[name] = terminal;\n        },\n        events: {\n            \"drag\": \"onDrag\",\n            \"dragstart\": \"onDragStart\",\n            \"dragend\": \"onDragEnd\",\n        },\n        onDrag: function ( e, d ) {\n            var onmove = function() {\n                var po = $(d.proxy).offsetParent().offset(),\n                    x = d.offsetX - po.left,\n                    y = d.offsetY - po.top;\n                $(d.proxy).css( { left: x, top: y } );\n                d.proxy.terminal.redraw();\n                // FIXME: global\n                Globals.canvas_manager.update_viewport_overlay();\n            };\n            onmove();\n            $(\"#canvas-container\").get(0).scroll_panel.test( e, onmove );\n        },\n        onDragStart: function( e, d ) { \n            $( d.available ).addClass( \"input-terminal-active\" );\n            // Save PJAs in the case of change datatype actions.\n            Globals.workflow.check_changes_in_active_form(); \n            // Drag proxy div\n            var h = $( '<div class=\"drag-terminal\" style=\"position: absolute;\"></div>' )\n                .appendTo( \"#canvas-container\" ).get(0);\n            // Terminal and connection to display noodle while dragging\n            h.terminal = new Terminals.OutputTerminal( { element: h } );\n            var c = new Connector();\n            c.dragging = true;\n            c.connect( this.el.terminal, h.terminal );\n            return h;\n        },\n        onDragEnd: function ( e, d ) {\n            var connector = d.proxy.terminal.connectors[0];\n            // check_changes_in_active_form may change the state and cause a\n            // the connection to have already been destroyed. There must be better\n            // ways to handle this but the following check fixes some serious GUI\n            // bugs for now.\n            if(connector) {\n                connector.destroy();\n            }\n            $(d.proxy).remove();\n            $( d.available ).removeClass( \"input-terminal-active\" );\n            $(\"#canvas-container\").get(0).scroll_panel.stop();\n        }\n    });\n\n    var OutputTerminalView = BaseOutputTerminalView.extend( {\n        terminalMappingClass: Terminals.TerminalMapping,\n        terminalMappingViewClass: TerminalMappingView,\n        terminalForOutput: function( output ) {\n            var type = output.extensions;\n            var terminal = new Terminals.OutputTerminal( { element: this.el, datatypes: type } );\n            return terminal;\n        }\n    });\n\n    var OutputCollectionTerminalView = BaseOutputTerminalView.extend( {\n        terminalMappingClass: Terminals.TerminalMapping,\n        terminalMappingViewClass: TerminalMappingView,\n        terminalForOutput: function( output ) {\n            var collection_type = output.collection_type;\n            var collection_type_source = output.collection_type_source;\n            var terminal = new Terminals.OutputCollectionTerminal( { element: this.el, collection_type: collection_type, collection_type_source: collection_type_source, datatypes: output.extensions } );\n            return terminal;\n        }\n    });\n\n    return {\n        InputTerminalView               : InputTerminalView,\n        OutputTerminalView              : OutputTerminalView,\n        InputCollectionTerminalView     : InputCollectionTerminalView,\n        OutputCollectionTerminalView    : OutputCollectionTerminalView\n    }\n});"]}