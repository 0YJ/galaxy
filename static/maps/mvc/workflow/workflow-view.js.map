{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["define","tool_menu_frame","$","removeClass","WorkflowCanvas","Node","WorkflowIcons","FormWrappers","Ui","async_save_text","Toastr","reset_tool_search","initValue","find","contents","attr","document","hide","show","each","search_input","val","hasClass","this","iconStyle","$icon","window","initialize","$to_el","nodeType","Globals","options","addClass","close_editor","data","workflow_name","workflow_data","body","OK","rename_name","length","self","workflow","name","rename_annotation","done","onbeforeunload","location","hide_modal","JSON","stringify","to_simple","id","Galaxy","root","fail","edit_workflow_outputs","clear_active_node","Cancel","overview_size","layout","width","height","canvas_manager","draw_overview","show_overview","jStorage","set","css","click","hide_overview","show_modal","urls","save_current_workflow","check_changes_in_active_form","has_changes","do_close","undefined","workflow_index","success_callback","url","eventObj","success","type","rectify_workflow_outputs","text","message","stored","showWorkflowParameters","i","v","appendTo","errlist","errors","Ok","focus","select","error","response","err_msg","q","keyup","value","setTimeout","get","tool_search","clearTimeout","timer","this_label","s","no_visible_tools","n","next","parent","is","async","datatypes","parse","ajax","ext_to_type","datatypes_mapping","type_to_type","responseText","reset","ext_to_class_name","class_to_classes","_workflowLoadAjax","details","from_simple","_","upgrade_messages","scroll_to_nodes","upgrade_message","steps","step","step_id","m","beforeSubmit","show_message","parseInt","nodes","make_popupmenu","Continue","Save","Save As","workflow_save_as","Run","run_workflow","Edit Attributes","Auto Re-layout","Close","op","offset","bind","e","d","offsetParent","opo","new_size","Math","max","offsetX","left","offsetY","top","last_expanded","workflows","slideUp","append","_buildToolPanelWorkflows","wrap","slideDown","rename_async","tooltip","annotate_async","$section","modal","copy","ButtonIcon","icon","cls","onclick","step_count","copy_into_workflow","on","title","buttons","Copy","html","add_node_for_subworkflow","latest_id","$add","$el","workflowId","k","vv","cc","cv","remove_all","Workflow","Utils","dataType","_moduleInitAjax","request","node","init_field_data","update_field_data","cache","create_node","activate_node","add_node_for_tool","display_pja","tool_id","action_to_rem","closest","remove","active_node","post_job_actions","add_node_for_module","display_pja_list","display_file_list","pja","out_terminal","addlist","get_pja_form","children","active_form_has_changes","pja_list","new_pja","action_type","target","workflow_parameters","wf_parm_container","wf_parm_box","new_parameter_content","matches","config_form","deepeach","inputs","parameter_re","action_arguments","arg_matches","concat","form_matches","match","action_argument","element","inArray","push","showForm","substring","$container","form_wrapper","content","unshift","label","fixed","area","help","onchange","duplicate","input_id","input_element","new_label","content_id","form","element_list","model","trigger","create","scrollTop","child","Default","$f","add_node_icon","$title","tmp","prebuildNode","title_text","destroy","scrollLeft","prependTo","position","p","po","y","o","redraw","node_changed","fit_canvas_to_nodes","x","terminal"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["define('mvc/workflow/workflow-globals', {});\ndefine([\n    'utils/utils',\n    'mvc/workflow/workflow-globals',\n    'mvc/workflow/workflow-manager',\n    'mvc/workflow/workflow-canvas',\n    'mvc/workflow/workflow-node',\n    'mvc/workflow/workflow-icons',\n    'mvc/workflow/workflow-forms',\n    'mvc/ui/ui-misc',\n    'utils/async-save-text',\n    'libs/toastr',\n    'ui/editable-text'\n], function( Utils, Globals, Workflow, WorkflowCanvas, Node, WorkflowIcons, FormWrappers, Ui, async_save_text, Toastr ){\n\n    // Reset tool search to start state.\n    function reset_tool_search( initValue ) {\n        // Function may be called in top frame or in tool_menu_frame;\n        // in either case, get the tool menu frame.\n        var tool_menu_frame = $(\"#galaxy_tools\").contents();\n        if (tool_menu_frame.length === 0) {\n            tool_menu_frame = $(document);\n            // Remove classes that indicate searching is active.\n            $(this).removeClass(\"search_active\");\n            tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n            // Reset visibility of tools and labels.\n            tool_menu_frame.find(\".toolSectionBody\").hide();\n            tool_menu_frame.find(\".toolTitle\").show();\n            tool_menu_frame.find(\".toolPanelLabel\").show();\n            tool_menu_frame.find(\".toolSectionWrapper\").each( function() {\n                if ($(this).attr('id') !== 'recently_used_wrapper') {\n                    // Default action.\n                    $(this).show();\n                } else if ($(this).hasClass(\"user_pref_visible\")) {\n                    $(this).show();\n                }\n            });\n            tool_menu_frame.find(\"#search-no-results\").hide();\n\n            // Reset search input.\n            tool_menu_frame.find(\"#search-spinner\").hide();\n            if (initValue) {\n                var search_input = tool_menu_frame.find(\"#tool-search-query\");\n                search_input.val(\"search tools\");\n            }\n        }\n    }\n\n    add_node_icon = function($to_el, nodeType) {\n        var iconStyle = WorkflowIcons[nodeType];\n        if(iconStyle) {\n            var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n            $to_el.before($icon);\n        }\n    }\n\n    // create form view\n    return Backbone.View.extend({\n        initialize: function(options) {\n            var self = Globals.app = this;\n            this.options = options;\n            this.urls = options && options.urls || {};\n            var close_editor = function() {\n                self.workflow.check_changes_in_active_form();\n                if ( workflow && self.workflow.has_changes ) {\n                    do_close = function() {\n                        window.onbeforeunload = undefined;\n                        window.document.location = self.urls.workflow_index;\n                    };\n                    window.show_modal( \"Close workflow editor\",\n                                \"There are unsaved changes to your workflow which will be lost.\",\n                                {\n                                    \"Cancel\" : hide_modal,\n                                    \"Save Changes\" : function() {\n                                        save_current_workflow( null, do_close );\n                                    }\n                                }, {\n                                    \"Don't Save\": do_close\n                                } );\n                } else {\n                    window.document.location = self.urls.workflow_index;\n                }\n            };\n            var save_current_workflow = function ( eventObj, success_callback ) {\n                show_message( \"Saving workflow\", \"progress\" );\n                self.workflow.check_changes_in_active_form();\n                if (!self.workflow.has_changes) {\n                    hide_modal();\n                    if ( success_callback ) {\n                        success_callback();\n                    }\n                    return;\n                }\n                self.workflow.rectify_workflow_outputs();\n                Utils.request( {\n                    url: Galaxy.root + 'api/workflows/' + self.options.id,\n                    type: \"PUT\",\n                    data: { workflow: self.workflow.to_simple() },\n                    success: function( data ) {\n                        var body = $( \"<div/>\" ).text( data.message );\n                        if ( data.errors ) {\n                            body.addClass( \"warningmark\" );\n                            var errlist = $( \"<ul/>\" );\n                            $.each( data.errors, function( i, v ) {\n                                $( \"<li/>\" ).text( v ).appendTo( errlist );\n                            });\n                            body.append( errlist );\n                        } else {\n                            body.addClass( \"donemark\" );\n                        }\n                        self.workflow.name = data.name;\n                        self.workflow.has_changes = false;\n                        self.workflow.stored = true;\n                        self.showWorkflowParameters();\n                        if ( data.errors ) {\n                            window.show_modal( \"Saving workflow\", body, { \"Ok\" : hide_modal } );\n                        } else {\n                            success_callback && success_callback();\n                            hide_modal();\n                        }\n                    },\n                    error: function( response ) {\n                        window.show_modal( \"Saving workflow failed.\", response.err_msg, { \"Ok\" : hide_modal } );\n                    }\n                });\n            };\n\n            // Init searching.\n            $(\"#tool-search-query\").click( function (){\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup( function () {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if ( this.value.length < 3 ) {\n                    reset_tool_search(false);\n                } else if ( this.value != this.lastValue ) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(function () {\n                        $.get(self.urls.tool_search, { q: q }, function (data) {\n                            // input.removeClass(config.loadingClass);\n                            // Show live-search if results and search-term aren't empty\n                            $(\"#search-no-results\").hide();\n                            // Hide all tool sections.\n                            $(\".toolSectionWrapper\").hide();\n                            // This hides all tools but not workflows link (which is in a .toolTitle div).\n                            $(\".toolSectionWrapper\").find(\".toolTitle\").hide();\n                            if ( data.length != 0 ) {\n                                // Map tool ids to element ids and join them.\n                                var s = $.map( data, function( n, i ) { return \"link-\" + n; } );\n                                // First pass to show matching tools and their parents.\n                                $(s).each( function(index,id) {\n                                    // Add class to denote match.\n                                    $(\"[id='\"+id+\"']\").parent().addClass(\"search_match\");\n                                    $(\"[id='\"+id+\"']\").parent().show().parent().parent().show().parent().show();\n                                });\n                                // Hide labels that have no visible children.\n                                $(\".toolPanelLabel\").each( function() {\n                                   var this_label = $(this);\n                                   var next = this_label.next();\n                                   var no_visible_tools = true;\n                                   // Look through tools following label and, if none are visible, hide label.\n                                   while (next.length !== 0 && next.hasClass(\"toolTitle\")) {\n                                       if (next.is(\":visible\")) {\n                                           no_visible_tools = false;\n                                           break;\n                                       } else {\n                                           next = next.next();\n                                       }\n                                    }\n                                    if (no_visible_tools) {\n                                        this_label.hide();\n                                    }\n                                });\n                            } else {\n                                $(\"#search-no-results\").show();\n                            }\n                            $(\"#search-spinner\").hide();\n                        }, \"json\" );\n                    }, 400 );\n                }\n                this.lastValue = this.value;\n            });\n\n            // Canvas overview management\n            this.canvas_manager = Globals.canvas_manager = new WorkflowCanvas( this, $(\"#canvas-viewport\"), $(\"#overview\") );\n\n            // Initialize workflow state\n            this.reset();\n\n            // get available datatypes for post job action options\n            this.datatypes = JSON.parse($.ajax({\n                url     : Galaxy.root + 'api/datatypes',\n                async   : false\n            }).responseText);\n\n            // get datatype mapping options\n            this.datatypes_mapping = JSON.parse($.ajax({\n                url     : Galaxy.root + 'api/datatypes/mapping',\n                async   : false\n            }).responseText);\n\n            // set mapping sub lists\n            this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n            this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n            // Load workflow definition\n            this._workflowLoadAjax(self.options.id, {\n                success: function( data ) {\n                     self.reset();\n                     self.workflow.from_simple( data, true );\n                     self.workflow.has_changes = false;\n                     self.workflow.fit_canvas_to_nodes();\n                     self.scroll_to_nodes();\n                     self.canvas_manager.draw_overview();\n                     // Determine if any parameters were 'upgraded' and provide message\n                     upgrade_message = \"\";\n                     _.each( data.steps, function( step, step_id ) {\n                        var details = \"\";\n                        if ( step.errors ) {\n                            details += \"<li>\" + step.errors + \"</li>\";\n                        }\n                        _.each( data.upgrade_messages[ step_id ], function( m ) {\n                            details += \"<li>\" + m + \"</li>\";\n                        });\n                        if ( details ) {\n                            upgrade_message += \"<li>Step \" + ( parseInt( step_id, 10 ) + 1 ) + \": \" + self.workflow.nodes[ step_id ].name + \"<ul>\" + details + \"</ul></li>\";\n                        }\n                     });\n                     if ( upgrade_message ) {\n                        window.show_modal( \"Issues loading this workflow\", \"Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>\" + upgrade_message + \"</ul></p>\", { \"Continue\" : hide_modal } );\n                     } else {\n                        hide_modal();\n                     }\n                     self.showWorkflowParameters();\n                 },\n                 beforeSubmit: function( data ) {\n                     show_message( \"Loading workflow\", \"progress\" );\n                 }\n            });\n\n            window.make_popupmenu && make_popupmenu( $(\"#workflow-options-button\"), {\n                \"Save\" : save_current_workflow,\n                \"Save As\": workflow_save_as,\n                \"Run\": function() {\n                    window.location = self.urls.run_workflow;\n                },\n                \"Edit Attributes\" : function() { self.workflow.clear_active_node() },\n                \"Auto Re-layout\": layout_editor,\n                \"Close\": close_editor\n            });\n\n            /******************************************** Issue 3000*/\n            function workflow_save_as() {\n                var body = $('<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' + \n                '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>');\n                    window.show_modal(\"Save As a New Workflow\", body, {\n                        \"OK\": function () {\n                            var rename_name = $('#workflow_rename').val().length > 0 ? $('#workflow_rename').val() : \"SavedAs_\" + self.workflow.name;\n                            var rename_annotation = $('#wf_annotation').val().length > 0 ? $('#wf_annotation').val() : \"\";\n                            $.ajax({\n                                url: self.urls.workflow_save_as,\n                                type: \"POST\",\n                                data: {\n                                    workflow_name: rename_name,\n                                    workflow_annotation: rename_annotation,\n                                    workflow_data: function() { return JSON.stringify( self.workflow.to_simple() ); }\n                                }\n                            }).done(function(id){\n                                window.onbeforeunload = undefined;\n                                window.location = Galaxy.root + \"workflow/editor?id=\" + id;\n                                hide_modal();\n                            }).fail(function(){\n                                hide_modal();\n                                alert(\"Saving this workflow failed. Please contact this site's administrator.\");\n                            });\n                        },\n                        \"Cancel\": hide_modal\n                    });\n            };\n\n            function edit_workflow_outputs(){\n                self.workflow.clear_active_node();\n                $('.right-content').hide();\n                var new_content = \"\";\n                for (var node_key in self.workflow.nodes){\n                    var node = self.workflow.nodes[node_key];\n                    if(['tool', 'subworkflow'].indexOf(node.type) >= 0){\n                        new_content += \"<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step \" + node.id + \" - \" + node.name + \"</div>\";\n                        for (var ot_key in node.output_terminals){\n                            var output = node.output_terminals[ot_key];\n                            if (node.isWorkflowOutput(output.name)) {\n                                new_content += \"<p>\"+output.name +\"<input type='checkbox' name='\"+ node.id + \"|\" + output.name +\"' checked /></p>\";\n                            }\n                            else{\n                                new_content += \"<p>\"+output.name +\"<input type='checkbox' name='\"+ node.id + \"|\" + output.name +\"' /></p>\";\n                            }\n                        }\n                        new_content += \"</div>\";\n                    }\n                }\n                $(\"#output-fill-area\").html(new_content);\n                $(\"#output-fill-area input\").bind('click', function(){\n                    var node_id = this.name.split('|')[0];\n                    var workflowNode = this.workflow.nodes[node_id];\n                    var output_name = this.name.split('|')[1];\n                    if (this.checked){\n                        workflowNode.addWorkflowOutput(output_name);\n                    }else{\n                        workflowNode.removeWorkflowOutput(output_name);\n                    }\n                    self.workflow.has_changes = true;\n                });\n                $('#workflow-output-area').show();\n            }\n\n            function layout_editor() {\n                self.workflow.layout();\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n            }\n\n            // On load, set the size to the pref stored in local storage if it exists\n            overview_size = $.jStorage.get(\"overview-size\");\n            if (overview_size !== undefined) {\n                $(\"#overview-border\").css( {\n                    width: overview_size,\n                    height: overview_size\n                });\n            }\n\n            // Show viewport on load unless pref says it's off\n            if ($.jStorage.get(\"overview-off\")) {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n\n            // Stores the size of the overview into local storage when it's resized\n            $(\"#overview-border\").bind( \"dragend\", function( e, d ) {\n                var op = $(this).offsetParent();\n                var opo = op.offset();\n                var new_size = Math.max( op.width() - ( d.offsetX - opo.left ),\n                                         op.height() - ( d.offsetY - opo.top ) );\n                $.jStorage.set(\"overview-size\", new_size + \"px\");\n            });\n\n            function show_overview() {\n                $.jStorage.set(\"overview-off\", false);\n                $(\"#overview-border\").css(\"right\", \"0px\");\n                $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n            }\n\n            function hide_overview() {\n                $.jStorage.set(\"overview-off\", true);\n                $(\"#overview-border\").css(\"right\", \"20000px\");\n                $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n            }\n\n            // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n            $(\"#close-viewport\").click( function() {\n                if ( $(\"#overview-border\").css(\"right\") === \"0px\" ) {\n                    hide_overview();\n                } else {\n                    show_overview();\n                }\n            });\n\n            // Unload handler\n            window.onbeforeunload = function() {\n                if ( workflow && self.workflow.has_changes ) {\n                    return \"There are unsaved changes to your workflow which will be lost.\";\n                }\n            };\n\n            this.options.workflows.length > 0 && $( \"#left\" ).find( \".toolMenu\" ).append( this._buildToolPanelWorkflows() );\n\n            // Tool menu\n            $( \"div.toolSectionBody\" ).hide();\n            $( \"div.toolSectionTitle > span\" ).wrap( \"<a href='#'></a>\" );\n            var last_expanded = null;\n            $( \"div.toolSectionTitle\" ).each( function() {\n               var body = $(this).next( \"div.toolSectionBody\" );\n               $(this).click( function() {\n                   if ( body.is( \":hidden\" ) ) {\n                       if ( last_expanded ) last_expanded.slideUp( \"fast\" );\n                       last_expanded = body;\n                       body.slideDown( \"fast\" );\n                   }\n                   else {\n                       body.slideUp( \"fast\" );\n                       last_expanded = null;\n                   }\n               });\n            });\n\n            // Rename async.\n            async_save_text(\"workflow-name\", \"workflow-name\", self.urls.rename_async, \"new_name\");\n\n            // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n            $('#workflow-tag').click( function() {\n                $('.tag-area').click();\n                return false;\n            });\n            // Annotate async.\n            async_save_text(\"workflow-annotation\", \"workflow-annotation\", self.urls.annotate_async, \"new_annotation\", 25, true, 4);\n        },\n\n        _buildToolPanelWorkflows: function() {\n            var self = this;\n            var $section = $(   '<div class=\"toolSectionWrapper\">' +\n                                    '<div class=\"toolSectionTitle\">' +\n                                        '<a href=\"#\"><span>Workflows</span></a>' +\n                                    '</div>' +\n                                    '<div class=\"toolSectionBody\">' +\n                                        '<div class=\"toolSectionBg\"/>' +\n                                    '</div>' +\n                                '</div>' );\n            _.each( this.options.workflows, function( workflow ) {\n                if( workflow.id !== self.options.id ) {\n                    var copy = new Ui.ButtonIcon({\n                        icon        : 'fa fa-copy',\n                        cls         : 'ui-button-icon-plain',\n                        tooltip     : 'Copy and insert individual steps',\n                        onclick     : function() {\n                            if( workflow.step_count < 2 ) {\n                                self.copy_into_workflow( workflow.id, workflow.name );\n                            } else {\n                                // don't ruin the workflow by adding 50 steps unprompted.\n                                Galaxy.modal.show({\n                                    title   : 'Warning',\n                                    body    : 'This will copy ' + workflow.step_count + ' new steps into your workflow.',\n                                    buttons : {\n                                        'Cancel' : function() { Galaxy.modal.hide(); },\n                                        'Copy'   : function() { Galaxy.modal.hide(); self.copy_into_workflow( workflow.id, workflow.name ); }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    var $add = $( '<a/>' ).attr( 'href', '#' ).html( workflow.name ).on( 'click', function() {\n                        self.add_node_for_subworkflow( workflow.latest_id, workflow.name );\n                    });\n                    $section.find( '.toolSectionBg' ).append( $( '<div/>' ).addClass( 'toolTitle' ).append( $add ).append( copy.$el ) );\n                }\n            });\n            return $section;\n        },\n\n        copy_into_workflow: function(workflowId) {\n            // Load workflow definition\n            var self = this;\n            this._workflowLoadAjax(workflowId, {\n                success: function( data ) {\n                    self.workflow.from_simple( data, false );\n                    // Determine if any parameters were 'upgraded' and provide message\n                    upgrade_message = \"\";\n                    $.each( data.upgrade_messages, function( k, v ) {\n                       upgrade_message += ( \"<li>Step \" + ( parseInt(k, 10) + 1 ) + \": \" + self.workflow.nodes[k].name + \"<ul>\");\n                       $.each( v, function( i, vv ) {\n                           upgrade_message += \"<li>\" + vv +\"</li>\";\n                       });\n                       upgrade_message += \"</ul></li>\";\n                    });\n                    if ( upgrade_message ) {\n                       window.show_modal( \"Subworkflow embedded with changes\",\n                                   \"Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>\" + upgrade_message + \"</ul>\",\n                                   { \"Continue\" : hide_modal } );\n                    } else {\n                       hide_modal();\n                    }\n                },\n                beforeSubmit: function( data ) {\n                   show_message( \"Importing workflow\", \"progress\" );\n                }\n            });\n        },\n\n        // Global state for the whole workflow\n        reset: function() {\n            this.workflow && this.workflow.remove_all();\n            this.workflow = Globals.workflow = new Workflow( this, $(\"#canvas-container\") );\n        },\n\n        scroll_to_nodes: function () {\n            var cv = $(\"#canvas-viewport\");\n            var cc = $(\"#canvas-container\");\n            var top, left;\n            if ( cc.width() < cv.width() ) {\n                left = ( cv.width() - cc.width() ) / 2;\n            } else {\n                left = 0;\n            }\n            if ( cc.height() < cv.height() ) {\n                top = ( cv.height() - cc.height() ) / 2;\n            } else {\n                top = 0;\n            }\n            cc.css( { left: left, top: top } );\n        },\n\n        _workflowLoadAjax: function(workflowId, options) {\n            $.ajax(Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, \"_\": \"true\" },\n                dataType: 'json',\n                cache: false\n            }));\n        },\n\n        _moduleInitAjax: function(node, request_data) {\n            var self = this;\n            Utils.request({\n                type    : 'POST',\n                url     : Galaxy.root + 'api/workflows/build_module',\n                data    : request_data,\n                success : function( data ) {\n                    node.init_field_data( data );\n                    node.update_field_data( data );\n                    self.workflow.activate_node( node );\n                }\n            });\n        },\n\n        // Add a new step to the workflow by tool id\n        add_node_for_tool: function ( id, title ) {\n            node = this.workflow.create_node( 'tool', title, id );\n            this._moduleInitAjax(node, { type: \"tool\", tool_id: id, \"_\": \"true\" });\n        },\n\n        // Add a new step to the workflow by tool id\n        add_node_for_subworkflow: function ( id, title ) {\n            node = this.workflow.create_node( 'subworkflow', title, id );\n            this._moduleInitAjax(node, { type: \"subworkflow\", content_id: id, \"_\": \"true\" });\n        },\n\n        add_node_for_module: function ( type, title ) {\n            node = this.workflow.create_node( type, title );\n            this._moduleInitAjax(node, { type: type, \"_\": \"true\" });\n        },\n\n        // This function preloads how to display known pja's.\n        display_pja: function (pja, node) {\n            // DBTODO SANITIZE INPUTS.\n            var self = this;\n            $(\"#pja_container\").append( get_pja_form(pja, node) );\n            $(\"#pja_container>.toolForm:last>.toolFormTitle>.buttons\").click(function (){\n                action_to_rem = $(this).closest(\".toolForm\", \".action_tag\").children(\".action_tag:first\").text();\n                $(this).closest(\".toolForm\").remove();\n                delete self.workflow.active_node.post_job_actions[action_to_rem];\n                self.workflow.active_form_has_changes = true;\n            });\n        },\n\n        display_pja_list: function (){\n            return pja_list;\n        },\n\n        display_file_list: function (node){\n            addlist = \"<select id='node_data_list' name='node_data_list'>\";\n            for (var out_terminal in node.output_terminals){\n                addlist += \"<option value='\" + out_terminal + \"'>\"+ out_terminal +\"</option>\";\n            }\n            addlist += \"</select>\";\n            return addlist;\n        },\n\n        new_pja: function (action_type, target, node){\n            if (node.post_job_actions === undefined){\n                //New tool node, set up dict.\n                node.post_job_actions = {};\n            }\n            if (node.post_job_actions[action_type+target] === undefined) {\n                var new_pja = {};\n                new_pja.action_type = action_type;\n                new_pja.output_name = target;\n                node.post_job_actions[action_type+target] = null;\n                node.post_job_actions[action_type+target] =  new_pja;\n                display_pja(new_pja, node);\n                this.workflow.active_form_has_changes = true;\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        showWorkflowParameters: function () {\n            var parameter_re = /\\$\\{.+?\\}/g;\n            var workflow_parameters = [];\n            var wf_parm_container = $( '#workflow-parameters-container' );\n            var wf_parm_box = $( '#workflow-parameters-box' );\n            var new_parameter_content = '';\n            var matches = [];\n            $.each(this.workflow.nodes, function ( k, node ){\n                if ( node.config_form && node.config_form.inputs ) {\n                    Utils.deepeach( node.config_form.inputs, function( d ) {\n                        if ( typeof d.value == 'string' ) {\n                            var form_matches = d.value.match( parameter_re );\n                            if ( form_matches ) {\n                                matches = matches.concat( form_matches );\n                            }\n                        }\n                    });\n                }\n                if (node.post_job_actions){\n                    $.each(node.post_job_actions, function(k, pja){\n                        if (pja.action_arguments){\n                            $.each(pja.action_arguments, function(k, action_argument){\n                                var arg_matches = action_argument.match(parameter_re);\n                                if (arg_matches){\n                                    matches = matches.concat(arg_matches);\n                                }\n                            });\n                        }\n                    });\n                }\n                if (matches){\n                    $.each(matches, function(k, element){\n                        if ($.inArray(element, workflow_parameters) === -1){\n                            workflow_parameters.push(element);\n                        }\n                    });\n                }\n            });\n            if (workflow_parameters && workflow_parameters.length !== 0){\n                $.each(workflow_parameters, function(k, element){\n                    new_parameter_content += \"<div>\" + element.substring(2, element.length -1) + \"</div>\";\n                });\n                wf_parm_container.html(new_parameter_content);\n                wf_parm_box.show();\n            }else{\n                wf_parm_container.html(new_parameter_content);\n                wf_parm_box.hide();\n            }\n        },\n\n        showAttributes: function() {\n            $( '.right-content' ).hide();\n            $( '#edit-attributes' ).show();\n        },\n\n        showForm: function ( content, node ) {\n            var self = this;\n            var cls = 'right-content';\n            var id  = cls + '-' + node.id;\n            var $container = $( '#' + cls );\n            if ( content && $container.find( '#' + id ).length == 0 ) {\n                var $el = $( '<div id=\"' + id + '\" class=\"' + cls + '\"/>' );\n                var form_wrapper = null;\n                content.node = node;\n                content.workflow = this.workflow;\n                content.datatypes = this.datatypes;\n                content.icon = WorkflowIcons[ node.type ];\n                content.cls = 'ui-portlet-narrow';\n                content.inputs.unshift({\n                    type    : 'text',\n                    name    : '__annotation',\n                    label   : 'Annotation',\n                    fixed   : true,\n                    value   : node.annotation,\n                    area    : true,\n                    help    : 'Add an annotation or notes to this step. Annotations are available when a workflow is viewed.'\n                });\n                content.inputs.unshift({\n                    type    : 'text',\n                    name    : '__label',\n                    label   : 'Label',\n                    value   : node.label,\n                    help    : 'Add a step label.',\n                    fixed   : true,\n                    onchange: function( new_label ) {\n                        var duplicate = false;\n                        for ( var i in self.workflow.nodes ) {\n                            var n = self.workflow.nodes[ i ];\n                            if ( n.label && n.label == new_label && n.id != node.id ) {\n                                duplicate = true;\n                                break;\n                            }\n                        }\n                        var input_id = form_wrapper.form.data.match( '__label' );\n                        var input_element = form_wrapper.form.element_list[ input_id ];\n                        input_element.model.set( 'error_text', duplicate && 'Duplicate label. Please fix this before saving the workflow.' );\n                        form_wrapper.form.trigger( 'change' );\n                    }\n                });\n                content.onchange = function() {\n                    Utils.request({\n                        type    : 'POST',\n                        url     :  Galaxy.root + 'api/workflows/build_module',\n                        data    : {\n                            id          : node.id,\n                            type        : node.type,\n                            content_id  : node.content_id,\n                            inputs      : form_wrapper.form.data.create()\n                        },\n                        success : function( data ) {\n                            node.update_field_data( data );\n                        }\n                    });\n                };\n                if ( node.type == 'tool' ) {\n                    form_wrapper = new FormWrappers.Tool( content );\n                } else {\n                    form_wrapper = new FormWrappers.Default( content );\n                }\n                $el.append( form_wrapper.form.$el );\n                $container.append( $el );\n            }\n            $( '.' + cls ).hide();\n            $container.find( '#' + id ).show();\n            $container.show();\n            $container.scrollTop();\n        },\n\n        isSubType: function ( child, parent ) {\n            child = this.ext_to_type[child];\n            parent = this.ext_to_type[parent];\n            return ( this.type_to_type[child] ) && ( parent in this.type_to_type[child] );\n        },\n\n        prebuildNode: function ( type, title_text, content_id ) {\n            var self = this;\n            var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n            var $title = $(\"<div class='toolFormTitle unselectable'><span class='nodeTitle'>\" + title_text + \"</div></div>\" );\n            add_node_icon($title.find('.nodeTitle'), type);\n            $f.append( $title );\n            $f.css( \"left\", $(window).scrollLeft() + 20 );\n            $f.css( \"top\", $(window).scrollTop() + 20 );\n            $f.append($(\"<div class='toolFormBody'></div>\"));\n            var node = new Node( this, { element: $f } );\n            node.type = type;\n            node.content_id = content_id;\n            var tmp = \"<div><img height='16' align='middle' src='\" + Galaxy.root + \"static/images/loading_small_white_bg.gif'/> loading tool info...</div>\";\n            $f.find(\".toolFormBody\").append(tmp);\n            // Fix width to computed width\n            // Now add floats\n            var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n            buttons.append( $(\"<div/>\").addClass(\"fa-icon-button fa fa-times\").click( function( e ) {\n                node.destroy();\n            }));\n            // Place inside container\n            $f.appendTo( \"#canvas-container\" );\n            // Position in container\n            var o = $(\"#canvas-container\").position();\n            var p = $(\"#canvas-container\").parent();\n            var width = $f.width();\n            var height = $f.height();\n            $f.css( { left: ( - o.left ) + ( p.width() / 2 ) - ( width / 2 ), top: ( - o.top ) + ( p.height() / 2 ) - ( height / 2 ) } );\n            buttons.prependTo( $f.find(\".toolFormTitle\" ) );\n            width += ( buttons.width() + 10 );\n            $f.css( \"width\", width );\n            $f.bind( \"dragstart\", function() {\n                self.workflow.activate_node( node );\n            }).bind( \"dragend\", function() {\n                self.workflow.node_changed( this );\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            }).bind( \"dragclickonly\", function() {\n                self.workflow.activate_node( node );\n            }).bind( \"drag\", function( e, d ) {\n                // Move\n                var po = $(this).offsetParent().offset(),\n                    x = d.offsetX - po.left,\n                    y = d.offsetY - po.top;\n                $(this).css( { left: x, top: y } );\n                // Redraw\n                $(this).find( \".terminal\" ).each( function() {\n                    this.terminal.redraw();\n                });\n            });\n            return node;\n        }\n    });\n});\n"]}