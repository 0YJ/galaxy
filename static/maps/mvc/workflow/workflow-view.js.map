{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["reset_tool_search","initValue","tool_menu_frame","$","contents","length","document","this","removeClass","find","hide","show","each","attr","hasClass","val","nodeType","addClass","iconStyle","$to_el","before","$icon","Backbone","View","extend","initialize","options","self","jStorage","set","css","Galaxy","buttons","Cancel","urls","save_current_workflow","eventObj","has_changes","window","show_message","do_close","hide_modal","workflow","rectify_workflow_outputs","_utils2","default","request","url","root","id","type","location","success","data","body","text","message","check_changes_in_active_form","i","v","success_callback","append","errlist","name","show_modal","focus","select","value","lastValue","timer","setTimeout","get","tool_search","q","s","map","n","index","parent","this_label","next","no_visible_tools","datatypes","JSON","parse","canvas_manager","_workflowGlobals2","_workflowCanvas2","reset","ajax","_workflowLoadAjax","scroll_to_nodes","async","_","ext_to_type","datatypes_mapping","ext_to_class_name","upgrade_messages","details","upgrade_message","from_simple","showWorkflowParameters","steps","step","step_id","beforeSubmit","errors","m","make_popupmenu","parseInt","clear_active_node","close_editor","workflow_save_as","rename_name","Continue","rename_annotation","workflow_name","workflow_data","stringify","Save As","output_terminals","OK","new_content","node_id","workflowNode","output_name","workflow_annotation","addWorkflowOutput","removeWorkflowOutput","done","onbeforeunload","undefined","layout_editor","layout","alert","width","Auto Re-layout","last_expanded","draw_overview","Close","search_input","workflow_index","add_node_icon","overview_size","height","hide_overview","show_overview","bind","e","d","$section","offsetParent","op","new_size","max","copy","offsetX","opo","left","icon","offsetY","top","tooltip","click","copy_into_workflow","is","slideUp","_asyncSaveText2","rename_async","cv","_buildToolPanelWorkflows","workflows","_uiMisc2","ButtonIcon","request_data","node","init_field_data","update_field_data","modal","title","create_node","Copy","add_node_for_module","_moduleInitAjax","on","add_node_for_subworkflow","latest_id","get_pja_form","action_to_rem","closest","$add","active_node","workflowId","display_file_list","out_terminal","addlist","k","action_type","post_job_actions","nodes","vv","target","new_pja","display_pja","workflow_parameters","wf_parm_container","form_matches","matches","cc","arg_matches","merge","load_workflow","new_parameter_content","html","wf_parm_box","showAttributes","activate_node","add_node_for_tool","content","$container","$el","emit","content_id","isSubType","pja","prebuildNode","$f","scrollLeft","tmp","active_form_has_changes","o","offset","parameter_re","config_form","inputs","deepeach","match","concat","action_arguments","action_argument","element","inArray","push","substring","showForm","cls","_workflowIcons2","form_type","_workflowForms2","form","debug","scrollTop","child","type_to_type","title_text","$title","_workflowNode2","destroy","appendTo","position","p","prependTo","node_changed","fit_canvas_to_nodes","po","x","y","terminal","redraw"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Globals from \"mvc/workflow/workflow-globals\";\nimport Workflow from \"mvc/workflow/workflow-manager\";\nimport WorkflowCanvas from \"mvc/workflow/workflow-canvas\";\nimport Node from \"mvc/workflow/workflow-node\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nimport FormWrappers from \"mvc/workflow/workflow-forms\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport async_save_text from \"utils/async-save-text\";\nimport Toastr from \"libs/toastr\";\nimport \"ui/editable-text\";\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = WorkflowIcons[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = (Globals.app = this);\n        this.options = options;\n        this.urls = (options && options.urls) || {};\n        var close_editor = function() {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = function() {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\n                    \"Close workflow editor\",\n                    \"There are unsaved changes to your workflow which will be lost.\",\n                    {\n                        Cancel: hide_modal,\n                        \"Save Changes\": function() {\n                            save_current_workflow(null, do_close);\n                        }\n                    },\n                    {\n                        \"Don't Save\": do_close\n                    }\n                );\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = function(eventObj, success_callback) {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            Utils.request({\n                url: Galaxy.root + \"api/workflows/\" + self.options.id,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, function(i, v) {\n                            $(\"<li/>\")\n                                .text(v)\n                                .appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function(response) {\n                    window.show_modal(\n                        \"Saving workflow failed.\",\n                        response.err_msg,\n                        { Ok: hide_modal }\n                    );\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\")\n            .click(function() {\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup(function() {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if (this.value.length < 3) {\n                    reset_tool_search(false);\n                } else if (this.value != this.lastValue) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(function() {\n                        $.get(\n                            self.urls.tool_search,\n                            { q: q },\n                            function(data) {\n                                // input.removeClass(config.loadingClass);\n                                // Show live-search if results and search-term aren't empty\n                                $(\"#search-no-results\").hide();\n                                // Hide all tool sections.\n                                $(\".toolSectionWrapper\").hide();\n                                // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                $(\".toolSectionWrapper\")\n                                    .find(\".toolTitle\")\n                                    .hide();\n                                if (data.length != 0) {\n                                    // Map tool ids to element ids and join them.\n                                    var s = $.map(data, function(n, i) {\n                                        return \"link-\" + n;\n                                    });\n                                    // First pass to show matching tools and their parents.\n                                    $(s).each(function(index, id) {\n                                        // Add class to denote match.\n                                        $(\"[id='\" + id + \"']\")\n                                            .parent()\n                                            .addClass(\"search_match\");\n                                        $(\"[id='\" + id + \"']\")\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .show();\n                                    });\n                                    // Hide labels that have no visible children.\n                                    $(\".toolPanelLabel\").each(function() {\n                                        var this_label = $(this);\n                                        var next = this_label.next();\n                                        var no_visible_tools = true;\n                                        // Look through tools following label and, if none are visible, hide label.\n                                        while (\n                                            next.length !== 0 &&\n                                            next.hasClass(\"toolTitle\")\n                                        ) {\n                                            if (next.is(\":visible\")) {\n                                                no_visible_tools = false;\n                                                break;\n                                            } else {\n                                                next = next.next();\n                                            }\n                                        }\n                                        if (no_visible_tools) {\n                                            this_label.hide();\n                                        }\n                                    });\n                                } else {\n                                    $(\"#search-no-results\").show();\n                                }\n                                $(\"#search-spinner\").hide();\n                            },\n                            \"json\"\n                        );\n                    }, 400);\n                }\n                this.lastValue = this.value;\n            });\n\n        // Canvas overview management\n        this.canvas_manager = Globals.canvas_manager = new WorkflowCanvas(\n            this,\n            $(\"#canvas-viewport\"),\n            $(\"#overview\")\n        );\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse(\n            $.ajax({\n                url: Galaxy.root + \"api/datatypes\",\n                async: false\n            }).responseText\n        );\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse(\n            $.ajax({\n                url: Galaxy.root + \"api/datatypes/mapping\",\n                async: false\n            }).responseText\n        );\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, function(step, step_id) {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += \"<li>\" + step.errors + \"</li>\";\n                    }\n                    _.each(data.upgrade_messages[step_id], function(m) {\n                        details += \"<li>\" + m + \"</li>\";\n                    });\n                    if (details) {\n                        upgrade_message +=\n                            \"<li>Step \" +\n                            (parseInt(step_id, 10) + 1) +\n                            \": \" +\n                            self.workflow.nodes[step_id].name +\n                            \"<ul>\" +\n                            details +\n                            \"</ul></li>\";\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Issues loading this workflow\",\n                        \"Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>\" +\n                            upgrade_message +\n                            \"</ul></p>\",\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu &&\n            make_popupmenu($(\"#workflow-options-button\"), {\n                Save: save_current_workflow,\n                \"Save As\": workflow_save_as,\n                Run: function() {\n                    window.location =\n                        Galaxy.root + \"workflow/run?id=\" + self.options.id;\n                },\n                \"Edit Attributes\": function() {\n                    self.workflow.clear_active_node();\n                },\n                \"Auto Re-layout\": layout_editor,\n                Close: close_editor\n            });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $(\n                '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                    '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n            );\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function() {\n                    var rename_name =\n                        $(\"#workflow_rename\").val().length > 0\n                            ? $(\"#workflow_rename\").val()\n                            : \"SavedAs_\" + self.workflow.name;\n                    var rename_annotation =\n                        $(\"#wf_annotation\").val().length > 0\n                            ? $(\"#wf_annotation\").val()\n                            : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function() {\n                                return JSON.stringify(\n                                    self.workflow.to_simple()\n                                );\n                            }\n                        }\n                    })\n                        .done(function(id) {\n                            window.onbeforeunload = undefined;\n                            window.location =\n                                Galaxy.root + \"workflow/editor?id=\" + id;\n                            hide_modal();\n                        })\n                        .fail(function() {\n                            hide_modal();\n                            alert(\n                                \"Saving this workflow failed. Please contact this site's administrator.\"\n                            );\n                        });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content +=\n                        \"<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step \" +\n                        node.id +\n                        \" - \" +\n                        node.name +\n                        \"</div>\";\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content +=\n                                \"<p>\" +\n                                output.name +\n                                \"<input type='checkbox' name='\" +\n                                node.id +\n                                \"|\" +\n                                output.name +\n                                \"' checked /></p>\";\n                        } else {\n                            new_content +=\n                                \"<p>\" +\n                                output.name +\n                                \"<input type='checkbox' name='\" +\n                                node.id +\n                                \"|\" +\n                                output.name +\n                                \"' /></p>\";\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function() {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(\n                op.width() - (d.offsetX - opo.left),\n                op.height() - (d.offsetY - opo.top)\n            );\n            $.jStorage.set(\"overview-size\", new_size + \"px\");\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(function() {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = function() {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 &&\n            $(\"#left\")\n                .find(\".toolMenu\")\n                .append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function() {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(function() {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        async_save_text(\n            \"workflow-name\",\n            \"workflow-name\",\n            self.urls.rename_async,\n            \"new_name\"\n        );\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(function() {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        async_save_text(\n            \"workflow-annotation\",\n            \"workflow-annotation\",\n            self.urls.annotate_async,\n            \"new_annotation\",\n            25,\n            true,\n            4\n        );\n    },\n\n    _buildToolPanelWorkflows: function() {\n        var self = this;\n        var $section = $(\n            '<div class=\"toolSectionWrapper\">' +\n                '<div class=\"toolSectionTitle\">' +\n                '<a href=\"#\"><span>Workflows</span></a>' +\n                \"</div>\" +\n                '<div class=\"toolSectionBody\">' +\n                '<div class=\"toolSectionBg\"/>' +\n                \"</div>\" +\n                \"</div>\"\n        );\n        _.each(this.options.workflows, function(workflow) {\n            if (workflow.id !== self.options.id) {\n                var copy = new Ui.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: \"Copy and insert individual steps\",\n                    onclick: function() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: \"Warning\",\n                                body:\n                                    \"This will copy \" +\n                                    workflow.step_count +\n                                    \" new steps into your workflow.\",\n                                buttons: {\n                                    Cancel: function() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(\n                                            workflow.id,\n                                            workflow.name\n                                        );\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\")\n                    .attr(\"href\", \"#\")\n                    .html(workflow.name)\n                    .on(\"click\", function() {\n                        self.add_node_for_subworkflow(\n                            workflow.latest_id,\n                            workflow.name\n                        );\n                    });\n                $section.find(\".toolSectionBg\").append(\n                    $(\"<div/>\")\n                        .addClass(\"toolTitle\")\n                        .append($add)\n                        .append(copy.$el)\n                );\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, function(k, v) {\n                    upgrade_message +=\n                        \"<li>Step \" +\n                        (parseInt(k, 10) + 1) +\n                        \": \" +\n                        self.workflow.nodes[k].name +\n                        \"<ul>\";\n                    $.each(v, function(i, vv) {\n                        upgrade_message += \"<li>\" + vv + \"</li>\";\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Subworkflow embedded with changes\",\n                        \"Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>\" +\n                            upgrade_message +\n                            \"</ul>\",\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = Globals.workflow = new Workflow(\n            this,\n            $(\"#canvas-container\")\n        );\n    },\n\n    scroll_to_nodes: function() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top, left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function(workflowId, options) {\n        $.ajax(\n            Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, _: \"true\" },\n                dataType: \"json\",\n                cache: false\n            })\n        );\n    },\n\n    _moduleInitAjax: function(node, request_data) {\n        var self = this;\n        Utils.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/workflows/build_module\",\n            data: request_data,\n            success: function(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    // This function preloads how to display known pja's.\n    display_pja: function(pja, node) {\n        // DBTODO SANITIZE INPUTS.\n        var self = this;\n        $(\"#pja_container\").append(get_pja_form(pja, node));\n        $(\n            \"#pja_container>.toolForm:last>.toolFormTitle>.buttons\"\n        ).click(function() {\n            var action_to_rem = $(this)\n                .closest(\".toolForm\", \".action_tag\")\n                .children(\".action_tag:first\")\n                .text();\n            $(this)\n                .closest(\".toolForm\")\n                .remove();\n            delete self.workflow.active_node.post_job_actions[action_to_rem];\n            self.workflow.active_form_has_changes = true;\n        });\n    },\n\n    display_pja_list: function() {\n        return pja_list;\n    },\n\n    display_file_list: function(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist +=\n                \"<option value='\" +\n                out_terminal +\n                \"'>\" +\n                out_terminal +\n                \"</option>\";\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    new_pja: function(action_type, target, node) {\n        if (node.post_job_actions === undefined) {\n            //New tool node, set up dict.\n            node.post_job_actions = {};\n        }\n        if (node.post_job_actions[action_type + target] === undefined) {\n            var new_pja = {};\n            new_pja.action_type = action_type;\n            new_pja.output_name = target;\n            node.post_job_actions[action_type + target] = null;\n            node.post_job_actions[action_type + target] = new_pja;\n            display_pja(new_pja, node);\n            this.workflow.active_form_has_changes = true;\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    showWorkflowParameters: function() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, function(k, node) {\n            if (node.config_form && node.config_form.inputs) {\n                Utils.deepeach(node.config_form.inputs, function(d) {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, function(k, pja) {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, function(\n                            k,\n                            action_argument\n                        ) {\n                            var arg_matches = action_argument.match(\n                                parameter_re\n                            );\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, function(k, element) {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, function(k, element) {\n                new_parameter_content +=\n                    \"<div>\" +\n                    element.substring(2, element.length - 1) +\n                    \"</div>\";\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = cls + \"-\" + node.id;\n        var $container = $(\"#\" + cls);\n        if (content && $container.find(\"#\" + id).length == 0) {\n            var $el = $('<div id=\"' + id + '\" class=\"' + cls + '\"/>');\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = WorkflowIcons[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new FormWrappers[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\n                    \"workflow-view::initialize()\",\n                    \"Node not found in workflow.\"\n                );\n            }\n        }\n        $(\".\" + cls).hide();\n        $container.find(\"#\" + id).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(\n            \"<div class='toolFormTitle unselectable'><span class='nodeTitle'>\" +\n                title_text +\n                \"</div></div>\"\n        );\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new Node(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp =\n            \"<div><img height='16' align='middle' src='\" +\n            Galaxy.root +\n            \"static/images/loading_small_white_bg.gif'/> loading tool info...</div>\";\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        buttons.append(\n            $(\"<div/>\")\n                .addClass(\"fa-icon-button fa fa-times\")\n                .click(function(e) {\n                    node.destroy();\n                })\n        );\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f\n            .bind(\"dragstart\", function() {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"dragend\", function() {\n                self.workflow.node_changed(this);\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            })\n            .bind(\"dragclickonly\", function() {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"drag\", function(e, d) {\n                // Move\n                var po = $(this)\n                        .offsetParent()\n                        .offset(),\n                    x = d.offsetX - po.left,\n                    y = d.offsetY - po.top;\n                $(this).css({ left: x, top: y });\n                // Redraw\n                $(this)\n                    .find(\".terminal\")\n                    .each(function() {\n                        this.terminal.redraw();\n                    });\n            });\n        return node;\n    }\n});\n"]}