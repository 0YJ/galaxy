{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["reset_tool_search","initValue","tool_menu_frame","$","contents","length","document","this","removeClass","Toastr","find","hide","show","each","attr","hasClass","val","add_node_icon","$to_el","nodeType","window","workflow_globals","iconStyle","$icon","addClass","initialize","options","show_overview","jStorage","set","css","$section","_","self","ButtonIcon","app","urls","eventObj","check_changes_in_active_form","before","has_changes","hide_modal","success_callback","_utils2","default","url","Galaxy","id","close_editor","workflow","success","do_close","text","message","onbeforeunload","errlist","show_modal","i","v","Cancel","save_current_workflow","body","append","location","name","stored","show_message","errors","rectify_workflow_outputs","type","err_msg","Ok","click","select","keyup","showWorkflowParameters","lastValue","timer","error","response","setTimeout","get","tool_search","q","focus","data","s","map","n","clearTimeout","index","parent","this_label","next","no_visible_tools","is","value","canvas_manager","_workflowCanvas2","reset","datatypes","JSON","parse","ajax","root","async","responseText","ext_to_type","datatypes_mapping","ext_to_class_name","type_to_type","_workflowLoadAjax","class_to_classes","from_simple","scroll_to_nodes","draw_overview","fit_canvas_to_nodes","steps","upgrade_message","details","step","step_id","m","parseInt","nodes","beforeSubmit","make_popupmenu","workflow_save_as","OK","Save","Save As","edit_workflow_outputs","clear_active_node","new_content","node","workflow_name","workflow_annotation","output_terminals","workflow_data","isWorkflowOutput","to_simple","done","undefined","bind","node_id","output_name","workflowNode","Auto Re-layout","Close","workflow_index","search_input","overview_size","last_expanded","height","e","d","op","offsetParent","opo","offset","new_size","Math","max","width","offsetX","left","offsetY","top","onclick","step_count","workflows","_buildToolPanelWorkflows","add_node_for_subworkflow","slideUp","copy_into_workflow","workflowId","rename_async","annotate_async","cv","copy","_uiMisc2","icon","cls","load_workflow","modal","title","buttons","init_field_data","update_field_data","activate_node","tool_id","html","on","latest_id","content_id","$add","$el","active_node","post_job_actions","k","display_pja_list","pja_list","vv","addlist","Continue","action_type","new_pja","remove_all","_workflowManager2","workflow_parameters","new_parameter_content","wf_parm_container","cc","wf_parm_box","matches","form_matches","arg_matches","cache","_moduleInitAjax","request_data","request","create_node","showAttributes","showForm","content","$container","get_pja_form","pja","scrollTop","children","isSubType","child","active_form_has_changes","$f","tmp","target","appendTo","o","prependTo","parameter_re","y","po","config_form","x","inputs","deepeach","terminal","match","concat","action_arguments","action_argument","element","inArray","push","substring","_workflowIcons2","form_type","_workflowForms2","form","emit","debug","prebuildNode","title_text","$title","scrollLeft","_workflowNode2","destroy","position","p","node_changed","redraw"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Workflow from \"mvc/workflow/workflow-manager\";\nimport WorkflowCanvas from \"mvc/workflow/workflow-canvas\";\nimport Node from \"mvc/workflow/workflow-node\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nimport FormWrappers from \"mvc/workflow/workflow-forms\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport async_save_text from \"utils/async-save-text\";\nimport * as Toastr from \"libs/toastr\";\nimport \"ui/editable-text\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = WorkflowIcons[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = (window.workflow_globals.app = this);\n        this.options = options;\n        this.urls = (options && options.urls) || {};\n        var close_editor = function() {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = function() {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\n                    \"Close workflow editor\",\n                    \"There are unsaved changes to your workflow which will be lost.\",\n                    {\n                        Cancel: hide_modal,\n                        \"Save Changes\": function() {\n                            save_current_workflow(null, do_close);\n                        }\n                    },\n                    {\n                        \"Don't Save\": do_close\n                    }\n                );\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = function(eventObj, success_callback) {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            Utils.request({\n                url: Galaxy.root + \"api/workflows/\" + self.options.id,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, function(i, v) {\n                            $(\"<li/>\")\n                                .text(v)\n                                .appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function(response) {\n                    window.show_modal(\n                        \"Saving workflow failed.\",\n                        response.err_msg,\n                        { Ok: hide_modal }\n                    );\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\")\n            .click(function() {\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup(function() {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if (this.value.length < 3) {\n                    reset_tool_search(false);\n                } else if (this.value != this.lastValue) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(function() {\n                        $.get(\n                            self.urls.tool_search,\n                            { q: q },\n                            function(data) {\n                                // input.removeClass(config.loadingClass);\n                                // Show live-search if results and search-term aren't empty\n                                $(\"#search-no-results\").hide();\n                                // Hide all tool sections.\n                                $(\".toolSectionWrapper\").hide();\n                                // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                $(\".toolSectionWrapper\")\n                                    .find(\".toolTitle\")\n                                    .hide();\n                                if (data.length != 0) {\n                                    // Map tool ids to element ids and join them.\n                                    var s = $.map(data, function(n, i) {\n                                        return \"link-\" + n;\n                                    });\n                                    // First pass to show matching tools and their parents.\n                                    $(s).each(function(index, id) {\n                                        // Add class to denote match.\n                                        $(\"[id='\" + id + \"']\")\n                                            .parent()\n                                            .addClass(\"search_match\");\n                                        $(\"[id='\" + id + \"']\")\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .show();\n                                    });\n                                    // Hide labels that have no visible children.\n                                    $(\".toolPanelLabel\").each(function() {\n                                        var this_label = $(this);\n                                        var next = this_label.next();\n                                        var no_visible_tools = true;\n                                        // Look through tools following label and, if none are visible, hide label.\n                                        while (\n                                            next.length !== 0 &&\n                                            next.hasClass(\"toolTitle\")\n                                        ) {\n                                            if (next.is(\":visible\")) {\n                                                no_visible_tools = false;\n                                                break;\n                                            } else {\n                                                next = next.next();\n                                            }\n                                        }\n                                        if (no_visible_tools) {\n                                            this_label.hide();\n                                        }\n                                    });\n                                } else {\n                                    $(\"#search-no-results\").show();\n                                }\n                                $(\"#search-spinner\").hide();\n                            },\n                            \"json\"\n                        );\n                    }, 400);\n                }\n                this.lastValue = this.value;\n            });\n\n        // Canvas overview management\n        this.canvas_manager = window.workflow_globals.canvas_manager = new WorkflowCanvas(\n            this,\n            $(\"#canvas-viewport\"),\n            $(\"#overview\")\n        );\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse(\n            $.ajax({\n                url: Galaxy.root + \"api/datatypes\",\n                async: false\n            }).responseText\n        );\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse(\n            $.ajax({\n                url: Galaxy.root + \"api/datatypes/mapping\",\n                async: false\n            }).responseText\n        );\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, function(step, step_id) {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += \"<li>\" + step.errors + \"</li>\";\n                    }\n                    _.each(data.upgrade_messages[step_id], function(m) {\n                        details += \"<li>\" + m + \"</li>\";\n                    });\n                    if (details) {\n                        upgrade_message +=\n                            \"<li>Step \" +\n                            (parseInt(step_id, 10) + 1) +\n                            \": \" +\n                            self.workflow.nodes[step_id].name +\n                            \"<ul>\" +\n                            details +\n                            \"</ul></li>\";\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Issues loading this workflow\",\n                        \"Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>\" +\n                            upgrade_message +\n                            \"</ul></p>\",\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu &&\n            make_popupmenu($(\"#workflow-options-button\"), {\n                Save: save_current_workflow,\n                \"Save As\": workflow_save_as,\n                Run: function() {\n                    window.location =\n                        Galaxy.root + \"workflow/run?id=\" + self.options.id;\n                },\n                \"Edit Attributes\": function() {\n                    self.workflow.clear_active_node();\n                },\n                \"Auto Re-layout\": layout_editor,\n                Close: close_editor\n            });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $(\n                '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                    '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n            );\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function() {\n                    var rename_name =\n                        $(\"#workflow_rename\").val().length > 0\n                            ? $(\"#workflow_rename\").val()\n                            : \"SavedAs_\" + self.workflow.name;\n                    var rename_annotation =\n                        $(\"#wf_annotation\").val().length > 0\n                            ? $(\"#wf_annotation\").val()\n                            : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function() {\n                                return JSON.stringify(\n                                    self.workflow.to_simple()\n                                );\n                            }\n                        }\n                    })\n                        .done(function(id) {\n                            window.onbeforeunload = undefined;\n                            window.location =\n                                Galaxy.root + \"workflow/editor?id=\" + id;\n                            hide_modal();\n                        })\n                        .fail(function() {\n                            hide_modal();\n                            alert(\n                                \"Saving this workflow failed. Please contact this site's administrator.\"\n                            );\n                        });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content +=\n                        \"<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step \" +\n                        node.id +\n                        \" - \" +\n                        node.name +\n                        \"</div>\";\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content +=\n                                \"<p>\" +\n                                output.name +\n                                \"<input type='checkbox' name='\" +\n                                node.id +\n                                \"|\" +\n                                output.name +\n                                \"' checked /></p>\";\n                        } else {\n                            new_content +=\n                                \"<p>\" +\n                                output.name +\n                                \"<input type='checkbox' name='\" +\n                                node.id +\n                                \"|\" +\n                                output.name +\n                                \"' /></p>\";\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function() {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(\n                op.width() - (d.offsetX - opo.left),\n                op.height() - (d.offsetY - opo.top)\n            );\n            $.jStorage.set(\"overview-size\", new_size + \"px\");\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(function() {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = function() {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 &&\n            $(\"#left\")\n                .find(\".toolMenu\")\n                .append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function() {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(function() {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        async_save_text(\n            \"workflow-name\",\n            \"workflow-name\",\n            self.urls.rename_async,\n            \"new_name\"\n        );\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(function() {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        async_save_text(\n            \"workflow-annotation\",\n            \"workflow-annotation\",\n            self.urls.annotate_async,\n            \"new_annotation\",\n            25,\n            true,\n            4\n        );\n    },\n\n    _buildToolPanelWorkflows: function() {\n        var self = this;\n        var $section = $(\n            '<div class=\"toolSectionWrapper\">' +\n                '<div class=\"toolSectionTitle\">' +\n                '<a href=\"#\"><span>Workflows</span></a>' +\n                \"</div>\" +\n                '<div class=\"toolSectionBody\">' +\n                '<div class=\"toolSectionBg\"/>' +\n                \"</div>\" +\n                \"</div>\"\n        );\n        _.each(this.options.workflows, function(workflow) {\n            if (workflow.id !== self.options.id) {\n                var copy = new Ui.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: \"Copy and insert individual steps\",\n                    onclick: function() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: \"Warning\",\n                                body:\n                                    \"This will copy \" +\n                                    workflow.step_count +\n                                    \" new steps into your workflow.\",\n                                buttons: {\n                                    Cancel: function() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(\n                                            workflow.id,\n                                            workflow.name\n                                        );\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\")\n                    .attr(\"href\", \"#\")\n                    .html(workflow.name)\n                    .on(\"click\", function() {\n                        self.add_node_for_subworkflow(\n                            workflow.latest_id,\n                            workflow.name\n                        );\n                    });\n                $section.find(\".toolSectionBg\").append(\n                    $(\"<div/>\")\n                        .addClass(\"toolTitle\")\n                        .append($add)\n                        .append(copy.$el)\n                );\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, function(k, v) {\n                    upgrade_message +=\n                        \"<li>Step \" +\n                        (parseInt(k, 10) + 1) +\n                        \": \" +\n                        self.workflow.nodes[k].name +\n                        \"<ul>\";\n                    $.each(v, function(i, vv) {\n                        upgrade_message += \"<li>\" + vv + \"</li>\";\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Subworkflow embedded with changes\",\n                        \"Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>\" +\n                            upgrade_message +\n                            \"</ul>\",\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = window.workflow_globals.workflow = new Workflow(\n            this,\n            $(\"#canvas-container\")\n        );\n    },\n\n    scroll_to_nodes: function() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top, left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function(workflowId, options) {\n        $.ajax(\n            Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, _: \"true\" },\n                dataType: \"json\",\n                cache: false\n            })\n        );\n    },\n\n    _moduleInitAjax: function(node, request_data) {\n        var self = this;\n        Utils.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/workflows/build_module\",\n            data: request_data,\n            success: function(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    // This function preloads how to display known pja's.\n    display_pja: function(pja, node) {\n        // DBTODO SANITIZE INPUTS.\n        var self = this;\n        $(\"#pja_container\").append(get_pja_form(pja, node));\n        $(\n            \"#pja_container>.toolForm:last>.toolFormTitle>.buttons\"\n        ).click(function() {\n            var action_to_rem = $(this)\n                .closest(\".toolForm\", \".action_tag\")\n                .children(\".action_tag:first\")\n                .text();\n            $(this)\n                .closest(\".toolForm\")\n                .remove();\n            delete self.workflow.active_node.post_job_actions[action_to_rem];\n            self.workflow.active_form_has_changes = true;\n        });\n    },\n\n    display_pja_list: function() {\n        return pja_list;\n    },\n\n    display_file_list: function(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist +=\n                \"<option value='\" +\n                out_terminal +\n                \"'>\" +\n                out_terminal +\n                \"</option>\";\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    new_pja: function(action_type, target, node) {\n        if (node.post_job_actions === undefined) {\n            //New tool node, set up dict.\n            node.post_job_actions = {};\n        }\n        if (node.post_job_actions[action_type + target] === undefined) {\n            var new_pja = {};\n            new_pja.action_type = action_type;\n            new_pja.output_name = target;\n            node.post_job_actions[action_type + target] = null;\n            node.post_job_actions[action_type + target] = new_pja;\n            display_pja(new_pja, node);\n            this.workflow.active_form_has_changes = true;\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    showWorkflowParameters: function() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, function(k, node) {\n            if (node.config_form && node.config_form.inputs) {\n                Utils.deepeach(node.config_form.inputs, function(d) {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, function(k, pja) {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, function(\n                            k,\n                            action_argument\n                        ) {\n                            var arg_matches = action_argument.match(\n                                parameter_re\n                            );\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, function(k, element) {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, function(k, element) {\n                new_parameter_content +=\n                    \"<div>\" +\n                    element.substring(2, element.length - 1) +\n                    \"</div>\";\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = cls + \"-\" + node.id;\n        var $container = $(\"#\" + cls);\n        if (content && $container.find(\"#\" + id).length == 0) {\n            var $el = $('<div id=\"' + id + '\" class=\"' + cls + '\"/>');\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = WorkflowIcons[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new FormWrappers[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\n                    \"workflow-view::initialize()\",\n                    \"Node not found in workflow.\"\n                );\n            }\n        }\n        $(\".\" + cls).hide();\n        $container.find(\"#\" + id).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(\n            \"<div class='toolFormTitle unselectable'><span class='nodeTitle'>\" +\n                title_text +\n                \"</div></div>\"\n        );\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new Node(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp =\n            \"<div><img height='16' align='middle' src='\" +\n            Galaxy.root +\n            \"static/images/loading_small_white_bg.gif'/> loading tool info...</div>\";\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        buttons.append(\n            $(\"<div/>\")\n                .addClass(\"fa-icon-button fa fa-times\")\n                .click(function(e) {\n                    node.destroy();\n                })\n        );\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f\n            .bind(\"dragstart\", function() {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"dragend\", function() {\n                self.workflow.node_changed(this);\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            })\n            .bind(\"dragclickonly\", function() {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"drag\", function(e, d) {\n                // Move\n                var po = $(this)\n                        .offsetParent()\n                        .offset(),\n                    x = d.offsetX - po.left,\n                    y = d.offsetY - po.top;\n                $(this).css({ left: x, top: y });\n                // Redraw\n                $(this)\n                    .find(\".terminal\")\n                    .each(function() {\n                        this.terminal.redraw();\n                    });\n            });\n        return node;\n    }\n});\n"]}