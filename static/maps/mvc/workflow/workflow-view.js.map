{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["reset_tool_search","initValue","tool_menu_frame","$","contents","length","document","this","removeClass","Toastr","find","hide","show","each","attr","hasClass","val","add_node_icon","$to_el","nodeType","window","workflow_globals","iconStyle","$icon","addClass","initialize","options","show_overview","jStorage","set","css","_buildToolPanelWorkflows","_","workflows","app","urls","eventObj","success_callback","self","check_changes_in_active_form","before","has_changes","hide_modal","_utils2","default","url","Galaxy","id","close_editor","workflow","success","do_close","text","message","onbeforeunload","errlist","show_modal","i","v","Cancel","save_current_workflow","body","append","location","name","stored","show_message","errors","rectify_workflow_outputs","type","err_msg","Ok","click","select","keyup","showWorkflowParameters","lastValue","timer","error","response","setTimeout","get","tool_search","q","focus","data","s","map","n","index","parent","this_label","no_visible_tools","next","is","value","canvas_manager","_workflowCanvas2","reset","datatypes","JSON","parse","ajax","root","async","datatypes_mapping","responseText","ext_to_type","type_to_type","class_to_classes","fit_canvas_to_nodes","scroll_to_nodes","draw_overview","details","step_id","step","m","upgrade_message","nodes","make_popupmenu","Continue","workflow_save_as","beforeSubmit","layout_editor","Close","OK","alert","rename_name","rename_annotation","edit_workflow_outputs","clear_active_node","new_content","node_key","node","workflow_name","workflow_data","output","isWorkflowOutput","done","undefined","node_id","workflowNode","output_name","checked","Run","workflow_annotation","layout","workflow_index","search_input","overview_size","width","height","hide_overview","bind","e","d","op","offsetParent","opo","offset","new_size","Math","max","offsetX","left","offsetY","top","cls","tooltip","onclick","buttons","wrap","last_expanded","$add","add_node_for_subworkflow","$section","slideUp","slideDown","copy_into_workflow","_asyncSaveText2","annotate_async","cv","cc","copy","_uiMisc2","ButtonIcon","step_count","workflowId","title","modal","Copy","_moduleInitAjax","tool_id","latest_id","content_id","$el","_workflowLoadAjax","display_pja","from_simple","upgrade_messages","k","action_to_rem","closest","active_node","vv","display_pja_list","display_file_list","addlist","out_terminal","post_job_actions","new_pja","active_form_has_changes","_workflowManager2","parameter_re","wf_parm_box","new_parameter_content","pja","action_arguments","dataType","cache","request_data","request","inArray","workflow_parameters","init_field_data","update_field_data","activate_node","create_node","wf_parm_container","showForm","content","form_type","$container","get_pja_form","isSubType","child","prebuildNode","pja_list","$title","$f","scrollLeft","tmp","destroy","target","appendTo","o","action_type","position","p","matches","po","config_form","inputs","x","y","form_matches","match","concat","action_argument","arg_matches","element","push","substring","html","showAttributes","icon","_workflowIcons2","_workflowForms2","form","emit","debug","scrollTop","title_text","_workflowNode2","prependTo","node_changed","terminal","redraw"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Workflow from \"mvc/workflow/workflow-manager\";\nimport WorkflowCanvas from \"mvc/workflow/workflow-canvas\";\nimport Node from \"mvc/workflow/workflow-node\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nimport FormWrappers from \"mvc/workflow/workflow-forms\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport async_save_text from \"utils/async-save-text\";\nimport * as Toastr from \"libs/toastr\";\nimport \"ui/editable-text\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = WorkflowIcons[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = (window.workflow_globals.app = this);\n        this.options = options;\n        this.urls = (options && options.urls) || {};\n        var close_editor = () => {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = () => {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\n                    \"Close workflow editor\",\n                    \"There are unsaved changes to your workflow which will be lost.\",\n                    {\n                        Cancel: hide_modal,\n                        \"Save Changes\": function() {\n                            save_current_workflow(null, do_close);\n                        }\n                    },\n                    {\n                        \"Don't Save\": do_close\n                    }\n                );\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = (eventObj, success_callback) => {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            Utils.request({\n                url: Galaxy.root + \"api/workflows/\" + self.options.id,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, (i, v) => {\n                            $(\"<li/>\")\n                                .text(v)\n                                .appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function(response) {\n                    window.show_modal(\n                        \"Saving workflow failed.\",\n                        response.err_msg,\n                        { Ok: hide_modal }\n                    );\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\")\n            .click(function() {\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup(function() {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if (this.value.length < 3) {\n                    reset_tool_search(false);\n                } else if (this.value != this.lastValue) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(() => {\n                        $.get(\n                            self.urls.tool_search,\n                            { q: q },\n                            data => {\n                                // input.removeClass(config.loadingClass);\n                                // Show live-search if results and search-term aren't empty\n                                $(\"#search-no-results\").hide();\n                                // Hide all tool sections.\n                                $(\".toolSectionWrapper\").hide();\n                                // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                $(\".toolSectionWrapper\")\n                                    .find(\".toolTitle\")\n                                    .hide();\n                                if (data.length != 0) {\n                                    // Map tool ids to element ids and join them.\n                                    var s = $.map(data, (n, i) => \"link-\" + n);\n                                    // First pass to show matching tools and their parents.\n                                    $(s).each((index, id) => {\n                                        // Add class to denote match.\n                                        $(\"[id='\" + id + \"']\")\n                                            .parent()\n                                            .addClass(\"search_match\");\n                                        $(\"[id='\" + id + \"']\")\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .show();\n                                    });\n                                    // Hide labels that have no visible children.\n                                    $(\".toolPanelLabel\").each(function() {\n                                        var this_label = $(this);\n                                        var next = this_label.next();\n                                        var no_visible_tools = true;\n                                        // Look through tools following label and, if none are visible, hide label.\n                                        while (\n                                            next.length !== 0 &&\n                                            next.hasClass(\"toolTitle\")\n                                        ) {\n                                            if (next.is(\":visible\")) {\n                                                no_visible_tools = false;\n                                                break;\n                                            } else {\n                                                next = next.next();\n                                            }\n                                        }\n                                        if (no_visible_tools) {\n                                            this_label.hide();\n                                        }\n                                    });\n                                } else {\n                                    $(\"#search-no-results\").show();\n                                }\n                                $(\"#search-spinner\").hide();\n                            },\n                            \"json\"\n                        );\n                    }, 400);\n                }\n                this.lastValue = this.value;\n            });\n\n        // Canvas overview management\n        this.canvas_manager = window.workflow_globals.canvas_manager = new WorkflowCanvas(\n            this,\n            $(\"#canvas-viewport\"),\n            $(\"#overview\")\n        );\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse(\n            $.ajax({\n                url: Galaxy.root + \"api/datatypes\",\n                async: false\n            }).responseText\n        );\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse(\n            $.ajax({\n                url: Galaxy.root + \"api/datatypes/mapping\",\n                async: false\n            }).responseText\n        );\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, (step, step_id) => {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += \"<li>\" + step.errors + \"</li>\";\n                    }\n                    _.each(data.upgrade_messages[step_id], m => {\n                        details += \"<li>\" + m + \"</li>\";\n                    });\n                    if (details) {\n                        upgrade_message +=\n                            \"<li>Step \" +\n                            (parseInt(step_id, 10) + 1) +\n                            \": \" +\n                            self.workflow.nodes[step_id].name +\n                            \"<ul>\" +\n                            details +\n                            \"</ul></li>\";\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Issues loading this workflow\",\n                        \"Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>\" +\n                            upgrade_message +\n                            \"</ul></p>\",\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu &&\n            make_popupmenu($(\"#workflow-options-button\"), {\n                Save: save_current_workflow,\n                \"Save As\": workflow_save_as,\n                Run: function() {\n                    window.location =\n                        Galaxy.root + \"workflow/run?id=\" + self.options.id;\n                },\n                \"Edit Attributes\": function() {\n                    self.workflow.clear_active_node();\n                },\n                \"Auto Re-layout\": layout_editor,\n                Close: close_editor\n            });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $(\n                '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                    '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n            );\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function() {\n                    var rename_name =\n                        $(\"#workflow_rename\").val().length > 0\n                            ? $(\"#workflow_rename\").val()\n                            : \"SavedAs_\" + self.workflow.name;\n                    var rename_annotation =\n                        $(\"#wf_annotation\").val().length > 0\n                            ? $(\"#wf_annotation\").val()\n                            : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function() {\n                                return JSON.stringify(\n                                    self.workflow.to_simple()\n                                );\n                            }\n                        }\n                    })\n                        .done(id => {\n                            window.onbeforeunload = undefined;\n                            window.location =\n                                Galaxy.root + \"workflow/editor?id=\" + id;\n                            hide_modal();\n                        })\n                        .fail(() => {\n                            hide_modal();\n                            alert(\n                                \"Saving this workflow failed. Please contact this site's administrator.\"\n                            );\n                        });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content +=\n                        \"<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step \" +\n                        node.id +\n                        \" - \" +\n                        node.name +\n                        \"</div>\";\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content +=\n                                \"<p>\" +\n                                output.name +\n                                \"<input type='checkbox' name='\" +\n                                node.id +\n                                \"|\" +\n                                output.name +\n                                \"' checked /></p>\";\n                        } else {\n                            new_content +=\n                                \"<p>\" +\n                                output.name +\n                                \"<input type='checkbox' name='\" +\n                                node.id +\n                                \"|\" +\n                                output.name +\n                                \"' /></p>\";\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function() {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(\n                op.width() - (d.offsetX - opo.left),\n                op.height() - (d.offsetY - opo.top)\n            );\n            $.jStorage.set(\"overview-size\", new_size + \"px\");\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(() => {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = () => {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 &&\n            $(\"#left\")\n                .find(\".toolMenu\")\n                .append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function() {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(() => {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        async_save_text(\n            \"workflow-name\",\n            \"workflow-name\",\n            self.urls.rename_async,\n            \"new_name\"\n        );\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(() => {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        async_save_text(\n            \"workflow-annotation\",\n            \"workflow-annotation\",\n            self.urls.annotate_async,\n            \"new_annotation\",\n            25,\n            true,\n            4\n        );\n    },\n\n    _buildToolPanelWorkflows: function() {\n        var self = this;\n        var $section = $(\n            '<div class=\"toolSectionWrapper\">' +\n                '<div class=\"toolSectionTitle\">' +\n                '<a href=\"#\"><span>Workflows</span></a>' +\n                \"</div>\" +\n                '<div class=\"toolSectionBody\">' +\n                '<div class=\"toolSectionBg\"/>' +\n                \"</div>\" +\n                \"</div>\"\n        );\n        _.each(this.options.workflows, workflow => {\n            if (workflow.id !== self.options.id) {\n                var copy = new Ui.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: \"Copy and insert individual steps\",\n                    onclick: function() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: \"Warning\",\n                                body:\n                                    \"This will copy \" +\n                                    workflow.step_count +\n                                    \" new steps into your workflow.\",\n                                buttons: {\n                                    Cancel: function() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(\n                                            workflow.id,\n                                            workflow.name\n                                        );\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\")\n                    .attr(\"href\", \"#\")\n                    .html(workflow.name)\n                    .on(\"click\", () => {\n                        self.add_node_for_subworkflow(\n                            workflow.latest_id,\n                            workflow.name\n                        );\n                    });\n                $section.find(\".toolSectionBg\").append(\n                    $(\"<div/>\")\n                        .addClass(\"toolTitle\")\n                        .append($add)\n                        .append(copy.$el)\n                );\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, (k, v) => {\n                    upgrade_message +=\n                        \"<li>Step \" +\n                        (parseInt(k, 10) + 1) +\n                        \": \" +\n                        self.workflow.nodes[k].name +\n                        \"<ul>\";\n                    $.each(v, (i, vv) => {\n                        upgrade_message += \"<li>\" + vv + \"</li>\";\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Subworkflow embedded with changes\",\n                        \"Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>\" +\n                            upgrade_message +\n                            \"</ul>\",\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = window.workflow_globals.workflow = new Workflow(\n            this,\n            $(\"#canvas-container\")\n        );\n    },\n\n    scroll_to_nodes: function() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top;\n        var left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function(workflowId, options) {\n        $.ajax(\n            Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, _: \"true\" },\n                dataType: \"json\",\n                cache: false\n            })\n        );\n    },\n\n    _moduleInitAjax: function(node, request_data) {\n        var self = this;\n        Utils.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/workflows/build_module\",\n            data: request_data,\n            success: function(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    // This function preloads how to display known pja's.\n    display_pja: function(pja, node) {\n        // DBTODO SANITIZE INPUTS.\n        var self = this;\n        $(\"#pja_container\").append(get_pja_form(pja, node));\n        $(\n            \"#pja_container>.toolForm:last>.toolFormTitle>.buttons\"\n        ).click(function() {\n            var action_to_rem = $(this)\n                .closest(\".toolForm\", \".action_tag\")\n                .children(\".action_tag:first\")\n                .text();\n            $(this)\n                .closest(\".toolForm\")\n                .remove();\n            delete self.workflow.active_node.post_job_actions[action_to_rem];\n            self.workflow.active_form_has_changes = true;\n        });\n    },\n\n    display_pja_list: function() {\n        return pja_list;\n    },\n\n    display_file_list: function(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist +=\n                \"<option value='\" +\n                out_terminal +\n                \"'>\" +\n                out_terminal +\n                \"</option>\";\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    new_pja: function(action_type, target, node) {\n        if (node.post_job_actions === undefined) {\n            //New tool node, set up dict.\n            node.post_job_actions = {};\n        }\n        if (node.post_job_actions[action_type + target] === undefined) {\n            var new_pja = {};\n            new_pja.action_type = action_type;\n            new_pja.output_name = target;\n            node.post_job_actions[action_type + target] = null;\n            node.post_job_actions[action_type + target] = new_pja;\n            display_pja(new_pja, node);\n            this.workflow.active_form_has_changes = true;\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    showWorkflowParameters: function() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, (k, node) => {\n            if (node.config_form && node.config_form.inputs) {\n                Utils.deepeach(node.config_form.inputs, d => {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (k, pja) => {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, (k, action_argument) => {\n                            var arg_matches = action_argument.match(\n                                parameter_re\n                            );\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, (k, element) => {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, (k, element) => {\n                new_parameter_content +=\n                    \"<div>\" +\n                    element.substring(2, element.length - 1) +\n                    \"</div>\";\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = cls + \"-\" + node.id;\n        var $container = $(\"#\" + cls);\n        if (content && $container.find(\"#\" + id).length == 0) {\n            var $el = $('<div id=\"' + id + '\" class=\"' + cls + '\"/>');\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = WorkflowIcons[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new FormWrappers[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\n                    \"workflow-view::initialize()\",\n                    \"Node not found in workflow.\"\n                );\n            }\n        }\n        $(\".\" + cls).hide();\n        $container.find(\"#\" + id).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(\n            \"<div class='toolFormTitle unselectable'><span class='nodeTitle'>\" +\n                title_text +\n                \"</div></div>\"\n        );\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new Node(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp =\n            \"<div><img height='16' align='middle' src='\" +\n            Galaxy.root +\n            \"static/images/loading_small_white_bg.gif'/> loading tool info...</div>\";\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        buttons.append(\n            $(\"<div/>\")\n                .addClass(\"fa-icon-button fa fa-times\")\n                .click(e => {\n                    node.destroy();\n                })\n        );\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f\n            .bind(\"dragstart\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"dragend\", function() {\n                self.workflow.node_changed(this);\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            })\n            .bind(\"dragclickonly\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"drag\", function(e, d) {\n                // Move\n                var po = $(this)\n                    .offsetParent()\n                    .offset();\n\n                var x = d.offsetX - po.left;\n                var y = d.offsetY - po.top;\n                $(this).css({ left: x, top: y });\n                // Redraw\n                $(this)\n                    .find(\".terminal\")\n                    .each(function() {\n                        this.terminal.redraw();\n                    });\n            });\n        return node;\n    }\n});\n"]}