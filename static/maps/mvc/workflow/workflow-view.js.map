{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["define","tool_menu_frame","$","Utils","WorkflowIcons","FormWrappers","async_save_text","find","contents","length","search_input","this","removeClass","$to_el","hide","iconStyle","show","each","addClass","before","$icon","hasClass","Globals","app","close_editor","self","has_changes","window","document","save_current_workflow","nodeType","do_close","workflow","initialize","set","css","top","cc","left","width","hide_modal","options","success_callback","Ok","show_message","error","rectify_workflow_outputs","request","url","Galaxy","root","id","type","data","focus","to_simple","success","select","body","text","message","errors","errlist","value","i","v","reset_tool_search","appendTo","append","timer","name","clearTimeout","stored","showWorkflowParameters","setTimeout","urls","response","show_modal","s","click","keyup","no_visible_tools","next","lastValue","this_label","get","tool_search","q","map","n","index","parent","datatypes_mapping","ext_to_class_name","draw_overview","step_id","upgrade_messages","is","Run","clear_active_node","WorkflowCanvas","Close","reset","OK","JSON","parse","ajax","rename_annotation","workflow_annotation","workflow_data","async","responseText","type_to_type","class_to_classes","_workflowLoadAjax","Cancel","from_simple","fit_canvas_to_nodes","edit_workflow_outputs","new_content","_","node_key","nodes","node","step","output","output_terminals","ot_key","m","details","isWorkflowOutput","parseInt","output_name","checked","workflowNode","layout_editor","scroll_to_nodes","make_popupmenu","overview_size","Save As","opo","op","new_size","show_overview","jStorage","val","hide_overview","workflow_save_as","workflow_name","rename_name","stringify","onbeforeunload","location","workflows","fail","alert","height","layout","$section","canvas_manager","check_changes_in_active_form","undefined","Save Changes","Don't Save","workflow_index","workflowId","upgrade_message","bind","e","d","offsetParent","beforeSubmit","max","offsetX","offsetY","load_workflow","_moduleInitAjax","_buildToolPanelWorkflows","wrap","init_field_data","update_field_data","last_expanded","slideUp","slideDown","add_node_for_tool","create_node","add_node_for_subworkflow","annotate_async","display_pja","out_terminal","addlist","copy","Ui","ButtonIcon","icon","tooltip","onclick","action_type","post_job_actions","copy_into_workflow","title","target","step_count","active_form_has_changes","buttons","modal","Copy","$add","attr","form_matches","html","matches","latest_id","pja","arg_matches","workflow_parameters","new_parameter_content","k","wf_parm_container","vv","Continue","$container","content","$el","remove_all","Workflow","scrollTop","child","isSubType","cv","ext_to_type","prebuildNode","title_text","add_node_icon","$title","$f","Node","content_id","tmp","cache","destroy","request_data","o","p","activate_node","po","offset","y","add_node_for_module","get_pja_form","action_to_rem","closest","children","remove","active_node","display_pja_list","pja_list","display_file_list","new_pja","parameter_re","wf_parm_box","config_form","inputs","deepeach","match","concat","action_arguments","action_argument","element","inArray","push","substring","showAttributes","showForm","cls","datatypes","form_type","form","emit","debug","scrollLeft","position","prependTo","node_changed","x","terminal","redraw"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["define(\"mvc/workflow/workflow-globals\", {});\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/workflow/workflow-globals\",\n        \"mvc/workflow/workflow-manager\",\n        \"mvc/workflow/workflow-canvas\",\n        \"mvc/workflow/workflow-node\",\n        \"mvc/workflow/workflow-icons\",\n        \"mvc/workflow/workflow-forms\",\n        \"mvc/ui/ui-misc\",\n        \"utils/async-save-text\",\n        \"libs/toastr\",\n        \"ui/editable-text\"\n    ],\n    function(\n        Utils,\n        Globals,\n        Workflow,\n        WorkflowCanvas,\n        Node,\n        WorkflowIcons,\n        FormWrappers,\n        Ui,\n        async_save_text,\n        Toastr\n    ) {\n        // Reset tool search to start state.\n        function reset_tool_search(initValue) {\n            // Function may be called in top frame or in tool_menu_frame;\n            // in either case, get the tool menu frame.\n            var tool_menu_frame = $(\"#galaxy_tools\").contents();\n            if (tool_menu_frame.length === 0) {\n                tool_menu_frame = $(document);\n                // Remove classes that indicate searching is active.\n                $(this).removeClass(\"search_active\");\n                tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n                // Reset visibility of tools and labels.\n                tool_menu_frame.find(\".toolSectionBody\").hide();\n                tool_menu_frame.find(\".toolTitle\").show();\n                tool_menu_frame.find(\".toolPanelLabel\").show();\n                tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n                    if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                        // Default action.\n                        $(this).show();\n                    } else if ($(this).hasClass(\"user_pref_visible\")) {\n                        $(this).show();\n                    }\n                });\n                tool_menu_frame.find(\"#search-no-results\").hide();\n\n                // Reset search input.\n                tool_menu_frame.find(\"#search-spinner\").hide();\n                if (initValue) {\n                    var search_input = tool_menu_frame.find(\n                        \"#tool-search-query\"\n                    );\n                    search_input.val(\"search tools\");\n                }\n            }\n        }\n\n        function add_node_icon($to_el, nodeType) {\n            var iconStyle = WorkflowIcons[nodeType];\n            if (iconStyle) {\n                var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(\n                    iconStyle\n                );\n                $to_el.before($icon);\n            }\n        }\n\n        // create form view\n        return Backbone.View.extend({\n            initialize: function(options) {\n                var self = (Globals.app = this);\n                this.options = options;\n                this.urls = (options && options.urls) || {};\n                var close_editor = function() {\n                    self.workflow.check_changes_in_active_form();\n                    if (workflow && self.workflow.has_changes) {\n                        var do_close = function() {\n                            window.onbeforeunload = undefined;\n                            window.document.location = self.urls.workflow_index;\n                        };\n                        window.show_modal(\n                            \"Close workflow editor\",\n                            \"There are unsaved changes to your workflow which will be lost.\",\n                            {\n                                Cancel: hide_modal,\n                                \"Save Changes\": function() {\n                                    save_current_workflow(null, do_close);\n                                }\n                            },\n                            {\n                                \"Don't Save\": do_close\n                            }\n                        );\n                    } else {\n                        window.document.location = self.urls.workflow_index;\n                    }\n                };\n                var save_current_workflow = function(\n                    eventObj,\n                    success_callback\n                ) {\n                    show_message(\"Saving workflow\", \"progress\");\n                    self.workflow.check_changes_in_active_form();\n                    if (!self.workflow.has_changes) {\n                        hide_modal();\n                        if (success_callback) {\n                            success_callback();\n                        }\n                        return;\n                    }\n                    self.workflow.rectify_workflow_outputs();\n                    Utils.request({\n                        url: Galaxy.root + \"api/workflows/\" + self.options.id,\n                        type: \"PUT\",\n                        data: { workflow: self.workflow.to_simple() },\n                        success: function(data) {\n                            var body = $(\"<div/>\").text(data.message);\n                            if (data.errors) {\n                                body.addClass(\"warningmark\");\n                                var errlist = $(\"<ul/>\");\n                                $.each(data.errors, function(i, v) {\n                                    $(\"<li/>\")\n                                        .text(v)\n                                        .appendTo(errlist);\n                                });\n                                body.append(errlist);\n                            } else {\n                                body.addClass(\"donemark\");\n                            }\n                            self.workflow.name = data.name;\n                            self.workflow.has_changes = false;\n                            self.workflow.stored = true;\n                            self.showWorkflowParameters();\n                            if (data.errors) {\n                                window.show_modal(\"Saving workflow\", body, {\n                                    Ok: hide_modal\n                                });\n                            } else {\n                                success_callback && success_callback();\n                                hide_modal();\n                            }\n                        },\n                        error: function(response) {\n                            window.show_modal(\n                                \"Saving workflow failed.\",\n                                response.err_msg,\n                                { Ok: hide_modal }\n                            );\n                        }\n                    });\n                };\n\n                // Init searching.\n                $(\"#tool-search-query\")\n                    .click(function() {\n                        $(this).focus();\n                        $(this).select();\n                    })\n                    .keyup(function() {\n                        // Remove italics.\n                        $(this).css(\"font-style\", \"normal\");\n                        // Don't update if same value as last time\n                        if (this.value.length < 3) {\n                            reset_tool_search(false);\n                        } else if (this.value != this.lastValue) {\n                            // Add class to denote that searching is active.\n                            $(this).addClass(\"search_active\");\n                            // input.addClass(config.loadingClass);\n                            // Add '*' to facilitate partial matching.\n                            var q = this.value;\n                            // Stop previous ajax-request\n                            if (this.timer) {\n                                clearTimeout(this.timer);\n                            }\n                            // Start a new ajax-request in X ms\n                            $(\"#search-spinner\").show();\n                            this.timer = setTimeout(function() {\n                                $.get(\n                                    self.urls.tool_search,\n                                    { q: q },\n                                    function(data) {\n                                        // input.removeClass(config.loadingClass);\n                                        // Show live-search if results and search-term aren't empty\n                                        $(\"#search-no-results\").hide();\n                                        // Hide all tool sections.\n                                        $(\".toolSectionWrapper\").hide();\n                                        // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                        $(\".toolSectionWrapper\")\n                                            .find(\".toolTitle\")\n                                            .hide();\n                                        if (data.length != 0) {\n                                            // Map tool ids to element ids and join them.\n                                            var s = $.map(data, function(n, i) {\n                                                return \"link-\" + n;\n                                            });\n                                            // First pass to show matching tools and their parents.\n                                            $(s).each(function(index, id) {\n                                                // Add class to denote match.\n                                                $(\"[id='\" + id + \"']\")\n                                                    .parent()\n                                                    .addClass(\"search_match\");\n                                                $(\"[id='\" + id + \"']\")\n                                                    .parent()\n                                                    .show()\n                                                    .parent()\n                                                    .parent()\n                                                    .show()\n                                                    .parent()\n                                                    .show();\n                                            });\n                                            // Hide labels that have no visible children.\n                                            $(\n                                                \".toolPanelLabel\"\n                                            ).each(function() {\n                                                var this_label = $(this);\n                                                var next = this_label.next();\n                                                var no_visible_tools = true;\n                                                // Look through tools following label and, if none are visible, hide label.\n                                                while (\n                                                    next.length !== 0 &&\n                                                    next.hasClass(\"toolTitle\")\n                                                ) {\n                                                    if (next.is(\":visible\")) {\n                                                        no_visible_tools = false;\n                                                        break;\n                                                    } else {\n                                                        next = next.next();\n                                                    }\n                                                }\n                                                if (no_visible_tools) {\n                                                    this_label.hide();\n                                                }\n                                            });\n                                        } else {\n                                            $(\"#search-no-results\").show();\n                                        }\n                                        $(\"#search-spinner\").hide();\n                                    },\n                                    \"json\"\n                                );\n                            }, 400);\n                        }\n                        this.lastValue = this.value;\n                    });\n\n                // Canvas overview management\n                this.canvas_manager = Globals.canvas_manager = new WorkflowCanvas(\n                    this,\n                    $(\"#canvas-viewport\"),\n                    $(\"#overview\")\n                );\n\n                // Initialize workflow state\n                this.reset();\n\n                // get available datatypes for post job action options\n                this.datatypes = JSON.parse(\n                    $.ajax({\n                        url: Galaxy.root + \"api/datatypes\",\n                        async: false\n                    }).responseText\n                );\n\n                // get datatype mapping options\n                this.datatypes_mapping = JSON.parse(\n                    $.ajax({\n                        url: Galaxy.root + \"api/datatypes/mapping\",\n                        async: false\n                    }).responseText\n                );\n\n                // set mapping sub lists\n                this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n                this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n                // Load workflow definition\n                this._workflowLoadAjax(self.options.id, {\n                    success: function(data) {\n                        self.reset();\n                        self.workflow.from_simple(data, true);\n                        self.workflow.has_changes = false;\n                        self.workflow.fit_canvas_to_nodes();\n                        self.scroll_to_nodes();\n                        self.canvas_manager.draw_overview();\n                        // Determine if any parameters were 'upgraded' and provide message\n                        var upgrade_message = \"\";\n                        _.each(data.steps, function(step, step_id) {\n                            var details = \"\";\n                            if (step.errors) {\n                                details += \"<li>\" + step.errors + \"</li>\";\n                            }\n                            _.each(data.upgrade_messages[step_id], function(m) {\n                                details += \"<li>\" + m + \"</li>\";\n                            });\n                            if (details) {\n                                upgrade_message +=\n                                    \"<li>Step \" +\n                                    (parseInt(step_id, 10) + 1) +\n                                    \": \" +\n                                    self.workflow.nodes[step_id].name +\n                                    \"<ul>\" +\n                                    details +\n                                    \"</ul></li>\";\n                            }\n                        });\n                        if (upgrade_message) {\n                            window.show_modal(\n                                \"Issues loading this workflow\",\n                                \"Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>\" +\n                                    upgrade_message +\n                                    \"</ul></p>\",\n                                { Continue: hide_modal }\n                            );\n                        } else {\n                            hide_modal();\n                        }\n                        self.showWorkflowParameters();\n                    },\n                    beforeSubmit: function(data) {\n                        show_message(\"Loading workflow\", \"progress\");\n                    }\n                });\n\n                window.make_popupmenu &&\n                    make_popupmenu($(\"#workflow-options-button\"), {\n                        Save: save_current_workflow,\n                        \"Save As\": workflow_save_as,\n                        Run: function() {\n                            window.location =\n                                Galaxy.root +\n                                \"workflow/run?id=\" +\n                                self.options.id;\n                        },\n                        \"Edit Attributes\": function() {\n                            self.workflow.clear_active_node();\n                        },\n                        \"Auto Re-layout\": layout_editor,\n                        Close: close_editor\n                    });\n\n                /******************************************** Issue 3000*/\n                function workflow_save_as() {\n                    var body = $(\n                        '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                            '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n                    );\n                    window.show_modal(\"Save As a New Workflow\", body, {\n                        OK: function() {\n                            var rename_name =\n                                $(\"#workflow_rename\").val().length > 0\n                                    ? $(\"#workflow_rename\").val()\n                                    : \"SavedAs_\" + self.workflow.name;\n                            var rename_annotation =\n                                $(\"#wf_annotation\").val().length > 0\n                                    ? $(\"#wf_annotation\").val()\n                                    : \"\";\n                            $.ajax({\n                                url: self.urls.workflow_save_as,\n                                type: \"POST\",\n                                data: {\n                                    workflow_name: rename_name,\n                                    workflow_annotation: rename_annotation,\n                                    workflow_data: function() {\n                                        return JSON.stringify(\n                                            self.workflow.to_simple()\n                                        );\n                                    }\n                                }\n                            })\n                                .done(function(id) {\n                                    window.onbeforeunload = undefined;\n                                    window.location =\n                                        Galaxy.root +\n                                        \"workflow/editor?id=\" +\n                                        id;\n                                    hide_modal();\n                                })\n                                .fail(function() {\n                                    hide_modal();\n                                    alert(\n                                        \"Saving this workflow failed. Please contact this site's administrator.\"\n                                    );\n                                });\n                        },\n                        Cancel: hide_modal\n                    });\n                }\n\n                function edit_workflow_outputs() {\n                    self.workflow.clear_active_node();\n                    $(\".right-content\").hide();\n                    var new_content = \"\";\n                    for (var node_key in self.workflow.nodes) {\n                        var node = self.workflow.nodes[node_key];\n                        if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                            new_content +=\n                                \"<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step \" +\n                                node.id +\n                                \" - \" +\n                                node.name +\n                                \"</div>\";\n                            for (var ot_key in node.output_terminals) {\n                                var output = node.output_terminals[ot_key];\n                                if (node.isWorkflowOutput(output.name)) {\n                                    new_content +=\n                                        \"<p>\" +\n                                        output.name +\n                                        \"<input type='checkbox' name='\" +\n                                        node.id +\n                                        \"|\" +\n                                        output.name +\n                                        \"' checked /></p>\";\n                                } else {\n                                    new_content +=\n                                        \"<p>\" +\n                                        output.name +\n                                        \"<input type='checkbox' name='\" +\n                                        node.id +\n                                        \"|\" +\n                                        output.name +\n                                        \"' /></p>\";\n                                }\n                            }\n                            new_content += \"</div>\";\n                        }\n                    }\n                    $(\"#output-fill-area\").html(new_content);\n                    $(\"#output-fill-area input\").bind(\"click\", function() {\n                        var node_id = this.name.split(\"|\")[0];\n                        var workflowNode = this.workflow.nodes[node_id];\n                        var output_name = this.name.split(\"|\")[1];\n                        if (this.checked) {\n                            workflowNode.addWorkflowOutput(output_name);\n                        } else {\n                            workflowNode.removeWorkflowOutput(output_name);\n                        }\n                        self.workflow.has_changes = true;\n                    });\n                    $(\"#workflow-output-area\").show();\n                }\n\n                function layout_editor() {\n                    self.workflow.layout();\n                    self.workflow.fit_canvas_to_nodes();\n                    self.scroll_to_nodes();\n                    self.canvas_manager.draw_overview();\n                }\n\n                // On load, set the size to the pref stored in local storage if it exists\n                var overview_size = $.jStorage.get(\"overview-size\");\n                if (overview_size !== undefined) {\n                    $(\"#overview-border\").css({\n                        width: overview_size,\n                        height: overview_size\n                    });\n                }\n\n                // Show viewport on load unless pref says it's off\n                if ($.jStorage.get(\"overview-off\")) {\n                    hide_overview();\n                } else {\n                    show_overview();\n                }\n\n                // Stores the size of the overview into local storage when it's resized\n                $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n                    var op = $(this).offsetParent();\n                    var opo = op.offset();\n                    var new_size = Math.max(\n                        op.width() - (d.offsetX - opo.left),\n                        op.height() - (d.offsetY - opo.top)\n                    );\n                    $.jStorage.set(\"overview-size\", new_size + \"px\");\n                });\n\n                function show_overview() {\n                    $.jStorage.set(\"overview-off\", false);\n                    $(\"#overview-border\").css(\"right\", \"0px\");\n                    $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n                }\n\n                function hide_overview() {\n                    $.jStorage.set(\"overview-off\", true);\n                    $(\"#overview-border\").css(\"right\", \"20000px\");\n                    $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n                }\n\n                // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n                $(\"#close-viewport\").click(function() {\n                    if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                        hide_overview();\n                    } else {\n                        show_overview();\n                    }\n                });\n\n                // Unload handler\n                window.onbeforeunload = function() {\n                    if (workflow && self.workflow.has_changes) {\n                        return \"There are unsaved changes to your workflow which will be lost.\";\n                    }\n                };\n\n                this.options.workflows.length > 0 &&\n                    $(\"#left\")\n                        .find(\".toolMenu\")\n                        .append(this._buildToolPanelWorkflows());\n\n                // Tool menu\n                $(\"div.toolSectionBody\").hide();\n                $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n                var last_expanded = null;\n                $(\"div.toolSectionTitle\").each(function() {\n                    var body = $(this).next(\"div.toolSectionBody\");\n                    $(this).click(function() {\n                        if (body.is(\":hidden\")) {\n                            if (last_expanded) last_expanded.slideUp(\"fast\");\n                            last_expanded = body;\n                            body.slideDown(\"fast\");\n                        } else {\n                            body.slideUp(\"fast\");\n                            last_expanded = null;\n                        }\n                    });\n                });\n\n                // Rename async.\n                async_save_text(\n                    \"workflow-name\",\n                    \"workflow-name\",\n                    self.urls.rename_async,\n                    \"new_name\"\n                );\n\n                // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n                $(\"#workflow-tag\").click(function() {\n                    $(\".tag-area\").click();\n                    return false;\n                });\n                // Annotate async.\n                async_save_text(\n                    \"workflow-annotation\",\n                    \"workflow-annotation\",\n                    self.urls.annotate_async,\n                    \"new_annotation\",\n                    25,\n                    true,\n                    4\n                );\n            },\n\n            _buildToolPanelWorkflows: function() {\n                var self = this;\n                var $section = $(\n                    '<div class=\"toolSectionWrapper\">' +\n                        '<div class=\"toolSectionTitle\">' +\n                        '<a href=\"#\"><span>Workflows</span></a>' +\n                        \"</div>\" +\n                        '<div class=\"toolSectionBody\">' +\n                        '<div class=\"toolSectionBg\"/>' +\n                        \"</div>\" +\n                        \"</div>\"\n                );\n                _.each(this.options.workflows, function(workflow) {\n                    if (workflow.id !== self.options.id) {\n                        var copy = new Ui.ButtonIcon({\n                            icon: \"fa fa-copy\",\n                            cls: \"ui-button-icon-plain\",\n                            tooltip: \"Copy and insert individual steps\",\n                            onclick: function() {\n                                if (workflow.step_count < 2) {\n                                    self.copy_into_workflow(\n                                        workflow.id,\n                                        workflow.name\n                                    );\n                                } else {\n                                    // don't ruin the workflow by adding 50 steps unprompted.\n                                    Galaxy.modal.show({\n                                        title: \"Warning\",\n                                        body:\n                                            \"This will copy \" +\n                                            workflow.step_count +\n                                            \" new steps into your workflow.\",\n                                        buttons: {\n                                            Cancel: function() {\n                                                Galaxy.modal.hide();\n                                            },\n                                            Copy: function() {\n                                                Galaxy.modal.hide();\n                                                self.copy_into_workflow(\n                                                    workflow.id,\n                                                    workflow.name\n                                                );\n                                            }\n                                        }\n                                    });\n                                }\n                            }\n                        });\n                        var $add = $(\"<a/>\")\n                            .attr(\"href\", \"#\")\n                            .html(workflow.name)\n                            .on(\"click\", function() {\n                                self.add_node_for_subworkflow(\n                                    workflow.latest_id,\n                                    workflow.name\n                                );\n                            });\n                        $section.find(\".toolSectionBg\").append(\n                            $(\"<div/>\")\n                                .addClass(\"toolTitle\")\n                                .append($add)\n                                .append(copy.$el)\n                        );\n                    }\n                });\n                return $section;\n            },\n\n            copy_into_workflow: function(workflowId) {\n                // Load workflow definition\n                var self = this;\n                this._workflowLoadAjax(workflowId, {\n                    success: function(data) {\n                        self.workflow.from_simple(data, false);\n                        // Determine if any parameters were 'upgraded' and provide message\n                        var upgrade_message = \"\";\n                        $.each(data.upgrade_messages, function(k, v) {\n                            upgrade_message +=\n                                \"<li>Step \" +\n                                (parseInt(k, 10) + 1) +\n                                \": \" +\n                                self.workflow.nodes[k].name +\n                                \"<ul>\";\n                            $.each(v, function(i, vv) {\n                                upgrade_message += \"<li>\" + vv + \"</li>\";\n                            });\n                            upgrade_message += \"</ul></li>\";\n                        });\n                        if (upgrade_message) {\n                            window.show_modal(\n                                \"Subworkflow embedded with changes\",\n                                \"Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>\" +\n                                    upgrade_message +\n                                    \"</ul>\",\n                                { Continue: hide_modal }\n                            );\n                        } else {\n                            hide_modal();\n                        }\n                    },\n                    beforeSubmit: function(data) {\n                        show_message(\"Importing workflow\", \"progress\");\n                    }\n                });\n            },\n\n            // Global state for the whole workflow\n            reset: function() {\n                this.workflow && this.workflow.remove_all();\n                this.workflow = Globals.workflow = new Workflow(\n                    this,\n                    $(\"#canvas-container\")\n                );\n            },\n\n            scroll_to_nodes: function() {\n                var cv = $(\"#canvas-viewport\");\n                var cc = $(\"#canvas-container\");\n                var top, left;\n                if (cc.width() < cv.width()) {\n                    left = (cv.width() - cc.width()) / 2;\n                } else {\n                    left = 0;\n                }\n                if (cc.height() < cv.height()) {\n                    top = (cv.height() - cc.height()) / 2;\n                } else {\n                    top = 0;\n                }\n                cc.css({ left: left, top: top });\n            },\n\n            _workflowLoadAjax: function(workflowId, options) {\n                $.ajax(\n                    Utils.merge(options, {\n                        url: this.urls.load_workflow,\n                        data: { id: workflowId, _: \"true\" },\n                        dataType: \"json\",\n                        cache: false\n                    })\n                );\n            },\n\n            _moduleInitAjax: function(node, request_data) {\n                var self = this;\n                Utils.request({\n                    type: \"POST\",\n                    url: Galaxy.root + \"api/workflows/build_module\",\n                    data: request_data,\n                    success: function(data) {\n                        node.init_field_data(data);\n                        node.update_field_data(data);\n                        self.workflow.activate_node(node);\n                    }\n                });\n            },\n\n            // Add a new step to the workflow by tool id\n            add_node_for_tool: function(id, title) {\n                var node = this.workflow.create_node(\"tool\", title, id);\n                this._moduleInitAjax(node, {\n                    type: \"tool\",\n                    tool_id: id,\n                    _: \"true\"\n                });\n            },\n\n            // Add a new step to the workflow by tool id\n            add_node_for_subworkflow: function(id, title) {\n                var node = this.workflow.create_node(\"subworkflow\", title, id);\n                this._moduleInitAjax(node, {\n                    type: \"subworkflow\",\n                    content_id: id,\n                    _: \"true\"\n                });\n            },\n\n            add_node_for_module: function(type, title) {\n                var node = this.workflow.create_node(type, title);\n                this._moduleInitAjax(node, { type: type, _: \"true\" });\n            },\n\n            // This function preloads how to display known pja's.\n            display_pja: function(pja, node) {\n                // DBTODO SANITIZE INPUTS.\n                var self = this;\n                $(\"#pja_container\").append(get_pja_form(pja, node));\n                $(\n                    \"#pja_container>.toolForm:last>.toolFormTitle>.buttons\"\n                ).click(function() {\n                    var action_to_rem = $(this)\n                        .closest(\".toolForm\", \".action_tag\")\n                        .children(\".action_tag:first\")\n                        .text();\n                    $(this)\n                        .closest(\".toolForm\")\n                        .remove();\n                    delete self\n                        .workflow.active_node.post_job_actions[action_to_rem];\n                    self.workflow.active_form_has_changes = true;\n                });\n            },\n\n            display_pja_list: function() {\n                return pja_list;\n            },\n\n            display_file_list: function(node) {\n                var addlist =\n                    \"<select id='node_data_list' name='node_data_list'>\";\n                for (var out_terminal in node.output_terminals) {\n                    addlist +=\n                        \"<option value='\" +\n                        out_terminal +\n                        \"'>\" +\n                        out_terminal +\n                        \"</option>\";\n                }\n                addlist += \"</select>\";\n                return addlist;\n            },\n\n            new_pja: function(action_type, target, node) {\n                if (node.post_job_actions === undefined) {\n                    //New tool node, set up dict.\n                    node.post_job_actions = {};\n                }\n                if (node.post_job_actions[action_type + target] === undefined) {\n                    var new_pja = {};\n                    new_pja.action_type = action_type;\n                    new_pja.output_name = target;\n                    node.post_job_actions[action_type + target] = null;\n                    node.post_job_actions[action_type + target] = new_pja;\n                    display_pja(new_pja, node);\n                    this.workflow.active_form_has_changes = true;\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n\n            showWorkflowParameters: function() {\n                var parameter_re = /\\$\\{.+?\\}/g;\n                var workflow_parameters = [];\n                var wf_parm_container = $(\"#workflow-parameters-container\");\n                var wf_parm_box = $(\"#workflow-parameters-box\");\n                var new_parameter_content = \"\";\n                var matches = [];\n                $.each(this.workflow.nodes, function(k, node) {\n                    if (node.config_form && node.config_form.inputs) {\n                        Utils.deepeach(node.config_form.inputs, function(d) {\n                            if (typeof d.value == \"string\") {\n                                var form_matches = d.value.match(parameter_re);\n                                if (form_matches) {\n                                    matches = matches.concat(form_matches);\n                                }\n                            }\n                        });\n                    }\n                    if (node.post_job_actions) {\n                        $.each(node.post_job_actions, function(k, pja) {\n                            if (pja.action_arguments) {\n                                $.each(pja.action_arguments, function(\n                                    k,\n                                    action_argument\n                                ) {\n                                    var arg_matches = action_argument.match(\n                                        parameter_re\n                                    );\n                                    if (arg_matches) {\n                                        matches = matches.concat(arg_matches);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                    if (matches) {\n                        $.each(matches, function(k, element) {\n                            if (\n                                $.inArray(element, workflow_parameters) === -1\n                            ) {\n                                workflow_parameters.push(element);\n                            }\n                        });\n                    }\n                });\n                if (workflow_parameters && workflow_parameters.length !== 0) {\n                    $.each(workflow_parameters, function(k, element) {\n                        new_parameter_content +=\n                            \"<div>\" +\n                            element.substring(2, element.length - 1) +\n                            \"</div>\";\n                    });\n                    wf_parm_container.html(new_parameter_content);\n                    wf_parm_box.show();\n                } else {\n                    wf_parm_container.html(new_parameter_content);\n                    wf_parm_box.hide();\n                }\n            },\n\n            showAttributes: function() {\n                $(\".right-content\").hide();\n                $(\"#edit-attributes\").show();\n            },\n\n            showForm: function(content, node) {\n                var self = this;\n                var cls = \"right-content\";\n                var id = cls + \"-\" + node.id;\n                var $container = $(\"#\" + cls);\n                if (content && $container.find(\"#\" + id).length == 0) {\n                    var $el = $('<div id=\"' + id + '\" class=\"' + cls + '\"/>');\n                    content.node = node;\n                    content.workflow = this.workflow;\n                    content.datatypes = this.datatypes;\n                    content.icon = WorkflowIcons[node.type];\n                    content.cls = \"ui-portlet-narrow\";\n                    if (node) {\n                        var form_type =\n                            node.type == \"tool\" ? \"Tool\" : \"Default\";\n                        $el.append(\n                            new FormWrappers[form_type](content).form.$el\n                        );\n                        $container.append($el);\n                    } else {\n                        Galaxy.emit.debug(\n                            \"workflow-view::initialize()\",\n                            \"Node not found in workflow.\"\n                        );\n                    }\n                }\n                $(\".\" + cls).hide();\n                $container.find(\"#\" + id).show();\n                $container.show();\n                $container.scrollTop();\n            },\n\n            isSubType: function(child, parent) {\n                child = this.ext_to_type[child];\n                parent = this.ext_to_type[parent];\n                return (\n                    this.type_to_type[child] &&\n                    parent in this.type_to_type[child]\n                );\n            },\n\n            prebuildNode: function(type, title_text, content_id) {\n                var self = this;\n                var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n                var $title = $(\n                    \"<div class='toolFormTitle unselectable'><span class='nodeTitle'>\" +\n                        title_text +\n                        \"</div></div>\"\n                );\n                add_node_icon($title.find(\".nodeTitle\"), type);\n                $f.append($title);\n                $f.css(\"left\", $(window).scrollLeft() + 20);\n                $f.css(\"top\", $(window).scrollTop() + 20);\n                $f.append($(\"<div class='toolFormBody'></div>\"));\n                var node = new Node(this, { element: $f });\n                node.type = type;\n                node.content_id = content_id;\n                var tmp =\n                    \"<div><img height='16' align='middle' src='\" +\n                    Galaxy.root +\n                    \"static/images/loading_small_white_bg.gif'/> loading tool info...</div>\";\n                $f.find(\".toolFormBody\").append(tmp);\n                // Fix width to computed width\n                // Now add floats\n                var buttons = $(\n                    \"<div class='buttons' style='float: right;'></div>\"\n                );\n                buttons.append(\n                    $(\"<div/>\")\n                        .addClass(\"fa-icon-button fa fa-times\")\n                        .click(function(e) {\n                            node.destroy();\n                        })\n                );\n                // Place inside container\n                $f.appendTo(\"#canvas-container\");\n                // Position in container\n                var o = $(\"#canvas-container\").position();\n                var p = $(\"#canvas-container\").parent();\n                var width = $f.width();\n                var height = $f.height();\n                $f.css({\n                    left: -o.left + p.width() / 2 - width / 2,\n                    top: -o.top + p.height() / 2 - height / 2\n                });\n                buttons.prependTo($f.find(\".toolFormTitle\"));\n                width += buttons.width() + 10;\n                $f.css(\"width\", width);\n                $f\n                    .bind(\"dragstart\", function() {\n                        self.workflow.activate_node(node);\n                    })\n                    .bind(\"dragend\", function() {\n                        self.workflow.node_changed(this);\n                        self.workflow.fit_canvas_to_nodes();\n                        self.canvas_manager.draw_overview();\n                    })\n                    .bind(\"dragclickonly\", function() {\n                        self.workflow.activate_node(node);\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        // Move\n                        var po = $(this)\n                                .offsetParent()\n                                .offset(),\n                            x = d.offsetX - po.left,\n                            y = d.offsetY - po.top;\n                        $(this).css({ left: x, top: y });\n                        // Redraw\n                        $(this)\n                            .find(\".terminal\")\n                            .each(function() {\n                                this.terminal.redraw();\n                            });\n                    });\n                return node;\n            }\n        });\n    }\n);\n"]}