{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["reset_tool_search","initValue","tool_menu_frame","$","contents","length","document","this","removeClass","Toastr","find","hide","show","each","attr","hasClass","val","add_node_icon","$to_el","nodeType","window","workflow_globals","iconStyle","$icon","addClass","initialize","options","show_overview","jStorage","workflows","css","last_expanded","set","next","app","urls","eventObj","success_callback","self","check_changes_in_active_form","before","has_changes","hide_modal","_utils2","default","url","id","close_editor","workflow","success","do_close","text","message","onbeforeunload","errlist","show_modal","i","v","Cancel","save_current_workflow","body","append","location","name","stored","show_message","errors","rectify_workflow_outputs","type","err_msg","Ok","click","select","keyup","showWorkflowParameters","lastValue","timer","error","response","setTimeout","get","tool_search","q","focus","data","s","map","n","index","parent","this_label","no_visible_tools","is","value","canvas_manager","_workflowCanvas2","reset","datatypes","JSON","parse","ajax","Galaxy","root","async","datatypes_mapping","responseText","ext_to_type","type_to_type","class_to_classes","fit_canvas_to_nodes","scroll_to_nodes","draw_overview","_","details","step_id","step","m","upgrade_message","parseInt","nodes","beforeSubmit","make_popupmenu","workflow_save_as","Run","Save","Close","workflow_name","workflow_annotation","OK","rename_name","undefined","rename_annotation","alert","edit_workflow_outputs","clear_active_node","stringify","to_simple","done","output","output_terminals","node","isWorkflowOutput","new_content","Edit Attributes","Auto Re-layout","op","workflow_index","search_input","width","overview_size","height","hide_overview","offsetParent","opo","offset","new_size","Math","max","d","offsetX","left","offsetY","top","slideDown","_buildToolPanelWorkflows","wrap","copy","icon","cls","tooltip","slideUp","onclick","Copy","_asyncSaveText2","$section","annotate_async","copy_into_workflow","step_count","modal","title","on","add_node_for_subworkflow","latest_id","merge","dataType","cache","$add","$el","workflowId","from_simple","upgrade_messages","k","add_node_for_tool","create_node","_moduleInitAjax","vv","Continue","content_id","display_pja","remove_all","_workflowManager2","cc","display_pja_list","pja_list","cv","out_terminal","addlist","new_pja","action_type","post_job_actions","request_data","request","init_field_data","parameter_re","config_form","inputs","tool_id","add_node_for_module","pja","inArray","get_pja_form","workflow_parameters","new_parameter_content","children","wf_parm_container","wf_parm_box","closest","active_node","action_to_rem","active_form_has_changes","showForm","content","target","form_type","$container","debug","prebuildNode","matches","$title","scrollLeft","scrollTop","match","form_matches","concat","buttons","action_arguments","action_argument","arg_matches","o","element","prependTo","push","node_changed","substring","html","po","showAttributes","_workflowIcons2","_workflowForms2","form","emit","isSubType","child","title_text","$f","_workflowNode2","tmp","e","destroy","appendTo","position","p","bind","activate_node","x","y","terminal","redraw"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Workflow from \"mvc/workflow/workflow-manager\";\nimport WorkflowCanvas from \"mvc/workflow/workflow-canvas\";\nimport Node from \"mvc/workflow/workflow-node\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nimport FormWrappers from \"mvc/workflow/workflow-forms\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport async_save_text from \"utils/async-save-text\";\nimport * as Toastr from \"libs/toastr\";\nimport \"ui/editable-text\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = WorkflowIcons[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = (window.workflow_globals.app = this);\n        this.options = options;\n        this.urls = (options && options.urls) || {};\n        var close_editor = () => {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = () => {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\n                    \"Close workflow editor\",\n                    \"There are unsaved changes to your workflow which will be lost.\",\n                    {\n                        Cancel: hide_modal,\n                        \"Save Changes\": function() {\n                            save_current_workflow(null, do_close);\n                        }\n                    },\n                    {\n                        \"Don't Save\": do_close\n                    }\n                );\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = (eventObj, success_callback) => {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            Utils.request({\n                url: `${Galaxy.root}api/workflows/${self.options.id}`,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, (i, v) => {\n                            $(\"<li/>\")\n                                .text(v)\n                                .appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function(response) {\n                    window.show_modal(\n                        \"Saving workflow failed.\",\n                        response.err_msg,\n                        { Ok: hide_modal }\n                    );\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\")\n            .click(function() {\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup(function() {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if (this.value.length < 3) {\n                    reset_tool_search(false);\n                } else if (this.value != this.lastValue) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(() => {\n                        $.get(\n                            self.urls.tool_search,\n                            { q: q },\n                            data => {\n                                // input.removeClass(config.loadingClass);\n                                // Show live-search if results and search-term aren't empty\n                                $(\"#search-no-results\").hide();\n                                // Hide all tool sections.\n                                $(\".toolSectionWrapper\").hide();\n                                // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                $(\".toolSectionWrapper\")\n                                    .find(\".toolTitle\")\n                                    .hide();\n                                if (data.length != 0) {\n                                    // Map tool ids to element ids and join them.\n                                    var s = $.map(data, (n, i) => `link-${n}`);\n                                    // First pass to show matching tools and their parents.\n                                    $(s).each((index, id) => {\n                                        // Add class to denote match.\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .addClass(\"search_match\");\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .show();\n                                    });\n                                    // Hide labels that have no visible children.\n                                    $(\".toolPanelLabel\").each(function() {\n                                        var this_label = $(this);\n                                        var next = this_label.next();\n                                        var no_visible_tools = true;\n                                        // Look through tools following label and, if none are visible, hide label.\n                                        while (\n                                            next.length !== 0 &&\n                                            next.hasClass(\"toolTitle\")\n                                        ) {\n                                            if (next.is(\":visible\")) {\n                                                no_visible_tools = false;\n                                                break;\n                                            } else {\n                                                next = next.next();\n                                            }\n                                        }\n                                        if (no_visible_tools) {\n                                            this_label.hide();\n                                        }\n                                    });\n                                } else {\n                                    $(\"#search-no-results\").show();\n                                }\n                                $(\"#search-spinner\").hide();\n                            },\n                            \"json\"\n                        );\n                    }, 400);\n                }\n                this.lastValue = this.value;\n            });\n\n        // Canvas overview management\n        this.canvas_manager = window.workflow_globals.canvas_manager = new WorkflowCanvas(\n            this,\n            $(\"#canvas-viewport\"),\n            $(\"#overview\")\n        );\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes`,\n                async: false\n            }).responseText\n        );\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes/mapping`,\n                async: false\n            }).responseText\n        );\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, (step, step_id) => {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += `<li>${step.errors}</li>`;\n                    }\n                    _.each(data.upgrade_messages[step_id], m => {\n                        details += `<li>${m}</li>`;\n                    });\n                    if (details) {\n                        upgrade_message += `<li>Step ${parseInt(step_id, 10) +\n                            1}: ${self.workflow.nodes[step_id]\n                            .name}<ul>${details}</ul></li>`;\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Issues loading this workflow\",\n                        `Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>${upgrade_message}</ul></p>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu &&\n            make_popupmenu($(\"#workflow-options-button\"), {\n                Save: save_current_workflow,\n                \"Save As\": workflow_save_as,\n                Run: function() {\n                    window.location = `${Galaxy.root}workflow/run?id=${self\n                        .options.id}`;\n                },\n                \"Edit Attributes\": function() {\n                    self.workflow.clear_active_node();\n                },\n                \"Auto Re-layout\": layout_editor,\n                Close: close_editor\n            });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $(\n                '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                    '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n            );\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function() {\n                    var rename_name =\n                        $(\"#workflow_rename\").val().length > 0\n                            ? $(\"#workflow_rename\").val()\n                            : `SavedAs_${self.workflow.name}`;\n                    var rename_annotation =\n                        $(\"#wf_annotation\").val().length > 0\n                            ? $(\"#wf_annotation\").val()\n                            : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function() {\n                                return JSON.stringify(\n                                    self.workflow.to_simple()\n                                );\n                            }\n                        }\n                    })\n                        .done(id => {\n                            window.onbeforeunload = undefined;\n                            window.location = `${Galaxy.root}workflow/editor?id=${id}`;\n                            hide_modal();\n                        })\n                        .fail(() => {\n                            hide_modal();\n                            alert(\n                                \"Saving this workflow failed. Please contact this site's administrator.\"\n                            );\n                        });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content += `<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step ${node.id} - ${node.name}</div>`;\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${output.name}' checked /></p>`;\n                        } else {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${output.name}' /></p>`;\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function() {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(\n                op.width() - (d.offsetX - opo.left),\n                op.height() - (d.offsetY - opo.top)\n            );\n            $.jStorage.set(\"overview-size\", `${new_size}px`);\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(() => {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = () => {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 &&\n            $(\"#left\")\n                .find(\".toolMenu\")\n                .append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function() {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(() => {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        async_save_text(\n            \"workflow-name\",\n            \"workflow-name\",\n            self.urls.rename_async,\n            \"new_name\"\n        );\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(() => {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        async_save_text(\n            \"workflow-annotation\",\n            \"workflow-annotation\",\n            self.urls.annotate_async,\n            \"new_annotation\",\n            25,\n            true,\n            4\n        );\n    },\n\n    _buildToolPanelWorkflows: function() {\n        var self = this;\n        var $section = $(\n            '<div class=\"toolSectionWrapper\">' +\n                '<div class=\"toolSectionTitle\">' +\n                '<a href=\"#\"><span>Workflows</span></a>' +\n                \"</div>\" +\n                '<div class=\"toolSectionBody\">' +\n                '<div class=\"toolSectionBg\"/>' +\n                \"</div>\" +\n                \"</div>\"\n        );\n        _.each(this.options.workflows, workflow => {\n            if (workflow.id !== self.options.id) {\n                var copy = new Ui.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: \"Copy and insert individual steps\",\n                    onclick: function() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: \"Warning\",\n                                body: `This will copy ${workflow.step_count} new steps into your workflow.`,\n                                buttons: {\n                                    Cancel: function() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(\n                                            workflow.id,\n                                            workflow.name\n                                        );\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\")\n                    .attr(\"href\", \"#\")\n                    .html(workflow.name)\n                    .on(\"click\", () => {\n                        self.add_node_for_subworkflow(\n                            workflow.latest_id,\n                            workflow.name\n                        );\n                    });\n                $section.find(\".toolSectionBg\").append(\n                    $(\"<div/>\")\n                        .addClass(\"toolTitle\")\n                        .append($add)\n                        .append(copy.$el)\n                );\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, (k, v) => {\n                    upgrade_message += `<li>Step ${parseInt(k, 10) + 1}: ${self\n                        .workflow.nodes[k].name}<ul>`;\n                    $.each(v, (i, vv) => {\n                        upgrade_message += `<li>${vv}</li>`;\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Subworkflow embedded with changes\",\n                        `Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>${upgrade_message}</ul>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = window.workflow_globals.workflow = new Workflow(\n            this,\n            $(\"#canvas-container\")\n        );\n    },\n\n    scroll_to_nodes: function() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top;\n        var left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function(workflowId, options) {\n        $.ajax(\n            Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, _: \"true\" },\n                dataType: \"json\",\n                cache: false\n            })\n        );\n    },\n\n    _moduleInitAjax: function(node, request_data) {\n        var self = this;\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/workflows/build_module`,\n            data: request_data,\n            success: function(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    // This function preloads how to display known pja's.\n    display_pja: function(pja, node) {\n        // DBTODO SANITIZE INPUTS.\n        var self = this;\n        $(\"#pja_container\").append(get_pja_form(pja, node));\n        $(\n            \"#pja_container>.toolForm:last>.toolFormTitle>.buttons\"\n        ).click(function() {\n            var action_to_rem = $(this)\n                .closest(\".toolForm\", \".action_tag\")\n                .children(\".action_tag:first\")\n                .text();\n            $(this)\n                .closest(\".toolForm\")\n                .remove();\n            delete self.workflow.active_node.post_job_actions[action_to_rem];\n            self.workflow.active_form_has_changes = true;\n        });\n    },\n\n    display_pja_list: function() {\n        return pja_list;\n    },\n\n    display_file_list: function(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist += `<option value='${out_terminal}'>${out_terminal}</option>`;\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    new_pja: function(action_type, target, node) {\n        if (node.post_job_actions === undefined) {\n            //New tool node, set up dict.\n            node.post_job_actions = {};\n        }\n        if (node.post_job_actions[action_type + target] === undefined) {\n            var new_pja = {};\n            new_pja.action_type = action_type;\n            new_pja.output_name = target;\n            node.post_job_actions[action_type + target] = null;\n            node.post_job_actions[action_type + target] = new_pja;\n            display_pja(new_pja, node);\n            this.workflow.active_form_has_changes = true;\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    showWorkflowParameters: function() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, (k, node) => {\n            if (node.config_form && node.config_form.inputs) {\n                Utils.deepeach(node.config_form.inputs, d => {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (k, pja) => {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, (k, action_argument) => {\n                            var arg_matches = action_argument.match(\n                                parameter_re\n                            );\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, (k, element) => {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, (k, element) => {\n                new_parameter_content += `<div>${element.substring(\n                    2,\n                    element.length - 1\n                )}</div>`;\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = `${cls}-${node.id}`;\n        var $container = $(`#${cls}`);\n        if (content && $container.find(`#${id}`).length == 0) {\n            var $el = $(`<div id=\"${id}\" class=\"${cls}\"/>`);\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = WorkflowIcons[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new FormWrappers[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\n                    \"workflow-view::initialize()\",\n                    \"Node not found in workflow.\"\n                );\n            }\n        }\n        $(`.${cls}`).hide();\n        $container.find(`#${id}`).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(\n            `<div class='toolFormTitle unselectable'><span class='nodeTitle'>${title_text}</div></div>`\n        );\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new Node(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp = `<div><img height='16' align='middle' src='${Galaxy.root}static/images/loading_small_white_bg.gif'/> loading tool info...</div>`;\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        buttons.append(\n            $(\"<div/>\")\n                .addClass(\"fa-icon-button fa fa-times\")\n                .click(e => {\n                    node.destroy();\n                })\n        );\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f\n            .bind(\"dragstart\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"dragend\", function() {\n                self.workflow.node_changed(this);\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            })\n            .bind(\"dragclickonly\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"drag\", function(e, d) {\n                // Move\n                var po = $(this)\n                    .offsetParent()\n                    .offset();\n\n                var x = d.offsetX - po.left;\n                var y = d.offsetY - po.top;\n                $(this).css({ left: x, top: y });\n                // Redraw\n                $(this)\n                    .find(\".terminal\")\n                    .each(function() {\n                        this.terminal.redraw();\n                    });\n            });\n        return node;\n    }\n});\n"]}