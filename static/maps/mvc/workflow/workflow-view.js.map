{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["define","tool_menu_frame","$","removeClass","WorkflowCanvas","Node","WorkflowIcons","FormWrappers","Ui","async_save_text","Toastr","reset_tool_search","initValue","find","contents","attr","document","hide","show","each","search_input","val","hasClass","this","iconStyle","$icon","window","initialize","$to_el","nodeType","Globals","options","addClass","close_editor","show_overview","jStorage","set","css","click","hide_overview","show_modal","urls","save_current_workflow","url","eventObj","self","success","type","data","workflow","has_changes","hide_modal","success_callback","body","rectify_workflow_outputs","Galaxy","root","id","to_simple","name","text","message","stored","showWorkflowParameters","i","v","appendTo","errlist","errors","Ok","focus","select","error","response","err_msg","q","keyup","value","length","setTimeout","get","tool_search","clearTimeout","timer","this_label","s","no_visible_tools","n","next","parent","is","canvas_manager","async","datatypes","JSON","parse","ajax","ext_to_type","datatypes_mapping","type_to_type","responseText","reset","ext_to_class_name","class_to_classes","_workflowLoadAjax","details","from_simple","_","upgrade_messages","scroll_to_nodes","draw_overview","upgrade_message","steps","step","step_id","m","beforeSubmit","show_message","parseInt","nodes","make_popupmenu","Continue","clear_active_node","Save","Save As","workflow_name","workflow_data","OK","rename_name","rename_annotation","done","onbeforeunload","location","stringify","fail","edit_workflow_outputs","Cancel","Run","workflow_save_as","Edit Attributes","Auto Re-layout","layout","width","overview_size","height","Close","check_changes_in_active_form","do_close","undefined","workflow_index","op","offset","bind","e","d","offsetParent","opo","new_size","Math","max","offsetX","left","offsetY","top","last_expanded","workflows","slideUp","append","_buildToolPanelWorkflows","wrap","slideDown","rename_async","tooltip","annotate_async","$section","modal","copy","ButtonIcon","icon","cls","onclick","step_count","copy_into_workflow","on","title","buttons","Copy","html","add_node_for_subworkflow","latest_id","$add","$el","workflowId","k","vv","cc","cv","remove_all","Workflow","Utils","dataType","_moduleInitAjax","request","node","init_field_data","update_field_data","cache","create_node","activate_node","add_node_for_tool","display_pja","tool_id","action_to_rem","closest","remove","active_node","post_job_actions","add_node_for_module","display_pja_list","display_file_list","pja","out_terminal","addlist","get_pja_form","children","active_form_has_changes","pja_list","new_pja","action_type","output_name","target","workflow_parameters","wf_parm_container","wf_parm_box","new_parameter_content","matches","config_form","deepeach","inputs","parameter_re","action_arguments","arg_matches","concat","form_matches","match","action_argument","element","inArray","push","showForm","substring","$container","content","scrollTop","isSubType","child","form_type","form","emit","debug","add_node_icon","$title","$f","content_id","tmp","prebuildNode","title_text","destroy","scrollLeft","prependTo","position","p","po","y","o","redraw","node_changed","fit_canvas_to_nodes","x","terminal"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["define('mvc/workflow/workflow-globals', {});\ndefine([\n    'utils/utils',\n    'mvc/workflow/workflow-globals',\n    'mvc/workflow/workflow-manager',\n    'mvc/workflow/workflow-canvas',\n    'mvc/workflow/workflow-node',\n    'mvc/workflow/workflow-icons',\n    'mvc/workflow/workflow-forms',\n    'mvc/ui/ui-misc',\n    'utils/async-save-text',\n    'libs/toastr',\n    'ui/editable-text'\n], function( Utils, Globals, Workflow, WorkflowCanvas, Node, WorkflowIcons, FormWrappers, Ui, async_save_text, Toastr ){\n\n    // Reset tool search to start state.\n    function reset_tool_search( initValue ) {\n        // Function may be called in top frame or in tool_menu_frame;\n        // in either case, get the tool menu frame.\n        var tool_menu_frame = $(\"#galaxy_tools\").contents();\n        if (tool_menu_frame.length === 0) {\n            tool_menu_frame = $(document);\n            // Remove classes that indicate searching is active.\n            $(this).removeClass(\"search_active\");\n            tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n            // Reset visibility of tools and labels.\n            tool_menu_frame.find(\".toolSectionBody\").hide();\n            tool_menu_frame.find(\".toolTitle\").show();\n            tool_menu_frame.find(\".toolPanelLabel\").show();\n            tool_menu_frame.find(\".toolSectionWrapper\").each( function() {\n                if ($(this).attr('id') !== 'recently_used_wrapper') {\n                    // Default action.\n                    $(this).show();\n                } else if ($(this).hasClass(\"user_pref_visible\")) {\n                    $(this).show();\n                }\n            });\n            tool_menu_frame.find(\"#search-no-results\").hide();\n\n            // Reset search input.\n            tool_menu_frame.find(\"#search-spinner\").hide();\n            if (initValue) {\n                var search_input = tool_menu_frame.find(\"#tool-search-query\");\n                search_input.val(\"search tools\");\n            }\n        }\n    }\n\n    add_node_icon = function($to_el, nodeType) {\n        var iconStyle = WorkflowIcons[nodeType];\n        if(iconStyle) {\n            var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n            $to_el.before($icon);\n        }\n    }\n\n    // create form view\n    return Backbone.View.extend({\n        initialize: function(options) {\n            var self = Globals.app = this;\n            this.options = options;\n            this.urls = options && options.urls || {};\n            var close_editor = function() {\n                self.workflow.check_changes_in_active_form();\n                if ( workflow && self.workflow.has_changes ) {\n                    var do_close = function() {\n                        window.onbeforeunload = undefined;\n                        window.document.location = self.urls.workflow_index;\n                    };\n                    window.show_modal( \"Close workflow editor\",\n                                \"There are unsaved changes to your workflow which will be lost.\",\n                                {\n                                    \"Cancel\" : hide_modal,\n                                    \"Save Changes\" : function() {\n                                        save_current_workflow( null, do_close );\n                                    }\n                                }, {\n                                    \"Don't Save\": do_close\n                                } );\n                } else {\n                    window.document.location = self.urls.workflow_index;\n                }\n            };\n            var save_current_workflow = function ( eventObj, success_callback ) {\n                show_message( \"Saving workflow\", \"progress\" );\n                self.workflow.check_changes_in_active_form();\n                if (!self.workflow.has_changes) {\n                    hide_modal();\n                    if ( success_callback ) {\n                        success_callback();\n                    }\n                    return;\n                }\n                self.workflow.rectify_workflow_outputs();\n                Utils.request( {\n                    url: Galaxy.root + 'api/workflows/' + self.options.id,\n                    type: \"PUT\",\n                    data: { workflow: self.workflow.to_simple() },\n                    success: function( data ) {\n                        var body = $( \"<div/>\" ).text( data.message );\n                        if ( data.errors ) {\n                            body.addClass( \"warningmark\" );\n                            var errlist = $( \"<ul/>\" );\n                            $.each( data.errors, function( i, v ) {\n                                $( \"<li/>\" ).text( v ).appendTo( errlist );\n                            });\n                            body.append( errlist );\n                        } else {\n                            body.addClass( \"donemark\" );\n                        }\n                        self.workflow.name = data.name;\n                        self.workflow.has_changes = false;\n                        self.workflow.stored = true;\n                        self.showWorkflowParameters();\n                        if ( data.errors ) {\n                            window.show_modal( \"Saving workflow\", body, { \"Ok\" : hide_modal } );\n                        } else {\n                            success_callback && success_callback();\n                            hide_modal();\n                        }\n                    },\n                    error: function( response ) {\n                        window.show_modal( \"Saving workflow failed.\", response.err_msg, { \"Ok\" : hide_modal } );\n                    }\n                });\n            };\n\n            // Init searching.\n            $(\"#tool-search-query\").click( function (){\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup( function () {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if ( this.value.length < 3 ) {\n                    reset_tool_search(false);\n                } else if ( this.value != this.lastValue ) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(function () {\n                        $.get(self.urls.tool_search, { q: q }, function (data) {\n                            // input.removeClass(config.loadingClass);\n                            // Show live-search if results and search-term aren't empty\n                            $(\"#search-no-results\").hide();\n                            // Hide all tool sections.\n                            $(\".toolSectionWrapper\").hide();\n                            // This hides all tools but not workflows link (which is in a .toolTitle div).\n                            $(\".toolSectionWrapper\").find(\".toolTitle\").hide();\n                            if ( data.length != 0 ) {\n                                // Map tool ids to element ids and join them.\n                                var s = $.map( data, function( n, i ) { return \"link-\" + n; } );\n                                // First pass to show matching tools and their parents.\n                                $(s).each( function(index,id) {\n                                    // Add class to denote match.\n                                    $(\"[id='\"+id+\"']\").parent().addClass(\"search_match\");\n                                    $(\"[id='\"+id+\"']\").parent().show().parent().parent().show().parent().show();\n                                });\n                                // Hide labels that have no visible children.\n                                $(\".toolPanelLabel\").each( function() {\n                                   var this_label = $(this);\n                                   var next = this_label.next();\n                                   var no_visible_tools = true;\n                                   // Look through tools following label and, if none are visible, hide label.\n                                   while (next.length !== 0 && next.hasClass(\"toolTitle\")) {\n                                       if (next.is(\":visible\")) {\n                                           no_visible_tools = false;\n                                           break;\n                                       } else {\n                                           next = next.next();\n                                       }\n                                    }\n                                    if (no_visible_tools) {\n                                        this_label.hide();\n                                    }\n                                });\n                            } else {\n                                $(\"#search-no-results\").show();\n                            }\n                            $(\"#search-spinner\").hide();\n                        }, \"json\" );\n                    }, 400 );\n                }\n                this.lastValue = this.value;\n            });\n\n            // Canvas overview management\n            this.canvas_manager = Globals.canvas_manager = new WorkflowCanvas( this, $(\"#canvas-viewport\"), $(\"#overview\") );\n\n            // Initialize workflow state\n            this.reset();\n\n            // get available datatypes for post job action options\n            this.datatypes = JSON.parse($.ajax({\n                url     : Galaxy.root + 'api/datatypes',\n                async   : false\n            }).responseText);\n\n            // get datatype mapping options\n            this.datatypes_mapping = JSON.parse($.ajax({\n                url     : Galaxy.root + 'api/datatypes/mapping',\n                async   : false\n            }).responseText);\n\n            // set mapping sub lists\n            this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n            this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n            // Load workflow definition\n            this._workflowLoadAjax(self.options.id, {\n                success: function( data ) {\n                     self.reset();\n                     self.workflow.from_simple( data, true );\n                     self.workflow.has_changes = false;\n                     self.workflow.fit_canvas_to_nodes();\n                     self.scroll_to_nodes();\n                     self.canvas_manager.draw_overview();\n                     // Determine if any parameters were 'upgraded' and provide message\n                     var upgrade_message = \"\";\n                     _.each( data.steps, function( step, step_id ) {\n                        var details = \"\";\n                        if ( step.errors ) {\n                            details += \"<li>\" + step.errors + \"</li>\";\n                        }\n                        _.each( data.upgrade_messages[ step_id ], function( m ) {\n                            details += \"<li>\" + m + \"</li>\";\n                        });\n                        if ( details ) {\n                            upgrade_message += \"<li>Step \" + ( parseInt( step_id, 10 ) + 1 ) + \": \" + self.workflow.nodes[ step_id ].name + \"<ul>\" + details + \"</ul></li>\";\n                        }\n                     });\n                     if ( upgrade_message ) {\n                        window.show_modal( \"Issues loading this workflow\", \"Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>\" + upgrade_message + \"</ul></p>\", { \"Continue\" : hide_modal } );\n                     } else {\n                        hide_modal();\n                     }\n                     self.showWorkflowParameters();\n                 },\n                 beforeSubmit: function( data ) {\n                     show_message( \"Loading workflow\", \"progress\" );\n                 }\n            });\n\n            window.make_popupmenu && make_popupmenu( $(\"#workflow-options-button\"), {\n                \"Save\" : save_current_workflow,\n                \"Save As\": workflow_save_as,\n                \"Run\": function() {\n                    window.location = Galaxy.root + \"workflow/run?id=\" + self.options.id;\n                },\n                \"Edit Attributes\" : function() { self.workflow.clear_active_node() },\n                \"Auto Re-layout\": layout_editor,\n                \"Close\": close_editor\n            });\n\n            /******************************************** Issue 3000*/\n            function workflow_save_as() {\n                var body = $('<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' + \n                '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>');\n                    window.show_modal(\"Save As a New Workflow\", body, {\n                        \"OK\": function () {\n                            var rename_name = $('#workflow_rename').val().length > 0 ? $('#workflow_rename').val() : \"SavedAs_\" + self.workflow.name;\n                            var rename_annotation = $('#wf_annotation').val().length > 0 ? $('#wf_annotation').val() : \"\";\n                            $.ajax({\n                                url: self.urls.workflow_save_as,\n                                type: \"POST\",\n                                data: {\n                                    workflow_name: rename_name,\n                                    workflow_annotation: rename_annotation,\n                                    workflow_data: function() { return JSON.stringify( self.workflow.to_simple() ); }\n                                }\n                            }).done(function(id){\n                                window.onbeforeunload = undefined;\n                                window.location = Galaxy.root + \"workflow/editor?id=\" + id;\n                                hide_modal();\n                            }).fail(function(){\n                                hide_modal();\n                                alert(\"Saving this workflow failed. Please contact this site's administrator.\");\n                            });\n                        },\n                        \"Cancel\": hide_modal\n                    });\n            };\n\n            function edit_workflow_outputs(){\n                self.workflow.clear_active_node();\n                $('.right-content').hide();\n                var new_content = \"\";\n                for (var node_key in self.workflow.nodes){\n                    var node = self.workflow.nodes[node_key];\n                    if(['tool', 'subworkflow'].indexOf(node.type) >= 0){\n                        new_content += \"<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step \" + node.id + \" - \" + node.name + \"</div>\";\n                        for (var ot_key in node.output_terminals){\n                            var output = node.output_terminals[ot_key];\n                            if (node.isWorkflowOutput(output.name)) {\n                                new_content += \"<p>\"+output.name +\"<input type='checkbox' name='\"+ node.id + \"|\" + output.name +\"' checked /></p>\";\n                            }\n                            else{\n                                new_content += \"<p>\"+output.name +\"<input type='checkbox' name='\"+ node.id + \"|\" + output.name +\"' /></p>\";\n                            }\n                        }\n                        new_content += \"</div>\";\n                    }\n                }\n                $(\"#output-fill-area\").html(new_content);\n                $(\"#output-fill-area input\").bind('click', function(){\n                    var node_id = this.name.split('|')[0];\n                    var workflowNode = this.workflow.nodes[node_id];\n                    var output_name = this.name.split('|')[1];\n                    if (this.checked){\n                        workflowNode.addWorkflowOutput(output_name);\n                    }else{\n                        workflowNode.removeWorkflowOutput(output_name);\n                    }\n                    self.workflow.has_changes = true;\n                });\n                $('#workflow-output-area').show();\n            }\n\n            function layout_editor() {\n                self.workflow.layout();\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n            }\n\n            // On load, set the size to the pref stored in local storage if it exists\n            var overview_size = $.jStorage.get(\"overview-size\");\n            if (overview_size !== undefined) {\n                $(\"#overview-border\").css( {\n                    width: overview_size,\n                    height: overview_size\n                });\n            }\n\n            // Show viewport on load unless pref says it's off\n            if ($.jStorage.get(\"overview-off\")) {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n\n            // Stores the size of the overview into local storage when it's resized\n            $(\"#overview-border\").bind( \"dragend\", function( e, d ) {\n                var op = $(this).offsetParent();\n                var opo = op.offset();\n                var new_size = Math.max( op.width() - ( d.offsetX - opo.left ),\n                                         op.height() - ( d.offsetY - opo.top ) );\n                $.jStorage.set(\"overview-size\", new_size + \"px\");\n            });\n\n            function show_overview() {\n                $.jStorage.set(\"overview-off\", false);\n                $(\"#overview-border\").css(\"right\", \"0px\");\n                $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n            }\n\n            function hide_overview() {\n                $.jStorage.set(\"overview-off\", true);\n                $(\"#overview-border\").css(\"right\", \"20000px\");\n                $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n            }\n\n            // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n            $(\"#close-viewport\").click( function() {\n                if ( $(\"#overview-border\").css(\"right\") === \"0px\" ) {\n                    hide_overview();\n                } else {\n                    show_overview();\n                }\n            });\n\n            // Unload handler\n            window.onbeforeunload = function() {\n                if ( workflow && self.workflow.has_changes ) {\n                    return \"There are unsaved changes to your workflow which will be lost.\";\n                }\n            };\n\n            this.options.workflows.length > 0 && $( \"#left\" ).find( \".toolMenu\" ).append( this._buildToolPanelWorkflows() );\n\n            // Tool menu\n            $( \"div.toolSectionBody\" ).hide();\n            $( \"div.toolSectionTitle > span\" ).wrap( \"<a href='#'></a>\" );\n            var last_expanded = null;\n            $( \"div.toolSectionTitle\" ).each( function() {\n               var body = $(this).next( \"div.toolSectionBody\" );\n               $(this).click( function() {\n                   if ( body.is( \":hidden\" ) ) {\n                       if ( last_expanded ) last_expanded.slideUp( \"fast\" );\n                       last_expanded = body;\n                       body.slideDown( \"fast\" );\n                   }\n                   else {\n                       body.slideUp( \"fast\" );\n                       last_expanded = null;\n                   }\n               });\n            });\n\n            // Rename async.\n            async_save_text(\"workflow-name\", \"workflow-name\", self.urls.rename_async, \"new_name\");\n\n            // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n            $('#workflow-tag').click( function() {\n                $('.tag-area').click();\n                return false;\n            });\n            // Annotate async.\n            async_save_text(\"workflow-annotation\", \"workflow-annotation\", self.urls.annotate_async, \"new_annotation\", 25, true, 4);\n        },\n\n        _buildToolPanelWorkflows: function() {\n            var self = this;\n            var $section = $(   '<div class=\"toolSectionWrapper\">' +\n                                    '<div class=\"toolSectionTitle\">' +\n                                        '<a href=\"#\"><span>Workflows</span></a>' +\n                                    '</div>' +\n                                    '<div class=\"toolSectionBody\">' +\n                                        '<div class=\"toolSectionBg\"/>' +\n                                    '</div>' +\n                                '</div>' );\n            _.each( this.options.workflows, function( workflow ) {\n                if( workflow.id !== self.options.id ) {\n                    var copy = new Ui.ButtonIcon({\n                        icon        : 'fa fa-copy',\n                        cls         : 'ui-button-icon-plain',\n                        tooltip     : 'Copy and insert individual steps',\n                        onclick     : function() {\n                            if( workflow.step_count < 2 ) {\n                                self.copy_into_workflow( workflow.id, workflow.name );\n                            } else {\n                                // don't ruin the workflow by adding 50 steps unprompted.\n                                Galaxy.modal.show({\n                                    title   : 'Warning',\n                                    body    : 'This will copy ' + workflow.step_count + ' new steps into your workflow.',\n                                    buttons : {\n                                        'Cancel' : function() { Galaxy.modal.hide(); },\n                                        'Copy'   : function() { Galaxy.modal.hide(); self.copy_into_workflow( workflow.id, workflow.name ); }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    var $add = $( '<a/>' ).attr( 'href', '#' ).html( workflow.name ).on( 'click', function() {\n                        self.add_node_for_subworkflow( workflow.latest_id, workflow.name );\n                    });\n                    $section.find( '.toolSectionBg' ).append( $( '<div/>' ).addClass( 'toolTitle' ).append( $add ).append( copy.$el ) );\n                }\n            });\n            return $section;\n        },\n\n        copy_into_workflow: function(workflowId) {\n            // Load workflow definition\n            var self = this;\n            this._workflowLoadAjax(workflowId, {\n                success: function( data ) {\n                    self.workflow.from_simple( data, false );\n                    // Determine if any parameters were 'upgraded' and provide message\n                    var upgrade_message = \"\";\n                    $.each( data.upgrade_messages, function( k, v ) {\n                       upgrade_message += ( \"<li>Step \" + ( parseInt(k, 10) + 1 ) + \": \" + self.workflow.nodes[k].name + \"<ul>\");\n                       $.each( v, function( i, vv ) {\n                           upgrade_message += \"<li>\" + vv +\"</li>\";\n                       });\n                       upgrade_message += \"</ul></li>\";\n                    });\n                    if ( upgrade_message ) {\n                       window.show_modal( \"Subworkflow embedded with changes\",\n                                   \"Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>\" + upgrade_message + \"</ul>\",\n                                   { \"Continue\" : hide_modal } );\n                    } else {\n                       hide_modal();\n                    }\n                },\n                beforeSubmit: function( data ) {\n                   show_message( \"Importing workflow\", \"progress\" );\n                }\n            });\n        },\n\n        // Global state for the whole workflow\n        reset: function() {\n            this.workflow && this.workflow.remove_all();\n            this.workflow = Globals.workflow = new Workflow( this, $(\"#canvas-container\") );\n        },\n\n        scroll_to_nodes: function () {\n            var cv = $(\"#canvas-viewport\");\n            var cc = $(\"#canvas-container\");\n            var top, left;\n            if ( cc.width() < cv.width() ) {\n                left = ( cv.width() - cc.width() ) / 2;\n            } else {\n                left = 0;\n            }\n            if ( cc.height() < cv.height() ) {\n                top = ( cv.height() - cc.height() ) / 2;\n            } else {\n                top = 0;\n            }\n            cc.css( { left: left, top: top } );\n        },\n\n        _workflowLoadAjax: function(workflowId, options) {\n            $.ajax(Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, \"_\": \"true\" },\n                dataType: 'json',\n                cache: false\n            }));\n        },\n\n        _moduleInitAjax: function(node, request_data) {\n            var self = this;\n            Utils.request({\n                type    : 'POST',\n                url     : Galaxy.root + 'api/workflows/build_module',\n                data    : request_data,\n                success : function( data ) {\n                    node.init_field_data( data );\n                    node.update_field_data( data );\n                    self.workflow.activate_node( node );\n                }\n            });\n        },\n\n        // Add a new step to the workflow by tool id\n        add_node_for_tool: function ( id, title ) {\n            var node = this.workflow.create_node( 'tool', title, id );\n            this._moduleInitAjax(node, { type: \"tool\", tool_id: id, \"_\": \"true\" });\n        },\n\n        // Add a new step to the workflow by tool id\n        add_node_for_subworkflow: function ( id, title ) {\n            var node = this.workflow.create_node( 'subworkflow', title, id );\n            this._moduleInitAjax(node, { type: \"subworkflow\", content_id: id, \"_\": \"true\" });\n        },\n\n        add_node_for_module: function ( type, title ) {\n            var node = this.workflow.create_node( type, title );\n            this._moduleInitAjax(node, { type: type, \"_\": \"true\" });\n        },\n\n        // This function preloads how to display known pja's.\n        display_pja: function (pja, node) {\n            // DBTODO SANITIZE INPUTS.\n            var self = this;\n            $(\"#pja_container\").append( get_pja_form(pja, node) );\n            $(\"#pja_container>.toolForm:last>.toolFormTitle>.buttons\").click(function (){\n                var action_to_rem = $(this).closest(\".toolForm\", \".action_tag\").children(\".action_tag:first\").text();\n                $(this).closest(\".toolForm\").remove();\n                delete self.workflow.active_node.post_job_actions[action_to_rem];\n                self.workflow.active_form_has_changes = true;\n            });\n        },\n\n        display_pja_list: function (){\n            return pja_list;\n        },\n\n        display_file_list: function (node){\n            var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n            for (var out_terminal in node.output_terminals){\n                addlist += \"<option value='\" + out_terminal + \"'>\"+ out_terminal +\"</option>\";\n            }\n            addlist += \"</select>\";\n            return addlist;\n        },\n\n        new_pja: function (action_type, target, node){\n            if (node.post_job_actions === undefined){\n                //New tool node, set up dict.\n                node.post_job_actions = {};\n            }\n            if (node.post_job_actions[action_type+target] === undefined) {\n                var new_pja = {};\n                new_pja.action_type = action_type;\n                new_pja.output_name = target;\n                node.post_job_actions[action_type+target] = null;\n                node.post_job_actions[action_type+target] =  new_pja;\n                display_pja(new_pja, node);\n                this.workflow.active_form_has_changes = true;\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        showWorkflowParameters: function () {\n            var parameter_re = /\\$\\{.+?\\}/g;\n            var workflow_parameters = [];\n            var wf_parm_container = $( '#workflow-parameters-container' );\n            var wf_parm_box = $( '#workflow-parameters-box' );\n            var new_parameter_content = '';\n            var matches = [];\n            $.each(this.workflow.nodes, function ( k, node ){\n                if ( node.config_form && node.config_form.inputs ) {\n                    Utils.deepeach( node.config_form.inputs, function( d ) {\n                        if ( typeof d.value == 'string' ) {\n                            var form_matches = d.value.match( parameter_re );\n                            if ( form_matches ) {\n                                matches = matches.concat( form_matches );\n                            }\n                        }\n                    });\n                }\n                if (node.post_job_actions){\n                    $.each(node.post_job_actions, function(k, pja){\n                        if (pja.action_arguments){\n                            $.each(pja.action_arguments, function(k, action_argument){\n                                var arg_matches = action_argument.match(parameter_re);\n                                if (arg_matches){\n                                    matches = matches.concat(arg_matches);\n                                }\n                            });\n                        }\n                    });\n                }\n                if (matches){\n                    $.each(matches, function(k, element){\n                        if ($.inArray(element, workflow_parameters) === -1){\n                            workflow_parameters.push(element);\n                        }\n                    });\n                }\n            });\n            if (workflow_parameters && workflow_parameters.length !== 0){\n                $.each(workflow_parameters, function(k, element){\n                    new_parameter_content += \"<div>\" + element.substring(2, element.length -1) + \"</div>\";\n                });\n                wf_parm_container.html(new_parameter_content);\n                wf_parm_box.show();\n            }else{\n                wf_parm_container.html(new_parameter_content);\n                wf_parm_box.hide();\n            }\n        },\n\n        showAttributes: function() {\n            $( '.right-content' ).hide();\n            $( '#edit-attributes' ).show();\n        },\n\n        showForm: function ( content, node ) {\n            var self = this;\n            var cls = 'right-content';\n            var id  = cls + '-' + node.id;\n            var $container = $( '#' + cls );\n            if ( content && $container.find( '#' + id ).length == 0 ) {\n                var $el = $( '<div id=\"' + id + '\" class=\"' + cls + '\"/>' );\n                content.node = node;\n                content.workflow = this.workflow;\n                content.datatypes = this.datatypes;\n                content.icon = WorkflowIcons[ node.type ];\n                content.cls = 'ui-portlet-narrow';\n                if ( node ) {\n                    var form_type = ( node.type == 'tool' ? 'Tool' : 'Default' );\n                    $el.append( ( new FormWrappers[ form_type ]( content ) ).form.$el );\n                    $container.append( $el );\n                } else {\n                    Galaxy.emit.debug('workflow-view::initialize()', 'Node not found in workflow.');\n                }\n            }\n            $( '.' + cls ).hide();\n            $container.find( '#' + id ).show();\n            $container.show();\n            $container.scrollTop();\n        },\n\n        isSubType: function ( child, parent ) {\n            child = this.ext_to_type[child];\n            parent = this.ext_to_type[parent];\n            return ( this.type_to_type[child] ) && ( parent in this.type_to_type[child] );\n        },\n\n        prebuildNode: function ( type, title_text, content_id ) {\n            var self = this;\n            var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n            var $title = $(\"<div class='toolFormTitle unselectable'><span class='nodeTitle'>\" + title_text + \"</div></div>\" );\n            add_node_icon($title.find('.nodeTitle'), type);\n            $f.append( $title );\n            $f.css( \"left\", $(window).scrollLeft() + 20 );\n            $f.css( \"top\", $(window).scrollTop() + 20 );\n            $f.append($(\"<div class='toolFormBody'></div>\"));\n            var node = new Node( this, { element: $f } );\n            node.type = type;\n            node.content_id = content_id;\n            var tmp = \"<div><img height='16' align='middle' src='\" + Galaxy.root + \"static/images/loading_small_white_bg.gif'/> loading tool info...</div>\";\n            $f.find(\".toolFormBody\").append(tmp);\n            // Fix width to computed width\n            // Now add floats\n            var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n            buttons.append( $(\"<div/>\").addClass(\"fa-icon-button fa fa-times\").click( function( e ) {\n                node.destroy();\n            }));\n            // Place inside container\n            $f.appendTo( \"#canvas-container\" );\n            // Position in container\n            var o = $(\"#canvas-container\").position();\n            var p = $(\"#canvas-container\").parent();\n            var width = $f.width();\n            var height = $f.height();\n            $f.css( { left: ( - o.left ) + ( p.width() / 2 ) - ( width / 2 ), top: ( - o.top ) + ( p.height() / 2 ) - ( height / 2 ) } );\n            buttons.prependTo( $f.find(\".toolFormTitle\" ) );\n            width += ( buttons.width() + 10 );\n            $f.css( \"width\", width );\n            $f.bind( \"dragstart\", function() {\n                self.workflow.activate_node( node );\n            }).bind( \"dragend\", function() {\n                self.workflow.node_changed( this );\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            }).bind( \"dragclickonly\", function() {\n                self.workflow.activate_node( node );\n            }).bind( \"drag\", function( e, d ) {\n                // Move\n                var po = $(this).offsetParent().offset(),\n                    x = d.offsetX - po.left,\n                    y = d.offsetY - po.top;\n                $(this).css( { left: x, top: y } );\n                // Redraw\n                $(this).find( \".terminal\" ).each( function() {\n                    this.terminal.redraw();\n                });\n            });\n            return node;\n        }\n    });\n});\n"]}