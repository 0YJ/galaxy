{"version":3,"sources":["mvc/workflow/workflow-terminals.js"],"names":["CollectionTypeDescription","collectionType","this","isCollection","rank","split","length","window","workflow_globals","NULL_COLLECTION_TYPE_DESCRIPTION","canMatch","canMapOver","other","otherCollectionType","toString","ANY_COLLECTION_TYPE_DESCRIPTION","equal","$","extend","prototype","otherCollectionTypeDescription","effectiveMapOver","requiredSuffix","_endsWith","str","suffix","mapOver","substring","TerminalMapping","Backbone","terminal","disableMapOver","setMapOver","collectionTypeDescription","trigger","Model","initialize","attr","element","connectors","terminalMapping","node","Terminal","redraw","c","connect","connector","destroy","push","each","destroyInvalidConnections","_","markChanged","resetMappingIfNeeded","outputTerminal","val","multiple","resetMapping","output_terminals","OutputTerminal","isMappedOver","hasConnectedOutputTerminals","noMappedInputs","call","datatypes","connectedInput","mappedInputTerminals","mappedInput","update","attachable","handle2","destroyIfInvalid","BaseInputTerminal","input","canAccept","hasConnectedMappedInputTerminals","inputFilled","hasMappedOverInputTerminals","connected","_inputFilled","_collectionAttached","inputsFilled","_mappingConstraints","firstOutput","constraints","indexOf","cat_outputs","first","values","other_datatype","other_datatype_i","otherMapOver","t","Array","concat","post_job_actions","InputTerminal","pja","pja_i","collection","output_name","name","action_arguments","other_output","handle1","thisMapOver","app","isSubType","thisDatatype","_otherCollectionType","append","extensions","_producesAcceptableDatatype","InputCollectionTerminal","collectionTypes","collection_types","_effectiveMapOver","every","collectionTypeIndex","effectiveCollectionTypes","effectiveCollectionType","some","OutputCollectionTerminal","collection_type","collectionTypeSource","collection_type_source","newCollectionType","map","output","console","_effectiveCollectionTypes","log"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-terminals.js","sourcesContent":["// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\nfunction CollectionTypeDescription(collectionType) {\n    this.collectionType = collectionType;\n    this.isCollection = true;\n    this.rank = collectionType.split(\":\").length;\n}\n\nvar NULL_COLLECTION_TYPE_DESCRIPTION = {\n    isCollection: false,\n    canMatch: function(other) {\n        return false;\n    },\n    canMapOver: function(other) {\n        return false;\n    },\n    toString: function() {\n        return \"NullCollectionType[]\";\n    },\n    append: function(otherCollectionType) {\n        return otherCollectionType;\n    },\n    equal: function(other) {\n        return other === this;\n    }\n};\n\nvar ANY_COLLECTION_TYPE_DESCRIPTION = {\n    isCollection: true,\n    canMatch: function(other) {\n        return NULL_COLLECTION_TYPE_DESCRIPTION !== other;\n    },\n    canMapOver: function(other) {\n        return false;\n    },\n    toString: function() {\n        return \"AnyCollectionType[]\";\n    },\n    append: function(otherCollectionType) {\n        throw \"Cannot append to ANY_COLLECTION_TYPE_DESCRIPTION\";\n    },\n    equal: function(other) {\n        return other === this;\n    }\n};\n\n$.extend(CollectionTypeDescription.prototype, {\n    append: function(otherCollectionTypeDescription) {\n        if (\n            otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION\n        ) {\n            return this;\n        }\n        if (\n            otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION\n        ) {\n            return otherCollectionType;\n        }\n        return new CollectionTypeDescription(\n            this.collectionType +\n                \":\" +\n                otherCollectionTypeDescription.collectionType\n        );\n    },\n    canMatch: function(otherCollectionTypeDescription) {\n        if (\n            otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION\n        ) {\n            return false;\n        }\n        if (\n            otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION\n        ) {\n            return true;\n        }\n        return (\n            otherCollectionTypeDescription.collectionType == this.collectionType\n        );\n    },\n    canMapOver: function(otherCollectionTypeDescription) {\n        if (\n            otherCollectionTypeDescription === NULL_COLLECTION_TYPE_DESCRIPTION\n        ) {\n            return false;\n        }\n        if (\n            otherCollectionTypeDescription === ANY_COLLECTION_TYPE_DESCRIPTION\n        ) {\n            return false;\n        }\n        if (this.rank <= otherCollectionTypeDescription.rank) {\n            // Cannot map over self...\n            return false;\n        }\n        var requiredSuffix = otherCollectionTypeDescription.collectionType;\n        return this._endsWith(this.collectionType, requiredSuffix);\n    },\n    effectiveMapOver: function(otherCollectionTypeDescription) {\n        var otherCollectionType = otherCollectionTypeDescription.collectionType;\n        var effectiveCollectionType = this.collectionType.substring(\n            0,\n            this.collectionType.length - otherCollectionType.length - 1\n        );\n        return new CollectionTypeDescription(effectiveCollectionType);\n    },\n    equal: function(otherCollectionTypeDescription) {\n        return (\n            otherCollectionTypeDescription.collectionType == this.collectionType\n        );\n    },\n    toString: function() {\n        return \"CollectionType[\" + this.collectionType + \"]\";\n    },\n    _endsWith: function(str, suffix) {\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\n    }\n});\n\nvar TerminalMapping = Backbone.Model.extend({\n    initialize: function(attr) {\n        this.mapOver = attr.mapOver || NULL_COLLECTION_TYPE_DESCRIPTION;\n        this.terminal = attr.terminal;\n        this.terminal.terminalMapping = this;\n    },\n    disableMapOver: function() {\n        this.setMapOver(NULL_COLLECTION_TYPE_DESCRIPTION);\n    },\n    setMapOver: function(collectionTypeDescription) {\n        // TODO: Can I use \"attributes\" or something to auto trigger \"change\"\n        // event?\n        this.mapOver = collectionTypeDescription;\n        this.trigger(\"change\");\n    }\n});\n\nvar Terminal = Backbone.Model.extend({\n    initialize: function(attr) {\n        this.element = attr.element;\n        this.connectors = [];\n    },\n    connect: function(connector) {\n        this.connectors.push(connector);\n        if (this.node) {\n            this.node.markChanged();\n        }\n    },\n    disconnect: function(connector) {\n        this.connectors.splice($.inArray(connector, this.connectors), 1);\n        if (this.node) {\n            this.node.markChanged();\n            this.resetMappingIfNeeded();\n        }\n    },\n    redraw: function() {\n        $.each(this.connectors, (_, c) => {\n            c.redraw();\n        });\n    },\n    destroy: function() {\n        $.each(this.connectors.slice(), (_, c) => {\n            c.destroy();\n        });\n    },\n    destroyInvalidConnections: function() {\n        _.each(this.connectors, connector => {\n            connector && connector.destroyIfInvalid();\n        });\n    },\n    setMapOver: function(val) {\n        if (this.multiple) {\n            return; // Cannot set this to be multirun...\n        }\n\n        if (!this.mapOver().equal(val)) {\n            this.terminalMapping.setMapOver(val);\n            _.each(this.node.output_terminals, outputTerminal => {\n                outputTerminal.setMapOver(val);\n            });\n        }\n    },\n    mapOver: function() {\n        if (!this.terminalMapping) {\n            return NULL_COLLECTION_TYPE_DESCRIPTION;\n        } else {\n            return this.terminalMapping.mapOver;\n        }\n    },\n    isMappedOver: function() {\n        return (\n            this.terminalMapping && this.terminalMapping.mapOver.isCollection\n        );\n    },\n    resetMapping: function() {\n        this.terminalMapping.disableMapOver();\n    },\n\n    resetMappingIfNeeded: function() {} // Subclasses should override this...\n});\n\nvar OutputTerminal = Terminal.extend({\n    initialize: function(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.datatypes = attr.datatypes;\n    },\n\n    resetMappingIfNeeded: function() {\n        // If inputs were only mapped over to preserve\n        // an output just disconnected reset these...\n        if (\n            !this.node.hasConnectedOutputTerminals() &&\n            !this.node.hasConnectedMappedInputTerminals()\n        ) {\n            _.each(this.node.mappedInputTerminals(), mappedInput => {\n                mappedInput.resetMappingIfNeeded();\n            });\n        }\n\n        var noMappedInputs = !this.node.hasMappedOverInputTerminals();\n        if (noMappedInputs) {\n            this.resetMapping();\n        }\n    },\n\n    resetMapping: function() {\n        this.terminalMapping.disableMapOver();\n        _.each(this.connectors, connector => {\n            var connectedInput = connector.handle2;\n            if (connectedInput) {\n                // Not exactly right because this is still connected.\n                // Either rewrite resetMappingIfNeeded or disconnect\n                // and reconnect if valid.\n                connectedInput.resetMappingIfNeeded();\n                connector.destroyIfInvalid();\n            }\n        });\n    }\n});\n\nvar BaseInputTerminal = Terminal.extend({\n    initialize: function(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.update(attr.input); // subclasses should implement this...\n    },\n    canAccept: function(other) {\n        if (this._inputFilled()) {\n            return false;\n        } else {\n            return this.attachable(other);\n        }\n    },\n    resetMappingIfNeeded: function() {\n        var mapOver = this.mapOver();\n        if (!mapOver.isCollection) {\n            return;\n        }\n        // No output terminals are counting on this being mapped\n        // over if connected inputs are still mapped over or if none\n        // of the outputs are connected...\n        var reset =\n            this.node.hasConnectedMappedInputTerminals() ||\n            !this.node.hasConnectedOutputTerminals();\n        if (reset) {\n            this.resetMapping();\n        }\n    },\n    resetMapping: function() {\n        this.terminalMapping.disableMapOver();\n        if (!this.node.hasMappedOverInputTerminals()) {\n            _.each(this.node.output_terminals, terminal => {\n                // This shouldn't be called if there are mapped over\n                // outputs.\n                terminal.resetMapping();\n            });\n        }\n    },\n    connected: function() {\n        return this.connectors.length !== 0;\n    },\n    _inputFilled: function() {\n        var inputFilled;\n        if (!this.connected()) {\n            inputFilled = false;\n        } else {\n            if (this.multiple) {\n                if (this._collectionAttached()) {\n                    // Can only attach one collection to multiple input\n                    // data parameter.\n                    inputsFilled = true;\n                } else {\n                    inputFilled = false;\n                }\n            } else {\n                inputFilled = true;\n            }\n        }\n        return inputFilled;\n    },\n    _collectionAttached: function() {\n        if (!this.connected()) {\n            return false;\n        } else {\n            var firstOutput = this.connectors[0].handle1;\n            if (!firstOutput) {\n                return false;\n            } else {\n                if (\n                    firstOutput.isCollection ||\n                    firstOutput.isMappedOver() ||\n                    firstOutput.datatypes.indexOf(\"input_collection\") > 0\n                ) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        }\n    },\n    _mappingConstraints: function() {\n        // If this is a connected terminal, return list of collection types\n        // other terminals connected to node are constraining mapping to.\n        if (!this.node) {\n            return []; // No node - completely unconstrained\n        }\n        var mapOver = this.mapOver();\n        if (mapOver.isCollection) {\n            return [mapOver];\n        }\n\n        var constraints = [];\n        if (!this.node.hasConnectedOutputTerminals()) {\n            _.each(this.node.connectedMappedInputTerminals(), inputTerminal => {\n                constraints.push(inputTerminal.mapOver());\n            });\n        } else {\n            // All outputs should have same mapOver status - least specific.\n            constraints.push(\n                _.first(_.values(this.node.output_terminals)).mapOver()\n            );\n        }\n        return constraints;\n    },\n    _producesAcceptableDatatype: function(other) {\n        // other is a non-collection output...\n        for (var t in this.datatypes) {\n            var thisDatatype = this.datatypes[t];\n            if (thisDatatype == \"input\") {\n                return true;\n            }\n            var cat_outputs = new Array();\n            cat_outputs = cat_outputs.concat(other.datatypes);\n            if (other.node.post_job_actions) {\n                for (var pja_i in other.node.post_job_actions) {\n                    var pja = other.node.post_job_actions[pja_i];\n                    if (\n                        pja.action_type == \"ChangeDatatypeAction\" &&\n                        (pja.output_name == \"\" ||\n                            pja.output_name == other.name) &&\n                        pja.action_arguments\n                    ) {\n                        cat_outputs.push(pja.action_arguments[\"newtype\"]);\n                    }\n                }\n            }\n            // FIXME: No idea what to do about case when datatype is 'input'\n            for (var other_datatype_i in cat_outputs) {\n                var other_datatype = cat_outputs[other_datatype_i];\n                if (\n                    other_datatype == \"input\" ||\n                    other_datatype == \"_sniff_\" ||\n                    other_datatype == \"input_collection\" ||\n                    window.workflow_globals.app.isSubType(\n                        cat_outputs[other_datatype_i],\n                        thisDatatype\n                    )\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n    _otherCollectionType: function(other) {\n        var otherCollectionType = NULL_COLLECTION_TYPE_DESCRIPTION;\n        if (other.isCollection) {\n            otherCollectionType = other.collectionType;\n        }\n        var otherMapOver = other.mapOver();\n        if (otherMapOver.isCollection) {\n            otherCollectionType = otherMapOver.append(otherCollectionType);\n        }\n        return otherCollectionType;\n    }\n});\n\nvar InputTerminal = BaseInputTerminal.extend({\n    update: function(input) {\n        this.datatypes = input.extensions;\n        this.multiple = input.multiple;\n        this.collection = false;\n    },\n    connect: function(connector) {\n        BaseInputTerminal.prototype.connect.call(this, connector);\n        var other_output = connector.handle1;\n        if (!other_output) {\n            return;\n        }\n        var otherCollectionType = this._otherCollectionType(other_output);\n        if (otherCollectionType.isCollection) {\n            this.setMapOver(otherCollectionType);\n        }\n    },\n    attachable: function(other) {\n        var otherCollectionType = this._otherCollectionType(other);\n        var thisMapOver = this.mapOver();\n        if (otherCollectionType.isCollection) {\n            if (this.multiple) {\n                if (this.connected() && !this._collectionAttached()) {\n                    // if single inputs attached, cannot also attach a\n                    // collection (yet...)\n                    return false;\n                }\n                if (otherCollectionType.rank == 1) {\n                    return this._producesAcceptableDatatype(other);\n                } else {\n                    // TODO: Allow subcollection mapping over this as if it were\n                    // a list collection input.\n                    return false;\n                }\n            }\n            if (\n                thisMapOver.isCollection &&\n                thisMapOver.canMatch(otherCollectionType)\n            ) {\n                return this._producesAcceptableDatatype(other);\n            } else {\n                //  Need to check if this would break constraints...\n                var mappingConstraints = this._mappingConstraints();\n                if (\n                    mappingConstraints.every(\n                        _.bind(\n                            otherCollectionType.canMatch,\n                            otherCollectionType\n                        )\n                    )\n                ) {\n                    return this._producesAcceptableDatatype(other);\n                } else {\n                    return false;\n                }\n            }\n        } else if (thisMapOver.isCollection) {\n            // Attempting to match a non-collection output to an\n            // explicitly collection input.\n            return false;\n        }\n        return this._producesAcceptableDatatype(other);\n    }\n});\n\nvar InputCollectionTerminal = BaseInputTerminal.extend({\n    update: function(input) {\n        this.multiple = false;\n        this.collection = true;\n        this.datatypes = input.extensions;\n        var collectionTypes = [];\n        if (input.collection_types) {\n            _.each(input.collection_types, collectionType => {\n                collectionTypes.push(\n                    new CollectionTypeDescription(collectionType)\n                );\n            });\n        } else {\n            collectionTypes.push(ANY_COLLECTION_TYPE_DESCRIPTION);\n        }\n        this.collectionTypes = collectionTypes;\n    },\n    connect: function(connector) {\n        BaseInputTerminal.prototype.connect.call(this, connector);\n        var other = connector.handle1;\n        if (!other) {\n            return;\n        }\n\n        var effectiveMapOver = this._effectiveMapOver(other);\n        this.setMapOver(effectiveMapOver);\n    },\n    _effectiveMapOver: function(other) {\n        var collectionTypes = this.collectionTypes;\n        var otherCollectionType = this._otherCollectionType(other);\n        var canMatch = _.some(collectionTypes, collectionType =>\n            collectionType.canMatch(otherCollectionType)\n        );\n\n        if (!canMatch) {\n            for (var collectionTypeIndex in collectionTypes) {\n                var collectionType = collectionTypes[collectionTypeIndex];\n                if (otherCollectionType.canMapOver(collectionType)) {\n                    var effectiveMapOver = otherCollectionType.effectiveMapOver(\n                        collectionType\n                    );\n                    if (effectiveMapOver != NULL_COLLECTION_TYPE_DESCRIPTION) {\n                        return effectiveMapOver;\n                    }\n                }\n            }\n        }\n        return NULL_COLLECTION_TYPE_DESCRIPTION;\n    },\n    _effectiveCollectionTypes: function() {\n        var thisMapOver = this.mapOver();\n        return _.map(this.collectionTypes, t => thisMapOver.append(t));\n    },\n    attachable: function(other) {\n        var otherCollectionType = this._otherCollectionType(other);\n        if (otherCollectionType.isCollection) {\n            var effectiveCollectionTypes = this._effectiveCollectionTypes();\n            var thisMapOver = this.mapOver();\n            var canMatch = _.some(\n                effectiveCollectionTypes,\n                effectiveCollectionType =>\n                    effectiveCollectionType.canMatch(otherCollectionType)\n            );\n            if (canMatch) {\n                // Only way a direct match...\n                return this._producesAcceptableDatatype(other);\n                // Otherwise we need to mapOver\n            } else if (thisMapOver.isCollection) {\n                // In this case, mapOver already set and we didn't match skipping...\n                return false;\n            } else if (\n                _.some(this.collectionTypes, collectionType =>\n                    otherCollectionType.canMapOver(collectionType)\n                )\n            ) {\n                var effectiveMapOver = this._effectiveMapOver(other);\n                if (!effectiveMapOver.isCollection) {\n                    return false;\n                }\n                //  Need to check if this would break constraints...\n                var mappingConstraints = this._mappingConstraints();\n                if (mappingConstraints.every(effectiveMapOver.canMatch)) {\n                    return this._producesAcceptableDatatype(other);\n                }\n            }\n        }\n        return false;\n    }\n});\n\nvar OutputCollectionTerminal = Terminal.extend({\n    initialize: function(attr) {\n        Terminal.prototype.initialize.call(this, attr);\n        this.datatypes = attr.datatypes;\n        if (attr.collection_type) {\n            this.collectionType = new CollectionTypeDescription(\n                attr.collection_type\n            );\n        } else {\n            var collectionTypeSource = attr.collection_type_source;\n            if (!collectionTypeSource) {\n                console.log(\n                    \"Warning: No collection type or collection type source defined.\"\n                );\n            }\n            this.collectionType = ANY_COLLECTION_TYPE_DESCRIPTION;\n        }\n        this.isCollection = true;\n    },\n    update: function(output) {\n        var newCollectionType;\n        if (output.collection_type) {\n            newCollectionType = new CollectionTypeDescription(\n                output.collection_type\n            );\n        } else {\n            var collectionTypeSource = output.collection_type_source;\n            if (!collectionTypeSource) {\n                console.log(\n                    \"Warning: No collection type or collection type source defined.\"\n                );\n            }\n            newCollectionType = ANY_COLLECTION_TYPE_DESCRIPTION;\n        }\n\n        if (\n            newCollectionType.collectionType !=\n            this.collectionType.collectionType\n        ) {\n            _.each(this.connectors, connector => {\n                // TODO: consider checking if connection valid before removing...\n                connector.destroy();\n            });\n        }\n        this.collectionType = newCollectionType;\n    }\n});\n\nexport default {\n    InputTerminal: InputTerminal,\n    OutputTerminal: OutputTerminal,\n    InputCollectionTerminal: InputCollectionTerminal,\n    OutputCollectionTerminal: OutputCollectionTerminal,\n    TerminalMapping: TerminalMapping,\n\n    // test export\n    CollectionTypeDescription: CollectionTypeDescription,\n    NULL_COLLECTION_TYPE_DESCRIPTION: NULL_COLLECTION_TYPE_DESCRIPTION,\n    ANY_COLLECTION_TYPE_DESCRIPTION: ANY_COLLECTION_TYPE_DESCRIPTION\n};\n"]}