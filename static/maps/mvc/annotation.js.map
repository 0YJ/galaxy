{"version":3,"sources":["mvc/annotation.js"],"names":["define","baseMVC","_l","AnnotationEditor","Backbone","View","extend","LoggableMixin","HiddenUntilActivatedViewMixin","tagName","className","initialize","options","this","tooltipConfig","placement","listenTo","model","render","hiddenUntilActivated","$activator","view","$el","html","_template","$annotation","make_text_editable","use_textarea","on_finish","newAnnotation","text","save","annotation","silent","fail","previous","get","_","escape","join","find","remove","off","stopListening","prototype","call","toString"],"mappings":"AAAAA,QACI,eACA,qBACA,oBACD,SAAUC,EAASC,GAuEtB,OACIC,iBApEmBC,SAASC,KACvBC,OAAQL,EAAQM,eAChBD,OAAQL,EAAQO,+BAAgCF,QAErDG,QAAc,MACdC,UAAc,qBAGdC,WAAa,SAAUC,GACnBA,EAAUA,MACVC,KAAKC,cAAgBF,EAAQE,gBAAmBC,UAAW,UAG3DF,KAAKG,SAAUH,KAAKI,MAAO,oBAAqB,WAC5CJ,KAAKK,WAETL,KAAKM,qBAAsBP,EAAQQ,WAAYR,IAInDM,OAAS,WACL,GAAIG,GAAOR,IAcX,OAbAA,MAAKS,IAAIC,KAAMV,KAAKW,aAGpBX,KAAKY,cAAcC,oBACfC,cAAc,EACdC,UAAW,SAAUC,GACjBR,EAAKI,cAAcK,KAAMD,GACzBR,EAAKJ,MAAMc,MAAOC,WAAYH,IAAmBI,QAAQ,IACpDC,KAAM,WACHb,EAAKI,cAAcK,KAAMT,EAAKJ,MAAMkB,SAAU,oBAIvDtB,MAIXW,UAAY,WACR,GAAIQ,GAAanB,KAAKI,MAAMmB,IAAK,aACjC,QAEI,yBAA0BlC,EAAI,cAAgB,WAE9C,2BACImC,EAAEC,OAAQN,GACd,UACFO,KAAM,KAIZd,YAAc,WACV,MAAOZ,MAAKS,IAAIkB,KAAM,gBAI1BC,OAAS,WACL5B,KAAKY,YAAYiB,MACjB7B,KAAK8B,cAAe9B,KAAKI,OACzBb,SAASC,KAAKuC,UAAUH,OAAOI,KAAMhC,OAIzCiC,SAAW,WAAY,OAAS,oBAAqBjC,KAAKI,MAAQ,GAAI,KAAMsB,KAAK","file":"../../scripts/mvc/annotation.js","sourcesContent":["define([\n    \"mvc/base-mvc\",\n    \"utils/localization\",\n    \"ui/editable-text\",\n], function( baseMVC, _l ){\n// =============================================================================\n/** A view on any model that has a 'annotation' attribute\n */\nvar AnnotationEditor = Backbone.View\n        .extend( baseMVC.LoggableMixin )\n        .extend( baseMVC.HiddenUntilActivatedViewMixin ).extend({\n\n    tagName     : 'div',\n    className   : 'annotation-display',\n\n    /** Set up listeners, parse options */\n    initialize : function( options ){\n        options = options || {};\n        this.tooltipConfig = options.tooltipConfig || { placement: 'bottom' };\n        //console.debug( this, options );\n        // only listen to the model only for changes to annotations\n        this.listenTo( this.model, 'change:annotation', function(){\n            this.render();\n        });\n        this.hiddenUntilActivated( options.$activator, options );\n    },\n\n    /** Build the DOM elements, call select to on the created input, and set up behaviors */\n    render : function(){\n        var view = this;\n        this.$el.html( this._template() );\n\n        //TODO: handle empties better\n        this.$annotation().make_text_editable({\n            use_textarea: true,\n            on_finish: function( newAnnotation ){\n                view.$annotation().text( newAnnotation );\n                view.model.save({ annotation: newAnnotation }, { silent: true })\n                    .fail( function(){\n                        view.$annotation().text( view.model.previous( 'annotation' ) );\n                    });\n            }\n        });\n        return this;\n    },\n\n    /** @returns {String} the html text used to build the view's DOM */\n    _template : function(){\n        var annotation = this.model.get( 'annotation' );\n        return [\n            //TODO: make prompt optional\n            '<label class=\"prompt\">', _l( 'Annotation' ), '</label>',\n            // set up initial tags by adding as CSV to input vals (necc. to init select2)\n            '<div class=\"annotation\">',\n                _.escape( annotation ),\n            '</div>'\n        ].join( '' );\n    },\n\n    /** @returns {jQuery} the main element for this view */\n    $annotation : function(){\n        return this.$el.find( '.annotation' );\n    },\n\n    /** shut down event listeners and remove this view's DOM */\n    remove : function(){\n        this.$annotation.off();\n        this.stopListening( this.model );\n        Backbone.View.prototype.remove.call( this );\n    },\n\n    /** string rep */\n    toString : function(){ return [ 'AnnotationEditor(', this.model + '', ')' ].join(''); }\n});\n// =============================================================================\nreturn {\n    AnnotationEditor : AnnotationEditor\n};\n});\n"]}