{"version":3,"sources":["mvc/annotation.js"],"names":["define","baseMVC","_l","AnnotationEditor","Backbone","View","className","LoggableMixin","extend","HiddenUntilActivatedViewMixin","initialize","options","listenTo","this","tooltipConfig","placement","model","render","$activator","view","$annotation","use_textarea","on_finish","newAnnotation","text","save","annotation","silent","fail","previous","_template","get","_","escape","join","$el","find","remove","off","stopListening","prototype","call","toString"],"mappings":"aAAAA,QACI,eADJA,qBAKA,oBACA,SAAAC,EAAAC,GAqEA,OACIC,iBAlE4DC,SAAAC,KAG5DC,OAAAA,EAAcC,eAHTC,OAAQP,EAAQQ,+BAAgCD,QAMrDE,QAAAA,MACIC,UAAAA,qBAGAD,WAAA,SAAAC,GACAA,EAAKC,MACDC,KAAAC,cAAAH,EAAAG,gBAAAC,UAAA,UAGPF,KAf2DD,SAAAC,KAAAG,MAAA,oBAAA,WAYpDH,KAAKI,WAMbA,KAAAA,qBAAmBN,EAAAO,WAAAP,IAIfM,OAAA,WACA,IAAAE,EAAKC,KAeL,OAdIC,KAAAA,IAAAA,KAAAA,KAAAA,aAGIF,KAAAA,cAAKH,oBAEGG,cAAAA,EACHG,UAHL,SAAAC,GAIHJ,EAAAC,cAAAI,KAAAD,GARLJ,EAAAH,MAAAS,MAAAC,WAAAH,IAAAI,QAAA,IAUOC,KAAP,WAjCwDT,EAAAC,cAAAI,KAAAL,EAAAH,MAAAa,SAAA,oBAsCxDhB,MAIIiB,UAAA,WACA,IAAAJ,EAAAb,KAAAG,MAAAe,IACIC,cAGX,OAED,yBAAA9B,EAAA,cAAA,WAEI,2BAnDwD8B,EAAAC,OAAAP,GA6CpD,UASRQ,KAAA,KAII9B,YAAAA,WACH,OA3D2DS,KAAAsB,IAAAC,KAAA,gBA8DrCC,OAAA,WAAgExB,KAAAO,YAAAkB,MAhE3FzB,KAAA0B,cAAA1B,KAAAG,OAkEAZ,SAAAC,KAAAmC,UAAAH,OAAAI,KAAA5B,OA1EA6B,SAAA,WAAA,OAAA,oBAAA7B,KAAAG,MAAA,GAAA,KAAAkB,KAAA","file":"../../scripts/mvc/annotation.js","sourcesContent":["define([\n    \"mvc/base-mvc\",\n    \"utils/localization\",\n    \"ui/editable-text\",\n], function( baseMVC, _l ){\n// =============================================================================\n/** A view on any model that has a 'annotation' attribute\n */\nvar AnnotationEditor = Backbone.View\n        .extend( baseMVC.LoggableMixin )\n        .extend( baseMVC.HiddenUntilActivatedViewMixin ).extend({\n\n    tagName     : 'div',\n    className   : 'annotation-display',\n\n    /** Set up listeners, parse options */\n    initialize : function( options ){\n        options = options || {};\n        this.tooltipConfig = options.tooltipConfig || { placement: 'bottom' };\n        //console.debug( this, options );\n        // only listen to the model only for changes to annotations\n        this.listenTo( this.model, 'change:annotation', function(){\n            this.render();\n        });\n        this.hiddenUntilActivated( options.$activator, options );\n    },\n\n    /** Build the DOM elements, call select to on the created input, and set up behaviors */\n    render : function(){\n        var view = this;\n        this.$el.html( this._template() );\n\n        //TODO: handle empties better\n        this.$annotation().make_text_editable({\n            use_textarea: true,\n            on_finish: function( newAnnotation ){\n                view.$annotation().text( newAnnotation );\n                view.model.save({ annotation: newAnnotation }, { silent: true })\n                    .fail( function(){\n                        view.$annotation().text( view.model.previous( 'annotation' ) );\n                    });\n            }\n        });\n        return this;\n    },\n\n    /** @returns {String} the html text used to build the view's DOM */\n    _template : function(){\n        var annotation = this.model.get( 'annotation' );\n        return [\n            //TODO: make prompt optional\n            '<label class=\"prompt\">', _l( 'Annotation' ), '</label>',\n            // set up initial tags by adding as CSV to input vals (necc. to init select2)\n            '<div class=\"annotation\">',\n                _.escape( annotation ),\n            '</div>'\n        ].join( '' );\n    },\n\n    /** @returns {jQuery} the main element for this view */\n    $annotation : function(){\n        return this.$el.find( '.annotation' );\n    },\n\n    /** shut down event listeners and remove this view's DOM */\n    remove : function(){\n        this.$annotation.off();\n        this.stopListening( this.model );\n        Backbone.View.prototype.remove.call( this );\n    },\n\n    /** string rep */\n    toString : function(){ return [ 'AnnotationEditor(', this.model + '', ')' ].join(''); }\n});\n// =============================================================================\nreturn {\n    AnnotationEditor : AnnotationEditor\n};\n});\n"]}