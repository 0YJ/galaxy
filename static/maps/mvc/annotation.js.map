{"version":3,"sources":["mvc/annotation.js"],"names":["AnnotationEditor","Backbone","View","extend","_baseMvc2","default","LoggableMixin","HiddenUntilActivatedViewMixin","tagName","className","initialize","options","this","tooltipConfig","placement","listenTo","model","render","hiddenUntilActivated","$activator","view","on_finish","$el","html","_template","$annotation","make_text_editable","use_textarea","text","newAnnotation","save","annotation","silent","fail","previous","get","_localization2","_","escape","join","find","remove","off","stopListening","call","toString"],"mappings":"8OAMIA,EAAmBC,SAASC,KAC3BC,OAAOC,EAAAC,QAAQC,eACfH,OAAOC,EAAAC,QAAQE,+BACfJ,QACGK,QAAS,MACTC,UAAW,qBAGXC,WAAY,SAASC,GACjBA,EAAUA,MACVC,KAAKC,cAAgBF,EAAQE,gBAbzCC,UAAA,UAOQN,KAASO,SADLH,KAAAI,MAAA,oBAAA,WAEJP,KAAWQ,WAEXL,KAAAM,qBAAAP,EAAAQ,WAAAR,IAIQG,OAAAA,WAD0C,IAA9CM,EAAAR,KAmBIS,OAhBJT,KAAAU,IAAAC,KAAAX,KAAAY,aAGIZ,KAAAa,cAAAC,oBADJC,cAAA,EAGAN,UAAKH,SAAAA,GAfLE,EAAAK,cAAAG,KAAAC,GA4BQT,EAAKJ,MAVjBc,MAAAC,WAAAF,IAAAG,QAAA,IACQC,KAAA,WACJb,EACmBI,cAYEI,KAAKR,EAAKJ,MAAMkB,SAAS,oBAP1Cb,MAQSG,UAAA,WACR,IAAAO,EAAAnB,KAAAI,MAAAmB,IAAA,cAXiC,OAxBtC,0BA8CI,EAAAC,EAAA/B,SAAG,cANX,WAEQ0B,2BACJM,EAAAC,OAAOP,GACH,UACAQ,KAAA,KAWRd,YAAa,WADb,OAAAb,KAAAU,IAAAkB,KAAA,gBAMAC,OAAQ,WADR7B,KAAAa,YAAAiB,MACAD,KAAQE,cAAA/B,KAAWI,OACff,SAAKwB,KAAAA,UAALgB,OAAAG,KAAAhC,OAMJiC,SAAU,WADV,OAAA,oBAAAjC,KAAAI,MAAA,GAAA,KAAAuB,KAAA,kBAKRvC,iBAAAA","file":"../../scripts/mvc/annotation.js","sourcesContent":["import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/editable-text\";\n// =============================================================================\n/** A view on any model that has a 'annotation' attribute\n */\nvar AnnotationEditor = Backbone.View\n    .extend(baseMVC.LoggableMixin)\n    .extend(baseMVC.HiddenUntilActivatedViewMixin)\n    .extend({\n        tagName: \"div\",\n        className: \"annotation-display\",\n\n        /** Set up listeners, parse options */\n        initialize: function(options) {\n            options = options || {};\n            this.tooltipConfig = options.tooltipConfig || {\n                placement: \"bottom\"\n            };\n            //console.debug( this, options );\n            // only listen to the model only for changes to annotations\n            this.listenTo(this.model, \"change:annotation\", function() {\n                this.render();\n            });\n            this.hiddenUntilActivated(options.$activator, options);\n        },\n\n        /** Build the DOM elements, call select to on the created input, and set up behaviors */\n        render: function() {\n            var view = this;\n            this.$el.html(this._template());\n\n            //TODO: handle empties better\n            this.$annotation().make_text_editable({\n                use_textarea: true,\n                on_finish: function(newAnnotation) {\n                    view.$annotation().text(newAnnotation);\n                    view.model\n                        .save({ annotation: newAnnotation }, { silent: true })\n                        .fail(() => {\n                            view\n                                .$annotation()\n                                .text(view.model.previous(\"annotation\"));\n                        });\n                }\n            });\n            return this;\n        },\n\n        /** @returns {String} the html text used to build the view's DOM */\n        _template: function() {\n            var annotation = this.model.get(\"annotation\");\n            return [\n                //TODO: make prompt optional\n                '<label class=\"prompt\">',\n                _l(\"Annotation\"),\n                \"</label>\",\n                // set up initial tags by adding as CSV to input vals (necc. to init select2)\n                '<div class=\"annotation\">',\n                _.escape(annotation),\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        /** @returns {jQuery} the main element for this view */\n        $annotation: function() {\n            return this.$el.find(\".annotation\");\n        },\n\n        /** shut down event listeners and remove this view's DOM */\n        remove: function() {\n            this.$annotation.off();\n            this.stopListening(this.model);\n            Backbone.View.prototype.remove.call(this);\n        },\n\n        /** string rep */\n        toString: function() {\n            return [\"AnnotationEditor(\", this.model + \"\", \")\"].join(\"\");\n        }\n    });\n// =============================================================================\nexport default {\n    AnnotationEditor: AnnotationEditor\n};\n"]}