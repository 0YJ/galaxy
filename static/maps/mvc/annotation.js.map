{"version":3,"sources":["mvc/annotation.js"],"names":["_baseMvc","require","_localization","AnnotationEditor","Backbone","View","extend","_baseMvc2","default","LoggableMixin","HiddenUntilActivatedViewMixin","tagName","className","initialize","options","this","tooltipConfig","placement","render","hiddenUntilActivated","$activator","use_textarea","$el","html","_template","listenTo","model","on_finish","newAnnotation","view","save","annotation","silent","fail","$annotation","previous","get","_localization2","join","find","remove","off","stopListening","prototype","call","toString"],"mappings":"4IAAA,IAAAA,SAAAC,QAAA,2DACAC,cAAAD,QAAA,2EACAA,QAAA,oBAFA,IAAAE,iBAAAC,SAAAC,KAOKC,OAAOC,UAAAC,QAAQC,eACfH,OAAOC,UAAAC,QAAQE,+BACfJ,QARLK,QAAA,MAUQC,UAAW,qBATnBC,WAAA,SAAAC,GAaYA,EAAUA,MACVC,KAAKC,cAAgBF,EAAQE,gBACzBC,UAAW,UAXvBd,KAAAA,SAAmBC,KAAAA,MAClBE,oBAAO,WAGKS,KADLG,WAeAH,KAAKI,qBAAqBL,EAAQM,WAAYN,IAR9CI,OAAKF,WACDC,IAAAA,EAAWF,KAiBXM,OAlBJN,KAAAO,IAAAC,KAAAR,KAAAS,aAKAT,KAAKU,cAAcC,oBACfL,cAAA,EADJM,UAAA,SAAAC,GAGKT,EAAAA,cAAqBL,KAAQM,GAflCS,EAAAH,MA6BaI,MAAOC,WAAYH,IAAmBI,QAAQ,IAX/DC,KAAA,WACQJ,EACJK,cACmBV,KAAnBK,EAAAH,MAAAS,SAAA,oBAIId,MAMYQ,UAAAA,WAGH,IAAAE,EANLhB,KAAAW,MAAAU,IAAA,cAOH,OAEE,0BArCP,EAAAC,eAAA7B,SAAA,cA+CI,WANG,2BACHuB,EAAAA,OAAaA,GACV,UACHO,KAAA,KA5CJJ,YAAA,WAyDA,OAAOnB,KAAKO,IAAIiB,KAAK,gBAzDrBC,OAAA,WA8DAzB,KAAKmB,YAAYO,MAFrB1B,KAAA2B,cAAA3B,KAAAW,OACQtB,SAAAC,KAAAsC,UAAWH,OAAAI,KAAA7B,OA7Df8B,SAAA,WAqEA,OAAQ,oBAAqB9B,KAAKW,MAAQ,GAAI,KAAKY,KAAK,wBAxEpEnC,iBAAAA","file":"../../scripts/mvc/annotation.js","sourcesContent":["import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/editable-text\";\n// =============================================================================\n/** A view on any model that has a 'annotation' attribute\n */\nvar AnnotationEditor = Backbone.View\n    .extend(baseMVC.LoggableMixin)\n    .extend(baseMVC.HiddenUntilActivatedViewMixin)\n    .extend({\n        tagName: \"div\",\n        className: \"annotation-display\",\n\n        /** Set up listeners, parse options */\n        initialize: function(options) {\n            options = options || {};\n            this.tooltipConfig = options.tooltipConfig || {\n                placement: \"bottom\"\n            };\n            //console.debug( this, options );\n            // only listen to the model only for changes to annotations\n            this.listenTo(this.model, \"change:annotation\", function() {\n                this.render();\n            });\n            this.hiddenUntilActivated(options.$activator, options);\n        },\n\n        /** Build the DOM elements, call select to on the created input, and set up behaviors */\n        render: function() {\n            var view = this;\n            this.$el.html(this._template());\n\n            //TODO: handle empties better\n            this.$annotation().make_text_editable({\n                use_textarea: true,\n                on_finish: function(newAnnotation) {\n                    view.$annotation().text(newAnnotation);\n                    view.model\n                        .save({ annotation: newAnnotation }, { silent: true })\n                        .fail(function() {\n                            view\n                                .$annotation()\n                                .text(view.model.previous(\"annotation\"));\n                        });\n                }\n            });\n            return this;\n        },\n\n        /** @returns {String} the html text used to build the view's DOM */\n        _template: function() {\n            var annotation = this.model.get(\"annotation\");\n            return [\n                //TODO: make prompt optional\n                '<label class=\"prompt\">',\n                _l(\"Annotation\"),\n                \"</label>\",\n                // set up initial tags by adding as CSV to input vals (necc. to init select2)\n                '<div class=\"annotation\">',\n                _.escape(annotation),\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        /** @returns {jQuery} the main element for this view */\n        $annotation: function() {\n            return this.$el.find(\".annotation\");\n        },\n\n        /** shut down event listeners and remove this view's DOM */\n        remove: function() {\n            this.$annotation.off();\n            this.stopListening(this.model);\n            Backbone.View.prototype.remove.call(this);\n        },\n\n        /** string rep */\n        toString: function() {\n            return [\"AnnotationEditor(\", this.model + \"\", \")\"].join(\"\");\n        }\n    });\n// =============================================================================\nexport default {\n    AnnotationEditor: AnnotationEditor\n};\n"]}