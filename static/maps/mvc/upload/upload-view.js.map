{"version":3,"sources":["mvc/upload/upload-view.js"],"names":["define","Utils","Modal","Tabs","UploadButton","UploadViewDefault","UploadViewComposite","UploadViewCollection","Backbone","View","extend","options","nginx_upload_path","ftp_upload_site","default_genome","default_extension","height","width","auto","id","text","list_extensions","list_genomes","initialize","this","self","merge","ui_button","onclick","e","preventDefault","onunload","model","get","percentage","setElement","$el","Galaxy","root","url","datatypes","success","key","push","extension","description","description_url","sort","a","b","toLowerCase","a_text","b_text","datatypes_disable_auto","genomes","show","currHistoryPanel","user","window","setTimeout","tabs","add","title","current_user","default_view","composite_view","collection_view","modal","body","title_separator","currentFtp","toData","data","payload","tool_id","history_id","currentHistory","inputs","files","items","length","error_message","it","index","prefix","set","name","file","stringify"],"mappings":"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","file":"../../../scripts/mvc/upload/upload-view.js","sourcesContent":["/** Upload app contains the upload progress button and upload modal, compiles model data for API request **/\ndefine([ 'utils/utils', 'mvc/ui/ui-modal', 'mvc/ui/ui-tabs', 'mvc/upload/upload-button', 'mvc/upload/default/default-view', 'mvc/upload/composite/composite-view', 'mvc/upload/collection/collection-view'],\nfunction( Utils, Modal, Tabs, UploadButton, UploadViewDefault, UploadViewComposite, UploadViewCollection ) {\n    return Backbone.View.extend({\n        options : {\n            nginx_upload_path   : '',\n            ftp_upload_site     : 'n/a',\n            default_genome      : '?',\n            default_extension   : 'auto',\n            height              : 500,\n            width               : 900,\n            auto                : {\n                id          : 'auto',\n                text        : 'Auto-detect',\n                description : 'This system will try to detect the file type automatically. If your file is not detected properly as one of the known formats, it most likely means that it has some format problems (e.g., different number of columns on different rows). You can still coerce the system to set your data to the format you think it should be.  You can also upload compressed files, which will automatically be decompressed.'\n            }\n        },\n\n        // contains all available dataset extensions/types\n        list_extensions: [],\n\n        // contains all available genomes\n        list_genomes: [],\n\n        initialize: function( options ) {\n            var self = this;\n            this.options = Utils.merge( options, this.options );\n\n            // create view for upload/progress button\n            this.ui_button = new UploadButton.View({\n                onclick     : function(e) {\n                    e.preventDefault();\n                    self.show()\n                },\n                onunload    : function() {\n                    var percentage = self.ui_button.model.get('percentage', 0);\n                    if (percentage > 0 && percentage < 100) {\n                        return 'Several uploads are queued.';\n                    }\n                }\n            });\n\n            // set element to button view\n            this.setElement( this.ui_button.$el );\n\n            // load extensions\n            var self = this;\n            Utils.get({\n                url     : Galaxy.root + 'api/datatypes?extension_only=False',\n                success : function( datatypes ) {\n                    for ( var key in datatypes ) {\n                        self.list_extensions.push({\n                            id              : datatypes[ key ].extension,\n                            text            : datatypes[ key ].extension,\n                            description     : datatypes[ key ].description,\n                            description_url : datatypes[ key ].description_url,\n                            composite_files : datatypes[ key ].composite_files\n                        });\n                    }\n                    self.list_extensions.sort( function( a, b ) {\n                        var a_text = a.text && a.text.toLowerCase();\n                        var b_text = b.text && b.text.toLowerCase();\n                        return a_text > b_text ? 1 : a_text < b_text ? -1 : 0;\n                    });\n                    if ( !self.options.datatypes_disable_auto ) {\n                        self.list_extensions.unshift( self.options.auto );\n                    }\n                }\n            });\n\n            // load genomes\n            Utils.get({\n                url     : Galaxy.root + 'api/genomes',\n                success : function( genomes ) {\n                    for ( var key in genomes ) {\n                        self.list_genomes.push({\n                            id      : genomes[ key ][ 1 ],\n                            text    : genomes[ key ][ 0 ]\n                        });\n                    }\n                    self.list_genomes.sort( function( a, b ) {\n                        if ( a.id == self.options.default_genome ) { return -1; }\n                        if ( b.id == self.options.default_genome ) { return 1; }\n                        return a.text > b.text ? 1 : a.text < b.text ? -1 : 0;\n                    });\n                }\n            });\n        },\n\n        /** Show/hide upload dialog */\n        show: function () {\n            var self = this;\n            if ( !Galaxy.currHistoryPanel || !Galaxy.currHistoryPanel.model ) {\n                window.setTimeout(function() { self.show() }, 500)\n                return;\n            }\n            this.current_user = Galaxy.user.id;\n            if ( !this.modal ) {\n                this.tabs = new Tabs.View();\n                this.default_view = new UploadViewDefault( this );\n                this.tabs.add({\n                    id      : 'regular',\n                    title   : 'Regular',\n                    $el     : this.default_view.$el\n                });\n                this.composite_view = new UploadViewComposite( this );\n                this.tabs.add({\n                    id      : 'composite',\n                    title   : 'Composite',\n                    $el     : this.composite_view.$el\n                });\n                this.collection_view = new UploadViewCollection( this );\n                this.tabs.add({\n                    id      : 'collection',\n                    title   : 'Collection',\n                    $el     : this.collection_view.$el\n                })\n                this.modal = new Modal.View({\n                    title           : 'Download from web or upload from disk',\n                    body            : this.tabs.$el,\n                    height          : this.options.height,\n                    width           : this.options.width,\n                    closing_events  : true,\n                    title_separator : false\n                });\n            }\n            this.modal.show();\n        },\n\n        /** Refresh user and current history */\n        currentHistory: function() {\n            return this.current_user && Galaxy.currHistoryPanel.model.get( 'id' );\n        },\n\n        /** Get ftp configuration */\n        currentFtp: function() {\n            return this.current_user && this.options.ftp_upload_site;\n        },\n\n        /**\n          * Package API data from array of models\n          * @param{Array} items - Upload items/rows filtered from a collection\n        */\n        toData: function( items, history_id ) {\n            // create dictionary for data submission\n            var data = {\n                payload: {\n                    'tool_id'       : 'upload1',\n                    'history_id'    : history_id || this.currentHistory(),\n                    'inputs'        : {}\n                },\n                files: [],\n                error_message: null\n            }\n            // add upload tools input data\n            if ( items && items.length > 0 ) {\n                var inputs = {};\n                inputs[ 'dbkey' ] = items[0].get( 'genome', null );\n                inputs[ 'file_type' ] = items[0].get( 'extension', null );\n                for ( var index in items ) {\n                    var it = items[ index ];\n                    it.set( 'status', 'running' );\n                    if ( it.get( 'file_size' ) > 0 ) {\n                        var prefix = 'files_' + index + '|';\n                        inputs[ prefix + 'type' ] = 'upload_dataset';\n                        inputs[ prefix + 'space_to_tab' ] = it.get( 'space_to_tab' ) && 'Yes' || null;\n                        inputs[ prefix + 'to_posix_lines' ] = it.get( 'to_posix_lines' ) && 'Yes' || null;\n                        switch ( it.get( 'file_mode' ) ) {\n                            case 'new':\n                                inputs[ prefix + 'url_paste' ] = it.get( 'url_paste' );\n                                break;\n                            case 'ftp':\n                                inputs[ prefix + 'ftp_files' ] = it.get( 'file_path' );\n                                break;\n                            case 'local':\n                                data.files.push( { name: prefix + 'file_data', file: it.get( 'file_data' ) } );\n                        }\n                    } else {\n                        data.error_message = 'Upload content incomplete.';\n                        it.set( 'status', 'error' );\n                        it.set( 'info', data.error_message );\n                        break;\n                    }\n                }\n                data.payload.inputs = JSON.stringify( inputs );\n            }\n            return data;\n        }\n    });\n});\n"]}