{"version":3,"sources":["mvc/upload/upload-view.js"],"names":["define","Utils","Modal","Tabs","UploadButton","UploadViewDefault","UploadViewComposite","UploadViewCollection","Backbone","View","extend","options","nginx_upload_path","ftp_upload_site","default_genome","default_extension","height","width","auto","id","text","description","list_extensions","list_genomes","initialize","self","this","merge","ui_button","onclick","e","preventDefault","show","onunload","percentage","model","get","setElement","$el","url","Galaxy","root","success","datatypes","key","push","extension","description_url","composite_files","sort","a","b","a_text","toLowerCase","b_text","datatypes_disable_auto","unshift","genomes","currHistoryPanel","window","setTimeout","current_user","user","modal","tabs","default_view","add","title","composite_view","collection_view","body","closing_events","title_separator","currentHistory","currentFtp","toData","items","history_id","data","payload","tool_id","inputs","files","error_message","length","index","it","set","prefix","name","file","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/upload/upload-view.js","sourcesContent":["/** Upload app contains the upload progress button and upload modal, compiles model data for API request **/\ndefine([ 'utils/utils', 'mvc/ui/ui-modal', 'mvc/ui/ui-tabs', 'mvc/upload/upload-button', 'mvc/upload/default/default-view', 'mvc/upload/composite/composite-view', 'mvc/upload/collection/collection-view'],\nfunction( Utils, Modal, Tabs, UploadButton, UploadViewDefault, UploadViewComposite, UploadViewCollection ) {\n    return Backbone.View.extend({\n        options : {\n            nginx_upload_path   : '',\n            ftp_upload_site     : 'n/a',\n            default_genome      : '?',\n            default_extension   : 'auto',\n            height              : 500,\n            width               : 900,\n            auto                : {\n                id          : 'auto',\n                text        : 'Auto-detect',\n                description : 'This system will try to detect the file type automatically. If your file is not detected properly as one of the known formats, it most likely means that it has some format problems (e.g., different number of columns on different rows). You can still coerce the system to set your data to the format you think it should be.  You can also upload compressed files, which will automatically be decompressed.'\n            }\n        },\n\n        // contains all available dataset extensions/types\n        list_extensions: [],\n\n        // contains all available genomes\n        list_genomes: [],\n\n        initialize: function( options ) {\n            var self = this;\n            this.options = Utils.merge( options, this.options );\n\n            // create view for upload/progress button\n            this.ui_button = new UploadButton.View({\n                onclick     : function(e) {\n                    e.preventDefault();\n                    self.show()\n                },\n                onunload    : function() {\n                    var percentage = self.ui_button.model.get('percentage', 0);\n                    if (percentage > 0 && percentage < 100) {\n                        return 'Several uploads are queued.';\n                    }\n                }\n            });\n\n            // set element to button view\n            this.setElement( this.ui_button.$el );\n\n            // load extensions\n            var self = this;\n            Utils.get({\n                url     : Galaxy.root + 'api/datatypes?extension_only=False',\n                success : function( datatypes ) {\n                    for ( key in datatypes ) {\n                        self.list_extensions.push({\n                            id              : datatypes[ key ].extension,\n                            text            : datatypes[ key ].extension,\n                            description     : datatypes[ key ].description,\n                            description_url : datatypes[ key ].description_url,\n                            composite_files : datatypes[ key ].composite_files\n                        });\n                    }\n                    self.list_extensions.sort( function( a, b ) {\n                        var a_text = a.text && a.text.toLowerCase();\n                        var b_text = b.text && b.text.toLowerCase();\n                        return a_text > b_text ? 1 : a_text < b_text ? -1 : 0;\n                    });\n                    if ( !self.options.datatypes_disable_auto ) {\n                        self.list_extensions.unshift( self.options.auto );\n                    }\n                }\n            });\n\n            // load genomes\n            Utils.get({\n                url     : Galaxy.root + 'api/genomes',\n                success : function( genomes ) {\n                    for ( key in genomes ) {\n                        self.list_genomes.push({\n                            id      : genomes[ key ][ 1 ],\n                            text    : genomes[ key ][ 0 ]\n                        });\n                    }\n                    self.list_genomes.sort( function( a, b ) {\n                        if ( a.id == self.options.default_genome ) { return -1; }\n                        if ( b.id == self.options.default_genome ) { return 1; }\n                        return a.text > b.text ? 1 : a.text < b.text ? -1 : 0;\n                    });\n                }\n            });\n        },\n\n        /** Show/hide upload dialog */\n        show: function () {\n            var self = this;\n            if ( !Galaxy.currHistoryPanel || !Galaxy.currHistoryPanel.model ) {\n                window.setTimeout(function() { self.show() }, 500)\n                return;\n            }\n            this.current_user = Galaxy.user.id;\n            if ( !this.modal ) {\n                this.tabs = new Tabs.View();\n                this.default_view = new UploadViewDefault( this );\n                this.tabs.add({\n                    id      : 'regular',\n                    title   : 'Regular',\n                    $el     : this.default_view.$el\n                });\n                this.composite_view = new UploadViewComposite( this );\n                this.tabs.add({\n                    id      : 'composite',\n                    title   : 'Composite',\n                    $el     : this.composite_view.$el\n                });\n                this.collection_view = new UploadViewCollection( this );\n                this.tabs.add({\n                    id      : 'collection',\n                    title   : 'Collection',\n                    $el     : this.collection_view.$el\n                })\n                this.modal = new Modal.View({\n                    title           : 'Download from web or upload from disk',\n                    body            : this.tabs.$el,\n                    height          : this.options.height,\n                    width           : this.options.width,\n                    closing_events  : true,\n                    title_separator : false\n                });\n            }\n            this.modal.show();\n        },\n\n        /** Refresh user and current history */\n        currentHistory: function() {\n            return this.current_user && Galaxy.currHistoryPanel.model.get( 'id' );\n        },\n\n        /** Get ftp configuration */\n        currentFtp: function() {\n            return this.current_user && this.options.ftp_upload_site;\n        },\n\n        /**\n          * Package API data from array of models\n          * @param{Array} items - Upload items/rows filtered from a collection\n        */\n        toData: function( items, history_id ) {\n            // create dictionary for data submission\n            var data = {\n                payload: {\n                    'tool_id'       : 'upload1',\n                    'history_id'    : history_id || this.currentHistory(),\n                    'inputs'        : {}\n                },\n                files: [],\n                error_message: null\n            }\n            // add upload tools input data\n            if ( items && items.length > 0 ) {\n                var inputs = {};\n                inputs[ 'dbkey' ] = items[0].get( 'genome', null );\n                inputs[ 'file_type' ] = items[0].get( 'extension', null );\n                for ( var index in items ) {\n                    var it = items[ index ];\n                    it.set( 'status', 'running' );\n                    if ( it.get( 'file_size' ) > 0 ) {\n                        var prefix = 'files_' + index + '|';\n                        inputs[ prefix + 'type' ] = 'upload_dataset';\n                        inputs[ prefix + 'space_to_tab' ] = it.get( 'space_to_tab' ) && 'Yes' || null;\n                        inputs[ prefix + 'to_posix_lines' ] = it.get( 'to_posix_lines' ) && 'Yes' || null;\n                        switch ( it.get( 'file_mode' ) ) {\n                            case 'new':\n                                inputs[ prefix + 'url_paste' ] = it.get( 'url_paste' );\n                                break;\n                            case 'ftp':\n                                inputs[ prefix + 'ftp_files' ] = it.get( 'file_path' );\n                                break;\n                            case 'local':\n                                data.files.push( { name: prefix + 'file_data', file: it.get( 'file_data' ) } );\n                        }\n                    } else {\n                        data.error_message = 'Upload content incomplete.';\n                        it.set( 'status', 'error' );\n                        it.set( 'info', data.error_message );\n                        break;\n                    }\n                }\n                data.payload.inputs = JSON.stringify( inputs );\n            }\n            return data;\n        }\n    });\n});\n"]}