{"version":3,"sources":["mvc/tool/tool-form-base.js"],"names":["define","Utils","Deferred","Ui","FormBase","CitationModel","CitationView","extend","initialize","options","this","self","deferred","call","prototype","model","attributes","execute","process","get","parent","Galaxy","currHistoryPanel","listenTo","$el","on","remove","hide","debug","_buildForm","set","title","name","description","version","operations","_operations","onchange","render","$","addClass","append","_footer","_buildModel","new_options","hide_message","id","build_data","job_id","build_url","root","params","tool_id","url","data","display","success","window","location","message","update","status","persistent","response","err_msg","param","redirect","error_message","Message","large","modal","show","body","emit","reject","icon","narrow","versions_button","versions","length","tooltip","i","sustain_version","replace","onclick","menu_button","ButtonMenu","addMenu","biostar_url","open","origin","user","href","requirements","requirements_visible","portlet","collapsed","expand","_templateRequirements","sharable_url","menu","_templateHelp","citations","CitationListView","el","$citations","collection","citation_list_view","$tmpl","help","find","attr","nreq","req","_","each","text","requirements_message"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-base.js","sourcesContent":["/**\n    This is the base class of the tool form plugin. This class is e.g. inherited by the regular and the workflow tool form.\n*/\ndefine( [ 'utils/utils', 'utils/deferred', 'mvc/ui/ui-misc', 'mvc/form/form-view', 'mvc/citation/citation-model', 'mvc/citation/citation-view' ],\n    function( Utils, Deferred, Ui, FormBase, CitationModel, CitationView ) {\n    return FormBase.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.deferred = new Deferred();\n            FormBase.prototype.initialize.call( this, options );\n            if ( this.model.get( 'inputs' ) ) {\n                this._buildForm( this.model.attributes );\n            } else {\n                this.deferred.execute( function( process ) {\n                    self._buildModel( process, self.model.attributes, true );\n                });\n            }\n            // listen to history panel\n            if ( this.model.get( 'listen_to_history' ) && parent.Galaxy && parent.Galaxy.currHistoryPanel ) {\n                this.listenTo( parent.Galaxy.currHistoryPanel.collection, 'change', function() {\n                    self.model.get( 'onchange' )();\n                });\n            }\n            // destroy dom elements\n            this.$el.on( 'remove', function() { self.remove() } );\n        },\n\n        /** Wait for deferred build processes before removal */\n        remove: function() {\n            var self = this;\n            this.$el.hide();\n            this.deferred.execute( function() {\n                FormBase.prototype.remove.call( self );\n                Galaxy.emit.debug( 'tool-form-base::remove()', 'Destroy view.' );\n            });\n        },\n\n        /** Build form */\n        _buildForm: function( options ) {\n            var self = this;\n            this.model.set( options );\n            this.model.set({\n                title       : options.title || '<b>' + options.name + '</b> ' + options.description + ' (Galaxy Version ' + options.version + ')',\n                operations  : !this.model.get( 'hide_operations' ) && this._operations(),\n                onchange    : function() {\n                    self.deferred.reset();\n                    self.deferred.execute( function ( process ) {\n                        self.model.get( 'postchange' )( process, self );\n                    });\n                }\n            });\n            this.model.get( 'customize' ) && this.model.get( 'customize' )( this );\n            this.render();\n            if ( !this.model.get( 'collapsible' ) ) {\n                this.$el.append( $( '<div/>' ).addClass( 'ui-margin-top-large' ).append( this._footer() ) );\n            }\n        },\n\n        /** Builds a new model through api call and recreates the entire form */\n        _buildModel: function( process, new_options, hide_message ) {\n            var self = this;\n            var options = this.model.attributes;\n            options.version = new_options.version;\n            options.id = new_options.id;\n\n            // build request url\n            var build_url = '';\n            var build_data = {};\n            if ( options.job_id ) {\n                build_url = Galaxy.root + 'api/jobs/' + options.job_id + '/build_for_rerun';\n            } else {\n                build_url = Galaxy.root + 'api/tools/' + options.id + '/build';\n                if ( Galaxy.params && Galaxy.params.tool_id == options.id ) {\n                    build_data = $.extend( {}, Galaxy.params );\n                    options.version && ( build_data[ 'tool_version' ] = options.version );\n                }\n            }\n\n            // get initial model\n            Utils.get({\n                url     : build_url,\n                data    : build_data,\n                success : function( data ) {\n                    if( !data.display ) {\n                        window.location = Galaxy.root;\n                        return;\n                    }\n                    self._buildForm( data );\n                    !hide_message && self.message.update({\n                        status      : 'success',\n                        message     : 'Now you are using \\'' + options.name + '\\' version ' + options.version + ', id \\'' + options.id + '\\'.',\n                        persistent  : false\n                    });\n                    Galaxy.emit.debug('tool-form-base::_buildModel()', 'Initial tool model ready.', data);\n                    process.resolve();\n                },\n                error   : function( response, status ) {\n                    var error_message = ( response && response.err_msg ) || 'Uncaught error.';\n                    if ( status == 401 ) {\n                        window.location = Galaxy.root + 'user/login?' + $.param({ redirect : Galaxy.root + '?tool_id=' + options.id });\n                    } else if ( self.$el.is( ':empty' ) ) {\n                        self.$el.prepend( ( new Ui.Message({\n                            message     : error_message,\n                            status      : 'danger',\n                            persistent  : true,\n                            large       : true\n                        }) ).$el );\n                    } else {\n                        Galaxy.modal && Galaxy.modal.show({\n                            title   : 'Tool request failed',\n                            body    : error_message,\n                            buttons : {\n                                'Close' : function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                    Galaxy.emit.debug( 'tool-form-base::_buildModel()', 'Initial tool model request failed.', response );\n                    process.reject();\n                }\n            });\n        },\n\n        /** Create tool operation menu */\n        _operations: function() {\n            var self = this;\n            var options = this.model.attributes;\n\n            // button for version selection\n            var versions_button = new Ui.ButtonMenu({\n                icon    : 'fa-cubes',\n                title   : ( !options.narrow && 'Versions' ) || null,\n                tooltip : 'Select another tool version'\n            });\n            if ( !options.sustain_version && options.versions && options.versions.length > 1 ) {\n                for ( var i in options.versions ) {\n                    var version = options.versions[ i ];\n                    if ( version != options.version ) {\n                        versions_button.addMenu({\n                            title   : 'Switch to ' + version,\n                            version : version,\n                            icon    : 'fa-cube',\n                            onclick : function() {\n                                // here we update the tool version (some tools encode the version also in the id)\n                                var id = options.id.replace( options.version, this.version );\n                                var version = this.version;\n                                // queue model request\n                                self.deferred.reset();\n                                self.deferred.execute( function( process ) {\n                                    self._buildModel( process, { id : id, version : version } )\n                                });\n                            }\n                        });\n                    }\n                }\n            } else {\n                versions_button.$el.hide();\n            }\n\n            // button for options e.g. search, help\n            var menu_button = new Ui.ButtonMenu({\n                icon    : 'fa-caret-down',\n                title   : ( !options.narrow && 'Options' ) || null,\n                tooltip : 'View available options'\n            });\n            if ( options.biostar_url ) {\n                menu_button.addMenu({\n                    icon    : 'fa-question-circle',\n                    title   : 'Question?',\n                    onclick : function() {\n                        window.open( options.biostar_url + '/p/new/post/' );\n                    }\n                });\n                menu_button.addMenu({\n                    icon    : 'fa-search',\n                    title   : 'Search',\n                    onclick : function() {\n                        window.open( options.biostar_url + '/local/search/page/?q=' + options.name );\n                    }\n                });\n            };\n            menu_button.addMenu({\n                icon    : 'fa-share',\n                title   : 'Share',\n                onclick : function() {\n                    prompt( 'Copy to clipboard: Ctrl+C, Enter', window.location.origin + Galaxy.root + 'root?tool_id=' + options.id );\n                }\n            });\n\n            // add admin operations\n            if ( Galaxy.user && Galaxy.user.get( 'is_admin' ) ) {\n                menu_button.addMenu({\n                    icon    : 'fa-download',\n                    title   : 'Download',\n                    onclick : function() {\n                        window.location.href = Galaxy.root + 'api/tools/' + options.id + '/download';\n                    }\n                });\n                menu_button.addMenu({\n                    icon    : 'fa-refresh',\n                    title   : 'Reload XML',\n                    onclick : function() {\n                        Utils.get({\n                            url     : Galaxy.root + 'api/tools/' + options.id + '/reload',\n                            success : function( response ) {\n                                self.message.update( { persistent : false, message : 'Tool XML has been reloaded.', status : 'success' } );\n                            },\n                            error   : function( response ) {\n                                self.message.update( { persistent : false, message : response.err_msg, status : 'danger' } );\n                            }\n                        });\n                    }\n                });\n            }\n\n            // button for version selection\n            if ( options.requirements && options.requirements.length > 0 ) {\n                menu_button.addMenu({\n                    icon    : 'fa-info-circle',\n                    title   : 'Requirements',\n                    onclick : function() {\n                        if ( !this.requirements_visible || self.portlet.collapsed ) {\n                            this.requirements_visible = true;\n                            self.portlet.expand();\n                            self.message.update( { persistent : true, message : self._templateRequirements( options ), status : 'info' } );\n                        } else {\n                            this.requirements_visible = false;\n                            self.message.update( { message : '' } );\n                        }\n                    }\n                });\n            }\n\n            // add toolshed url\n            if ( options.sharable_url ) {\n                menu_button.addMenu({\n                    icon    : 'fa-external-link',\n                    title   : 'See in Tool Shed',\n                    onclick : function() {\n                        window.open( options.sharable_url );\n                    }\n                });\n            }\n\n            return {\n                menu        : menu_button,\n                versions    : versions_button\n            }\n        },\n\n        /** Create footer */\n        _footer: function() {\n            var options = this.model.attributes;\n            var $el = $( '<div/>' ).append( this._templateHelp( options ) );\n            if ( options.citations ) {\n                var $citations = $( '<div/>' );\n                var citations = new CitationModel.ToolCitationCollection();\n                citations.tool_id = options.id;\n                var citation_list_view = new CitationView.CitationListView({ el: $citations, collection: citations });\n                citation_list_view.render();\n                citations.fetch();\n                $el.append( $citations );\n            }\n            return $el;\n        },\n\n        /** Templates */\n        _templateHelp: function( options ) {\n            var $tmpl = $( '<div/>' ).addClass( 'ui-form-help' ).append( options.help );\n            $tmpl.find( 'a' ).attr( 'target', '_blank' );\n            return $tmpl;\n        },\n\n        _templateRequirements: function( options ) {\n            var nreq = options.requirements.length;\n            if ( nreq > 0 ) {\n                var requirements_message = 'This tool requires ';\n                _.each( options.requirements, function( req, i ) {\n                    requirements_message += req.name + ( req.version ? ' (Version ' + req.version + ')' : '' ) + ( i < nreq - 2 ? ', ' : ( i == nreq - 2 ? ' and ' : '' ) );\n                });\n                var requirements_link = $( '<a/>' ).attr( 'target', '_blank' ).attr( 'href', 'https://wiki.galaxyproject.org/Tools/Requirements' ).text( 'here' );\n                return $( '<span/>' ).append( requirements_message + '. Click ' ).append( requirements_link ).append( ' for more information.' );\n            }\n            return 'No requirements found.';\n        }\n    });\n});\n"]}