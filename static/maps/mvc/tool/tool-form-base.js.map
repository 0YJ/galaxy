{"version":3,"sources":["mvc/tool/tool-form-base.js"],"names":["_formView2","default","extend","initialize","options","self","this","deferred","_deferred2","prototype","call","_update","model","get","parent","Galaxy","currHistoryPanel","listenTo","collection","$el","on","_destroy","callback","reset","execute","process","then","_render","off","hide","remove","emit","debug","attributes","title","fixed_title","name","description","version","operations","_operations","onchange","render","$","show_message","status","_footer","message","id","versions_button","icon","tooltip","_uiMisc2","ButtonMenu","onclick","narrow","sustain_version","versions","length","i","addMenu","menu_button","set","biostar_url","replace","prompt","requirements_message","user","open","window","error","persistent","location","href","root","url","success","requirements_visible","update","response","sharable_url","err_msg","_","each","webhook","portlet","collapsed","Function","func","_templateRequirements","$citations","citations","tool_id","webhooks","activate","config","function","menu","requirements_link","append","_templateHelp","_citationModel2","ToolCitationCollection","_citationView2","CitationListView","el","fetch","$tmpl","addClass","help","find","attr","nreq","requirements","req","text"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-base.js","sourcesContent":["/**\n    This is the base class of the tool form plugin. This class is e.g. inherited by the regular and the workflow tool form.\n*/\nimport Utils from \"utils/utils\";\nimport Deferred from \"utils/deferred\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport FormBase from \"mvc/form/form-view\";\nimport CitationModel from \"mvc/citation/citation-model\";\nimport CitationView from \"mvc/citation/citation-view\";\nexport default FormBase.extend({\n    initialize: function(options) {\n        var self = this;\n        this.deferred = new Deferred();\n        FormBase.prototype.initialize.call(this, options);\n\n        // optional model update\n        this._update(this.model.get(\"initialmodel\"));\n\n        // listen to history panel\n        if (\n            this.model.get(\"listen_to_history\") &&\n            parent.Galaxy &&\n            parent.Galaxy.currHistoryPanel\n        ) {\n            this.listenTo(\n                parent.Galaxy.currHistoryPanel.collection,\n                \"change\",\n                function() {\n                    self.model.get(\"onchange\")();\n                }\n            );\n        }\n        // destroy dom elements\n        this.$el.on(\"remove\", function() {\n            self._destroy();\n        });\n    },\n\n    /** Allows tool form variation to update tool model */\n    _update: function(callback) {\n        var self = this;\n        callback = callback || this.model.get(\"buildmodel\");\n        if (callback) {\n            this.deferred.reset();\n            this.deferred.execute(function(process) {\n                callback(process, self);\n                process.then(function() {\n                    self._render();\n                });\n            });\n        } else {\n            this._render();\n        }\n    },\n\n    /** Wait for deferred build processes before removal */\n    _destroy: function() {\n        var self = this;\n        this.$el.off().hide();\n        this.deferred.execute(function() {\n            FormBase.prototype.remove.call(self);\n            Galaxy.emit.debug(\"tool-form-base::_destroy()\", \"Destroy view.\");\n        });\n    },\n\n    /** Build form */\n    _render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.model.set({\n            title:\n                options.fixed_title ||\n                \"<b>\" +\n                    options.name +\n                    \"</b> \" +\n                    options.description +\n                    \" (Galaxy Version \" +\n                    options.version +\n                    \")\",\n            operations: !options.hide_operations && this._operations(),\n            onchange: function() {\n                self.deferred.reset();\n                self.deferred.execute(function(process) {\n                    self.model.get(\"postchange\")(process, self);\n                });\n            }\n        });\n        this.render();\n        if (!this.model.get(\"collapsible\")) {\n            this.$el.append(\n                $(\"<div/>\")\n                    .addClass(\"ui-margin-top-large\")\n                    .append(this._footer())\n            );\n        }\n        this.show_message &&\n            this.message.update({\n                status: \"success\",\n                message:\n                    \"Now you are using '\" +\n                    options.name +\n                    \"' version \" +\n                    options.version +\n                    \", id '\" +\n                    options.id +\n                    \"'.\",\n                persistent: false\n            });\n        this.show_message = true;\n    },\n\n    /** Create tool operation menu */\n    _operations: function() {\n        var self = this;\n        var options = this.model.attributes;\n\n        // button for version selection\n        var versions_button = new Ui.ButtonMenu({\n            icon: \"fa-cubes\",\n            title: (!options.narrow && \"Versions\") || null,\n            tooltip: \"Select another tool version\"\n        });\n        if (\n            !options.sustain_version &&\n            options.versions &&\n            options.versions.length > 1\n        ) {\n            for (var i in options.versions) {\n                var version = options.versions[i];\n                if (version != options.version) {\n                    versions_button.addMenu({\n                        title: \"Switch to \" + version,\n                        version: version,\n                        icon: \"fa-cube\",\n                        onclick: function() {\n                            // here we update the tool version (some tools encode the version also in the id)\n                            self.model.set(\n                                \"id\",\n                                options.id.replace(\n                                    options.version,\n                                    this.version\n                                )\n                            );\n                            self.model.set(\"version\", this.version);\n                            self._update();\n                        }\n                    });\n                }\n            }\n        } else {\n            versions_button.$el.hide();\n        }\n\n        // button for options e.g. search, help\n        var menu_button = new Ui.ButtonMenu({\n            icon: \"fa-caret-down\",\n            title: (!options.narrow && \"Options\") || null,\n            tooltip: \"View available options\"\n        });\n        if (options.biostar_url) {\n            menu_button.addMenu({\n                icon: \"fa-question-circle\",\n                title: \"Question?\",\n                onclick: function() {\n                    window.open(options.biostar_url + \"/p/new/post/\");\n                }\n            });\n            menu_button.addMenu({\n                icon: \"fa-search\",\n                title: \"Search\",\n                onclick: function() {\n                    window.open(\n                        options.biostar_url +\n                            \"/local/search/page/?q=\" +\n                            options.name\n                    );\n                }\n            });\n        }\n        menu_button.addMenu({\n            icon: \"fa-share\",\n            title: \"Share\",\n            onclick: function() {\n                prompt(\n                    \"Copy to clipboard: Ctrl+C, Enter\",\n                    window.location.origin +\n                        Galaxy.root +\n                        \"root?tool_id=\" +\n                        options.id\n                );\n            }\n        });\n\n        // add admin operations\n        if (Galaxy.user && Galaxy.user.get(\"is_admin\")) {\n            menu_button.addMenu({\n                icon: \"fa-download\",\n                title: \"Download\",\n                onclick: function() {\n                    window.location.href =\n                        Galaxy.root + \"api/tools/\" + options.id + \"/download\";\n                }\n            });\n            menu_button.addMenu({\n                icon: \"fa-refresh\",\n                title: \"Reload XML\",\n                onclick: function() {\n                    Utils.get({\n                        url:\n                            Galaxy.root + \"api/tools/\" + options.id + \"/reload\",\n                        success: function(response) {\n                            self.message.update({\n                                persistent: false,\n                                message: \"Tool XML has been reloaded.\",\n                                status: \"success\"\n                            });\n                        },\n                        error: function(response) {\n                            self.message.update({\n                                persistent: false,\n                                message: response.err_msg,\n                                status: \"danger\"\n                            });\n                        }\n                    });\n                }\n            });\n        }\n\n        // button for version selection\n        if (options.requirements && options.requirements.length > 0) {\n            menu_button.addMenu({\n                icon: \"fa-info-circle\",\n                title: \"Requirements\",\n                onclick: function() {\n                    if (!this.requirements_visible || self.portlet.collapsed) {\n                        this.requirements_visible = true;\n                        self.portlet.expand();\n                        self.message.update({\n                            persistent: true,\n                            message: self._templateRequirements(options),\n                            status: \"info\"\n                        });\n                    } else {\n                        this.requirements_visible = false;\n                        self.message.update({ message: \"\" });\n                    }\n                }\n            });\n        }\n\n        // add toolshed url\n        if (options.sharable_url) {\n            menu_button.addMenu({\n                icon: \"fa-external-link\",\n                title: \"See in Tool Shed\",\n                onclick: function() {\n                    window.open(options.sharable_url);\n                }\n            });\n        }\n\n        // add tool menu webhooks\n        $.getJSON(\"/api/webhooks/tool-menu/all\", function(webhooks) {\n            _.each(webhooks, function(webhook) {\n                if (webhook.activate && webhook.config.function) {\n                    menu_button.addMenu({\n                        icon: webhook.config.icon,\n                        title: webhook.config.title,\n                        onclick: function() {\n                            var func = new Function(\n                                \"options\",\n                                webhook.config.function\n                            );\n                            func(options);\n                        }\n                    });\n                }\n            });\n        });\n\n        return {\n            menu: menu_button,\n            versions: versions_button\n        };\n    },\n\n    /** Create footer */\n    _footer: function() {\n        var options = this.model.attributes;\n        var $el = $(\"<div/>\").append(this._templateHelp(options));\n        if (options.citations) {\n            var $citations = $(\"<div/>\");\n            var citations = new CitationModel.ToolCitationCollection();\n            citations.tool_id = options.id;\n            var citation_list_view = new CitationView.CitationListView({\n                el: $citations,\n                collection: citations\n            });\n            citation_list_view.render();\n            citations.fetch();\n            $el.append($citations);\n        }\n        return $el;\n    },\n\n    /** Templates */\n    _templateHelp: function(options) {\n        var $tmpl = $(\"<div/>\")\n            .addClass(\"ui-form-help\")\n            .append(options.help);\n        $tmpl.find(\"a\").attr(\"target\", \"_blank\");\n        return $tmpl;\n    },\n\n    _templateRequirements: function(options) {\n        var nreq = options.requirements.length;\n        if (nreq > 0) {\n            var requirements_message = \"This tool requires \";\n            _.each(options.requirements, function(req, i) {\n                requirements_message +=\n                    req.name +\n                    (req.version ? \" (Version \" + req.version + \")\" : \"\") +\n                    (i < nreq - 2 ? \", \" : i == nreq - 2 ? \" and \" : \"\");\n            });\n            var requirements_link = $(\"<a/>\")\n                .attr(\"target\", \"_blank\")\n                .attr(\"href\", \"https://galaxyproject.org/tools/requirements/\")\n                .text(\"here\");\n            return $(\"<span/>\")\n                .append(requirements_message + \". Click \")\n                .append(requirements_link)\n                .append(\" for more information.\");\n        }\n        return \"No requirements found.\";\n    }\n});\n"]}