{"version":3,"sources":["mvc/tool/tool-form-base.js"],"names":["define","Utils","Deferred","Ui","FormBase","CitationModel","CitationView","extend","initialize","options","this","self","deferred","call","prototype","model","attributes","execute","process","get","parent","Galaxy","currHistoryPanel","listenTo","$el","on","_destroy","off","hide","remove","_buildForm","set","title","name","description","version","operations","_operations","onchange","render","$","addClass","append","_footer","_buildModel","new_options","hide_message","id","build_data","job_id","root","build_url","params","url","data","display","success","window","location","message","update","status","persistent","debug","response","err_msg","param","redirect","error_message","Message","large","modal","show","body","emit","reject","icon","narrow","versions_button","versions","length","tooltip","i","sustain_version","replace","onclick","menu_button","ButtonMenu","addMenu","biostar_url","open","origin","user","href","requirements","requirements_visible","portlet","collapsed","expand","_templateRequirements","sharable_url","getJSON","webhooks","_","each","webhook","activate","config","function","menu","_templateHelp","citations","CitationListView","el","$citations","collection","tool_id","citation_list_view","$tmpl","help","find","attr","nreq","req","text","requirements_message"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-base.js","sourcesContent":["/**\n    This is the base class of the tool form plugin. This class is e.g. inherited by the regular and the workflow tool form.\n*/\ndefine( [ 'utils/utils', 'utils/deferred', 'mvc/ui/ui-misc', 'mvc/form/form-view', 'mvc/citation/citation-model', 'mvc/citation/citation-view' ],\n    function( Utils, Deferred, Ui, FormBase, CitationModel, CitationView ) {\n    return FormBase.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.deferred = new Deferred();\n            FormBase.prototype.initialize.call( this, options );\n            if ( this.model.get( 'inputs' ) ) {\n                this._buildForm( this.model.attributes );\n            } else {\n                this.deferred.execute( function( process ) {\n                    self._buildModel( process, self.model.attributes, true );\n                });\n            }\n            // listen to history panel\n            if ( this.model.get( 'listen_to_history' ) && parent.Galaxy && parent.Galaxy.currHistoryPanel ) {\n                this.listenTo( parent.Galaxy.currHistoryPanel.collection, 'change', function() {\n                    self.model.get( 'onchange' )();\n                });\n            }\n            // destroy dom elements\n            this.$el.on( 'remove', function() { self._destroy() } );\n        },\n\n        /** Wait for deferred build processes before removal */\n        _destroy: function() {\n            var self = this;\n            this.$el.off().hide();\n            this.deferred.execute( function() {\n                FormBase.prototype.remove.call( self );\n                Galaxy.emit.debug( 'tool-form-base::_destroy()', 'Destroy view.' );\n            });\n        },\n\n        /** Build form */\n        _buildForm: function( options ) {\n            var self = this;\n            this.model.set( options );\n            this.model.set({\n                title       : options.title || '<b>' + options.name + '</b> ' + options.description + ' (Galaxy Version ' + options.version + ')',\n                operations  : !this.model.get( 'hide_operations' ) && this._operations(),\n                onchange    : function() {\n                    self.deferred.reset();\n                    self.deferred.execute( function ( process ) {\n                        self.model.get( 'postchange' )( process, self );\n                    });\n                }\n            });\n            this.model.get( 'customize' ) && this.model.get( 'customize' )( this );\n            this.render();\n            if ( !this.model.get( 'collapsible' ) ) {\n                this.$el.append( $( '<div/>' ).addClass( 'ui-margin-top-large' ).append( this._footer() ) );\n            }\n        },\n\n        /** Builds a new model through api call and recreates the entire form */\n        _buildModel: function( process, new_options, hide_message ) {\n            var self = this;\n            var options = this.model.attributes;\n            options.version = new_options.version;\n            options.id = new_options.id;\n\n            // build request url\n            var build_url = '';\n            var build_data = {};\n            var job_id = '';\n            // When re-running a job the job_id is found in the new_options object.\n            // When re-running a job and requesting a new tool_version,\n            // the job_id is in the options object.\n            if ( new_options.job_id ) {\n                job_id = new_options.job_id;\n            } else if (options.job_id) {\n                job_id = options.job_id;\n            }\n            if ( job_id ) {\n                build_url = Galaxy.root + 'api/jobs/' + job_id + '/build_for_rerun';\n            } else {\n                build_url = Galaxy.root + 'api/tools/' + options.id + '/build';\n                build_data = $.extend( {}, Galaxy.params );\n                build_data[ 'tool_id' ] && ( delete build_data[ 'tool_id' ] );\n            }\n            options.version && ( build_data[ 'tool_version' ] = options.version );\n\n            // get initial model\n            Utils.get({\n                url     : build_url,\n                data    : build_data,\n                success : function( data ) {\n                    if( !data.display ) {\n                        window.location = Galaxy.root;\n                        return;\n                    }\n                    self._buildForm( data );\n                    !hide_message && self.message.update({\n                        status      : 'success',\n                        message     : 'Now you are using \\'' + options.name + '\\' version ' + options.version + ', id \\'' + options.id + '\\'.',\n                        persistent  : false\n                    });\n                    Galaxy.emit.debug('tool-form-base::_buildModel()', 'Initial tool model ready.', data);\n                    process.resolve();\n                },\n                error   : function( response, status ) {\n                    var error_message = ( response && response.err_msg ) || 'Uncaught error.';\n                    if ( status == 401 ) {\n                        window.location = Galaxy.root + 'user/login?' + $.param({ redirect : Galaxy.root + '?tool_id=' + options.id });\n                    } else if ( self.$el.is( ':empty' ) ) {\n                        self.$el.prepend( ( new Ui.Message({\n                            message     : error_message,\n                            status      : 'danger',\n                            persistent  : true,\n                            large       : true\n                        }) ).$el );\n                    } else {\n                        Galaxy.modal && Galaxy.modal.show({\n                            title   : 'Tool request failed',\n                            body    : error_message,\n                            buttons : {\n                                'Close' : function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                    Galaxy.emit.debug( 'tool-form-base::_buildModel()', 'Initial tool model request failed.', response );\n                    process.reject();\n                }\n            });\n        },\n\n        /** Create tool operation menu */\n        _operations: function() {\n            var self = this;\n            var options = this.model.attributes;\n\n            // button for version selection\n            var versions_button = new Ui.ButtonMenu({\n                icon    : 'fa-cubes',\n                title   : ( !options.narrow && 'Versions' ) || null,\n                tooltip : 'Select another tool version'\n            });\n            if ( !options.sustain_version && options.versions && options.versions.length > 1 ) {\n                for ( var i in options.versions ) {\n                    var version = options.versions[ i ];\n                    if ( version != options.version ) {\n                        versions_button.addMenu({\n                            title   : 'Switch to ' + version,\n                            version : version,\n                            icon    : 'fa-cube',\n                            onclick : function() {\n                                // here we update the tool version (some tools encode the version also in the id)\n                                var id = options.id.replace( options.version, this.version );\n                                var version = this.version;\n                                // queue model request\n                                self.deferred.reset();\n                                self.deferred.execute( function( process ) {\n                                    self._buildModel( process, { id : id, version : version } )\n                                });\n                            }\n                        });\n                    }\n                }\n            } else {\n                versions_button.$el.hide();\n            }\n\n            // button for options e.g. search, help\n            var menu_button = new Ui.ButtonMenu({\n                icon    : 'fa-caret-down',\n                title   : ( !options.narrow && 'Options' ) || null,\n                tooltip : 'View available options'\n            });\n            if ( options.biostar_url ) {\n                menu_button.addMenu({\n                    icon    : 'fa-question-circle',\n                    title   : 'Question?',\n                    onclick : function() {\n                        window.open( options.biostar_url + '/p/new/post/' );\n                    }\n                });\n                menu_button.addMenu({\n                    icon    : 'fa-search',\n                    title   : 'Search',\n                    onclick : function() {\n                        window.open( options.biostar_url + '/local/search/page/?q=' + options.name );\n                    }\n                });\n            };\n            menu_button.addMenu({\n                icon    : 'fa-share',\n                title   : 'Share',\n                onclick : function() {\n                    prompt( 'Copy to clipboard: Ctrl+C, Enter', window.location.origin + Galaxy.root + 'root?tool_id=' + options.id );\n                }\n            });\n\n            // add admin operations\n            if ( Galaxy.user && Galaxy.user.get( 'is_admin' ) ) {\n                menu_button.addMenu({\n                    icon    : 'fa-download',\n                    title   : 'Download',\n                    onclick : function() {\n                        window.location.href = Galaxy.root + 'api/tools/' + options.id + '/download';\n                    }\n                });\n                menu_button.addMenu({\n                    icon    : 'fa-refresh',\n                    title   : 'Reload XML',\n                    onclick : function() {\n                        Utils.get({\n                            url     : Galaxy.root + 'api/tools/' + options.id + '/reload',\n                            success : function( response ) {\n                                self.message.update( { persistent : false, message : 'Tool XML has been reloaded.', status : 'success' } );\n                            },\n                            error   : function( response ) {\n                                self.message.update( { persistent : false, message : response.err_msg, status : 'danger' } );\n                            }\n                        });\n                    }\n                });\n            }\n\n            // button for version selection\n            if ( options.requirements && options.requirements.length > 0 ) {\n                menu_button.addMenu({\n                    icon    : 'fa-info-circle',\n                    title   : 'Requirements',\n                    onclick : function() {\n                        if ( !this.requirements_visible || self.portlet.collapsed ) {\n                            this.requirements_visible = true;\n                            self.portlet.expand();\n                            self.message.update( { persistent : true, message : self._templateRequirements( options ), status : 'info' } );\n                        } else {\n                            this.requirements_visible = false;\n                            self.message.update( { message : '' } );\n                        }\n                    }\n                });\n            }\n\n            // add toolshed url\n            if ( options.sharable_url ) {\n                menu_button.addMenu({\n                    icon    : 'fa-external-link',\n                    title   : 'See in Tool Shed',\n                    onclick : function() {\n                        window.open( options.sharable_url );\n                    }\n                });\n            }\n\n            // add tool menu webhooks\n            $.getJSON('/api/webhooks/tool-menu/all', function(webhooks) {\n                _.each(webhooks, function(webhook) {\n                    if (webhook.activate && webhook.config.function) {\n                        menu_button.addMenu({\n                            icon    : webhook.config.icon,\n                            title   : webhook.config.title,\n                            onclick : function() {\n                                var func = new Function('options', webhook.config.function);\n                                func(options);\n                            }\n                        });\n                    }\n                });\n            });\n\n            return {\n                menu        : menu_button,\n                versions    : versions_button\n            }\n        },\n\n        /** Create footer */\n        _footer: function() {\n            var options = this.model.attributes;\n            var $el = $( '<div/>' ).append( this._templateHelp( options ) );\n            if ( options.citations ) {\n                var $citations = $( '<div/>' );\n                var citations = new CitationModel.ToolCitationCollection();\n                citations.tool_id = options.id;\n                var citation_list_view = new CitationView.CitationListView({ el: $citations, collection: citations });\n                citation_list_view.render();\n                citations.fetch();\n                $el.append( $citations );\n            }\n            return $el;\n        },\n\n        /** Templates */\n        _templateHelp: function( options ) {\n            var $tmpl = $( '<div/>' ).addClass( 'ui-form-help' ).append( options.help );\n            $tmpl.find( 'a' ).attr( 'target', '_blank' );\n            return $tmpl;\n        },\n\n        _templateRequirements: function( options ) {\n            var nreq = options.requirements.length;\n            if ( nreq > 0 ) {\n                var requirements_message = 'This tool requires ';\n                _.each( options.requirements, function( req, i ) {\n                    requirements_message += req.name + ( req.version ? ' (Version ' + req.version + ')' : '' ) + ( i < nreq - 2 ? ', ' : ( i == nreq - 2 ? ' and ' : '' ) );\n                });\n                var requirements_link = $( '<a/>' ).attr( 'target', '_blank' ).attr( 'href', 'https://galaxyproject.org/tools/requirements/' ).text( 'here' );\n                return $( '<span/>' ).append( requirements_message + '. Click ' ).append( requirements_link ).append( ' for more information.' );\n            }\n            return 'No requirements found.';\n        }\n    });\n});\n"]}