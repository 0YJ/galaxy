{"version":3,"sources":["mvc/tool/tool-form.js"],"names":["View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","form","_toolFormBase2","_utils2","merge","listen_to_history","always_refresh","buildmodel","process","model","attributes","build_url","build_data","job_id","root","id","$","params","version","url","success","data","display","set","window","location","debug","get","error","response","status","error_message","redirect","prepend","message","$el","is","title","_uiMisc2","Message","buttons","Close","show","body","hide","emit","request","reject","resolve","tool_version","create","current_state","setElement","type","execute_button","update","wait","unwait","portlet","enable","name","ignore","deferred","value","_customize","Button","icon","tooltip","submit","cls","wait_cls","job_def","tool_id","inputs","validate","execute","action","method","enctype","_","$f","append","callback","help","WebhookApp","urlRoot","trigger","error_messages","matchResponse","input_id","input_found","each","key","attr","job_inputs","batch_n","batch_src","job_input_id","match","length","input_field","field_list","_webhooks2","input_list","input_def","highlight","currHistoryPanel","refreshContents","input_value","src","err_data","_templateError","jobs","njobs_text","$message","outputs","optional","batch","n","values","_templateSuccess","njobs","addClass","text","output","hid","err_msg","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form.js","sourcesContent":["/* This is the regular tool form */\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Webhooks from \"mvc/webhooks\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.form = new ToolFormBase(\n            Utils.merge(\n                {\n                    listen_to_history: true,\n                    always_refresh: false,\n                    buildmodel: function(process, form) {\n                        var options = form.model.attributes;\n\n                        // build request url\n                        var build_url = \"\";\n                        var build_data = {};\n                        var job_id = options.job_id;\n                        if (job_id) {\n                            build_url =\n                                Galaxy.root +\n                                \"api/jobs/\" +\n                                job_id +\n                                \"/build_for_rerun\";\n                        } else {\n                            build_url =\n                                Galaxy.root +\n                                \"api/tools/\" +\n                                options.id +\n                                \"/build\";\n                            build_data = $.extend({}, Galaxy.params);\n                            build_data[\"tool_id\"] &&\n                                delete build_data[\"tool_id\"];\n                        }\n                        options.version &&\n                            (build_data[\"tool_version\"] = options.version);\n\n                        // get initial model\n                        Utils.get({\n                            url: build_url,\n                            data: build_data,\n                            success: function(data) {\n                                if (!data.display) {\n                                    window.location = Galaxy.root;\n                                    return;\n                                }\n                                form.model.set(data);\n                                self._customize(form);\n                                Galaxy.emit.debug(\n                                    \"tool-form-base::_buildModel()\",\n                                    \"Initial tool model ready.\",\n                                    data\n                                );\n                                process.resolve();\n                            },\n                            error: function(response, status) {\n                                var error_message =\n                                    (response && response.err_msg) ||\n                                    \"Uncaught error.\";\n                                if (status == 401) {\n                                    window.location =\n                                        Galaxy.root +\n                                        \"user/login?\" +\n                                        $.param({\n                                            redirect:\n                                                Galaxy.root +\n                                                \"?tool_id=\" +\n                                                options.id\n                                        });\n                                } else if (form.$el.is(\":empty\")) {\n                                    form.$el.prepend(\n                                        new Ui.Message({\n                                            message: error_message,\n                                            status: \"danger\",\n                                            persistent: true,\n                                            large: true\n                                        }).$el\n                                    );\n                                } else {\n                                    Galaxy.modal &&\n                                        Galaxy.modal.show({\n                                            title: \"Tool request failed\",\n                                            body: error_message,\n                                            buttons: {\n                                                Close: function() {\n                                                    Galaxy.modal.hide();\n                                                }\n                                            }\n                                        });\n                                }\n                                Galaxy.emit.debug(\n                                    \"tool-form-base::_buildModel()\",\n                                    \"Initial tool model request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    },\n                    postchange: function(process, form) {\n                        var current_state = {\n                            tool_id: form.model.get(\"id\"),\n                            tool_version: form.model.get(\"version\"),\n                            inputs: $.extend(true, {}, form.data.create())\n                        };\n                        form.wait(true);\n                        Galaxy.emit.debug(\n                            \"tool-form::postchange()\",\n                            \"Sending current state.\",\n                            current_state\n                        );\n                        Utils.request({\n                            type: \"POST\",\n                            url:\n                                Galaxy.root +\n                                \"api/tools/\" +\n                                form.model.get(\"id\") +\n                                \"/build\",\n                            data: current_state,\n                            success: function(data) {\n                                form.update(data);\n                                form.wait(false);\n                                Galaxy.emit.debug(\n                                    \"tool-form::postchange()\",\n                                    \"Received new model.\",\n                                    data\n                                );\n                                process.resolve();\n                            },\n                            error: function(response) {\n                                Galaxy.emit.debug(\n                                    \"tool-form::postchange()\",\n                                    \"Refresh request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    }\n                },\n                options\n            )\n        );\n        this.deferred = this.form.deferred;\n        this.setElement(\"<div/>\");\n        this.$el.append(this.form.$el);\n    },\n\n    _customize: function(form) {\n        var self = this;\n        var options = form.model.attributes;\n        // build execute button\n        var execute_button = new Ui.Button({\n            icon: \"fa-check\",\n            tooltip: \"Execute: \" + options.name + \" (\" + options.version + \")\",\n            title: \"Execute\",\n            cls: \"btn btn-primary ui-clear-float\",\n            wait_cls: \"btn btn-info ui-clear-float\",\n            onclick: function() {\n                execute_button.wait();\n                form.portlet.disable();\n                self.submit(options, function() {\n                    execute_button.unwait();\n                    form.portlet.enable();\n                });\n            }\n        });\n        options.buttons = { execute: execute_button };\n\n        // remap feature\n        if (options.job_id && options.job_remap) {\n            options.inputs.push({\n                label: \"Resume dependencies from this job\",\n                name: \"rerun_remap_job_id\",\n                type: \"select\",\n                display: \"radio\",\n                ignore: \"__ignore__\",\n                value: \"__ignore__\",\n                options: [[\"Yes\", options.job_id], [\"No\", \"__ignore__\"]],\n                help:\n                    \"The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.\"\n            });\n        }\n    },\n\n    /** Submit a regular job.\n         * @param{dict}     options   - Specifies tool id and version\n         * @param{function} callback  - Called when request has completed\n         */\n    submit: function(options, callback) {\n        var self = this;\n        var job_def = {\n            tool_id: options.id,\n            tool_version: options.version,\n            inputs: this.form.data.create()\n        };\n        this.form.trigger(\"reset\");\n        if (!self.validate(job_def)) {\n            Galaxy.emit.debug(\n                \"tool-form::submit()\",\n                \"Submission canceled. Validation failed.\"\n            );\n            callback && callback();\n            return;\n        }\n        if (options.action !== Galaxy.root + \"tool_runner/index\") {\n            var $f = $(\"<form/>\").attr({\n                action: options.action,\n                method: options.method,\n                enctype: options.enctype\n            });\n            _.each(job_def.inputs, function(value, key) {\n                $f.append($(\"<input/>\").attr({ name: key, value: value }));\n            });\n            $f\n                .hide()\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            callback && callback();\n            return;\n        }\n        Galaxy.emit.debug(\n            \"tool-form::submit()\",\n            \"Validation complete.\",\n            job_def\n        );\n        Utils.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/tools\",\n            data: job_def,\n            success: function(response) {\n                callback && callback();\n                self.$el.children().hide();\n                self.$el.append(self._templateSuccess(response));\n                // Show Webhook if job is running\n                if (response.jobs && response.jobs.length > 0) {\n                    self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                    var WebhookApp = new Webhooks.WebhookView({\n                        urlRoot: Galaxy.root + \"api/webhooks/tool\",\n                        toolId: job_def.tool_id\n                    });\n                }\n                parent.Galaxy &&\n                    parent.Galaxy.currHistoryPanel &&\n                    parent.Galaxy.currHistoryPanel.refreshContents();\n            },\n            error: function(response) {\n                callback && callback();\n                Galaxy.emit.debug(\n                    \"tool-form::submit\",\n                    \"Submission failed.\",\n                    response\n                );\n                var input_found = false;\n                if (response && response.err_data) {\n                    var error_messages = self.form.data.matchResponse(\n                        response.err_data\n                    );\n                    for (var input_id in error_messages) {\n                        self.form.highlight(input_id, error_messages[input_id]);\n                        input_found = true;\n                        break;\n                    }\n                }\n                if (!input_found) {\n                    self.modal.show({\n                        title: \"Job submission failed\",\n                        body: self._templateError(\n                            job_def,\n                            response && response.err_msg\n                        ),\n                        buttons: {\n                            Close: function() {\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    /** Validate job dictionary.\n         * @param{dict}     job_def   - Job execution dictionary\n        */\n    validate: function(job_def) {\n        var job_inputs = job_def.inputs;\n        var batch_n = -1;\n        var batch_src = null;\n        for (var job_input_id in job_inputs) {\n            var input_value = job_inputs[job_input_id];\n            var input_id = this.form.data.match(job_input_id);\n            var input_field = this.form.field_list[input_id];\n            var input_def = this.form.input_list[input_id];\n            if (!input_id || !input_def || !input_field) {\n                Galaxy.emit.debug(\n                    \"tool-form::validate()\",\n                    \"Retrieving input objects failed.\"\n                );\n                continue;\n            }\n            if (!input_def.optional && input_value == null) {\n                this.form.highlight(input_id);\n                return false;\n            }\n            if (input_value && input_value.batch) {\n                var n = input_value.values.length;\n                var src =\n                    n > 0 && input_value.values[0] && input_value.values[0].src;\n                if (src) {\n                    if (batch_src === null) {\n                        batch_src = src;\n                    } else if (batch_src !== src) {\n                        this.form.highlight(\n                            input_id,\n                            \"Please select either dataset or dataset list fields for all batch mode fields.\"\n                        );\n                        return false;\n                    }\n                }\n                if (batch_n === -1) {\n                    batch_n = n;\n                } else if (batch_n !== n) {\n                    this.form.highlight(\n                        input_id,\n                        \"Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>\" +\n                            n +\n                            \"</b> selection(s) while a previous field contains <b>\" +\n                            batch_n +\n                            \"</b>.\"\n                    );\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    _templateSuccess: function(response) {\n        if (response.jobs && response.jobs.length > 0) {\n            var njobs = response.jobs.length;\n            var njobs_text = njobs == 1 ? \"1 job has\" : njobs + \" jobs have\";\n            var $message = $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").text(\n                        njobs_text +\n                            \" been successfully added to the queue - resulting in the following datasets:\"\n                    )\n                );\n            _.each(response.outputs, function(output) {\n                $message.append(\n                    $(\"<p/>\")\n                        .addClass(\"messagerow\")\n                        .append($(\"<b/>\").text(output.hid + \": \" + output.name))\n                );\n            });\n            $message.append(\n                $(\"<p/>\")\n                    .append(\"<b/>\")\n                    .text(\n                        \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                    )\n            );\n            return $message;\n        } else {\n            return this._templateError(\n                response,\n                \"Invalid success response. No jobs found.\"\n            );\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    \"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" +\n                        (err_msg || \"\")\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}