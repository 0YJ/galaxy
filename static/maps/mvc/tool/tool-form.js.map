{"version":3,"sources":["mvc/tool/tool-form.js"],"names":["define","Utils","Ui","Modal","ToolFormBase","Webhooks","View","Backbone","extend","initialize","this","self","parent","Galaxy","modal","merge","listen_to_history","always_refresh","process","form","buildmodel","model","attributes","build_url","build_data","job_id","root","options","id","params","version","get","url","data","display","set","_customize","emit","window","error","response","status","error_message","err_msg","$","param","redirect","location","is","$el","Message","message","persistent","large","show","title","body","buttons","hide","debug","postchange","current_state","tool_id","tool_version","create","wait","type","success","update","deferred","setElement","Button","execute","execute_btn","icon","name","tooltip","cls","wait_cls","onclick","portlet","disable","unwait","inputs","push","label","ignore","value","help","submit","job_def","trigger","validate","callback","action","$f","attr","method","enctype","_","each","key","append","remove","request","children","_templateSuccess","WebhookView","WebhookApp","currHistoryPanel","refreshContents","err_data","input_found","matchResponse","error_messages","_templateError","Close","job_inputs","batch_n","batch_src","job_input_id","match","field_list","input_id","input_def","input_value","optional","n","src","values","highlight","jobs","length","njobs","njobs_text","addClass","text","$message","output","hid","outputs","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form.js","sourcesContent":["/* This is the regular tool form */\ndefine([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-modal', 'mvc/tool/tool-form-base', 'mvc/webhooks' ],\n    function( Utils, Ui, Modal, ToolFormBase, Webhooks ) {\n    var View = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.modal = parent.Galaxy.modal || new Modal.View();\n            this.form = new ToolFormBase( Utils.merge({\n                listen_to_history : true,\n                always_refresh    : false,\n                buildmodel: function( process, form ) {\n                    var options = form.model.attributes;\n\n                    // build request url\n                    var build_url = '';\n                    var build_data = {};\n                    var job_id = options.job_id;\n                    if ( job_id ) {\n                        build_url = Galaxy.root + 'api/jobs/' + job_id + '/build_for_rerun';\n                    } else {\n                        build_url = Galaxy.root + 'api/tools/' + options.id + '/build';\n                        build_data = $.extend( {}, Galaxy.params );\n                        build_data[ 'tool_id' ] && ( delete build_data[ 'tool_id' ] );\n                    }\n                    options.version && ( build_data[ 'tool_version' ] = options.version );\n\n                    // get initial model\n                    Utils.get({\n                        url     : build_url,\n                        data    : build_data,\n                        success : function( data ) {\n                            if( !data.display ) {\n                                window.location = Galaxy.root;\n                                return;\n                            }\n                            form.model.set( data );\n                            self._customize( form );\n                            Galaxy.emit.debug('tool-form-base::_buildModel()', 'Initial tool model ready.', data);\n                            process.resolve();\n                        },\n                        error   : function( response, status ) {\n                            var error_message = ( response && response.err_msg ) || 'Uncaught error.';\n                            if ( status == 401 ) {\n                                window.location = Galaxy.root + 'user/login?' + $.param({ redirect : Galaxy.root + '?tool_id=' + options.id });\n                            } else if ( form.$el.is( ':empty' ) ) {\n                                form.$el.prepend( ( new Ui.Message({\n                                    message     : error_message,\n                                    status      : 'danger',\n                                    persistent  : true,\n                                    large       : true\n                                }) ).$el );\n                            } else {\n                                Galaxy.modal && Galaxy.modal.show({\n                                    title   : 'Tool request failed',\n                                    body    : error_message,\n                                    buttons : {\n                                        'Close' : function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            }\n                            Galaxy.emit.debug( 'tool-form-base::_buildModel()', 'Initial tool model request failed.', response );\n                            process.reject();\n                        }\n                    });\n                },\n                postchange          : function( process, form ) {\n                    var current_state = {\n                        tool_id         : form.model.get( 'id' ),\n                        tool_version    : form.model.get( 'version' ),\n                        inputs          : $.extend(true, {}, form.data.create())\n                    }\n                    form.wait( true );\n                    Galaxy.emit.debug( 'tool-form::postchange()', 'Sending current state.', current_state );\n                    Utils.request({\n                        type    : 'POST',\n                        url     : Galaxy.root + 'api/tools/' + form.model.get( 'id' ) + '/build',\n                        data    : current_state,\n                        success : function( data ) {\n                            form.update( data );\n                            form.wait( false );\n                            Galaxy.emit.debug( 'tool-form::postchange()', 'Received new model.', data );\n                            process.resolve();\n                        },\n                        error   : function( response ) {\n                            Galaxy.emit.debug( 'tool-form::postchange()', 'Refresh request failed.', response );\n                            process.reject();\n                        }\n                    });\n                }\n            }, options ) );\n            this.deferred = this.form.deferred;\n            this.setElement( '<div/>' );\n            this.$el.append( this.form.$el );\n        },\n\n        _customize: function( form ) {\n            var self = this;\n            var options = form.model.attributes;\n            // build execute button\n            options.buttons = {\n                execute: execute_btn = new Ui.Button({\n                    icon     : 'fa-check',\n                    tooltip  : 'Execute: ' + options.name + ' (' + options.version + ')',\n                    title    : 'Execute',\n                    cls      : 'btn btn-primary ui-clear-float',\n                    wait_cls : 'btn btn-info ui-clear-float',\n                    onclick  : function() {\n                        execute_btn.wait();\n                        form.portlet.disable();\n                        self.submit( options, function() {\n                            execute_btn.unwait();\n                            form.portlet.enable();\n                        } );\n                    }\n                })\n            }\n            // remap feature\n            if ( options.job_id && options.job_remap ) {\n                options.inputs.push({\n                    label       : 'Resume dependencies from this job',\n                    name        : 'rerun_remap_job_id',\n                    type        : 'select',\n                    display     : 'radio',\n                    ignore      : '__ignore__',\n                    value       : '__ignore__',\n                    options     : [ [ 'Yes', options.job_id ], [ 'No', '__ignore__' ] ],\n                    help        : 'The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.'\n                });\n            }\n        },\n\n        /** Submit a regular job.\n         * @param{dict}     options   - Specifies tool id and version\n         * @param{function} callback  - Called when request has completed\n         */\n        submit: function( options, callback ) {\n            var self = this;\n            var job_def = {\n                tool_id         : options.id,\n                tool_version    : options.version,\n                inputs          : this.form.data.create()\n            }\n            this.form.trigger( 'reset' );\n            if ( !self.validate( job_def ) ) {\n                Galaxy.emit.debug( 'tool-form::submit()', 'Submission canceled. Validation failed.' );\n                callback && callback();\n                return;\n            }\n            if ( options.action !== Galaxy.root + 'tool_runner/index' ) {\n                var $f = $( '<form/>' ).attr( { action: options.action, method: options.method, enctype: options.enctype } );\n                _.each( job_def.inputs, function( value, key ) { $f.append( $( '<input/>' ).attr( { 'name': key, 'value': value } ) ) } );\n                $f.hide().appendTo( 'body' ).submit().remove();\n                callback && callback();\n                return;\n            }\n            Galaxy.emit.debug( 'tool-form::submit()', 'Validation complete.', job_def );\n            Utils.request({\n                type    : 'POST',\n                url     : Galaxy.root + 'api/tools',\n                data    : job_def,\n                success : function( response ) {\n                    callback && callback();\n                    self.$el.children().hide();\n                    self.$el.append( self._templateSuccess( response ) );\n                    // Show Webhook if job is running\n                    if ( response.jobs && response.jobs.length > 0 ) {\n                        self.$el.append( $( '<div/>', { id: 'webhook-view' } ) );\n                        var WebhookApp = new Webhooks.WebhookView({\n                            urlRoot: Galaxy.root + 'api/webhooks/tool',\n                            toolId: job_def.tool_id\n                        });\n                    }\n                    parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.refreshContents();\n                },\n                error   : function( response ) {\n                    callback && callback();\n                    Galaxy.emit.debug( 'tool-form::submit', 'Submission failed.', response );\n                    var input_found = false;\n                    if ( response && response.err_data ) {\n                        var error_messages = self.form.data.matchResponse( response.err_data );\n                        for ( var input_id in error_messages ) {\n                            self.form.highlight( input_id, error_messages[ input_id ]);\n                            input_found = true;\n                            break;\n                        }\n                    }\n                    if ( !input_found ) {\n                        self.modal.show({\n                            title   : 'Job submission failed',\n                            body    : self._templateError( job_def, response && response.err_msg ),\n                            buttons : { 'Close' : function() { self.modal.hide() } }\n                        });\n                    }\n                }\n            });\n        },\n\n        /** Validate job dictionary.\n         * @param{dict}     job_def   - Job execution dictionary\n        */\n        validate: function( job_def ) {\n            var job_inputs  = job_def.inputs;\n            var batch_n     = -1;\n            var batch_src   = null;\n            for ( var job_input_id in job_inputs ) {\n                var input_value = job_inputs[ job_input_id ];\n                var input_id    = this.form.data.match( job_input_id );\n                var input_field = this.form.field_list[ input_id ];\n                var input_def   = this.form.input_list[ input_id ];\n                if ( !input_id || !input_def || !input_field ) {\n                    Galaxy.emit.debug('tool-form::validate()', 'Retrieving input objects failed.');\n                    continue;\n                }\n                if ( !input_def.optional && input_value == null ) {\n                    this.form.highlight( input_id );\n                    return false;\n                }\n                if ( input_value && input_value.batch ) {\n                    var n = input_value.values.length;\n                    var src = n > 0 && input_value.values[ 0 ] && input_value.values[ 0 ].src;\n                    if ( src ) {\n                        if ( batch_src === null ) {\n                            batch_src = src;\n                        } else if ( batch_src !== src ) {\n                            this.form.highlight( input_id, 'Please select either dataset or dataset list fields for all batch mode fields.' );\n                            return false;\n                        }\n                    }\n                    if ( batch_n === -1 ) {\n                        batch_n = n;\n                    } else if ( batch_n !== n ) {\n                        this.form.highlight( input_id, 'Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>' + n + '</b> selection(s) while a previous field contains <b>' + batch_n + '</b>.' );\n                        return false;\n                    }\n                }\n            }\n            return true;\n        },\n\n        _templateSuccess: function( response ) {\n            if ( response.jobs && response.jobs.length > 0 ) {\n                var njobs = response.jobs.length;\n                var njobs_text = njobs == 1 ? '1 job has' : njobs + ' jobs have';\n                var $message = $( '<div/>' ).addClass( 'donemessagelarge' )\n                                            .append( $( '<p/>' ).text( njobs_text + ' been successfully added to the queue - resulting in the following datasets:' ) );\n                _.each( response.outputs, function( output ) {\n                    $message.append( $( '<p/>' ).addClass( 'messagerow' ).append( $( '<b/>' ).text( output.hid + ': ' + output.name ) ) );\n                });\n                $message.append( $( '<p/>' ).append( '<b/>' ).text( 'You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from \\'running\\' to \\'finished\\' if completed successfully or \\'error\\' if problems were encountered.' ) );\n                return $message;\n            } else {\n                return this._templateError( response, 'Invalid success response. No jobs found.' );\n            }\n        },\n\n        _templateError: function( response, err_msg ) {\n            return  $( '<div/>' ).addClass( 'errormessagelarge' )\n                                 .append( $( '<p/>' ).text( 'The server could not complete the request. Please contact the Galaxy Team if this error persists. ' + ( err_msg || '' ) ) )\n                                 .append( $( '<pre/>' ).text( JSON.stringify( response, null, 4 ) ) );\n        }\n    });\n\n    return {\n        View: View\n    };\n});"]}