{"version":3,"sources":["mvc/tool/tool-form.js"],"names":["View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","form","_toolFormBase2","_utils2","merge","listen_to_history","always_refresh","buildmodel","process","model","attributes","build_url","build_data","job_id","root","id","params","version","data","set","_customize","emit","get","resolve","window","location","error","display","status","response","err_msg","$","param","redirect","error_message","prepend","Message","$el","message","large","show","title","body","buttons","hide","debug","reject","tool_id","tool_version","inputs","wait","create","type","url","success","update","tooltip","execute_button","append","push","Button","label","name","ignore","value","help","disable","submit","unwait","portlet","enable","execute","job_remap","job_def","trigger","validate","callback","$f","action","jobs","WebhookApp","urlRoot","toolId","_","each","key","currHistoryPanel","remove","input_found","Close","children","_templateSuccess","length","_webhooks2","WebhookView","job_inputs","refreshContents","batch_src","job_input_id","input_value","input_id","input_field","input_def","err_data","error_messages","matchResponse","optional","highlight","n","batch_n","njobs_text","$message","match","field_list","_templateError","batch","values","src","njobs","addClass","text","outputs","output","hid","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form.js","sourcesContent":["/* This is the regular tool form */\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Webhooks from \"mvc/webhooks\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.form = new ToolFormBase(\n            Utils.merge(\n                {\n                    listen_to_history: true,\n                    always_refresh: false,\n                    buildmodel: function(process, form) {\n                        var options = form.model.attributes;\n\n                        // build request url\n                        var build_url = \"\";\n                        var build_data = {};\n                        var job_id = options.job_id;\n                        if (job_id) {\n                            build_url = `${Galaxy.root}api/jobs/${job_id}/build_for_rerun`;\n                        } else {\n                            build_url = `${Galaxy.root}api/tools/${options.id}/build`;\n                            build_data = $.extend({}, Galaxy.params);\n                            build_data[\"tool_id\"] &&\n                                delete build_data[\"tool_id\"];\n                        }\n                        options.version &&\n                            (build_data[\"tool_version\"] = options.version);\n\n                        // get initial model\n                        Utils.get({\n                            url: build_url,\n                            data: build_data,\n                            success: function(data) {\n                                if (!data.display) {\n                                    window.location = Galaxy.root;\n                                    return;\n                                }\n                                form.model.set(data);\n                                self._customize(form);\n                                Galaxy.emit.debug(\n                                    \"tool-form-base::_buildModel()\",\n                                    \"Initial tool model ready.\",\n                                    data\n                                );\n                                process.resolve();\n                            },\n                            error: function(response, status) {\n                                var error_message =\n                                    (response && response.err_msg) ||\n                                    \"Uncaught error.\";\n                                if (status == 401) {\n                                    window.location = `${Galaxy.root}user/login?${$.param(\n                                        {\n                                            redirect: `${Galaxy.root}?tool_id=${options.id}`\n                                        }\n                                    )}`;\n                                } else if (form.$el.is(\":empty\")) {\n                                    form.$el.prepend(\n                                        new Ui.Message({\n                                            message: error_message,\n                                            status: \"danger\",\n                                            persistent: true,\n                                            large: true\n                                        }).$el\n                                    );\n                                } else {\n                                    Galaxy.modal &&\n                                        Galaxy.modal.show({\n                                            title: \"Tool request failed\",\n                                            body: error_message,\n                                            buttons: {\n                                                Close: function() {\n                                                    Galaxy.modal.hide();\n                                                }\n                                            }\n                                        });\n                                }\n                                Galaxy.emit.debug(\n                                    \"tool-form-base::_buildModel()\",\n                                    \"Initial tool model request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    },\n                    postchange: function(process, form) {\n                        var current_state = {\n                            tool_id: form.model.get(\"id\"),\n                            tool_version: form.model.get(\"version\"),\n                            inputs: $.extend(true, {}, form.data.create())\n                        };\n                        form.wait(true);\n                        Galaxy.emit.debug(\n                            \"tool-form::postchange()\",\n                            \"Sending current state.\",\n                            current_state\n                        );\n                        Utils.request({\n                            type: \"POST\",\n                            url: `${Galaxy.root}api/tools/${form.model.get(\n                                \"id\"\n                            )}/build`,\n                            data: current_state,\n                            success: function(data) {\n                                form.update(data);\n                                form.wait(false);\n                                Galaxy.emit.debug(\n                                    \"tool-form::postchange()\",\n                                    \"Received new model.\",\n                                    data\n                                );\n                                process.resolve();\n                            },\n                            error: function(response) {\n                                Galaxy.emit.debug(\n                                    \"tool-form::postchange()\",\n                                    \"Refresh request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    }\n                },\n                options\n            )\n        );\n        this.deferred = this.form.deferred;\n        this.setElement(\"<div/>\");\n        this.$el.append(this.form.$el);\n    },\n\n    _customize: function(form) {\n        var self = this;\n        var options = form.model.attributes;\n        // build execute button\n        var execute_button = new Ui.Button({\n            icon: \"fa-check\",\n            tooltip: `Execute: ${options.name} (${options.version})`,\n            title: \"Execute\",\n            cls: \"btn btn-primary ui-clear-float\",\n            wait_cls: \"btn btn-info ui-clear-float\",\n            onclick: function() {\n                execute_button.wait();\n                form.portlet.disable();\n                self.submit(options, () => {\n                    execute_button.unwait();\n                    form.portlet.enable();\n                });\n            }\n        });\n        options.buttons = { execute: execute_button };\n\n        // remap feature\n        if (options.job_id && options.job_remap) {\n            options.inputs.push({\n                label: \"Resume dependencies from this job\",\n                name: \"rerun_remap_job_id\",\n                type: \"select\",\n                display: \"radio\",\n                ignore: \"__ignore__\",\n                value: \"__ignore__\",\n                options: [[\"Yes\", options.job_id], [\"No\", \"__ignore__\"]],\n                help:\n                    \"The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.\"\n            });\n        }\n    },\n\n    /** Submit a regular job.\n         * @param{dict}     options   - Specifies tool id and version\n         * @param{function} callback  - Called when request has completed\n         */\n    submit: function(options, callback) {\n        var self = this;\n        var job_def = {\n            tool_id: options.id,\n            tool_version: options.version,\n            inputs: this.form.data.create()\n        };\n        this.form.trigger(\"reset\");\n        if (!self.validate(job_def)) {\n            Galaxy.emit.debug(\n                \"tool-form::submit()\",\n                \"Submission canceled. Validation failed.\"\n            );\n            callback && callback();\n            return;\n        }\n        if (options.action !== `${Galaxy.root}tool_runner/index`) {\n            var $f = $(\"<form/>\").attr({\n                action: options.action,\n                method: options.method,\n                enctype: options.enctype\n            });\n            _.each(job_def.inputs, (value, key) => {\n                $f.append($(\"<input/>\").attr({ name: key, value: value }));\n            });\n            $f\n                .hide()\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            callback && callback();\n            return;\n        }\n        Galaxy.emit.debug(\n            \"tool-form::submit()\",\n            \"Validation complete.\",\n            job_def\n        );\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/tools`,\n            data: job_def,\n            success: function(response) {\n                callback && callback();\n                self.$el.children().hide();\n                self.$el.append(self._templateSuccess(response));\n                // Show Webhook if job is running\n                if (response.jobs && response.jobs.length > 0) {\n                    self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                    var WebhookApp = new Webhooks.WebhookView({\n                        urlRoot: `${Galaxy.root}api/webhooks/tool`,\n                        toolId: job_def.tool_id\n                    });\n                }\n                parent.Galaxy &&\n                    parent.Galaxy.currHistoryPanel &&\n                    parent.Galaxy.currHistoryPanel.refreshContents();\n            },\n            error: function(response) {\n                callback && callback();\n                Galaxy.emit.debug(\n                    \"tool-form::submit\",\n                    \"Submission failed.\",\n                    response\n                );\n                var input_found = false;\n                if (response && response.err_data) {\n                    var error_messages = self.form.data.matchResponse(\n                        response.err_data\n                    );\n                    for (var input_id in error_messages) {\n                        self.form.highlight(input_id, error_messages[input_id]);\n                        input_found = true;\n                        break;\n                    }\n                }\n                if (!input_found) {\n                    self.modal.show({\n                        title: \"Job submission failed\",\n                        body: self._templateError(\n                            job_def,\n                            response && response.err_msg\n                        ),\n                        buttons: {\n                            Close: function() {\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    /** Validate job dictionary.\n         * @param{dict}     job_def   - Job execution dictionary\n        */\n    validate: function(job_def) {\n        var job_inputs = job_def.inputs;\n        var batch_n = -1;\n        var batch_src = null;\n        for (var job_input_id in job_inputs) {\n            var input_value = job_inputs[job_input_id];\n            var input_id = this.form.data.match(job_input_id);\n            var input_field = this.form.field_list[input_id];\n            var input_def = this.form.input_list[input_id];\n            if (!input_id || !input_def || !input_field) {\n                Galaxy.emit.debug(\n                    \"tool-form::validate()\",\n                    \"Retrieving input objects failed.\"\n                );\n                continue;\n            }\n            if (!input_def.optional && input_value == null) {\n                this.form.highlight(input_id);\n                return false;\n            }\n            if (input_value && input_value.batch) {\n                var n = input_value.values.length;\n                var src =\n                    n > 0 && input_value.values[0] && input_value.values[0].src;\n                if (src) {\n                    if (batch_src === null) {\n                        batch_src = src;\n                    } else if (batch_src !== src) {\n                        this.form.highlight(\n                            input_id,\n                            \"Please select either dataset or dataset list fields for all batch mode fields.\"\n                        );\n                        return false;\n                    }\n                }\n                if (batch_n === -1) {\n                    batch_n = n;\n                } else if (batch_n !== n) {\n                    this.form.highlight(\n                        input_id,\n                        `Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>${n}</b> selection(s) while a previous field contains <b>${batch_n}</b>.`\n                    );\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    _templateSuccess: function(response) {\n        if (response.jobs && response.jobs.length > 0) {\n            var njobs = response.jobs.length;\n            var njobs_text = njobs == 1 ? \"1 job has\" : `${njobs} jobs have`;\n            var $message = $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").text(\n                        `${njobs_text} been successfully added to the queue - resulting in the following datasets:`\n                    )\n                );\n            _.each(response.outputs, output => {\n                $message.append(\n                    $(\"<p/>\")\n                        .addClass(\"messagerow\")\n                        .append($(\"<b/>\").text(`${output.hid}: ${output.name}`))\n                );\n            });\n            $message.append(\n                $(\"<p/>\")\n                    .append(\"<b/>\")\n                    .text(\n                        \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                    )\n            );\n            return $message;\n        } else {\n            return this._templateError(\n                response,\n                \"Invalid success response. No jobs found.\"\n            );\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    `The server could not complete the request. Please contact the Galaxy Team if this error persists. ${err_msg ||\n                        \"\"}`\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}