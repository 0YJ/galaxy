{"version":3,"sources":["mvc/tool/tool-form.js"],"names":["_utils","require","_uiMisc","_uiModal","_toolFormBase","_webhooks","View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","form","_toolFormBase2","_utils2","merge","listen_to_history","always_refresh","buildmodel","process","model","attributes","build_url","build_data","job_id","root","id","$","params","version","get","data","display","set","_customize","emit","debug","window","location","error","response","status","err_msg","resolve","error_message","param","redirect","$el","prepend","persistent","_uiMisc2","Message","message","Close","hide","title","body","buttons","reject","type","url","current_state","success","create","request","wait","inputs","push","deferred","label","name","ignore","value","execute_button","Button","icon","tooltip","cls","wait_cls","onclick","portlet","submit","job_def","unwait","tool_id","enable","execute","callback","job_remap","action","$f","method","enctype","each","append","children","trigger","WebhookApp","urlRoot","toolId","input_found","_","input_id","error_messages","highlight","key","appendTo","job_inputs","_templateSuccess","jobs","length","batch_n","_webhooks2","WebhookView","job_input_id","input_value","input_def","currHistoryPanel","refreshContents","optional","src","err_data","batch_src","matchResponse","_templateError","validate","addClass","match","input_field","field_list","batch","n","values","njobs","njobs_text","$message","text","outputs","output","hid","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form.js","sourcesContent":["/* This is the regular tool form */\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Webhooks from \"mvc/webhooks\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.form = new ToolFormBase(\n            Utils.merge(\n                {\n                    listen_to_history: true,\n                    always_refresh: false,\n                    buildmodel: function(process, form) {\n                        var options = form.model.attributes;\n\n                        // build request url\n                        var build_url = \"\";\n                        var build_data = {};\n                        var job_id = options.job_id;\n                        if (job_id) {\n                            build_url =\n                                Galaxy.root +\n                                \"api/jobs/\" +\n                                job_id +\n                                \"/build_for_rerun\";\n                        } else {\n                            build_url =\n                                Galaxy.root +\n                                \"api/tools/\" +\n                                options.id +\n                                \"/build\";\n                            build_data = $.extend({}, Galaxy.params);\n                            build_data[\"tool_id\"] &&\n                                delete build_data[\"tool_id\"];\n                        }\n                        options.version &&\n                            (build_data[\"tool_version\"] = options.version);\n\n                        // get initial model\n                        Utils.get({\n                            url: build_url,\n                            data: build_data,\n                            success: function(data) {\n                                if (!data.display) {\n                                    window.location = Galaxy.root;\n                                    return;\n                                }\n                                form.model.set(data);\n                                self._customize(form);\n                                Galaxy.emit.debug(\n                                    \"tool-form-base::_buildModel()\",\n                                    \"Initial tool model ready.\",\n                                    data\n                                );\n                                process.resolve();\n                            },\n                            error: function(response, status) {\n                                var error_message =\n                                    (response && response.err_msg) ||\n                                    \"Uncaught error.\";\n                                if (status == 401) {\n                                    window.location =\n                                        Galaxy.root +\n                                        \"user/login?\" +\n                                        $.param({\n                                            redirect:\n                                                Galaxy.root +\n                                                \"?tool_id=\" +\n                                                options.id\n                                        });\n                                } else if (form.$el.is(\":empty\")) {\n                                    form.$el.prepend(\n                                        new Ui.Message({\n                                            message: error_message,\n                                            status: \"danger\",\n                                            persistent: true,\n                                            large: true\n                                        }).$el\n                                    );\n                                } else {\n                                    Galaxy.modal &&\n                                        Galaxy.modal.show({\n                                            title: \"Tool request failed\",\n                                            body: error_message,\n                                            buttons: {\n                                                Close: function() {\n                                                    Galaxy.modal.hide();\n                                                }\n                                            }\n                                        });\n                                }\n                                Galaxy.emit.debug(\n                                    \"tool-form-base::_buildModel()\",\n                                    \"Initial tool model request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    },\n                    postchange: function(process, form) {\n                        var current_state = {\n                            tool_id: form.model.get(\"id\"),\n                            tool_version: form.model.get(\"version\"),\n                            inputs: $.extend(true, {}, form.data.create())\n                        };\n                        form.wait(true);\n                        Galaxy.emit.debug(\n                            \"tool-form::postchange()\",\n                            \"Sending current state.\",\n                            current_state\n                        );\n                        Utils.request({\n                            type: \"POST\",\n                            url:\n                                Galaxy.root +\n                                \"api/tools/\" +\n                                form.model.get(\"id\") +\n                                \"/build\",\n                            data: current_state,\n                            success: function(data) {\n                                form.update(data);\n                                form.wait(false);\n                                Galaxy.emit.debug(\n                                    \"tool-form::postchange()\",\n                                    \"Received new model.\",\n                                    data\n                                );\n                                process.resolve();\n                            },\n                            error: function(response) {\n                                Galaxy.emit.debug(\n                                    \"tool-form::postchange()\",\n                                    \"Refresh request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    }\n                },\n                options\n            )\n        );\n        this.deferred = this.form.deferred;\n        this.setElement(\"<div/>\");\n        this.$el.append(this.form.$el);\n    },\n\n    _customize: function(form) {\n        var self = this;\n        var options = form.model.attributes;\n        // build execute button\n        var execute_button = new Ui.Button({\n            icon: \"fa-check\",\n            tooltip: \"Execute: \" + options.name + \" (\" + options.version + \")\",\n            title: \"Execute\",\n            cls: \"btn btn-primary ui-clear-float\",\n            wait_cls: \"btn btn-info ui-clear-float\",\n            onclick: function() {\n                execute_button.wait();\n                form.portlet.disable();\n                self.submit(options, function() {\n                    execute_button.unwait();\n                    form.portlet.enable();\n                });\n            }\n        });\n        options.buttons = { execute: execute_button };\n\n        // remap feature\n        if (options.job_id && options.job_remap) {\n            options.inputs.push({\n                label: \"Resume dependencies from this job\",\n                name: \"rerun_remap_job_id\",\n                type: \"select\",\n                display: \"radio\",\n                ignore: \"__ignore__\",\n                value: \"__ignore__\",\n                options: [[\"Yes\", options.job_id], [\"No\", \"__ignore__\"]],\n                help:\n                    \"The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.\"\n            });\n        }\n    },\n\n    /** Submit a regular job.\n         * @param{dict}     options   - Specifies tool id and version\n         * @param{function} callback  - Called when request has completed\n         */\n    submit: function(options, callback) {\n        var self = this;\n        var job_def = {\n            tool_id: options.id,\n            tool_version: options.version,\n            inputs: this.form.data.create()\n        };\n        this.form.trigger(\"reset\");\n        if (!self.validate(job_def)) {\n            Galaxy.emit.debug(\n                \"tool-form::submit()\",\n                \"Submission canceled. Validation failed.\"\n            );\n            callback && callback();\n            return;\n        }\n        if (options.action !== Galaxy.root + \"tool_runner/index\") {\n            var $f = $(\"<form/>\").attr({\n                action: options.action,\n                method: options.method,\n                enctype: options.enctype\n            });\n            _.each(job_def.inputs, function(value, key) {\n                $f.append($(\"<input/>\").attr({ name: key, value: value }));\n            });\n            $f\n                .hide()\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            callback && callback();\n            return;\n        }\n        Galaxy.emit.debug(\n            \"tool-form::submit()\",\n            \"Validation complete.\",\n            job_def\n        );\n        Utils.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/tools\",\n            data: job_def,\n            success: function(response) {\n                callback && callback();\n                self.$el.children().hide();\n                self.$el.append(self._templateSuccess(response));\n                // Show Webhook if job is running\n                if (response.jobs && response.jobs.length > 0) {\n                    self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                    var WebhookApp = new Webhooks.WebhookView({\n                        urlRoot: Galaxy.root + \"api/webhooks/tool\",\n                        toolId: job_def.tool_id\n                    });\n                }\n                parent.Galaxy &&\n                    parent.Galaxy.currHistoryPanel &&\n                    parent.Galaxy.currHistoryPanel.refreshContents();\n            },\n            error: function(response) {\n                callback && callback();\n                Galaxy.emit.debug(\n                    \"tool-form::submit\",\n                    \"Submission failed.\",\n                    response\n                );\n                var input_found = false;\n                if (response && response.err_data) {\n                    var error_messages = self.form.data.matchResponse(\n                        response.err_data\n                    );\n                    for (var input_id in error_messages) {\n                        self.form.highlight(input_id, error_messages[input_id]);\n                        input_found = true;\n                        break;\n                    }\n                }\n                if (!input_found) {\n                    self.modal.show({\n                        title: \"Job submission failed\",\n                        body: self._templateError(\n                            job_def,\n                            response && response.err_msg\n                        ),\n                        buttons: {\n                            Close: function() {\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    /** Validate job dictionary.\n         * @param{dict}     job_def   - Job execution dictionary\n        */\n    validate: function(job_def) {\n        var job_inputs = job_def.inputs;\n        var batch_n = -1;\n        var batch_src = null;\n        for (var job_input_id in job_inputs) {\n            var input_value = job_inputs[job_input_id];\n            var input_id = this.form.data.match(job_input_id);\n            var input_field = this.form.field_list[input_id];\n            var input_def = this.form.input_list[input_id];\n            if (!input_id || !input_def || !input_field) {\n                Galaxy.emit.debug(\n                    \"tool-form::validate()\",\n                    \"Retrieving input objects failed.\"\n                );\n                continue;\n            }\n            if (!input_def.optional && input_value == null) {\n                this.form.highlight(input_id);\n                return false;\n            }\n            if (input_value && input_value.batch) {\n                var n = input_value.values.length;\n                var src =\n                    n > 0 && input_value.values[0] && input_value.values[0].src;\n                if (src) {\n                    if (batch_src === null) {\n                        batch_src = src;\n                    } else if (batch_src !== src) {\n                        this.form.highlight(\n                            input_id,\n                            \"Please select either dataset or dataset list fields for all batch mode fields.\"\n                        );\n                        return false;\n                    }\n                }\n                if (batch_n === -1) {\n                    batch_n = n;\n                } else if (batch_n !== n) {\n                    this.form.highlight(\n                        input_id,\n                        \"Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>\" +\n                            n +\n                            \"</b> selection(s) while a previous field contains <b>\" +\n                            batch_n +\n                            \"</b>.\"\n                    );\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    _templateSuccess: function(response) {\n        if (response.jobs && response.jobs.length > 0) {\n            var njobs = response.jobs.length;\n            var njobs_text = njobs == 1 ? \"1 job has\" : njobs + \" jobs have\";\n            var $message = $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").text(\n                        njobs_text +\n                            \" been successfully added to the queue - resulting in the following datasets:\"\n                    )\n                );\n            _.each(response.outputs, function(output) {\n                $message.append(\n                    $(\"<p/>\")\n                        .addClass(\"messagerow\")\n                        .append($(\"<b/>\").text(output.hid + \": \" + output.name))\n                );\n            });\n            $message.append(\n                $(\"<p/>\")\n                    .append(\"<b/>\")\n                    .text(\n                        \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                    )\n            );\n            return $message;\n        } else {\n            return this._templateError(\n                response,\n                \"Invalid success response. No jobs found.\"\n            );\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    \"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" +\n                        (err_msg || \"\")\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}