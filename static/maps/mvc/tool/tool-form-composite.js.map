{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","model","Model","deferred","_deferred2","setElement","$","addClass","append","$message","$header","$steps","$el","_configure","render","window","resize","_refresh","step_index","margin","_","reduce","memo","child","css","height","type","value","callback","links","color","style","exec","String","wp_name","match","wp_inputs","steps","parms","_handleWorkflowParameter","wp_input","wp_count","input","wp_linked","forms","each","get","step","i","emit","debug","icon","_workflowIcons2","step_type","title","parseInt","step_label","step_name","annotation","step_version","_utils2","merge","fixed_title","escape","index","help","_isDataStep","citations","collapsible","collapsed","sustain_version","sustain_repeats","sustain_conditionals","narrow","text_enable","text_disable","cls_enable","cls_disable","errors","messages","initial_errors","cls","needs_refresh","visitInputs","inputs","name","output_connection","output_connections","j","sub_step","push","connections_by_name","connection","input_step_index","step_linked","output_name","label","post_job_actions","pja","action_arguments","backdrop","data_resolved","arg","is_data_input","is_runtime_value","_formData2","__class__","indexOf","data_ref","context","reset","_renderHeader","length","_renderMessage","_renderParameters","_renderHistory","is_workflow","_renderStep","execute_btn","default_value","flavor","_execute","isEmpty","collapsible_value","collapsible_preview","step_version_changes","message","status","persistent","fade","_uiMisc2","Button","wp_form","Label","history_form","test_param","cases","execute","onchange","current_state","input_def","tool_id","tool_version","_append","empty","request","form","process","portlet","is_simple_input","hide_label","show_progress","wait","wait_text","id","percentage","version","data","create","setTimeout","promise","resolve","url","root","success","update","field","new_value","error","response","reject","_toolFormBase2","wp_value","html","short_str","history","refresh","_refresh_history","numOfUnfinishedShownContents","_refreshHistory","_formView2","link","_refreshStep","ignore","history_id","history_form_data","replacement_params","parameters","parameters_normalized","set","batch","validated","trigger","optional","undefined","job_def","values","job_input_id","source_step","v","multiple","_templateSuccess","isArray","re","WebhookApp","urlRoot","wp_field","join","input_found","body","buttons","Close","UPDATE_DELAY","$container","_enabled","_submit","new_history_name","lst","job_inputs","_templateError","field_list","input_id","input_list","input_value","highlight","children","hide","_webhooks2","WebhookView","toolId","toolVersion","err_data","step_related_errors","error_messages","matchResponse","show","err_msg","complete","enabled","startsWith","sanitize","text","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\nimport Utils from \"utils/utils\";\nimport Deferred from \"utils/deferred\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Form from \"mvc/form/form-view\";\nimport FormData from \"mvc/form/form-data\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Webhooks from \"mvc/webhooks\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.deferred = new Deferred();\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"ui-form-composite\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$header = $(\"<div/>\")))\n                .append((this.$steps = $(\"<div/>\")))\n        );\n        $(\"body\").append(this.$el);\n        this._configure();\n        this.render();\n        $(window).resize(function() {\n            self._refresh();\n        });\n    },\n\n    /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n    _refresh: function(step_index) {\n        var margin =\n            _.reduce(\n                this.$el.children(),\n                function(memo, child) {\n                    return memo + $(child).outerHeight();\n                },\n                0\n            ) -\n            this.$steps.height() +\n            90;\n        this.$steps.css(\"height\", $(window).height() - margin);\n    },\n\n    /** Configures form/step options for each workflow step */\n    _configure: function() {\n        var self = this;\n        this.forms = [];\n        this.steps = [];\n        this.links = [];\n        this.parms = [];\n        _.each(this.model.get(\"steps\"), function(step, i) {\n            Galaxy.emit.debug(\n                \"tool-form-composite::initialize()\",\n                i + \" : Preparing workflow step.\"\n            );\n            var icon = WorkflowIcons[step.step_type];\n            var title =\n                parseInt(i + 1) + \": \" + (step.step_label || step.step_name);\n            if (step.annotation) {\n                title += \" - \" + step.annotation;\n            }\n            if (step.step_version) {\n                title += \" (Galaxy Version \" + step.step_version + \")\";\n            }\n            step = Utils.merge(\n                {\n                    index: i,\n                    fixed_title: _.escape(title),\n                    icon: icon || \"\",\n                    help: null,\n                    citations: null,\n                    collapsible: true,\n                    collapsed: i > 0 && !self._isDataStep(step),\n                    sustain_version: true,\n                    sustain_repeats: true,\n                    sustain_conditionals: true,\n                    narrow: true,\n                    text_enable: \"Edit\",\n                    text_disable: \"Undo\",\n                    cls_enable: \"fa fa-edit\",\n                    cls_disable: \"fa fa-undo\",\n                    errors: step.messages,\n                    initial_errors: true,\n                    cls: \"ui-portlet-narrow\",\n                    hide_operations: true,\n                    needs_refresh: false,\n                    always_refresh: step.step_type != \"tool\"\n                },\n                step\n            );\n            self.steps[i] = step;\n            self.links[i] = [];\n            self.parms[i] = {};\n        });\n\n        // build linear index of step input pairs\n        _.each(this.steps, function(step, i) {\n            FormData.visitInputs(step.inputs, function(input, name) {\n                self.parms[i][name] = input;\n            });\n        });\n\n        // iterate through data input modules and collect linked sub steps\n        _.each(this.steps, function(step, i) {\n            _.each(step.output_connections, function(output_connection) {\n                _.each(self.steps, function(sub_step, j) {\n                    sub_step.step_index ===\n                        output_connection.input_step_index &&\n                        self.links[i].push(sub_step);\n                });\n            });\n        });\n\n        // convert all connected data inputs to hidden fields with proper labels,\n        // and track the linked source step\n        _.each(this.steps, function(step, i) {\n            _.each(self.steps, function(sub_step, j) {\n                var connections_by_name = {};\n                _.each(step.output_connections, function(connection) {\n                    sub_step.step_index === connection.input_step_index &&\n                        (connections_by_name[\n                            connection.input_name\n                        ] = connection);\n                });\n                _.each(self.parms[j], function(input, name) {\n                    var connection = connections_by_name[name];\n                    if (connection) {\n                        input.type = \"hidden\";\n                        input.help = input.step_linked ? input.help + \", \" : \"\";\n                        input.help +=\n                            \"Output dataset '\" +\n                            connection.output_name +\n                            \"' from step \" +\n                            (parseInt(i) + 1);\n                        input.step_linked = input.step_linked || [];\n                        input.step_linked.push(step);\n                    }\n                });\n            });\n        });\n\n        // identify and configure workflow parameters\n        var wp_count = 0;\n        this.wp_inputs = {};\n        function _handleWorkflowParameter(value, callback) {\n            var re = /\\$\\{(.+?)\\}/g,\n                match;\n            while ((match = re.exec(String(value)))) {\n                var wp_name = match[1];\n                callback(\n                    (self.wp_inputs[wp_name] = self.wp_inputs[wp_name] || {\n                        label: wp_name,\n                        name: wp_name,\n                        type: \"text\",\n                        color: \"hsl( \" + ++wp_count * 100 + \", 70%, 30% )\",\n                        style: \"ui-form-wp-source\",\n                        links: []\n                    })\n                );\n            }\n        }\n        _.each(this.steps, function(step, i) {\n            _.each(self.parms[i], function(input, name) {\n                _handleWorkflowParameter(input.value, function(wp_input) {\n                    wp_input.links.push(step);\n                    input.wp_linked = true;\n                    input.type = \"text\";\n                    input.backdrop = true;\n                    input.style = \"ui-form-wp-target\";\n                });\n            });\n            _.each(step.post_job_actions, function(pja) {\n                _.each(pja.action_arguments, function(arg) {\n                    _handleWorkflowParameter(arg, function() {});\n                });\n            });\n        });\n\n        // select fields are shown for dynamic fields if all putative data inputs are available,\n        // or if an explicit reference is specified as data_ref and available\n        _.each(this.steps, function(step, i) {\n            if (step.step_type == \"tool\") {\n                var data_resolved = true;\n                FormData.visitInputs(step.inputs, function(\n                    input,\n                    name,\n                    context\n                ) {\n                    var is_runtime_value =\n                        input.value && input.value.__class__ == \"RuntimeValue\";\n                    var is_data_input =\n                        [\"data\", \"data_collection\"].indexOf(input.type) != -1;\n                    var data_ref = context[input.data_ref];\n                    input.step_linked &&\n                        !self._isDataStep(input.step_linked) &&\n                        (data_resolved = false);\n                    input.options &&\n                        ((input.options.length == 0 && !data_resolved) ||\n                            input.wp_linked) &&\n                        (input.is_workflow = true);\n                    data_ref &&\n                        (input.is_workflow =\n                            (data_ref.step_linked &&\n                                !self._isDataStep(data_ref.step_linked)) ||\n                            input.wp_linked);\n                    (is_data_input ||\n                        (input.value &&\n                            input.value.__class__ == \"RuntimeValue\" &&\n                            !input.step_linked)) &&\n                        (step.collapsed = false);\n                    is_runtime_value && (input.value = input.default_value);\n                    input.flavor = \"workflow\";\n                    if (\n                        !is_runtime_value &&\n                        !is_data_input &&\n                        input.type !== \"hidden\" &&\n                        !input.wp_linked\n                    ) {\n                        if (\n                            input.optional ||\n                            (!Utils.isEmpty(input.value) && input.value !== \"\")\n                        ) {\n                            input.collapsible_value = input.value;\n                            input.collapsible_preview = true;\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    render: function() {\n        var self = this;\n        this.deferred.reset();\n        this._renderHeader();\n        this._renderMessage();\n        this._renderParameters();\n        this._renderHistory();\n        _.each(this.steps, function(step) {\n            self._renderStep(step);\n        });\n    },\n\n    /** Render header */\n    _renderHeader: function() {\n        var self = this;\n        this.execute_btn = new Ui.Button({\n            icon: \"fa-check\",\n            title: \"Run workflow\",\n            cls: \"btn btn-primary\",\n            onclick: function() {\n                self._execute();\n            }\n        });\n        this.$header\n            .addClass(\"ui-form-header\")\n            .empty()\n            .append(\n                new Ui.Label({\n                    title: \"Workflow: \" + this.model.get(\"name\")\n                }).$el\n            )\n            .append(this.execute_btn.$el);\n    },\n\n    /** Render message */\n    _renderMessage: function() {\n        this.$message.empty();\n        if (this.model.get(\"has_upgrade_messages\")) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n        var step_version_changes = this.model.get(\"step_version_changes\");\n        if (step_version_changes && step_version_changes.length > 0) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderParameters: function() {\n        var self = this;\n        this.wp_form = null;\n        if (!_.isEmpty(this.wp_inputs)) {\n            this.wp_form = new Form({\n                title: \"<b>Workflow Parameters</b>\",\n                inputs: this.wp_inputs,\n                cls: \"ui-portlet-narrow\",\n                onchange: function() {\n                    _.each(self.wp_form.input_list, function(input_def, i) {\n                        _.each(input_def.links, function(step) {\n                            self._refreshStep(step);\n                        });\n                    });\n                }\n            });\n            this._append(this.$steps.empty(), this.wp_form.$el);\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderHistory: function() {\n        this.history_form = new Form({\n            cls: \"ui-portlet-narrow\",\n            title: \"<b>History Options</b>\",\n            inputs: [\n                {\n                    type: \"conditional\",\n                    name: \"new_history\",\n                    test_param: {\n                        name: \"check\",\n                        label: \"Send results to a new history\",\n                        type: \"boolean\",\n                        value: \"false\",\n                        help: \"\"\n                    },\n                    cases: [\n                        {\n                            value: \"true\",\n                            inputs: [\n                                {\n                                    name: \"name\",\n                                    label: \"History name\",\n                                    type: \"text\",\n                                    value: this.model.get(\"name\")\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        });\n        this._append(this.$steps, this.history_form.$el);\n    },\n\n    /** Render step */\n    _renderStep: function(step) {\n        var self = this;\n        var form = null;\n        this.deferred.execute(function(promise) {\n            self.$steps.addClass(\"ui-steps\");\n            if (step.step_type == \"tool\") {\n                step.postchange = function(process, form) {\n                    var self = this;\n                    var current_state = {\n                        tool_id: step.id,\n                        tool_version: step.version,\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    form.wait(true);\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::postchange()\",\n                        \"Sending current state.\",\n                        current_state\n                    );\n                    Utils.request({\n                        type: \"POST\",\n                        url: Galaxy.root + \"api/tools/\" + step.id + \"/build\",\n                        data: current_state,\n                        success: function(data) {\n                            form.update(data);\n                            form.wait(false);\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Received new model.\",\n                                data\n                            );\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Refresh request failed.\",\n                                response\n                            );\n                            process.reject();\n                        }\n                    });\n                };\n                form = new ToolFormBase(step);\n                if (step.post_job_actions && step.post_job_actions.length) {\n                    form.portlet.append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-form-element-disabled\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"<b>Job Post Actions</b>\")\n                            )\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-preview\")\n                                    .html(\n                                        _.reduce(\n                                            step.post_job_actions,\n                                            function(memo, value) {\n                                                return (\n                                                    memo + \" \" + value.short_str\n                                                );\n                                            },\n                                            \"\"\n                                        )\n                                    )\n                            )\n                    );\n                }\n            } else {\n                var is_simple_input =\n                    [\"data_input\", \"data_collection_input\"].indexOf(\n                        step.step_type\n                    ) != -1;\n                _.each(step.inputs, function(input) {\n                    input.flavor = \"module\";\n                    input.hide_label = is_simple_input;\n                });\n                form = new Form(\n                    Utils.merge(\n                        {\n                            title: step.fixed_title,\n                            onchange: function() {\n                                _.each(self.links[step.index], function(link) {\n                                    self._refreshStep(link);\n                                });\n                            },\n                            inputs:\n                                step.inputs && step.inputs.length > 0\n                                    ? step.inputs\n                                    : [\n                                          {\n                                              type: \"hidden\",\n                                              name: \"No options available.\",\n                                              ignore: null\n                                          }\n                                      ]\n                        },\n                        step\n                    )\n                );\n            }\n            self.forms[step.index] = form;\n            self._append(self.$steps, form.$el);\n            self._refresh();\n            step.needs_refresh && self._refreshStep(step);\n            form.portlet[!self.show_progress ? \"enable\" : \"disable\"]();\n            self.show_progress &&\n                self.execute_btn.model.set({\n                    wait: true,\n                    wait_text: \"Preparing...\",\n                    percentage: (step.index + 1) * 100.0 / self.steps.length\n                });\n            Galaxy.emit.debug(\n                \"tool-form-composite::initialize()\",\n                step.index + \" : Workflow step state ready.\",\n                step\n            );\n            setTimeout(function() {\n                promise.resolve();\n            }, 0);\n        });\n    },\n\n    /** Refreshes step values from source step values */\n    _refreshStep: function(step) {\n        var self = this;\n        var form = this.forms[step.index];\n        if (form) {\n            _.each(self.parms[step.index], function(input, name) {\n                if (input.step_linked || input.wp_linked) {\n                    var field = form.field_list[form.data.match(name)];\n                    if (field) {\n                        var new_value = undefined;\n                        if (input.step_linked) {\n                            new_value = { values: [] };\n                            _.each(input.step_linked, function(source_step) {\n                                if (self._isDataStep(source_step)) {\n                                    var value = self.forms[\n                                        source_step.index\n                                    ].data.create().input;\n                                    value &&\n                                        _.each(value.values, function(v) {\n                                            new_value.values.push(v);\n                                        });\n                                }\n                            });\n                            if (\n                                !input.multiple &&\n                                new_value.values.length > 0\n                            ) {\n                                new_value = {\n                                    values: [new_value.values[0]]\n                                };\n                            }\n                        } else if (input.wp_linked) {\n                            new_value = input.value;\n                            var re = /\\$\\{(.+?)\\}/g,\n                                match;\n                            while ((match = re.exec(input.value))) {\n                                var wp_field =\n                                    self.wp_form.field_list[\n                                        self.wp_form.data.match(match[1])\n                                    ];\n                                var wp_value = wp_field && wp_field.value();\n                                if (wp_value) {\n                                    new_value = new_value\n                                        .split(match[0])\n                                        .join(wp_value);\n                                }\n                            }\n                        }\n                        if (new_value !== undefined) {\n                            field.value(new_value);\n                        }\n                    }\n                }\n            });\n            form.trigger(\"change\");\n        } else {\n            step.needs_refresh = true;\n        }\n    },\n\n    /** Refresh the history after job submission while form is shown */\n    _refreshHistory: function() {\n        var self = this;\n        var history =\n            parent.Galaxy &&\n            parent.Galaxy.currHistoryPanel &&\n            parent.Galaxy.currHistoryPanel.model;\n        this._refresh_history && clearTimeout(this._refresh_history);\n        if (history) {\n            history.refresh().success(function() {\n                if (history.numOfUnfinishedShownContents() === 0) {\n                    self._refresh_history = setTimeout(function() {\n                        self._refreshHistory();\n                    }, history.UPDATE_DELAY);\n                }\n            });\n        }\n    },\n\n    /** Build remaining steps */\n    _execute: function() {\n        var self = this;\n        this.show_progress = true;\n        this._enabled(false);\n        this.deferred.execute(function(promise) {\n            setTimeout(function() {\n                promise.resolve();\n                self._submit();\n            }, 0);\n        });\n    },\n\n    /** Validate and submit workflow */\n    _submit: function() {\n        var self = this;\n        var history_form_data = this.history_form.data.create();\n        var job_def = {\n            new_history_name: history_form_data[\"new_history|name\"]\n                ? history_form_data[\"new_history|name\"]\n                : null,\n            history_id: !history_form_data[\"new_history|name\"]\n                ? this.model.get(\"history_id\")\n                : null,\n            replacement_params: this.wp_form ? this.wp_form.data.create() : {},\n            parameters: {},\n            // Tool form will submit flat maps for each parameter\n            // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n            // data structures).\n            parameters_normalized: true,\n            // Tool form always wants a list of invocations back\n            // so that inputs can be batched.\n            batch: true\n        };\n        var validated = true;\n        for (var i in this.forms) {\n            var form = this.forms[i];\n            var job_inputs = form.data.create();\n            var step = self.steps[i];\n            var step_index = step.step_index;\n            form.trigger(\"reset\");\n            for (var job_input_id in job_inputs) {\n                var input_value = job_inputs[job_input_id];\n                var input_id = form.data.match(job_input_id);\n                var input_field = form.field_list[input_id];\n                var input_def = form.input_list[input_id];\n                if (!input_def.step_linked) {\n                    if (this._isDataStep(step)) {\n                        validated =\n                            input_value &&\n                            input_value.values &&\n                            input_value.values.length > 0;\n                    } else {\n                        validated =\n                            input_def.optional ||\n                            (input_def.is_workflow && input_value !== \"\") ||\n                            (!input_def.is_workflow && input_value !== null);\n                    }\n                    if (!validated) {\n                        form.highlight(input_id);\n                        break;\n                    }\n                    job_def.parameters[step_index] =\n                        job_def.parameters[step_index] || {};\n                    job_def.parameters[step_index][job_input_id] =\n                        job_inputs[job_input_id];\n                }\n            }\n            if (!validated) {\n                break;\n            }\n        }\n        if (!validated) {\n            self._enabled(true);\n            Galaxy.emit.debug(\n                \"tool-form-composite::submit()\",\n                \"Validation failed.\",\n                job_def\n            );\n        } else {\n            Galaxy.emit.debug(\n                \"tool-form-composite::submit()\",\n                \"Validation complete.\",\n                job_def\n            );\n            Utils.request({\n                type: \"POST\",\n                url:\n                    Galaxy.root +\n                    \"api/workflows/\" +\n                    this.model.id +\n                    \"/invocations\",\n                data: job_def,\n                success: function(response) {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit\",\n                        \"Submission successful.\",\n                        response\n                    );\n                    self.$el.children().hide();\n                    self.$el.append(self._templateSuccess(response));\n\n                    // Show Webhook if job is running\n                    if ($.isArray(response) && response.length > 0) {\n                        self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                        var WebhookApp = new Webhooks.WebhookView({\n                            urlRoot: Galaxy.root + \"api/webhooks/workflow\",\n                            toolId: job_def.tool_id,\n                            toolVersion: job_def.tool_version\n                        });\n                    }\n\n                    self._refreshHistory();\n                },\n                error: function(response) {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit\",\n                        \"Submission failed.\",\n                        response\n                    );\n                    var input_found = false;\n                    if (response && response.err_data) {\n                        for (var i in self.forms) {\n                            var form = self.forms[i];\n                            var step_related_errors =\n                                response.err_data[form.model.get(\"step_index\")];\n                            if (step_related_errors) {\n                                var error_messages = form.data.matchResponse(\n                                    step_related_errors\n                                );\n                                for (var input_id in error_messages) {\n                                    form.highlight(\n                                        input_id,\n                                        error_messages[input_id]\n                                    );\n                                    input_found = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!input_found) {\n                        self.modal.show({\n                            title: \"Workflow submission failed\",\n                            body: self._templateError(\n                                job_def,\n                                response && response.err_msg\n                            ),\n                            buttons: {\n                                Close: function() {\n                                    self.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                },\n                complete: function() {\n                    self._enabled(true);\n                }\n            });\n        }\n    },\n\n    /** Append new dom to body */\n    _append: function($container, $el) {\n        $container.append(\"<p/>\").append($el);\n    },\n\n    /** Set enabled/disabled state */\n    _enabled: function(enabled) {\n        this.execute_btn.model.set({\n            wait: !enabled,\n            wait_text: \"Sending...\",\n            percentage: -1\n        });\n        this.wp_form && this.wp_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        this.history_form &&\n            this.history_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        _.each(this.forms, function(form) {\n            form && form.portlet[enabled ? \"enable\" : \"disable\"]();\n        });\n    },\n\n    /** Is data input module/step */\n    _isDataStep: function(steps) {\n        var lst = $.isArray(steps) ? steps : [steps];\n        for (var i = 0; i < lst.length; i++) {\n            var step = lst[i];\n            if (\n                !step ||\n                !step.step_type ||\n                !step.step_type.startsWith(\"data\")\n            ) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /** Templates */\n    _templateSuccess: function(response) {\n        if ($.isArray(response) && response.length > 0) {\n            return $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").html(\n                        \"Successfully invoked workflow <b>\" +\n                            Utils.sanitize(this.model.get(\"name\")) +\n                            \"</b>\" +\n                            (response.length > 1\n                                ? \" <b>\" + response.length + \" times</b>\"\n                                : \"\") +\n                            \".\"\n                    )\n                )\n                .append(\n                    $(\"<p/>\")\n                        .append(\"<b/>\")\n                        .text(\n                            \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                        )\n                );\n        } else {\n            return this._templateError(\n                response,\n                \"Invalid success response. No invocations found.\"\n            );\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    \"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" +\n                        (JSON.stringify(err_msg) || \"\")\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\nexport default {\n    View: View\n};\n"]}