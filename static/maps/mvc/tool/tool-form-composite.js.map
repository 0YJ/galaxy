{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["define","Utils","Deferred","Ui","Form","FormData","ToolFormBase","Modal","Webhooks","WorkflowIcons","View","Backbone","extend","initialize","this","self","parent","Galaxy","modal","model","Model","options","deferred","$","addClass","$message","append","$header","$steps","$el","window","resize","_refresh","step_index","margin","_","reduce","children","memo","child","outerHeight","height","css","_configure","_handleWorkflowParameter","value","callback","match","re","exec","String","wp_name","wp_inputs","label","name","type","wp_count","color","style","forms","steps","links","parms","each","get","step","i","emit","debug","icon","step_type","title","parseInt","step_label","step_name","annotation","step_version","merge","index","fixed_title","escape","help","citations","collapsible","collapsed","_isDataStep","sustain_version","sustain_repeats","sustain_conditionals","narrow","text_enable","text_disable","cls_enable","cls_disable","errors","messages","initial_errors","cls","hide_operations","needs_refresh","always_refresh","visitInputs","inputs","input","output_connections","output_connection","sub_step","j","input_step_index","push","connections_by_name","connection","input_name","step_linked","output_name","wp_input","wp_linked","backdrop","post_job_actions","pja","arg","data_resolved","context","is_runtime_value","__class__","is_data_input","data_ref","is_workflow","length","flavor","optional","isEmpty","collapsible_value","render","reset","_renderHeader","_renderMessage","_renderParameters","_renderHistory","_renderStep","execute_btn","Button","_execute","empty","Label","Message","status","persistent","message","fade","step_version_changes","wp_form","onchange","input_list","input_def","_refreshStep","_append","history_form","test_param","form","execute","promise","postchange","process","id","version","data","create","current_state","tool_id","tool_version","url","root","request","update","wait","response","portlet","html","is_simple_input","indexOf","link","ignore","show_progress","set","wait_text","percentage","resolve","setTimeout","field","field_list","new_value","undefined","values","source_step","v","wp_value","wp_field","split","join","trigger","history","currHistoryPanel","_refresh_history","clearTimeout","success","numOfUnfinishedShownContents","_refreshHistory","UPDATE_DELAY","refresh","_submit","history_form_data","job_def","replacement_params","parameters","parameters_normalized","batch","new_history_name","history_id","job_inputs","input_value","job_input_id","input_id","validated","hide","_templateSuccess","isArray","WebhookView","toolId","err_data","step_related_errors","WebhookApp","urlRoot","matchResponse","error_messages","toolVersion","input_found","body","err_msg","buttons","complete","_enabled","$container","enabled","lst","startsWith","sanitize","text","_templateError","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\ndefine([ 'utils/utils', 'utils/deferred', 'mvc/ui/ui-misc', 'mvc/form/form-view', 'mvc/form/form-data', 'mvc/tool/tool-form-base', 'mvc/ui/ui-modal', 'mvc/webhooks', 'mvc/workflow/workflow-icons' ],\n    function( Utils, Deferred, Ui, Form, FormData, ToolFormBase, Modal, Webhooks, WorkflowIcons ) {\n\n    var View = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.modal = parent.Galaxy.modal || new Modal.View();\n            this.model = options && options.model || new Backbone.Model( options );\n            this.deferred = new Deferred();\n            this.setElement( $( '<div/>' ).addClass( 'ui-form-composite' )\n                                          .append( this.$message      = $( '<div/>' ) )\n                                          .append( this.$header       = $( '<div/>' ) )\n                                          .append( this.$steps        = $( '<div/>' ) ) );\n            $( 'body' ).append( this.$el );\n            this._configure();\n            this.render();\n            $( window ).resize( function() { self._refresh() } );\n        },\n\n        /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n        _refresh: function( step_index ) {\n            var margin = _.reduce( this.$el.children(), function( memo, child ) {\n                return memo + $( child ).outerHeight();\n            }, 0 ) - this.$steps.height() + 90;\n            this.$steps.css( 'height', $( window ).height() - margin );\n        },\n\n        /** Configures form/step options for each workflow step */\n        _configure: function() {\n            var self = this;\n            this.forms = [];\n            this.steps = [];\n            this.links = [];\n            this.parms = [];\n            _.each( this.model.get( 'steps' ), function( step, i ) {\n                Galaxy.emit.debug( 'tool-form-composite::initialize()', i + ' : Preparing workflow step.' );\n                var icon = WorkflowIcons[ step.step_type ];\n                var title = parseInt( i + 1 ) + ': ' + ( step.step_label || step.step_name );\n                if ( step.annotation ) {\n                    title += ' - ' + step.annotation;\n                }\n                if ( step.step_version ) {\n                    title += ' (Galaxy Version ' + step.step_version + ')';\n                }\n                step = Utils.merge( {\n                    index                   : i,\n                    fixed_title             : _.escape( title ),\n                    icon                    : icon || '',\n                    help                    : null,\n                    citations               : null,\n                    collapsible             : true,\n                    collapsed               : i > 0 && !self._isDataStep( step ),\n                    sustain_version         : true,\n                    sustain_repeats         : true,\n                    sustain_conditionals    : true,\n                    narrow                  : true,\n                    text_enable             : 'Edit',\n                    text_disable            : 'Undo',\n                    cls_enable              : 'fa fa-edit',\n                    cls_disable             : 'fa fa-undo',\n                    errors                  : step.messages,\n                    initial_errors          : true,\n                    cls                     : 'ui-portlet-narrow',\n                    hide_operations         : true,\n                    needs_refresh           : false,\n                    always_refresh          : step.step_type != 'tool'\n                }, step );\n                self.steps[ i ] = step;\n                self.links[ i ] = [];\n                self.parms[ i ] = {};\n            });\n\n            // build linear index of step input pairs\n            _.each( this.steps, function( step, i ) {\n                FormData.visitInputs( step.inputs, function( input, name ) {\n                    self.parms[ i ][ name ] = input;\n                });\n            });\n\n            // iterate through data input modules and collect linked sub steps\n            _.each( this.steps, function( step, i ) {\n                _.each( step.output_connections, function( output_connection ) {\n                    _.each( self.steps, function( sub_step, j ) {\n                        sub_step.step_index === output_connection.input_step_index && self.links[ i ].push( sub_step );\n                    });\n                });\n            });\n\n            // convert all connected data inputs to hidden fields with proper labels,\n            // and track the linked source step\n            _.each( this.steps, function( step, i ) {\n                _.each( self.steps, function( sub_step, j ) {\n                    var connections_by_name = {};\n                    _.each( step.output_connections, function( connection ) {\n                        sub_step.step_index === connection.input_step_index && ( connections_by_name[ connection.input_name ] = connection );\n                    });\n                    _.each( self.parms[ j ], function( input, name ) {\n                        var connection = connections_by_name[ name ];\n                        if ( connection ) {\n                            input.type = 'hidden';\n                            input.help = input.step_linked ? input.help + ', ' : '';\n                            input.help += 'Output dataset \\'' + connection.output_name + '\\' from step ' + ( parseInt( i ) + 1 );\n                            input.step_linked = input.step_linked || [];\n                            input.step_linked.push( step );\n                        }\n                    });\n                });\n            });\n\n            // identify and configure workflow parameters\n            var wp_count = 0;\n            this.wp_inputs = {};\n            function _handleWorkflowParameter( value, callback ) {\n                var re = /\\$\\{(.+?)\\}/g, match;\n                while ( match = re.exec( String( value ) ) ) {\n                    var wp_name = match[ 1 ];\n                    callback( self.wp_inputs[ wp_name ] = self.wp_inputs[ wp_name ] || {\n                        label   : wp_name,\n                        name    : wp_name,\n                        type    : 'text',\n                        color   : 'hsl( ' + ( ++wp_count * 100 ) + ', 70%, 30% )',\n                        style   : 'ui-form-wp-source',\n                        links   : []\n                    });\n                }\n            }\n            _.each( this.steps, function( step, i ) {\n                _.each( self.parms[ i ], function( input, name ) {\n                    _handleWorkflowParameter( input.value, function( wp_input ) {\n                        wp_input.links.push( step );\n                        input.wp_linked = true;\n                        input.type      = 'text';\n                        input.backdrop  = true;\n                        input.style     = 'ui-form-wp-target';\n                    });\n                });\n                _.each( step.post_job_actions, function( pja ) {\n                    _.each( pja.action_arguments, function( arg ) {\n                        _handleWorkflowParameter( arg, function() {} );\n                    });\n                });\n            });\n\n            // select fields are shown for dynamic fields if all putative data inputs are available,\n            // or if an explicit reference is specified as data_ref and available\n            _.each( this.steps, function( step, i ) {\n                if ( step.step_type == 'tool' ) {\n                    var data_resolved = true;\n                    FormData.visitInputs( step.inputs, function ( input, name, context ) {\n                        var is_runtime_value = input.value && input.value.__class__ == 'RuntimeValue';\n                        var is_data_input = ([ 'data', 'data_collection' ]).indexOf( input.type ) != -1;\n                        var data_ref = context[ input.data_ref ];\n                        input.step_linked && !self._isDataStep( input.step_linked ) && ( data_resolved = false );\n                        input.options && ( ( input.options.length == 0 && !data_resolved ) || input.wp_linked ) && ( input.is_workflow = true );\n                        data_ref && ( input.is_workflow = ( data_ref.step_linked && !self._isDataStep( data_ref.step_linked ) ) || input.wp_linked );\n                        ( is_data_input || ( input.value && input.value.__class__ == 'RuntimeValue' && !input.step_linked ) ) && ( step.collapsed = false );\n                        is_runtime_value && ( input.value = input.default_value );\n                        input.flavor = 'workflow';\n                        if ( !is_runtime_value && !is_data_input && input.type !== 'hidden' && !input.wp_linked ) {\n                            if ( input.optional || ( !Utils.isEmpty( input.value ) && input.value !== '' ) ) {\n                                input.collapsible_value = input.value;\n                                input.collapsible_preview = true;\n                            }\n                        }\n                    });\n                }\n            });\n        },\n\n        render: function() {\n            var self = this;\n            this.deferred.reset();\n            this._renderHeader();\n            this._renderMessage();\n            this._renderParameters();\n            this._renderHistory();\n            _.each ( this.steps, function( step ) { self._renderStep( step ) } );\n        },\n\n        /** Render header */\n        _renderHeader: function() {\n            var self = this;\n            this.execute_btn = new Ui.Button({\n                icon        : 'fa-check',\n                title       : 'Run workflow',\n                cls         : 'btn btn-primary',\n                onclick     : function() { self._execute() }\n            });\n            this.$header.addClass( 'ui-form-header' ).empty()\n                        .append( new Ui.Label( { title: 'Workflow: ' + this.model.get( 'name' ) } ).$el )\n                        .append( this.execute_btn.$el );\n        },\n\n        /** Render message */\n        _renderMessage: function() {\n            this.$message.empty();\n            if ( this.model.get( 'has_upgrade_messages' ) ) {\n                this.$message.append( new Ui.Message( {\n                    message     : 'Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.',\n                    status      : 'warning',\n                    persistent  : true,\n                    fade        : false\n                } ).$el );\n            }\n            var step_version_changes = this.model.get( 'step_version_changes' );\n            if ( step_version_changes && step_version_changes.length > 0 ) {\n                this.$message.append( new Ui.Message( {\n                    message     : 'Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.',\n                    status      : 'warning',\n                    persistent  : true,\n                    fade        : false\n                } ).$el );\n            }\n        },\n\n        /** Render workflow parameters */\n        _renderParameters: function() {\n            var self = this;\n            this.wp_form = null;\n            if ( !_.isEmpty( this.wp_inputs ) ) {\n                this.wp_form = new Form({ title: '<b>Workflow Parameters</b>', inputs: this.wp_inputs, cls: 'ui-portlet-narrow', onchange: function() {\n                        _.each( self.wp_form.input_list, function( input_def, i ) {\n                            _.each( input_def.links, function( step ) { self._refreshStep( step ) } );\n                        });\n                    }\n                });\n                this._append( this.$steps.empty(), this.wp_form.$el );\n            }\n        },\n\n        /** Render workflow parameters */\n        _renderHistory: function() {\n            this.history_form = new Form({\n                cls    : 'ui-portlet-narrow',\n                title  : '<b>History Options</b>',\n                inputs : [{\n                    type        : 'conditional',\n                    name        : 'new_history',\n                    test_param  : {\n                        name        : 'check',\n                        label       : 'Send results to a new history',\n                        type        : 'boolean',\n                        value       : 'false',\n                        help        : ''\n                    },\n                    cases       : [{\n                        value   : 'true',\n                        inputs  : [{\n                            name    : 'name',\n                            label   : 'History name',\n                            type    : 'text',\n                            value   : this.model.get( 'name' )\n                        }]\n                    }]\n                }]\n            });\n            this._append( this.$steps, this.history_form.$el );\n        },\n\n        /** Render step */\n        _renderStep: function( step ) {\n            var self = this;\n            var form = null;\n            this.deferred.execute( function( promise ) {\n                self.$steps.addClass( 'ui-steps' );\n                if ( step.step_type == 'tool' ) {\n                    step.postchange = function( process, form ) {\n                        var self = this;\n                        var current_state = {\n                            tool_id         : step.id,\n                            tool_version    : step.version,\n                            inputs          : $.extend( true, {}, form.data.create() )\n                        }\n                        form.wait( true );\n                        Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Sending current state.', current_state );\n                        Utils.request({\n                            type    : 'POST',\n                            url     : Galaxy.root + 'api/tools/' + step.id + '/build',\n                            data    : current_state,\n                            success : function( data ) {\n                                form.update( data );\n                                form.wait( false );\n                                Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Received new model.', data );\n                                process.resolve();\n                            },\n                            error   : function( response ) {\n                                Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Refresh request failed.', response );\n                                process.reject();\n                            }\n                        });\n                    };\n                    form = new ToolFormBase( step );\n                    if ( step.post_job_actions && step.post_job_actions.length ) {\n                        form.portlet.append( $( '<div/>' ).addClass( 'ui-form-element-disabled' )\n                            .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( '<b>Job Post Actions</b>' ) )\n                            .append( $( '<div/>' ).addClass( 'ui-form-preview' ).html(\n                                _.reduce( step.post_job_actions, function( memo, value ) {\n                                    return memo + ' ' + value.short_str;\n                                }, '' ) ) )\n                            );\n                    }\n                } else {\n                    var is_simple_input = ([ 'data_input', 'data_collection_input' ]).indexOf( step.step_type ) != -1;\n                    _.each( step.inputs, function( input ) { input.flavor = 'module'; input.hide_label = is_simple_input; } );\n                    form = new Form( Utils.merge({\n                        title    : step.fixed_title,\n                        onchange : function() { _.each( self.links[ step.index ], function( link ) { self._refreshStep( link ) } ) },\n                        inputs   : step.inputs && step.inputs.length > 0 ? step.inputs : [ { type: 'hidden', name: 'No options available.', ignore: null } ]\n                    }, step ) );\n                }\n                self.forms[ step.index ] = form;\n                self._append( self.$steps, form.$el );\n                self._refresh();\n                step.needs_refresh && self._refreshStep( step );\n                form.portlet[ !self.show_progress ? 'enable' : 'disable' ]();\n                self.show_progress && self.execute_btn.model.set( { wait        : true,\n                                                                    wait_text   : 'Preparing...',\n                                                                    percentage  : ( step.index + 1 ) * 100.0 / self.steps.length } );\n                Galaxy.emit.debug( 'tool-form-composite::initialize()', step.index + ' : Workflow step state ready.', step );\n                setTimeout( function() { promise.resolve() }, 0 );\n            });\n        },\n\n        /** Refreshes step values from source step values */\n        _refreshStep: function( step ) {\n            var self = this;\n            var form = this.forms[ step.index ];\n            if ( form ) {\n                _.each( self.parms[ step.index ], function( input, name ) {\n                    if ( input.step_linked || input.wp_linked ) {\n                        var field = form.field_list[ form.data.match( name ) ];\n                        if ( field ) {\n                            var new_value = undefined;\n                            if ( input.step_linked ) {\n                                new_value = { values: [] };\n                                _.each( input.step_linked, function( source_step ) {\n                                    if ( self._isDataStep( source_step ) ) {\n                                        var value = self.forms[ source_step.index ].data.create().input;\n                                        value && _.each( value.values, function( v ) { new_value.values.push( v ) } );\n                                    }\n                                });\n                                if ( !input.multiple && new_value.values.length > 0 ) {\n                                    new_value = { values: [ new_value.values[ 0 ] ] };\n                                }\n                            } else if ( input.wp_linked ) {\n                                new_value = input.value;\n                                var re = /\\$\\{(.+?)\\}/g, match;\n                                while ( match = re.exec( input.value ) ) {\n                                    var wp_field = self.wp_form.field_list[ self.wp_form.data.match( match[ 1 ] ) ];\n                                    var wp_value = wp_field && wp_field.value();\n                                    if ( wp_value ) {\n                                        new_value = new_value.split( match[ 0 ] ).join( wp_value );\n                                    }\n                                }\n                            }\n                            if ( new_value !== undefined ) {\n                                field.value( new_value );\n                            }\n                        }\n                    }\n                });\n                form.trigger( 'change' );\n            } else {\n                step.needs_refresh = true;\n            }\n        },\n\n        /** Refresh the history after job submission while form is shown */\n        _refreshHistory: function() {\n            var self = this;\n            var history = parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.model;\n            this._refresh_history && clearTimeout( this._refresh_history );\n            if ( history ) {\n                history.refresh().success( function() {\n                    if ( history.numOfUnfinishedShownContents() === 0 ) {\n                        self._refresh_history = setTimeout( function() { self._refreshHistory() }, history.UPDATE_DELAY );\n                    }\n                });\n            }\n        },\n\n        /** Build remaining steps */\n        _execute: function() {\n            var self = this;\n            this.show_progress = true;\n            this._enabled( false );\n            this.deferred.execute( function( promise ) {\n                setTimeout( function() { promise.resolve(); self._submit(); }, 0 );\n            });\n        },\n\n        /** Validate and submit workflow */\n        _submit: function() {\n            var self = this;\n            var history_form_data = this.history_form.data.create();\n            var job_def = {\n                new_history_name      : history_form_data[ 'new_history|name' ] ? history_form_data[ 'new_history|name' ] : null,\n                history_id            : !history_form_data[ 'new_history|name' ] ? this.model.get( 'history_id' ) : null,\n                replacement_params    : this.wp_form ? this.wp_form.data.create() : {},\n                parameters            : {},\n                // Tool form will submit flat maps for each parameter\n                // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n                // data structures).\n                parameters_normalized : true,\n                // Tool form always wants a list of invocations back\n                // so that inputs can be batched.\n                batch                 : true\n            };\n            var validated = true;\n            for ( var i in this.forms ) {\n                var form = this.forms[ i ];\n                var job_inputs  = form.data.create();\n                var step        = self.steps[ i ];\n                var step_index  = step.step_index;\n                form.trigger( 'reset' );\n                for ( var job_input_id in job_inputs ) {\n                    var input_value = job_inputs[ job_input_id ];\n                    var input_id    = form.data.match( job_input_id );\n                    var input_field = form.field_list[ input_id ];\n                    var input_def   = form.input_list[ input_id ];\n                    if ( !input_def.step_linked ) {\n                        if ( this._isDataStep( step ) ) {\n                            validated = input_value && input_value.values && input_value.values.length > 0;\n                        } else {\n                            validated = input_def.optional || ( input_def.is_workflow && input_value !== '' ) || ( !input_def.is_workflow && input_value !== null );\n                        }\n                        if ( !validated ) {\n                            form.highlight( input_id );\n                            break;\n                        }\n                        job_def.parameters[ step_index ] = job_def.parameters[ step_index ] || {};\n                        job_def.parameters[ step_index ][ job_input_id ] = job_inputs[ job_input_id ];\n                    }\n                }\n                if ( !validated ) {\n                    break;\n                }\n            }\n            if ( !validated ) {\n                self._enabled( true );\n                Galaxy.emit.debug( 'tool-form-composite::submit()', 'Validation failed.', job_def );\n            } else {\n                Galaxy.emit.debug( 'tool-form-composite::submit()', 'Validation complete.', job_def );\n                Utils.request({\n                    type    : 'POST',\n                    url     : Galaxy.root + 'api/workflows/' + this.model.id + '/invocations',\n                    data    : job_def,\n                    success : function( response ) {\n                        Galaxy.emit.debug( 'tool-form-composite::submit', 'Submission successful.', response );\n                        self.$el.children().hide();\n                        self.$el.append( self._templateSuccess( response ) );\n\n                        // Show Webhook if job is running\n                        if ($.isArray( response ) && response.length > 0) {\n                            self.$el.append( $( '<div/>', { id: 'webhook-view' } ) );\n                            var WebhookApp = new Webhooks.WebhookView({\n                                urlRoot: Galaxy.root + 'api/webhooks/workflow',\n                                toolId: job_def.tool_id,\n                                toolVersion: job_def.tool_version,\n                            });\n                        }\n\n                        self._refreshHistory();\n                    },\n                    error   : function( response ) {\n                        Galaxy.emit.debug( 'tool-form-composite::submit', 'Submission failed.', response );\n                        var input_found = false;\n                        if ( response && response.err_data ) {\n                            for ( var i in self.forms ) {\n                                var form = self.forms[ i ];\n                                var step_related_errors = response.err_data[ form.model.get( 'step_index' ) ];\n                                if ( step_related_errors ) {\n                                    var error_messages = form.data.matchResponse( step_related_errors );\n                                    for ( var input_id in error_messages ) {\n                                        form.highlight( input_id, error_messages[ input_id ] );\n                                        input_found = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        if ( !input_found ) {\n                            self.modal.show({\n                                title   : 'Workflow submission failed',\n                                body    : self._templateError( job_def, response && response.err_msg ),\n                                buttons : {\n                                    'Close' : function() {\n                                        self.modal.hide();\n                                    }\n                                }\n                            });\n                        }\n                    },\n                    complete: function() {\n                        self._enabled( true );\n                    }\n                });\n            }\n        },\n\n        /** Append new dom to body */\n        _append: function( $container, $el ) {\n            $container.append( '<p/>' ).append( $el );\n        },\n\n        /** Set enabled/disabled state */\n        _enabled: function( enabled ) {\n            this.execute_btn.model.set( { wait: !enabled, wait_text: 'Sending...', percentage: -1 } );\n            this.wp_form && this.wp_form.portlet[ enabled ? 'enable' : 'disable' ]();\n            this.history_form && this.history_form.portlet[ enabled ? 'enable' : 'disable' ]();\n            _.each( this.forms, function( form ) { form && form.portlet[ enabled ? 'enable' : 'disable' ]() } );\n        },\n\n        /** Is data input module/step */\n        _isDataStep: function( steps ) {\n            var lst = $.isArray( steps ) ? steps : [ steps ] ;\n            for ( var i = 0; i < lst.length; i++ ) {\n                var step = lst[ i ];\n                if ( !step || !step.step_type || !step.step_type.startsWith( 'data' ) ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /** Templates */\n        _templateSuccess: function( response ) {\n            if ( $.isArray( response ) && response.length > 0 ) {\n                return $( '<div/>' ).addClass( 'donemessagelarge' )\n                                    .append( $( '<p/>' ).html( 'Successfully invoked workflow <b>' + Utils.sanitize( this.model.get( 'name' ) ) + '</b>' + ( response.length > 1 ? ' <b>' + response.length + ' times</b>' : '' ) + '.' ) )\n                                    .append( $( '<p/>' ).append( '<b/>' ).text( 'You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from \\'running\\' to \\'finished\\' if completed successfully or \\'error\\' if problems were encountered.' ) );\n            } else {\n                return this._templateError( response, 'Invalid success response. No invocations found.' );\n            }\n        },\n\n        _templateError: function( response, err_msg ) {\n            return  $( '<div/>' ).addClass( 'errormessagelarge' )\n                                 .append( $( '<p/>' ).text( 'The server could not complete the request. Please contact the Galaxy Team if this error persists. ' + ( JSON.stringify( err_msg ) || '' ) ) )\n                                 .append( $( '<pre/>' ).text( JSON.stringify( response, null, 4 ) ) );\n        }\n    });\n    return {\n        View: View\n    };\n});\n"]}