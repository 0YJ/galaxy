{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["define","Utils","Deferred","Ui","Form","FormData","ToolFormBase","Modal","Webhooks","WorkflowIcons","_templateSuccess","View","Backbone","extend","initialize","this","self","parent","Galaxy","modal","model","Model","options","deferred","$","addClass","$message","append","$header","$steps","$el","window","resize","_refresh","step_index","margin","_","reduce","children","memo","child","outerHeight","height","css","_configure","_handleWorkflowParameter","value","callback","re","match","exec","String","wp_name","wp_inputs","label","name","type","color","wp_count","style","links","forms","steps","parms","each","get","step","i","emit","debug","icon","step_type","title","parseInt","step_label","step_name","annotation","step_version","merge","index","escape","help","citations","collapsible","collapsed","_isDataStep","sustain_version","sustain_repeats","sustain_conditionals","narrow","text_enable","text_disable","cls_enable","cls_disable","errors","messages","initial_errors","cls","hide_operations","needs_refresh","always_refresh","visitInputs","inputs","input","output_connections","output_connection","sub_step","j","input_step_index","push","connections_by_name","connection","input_name","step_linked","output_name","wp_input","wp_linked","backdrop","post_job_actions","pja","action_arguments","arg","data_resolved","context","is_runtime_value","__class__","is_data_input","indexOf","data_ref","length","is_workflow","default_value","flavor","optional","isEmpty","collapsible_value","collapsible_preview","render","reset","_renderHeader","_renderMessage","_renderParameters","_renderHistory","_renderStep","Button","_execute","onclick","empty","Label","execute_btn","Message","message","status","persistent","step_version_changes","wp_form","onchange","input_list","input_def","_refreshStep","_append","history_form","test_param","form","execute","promise","postchange","process","id","data","create","tool_id","tool_version","current_state","root","update","url","success","resolve","wait","response","reject","portlet","html","is_simple_input","hide_label","link","ignore","show_progress","set","wait_text","percentage","setTimeout","field","field_list","new_value","values","source_step","v","wp_field","wp_value","join","_refreshHistory","history","currHistoryPanel","clearTimeout","_refresh_history","numOfUnfinishedShownContents","UPDATE_DELAY","_submit","new_history_name","history_form_data","history_id","replacement_params","parameters_normalized","job_def","parameters","trigger","job_input_id","job_inputs","input_value","input_id","batch","validated","request","_enabled","hide","isArray","WebhookView","toolId","toolVersion","input_found","err_data","WebhookApp","urlRoot","error_messages","highlight","show","body","step_related_errors","err_msg","buttons","Close","complete","$container","enabled","lst","startsWith","sanitize","text","_templateError","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\ndefine([ 'utils/utils', 'utils/deferred', 'mvc/ui/ui-misc', 'mvc/form/form-view', 'mvc/form/form-data', 'mvc/tool/tool-form-base', 'mvc/ui/ui-modal', 'mvc/webhooks', 'mvc/workflow/workflow-icons' ],\n    function( Utils, Deferred, Ui, Form, FormData, ToolFormBase, Modal, Webhooks, WorkflowIcons ) {\n\n    var View = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.modal = parent.Galaxy.modal || new Modal.View();\n            this.model = options && options.model || new Backbone.Model( options );\n            this.deferred = new Deferred();\n            this.setElement( $( '<div/>' ).addClass( 'ui-form-composite' )\n                                          .append( this.$message      = $( '<div/>' ) )\n                                          .append( this.$header       = $( '<div/>' ) )\n                                          .append( this.$steps        = $( '<div/>' ) ) );\n            $( 'body' ).append( this.$el );\n            this._configure();\n            this.render();\n            $( window ).resize( function() { self._refresh() } );\n        },\n\n        /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n        _refresh: function( step_index ) {\n            var margin = _.reduce( this.$el.children(), function( memo, child ) {\n                return memo + $( child ).outerHeight();\n            }, 0 ) - this.$steps.height() + 90;\n            this.$steps.css( 'height', $( window ).height() - margin );\n        },\n\n        /** Configures form/step options for each workflow step */\n        _configure: function() {\n            var self = this;\n            this.forms = [];\n            this.steps = [];\n            this.links = [];\n            this.parms = [];\n            _.each( this.model.get( 'steps' ), function( step, i ) {\n                Galaxy.emit.debug( 'tool-form-composite::initialize()', i + ' : Preparing workflow step.' );\n                var icon = WorkflowIcons[ step.step_type ];\n                var title = parseInt( i + 1 ) + ': ' + ( step.step_label || step.step_name );\n                if ( step.annotation ) {\n                    title += ' - ' + step.annotation;\n                }\n                if ( step.step_version ) {\n                    title += ' (Galaxy Version ' + step.step_version + ')';\n                }\n                step = Utils.merge( {\n                    index                   : i,\n                    title                   : _.escape( title ),\n                    icon                    : icon || '',\n                    help                    : null,\n                    citations               : null,\n                    collapsible             : true,\n                    collapsed               : i > 0 && !self._isDataStep( step ),\n                    sustain_version         : true,\n                    sustain_repeats         : true,\n                    sustain_conditionals    : true,\n                    narrow                  : true,\n                    text_enable             : 'Edit',\n                    text_disable            : 'Undo',\n                    cls_enable              : 'fa fa-edit',\n                    cls_disable             : 'fa fa-undo',\n                    errors                  : step.messages,\n                    initial_errors          : true,\n                    cls                     : 'ui-portlet-narrow',\n                    hide_operations         : true,\n                    needs_refresh           : false,\n                    always_refresh          : step.step_type != 'tool'\n                }, step );\n                self.steps[ i ] = step;\n                self.links[ i ] = [];\n                self.parms[ i ] = {};\n            });\n\n            // build linear index of step input pairs\n            _.each( this.steps, function( step, i ) {\n                FormData.visitInputs( step.inputs, function( input, name ) {\n                    self.parms[ i ][ name ] = input;\n                });\n            });\n\n            // iterate through data input modules and collect linked sub steps\n            _.each( this.steps, function( step, i ) {\n                _.each( step.output_connections, function( output_connection ) {\n                    _.each( self.steps, function( sub_step, j ) {\n                        sub_step.step_index === output_connection.input_step_index && self.links[ i ].push( sub_step );\n                    });\n                });\n            });\n\n            // convert all connected data inputs to hidden fields with proper labels,\n            // and track the linked source step\n            _.each( this.steps, function( step, i ) {\n                _.each( self.steps, function( sub_step, j ) {\n                    var connections_by_name = {};\n                    _.each( step.output_connections, function( connection ) {\n                        sub_step.step_index === connection.input_step_index && ( connections_by_name[ connection.input_name ] = connection );\n                    });\n                    _.each( self.parms[ j ], function( input, name ) {\n                        var connection = connections_by_name[ name ];\n                        if ( connection ) {\n                            input.type = 'hidden';\n                            input.help = input.step_linked ? input.help + ', ' : '';\n                            input.help += 'Output dataset \\'' + connection.output_name + '\\' from step ' + ( parseInt( i ) + 1 );\n                            input.step_linked = input.step_linked || [];\n                            input.step_linked.push( step );\n                        }\n                    });\n                });\n            });\n\n            // identify and configure workflow parameters\n            var wp_count = 0;\n            this.wp_inputs = {};\n            function _handleWorkflowParameter( value, callback ) {\n                var re = /\\$\\{(.+?)\\}/g;\n                while ( match = re.exec( String( value ) ) ) {\n                    var wp_name = match[ 1 ];\n                    callback( self.wp_inputs[ wp_name ] = self.wp_inputs[ wp_name ] || {\n                        label   : wp_name,\n                        name    : wp_name,\n                        type    : 'text',\n                        color   : 'hsl( ' + ( ++wp_count * 100 ) + ', 70%, 30% )',\n                        style   : 'ui-form-wp-source',\n                        links   : []\n                    });\n                }\n            }\n            _.each( this.steps, function( step, i ) {\n                _.each( self.parms[ i ], function( input, name ) {\n                    _handleWorkflowParameter( input.value, function( wp_input ) {\n                        wp_input.links.push( step );\n                        input.wp_linked = true;\n                        input.type      = 'text';\n                        input.backdrop  = true;\n                        input.style     = 'ui-form-wp-target';\n                    });\n                });\n                _.each( step.post_job_actions, function( pja ) {\n                    _.each( pja.action_arguments, function( arg ) {\n                        _handleWorkflowParameter( arg, function() {} );\n                    });\n                });\n            });\n\n            // select fields are shown for dynamic fields if all putative data inputs are available,\n            // or if an explicit reference is specified as data_ref and available\n            _.each( this.steps, function( step, i ) {\n                if ( step.step_type == 'tool' ) {\n                    var data_resolved = true;\n                    FormData.visitInputs( step.inputs, function ( input, name, context ) {\n                        var is_runtime_value = input.value && input.value.__class__ == 'RuntimeValue';\n                        var is_data_input = ([ 'data', 'data_collection' ]).indexOf( input.type ) != -1;\n                        var data_ref = context[ input.data_ref ];\n                        input.step_linked && !self._isDataStep( input.step_linked ) && ( data_resolved = false );\n                        input.options && ( ( input.options.length == 0 && !data_resolved ) || input.wp_linked ) && ( input.is_workflow = true );\n                        data_ref && ( input.is_workflow = ( data_ref.step_linked && !self._isDataStep( data_ref.step_linked ) ) || input.wp_linked );\n                        ( is_data_input || ( input.value && input.value.__class__ == 'RuntimeValue' && !input.step_linked ) ) && ( step.collapsed = false );\n                        is_runtime_value && ( input.value = input.default_value );\n                        input.flavor = 'workflow';\n                        if ( !is_runtime_value && !is_data_input && input.type !== 'hidden' && !input.wp_linked ) {\n                            if ( input.optional || ( !Utils.isEmpty( input.value ) && input.value !== '' ) ) {\n                                input.collapsible_value = input.value;\n                                input.collapsible_preview = true;\n                            }\n                        }\n                    });\n                }\n            });\n        },\n\n        render: function() {\n            var self = this;\n            this.deferred.reset();\n            this._renderHeader();\n            this._renderMessage();\n            this._renderParameters();\n            this._renderHistory();\n            _.each ( this.steps, function( step ) { self._renderStep( step ) } );\n        },\n\n        /** Render header */\n        _renderHeader: function() {\n            var self = this;\n            this.execute_btn = new Ui.Button({\n                icon        : 'fa-check',\n                title       : 'Run workflow',\n                cls         : 'btn btn-primary',\n                onclick     : function() { self._execute() }\n            });\n            this.$header.addClass( 'ui-form-header' ).empty()\n                        .append( new Ui.Label( { title: 'Workflow: ' + this.model.get( 'name' ) } ).$el )\n                        .append( this.execute_btn.$el );\n        },\n\n        /** Render message */\n        _renderMessage: function() {\n            this.$message.empty();\n            if ( this.model.get( 'has_upgrade_messages' ) ) {\n                this.$message.append( new Ui.Message( {\n                    message     : 'Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.',\n                    status      : 'warning',\n                    persistent  : true,\n                    fade        : false\n                } ).$el );\n            }\n            var step_version_changes = this.model.get( 'step_version_changes' );\n            if ( step_version_changes && step_version_changes.length > 0 ) {\n                this.$message.append( new Ui.Message( {\n                    message     : 'Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.',\n                    status      : 'warning',\n                    persistent  : true,\n                    fade        : false\n                } ).$el );\n            }\n        },\n\n        /** Render workflow parameters */\n        _renderParameters: function() {\n            var self = this;\n            this.wp_form = null;\n            if ( !_.isEmpty( this.wp_inputs ) ) {\n                this.wp_form = new Form({ title: '<b>Workflow Parameters</b>', inputs: this.wp_inputs, cls: 'ui-portlet-narrow', onchange: function() {\n                        _.each( self.wp_form.input_list, function( input_def, i ) {\n                            _.each( input_def.links, function( step ) { self._refreshStep( step ) } );\n                        });\n                    }\n                });\n                this._append( this.$steps.empty(), this.wp_form.$el );\n            }\n        },\n\n        /** Render workflow parameters */\n        _renderHistory: function() {\n            this.history_form = new Form({\n                cls    : 'ui-portlet-narrow',\n                title  : '<b>History Options</b>',\n                inputs : [{\n                    type        : 'conditional',\n                    name        : 'new_history',\n                    test_param  : {\n                        name        : 'check',\n                        label       : 'Send results to a new history',\n                        type        : 'boolean',\n                        value       : 'false',\n                        help        : ''\n                    },\n                    cases       : [{\n                        value   : 'true',\n                        inputs  : [{\n                            name    : 'name',\n                            label   : 'History name',\n                            type    : 'text',\n                            value   : this.model.get( 'name' )\n                        }]\n                    }]\n                }]\n            });\n            this._append( this.$steps, this.history_form.$el );\n        },\n\n        /** Render step */\n        _renderStep: function( step ) {\n            var self = this;\n            var form = null;\n            this.deferred.execute( function( promise ) {\n                self.$steps.addClass( 'ui-steps' );\n                if ( step.step_type == 'tool' ) {\n                    step.postchange = function( process, form ) {\n                        var self = this;\n                        var current_state = {\n                            tool_id         : step.id,\n                            tool_version    : step.version,\n                            inputs          : $.extend( true, {}, form.data.create() )\n                        }\n                        form.wait( true );\n                        Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Sending current state.', current_state );\n                        Utils.request({\n                            type    : 'POST',\n                            url     : Galaxy.root + 'api/tools/' + step.id + '/build',\n                            data    : current_state,\n                            success : function( data ) {\n                                form.update( data );\n                                form.wait( false );\n                                Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Received new model.', data );\n                                process.resolve();\n                            },\n                            error   : function( response ) {\n                                Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Refresh request failed.', response );\n                                process.reject();\n                            }\n                        });\n                    };\n                    form = new ToolFormBase( step );\n                    if ( step.post_job_actions && step.post_job_actions.length ) {\n                        form.portlet.append( $( '<div/>' ).addClass( 'ui-form-element-disabled' )\n                            .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( '<b>Job Post Actions</b>' ) )\n                            .append( $( '<div/>' ).addClass( 'ui-form-preview' ).html(\n                                _.reduce( step.post_job_actions, function( memo, value ) {\n                                    return memo + ' ' + value.short_str;\n                                }, '' ) ) )\n                            );\n                    }\n                } else {\n                    var is_simple_input = ([ 'data_input', 'data_collection_input' ]).indexOf( step.step_type ) != -1;\n                    _.each( step.inputs, function( input ) { input.flavor = 'module'; input.hide_label = is_simple_input; } );\n                    form = new Form( Utils.merge({\n                        title    : step.title,\n                        onchange : function() { _.each( self.links[ step.index ], function( link ) { self._refreshStep( link ) } ) },\n                        inputs   : step.inputs && step.inputs.length > 0 ? step.inputs : [ { type: 'hidden', name: 'No options available.', ignore: null } ]\n                    }, step ) );\n                }\n                self.forms[ step.index ] = form;\n                self._append( self.$steps, form.$el );\n                self._refresh();\n                step.needs_refresh && self._refreshStep( step );\n                form.portlet[ !self.show_progress ? 'enable' : 'disable' ]();\n                self.show_progress && self.execute_btn.model.set( { wait        : true,\n                                                                    wait_text   : 'Preparing...',\n                                                                    percentage  : ( step.index + 1 ) * 100.0 / self.steps.length } );\n                Galaxy.emit.debug( 'tool-form-composite::initialize()', step.index + ' : Workflow step state ready.', step );\n                setTimeout( function() { promise.resolve() }, 0 );\n            });\n        },\n\n        /** Refreshes step values from source step values */\n        _refreshStep: function( step ) {\n            var self = this;\n            var form = this.forms[ step.index ];\n            if ( form ) {\n                _.each( self.parms[ step.index ], function( input, name ) {\n                    if ( input.step_linked || input.wp_linked ) {\n                        var field = form.field_list[ form.data.match( name ) ];\n                        if ( field ) {\n                            var new_value = undefined;\n                            if ( input.step_linked ) {\n                                new_value = { values: [] };\n                                _.each( input.step_linked, function( source_step ) {\n                                    if ( self._isDataStep( source_step ) ) {\n                                        value = self.forms[ source_step.index ].data.create().input;\n                                        value && _.each( value.values, function( v ) { new_value.values.push( v ) } );\n                                    }\n                                });\n                                if ( !input.multiple && new_value.values.length > 0 ) {\n                                    new_value = { values: [ new_value.values[ 0 ] ] };\n                                }\n                            } else if ( input.wp_linked ) {\n                                new_value = input.value;\n                                var re = /\\$\\{(.+?)\\}/g;\n                                while ( match = re.exec( input.value ) ) {\n                                    var wp_field = self.wp_form.field_list[ self.wp_form.data.match( match[ 1 ] ) ];\n                                    var wp_value = wp_field && wp_field.value();\n                                    if ( wp_value ) {\n                                        new_value = new_value.split( match[ 0 ] ).join( wp_value );\n                                    }\n                                }\n                            }\n                            if ( new_value !== undefined ) {\n                                field.value( new_value );\n                            }\n                        }\n                    }\n                });\n                form.trigger( 'change' );\n            } else {\n                step.needs_refresh = true;\n            }\n        },\n\n        /** Refresh the history after job submission while form is shown */\n        _refreshHistory: function() {\n            var self = this;\n            var history = parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.model;\n            this._refresh_history && clearTimeout( this._refresh_history );\n            if ( history ) {\n                history.refresh().success( function() {\n                    if ( history.numOfUnfinishedShownContents() === 0 ) {\n                        self._refresh_history = setTimeout( function() { self._refreshHistory() }, history.UPDATE_DELAY );\n                    }\n                });\n            }\n        },\n\n        /** Build remaining steps */\n        _execute: function() {\n            var self = this;\n            this.show_progress = true;\n            this._enabled( false );\n            this.deferred.execute( function( promise ) {\n                setTimeout( function() { promise.resolve(); self._submit(); }, 0 );\n            });\n        },\n\n        /** Validate and submit workflow */\n        _submit: function() {\n            var self = this;\n            var history_form_data = this.history_form.data.create();\n            var job_def = {\n                new_history_name      : history_form_data[ 'new_history|name' ] ? history_form_data[ 'new_history|name' ] : null,\n                history_id            : !history_form_data[ 'new_history|name' ] ? this.model.get( 'history_id' ) : null,\n                replacement_params    : this.wp_form ? this.wp_form.data.create() : {},\n                parameters            : {},\n                // Tool form will submit flat maps for each parameter\n                // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n                // data structures).\n                parameters_normalized : true,\n                // Tool form always wants a list of invocations back\n                // so that inputs can be batched.\n                batch                 : true\n            };\n            var validated = true;\n            for ( var i in this.forms ) {\n                var form = this.forms[ i ];\n                var job_inputs  = form.data.create();\n                var step        = self.steps[ i ];\n                var step_index  = step.step_index;\n                form.trigger( 'reset' );\n                for ( var job_input_id in job_inputs ) {\n                    var input_value = job_inputs[ job_input_id ];\n                    var input_id    = form.data.match( job_input_id );\n                    var input_field = form.field_list[ input_id ];\n                    var input_def   = form.input_list[ input_id ];\n                    if ( !input_def.step_linked ) {\n                        if ( this._isDataStep( step ) ) {\n                            validated = input_value && input_value.values && input_value.values.length > 0;\n                        } else {\n                            validated = input_def.optional || ( input_def.is_workflow && input_value !== '' ) || ( !input_def.is_workflow && input_value !== null );\n                        }\n                        if ( !validated ) {\n                            form.highlight( input_id );\n                            break;\n                        }\n                        job_def.parameters[ step_index ] = job_def.parameters[ step_index ] || {};\n                        job_def.parameters[ step_index ][ job_input_id ] = job_inputs[ job_input_id ];\n                    }\n                }\n                if ( !validated ) {\n                    break;\n                }\n            }\n            if ( !validated ) {\n                self._enabled( true );\n                Galaxy.emit.debug( 'tool-form-composite::submit()', 'Validation failed.', job_def );\n            } else {\n                Galaxy.emit.debug( 'tool-form-composite::submit()', 'Validation complete.', job_def );\n                Utils.request({\n                    type    : 'POST',\n                    url     : Galaxy.root + 'api/workflows/' + this.model.id + '/invocations',\n                    data    : job_def,\n                    success : function( response ) {\n                        Galaxy.emit.debug( 'tool-form-composite::submit', 'Submission successful.', response );\n                        self.$el.children().hide();\n                        self.$el.append( self._templateSuccess( response ) );\n\n                        // Show Webhook if job is running\n                        if ($.isArray( response ) && response.length > 0) {\n                            self.$el.append( $( '<div/>', { id: 'webhook-view' } ) );\n                            var WebhookApp = new Webhooks.WebhookView({\n                                urlRoot: Galaxy.root + 'api/webhooks/workflow',\n                                toolId: job_def.tool_id,\n                                toolVersion: job_def.tool_version,\n                            });\n                        }\n\n                        self._refreshHistory();\n                    },\n                    error   : function( response ) {\n                        Galaxy.emit.debug( 'tool-form-composite::submit', 'Submission failed.', response );\n                        var input_found = false;\n                        if ( response && response.err_data ) {\n                            for ( var i in self.forms ) {\n                                var form = self.forms[ i ];\n                                var step_related_errors = response.err_data[ form.model.get( 'step_index' ) ];\n                                if ( step_related_errors ) {\n                                    var error_messages = form.data.matchResponse( step_related_errors );\n                                    for ( var input_id in error_messages ) {\n                                        form.highlight( input_id, error_messages[ input_id ] );\n                                        input_found = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        if ( !input_found ) {\n                            self.modal.show({\n                                title   : 'Workflow submission failed',\n                                body    : self._templateError( job_def, response && response.err_msg ),\n                                buttons : {\n                                    'Close' : function() {\n                                        self.modal.hide();\n                                    }\n                                }\n                            });\n                        }\n                    },\n                    complete: function() {\n                        self._enabled( true );\n                    }\n                });\n            }\n        },\n\n        /** Append new dom to body */\n        _append: function( $container, $el ) {\n            $container.append( '<p/>' ).append( $el );\n        },\n\n        /** Set enabled/disabled state */\n        _enabled: function( enabled ) {\n            this.execute_btn.model.set( { wait: !enabled, wait_text: 'Sending...', percentage: -1 } );\n            this.wp_form && this.wp_form.portlet[ enabled ? 'enable' : 'disable' ]();\n            this.history_form && this.history_form.portlet[ enabled ? 'enable' : 'disable' ]();\n            _.each( this.forms, function( form ) { form && form.portlet[ enabled ? 'enable' : 'disable' ]() } );\n        },\n\n        /** Is data input module/step */\n        _isDataStep: function( steps ) {\n            lst = $.isArray( steps ) ? steps : [ steps ] ;\n            for ( var i = 0; i < lst.length; i++ ) {\n                var step = lst[ i ];\n                if ( !step || !step.step_type || !step.step_type.startsWith( 'data' ) ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /** Templates */\n        _templateSuccess: function( response ) {\n            if ( $.isArray( response ) && response.length > 0 ) {\n                return $( '<div/>' ).addClass( 'donemessagelarge' )\n                                    .append( $( '<p/>' ).html( 'Successfully invoked workflow <b>' + Utils.sanitize( this.model.get( 'name' ) ) + '</b>' + ( response.length > 1 ? ' <b>' + response.length + ' times</b>' : '' ) + '.' ) )\n                                    .append( $( '<p/>' ).append( '<b/>' ).text( 'You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from \\'running\\' to \\'finished\\' if completed successfully or \\'error\\' if problems were encountered.' ) );\n            } else {\n                return this._templateError( response, 'Invalid success response. No invocations found.' );\n            }\n        },\n\n        _templateError: function( response, err_msg ) {\n            return  $( '<div/>' ).addClass( 'errormessagelarge' )\n                                 .append( $( '<p/>' ).text( 'The server could not complete the request. Please contact the Galaxy Team if this error persists. ' + ( JSON.stringify( err_msg ) || '' ) ) )\n                                 .append( $( '<pre/>' ).text( JSON.stringify( response, null, 4 ) ) );\n        }\n    });\n    return {\n        View: View\n    };\n});\n"]}