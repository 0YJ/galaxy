{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["_utils","require","_deferred","_uiMisc","_formView","_formData","_toolFormBase","_uiModal","_webhooks","_workflowIcons","View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","model","Model","deferred","_deferred2","setElement","$","addClass","append","$message","$header","$steps","$el","_configure","render","window","resize","_refresh","step_index","margin","_","reduce","children","memo","child","outerHeight","height","css","_handleWorkflowParameter","value","callback","wp_count","match","re","exec","String","wp_inputs","wp_name","label","name","links","each","get","step","i","debug","icon","_workflowIcons2","step_type","title","parseInt","step_label","step_name","step_version","_utils2","merge","index","fixed_title","escape","help","citations","emit","_isDataStep","text_enable","cls_disable","errors","messages","collapsed","sustain_repeats","sustain_conditionals","narrow","inputs","input","initial_errors","steps","output_connections","output_connection","sub_step","j","parms","input_step_index","push","connection","input_name","connections_by_name","type","output_name","wp_input","wp_linked","pja","action_arguments","arg","data_resolved","_formData2","visitInputs","context","is_data_input","data_ref","length","is_workflow","is_runtime_value","optional","collapsible_value","collapsible_preview","step_linked","__class__","reset","_renderHeader","default_value","_renderMessage","_renderHistory","_renderStep","isEmpty","step_version_changes","message","status","persistent","empty","_renderParameters","Label","wp_form","execute_btn","onchange","_uiMisc2","Message","_append","fade","cls","test_param","input_list","input_def","history_form","_refreshStep","form","current_state","tool_id","tool_version","wait","url","data","success","error","reject","is_simple_input","promise","postchange","process","id","version","ignore","create","portlet","show_progress","root","wait_text","percentage","update","resolve","field","new_value","source_step","html","values","short_str","indexOf","trigger","flavor","needs_refresh","_formView2","currHistoryPanel","link","clearTimeout","_refresh_history","numOfUnfinishedShownContents","setTimeout","_refreshHistory","set","job_def","new_history_name","history_id","history_form_data","replacement_params","validated","forms","job_inputs","job_input_id","input_value","input_id","input_field","field_list","v","parameters","wp_field","wp_value","hide","_templateSuccess","undefined","WebhookApp","history","error_messages","input_found","UPDATE_DELAY","Close","_enabled","execute","complete","_submit","$container","batch","lst","isArray","response","_templateError","err_msg","highlight","request","_webhooks2","WebhookView","urlRoot","toolId","toolVersion","err_data","step_related_errors","matchResponse","show","body","buttons","enabled","startsWith","sanitize","text","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\nimport Utils from \"utils/utils\";\nimport Deferred from \"utils/deferred\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Form from \"mvc/form/form-view\";\nimport FormData from \"mvc/form/form-data\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Webhooks from \"mvc/webhooks\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.deferred = new Deferred();\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"ui-form-composite\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$header = $(\"<div/>\")))\n                .append((this.$steps = $(\"<div/>\")))\n        );\n        $(\"body\").append(this.$el);\n        this._configure();\n        this.render();\n        $(window).resize(function() {\n            self._refresh();\n        });\n    },\n\n    /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n    _refresh: function(step_index) {\n        var margin =\n            _.reduce(\n                this.$el.children(),\n                function(memo, child) {\n                    return memo + $(child).outerHeight();\n                },\n                0\n            ) -\n            this.$steps.height() +\n            90;\n        this.$steps.css(\"height\", $(window).height() - margin);\n    },\n\n    /** Configures form/step options for each workflow step */\n    _configure: function() {\n        var self = this;\n        this.forms = [];\n        this.steps = [];\n        this.links = [];\n        this.parms = [];\n        _.each(this.model.get(\"steps\"), function(step, i) {\n            Galaxy.emit.debug(\n                \"tool-form-composite::initialize()\",\n                i + \" : Preparing workflow step.\"\n            );\n            var icon = WorkflowIcons[step.step_type];\n            var title =\n                parseInt(i + 1) + \": \" + (step.step_label || step.step_name);\n            if (step.annotation) {\n                title += \" - \" + step.annotation;\n            }\n            if (step.step_version) {\n                title += \" (Galaxy Version \" + step.step_version + \")\";\n            }\n            step = Utils.merge(\n                {\n                    index: i,\n                    fixed_title: _.escape(title),\n                    icon: icon || \"\",\n                    help: null,\n                    citations: null,\n                    collapsible: true,\n                    collapsed: i > 0 && !self._isDataStep(step),\n                    sustain_version: true,\n                    sustain_repeats: true,\n                    sustain_conditionals: true,\n                    narrow: true,\n                    text_enable: \"Edit\",\n                    text_disable: \"Undo\",\n                    cls_enable: \"fa fa-edit\",\n                    cls_disable: \"fa fa-undo\",\n                    errors: step.messages,\n                    initial_errors: true,\n                    cls: \"ui-portlet-narrow\",\n                    hide_operations: true,\n                    needs_refresh: false,\n                    always_refresh: step.step_type != \"tool\"\n                },\n                step\n            );\n            self.steps[i] = step;\n            self.links[i] = [];\n            self.parms[i] = {};\n        });\n\n        // build linear index of step input pairs\n        _.each(this.steps, function(step, i) {\n            FormData.visitInputs(step.inputs, function(input, name) {\n                self.parms[i][name] = input;\n            });\n        });\n\n        // iterate through data input modules and collect linked sub steps\n        _.each(this.steps, function(step, i) {\n            _.each(step.output_connections, function(output_connection) {\n                _.each(self.steps, function(sub_step, j) {\n                    sub_step.step_index ===\n                        output_connection.input_step_index &&\n                        self.links[i].push(sub_step);\n                });\n            });\n        });\n\n        // convert all connected data inputs to hidden fields with proper labels,\n        // and track the linked source step\n        _.each(this.steps, function(step, i) {\n            _.each(self.steps, function(sub_step, j) {\n                var connections_by_name = {};\n                _.each(step.output_connections, function(connection) {\n                    sub_step.step_index === connection.input_step_index &&\n                        (connections_by_name[\n                            connection.input_name\n                        ] = connection);\n                });\n                _.each(self.parms[j], function(input, name) {\n                    var connection = connections_by_name[name];\n                    if (connection) {\n                        input.type = \"hidden\";\n                        input.help = input.step_linked ? input.help + \", \" : \"\";\n                        input.help +=\n                            \"Output dataset '\" +\n                            connection.output_name +\n                            \"' from step \" +\n                            (parseInt(i) + 1);\n                        input.step_linked = input.step_linked || [];\n                        input.step_linked.push(step);\n                    }\n                });\n            });\n        });\n\n        // identify and configure workflow parameters\n        var wp_count = 0;\n        this.wp_inputs = {};\n        function _handleWorkflowParameter(value, callback) {\n            var re = /\\$\\{(.+?)\\}/g,\n                match;\n            while ((match = re.exec(String(value)))) {\n                var wp_name = match[1];\n                callback(\n                    (self.wp_inputs[wp_name] = self.wp_inputs[wp_name] || {\n                        label: wp_name,\n                        name: wp_name,\n                        type: \"text\",\n                        color: \"hsl( \" + ++wp_count * 100 + \", 70%, 30% )\",\n                        style: \"ui-form-wp-source\",\n                        links: []\n                    })\n                );\n            }\n        }\n        _.each(this.steps, function(step, i) {\n            _.each(self.parms[i], function(input, name) {\n                _handleWorkflowParameter(input.value, function(wp_input) {\n                    wp_input.links.push(step);\n                    input.wp_linked = true;\n                    input.type = \"text\";\n                    input.backdrop = true;\n                    input.style = \"ui-form-wp-target\";\n                });\n            });\n            _.each(step.post_job_actions, function(pja) {\n                _.each(pja.action_arguments, function(arg) {\n                    _handleWorkflowParameter(arg, function() {});\n                });\n            });\n        });\n\n        // select fields are shown for dynamic fields if all putative data inputs are available,\n        // or if an explicit reference is specified as data_ref and available\n        _.each(this.steps, function(step, i) {\n            if (step.step_type == \"tool\") {\n                var data_resolved = true;\n                FormData.visitInputs(step.inputs, function(\n                    input,\n                    name,\n                    context\n                ) {\n                    var is_runtime_value =\n                        input.value && input.value.__class__ == \"RuntimeValue\";\n                    var is_data_input =\n                        [\"data\", \"data_collection\"].indexOf(input.type) != -1;\n                    var data_ref = context[input.data_ref];\n                    input.step_linked &&\n                        !self._isDataStep(input.step_linked) &&\n                        (data_resolved = false);\n                    input.options &&\n                        ((input.options.length == 0 && !data_resolved) ||\n                            input.wp_linked) &&\n                        (input.is_workflow = true);\n                    data_ref &&\n                        (input.is_workflow =\n                            (data_ref.step_linked &&\n                                !self._isDataStep(data_ref.step_linked)) ||\n                            input.wp_linked);\n                    (is_data_input ||\n                        (input.value &&\n                            input.value.__class__ == \"RuntimeValue\" &&\n                            !input.step_linked)) &&\n                        (step.collapsed = false);\n                    is_runtime_value && (input.value = input.default_value);\n                    input.flavor = \"workflow\";\n                    if (\n                        !is_runtime_value &&\n                        !is_data_input &&\n                        input.type !== \"hidden\" &&\n                        !input.wp_linked\n                    ) {\n                        if (\n                            input.optional ||\n                            (!Utils.isEmpty(input.value) && input.value !== \"\")\n                        ) {\n                            input.collapsible_value = input.value;\n                            input.collapsible_preview = true;\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    render: function() {\n        var self = this;\n        this.deferred.reset();\n        this._renderHeader();\n        this._renderMessage();\n        this._renderParameters();\n        this._renderHistory();\n        _.each(this.steps, function(step) {\n            self._renderStep(step);\n        });\n    },\n\n    /** Render header */\n    _renderHeader: function() {\n        var self = this;\n        this.execute_btn = new Ui.Button({\n            icon: \"fa-check\",\n            title: \"Run workflow\",\n            cls: \"btn btn-primary\",\n            onclick: function() {\n                self._execute();\n            }\n        });\n        this.$header\n            .addClass(\"ui-form-header\")\n            .empty()\n            .append(\n                new Ui.Label({\n                    title: \"Workflow: \" + this.model.get(\"name\")\n                }).$el\n            )\n            .append(this.execute_btn.$el);\n    },\n\n    /** Render message */\n    _renderMessage: function() {\n        this.$message.empty();\n        if (this.model.get(\"has_upgrade_messages\")) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n        var step_version_changes = this.model.get(\"step_version_changes\");\n        if (step_version_changes && step_version_changes.length > 0) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderParameters: function() {\n        var self = this;\n        this.wp_form = null;\n        if (!_.isEmpty(this.wp_inputs)) {\n            this.wp_form = new Form({\n                title: \"<b>Workflow Parameters</b>\",\n                inputs: this.wp_inputs,\n                cls: \"ui-portlet-narrow\",\n                onchange: function() {\n                    _.each(self.wp_form.input_list, function(input_def, i) {\n                        _.each(input_def.links, function(step) {\n                            self._refreshStep(step);\n                        });\n                    });\n                }\n            });\n            this._append(this.$steps.empty(), this.wp_form.$el);\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderHistory: function() {\n        this.history_form = new Form({\n            cls: \"ui-portlet-narrow\",\n            title: \"<b>History Options</b>\",\n            inputs: [\n                {\n                    type: \"conditional\",\n                    name: \"new_history\",\n                    test_param: {\n                        name: \"check\",\n                        label: \"Send results to a new history\",\n                        type: \"boolean\",\n                        value: \"false\",\n                        help: \"\"\n                    },\n                    cases: [\n                        {\n                            value: \"true\",\n                            inputs: [\n                                {\n                                    name: \"name\",\n                                    label: \"History name\",\n                                    type: \"text\",\n                                    value: this.model.get(\"name\")\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        });\n        this._append(this.$steps, this.history_form.$el);\n    },\n\n    /** Render step */\n    _renderStep: function(step) {\n        var self = this;\n        var form = null;\n        this.deferred.execute(function(promise) {\n            self.$steps.addClass(\"ui-steps\");\n            if (step.step_type == \"tool\") {\n                step.postchange = function(process, form) {\n                    var self = this;\n                    var current_state = {\n                        tool_id: step.id,\n                        tool_version: step.version,\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    form.wait(true);\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::postchange()\",\n                        \"Sending current state.\",\n                        current_state\n                    );\n                    Utils.request({\n                        type: \"POST\",\n                        url: Galaxy.root + \"api/tools/\" + step.id + \"/build\",\n                        data: current_state,\n                        success: function(data) {\n                            form.update(data);\n                            form.wait(false);\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Received new model.\",\n                                data\n                            );\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Refresh request failed.\",\n                                response\n                            );\n                            process.reject();\n                        }\n                    });\n                };\n                form = new ToolFormBase(step);\n                if (step.post_job_actions && step.post_job_actions.length) {\n                    form.portlet.append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-form-element-disabled\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"<b>Job Post Actions</b>\")\n                            )\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-preview\")\n                                    .html(\n                                        _.reduce(\n                                            step.post_job_actions,\n                                            function(memo, value) {\n                                                return (\n                                                    memo + \" \" + value.short_str\n                                                );\n                                            },\n                                            \"\"\n                                        )\n                                    )\n                            )\n                    );\n                }\n            } else {\n                var is_simple_input =\n                    [\"data_input\", \"data_collection_input\"].indexOf(\n                        step.step_type\n                    ) != -1;\n                _.each(step.inputs, function(input) {\n                    input.flavor = \"module\";\n                    input.hide_label = is_simple_input;\n                });\n                form = new Form(\n                    Utils.merge(\n                        {\n                            title: step.fixed_title,\n                            onchange: function() {\n                                _.each(self.links[step.index], function(link) {\n                                    self._refreshStep(link);\n                                });\n                            },\n                            inputs:\n                                step.inputs && step.inputs.length > 0\n                                    ? step.inputs\n                                    : [\n                                          {\n                                              type: \"hidden\",\n                                              name: \"No options available.\",\n                                              ignore: null\n                                          }\n                                      ]\n                        },\n                        step\n                    )\n                );\n            }\n            self.forms[step.index] = form;\n            self._append(self.$steps, form.$el);\n            self._refresh();\n            step.needs_refresh && self._refreshStep(step);\n            form.portlet[!self.show_progress ? \"enable\" : \"disable\"]();\n            self.show_progress &&\n                self.execute_btn.model.set({\n                    wait: true,\n                    wait_text: \"Preparing...\",\n                    percentage: (step.index + 1) * 100.0 / self.steps.length\n                });\n            Galaxy.emit.debug(\n                \"tool-form-composite::initialize()\",\n                step.index + \" : Workflow step state ready.\",\n                step\n            );\n            setTimeout(function() {\n                promise.resolve();\n            }, 0);\n        });\n    },\n\n    /** Refreshes step values from source step values */\n    _refreshStep: function(step) {\n        var self = this;\n        var form = this.forms[step.index];\n        if (form) {\n            _.each(self.parms[step.index], function(input, name) {\n                if (input.step_linked || input.wp_linked) {\n                    var field = form.field_list[form.data.match(name)];\n                    if (field) {\n                        var new_value = undefined;\n                        if (input.step_linked) {\n                            new_value = { values: [] };\n                            _.each(input.step_linked, function(source_step) {\n                                if (self._isDataStep(source_step)) {\n                                    var value = self.forms[\n                                        source_step.index\n                                    ].data.create().input;\n                                    value &&\n                                        _.each(value.values, function(v) {\n                                            new_value.values.push(v);\n                                        });\n                                }\n                            });\n                            if (\n                                !input.multiple &&\n                                new_value.values.length > 0\n                            ) {\n                                new_value = {\n                                    values: [new_value.values[0]]\n                                };\n                            }\n                        } else if (input.wp_linked) {\n                            new_value = input.value;\n                            var re = /\\$\\{(.+?)\\}/g,\n                                match;\n                            while ((match = re.exec(input.value))) {\n                                var wp_field =\n                                    self.wp_form.field_list[\n                                        self.wp_form.data.match(match[1])\n                                    ];\n                                var wp_value = wp_field && wp_field.value();\n                                if (wp_value) {\n                                    new_value = new_value\n                                        .split(match[0])\n                                        .join(wp_value);\n                                }\n                            }\n                        }\n                        if (new_value !== undefined) {\n                            field.value(new_value);\n                        }\n                    }\n                }\n            });\n            form.trigger(\"change\");\n        } else {\n            step.needs_refresh = true;\n        }\n    },\n\n    /** Refresh the history after job submission while form is shown */\n    _refreshHistory: function() {\n        var self = this;\n        var history =\n            parent.Galaxy &&\n            parent.Galaxy.currHistoryPanel &&\n            parent.Galaxy.currHistoryPanel.model;\n        this._refresh_history && clearTimeout(this._refresh_history);\n        if (history) {\n            history.refresh().success(function() {\n                if (history.numOfUnfinishedShownContents() === 0) {\n                    self._refresh_history = setTimeout(function() {\n                        self._refreshHistory();\n                    }, history.UPDATE_DELAY);\n                }\n            });\n        }\n    },\n\n    /** Build remaining steps */\n    _execute: function() {\n        var self = this;\n        this.show_progress = true;\n        this._enabled(false);\n        this.deferred.execute(function(promise) {\n            setTimeout(function() {\n                promise.resolve();\n                self._submit();\n            }, 0);\n        });\n    },\n\n    /** Validate and submit workflow */\n    _submit: function() {\n        var self = this;\n        var history_form_data = this.history_form.data.create();\n        var job_def = {\n            new_history_name: history_form_data[\"new_history|name\"]\n                ? history_form_data[\"new_history|name\"]\n                : null,\n            history_id: !history_form_data[\"new_history|name\"]\n                ? this.model.get(\"history_id\")\n                : null,\n            replacement_params: this.wp_form ? this.wp_form.data.create() : {},\n            parameters: {},\n            // Tool form will submit flat maps for each parameter\n            // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n            // data structures).\n            parameters_normalized: true,\n            // Tool form always wants a list of invocations back\n            // so that inputs can be batched.\n            batch: true\n        };\n        var validated = true;\n        for (var i in this.forms) {\n            var form = this.forms[i];\n            var job_inputs = form.data.create();\n            var step = self.steps[i];\n            var step_index = step.step_index;\n            form.trigger(\"reset\");\n            for (var job_input_id in job_inputs) {\n                var input_value = job_inputs[job_input_id];\n                var input_id = form.data.match(job_input_id);\n                var input_field = form.field_list[input_id];\n                var input_def = form.input_list[input_id];\n                if (!input_def.step_linked) {\n                    if (this._isDataStep(step)) {\n                        validated =\n                            input_value &&\n                            input_value.values &&\n                            input_value.values.length > 0;\n                    } else {\n                        validated =\n                            input_def.optional ||\n                            (input_def.is_workflow && input_value !== \"\") ||\n                            (!input_def.is_workflow && input_value !== null);\n                    }\n                    if (!validated) {\n                        form.highlight(input_id);\n                        break;\n                    }\n                    job_def.parameters[step_index] =\n                        job_def.parameters[step_index] || {};\n                    job_def.parameters[step_index][job_input_id] =\n                        job_inputs[job_input_id];\n                }\n            }\n            if (!validated) {\n                break;\n            }\n        }\n        if (!validated) {\n            self._enabled(true);\n            Galaxy.emit.debug(\n                \"tool-form-composite::submit()\",\n                \"Validation failed.\",\n                job_def\n            );\n        } else {\n            Galaxy.emit.debug(\n                \"tool-form-composite::submit()\",\n                \"Validation complete.\",\n                job_def\n            );\n            Utils.request({\n                type: \"POST\",\n                url:\n                    Galaxy.root +\n                    \"api/workflows/\" +\n                    this.model.id +\n                    \"/invocations\",\n                data: job_def,\n                success: function(response) {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit\",\n                        \"Submission successful.\",\n                        response\n                    );\n                    self.$el.children().hide();\n                    self.$el.append(self._templateSuccess(response));\n\n                    // Show Webhook if job is running\n                    if ($.isArray(response) && response.length > 0) {\n                        self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                        var WebhookApp = new Webhooks.WebhookView({\n                            urlRoot: Galaxy.root + \"api/webhooks/workflow\",\n                            toolId: job_def.tool_id,\n                            toolVersion: job_def.tool_version\n                        });\n                    }\n\n                    self._refreshHistory();\n                },\n                error: function(response) {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit\",\n                        \"Submission failed.\",\n                        response\n                    );\n                    var input_found = false;\n                    if (response && response.err_data) {\n                        for (var i in self.forms) {\n                            var form = self.forms[i];\n                            var step_related_errors =\n                                response.err_data[form.model.get(\"step_index\")];\n                            if (step_related_errors) {\n                                var error_messages = form.data.matchResponse(\n                                    step_related_errors\n                                );\n                                for (var input_id in error_messages) {\n                                    form.highlight(\n                                        input_id,\n                                        error_messages[input_id]\n                                    );\n                                    input_found = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!input_found) {\n                        self.modal.show({\n                            title: \"Workflow submission failed\",\n                            body: self._templateError(\n                                job_def,\n                                response && response.err_msg\n                            ),\n                            buttons: {\n                                Close: function() {\n                                    self.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                },\n                complete: function() {\n                    self._enabled(true);\n                }\n            });\n        }\n    },\n\n    /** Append new dom to body */\n    _append: function($container, $el) {\n        $container.append(\"<p/>\").append($el);\n    },\n\n    /** Set enabled/disabled state */\n    _enabled: function(enabled) {\n        this.execute_btn.model.set({\n            wait: !enabled,\n            wait_text: \"Sending...\",\n            percentage: -1\n        });\n        this.wp_form && this.wp_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        this.history_form &&\n            this.history_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        _.each(this.forms, function(form) {\n            form && form.portlet[enabled ? \"enable\" : \"disable\"]();\n        });\n    },\n\n    /** Is data input module/step */\n    _isDataStep: function(steps) {\n        var lst = $.isArray(steps) ? steps : [steps];\n        for (var i = 0; i < lst.length; i++) {\n            var step = lst[i];\n            if (\n                !step ||\n                !step.step_type ||\n                !step.step_type.startsWith(\"data\")\n            ) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /** Templates */\n    _templateSuccess: function(response) {\n        if ($.isArray(response) && response.length > 0) {\n            return $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").html(\n                        \"Successfully invoked workflow <b>\" +\n                            Utils.sanitize(this.model.get(\"name\")) +\n                            \"</b>\" +\n                            (response.length > 1\n                                ? \" <b>\" + response.length + \" times</b>\"\n                                : \"\") +\n                            \".\"\n                    )\n                )\n                .append(\n                    $(\"<p/>\")\n                        .append(\"<b/>\")\n                        .text(\n                            \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                        )\n                );\n        } else {\n            return this._templateError(\n                response,\n                \"Invalid success response. No invocations found.\"\n            );\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    \"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" +\n                        (JSON.stringify(err_msg) || \"\")\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\nexport default {\n    View: View\n};\n"]}