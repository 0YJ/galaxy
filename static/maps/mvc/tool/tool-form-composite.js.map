{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["define","Utils","Deferred","Ui","Form","FormData","ToolFormBase","Modal","Webhooks","WorkflowIcons","View","Backbone","extend","initialize","this","self","parent","Galaxy","modal","model","Model","options","deferred","$","addClass","$message","append","$header","$steps","$el","_refresh","on","scroll","step_index","margin","_","reduce","children","memo","child","outerHeight","height","css","_configure","_handleWorkflowParameter","value","callback","wp_count","re","exec","String","wp_inputs","match","wp_name","label","name","forms","steps","each","get","step","i","emit","debug","links","step_type","parms","parseInt","step_label","step_name","annotation","title","step_version","merge","escape","icon","index","_isDataStep","help","citations","collapsible","collapsed","sustain_version","sustain_repeats","sustain_conditionals","narrow","text_enable","messages","text_disable","cls_enable","cls_disable","errors","initial_errors","cls","hide_operations","needs_refresh","always_refresh","visitInputs","inputs","input","output_connections","output_connection","sub_step","j","input_step_index","push","connections_by_name","connection","input_name","type","step_linked","output_name","wp_input","wp_linked","pja","style","arg","data_resolved","context","indexOf","data_ref","length","is_workflow","is_data_input","__class__","collapsible_value","flavor","collapsible_preview","render","reset","_renderHeader","_renderMessage","_renderStep","execute_btn","Button","_execute","empty","Label","Message","message","status","step_version_changes","persistent","fade","wp_form","isEmpty","onchange","input_list","input_def","_refreshStep","_renderHistory","history_form","_append","test_param","form","execute","promise","postchange","process","current_state","tool_id","id","tool_version","version","data","create","root","update","wait","request","resolve","url","response","success","reject","post_job_actions","error","html","short_str","is_simple_input","hide_label","link","ignore","set","wait_text","percentage","setTimeout","portlet","show_progress","field_list","field","new_value","undefined","values","source_step","v","multiple","RegExp","wp_value","trigger","_refreshHistory","currHistoryPanel","_refresh_history","clearTimeout","history","refresh","numOfUnfinishedShownContents","UPDATE_DELAY","_submit","history_form_data","job_def","new_history_name","history_id","batch","validated","replacement_params","job_inputs","job_input_id","parameters","input_id","parameters_normalized","input_value","optional","highlight","_templateSuccess","isArray","WebhookView","urlRoot","step_related_errors","error_messages","matchResponse","WebhookApp","input_found","show","_templateError","err_msg","Close","_enabled","body","enabled","lst","startsWith","sanitize","text","JSON","stringify"],"mappings":"YACAA,SAAS,cAAe,iBAAkB,iBAAkB,qBAAsB,qBAAsB,0BAA2B,kBAAmB,eAAgB,+BADtK,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GA0gBY,OACHC,KAvgBMC,SAASD,KAAKE,QAArBF,WAAOC,SAAcC,GACrBC,GAAAA,GAAYC,IACRA,MAAIC,MAAOC,OAAXC,OAAAC,OAAA,GAAAX,GAAAG,KACAI,KAAKI,MAAQF,GAAOC,EAAPE,OAA2BZ,GAAAA,UAAxCa,MAAAC,GACAP,KAAKK,SAAQE,GAAAA,GACbP,KAAKQ,WAAWC,EAAIrB,UAApBsB,SAAA,qBAC+BA,OAAUV,KAAAW,SACVC,EAAAA,WAG/BA,OAAAZ,KAAAa,QAAAJ,EAAA,WACAG,OAAAZ,KAAAc,OAAAL,EAAA,YACAA,EAAA,QAAAG,OAAAZ,KAAAe,KACAf,KAAKgB,aACLhB,KAAKe,SAA8Bd,KAAAA,WAAiBD,KAApDe,IAAAE,GAAA,QAAA,WAAAhB,EAAAe,aACAhB,KAAKc,OAAOI,OAAQ,WAAWjB,EAAAe,aAAEf,EAAAA,QAAKe,OAAL,WAAAf,EAAAe,cACiBA,SAAlD,SAAAG,GAhBwB,GAAAC,GAAAC,EAAAC,OAAAtB,KAAAe,IAAAQ,WAAA,SAAAC,EAAAC,GAsBpB,MAAOD,GAAOf,EAAGgB,GAAQC,eAHjC,GAAA1B,KAAAc,OAAAa,SAAA,EACAX,MAAAA,OAAUY,IAAA,SAAUT,EAAAA,QAAaQ,SAAAP,IAI7BS,WAAKf,WAwFL,QAASgB,GAA0BC,EAAOC,GAFtCC,IADJ,GAAAC,GAAA,eACID,MAAJC,EAAAC,KAAAC,OAAAL,KAAA,CACKM,GAAAA,GAALC,MAAA,EACAN,GAASF,EAAAA,UAA0BC,GAAOC,EAAWK,UAAAE,KAC7CL,MAAKK,EACDD,KAAWH,EACXI,KAAUD,OACdN,MAAeK,QAAuBpC,MAAZsC,EAAiBF,eACvCG,MAAUD,oBACVE,YAtHY,GAAAxC,GAAAD,IA8BxBA,MAAK0C,SAHT1C,KAAA2C,SACAd,KAAAA,SACI7B,KAAIC,SACJoB,EAAAuB,KAAKF,KAAQrC,MAAbwC,IAAA,SAAA,SAAAC,EAAAC,GACA5C,OAAA6C,KAAAC,MAAA,oCAAAF,EAAA,8BACA,IAAKG,GAALvD,EAAAmD,EAAAK,WACKC,EAALC,SAAAN,EAAA,GAAA,MAAAD,EAAAQ,YAAAR,EAAAS,UACQT,GAAKzC,aACTF,GAAY8C,MAAOH,EAAAU,YAEfC,EAAAA,eACCX,GAAKU,oBAAaV,EAAAY,aAAA,KAEtBZ,EAAA3D,EAAAwE,OACIb,MAAoBC,EACrBU,MAASpC,EAAAuC,OAA2BF,GACvCG,KAAAA,GAAA,GACDf,KAAoB,KAChBgB,UADgB,KAEhBL,aAFgB,EAGhBI,UAHgBd,EAAA,IAAA9C,EAAA8D,YAAAjB,GAIhBkB,iBAJgB,EAKhBC,iBALgB,EAMhBC,sBANgB,EAOhBC,QAAyCJ,EACzCK,YARgB,OAShBC,aATgB,OAUhBC,WAVgB,aAWhBC,YAXgB,aAYhBC,OAZgB1B,EAAA2B,SAahBC,gBAbgB,EAchBC,IAdgB,oBAehBC,iBAfgB,EAgBhBC,eAhBgB,EAiBhBC,eAjBgB,QAAAhC,EAAAK,WAkBhB4B,GACAC,EAAAA,MAAAA,GAAAA,EACAC,EAAAA,MAAAA,MACAC,EAAAA,MAAAA,QAIJjF,EAAAA,KAAAA,KAAKmD,MAAa,SAAlBN,EAAAC,GAnCJxD,EAAA4F,YAAArC,EAAAsC,OAAA,SAAAC,EAAA5C,GAyCQxC,EAAKmD,MAAOL,GAAKN,GAAS4C,MAC7BhE,EAAAuB,KAFD5C,KAAA2C,MAAA,SAAAG,EAAAC,GADJ1B,EAAAuB,KAAAE,EAAAwC,mBAAA,SAAAC,GASQlE,EAAEuB,KAAM3C,EAAK0C,MAAO,SAAU6C,EAAUC,GAHhDD,EAAArE,aAAAoE,EAAAG,kBAAAzF,EAAAiD,MAAAH,GAAA4C,KAAAH,SAOCnE,EANDuB,KAAA5C,KAAA2C,MAAA,SAAAG,EAAAC,GAWI1B,EAAEuB,KAAM3C,EAAK0C,MAAO,SAAU6C,EAAUC,GAH5C,GAAAG,KACAvE,GAAAuB,KAAAE,EAAAwC,mBAAA,SAAAO,GACalD,EAAOxB,aAAA0E,EAAoBH,mBAAAE,EAAAC,EAAAC,YAAAD,KAEhCxE,EAAAuB,KAAIgD,EAAAA,MAAAA,GAAAA,SAAJP,EAAA5C,GACEG,GAAME,GAAKwC,EAA8BO,EACvCL,KADJH,EAAAU,KAAA,SAGQ9F,EAAKmD,KAAbiC,EAAyBW,YAAiBvD,EAAOuB,KAAA,KAAA,GACzC6B,EAAAA,MAAaD,mBAAqBnD,EAAtCwD,YAAA,gBAAA5C,SAAAN,GAAA,GACK8C,EAAAA,YAAaR,EAAAW,gBACdX,EAAMU,YAAOJ,KAAb7C,SAOX,IAAAb,GAfD,CAgBHjC,MAjBDqC,aAgCYa,EAAAA,KAAAA,KAAAA,MAAU,SAAAJ,EAAAC,GANqD1B,EAAAuB,KAAnE3C,EAAAmD,MAAAL,GAAA,SAAAsC,EAAA5C,GAQHX,EAAAuD,EAAAtD,MAAA,SAAAmE,GACJA,EAAAhD,MAAAyC,KAAA7C,GACYH,EAAbwD,WAA8BrD,EAClB7C,EAAKmD,KAAY,OACrBtB,EAAAA,UAAAA,EACIoE,EAAAA,MAAeP,wBAGfN,EAAAA,KAAAA,EAAAA,iBAAA,SAAAe,GACAf,EAAAA,KAAAA,EAAMgB,iBAAY,SAAlBC,GALJxE,EAAAwE,EAAA,oBAaPjF,EAfDuB,KAAA5C,KAAA2C,MAAA,SAAAG,EAAAC,GAoBI,GAAuB,QAAlBD,EAAKK,UAAsB,CAHpC,GAAAoD,IAAA,CACAhH,GAAA4F,YAAArC,EAAAsC,OAAA,SAAAC,EAAA5C,EAAA+D,GACa7D,GAAAA,IAA2B,IAAJI,OAAI,mBAAA0D,QAAApB,EAAAU,MAC1B5C,EAAaqD,EAASnB,EAAAqB,SACxBH,GAAAA,cAAJtG,EAAA8D,YAAAsB,EAAAW,eAAAO,GAAA,GACAhH,EAAS4F,UAA0B,GAAbrC,EAAKsC,QAAQuB,SAAAJ,GAAkClB,EAAAc,aAAAd,EAAAuB,aAAA,GACjEF,IAAIG,EAAiBD,YAAUF,EAAAV,cAA8BX,EAAzCtB,YAApB2C,EAAAV,cAAAX,EAAAc,YACAU,GAAeL,EAASnB,OAAxB,gBAA8BqB,EAA9B3E,MAAA+E,YAAAzB,EAAAW,eAAAlD,EAAAqB,WAAA,GACAkB,EAAMW,OAAkCX,gBAAlCW,EAAejE,MAAMgC,YAA3BsB,EAAiEkB,MAAAA,MACjElB,EAAM9E,OAAN,WACAmG,GAAoCA,WAAhBE,EAAAA,MAAyBZ,EAAeG,YAC1DU,EAAAA,WAAmB1H,EAAekG,QAAYyB,EAAAA,QAAgCzB,KAAnBA,EAAAtD,SACvDA,EAANgF,kBAA2BD,EAAa/E,MAClCiF,EAANC,qBAAA,SAQPC,OAAA,WACJ,GApBDjH,GAAAD,IAjJwBA,MAAAQ,SAAA2G,QA2KxBnH,KAAKoH,gBAHTF,KAAQG,iBACJrH,KAAIC,oBACJD,KAAKQ,iBACLa,EAAAuB,KAAKwE,KAAAA,MAAL,SAAAtE,GAAA7C,EAAAqH,YAAAxE,MAIAzB,cAAS,WAA+BpB,GAAAA,GAAKqH,IAAqBtH,MAAlEuH,YAAA,GAAAlI,GAAAmI,QA/KwB3D,KAAA,WAuLpBJ,MAAc,eALtBsB,IAAA,kBACAqC,QAAe,WAAAnH,EAAWwH,cAEtBzH,KAAKuH,QAAAA,SAAkBlI,kBAAUqI,QACf9G,OADe,GAAAvB,GAAAsI,OAAAlE,MAAA,aAAAzD,KAAAK,MAAAwC,IAAA,UAAA9B,KAEfH,OAAAZ,KAFeuH,YAAAxG,MAIesG,eAAA,WAJfrH,KAAjCW,SAAA+G,QAMK7G,KAAAA,MAAQH,IAAb,yBA3LwBV,KAAAW,SAAAC,OAAA,GAAAvB,GAAAuI,SAqMhBC,QAAc,qRAL1BC,OAAA,UACAT,YAAgB,EACP1G,MAAL,IACKI,IAEG8G,IAAAA,GAAc7H,KAAAK,MAAAwC,IAAA,uBACdiF,IAFkCC,EAAApB,OAAA,GAGlCqB,KAAAA,SAAAA,OAHkC,GAAA3I,GAAAuI,SAIlCK,QAAc,oSACdlH,OALJ,UAMHiH,YAAA,EACGD,MAAAA,IACCA,MAKGE,kBAAc,WAJoB,GAAAhI,GAAtCD,IAMHA,MAAAkI,QAAA,KAnNuB7G,EAAA8G,QAAAnI,KAAAqC,aA2NpBrC,KAAKkI,QAAU,GAAI5I,IAAOmE,MAAO,6BAA8B2B,OAAQpF,KAAKqC,UAAW0C,IAAK,oBAAqBqD,SAAU,WALnI/G,EAAAuB,KAAA3C,EAAAiI,QAAAG,WAAA,SAAAC,EAAAvF,GACmB1B,EAAAuB,KAAA0F,EAAApF,MAAA,SAAWJ,GAAA7C,EAAAsI,aAAAzF,UAItB9C,KAAKkI,QAALlI,KAAmBV,OAAOmE,QAAOzD,KAAAkI,QAAAnH,OAGxByH,eAAA,WACJxI,KAAAyI,aAAA,GAAAnJ,IAJmByF,IAAxB,oBAMAtB,MAAKiF,yBACRtD,SAlOuBW,KAAA,cA4OhBtD,KAAc,cAP1BkG,YACgBlG,KAAA,QACPgG,MAAmBnJ,gCACXyG,KAAA,UACAhE,MAAA,QACAiC,KAAC,IAENvB,QACAkG,MAAc,OACVlG,SACAD,KAAc,OACduD,MAAc,eACdhE,KAJU,OAKViC,MAAchE,KAAAK,MAAAwC,IAAA,gBAKVJ,KAAAA,QAAAA,KAAAA,OAAUzC,KADHyI,aAAA1H,MAAAuG,YAAA,SAADxE,GAFC,GAAA7C,GAADD,KAVR4I,EAAD,IAHgB5I,MAA7BQ,SAAAqI,QAAA,SAAAC,GAvOwB,GA+PxB7I,EAAKyI,OAAShI,SAAa,YA/PH,QAAAoC,EAAAK,UAyQhBL,EAAKiG,WAAa,SAAUC,EAASJ,GAPjD,GACaK,IACTC,QAAApG,EAAAqG,GACAC,aAAAtG,EAAAuG,QACcR,OAAmBC,EAAAA,QAAU,KAAAF,EAAAU,KAAAC,UAElCzG,GAAKK,MAAL,GACDL,OAAKiG,KAAL9F,MAAkB,oCAA0B,yBAAAgG,GACxC9J,EAAIc,SACAgJ,KAAAA,OACAC,IAAkBpG,OADF0G,KAAA,aAAA1G,EAAAqG,GAAA,SAEhBC,KAAAA,EACAhE,QAAoBtF,SAAQwJ,GAHhCV,EAAAa,OAAAH,GAKKI,EAAMA,MAAX,GACO1G,OAAKC,KAAOA,MAAA,oCAAqC,sBAA0BgG,GAC5EU,EAAQC,WAEVC,MAAU1J,SAAc2J,GACxBR,OAAUL,KAAAA,MAHA,oCAAA,0BAAAa,GAIVC,EAAUC,aAINhB,EAAAA,GAAAA,GAAQY,GACX9G,EATSmH,kBAAAnH,EAAAmH,iBAAAtD,QAUVuD,EAAAA,QAAUtJ,OAAAH,EAAA,UAAAC,SAAqB,4BAC3BP,OAAAA,EAAO6C,UAAYtC,SAAA,iBAAAyJ,KAAnB,4BACAnB,OAAAA,EAAQgB,UAARtJ,SAAA,mBAAAyJ,KACH9I,EAAAC,OAAAwB,EAAAmH,iBAAA,SAAAzI,EAAAO,GAbL,MAAAP,GAAA,IAAAO,EAAAqI,WATJ,WA2BIxB,CAIY,GAAAyB,IAAA,IAAO,aAAmBD,yBAA1B3D,QAAA3D,EAAAK,UACH9B,GAAAuB,KAAEE,EALXsC,OAAA,SAAAC,GAAAA,EAAA2B,OAAA,SAAA3B,EAAAiF,WAAAD,IAOHzB,EAAA,GAAAtJ,GAAAH,EAAAwE,OACEF,MAAAX,EAAAW,MACC4G,SAAAA,WAAqBhJ,EAAAuB,KAAF3C,EAAgBiD,MAAAJ,EAAAgB,OAA2B2C,SAAS3D,GAAKK,EAA1DoF,aAAtBgC,MACE3H,OAAWwC,EAAQA,QAAUC,EAAVD,OAAkBuB,OAAA,EAAA7D,EAAAsC,SAAAW,KAAA,SAAAtD,KAAA,wBAAA+H,OAAA,QAAEnF,IACzCuD,EAAAA,MAAO9F,EAAIxD,OAAYqE,EACnBF,EAAAA,QAAAA,EAAWX,OADc8F,EAAA7H,KAEzBqH,EAAAA,eAAWnI,EAAAsI,aAAWzF,GAAEzB,EAAAA,QAAEuB,EAAM3C,cAA0B,UAAT6D,YAA4B7D,EAAAA,eAAKsI,EAAAA,YAALlI,MAAAoK,KAAAf,MAAA,EAArDgB,UAAA,eAFCC,WAAA,KAAA7H,EAAAgB,MAAA,GAAA7D,EAAA0C,MAAAgE,SAGzBvB,OAAAA,KAAAA,MAAWtC,oCAAwCA,EAAKsC,MAA7C,gCAAgFtC,GAHlE8H,WAAtB,WAAP9B,EAAAc,WAAA,MASJhB,aAAKiC,SAAU5K,GACfA,GAAAA,GAAK6K,KAC+CJ,EAAAA,KAAAA,MAAc5H,EAAAgB,MACd6G,IACpDxK,EAAAA,KAAO6C,EAAKC,MAAOH,EAAAgB,OAAA,SAAAuB,EAAA5C,GACnBmI,GAAAA,EAAY5E,aAAWX,EAAAc,UAAA,CAAE2C,GAAQc,GAARhB,EAAAmC,WAAAnC,EAAAU,KAAAhH,MAAAG,GAAzB,IAAAuI,EAAA,CAvDJ,GAAAC,OAAAC,EAtQwB,IAAA7F,EAAAW,YA4UJiF,GAAcE,WAXtC9J,EAAAuB,KAAAyC,EAAAW,YAAA,SAAAoF,GACcnL,EAAU6C,YAAOsI,KAC3BrJ,MAAA9B,EAAAyC,MAAA0I,EAAAtH,OAAAwF,KAAAC,SAAAlE,MAC4BvB,OAA5BzC,EAAAuB,KAAAb,MAAAoJ,OAAA,SAAAE,GAAAJ,EAAAE,OAAAxF,KAAA0F,SAGmBrF,EAANsF,UAA2BnF,EAAYgF,OAAAxE,OAAA,IAC5BiC,GAAKmC,QAAiBzB,EAAY7G,OAA9C,UAEQwI,IAAAA,EAAYC,UAAhB,CACK7F,EAAMW,EAAXjE,KAEIV,KADA4J,GAAAA,GAAAA,eACQ5F,MAAMW,EAAAA,KAAdX,EAA2BtD,QAAUqJ,CACjC,GAAKnL,GAAK8D,EAALmE,QAAkBkD,WAAgBnL,EAAAiI,QAAAoB,KAAAhH,MAAAA,MAAA,KACnCP,EAAQ9B,GAAYmL,EAAYtH,OAChC/B,KAA+CkJ,EAAAA,EAAiBtF,QAAjB,GAAA4F,QAAA,KAAAjJ,MAAA,GAAA,KAAAkJ,SAG3CF,KAAZL,GACIA,EAAAA,MAAAA,OAKJrC,EAAA6C,QAAA,WAEI3I,EAAAmC,eAAA,GAKPyG,gBAAA,WACD,GAAAzL,GAAAD,KACIgL,EAAAA,OAAAA,QAAA9K,OAAa+K,OAAbU,kBAAAzL,OAAAC,OAAAwL,iBAAAtL,KACHL,MAAA4L,kBAAAC,aAAA7L,KAAA4L,kBACJE,GACJA,EAAAC,UAAAhC,QAAA,WA/BL,IAAA+B,EAAAE,iCAiCKP,EAASG,iBAAdhB,WAAA,WAAA3K,EAAAyL,mBAAAI,EAAAG,kBAORP,SAAAA,WACI,GAAIzL,GAAOD,IACXA,MAAI8L,eAAiB3L,EACrBH,KAAK4L,UAAAA,GACL5L,KAAK8L,SAAUjD,QAAA,SAAAC,GACXgD,WAAQC,WAARjD,EAA2Bc,UAAW3J,EAAAiM,WAAA,MAGjCA,QAAA,WACJ,GAAAjM,GAJDD,KAKHmM,EAAAnM,KAAAyI,aAAAa,KAAAC,SAxXuB6C,GA0YpBC,iBAAwBF,EAAmB,oBAAuBA,EAAmB,oBAAuB,KAfpHG,WAAAH,EAAA,oBAAA,KAAAnM,KAAAK,MAAAwC,IAAA,cACA4E,mBAAqBzH,KAAAkI,QAAAlI,KAAAkI,QAAAoB,KAAAC,YACbtJ,cAIA2K,uBAAuB,EAD3B2B,OAAA,GAsBIC,GAAY,CAjBpB,KAAA,GAAAzJ,KAAA/C,MAAA0C,MAAA,CACAwJ,GAAStD,GAAA5I,KAAA0C,MAAWK,GACZ9C,EAAJ2I,EAAAU,KAAAC,SACI4C,EAAAA,EAAoBxJ,MAAK8F,GACzB2D,EAAUtJ,EAAA3B,UACVkL,GAAAA,QAAAA,QACAC,KAAAA,GAAAA,KAAyBH,GAAmB,CAC5CM,GAAAA,GAAwBC,EAAAC,GACxBC,EAJUhE,EAAAU,KAAAhH,MAAAqK,GAMVrE,GADAM,EAAAmC,WAAA8B,GACAjE,EAAAP,WAAAwE,GACA,KAAAvE,EAAAtC,YAAA,CAMAwG,KAJAA,EADAM,KAAAA,YARUhK,GASViK,GAAAA,EAAA5B,QAAA4B,EAAA5B,OAAAxE,OAAA,EAEwB2B,EAAA0E,UAAA1E,EAAA1B,aAAA,KAAAmG,IAAAzE,EAAA1B,aAAA,OAAAmG,GAE5B,CACenE,EAAKlG,UAAQmK,EACb,OAEP/J,EAAmBH,WAAvBxB,GAAAiL,EAAAQ,WAAAzL,OACIA,EAAAA,WAAmBA,GAAvBwL,GAAAD,EAAAC,IAGI,IAAAH,EACA,MAGAA,GAIQA,OAAAA,KAAAA,MAAAA,gCAAoClE,uBAAyByE,GAChE5N,EAAAwK,SACD5D,KAAMyG,OACF5D,IAAAA,OAAKqE,KAAWJ,iBAAhB7M,KAAAK,MAAA8I,GAAA,eACAG,KAAA8C,EACHrC,QAAA,SAAAD,GAML,GALIsC,OAAAA,KAAQQ,MAAYzL,8BAAuByL,yBAA3C9C,GACAsC,EAAAA,IAAQQ,WAAYzL,OACvBlB,EAAAc,IAAAH,OAAAX,EAAAiN,iBAAApD,IAGDrJ,EAAA0M,QAAArD,IAAAA,EAAAnD,OAAA,EAAA,CACH1G,EAAAc,IAAAH,OAAAH,EAAA,UAAA0I,GAAA,iBACJ,IAAAzJ,GAAA0N,aACiBC,QAAAlN,OAAAqJ,KAAA,0BAIPxG,EAAKC,mBAER8C,MAAU,SADA+D,GAEVD,OAAU1J,KAAA8C,MAAc,8BAAmC,qBAFjD6G,EAGVR,IAAU8C,IAHA,CAIVrC,IAAUD,GAAAA,EAAUA,SAChB3J,IAAO6C,GAAKC,KAAOhD,GAAAyC,MAAA,CACnB,GAASnB,GAATtB,EAAAyC,MAAAK,GACSnC,EAAasM,EAAkBpD,SAAxClB,EAAAvI,MAAAwC,IAAA,cAmBQ,IAAKyK,EAAsB,CAjBnC,GAAAC,GAAA3E,EAAAU,KAAAkE,cAAAF,EACMH,KAASrD,GAAX+C,KAAyB/C,GAAqB,CACrClJ,EAAQH,UAAaoM,EAAMU,EAApCV,IACIY,GAAiB/N,CACjB2N,SAbFK,GAmBAzN,EAAAG,MAAAuN,MACC3K,MAAY,6BACf0K,KAAczN,EAAlB2N,eAAAxB,EAAAtC,GAAAA,EAAA+D,SACK/D,SACKgE,MAAS7N,WACP2I,EAAO3I,MAAKyC,YAMRgL,SAAAA,WACAzN,EAAA8N,UAAA,QArDhB9N,EAAA8N,UAAK,GACDvB,OAAAA,KAAAA,MAAAA,gCAAuCrB,qBAAsBA,KA2DzD1H,QAAAA,SAAAA,EAAU1C,GACViN,EAAAA,OAAAA,QAAU/N,OAAK2N,IAIVG,SAAA,SAAAE,GAHKjO,KAAAuH,YAAAlH,MAAAoK,KAAAf,MAAAuE,EAAAvD,UAAA,aAAAC,YAAA,IAHE3K,KAAAkI,SAAAlI,KAAhBkI,QAAA2C,QAAAoD,EAAA,SAAA,aASHjO,KAAAyI,cAAAzI,KAAAyI,aAAAoC,QAAAoD,EAAA,SAAA,aACJ5M,EAAAuB,KAAA5C,KA/CS0C,MAAA,SAAAkG,GAAAA,GAAAA,EAAAiC,QAAAoD,EAAA,SAAA,gBAAAlK,YAAd,SAAApB,GAoDHuL,IAAAzN,EAAA0M,QAAAxK,GAAAA,GAAAA,EA7euB,KAAA,GAAAI,GAAA,EAAAA,EAAAmL,IAAAvH,OAAA5D,IAAA,CAigBpB,GAAID,GAAOoL,IAAKnL,EAjBxB,KAAAD,IAAAA,EAAAK,YAAAL,EAAAK,UAAAgL,WAAA,QACS,OAAA,EAqBL,OAAO,GAdPjB,iBAAA,SAAqBhF,GACrB,MAAKO,GAAAA,QAAAA,IAAqBA,EAAaoC,OAASoD,EACxCxN,EAAKiC,UAAOhC,SAAiB,oBAAwBuN,OAAAA,EAAU,QAAV9D,KAAqB,oCAA3ChL,EAAAiP,SAAApO,KAAAK,MAAAwC,IAAA,SAAA,QAAAiH,EAAAnD,OAAA,EAAA,OAAAmD,EAAAnD,OAAA,aAAA,IAAA,MAAvC/F,OAAAH,EAAA,QAAAG,OAAA,QAAAyN,KAAA,yPAsBWrO,KAAK4N,eAAgB9D,EAAU,oDAhB1C8D,eAAU7K,SAAWmL,EAAYnL,GAC7B,MAAID,GAAAA,UAAJpC,SAAA,qBACeoC,OAAKK,EAAf,QAAkCA,KAAAA,sGAAiCmL,KAAAC,UAAAV,IAAA,MACpEjN,OAAAH,EAAA,UAAA4N,KAAAC,KAAAC,UAAAzE,EAAA,KAAA","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\ndefine([ 'utils/utils', 'utils/deferred', 'mvc/ui/ui-misc', 'mvc/form/form-view', 'mvc/form/form-data', 'mvc/tool/tool-form-base', 'mvc/ui/ui-modal', 'mvc/webhooks', 'mvc/workflow/workflow-icons' ],\n    function( Utils, Deferred, Ui, Form, FormData, ToolFormBase, Modal, Webhooks, WorkflowIcons ) {\n\n    var View = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.modal = parent.Galaxy.modal || new Modal.View();\n            this.model = options && options.model || new Backbone.Model( options );\n            this.deferred = new Deferred();\n            this.setElement( $( '<div/>' ).addClass( 'ui-form-composite' )\n                                          .append( this.$message      = $( '<div/>' ) )\n                                          .append( this.$header       = $( '<div/>' ) )\n                                          .append( this.$steps        = $( '<div/>' ) ) );\n            $( 'body' ).append( this.$el );\n            this._configure();\n            this.render();\n            this._refresh();\n            this.$el.on( 'click', function() { self._refresh() } );\n            this.$steps.scroll( function() { self._refresh() } );\n            $( window ).resize( function() { self._refresh() } );\n        },\n\n        /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n        _refresh: function( step_index ) {\n            var margin = _.reduce( this.$el.children(), function( memo, child ) {\n                return memo + $( child ).outerHeight();\n            }, 0 ) - this.$steps.height() + 25;\n            this.$steps.css( 'height', $( window ).height() - margin );\n        },\n\n        /** Configures form/step options for each workflow step */\n        _configure: function() {\n            var self = this;\n            this.forms = [];\n            this.steps = [];\n            this.links = [];\n            this.parms = [];\n            _.each( this.model.get( 'steps' ), function( step, i ) {\n                Galaxy.emit.debug( 'tool-form-composite::initialize()', i + ' : Preparing workflow step.' );\n                var icon = WorkflowIcons[ step.step_type ];\n                var title = parseInt( i + 1 ) + ': ' + ( step.step_label || step.step_name );\n                if ( step.annotation ) {\n                    title += ' - ' + step.annotation;\n                }\n                if ( step.step_version ) {\n                    title += ' (Galaxy Version ' + step.step_version + ')';\n                }\n                step = Utils.merge( {\n                    index                   : i,\n                    title                   : _.escape( title ),\n                    icon                    : icon || '',\n                    help                    : null,\n                    citations               : null,\n                    collapsible             : true,\n                    collapsed               : i > 0 && !self._isDataStep( step ),\n                    sustain_version         : true,\n                    sustain_repeats         : true,\n                    sustain_conditionals    : true,\n                    narrow                  : true,\n                    text_enable             : 'Edit',\n                    text_disable            : 'Undo',\n                    cls_enable              : 'fa fa-edit',\n                    cls_disable             : 'fa fa-undo',\n                    errors                  : step.messages,\n                    initial_errors          : true,\n                    cls                     : 'ui-portlet-narrow',\n                    hide_operations         : true,\n                    needs_refresh           : false,\n                    always_refresh          : step.step_type != 'tool'\n                }, step );\n                self.steps[ i ] = step;\n                self.links[ i ] = [];\n                self.parms[ i ] = {};\n            });\n\n            // build linear index of step input pairs\n            _.each( this.steps, function( step, i ) {\n                FormData.visitInputs( step.inputs, function( input, name ) {\n                    self.parms[ i ][ name ] = input;\n                });\n            });\n\n            // iterate through data input modules and collect linked sub steps\n            _.each( this.steps, function( step, i ) {\n                _.each( step.output_connections, function( output_connection ) {\n                    _.each( self.steps, function( sub_step, j ) {\n                        sub_step.step_index === output_connection.input_step_index && self.links[ i ].push( sub_step );\n                    });\n                });\n            });\n\n            // convert all connected data inputs to hidden fields with proper labels,\n            // and track the linked source step\n            _.each( this.steps, function( step, i ) {\n                _.each( self.steps, function( sub_step, j ) {\n                    var connections_by_name = {};\n                    _.each( step.output_connections, function( connection ) {\n                        sub_step.step_index === connection.input_step_index && ( connections_by_name[ connection.input_name ] = connection );\n                    });\n                    _.each( self.parms[ j ], function( input, name ) {\n                        var connection = connections_by_name[ name ];\n                        if ( connection ) {\n                            input.type = 'hidden';\n                            input.help = input.step_linked ? input.help + ', ' : '';\n                            input.help += 'Output dataset \\'' + connection.output_name + '\\' from step ' + ( parseInt( i ) + 1 );\n                            input.step_linked = input.step_linked || [];\n                            input.step_linked.push( step );\n                        }\n                    });\n                });\n            });\n\n            // identify and configure workflow parameters\n            var wp_count = 0;\n            this.wp_inputs = {};\n            function _handleWorkflowParameter( value, callback ) {\n                var re = /\\$\\{(.+?)\\}/g;\n                while ( match = re.exec( String( value ) ) ) {\n                    var wp_name = match[ 1 ];\n                    callback( self.wp_inputs[ wp_name ] = self.wp_inputs[ wp_name ] || {\n                        label   : wp_name,\n                        name    : wp_name,\n                        type    : 'text',\n                        color   : 'hsl( ' + ( ++wp_count * 100 ) + ', 70%, 30% )',\n                        style   : 'ui-form-wp-source',\n                        links   : []\n                    });\n                }\n            }\n            _.each( this.steps, function( step, i ) {\n                _.each( self.parms[ i ], function( input, name ) {\n                    _handleWorkflowParameter( input.value, function( wp_input ) {\n                        wp_input.links.push( step );\n                        input.wp_linked = true;\n                        input.type      = 'text';\n                        input.backdrop  = true;\n                        input.style     = 'ui-form-wp-target';\n                    });\n                });\n                _.each( step.post_job_actions, function( pja ) {\n                    _.each( pja.action_arguments, function( arg ) {\n                        _handleWorkflowParameter( arg, function() {} );\n                    });\n                });\n            });\n\n            // select fields are shown for dynamic fields if all putative data inputs are available,\n            // or if an explicit reference is specified as data_ref and available\n            _.each( this.steps, function( step, i ) {\n                if ( step.step_type == 'tool' ) {\n                    var data_resolved = true;\n                    FormData.visitInputs( step.inputs, function ( input, name, context ) {\n                        var is_data_input = ([ 'data', 'data_collection' ]).indexOf( input.type ) != -1;\n                        var data_ref = context[ input.data_ref ];\n                        input.step_linked && !self._isDataStep( input.step_linked ) && ( data_resolved = false );\n                        input.options && ( ( input.options.length == 0 && !data_resolved ) || input.wp_linked ) && ( input.is_workflow = true );\n                        data_ref && ( input.is_workflow = ( data_ref.step_linked && !self._isDataStep( data_ref.step_linked ) ) || input.wp_linked );\n                        ( is_data_input || ( input.value && input.value.__class__ == 'RuntimeValue' && !input.step_linked ) ) && ( step.collapsed = false );\n                        input.value && input.value.__class__ == 'RuntimeValue' && ( input.value = null );\n                        input.flavor = 'workflow';\n                        if ( !is_data_input && input.type !== 'hidden' && !input.wp_linked ) {\n                            if ( input.optional || ( !Utils.isEmpty( input.value ) && input.value !== '' ) ) {\n                                input.collapsible_value = input.value;\n                                input.collapsible_preview = true;\n                            }\n                        }\n                    });\n                }\n            });\n        },\n\n        render: function() {\n            var self = this;\n            this.deferred.reset();\n            this._renderHeader();\n            this._renderMessage();\n            this._renderParameters();\n            this._renderHistory();\n            _.each ( this.steps, function( step ) { self._renderStep( step ) } );\n        },\n\n        /** Render header */\n        _renderHeader: function() {\n            var self = this;\n            this.execute_btn = new Ui.Button({\n                icon        : 'fa-check',\n                title       : 'Run workflow',\n                cls         : 'btn btn-primary',\n                onclick     : function() { self._execute() }\n            });\n            this.$header.addClass( 'ui-form-header' ).empty()\n                        .append( new Ui.Label( { title: 'Workflow: ' + this.model.get( 'name' ) } ).$el )\n                        .append( this.execute_btn.$el );\n        },\n\n        /** Render message */\n        _renderMessage: function() {\n            this.$message.empty();\n            if ( this.model.get( 'has_upgrade_messages' ) ) {\n                this.$message.append( new Ui.Message( {\n                    message     : 'Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.',\n                    status      : 'warning',\n                    persistent  : true,\n                    fade        : false\n                } ).$el );\n            }\n            var step_version_changes = this.model.get( 'step_version_changes' );\n            if ( step_version_changes && step_version_changes.length > 0 ) {\n                this.$message.append( new Ui.Message( {\n                    message     : 'Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.',\n                    status      : 'warning',\n                    persistent  : true,\n                    fade        : false\n                } ).$el );\n            }\n        },\n\n        /** Render workflow parameters */\n        _renderParameters: function() {\n            var self = this;\n            this.wp_form = null;\n            if ( !_.isEmpty( this.wp_inputs ) ) {\n                this.wp_form = new Form({ title: '<b>Workflow Parameters</b>', inputs: this.wp_inputs, cls: 'ui-portlet-narrow', onchange: function() {\n                        _.each( self.wp_form.input_list, function( input_def, i ) {\n                            _.each( input_def.links, function( step ) { self._refreshStep( step ) } );\n                        });\n                    }\n                });\n                this._append( this.$steps.empty(), this.wp_form.$el );\n            }\n        },\n\n        /** Render workflow parameters */\n        _renderHistory: function() {\n            this.history_form = new Form({\n                cls    : 'ui-portlet-narrow',\n                title  : '<b>History Options</b>',\n                inputs : [{\n                    type        : 'conditional',\n                    name        : 'new_history',\n                    test_param  : {\n                        name        : 'check',\n                        label       : 'Send results to a new history',\n                        type        : 'boolean',\n                        value       : 'false',\n                        help        : ''\n                    },\n                    cases       : [{\n                        value   : 'true',\n                        inputs  : [{\n                            name    : 'name',\n                            label   : 'History name',\n                            type    : 'text',\n                            value   : this.model.get( 'name' )\n                        }]\n                    }]\n                }]\n            });\n            this._append( this.$steps, this.history_form.$el );\n        },\n\n        /** Render step */\n        _renderStep: function( step ) {\n            var self = this;\n            var form = null;\n            this.deferred.execute( function( promise ) {\n                self.$steps.addClass( 'ui-steps' );\n                if ( step.step_type == 'tool' ) {\n                    step.postchange = function( process, form ) {\n                        var self = this;\n                        var current_state = {\n                            tool_id         : step.id,\n                            tool_version    : step.version,\n                            inputs          : $.extend( true, {}, form.data.create() )\n                        }\n                        form.wait( true );\n                        Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Sending current state.', current_state );\n                        Utils.request({\n                            type    : 'POST',\n                            url     : Galaxy.root + 'api/tools/' + step.id + '/build',\n                            data    : current_state,\n                            success : function( data ) {\n                                form.update( data );\n                                form.wait( false );\n                                Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Received new model.', data );\n                                process.resolve();\n                            },\n                            error   : function( response ) {\n                                Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Refresh request failed.', response );\n                                process.reject();\n                            }\n                        });\n                    };\n                    form = new ToolFormBase( step );\n                    if ( step.post_job_actions && step.post_job_actions.length ) {\n                        form.portlet.append( $( '<div/>' ).addClass( 'ui-form-element-disabled' )\n                            .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( '<b>Job Post Actions</b>' ) )\n                            .append( $( '<div/>' ).addClass( 'ui-form-preview' ).html(\n                                _.reduce( step.post_job_actions, function( memo, value ) {\n                                    return memo + ' ' + value.short_str;\n                                }, '' ) ) )\n                            );\n                    }\n                } else {\n                    var is_simple_input = ([ 'data_input', 'data_collection_input' ]).indexOf( step.step_type ) != -1;\n                    _.each( step.inputs, function( input ) { input.flavor = 'module'; input.hide_label = is_simple_input; } );\n                    form = new Form( Utils.merge({\n                        title    : step.title,\n                        onchange : function() { _.each( self.links[ step.index ], function( link ) { self._refreshStep( link ) } ) },\n                        inputs   : step.inputs && step.inputs.length > 0 ? step.inputs : [ { type: 'hidden', name: 'No options available.', ignore: null } ]\n                    }, step ) );\n                }\n                self.forms[ step.index ] = form;\n                self._append( self.$steps, form.$el );\n                step.needs_refresh && self._refreshStep( step );\n                form.portlet[ !self.show_progress ? 'enable' : 'disable' ]();\n                self.show_progress && self.execute_btn.model.set( { wait        : true,\n                                                                    wait_text   : 'Preparing...',\n                                                                    percentage  : ( step.index + 1 ) * 100.0 / self.steps.length } );\n                Galaxy.emit.debug( 'tool-form-composite::initialize()', step.index + ' : Workflow step state ready.', step );\n                setTimeout( function() { promise.resolve() }, 0 );\n            });\n        },\n\n        /** Refreshes step values from source step values */\n        _refreshStep: function( step ) {\n            var self = this;\n            var form = this.forms[ step.index ];\n            if ( form ) {\n                _.each( self.parms[ step.index ], function( input, name ) {\n                    if ( input.step_linked || input.wp_linked ) {\n                        var field = form.field_list[ form.data.match( name ) ];\n                        if ( field ) {\n                            var new_value = undefined;\n                            if ( input.step_linked ) {\n                                new_value = { values: [] };\n                                _.each( input.step_linked, function( source_step ) {\n                                    if ( self._isDataStep( source_step ) ) {\n                                        value = self.forms[ source_step.index ].data.create().input;\n                                        value && _.each( value.values, function( v ) { new_value.values.push( v ) } );\n                                    }\n                                });\n                                if ( !input.multiple && new_value.values.length > 0 ) {\n                                    new_value = { values: [ new_value.values[ 0 ] ] };\n                                }\n                            } else if ( input.wp_linked ) {\n                                new_value = input.value;\n                                var re = /\\$\\{(.+?)\\}/g;\n                                while ( match = re.exec( input.value ) ) {\n                                    var wp_field = self.wp_form.field_list[ self.wp_form.data.match( match[ 1 ] ) ];\n                                    var wp_value = wp_field && wp_field.value();\n                                    if ( wp_value ) {\n                                        new_value = new_value.replace( new RegExp( '\\\\' + match[ 0 ], 'g' ), wp_value );\n                                    }\n                                }\n                            }\n                            if ( new_value !== undefined ) {\n                                field.value( new_value );\n                            }\n                        }\n                    }\n                });\n                form.trigger( 'change' );\n            } else {\n                step.needs_refresh = true;\n            }\n        },\n\n        /** Refresh the history after job submission while form is shown */\n        _refreshHistory: function() {\n            var self = this;\n            var history = parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.model;\n            this._refresh_history && clearTimeout( this._refresh_history );\n            if ( history ) {\n                history.refresh().success( function() {\n                    if ( history.numOfUnfinishedShownContents() === 0 ) {\n                        self._refresh_history = setTimeout( function() { self._refreshHistory() }, history.UPDATE_DELAY );\n                    }\n                });\n            }\n        },\n\n        /** Build remaining steps */\n        _execute: function() {\n            var self = this;\n            this.show_progress = true;\n            this._enabled( false );\n            this.deferred.execute( function( promise ) {\n                setTimeout( function() { promise.resolve(); self._submit(); }, 0 );\n            });\n        },\n\n        /** Validate and submit workflow */\n        _submit: function() {\n            var self = this;\n            var history_form_data = this.history_form.data.create();\n            var job_def = {\n                new_history_name      : history_form_data[ 'new_history|name' ] ? history_form_data[ 'new_history|name' ] : null,\n                history_id            : !history_form_data[ 'new_history|name' ] ? this.model.get( 'history_id' ) : null,\n                replacement_params    : this.wp_form ? this.wp_form.data.create() : {},\n                parameters            : {},\n                // Tool form will submit flat maps for each parameter\n                // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n                // data structures).\n                parameters_normalized : true,\n                // Tool form always wants a list of invocations back\n                // so that inputs can be batched.\n                batch                 : true\n            };\n            var validated = true;\n            for ( var i in this.forms ) {\n                var form = this.forms[ i ];\n                var job_inputs  = form.data.create();\n                var step        = self.steps[ i ];\n                var step_index  = step.step_index;\n                form.trigger( 'reset' );\n                for ( var job_input_id in job_inputs ) {\n                    var input_value = job_inputs[ job_input_id ];\n                    var input_id    = form.data.match( job_input_id );\n                    var input_field = form.field_list[ input_id ];\n                    var input_def   = form.input_list[ input_id ];\n                    if ( !input_def.step_linked ) {\n                        if ( this._isDataStep( step ) ) {\n                            validated = input_value && input_value.values && input_value.values.length > 0;\n                        } else {\n                            validated = input_def.optional || ( input_def.is_workflow && input_value !== '' ) || ( !input_def.is_workflow && input_value !== null );\n                        }\n                        if ( !validated ) {\n                            form.highlight( input_id );\n                            break;\n                        }\n                        job_def.parameters[ step_index ] = job_def.parameters[ step_index ] || {};\n                        job_def.parameters[ step_index ][ job_input_id ] = job_inputs[ job_input_id ];\n                    }\n                }\n                if ( !validated ) {\n                    break;\n                }\n            }\n            if ( !validated ) {\n                self._enabled( true );\n                Galaxy.emit.debug( 'tool-form-composite::submit()', 'Validation failed.', job_def );\n            } else {\n                Galaxy.emit.debug( 'tool-form-composite::submit()', 'Validation complete.', job_def );\n                Utils.request({\n                    type    : 'POST',\n                    url     : Galaxy.root + 'api/workflows/' + this.model.id + '/invocations',\n                    data    : job_def,\n                    success : function( response ) {\n                        Galaxy.emit.debug( 'tool-form-composite::submit', 'Submission successful.', response );\n                        self.$el.children().hide();\n                        self.$el.append( self._templateSuccess( response ) );\n\n                        // Show Webhook if job is running\n                        if ($.isArray( response ) && response.length > 0) {\n                            self.$el.append( $( '<div/>', { id: 'webhook-view' } ) );\n                            var WebhookApp = new Webhooks.WebhookView({\n                                urlRoot: Galaxy.root + 'api/webhooks/workflow'\n                            });\n                        }\n\n                        self._refreshHistory();\n                    },\n                    error   : function( response ) {\n                        Galaxy.emit.debug( 'tool-form-composite::submit', 'Submission failed.', response );\n                        var input_found = false;\n                        if ( response && response.err_data ) {\n                            for ( var i in self.forms ) {\n                                var form = self.forms[ i ];\n                                var step_related_errors = response.err_data[ form.model.get( 'step_index' ) ];\n                                if ( step_related_errors ) {\n                                    var error_messages = form.data.matchResponse( step_related_errors );\n                                    for ( var input_id in error_messages ) {\n                                        form.highlight( input_id, error_messages[ input_id ] );\n                                        input_found = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        if ( !input_found ) {\n                            self.modal.show({\n                                title   : 'Workflow submission failed',\n                                body    : self._templateError( job_def, response && response.err_msg ),\n                                buttons : {\n                                    'Close' : function() {\n                                        self.modal.hide();\n                                    }\n                                }\n                            });\n                        }\n                    },\n                    complete: function() {\n                        self._enabled( true );\n                    }\n                });\n            }\n        },\n\n        /** Append new dom to body */\n        _append: function( $container, $el ) {\n            $container.append( '<p/>' ).append( $el );\n        },\n\n        /** Set enabled/disabled state */\n        _enabled: function( enabled ) {\n            this.execute_btn.model.set( { wait: !enabled, wait_text: 'Sending...', percentage: -1 } );\n            this.wp_form && this.wp_form.portlet[ enabled ? 'enable' : 'disable' ]();\n            this.history_form && this.history_form.portlet[ enabled ? 'enable' : 'disable' ]();\n            _.each( this.forms, function( form ) { form && form.portlet[ enabled ? 'enable' : 'disable' ]() } );\n        },\n\n        /** Is data input module/step */\n        _isDataStep: function( steps ) {\n            lst = $.isArray( steps ) ? steps : [ steps ] ;\n            for ( var i = 0; i < lst.length; i++ ) {\n                var step = lst[ i ];\n                if ( !step || !step.step_type || !step.step_type.startsWith( 'data' ) ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /** Templates */\n        _templateSuccess: function( response ) {\n            if ( $.isArray( response ) && response.length > 0 ) {\n                return $( '<div/>' ).addClass( 'donemessagelarge' )\n                                    .append( $( '<p/>' ).html( 'Successfully invoked workflow <b>' + Utils.sanitize( this.model.get( 'name' ) ) + '</b>' + ( response.length > 1 ? ' <b>' + response.length + ' times</b>' : '' ) + '.' ) )\n                                    .append( $( '<p/>' ).append( '<b/>' ).text( 'You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from \\'running\\' to \\'finished\\' if completed successfully or \\'error\\' if problems were encountered.' ) );\n            } else {\n                return this._templateError( response, 'Invalid success response. No invocations found.' );\n            }\n        },\n\n        _templateError: function( response, err_msg ) {\n            return  $( '<div/>' ).addClass( 'errormessagelarge' )\n                                 .append( $( '<p/>' ).text( 'The server could not complete the request. Please contact the Galaxy Team if this error persists. ' + ( JSON.stringify( err_msg ) || '' ) ) )\n                                 .append( $( '<pre/>' ).text( JSON.stringify( response, null, 4 ) ) );\n        }\n    });\n    return {\n        View: View\n    };\n});\n"]}