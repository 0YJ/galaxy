{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","model","Model","deferred","_deferred2","setElement","$","addClass","append","$message","$header","$steps","$el","_configure","render","window","resize","_refresh","step_index","margin","_","reduce","memo","child","outerHeight","css","height","label","value","callback","color","name","type","exec","String","wp_count","style","links","wp_inputs","wp_name","steps","parms","_handleWorkflowParameter","wp_input","each","i","emit","debug","_workflowIcons2","step","step_type","title","parseInt","step_label","step_name","annotation","icon","_utils2","index","step_version","help","fixed_title","escape","citations","collapsible","collapsed","sustain_version","sustain_repeats","sustain_conditionals","narrow","messages","text_enable","text_disable","cls_enable","cls_disable","errors","cls","needs_refresh","always_refresh","_formData2","visitInputs","inputs","input","output_connections","output_connection","sub_step","j","push","connections_by_name","connection","input_step_index","input_name","step_linked","output_name","post_job_actions","pja","action_arguments","backdrop","arg","data_ref","data_resolved","is_data_input","is_runtime_value","collapsible_value","collapsible_preview","_isDataStep","length","wp_linked","is_workflow","reset","_renderMessage","_renderParameters","_renderHistory","__class__","_renderStep","default_value","flavor","execute_btn","optional","_execute","isEmpty","empty","message","status","persistent","fade","step_version_changes","_uiMisc2","Button","onclick","wp_form","onchange","get","_refreshStep","_append","Message","history_form","test_param","cases","_formView2","form","input_list","input_def","execute","tool_id","url","data","process","error","ignore","postchange","forms","version","create","show_progress","wait","wait_text","percentage","current_state","setTimeout","promise","resolve","root","id","success","update","field","response","new_value","reject","_toolFormBase2","portlet","values","wp_field","html","wp_value","short_str","indexOf","hide_label","is_simple_input","history","refresh","numOfUnfinishedShownContents","link","_refresh_history","_submit","history_form_data","set","job_def","new_history_name","history_id","parameters","batch","job_inputs","job_input_id","input_value","input_id","match","input_field","validated","source_step","highlight","v","multiple","request","re","_templateSuccess","toolVersion","input_found","_refreshHistory","currHistoryPanel","clearTimeout","complete","_enabled","replacement_params","enabled","parameters_normalized","lst","trigger","_templateError","children","hide","isArray","_webhooks2","WebhookView","urlRoot","toolId","tool_version","err_data","step_related_errors","error_messages","matchResponse","show","body","err_msg","buttons","Close","$container","startsWith","sanitize","text","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\nimport Utils from \"utils/utils\";\nimport Deferred from \"utils/deferred\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Form from \"mvc/form/form-view\";\nimport FormData from \"mvc/form/form-data\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Webhooks from \"mvc/webhooks\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.deferred = new Deferred();\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"ui-form-composite\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$header = $(\"<div/>\")))\n                .append((this.$steps = $(\"<div/>\")))\n        );\n        $(\"body\").append(this.$el);\n        this._configure();\n        this.render();\n        $(window).resize(() => {\n            self._refresh();\n        });\n    },\n\n    /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n    _refresh: function(step_index) {\n        var margin =\n            _.reduce(\n                this.$el.children(),\n                (memo, child) => memo + $(child).outerHeight(),\n                0\n            ) -\n            this.$steps.height() +\n            90;\n        this.$steps.css(\"height\", $(window).height() - margin);\n    },\n\n    /** Configures form/step options for each workflow step */\n    _configure: function() {\n        var self = this;\n        this.forms = [];\n        this.steps = [];\n        this.links = [];\n        this.parms = [];\n        _.each(this.model.get(\"steps\"), (step, i) => {\n            Galaxy.emit.debug(\n                \"tool-form-composite::initialize()\",\n                i + \" : Preparing workflow step.\"\n            );\n            var icon = WorkflowIcons[step.step_type];\n            var title =\n                parseInt(i + 1) + \": \" + (step.step_label || step.step_name);\n            if (step.annotation) {\n                title += \" - \" + step.annotation;\n            }\n            if (step.step_version) {\n                title += \" (Galaxy Version \" + step.step_version + \")\";\n            }\n            step = Utils.merge(\n                {\n                    index: i,\n                    fixed_title: _.escape(title),\n                    icon: icon || \"\",\n                    help: null,\n                    citations: null,\n                    collapsible: true,\n                    collapsed: i > 0 && !self._isDataStep(step),\n                    sustain_version: true,\n                    sustain_repeats: true,\n                    sustain_conditionals: true,\n                    narrow: true,\n                    text_enable: \"Edit\",\n                    text_disable: \"Undo\",\n                    cls_enable: \"fa fa-edit\",\n                    cls_disable: \"fa fa-undo\",\n                    errors: step.messages,\n                    initial_errors: true,\n                    cls: \"ui-portlet-narrow\",\n                    hide_operations: true,\n                    needs_refresh: false,\n                    always_refresh: step.step_type != \"tool\"\n                },\n                step\n            );\n            self.steps[i] = step;\n            self.links[i] = [];\n            self.parms[i] = {};\n        });\n\n        // build linear index of step input pairs\n        _.each(this.steps, (step, i) => {\n            FormData.visitInputs(step.inputs, (input, name) => {\n                self.parms[i][name] = input;\n            });\n        });\n\n        // iterate through data input modules and collect linked sub steps\n        _.each(this.steps, (step, i) => {\n            _.each(step.output_connections, output_connection => {\n                _.each(self.steps, (sub_step, j) => {\n                    sub_step.step_index ===\n                        output_connection.input_step_index &&\n                        self.links[i].push(sub_step);\n                });\n            });\n        });\n\n        // convert all connected data inputs to hidden fields with proper labels,\n        // and track the linked source step\n        _.each(this.steps, (step, i) => {\n            _.each(self.steps, (sub_step, j) => {\n                var connections_by_name = {};\n                _.each(step.output_connections, connection => {\n                    sub_step.step_index === connection.input_step_index &&\n                        (connections_by_name[\n                            connection.input_name\n                        ] = connection);\n                });\n                _.each(self.parms[j], (input, name) => {\n                    var connection = connections_by_name[name];\n                    if (connection) {\n                        input.type = \"hidden\";\n                        input.help = input.step_linked ? input.help + \", \" : \"\";\n                        input.help +=\n                            \"Output dataset '\" +\n                            connection.output_name +\n                            \"' from step \" +\n                            (parseInt(i) + 1);\n                        input.step_linked = input.step_linked || [];\n                        input.step_linked.push(step);\n                    }\n                });\n            });\n        });\n\n        // identify and configure workflow parameters\n        var wp_count = 0;\n        this.wp_inputs = {};\n        function _handleWorkflowParameter(value, callback) {\n            var re = /\\$\\{(.+?)\\}/g;\n            var match;\n            while ((match = re.exec(String(value)))) {\n                var wp_name = match[1];\n                callback(\n                    (self.wp_inputs[wp_name] = self.wp_inputs[wp_name] || {\n                        label: wp_name,\n                        name: wp_name,\n                        type: \"text\",\n                        color: \"hsl( \" + ++wp_count * 100 + \", 70%, 30% )\",\n                        style: \"ui-form-wp-source\",\n                        links: []\n                    })\n                );\n            }\n        }\n        _.each(this.steps, (step, i) => {\n            _.each(self.parms[i], (input, name) => {\n                _handleWorkflowParameter(input.value, wp_input => {\n                    wp_input.links.push(step);\n                    input.wp_linked = true;\n                    input.type = \"text\";\n                    input.backdrop = true;\n                    input.style = \"ui-form-wp-target\";\n                });\n            });\n            _.each(step.post_job_actions, pja => {\n                _.each(pja.action_arguments, arg => {\n                    _handleWorkflowParameter(arg, () => {});\n                });\n            });\n        });\n\n        // select fields are shown for dynamic fields if all putative data inputs are available,\n        // or if an explicit reference is specified as data_ref and available\n        _.each(this.steps, (step, i) => {\n            if (step.step_type == \"tool\") {\n                var data_resolved = true;\n                FormData.visitInputs(step.inputs, (input, name, context) => {\n                    var is_runtime_value =\n                        input.value && input.value.__class__ == \"RuntimeValue\";\n                    var is_data_input =\n                        [\"data\", \"data_collection\"].indexOf(input.type) != -1;\n                    var data_ref = context[input.data_ref];\n                    input.step_linked &&\n                        !self._isDataStep(input.step_linked) &&\n                        (data_resolved = false);\n                    input.options &&\n                        ((input.options.length == 0 && !data_resolved) ||\n                            input.wp_linked) &&\n                        (input.is_workflow = true);\n                    data_ref &&\n                        (input.is_workflow =\n                            (data_ref.step_linked &&\n                                !self._isDataStep(data_ref.step_linked)) ||\n                            input.wp_linked);\n                    (is_data_input ||\n                        (input.value &&\n                            input.value.__class__ == \"RuntimeValue\" &&\n                            !input.step_linked)) &&\n                        (step.collapsed = false);\n                    is_runtime_value && (input.value = input.default_value);\n                    input.flavor = \"workflow\";\n                    if (\n                        !is_runtime_value &&\n                        !is_data_input &&\n                        input.type !== \"hidden\" &&\n                        !input.wp_linked\n                    ) {\n                        if (\n                            input.optional ||\n                            (!Utils.isEmpty(input.value) && input.value !== \"\")\n                        ) {\n                            input.collapsible_value = input.value;\n                            input.collapsible_preview = true;\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    render: function() {\n        var self = this;\n        this.deferred.reset();\n        this._renderHeader();\n        this._renderMessage();\n        this._renderParameters();\n        this._renderHistory();\n        _.each(this.steps, step => {\n            self._renderStep(step);\n        });\n    },\n\n    /** Render header */\n    _renderHeader: function() {\n        var self = this;\n        this.execute_btn = new Ui.Button({\n            icon: \"fa-check\",\n            title: \"Run workflow\",\n            cls: \"btn btn-primary\",\n            onclick: function() {\n                self._execute();\n            }\n        });\n        this.$header\n            .addClass(\"ui-form-header\")\n            .empty()\n            .append(\n                new Ui.Label({\n                    title: \"Workflow: \" + this.model.get(\"name\")\n                }).$el\n            )\n            .append(this.execute_btn.$el);\n    },\n\n    /** Render message */\n    _renderMessage: function() {\n        this.$message.empty();\n        if (this.model.get(\"has_upgrade_messages\")) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n        var step_version_changes = this.model.get(\"step_version_changes\");\n        if (step_version_changes && step_version_changes.length > 0) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderParameters: function() {\n        var self = this;\n        this.wp_form = null;\n        if (!_.isEmpty(this.wp_inputs)) {\n            this.wp_form = new Form({\n                title: \"<b>Workflow Parameters</b>\",\n                inputs: this.wp_inputs,\n                cls: \"ui-portlet-narrow\",\n                onchange: function() {\n                    _.each(self.wp_form.input_list, (input_def, i) => {\n                        _.each(input_def.links, step => {\n                            self._refreshStep(step);\n                        });\n                    });\n                }\n            });\n            this._append(this.$steps.empty(), this.wp_form.$el);\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderHistory: function() {\n        this.history_form = new Form({\n            cls: \"ui-portlet-narrow\",\n            title: \"<b>History Options</b>\",\n            inputs: [\n                {\n                    type: \"conditional\",\n                    name: \"new_history\",\n                    test_param: {\n                        name: \"check\",\n                        label: \"Send results to a new history\",\n                        type: \"boolean\",\n                        value: \"false\",\n                        help: \"\"\n                    },\n                    cases: [\n                        {\n                            value: \"true\",\n                            inputs: [\n                                {\n                                    name: \"name\",\n                                    label: \"History name\",\n                                    type: \"text\",\n                                    value: this.model.get(\"name\")\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        });\n        this._append(this.$steps, this.history_form.$el);\n    },\n\n    /** Render step */\n    _renderStep: function(step) {\n        var self = this;\n        var form = null;\n        this.deferred.execute(promise => {\n            self.$steps.addClass(\"ui-steps\");\n            if (step.step_type == \"tool\") {\n                step.postchange = function(process, form) {\n                    var self = this;\n                    var current_state = {\n                        tool_id: step.id,\n                        tool_version: step.version,\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    form.wait(true);\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::postchange()\",\n                        \"Sending current state.\",\n                        current_state\n                    );\n                    Utils.request({\n                        type: \"POST\",\n                        url: Galaxy.root + \"api/tools/\" + step.id + \"/build\",\n                        data: current_state,\n                        success: function(data) {\n                            form.update(data);\n                            form.wait(false);\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Received new model.\",\n                                data\n                            );\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Refresh request failed.\",\n                                response\n                            );\n                            process.reject();\n                        }\n                    });\n                };\n                form = new ToolFormBase(step);\n                if (step.post_job_actions && step.post_job_actions.length) {\n                    form.portlet.append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-form-element-disabled\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"<b>Job Post Actions</b>\")\n                            )\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-preview\")\n                                    .html(\n                                        _.reduce(\n                                            step.post_job_actions,\n                                            (memo, value) =>\n                                                memo + \" \" + value.short_str,\n                                            \"\"\n                                        )\n                                    )\n                            )\n                    );\n                }\n            } else {\n                var is_simple_input =\n                    [\"data_input\", \"data_collection_input\"].indexOf(\n                        step.step_type\n                    ) != -1;\n                _.each(step.inputs, input => {\n                    input.flavor = \"module\";\n                    input.hide_label = is_simple_input;\n                });\n                form = new Form(\n                    Utils.merge(\n                        {\n                            title: step.fixed_title,\n                            onchange: function() {\n                                _.each(self.links[step.index], link => {\n                                    self._refreshStep(link);\n                                });\n                            },\n                            inputs:\n                                step.inputs && step.inputs.length > 0\n                                    ? step.inputs\n                                    : [\n                                          {\n                                              type: \"hidden\",\n                                              name: \"No options available.\",\n                                              ignore: null\n                                          }\n                                      ]\n                        },\n                        step\n                    )\n                );\n            }\n            self.forms[step.index] = form;\n            self._append(self.$steps, form.$el);\n            self._refresh();\n            step.needs_refresh && self._refreshStep(step);\n            form.portlet[!self.show_progress ? \"enable\" : \"disable\"]();\n            self.show_progress &&\n                self.execute_btn.model.set({\n                    wait: true,\n                    wait_text: \"Preparing...\",\n                    percentage: (step.index + 1) * 100.0 / self.steps.length\n                });\n            Galaxy.emit.debug(\n                \"tool-form-composite::initialize()\",\n                step.index + \" : Workflow step state ready.\",\n                step\n            );\n            setTimeout(() => {\n                promise.resolve();\n            }, 0);\n        });\n    },\n\n    /** Refreshes step values from source step values */\n    _refreshStep: function(step) {\n        var self = this;\n        var form = this.forms[step.index];\n        if (form) {\n            _.each(self.parms[step.index], (input, name) => {\n                if (input.step_linked || input.wp_linked) {\n                    var field = form.field_list[form.data.match(name)];\n                    if (field) {\n                        var new_value = undefined;\n                        if (input.step_linked) {\n                            new_value = { values: [] };\n                            _.each(input.step_linked, source_step => {\n                                if (self._isDataStep(source_step)) {\n                                    var value = self.forms[\n                                        source_step.index\n                                    ].data.create().input;\n                                    value &&\n                                        _.each(value.values, v => {\n                                            new_value.values.push(v);\n                                        });\n                                }\n                            });\n                            if (\n                                !input.multiple &&\n                                new_value.values.length > 0\n                            ) {\n                                new_value = {\n                                    values: [new_value.values[0]]\n                                };\n                            }\n                        } else if (input.wp_linked) {\n                            new_value = input.value;\n                            var re = /\\$\\{(.+?)\\}/g;\n                            var match;\n                            while ((match = re.exec(input.value))) {\n                                var wp_field =\n                                    self.wp_form.field_list[\n                                        self.wp_form.data.match(match[1])\n                                    ];\n                                var wp_value = wp_field && wp_field.value();\n                                if (wp_value) {\n                                    new_value = new_value\n                                        .split(match[0])\n                                        .join(wp_value);\n                                }\n                            }\n                        }\n                        if (new_value !== undefined) {\n                            field.value(new_value);\n                        }\n                    }\n                }\n            });\n            form.trigger(\"change\");\n        } else {\n            step.needs_refresh = true;\n        }\n    },\n\n    /** Refresh the history after job submission while form is shown */\n    _refreshHistory: function() {\n        var self = this;\n        var history =\n            parent.Galaxy &&\n            parent.Galaxy.currHistoryPanel &&\n            parent.Galaxy.currHistoryPanel.model;\n        this._refresh_history && clearTimeout(this._refresh_history);\n        if (history) {\n            history.refresh().success(() => {\n                if (history.numOfUnfinishedShownContents() === 0) {\n                    self._refresh_history = setTimeout(() => {\n                        self._refreshHistory();\n                    }, history.UPDATE_DELAY);\n                }\n            });\n        }\n    },\n\n    /** Build remaining steps */\n    _execute: function() {\n        var self = this;\n        this.show_progress = true;\n        this._enabled(false);\n        this.deferred.execute(promise => {\n            setTimeout(() => {\n                promise.resolve();\n                self._submit();\n            }, 0);\n        });\n    },\n\n    /** Validate and submit workflow */\n    _submit: function() {\n        var self = this;\n        var history_form_data = this.history_form.data.create();\n        var job_def = {\n            new_history_name: history_form_data[\"new_history|name\"]\n                ? history_form_data[\"new_history|name\"]\n                : null,\n            history_id: !history_form_data[\"new_history|name\"]\n                ? this.model.get(\"history_id\")\n                : null,\n            replacement_params: this.wp_form ? this.wp_form.data.create() : {},\n            parameters: {},\n            // Tool form will submit flat maps for each parameter\n            // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n            // data structures).\n            parameters_normalized: true,\n            // Tool form always wants a list of invocations back\n            // so that inputs can be batched.\n            batch: true\n        };\n        var validated = true;\n        for (var i in this.forms) {\n            var form = this.forms[i];\n            var job_inputs = form.data.create();\n            var step = self.steps[i];\n            var step_index = step.step_index;\n            form.trigger(\"reset\");\n            for (var job_input_id in job_inputs) {\n                var input_value = job_inputs[job_input_id];\n                var input_id = form.data.match(job_input_id);\n                var input_field = form.field_list[input_id];\n                var input_def = form.input_list[input_id];\n                if (!input_def.step_linked) {\n                    if (this._isDataStep(step)) {\n                        validated =\n                            input_value &&\n                            input_value.values &&\n                            input_value.values.length > 0;\n                    } else {\n                        validated =\n                            input_def.optional ||\n                            (input_def.is_workflow && input_value !== \"\") ||\n                            (!input_def.is_workflow && input_value !== null);\n                    }\n                    if (!validated) {\n                        form.highlight(input_id);\n                        break;\n                    }\n                    job_def.parameters[step_index] =\n                        job_def.parameters[step_index] || {};\n                    job_def.parameters[step_index][job_input_id] =\n                        job_inputs[job_input_id];\n                }\n            }\n            if (!validated) {\n                break;\n            }\n        }\n        if (!validated) {\n            self._enabled(true);\n            Galaxy.emit.debug(\n                \"tool-form-composite::submit()\",\n                \"Validation failed.\",\n                job_def\n            );\n        } else {\n            Galaxy.emit.debug(\n                \"tool-form-composite::submit()\",\n                \"Validation complete.\",\n                job_def\n            );\n            Utils.request({\n                type: \"POST\",\n                url:\n                    Galaxy.root +\n                    \"api/workflows/\" +\n                    this.model.id +\n                    \"/invocations\",\n                data: job_def,\n                success: function(response) {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit\",\n                        \"Submission successful.\",\n                        response\n                    );\n                    self.$el.children().hide();\n                    self.$el.append(self._templateSuccess(response));\n\n                    // Show Webhook if job is running\n                    if ($.isArray(response) && response.length > 0) {\n                        self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                        var WebhookApp = new Webhooks.WebhookView({\n                            urlRoot: Galaxy.root + \"api/webhooks/workflow\",\n                            toolId: job_def.tool_id,\n                            toolVersion: job_def.tool_version\n                        });\n                    }\n\n                    self._refreshHistory();\n                },\n                error: function(response) {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit\",\n                        \"Submission failed.\",\n                        response\n                    );\n                    var input_found = false;\n                    if (response && response.err_data) {\n                        for (var i in self.forms) {\n                            var form = self.forms[i];\n                            var step_related_errors =\n                                response.err_data[form.model.get(\"step_index\")];\n                            if (step_related_errors) {\n                                var error_messages = form.data.matchResponse(\n                                    step_related_errors\n                                );\n                                for (var input_id in error_messages) {\n                                    form.highlight(\n                                        input_id,\n                                        error_messages[input_id]\n                                    );\n                                    input_found = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!input_found) {\n                        self.modal.show({\n                            title: \"Workflow submission failed\",\n                            body: self._templateError(\n                                job_def,\n                                response && response.err_msg\n                            ),\n                            buttons: {\n                                Close: function() {\n                                    self.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                },\n                complete: function() {\n                    self._enabled(true);\n                }\n            });\n        }\n    },\n\n    /** Append new dom to body */\n    _append: function($container, $el) {\n        $container.append(\"<p/>\").append($el);\n    },\n\n    /** Set enabled/disabled state */\n    _enabled: function(enabled) {\n        this.execute_btn.model.set({\n            wait: !enabled,\n            wait_text: \"Sending...\",\n            percentage: -1\n        });\n        this.wp_form && this.wp_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        this.history_form &&\n            this.history_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        _.each(this.forms, form => {\n            form && form.portlet[enabled ? \"enable\" : \"disable\"]();\n        });\n    },\n\n    /** Is data input module/step */\n    _isDataStep: function(steps) {\n        var lst = $.isArray(steps) ? steps : [steps];\n        for (var i = 0; i < lst.length; i++) {\n            var step = lst[i];\n            if (\n                !step ||\n                !step.step_type ||\n                !step.step_type.startsWith(\"data\")\n            ) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /** Templates */\n    _templateSuccess: function(response) {\n        if ($.isArray(response) && response.length > 0) {\n            return $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").html(\n                        \"Successfully invoked workflow <b>\" +\n                            Utils.sanitize(this.model.get(\"name\")) +\n                            \"</b>\" +\n                            (response.length > 1\n                                ? \" <b>\" + response.length + \" times</b>\"\n                                : \"\") +\n                            \".\"\n                    )\n                )\n                .append(\n                    $(\"<p/>\")\n                        .append(\"<b/>\")\n                        .text(\n                            \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                        )\n                );\n        } else {\n            return this._templateError(\n                response,\n                \"Invalid success response. No invocations found.\"\n            );\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    \"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" +\n                        (JSON.stringify(err_msg) || \"\")\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\nexport default {\n    View: View\n};\n"]}