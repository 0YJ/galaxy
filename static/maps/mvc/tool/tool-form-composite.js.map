{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","model","Model","deferred","_deferred2","setElement","$","addClass","append","$message","$header","$steps","$el","_configure","render","window","resize","_refresh","step_index","margin","_","reduce","memo","child","outerHeight","css","height","_handleWorkflowParameter","value","callback","name","label","wp_name","type","match","color","style","wp_inputs","links","wp_count","steps","parms","each","i","emit","debug","_workflowIcons2","step","step_type","title","parseInt","step_label","annotation","step_version","_utils2","index","help","fixed_title","escape","icon","citations","collapsible","collapsed","sustain_version","sustain_repeats","sustain_conditionals","narrow","messages","text_enable","text_disable","cls_enable","cls_disable","errors","cls","needs_refresh","always_refresh","_formData2","visitInputs","inputs","input","output_connections","output_connection","sub_step","j","push","connections_by_name","connection","input_step_index","input_name","step_linked","output_name","backdrop","wp_input","post_job_actions","action_arguments","pja","arg","data_ref","is_workflow","is_runtime_value","is_data_input","optional","collapsible_preview","data_resolved","length","wp_linked","_isDataStep","reset","_renderHeader","_renderMessage","_renderParameters","__class__","_renderHistory","default_value","flavor","isEmpty","_execute","collapsible_value","message","status","persistent","fade","_renderStep","Button","onclick","wp_form","empty","get","_append","_uiMisc2","Message","history_form","step_version_changes","test_param","cases","_formView2","onchange","input_list","input_def","_refreshStep","form","data","success","process","error","ignore","tool_id","id","forms","create","portlet","show_progress","wait","wait_text","request","setTimeout","root","promise","resolve","update","field","new_value","values","html","wp_field","wp_value","split","is_simple_input","indexOf","trigger","hide_label","_refreshHistory","merge","_refresh_history","clearTimeout","link","history","UPDATE_DELAY","_enabled","_submit","execute_btn","set","history_form_data","job_def","history_id","replacement_params","parameters","parameters_normalized","job_inputs","job_input_id","field_list","input_value","input_id","input_field","source_step","validated","v","multiple","re","exec","children","_templateSuccess","join","urlRoot","toolId","currHistoryPanel","input_found","refresh","numOfUnfinishedShownContents","execute","complete","$container","new_history_name","enabled","percentage","batch","isArray","lst","response","_templateError","highlight","url","hide","_webhooks2","WebhookView","toolVersion","tool_version","err_data","step_related_errors","error_messages","matchResponse","show","body","err_msg","buttons","Close","startsWith","sanitize","text","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\nimport Utils from \"utils/utils\";\nimport Deferred from \"utils/deferred\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Form from \"mvc/form/form-view\";\nimport FormData from \"mvc/form/form-data\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Webhooks from \"mvc/webhooks\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.deferred = new Deferred();\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"ui-form-composite\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$header = $(\"<div/>\")))\n                .append((this.$steps = $(\"<div/>\")))\n        );\n        $(\"body\").append(this.$el);\n        this._configure();\n        this.render();\n        $(window).resize(() => {\n            self._refresh();\n        });\n    },\n\n    /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n    _refresh: function(step_index) {\n        var margin =\n            _.reduce(\n                this.$el.children(),\n                (memo, child) => memo + $(child).outerHeight(),\n                0\n            ) -\n            this.$steps.height() +\n            90;\n        this.$steps.css(\"height\", $(window).height() - margin);\n    },\n\n    /** Configures form/step options for each workflow step */\n    _configure: function() {\n        var self = this;\n        this.forms = [];\n        this.steps = [];\n        this.links = [];\n        this.parms = [];\n        _.each(this.model.get(\"steps\"), (step, i) => {\n            Galaxy.emit.debug(\n                \"tool-form-composite::initialize()\",\n                `${i} : Preparing workflow step.`\n            );\n            var icon = WorkflowIcons[step.step_type];\n            var title = `${parseInt(i + 1)}: ${step.step_label ||\n                step.step_name}`;\n            if (step.annotation) {\n                title += ` - ${step.annotation}`;\n            }\n            if (step.step_version) {\n                title += ` (Galaxy Version ${step.step_version})`;\n            }\n            step = Utils.merge(\n                {\n                    index: i,\n                    fixed_title: _.escape(title),\n                    icon: icon || \"\",\n                    help: null,\n                    citations: null,\n                    collapsible: true,\n                    collapsed: i > 0 && !self._isDataStep(step),\n                    sustain_version: true,\n                    sustain_repeats: true,\n                    sustain_conditionals: true,\n                    narrow: true,\n                    text_enable: \"Edit\",\n                    text_disable: \"Undo\",\n                    cls_enable: \"fa fa-edit\",\n                    cls_disable: \"fa fa-undo\",\n                    errors: step.messages,\n                    initial_errors: true,\n                    cls: \"ui-portlet-narrow\",\n                    hide_operations: true,\n                    needs_refresh: false,\n                    always_refresh: step.step_type != \"tool\"\n                },\n                step\n            );\n            self.steps[i] = step;\n            self.links[i] = [];\n            self.parms[i] = {};\n        });\n\n        // build linear index of step input pairs\n        _.each(this.steps, (step, i) => {\n            FormData.visitInputs(step.inputs, (input, name) => {\n                self.parms[i][name] = input;\n            });\n        });\n\n        // iterate through data input modules and collect linked sub steps\n        _.each(this.steps, (step, i) => {\n            _.each(step.output_connections, output_connection => {\n                _.each(self.steps, (sub_step, j) => {\n                    sub_step.step_index ===\n                        output_connection.input_step_index &&\n                        self.links[i].push(sub_step);\n                });\n            });\n        });\n\n        // convert all connected data inputs to hidden fields with proper labels,\n        // and track the linked source step\n        _.each(this.steps, (step, i) => {\n            _.each(self.steps, (sub_step, j) => {\n                var connections_by_name = {};\n                _.each(step.output_connections, connection => {\n                    sub_step.step_index === connection.input_step_index &&\n                        (connections_by_name[\n                            connection.input_name\n                        ] = connection);\n                });\n                _.each(self.parms[j], (input, name) => {\n                    var connection = connections_by_name[name];\n                    if (connection) {\n                        input.type = \"hidden\";\n                        input.help = input.step_linked ? `${input.help}, ` : \"\";\n                        input.help += `Output dataset '${connection.output_name}' from step ${parseInt(\n                            i\n                        ) + 1}`;\n                        input.step_linked = input.step_linked || [];\n                        input.step_linked.push(step);\n                    }\n                });\n            });\n        });\n\n        // identify and configure workflow parameters\n        var wp_count = 0;\n        this.wp_inputs = {};\n        function _handleWorkflowParameter(value, callback) {\n            var re = /\\$\\{(.+?)\\}/g;\n            var match;\n            while ((match = re.exec(String(value)))) {\n                var wp_name = match[1];\n                callback(\n                    (self.wp_inputs[wp_name] = self.wp_inputs[wp_name] || {\n                        label: wp_name,\n                        name: wp_name,\n                        type: \"text\",\n                        color: `hsl( ${++wp_count * 100}, 70%, 30% )`,\n                        style: \"ui-form-wp-source\",\n                        links: []\n                    })\n                );\n            }\n        }\n        _.each(this.steps, (step, i) => {\n            _.each(self.parms[i], (input, name) => {\n                _handleWorkflowParameter(input.value, wp_input => {\n                    wp_input.links.push(step);\n                    input.wp_linked = true;\n                    input.type = \"text\";\n                    input.backdrop = true;\n                    input.style = \"ui-form-wp-target\";\n                });\n            });\n            _.each(step.post_job_actions, pja => {\n                _.each(pja.action_arguments, arg => {\n                    _handleWorkflowParameter(arg, () => {});\n                });\n            });\n        });\n\n        // select fields are shown for dynamic fields if all putative data inputs are available,\n        // or if an explicit reference is specified as data_ref and available\n        _.each(this.steps, (step, i) => {\n            if (step.step_type == \"tool\") {\n                var data_resolved = true;\n                FormData.visitInputs(step.inputs, (input, name, context) => {\n                    var is_runtime_value =\n                        input.value && input.value.__class__ == \"RuntimeValue\";\n                    var is_data_input =\n                        [\"data\", \"data_collection\"].indexOf(input.type) != -1;\n                    var data_ref = context[input.data_ref];\n                    input.step_linked &&\n                        !self._isDataStep(input.step_linked) &&\n                        (data_resolved = false);\n                    input.options &&\n                        ((input.options.length == 0 && !data_resolved) ||\n                            input.wp_linked) &&\n                        (input.is_workflow = true);\n                    data_ref &&\n                        (input.is_workflow =\n                            (data_ref.step_linked &&\n                                !self._isDataStep(data_ref.step_linked)) ||\n                            input.wp_linked);\n                    (is_data_input ||\n                        (input.value &&\n                            input.value.__class__ == \"RuntimeValue\" &&\n                            !input.step_linked)) &&\n                        (step.collapsed = false);\n                    is_runtime_value && (input.value = input.default_value);\n                    input.flavor = \"workflow\";\n                    if (\n                        !is_runtime_value &&\n                        !is_data_input &&\n                        input.type !== \"hidden\" &&\n                        !input.wp_linked\n                    ) {\n                        if (\n                            input.optional ||\n                            (!Utils.isEmpty(input.value) && input.value !== \"\")\n                        ) {\n                            input.collapsible_value = input.value;\n                            input.collapsible_preview = true;\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    render: function() {\n        var self = this;\n        this.deferred.reset();\n        this._renderHeader();\n        this._renderMessage();\n        this._renderParameters();\n        this._renderHistory();\n        _.each(this.steps, step => {\n            self._renderStep(step);\n        });\n    },\n\n    /** Render header */\n    _renderHeader: function() {\n        var self = this;\n        this.execute_btn = new Ui.Button({\n            icon: \"fa-check\",\n            title: \"Run workflow\",\n            cls: \"btn btn-primary\",\n            onclick: function() {\n                self._execute();\n            }\n        });\n        this.$header\n            .addClass(\"ui-form-header\")\n            .empty()\n            .append(\n                new Ui.Label({\n                    title: `Workflow: ${this.model.get(\"name\")}`\n                }).$el\n            )\n            .append(this.execute_btn.$el);\n    },\n\n    /** Render message */\n    _renderMessage: function() {\n        this.$message.empty();\n        if (this.model.get(\"has_upgrade_messages\")) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n        var step_version_changes = this.model.get(\"step_version_changes\");\n        if (step_version_changes && step_version_changes.length > 0) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderParameters: function() {\n        var self = this;\n        this.wp_form = null;\n        if (!_.isEmpty(this.wp_inputs)) {\n            this.wp_form = new Form({\n                title: \"<b>Workflow Parameters</b>\",\n                inputs: this.wp_inputs,\n                cls: \"ui-portlet-narrow\",\n                onchange: function() {\n                    _.each(self.wp_form.input_list, (input_def, i) => {\n                        _.each(input_def.links, step => {\n                            self._refreshStep(step);\n                        });\n                    });\n                }\n            });\n            this._append(this.$steps.empty(), this.wp_form.$el);\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderHistory: function() {\n        this.history_form = new Form({\n            cls: \"ui-portlet-narrow\",\n            title: \"<b>History Options</b>\",\n            inputs: [\n                {\n                    type: \"conditional\",\n                    name: \"new_history\",\n                    test_param: {\n                        name: \"check\",\n                        label: \"Send results to a new history\",\n                        type: \"boolean\",\n                        value: \"false\",\n                        help: \"\"\n                    },\n                    cases: [\n                        {\n                            value: \"true\",\n                            inputs: [\n                                {\n                                    name: \"name\",\n                                    label: \"History name\",\n                                    type: \"text\",\n                                    value: this.model.get(\"name\")\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        });\n        this._append(this.$steps, this.history_form.$el);\n    },\n\n    /** Render step */\n    _renderStep: function(step) {\n        var self = this;\n        var form = null;\n        this.deferred.execute(promise => {\n            self.$steps.addClass(\"ui-steps\");\n            if (step.step_type == \"tool\") {\n                step.postchange = function(process, form) {\n                    var self = this;\n                    var current_state = {\n                        tool_id: step.id,\n                        tool_version: step.version,\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    form.wait(true);\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::postchange()\",\n                        \"Sending current state.\",\n                        current_state\n                    );\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/tools/${step.id}/build`,\n                        data: current_state,\n                        success: function(data) {\n                            form.update(data);\n                            form.wait(false);\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Received new model.\",\n                                data\n                            );\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Refresh request failed.\",\n                                response\n                            );\n                            process.reject();\n                        }\n                    });\n                };\n                form = new ToolFormBase(step);\n                if (step.post_job_actions && step.post_job_actions.length) {\n                    form.portlet.append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-form-element-disabled\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"<b>Job Post Actions</b>\")\n                            )\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-preview\")\n                                    .html(\n                                        _.reduce(\n                                            step.post_job_actions,\n                                            (memo, value) =>\n                                                `${memo} ${value.short_str}`,\n                                            \"\"\n                                        )\n                                    )\n                            )\n                    );\n                }\n            } else {\n                var is_simple_input =\n                    [\"data_input\", \"data_collection_input\"].indexOf(\n                        step.step_type\n                    ) != -1;\n                _.each(step.inputs, input => {\n                    input.flavor = \"module\";\n                    input.hide_label = is_simple_input;\n                });\n                form = new Form(\n                    Utils.merge(\n                        {\n                            title: step.fixed_title,\n                            onchange: function() {\n                                _.each(self.links[step.index], link => {\n                                    self._refreshStep(link);\n                                });\n                            },\n                            inputs:\n                                step.inputs && step.inputs.length > 0\n                                    ? step.inputs\n                                    : [\n                                          {\n                                              type: \"hidden\",\n                                              name: \"No options available.\",\n                                              ignore: null\n                                          }\n                                      ]\n                        },\n                        step\n                    )\n                );\n            }\n            self.forms[step.index] = form;\n            self._append(self.$steps, form.$el);\n            self._refresh();\n            step.needs_refresh && self._refreshStep(step);\n            form.portlet[!self.show_progress ? \"enable\" : \"disable\"]();\n            self.show_progress &&\n                self.execute_btn.model.set({\n                    wait: true,\n                    wait_text: \"Preparing...\",\n                    percentage: (step.index + 1) * 100.0 / self.steps.length\n                });\n            Galaxy.emit.debug(\n                \"tool-form-composite::initialize()\",\n                `${step.index} : Workflow step state ready.`,\n                step\n            );\n            setTimeout(() => {\n                promise.resolve();\n            }, 0);\n        });\n    },\n\n    /** Refreshes step values from source step values */\n    _refreshStep: function(step) {\n        var self = this;\n        var form = this.forms[step.index];\n        if (form) {\n            _.each(self.parms[step.index], (input, name) => {\n                if (input.step_linked || input.wp_linked) {\n                    var field = form.field_list[form.data.match(name)];\n                    if (field) {\n                        var new_value = undefined;\n                        if (input.step_linked) {\n                            new_value = { values: [] };\n                            _.each(input.step_linked, source_step => {\n                                if (self._isDataStep(source_step)) {\n                                    var value = self.forms[\n                                        source_step.index\n                                    ].data.create().input;\n                                    value &&\n                                        _.each(value.values, v => {\n                                            new_value.values.push(v);\n                                        });\n                                }\n                            });\n                            if (\n                                !input.multiple &&\n                                new_value.values.length > 0\n                            ) {\n                                new_value = {\n                                    values: [new_value.values[0]]\n                                };\n                            }\n                        } else if (input.wp_linked) {\n                            new_value = input.value;\n                            var re = /\\$\\{(.+?)\\}/g;\n                            var match;\n                            while ((match = re.exec(input.value))) {\n                                var wp_field =\n                                    self.wp_form.field_list[\n                                        self.wp_form.data.match(match[1])\n                                    ];\n                                var wp_value = wp_field && wp_field.value();\n                                if (wp_value) {\n                                    new_value = new_value\n                                        .split(match[0])\n                                        .join(wp_value);\n                                }\n                            }\n                        }\n                        if (new_value !== undefined) {\n                            field.value(new_value);\n                        }\n                    }\n                }\n            });\n            form.trigger(\"change\");\n        } else {\n            step.needs_refresh = true;\n        }\n    },\n\n    /** Refresh the history after job submission while form is shown */\n    _refreshHistory: function() {\n        var self = this;\n        var history =\n            parent.Galaxy &&\n            parent.Galaxy.currHistoryPanel &&\n            parent.Galaxy.currHistoryPanel.model;\n        this._refresh_history && clearTimeout(this._refresh_history);\n        if (history) {\n            history.refresh().success(() => {\n                if (history.numOfUnfinishedShownContents() === 0) {\n                    self._refresh_history = setTimeout(() => {\n                        self._refreshHistory();\n                    }, history.UPDATE_DELAY);\n                }\n            });\n        }\n    },\n\n    /** Build remaining steps */\n    _execute: function() {\n        var self = this;\n        this.show_progress = true;\n        this._enabled(false);\n        this.deferred.execute(promise => {\n            setTimeout(() => {\n                promise.resolve();\n                self._submit();\n            }, 0);\n        });\n    },\n\n    /** Validate and submit workflow */\n    _submit: function() {\n        var self = this;\n        var history_form_data = this.history_form.data.create();\n        var job_def = {\n            new_history_name: history_form_data[\"new_history|name\"]\n                ? history_form_data[\"new_history|name\"]\n                : null,\n            history_id: !history_form_data[\"new_history|name\"]\n                ? this.model.get(\"history_id\")\n                : null,\n            replacement_params: this.wp_form ? this.wp_form.data.create() : {},\n            parameters: {},\n            // Tool form will submit flat maps for each parameter\n            // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n            // data structures).\n            parameters_normalized: true,\n            // Tool form always wants a list of invocations back\n            // so that inputs can be batched.\n            batch: true\n        };\n        var validated = true;\n        for (var i in this.forms) {\n            var form = this.forms[i];\n            var job_inputs = form.data.create();\n            var step = self.steps[i];\n            var step_index = step.step_index;\n            form.trigger(\"reset\");\n            for (var job_input_id in job_inputs) {\n                var input_value = job_inputs[job_input_id];\n                var input_id = form.data.match(job_input_id);\n                var input_field = form.field_list[input_id];\n                var input_def = form.input_list[input_id];\n                if (!input_def.step_linked) {\n                    if (this._isDataStep(step)) {\n                        validated =\n                            input_value &&\n                            input_value.values &&\n                            input_value.values.length > 0;\n                    } else {\n                        validated =\n                            input_def.optional ||\n                            (input_def.is_workflow && input_value !== \"\") ||\n                            (!input_def.is_workflow && input_value !== null);\n                    }\n                    if (!validated) {\n                        form.highlight(input_id);\n                        break;\n                    }\n                    job_def.parameters[step_index] =\n                        job_def.parameters[step_index] || {};\n                    job_def.parameters[step_index][job_input_id] =\n                        job_inputs[job_input_id];\n                }\n            }\n            if (!validated) {\n                break;\n            }\n        }\n        if (!validated) {\n            self._enabled(true);\n            Galaxy.emit.debug(\n                \"tool-form-composite::submit()\",\n                \"Validation failed.\",\n                job_def\n            );\n        } else {\n            Galaxy.emit.debug(\n                \"tool-form-composite::submit()\",\n                \"Validation complete.\",\n                job_def\n            );\n            Utils.request({\n                type: \"POST\",\n                url: `${Galaxy.root}api/workflows/${this.model.id}/invocations`,\n                data: job_def,\n                success: function(response) {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit\",\n                        \"Submission successful.\",\n                        response\n                    );\n                    self.$el.children().hide();\n                    self.$el.append(self._templateSuccess(response));\n\n                    // Show Webhook if job is running\n                    if ($.isArray(response) && response.length > 0) {\n                        self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                        var WebhookApp = new Webhooks.WebhookView({\n                            urlRoot: `${Galaxy.root}api/webhooks/workflow`,\n                            toolId: job_def.tool_id,\n                            toolVersion: job_def.tool_version\n                        });\n                    }\n\n                    self._refreshHistory();\n                },\n                error: function(response) {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit\",\n                        \"Submission failed.\",\n                        response\n                    );\n                    var input_found = false;\n                    if (response && response.err_data) {\n                        for (var i in self.forms) {\n                            var form = self.forms[i];\n                            var step_related_errors =\n                                response.err_data[form.model.get(\"step_index\")];\n                            if (step_related_errors) {\n                                var error_messages = form.data.matchResponse(\n                                    step_related_errors\n                                );\n                                for (var input_id in error_messages) {\n                                    form.highlight(\n                                        input_id,\n                                        error_messages[input_id]\n                                    );\n                                    input_found = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!input_found) {\n                        self.modal.show({\n                            title: \"Workflow submission failed\",\n                            body: self._templateError(\n                                job_def,\n                                response && response.err_msg\n                            ),\n                            buttons: {\n                                Close: function() {\n                                    self.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                },\n                complete: function() {\n                    self._enabled(true);\n                }\n            });\n        }\n    },\n\n    /** Append new dom to body */\n    _append: function($container, $el) {\n        $container.append(\"<p/>\").append($el);\n    },\n\n    /** Set enabled/disabled state */\n    _enabled: function(enabled) {\n        this.execute_btn.model.set({\n            wait: !enabled,\n            wait_text: \"Sending...\",\n            percentage: -1\n        });\n        this.wp_form && this.wp_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        this.history_form &&\n            this.history_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        _.each(this.forms, form => {\n            form && form.portlet[enabled ? \"enable\" : \"disable\"]();\n        });\n    },\n\n    /** Is data input module/step */\n    _isDataStep: function(steps) {\n        var lst = $.isArray(steps) ? steps : [steps];\n        for (var i = 0; i < lst.length; i++) {\n            var step = lst[i];\n            if (\n                !step ||\n                !step.step_type ||\n                !step.step_type.startsWith(\"data\")\n            ) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /** Templates */\n    _templateSuccess: function(response) {\n        if ($.isArray(response) && response.length > 0) {\n            return $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").html(\n                        `Successfully invoked workflow <b>${Utils.sanitize(\n                            this.model.get(\"name\")\n                        )}</b>${response.length > 1\n                            ? ` <b>${response.length} times</b>`\n                            : \"\"}.`\n                    )\n                )\n                .append(\n                    $(\"<p/>\")\n                        .append(\"<b/>\")\n                        .text(\n                            \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                        )\n                );\n        } else {\n            return this._templateError(\n                response,\n                \"Invalid success response. No invocations found.\"\n            );\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    `The server could not complete the request. Please contact the Galaxy Team if this error persists. ${JSON.stringify(\n                        err_msg\n                    ) || \"\"}`\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\nexport default {\n    View: View\n};\n"]}