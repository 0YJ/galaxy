{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["define","Utils","Deferred","Ui","Form","FormData","ToolFormBase","Modal","Webhooks","WorkflowIcons","View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","model","Model","deferred","setElement","$","addClass","append","$message","$header","$steps","$el","_configure","render","_refresh","on","scroll","window","resize","step_index","margin","_","reduce","children","memo","child","outerHeight","height","css","_handleWorkflowParameter","value","callback","re","match","exec","String","wp_name","wp_inputs","label","name","type","color","wp_count","style","links","forms","steps","parms","each","get","step","i","emit","debug","icon","step_type","title","parseInt","step_label","step_name","annotation","step_version","merge","index","escape","help","citations","collapsible","collapsed","_isDataStep","sustain_version","sustain_repeats","sustain_conditionals","narrow","text_enable","text_disable","cls_enable","cls_disable","errors","messages","initial_errors","cls","hide_operations","needs_refresh","always_refresh","visitInputs","inputs","input","output_connections","output_connection","sub_step","j","input_step_index","push","connections_by_name","connection","input_name","step_linked","output_name","wp_input","wp_linked","backdrop","post_job_actions","pja","action_arguments","arg","data_resolved","context","is_data_input","indexOf","data_ref","length","is_workflow","__class__","flavor","optional","isEmpty","collapsible_value","collapsible_preview","reset","_renderHeader","_renderMessage","_renderParameters","_renderHistory","_renderStep","execute_btn","Button","onclick","_execute","empty","Label","Message","message","status","persistent","fade","step_version_changes","wp_form","onchange","input_list","input_def","_refreshStep","_append","history_form","test_param","cases","form","execute","promise","postchange","process","current_state","tool_id","id","tool_version","version","data","create","wait","request","url","root","success","update","resolve","error","response","reject","portlet","html","short_str","is_simple_input","hide_label","link","ignore","show_progress","set","wait_text","percentage","setTimeout","field","field_list","new_value","undefined","values","source_step","v","multiple","wp_field","wp_value","replace","RegExp","trigger","_refreshHistory","history","currHistoryPanel","_refresh_history","clearTimeout","refresh","numOfUnfinishedShownContents","UPDATE_DELAY","_enabled","_submit","history_form_data","job_def","new_history_name","history_id","replacement_params","parameters","parameters_normalized","batch","validated","job_inputs","job_input_id","input_value","input_id","highlight","hide","_templateSuccess","isArray","WebhookView","urlRoot","input_found","err_data","step_related_errors","error_messages","matchResponse","show","body","_templateError","err_msg","buttons","Close","complete","$container","enabled","lst","startsWith","sanitize","text","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\ndefine([ 'utils/utils', 'utils/deferred', 'mvc/ui/ui-misc', 'mvc/form/form-view', 'mvc/form/form-data', 'mvc/tool/tool-form-base', 'mvc/ui/ui-modal', 'mvc/webhooks', 'mvc/workflow/workflow-icons' ],\n    function( Utils, Deferred, Ui, Form, FormData, ToolFormBase, Modal, Webhooks, WorkflowIcons ) {\n\n    var View = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.modal = parent.Galaxy.modal || new Modal.View();\n            this.model = options && options.model || new Backbone.Model( options );\n            this.deferred = new Deferred();\n            this.setElement( $( '<div/>' ).addClass( 'ui-form-composite' )\n                                          .append( this.$message      = $( '<div/>' ) )\n                                          .append( this.$header       = $( '<div/>' ) )\n                                          .append( this.$steps        = $( '<div/>' ) ) );\n            $( 'body' ).append( this.$el );\n            this._configure();\n            this.render();\n            this._refresh();\n            this.$el.on( 'click', function() { self._refresh() } );\n            this.$steps.scroll( function() { self._refresh() } );\n            $( window ).resize( function() { self._refresh() } );\n        },\n\n        /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n        _refresh: function( step_index ) {\n            var margin = _.reduce( this.$el.children(), function( memo, child ) {\n                return memo + $( child ).outerHeight();\n            }, 0 ) - this.$steps.height() + 25;\n            this.$steps.css( 'height', $( window ).height() - margin );\n        },\n\n        /** Configures form/step options for each workflow step */\n        _configure: function() {\n            var self = this;\n            this.forms = [];\n            this.steps = [];\n            this.links = [];\n            this.parms = [];\n            _.each( this.model.get( 'steps' ), function( step, i ) {\n                Galaxy.emit.debug( 'tool-form-composite::initialize()', i + ' : Preparing workflow step.' );\n                var icon = WorkflowIcons[ step.step_type ];\n                var title = parseInt( i + 1 ) + ': ' + ( step.step_label || step.step_name );\n                if ( step.annotation ) {\n                    title += ' - ' + step.annotation;\n                }\n                if ( step.step_version ) {\n                    title += ' (Galaxy Version ' + step.step_version + ')';\n                }\n                step = Utils.merge( {\n                    index                   : i,\n                    title                   : _.escape( title ),\n                    icon                    : icon || '',\n                    help                    : null,\n                    citations               : null,\n                    collapsible             : true,\n                    collapsed               : i > 0 && !self._isDataStep( step ),\n                    sustain_version         : true,\n                    sustain_repeats         : true,\n                    sustain_conditionals    : true,\n                    narrow                  : true,\n                    text_enable             : 'Edit',\n                    text_disable            : 'Undo',\n                    cls_enable              : 'fa fa-edit',\n                    cls_disable             : 'fa fa-undo',\n                    errors                  : step.messages,\n                    initial_errors          : true,\n                    cls                     : 'ui-portlet-narrow',\n                    hide_operations         : true,\n                    needs_refresh           : false,\n                    always_refresh          : step.step_type != 'tool'\n                }, step );\n                self.steps[ i ] = step;\n                self.links[ i ] = [];\n                self.parms[ i ] = {};\n            });\n\n            // build linear index of step input pairs\n            _.each( this.steps, function( step, i ) {\n                FormData.visitInputs( step.inputs, function( input, name ) {\n                    self.parms[ i ][ name ] = input;\n                });\n            });\n\n            // iterate through data input modules and collect linked sub steps\n            _.each( this.steps, function( step, i ) {\n                _.each( step.output_connections, function( output_connection ) {\n                    _.each( self.steps, function( sub_step, j ) {\n                        sub_step.step_index === output_connection.input_step_index && self.links[ i ].push( sub_step );\n                    });\n                });\n            });\n\n            // convert all connected data inputs to hidden fields with proper labels,\n            // and track the linked source step\n            _.each( this.steps, function( step, i ) {\n                _.each( self.steps, function( sub_step, j ) {\n                    var connections_by_name = {};\n                    _.each( step.output_connections, function( connection ) {\n                        sub_step.step_index === connection.input_step_index && ( connections_by_name[ connection.input_name ] = connection );\n                    });\n                    _.each( self.parms[ j ], function( input, name ) {\n                        var connection = connections_by_name[ name ];\n                        if ( connection ) {\n                            input.type = 'hidden';\n                            input.help = input.step_linked ? input.help + ', ' : '';\n                            input.help += 'Output dataset \\'' + connection.output_name + '\\' from step ' + ( parseInt( i ) + 1 );\n                            input.step_linked = input.step_linked || [];\n                            input.step_linked.push( step );\n                        }\n                    });\n                });\n            });\n\n            // identify and configure workflow parameters\n            var wp_count = 0;\n            this.wp_inputs = {};\n            function _handleWorkflowParameter( value, callback ) {\n                var re = /\\$\\{(.+?)\\}/g;\n                while ( match = re.exec( String( value ) ) ) {\n                    var wp_name = match[ 1 ];\n                    callback( self.wp_inputs[ wp_name ] = self.wp_inputs[ wp_name ] || {\n                        label   : wp_name,\n                        name    : wp_name,\n                        type    : 'text',\n                        color   : 'hsl( ' + ( ++wp_count * 100 ) + ', 70%, 30% )',\n                        style   : 'ui-form-wp-source',\n                        links   : []\n                    });\n                }\n            }\n            _.each( this.steps, function( step, i ) {\n                _.each( self.parms[ i ], function( input, name ) {\n                    _handleWorkflowParameter( input.value, function( wp_input ) {\n                        wp_input.links.push( step );\n                        input.wp_linked = true;\n                        input.type      = 'text';\n                        input.backdrop  = true;\n                        input.style     = 'ui-form-wp-target';\n                    });\n                });\n                _.each( step.post_job_actions, function( pja ) {\n                    _.each( pja.action_arguments, function( arg ) {\n                        _handleWorkflowParameter( arg, function() {} );\n                    });\n                });\n            });\n\n            // select fields are shown for dynamic fields if all putative data inputs are available,\n            // or if an explicit reference is specified as data_ref and available\n            _.each( this.steps, function( step, i ) {\n                if ( step.step_type == 'tool' ) {\n                    var data_resolved = true;\n                    FormData.visitInputs( step.inputs, function ( input, name, context ) {\n                        var is_data_input = ([ 'data', 'data_collection' ]).indexOf( input.type ) != -1;\n                        var data_ref = context[ input.data_ref ];\n                        input.step_linked && !self._isDataStep( input.step_linked ) && ( data_resolved = false );\n                        input.options && ( ( input.options.length == 0 && !data_resolved ) || input.wp_linked ) && ( input.is_workflow = true );\n                        data_ref && ( input.is_workflow = ( data_ref.step_linked && !self._isDataStep( data_ref.step_linked ) ) || input.wp_linked );\n                        ( is_data_input || ( input.value && input.value.__class__ == 'RuntimeValue' && !input.step_linked ) ) && ( step.collapsed = false );\n                        input.value && input.value.__class__ == 'RuntimeValue' && ( input.value = null );\n                        input.flavor = 'workflow';\n                        if ( !is_data_input && input.type !== 'hidden' && !input.wp_linked ) {\n                            if ( input.optional || ( !Utils.isEmpty( input.value ) && input.value !== '' ) ) {\n                                input.collapsible_value = input.value;\n                                input.collapsible_preview = true;\n                            }\n                        }\n                    });\n                }\n            });\n        },\n\n        render: function() {\n            var self = this;\n            this.deferred.reset();\n            this._renderHeader();\n            this._renderMessage();\n            this._renderParameters();\n            this._renderHistory();\n            _.each ( this.steps, function( step ) { self._renderStep( step ) } );\n        },\n\n        /** Render header */\n        _renderHeader: function() {\n            var self = this;\n            this.execute_btn = new Ui.Button({\n                icon        : 'fa-check',\n                title       : 'Run workflow',\n                cls         : 'btn btn-primary',\n                onclick     : function() { self._execute() }\n            });\n            this.$header.addClass( 'ui-form-header' ).empty()\n                        .append( new Ui.Label( { title: 'Workflow: ' + this.model.get( 'name' ) } ).$el )\n                        .append( this.execute_btn.$el );\n        },\n\n        /** Render message */\n        _renderMessage: function() {\n            this.$message.empty();\n            if ( this.model.get( 'has_upgrade_messages' ) ) {\n                this.$message.append( new Ui.Message( {\n                    message     : 'Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.',\n                    status      : 'warning',\n                    persistent  : true,\n                    fade        : false\n                } ).$el );\n            }\n            var step_version_changes = this.model.get( 'step_version_changes' );\n            if ( step_version_changes && step_version_changes.length > 0 ) {\n                this.$message.append( new Ui.Message( {\n                    message     : 'Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.',\n                    status      : 'warning',\n                    persistent  : true,\n                    fade        : false\n                } ).$el );\n            }\n        },\n\n        /** Render workflow parameters */\n        _renderParameters: function() {\n            var self = this;\n            this.wp_form = null;\n            if ( !_.isEmpty( this.wp_inputs ) ) {\n                this.wp_form = new Form({ title: '<b>Workflow Parameters</b>', inputs: this.wp_inputs, cls: 'ui-portlet-narrow', onchange: function() {\n                        _.each( self.wp_form.input_list, function( input_def, i ) {\n                            _.each( input_def.links, function( step ) { self._refreshStep( step ) } );\n                        });\n                    }\n                });\n                this._append( this.$steps.empty(), this.wp_form.$el );\n            }\n        },\n\n        /** Render workflow parameters */\n        _renderHistory: function() {\n            this.history_form = new Form({\n                cls    : 'ui-portlet-narrow',\n                title  : '<b>History Options</b>',\n                inputs : [{\n                    type        : 'conditional',\n                    name        : 'new_history',\n                    test_param  : {\n                        name        : 'check',\n                        label       : 'Send results to a new history',\n                        type        : 'boolean',\n                        value       : 'false',\n                        help        : ''\n                    },\n                    cases       : [{\n                        value   : 'true',\n                        inputs  : [{\n                            name    : 'name',\n                            label   : 'History name',\n                            type    : 'text',\n                            value   : this.model.get( 'name' )\n                        }]\n                    }]\n                }]\n            });\n            this._append( this.$steps, this.history_form.$el );\n        },\n\n        /** Render step */\n        _renderStep: function( step ) {\n            var self = this;\n            var form = null;\n            this.deferred.execute( function( promise ) {\n                self.$steps.addClass( 'ui-steps' );\n                if ( step.step_type == 'tool' ) {\n                    step.postchange = function( process, form ) {\n                        var self = this;\n                        var current_state = {\n                            tool_id         : step.id,\n                            tool_version    : step.version,\n                            inputs          : $.extend( true, {}, form.data.create() )\n                        }\n                        form.wait( true );\n                        Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Sending current state.', current_state );\n                        Utils.request({\n                            type    : 'POST',\n                            url     : Galaxy.root + 'api/tools/' + step.id + '/build',\n                            data    : current_state,\n                            success : function( data ) {\n                                form.update( data );\n                                form.wait( false );\n                                Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Received new model.', data );\n                                process.resolve();\n                            },\n                            error   : function( response ) {\n                                Galaxy.emit.debug( 'tool-form-composite::postchange()', 'Refresh request failed.', response );\n                                process.reject();\n                            }\n                        });\n                    };\n                    form = new ToolFormBase( step );\n                    if ( step.post_job_actions && step.post_job_actions.length ) {\n                        form.portlet.append( $( '<div/>' ).addClass( 'ui-form-element-disabled' )\n                            .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( '<b>Job Post Actions</b>' ) )\n                            .append( $( '<div/>' ).addClass( 'ui-form-preview' ).html(\n                                _.reduce( step.post_job_actions, function( memo, value ) {\n                                    return memo + ' ' + value.short_str;\n                                }, '' ) ) )\n                            );\n                    }\n                } else {\n                    var is_simple_input = ([ 'data_input', 'data_collection_input' ]).indexOf( step.step_type ) != -1;\n                    _.each( step.inputs, function( input ) { input.flavor = 'module'; input.hide_label = is_simple_input; } );\n                    form = new Form( Utils.merge({\n                        title    : step.title,\n                        onchange : function() { _.each( self.links[ step.index ], function( link ) { self._refreshStep( link ) } ) },\n                        inputs   : step.inputs && step.inputs.length > 0 ? step.inputs : [ { type: 'hidden', name: 'No options available.', ignore: null } ]\n                    }, step ) );\n                }\n                self.forms[ step.index ] = form;\n                self._append( self.$steps, form.$el );\n                step.needs_refresh && self._refreshStep( step );\n                form.portlet[ !self.show_progress ? 'enable' : 'disable' ]();\n                self.show_progress && self.execute_btn.model.set( { wait        : true,\n                                                                    wait_text   : 'Preparing...',\n                                                                    percentage  : ( step.index + 1 ) * 100.0 / self.steps.length } );\n                Galaxy.emit.debug( 'tool-form-composite::initialize()', step.index + ' : Workflow step state ready.', step );\n                setTimeout( function() { promise.resolve() }, 0 );\n            });\n        },\n\n        /** Refreshes step values from source step values */\n        _refreshStep: function( step ) {\n            var self = this;\n            var form = this.forms[ step.index ];\n            if ( form ) {\n                _.each( self.parms[ step.index ], function( input, name ) {\n                    if ( input.step_linked || input.wp_linked ) {\n                        var field = form.field_list[ form.data.match( name ) ];\n                        if ( field ) {\n                            var new_value = undefined;\n                            if ( input.step_linked ) {\n                                new_value = { values: [] };\n                                _.each( input.step_linked, function( source_step ) {\n                                    if ( self._isDataStep( source_step ) ) {\n                                        value = self.forms[ source_step.index ].data.create().input;\n                                        value && _.each( value.values, function( v ) { new_value.values.push( v ) } );\n                                    }\n                                });\n                                if ( !input.multiple && new_value.values.length > 0 ) {\n                                    new_value = { values: [ new_value.values[ 0 ] ] };\n                                }\n                            } else if ( input.wp_linked ) {\n                                new_value = input.value;\n                                var re = /\\$\\{(.+?)\\}/g;\n                                while ( match = re.exec( input.value ) ) {\n                                    var wp_field = self.wp_form.field_list[ self.wp_form.data.match( match[ 1 ] ) ];\n                                    var wp_value = wp_field && wp_field.value();\n                                    if ( wp_value ) {\n                                        new_value = new_value.replace( new RegExp( '\\\\' + match[ 0 ], 'g' ), wp_value );\n                                    }\n                                }\n                            }\n                            if ( new_value !== undefined ) {\n                                field.value( new_value );\n                            }\n                        }\n                    }\n                });\n                form.trigger( 'change' );\n            } else {\n                step.needs_refresh = true;\n            }\n        },\n\n        /** Refresh the history after job submission while form is shown */\n        _refreshHistory: function() {\n            var self = this;\n            var history = parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.model;\n            this._refresh_history && clearTimeout( this._refresh_history );\n            if ( history ) {\n                history.refresh().success( function() {\n                    if ( history.numOfUnfinishedShownContents() === 0 ) {\n                        self._refresh_history = setTimeout( function() { self._refreshHistory() }, history.UPDATE_DELAY );\n                    }\n                });\n            }\n        },\n\n        /** Build remaining steps */\n        _execute: function() {\n            var self = this;\n            this.show_progress = true;\n            this._enabled( false );\n            this.deferred.execute( function( promise ) {\n                setTimeout( function() { promise.resolve(); self._submit(); }, 0 );\n            });\n        },\n\n        /** Validate and submit workflow */\n        _submit: function() {\n            var self = this;\n            var history_form_data = this.history_form.data.create();\n            var job_def = {\n                new_history_name      : history_form_data[ 'new_history|name' ] ? history_form_data[ 'new_history|name' ] : null,\n                history_id            : !history_form_data[ 'new_history|name' ] ? this.model.get( 'history_id' ) : null,\n                replacement_params    : this.wp_form ? this.wp_form.data.create() : {},\n                parameters            : {},\n                // Tool form will submit flat maps for each parameter\n                // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n                // data structures).\n                parameters_normalized : true,\n                // Tool form always wants a list of invocations back\n                // so that inputs can be batched.\n                batch                 : true\n            };\n            var validated = true;\n            for ( var i in this.forms ) {\n                var form = this.forms[ i ];\n                var job_inputs  = form.data.create();\n                var step        = self.steps[ i ];\n                var step_index  = step.step_index;\n                form.trigger( 'reset' );\n                for ( var job_input_id in job_inputs ) {\n                    var input_value = job_inputs[ job_input_id ];\n                    var input_id    = form.data.match( job_input_id );\n                    var input_field = form.field_list[ input_id ];\n                    var input_def   = form.input_list[ input_id ];\n                    if ( !input_def.step_linked ) {\n                        if ( this._isDataStep( step ) ) {\n                            validated = input_value && input_value.values && input_value.values.length > 0;\n                        } else {\n                            validated = input_def.optional || ( input_def.is_workflow && input_value !== '' ) || ( !input_def.is_workflow && input_value !== null );\n                        }\n                        if ( !validated ) {\n                            form.highlight( input_id );\n                            break;\n                        }\n                        job_def.parameters[ step_index ] = job_def.parameters[ step_index ] || {};\n                        job_def.parameters[ step_index ][ job_input_id ] = job_inputs[ job_input_id ];\n                    }\n                }\n                if ( !validated ) {\n                    break;\n                }\n            }\n            if ( !validated ) {\n                self._enabled( true );\n                Galaxy.emit.debug( 'tool-form-composite::submit()', 'Validation failed.', job_def );\n            } else {\n                Galaxy.emit.debug( 'tool-form-composite::submit()', 'Validation complete.', job_def );\n                Utils.request({\n                    type    : 'POST',\n                    url     : Galaxy.root + 'api/workflows/' + this.model.id + '/invocations',\n                    data    : job_def,\n                    success : function( response ) {\n                        Galaxy.emit.debug( 'tool-form-composite::submit', 'Submission successful.', response );\n                        self.$el.children().hide();\n                        self.$el.append( self._templateSuccess( response ) );\n\n                        // Show Webhook if job is running\n                        if ($.isArray( response ) && response.length > 0) {\n                            self.$el.append( $( '<div/>', { id: 'webhook-view' } ) );\n                            var WebhookApp = new Webhooks.WebhookView({\n                                urlRoot: Galaxy.root + 'api/webhooks/workflow'\n                            });\n                        }\n\n                        self._refreshHistory();\n                    },\n                    error   : function( response ) {\n                        Galaxy.emit.debug( 'tool-form-composite::submit', 'Submission failed.', response );\n                        var input_found = false;\n                        if ( response && response.err_data ) {\n                            for ( var i in self.forms ) {\n                                var form = self.forms[ i ];\n                                var step_related_errors = response.err_data[ form.model.get( 'step_index' ) ];\n                                if ( step_related_errors ) {\n                                    var error_messages = form.data.matchResponse( step_related_errors );\n                                    for ( var input_id in error_messages ) {\n                                        form.highlight( input_id, error_messages[ input_id ] );\n                                        input_found = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        if ( !input_found ) {\n                            self.modal.show({\n                                title   : 'Workflow submission failed',\n                                body    : self._templateError( job_def, response && response.err_msg ),\n                                buttons : {\n                                    'Close' : function() {\n                                        self.modal.hide();\n                                    }\n                                }\n                            });\n                        }\n                    },\n                    complete: function() {\n                        self._enabled( true );\n                    }\n                });\n            }\n        },\n\n        /** Append new dom to body */\n        _append: function( $container, $el ) {\n            $container.append( '<p/>' ).append( $el );\n        },\n\n        /** Set enabled/disabled state */\n        _enabled: function( enabled ) {\n            this.execute_btn.model.set( { wait: !enabled, wait_text: 'Sending...', percentage: -1 } );\n            this.wp_form && this.wp_form.portlet[ enabled ? 'enable' : 'disable' ]();\n            this.history_form && this.history_form.portlet[ enabled ? 'enable' : 'disable' ]();\n            _.each( this.forms, function( form ) { form && form.portlet[ enabled ? 'enable' : 'disable' ]() } );\n        },\n\n        /** Is data input module/step */\n        _isDataStep: function( steps ) {\n            lst = $.isArray( steps ) ? steps : [ steps ] ;\n            for ( var i = 0; i < lst.length; i++ ) {\n                var step = lst[ i ];\n                if ( !step || !step.step_type || !step.step_type.startsWith( 'data' ) ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /** Templates */\n        _templateSuccess: function( response ) {\n            if ( $.isArray( response ) && response.length > 0 ) {\n                return $( '<div/>' ).addClass( 'donemessagelarge' )\n                                    .append( $( '<p/>' ).html( 'Successfully invoked workflow <b>' + Utils.sanitize( this.model.get( 'name' ) ) + '</b>' + ( response.length > 1 ? ' <b>' + response.length + ' times</b>' : '' ) + '.' ) )\n                                    .append( $( '<p/>' ).append( '<b/>' ).text( 'You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from \\'running\\' to \\'finished\\' if completed successfully or \\'error\\' if problems were encountered.' ) );\n            } else {\n                return this._templateError( response, 'Invalid success response. No invocations found.' );\n            }\n        },\n\n        _templateError: function( response, err_msg ) {\n            return  $( '<div/>' ).addClass( 'errormessagelarge' )\n                                 .append( $( '<p/>' ).text( 'The server could not complete the request. Please contact the Galaxy Team if this error persists. ' + ( JSON.stringify( err_msg ) || '' ) ) )\n                                 .append( $( '<pre/>' ).text( JSON.stringify( response, null, 4 ) ) );\n        }\n    });\n    return {\n        View: View\n    };\n});\n"]}