{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["define","View","initialize","$","self","Ui","Form","FormData","ToolFormBase","_refresh","Webhooks","WorkflowIcons","$steps","extend","options","this","modal","parent","Galaxy","Modal","_configure","model","Backbone","Model","forms","Deferred","steps","links","addClass","$message","emit","$header","icon","step_type","annotation","$el","title","render","window","step_version","help","citations","collapsible","children","collapsed","i","child","sustain_version","outerHeight","sustain_conditionals","text_enable","text_disable","cls_enable","height","margin","cls","_handleWorkflowParameter","value","callback","deferred","match","re","reset","exec","String","_renderHeader","_renderMessage","_renderParameters","wp_inputs","wp_name","label","name","type","color","wp_count","style","hide_operations","needs_refresh","always_refresh","step","get","debug","step_label","step_name","output_connections","each","sub_step","Utils","merge","index","fixed_title","_","escape","connections_by_name","_isDataStep","parms","connection","input","messages","step_linked","output_connection","j","step_index","wp_input","post_job_actions","pja","action_arguments","input_step_index","input_name","data_resolved","visitInputs","is_runtime_value","is_data_input","data_ref","context","parseInt","optional","push","onclick","wp_linked","execute_btn","backdrop","empty","arg","step_version_changes","Message","message","inputs","persistent","__class__","indexOf","length","wp_form","input_def","_refreshStep","is_workflow","default_value","flavor","isEmpty","collapsible_value","collapsible_preview","_renderWorkflowOptions","workflow_options_form","_append","Button","_renderStep","_execute","postchange","append","tool_id","tool_version","version","form","url","data","success","process","status","error","is_simple_input","ignore","input_list","show_progress","_renderHistory","history_form","field","new_value","multiple","values","_refreshHistory","execute","promise","_refresh_history","history","clearTimeout","refresh","numOfUnfinishedShownContents","id","UPDATE_DELAY","create","wait","current_state","request","root","update","history_form_data","workflow_options","response","parameters_normalized","reject","job_inputs","job_input_id","field_list","input_value","html","memo","job_def","parameters","_enabled","hide_label","onchange","link","err_data","input_found","portlet","set","body","buttons","setTimeout","complete","resolve","$container","enabled","undefined","source_step","v","_templateError","wp_field","err_msg","wp_value","split","join","trigger","currHistoryPanel","_submit","new_history_name","history_id","replacement_params","batch","validated","input_id","highlight","hide","_templateSuccess","isArray","WebhookView","urlRoot","toolId","toolVersion","step_related_errors","error_messages","matchResponse","show","Close","wait_text","percentage","lst","startsWith","sanitize","text","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\ndefine(\n    [\n        \"utils/utils\",\n        \"utils/deferred\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/form/form-view\",\n        \"mvc/form/form-data\",\n        \"mvc/tool/tool-form-base\",\n        \"mvc/ui/ui-modal\",\n        \"mvc/webhooks\",\n        \"mvc/workflow/workflow-icons\"\n    ],\n    function(\n        Utils,\n        Deferred,\n        Ui,\n        Form,\n        FormData,\n        ToolFormBase,\n        Modal,\n        Webhooks,\n        WorkflowIcons\n    ) {\n        var View = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                this.modal = parent.Galaxy.modal || new Modal.View();\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.deferred = new Deferred();\n                this.setElement(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-composite\")\n                        .append((this.$message = $(\"<div/>\")))\n                        .append((this.$header = $(\"<div/>\")))\n                        .append((this.$steps = $(\"<div/>\")))\n                );\n                $(\"body\").append(this.$el);\n                this._configure();\n                this.render();\n                $(window).resize(function() {\n                    self._refresh();\n                });\n            },\n\n            /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n            _refresh: function(step_index) {\n                var margin =\n                    _.reduce(\n                        this.$el.children(),\n                        function(memo, child) {\n                            return memo + $(child).outerHeight();\n                        },\n                        0\n                    ) -\n                    this.$steps.height() +\n                    90;\n                this.$steps.css(\"height\", $(window).height() - margin);\n            },\n\n            /** Configures form/step options for each workflow step */\n            _configure: function() {\n                var self = this;\n                this.forms = [];\n                this.steps = [];\n                this.links = [];\n                this.parms = [];\n                _.each(this.model.get(\"steps\"), function(step, i) {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::initialize()\",\n                        i + \" : Preparing workflow step.\"\n                    );\n                    var icon = WorkflowIcons[step.step_type];\n                    var title =\n                        parseInt(i + 1) +\n                        \": \" +\n                        (step.step_label || step.step_name);\n                    if (step.annotation) {\n                        title += \" - \" + step.annotation;\n                    }\n                    if (step.step_version) {\n                        title += \" (Galaxy Version \" + step.step_version + \")\";\n                    }\n                    step = Utils.merge(\n                        {\n                            index: i,\n                            fixed_title: _.escape(title),\n                            icon: icon || \"\",\n                            help: null,\n                            citations: null,\n                            collapsible: true,\n                            collapsed: i > 0 && !self._isDataStep(step),\n                            sustain_version: true,\n                            sustain_repeats: true,\n                            sustain_conditionals: true,\n                            narrow: true,\n                            text_enable: \"Edit\",\n                            text_disable: \"Undo\",\n                            cls_enable: \"fa fa-edit\",\n                            cls_disable: \"fa fa-undo\",\n                            errors: step.messages,\n                            initial_errors: true,\n                            cls: \"ui-portlet-narrow\",\n                            hide_operations: true,\n                            needs_refresh: false,\n                            always_refresh: step.step_type != \"tool\"\n                        },\n                        step\n                    );\n                    self.steps[i] = step;\n                    self.links[i] = [];\n                    self.parms[i] = {};\n                });\n\n                // build linear index of step input pairs\n                _.each(this.steps, function(step, i) {\n                    FormData.visitInputs(step.inputs, function(input, name) {\n                        self.parms[i][name] = input;\n                    });\n                });\n\n                // iterate through data input modules and collect linked sub steps\n                _.each(this.steps, function(step, i) {\n                    _.each(step.output_connections, function(\n                        output_connection\n                    ) {\n                        _.each(self.steps, function(sub_step, j) {\n                            sub_step.step_index ===\n                                output_connection.input_step_index &&\n                                self.links[i].push(sub_step);\n                        });\n                    });\n                });\n\n                // convert all connected data inputs to hidden fields with proper labels,\n                // and track the linked source step\n                _.each(this.steps, function(step, i) {\n                    _.each(self.steps, function(sub_step, j) {\n                        var connections_by_name = {};\n                        _.each(step.output_connections, function(connection) {\n                            sub_step.step_index ===\n                                connection.input_step_index &&\n                                (connections_by_name[\n                                    connection.input_name\n                                ] = connection);\n                        });\n                        _.each(self.parms[j], function(input, name) {\n                            var connection = connections_by_name[name];\n                            if (connection) {\n                                input.type = \"hidden\";\n                                input.help = input.step_linked\n                                    ? input.help + \", \"\n                                    : \"\";\n                                input.help +=\n                                    \"Output dataset '\" +\n                                    connection.output_name +\n                                    \"' from step \" +\n                                    (parseInt(i) + 1);\n                                input.step_linked = input.step_linked || [];\n                                input.step_linked.push(step);\n                            }\n                        });\n                    });\n                });\n\n                // identify and configure workflow parameters\n                var wp_count = 0;\n                this.wp_inputs = {};\n                function _handleWorkflowParameter(value, callback) {\n                    var re = /\\$\\{(.+?)\\}/g,\n                        match;\n                    while ((match = re.exec(String(value)))) {\n                        var wp_name = match[1];\n                        callback(\n                            (self.wp_inputs[wp_name] = self.wp_inputs[\n                                wp_name\n                            ] || {\n                                label: wp_name,\n                                name: wp_name,\n                                type: \"text\",\n                                color:\n                                    \"hsl( \" + ++wp_count * 100 + \", 70%, 30% )\",\n                                style: \"ui-form-wp-source\",\n                                links: []\n                            })\n                        );\n                    }\n                }\n                _.each(this.steps, function(step, i) {\n                    _.each(self.parms[i], function(input, name) {\n                        _handleWorkflowParameter(input.value, function(\n                            wp_input\n                        ) {\n                            wp_input.links.push(step);\n                            input.wp_linked = true;\n                            input.type = \"text\";\n                            input.backdrop = true;\n                            input.style = \"ui-form-wp-target\";\n                        });\n                    });\n                    _.each(step.post_job_actions, function(pja) {\n                        _.each(pja.action_arguments, function(arg) {\n                            _handleWorkflowParameter(arg, function() {});\n                        });\n                    });\n                });\n\n                // select fields are shown for dynamic fields if all putative data inputs are available,\n                // or if an explicit reference is specified as data_ref and available\n                _.each(this.steps, function(step, i) {\n                    if (step.step_type == \"tool\") {\n                        var data_resolved = true;\n                        FormData.visitInputs(step.inputs, function(\n                            input,\n                            name,\n                            context\n                        ) {\n                            var is_runtime_value =\n                                input.value &&\n                                input.value.__class__ == \"RuntimeValue\";\n                            var is_data_input =\n                                [\"data\", \"data_collection\"].indexOf(\n                                    input.type\n                                ) != -1;\n                            var data_ref = context[input.data_ref];\n                            input.step_linked &&\n                                !self._isDataStep(input.step_linked) &&\n                                (data_resolved = false);\n                            input.options &&\n                                ((input.options.length == 0 &&\n                                    !data_resolved) ||\n                                    input.wp_linked) &&\n                                (input.is_workflow = true);\n                            data_ref &&\n                                (input.is_workflow =\n                                    (data_ref.step_linked &&\n                                        !self._isDataStep(\n                                            data_ref.step_linked\n                                        )) ||\n                                    input.wp_linked);\n                            (is_data_input ||\n                                (input.value &&\n                                    input.value.__class__ == \"RuntimeValue\" &&\n                                    !input.step_linked)) &&\n                                (step.collapsed = false);\n                            is_runtime_value &&\n                                (input.value = input.default_value);\n                            input.flavor = \"workflow\";\n                            if (\n                                !is_runtime_value &&\n                                !is_data_input &&\n                                input.type !== \"hidden\" &&\n                                !input.wp_linked\n                            ) {\n                                if (\n                                    input.optional ||\n                                    (!Utils.isEmpty(input.value) &&\n                                        input.value !== \"\")\n                                ) {\n                                    input.collapsible_value = input.value;\n                                    input.collapsible_preview = true;\n                                }\n                            }\n                        });\n                    }\n                });\n            },\n\n            render: function() {\n                var self = this;\n                this.deferred.reset();\n                this._renderHeader();\n                this._renderMessage();\n                this._renderParameters();\n                this._renderHistory();\n                this._renderWorkflowOptions();\n                _.each(this.steps, function(step) {\n                    self._renderStep(step);\n                });\n            },\n\n            /** Render header */\n            _renderHeader: function() {\n                var self = this;\n                this.execute_btn = new Ui.Button({\n                    icon: \"fa-check\",\n                    title: \"Run workflow\",\n                    cls: \"btn btn-primary\",\n                    onclick: function() {\n                        self._execute();\n                    }\n                });\n                this.$header\n                    .addClass(\"ui-form-header\")\n                    .empty()\n                    .append(\n                        new Ui.Label({\n                            title: \"Workflow: \" + this.model.get(\"name\")\n                        }).$el\n                    )\n                    .append(this.execute_btn.$el);\n            },\n\n            /** Render message */\n            _renderMessage: function() {\n                this.$message.empty();\n                if (this.model.get(\"has_upgrade_messages\")) {\n                    this.$message.append(\n                        new Ui.Message({\n                            message:\n                                \"Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.\",\n                            status: \"warning\",\n                            persistent: true,\n                            fade: false\n                        }).$el\n                    );\n                }\n                var step_version_changes = this.model.get(\n                    \"step_version_changes\"\n                );\n                if (step_version_changes && step_version_changes.length > 0) {\n                    this.$message.append(\n                        new Ui.Message({\n                            message:\n                                \"Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.\",\n                            status: \"warning\",\n                            persistent: true,\n                            fade: false\n                        }).$el\n                    );\n                }\n            },\n\n            /** Render workflow parameters */\n            _renderParameters: function() {\n                var self = this;\n                this.wp_form = null;\n                if (!_.isEmpty(this.wp_inputs)) {\n                    this.wp_form = new Form({\n                        title: \"<b>Workflow Parameters</b>\",\n                        inputs: this.wp_inputs,\n                        cls: \"ui-portlet-narrow\",\n                        onchange: function() {\n                            _.each(self.wp_form.input_list, function(\n                                input_def,\n                                i\n                            ) {\n                                _.each(input_def.links, function(step) {\n                                    self._refreshStep(step);\n                                });\n                            });\n                        }\n                    });\n                    this._append(this.$steps.empty(), this.wp_form.$el);\n                }\n            },\n\n            /** Render workflow parameters */\n            _renderHistory: function() {\n                this.history_form = new Form({\n                    cls: \"ui-portlet-narrow\",\n                    title: \"<b>History Options</b>\",\n                    inputs: [\n                        {\n                            type: \"conditional\",\n                            name: \"new_history\",\n                            test_param: {\n                                name: \"check\",\n                                label: \"Send results to a new history\",\n                                type: \"boolean\",\n                                value: \"false\",\n                                help: \"\"\n                            },\n                            cases: [\n                                {\n                                    value: \"true\",\n                                    inputs: [\n                                        {\n                                            name: \"name\",\n                                            label: \"History name\",\n                                            type: \"text\",\n                                            value: this.model.get(\"name\")\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                });\n                this._append(this.$steps, this.history_form.$el);\n            },\n\n            /** Render Workflow Options */\n            _renderWorkflowOptions: function() {\n                this.workflow_options_form = new Form({\n                    cls    : 'ui-portlet-narrow',\n                    title  : '<b>Workflow Options</b>',\n                    inputs : [{\n                        type    : 'select',\n                        name    : 'workflow_job_priority',\n                        label   : 'Workflow Job Priority',\n                        help    : 'What priority should the jobs in this workflow run at? (Overrides any declared job priority)',\n                        data    : this.model.get('workflow_options')\n                    }]\n                });\n                this._append( this.$steps, this.workflow_options_form.$el );\n            },\n\n            /** Render step */\n            _renderStep: function(step) {\n                var self = this;\n                var form = null;\n                this.deferred.execute(function(promise) {\n                    self.$steps.addClass(\"ui-steps\");\n                    if (step.step_type == \"tool\") {\n                        step.postchange = function(process, form) {\n                            var self = this;\n                            var current_state = {\n                                tool_id: step.id,\n                                tool_version: step.version,\n                                inputs: $.extend(true, {}, form.data.create())\n                            };\n                            form.wait(true);\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Sending current state.\",\n                                current_state\n                            );\n                            Utils.request({\n                                type: \"POST\",\n                                url:\n                                    Galaxy.root +\n                                    \"api/tools/\" +\n                                    step.id +\n                                    \"/build\",\n                                data: current_state,\n                                success: function(data) {\n                                    form.update(data);\n                                    form.wait(false);\n                                    Galaxy.emit.debug(\n                                        \"tool-form-composite::postchange()\",\n                                        \"Received new model.\",\n                                        data\n                                    );\n                                    process.resolve();\n                                },\n                                error: function(response) {\n                                    Galaxy.emit.debug(\n                                        \"tool-form-composite::postchange()\",\n                                        \"Refresh request failed.\",\n                                        response\n                                    );\n                                    process.reject();\n                                }\n                            });\n                        };\n                        form = new ToolFormBase(step);\n                        if (\n                            step.post_job_actions &&\n                            step.post_job_actions.length\n                        ) {\n                            form.portlet.append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-element-disabled\")\n                                    .append(\n                                        $(\"<div/>\")\n                                            .addClass(\"ui-form-title\")\n                                            .html(\"<b>Job Post Actions</b>\")\n                                    )\n                                    .append(\n                                        $(\"<div/>\")\n                                            .addClass(\"ui-form-preview\")\n                                            .html(\n                                                _.reduce(\n                                                    step.post_job_actions,\n                                                    function(memo, value) {\n                                                        return (\n                                                            memo +\n                                                            \" \" +\n                                                            value.short_str\n                                                        );\n                                                    },\n                                                    \"\"\n                                                )\n                                            )\n                                    )\n                            );\n                        }\n                    } else {\n                        var is_simple_input =\n                            [\"data_input\", \"data_collection_input\"].indexOf(\n                                step.step_type\n                            ) != -1;\n                        _.each(step.inputs, function(input) {\n                            input.flavor = \"module\";\n                            input.hide_label = is_simple_input;\n                        });\n                        form = new Form(\n                            Utils.merge(\n                                {\n                                    title: step.fixed_title,\n                                    onchange: function() {\n                                        _.each(self.links[step.index], function(\n                                            link\n                                        ) {\n                                            self._refreshStep(link);\n                                        });\n                                    },\n                                    inputs:\n                                        step.inputs && step.inputs.length > 0\n                                            ? step.inputs\n                                            : [\n                                                  {\n                                                      type: \"hidden\",\n                                                      name:\n                                                          \"No options available.\",\n                                                      ignore: null\n                                                  }\n                                              ]\n                                },\n                                step\n                            )\n                        );\n                    }\n                    self.forms[step.index] = form;\n                    self._append(self.$steps, form.$el);\n                    self._refresh();\n                    step.needs_refresh && self._refreshStep(step);\n                    form.portlet[!self.show_progress ? \"enable\" : \"disable\"]();\n                    self.show_progress &&\n                        self.execute_btn.model.set({\n                            wait: true,\n                            wait_text: \"Preparing...\",\n                            percentage:\n                                (step.index + 1) * 100.0 / self.steps.length\n                        });\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::initialize()\",\n                        step.index + \" : Workflow step state ready.\",\n                        step\n                    );\n                    setTimeout(function() {\n                        promise.resolve();\n                    }, 0);\n                });\n            },\n\n            /** Refreshes step values from source step values */\n            _refreshStep: function(step) {\n                var self = this;\n                var form = this.forms[step.index];\n                if (form) {\n                    _.each(self.parms[step.index], function(input, name) {\n                        if (input.step_linked || input.wp_linked) {\n                            var field = form.field_list[form.data.match(name)];\n                            if (field) {\n                                var new_value = undefined;\n                                if (input.step_linked) {\n                                    new_value = { values: [] };\n                                    _.each(input.step_linked, function(\n                                        source_step\n                                    ) {\n                                        if (self._isDataStep(source_step)) {\n                                            var value = self.forms[\n                                                source_step.index\n                                            ].data.create().input;\n                                            value &&\n                                                _.each(value.values, function(\n                                                    v\n                                                ) {\n                                                    new_value.values.push(v);\n                                                });\n                                        }\n                                    });\n                                    if (\n                                        !input.multiple &&\n                                        new_value.values.length > 0\n                                    ) {\n                                        new_value = {\n                                            values: [new_value.values[0]]\n                                        };\n                                    }\n                                } else if (input.wp_linked) {\n                                    new_value = input.value;\n                                    var re = /\\$\\{(.+?)\\}/g,\n                                        match;\n                                    while ((match = re.exec(input.value))) {\n                                        var wp_field =\n                                            self.wp_form.field_list[\n                                                self.wp_form.data.match(\n                                                    match[1]\n                                                )\n                                            ];\n                                        var wp_value =\n                                            wp_field && wp_field.value();\n                                        if (wp_value) {\n                                            new_value = new_value\n                                                .split(match[0])\n                                                .join(wp_value);\n                                        }\n                                    }\n                                }\n                                if (new_value !== undefined) {\n                                    field.value(new_value);\n                                }\n                            }\n                        }\n                    });\n                    form.trigger(\"change\");\n                } else {\n                    step.needs_refresh = true;\n                }\n            },\n\n            /** Refresh the history after job submission while form is shown */\n            _refreshHistory: function() {\n                var self = this;\n                var history =\n                    parent.Galaxy &&\n                    parent.Galaxy.currHistoryPanel &&\n                    parent.Galaxy.currHistoryPanel.model;\n                this._refresh_history && clearTimeout(this._refresh_history);\n                if (history) {\n                    history.refresh().success(function() {\n                        if (history.numOfUnfinishedShownContents() === 0) {\n                            self._refresh_history = setTimeout(function() {\n                                self._refreshHistory();\n                            }, history.UPDATE_DELAY);\n                        }\n                    });\n                }\n            },\n\n            /** Build remaining steps */\n            _execute: function() {\n                var self = this;\n                this.show_progress = true;\n                this._enabled(false);\n                this.deferred.execute(function(promise) {\n                    setTimeout(function() {\n                        promise.resolve();\n                        self._submit();\n                    }, 0);\n                });\n            },\n\n            /** Validate and submit workflow */\n            _submit: function() {\n                var self = this;\n                var history_form_data = this.history_form.data.create();\n                var job_def = {\n                    new_history_name: history_form_data[\"new_history|name\"]\n                        ? history_form_data[\"new_history|name\"]\n                        : null,\n                    history_id: !history_form_data[\"new_history|name\"]\n                        ? this.model.get(\"history_id\")\n                        : null,\n                    workflow_options: this.workflow_options_form\n                        ? this.workflow_options_form.data.create()\n                        : {},\n                    replacement_params: this.wp_form\n                        ? this.wp_form.data.create()\n                        : {},\n                    parameters: {},\n                    // Tool form will submit flat maps for each parameter\n                    // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n                    // data structures).\n                    parameters_normalized: true,\n                    // Tool form always wants a list of invocations back\n                    // so that inputs can be batched.\n                    batch: true\n                };\n                var validated = true;\n                for (var i in this.forms) {\n                    var form = this.forms[i];\n                    var job_inputs = form.data.create();\n                    var step = self.steps[i];\n                    var step_index = step.step_index;\n                    form.trigger(\"reset\");\n                    for (var job_input_id in job_inputs) {\n                        var input_value = job_inputs[job_input_id];\n                        var input_id = form.data.match(job_input_id);\n                        var input_field = form.field_list[input_id];\n                        var input_def = form.input_list[input_id];\n                        if (!input_def.step_linked) {\n                            if (this._isDataStep(step)) {\n                                validated =\n                                    input_value &&\n                                    input_value.values &&\n                                    input_value.values.length > 0;\n                            } else {\n                                validated =\n                                    input_def.optional ||\n                                    (input_def.is_workflow &&\n                                        input_value !== \"\") ||\n                                    (!input_def.is_workflow &&\n                                        input_value !== null);\n                            }\n                            if (!validated) {\n                                form.highlight(input_id);\n                                break;\n                            }\n                            job_def.parameters[step_index] =\n                                job_def.parameters[step_index] || {};\n                            job_def.parameters[step_index][job_input_id] =\n                                job_inputs[job_input_id];\n                        }\n                    }\n                    if (!validated) {\n                        break;\n                    }\n                }\n                if (!validated) {\n                    self._enabled(true);\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit()\",\n                        \"Validation failed.\",\n                        job_def\n                    );\n                } else {\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::submit()\",\n                        \"Validation complete.\",\n                        job_def\n                    );\n                    Utils.request({\n                        type: \"POST\",\n                        url:\n                            Galaxy.root +\n                            \"api/workflows/\" +\n                            this.model.id +\n                            \"/invocations\",\n                        data: job_def,\n                        success: function(response) {\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::submit\",\n                                \"Submission successful.\",\n                                response\n                            );\n                            self.$el.children().hide();\n                            self.$el.append(self._templateSuccess(response));\n\n                            // Show Webhook if job is running\n                            if ($.isArray(response) && response.length > 0) {\n                                self.$el.append(\n                                    $(\"<div/>\", { id: \"webhook-view\" })\n                                );\n                                var WebhookApp = new Webhooks.WebhookView({\n                                    urlRoot:\n                                        Galaxy.root + \"api/webhooks/workflow\",\n                                    toolId: job_def.tool_id,\n                                    toolVersion: job_def.tool_version\n                                });\n                            }\n\n                            self._refreshHistory();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::submit\",\n                                \"Submission failed.\",\n                                response\n                            );\n                            var input_found = false;\n                            if (response && response.err_data) {\n                                for (var i in self.forms) {\n                                    var form = self.forms[i];\n                                    var step_related_errors =\n                                        response.err_data[\n                                            form.model.get(\"step_index\")\n                                        ];\n                                    if (step_related_errors) {\n                                        var error_messages = form.data.matchResponse(\n                                            step_related_errors\n                                        );\n                                        for (var input_id in error_messages) {\n                                            form.highlight(\n                                                input_id,\n                                                error_messages[input_id]\n                                            );\n                                            input_found = true;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            if (!input_found) {\n                                self.modal.show({\n                                    title: \"Workflow submission failed\",\n                                    body: self._templateError(\n                                        job_def,\n                                        response && response.err_msg\n                                    ),\n                                    buttons: {\n                                        Close: function() {\n                                            self.modal.hide();\n                                        }\n                                    }\n                                });\n                            }\n                        },\n                        complete: function() {\n                            self._enabled(true);\n                        }\n                    });\n                }\n            },\n\n            /** Append new dom to body */\n            _append: function($container, $el) {\n                $container.append(\"<p/>\").append($el);\n            },\n\n            /** Set enabled/disabled state */\n            _enabled: function(enabled) {\n                this.execute_btn.model.set({\n                    wait: !enabled,\n                    wait_text: \"Sending...\",\n                    percentage: -1\n                });\n                this.wp_form &&\n                    this.wp_form.portlet[enabled ? \"enable\" : \"disable\"]();\n                this.history_form &&\n                    this.history_form.portlet[enabled ? \"enable\" : \"disable\"]();\n                _.each(this.forms, function(form) {\n                    form && form.portlet[enabled ? \"enable\" : \"disable\"]();\n                });\n            },\n\n            /** Is data input module/step */\n            _isDataStep: function(steps) {\n                var lst = $.isArray(steps) ? steps : [steps];\n                for (var i = 0; i < lst.length; i++) {\n                    var step = lst[i];\n                    if (\n                        !step ||\n                        !step.step_type ||\n                        !step.step_type.startsWith(\"data\")\n                    ) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n\n            /** Templates */\n            _templateSuccess: function(response) {\n                if ($.isArray(response) && response.length > 0) {\n                    return $(\"<div/>\")\n                        .addClass(\"donemessagelarge\")\n                        .append(\n                            $(\"<p/>\").html(\n                                \"Successfully invoked workflow <b>\" +\n                                    Utils.sanitize(this.model.get(\"name\")) +\n                                    \"</b>\" +\n                                    (response.length > 1\n                                        ? \" <b>\" +\n                                          response.length +\n                                          \" times</b>\"\n                                        : \"\") +\n                                    \".\"\n                            )\n                        )\n                        .append(\n                            $(\"<p/>\")\n                                .append(\"<b/>\")\n                                .text(\n                                    \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                                )\n                        );\n                } else {\n                    return this._templateError(\n                        response,\n                        \"Invalid success response. No invocations found.\"\n                    );\n                }\n            },\n\n            _templateError: function(response, err_msg) {\n                return $(\"<div/>\")\n                    .addClass(\"errormessagelarge\")\n                    .append(\n                        $(\"<p/>\").text(\n                            \"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" +\n                                (JSON.stringify(err_msg) || \"\")\n                        )\n                    )\n                    .append(\n                        $(\"<pre/>\").text(JSON.stringify(response, null, 4))\n                    );\n            }\n        });\n        return {\n            View: View\n        };\n    }\n);\n"]}