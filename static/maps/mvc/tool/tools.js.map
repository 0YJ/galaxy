{"version":3,"sources":["mvc/tool/tools.js"],"names":["define","_","util","data","ToolForm","VisibilityMixin","hidden","show","this","set","hide","toggle","get","is_visible","attributes","ToolParameter","Backbone","Model","extend","defaults","name","label","type","value","html","num_samples","initialize","options","unescape","copy","toJSON","set_value","ToolParameterCollection","Collection","model","DataToolParameter","IntegerToolParameter","parseInt","get_samples","d3","scale","linear","domain","ticks","FloatToolParameter","parseFloat","SelectToolParameter","map","option","subModelTypes","integer","float","select","Tool","id","description","target","inputs","outputs","urlRoot","Galaxy","root","p","rval","prototype","call","i","remove_inputs","types","tool","incompatible_inputs","filter","input","indexOf","remove","only_samplable_inputs","valid_inputs","each","push","apply_search_results","results","set_input_value","find","set_input_values","inputs_dict","self","keys","input_name","run","_run","rerun","target_dataset","regions","action","target_dataset_id","get_inputs_dict","input_dict","additional_params","payload","tool_id","run_deferred","$","Deferred","ss_deferred","ServerStateDeferred","ajax_settings","url","JSON","stringify","dataType","contentType","interval","success_fn","response","when","go","then","result","resolve","DatasetCollection","ToolCollection","View","ToolSectionLabel","ToolSection","elems","open","clear_search_results","elt","cur_label","all_hidden","ToolSearch","search_hint_string","min_chars_for_search","clear_btn_url","visible","query","clear_key","on","do_search","length","q","timer","clearTimeout","setTimeout","ga","clear_search","ToolPanel","tool_search","tools","layout","parse","parse_elt","elt_dict","model_class","panel_elt","BaseView","update_visible","$el","ToolLinkView","tagName","render","$link","append","templates","tool_link","formStyle","e","preventDefault","upload","router","version","ToolSectionLabelView","className","text","ToolSectionView","update_open","panel_section","section_body","tool_view","label_view","events","click .toolSectionTitle > a","children","slideDown","slideUp","ToolSearchView","click","keyup :input","change :input","click #search-clear-btn","is","css","tooltip","focus_and_select","focus","clear","val","query_changed","evData","which","ToolPanelView","handle_search_results","search_view","section_title_view","attr","split","trigger","ToolFormView","tool_form","tool_panel_view","collection","tool_form_view","show_tool","fetch","done","width","template","join","variable"],"mappings":"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","file":"../../../scripts/mvc/tool/tools.js","sourcesContent":["/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\n define([\n    \"libs/underscore\",\n    \"viz/trackster/util\",\n    \"mvc/dataset/data\",\n    \"mvc/tool/tool-form\"\n\n], function(_, util, data, ToolForm) {\n    'use strict';\n\n/**\n * Mixin for tracking model visibility.\n */\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function() {\n        return !this.attributes.hidden;\n    }\n\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function(value) {\n        this.set('value', value || '');\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function(value) {\n        this.set('value', parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function() {\n        return d3.scale.linear()\n                        .domain([this.get('min'), this.get('max')])\n                        .ticks(this.get('num_samples'));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function(value) {\n        this.set('value', parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function() {\n        return _.map(this.get('options'), function(option) {\n            return option[0];\n        });\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    'integer': IntegerToolParameter,\n    'float': FloatToolParameter,\n    'data': DataToolParameter,\n    'select': SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: Galaxy.root + 'api/tools',\n\n    initialize: function(options) {\n\n        // Set parameters.\n        this.set('inputs', new ToolParameterCollection(_.map(options.inputs, function(p) {\n            var p_class = ToolParameter.subModelTypes[p.type] || ToolParameter;\n            return new p_class(p);\n        })));\n    },\n\n    /**\n     *\n     */\n    toJSON: function() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get('inputs').map(function(i) { return i.toJSON(); });\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function(types) {\n        var tool = this,\n            incompatible_inputs = tool.get('inputs').filter( function(input) {\n                return ( types.indexOf( input.get('type') ) !== -1);\n            });\n        tool.get('inputs').remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get('inputs').each(function(input) {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set('inputs', valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function(results) {\n        ( _.indexOf(results, this.attributes.id) !== -1 ? this.show() : this.hide() );\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function(name, value) {\n        this.get('inputs').find(function(input) {\n            return input.get('name') === name;\n        }).set('value', value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), function(input_name) {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function(target_dataset, regions) {\n        return this._run({\n            action: 'rerun',\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function() {\n        var input_dict = {};\n        this.get('inputs').each(function(input) {\n            input_dict[input.get('name')] = input.get('value');\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function(additional_params) {\n        // Create payload.\n        var payload = _.extend({\n                tool_id: this.id,\n                inputs: this.get_inputs_dict()\n            }, additional_params);\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred(),\n            ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: this.urlRoot,\n                data: JSON.stringify(payload),\n                dataType: \"json\",\n                contentType: 'application/json',\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(function(result) {\n            run_deferred.resolve(new data.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({\n\n});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function() {\n        _.each(this.attributes.elems, function(elt) {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function(results) {\n        var all_hidden = true,\n            cur_label;\n        _.each(this.attributes.elems, function(elt) {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            }\n            else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        }\n        else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: Galaxy.root + 'api/tools',\n\n    initialize: function() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(function () {\n            // log the search to analytics if present\n            if ( typeof ga !== 'undefined' ) {\n                ga( 'send', 'pageview', Galaxy.root + '?q=' + q );\n            }\n            $.get( self.urlRoot, { q: q }, function (data) {\n                self.set(\"results\", data);\n                $(\"#search-spinner\").hide();\n                $(\"#search-clear-btn\").show();\n            }, \"json\" );\n        }, 400 );\n    },\n\n    clear_search: function() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n\n    initialize: function(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\"change:results\", this.apply_search_results, this);\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection( this.parse(options.layout) );\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this,\n            // Helper to recursively parse tool panel.\n            parse_elt = function(elt_dict) {\n                var type = elt_dict.model_class;\n                // There are many types of tools; for now, anything that ends in 'Tool'\n                // is treated as a generic tool.\n                if ( type.indexOf('Tool') === type.length - 4 ) {\n                    return self.attributes.tools.get(elt_dict.id);\n                }\n                else if (type === 'ToolSection') {\n                    // Parse elements.\n                    var elems = _.map(elt_dict.elems, parse_elt);\n                    elt_dict.elems = elems;\n                    return new ToolSection(elt_dict);\n                }\n                else if (type === 'ToolSectionLabel') {\n                    return new ToolSectionLabel(elt_dict);\n                }\n            };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function() {\n        this.get('layout').each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            }\n            else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function() {\n        var results = this.get('tool_search').get('results');\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get('layout').each(function(panel_elt) {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            }\n            else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n            else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function() {\n        ( this.model.attributes.hidden ? this.$el.hide() : this.$el.show() );\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: 'div',\n\n    render: function() {\n        // create element\n        var $link = $('<div/>');\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        var formStyle = this.model.get( 'form_style', null );\n        // open upload dialog for upload tool\n        if (this.model.id === 'upload1') {\n            $link.find('a').on('click', function(e) {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        }\n        else if ( formStyle === 'regular' ) { // regular tools\n            var self = this;\n            $link.find('a').on('click', function(e) {\n                e.preventDefault();\n                Galaxy.router.push( '/', { tool_id : self.model.id, version : self.model.get('version') } );\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: 'div',\n    className: 'toolPanelLabel',\n\n    render: function() {\n        this.$el.append( $(\"<span/>\").text(this.model.attributes.text) );\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: 'div',\n    className: 'toolSectionWrapper',\n\n    initialize: function() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function() {\n        // Build using template.\n        this.$el.append( templates.panel_section(this.model.toJSON()) );\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, function(elt) {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({model: elt, className: \"toolTitle\"});\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            }\n            else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({model: elt});\n                label_view.render();\n                section_body.append(label_view.$el);\n            }\n            else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        'click .toolSectionTitle > a': 'toggle'\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function() {\n        (this.model.attributes.open ?\n            this.$el.children(\".toolSectionBody\").slideDown(\"fast\") :\n            this.$el.children(\".toolSectionBody\").slideUp(\"fast\")\n        );\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: 'div',\n    id: 'tool-search',\n    className: 'bar',\n\n    events: {\n        'click': 'focus_and_select',\n        'keyup :input': 'query_changed',\n        'change :input': 'query_changed',\n        'click #search-clear-btn': 'clear'\n    },\n\n    render: function() {\n        this.$el.append( templates.tool_search(this.model.toJSON()) );\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n\n        // Adjust top for issue 2907 depending on whether the messagebox is visible.\n        if ($(\"#messagebox\").is(\":visible\")) {\n            this.$el.css(\"top\",\"95px\");\n        }\n\n        this.$el.find('[title]').tooltip();\n        return this;\n    },\n\n    focus_and_select: function() {\n        this.$el.find(\":input\").focus().select();\n    },\n\n    clear: function() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val('');\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function( evData ) {\n        // check for the 'clear key' (ESC) first\n        if( ( this.model.attributes.clear_key ) &&\n            ( this.model.attributes.clear_key === evData.which ) ){\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'toolMenu',\n\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.model.get('tool_search').on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView( { model: this.model.get('tool_search') } );\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get('layout').each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({model: panel_elt});\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            }\n            else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({model: panel_elt, className: \"toolTitleNoSection\"});\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            }\n            else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({model: panel_elt});\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function(e) {\n            // Tool id is always the first class.\n            var\n                tool_id = $(this).attr('class').split(/\\s+/)[0],\n                tool = self.model.get('tools').get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function() {\n        var results = this.model.get('tool_search').get('results');\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        }\n        else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: 'toolForm',\n\n    render: function() {\n        this.$el.children().remove();\n        this.$el.append( templates.tool_form(this.model.toJSON()) );\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: 'toolMenuAndView',\n\n    initialize: function() {\n        this.tool_panel_view = new ToolPanelView({collection: this.collection});\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", function(e, tool) {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function(tool) {\n        var self = this;\n        tool.fetch().done( function() {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $('#left').width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search : _.template([\n        '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n                'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n        '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n        //TODO: replace with icon\n        '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>',\n    ].join('')),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section : _.template([\n        '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n        '</div>',\n        '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n            '<div class=\"toolSectionBg\"></div>',\n        '<div>'\n    ].join('')),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link : _.template([\n        '<span class=\"labels\">',\n            '<% _.each( labels, function( label ){ %>',\n            '<span class=\"label label-default label-<%- label %>\">',\n                '<%- label %>',\n            '</span>',\n            '<% }); %>',\n        '</span>',\n        '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n            '<%- name %>',\n        '</a>',\n        ' <%- description %>'\n    ].join('')),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form : _.template([\n        '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n        '<div class=\"toolFormBody\">',\n            '<% _.each( tool.inputs, function( input ){ %>',\n            '<div class=\"form-row\">',\n                '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n                '<div class=\"form-row-input\">',\n                    '<%= input.html %>',\n                '</div>',\n                '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n                    '<%- input.help %>',\n                '</div>',\n                '<div style=\"clear: both;\"></div>',\n            '</div>',\n            '<% }); %>',\n        '</div>',\n        '<div class=\"form-row form-actions\">',\n            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n        '</div>',\n        '<div class=\"toolHelp\">',\n            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n        '</div>',\n    // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n    // which implies a leaky variable that I can't find\n    ].join(''), { variable: 'tool' }),\n};\n\n\n// Exports\nreturn {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n\n});\n"]}