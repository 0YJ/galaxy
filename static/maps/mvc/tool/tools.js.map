{"version":3,"sources":["mvc/tool/tools.js"],"names":["define","_","util","data","ToolForm","show","hidden","hide","toggle","is_visible","this","get","attributes","label","Backbone","Model","extend","type","value","html","num_samples","initialize","options","copy","unescape","set_value","ToolParameter","set","ToolParameterCollection","Collection","model","DataToolParameter","IntegerToolParameter","parseInt","get_samples","d3","scale","linear","FloatToolParameter","ticks","parseFloat","SelectToolParameter","map","option","subModelTypes","integer","float","select","description","inputs","outputs","name","urlRoot","Galaxy","root","p","toJSON","rval","prototype","call","i","remove_inputs","types","tool","remove","incompatible_inputs","input","indexOf","only_samplable_inputs","valid_inputs","each","push","apply_search_results","results","id","set_input_value","find","self","keys","inputs_dict","input_name","run","_run","target_dataset_id","target_dataset","regions","action","input_dict","tool_id","payload","additional_params","get_inputs_dict","url","$","Deferred","JSON","stringify","dataType","contentType","interval","success_fn","response","when","ss_deferred","run_deferred","then","result","resolve","DatasetCollection","Tool","VisibilityMixin","ToolCollection","View","ToolSectionLabel","ToolSection","clear_search_results","elt","elems","cur_label","all_hidden","ToolSearch","defaults","clear_key","min_chars_for_search","clear_btn_url","query","do_search","on","length","clearTimeout","timer","ga","q","clear_search","ToolPanel","tool_search","parse","tools","layout","parse_elt","elt_dict","model_class","panel_elt","BaseView","ToolLinkView","update_visible","tagName","render","$el","$link","e","append","tool_link","preventDefault","upload","formStyle","router","version","ToolSectionLabelView","className","ToolSectionView","text","templates","label_view","section_body","tool_view","events","update_open","open","children","slideDown","slideUp","ToolSearchView","click","keyup :input","change :input","click #search-clear-btn","clear","is","css","tooltip","focus_and_select","focus","val","evData","which","search_view","handle_search_results","attr","section_title_view","split","ToolFormView","tool_form","tool_panel_view","ToolPanelView","collection","tool_form_view","show_tool","fetch","width","template","done","join","panel_section","variable"],"mappings":"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","file":"../../../scripts/mvc/tool/tools.js","sourcesContent":["/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\n define([\n    \"libs/underscore\",\n    \"viz/trackster/util\",\n    \"mvc/dataset/data\",\n    \"mvc/tool/tool-form\"\n\n], function(_, util, data, ToolForm) {\n    'use strict';\n\n/**\n * Mixin for tracking model visibility.\n */\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function() {\n        return !this.attributes.hidden;\n    }\n\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function(value) {\n        this.set('value', value || '');\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function(value) {\n        this.set('value', parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function() {\n        return d3.scale.linear()\n                        .domain([this.get('min'), this.get('max')])\n                        .ticks(this.get('num_samples'));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function(value) {\n        this.set('value', parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function() {\n        return _.map(this.get('options'), function(option) {\n            return option[0];\n        });\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    'integer': IntegerToolParameter,\n    'float': FloatToolParameter,\n    'data': DataToolParameter,\n    'select': SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: Galaxy.root + 'api/tools',\n\n    initialize: function(options) {\n\n        // Set parameters.\n        this.set('inputs', new ToolParameterCollection(_.map(options.inputs, function(p) {\n            var p_class = ToolParameter.subModelTypes[p.type] || ToolParameter;\n            return new p_class(p);\n        })));\n    },\n\n    /**\n     *\n     */\n    toJSON: function() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get('inputs').map(function(i) { return i.toJSON(); });\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function(types) {\n        var tool = this,\n            incompatible_inputs = tool.get('inputs').filter( function(input) {\n                return ( types.indexOf( input.get('type') ) !== -1);\n            });\n        tool.get('inputs').remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get('inputs').each(function(input) {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set('inputs', valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function(results) {\n        ( _.indexOf(results, this.attributes.id) !== -1 ? this.show() : this.hide() );\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function(name, value) {\n        this.get('inputs').find(function(input) {\n            return input.get('name') === name;\n        }).set('value', value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), function(input_name) {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function(target_dataset, regions) {\n        return this._run({\n            action: 'rerun',\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function() {\n        var input_dict = {};\n        this.get('inputs').each(function(input) {\n            input_dict[input.get('name')] = input.get('value');\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function(additional_params) {\n        // Create payload.\n        var payload = _.extend({\n                tool_id: this.id,\n                inputs: this.get_inputs_dict()\n            }, additional_params);\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred(),\n            ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: this.urlRoot,\n                data: JSON.stringify(payload),\n                dataType: \"json\",\n                contentType: 'application/json',\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(function(result) {\n            run_deferred.resolve(new data.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({\n\n});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function() {\n        _.each(this.attributes.elems, function(elt) {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function(results) {\n        var all_hidden = true,\n            cur_label;\n        _.each(this.attributes.elems, function(elt) {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            }\n            else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        }\n        else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: Galaxy.root + 'api/tools',\n\n    initialize: function() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(function () {\n            // log the search to analytics if present\n            if ( typeof ga !== 'undefined' ) {\n                ga( 'send', 'pageview', Galaxy.root + '?q=' + q );\n            }\n            $.get( self.urlRoot, { q: q }, function (data) {\n                self.set(\"results\", data);\n                $(\"#search-spinner\").hide();\n                $(\"#search-clear-btn\").show();\n            }, \"json\" );\n        }, 400 );\n    },\n\n    clear_search: function() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n\n    initialize: function(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\"change:results\", this.apply_search_results, this);\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection( this.parse(options.layout) );\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this,\n            // Helper to recursively parse tool panel.\n            parse_elt = function(elt_dict) {\n                var type = elt_dict.model_class;\n                // There are many types of tools; for now, anything that ends in 'Tool'\n                // is treated as a generic tool.\n                if ( type.indexOf('Tool') === type.length - 4 ) {\n                    return self.attributes.tools.get(elt_dict.id);\n                }\n                else if (type === 'ToolSection') {\n                    // Parse elements.\n                    var elems = _.map(elt_dict.elems, parse_elt);\n                    elt_dict.elems = elems;\n                    return new ToolSection(elt_dict);\n                }\n                else if (type === 'ToolSectionLabel') {\n                    return new ToolSectionLabel(elt_dict);\n                }\n            };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function() {\n        this.get('layout').each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            }\n            else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function() {\n        var results = this.get('tool_search').get('results');\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get('layout').each(function(panel_elt) {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            }\n            else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n            else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function() {\n        ( this.model.attributes.hidden ? this.$el.hide() : this.$el.show() );\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: 'div',\n\n    render: function() {\n        // create element\n        var $link = $('<div/>');\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        var formStyle = this.model.get( 'form_style', null );\n        // open upload dialog for upload tool\n        if (this.model.id === 'upload1') {\n            $link.find('a').on('click', function(e) {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        }\n        else if ( formStyle === 'regular' ) { // regular tools\n            var self = this;\n            $link.find('a').on('click', function(e) {\n                e.preventDefault();\n                Galaxy.router.push( '/', { tool_id : self.model.id, version : self.model.get('version') } );\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: 'div',\n    className: 'toolPanelLabel',\n\n    render: function() {\n        this.$el.append( $(\"<span/>\").text(this.model.attributes.text) );\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: 'div',\n    className: 'toolSectionWrapper',\n\n    initialize: function() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function() {\n        // Build using template.\n        this.$el.append( templates.panel_section(this.model.toJSON()) );\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, function(elt) {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({model: elt, className: \"toolTitle\"});\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            }\n            else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({model: elt});\n                label_view.render();\n                section_body.append(label_view.$el);\n            }\n            else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        'click .toolSectionTitle > a': 'toggle'\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function() {\n        (this.model.attributes.open ?\n            this.$el.children(\".toolSectionBody\").slideDown(\"fast\") :\n            this.$el.children(\".toolSectionBody\").slideUp(\"fast\")\n        );\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: 'div',\n    id: 'tool-search',\n    className: 'bar',\n\n    events: {\n        'click': 'focus_and_select',\n        'keyup :input': 'query_changed',\n        'change :input': 'query_changed',\n        'click #search-clear-btn': 'clear'\n    },\n\n    render: function() {\n        this.$el.append( templates.tool_search(this.model.toJSON()) );\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n\n        // Adjust top for issue 2907 depending on whether the messagebox is visible.\n        if ($(\"#messagebox\").is(\":visible\")) {\n            this.$el.css(\"top\",\"95px\");\n        }\n\n        this.$el.find('[title]').tooltip();\n        return this;\n    },\n\n    focus_and_select: function() {\n        this.$el.find(\":input\").focus().select();\n    },\n\n    clear: function() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val('');\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function( evData ) {\n        // check for the 'clear key' (ESC) first\n        if( ( this.model.attributes.clear_key ) &&\n            ( this.model.attributes.clear_key === evData.which ) ){\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'toolMenu',\n\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.model.get('tool_search').on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView( { model: this.model.get('tool_search') } );\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get('layout').each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({model: panel_elt});\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            }\n            else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({model: panel_elt, className: \"toolTitleNoSection\"});\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            }\n            else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({model: panel_elt});\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function(e) {\n            // Tool id is always the first class.\n            var\n                tool_id = $(this).attr('class').split(/\\s+/)[0],\n                tool = self.model.get('tools').get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function() {\n        var results = this.model.get('tool_search').get('results');\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        }\n        else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: 'toolForm',\n\n    render: function() {\n        this.$el.children().remove();\n        this.$el.append( templates.tool_form(this.model.toJSON()) );\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: 'toolMenuAndView',\n\n    initialize: function() {\n        this.tool_panel_view = new ToolPanelView({collection: this.collection});\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", function(e, tool) {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function(tool) {\n        var self = this;\n        tool.fetch().done( function() {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $('#left').width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search : _.template([\n        '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n                'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n        '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n        //TODO: replace with icon\n        '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>',\n    ].join('')),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section : _.template([\n        '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n        '</div>',\n        '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n            '<div class=\"toolSectionBg\"></div>',\n        '<div>'\n    ].join('')),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link : _.template([\n        '<span class=\"labels\">',\n            '<% _.each( labels, function( label ){ %>',\n            '<span class=\"label label-default label-<%- label %>\">',\n                '<%- label %>',\n            '</span>',\n            '<% }); %>',\n        '</span>',\n        '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n            '<%- name %>',\n        '</a>',\n        ' <%- description %>'\n    ].join('')),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form : _.template([\n        '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n        '<div class=\"toolFormBody\">',\n            '<% _.each( tool.inputs, function( input ){ %>',\n            '<div class=\"form-row\">',\n                '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n                '<div class=\"form-row-input\">',\n                    '<%= input.html %>',\n                '</div>',\n                '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n                    '<%- input.help %>',\n                '</div>',\n                '<div style=\"clear: both;\"></div>',\n            '</div>',\n            '<% }); %>',\n        '</div>',\n        '<div class=\"form-row form-actions\">',\n            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n        '</div>',\n        '<div class=\"toolHelp\">',\n            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n        '</div>',\n    // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n    // which implies a leaky variable that I can't find\n    ].join(''), { variable: 'tool' }),\n};\n\n\n// Exports\nreturn {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n\n});\n"]}