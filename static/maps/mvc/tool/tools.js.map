{"version":3,"sources":["mvc/tool/tools.js"],"names":["_","VisibilityMixin","hidden","show","this","set","hide","toggle","get","is_visible","attributes","ToolParameter","Backbone","Model","extend","defaults","name","label","type","value","html","num_samples","initialize","unescape","copy","toJSON","set_value","ToolParameterCollection","Collection","model","DataToolParameter","parseInt","d3","linear","domain","IntegerToolParameter","parseFloat","SelectToolParameter","get_samples","map","option","subModelTypes","integer","float","FloatToolParameter","data","id","description","target","inputs","urlRoot","Galaxy","root","options","p","Tool","rval","prototype","call","i","remove_inputs","types","tool","incompatible_inputs","filter","input","indexOf","remove","only_samplable_inputs","valid_inputs","each","push","apply_search_results","results","set_input_value","find","set_input_values","inputs_dict","self","keys","input_name","run","rerun","target_dataset","regions","_run","action","get_inputs_dict","input_dict","target_dataset_id","payload","tool_id","additional_params","run_deferred","Deferred","ss_deferred","_util2","default","ServerStateDeferred","ajax_settings","url","JSON","stringify","dataType","contentType","$","when","result","resolve","_data2","DatasetCollection","success_fn","ToolCollection","ToolSection","ToolView","elems","open","elt","ToolSectionLabel","all_hidden","clear_search_results","cur_label","ToolSearch","search_hint_string","min_chars_for_search","clear_btn_url","visible","query","clear_key","on","do_search","length","timer","clearTimeout","setTimeout","ga","q","clear_search","ToolPanel","tool_search","tools","layout","parse","response","parse_elt","elt_dict","panel_elt","BaseView","View","update_visible","$el","ToolLinkView","tagName","render","$link","formStyle","e","append","upload","preventDefault","router","version","ToolSectionLabelView","className","text","ToolSectionView","update_open","section_body","label_view","tool_view","templates","events","click .toolSectionTitle > a","children","slideDown","slideUp","ToolSearchView","change :input","is","css","focus_and_select","focus","clear","query_changed","evData","which","val","handle_search_results","search_view","section_title_view","click","trigger","attr","split","ToolFormView","tool_form","ToolPanelView","collection","tool_form_view","tool_panel_view","show_tool","fetch","done","width","template","tool_link","join","panel_section","variable"],"mappings":"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","file":"../../../scripts/mvc/tool/tools.js","sourcesContent":["/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\nimport * as _ from \"libs/underscore\";\nimport util from \"viz/trackster/util\";\nimport data from \"mvc/dataset/data\";\nimport ToolForm from \"mvc/tool/tool-form\";\n\n/**\n * Mixin for tracking model visibility.\n */\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function() {\n        return !this.attributes.hidden;\n    }\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function(value) {\n        this.set(\"value\", value || \"\");\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function() {\n        return d3.scale\n            .linear()\n            .domain([this.get(\"min\"), this.get(\"max\")])\n            .ticks(this.get(\"num_samples\"));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function() {\n        return _.map(this.get(\"options\"), function(option) {\n            return option[0];\n        });\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    integer: IntegerToolParameter,\n    float: FloatToolParameter,\n    data: DataToolParameter,\n    select: SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function(options) {\n        // Set parameters.\n        this.set(\n            \"inputs\",\n            new ToolParameterCollection(\n                _.map(options.inputs, function(p) {\n                    var p_class =\n                        ToolParameter.subModelTypes[p.type] || ToolParameter;\n                    return new p_class(p);\n                })\n            )\n        );\n    },\n\n    /**\n     *\n     */\n    toJSON: function() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get(\"inputs\").map(function(i) {\n            return i.toJSON();\n        });\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function(types) {\n        var tool = this;\n\n        var incompatible_inputs = tool.get(\"inputs\").filter(function(input) {\n            return types.indexOf(input.get(\"type\")) !== -1;\n        });\n\n        tool.get(\"inputs\").remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get(\"inputs\").each(function(input) {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set(\"inputs\", valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function(results) {\n        _.indexOf(results, this.attributes.id) !== -1\n            ? this.show()\n            : this.hide();\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function(name, value) {\n        this.get(\"inputs\")\n            .find(function(input) {\n                return input.get(\"name\") === name;\n            })\n            .set(\"value\", value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), function(input_name) {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function(target_dataset, regions) {\n        return this._run({\n            action: \"rerun\",\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function() {\n        var input_dict = {};\n        this.get(\"inputs\").each(function(input) {\n            input_dict[input.get(\"name\")] = input.get(\"value\");\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function(additional_params) {\n        // Create payload.\n        var payload = _.extend(\n            {\n                tool_id: this.id,\n                inputs: this.get_inputs_dict()\n            },\n            additional_params\n        );\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred();\n\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: this.urlRoot,\n                data: JSON.stringify(payload),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(function(result) {\n            run_deferred.resolve(new data.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function() {\n        _.each(this.attributes.elems, function(elt) {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function(results) {\n        var all_hidden = true;\n        var cur_label;\n        _.each(this.attributes.elems, function(elt) {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            } else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        } else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(function() {\n            // log the search to analytics if present\n            if (typeof ga !== \"undefined\") {\n                ga(\"send\", \"pageview\", Galaxy.root + \"?q=\" + q);\n            }\n            $.get(\n                self.urlRoot,\n                { q: q },\n                function(data) {\n                    self.set(\"results\", data);\n                    $(\"#search-spinner\").hide();\n                    $(\"#search-clear-btn\").show();\n                },\n                \"json\"\n            );\n        }, 400);\n    },\n\n    clear_search: function() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n    initialize: function(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\n            \"change:results\",\n            this.apply_search_results,\n            this\n        );\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection(\n            this.parse(options.layout)\n        );\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this;\n\n        var // Helper to recursively parse tool panel.\n        parse_elt = function(elt_dict) {\n            var type = elt_dict.model_class;\n            // There are many types of tools; for now, anything that ends in 'Tool'\n            // is treated as a generic tool.\n            if (type.indexOf(\"Tool\") === type.length - 4) {\n                return self.attributes.tools.get(elt_dict.id);\n            } else if (type === \"ToolSection\") {\n                // Parse elements.\n                var elems = _.map(elt_dict.elems, parse_elt);\n                elt_dict.elems = elems;\n                return new ToolSection(elt_dict);\n            } else if (type === \"ToolSectionLabel\") {\n                return new ToolSectionLabel(elt_dict);\n            }\n        };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function() {\n        this.get(\"layout\").each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            } else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function() {\n        var results = this.get(\"tool_search\").get(\"results\");\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get(\"layout\").each(function(panel_elt) {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            } else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            } else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function() {\n        this.model.attributes.hidden ? this.$el.hide() : this.$el.show();\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: \"div\",\n\n    render: function() {\n        // create element\n        var $link = $(\"<div/>\");\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        var formStyle = this.model.get(\"form_style\", null);\n        // open upload dialog for upload tool\n        if (this.model.id === \"upload1\") {\n            $link.find(\"a\").on(\"click\", function(e) {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        } else if (formStyle === \"regular\") {\n            // regular tools\n            var self = this;\n            $link.find(\"a\").on(\"click\", function(e) {\n                e.preventDefault();\n                Galaxy.router.push(\"/\", {\n                    tool_id: self.model.id,\n                    version: self.model.get(\"version\")\n                });\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolPanelLabel\",\n\n    render: function() {\n        this.$el.append($(\"<span/>\").text(this.model.attributes.text));\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolSectionWrapper\",\n\n    initialize: function() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function() {\n        // Build using template.\n        this.$el.append(templates.panel_section(this.model.toJSON()));\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, function(elt) {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: elt,\n                    className: \"toolTitle\"\n                });\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            } else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: elt\n                });\n                label_view.render();\n                section_body.append(label_view.$el);\n            } else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        \"click .toolSectionTitle > a\": \"toggle\"\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function() {\n        this.model.attributes.open\n            ? this.$el.children(\".toolSectionBody\").slideDown(\"fast\")\n            : this.$el.children(\".toolSectionBody\").slideUp(\"fast\");\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: \"div\",\n    id: \"tool-search\",\n    className: \"bar\",\n\n    events: {\n        click: \"focus_and_select\",\n        \"keyup :input\": \"query_changed\",\n        \"change :input\": \"query_changed\",\n        \"click #search-clear-btn\": \"clear\"\n    },\n\n    render: function() {\n        this.$el.append(templates.tool_search(this.model.toJSON()));\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n\n        // Adjust top for issue 2907 depending on whether the messagebox is visible.\n        if ($(\"#messagebox\").is(\":visible\")) {\n            this.$el.css(\"top\", \"95px\");\n        }\n\n        this.$el.find(\"[title]\").tooltip();\n        return this;\n    },\n\n    focus_and_select: function() {\n        this.$el\n            .find(\":input\")\n            .focus()\n            .select();\n    },\n\n    clear: function() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val(\"\");\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function(evData) {\n        // check for the 'clear key' (ESC) first\n        if (\n            this.model.attributes.clear_key &&\n            this.model.attributes.clear_key === evData.which\n        ) {\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"toolMenu\",\n\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.model\n            .get(\"tool_search\")\n            .on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView({\n            model: this.model.get(\"tool_search\")\n        });\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get(\"layout\").each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({\n                    model: panel_elt\n                });\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            } else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: panel_elt,\n                    className: \"toolTitleNoSection\"\n                });\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            } else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: panel_elt\n                });\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function(e) {\n            // Tool id is always the first class.\n            var tool_id = $(this)\n                .attr(\"class\")\n                .split(/\\s+/)[0];\n\n            var tool = self.model.get(\"tools\").get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function() {\n        var results = this.model.get(\"tool_search\").get(\"results\");\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        } else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: \"toolForm\",\n\n    render: function() {\n        this.$el.children().remove();\n        this.$el.append(templates.tool_form(this.model.toJSON()));\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: \"toolMenuAndView\",\n\n    initialize: function() {\n        this.tool_panel_view = new ToolPanelView({\n            collection: this.collection\n        });\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", function(e, tool) {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function(tool) {\n        var self = this;\n        tool.fetch().done(function() {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $(\"#left\").width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search: _.template(\n        [\n            '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n            'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n            '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n            //TODO: replace with icon\n            '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>'\n        ].join(\"\")\n    ),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section: _.template(\n        [\n            '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n            \"</div>\",\n            '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n            '<div class=\"toolSectionBg\"></div>',\n            \"<div>\"\n        ].join(\"\")\n    ),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link: _.template(\n        [\n            '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n            '<span class=\"labels\">',\n            \"<% _.each( labels, function( label ){ %>\",\n            '<span class=\"label label-default label-<%- label %>\">',\n            \"<%- label %>\",\n            \"</span>\",\n            \"<% }); %>\",\n            \"</span>\",\n            '<span class=\"tool-old-link\">',\n            \"<%- name %>\",\n            \"</span>\",\n            \" <%- description %>\",\n            \"</a>\"\n        ].join(\"\")\n    ),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form: _.template(\n        [\n            '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n            '<div class=\"toolFormBody\">',\n            \"<% _.each( tool.inputs, function( input ){ %>\",\n            '<div class=\"form-row\">',\n            '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n            '<div class=\"form-row-input\">',\n            \"<%= input.html %>\",\n            \"</div>\",\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n            \"<%- input.help %>\",\n            \"</div>\",\n            '<div style=\"clear: both;\"></div>',\n            \"</div>\",\n            \"<% }); %>\",\n            \"</div>\",\n            '<div class=\"form-row form-actions\">',\n            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n            \"</div>\",\n            '<div class=\"toolHelp\">',\n            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n            \"</div>\"\n            // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n            // which implies a leaky variable that I can't find\n        ].join(\"\"),\n        { variable: \"tool\" }\n    )\n};\n\n// Exports\nexport default {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n"]}