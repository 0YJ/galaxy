{"version":3,"sources":["mvc/tool/tools.js"],"names":["VisibilityMixin","hidden","show","this","set","hide","toggle","get","is_visible","Backbone","Model","extend","defaults","name","label","value","html","num_samples","initialize","options","attributes","unescape","copy","ToolParameter","toJSON","Collection","model","IntegerToolParameter","set_value","parseInt","get_samples","d3","scale","linear","DataToolParameter","ticks","FloatToolParameter","parseFloat","SelectToolParameter","domain","option","subModelTypes","integer","float","data","select","Tool","outputs","urlRoot","Galaxy","root","id","description","inputs","p","type","rval","prototype","call","map","i","remove_inputs","types","tool","incompatible_inputs","filter","input","indexOf","remove","only_samplable_inputs","valid_inputs","each","push","apply_search_results","results","set_input_value","find","set_input_values","inputs_dict","self","_underscore2","default","keys","input_name","run","_run","rerun","target_dataset","regions","action","get_inputs_dict","input_dict","additional_params","payload","tool_id","run_deferred","ss_deferred","_util2","ServerStateDeferred","ajax_settings","url","JSON","stringify","dataType","contentType","interval","success_fn","response","$","when","then","result","resolve","_data2","DatasetCollection","ToolView","View","ToolCollection","ToolSectionLabel","ToolSection","elems","open","clear_search_results","elt","cur_label","all_hidden","ToolSearch","search_hint_string","min_chars_for_search","clear_btn_url","visible","query","clear_key","on","do_search","length","q","timer","clearTimeout","setTimeout","ga","clear_search","ToolPanel","layout","tool_search","parse","tools","parse_elt","model_class","elt_dict","panel_elt","BaseView","update_visible","ToolLinkView","render","$el","$link","append","templates","tool_link","router","e","version","upload","formStyle","preventDefault","className","ToolSectionLabelView","tagName","text","ToolSectionView","section_body","update_open","tool_view","label_view","events","click .toolSectionTitle > a","click","children","slideDown","slideUp","keyup :input","change :input","css","click #search-clear-btn","focus_and_select","clear","is","tooltip","focus","val","evData","which","search_view","section_title_view","trigger","handle_search_results","attr","ToolFormView","IntegratedToolMenuAndView","tool_form","ToolPanelView","collection","tool_form_view","tool_panel_view","width","show_tool","fetch","done","join","panel_section","template","variable"],"mappings":"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","file":"../../../scripts/mvc/tool/tools.js","sourcesContent":["/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\nimport _ from \"libs/underscore\";\nimport util from \"viz/trackster/util\";\nimport data from \"mvc/dataset/data\";\nimport ToolForm from \"mvc/tool/tool-form\";\n\n/**\n * Mixin for tracking model visibility.\n */\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function() {\n        return !this.attributes.hidden;\n    }\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function(value) {\n        this.set(\"value\", value || \"\");\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function() {\n        return d3.scale\n            .linear()\n            .domain([this.get(\"min\"), this.get(\"max\")])\n            .ticks(this.get(\"num_samples\"));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function() {\n        return _.map(this.get(\"options\"), function(option) {\n            return option[0];\n        });\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    integer: IntegerToolParameter,\n    float: FloatToolParameter,\n    data: DataToolParameter,\n    select: SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function(options) {\n        // Set parameters.\n        this.set(\n            \"inputs\",\n            new ToolParameterCollection(\n                _.map(options.inputs, function(p) {\n                    var p_class =\n                        ToolParameter.subModelTypes[p.type] || ToolParameter;\n                    return new p_class(p);\n                })\n            )\n        );\n    },\n\n    /**\n     *\n     */\n    toJSON: function() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get(\"inputs\").map(function(i) {\n            return i.toJSON();\n        });\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function(types) {\n        var tool = this,\n            incompatible_inputs = tool.get(\"inputs\").filter(function(input) {\n                return types.indexOf(input.get(\"type\")) !== -1;\n            });\n        tool.get(\"inputs\").remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get(\"inputs\").each(function(input) {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set(\"inputs\", valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function(results) {\n        _.indexOf(results, this.attributes.id) !== -1\n            ? this.show()\n            : this.hide();\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function(name, value) {\n        this.get(\"inputs\")\n            .find(function(input) {\n                return input.get(\"name\") === name;\n            })\n            .set(\"value\", value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), function(input_name) {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function(target_dataset, regions) {\n        return this._run({\n            action: \"rerun\",\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function() {\n        var input_dict = {};\n        this.get(\"inputs\").each(function(input) {\n            input_dict[input.get(\"name\")] = input.get(\"value\");\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function(additional_params) {\n        // Create payload.\n        var payload = _.extend(\n            {\n                tool_id: this.id,\n                inputs: this.get_inputs_dict()\n            },\n            additional_params\n        );\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred(),\n            ss_deferred = new util.ServerStateDeferred({\n                ajax_settings: {\n                    url: this.urlRoot,\n                    data: JSON.stringify(payload),\n                    dataType: \"json\",\n                    contentType: \"application/json\",\n                    type: \"POST\"\n                },\n                interval: 2000,\n                success_fn: function(response) {\n                    return response !== \"pending\";\n                }\n            });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(function(result) {\n            run_deferred.resolve(new data.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function() {\n        _.each(this.attributes.elems, function(elt) {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function(results) {\n        var all_hidden = true,\n            cur_label;\n        _.each(this.attributes.elems, function(elt) {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            } else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        } else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(function() {\n            // log the search to analytics if present\n            if (typeof ga !== \"undefined\") {\n                ga(\"send\", \"pageview\", Galaxy.root + \"?q=\" + q);\n            }\n            $.get(\n                self.urlRoot,\n                { q: q },\n                function(data) {\n                    self.set(\"results\", data);\n                    $(\"#search-spinner\").hide();\n                    $(\"#search-clear-btn\").show();\n                },\n                \"json\"\n            );\n        }, 400);\n    },\n\n    clear_search: function() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n    initialize: function(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\n            \"change:results\",\n            this.apply_search_results,\n            this\n        );\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection(\n            this.parse(options.layout)\n        );\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this,\n            // Helper to recursively parse tool panel.\n            parse_elt = function(elt_dict) {\n                var type = elt_dict.model_class;\n                // There are many types of tools; for now, anything that ends in 'Tool'\n                // is treated as a generic tool.\n                if (type.indexOf(\"Tool\") === type.length - 4) {\n                    return self.attributes.tools.get(elt_dict.id);\n                } else if (type === \"ToolSection\") {\n                    // Parse elements.\n                    var elems = _.map(elt_dict.elems, parse_elt);\n                    elt_dict.elems = elems;\n                    return new ToolSection(elt_dict);\n                } else if (type === \"ToolSectionLabel\") {\n                    return new ToolSectionLabel(elt_dict);\n                }\n            };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function() {\n        this.get(\"layout\").each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            } else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function() {\n        var results = this.get(\"tool_search\").get(\"results\");\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get(\"layout\").each(function(panel_elt) {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            } else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            } else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function() {\n        this.model.attributes.hidden ? this.$el.hide() : this.$el.show();\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: \"div\",\n\n    render: function() {\n        // create element\n        var $link = $(\"<div/>\");\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        var formStyle = this.model.get(\"form_style\", null);\n        // open upload dialog for upload tool\n        if (this.model.id === \"upload1\") {\n            $link.find(\"a\").on(\"click\", function(e) {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        } else if (formStyle === \"regular\") {\n            // regular tools\n            var self = this;\n            $link.find(\"a\").on(\"click\", function(e) {\n                e.preventDefault();\n                Galaxy.router.push(\"/\", {\n                    tool_id: self.model.id,\n                    version: self.model.get(\"version\")\n                });\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolPanelLabel\",\n\n    render: function() {\n        this.$el.append($(\"<span/>\").text(this.model.attributes.text));\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolSectionWrapper\",\n\n    initialize: function() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function() {\n        // Build using template.\n        this.$el.append(templates.panel_section(this.model.toJSON()));\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, function(elt) {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: elt,\n                    className: \"toolTitle\"\n                });\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            } else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: elt\n                });\n                label_view.render();\n                section_body.append(label_view.$el);\n            } else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        \"click .toolSectionTitle > a\": \"toggle\"\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function() {\n        this.model.attributes.open\n            ? this.$el.children(\".toolSectionBody\").slideDown(\"fast\")\n            : this.$el.children(\".toolSectionBody\").slideUp(\"fast\");\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: \"div\",\n    id: \"tool-search\",\n    className: \"bar\",\n\n    events: {\n        click: \"focus_and_select\",\n        \"keyup :input\": \"query_changed\",\n        \"change :input\": \"query_changed\",\n        \"click #search-clear-btn\": \"clear\"\n    },\n\n    render: function() {\n        this.$el.append(templates.tool_search(this.model.toJSON()));\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n\n        // Adjust top for issue 2907 depending on whether the messagebox is visible.\n        if ($(\"#messagebox\").is(\":visible\")) {\n            this.$el.css(\"top\", \"95px\");\n        }\n\n        this.$el.find(\"[title]\").tooltip();\n        return this;\n    },\n\n    focus_and_select: function() {\n        this.$el\n            .find(\":input\")\n            .focus()\n            .select();\n    },\n\n    clear: function() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val(\"\");\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function(evData) {\n        // check for the 'clear key' (ESC) first\n        if (\n            this.model.attributes.clear_key &&\n            this.model.attributes.clear_key === evData.which\n        ) {\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"toolMenu\",\n\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.model\n            .get(\"tool_search\")\n            .on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView({\n            model: this.model.get(\"tool_search\")\n        });\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get(\"layout\").each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({\n                    model: panel_elt\n                });\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            } else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: panel_elt,\n                    className: \"toolTitleNoSection\"\n                });\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            } else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: panel_elt\n                });\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function(e) {\n            // Tool id is always the first class.\n            var tool_id = $(this)\n                    .attr(\"class\")\n                    .split(/\\s+/)[0],\n                tool = self.model.get(\"tools\").get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function() {\n        var results = this.model.get(\"tool_search\").get(\"results\");\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        } else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: \"toolForm\",\n\n    render: function() {\n        this.$el.children().remove();\n        this.$el.append(templates.tool_form(this.model.toJSON()));\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: \"toolMenuAndView\",\n\n    initialize: function() {\n        this.tool_panel_view = new ToolPanelView({\n            collection: this.collection\n        });\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", function(e, tool) {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function(tool) {\n        var self = this;\n        tool.fetch().done(function() {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $(\"#left\").width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search: _.template(\n        [\n            '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n            'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n            '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n            //TODO: replace with icon\n            '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>'\n        ].join(\"\")\n    ),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section: _.template(\n        [\n            '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n            \"</div>\",\n            '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n            '<div class=\"toolSectionBg\"></div>',\n            \"<div>\"\n        ].join(\"\")\n    ),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link: _.template(\n        [\n            '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n            '<span class=\"labels\">',\n            \"<% _.each( labels, function( label ){ %>\",\n            '<span class=\"label label-default label-<%- label %>\">',\n            \"<%- label %>\",\n            \"</span>\",\n            \"<% }); %>\",\n            \"</span>\",\n            '<span class=\"tool-old-link\">',\n            \"<%- name %>\",\n            \"</span>\",\n            \" <%- description %>\",\n            \"</a>\"\n        ].join(\"\")\n    ),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form: _.template(\n        [\n            '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n            '<div class=\"toolFormBody\">',\n            \"<% _.each( tool.inputs, function( input ){ %>\",\n            '<div class=\"form-row\">',\n            '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n            '<div class=\"form-row-input\">',\n            \"<%= input.html %>\",\n            \"</div>\",\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n            \"<%- input.help %>\",\n            \"</div>\",\n            '<div style=\"clear: both;\"></div>',\n            \"</div>\",\n            \"<% }); %>\",\n            \"</div>\",\n            '<div class=\"form-row form-actions\">',\n            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n            \"</div>\",\n            '<div class=\"toolHelp\">',\n            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n            \"</div>\"\n            // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n            // which implies a leaky variable that I can't find\n        ].join(\"\"),\n        { variable: \"tool\" }\n    )\n};\n\n// Exports\nexport default {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n"]}