{"version":3,"sources":["mvc/tool/tools.js"],"names":["_","VisibilityMixin","hidden","show","this","set","hide","toggle","get","is_visible","attributes","ToolParameter","Backbone","Model","extend","defaults","name","label","type","value","html","num_samples","initialize","unescape","copy","toJSON","set_value","ToolParameterCollection","Collection","model","DataToolParameter","parseInt","d3","linear","domain","IntegerToolParameter","parseFloat","SelectToolParameter","get_samples","map","option","subModelTypes","integer","float","FloatToolParameter","data","select","Tool","id","description","target","inputs","outputs","urlRoot","Galaxy","root","options","p","rval","prototype","call","i","remove_inputs","types","tool","filter","input","p_class","incompatible_inputs","only_samplable_inputs","each","push","valid_inputs","apply_search_results","results","indexOf","set_input_value","find","self","keys","inputs_dict","input_name","_run","regions","action","target_dataset_id","input_dict","additional_params","payload","tool_id","get_inputs_dict","run_deferred","$","Deferred","ss_deferred","_util2","default","ServerStateDeferred","ajax_settings","JSON","stringify","dataType","contentType","interval","success_fn","response","go","_data2","DatasetCollection","result","then","ToolSection","elems","open","clear_search_results","elt","ToolCollection","cur_label","all_hidden","ToolSectionLabel","min_chars_for_search","clear_btn_url","visible","query","clear_key","on","do_search","search_hint_string","q","timer","clearTimeout","setTimeout","ga","clear_search","ToolSearch","tool_search","tools","layout","parse","parse_elt","length","elt_dict","panel_elt","BaseView","View","update_visible","$el","tagName","render","$link","append","templates","tool_link","formStyle","e","ToolLinkView","upload","preventDefault","version","ToolSectionLabelView","className","text","update_open","panel_section","tool_view","section_body","label_view","events","children","slideDown","slideUp","ToolSearchView","click","keyup :input","change :input","click #search-clear-btn","is","css","focus_and_select","focus","clear","val","evData","which","query_changed","ToolPanelView","handle_search_results","search_view","ToolSectionView","section_title_view","attr","split","trigger","ToolFormView","tool_form","IntegratedToolMenuAndView","tool_panel_view","collection","tool_form_view","show_tool","fetch","done","width","join","template","ToolPanel","variable"],"mappings":"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","file":"../../../scripts/mvc/tool/tools.js","sourcesContent":["/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\nimport * as _ from \"libs/underscore\";\nimport util from \"viz/trackster/util\";\nimport data from \"mvc/dataset/data\";\nimport ToolForm from \"mvc/tool/tool-form\";\n\n/**\n * Mixin for tracking model visibility.\n */\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function() {\n        return !this.attributes.hidden;\n    }\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function(value) {\n        this.set(\"value\", value || \"\");\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function() {\n        return d3.scale\n            .linear()\n            .domain([this.get(\"min\"), this.get(\"max\")])\n            .ticks(this.get(\"num_samples\"));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function() {\n        return _.map(this.get(\"options\"), option => option[0]);\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    integer: IntegerToolParameter,\n    float: FloatToolParameter,\n    data: DataToolParameter,\n    select: SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function(options) {\n        // Set parameters.\n        this.set(\n            \"inputs\",\n            new ToolParameterCollection(\n                _.map(options.inputs, p => {\n                    var p_class =\n                        ToolParameter.subModelTypes[p.type] || ToolParameter;\n                    return new p_class(p);\n                })\n            )\n        );\n    },\n\n    /**\n     *\n     */\n    toJSON: function() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get(\"inputs\").map(i => i.toJSON());\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function(types) {\n        var tool = this;\n\n        var incompatible_inputs = tool\n            .get(\"inputs\")\n            .filter(input => types.indexOf(input.get(\"type\")) !== -1);\n\n        tool.get(\"inputs\").remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get(\"inputs\").each(input => {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set(\"inputs\", valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function(results) {\n        _.indexOf(results, this.attributes.id) !== -1\n            ? this.show()\n            : this.hide();\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function(name, value) {\n        this.get(\"inputs\")\n            .find(input => input.get(\"name\") === name)\n            .set(\"value\", value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), input_name => {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function(target_dataset, regions) {\n        return this._run({\n            action: \"rerun\",\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function() {\n        var input_dict = {};\n        this.get(\"inputs\").each(input => {\n            input_dict[input.get(\"name\")] = input.get(\"value\");\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function(additional_params) {\n        // Create payload.\n        var payload = _.extend(\n            {\n                tool_id: this.id,\n                inputs: this.get_inputs_dict()\n            },\n            additional_params\n        );\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred();\n\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: this.urlRoot,\n                data: JSON.stringify(payload),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(result => {\n            run_deferred.resolve(new data.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function() {\n        _.each(this.attributes.elems, elt => {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function(results) {\n        var all_hidden = true;\n        var cur_label;\n        _.each(this.attributes.elems, elt => {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            } else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        } else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(() => {\n            // log the search to analytics if present\n            if (typeof ga !== \"undefined\") {\n                ga(\"send\", \"pageview\", Galaxy.root + \"?q=\" + q);\n            }\n            $.get(\n                self.urlRoot,\n                { q: q },\n                data => {\n                    self.set(\"results\", data);\n                    $(\"#search-spinner\").hide();\n                    $(\"#search-clear-btn\").show();\n                },\n                \"json\"\n            );\n        }, 400);\n    },\n\n    clear_search: function() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n    initialize: function(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\n            \"change:results\",\n            this.apply_search_results,\n            this\n        );\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection(\n            this.parse(options.layout)\n        );\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this;\n\n        var // Helper to recursively parse tool panel.\n        parse_elt = elt_dict => {\n            var type = elt_dict.model_class;\n            // There are many types of tools; for now, anything that ends in 'Tool'\n            // is treated as a generic tool.\n            if (type.indexOf(\"Tool\") === type.length - 4) {\n                return self.attributes.tools.get(elt_dict.id);\n            } else if (type === \"ToolSection\") {\n                // Parse elements.\n                var elems = _.map(elt_dict.elems, parse_elt);\n                elt_dict.elems = elems;\n                return new ToolSection(elt_dict);\n            } else if (type === \"ToolSectionLabel\") {\n                return new ToolSectionLabel(elt_dict);\n            }\n        };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function() {\n        this.get(\"layout\").each(panel_elt => {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            } else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function() {\n        var results = this.get(\"tool_search\").get(\"results\");\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get(\"layout\").each(panel_elt => {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            } else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            } else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function() {\n        this.model.attributes.hidden ? this.$el.hide() : this.$el.show();\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: \"div\",\n\n    render: function() {\n        // create element\n        var $link = $(\"<div/>\");\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        var formStyle = this.model.get(\"form_style\", null);\n        // open upload dialog for upload tool\n        if (this.model.id === \"upload1\") {\n            $link.find(\"a\").on(\"click\", e => {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        } else if (formStyle === \"regular\") {\n            // regular tools\n            var self = this;\n            $link.find(\"a\").on(\"click\", e => {\n                e.preventDefault();\n                Galaxy.router.push(\"/\", {\n                    tool_id: self.model.id,\n                    version: self.model.get(\"version\")\n                });\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolPanelLabel\",\n\n    render: function() {\n        this.$el.append($(\"<span/>\").text(this.model.attributes.text));\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolSectionWrapper\",\n\n    initialize: function() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function() {\n        // Build using template.\n        this.$el.append(templates.panel_section(this.model.toJSON()));\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, elt => {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: elt,\n                    className: \"toolTitle\"\n                });\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            } else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: elt\n                });\n                label_view.render();\n                section_body.append(label_view.$el);\n            } else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        \"click .toolSectionTitle > a\": \"toggle\"\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function() {\n        this.model.attributes.open\n            ? this.$el.children(\".toolSectionBody\").slideDown(\"fast\")\n            : this.$el.children(\".toolSectionBody\").slideUp(\"fast\");\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: \"div\",\n    id: \"tool-search\",\n    className: \"bar\",\n\n    events: {\n        click: \"focus_and_select\",\n        \"keyup :input\": \"query_changed\",\n        \"change :input\": \"query_changed\",\n        \"click #search-clear-btn\": \"clear\"\n    },\n\n    render: function() {\n        this.$el.append(templates.tool_search(this.model.toJSON()));\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n\n        // Adjust top for issue 2907 depending on whether the messagebox is visible.\n        if ($(\"#messagebox\").is(\":visible\")) {\n            this.$el.css(\"top\", \"95px\");\n        }\n\n        this.$el.find(\"[title]\").tooltip();\n        return this;\n    },\n\n    focus_and_select: function() {\n        this.$el\n            .find(\":input\")\n            .focus()\n            .select();\n    },\n\n    clear: function() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val(\"\");\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function(evData) {\n        // check for the 'clear key' (ESC) first\n        if (\n            this.model.attributes.clear_key &&\n            this.model.attributes.clear_key === evData.which\n        ) {\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"toolMenu\",\n\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.model\n            .get(\"tool_search\")\n            .on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView({\n            model: this.model.get(\"tool_search\")\n        });\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get(\"layout\").each(panel_elt => {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({\n                    model: panel_elt\n                });\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            } else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: panel_elt,\n                    className: \"toolTitleNoSection\"\n                });\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            } else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: panel_elt\n                });\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function(e) {\n            // Tool id is always the first class.\n            var tool_id = $(this)\n                .attr(\"class\")\n                .split(/\\s+/)[0];\n\n            var tool = self.model.get(\"tools\").get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function() {\n        var results = this.model.get(\"tool_search\").get(\"results\");\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        } else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: \"toolForm\",\n\n    render: function() {\n        this.$el.children().remove();\n        this.$el.append(templates.tool_form(this.model.toJSON()));\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: \"toolMenuAndView\",\n\n    initialize: function() {\n        this.tool_panel_view = new ToolPanelView({\n            collection: this.collection\n        });\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", (e, tool) => {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function(tool) {\n        var self = this;\n        tool.fetch().done(() => {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $(\"#left\").width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search: _.template(\n        [\n            '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n            'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n            '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n            //TODO: replace with icon\n            '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>'\n        ].join(\"\")\n    ),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section: _.template(\n        [\n            '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n            \"</div>\",\n            '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n            '<div class=\"toolSectionBg\"></div>',\n            \"<div>\"\n        ].join(\"\")\n    ),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link: _.template(\n        [\n            '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n            '<span class=\"labels\">',\n            \"<% _.each( labels, function( label ){ %>\",\n            '<span class=\"label label-default label-<%- label %>\">',\n            \"<%- label %>\",\n            \"</span>\",\n            \"<% }); %>\",\n            \"</span>\",\n            '<span class=\"tool-old-link\">',\n            \"<%- name %>\",\n            \"</span>\",\n            \" <%- description %>\",\n            \"</a>\"\n        ].join(\"\")\n    ),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form: _.template(\n        [\n            '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n            '<div class=\"toolFormBody\">',\n            \"<% _.each( tool.inputs, function( input ){ %>\",\n            '<div class=\"form-row\">',\n            '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n            '<div class=\"form-row-input\">',\n            \"<%= input.html %>\",\n            \"</div>\",\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n            \"<%- input.help %>\",\n            \"</div>\",\n            '<div style=\"clear: both;\"></div>',\n            \"</div>\",\n            \"<% }); %>\",\n            \"</div>\",\n            '<div class=\"form-row form-actions\">',\n            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n            \"</div>\",\n            '<div class=\"toolHelp\">',\n            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n            \"</div>\"\n            // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n            // which implies a leaky variable that I can't find\n        ].join(\"\"),\n        { variable: \"tool\" }\n    )\n};\n\n// Exports\nexport default {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n"]}