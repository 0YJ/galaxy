{"version":3,"sources":["mvc/tool/tools.js"],"names":["_underscore","require","_util","_data","_toolForm","VisibilityMixin","hidden","show","this","set","hide","toggle","get","is_visible","attributes","ToolParameter","Backbone","Model","extend","defaults","name","type","value","html","initialize","options","unescape","copy","toJSON","set_value","Collection","DataToolParameter","IntegerToolParameter","parseInt","model","d3","scale","linear","domain","ticks","FloatToolParameter","parseFloat","SelectToolParameter","get_samples","_underscore2","default","map","option","subModelTypes","integer","float","data","Tool","id","description","urlRoot","Galaxy","root","ToolParameterCollection","inputs","p","rval","i","tool","incompatible_inputs","filter","input","types","indexOf","remove","only_samplable_inputs","valid_inputs","each","push","apply_search_results","find","set_input_values","inputs_dict","self","keys","input_name","set_input_value","run","_run","rerun","regions","action","target_dataset_id","target_dataset","get_inputs_dict","input_dict","additional_params","payload","tool_id","run_deferred","$","Deferred","ss_deferred","_util2","ServerStateDeferred","ajax_settings","JSON","stringify","url","contentType","response","when","go","then","result","resolve","_data2","DatasetCollection","prototype","ToolView","View","ToolCollection","ToolSectionLabel","ToolSection","elems","open","elt","results","cur_label","all_hidden","ToolSearch","search_hint_string","min_chars_for_search","clear_btn_url","query","clear_key","do_search","q","timer","clearTimeout","setTimeout","ga","clear_search","ToolPanel","tool_search","tools","layout","on","parse","parse_elt","elt_dict","model_class","length","clear_search_results","panel_elt","BaseView","update_visible","ToolLinkView","$el","tagName","formStyle","render","e","preventDefault","$link","router","version","append","ToolSectionLabelView","className","ToolSectionView","text","call","update_open","panel_section","tool_view","section_body","label_view","click .toolSectionTitle > a","children","slideDown","slideUp","ToolSearchView","events","click","keyup :input","change :input","click #search-clear-btn","templates","is","focus","css","tooltip","focus_and_select","query_changed","select","clear","val","evData","ToolPanelView","which","search_view","section_title_view","handle_search_results","attr","split","ToolFormView","tool_form_view","tool_panel_view","IntegratedToolMenuAndView","collection","show_tool","fetch","done","tool_link","template","width","join","tool_form","variable"],"mappings":"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","file":"../../../scripts/mvc/tool/tools.js","sourcesContent":["/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\nimport _ from \"libs/underscore\";\nimport util from \"viz/trackster/util\";\nimport data from \"mvc/dataset/data\";\nimport ToolForm from \"mvc/tool/tool-form\";\n\n/**\n * Mixin for tracking model visibility.\n */\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function() {\n        return !this.attributes.hidden;\n    }\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function(value) {\n        this.set(\"value\", value || \"\");\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function() {\n        return d3.scale\n            .linear()\n            .domain([this.get(\"min\"), this.get(\"max\")])\n            .ticks(this.get(\"num_samples\"));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function(value) {\n        this.set(\"value\", parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function() {\n        return _.map(this.get(\"options\"), function(option) {\n            return option[0];\n        });\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    integer: IntegerToolParameter,\n    float: FloatToolParameter,\n    data: DataToolParameter,\n    select: SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function(options) {\n        // Set parameters.\n        this.set(\n            \"inputs\",\n            new ToolParameterCollection(\n                _.map(options.inputs, function(p) {\n                    var p_class =\n                        ToolParameter.subModelTypes[p.type] || ToolParameter;\n                    return new p_class(p);\n                })\n            )\n        );\n    },\n\n    /**\n     *\n     */\n    toJSON: function() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get(\"inputs\").map(function(i) {\n            return i.toJSON();\n        });\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function(types) {\n        var tool = this,\n            incompatible_inputs = tool.get(\"inputs\").filter(function(input) {\n                return types.indexOf(input.get(\"type\")) !== -1;\n            });\n        tool.get(\"inputs\").remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get(\"inputs\").each(function(input) {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set(\"inputs\", valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function(results) {\n        _.indexOf(results, this.attributes.id) !== -1\n            ? this.show()\n            : this.hide();\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function(name, value) {\n        this.get(\"inputs\")\n            .find(function(input) {\n                return input.get(\"name\") === name;\n            })\n            .set(\"value\", value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), function(input_name) {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function(target_dataset, regions) {\n        return this._run({\n            action: \"rerun\",\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function() {\n        var input_dict = {};\n        this.get(\"inputs\").each(function(input) {\n            input_dict[input.get(\"name\")] = input.get(\"value\");\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function(additional_params) {\n        // Create payload.\n        var payload = _.extend(\n            {\n                tool_id: this.id,\n                inputs: this.get_inputs_dict()\n            },\n            additional_params\n        );\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred(),\n            ss_deferred = new util.ServerStateDeferred({\n                ajax_settings: {\n                    url: this.urlRoot,\n                    data: JSON.stringify(payload),\n                    dataType: \"json\",\n                    contentType: \"application/json\",\n                    type: \"POST\"\n                },\n                interval: 2000,\n                success_fn: function(response) {\n                    return response !== \"pending\";\n                }\n            });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(function(result) {\n            run_deferred.resolve(new data.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function() {\n        _.each(this.attributes.elems, function(elt) {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function(results) {\n        var all_hidden = true,\n            cur_label;\n        _.each(this.attributes.elems, function(elt) {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            } else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        } else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: Galaxy.root + \"api/tools\",\n\n    initialize: function() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(function() {\n            // log the search to analytics if present\n            if (typeof ga !== \"undefined\") {\n                ga(\"send\", \"pageview\", Galaxy.root + \"?q=\" + q);\n            }\n            $.get(\n                self.urlRoot,\n                { q: q },\n                function(data) {\n                    self.set(\"results\", data);\n                    $(\"#search-spinner\").hide();\n                    $(\"#search-clear-btn\").show();\n                },\n                \"json\"\n            );\n        }, 400);\n    },\n\n    clear_search: function() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n    initialize: function(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\n            \"change:results\",\n            this.apply_search_results,\n            this\n        );\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection(\n            this.parse(options.layout)\n        );\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this,\n            // Helper to recursively parse tool panel.\n            parse_elt = function(elt_dict) {\n                var type = elt_dict.model_class;\n                // There are many types of tools; for now, anything that ends in 'Tool'\n                // is treated as a generic tool.\n                if (type.indexOf(\"Tool\") === type.length - 4) {\n                    return self.attributes.tools.get(elt_dict.id);\n                } else if (type === \"ToolSection\") {\n                    // Parse elements.\n                    var elems = _.map(elt_dict.elems, parse_elt);\n                    elt_dict.elems = elems;\n                    return new ToolSection(elt_dict);\n                } else if (type === \"ToolSectionLabel\") {\n                    return new ToolSectionLabel(elt_dict);\n                }\n            };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function() {\n        this.get(\"layout\").each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            } else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function() {\n        var results = this.get(\"tool_search\").get(\"results\");\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get(\"layout\").each(function(panel_elt) {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            } else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            } else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function() {\n        this.model.attributes.hidden ? this.$el.hide() : this.$el.show();\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: \"div\",\n\n    render: function() {\n        // create element\n        var $link = $(\"<div/>\");\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        var formStyle = this.model.get(\"form_style\", null);\n        // open upload dialog for upload tool\n        if (this.model.id === \"upload1\") {\n            $link.find(\"a\").on(\"click\", function(e) {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        } else if (formStyle === \"regular\") {\n            // regular tools\n            var self = this;\n            $link.find(\"a\").on(\"click\", function(e) {\n                e.preventDefault();\n                Galaxy.router.push(\"/\", {\n                    tool_id: self.model.id,\n                    version: self.model.get(\"version\")\n                });\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolPanelLabel\",\n\n    render: function() {\n        this.$el.append($(\"<span/>\").text(this.model.attributes.text));\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: \"div\",\n    className: \"toolSectionWrapper\",\n\n    initialize: function() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function() {\n        // Build using template.\n        this.$el.append(templates.panel_section(this.model.toJSON()));\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, function(elt) {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: elt,\n                    className: \"toolTitle\"\n                });\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            } else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: elt\n                });\n                label_view.render();\n                section_body.append(label_view.$el);\n            } else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        \"click .toolSectionTitle > a\": \"toggle\"\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function() {\n        this.model.attributes.open\n            ? this.$el.children(\".toolSectionBody\").slideDown(\"fast\")\n            : this.$el.children(\".toolSectionBody\").slideUp(\"fast\");\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: \"div\",\n    id: \"tool-search\",\n    className: \"bar\",\n\n    events: {\n        click: \"focus_and_select\",\n        \"keyup :input\": \"query_changed\",\n        \"change :input\": \"query_changed\",\n        \"click #search-clear-btn\": \"clear\"\n    },\n\n    render: function() {\n        this.$el.append(templates.tool_search(this.model.toJSON()));\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n\n        // Adjust top for issue 2907 depending on whether the messagebox is visible.\n        if ($(\"#messagebox\").is(\":visible\")) {\n            this.$el.css(\"top\", \"95px\");\n        }\n\n        this.$el.find(\"[title]\").tooltip();\n        return this;\n    },\n\n    focus_and_select: function() {\n        this.$el\n            .find(\":input\")\n            .focus()\n            .select();\n    },\n\n    clear: function() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val(\"\");\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function(evData) {\n        // check for the 'clear key' (ESC) first\n        if (\n            this.model.attributes.clear_key &&\n            this.model.attributes.clear_key === evData.which\n        ) {\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: \"div\",\n    className: \"toolMenu\",\n\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.model\n            .get(\"tool_search\")\n            .on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView({\n            model: this.model.get(\"tool_search\")\n        });\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get(\"layout\").each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({\n                    model: panel_elt\n                });\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            } else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({\n                    model: panel_elt,\n                    className: \"toolTitleNoSection\"\n                });\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            } else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({\n                    model: panel_elt\n                });\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function(e) {\n            // Tool id is always the first class.\n            var tool_id = $(this)\n                    .attr(\"class\")\n                    .split(/\\s+/)[0],\n                tool = self.model.get(\"tools\").get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function() {\n        var results = this.model.get(\"tool_search\").get(\"results\");\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        } else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: \"toolForm\",\n\n    render: function() {\n        this.$el.children().remove();\n        this.$el.append(templates.tool_form(this.model.toJSON()));\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: \"toolMenuAndView\",\n\n    initialize: function() {\n        this.tool_panel_view = new ToolPanelView({\n            collection: this.collection\n        });\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", function(e, tool) {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function(tool) {\n        var self = this;\n        tool.fetch().done(function() {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $(\"#left\").width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search: _.template(\n        [\n            '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n            'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n            '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n            //TODO: replace with icon\n            '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>'\n        ].join(\"\")\n    ),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section: _.template(\n        [\n            '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n            \"</div>\",\n            '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n            '<div class=\"toolSectionBg\"></div>',\n            \"<div>\"\n        ].join(\"\")\n    ),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link: _.template(\n        [\n            '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n            '<span class=\"labels\">',\n            \"<% _.each( labels, function( label ){ %>\",\n            '<span class=\"label label-default label-<%- label %>\">',\n            \"<%- label %>\",\n            \"</span>\",\n            \"<% }); %>\",\n            \"</span>\",\n            '<span class=\"tool-old-link\">',\n            \"<%- name %>\",\n            \"</span>\",\n            \" <%- description %>\",\n            \"</a>\"\n        ].join(\"\")\n    ),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form: _.template(\n        [\n            '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n            '<div class=\"toolFormBody\">',\n            \"<% _.each( tool.inputs, function( input ){ %>\",\n            '<div class=\"form-row\">',\n            '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n            '<div class=\"form-row-input\">',\n            \"<%= input.html %>\",\n            \"</div>\",\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n            \"<%- input.help %>\",\n            \"</div>\",\n            '<div style=\"clear: both;\"></div>',\n            \"</div>\",\n            \"<% }); %>\",\n            \"</div>\",\n            '<div class=\"form-row form-actions\">',\n            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n            \"</div>\",\n            '<div class=\"toolHelp\">',\n            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n            \"</div>\"\n            // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n            // which implies a leaky variable that I can't find\n        ].join(\"\"),\n        { variable: \"tool\" }\n    )\n};\n\n// Exports\nexport default {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n"]}