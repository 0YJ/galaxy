{"version":3,"sources":["mvc/form/form-data.js"],"names":["Manager","Backbone","Model","extend","initialize","app","this","checksum","sum","self","section","$el","find","each","id","$","attr","field","field_list","JSON","stringify","value","collapsed","add","flat_id","input_id","input_value","dict","result_dict","_iterate","element_list","convert","flat_dict","head","input","node","identifier","name","block_prefix","block_label","indexOf","pos","section_label","length","block_indices","substr","sort","a","b","index","i","selectedCase","matchCase","flat","p_id","undefined","ignore","collapsible_value","payload","matchModel","match","model","visitInputs","inputs","Array","separator","matchResponse","response","search","result","parent","new_id","children","child","input_list","test_param","falsevalue","cases","type","context","key","prefix","callback","_","Galaxy","emit","cache","j","debug"],"mappings":"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","file":"../../../scripts/mvc/form/form-data.js","sourcesContent":["/* This class maps the form dom to an api compatible javascript dictionary. */\nimport Utils from \"utils/utils\";\nvar Manager = Backbone.Model.extend({\n    initialize: function(app) {\n        this.app = app;\n    },\n\n    /** Creates a checksum. */\n    checksum: function() {\n        var sum = \"\";\n        var self = this;\n        this.app.section.$el.find(\".section-row\").each(function() {\n            var id = $(this).attr(\"id\");\n            var field = self.app.field_list[id];\n            if (field) {\n                sum +=\n                    id +\n                    \":\" +\n                    JSON.stringify(field.value && field.value()) +\n                    \":\" +\n                    field.collapsed +\n                    \";\";\n            }\n        });\n        return sum;\n    },\n\n    /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n    create: function() {\n        var self = this;\n\n        // get raw dictionary from dom\n        var dict = {};\n        this._iterate(this.app.section.$el, dict);\n\n        // add to result dictionary, label elements\n        var result_dict = {};\n        this.flat_dict = {};\n        function add(flat_id, input_id, input_value) {\n            self.flat_dict[flat_id] = input_id;\n            result_dict[flat_id] = input_value;\n            self.app.element_list[input_id] &&\n                self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n        }\n        // converter between raw dictionary and job dictionary\n        function convert(identifier, head) {\n            for (var index in head) {\n                var node = head[index];\n                if (node.input) {\n                    var input = node.input;\n                    var flat_id = identifier;\n                    if (identifier != \"\") {\n                        flat_id += \"|\";\n                    }\n                    flat_id += input.name;\n                    switch (input.type) {\n                        case \"repeat\":\n                            var section_label = \"section-\";\n                            var block_indices = [];\n                            var block_prefix = null;\n                            for (var block_label in node) {\n                                var pos = block_label.indexOf(section_label);\n                                if (pos != -1) {\n                                    pos += section_label.length;\n                                    block_indices.push(\n                                        parseInt(block_label.substr(pos))\n                                    );\n                                    if (!block_prefix) {\n                                        block_prefix = block_label.substr(\n                                            0,\n                                            pos\n                                        );\n                                    }\n                                }\n                            }\n                            block_indices.sort(function(a, b) {\n                                return a - b;\n                            });\n                            var index = 0;\n                            for (var i in block_indices) {\n                                convert(\n                                    flat_id + \"_\" + index++,\n                                    node[block_prefix + block_indices[i]]\n                                );\n                            }\n                            break;\n                        case \"conditional\":\n                            var value = self.app.field_list[input.id].value();\n                            add(\n                                flat_id + \"|\" + input.test_param.name,\n                                input.id,\n                                value\n                            );\n                            var selectedCase = matchCase(input, value);\n                            if (selectedCase != -1) {\n                                convert(\n                                    flat_id,\n                                    head[input.id + \"-section-\" + selectedCase]\n                                );\n                            }\n                            break;\n                        case \"section\":\n                            convert((!input.flat && flat_id) || \"\", node);\n                            break;\n                        default:\n                            var field = self.app.field_list[input.id];\n                            if (field && field.value) {\n                                var value = field.value();\n                                if (\n                                    input.ignore === undefined ||\n                                    input.ignore != value\n                                ) {\n                                    if (\n                                        field.collapsed &&\n                                        input.collapsible_value\n                                    ) {\n                                        value = input.collapsible_value;\n                                    }\n                                    add(flat_id, input.id, value);\n                                    if (input.payload) {\n                                        for (var p_id in input.payload) {\n                                            add(\n                                                p_id,\n                                                input.id,\n                                                input.payload[p_id]\n                                            );\n                                        }\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        }\n        convert(\"\", dict);\n        return result_dict;\n    },\n\n    /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n    match: function(flat_id) {\n        return this.flat_dict && this.flat_dict[flat_id];\n    },\n\n    /** Match conditional values to selected cases\n        */\n    matchCase: function(input, value) {\n        return matchCase(input, value);\n    },\n\n    /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n    matchModel: function(model, callback) {\n        var self = this;\n        visitInputs(model.inputs, function(input, name) {\n            self.flat_dict[name] && callback(input, self.flat_dict[name]);\n        });\n    },\n\n    /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n    matchResponse: function(response) {\n        var result = {};\n        var self = this;\n        function search(id, head) {\n            if (typeof head === \"string\") {\n                var input_id = self.flat_dict[id];\n                input_id && (result[input_id] = head);\n            } else {\n                for (var i in head) {\n                    var new_id = i;\n                    if (id !== \"\") {\n                        var separator = \"|\";\n                        if (head instanceof Array) {\n                            separator = \"_\";\n                        }\n                        new_id = id + separator + new_id;\n                    }\n                    search(new_id, head[i]);\n                }\n            }\n        }\n        search(\"\", response);\n        return result;\n    },\n\n    /** Map dom tree to dictionary tree with input elements.\n        */\n    _iterate: function(parent, dict) {\n        var self = this;\n        var children = $(parent).children();\n        children.each(function() {\n            var child = this;\n            var id = $(child).attr(\"id\");\n            if ($(child).hasClass(\"section-row\")) {\n                var input = self.app.input_list[id];\n                dict[id] = (input && { input: input }) || {};\n                self._iterate(child, dict[id]);\n            } else {\n                self._iterate(child, dict);\n            }\n        });\n    }\n});\n\n/** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\nvar matchCase = function(input, value) {\n    if (input.test_param.type == \"boolean\") {\n        if (value == \"true\") {\n            value = input.test_param.truevalue || \"true\";\n        } else {\n            value = input.test_param.falsevalue || \"false\";\n        }\n    }\n    for (var i in input.cases) {\n        if (input.cases[i].value == value) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\nvar visitInputs = function(inputs, callback, prefix, context) {\n    context = $.extend(true, {}, context);\n    _.each(inputs, function(input) {\n        if (input && input.type && input.name) {\n            context[input.name] = input;\n        }\n    });\n    for (var key in inputs) {\n        var node = inputs[key];\n        node.name = node.name || key;\n        var name = prefix ? prefix + \"|\" + node.name : node.name;\n        switch (node.type) {\n            case \"repeat\":\n                _.each(node.cache, function(cache, j) {\n                    visitInputs(cache, callback, name + \"_\" + j, context);\n                });\n                break;\n            case \"conditional\":\n                if (node.test_param) {\n                    callback(\n                        node.test_param,\n                        name + \"|\" + node.test_param.name,\n                        context\n                    );\n                    var selectedCase = matchCase(node, node.test_param.value);\n                    if (selectedCase != -1) {\n                        visitInputs(\n                            node.cases[selectedCase].inputs,\n                            callback,\n                            name,\n                            context\n                        );\n                    } else {\n                        Galaxy.emit.debug(\n                            \"form-data::visitInputs() - Invalid case for \" +\n                                name +\n                                \".\"\n                        );\n                    }\n                } else {\n                    Galaxy.emit.debug(\n                        \"form-data::visitInputs() - Conditional test parameter missing for \" +\n                            name +\n                            \".\"\n                    );\n                }\n                break;\n            case \"section\":\n                visitInputs(node.inputs, callback, name, context);\n                break;\n            default:\n                callback(node, name, context);\n        }\n    }\n};\n\nexport default {\n    Manager: Manager,\n    visitInputs: visitInputs\n};\n"]}