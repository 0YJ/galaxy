{"version":3,"sources":["mvc/form/form-data.js"],"names":["Manager","Backbone","Model","extend","initialize","app","this","checksum","sum","self","section","$el","find","each","id","$","attr","field","field_list","JSON","value","collapsed","create","add","flat_id","input_id","input_value","flat_dict","result_dict","element_list","convert","identifier","head","index","input","node","name","block_label","indexOf","pos","length","push","type","substr","section_label","block_indices","block_prefix","sort","a","b","i","test_param","selectedCase","matchCase","ignore","undefined","payload","collapsible_value","p_id","_iterate","dict","match","visitInputs","inputs","matchModel","model","callback","result","separator","search","new_id","response","Array","children","parent","child","hasClass","input_list","truevalue","falsevalue","cases","context","prefix","_","cache","key","Galaxy","j","emit","debug"],"mappings":"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","file":"../../../scripts/mvc/form/form-data.js","sourcesContent":["/* This class maps the form dom to an api compatible javascript dictionary. */\nimport Utils from \"utils/utils\";\nvar Manager = Backbone.Model.extend({\n    initialize: function(app) {\n        this.app = app;\n    },\n\n    /** Creates a checksum. */\n    checksum: function() {\n        var sum = \"\";\n        var self = this;\n        this.app.section.$el.find(\".section-row\").each(function() {\n            var id = $(this).attr(\"id\");\n            var field = self.app.field_list[id];\n            if (field) {\n                sum += `${id}:${JSON.stringify(\n                    field.value && field.value()\n                )}:${field.collapsed};`;\n            }\n        });\n        return sum;\n    },\n\n    /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n    create: function() {\n        var self = this;\n\n        // get raw dictionary from dom\n        var dict = {};\n        this._iterate(this.app.section.$el, dict);\n\n        // add to result dictionary, label elements\n        var result_dict = {};\n        this.flat_dict = {};\n        function add(flat_id, input_id, input_value) {\n            self.flat_dict[flat_id] = input_id;\n            result_dict[flat_id] = input_value;\n            self.app.element_list[input_id] &&\n                self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n        }\n        // converter between raw dictionary and job dictionary\n        function convert(identifier, head) {\n            for (var index in head) {\n                var node = head[index];\n                if (node.input) {\n                    var input = node.input;\n                    var flat_id = identifier;\n                    if (identifier != \"\") {\n                        flat_id += \"|\";\n                    }\n                    flat_id += input.name;\n                    switch (input.type) {\n                        case \"repeat\":\n                            var section_label = \"section-\";\n                            var block_indices = [];\n                            var block_prefix = null;\n                            for (var block_label in node) {\n                                var pos = block_label.indexOf(section_label);\n                                if (pos != -1) {\n                                    pos += section_label.length;\n                                    block_indices.push(\n                                        parseInt(block_label.substr(pos))\n                                    );\n                                    if (!block_prefix) {\n                                        block_prefix = block_label.substr(\n                                            0,\n                                            pos\n                                        );\n                                    }\n                                }\n                            }\n                            block_indices.sort((a, b) => a - b);\n                            var index = 0;\n                            for (var i in block_indices) {\n                                convert(\n                                    `${flat_id}_${index++}`,\n                                    node[block_prefix + block_indices[i]]\n                                );\n                            }\n                            break;\n                        case \"conditional\":\n                            var value = self.app.field_list[input.id].value();\n                            add(\n                                `${flat_id}|${input.test_param.name}`,\n                                input.id,\n                                value\n                            );\n                            var selectedCase = matchCase(input, value);\n                            if (selectedCase != -1) {\n                                convert(\n                                    flat_id,\n                                    head[`${input.id}-section-${selectedCase}`]\n                                );\n                            }\n                            break;\n                        case \"section\":\n                            convert((!input.flat && flat_id) || \"\", node);\n                            break;\n                        default:\n                            var field = self.app.field_list[input.id];\n                            if (field && field.value) {\n                                var value = field.value();\n                                if (\n                                    input.ignore === undefined ||\n                                    input.ignore != value\n                                ) {\n                                    if (\n                                        field.collapsed &&\n                                        input.collapsible_value\n                                    ) {\n                                        value = input.collapsible_value;\n                                    }\n                                    add(flat_id, input.id, value);\n                                    if (input.payload) {\n                                        for (var p_id in input.payload) {\n                                            add(\n                                                p_id,\n                                                input.id,\n                                                input.payload[p_id]\n                                            );\n                                        }\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        }\n        convert(\"\", dict);\n        return result_dict;\n    },\n\n    /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n    match: function(flat_id) {\n        return this.flat_dict && this.flat_dict[flat_id];\n    },\n\n    /** Match conditional values to selected cases\n        */\n    matchCase: function(input, value) {\n        return matchCase(input, value);\n    },\n\n    /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n    matchModel: function(model, callback) {\n        var self = this;\n        visitInputs(model.inputs, (input, name) => {\n            self.flat_dict[name] && callback(input, self.flat_dict[name]);\n        });\n    },\n\n    /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n    matchResponse: function(response) {\n        var result = {};\n        var self = this;\n        function search(id, head) {\n            if (typeof head === \"string\") {\n                var input_id = self.flat_dict[id];\n                input_id && (result[input_id] = head);\n            } else {\n                for (var i in head) {\n                    var new_id = i;\n                    if (id !== \"\") {\n                        var separator = \"|\";\n                        if (head instanceof Array) {\n                            separator = \"_\";\n                        }\n                        new_id = id + separator + new_id;\n                    }\n                    search(new_id, head[i]);\n                }\n            }\n        }\n        search(\"\", response);\n        return result;\n    },\n\n    /** Map dom tree to dictionary tree with input elements.\n        */\n    _iterate: function(parent, dict) {\n        var self = this;\n        var children = $(parent).children();\n        children.each(function() {\n            var child = this;\n            var id = $(child).attr(\"id\");\n            if ($(child).hasClass(\"section-row\")) {\n                var input = self.app.input_list[id];\n                dict[id] = (input && { input: input }) || {};\n                self._iterate(child, dict[id]);\n            } else {\n                self._iterate(child, dict);\n            }\n        });\n    }\n});\n\n/** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\nvar matchCase = (input, value) => {\n    if (input.test_param.type == \"boolean\") {\n        if (value == \"true\") {\n            value = input.test_param.truevalue || \"true\";\n        } else {\n            value = input.test_param.falsevalue || \"false\";\n        }\n    }\n    for (var i in input.cases) {\n        if (input.cases[i].value == value) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\nvar visitInputs = (inputs, callback, prefix, context) => {\n    context = $.extend(true, {}, context);\n    _.each(inputs, input => {\n        if (input && input.type && input.name) {\n            context[input.name] = input;\n        }\n    });\n    for (var key in inputs) {\n        var node = inputs[key];\n        node.name = node.name || key;\n        var name = prefix ? `${prefix}|${node.name}` : node.name;\n        switch (node.type) {\n            case \"repeat\":\n                _.each(node.cache, (cache, j) => {\n                    visitInputs(cache, callback, `${name}_${j}`, context);\n                });\n                break;\n            case \"conditional\":\n                if (node.test_param) {\n                    callback(\n                        node.test_param,\n                        `${name}|${node.test_param.name}`,\n                        context\n                    );\n                    var selectedCase = matchCase(node, node.test_param.value);\n                    if (selectedCase != -1) {\n                        visitInputs(\n                            node.cases[selectedCase].inputs,\n                            callback,\n                            name,\n                            context\n                        );\n                    } else {\n                        Galaxy.emit.debug(\n                            `form-data::visitInputs() - Invalid case for ${name}.`\n                        );\n                    }\n                } else {\n                    Galaxy.emit.debug(\n                        `form-data::visitInputs() - Conditional test parameter missing for ${name}.`\n                    );\n                }\n                break;\n            case \"section\":\n                visitInputs(node.inputs, callback, name, context);\n                break;\n            default:\n                callback(node, name, context);\n        }\n    }\n};\n\nexport default {\n    Manager: Manager,\n    visitInputs: visitInputs\n};\n"]}