{"version":3,"sources":["mvc/form/form-data.js"],"names":["Manager","Backbone","Model","extend","initialize","app","this","checksum","sum","self","section","$el","find","each","id","$","attr","field","field_list","JSON","stringify","value","collapsed","add","flat_id","input_id","input_value","dict","result_dict","_iterate","element_list","convert","flat_dict","head","input","node","identifier","name","block_prefix","block_label","indexOf","pos","section_label","length","block_indices","substr","sort","a","b","i","index","selectedCase","matchCase","payload","undefined","ignore","collapsible_value","p_id","match","search","matchModel","model","callback","visitInputs","inputs","separator","response","result","new_id","children","parent","child","test_param","input_list","truevalue","type","context","cases","prefix","_","key","Galaxy","cache","j","emit","debug"],"mappings":"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","file":"../../../scripts/mvc/form/form-data.js","sourcesContent":["/* This class maps the form dom to an api compatible javascript dictionary. */\nimport Utils from \"utils/utils\";\nvar Manager = Backbone.Model.extend({\n    initialize: function(app) {\n        this.app = app;\n    },\n\n    /** Creates a checksum. */\n    checksum: function() {\n        var sum = \"\";\n        var self = this;\n        this.app.section.$el.find(\".section-row\").each(function() {\n            var id = $(this).attr(\"id\");\n            var field = self.app.field_list[id];\n            if (field) {\n                sum +=\n                    id +\n                    \":\" +\n                    JSON.stringify(field.value && field.value()) +\n                    \":\" +\n                    field.collapsed +\n                    \";\";\n            }\n        });\n        return sum;\n    },\n\n    /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n    create: function() {\n        var self = this;\n\n        // get raw dictionary from dom\n        var dict = {};\n        this._iterate(this.app.section.$el, dict);\n\n        // add to result dictionary, label elements\n        var result_dict = {};\n        this.flat_dict = {};\n        function add(flat_id, input_id, input_value) {\n            self.flat_dict[flat_id] = input_id;\n            result_dict[flat_id] = input_value;\n            self.app.element_list[input_id] &&\n                self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n        }\n        // converter between raw dictionary and job dictionary\n        function convert(identifier, head) {\n            for (var index in head) {\n                var node = head[index];\n                if (node.input) {\n                    var input = node.input;\n                    var flat_id = identifier;\n                    if (identifier != \"\") {\n                        flat_id += \"|\";\n                    }\n                    flat_id += input.name;\n                    switch (input.type) {\n                        case \"repeat\":\n                            var section_label = \"section-\";\n                            var block_indices = [];\n                            var block_prefix = null;\n                            for (var block_label in node) {\n                                var pos = block_label.indexOf(section_label);\n                                if (pos != -1) {\n                                    pos += section_label.length;\n                                    block_indices.push(\n                                        parseInt(block_label.substr(pos))\n                                    );\n                                    if (!block_prefix) {\n                                        block_prefix = block_label.substr(\n                                            0,\n                                            pos\n                                        );\n                                    }\n                                }\n                            }\n                            block_indices.sort((a, b) => a - b);\n                            var index = 0;\n                            for (var i in block_indices) {\n                                convert(\n                                    flat_id + \"_\" + index++,\n                                    node[block_prefix + block_indices[i]]\n                                );\n                            }\n                            break;\n                        case \"conditional\":\n                            var value = self.app.field_list[input.id].value();\n                            add(\n                                flat_id + \"|\" + input.test_param.name,\n                                input.id,\n                                value\n                            );\n                            var selectedCase = matchCase(input, value);\n                            if (selectedCase != -1) {\n                                convert(\n                                    flat_id,\n                                    head[input.id + \"-section-\" + selectedCase]\n                                );\n                            }\n                            break;\n                        case \"section\":\n                            convert((!input.flat && flat_id) || \"\", node);\n                            break;\n                        default:\n                            var field = self.app.field_list[input.id];\n                            if (field && field.value) {\n                                var value = field.value();\n                                if (\n                                    input.ignore === undefined ||\n                                    input.ignore != value\n                                ) {\n                                    if (\n                                        field.collapsed &&\n                                        input.collapsible_value\n                                    ) {\n                                        value = input.collapsible_value;\n                                    }\n                                    add(flat_id, input.id, value);\n                                    if (input.payload) {\n                                        for (var p_id in input.payload) {\n                                            add(\n                                                p_id,\n                                                input.id,\n                                                input.payload[p_id]\n                                            );\n                                        }\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        }\n        convert(\"\", dict);\n        return result_dict;\n    },\n\n    /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n    match: function(flat_id) {\n        return this.flat_dict && this.flat_dict[flat_id];\n    },\n\n    /** Match conditional values to selected cases\n        */\n    matchCase: function(input, value) {\n        return matchCase(input, value);\n    },\n\n    /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n    matchModel: function(model, callback) {\n        var self = this;\n        visitInputs(model.inputs, (input, name) => {\n            self.flat_dict[name] && callback(input, self.flat_dict[name]);\n        });\n    },\n\n    /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n    matchResponse: function(response) {\n        var result = {};\n        var self = this;\n        function search(id, head) {\n            if (typeof head === \"string\") {\n                var input_id = self.flat_dict[id];\n                input_id && (result[input_id] = head);\n            } else {\n                for (var i in head) {\n                    var new_id = i;\n                    if (id !== \"\") {\n                        var separator = \"|\";\n                        if (head instanceof Array) {\n                            separator = \"_\";\n                        }\n                        new_id = id + separator + new_id;\n                    }\n                    search(new_id, head[i]);\n                }\n            }\n        }\n        search(\"\", response);\n        return result;\n    },\n\n    /** Map dom tree to dictionary tree with input elements.\n        */\n    _iterate: function(parent, dict) {\n        var self = this;\n        var children = $(parent).children();\n        children.each(function() {\n            var child = this;\n            var id = $(child).attr(\"id\");\n            if ($(child).hasClass(\"section-row\")) {\n                var input = self.app.input_list[id];\n                dict[id] = (input && { input: input }) || {};\n                self._iterate(child, dict[id]);\n            } else {\n                self._iterate(child, dict);\n            }\n        });\n    }\n});\n\n/** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\nvar matchCase = (input, value) => {\n    if (input.test_param.type == \"boolean\") {\n        if (value == \"true\") {\n            value = input.test_param.truevalue || \"true\";\n        } else {\n            value = input.test_param.falsevalue || \"false\";\n        }\n    }\n    for (var i in input.cases) {\n        if (input.cases[i].value == value) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\nvar visitInputs = (inputs, callback, prefix, context) => {\n    context = $.extend(true, {}, context);\n    _.each(inputs, input => {\n        if (input && input.type && input.name) {\n            context[input.name] = input;\n        }\n    });\n    for (var key in inputs) {\n        var node = inputs[key];\n        node.name = node.name || key;\n        var name = prefix ? prefix + \"|\" + node.name : node.name;\n        switch (node.type) {\n            case \"repeat\":\n                _.each(node.cache, (cache, j) => {\n                    visitInputs(cache, callback, name + \"_\" + j, context);\n                });\n                break;\n            case \"conditional\":\n                if (node.test_param) {\n                    callback(\n                        node.test_param,\n                        name + \"|\" + node.test_param.name,\n                        context\n                    );\n                    var selectedCase = matchCase(node, node.test_param.value);\n                    if (selectedCase != -1) {\n                        visitInputs(\n                            node.cases[selectedCase].inputs,\n                            callback,\n                            name,\n                            context\n                        );\n                    } else {\n                        Galaxy.emit.debug(\n                            \"form-data::visitInputs() - Invalid case for \" +\n                                name +\n                                \".\"\n                        );\n                    }\n                } else {\n                    Galaxy.emit.debug(\n                        \"form-data::visitInputs() - Conditional test parameter missing for \" +\n                            name +\n                            \".\"\n                    );\n                }\n                break;\n            case \"section\":\n                visitInputs(node.inputs, callback, name, context);\n                break;\n            default:\n                callback(node, name, context);\n        }\n    }\n};\n\nexport default {\n    Manager: Manager,\n    visitInputs: visitInputs\n};\n"]}