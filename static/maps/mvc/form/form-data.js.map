{"version":3,"sources":["mvc/form/form-data.js"],"names":["define","Utils","Manager","Backbone","Model","extend","initialize","app","this","checksum","sum","self","section","$el","find","each","id","$","attr","field","field_list","JSON","stringify","value","collapsed","create","add","flat_id","input_id","input_value","flat_dict","result_dict","element_list","convert","identifier","head","index","node","input","name","type","block_indices","block_prefix","block_label","pos","indexOf","length","push","parseInt","substr","sort","a","b","i","test_param","selectedCase","matchCase","flat","undefined","ignore","collapsible_value","payload","p_id","dict","_iterate","match","matchModel","model","callback","visitInputs","inputs","matchResponse","response","search","result","new_id","separator","Array","parent","children","child","hasClass","input_list","truevalue","falsevalue","cases","prefix","context","_","key","cache","j","Galaxy","emit","debug"],"mappings":"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","file":"../../../scripts/mvc/form/form-data.js","sourcesContent":["/* This class maps the form dom to an api compatible javascript dictionary. */\ndefine([ 'utils/utils' ], function( Utils ) {\n    var Manager = Backbone.Model.extend({\n        initialize: function( app ) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function() {\n            var sum = '';\n            var self = this;\n            this.app.section.$el.find( '.section-row' ).each( function() {\n                var id = $(this).attr( 'id' );\n                var field = self.app.field_list[ id ];\n                if ( field ) {\n                    sum += id + ':' + JSON.stringify( field.value && field.value() ) + ':' + field.collapsed + ';';\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate( this.app.section.$el, dict );\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add( flat_id, input_id, input_value ) {\n                self.flat_dict[ flat_id ] = input_id;\n                result_dict[ flat_id ] = input_value;\n                self.app.element_list[ input_id ] && self.app.element_list[ input_id ].$el.attr( 'tour_id', flat_id );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert( identifier, head ) {\n                for ( var index in head ) {\n                    var node = head[ index ];\n                    if ( node.input ) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if ( identifier != '' ) {\n                            flat_id += '|';\n                        }\n                        flat_id += input.name;\n                        switch ( input.type ) {\n                            case 'repeat':\n                                var section_label = 'section-';\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for ( var block_label in node ) {\n                                    var pos = block_label.indexOf( section_label );\n                                    if ( pos != -1 ) {\n                                        pos += section_label.length;\n                                        block_indices.push( parseInt( block_label.substr( pos ) ));\n                                        if ( !block_prefix ) {\n                                            block_prefix = block_label.substr( 0, pos );\n                                        }\n                                    }\n                                }\n                                block_indices.sort( function( a, b ) { return a - b; });\n                                var index = 0;\n                                for ( var i in block_indices ) {\n                                    convert( flat_id + '_' + index++, node[ block_prefix + block_indices[ i ] ]);\n                                }\n                                break;\n                            case 'conditional':\n                                var value = self.app.field_list[ input.id ].value();\n                                add( flat_id + '|' + input.test_param.name, input.id, value );\n                                var selectedCase = matchCase( input, value );\n                                if ( selectedCase != -1 ) {\n                                    convert( flat_id, head[ input.id + '-section-' + selectedCase ] );\n                                }\n                                break;\n                            case 'section':\n                                convert( !input.flat && flat_id || '', node );\n                                break;\n                            default:\n                                var field = self.app.field_list[ input.id ];\n                                if ( field && field.value ) {\n                                    var value = field.value();\n                                    if ( input.ignore === undefined || input.ignore != value ) {\n                                        if ( field.collapsed && input.collapsible_value ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add( flat_id, input.id, value );\n                                        if ( input.payload ) {\n                                            for ( var p_id in input.payload ) {\n                                                add( p_id, input.id, input.payload[ p_id ] );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert( '', dict );\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function ( flat_id ) {\n            return this.flat_dict && this.flat_dict[ flat_id ];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function( input, value ) {\n            return matchCase( input, value );\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function( model, callback ) {\n            var self = this;\n            visitInputs( model.inputs, function( input, name ) {\n                self.flat_dict[ name ] && callback ( input, self.flat_dict[ name ] );\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function( response ) {\n            var result = {};\n            var self = this;\n            function search ( id, head ) {\n                if ( typeof head === 'string' ) {\n                    var input_id = self.flat_dict[ id ];\n                    input_id && ( result[ input_id ] = head );\n                } else {\n                    for ( var i in head ) {\n                        var new_id = i;\n                        if ( id !== '' ) {\n                            var separator = '|';\n                            if ( head instanceof Array ) {\n                                separator = '_';\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search ( new_id, head[ i ] );\n                    }\n                }\n            }\n            search( '', response );\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function( parent, dict ) {\n            var self = this;\n            var children = $( parent ).children();\n            children.each( function() {\n                var child = this;\n                var id = $( child ).attr( 'id' );\n                if ( $( child ).hasClass( 'section-row' ) ) {\n                    var input = self.app.input_list[ id ];\n                    dict[ id ] = ( input && { input : input } ) || {};\n                    self._iterate( child, dict[ id ] );\n                } else {\n                    self._iterate( child, dict );\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function( input, value ) {\n        if ( input.test_param.type == 'boolean' ) {\n            if ( value == 'true' ) {\n                value = input.test_param.truevalue || 'true';\n            } else {\n                value = input.test_param.falsevalue || 'false';\n            }\n        }\n        for ( var i in input.cases ) {\n            if ( input.cases[ i ].value == value ) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function( inputs, callback, prefix, context ) {\n        context = $.extend( true, {}, context );\n        _.each( inputs, function ( input ) {\n            if ( input && input.type && input.name ) {\n                context[ input.name ] = input;\n            }\n        });\n        for ( var key in inputs ) {\n            var node = inputs[ key ];\n            node.name = node.name || key;\n            var name = prefix ? prefix + '|' + node.name : node.name;\n            switch ( node.type ) {\n                case 'repeat':\n                    _.each( node.cache, function( cache, j ) {\n                        visitInputs( cache, callback, name + '_' + j, context );\n                    });\n                    break;\n                case 'conditional':\n                    if ( node.test_param ) {\n                        callback( node.test_param, name + '|' + node.test_param.name, context );\n                        var selectedCase = matchCase( node, node.test_param.value );\n                        if ( selectedCase != -1 ) {\n                            visitInputs( node.cases[ selectedCase ].inputs, callback, name, context );\n                        } else {\n                            Galaxy.emit.debug( 'form-data::visitInputs() - Invalid case for ' + name + '.' );\n                        }\n                    } else {\n                        Galaxy.emit.debug( 'form-data::visitInputs() - Conditional test parameter missing for ' + name  + '.' );\n                    }\n                    break;\n                case 'section':\n                    visitInputs( node.inputs, callback, name, context )\n                    break;\n                default:\n                    callback( node, name, context );\n            }\n        }\n    };\n\n    return {\n        Manager         : Manager,\n        visitInputs     : visitInputs\n    }\n});"]}