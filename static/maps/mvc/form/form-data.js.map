{"version":3,"sources":["mvc/form/form-data.js"],"names":["_utils","require","Manager","Backbone","Model","extend","initialize","app","this","checksum","sum","self","section","$el","find","each","field","field_list","id","JSON","stringify","value","collapsed","create","add","flat_id","input_id","input_value","flat_dict","result_dict","attr","element_list","index","head","node","convert","identifier","input","block_prefix","section_label","block_indices","indexOf","pos","length","block_label","substr","sort","a","b","i","test_param","name","collapsible_value","flat","p_id","payload","undefined","ignore","dict","_iterate","match","result","matchCase","separator","new_id","callback","matchResponse","response","search","parent","children","child","hasClass","input_list","$","cases","context","inputs","type","falsevalue","prefix","visitInputs","selectedCase","_","Galaxy","key","cache","j","emit","debug"],"mappings":"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","file":"../../../scripts/mvc/form/form-data.js","sourcesContent":["/* This class maps the form dom to an api compatible javascript dictionary. */\nimport Utils from \"utils/utils\";\nvar Manager = Backbone.Model.extend({\n    initialize: function(app) {\n        this.app = app;\n    },\n\n    /** Creates a checksum. */\n    checksum: function() {\n        var sum = \"\";\n        var self = this;\n        this.app.section.$el.find(\".section-row\").each(function() {\n            var id = $(this).attr(\"id\");\n            var field = self.app.field_list[id];\n            if (field) {\n                sum +=\n                    id +\n                    \":\" +\n                    JSON.stringify(field.value && field.value()) +\n                    \":\" +\n                    field.collapsed +\n                    \";\";\n            }\n        });\n        return sum;\n    },\n\n    /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n    create: function() {\n        var self = this;\n\n        // get raw dictionary from dom\n        var dict = {};\n        this._iterate(this.app.section.$el, dict);\n\n        // add to result dictionary, label elements\n        var result_dict = {};\n        this.flat_dict = {};\n        function add(flat_id, input_id, input_value) {\n            self.flat_dict[flat_id] = input_id;\n            result_dict[flat_id] = input_value;\n            self.app.element_list[input_id] &&\n                self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n        }\n        // converter between raw dictionary and job dictionary\n        function convert(identifier, head) {\n            for (var index in head) {\n                var node = head[index];\n                if (node.input) {\n                    var input = node.input;\n                    var flat_id = identifier;\n                    if (identifier != \"\") {\n                        flat_id += \"|\";\n                    }\n                    flat_id += input.name;\n                    switch (input.type) {\n                        case \"repeat\":\n                            var section_label = \"section-\";\n                            var block_indices = [];\n                            var block_prefix = null;\n                            for (var block_label in node) {\n                                var pos = block_label.indexOf(section_label);\n                                if (pos != -1) {\n                                    pos += section_label.length;\n                                    block_indices.push(\n                                        parseInt(block_label.substr(pos))\n                                    );\n                                    if (!block_prefix) {\n                                        block_prefix = block_label.substr(\n                                            0,\n                                            pos\n                                        );\n                                    }\n                                }\n                            }\n                            block_indices.sort(function(a, b) {\n                                return a - b;\n                            });\n                            var index = 0;\n                            for (var i in block_indices) {\n                                convert(\n                                    flat_id + \"_\" + index++,\n                                    node[block_prefix + block_indices[i]]\n                                );\n                            }\n                            break;\n                        case \"conditional\":\n                            var value = self.app.field_list[input.id].value();\n                            add(\n                                flat_id + \"|\" + input.test_param.name,\n                                input.id,\n                                value\n                            );\n                            var selectedCase = matchCase(input, value);\n                            if (selectedCase != -1) {\n                                convert(\n                                    flat_id,\n                                    head[input.id + \"-section-\" + selectedCase]\n                                );\n                            }\n                            break;\n                        case \"section\":\n                            convert((!input.flat && flat_id) || \"\", node);\n                            break;\n                        default:\n                            var field = self.app.field_list[input.id];\n                            if (field && field.value) {\n                                var value = field.value();\n                                if (\n                                    input.ignore === undefined ||\n                                    input.ignore != value\n                                ) {\n                                    if (\n                                        field.collapsed &&\n                                        input.collapsible_value\n                                    ) {\n                                        value = input.collapsible_value;\n                                    }\n                                    add(flat_id, input.id, value);\n                                    if (input.payload) {\n                                        for (var p_id in input.payload) {\n                                            add(\n                                                p_id,\n                                                input.id,\n                                                input.payload[p_id]\n                                            );\n                                        }\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        }\n        convert(\"\", dict);\n        return result_dict;\n    },\n\n    /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n    match: function(flat_id) {\n        return this.flat_dict && this.flat_dict[flat_id];\n    },\n\n    /** Match conditional values to selected cases\n        */\n    matchCase: function(input, value) {\n        return matchCase(input, value);\n    },\n\n    /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n    matchModel: function(model, callback) {\n        var self = this;\n        visitInputs(model.inputs, function(input, name) {\n            self.flat_dict[name] && callback(input, self.flat_dict[name]);\n        });\n    },\n\n    /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n    matchResponse: function(response) {\n        var result = {};\n        var self = this;\n        function search(id, head) {\n            if (typeof head === \"string\") {\n                var input_id = self.flat_dict[id];\n                input_id && (result[input_id] = head);\n            } else {\n                for (var i in head) {\n                    var new_id = i;\n                    if (id !== \"\") {\n                        var separator = \"|\";\n                        if (head instanceof Array) {\n                            separator = \"_\";\n                        }\n                        new_id = id + separator + new_id;\n                    }\n                    search(new_id, head[i]);\n                }\n            }\n        }\n        search(\"\", response);\n        return result;\n    },\n\n    /** Map dom tree to dictionary tree with input elements.\n        */\n    _iterate: function(parent, dict) {\n        var self = this;\n        var children = $(parent).children();\n        children.each(function() {\n            var child = this;\n            var id = $(child).attr(\"id\");\n            if ($(child).hasClass(\"section-row\")) {\n                var input = self.app.input_list[id];\n                dict[id] = (input && { input: input }) || {};\n                self._iterate(child, dict[id]);\n            } else {\n                self._iterate(child, dict);\n            }\n        });\n    }\n});\n\n/** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\nvar matchCase = function(input, value) {\n    if (input.test_param.type == \"boolean\") {\n        if (value == \"true\") {\n            value = input.test_param.truevalue || \"true\";\n        } else {\n            value = input.test_param.falsevalue || \"false\";\n        }\n    }\n    for (var i in input.cases) {\n        if (input.cases[i].value == value) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\nvar visitInputs = function(inputs, callback, prefix, context) {\n    context = $.extend(true, {}, context);\n    _.each(inputs, function(input) {\n        if (input && input.type && input.name) {\n            context[input.name] = input;\n        }\n    });\n    for (var key in inputs) {\n        var node = inputs[key];\n        node.name = node.name || key;\n        var name = prefix ? prefix + \"|\" + node.name : node.name;\n        switch (node.type) {\n            case \"repeat\":\n                _.each(node.cache, function(cache, j) {\n                    visitInputs(cache, callback, name + \"_\" + j, context);\n                });\n                break;\n            case \"conditional\":\n                if (node.test_param) {\n                    callback(\n                        node.test_param,\n                        name + \"|\" + node.test_param.name,\n                        context\n                    );\n                    var selectedCase = matchCase(node, node.test_param.value);\n                    if (selectedCase != -1) {\n                        visitInputs(\n                            node.cases[selectedCase].inputs,\n                            callback,\n                            name,\n                            context\n                        );\n                    } else {\n                        Galaxy.emit.debug(\n                            \"form-data::visitInputs() - Invalid case for \" +\n                                name +\n                                \".\"\n                        );\n                    }\n                } else {\n                    Galaxy.emit.debug(\n                        \"form-data::visitInputs() - Conditional test parameter missing for \" +\n                            name +\n                            \".\"\n                    );\n                }\n                break;\n            case \"section\":\n                visitInputs(node.inputs, callback, name, context);\n                break;\n            default:\n                callback(node, name, context);\n        }\n    }\n};\n\nexport default {\n    Manager: Manager,\n    visitInputs: visitInputs\n};\n"]}