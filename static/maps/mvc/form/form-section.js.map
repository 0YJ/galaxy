{"version":3,"sources":["mvc/form/form-section.js"],"names":["View","Backbone","extend","initialize","app","options","this","inputs","parameters","_formParameters2","default","setElement","$","render","self","$el","empty","_","each","input","add","jQuery","input_def","id","_utils2","uid","_addRepeat","_addRow","_addConditional","input_list","model","test_param","disabled","field","set","value","selectedCase","data","matchCase","_addSection","case_def","cases","i","section_row","nonhidden","j","hidden","fadeIn","hide","sub_section","_append","addClass","trigger","block_index","sub_section_id","repeat","title","min","max","onnew","del","create","_formRepeat2","n_cache","ondel","cache","hideOptions","input_element","_formInput2","label","name","help","portlet","_uiPortlet2","cls","collapsible","collapsible_button","expanded","collapsed","append","input_id","length","expand","field_list","text_value","collapsible_value","collapsible_preview","argument","color","style","backdrop","fixed","element_list","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Repeat from \"mvc/form/form-repeat\";\nimport InputElement from \"mvc/form/form-input\";\nimport Parameters from \"mvc/form/form-parameters\";\nvar View = Backbone.View.extend({\n    initialize: function(app, options) {\n        this.app = app;\n        this.inputs = options.inputs;\n        this.parameters = new Parameters();\n        this.setElement($(\"<div/>\"));\n        this.render();\n    },\n\n    /** Render section view */\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        _.each(this.inputs, input => {\n            self.add(input);\n        });\n    },\n\n    /** Add a new input element */\n    add: function(input) {\n        var input_def = jQuery.extend(true, {}, input);\n        input_def.id = input.id = Utils.uid();\n        this.app.input_list[input_def.id] = input_def;\n        switch (input_def.type) {\n            case \"conditional\":\n                this._addConditional(input_def);\n                break;\n            case \"repeat\":\n                this._addRepeat(input_def);\n                break;\n            case \"section\":\n                this._addSection(input_def);\n                break;\n            default:\n                this._addRow(input_def);\n        }\n    },\n\n    /** Add a conditional block */\n    _addConditional: function(input_def) {\n        var self = this;\n        input_def.test_param.id = input_def.id;\n        this.app.model.get(\"sustain_conditionals\") &&\n            (input_def.test_param.disabled = true);\n        var field = this._addRow(input_def.test_param);\n\n        // set onchange event for test parameter\n        field.model &&\n            field.model.set(\"onchange\", value => {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(`#${input_def.id}-section-${i}`);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n\n        // add conditional sub sections\n        for (var i in input_def.cases) {\n            var sub_section = new View(this.app, {\n                inputs: input_def.cases[i].inputs\n            });\n            this._append(\n                sub_section.$el.addClass(\"ui-form-section\"),\n                `${input_def.id}-section-${i}`\n            );\n        }\n\n        // trigger refresh on conditional input field after all input elements have been created\n        field.trigger(\"change\");\n    },\n\n    /** Add a repeat block */\n    _addRepeat: function(input_def) {\n        var self = this;\n        var block_index = 0;\n\n        // create repeat block element\n        var repeat = new Repeat.View({\n            title: input_def.title || \"Repeat\",\n            min: input_def.min,\n            max: input_def.max,\n            onnew: function() {\n                create(input_def.inputs);\n                self.app.trigger(\"change\");\n            }\n        });\n\n        // helper function to create new repeat blocks\n        function create(inputs) {\n            var sub_section_id = `${input_def.id}-section-${block_index++}`;\n            var sub_section = new View(self.app, { inputs: inputs });\n            repeat.add({\n                id: sub_section_id,\n                $el: sub_section.$el,\n                ondel: function() {\n                    repeat.del(sub_section_id);\n                    self.app.trigger(\"change\");\n                }\n            });\n        }\n\n        //\n        // add parsed/minimum number of repeat blocks\n        //\n        var n_cache = _.size(input_def.cache);\n        for (\n            var i = 0;\n            i <\n            Math.max(\n                Math.max(n_cache, input_def.min || 0),\n                input_def.default || 0\n            );\n            i++\n        ) {\n            create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n        }\n\n        // hide options\n        this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n        // create input field wrapper\n        var input_element = new InputElement(this.app, {\n            label: input_def.title || input_def.name,\n            help: input_def.help,\n            field: repeat\n        });\n        this._append(input_element.$el, input_def.id);\n    },\n\n    /** Add a customized section */\n    _addSection: function(input_def) {\n        var portlet = new Portlet.View({\n            title: input_def.title || input_def.name,\n            cls: \"ui-portlet-section\",\n            collapsible: true,\n            collapsible_button: true,\n            collapsed: !input_def.expanded\n        });\n        portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n        portlet.append(\n            $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .html(input_def.help)\n        );\n        this.app.on(\"expand\", input_id => {\n            portlet.$(`#${input_id}`).length > 0 && portlet.expand();\n        });\n        this._append(portlet.$el, input_def.id);\n    },\n\n    /** Add a single input field element */\n    _addRow: function(input_def) {\n        var self = this;\n        var id = input_def.id;\n        input_def.onchange =\n            input_def.onchange ||\n            (() => {\n                self.app.trigger(\"change\", id);\n            });\n        var field = this.parameters.create(input_def);\n        this.app.field_list[id] = field;\n        var input_element = new InputElement(this.app, {\n            name: input_def.name,\n            label: input_def.hide_label\n                ? \"\"\n                : input_def.label || input_def.name,\n            value: input_def.value,\n            text_value: input_def.text_value,\n            collapsible_value: input_def.collapsible_value,\n            collapsible_preview: input_def.collapsible_preview,\n            help: input_def.help,\n            argument: input_def.argument,\n            disabled: input_def.disabled,\n            color: input_def.color,\n            style: input_def.style,\n            backdrop: input_def.backdrop,\n            hidden: input_def.hidden,\n            fixed: input_def.fixed,\n            field: field\n        });\n        this.app.element_list[id] = input_element;\n        this._append(input_element.$el, input_def.id);\n        return field;\n    },\n\n    /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n    _append: function($el, id) {\n        this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}