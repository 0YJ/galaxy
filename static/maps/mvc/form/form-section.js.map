{"version":3,"sources":["mvc/form/form-section.js"],"names":["_utils","require","_uiMisc","_uiPortlet","_formRepeat","_formInput","_formParameters","View","Backbone","extend","initialize","app","options","this","inputs","parameters","_formParameters2","default","setElement","$","render","self","$el","empty","_","each","input","add","input_def","jQuery","id","_utils2","uid","input_list","type","_addConditional","_addRow","test_param","model","get","disabled","field","data","matchCase","value","i","cases","section_row","nonhidden","j","case_def","_addSection","hidden","selectedCase","fadeIn","hide","_append","sub_section","addClass","trigger","create","sub_section_id","block_index","_addRepeat","ondel","repeat","del","_formRepeat2","title","min","max","n_cache","size","cache","Math","hideOptions","input_element","_formInput2","label","name","help","portlet","_uiPortlet2","collapsed","expanded","append","cls","on","input_id","collapsible","length","expand","onchange","hide_label","field_list","text_value","collapsible_value","collapsible_preview","argument","color","style","backdrop","fixed","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Repeat from \"mvc/form/form-repeat\";\nimport InputElement from \"mvc/form/form-input\";\nimport Parameters from \"mvc/form/form-parameters\";\nvar View = Backbone.View.extend({\n    initialize: function(app, options) {\n        this.app = app;\n        this.inputs = options.inputs;\n        this.parameters = new Parameters();\n        this.setElement($(\"<div/>\"));\n        this.render();\n    },\n\n    /** Render section view */\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        _.each(this.inputs, function(input) {\n            self.add(input);\n        });\n    },\n\n    /** Add a new input element */\n    add: function(input) {\n        var input_def = jQuery.extend(true, {}, input);\n        input_def.id = input.id = Utils.uid();\n        this.app.input_list[input_def.id] = input_def;\n        switch (input_def.type) {\n            case \"conditional\":\n                this._addConditional(input_def);\n                break;\n            case \"repeat\":\n                this._addRepeat(input_def);\n                break;\n            case \"section\":\n                this._addSection(input_def);\n                break;\n            default:\n                this._addRow(input_def);\n        }\n    },\n\n    /** Add a conditional block */\n    _addConditional: function(input_def) {\n        var self = this;\n        input_def.test_param.id = input_def.id;\n        this.app.model.get(\"sustain_conditionals\") &&\n            (input_def.test_param.disabled = true);\n        var field = this._addRow(input_def.test_param);\n\n        // set onchange event for test parameter\n        field.model &&\n            field.model.set(\"onchange\", function(value) {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(\n                        \"#\" + input_def.id + \"-section-\" + i\n                    );\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n\n        // add conditional sub sections\n        for (var i in input_def.cases) {\n            var sub_section = new View(this.app, {\n                inputs: input_def.cases[i].inputs\n            });\n            this._append(\n                sub_section.$el.addClass(\"ui-form-section\"),\n                input_def.id + \"-section-\" + i\n            );\n        }\n\n        // trigger refresh on conditional input field after all input elements have been created\n        field.trigger(\"change\");\n    },\n\n    /** Add a repeat block */\n    _addRepeat: function(input_def) {\n        var self = this;\n        var block_index = 0;\n\n        // create repeat block element\n        var repeat = new Repeat.View({\n            title: input_def.title || \"Repeat\",\n            min: input_def.min,\n            max: input_def.max,\n            onnew: function() {\n                create(input_def.inputs);\n                self.app.trigger(\"change\");\n            }\n        });\n\n        // helper function to create new repeat blocks\n        function create(inputs) {\n            var sub_section_id = input_def.id + \"-section-\" + block_index++;\n            var sub_section = new View(self.app, { inputs: inputs });\n            repeat.add({\n                id: sub_section_id,\n                $el: sub_section.$el,\n                ondel: function() {\n                    repeat.del(sub_section_id);\n                    self.app.trigger(\"change\");\n                }\n            });\n        }\n\n        //\n        // add parsed/minimum number of repeat blocks\n        //\n        var n_cache = _.size(input_def.cache);\n        for (\n            var i = 0;\n            i <\n            Math.max(\n                Math.max(n_cache, input_def.min || 0),\n                input_def.default || 0\n            );\n            i++\n        ) {\n            create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n        }\n\n        // hide options\n        this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n        // create input field wrapper\n        var input_element = new InputElement(this.app, {\n            label: input_def.title || input_def.name,\n            help: input_def.help,\n            field: repeat\n        });\n        this._append(input_element.$el, input_def.id);\n    },\n\n    /** Add a customized section */\n    _addSection: function(input_def) {\n        var portlet = new Portlet.View({\n            title: input_def.title || input_def.name,\n            cls: \"ui-portlet-section\",\n            collapsible: true,\n            collapsible_button: true,\n            collapsed: !input_def.expanded\n        });\n        portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n        portlet.append(\n            $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .html(input_def.help)\n        );\n        this.app.on(\"expand\", function(input_id) {\n            portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n        });\n        this._append(portlet.$el, input_def.id);\n    },\n\n    /** Add a single input field element */\n    _addRow: function(input_def) {\n        var self = this;\n        var id = input_def.id;\n        input_def.onchange =\n            input_def.onchange ||\n            function() {\n                self.app.trigger(\"change\", id);\n            };\n        var field = this.parameters.create(input_def);\n        this.app.field_list[id] = field;\n        var input_element = new InputElement(this.app, {\n            name: input_def.name,\n            label: input_def.hide_label\n                ? \"\"\n                : input_def.label || input_def.name,\n            value: input_def.value,\n            text_value: input_def.text_value,\n            collapsible_value: input_def.collapsible_value,\n            collapsible_preview: input_def.collapsible_preview,\n            help: input_def.help,\n            argument: input_def.argument,\n            disabled: input_def.disabled,\n            color: input_def.color,\n            style: input_def.style,\n            backdrop: input_def.backdrop,\n            hidden: input_def.hidden,\n            fixed: input_def.fixed,\n            field: field\n        });\n        this.app.element_list[id] = input_element;\n        this._append(input_element.$el, input_def.id);\n        return field;\n    },\n\n    /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n    _append: function($el, id) {\n        this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}