{"version":3,"sources":["mvc/form/form-section.js"],"names":["View","Backbone","extend","initialize","app","options","this","inputs","parameters","_formParameters2","default","setElement","$","render","self","$el","empty","_","each","input","add","jQuery","input_def","id","_utils2","uid","_addRepeat","_addRow","_addConditional","input_list","model","test_param","disabled","field","set","value","selectedCase","data","matchCase","_addSection","case_def","cases","i","section_row","nonhidden","j","hidden","fadeIn","_append","sub_section","create","repeat","block_index","title","min","max","onnew","trigger","ondel","_formRepeat2","sub_section_id","cache","Math","n_cache","hideOptions","input_element","_formInput2","label","get","name","help","portlet","_uiPortlet2","cls","collapsible_button","collapsible","collapsed","addClass","append","input_id","length","text_value","collapsible_value","collapsible_preview","argument","color","style","backdrop","fixed","element_list","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Repeat from \"mvc/form/form-repeat\";\nimport InputElement from \"mvc/form/form-input\";\nimport Parameters from \"mvc/form/form-parameters\";\nvar View = Backbone.View.extend({\n    initialize: function(app, options) {\n        this.app = app;\n        this.inputs = options.inputs;\n        this.parameters = new Parameters();\n        this.setElement($(\"<div/>\"));\n        this.render();\n    },\n\n    /** Render section view */\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        _.each(this.inputs, function(input) {\n            self.add(input);\n        });\n    },\n\n    /** Add a new input element */\n    add: function(input) {\n        var input_def = jQuery.extend(true, {}, input);\n        input_def.id = input.id = Utils.uid();\n        this.app.input_list[input_def.id] = input_def;\n        switch (input_def.type) {\n            case \"conditional\":\n                this._addConditional(input_def);\n                break;\n            case \"repeat\":\n                this._addRepeat(input_def);\n                break;\n            case \"section\":\n                this._addSection(input_def);\n                break;\n            default:\n                this._addRow(input_def);\n        }\n    },\n\n    /** Add a conditional block */\n    _addConditional: function(input_def) {\n        var self = this;\n        input_def.test_param.id = input_def.id;\n        this.app.model.get(\"sustain_conditionals\") &&\n            (input_def.test_param.disabled = true);\n        var field = this._addRow(input_def.test_param);\n\n        // set onchange event for test parameter\n        field.model &&\n            field.model.set(\"onchange\", function(value) {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(\n                        \"#\" + input_def.id + \"-section-\" + i\n                    );\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n\n        // add conditional sub sections\n        for (var i in input_def.cases) {\n            var sub_section = new View(this.app, {\n                inputs: input_def.cases[i].inputs\n            });\n            this._append(\n                sub_section.$el.addClass(\"ui-form-section\"),\n                input_def.id + \"-section-\" + i\n            );\n        }\n\n        // trigger refresh on conditional input field after all input elements have been created\n        field.trigger(\"change\");\n    },\n\n    /** Add a repeat block */\n    _addRepeat: function(input_def) {\n        var self = this;\n        var block_index = 0;\n\n        // create repeat block element\n        var repeat = new Repeat.View({\n            title: input_def.title || \"Repeat\",\n            min: input_def.min,\n            max: input_def.max,\n            onnew: function() {\n                create(input_def.inputs);\n                self.app.trigger(\"change\");\n            }\n        });\n\n        // helper function to create new repeat blocks\n        function create(inputs) {\n            var sub_section_id = input_def.id + \"-section-\" + block_index++;\n            var sub_section = new View(self.app, { inputs: inputs });\n            repeat.add({\n                id: sub_section_id,\n                $el: sub_section.$el,\n                ondel: function() {\n                    repeat.del(sub_section_id);\n                    self.app.trigger(\"change\");\n                }\n            });\n        }\n\n        //\n        // add parsed/minimum number of repeat blocks\n        //\n        var n_cache = _.size(input_def.cache);\n        for (\n            var i = 0;\n            i <\n            Math.max(\n                Math.max(n_cache, input_def.min || 0),\n                input_def.default || 0\n            );\n            i++\n        ) {\n            create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n        }\n\n        // hide options\n        this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n        // create input field wrapper\n        var input_element = new InputElement(this.app, {\n            label: input_def.title || input_def.name,\n            help: input_def.help,\n            field: repeat\n        });\n        this._append(input_element.$el, input_def.id);\n    },\n\n    /** Add a customized section */\n    _addSection: function(input_def) {\n        var portlet = new Portlet.View({\n            title: input_def.title || input_def.name,\n            cls: \"ui-portlet-section\",\n            collapsible: true,\n            collapsible_button: true,\n            collapsed: !input_def.expanded\n        });\n        portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n        portlet.append(\n            $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .html(input_def.help)\n        );\n        this.app.on(\"expand\", function(input_id) {\n            portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n        });\n        this._append(portlet.$el, input_def.id);\n    },\n\n    /** Add a single input field element */\n    _addRow: function(input_def) {\n        var self = this;\n        var id = input_def.id;\n        input_def.onchange =\n            input_def.onchange ||\n            function() {\n                self.app.trigger(\"change\", id);\n            };\n        var field = this.parameters.create(input_def);\n        this.app.field_list[id] = field;\n        var input_element = new InputElement(this.app, {\n            name: input_def.name,\n            label: input_def.hide_label\n                ? \"\"\n                : input_def.label || input_def.name,\n            value: input_def.value,\n            text_value: input_def.text_value,\n            collapsible_value: input_def.collapsible_value,\n            collapsible_preview: input_def.collapsible_preview,\n            help: input_def.help,\n            argument: input_def.argument,\n            disabled: input_def.disabled,\n            color: input_def.color,\n            style: input_def.style,\n            backdrop: input_def.backdrop,\n            hidden: input_def.hidden,\n            fixed: input_def.fixed,\n            field: field\n        });\n        this.app.element_list[id] = input_element;\n        this._append(input_element.$el, input_def.id);\n        return field;\n    },\n\n    /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n    _append: function($el, id) {\n        this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}