{"version":3,"sources":["mvc/form/form-section.js"],"names":["define","Utils","Ui","Portlet","Repeat","InputElement","Parameters","View","Backbone","extend","options","initialize","app","this","inputs","parameters","$","setElement","render","self","_","each","empty","input","add","input_def","jQuery","id","uid","input_list","_addConditional","_addRepeat","_addSection","test_param","get","disabled","_addRow","field","value","selectedCase","data","matchCase","i","cases","model","case_def","nonhidden","section_row","j","fadeIn","sub_section","_append","$el","addClass","trigger","create","sub_section_id","block_index","repeat","del","title","min","max","Math","n_cache","default","cache","hideOptions","label","name","help","input_element","cls","collapsible","collapsible_button","collapsed","expanded","portlet","html","on","input_id","length","expand","append","hide_label","text_value","collapsible_value","onchange","argument","color","style","backdrop","hidden","fixed","collapsible_preview","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-portlet', 'mvc/form/form-repeat', 'mvc/form/form-input', 'mvc/form/form-parameters' ],\nfunction( Utils, Ui, Portlet, Repeat, InputElement, Parameters ) {\n    var View = Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement( $( '<div/>' ) );\n            this.render();\n        },\n\n        /** Render section view */\n        render: function() {\n            var self = this;\n            this.$el.empty();\n            _.each( this.inputs, function( input ) { self.add( input ) } );\n        },\n\n        /** Add a new input element */\n        add: function( input ) {\n            var input_def = jQuery.extend( true, {}, input );\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[ input_def.id ] = input_def;\n            switch( input_def.type ) {\n                case 'conditional':\n                    this._addConditional( input_def );\n                    break;\n                case 'repeat':\n                    this._addRepeat( input_def );\n                    break;\n                case 'section':\n                    this._addSection( input_def );\n                    break;\n                default:\n                    this._addRow( input_def );\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function( input_def ) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get( 'sustain_conditionals' ) && ( input_def.test_param.disabled = true );\n            var field = this._addRow( input_def.test_param );\n\n            // set onchange event for test parameter\n            field.model && field.model.set( 'onchange', function( value ) {\n                var selectedCase = self.app.data.matchCase( input_def, value );\n                for ( var i in input_def.cases ) {\n                    var case_def = input_def.cases[ i ];\n                    var section_row = self.$( '#' + input_def.id + '-section-' + i );\n                    var nonhidden = false;\n                    for ( var j in case_def.inputs ) {\n                        if ( !case_def.inputs[ j ].hidden ) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if ( i == selectedCase && nonhidden ) {\n                        section_row.fadeIn( 'fast' );\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger( 'change' );\n            });\n\n            // add conditional sub sections\n            for ( var i in input_def.cases ) {\n                var sub_section = new View( this.app, { inputs: input_def.cases[ i ].inputs } );\n                this._append( sub_section.$el.addClass( 'ui-form-section' ), input_def.id + '-section-' + i );\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger( 'change' );\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function( input_def ) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title           : input_def.title || 'Repeat',\n                min             : input_def.min,\n                max             : input_def.max,\n                onnew           : function() { create( input_def.inputs ); self.app.trigger( 'change' ); }\n            });\n\n            // helper function to create new repeat blocks\n            function create ( inputs ) {\n                var sub_section_id = input_def.id + '-section-' + ( block_index++ );\n                var sub_section = new View( self.app, { inputs: inputs } );\n                repeat.add( { id      : sub_section_id,\n                              $el     : sub_section.$el,\n                              ondel   : function() { repeat.del( sub_section_id ); self.app.trigger( 'change' ); } } );\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size( input_def.cache );\n            for ( var i = 0; i < Math.max( Math.max( n_cache, input_def.min || 0 ), input_def.default || 0 ); i++ ) {\n                create( i < n_cache ? input_def.cache[ i ] : input_def.inputs );\n            }\n\n            // hide options\n            this.app.model.get( 'sustain_repeats' ) && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement( this.app, {\n                label   : input_def.title || input_def.name,\n                help    : input_def.help,\n                field   : repeat\n            });\n            this._append( input_element.$el, input_def.id );\n        },\n\n        /** Add a customized section */\n        _addSection: function( input_def ) {\n            var portlet = new Portlet.View({\n                title               : input_def.title || input_def.name,\n                cls                 : 'ui-portlet-section',\n                collapsible         : true,\n                collapsible_button  : true,\n                collapsed           : !input_def.expanded\n            });\n            portlet.append( new View( this.app, { inputs: input_def.inputs } ).$el );\n            portlet.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( input_def.help ) );\n            this.app.on( 'expand', function( input_id ) { ( portlet.$( '#' + input_id ).length > 0 ) && portlet.expand(); } );\n            this._append( portlet.$el, input_def.id );\n        },\n\n        /** Add a single input field element */\n        _addRow: function( input_def ) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function() { self.app.trigger( 'change', id ) };\n            var field = this.parameters.create( input_def );\n            this.app.field_list[ id ] = field;\n            var input_element = new InputElement( this.app, {\n                name                : input_def.name,\n                label               : input_def.hide_label ? '' : input_def.label || input_def.name,\n                value               : input_def.value,\n                text_value          : input_def.text_value,\n                collapsible_value   : input_def.collapsible_value,\n                collapsible_preview : input_def.collapsible_preview,\n                help                : input_def.help,\n                argument            : input_def.argument,\n                disabled            : input_def.disabled,\n                color               : input_def.color,\n                style               : input_def.style,\n                backdrop            : input_def.backdrop,\n                hidden              : input_def.hidden,\n                fixed               : input_def.fixed,\n                field               : field\n            });\n            this.app.element_list[ id ] = input_element;\n            this._append( input_element.$el, input_def.id );\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function( $el, id ) {\n            this.$el.append( $el.addClass( 'section-row' ).attr( 'id', id ) );\n        }\n    });\n\n    return {\n        View: View\n    };\n});"]}