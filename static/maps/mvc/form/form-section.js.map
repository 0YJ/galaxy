{"version":3,"sources":["mvc/form/form-section.js"],"names":["define","Utils","Ui","Portlet","Repeat","InputElement","Parameters","View","Backbone","extend","initialize","app","options","this","inputs","parameters","setElement","$","render","self","$el","empty","_","each","input","add","input_def","jQuery","id","uid","input_list","type","_addConditional","_addRepeat","_addSection","_addRow","test_param","model","get","disabled","field","set","value","selectedCase","data","matchCase","i","cases","case_def","section_row","nonhidden","j","hidden","fadeIn","hide","trigger","sub_section","_append","addClass","create","sub_section_id","block_index","repeat","ondel","del","title","min","max","onnew","n_cache","size","cache","Math","default","hideOptions","input_element","label","name","help","portlet","cls","collapsible","collapsible_button","collapsed","expanded","append","html","on","input_id","length","expand","onchange","field_list","hide_label","text_value","collapsible_value","collapsible_preview","argument","color","style","backdrop","fixed","element_list","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-portlet', 'mvc/form/form-repeat', 'mvc/form/form-input', 'mvc/form/form-parameters' ],\nfunction( Utils, Ui, Portlet, Repeat, InputElement, Parameters ) {\n    var View = Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement( $( '<div/>' ) );\n            this.render();\n        },\n\n        /** Render section view */\n        render: function() {\n            var self = this;\n            this.$el.empty();\n            _.each( this.inputs, function( input ) { self.add( input ) } );\n        },\n\n        /** Add a new input element */\n        add: function( input ) {\n            var input_def = jQuery.extend( true, {}, input );\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[ input_def.id ] = input_def;\n            switch( input_def.type ) {\n                case 'conditional':\n                    this._addConditional( input_def );\n                    break;\n                case 'repeat':\n                    this._addRepeat( input_def );\n                    break;\n                case 'section':\n                    this._addSection( input_def );\n                    break;\n                default:\n                    this._addRow( input_def );\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function( input_def ) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get( 'sustain_conditionals' ) && ( input_def.test_param.disabled = true );\n            var field = this._addRow( input_def.test_param );\n\n            // set onchange event for test parameter\n            field.model && field.model.set( 'onchange', function( value ) {\n                var selectedCase = self.app.data.matchCase( input_def, value );\n                for ( var i in input_def.cases ) {\n                    var case_def = input_def.cases[ i ];\n                    var section_row = self.$( '#' + input_def.id + '-section-' + i );\n                    var nonhidden = false;\n                    for ( var j in case_def.inputs ) {\n                        if ( !case_def.inputs[ j ].hidden ) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if ( i == selectedCase && nonhidden ) {\n                        section_row.fadeIn( 'fast' );\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger( 'change' );\n            });\n\n            // add conditional sub sections\n            for ( var i in input_def.cases ) {\n                var sub_section = new View( this.app, { inputs: input_def.cases[ i ].inputs } );\n                this._append( sub_section.$el.addClass( 'ui-form-section' ), input_def.id + '-section-' + i );\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger( 'change' );\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function( input_def ) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title           : input_def.title || 'Repeat',\n                min             : input_def.min,\n                max             : input_def.max,\n                onnew           : function() { create( input_def.inputs ); self.app.trigger( 'change' ); }\n            });\n\n            // helper function to create new repeat blocks\n            function create ( inputs ) {\n                var sub_section_id = input_def.id + '-section-' + ( block_index++ );\n                var sub_section = new View( self.app, { inputs: inputs } );\n                repeat.add( { id      : sub_section_id,\n                              $el     : sub_section.$el,\n                              ondel   : function() { repeat.del( sub_section_id ); self.app.trigger( 'change' ); } } );\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size( input_def.cache );\n            for ( var i = 0; i < Math.max( Math.max( n_cache, input_def.min || 0 ), input_def.default || 0 ); i++ ) {\n                create( i < n_cache ? input_def.cache[ i ] : input_def.inputs );\n            }\n\n            // hide options\n            this.app.model.get( 'sustain_repeats' ) && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement( this.app, {\n                label   : input_def.title || input_def.name,\n                help    : input_def.help,\n                field   : repeat\n            });\n            this._append( input_element.$el, input_def.id );\n        },\n\n        /** Add a customized section */\n        _addSection: function( input_def ) {\n            var portlet = new Portlet.View({\n                title               : input_def.title || input_def.name,\n                cls                 : 'ui-portlet-section',\n                collapsible         : true,\n                collapsible_button  : true,\n                collapsed           : !input_def.expanded\n            });\n            portlet.append( new View( this.app, { inputs: input_def.inputs } ).$el );\n            portlet.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( input_def.help ) );\n            this.app.on( 'expand', function( input_id ) { ( portlet.$( '#' + input_id ).length > 0 ) && portlet.expand(); } );\n            this._append( portlet.$el, input_def.id );\n        },\n\n        /** Add a single input field element */\n        _addRow: function( input_def ) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function() { self.app.trigger( 'change', id ) };\n            var field = this.parameters.create( input_def );\n            this.app.field_list[ id ] = field;\n            var input_element = new InputElement( this.app, {\n                name                : input_def.name,\n                label               : input_def.hide_label ? '' : input_def.label || input_def.name,\n                value               : input_def.value,\n                text_value          : input_def.text_value,\n                collapsible_value   : input_def.collapsible_value,\n                collapsible_preview : input_def.collapsible_preview,\n                help                : input_def.help,\n                argument            : input_def.argument,\n                disabled            : input_def.disabled,\n                color               : input_def.color,\n                style               : input_def.style,\n                backdrop            : input_def.backdrop,\n                hidden              : input_def.hidden,\n                fixed               : input_def.fixed,\n                field               : field\n            });\n            this.app.element_list[ id ] = input_element;\n            this._append( input_element.$el, input_def.id );\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function( $el, id ) {\n            this.$el.append( $el.addClass( 'section-row' ).attr( 'id', id ) );\n        }\n    });\n\n    return {\n        View: View\n    };\n});"]}