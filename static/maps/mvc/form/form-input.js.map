{"version":3,"sources":["mvc/form/form-input.js"],"names":["Backbone","View","extend","initialize","app","options","this","model","field","text_enable","app_options","text_disable","cls_enable","cls_disable","always_refresh","set","setElement","_template","$field","$preview","$","$info","$collapsible","$collapsible_text","$collapsible_icon","$title","$error_text","$title_text","$error","$backdrop","prepend","$el","collapsible_value","get","render","undefined","JSON","stringify","self","listenTo","on","collapsed","trigger","reset","error","text","hide","help_text","html","help_argument","error_text","color","style","_","escape","show","collapsible_state","removeClass","addClass","attr","tooltip","placement","append"],"mappings":"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","file":"../../../scripts/mvc/form/form-input.js","sourcesContent":["/**\n    This class creates a form input element wrapper\n*/\n\nexport default Backbone.View.extend({\n    initialize: function(app, options) {\n        this.app = app;\n        this.app_options = app.model ? app.model.attributes : {};\n        this.field = (options && options.field) || new Backbone.View();\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                text_enable: this.app_options.text_enable || \"Enable\",\n                text_disable: this.app_options.text_disable || \"Disable\",\n                cls_enable:\n                    this.app_options.cls_enable || \"fa fa-caret-square-o-down\",\n                cls_disable:\n                    this.app_options.cls_disable || \"fa fa-caret-square-o-up\",\n                always_refresh: this.app_options.always_refresh\n            }).set(options);\n\n        // set element and link components\n        this.setElement(this._template());\n        this.$field = this.$(\".ui-form-field\");\n        this.$info = this.$(\".ui-form-info\");\n        this.$preview = this.$(\".ui-form-preview\");\n        this.$collapsible = this.$(\".ui-form-collapsible\");\n        this.$collapsible_text = this.$(\".ui-form-collapsible-text\");\n        this.$collapsible_icon = this.$(\".ui-form-collapsible-icon\");\n        this.$title = this.$(\".ui-form-title\");\n        this.$title_text = this.$(\".ui-form-title-text\");\n        this.$error_text = this.$(\".ui-form-error-text\");\n        this.$error = this.$(\".ui-form-error\");\n        this.$backdrop = this.$(\".ui-form-backdrop\");\n\n        // add field element\n        this.$field.prepend(this.field.$el);\n\n        // decide wether to expand or collapse fields\n        var collapsible_value = this.model.get(\"collapsible_value\");\n        this.field.collapsed =\n            collapsible_value !== undefined &&\n            JSON.stringify(this.model.get(\"value\")) ==\n                JSON.stringify(collapsible_value);\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n\n        // add click handler\n        var self = this;\n        this.$collapsible.on(\"click\", function() {\n            self.field.collapsed = !self.field.collapsed;\n            app.trigger && app.trigger(\"change\");\n            self.render();\n        });\n\n        // hide error on value change\n        if (this.field.model && !this.model.get(\"always_refresh\")) {\n            this.listenTo(this.field.model, \"change:value\", function() {\n                self.reset();\n            });\n        }\n    },\n\n    /** Set backdrop for input element */\n    backdrop: function() {\n        this.model.set(\"backdrop\", true);\n    },\n\n    /** Set error text */\n    error: function(text) {\n        this.model.set(\"error_text\", text);\n    },\n\n    /** Reset this view */\n    reset: function() {\n        !this.model.get(\"fixed\") && this.model.set(\"error_text\", null);\n    },\n\n    render: function() {\n        // render help\n        $(\".tooltip\").hide();\n        var help_text = this.model.get(\"help\", \"\");\n        var help_argument = this.model.get(\"argument\");\n        if (\n            help_argument &&\n            help_text.indexOf(\"(\" + help_argument + \")\") == -1\n        ) {\n            help_text += \" (\" + help_argument + \")\";\n        }\n        this.$info.html(help_text);\n        // render visibility\n        this.$el[this.model.get(\"hidden\") ? \"hide\" : \"show\"]();\n        // render preview view for collapsed fields\n        this.$preview\n            [\n                (this.field.collapsed &&\n                    this.model.get(\"collapsible_preview\")) ||\n                this.model.get(\"disabled\")\n                    ? \"show\"\n                    : \"hide\"\n            ]()\n            .html(_.escape(this.model.get(\"text_value\")));\n        // render error messages\n        var error_text = this.model.get(\"error_text\");\n        this.$error[error_text ? \"show\" : \"hide\"]();\n        this.$el[error_text ? \"addClass\" : \"removeClass\"](\"ui-error\");\n        this.$error_text.html(error_text);\n        // render backdrop\n        this.$backdrop[this.model.get(\"backdrop\") ? \"show\" : \"hide\"]();\n        // render input field\n        this.field.collapsed || this.model.get(\"disabled\")\n            ? this.$field.hide()\n            : this.$field.show();\n        // render input field color and style\n        this.field.model &&\n            this.field.model.set({\n                color: this.model.get(\"color\"),\n                style: this.model.get(\"style\")\n            });\n        // render collapsible options\n        if (\n            !this.model.get(\"disabled\") &&\n            this.model.get(\"collapsible_value\") !== undefined\n        ) {\n            var collapsible_state = this.field.collapsed ? \"enable\" : \"disable\";\n            this.$title_text.hide();\n            this.$collapsible.show();\n            this.$collapsible_text.text(this.model.get(\"label\"));\n            this.$collapsible_icon\n                .removeClass()\n                .addClass(\"icon\")\n                .addClass(this.model.get(\"cls_\" + collapsible_state))\n                .attr(\n                    \"data-original-title\",\n                    this.model.get(\"text_\" + collapsible_state)\n                )\n                .tooltip({ placement: \"bottom\" });\n        } else {\n            this.$title_text.show().text(this.model.get(\"label\"));\n            this.$collapsible.hide();\n        }\n    },\n\n    _template: function() {\n        return $(\"<div/>\")\n            .addClass(\"ui-form-element\")\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"ui-form-error ui-error\")\n                    .append($(\"<span/>\").addClass(\"fa fa-arrow-down\"))\n                    .append($(\"<span/>\").addClass(\"ui-form-error-text\"))\n            )\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"ui-form-title\")\n                    .append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-form-collapsible\")\n                            .append(\n                                $(\"<i/>\").addClass(\"ui-form-collapsible-icon\")\n                            )\n                            .append(\n                                $(\"<span/>\").addClass(\n                                    \"ui-form-collapsible-text\"\n                                )\n                            )\n                    )\n                    .append($(\"<span/>\").addClass(\"ui-form-title-text\"))\n            )\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"ui-form-field\")\n                    .append($(\"<span/>\").addClass(\"ui-form-info\"))\n                    .append($(\"<div/>\").addClass(\"ui-form-backdrop\"))\n            )\n            .append($(\"<div/>\").addClass(\"ui-form-preview\"));\n    }\n});\n"]}