{"version":3,"sources":["mvc/form/form-input.js"],"names":["define","Backbone","View","extend","initialize","app","options","model","attributes","this","field","app_options","Model","text_enable","text_disable","cls_enable","cls_disable","setElement","_template","$field","$","$info","$preview","$collapsible","$collapsible_text","$collapsible_icon","$title","$title_text","$error_text","prepend","$el","collapsible_value","get","collapsed","undefined","JSON","stringify","render","self","on","trigger","listenTo","reset","backdrop","set","error","text","hide","help_text","help_argument","indexOf","html","_","escape","error_text","show","color","style","collapsible_state","removeClass","addClass","placement","append"],"mappings":"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","file":"../../../scripts/mvc/form/form-input.js","sourcesContent":["/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable     : this.app_options.text_enable   || 'Enable',\n                text_disable    : this.app_options.text_disable  || 'Disable',\n                cls_enable      : this.app_options.cls_enable    || 'fa fa-caret-square-o-down',\n                cls_disable     : this.app_options.cls_disable   || 'fa fa-caret-square-o-up',\n                always_refresh  : this.app_options.always_refresh\n            }).set( options );\n\n            // set element and link components\n            this.setElement( this._template() );\n            this.$field             = this.$( '.ui-form-field' );\n            this.$info              = this.$( '.ui-form-info' );\n            this.$preview           = this.$( '.ui-form-preview' );\n            this.$collapsible       = this.$( '.ui-form-collapsible' );\n            this.$collapsible_text  = this.$( '.ui-form-collapsible-text' );\n            this.$collapsible_icon  = this.$( '.ui-form-collapsible-icon' );\n            this.$title             = this.$( '.ui-form-title' );\n            this.$title_text        = this.$( '.ui-form-title-text' );\n            this.$error_text        = this.$( '.ui-form-error-text' );\n            this.$error             = this.$( '.ui-form-error' );\n            this.$backdrop          = this.$( '.ui-form-backdrop' );\n\n            // add field element\n            this.$field.prepend( this.field.$el );\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get( 'collapsible_value' );\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify( this.model.get( 'value' ) ) == JSON.stringify( collapsible_value );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on( 'click', function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger( 'change' );\n                self.render();\n            });\n\n            // hide error on value change\n            if ( this.field.model && !this.model.get( 'always_refresh' ) ) {\n                this.listenTo( this.field.model, 'change:value', function() { self.reset() } );\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set( 'backdrop', true );\n        },\n\n        /** Set error text */\n        error: function( text ) {\n            this.model.set( 'error_text', text );\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get( 'fixed' ) && this.model.set( 'error_text', null );\n        },\n\n        render: function() {\n            // render help\n            $( '.tooltip' ).hide();\n            var help_text = this.model.get( 'help', '' );\n            var help_argument = this.model.get( 'argument' );\n            if ( help_argument && help_text.indexOf( '(' + help_argument + ')' ) == -1 ) {\n                help_text += ' (' + help_argument + ')';\n            }\n            this.$info.html( help_text );\n            // render visibility\n            this.$el[ this.model.get( 'hidden' ) ? 'hide' : 'show' ]();\n            // render preview view for collapsed fields\n            this.$preview[ ( this.field.collapsed && this.model.get( 'collapsible_preview' ) || this.model.get( 'disabled' ) ) ? 'show' : 'hide' ]()\n                         .html( _.escape( this.model.get( 'text_value' ) ) );\n            // render error messages\n            var error_text = this.model.get( 'error_text' );\n            this.$error[ error_text ? 'show' : 'hide' ]();\n            this.$el[ error_text ? 'addClass' : 'removeClass' ]( 'ui-error' );\n            this.$error_text.html( error_text );\n            // render backdrop\n            this.$backdrop[ this.model.get( 'backdrop' ) ? 'show' : 'hide' ]();\n            // render input field\n            this.field.collapsed || this.model.get( 'disabled' ) ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set( { 'color': this.model.get( 'color' ), 'style': this.model.get( 'style' ) } );\n            // render collapsible options\n            if ( !this.model.get( 'disabled' ) && this.model.get( 'collapsible_value' ) !== undefined ) {\n                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text( this.model.get( 'label' ) );\n                this.$collapsible_icon.removeClass().addClass( 'icon' )\n                                      .addClass( this.model.get( 'cls_' +  collapsible_state ) )\n                                      .attr( 'data-original-title', this.model.get( 'text_' + collapsible_state ) )\n                                      .tooltip( { placement: 'bottom' } );\n            } else {\n                this.$title_text.show().text( this.model.get( 'label' ) );\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return  $( '<div/>' ).addClass( 'ui-form-element' )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-error ui-error' )\n                                    .append( $( '<span/>' ).addClass( 'fa fa-arrow-down' ) )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-error-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-title' )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-collapsible' )\n                                        .append( $( '<i/>' ).addClass( 'ui-form-collapsible-icon' ) )\n                                        .append( $( '<span/>' ).addClass( 'ui-form-collapsible-text' ) )\n                                    )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-title-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-field' )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-info' ) )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-backdrop' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-preview' ) );\n        }\n    });\n});"]}