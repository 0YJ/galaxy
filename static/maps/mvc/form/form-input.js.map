{"version":3,"sources":["mvc/form/form-input.js"],"names":["define","Backbone","View","extend","initialize","app","options","this","app_options","model","attributes","field","Model","text_enable","text_disable","cls_enable","cls_disable","set","setElement","_template","$field","$","$info","$preview","$collapsible","$collapsible_text","$collapsible_icon","$title","$title_text","$error_text","$error","$backdrop","prepend","$el","collapsible_value","get","collapsed","undefined","JSON","stringify","listenTo","render","self","on","trigger","backdrop","error","text","reset","hide","help_text","help_argument","indexOf","html","_","escape","error_text","show","color","style","collapsible_state","removeClass","addClass","attr","tooltip","placement","append"],"mappings":"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","file":"../../../scripts/mvc/form/form-input.js","sourcesContent":["/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable     : this.app_options.text_enable   || 'Enable',\n                text_disable    : this.app_options.text_disable  || 'Disable',\n                cls_enable      : this.app_options.cls_enable    || 'fa fa-caret-square-o-down',\n                cls_disable     : this.app_options.cls_disable   || 'fa fa-caret-square-o-up'\n            }).set( options );\n\n            // set element and link components\n            this.setElement( this._template() );\n            this.$field             = this.$( '.ui-form-field' );\n            this.$info              = this.$( '.ui-form-info' );\n            this.$preview           = this.$( '.ui-form-preview' );\n            this.$collapsible       = this.$( '.ui-form-collapsible' );\n            this.$collapsible_text  = this.$( '.ui-form-collapsible-text' );\n            this.$collapsible_icon  = this.$( '.ui-form-collapsible-icon' );\n            this.$title             = this.$( '.ui-form-title' );\n            this.$title_text        = this.$( '.ui-form-title-text' );\n            this.$error_text        = this.$( '.ui-form-error-text' );\n            this.$error             = this.$( '.ui-form-error' );\n            this.$backdrop          = this.$( '.ui-form-backdrop' );\n\n            // add field element\n            this.$field.prepend( this.field.$el );\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get( 'collapsible_value' );\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify( this.model.get( 'value' ) ) == JSON.stringify( collapsible_value );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on( 'click', function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger( 'change' );\n                self.render();\n            });\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set( 'backdrop', true );\n        },\n\n        /** Set error text */\n        error: function( text ) {\n            this.model.set( 'error_text', text );\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get( 'fixed' ) && this.model.set( 'error_text', null );\n        },\n\n        render: function() {\n            // render help\n            $( '.tooltip' ).hide();\n            var help_text = this.model.get( 'help', '' );\n            var help_argument = this.model.get( 'argument' );\n            if ( help_argument && help_text.indexOf( '(' + help_argument + ')' ) == -1 ) {\n                help_text += ' (' + help_argument + ')';\n            }\n            this.$info.html( help_text );\n            // render visibility\n            this.$el[ this.model.get( 'hidden' ) ? 'hide' : 'show' ]();\n            // render preview view for collapsed fields\n            this.$preview[ ( this.field.collapsed && this.model.get( 'collapsible_preview' ) || this.model.get( 'disabled' ) ) ? 'show' : 'hide' ]()\n                         .html( _.escape( this.model.get( 'text_value' ) ) );\n            // render error messages\n            var error_text = this.model.get( 'error_text' );\n            this.$error[ error_text ? 'show' : 'hide' ]();\n            this.$el[ error_text ? 'addClass' : 'removeClass' ]( 'ui-error' );\n            this.$error_text.html( error_text );\n            // render backdrop\n            this.$backdrop[ this.model.get( 'backdrop' ) ? 'show' : 'hide' ]();\n            // render input field\n            this.field.collapsed || this.model.get( 'disabled' ) ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set( { 'color': this.model.get( 'color' ), 'style': this.model.get( 'style' ) } );\n            // render collapsible options\n            if ( !this.model.get( 'disabled' ) && this.model.get( 'collapsible_value' ) !== undefined ) {\n                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text( this.model.get( 'label' ) );\n                this.$collapsible_icon.removeClass().addClass( 'icon' )\n                                      .addClass( this.model.get( 'cls_' +  collapsible_state ) )\n                                      .attr( 'data-original-title', this.model.get( 'text_' + collapsible_state ) )\n                                      .tooltip( { placement: 'bottom' } );\n            } else {\n                this.$title_text.show().text( this.model.get( 'label' ) );\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return  $( '<div/>' ).addClass( 'ui-form-element' )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-error ui-error' )\n                                    .append( $( '<span/>' ).addClass( 'fa fa-arrow-down' ) )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-error-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-title' )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-collapsible' )\n                                        .append( $( '<i/>' ).addClass( 'ui-form-collapsible-icon' ) )\n                                        .append( $( '<span/>' ).addClass( 'ui-form-collapsible-text' ) )\n                                    )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-title-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-field' )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-info' ) )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-backdrop' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-preview' ) );\n        }\n    });\n});"]}