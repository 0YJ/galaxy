{"version":3,"sources":["mvc/form/form-input.js"],"names":["define","Backbone","View","extend","initialize","app","options","model","attributes","this","field","app_options","Model","text_enable","text_disable","cls_enable","setElement","_template","$field","$","$info","$preview","$collapsible","$collapsible_text","$collapsible_icon","$title","$title_text","$error_text","prepend","$el","collapsible_value","get","collapsed","undefined","JSON","stringify","render","self","on","trigger","backdrop","set","error","text","reset","hide","help_text","help_argument","indexOf","html","_","escape","error_text","$error","$backdrop","show","color","style","collapsible_state","removeClass","addClass","attr","tooltip","append"],"mappings":"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","file":"../../../scripts/mvc/form/form-input.js","sourcesContent":["/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable     : this.app_options.text_enable   || 'Enable',\n                text_disable    : this.app_options.text_disable  || 'Disable',\n                cls_enable      : this.app_options.cls_enable    || 'fa fa-caret-square-o-down',\n                cls_disable     : this.app_options.cls_disable   || 'fa fa-caret-square-o-up'\n            }).set( options );\n\n            // set element and link components\n            this.setElement( this._template() );\n            this.$field             = this.$( '.ui-form-field' );\n            this.$info              = this.$( '.ui-form-info' );\n            this.$preview           = this.$( '.ui-form-preview' );\n            this.$collapsible       = this.$( '.ui-form-collapsible' );\n            this.$collapsible_text  = this.$( '.ui-form-collapsible-text' );\n            this.$collapsible_icon  = this.$( '.ui-form-collapsible-icon' );\n            this.$title             = this.$( '.ui-form-title' );\n            this.$title_text        = this.$( '.ui-form-title-text' );\n            this.$error_text        = this.$( '.ui-form-error-text' );\n            this.$error             = this.$( '.ui-form-error' );\n            this.$backdrop          = this.$( '.ui-form-backdrop' );\n\n            // add field element\n            this.$field.prepend( this.field.$el );\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get( 'collapsible_value' );\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify( this.model.get( 'value' ) ) == JSON.stringify( collapsible_value );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on( 'click', function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger( 'change' );\n                self.render();\n            });\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set( 'backdrop', true );\n        },\n\n        /** Set error text */\n        error: function( text ) {\n            this.model.set( 'error_text', text );\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get( 'fixed' ) && this.model.set( 'error_text', null );\n        },\n\n        render: function() {\n            // render help\n            $( '.tooltip' ).hide();\n            var help_text = this.model.get( 'help', '' );\n            var help_argument = this.model.get( 'argument' );\n            if ( help_argument && help_text.indexOf( '(' + help_argument + ')' ) == -1 ) {\n                help_text += ' (' + help_argument + ')';\n            }\n            this.$info.html( help_text );\n            // render visibility\n            this.$el[ this.model.get( 'hidden' ) ? 'hide' : 'show' ]();\n            // render preview view for collapsed fields\n            this.$preview[ ( this.field.collapsed && this.model.get( 'collapsible_preview' ) || this.model.get( 'disabled' ) ) ? 'show' : 'hide' ]()\n                         .html( _.escape( this.model.get( 'text_value' ) ) );\n            // render error messages\n            var error_text = this.model.get( 'error_text' );\n            this.$error[ error_text ? 'show' : 'hide' ]();\n            this.$el[ error_text ? 'addClass' : 'removeClass' ]( 'ui-error' );\n            this.$error_text.html( error_text );\n            // render backdrop\n            this.$backdrop[ this.model.get( 'backdrop' ) ? 'show' : 'hide' ]();\n            // render input field\n            this.field.collapsed || this.model.get( 'disabled' ) ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set( { 'color': this.model.get( 'color' ), 'style': this.model.get( 'style' ) } );\n            // render collapsible options\n            if ( !this.model.get( 'disabled' ) && this.model.get( 'collapsible_value' ) !== undefined ) {\n                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text( this.model.get( 'label' ) );\n                this.$collapsible_icon.removeClass().addClass( 'icon' )\n                                      .addClass( this.model.get( 'cls_' +  collapsible_state ) )\n                                      .attr( 'data-original-title', this.model.get( 'text_' + collapsible_state ) )\n                                      .tooltip( { placement: 'bottom' } );\n            } else {\n                this.$title_text.show().text( this.model.get( 'label' ) );\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return  $( '<div/>' ).addClass( 'ui-form-element' )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-error ui-error' )\n                                    .append( $( '<span/>' ).addClass( 'fa fa-arrow-down' ) )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-error-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-title' )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-collapsible' )\n                                        .append( $( '<i/>' ).addClass( 'ui-form-collapsible-icon' ) )\n                                        .append( $( '<span/>' ).addClass( 'ui-form-collapsible-text' ) )\n                                    )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-title-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-field' )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-info' ) )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-backdrop' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-preview' ) );\n        }\n    });\n});"]}