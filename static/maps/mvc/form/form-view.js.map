{"version":3,"sources":["mvc/form/form-view.js"],"names":["_utils","require","_uiPortlet","_uiMisc","_formSection","_formData","Backbone","View","extend","initialize","options","this","model","Model","initial_errors","cls","icon","always_refresh","status","hide_operations","onchange","set","setElement","render","update","new_model","self","data","matchModel","node","input_id","input","input_list","_","isEqual","field_list","field","new_options","indexOf","type","i","opt","length","push","label","value","Galaxy","wait","active","trigger","unwait","emit","debug","highlight","message","silent","input_element","element_list","error","expand","is_dynamic","$el","parents","filter","$","css","$panel","portlet","scrollTop","errors","error_messages","matchResponse","off","_formData2","default","Manager","_renderForm","create","get","attributes","current_check","checksum","on","new_check","each","reset","section","inputs","_uiMisc2","UnescapedMessage","title","operations","buttons","collapsible","collapsed","onchange_title","append","persistent"],"mappings":"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","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\nimport Utils from \"utils/utils\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport FormSection from \"mvc/form/form-section\";\nimport FormData from \"mvc/form/form-data\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        this.model = new Backbone.Model({\n            initial_errors: false,\n            cls: \"ui-portlet-limited\",\n            icon: null,\n            always_refresh: true,\n            status: \"warning\",\n            hide_operations: false,\n            onchange: function() {}\n        }).set(options);\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Update available options */\n    update: function(new_model) {\n        var self = this;\n        this.data.matchModel(new_model, function(node, input_id) {\n            var input = self.input_list[input_id];\n            if (input && input.options) {\n                if (!_.isEqual(input.options, node.options)) {\n                    input.options = node.options;\n                    var field = self.field_list[input_id];\n                    if (field.update) {\n                        var new_options = [];\n                        if (\n                            [\"data\", \"data_collection\", \"drill_down\"].indexOf(\n                                input.type\n                            ) != -1\n                        ) {\n                            new_options = input.options;\n                        } else {\n                            for (var i in node.options) {\n                                var opt = node.options[i];\n                                if (opt.length > 2) {\n                                    new_options.push({\n                                        label: opt[0],\n                                        value: opt[1]\n                                    });\n                                }\n                            }\n                        }\n                        field.update(new_options);\n                        field.trigger(\"change\");\n                        Galaxy.emit.debug(\n                            \"form-view::update()\",\n                            \"Updating options for \" + input_id\n                        );\n                    }\n                }\n            }\n        });\n    },\n\n    /** Set form into wait mode */\n    wait: function(active) {\n        for (var i in this.input_list) {\n            var field = this.field_list[i];\n            var input = this.input_list[i];\n            if (input.is_dynamic && field.wait && field.unwait) {\n                field[active ? \"wait\" : \"unwait\"]();\n            }\n        }\n    },\n\n    /** Highlight and scroll to input element (currently only used for error notifications) */\n    highlight: function(input_id, message, silent) {\n        var input_element = this.element_list[input_id];\n        if (input_element) {\n            input_element.error(message || \"Please verify this parameter.\");\n            this.portlet.expand();\n            this.trigger(\"expand\", input_id);\n            if (!silent) {\n                var $panel = this.$el\n                    .parents()\n                    .filter(function() {\n                        return (\n                            [\"auto\", \"scroll\"].indexOf(\n                                $(this).css(\"overflow\")\n                            ) != -1\n                        );\n                    })\n                    .first();\n                $panel.animate(\n                    {\n                        scrollTop:\n                            $panel.scrollTop() +\n                            input_element.$el.offset().top -\n                            120\n                    },\n                    500\n                );\n            }\n        }\n    },\n\n    /** Highlights errors */\n    errors: function(options) {\n        this.trigger(\"reset\");\n        if (options && options.errors) {\n            var error_messages = this.data.matchResponse(options.errors);\n            for (var input_id in this.element_list) {\n                var input = this.element_list[input_id];\n                if (error_messages[input_id]) {\n                    this.highlight(input_id, error_messages[input_id], true);\n                }\n            }\n        }\n    },\n\n    /** Render tool form */\n    render: function() {\n        var self = this;\n        this.off(\"change\");\n        this.off(\"reset\");\n        // contains the dom field elements as created by the parameter factory i.e. form-parameters\n        this.field_list = {};\n        // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n        this.input_list = {};\n        // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n        this.element_list = {};\n        // converts the form into a json data structure\n        this.data = new FormData.Manager(this);\n        this._renderForm();\n        this.data.create();\n        this.model.get(\"initial_errors\") && this.errors(this.model.attributes);\n        // add listener which triggers on checksum change, and reset the form input wrappers\n        var current_check = this.data.checksum();\n        this.on(\"change\", function(input_id) {\n            var input = self.input_list[input_id];\n            if (\n                !input ||\n                input.refresh_on_change ||\n                self.model.get(\"always_refresh\")\n            ) {\n                var new_check = self.data.checksum();\n                if (new_check != current_check) {\n                    current_check = new_check;\n                    self.model.get(\"onchange\")();\n                }\n            }\n        });\n        this.on(\"reset\", function() {\n            _.each(self.element_list, function(input_element) {\n                input_element.reset();\n            });\n        });\n        return this;\n    },\n\n    /** Renders/appends dom elements of the form */\n    _renderForm: function() {\n        $(\".tooltip\").remove();\n        var options = this.model.attributes;\n        this.message = new Ui.UnescapedMessage();\n        this.section = new FormSection.View(this, {\n            inputs: options.inputs\n        });\n        this.portlet = new Portlet.View({\n            icon: options.icon,\n            title: options.title,\n            cls: options.cls,\n            operations: !options.hide_operations && options.operations,\n            buttons: options.buttons,\n            collapsible: options.collapsible,\n            collapsed: options.collapsed,\n            onchange_title: options.onchange_title\n        });\n        this.portlet.append(this.message.$el);\n        this.portlet.append(this.section.$el);\n        this.$el.empty();\n        options.inputs && this.$el.append(this.portlet.$el);\n        options.message &&\n            this.message.update({\n                persistent: true,\n                status: options.status,\n                message: options.message\n            });\n        Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n    }\n});\n"]}