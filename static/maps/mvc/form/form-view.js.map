{"version":3,"sources":["mvc/form/form-view.js"],"names":["define","Utils","Portlet","Ui","FormSection","FormData","Backbone","View","extend","initialize","options","this","model","Model","initial_errors","cls","icon","always_refresh","message_status","set","setElement","render","update","new_model","self","data","matchModel","node","input_id","input","input_list","_","isEqual","field","field_list","new_options","indexOf","type","i","opt","length","push","label","value","trigger","Galaxy","emit","debug","wait","active","is_dynamic","unwait","highlight","message","silent","input_element","element_list","error","portlet","expand","$panel","$el","parents","filter","$","css","first","animate","scrollTop","offset","top","errors","error_messages","matchResponse","off","Manager","_renderForm","create","get","attributes","current_check","checksum","on","refresh_on_change","new_check","each","reset","remove","UnescapedMessage","section","inputs","title","operations","buttons","collapsible","collapsed","onchange_title","append","empty","persistent","status"],"mappings":"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","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc', 'mvc/form/form-section', 'mvc/form/form-data' ],\nfunction( Utils, Portlet, Ui, FormSection, FormData ) {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = new Backbone.Model({\n                initial_errors  : false,\n                cls             : 'ui-portlet-limited',\n                icon            : null,\n                always_refresh  : true,\n                message_status  : 'warning'\n            }).set( options );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        /** Update available options */\n        update: function( new_model ){\n            var self = this;\n            this.data.matchModel( new_model, function( node, input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( input && input.options ) {\n                    if ( !_.isEqual( input.options, node.options ) ) {\n                        input.options = node.options;\n                        var field = self.field_list[ input_id ];\n                        if ( field.update ) {\n                            var new_options = [];\n                            if ( ( [ 'data', 'data_collection', 'drill_down' ] ).indexOf( input.type ) != -1 ) {\n                                new_options = input.options;\n                            } else {\n                                for ( var i in node.options ) {\n                                    var opt = node.options[ i ];\n                                    if ( opt.length > 2 ) {\n                                        new_options.push( { label: opt[ 0 ], value: opt[ 1 ] } );\n                                    }\n                                }\n                            }\n                            field.update( new_options );\n                            field.trigger( 'change' );\n                            Galaxy.emit.debug( 'form-view::update()', 'Updating options for ' + input_id );\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function( active ) {\n            for ( var i in this.input_list ) {\n                var field = this.field_list[ i ];\n                var input = this.input_list[ i ];\n                if ( input.is_dynamic && field.wait && field.unwait ) {\n                    field[ active ? 'wait' : 'unwait' ]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function ( input_id, message, silent ) {\n            var input_element = this.element_list[ input_id ];\n            if ( input_element ) {\n                input_element.error( message || 'Please verify this parameter.' );\n                this.portlet.expand();\n                this.trigger( 'expand', input_id );\n                if ( !silent ) {\n                    var $panel = this.$el.parents().filter(function() {\n                        return [ 'auto', 'scroll' ].indexOf( $( this ).css( 'overflow' ) ) != -1;\n                    }).first();\n                    $panel.animate( { scrollTop : $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500 );\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function( options ) {\n            this.trigger( 'reset' );\n            if ( options && options.errors ) {\n                var error_messages = this.data.matchResponse( options.errors );\n                for ( var input_id in this.element_list ) {\n                    var input = this.element_list[ input_id ];\n                    if ( error_messages[ input_id ] ) {\n                        this.highlight( input_id, error_messages[ input_id ], true );\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function() {\n            var self = this;\n            this.off('change');\n            this.off('reset');\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager( this );\n            this._renderForm();\n            this.data.create();\n            this.model.get( 'initial_errors' ) && this.errors( this.model.attributes );\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on( 'change', function( input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( !input || input.refresh_on_change || self.model.get( 'always_refresh' ) ) {\n                    var new_check = self.data.checksum();\n                    if ( new_check != current_check ) {\n                        current_check = new_check;\n                        self.model.get( 'onchange' ) && self.model.get( 'onchange' )();\n                    }\n                }\n            });\n            this.on('reset', function() {\n                _.each( self.element_list, function( input_element ) { input_element.reset() } );\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function() {\n            $( '.tooltip' ).remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View( this, { inputs: options.inputs } );\n            this.portlet = new Portlet.View({\n                icon            : options.icon,\n                title           : options.title,\n                cls             : options.cls,\n                operations      : options.operations,\n                buttons         : options.buttons,\n                collapsible     : options.collapsible,\n                collapsed       : options.collapsed,\n                onchange_title  : options.onchange_title\n            });\n            this.portlet.append( this.message.$el );\n            this.portlet.append( this.section.$el );\n            this.$el.empty();\n            options.inputs && this.$el.append( this.portlet.$el );\n            options.message && this.message.update( { persistent: true, status: options.message_status, message: options.message } );\n            Galaxy.emit.debug( 'form-view::initialize()', 'Completed' );\n        }\n    });\n});\n"]}