{"version":3,"sources":["mvc/form/form-view.js"],"names":["Backbone","View","extend","initialize","options","this","model","Model","initial_errors","cls","icon","always_refresh","status","hide_operations","onchange","set","setElement","render","new_model","self","node","input_id","input_list","input","field_list","update","new_options","indexOf","type","matchModel","i","push","field","trigger","Galaxy","emit","debug","is_dynamic","wait","unwait","active","highlight","silent","input_element","error","message","portlet","expand","$panel","$el","parents","css","first","scrollTop","offset","top","errors","error_messages","data","matchResponse","element_list","off","current_check","Manager","_renderForm","create","get","refresh_on_change","attributes","new_check","inputs","_","reset","checksum","$","each","title","operations","buttons","collapsible","collapsed","_uiPortlet2","default","append","empty","persistent","section"],"mappings":"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","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\nimport Utils from \"utils/utils\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport FormSection from \"mvc/form/form-section\";\nimport FormData from \"mvc/form/form-data\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        this.model = new Backbone.Model({\n            initial_errors: false,\n            cls: \"ui-portlet-limited\",\n            icon: null,\n            always_refresh: true,\n            status: \"warning\",\n            hide_operations: false,\n            onchange: function() {}\n        }).set(options);\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Update available options */\n    update: function(new_model) {\n        var self = this;\n        this.data.matchModel(new_model, function(node, input_id) {\n            var input = self.input_list[input_id];\n            if (input && input.options) {\n                if (!_.isEqual(input.options, node.options)) {\n                    input.options = node.options;\n                    var field = self.field_list[input_id];\n                    if (field.update) {\n                        var new_options = [];\n                        if (\n                            [\"data\", \"data_collection\", \"drill_down\"].indexOf(\n                                input.type\n                            ) != -1\n                        ) {\n                            new_options = input.options;\n                        } else {\n                            for (var i in node.options) {\n                                var opt = node.options[i];\n                                if (opt.length > 2) {\n                                    new_options.push({\n                                        label: opt[0],\n                                        value: opt[1]\n                                    });\n                                }\n                            }\n                        }\n                        field.update(new_options);\n                        field.trigger(\"change\");\n                        Galaxy.emit.debug(\n                            \"form-view::update()\",\n                            \"Updating options for \" + input_id\n                        );\n                    }\n                }\n            }\n        });\n    },\n\n    /** Set form into wait mode */\n    wait: function(active) {\n        for (var i in this.input_list) {\n            var field = this.field_list[i];\n            var input = this.input_list[i];\n            if (input.is_dynamic && field.wait && field.unwait) {\n                field[active ? \"wait\" : \"unwait\"]();\n            }\n        }\n    },\n\n    /** Highlight and scroll to input element (currently only used for error notifications) */\n    highlight: function(input_id, message, silent) {\n        var input_element = this.element_list[input_id];\n        if (input_element) {\n            input_element.error(message || \"Please verify this parameter.\");\n            this.portlet.expand();\n            this.trigger(\"expand\", input_id);\n            if (!silent) {\n                var $panel = this.$el\n                    .parents()\n                    .filter(function() {\n                        return (\n                            [\"auto\", \"scroll\"].indexOf(\n                                $(this).css(\"overflow\")\n                            ) != -1\n                        );\n                    })\n                    .first();\n                $panel.animate(\n                    {\n                        scrollTop:\n                            $panel.scrollTop() +\n                            input_element.$el.offset().top -\n                            120\n                    },\n                    500\n                );\n            }\n        }\n    },\n\n    /** Highlights errors */\n    errors: function(options) {\n        this.trigger(\"reset\");\n        if (options && options.errors) {\n            var error_messages = this.data.matchResponse(options.errors);\n            for (var input_id in this.element_list) {\n                var input = this.element_list[input_id];\n                if (error_messages[input_id]) {\n                    this.highlight(input_id, error_messages[input_id], true);\n                }\n            }\n        }\n    },\n\n    /** Render tool form */\n    render: function() {\n        var self = this;\n        this.off(\"change\");\n        this.off(\"reset\");\n        // contains the dom field elements as created by the parameter factory i.e. form-parameters\n        this.field_list = {};\n        // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n        this.input_list = {};\n        // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n        this.element_list = {};\n        // converts the form into a json data structure\n        this.data = new FormData.Manager(this);\n        this._renderForm();\n        this.data.create();\n        this.model.get(\"initial_errors\") && this.errors(this.model.attributes);\n        // add listener which triggers on checksum change, and reset the form input wrappers\n        var current_check = this.data.checksum();\n        this.on(\"change\", function(input_id) {\n            var input = self.input_list[input_id];\n            if (\n                !input ||\n                input.refresh_on_change ||\n                self.model.get(\"always_refresh\")\n            ) {\n                var new_check = self.data.checksum();\n                if (new_check != current_check) {\n                    current_check = new_check;\n                    self.model.get(\"onchange\")();\n                }\n            }\n        });\n        this.on(\"reset\", function() {\n            _.each(self.element_list, function(input_element) {\n                input_element.reset();\n            });\n        });\n        return this;\n    },\n\n    /** Renders/appends dom elements of the form */\n    _renderForm: function() {\n        $(\".tooltip\").remove();\n        var options = this.model.attributes;\n        this.message = new Ui.UnescapedMessage();\n        this.section = new FormSection.View(this, {\n            inputs: options.inputs\n        });\n        this.portlet = new Portlet.View({\n            icon: options.icon,\n            title: options.title,\n            cls: options.cls,\n            operations: !options.hide_operations && options.operations,\n            buttons: options.buttons,\n            collapsible: options.collapsible,\n            collapsed: options.collapsed,\n            onchange_title: options.onchange_title\n        });\n        this.portlet.append(this.message.$el);\n        this.portlet.append(this.section.$el);\n        this.$el.empty();\n        options.inputs && this.$el.append(this.portlet.$el);\n        options.message &&\n            this.message.update({\n                persistent: true,\n                status: options.status,\n                message: options.message\n            });\n        Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n    }\n});\n"]}