{"version":3,"sources":["mvc/form/form-view.js"],"names":["define","Utils","Portlet","Ui","FormSection","FormData","Backbone","View","extend","initialize","Model","initial_errors","cls","icon","always_refresh","status","this","set","setElement","update","new_model","self","node","input_id","data","matchModel","input","input_list","options","isEqual","field","field_list","new_options","indexOf","type","i","opt","push","label","value","trigger","wait","active","unwait","is_dynamic","highlight","message","silent","element_list","input_element","error","portlet","expand","$el","parents","filter","$panel","$","css","first","scrollTop","offset","top","errors","matchResponse","error_messages","render","off","Manager","_renderForm","create","model","attributes","current_check","checksum","get","refresh_on_change","new_check","on","_","reset","remove","UnescapedMessage","section","inputs","title","operations","buttons","collapsible","onchange_title","collapsed","empty","append","persistent","Galaxy"],"mappings":"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","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc', 'mvc/form/form-section', 'mvc/form/form-data' ],\nfunction( Utils, Portlet, Ui, FormSection, FormData ) {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = new Backbone.Model({\n                initial_errors  : false,\n                cls             : 'ui-portlet-limited',\n                icon            : null,\n                always_refresh  : true,\n                status          : 'warning'\n            }).set( options );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        /** Update available options */\n        update: function( new_model ){\n            var self = this;\n            this.data.matchModel( new_model, function( node, input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( input && input.options ) {\n                    if ( !_.isEqual( input.options, node.options ) ) {\n                        input.options = node.options;\n                        var field = self.field_list[ input_id ];\n                        if ( field.update ) {\n                            var new_options = [];\n                            if ( ( [ 'data', 'data_collection', 'drill_down' ] ).indexOf( input.type ) != -1 ) {\n                                new_options = input.options;\n                            } else {\n                                for ( var i in node.options ) {\n                                    var opt = node.options[ i ];\n                                    if ( opt.length > 2 ) {\n                                        new_options.push( { label: opt[ 0 ], value: opt[ 1 ] } );\n                                    }\n                                }\n                            }\n                            field.update( new_options );\n                            field.trigger( 'change' );\n                            Galaxy.emit.debug( 'form-view::update()', 'Updating options for ' + input_id );\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function( active ) {\n            for ( var i in this.input_list ) {\n                var field = this.field_list[ i ];\n                var input = this.input_list[ i ];\n                if ( input.is_dynamic && field.wait && field.unwait ) {\n                    field[ active ? 'wait' : 'unwait' ]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function ( input_id, message, silent ) {\n            var input_element = this.element_list[ input_id ];\n            if ( input_element ) {\n                input_element.error( message || 'Please verify this parameter.' );\n                this.portlet.expand();\n                this.trigger( 'expand', input_id );\n                if ( !silent ) {\n                    var $panel = this.$el.parents().filter(function() {\n                        return [ 'auto', 'scroll' ].indexOf( $( this ).css( 'overflow' ) ) != -1;\n                    }).first();\n                    $panel.animate( { scrollTop : $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500 );\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function( options ) {\n            this.trigger( 'reset' );\n            if ( options && options.errors ) {\n                var error_messages = this.data.matchResponse( options.errors );\n                for ( var input_id in this.element_list ) {\n                    var input = this.element_list[ input_id ];\n                    if ( error_messages[ input_id ] ) {\n                        this.highlight( input_id, error_messages[ input_id ], true );\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function() {\n            var self = this;\n            this.off('change');\n            this.off('reset');\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager( this );\n            this._renderForm();\n            this.data.create();\n            this.model.get( 'initial_errors' ) && this.errors( this.model.attributes );\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on( 'change', function( input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( !input || input.refresh_on_change || self.model.get( 'always_refresh' ) ) {\n                    var new_check = self.data.checksum();\n                    if ( new_check != current_check ) {\n                        current_check = new_check;\n                        self.model.get( 'onchange' ) && self.model.get( 'onchange' )();\n                    }\n                }\n            });\n            this.on('reset', function() {\n                _.each( self.element_list, function( input_element ) { input_element.reset() } );\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function() {\n            $( '.tooltip' ).remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View( this, { inputs: options.inputs } );\n            this.portlet = new Portlet.View({\n                icon            : options.icon,\n                title           : options.title,\n                cls             : options.cls,\n                operations      : options.operations,\n                buttons         : options.buttons,\n                collapsible     : options.collapsible,\n                collapsed       : options.collapsed,\n                onchange_title  : options.onchange_title\n            });\n            this.portlet.append( this.message.$el );\n            this.portlet.append( this.section.$el );\n            this.$el.empty();\n            options.inputs && this.$el.append( this.portlet.$el );\n            options.message && this.message.update( { persistent: true, status: options.status, message: options.message } );\n            Galaxy.emit.debug( 'form-view::initialize()', 'Completed' );\n        }\n    });\n});\n"]}