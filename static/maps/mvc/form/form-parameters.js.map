{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["_utils","require","_uiMisc","_uiSelectContent","_uiSelectLibrary","_uiSelectFtp","_uiSelectGenomespace","_uiColorPicker","Backbone","Model","extend","types","text","password","select","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","library_data","ftpfile","upload","genomespacefile","create","input_def","fieldClass","type","field","this","call","options","_fieldSelect","_fieldText","undefined","value","View","id","extensions","optional","multiple","flavor","is_workflow","onchange","_","each","option","push","label","SelectClass","display","_uiMisc2","default","Checkbox","Radio","RadioButton","error_text","readonly","individual","searchable","_fieldDrilldown","_utils2","isEmpty","$","isArray","str_value","Drilldown","String","i","area","placeholder","datalist","_fieldSlider","precise","min","max","info","_uiSelectLibrary2","_uiSelectFtp2","_fieldLibrary","_fieldGenomeSpace","self","_uiSelectGenomespace2","_fieldFtp","app","trigger","_fieldUpload","Upload"],"mappings":"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","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport SelectContent from \"mvc/ui/ui-select-content\";\nimport SelectLibrary from \"mvc/ui/ui-select-library\";\nimport SelectFtp from \"mvc/ui/ui-select-ftp\";\nimport SelectGenomeSpace from \"mvc/ui/ui-select-genomespace\";\nimport ColorPicker from \"mvc/ui/ui-color-picker\";\n// create form view\nexport default Backbone.Model.extend({\n    /** Available parameter types */\n    types: {\n        text: \"_fieldText\",\n        password: \"_fieldText\",\n        select: \"_fieldSelect\",\n        data_column: \"_fieldSelect\",\n        genomebuild: \"_fieldSelect\",\n        data: \"_fieldData\",\n        data_collection: \"_fieldData\",\n        integer: \"_fieldSlider\",\n        float: \"_fieldSlider\",\n        boolean: \"_fieldBoolean\",\n        drill_down: \"_fieldDrilldown\",\n        color: \"_fieldColor\",\n        hidden: \"_fieldHidden\",\n        hidden_data: \"_fieldHidden\",\n        baseurl: \"_fieldHidden\",\n        library_data: \"_fieldLibrary\",\n        ftpfile: \"_fieldFtp\",\n        upload: \"_fieldUpload\",\n        genomespacefile: \"_fieldGenomeSpace\"\n    },\n\n    /** Returns an input field for a given field type */\n    create: function(input_def) {\n        var fieldClass = this.types[input_def.type];\n        var field =\n            typeof this[fieldClass] === \"function\"\n                ? this[fieldClass].call(this, input_def)\n                : null;\n        if (!field) {\n            field = input_def.options\n                ? this._fieldSelect(input_def)\n                : this._fieldText(input_def);\n            Galaxy.emit.debug(\n                \"form-parameters::_addRow()\",\n                \"Auto matched field type (\" + input_def.type + \").\"\n            );\n        }\n        input_def.value === undefined && (input_def.value = null);\n        field.value(input_def.value);\n        return field;\n    },\n\n    /** Data input field */\n    _fieldData: function(input_def) {\n        return new SelectContent.View({\n            id: \"field-\" + input_def.id,\n            extensions: input_def.extensions,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            type: input_def.type,\n            flavor: input_def.flavor,\n            data: input_def.options,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Select/Checkbox/Radio options field */\n    _fieldSelect: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // customize properties\n        if (input_def.type == \"data_column\") {\n            input_def.error_text = \"Missing columns in referenced dataset.\";\n        }\n\n        // identify available options\n        var data = input_def.data;\n        if (!data) {\n            data = [];\n            _.each(input_def.options, function(option) {\n                data.push({ label: option[0], value: option[1] });\n            });\n        }\n\n        // identify display type\n        var SelectClass = Ui.Select;\n        switch (input_def.display) {\n            case \"checkboxes\":\n                SelectClass = Ui.Checkbox;\n                break;\n            case \"radio\":\n                SelectClass = Ui.Radio;\n                break;\n            case \"radiobutton\":\n                SelectClass = Ui.RadioButton;\n                break;\n        }\n\n        // create select field\n        return new SelectClass.View({\n            id: \"field-\" + input_def.id,\n            data: data,\n            error_text: input_def.error_text || \"No options available\",\n            readonly: input_def.readonly,\n            multiple: input_def.multiple,\n            optional: input_def.optional,\n            onchange: input_def.onchange,\n            individual: input_def.individual,\n            searchable: input_def.flavor !== \"workflow\"\n        });\n    },\n\n    /** Drill down options field */\n    _fieldDrilldown: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // create drill down field\n        return new Ui.Drilldown.View({\n            id: \"field-\" + input_def.id,\n            data: input_def.options,\n            display: input_def.display,\n            optional: input_def.optional,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Text input field */\n    _fieldText: function(input_def) {\n        // field replaces e.g. a select field\n        if (input_def.options && input_def.data) {\n            input_def.area = input_def.multiple;\n            if (Utils.isEmpty(input_def.value)) {\n                input_def.value = null;\n            } else {\n                if ($.isArray(input_def.value)) {\n                    var str_value = \"\";\n                    for (var i in input_def.value) {\n                        str_value += String(input_def.value[i]);\n                        if (!input_def.multiple) {\n                            break;\n                        }\n                        str_value += \"\\n\";\n                    }\n                    input_def.value = str_value;\n                }\n            }\n        }\n        // create input element\n        return new Ui.Input({\n            id: \"field-\" + input_def.id,\n            type: input_def.type,\n            area: input_def.area,\n            readonly: input_def.readonly,\n            placeholder: input_def.placeholder,\n            datalist: input_def.datalist,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Slider field */\n    _fieldSlider: function(input_def) {\n        return new Ui.Slider.View({\n            id: \"field-\" + input_def.id,\n            precise: input_def.type == \"float\",\n            is_workflow: input_def.is_workflow,\n            min: input_def.min,\n            max: input_def.max,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Hidden field */\n    _fieldHidden: function(input_def) {\n        return new Ui.Hidden({\n            id: \"field-\" + input_def.id,\n            info: input_def.info\n        });\n    },\n\n    /** Boolean field */\n    _fieldBoolean: function(input_def) {\n        return new Ui.RadioButton.View({\n            id: \"field-\" + input_def.id,\n            data: [\n                { label: \"Yes\", value: \"true\" },\n                { label: \"No\", value: \"false\" }\n            ],\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Color picker field */\n    _fieldColor: function(input_def) {\n        return new ColorPicker({\n            id: \"field-\" + input_def.id,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Library dataset field */\n    _fieldLibrary: function(input_def) {\n        return new SelectLibrary.View({\n            id: \"field-\" + input_def.id,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** FTP file field */\n    _fieldFtp: function(input_def) {\n        return new SelectFtp.View({\n            id: \"field-\" + input_def.id,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** GenomeSpace file select field\n         */\n    _fieldGenomeSpace: function(input_def) {\n        var self = this;\n        return new SelectGenomeSpace.View({\n            id: \"field-\" + input_def.id,\n            onchange: function() {\n                self.app.trigger(\"change\");\n            }\n        });\n    },\n\n    /** Upload file field */\n    _fieldUpload: function(input_def) {\n        return new Ui.Upload({\n            id: \"field-\" + input_def.id,\n            onchange: input_def.onchange\n        });\n    }\n});\n"]}