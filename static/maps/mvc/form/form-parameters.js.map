{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["define","types","Ui","SelectContent","SelectLibrary","SelectFtp","SelectGenomeSpace","ColorPicker","Backbone","Model","extend","text","password","select","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","library_data","ftpfile","create","input_def","genomespacefile","Galaxy","emit","fieldClass","this","type","value","undefined","call","field","options","_fieldSelect","_fieldText","debug","_fieldData","multiple","View","flavor","id","extensions","onchange","error_text","_","each","option","SelectClass","Select","Checkbox","Radio","optional","individual","searchable","_fieldDrilldown","Drilldown","display","isArray","area","str_value","Utils","isEmpty","$","String","i","placeholder","datalist","readonly","_fieldSlider","min","max","precise","is_workflow","_fieldHidden","Hidden","_fieldBoolean","info","RadioButton","label","_fieldColor","_fieldLibrary","_fieldFtp","_fieldGenomeSpace","self","_fieldUpload","app","trigger","Upload"],"mappings":"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","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(['utils/utils',\n        'mvc/ui/ui-misc',\n        'mvc/ui/ui-select-content',\n        'mvc/ui/ui-select-library',\n        'mvc/ui/ui-select-ftp',\n        'mvc/ui/ui-select-genomespace',\n        'mvc/ui/ui-color-picker'],\n    function( Utils, Ui, SelectContent, SelectLibrary, SelectFtp, SelectGenomeSpace, ColorPicker ) {\n\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            'text'              : '_fieldText',\n            'password'          : '_fieldText',\n            'select'            : '_fieldSelect',\n            'data_column'       : '_fieldSelect',\n            'genomebuild'       : '_fieldSelect',\n            'data'              : '_fieldData',\n            'data_collection'   : '_fieldData',\n            'integer'           : '_fieldSlider',\n            'float'             : '_fieldSlider',\n            'boolean'           : '_fieldBoolean',\n            'drill_down'        : '_fieldDrilldown',\n            'color'             : '_fieldColor',\n            'hidden'            : '_fieldHidden',\n            'hidden_data'       : '_fieldHidden',\n            'baseurl'           : '_fieldHidden',\n            'library_data'      : '_fieldLibrary',\n            'ftpfile'           : '_fieldFtp',\n            'upload'            : '_fieldUpload',\n            'genomespacefile'   : '_fieldGenomeSpace'\n        },\n\n        /** Returns an input field for a given field type */\n        create: function( input_def ) {\n            var fieldClass = this.types[ input_def.type ];\n            var field = typeof( this[ fieldClass ] ) === 'function' ? this[ fieldClass ].call( this, input_def ) : null;\n            if ( !field ) {\n                field = input_def.options ? this._fieldSelect( input_def ) : this._fieldText( input_def );\n                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n            }\n            input_def.value === undefined && ( input_def.value = null );\n            field.value( input_def.value );\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function( input_def ) {\n            return new SelectContent.View({\n                id          : 'field-' + input_def.id,\n                extensions  : input_def.extensions,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                type        : input_def.type,\n                flavor      : input_def.flavor,\n                data        : input_def.options,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // customize properties\n            if ( input_def.type == 'data_column' ) {\n                input_def.error_text = 'Missing columns in referenced dataset.'\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if( !data ) {\n                data = [];\n                _.each( input_def.options, function( option ) {\n                    data.push( { label: option[ 0 ], value: option[ 1 ] } );\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch ( input_def.display ) {\n                case 'checkboxes':\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case 'radio':\n                    SelectClass = Ui.Radio;\n                    break;\n                case 'radiobutton':\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id          : 'field-' + input_def.id,\n                data        : data,\n                error_text  : input_def.error_text || 'No options available',\n                multiple    : input_def.multiple,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange,\n                individual  : input_def.individual,\n                searchable  : input_def.flavor !== 'workflow'\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id          : 'field-' + input_def.id,\n                data        : input_def.options,\n                display     : input_def.display,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function( input_def ) {\n            // field replaces e.g. a select field\n            if ( input_def.options && input_def.data ) {\n                input_def.area = input_def.multiple;\n                if ( Utils.isEmpty( input_def.value ) ) {\n                    input_def.value = null;\n                } else {\n                    if ( $.isArray( input_def.value ) ) {\n                        var str_value = '';\n                        for ( var i in input_def.value ) {\n                            str_value += String( input_def.value[ i ] );\n                            if ( !input_def.multiple ) {\n                                break;\n                            }\n                            str_value += '\\n';\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id          : 'field-' + input_def.id,\n                type        : input_def.type,\n                area        : input_def.area,\n                readonly    : input_def.readonly,\n                placeholder : input_def.placeholder,\n                datalist    : input_def.datalist,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function( input_def ) {\n            return new Ui.Slider.View({\n                id          : 'field-' + input_def.id,\n                precise     : input_def.type == 'float',\n                is_workflow : input_def.is_workflow,\n                min         : input_def.min,\n                max         : input_def.max,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function( input_def ) {\n            return new Ui.Hidden({\n                id          : 'field-' + input_def.id,\n                info        : input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function( input_def ) {\n            return new Ui.RadioButton.View({\n                id          : 'field-' + input_def.id,\n                data        : [ { label : 'Yes', value : 'true'  },\n                                { label : 'No',  value : 'false' }],\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function( input_def ) {\n            return new ColorPicker({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function( input_def ) {\n            return new SelectLibrary.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function( input_def ) {\n            return new SelectFtp.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** GenomeSpace file select field\n         */\n        _fieldGenomeSpace: function( input_def ) {\n             var self = this;\n             return new SelectGenomeSpace.View({\n                 id          : 'field-' + input_def.id,\n                 onchange    : function() {\n                     self.app.trigger( 'change' );\n                 }\n             });\n         },\n\n        /** Upload file field */\n        _fieldUpload: function( input_def ) {\n            return new Ui.Upload({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        }\n    });\n\n    return {\n        View: View\n    };\n});"]}