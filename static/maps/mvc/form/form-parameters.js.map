{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["define","Utils","Ui","SelectContent","SelectLibrary","SelectFtp","ColorPicker","Backbone","Model","extend","types","text","password","select","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","library_data","create","input_def","field","Galaxy","debug","type","this","fieldClass","call","_fieldData","value","_fieldSelect","_fieldText","undefined","optional","multiple","id","flavor","extensions","onchange","options","is_workflow","label","_","each","option","push","SelectClass","Select","display","Checkbox","Radio","RadioButton","searchable","_fieldDrilldown","Drilldown","isEmpty","isArray","str_value","$","i","String","readonly","placeholder","datalist","min","max","_fieldHidden","Hidden","info","View","_fieldColor","_fieldLibrary","_fieldFtp"],"mappings":"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","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(['utils/utils',\n        'mvc/ui/ui-misc',\n        'mvc/ui/ui-select-content',\n        'mvc/ui/ui-select-library',\n        'mvc/ui/ui-select-ftp',\n        'mvc/ui/ui-color-picker'],\n    function( Utils, Ui, SelectContent, SelectLibrary, SelectFtp, ColorPicker ) {\n\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            'text'              : '_fieldText',\n            'password'          : '_fieldText',\n            'select'            : '_fieldSelect',\n            'data_column'       : '_fieldSelect',\n            'genomebuild'       : '_fieldSelect',\n            'data'              : '_fieldData',\n            'data_collection'   : '_fieldData',\n            'integer'           : '_fieldSlider',\n            'float'             : '_fieldSlider',\n            'boolean'           : '_fieldBoolean',\n            'drill_down'        : '_fieldDrilldown',\n            'color'             : '_fieldColor',\n            'hidden'            : '_fieldHidden',\n            'hidden_data'       : '_fieldHidden',\n            'baseurl'           : '_fieldHidden',\n            'library_data'      : '_fieldLibrary',\n            'ftpfile'           : '_fieldFtp'\n        },\n\n        /** Returns an input field for a given field type */\n        create: function( input_def ) {\n            var fieldClass = this.types[ input_def.type ];\n            var field = typeof( this[ fieldClass ] ) === 'function' ? this[ fieldClass ].call( this, input_def ) : null;\n            if ( !field ) {\n                field = input_def.options ? this._fieldSelect( input_def ) : this._fieldText( input_def );\n                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n            }\n            input_def.value === undefined && ( input_def.value = null );\n            field.value( input_def.value );\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function( input_def ) {\n            return new SelectContent.View({\n                id          : 'field-' + input_def.id,\n                extensions  : input_def.extensions,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                type        : input_def.type,\n                flavor      : input_def.flavor,\n                data        : input_def.options,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // customize properties\n            if ( input_def.type == 'data_column' ) {\n                input_def.error_text = 'Missing columns in referenced dataset.'\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if( !data ) {\n                data = [];\n                _.each( input_def.options, function( option ) {\n                    data.push( { label: option[ 0 ], value: option[ 1 ] } );\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch ( input_def.display ) {\n                case 'checkboxes':\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case 'radio':\n                    SelectClass = Ui.Radio;\n                    break;\n                case 'radiobutton':\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id          : 'field-' + input_def.id,\n                data        : data,\n                error_text  : input_def.error_text || 'No options available',\n                multiple    : input_def.multiple,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange,\n                searchable  : input_def.flavor !== 'workflow'\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id          : 'field-' + input_def.id,\n                data        : input_def.options,\n                display     : input_def.display,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function( input_def ) {\n            // field replaces e.g. a select field\n            if ( input_def.options && input_def.data ) {\n                input_def.area = input_def.multiple;\n                if ( Utils.isEmpty( input_def.value ) ) {\n                    input_def.value = null;\n                } else {\n                    if ( $.isArray( input_def.value ) ) {\n                        var str_value = '';\n                        for ( var i in input_def.value ) {\n                            str_value += String( input_def.value[ i ] );\n                            if ( !input_def.multiple ) {\n                                break;\n                            }\n                            str_value += '\\n';\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id          : 'field-' + input_def.id,\n                type        : input_def.type,\n                area        : input_def.area,\n                readonly    : input_def.readonly,\n                placeholder : input_def.placeholder,\n                datalist    : input_def.datalist,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function( input_def ) {\n            return new Ui.Slider.View({\n                id          : 'field-' + input_def.id,\n                precise     : input_def.type == 'float',\n                is_workflow : input_def.is_workflow,\n                min         : input_def.min,\n                max         : input_def.max,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function( input_def ) {\n            return new Ui.Hidden({\n                id          : 'field-' + input_def.id,\n                info        : input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function( input_def ) {\n            return new Ui.RadioButton.View({\n                id          : 'field-' + input_def.id,\n                data        : [ { label : 'Yes', value : 'true'  },\n                                { label : 'No',  value : 'false' }],\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function( input_def ) {\n            return new ColorPicker({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function( input_def ) {\n            return new SelectLibrary.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function( input_def ) {\n            return new SelectFtp.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        }\n    });\n\n    return {\n        View: View\n    };\n});"]}