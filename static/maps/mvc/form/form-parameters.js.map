{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["Backbone","Model","extend","types","text","password","select","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","this","input_def","type","fieldClass","call","options","_fieldSelect","library_data","ftpfile","debug","upload","genomespacefile","undefined","value","create","field","Galaxy","emit","_uiSelectContent2","default","View","optional","multiple","flavor","_fieldData","onchange","error_text","_","each","option","SelectClass","_uiMisc2","Select","display","label","Radio","id","readonly","individual","searchable","Drilldown","_fieldDrilldown","is_workflow","_fieldText","_utils2","isEmpty","$","isArray","str_value","i","area","Input","placeholder","datalist","min","max","_fieldHidden","RadioButton","info","_uiColorPicker2","_uiSelectLibrary2","_fieldLibrary","_uiSelectFtp2","_fieldFtp","_fieldGenomeSpace","self","_uiSelectGenomespace2","_fieldUpload","Upload"],"mappings":"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","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport SelectContent from \"mvc/ui/ui-select-content\";\nimport SelectLibrary from \"mvc/ui/ui-select-library\";\nimport SelectFtp from \"mvc/ui/ui-select-ftp\";\nimport SelectGenomeSpace from \"mvc/ui/ui-select-genomespace\";\nimport ColorPicker from \"mvc/ui/ui-color-picker\";\n// create form view\nexport default Backbone.Model.extend({\n    /** Available parameter types */\n    types: {\n        text: \"_fieldText\",\n        password: \"_fieldText\",\n        select: \"_fieldSelect\",\n        data_column: \"_fieldSelect\",\n        genomebuild: \"_fieldSelect\",\n        data: \"_fieldData\",\n        data_collection: \"_fieldData\",\n        integer: \"_fieldSlider\",\n        float: \"_fieldSlider\",\n        boolean: \"_fieldBoolean\",\n        drill_down: \"_fieldDrilldown\",\n        color: \"_fieldColor\",\n        hidden: \"_fieldHidden\",\n        hidden_data: \"_fieldHidden\",\n        baseurl: \"_fieldHidden\",\n        library_data: \"_fieldLibrary\",\n        ftpfile: \"_fieldFtp\",\n        upload: \"_fieldUpload\",\n        genomespacefile: \"_fieldGenomeSpace\"\n    },\n\n    /** Returns an input field for a given field type */\n    create: function(input_def) {\n        var fieldClass = this.types[input_def.type];\n        var field =\n            typeof this[fieldClass] === \"function\"\n                ? this[fieldClass].call(this, input_def)\n                : null;\n        if (!field) {\n            field = input_def.options\n                ? this._fieldSelect(input_def)\n                : this._fieldText(input_def);\n            Galaxy.emit.debug(\n                \"form-parameters::_addRow()\",\n                \"Auto matched field type (\" + input_def.type + \").\"\n            );\n        }\n        input_def.value === undefined && (input_def.value = null);\n        field.value(input_def.value);\n        return field;\n    },\n\n    /** Data input field */\n    _fieldData: function(input_def) {\n        return new SelectContent.View({\n            id: \"field-\" + input_def.id,\n            extensions: input_def.extensions,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            type: input_def.type,\n            flavor: input_def.flavor,\n            data: input_def.options,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Select/Checkbox/Radio options field */\n    _fieldSelect: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // customize properties\n        if (input_def.type == \"data_column\") {\n            input_def.error_text = \"Missing columns in referenced dataset.\";\n        }\n\n        // identify available options\n        var data = input_def.data;\n        if (!data) {\n            data = [];\n            _.each(input_def.options, function(option) {\n                data.push({ label: option[0], value: option[1] });\n            });\n        }\n\n        // identify display type\n        var SelectClass = Ui.Select;\n        switch (input_def.display) {\n            case \"checkboxes\":\n                SelectClass = Ui.Checkbox;\n                break;\n            case \"radio\":\n                SelectClass = Ui.Radio;\n                break;\n            case \"radiobutton\":\n                SelectClass = Ui.RadioButton;\n                break;\n        }\n\n        // create select field\n        return new SelectClass.View({\n            id: \"field-\" + input_def.id,\n            data: data,\n            error_text: input_def.error_text || \"No options available\",\n            readonly: input_def.readonly,\n            multiple: input_def.multiple,\n            optional: input_def.optional,\n            onchange: input_def.onchange,\n            individual: input_def.individual,\n            searchable: input_def.flavor !== \"workflow\"\n        });\n    },\n\n    /** Drill down options field */\n    _fieldDrilldown: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // create drill down field\n        return new Ui.Drilldown.View({\n            id: \"field-\" + input_def.id,\n            data: input_def.options,\n            display: input_def.display,\n            optional: input_def.optional,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Text input field */\n    _fieldText: function(input_def) {\n        // field replaces e.g. a select field\n        if (input_def.options && input_def.data) {\n            input_def.area = input_def.multiple;\n            if (Utils.isEmpty(input_def.value)) {\n                input_def.value = null;\n            } else {\n                if ($.isArray(input_def.value)) {\n                    var str_value = \"\";\n                    for (var i in input_def.value) {\n                        str_value += String(input_def.value[i]);\n                        if (!input_def.multiple) {\n                            break;\n                        }\n                        str_value += \"\\n\";\n                    }\n                    input_def.value = str_value;\n                }\n            }\n        }\n        // create input element\n        return new Ui.Input({\n            id: \"field-\" + input_def.id,\n            type: input_def.type,\n            area: input_def.area,\n            readonly: input_def.readonly,\n            placeholder: input_def.placeholder,\n            datalist: input_def.datalist,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Slider field */\n    _fieldSlider: function(input_def) {\n        return new Ui.Slider.View({\n            id: \"field-\" + input_def.id,\n            precise: input_def.type == \"float\",\n            is_workflow: input_def.is_workflow,\n            min: input_def.min,\n            max: input_def.max,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Hidden field */\n    _fieldHidden: function(input_def) {\n        return new Ui.Hidden({\n            id: \"field-\" + input_def.id,\n            info: input_def.info\n        });\n    },\n\n    /** Boolean field */\n    _fieldBoolean: function(input_def) {\n        return new Ui.RadioButton.View({\n            id: \"field-\" + input_def.id,\n            data: [\n                { label: \"Yes\", value: \"true\" },\n                { label: \"No\", value: \"false\" }\n            ],\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Color picker field */\n    _fieldColor: function(input_def) {\n        return new ColorPicker({\n            id: \"field-\" + input_def.id,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Library dataset field */\n    _fieldLibrary: function(input_def) {\n        return new SelectLibrary.View({\n            id: \"field-\" + input_def.id,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** FTP file field */\n    _fieldFtp: function(input_def) {\n        return new SelectFtp.View({\n            id: \"field-\" + input_def.id,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** GenomeSpace file select field\n         */\n    _fieldGenomeSpace: function(input_def) {\n        var self = this;\n        return new SelectGenomeSpace.View({\n            id: \"field-\" + input_def.id,\n            onchange: function() {\n                self.app.trigger(\"change\");\n            }\n        });\n    },\n\n    /** Upload file field */\n    _fieldUpload: function(input_def) {\n        return new Ui.Upload({\n            id: \"field-\" + input_def.id,\n            onchange: input_def.onchange\n        });\n    }\n});\n"]}