{"version":3,"sources":["mvc/dataset/data.js"],"names":["DatasetMetadata","Backbone","Model","extend","Dataset","defaults","id","type","name","hda_ldda","metadata","initialize","this","get","_set_metadata","_","each","attributes","k","indexOf","split","set","new_key","silent","attribute","urlRoot","Galaxy","root","TabularDataset","prototype","get_metadata","first_data_chunk","offset","at_eof","options","call","url_viz","get_next_chunk","self","next_chunk","$","Deferred","getJSON","chunk_url","success","chunk","rval","ck_data","resolve","DatasetCollection","Collection","TabularDatasetChunkedView","View","row_count","loading_chunk","TabularButtonTracksterView","$el","expand_to_container","scroll_elt","height","model","scrolled_to_bottom","loading_indicator","show","then","result","attempt_to_fetch","hide","_renderChunk","cellpadding","append","data_table","render","header_container","appendTo","header_row","column_names","join","attr","j","first_chunk","when","_renderCell","cell_contents","index","colspan","$cell","text","column_types","undefined","addClass","length","_renderRow","line","cells","row","num_columns","slice","find","TopLevelTabularDatasetChunkedView","parents","p","css","window","EmbeddedTabularDatasetChunkedView","position","overflow","scrollTop","chrom","start","end","genome_build","innerHeight","el","scrollHeight","col","dataset_id","file_ext","modal","frame","search","console","log","str","array","match","btn_viz","mouseleave","_iconButton2","default","IconButtonView","IconButton","icon_class","setElement","events","mouseover tr","left","e","url","target","parent","children","html","eq","n","isNaN","parseFloat","isFinite","is_numeric","gene_region","parent_elt","top","createTabularDatasetChunkedView","click","add","param","btn_viz_pars","dataset_config","embedded","view"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["// Additional dependencies: jQuery, underscore.\nimport Modal from \"mvc/ui/ui-modal\";\nimport Frames from \"mvc/ui/ui-frames\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: \"\",\n        type: \"\",\n        name: \"\",\n        hda_ldda: \"hda\",\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get(\"metadata\")) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on(\"change\", this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(\n            _.keys(this.attributes),\n            function(k) {\n                if (k.indexOf(\"metadata_\") === 0) {\n                    // Found metadata.\n                    var new_key = k.split(\"metadata_\")[1];\n                    metadata.set(new_key, this.attributes[k]);\n                    delete this.attributes[k];\n                }\n            },\n            this\n        );\n\n        // Because this is an internal change, silence it.\n        this.set(\"metadata\", metadata, { silent: true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: `${Galaxy.root}api/datasets`\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk) {\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url = `${Galaxy.root}dataset/display?dataset_id=${this\n            .id}`;\n        this.attributes.url_viz = `${Galaxy.root}visualization`;\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this;\n\n        var next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(chunk => {\n            var rval;\n            if (chunk.ck_data !== \"\") {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            } else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model: options.model,\n            $el: this.$el\n        });\n    },\n\n    expand_to_container: function() {\n        if (this.$el.height() < this.scroll_elt.height()) {\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function(func) {\n        var self = this;\n        if (!this.loading_chunk && this.scrolled_to_bottom()) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(result => {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $(\"<div/>\").attr(\"id\", \"loading_indicator\");\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $(\"<table/>\").attr({\n            id: \"content_table\",\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata(\"column_names\");\n        var header_container = $(\"<thead/>\").appendTo(data_table);\n        var header_row = $(\"<tr/>\").appendTo(header_container);\n        if (column_names) {\n            header_row.append(`<th>${column_names.join(\"</th><th>\")}</th>`);\n        } else {\n            for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                header_row.append(`<th>${j}</th>`);\n            }\n        }\n\n        // Render first chunk.\n        var self = this;\n\n        var first_chunk = this.model.get(\"first_data_chunk\");\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        } else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(result => {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(() => {\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $(\"<td>\").text(cell_contents);\n        var column_types = this.model.get_metadata(\"column_types\");\n        if (colspan !== undefined) {\n            $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (\n                    column_types[index] === \"str\" ||\n                    column_types[index] === \"list\"\n                ) {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass(\"stringalign\");\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split(\"\\t\");\n\n        var row = $(\"<tr>\");\n        var num_columns = this.model.get_metadata(\"columns\");\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass(\"dark_row\");\n        }\n\n        if (cells.length === num_columns) {\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n        } else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(\n                cells.slice(0, num_columns - 1),\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            row.append(\n                this._renderCell(\n                    cells.slice(num_columns - 1).join(\"\\t\"),\n                    num_columns - 1\n                )\n            );\n        } else if (cells.length === 1) {\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        } else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            _.each(_.range(num_columns - cells.length), () => {\n                row.append($(\"<td>\"));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find(\"table\");\n        _.each(\n            chunk.ck_data.split(\"\\n\"),\n            function(line, index) {\n                if (line !== \"\") {\n                    data_table.append(this._renderRow(line));\n                }\n            },\n            this\n        );\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        var scroll_elt = _.find(\n            this.$el.parents(),\n            p => $(p).css(\"overflow\") === \"auto\"\n        );\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) {\n            scroll_elt = window;\n        }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return (\n            this.$el.height() -\n                this.scroll_elt.scrollTop() -\n                this.scroll_elt.height() <=\n            0\n        );\n    }\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: \"relative\",\n            overflow: \"scroll\",\n            height: options.height || \"500px\"\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return (\n            this.$el.scrollTop() + this.$el.innerHeight() >=\n            this.el.scrollHeight\n        );\n    }\n});\n\n/** Button for trackster visualization */\nvar TabularButtonTracksterView = Backbone.View.extend({\n    // gene region columns\n    col: {\n        chrom: null,\n        start: null,\n        end: null\n    },\n\n    // url for trackster\n    url_viz: null,\n\n    // dataset id\n    dataset_id: null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext: null,\n\n    // backbone initialize\n    initialize: function(options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model = options.model;\n        var metadata = model.get(\"metadata\");\n\n        // check for datatype\n        if (!model.get(\"file_ext\")) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get(\"file_ext\");\n\n        // check for bed-file format\n        if (this.file_ext == \"bed\") {\n            // verify that metadata exists\n            if (\n                metadata.get(\"chromCol\") &&\n                metadata.get(\"startCol\") &&\n                metadata.get(\"endCol\")\n            ) {\n                // read in columns\n                this.col.chrom = metadata.get(\"chromCol\") - 1;\n                this.col.start = metadata.get(\"startCol\") - 1;\n                this.col.end = metadata.get(\"endCol\") - 1;\n            } else {\n                console.log(\n                    \"TabularButtonTrackster : Bed-file metadata incomplete.\"\n                );\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == \"vcf\") {\n            // search array\n            function search(str, array) {\n                for (var j = 0; j < array.length; j++)\n                    if (array[j].match(str)) return j;\n                return -1;\n            }\n\n            // load\n            this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n            this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n            this.col.end = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log(\n                    \"TabularButtonTrackster : VCF-file metadata incomplete.\"\n                );\n                return;\n            }\n        }\n\n        // check\n        if (this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log(\n                \"TabularButtonTrackster : Dataset identification is missing.\"\n            );\n            return;\n        }\n\n        // get url\n        if (model.get(\"url_viz\")) {\n            this.url_viz = model.get(\"url_viz\");\n        } else {\n            console.log(\n                \"TabularButtonTrackster : Url for visualization controller is missing.\"\n            );\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get(\"genome_build\")) {\n            this.genome_build = model.get(\"genome_build\");\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model: new mod_icon_btn.IconButton({\n                title: \"Visualize\",\n                icon_class: \"chart_curve\",\n                id: \"btn_viz\"\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    /** Add event handlers */\n    events: {\n        \"mouseover tr\": \"show\",\n        mouseleave: \"hide\"\n    },\n\n    // show button\n    show: function(e) {\n        var self = this;\n\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        // check\n        if (this.col.chrom === null) return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row\n            .children()\n            .eq(this.col.chrom)\n            .html();\n        var start = row\n            .children()\n            .eq(this.col.start)\n            .html();\n\n        // end is optional\n        var end = this.col.end\n            ? row\n                  .children()\n                  .eq(this.col.end)\n                  .html()\n            : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id: this.dataset_id,\n                gene_region: `${chrom}:${start}-${end}`\n            };\n\n            // get button position\n            var offset = row.offset();\n            var left = offset.left - 10;\n            var top = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $(\"#btn_viz\").css({\n                position: \"fixed\",\n                top: `${top}px`,\n                left: `${left}px`\n            });\n            $(\"#btn_viz\").off(\"click\");\n            $(\"#btn_viz\").click(() => {\n                self.frame.add({\n                    title: \"Trackster\",\n                    url: `${self.url_viz}/trackster?${$.param(btn_viz_pars)}`\n                });\n            });\n\n            // show the button\n            $(\"#btn_viz\").show();\n        } else {\n            // hide the button\n            $(\"#btn_viz\").hide();\n        }\n    },\n\n    /** hide button */\n    hide: function() {\n        this.$(\"#btn_viz\").hide();\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = (model, view, model_config, parent_elt) => {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = options => {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = embedded\n        ? new EmbeddedTabularDatasetChunkedView(options)\n        : new TopLevelTabularDatasetChunkedView(options);\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nexport default {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n"]}