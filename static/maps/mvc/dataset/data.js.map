{"version":3,"sources":["mvc/dataset/data.js"],"names":["define","Modal","Frames","mod_icon_btn","DatasetMetadata","Backbone","Model","extend","Dataset","defaults","id","type","name","initialize","this","get","_set_metadata","on","metadata","_","each","keys","attributes","k","indexOf","split","set","new_key","silent","get_metadata","attribute","urlRoot","Galaxy","root","TabularDataset","prototype","chunk_url","first_data_chunk","options","call","offset","url_viz","get_next_chunk","at_eof","self","next_chunk","$","Deferred","getJSON","chunk","success","ck_data","rval","resolve","DatasetCollection","Collection","model","TabularDatasetChunkedView","View","row_count","loading_chunk","TabularButtonTracksterView","expand_to_container","scroll_elt","height","attempt_to_fetch","func","scrolled_to_bottom","loading_indicator","show","when","then","result","hide","render","attr","$el","data_table","append","column_names","header_container","header_row","join","j","first_chunk","_renderChunk","scroll","_renderCell","cell_contents","index","$cell","text","column_types","colspan","addClass","_renderRow","line","cells","row","num_columns","length","slice","range","parents","find","p","css","window","scrollTop","EmbeddedTabularDatasetChunkedView","position","overflow","innerHeight","el","scrollHeight","chrom","start","end","dataset_id","genome_build","file_ext","parent","modal","frame","col","console","log","search","str","array","match","undefined","title","IconButtonView","icon_class","IconButton","setElement","btn_viz","events","mouseover tr","mouseleave","e","target","children","eq","html","n","isNaN","parseFloat","isFinite","btn_viz_pars","gene_region","left","top","off","click","create_trackster_action","vis_url","dataset_params","dbkey","url","dataType","ajax","param","listTracksParams","body","buttons","Cancel","table_html","val","vis_id","add","content","createTabularDatasetChunkedView","embedded","dataset_config","parent_elt","view","TopLevelTabularDatasetChunkedView"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["// Additional dependencies: jQuery, underscore.\ndefine(['mvc/ui/ui-modal', 'mvc/ui/ui-frames', 'mvc/ui/icon-button'], function(Modal, Frames, mod_icon_btn) {\n\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: '',\n        type: '',\n        name: '',\n        hda_ldda: 'hda',\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get('metadata')) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on('change', this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(_.keys(this.attributes), function(k) {\n            if (k.indexOf('metadata_') === 0) {\n                // Found metadata.\n                var new_key = k.split('metadata_')[1];\n                metadata.set(new_key, this.attributes[k]);\n                delete this.attributes[k];\n            }\n        }, this);\n\n        // Because this is an internal change, silence it.\n        this.set('metadata', metadata, { 'silent': true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: Galaxy.root + \"api/datasets\"\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk){\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url = Galaxy.root + 'dataset/display?dataset_id=' + this.id;\n        this.attributes.url_viz = Galaxy.root + 'visualization';\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this,\n            next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(function(chunk) {\n            var rval;\n            if (chunk.ck_data !== '') {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            }\n            else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model   : options.model,\n            $el     : this.$el\n        });\n    },\n\n    expand_to_container: function(){\n        if (this.$el.height() < this.scroll_elt.height()){\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function( func ){\n        var self = this;\n        if ( !this.loading_chunk && this.scrolled_to_bottom() ) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $('<div/>').attr('id', 'loading_indicator');\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $('<table/>').attr({\n            id: 'content_table',\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata('column_names'),\n            header_container = $('<thead/>').appendTo(data_table),\n            header_row = $('<tr/>').appendTo(header_container);\n        if (column_names) {\n            header_row.append('<th>' + column_names.join('</th><th>') + '</th>');\n        } else {\n            for (var j = 1; j <= this.model.get_metadata('columns'); j++) {\n                header_row.append('<th>' + j + '</th>');\n            }\n        }\n\n        // Render first chunk.\n        var self = this,\n            first_chunk = this.model.get('first_data_chunk');\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        }\n        else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(function(){\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $('<td>').text(cell_contents);\n        var column_types = this.model.get_metadata('column_types');\n        if (colspan !== undefined) {\n            $cell.attr('colspan', colspan).addClass('stringalign');\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (column_types[index] === 'str' || column_types[index] === 'list') {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass('stringalign');\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split('\\t'),\n            row = $('<tr>'),\n            num_columns = this.model.get_metadata('columns');\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass('dark_row');\n        }\n\n        if (cells.length === num_columns) {\n            _.each(cells, function(cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n        }\n        else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(cells.slice(0, num_columns - 1), function(cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n            row.append(this._renderCell(cells.slice(num_columns - 1).join('\\t'), num_columns - 1));\n        }\n        else if (cells.length === 1){\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        }\n        else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(cells, function(cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n            _.each(_.range(num_columns - cells.length), function(){\n                row.append($('<td>'));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find('table');\n        _.each(chunk.ck_data.split('\\n'), function(line, index) {\n            if (line !== ''){\n                data_table.append(this._renderRow(line));\n            }\n        }, this);\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        scroll_elt = _.find(this.$el.parents(), function(p) {\n            return $(p).css('overflow') === 'auto';\n        });\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) { scroll_elt = window; }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return (this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0);\n    }\n\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: 'relative',\n            overflow: 'scroll',\n            height: options.height || '500px'\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n    }\n\n});\n\n// button for trackster visualization\nvar TabularButtonTracksterView = Backbone.View.extend({\n\n    // gene region columns\n    col: {\n        chrom   : null,\n        start   : null,\n        end     : null\n    },\n\n    // url for trackster\n    url_viz     : null,\n\n    // dataset id\n    dataset_id  : null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext   : null,\n\n    // backbone initialize\n    initialize: function (options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model       = options.model;\n        var metadata    = model.get('metadata');\n\n        // check for datatype\n        if (!model.get('file_ext')) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get('file_ext');\n\n        // check for bed-file format\n        if (this.file_ext == 'bed')\n        {\n            // verify that metadata exists\n            if (metadata.get('chromCol') && metadata.get('startCol') && metadata.get('endCol'))\n            {\n                // read in columns\n                this.col.chrom   = metadata.get('chromCol') - 1;\n                this.col.start   = metadata.get('startCol') - 1;\n                this.col.end     = metadata.get('endCol') - 1;\n            } else {\n                console.log('TabularButtonTrackster : Bed-file metadata incomplete.');\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == 'vcf')\n        {\n            // search array\n            function search (str, array) {\n                for (var j = 0; j < array.length; j++)\n                    if (array[j].match(str)) return j;\n                return -1;\n            };\n\n            // load\n            this.col.chrom = search('Chrom', metadata.get('column_names'));\n            this.col.start = search('Pos', metadata.get('column_names'));\n            this.col.end   = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log('TabularButtonTrackster : VCF-file metadata incomplete.');\n                return;\n            }\n        }\n\n        // check\n        if(this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log('TabularButtonTrackster : Dataset identification is missing.');\n            return;\n        }\n\n        // get url\n        if (model.get('url_viz')) {\n            this.url_viz = model.get('url_viz');\n        } else {\n            console.log('TabularButtonTrackster : Url for visualization controller is missing.');\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get('genome_build')) {\n            this.genome_build = model.get('genome_build');\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model : new mod_icon_btn.IconButton({\n                title       : 'Visualize',\n                icon_class  : 'chart_curve',\n                id          : 'btn_viz'\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    // backbone events\n    events:\n    {\n        'mouseover tr'  : 'show',\n        'mouseleave'    : 'hide'\n    },\n\n    // show button\n    show: function (e) {\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        };\n\n        // check\n        if(this.col.chrom === null)\n            return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row.children().eq(this.col.chrom).html();\n        var start = row.children().eq(this.col.start).html();\n\n        // end is optional\n        var end = this.col.end ? row.children().eq(this.col.end).html() : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id  : this.dataset_id,\n                gene_region : chrom + \":\" + start + \"-\" + end\n            };\n\n            // get button position\n            var offset  = row.offset();\n            var left    = offset.left - 10;\n            var top     = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $('#btn_viz').css({'position': 'fixed', 'top': top + 'px', 'left': left + 'px'});\n            $('#btn_viz').off('click');\n            $('#btn_viz').click(this.create_trackster_action(this.url_viz, btn_viz_pars, this.genome_build));\n\n            // show the button\n            $('#btn_viz').show();\n        } else {\n            // hide the button\n            $('#btn_viz').hide();\n        }\n    },\n\n    // hide button\n    hide: function () {\n        this.$el.find('#btn_viz').hide();\n    },\n\n    // create action\n    create_trackster_action : function (vis_url, dataset_params, dbkey) {\n        // link this\n        var self = this;\n\n        // create function\n        return function() {\n            var listTracksParams = {};\n            if (dbkey) {\n                listTracksParams[ 'f-dbkey' ] = dbkey;\n            }\n            $.ajax({\n                url: vis_url + '/list_tracks?' + $.param( listTracksParams ),\n                dataType: 'html',\n                error: function() {\n                    // show error message\n                    self.modal.show({\n                        title   : 'Something went wrong!',\n                        body    : 'Unfortunately we could not add this dataset to the track browser. Please try again or contact us.',\n                        buttons : {\n                            'Cancel': function(){\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                },\n                success: function(table_html) {\n                    self.modal.show({\n                        title   : 'View Data in a New or Saved Visualization',\n                        buttons :{\n                            'Cancel': function(){\n                                self.modal.hide();\n                            },\n                            'View in saved visualization': function(){\n                                // show modal with saved visualizations\n                                self.modal.show(\n                                {\n                                    title   : 'Add Data to Saved Visualization',\n                                    body    : table_html,\n                                    buttons : {\n                                        'Cancel': function(){\n                                            self.modal.hide();\n                                        },\n                                        'Add to visualization': function(){\n                                            // hide\n                                            self.modal.hide();\n\n                                            // search selected fields\n                                            self.modal.$el.find('input[name=id]:checked').each(function(){\n                                                // get visualization id\n                                                var vis_id = $(this).val();\n                                                dataset_params.id = vis_id;\n\n                                                // add widget\n                                                self.frame.add({\n                                                    title    : 'Trackster',\n                                                    type     : 'url',\n                                                    content  : vis_url + '/trackster?' + $.param(dataset_params)\n                                                });\n                                            });\n                                        }\n                                    }\n                                });\n                            },\n                            'View in new visualization': function(){\n                                // hide\n                                self.modal.hide();\n\n                                // add widget\n                                self.frame.add({\n                                    title    : 'Trackster',\n                                    type     : 'url',\n                                    content  : vis_url + '/trackster?' + $.param(dataset_params)\n                                });\n                            }\n                        }\n                    });\n                }\n            });\n            return false;\n        };\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = function(model, view, model_config, parent_elt) {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = function(options) {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = (embedded ? new EmbeddedTabularDatasetChunkedView(options) :\n                           new TopLevelTabularDatasetChunkedView(options));\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nreturn {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n\n});\n"]}