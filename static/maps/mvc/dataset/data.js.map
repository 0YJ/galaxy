{"version":3,"sources":["mvc/dataset/data.js"],"names":["define","Modal","Frames","mod_icon_btn","DatasetMetadata","Backbone","Model","extend","Dataset","defaults","id","type","name","hda_ldda","metadata","initialize","this","get","_set_metadata","on","_","each","keys","attributes","k","indexOf","new_key","split","set","silent","get_metadata","attribute","urlRoot","Galaxy","root","TabularDataset","prototype","chunk_url","first_data_chunk","offset","at_eof","options","call","url_viz","get_next_chunk","self","next_chunk","$","Deferred","getJSON","success","chunk","rval","ck_data","resolve","DatasetCollection","Collection","model","TabularDatasetChunkedView","View","row_count","loading_chunk","TabularButtonTracksterView","$el","expand_to_container","height","scroll_elt","attempt_to_fetch","func","scrolled_to_bottom","loading_indicator","show","when","then","result","_renderChunk","hide","render","attr","append","data_table","cellpadding","column_names","header_container","appendTo","header_row","join","j","first_chunk","scroll","_renderCell","cell_contents","index","colspan","$cell","text","column_types","undefined","addClass","length","_renderRow","line","cells","row","num_columns","slice","range","find","TopLevelTabularDatasetChunkedView","parents","p","css","window","scrollTop","EmbeddedTabularDatasetChunkedView","position","overflow","innerHeight","el","scrollHeight","col","chrom","start","end","dataset_id","genome_build","file_ext","search","str","array","match","parent","modal","frame","console","log","btn_viz","IconButtonView","IconButton","title","icon_class","setElement","events","mouseover tr","mouseleave","e","target","children","eq","html","n","isNaN","parseFloat","isFinite","btn_viz_pars","gene_region","left","top","off","click","create_trackster_action","vis_url","dataset_params","dbkey","listTracksParams","ajax","url","param","dataType","error","body","buttons","Cancel","table_html","View in saved visualization","Add to visualization","vis_id","val","add","content","View in new visualization","createTabularDatasetChunkedView","dataset_config","parent_elt","embedded","view"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["// Additional dependencies: jQuery, underscore.\ndefine(['mvc/ui/ui-modal', 'mvc/ui/ui-frames', 'mvc/ui/icon-button'], function(Modal, Frames, mod_icon_btn) {\n\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: '',\n        type: '',\n        name: '',\n        hda_ldda: 'hda',\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get('metadata')) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on('change', this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(_.keys(this.attributes), function(k) {\n            if (k.indexOf('metadata_') === 0) {\n                // Found metadata.\n                var new_key = k.split('metadata_')[1];\n                metadata.set(new_key, this.attributes[k]);\n                delete this.attributes[k];\n            }\n        }, this);\n\n        // Because this is an internal change, silence it.\n        this.set('metadata', metadata, { 'silent': true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: Galaxy.root + \"api/datasets\"\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk){\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url = Galaxy.root + 'dataset/display?dataset_id=' + this.id;\n        this.attributes.url_viz = Galaxy.root + 'visualization';\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this,\n            next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(function(chunk) {\n            var rval;\n            if (chunk.ck_data !== '') {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            }\n            else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model   : options.model,\n            $el     : this.$el\n        });\n    },\n\n    expand_to_container: function(){\n        if (this.$el.height() < this.scroll_elt.height()){\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function( func ){\n        var self = this;\n        if ( !this.loading_chunk && this.scrolled_to_bottom() ) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $('<div/>').attr('id', 'loading_indicator');\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $('<table/>').attr({\n            id: 'content_table',\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata('column_names'),\n            header_container = $('<thead/>').appendTo(data_table),\n            header_row = $('<tr/>').appendTo(header_container);\n        if (column_names) {\n            header_row.append('<th>' + column_names.join('</th><th>') + '</th>');\n        } else {\n            for (var j = 1; j <= this.model.get_metadata('columns'); j++) {\n                header_row.append('<th>' + j + '</th>');\n            }\n        }\n\n        // Render first chunk.\n        var self = this,\n            first_chunk = this.model.get('first_data_chunk');\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        }\n        else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(function(){\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $('<td>').text(cell_contents);\n        var column_types = this.model.get_metadata('column_types');\n        if (colspan !== undefined) {\n            $cell.attr('colspan', colspan).addClass('stringalign');\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (column_types[index] === 'str' || column_types[index] === 'list') {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass('stringalign');\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split('\\t'),\n            row = $('<tr>'),\n            num_columns = this.model.get_metadata('columns');\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass('dark_row');\n        }\n\n        if (cells.length === num_columns) {\n            _.each(cells, function(cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n        }\n        else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(cells.slice(0, num_columns - 1), function(cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n            row.append(this._renderCell(cells.slice(num_columns - 1).join('\\t'), num_columns - 1));\n        }\n        else if (cells.length === 1){\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        }\n        else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(cells, function(cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n            _.each(_.range(num_columns - cells.length), function(){\n                row.append($('<td>'));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find('table');\n        _.each(chunk.ck_data.split('\\n'), function(line, index) {\n            if (line !== ''){\n                data_table.append(this._renderRow(line));\n            }\n        }, this);\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        scroll_elt = _.find(this.$el.parents(), function(p) {\n            return $(p).css('overflow') === 'auto';\n        });\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) { scroll_elt = window; }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return (this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0);\n    }\n\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: 'relative',\n            overflow: 'scroll',\n            height: options.height || '500px'\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n    }\n\n});\n\n// button for trackster visualization\nvar TabularButtonTracksterView = Backbone.View.extend({\n\n    // gene region columns\n    col: {\n        chrom   : null,\n        start   : null,\n        end     : null\n    },\n\n    // url for trackster\n    url_viz     : null,\n\n    // dataset id\n    dataset_id  : null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext   : null,\n\n    // backbone initialize\n    initialize: function (options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model       = options.model;\n        var metadata    = model.get('metadata');\n\n        // check for datatype\n        if (!model.get('file_ext')) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get('file_ext');\n\n        // check for bed-file format\n        if (this.file_ext == 'bed')\n        {\n            // verify that metadata exists\n            if (metadata.get('chromCol') && metadata.get('startCol') && metadata.get('endCol'))\n            {\n                // read in columns\n                this.col.chrom   = metadata.get('chromCol') - 1;\n                this.col.start   = metadata.get('startCol') - 1;\n                this.col.end     = metadata.get('endCol') - 1;\n            } else {\n                console.log('TabularButtonTrackster : Bed-file metadata incomplete.');\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == 'vcf')\n        {\n            // search array\n            function search (str, array) {\n                for (var j = 0; j < array.length; j++)\n                    if (array[j].match(str)) return j;\n                return -1;\n            };\n\n            // load\n            this.col.chrom = search('Chrom', metadata.get('column_names'));\n            this.col.start = search('Pos', metadata.get('column_names'));\n            this.col.end   = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log('TabularButtonTrackster : VCF-file metadata incomplete.');\n                return;\n            }\n        }\n\n        // check\n        if(this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log('TabularButtonTrackster : Dataset identification is missing.');\n            return;\n        }\n\n        // get url\n        if (model.get('url_viz')) {\n            this.url_viz = model.get('url_viz');\n        } else {\n            console.log('TabularButtonTrackster : Url for visualization controller is missing.');\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get('genome_build')) {\n            this.genome_build = model.get('genome_build');\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model : new mod_icon_btn.IconButton({\n                title       : 'Visualize',\n                icon_class  : 'chart_curve',\n                id          : 'btn_viz'\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    // backbone events\n    events:\n    {\n        'mouseover tr'  : 'show',\n        'mouseleave'    : 'hide'\n    },\n\n    // show button\n    show: function (e) {\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        };\n\n        // check\n        if(this.col.chrom === null)\n            return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row.children().eq(this.col.chrom).html();\n        var start = row.children().eq(this.col.start).html();\n\n        // end is optional\n        var end = this.col.end ? row.children().eq(this.col.end).html() : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id  : this.dataset_id,\n                gene_region : chrom + \":\" + start + \"-\" + end\n            };\n\n            // get button position\n            var offset  = row.offset();\n            var left    = offset.left - 10;\n            var top     = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $('#btn_viz').css({'position': 'fixed', 'top': top + 'px', 'left': left + 'px'});\n            $('#btn_viz').off('click');\n            $('#btn_viz').click(this.create_trackster_action(this.url_viz, btn_viz_pars, this.genome_build));\n\n            // show the button\n            $('#btn_viz').show();\n        } else {\n            // hide the button\n            $('#btn_viz').hide();\n        }\n    },\n\n    // hide button\n    hide: function () {\n        this.$el.find('#btn_viz').hide();\n    },\n\n    // create action\n    create_trackster_action : function (vis_url, dataset_params, dbkey) {\n        // link this\n        var self = this;\n\n        // create function\n        return function() {\n            var listTracksParams = {};\n            if (dbkey) {\n                listTracksParams[ 'f-dbkey' ] = dbkey;\n            }\n            $.ajax({\n                url: vis_url + '/list_tracks?' + $.param( listTracksParams ),\n                dataType: 'html',\n                error: function() {\n                    // show error message\n                    self.modal.show({\n                        title   : 'Something went wrong!',\n                        body    : 'Unfortunately we could not add this dataset to the track browser. Please try again or contact us.',\n                        buttons : {\n                            'Cancel': function(){\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                },\n                success: function(table_html) {\n                    self.modal.show({\n                        title   : 'View Data in a New or Saved Visualization',\n                        buttons :{\n                            'Cancel': function(){\n                                self.modal.hide();\n                            },\n                            'View in saved visualization': function(){\n                                // show modal with saved visualizations\n                                self.modal.show(\n                                {\n                                    title   : 'Add Data to Saved Visualization',\n                                    body    : table_html,\n                                    buttons : {\n                                        'Cancel': function(){\n                                            self.modal.hide();\n                                        },\n                                        'Add to visualization': function(){\n                                            // hide\n                                            self.modal.hide();\n\n                                            // search selected fields\n                                            self.modal.$el.find('input[name=id]:checked').each(function(){\n                                                // get visualization id\n                                                var vis_id = $(this).val();\n                                                dataset_params.id = vis_id;\n\n                                                // add widget\n                                                self.frame.add({\n                                                    title    : 'Trackster',\n                                                    type     : 'url',\n                                                    content  : vis_url + '/trackster?' + $.param(dataset_params)\n                                                });\n                                            });\n                                        }\n                                    }\n                                });\n                            },\n                            'View in new visualization': function(){\n                                // hide\n                                self.modal.hide();\n\n                                // add widget\n                                self.frame.add({\n                                    title    : 'Trackster',\n                                    type     : 'url',\n                                    content  : vis_url + '/trackster?' + $.param(dataset_params)\n                                });\n                            }\n                        }\n                    });\n                }\n            });\n            return false;\n        };\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = function(model, view, model_config, parent_elt) {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = function(options) {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = (embedded ? new EmbeddedTabularDatasetChunkedView(options) :\n                           new TopLevelTabularDatasetChunkedView(options));\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nreturn {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n\n});\n"]}