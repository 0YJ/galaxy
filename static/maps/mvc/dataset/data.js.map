{"version":3,"sources":["mvc/dataset/data.js"],"names":["_uiModal","require","_uiFrames","_iconButton","DatasetMetadata","Backbone","Model","extend","Dataset","defaults","id","type","name","hda_ldda","metadata","initialize","this","get","_set_metadata","_","each","keys","attributes","k","indexOf","new_key","split","get_metadata","urlRoot","Galaxy","root","TabularDataset","prototype","chunk_url","offset","at_eof","options","call","first_data_chunk","url_viz","get_next_chunk","self","next_chunk","$","Deferred","getJSON","success","chunk","ck_data","rval","DatasetCollection","Collection","model","TabularDatasetChunkedView","View","row_count","loading_chunk","TabularButtonTracksterView","$el","height","scroll_elt","attempt_to_fetch","loading_indicator","show","when","then","result","expand_to_container","hide","render","attr","_renderChunk","cellpadding","append","data_table","column_names","header_container","appendTo","header_row","join","j","scroll","scrolled_to_bottom","_renderCell","cell_contents","index","colspan","$cell","text","column_types","undefined","addClass","length","cells","line","row","num_columns","_renderRow","slice","find","TopLevelTabularDatasetChunkedView","parents","p","css","window","EmbeddedTabularDatasetChunkedView","position","overflow","scrollTop","chrom","start","end","genome_build","innerHeight","el","scrollHeight","col","dataset_id","file_ext","modal","frame","search","console","log","str","array","match","title","btn_viz","_iconButton2","default","IconButtonView","IconButton","icon_class","children","mouseleave","gene_region","mouseover tr","top","url","html","eq","n","isFinite","is_numeric","createModelAndView","a_view","left","parent_elt","off","click","add","createTabularDatasetChunkedView","param","btn_viz_pars","view","embedded","model_config","dataset_config"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["// Additional dependencies: jQuery, underscore.\nimport Modal from \"mvc/ui/ui-modal\";\nimport Frames from \"mvc/ui/ui-frames\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: \"\",\n        type: \"\",\n        name: \"\",\n        hda_ldda: \"hda\",\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get(\"metadata\")) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on(\"change\", this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(\n            _.keys(this.attributes),\n            function(k) {\n                if (k.indexOf(\"metadata_\") === 0) {\n                    // Found metadata.\n                    var new_key = k.split(\"metadata_\")[1];\n                    metadata.set(new_key, this.attributes[k]);\n                    delete this.attributes[k];\n                }\n            },\n            this\n        );\n\n        // Because this is an internal change, silence it.\n        this.set(\"metadata\", metadata, { silent: true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: Galaxy.root + \"api/datasets\"\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk) {\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url =\n            Galaxy.root + \"dataset/display?dataset_id=\" + this.id;\n        this.attributes.url_viz = Galaxy.root + \"visualization\";\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this,\n            next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(function(chunk) {\n            var rval;\n            if (chunk.ck_data !== \"\") {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            } else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model: options.model,\n            $el: this.$el\n        });\n    },\n\n    expand_to_container: function() {\n        if (this.$el.height() < this.scroll_elt.height()) {\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function(func) {\n        var self = this;\n        if (!this.loading_chunk && this.scrolled_to_bottom()) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $(\"<div/>\").attr(\"id\", \"loading_indicator\");\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $(\"<table/>\").attr({\n            id: \"content_table\",\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata(\"column_names\"),\n            header_container = $(\"<thead/>\").appendTo(data_table),\n            header_row = $(\"<tr/>\").appendTo(header_container);\n        if (column_names) {\n            header_row.append(\n                \"<th>\" + column_names.join(\"</th><th>\") + \"</th>\"\n            );\n        } else {\n            for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                header_row.append(\"<th>\" + j + \"</th>\");\n            }\n        }\n\n        // Render first chunk.\n        var self = this,\n            first_chunk = this.model.get(\"first_data_chunk\");\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        } else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(function() {\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $(\"<td>\").text(cell_contents);\n        var column_types = this.model.get_metadata(\"column_types\");\n        if (colspan !== undefined) {\n            $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (\n                    column_types[index] === \"str\" ||\n                    column_types[index] === \"list\"\n                ) {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass(\"stringalign\");\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split(\"\\t\"),\n            row = $(\"<tr>\"),\n            num_columns = this.model.get_metadata(\"columns\");\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass(\"dark_row\");\n        }\n\n        if (cells.length === num_columns) {\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n        } else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(\n                cells.slice(0, num_columns - 1),\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            row.append(\n                this._renderCell(\n                    cells.slice(num_columns - 1).join(\"\\t\"),\n                    num_columns - 1\n                )\n            );\n        } else if (cells.length === 1) {\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        } else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            _.each(_.range(num_columns - cells.length), function() {\n                row.append($(\"<td>\"));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find(\"table\");\n        _.each(\n            chunk.ck_data.split(\"\\n\"),\n            function(line, index) {\n                if (line !== \"\") {\n                    data_table.append(this._renderRow(line));\n                }\n            },\n            this\n        );\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        var scroll_elt = _.find(this.$el.parents(), function(p) {\n            return $(p).css(\"overflow\") === \"auto\";\n        });\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) {\n            scroll_elt = window;\n        }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return (\n            this.$el.height() -\n                this.scroll_elt.scrollTop() -\n                this.scroll_elt.height() <=\n            0\n        );\n    }\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: \"relative\",\n            overflow: \"scroll\",\n            height: options.height || \"500px\"\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return (\n            this.$el.scrollTop() + this.$el.innerHeight() >=\n            this.el.scrollHeight\n        );\n    }\n});\n\n/** Button for trackster visualization */\nvar TabularButtonTracksterView = Backbone.View.extend({\n    // gene region columns\n    col: {\n        chrom: null,\n        start: null,\n        end: null\n    },\n\n    // url for trackster\n    url_viz: null,\n\n    // dataset id\n    dataset_id: null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext: null,\n\n    // backbone initialize\n    initialize: function(options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model = options.model;\n        var metadata = model.get(\"metadata\");\n\n        // check for datatype\n        if (!model.get(\"file_ext\")) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get(\"file_ext\");\n\n        // check for bed-file format\n        if (this.file_ext == \"bed\") {\n            // verify that metadata exists\n            if (\n                metadata.get(\"chromCol\") &&\n                metadata.get(\"startCol\") &&\n                metadata.get(\"endCol\")\n            ) {\n                // read in columns\n                this.col.chrom = metadata.get(\"chromCol\") - 1;\n                this.col.start = metadata.get(\"startCol\") - 1;\n                this.col.end = metadata.get(\"endCol\") - 1;\n            } else {\n                console.log(\n                    \"TabularButtonTrackster : Bed-file metadata incomplete.\"\n                );\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == \"vcf\") {\n            // search array\n            function search(str, array) {\n                for (var j = 0; j < array.length; j++)\n                    if (array[j].match(str)) return j;\n                return -1;\n            }\n\n            // load\n            this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n            this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n            this.col.end = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log(\n                    \"TabularButtonTrackster : VCF-file metadata incomplete.\"\n                );\n                return;\n            }\n        }\n\n        // check\n        if (this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log(\n                \"TabularButtonTrackster : Dataset identification is missing.\"\n            );\n            return;\n        }\n\n        // get url\n        if (model.get(\"url_viz\")) {\n            this.url_viz = model.get(\"url_viz\");\n        } else {\n            console.log(\n                \"TabularButtonTrackster : Url for visualization controller is missing.\"\n            );\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get(\"genome_build\")) {\n            this.genome_build = model.get(\"genome_build\");\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model: new mod_icon_btn.IconButton({\n                title: \"Visualize\",\n                icon_class: \"chart_curve\",\n                id: \"btn_viz\"\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    /** Add event handlers */\n    events: {\n        \"mouseover tr\": \"show\",\n        mouseleave: \"hide\"\n    },\n\n    // show button\n    show: function(e) {\n        var self = this;\n\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        // check\n        if (this.col.chrom === null) return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row\n            .children()\n            .eq(this.col.chrom)\n            .html();\n        var start = row\n            .children()\n            .eq(this.col.start)\n            .html();\n\n        // end is optional\n        var end = this.col.end\n            ? row\n                  .children()\n                  .eq(this.col.end)\n                  .html()\n            : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id: this.dataset_id,\n                gene_region: chrom + \":\" + start + \"-\" + end\n            };\n\n            // get button position\n            var offset = row.offset();\n            var left = offset.left - 10;\n            var top = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $(\"#btn_viz\").css({\n                position: \"fixed\",\n                top: top + \"px\",\n                left: left + \"px\"\n            });\n            $(\"#btn_viz\").off(\"click\");\n            $(\"#btn_viz\").click(function() {\n                self.frame.add({\n                    title: \"Trackster\",\n                    url: self.url_viz + \"/trackster?\" + $.param(btn_viz_pars)\n                });\n            });\n\n            // show the button\n            $(\"#btn_viz\").show();\n        } else {\n            // hide the button\n            $(\"#btn_viz\").hide();\n        }\n    },\n\n    /** hide button */\n    hide: function() {\n        this.$(\"#btn_viz\").hide();\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = function(model, view, model_config, parent_elt) {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = function(options) {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = embedded\n        ? new EmbeddedTabularDatasetChunkedView(options)\n        : new TopLevelTabularDatasetChunkedView(options);\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nexport default {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n"]}