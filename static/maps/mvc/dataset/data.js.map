{"version":3,"sources":["mvc/dataset/data.js"],"names":["DatasetMetadata","Backbone","Model","extend","Dataset","defaults","id","type","name","hda_ldda","metadata","initialize","this","get","_set_metadata","_","each","attributes","k","indexOf","split","set","new_key","silent","attribute","urlRoot","Galaxy","root","TabularDataset","prototype","get_metadata","first_data_chunk","offset","at_eof","options","call","url_viz","get_next_chunk","self","next_chunk","$","Deferred","getJSON","chunk_url","chunk","rval","resolve","DatasetCollection","Collection","TabularDatasetChunkedView","View","row_count","loading_chunk","TabularButtonTracksterView","$el","expand_to_container","scroll_elt","height","model","scrolled_to_bottom","loading_indicator","show","then","result","attempt_to_fetch","hide","_renderChunk","cellpadding","append","data_table","render","header_container","appendTo","header_row","column_names","join","j","first_chunk","when","scroll","_renderCell","cell_contents","index","colspan","$cell","text","column_types","attr","addClass","length","undefined","_renderRow","line","cells","row","num_columns","slice","ck_data","find","TopLevelTabularDatasetChunkedView","parents","p","window","overflow","scrollTop","EmbeddedTabularDatasetChunkedView","start","css","end","genome_build","innerHeight","el","scrollHeight","col","chrom","dataset_id","file_ext","parent","modal","frame","search","console","log","str","array","match","mouseleave","btn_viz","_iconButton2","default","IconButtonView","title","icon_class","setElement","gene_region","events","mouseover tr","left","top","position","e","target","eq","html","children","a_view","view","n","isNaN","parseFloat","isFinite","is_numeric","btn_viz_pars","off","click","add","url","param","embedded","parent_elt","createTabularDatasetChunkedView","dataset_config"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["// Additional dependencies: jQuery, underscore.\nimport Modal from \"mvc/ui/ui-modal\";\nimport Frames from \"mvc/ui/ui-frames\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: \"\",\n        type: \"\",\n        name: \"\",\n        hda_ldda: \"hda\",\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get(\"metadata\")) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on(\"change\", this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(\n            _.keys(this.attributes),\n            function(k) {\n                if (k.indexOf(\"metadata_\") === 0) {\n                    // Found metadata.\n                    var new_key = k.split(\"metadata_\")[1];\n                    metadata.set(new_key, this.attributes[k]);\n                    delete this.attributes[k];\n                }\n            },\n            this\n        );\n\n        // Because this is an internal change, silence it.\n        this.set(\"metadata\", metadata, { silent: true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: Galaxy.root + \"api/datasets\"\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk) {\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url =\n            Galaxy.root + \"dataset/display?dataset_id=\" + this.id;\n        this.attributes.url_viz = Galaxy.root + \"visualization\";\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this,\n            next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(function(chunk) {\n            var rval;\n            if (chunk.ck_data !== \"\") {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            } else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model: options.model,\n            $el: this.$el\n        });\n    },\n\n    expand_to_container: function() {\n        if (this.$el.height() < this.scroll_elt.height()) {\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function(func) {\n        var self = this;\n        if (!this.loading_chunk && this.scrolled_to_bottom()) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $(\"<div/>\").attr(\"id\", \"loading_indicator\");\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $(\"<table/>\").attr({\n            id: \"content_table\",\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata(\"column_names\"),\n            header_container = $(\"<thead/>\").appendTo(data_table),\n            header_row = $(\"<tr/>\").appendTo(header_container);\n        if (column_names) {\n            header_row.append(\n                \"<th>\" + column_names.join(\"</th><th>\") + \"</th>\"\n            );\n        } else {\n            for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                header_row.append(\"<th>\" + j + \"</th>\");\n            }\n        }\n\n        // Render first chunk.\n        var self = this,\n            first_chunk = this.model.get(\"first_data_chunk\");\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        } else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(function() {\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $(\"<td>\").text(cell_contents);\n        var column_types = this.model.get_metadata(\"column_types\");\n        if (colspan !== undefined) {\n            $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (\n                    column_types[index] === \"str\" ||\n                    column_types[index] === \"list\"\n                ) {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass(\"stringalign\");\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split(\"\\t\"),\n            row = $(\"<tr>\"),\n            num_columns = this.model.get_metadata(\"columns\");\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass(\"dark_row\");\n        }\n\n        if (cells.length === num_columns) {\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n        } else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(\n                cells.slice(0, num_columns - 1),\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            row.append(\n                this._renderCell(\n                    cells.slice(num_columns - 1).join(\"\\t\"),\n                    num_columns - 1\n                )\n            );\n        } else if (cells.length === 1) {\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        } else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            _.each(_.range(num_columns - cells.length), function() {\n                row.append($(\"<td>\"));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find(\"table\");\n        _.each(\n            chunk.ck_data.split(\"\\n\"),\n            function(line, index) {\n                if (line !== \"\") {\n                    data_table.append(this._renderRow(line));\n                }\n            },\n            this\n        );\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        var scroll_elt = _.find(this.$el.parents(), function(p) {\n            return $(p).css(\"overflow\") === \"auto\";\n        });\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) {\n            scroll_elt = window;\n        }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return (\n            this.$el.height() -\n                this.scroll_elt.scrollTop() -\n                this.scroll_elt.height() <=\n            0\n        );\n    }\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: \"relative\",\n            overflow: \"scroll\",\n            height: options.height || \"500px\"\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return (\n            this.$el.scrollTop() + this.$el.innerHeight() >=\n            this.el.scrollHeight\n        );\n    }\n});\n\n/** Button for trackster visualization */\nvar TabularButtonTracksterView = Backbone.View.extend({\n    // gene region columns\n    col: {\n        chrom: null,\n        start: null,\n        end: null\n    },\n\n    // url for trackster\n    url_viz: null,\n\n    // dataset id\n    dataset_id: null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext: null,\n\n    // backbone initialize\n    initialize: function(options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model = options.model;\n        var metadata = model.get(\"metadata\");\n\n        // check for datatype\n        if (!model.get(\"file_ext\")) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get(\"file_ext\");\n\n        // check for bed-file format\n        if (this.file_ext == \"bed\") {\n            // verify that metadata exists\n            if (\n                metadata.get(\"chromCol\") &&\n                metadata.get(\"startCol\") &&\n                metadata.get(\"endCol\")\n            ) {\n                // read in columns\n                this.col.chrom = metadata.get(\"chromCol\") - 1;\n                this.col.start = metadata.get(\"startCol\") - 1;\n                this.col.end = metadata.get(\"endCol\") - 1;\n            } else {\n                console.log(\n                    \"TabularButtonTrackster : Bed-file metadata incomplete.\"\n                );\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == \"vcf\") {\n            // search array\n            function search(str, array) {\n                for (var j = 0; j < array.length; j++)\n                    if (array[j].match(str)) return j;\n                return -1;\n            }\n\n            // load\n            this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n            this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n            this.col.end = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log(\n                    \"TabularButtonTrackster : VCF-file metadata incomplete.\"\n                );\n                return;\n            }\n        }\n\n        // check\n        if (this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log(\n                \"TabularButtonTrackster : Dataset identification is missing.\"\n            );\n            return;\n        }\n\n        // get url\n        if (model.get(\"url_viz\")) {\n            this.url_viz = model.get(\"url_viz\");\n        } else {\n            console.log(\n                \"TabularButtonTrackster : Url for visualization controller is missing.\"\n            );\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get(\"genome_build\")) {\n            this.genome_build = model.get(\"genome_build\");\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model: new mod_icon_btn.IconButton({\n                title: \"Visualize\",\n                icon_class: \"chart_curve\",\n                id: \"btn_viz\"\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    /** Add event handlers */\n    events: {\n        \"mouseover tr\": \"show\",\n        mouseleave: \"hide\"\n    },\n\n    // show button\n    show: function(e) {\n        var self = this;\n\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        // check\n        if (this.col.chrom === null) return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row\n            .children()\n            .eq(this.col.chrom)\n            .html();\n        var start = row\n            .children()\n            .eq(this.col.start)\n            .html();\n\n        // end is optional\n        var end = this.col.end\n            ? row\n                  .children()\n                  .eq(this.col.end)\n                  .html()\n            : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id: this.dataset_id,\n                gene_region: chrom + \":\" + start + \"-\" + end\n            };\n\n            // get button position\n            var offset = row.offset();\n            var left = offset.left - 10;\n            var top = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $(\"#btn_viz\").css({\n                position: \"fixed\",\n                top: top + \"px\",\n                left: left + \"px\"\n            });\n            $(\"#btn_viz\").off(\"click\");\n            $(\"#btn_viz\").click(function() {\n                self.frame.add({\n                    title: \"Trackster\",\n                    url: self.url_viz + \"/trackster?\" + $.param(btn_viz_pars)\n                });\n            });\n\n            // show the button\n            $(\"#btn_viz\").show();\n        } else {\n            // hide the button\n            $(\"#btn_viz\").hide();\n        }\n    },\n\n    /** hide button */\n    hide: function() {\n        this.$(\"#btn_viz\").hide();\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = function(model, view, model_config, parent_elt) {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = function(options) {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = embedded\n        ? new EmbeddedTabularDatasetChunkedView(options)\n        : new TopLevelTabularDatasetChunkedView(options);\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nexport default {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n"]}