{"version":3,"sources":["mvc/dataset/dataset-model.js"],"names":["searchableMixin","_baseMvc2","default","SearchableModelMixin","DatasetAssociation","Backbone","Model","extend","LoggableMixin","mixin","_logNamespace","defaults","logNamespace","_states2","NEW","deleted","name","accessible","data_type","file_size","meta_files","state","initialize","attributes","options","this","misc_info","get","set","NOT_VIEWABLE","urls","_generateUrls","_setUpListeners","id","purge","edit","_downloadQueryParameters","rerun","show_params","visualization","display","meta_download","report_error","value","key","Galaxy","root","on","currModel","newState","log","inReadyState","trigger","previous","toJSON","json","prototype","call","_","isDeletedOrPurged","contains","READY_STATES","ready","hasDetails","has","hasData","fetch","dataset","parse","parsed","create_time","response","Date","update_time","save","attrs","wait","isUndefined","jQuery","when","undelete","_purge","hda","xhr","url","message","status","error","ajax","format","messageBuriedInUnfortunatelyFormattedError","responseJSON","fail","responseText","_localization2","indexOf","tag","toString","nameAndId","searchAliases","title","DatasetAssociationCollection","blurb","info","urlRoot","Collection","notReady","model","ids","deferred","startingLength","length","filter","content","haveDetails","all","responses","always","reverse","map","i","ajaxFn","done","notify","curr","total","matches","push","ajaxFns","shift","resolve","matchesWhat","join"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-model.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"dataset\";\n//==============================================================================\nvar searchableMixin = BASE_MVC.SearchableModelMixin;\n/** @class base model for any DatasetAssociation (HDAs, LDDAs, DatasetCollectionDAs).\n *      No knowledge of what type (HDA/LDDA/DCDA) should be needed here.\n *  The DA's are made searchable (by attribute) by mixing in SearchableModelMixin.\n */\nvar DatasetAssociation = Backbone.Model.extend(BASE_MVC.LoggableMixin).extend(\n    BASE_MVC.mixin(\n        searchableMixin,\n        /** @lends DatasetAssociation.prototype */ {\n            _logNamespace: logNamespace,\n\n            /** default attributes for a model */\n            defaults: {\n                state: STATES.NEW,\n                deleted: false,\n                purged: false,\n                name: \"(unnamed dataset)\",\n                accessible: true,\n                // sniffed datatype (sam, tabular, bed, etc.)\n                data_type: \"\",\n                file_ext: \"\",\n                file_size: 0,\n\n                // array of associated file types (eg. [ 'bam_index', ... ])\n                meta_files: [],\n\n                misc_blurb: \"\",\n                misc_info: \"\",\n\n                tags: []\n                // do NOT default on annotation, as this default is valid and will be passed on 'save'\n                //  which is incorrect behavior when the model is only partially fetched (annos are not passed in summary data)\n                //annotation          : ''\n            },\n\n            /** instance vars and listeners */\n            initialize: function(attributes, options) {\n                this.debug(this + \"(Dataset).initialize\", attributes, options);\n\n                //!! this state is not in trans.app.model.Dataset.states - set it here -\n                if (!this.get(\"accessible\")) {\n                    this.set(\"state\", STATES.NOT_VIEWABLE);\n                }\n\n                /** Datasets rely/use some web controllers - have the model generate those URLs on startup */\n                this.urls = this._generateUrls();\n\n                this._setUpListeners();\n            },\n\n            /** returns misc. web urls for rendering things like re-run, display, etc. */\n            _generateUrls: function() {\n                var id = this.get(\"id\");\n                if (!id) {\n                    return {};\n                }\n                var urls = {\n                    purge: \"datasets/\" + id + \"/purge_async\",\n                    display: \"datasets/\" + id + \"/display/?preview=True\",\n                    edit: \"datasets/edit?dataset_id=\" + id,\n                    download:\n                        \"datasets/\" +\n                        id +\n                        \"/display\" +\n                        this._downloadQueryParameters(),\n                    report_error: \"dataset/errors?id=\" + id,\n                    rerun: \"tool_runner/rerun?id=\" + id,\n                    show_params: \"datasets/\" + id + \"/show_params\",\n                    visualization: \"visualization\",\n                    meta_download:\n                        \"dataset/get_metadata_file?hda_id=\" +\n                        id +\n                        \"&metadata_name=\"\n                };\n                _.each(urls, (value, key) => {\n                    urls[key] = Galaxy.root + value;\n                });\n                this.urls = urls;\n                return urls;\n            },\n\n            _downloadQueryParameters: function() {\n                return \"?to_ext=\" + this.get(\"file_ext\");\n            },\n\n            /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n            _setUpListeners: function() {\n                // if the state has changed and the new state is a ready state, fire an event\n                this.on(\"change:state\", function(currModel, newState) {\n                    this.log(this + \" has changed state:\", currModel, newState);\n                    if (this.inReadyState()) {\n                        this.trigger(\n                            \"state:ready\",\n                            currModel,\n                            newState,\n                            this.previous(\"state\")\n                        );\n                    }\n                });\n                // the download url (currently) relies on having a correct file extension\n                this.on(\"change:id change:file_ext\", function(currModel) {\n                    this._generateUrls();\n                });\n            },\n\n            // ........................................................................ common queries\n            /** override to add urls */\n            toJSON: function() {\n                var json = Backbone.Model.prototype.toJSON.call(this);\n                //console.warn( 'returning json?' );\n                //return json;\n                return _.extend(json, {\n                    urls: this.urls\n                });\n            },\n\n            /** Is this dataset deleted or purged? */\n            isDeletedOrPurged: function() {\n                return this.get(\"deleted\") || this.get(\"purged\");\n            },\n\n            /** Is this dataset in a 'ready' state; where 'Ready' states are states where no\n     *      processing (for the ds) is left to do on the server.\n     */\n            inReadyState: function() {\n                var ready = _.contains(STATES.READY_STATES, this.get(\"state\"));\n                return this.isDeletedOrPurged() || ready;\n            },\n\n            /** Does this model already contain detailed data (as opposed to just summary level data)? */\n            hasDetails: function() {\n                // if it's inaccessible assume it has everything it needs\n                if (!this.get(\"accessible\")) {\n                    return true;\n                }\n                return this.has(\"annotation\");\n            },\n\n            /** Convenience function to match dataset.has_data. */\n            hasData: function() {\n                return this.get(\"file_size\") > 0;\n            },\n\n            // ........................................................................ ajax\n            fetch: function(options) {\n                var dataset = this;\n                return Backbone.Model.prototype.fetch\n                    .call(this, options)\n                    .always(() => {\n                        dataset._generateUrls();\n                    });\n            },\n\n            /** override to use actual Dates objects for create/update times */\n            parse: function(response, options) {\n                var parsed = Backbone.Model.prototype.parse.call(\n                    this,\n                    response,\n                    options\n                );\n                if (parsed.create_time) {\n                    parsed.create_time = new Date(parsed.create_time);\n                }\n                if (parsed.update_time) {\n                    parsed.update_time = new Date(parsed.update_time);\n                }\n                return parsed;\n            },\n\n            /** override to wait by default */\n            save: function(attrs, options) {\n                options = options || {};\n                options.wait = _.isUndefined(options.wait)\n                    ? true\n                    : options.wait;\n                return Backbone.Model.prototype.save.call(this, attrs, options);\n            },\n\n            //NOTE: subclasses of DA's will need to implement url and urlRoot in order to have these work properly\n            /** save this dataset, _Mark_ing it as deleted (just a flag) */\n            delete: function(options) {\n                if (this.get(\"deleted\")) {\n                    return jQuery.when();\n                }\n                return this.save({ deleted: true }, options);\n            },\n            /** save this dataset, _Mark_ing it as undeleted */\n            undelete: function(options) {\n                if (!this.get(\"deleted\") || this.get(\"purged\")) {\n                    return jQuery.when();\n                }\n                return this.save({ deleted: false }, options);\n            },\n\n            /** remove the file behind this dataset from the filesystem (if permitted) */\n            purge: function _purge(options) {\n                //TODO: use, override model.destroy, HDA.delete({ purge: true })\n                if (this.get(\"purged\")) {\n                    return jQuery.when();\n                }\n                options = options || {};\n                options.url = this.urls.purge;\n\n                //TODO: ideally this would be a DELETE call to the api\n                //  using purge async for now\n                var hda = this;\n\n                var xhr = jQuery.ajax(options);\n                xhr.done((message, status, responseObj) => {\n                    hda.set({ deleted: true, purged: true });\n                });\n                xhr.fail((xhr, status, message) => {\n                    // Exception messages are hidden within error page including:  '...not allowed in this Galaxy instance.'\n                    // unbury and re-add to xhr\n                    var error = _l(\"Unable to purge dataset\");\n                    var messageBuriedInUnfortunatelyFormattedError =\n                        \"Removal of datasets by users \" +\n                        \"is not allowed in this Galaxy instance\";\n                    if (xhr.responseJSON && xhr.responseJSON.error) {\n                        error = xhr.responseJSON.error;\n                    } else if (\n                        xhr.responseText.indexOf(\n                            messageBuriedInUnfortunatelyFormattedError\n                        ) !== -1\n                    ) {\n                        error = messageBuriedInUnfortunatelyFormattedError;\n                    }\n                    xhr.responseText = error;\n                    hda.trigger(\"error\", hda, xhr, options, _l(error), {\n                        error: error\n                    });\n                });\n                return xhr;\n            },\n\n            // ........................................................................ searching\n            /** what attributes of an HDA will be used in a text search */\n            searchAttributes: [\n                \"name\",\n                \"file_ext\",\n                \"genome_build\",\n                \"misc_blurb\",\n                \"misc_info\",\n                \"annotation\",\n                \"tags\"\n            ],\n\n            /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n            searchAliases: {\n                title: \"name\",\n                format: \"file_ext\",\n                database: \"genome_build\",\n                blurb: \"misc_blurb\",\n                description: \"misc_blurb\",\n                info: \"misc_info\",\n                tag: \"tags\"\n            },\n\n            // ........................................................................ misc\n            /** String representation */\n            toString: function() {\n                var nameAndId = this.get(\"id\") || \"\";\n                if (this.get(\"name\")) {\n                    nameAndId = '\"' + this.get(\"name\") + '\",' + nameAndId;\n                }\n                return \"Dataset(\" + nameAndId + \")\";\n            }\n        }\n    )\n);\n\n//==============================================================================\n/** @class Backbone collection for dataset associations.\n */\nvar DatasetAssociationCollection = Backbone.Collection\n    .extend(BASE_MVC.LoggableMixin)\n    .extend(\n        /** @lends HistoryContents.prototype */ {\n            _logNamespace: logNamespace,\n\n            model: DatasetAssociation,\n\n            /** root api url */\n            urlRoot: Galaxy.root + \"api/datasets\",\n\n            /** url fn */\n            url: function() {\n                return this.urlRoot;\n            },\n\n            // ........................................................................ common queries\n            /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n            ids: function() {\n                return this.map(item => item.get(\"id\"));\n            },\n\n            /** Get contents that are not ready\n     *  @returns array of content models\n     */\n            notReady: function() {\n                return this.filter(content => !content.inReadyState());\n            },\n\n            /** return true if any datasets don't have details */\n            haveDetails: function() {\n                return this.all(dataset => dataset.hasDetails());\n            },\n\n            // ........................................................................ ajax\n            /** using a queue, perform ajaxFn on each of the models in this collection */\n            ajaxQueue: function(ajaxFn, options) {\n                var deferred = jQuery.Deferred();\n                var startingLength = this.length;\n                var responses = [];\n\n                if (!startingLength) {\n                    deferred.resolve([]);\n                    return deferred;\n                }\n\n                // use reverse order (stylistic choice)\n                var ajaxFns = this.chain()\n                    .reverse()\n                    .map((dataset, i) => () => {\n                        var xhr = ajaxFn.call(dataset, options);\n                        // if successful, notify using the deferred to allow tracking progress\n                        xhr.done(response => {\n                            deferred.notify({\n                                curr: i,\n                                total: startingLength,\n                                response: response,\n                                model: dataset\n                            });\n                        });\n                        // (regardless of previous error or success) if not last ajax call, shift and call the next\n                        //  if last fn, resolve deferred\n                        xhr.always(response => {\n                            responses.push(response);\n                            if (ajaxFns.length) {\n                                ajaxFns.shift()();\n                            } else {\n                                deferred.resolve(responses);\n                            }\n                        });\n                    })\n                    .value();\n                // start the queue\n                ajaxFns.shift()();\n\n                return deferred;\n            },\n\n            // ........................................................................ sorting/filtering\n            /** return a new collection of datasets whose attributes contain the substring matchesWhat */\n            matches: function(matchesWhat) {\n                return this.filter(dataset => dataset.matches(matchesWhat));\n            },\n\n            /** String representation. */\n            toString: function() {\n                return [\"DatasetAssociationCollection(\", this.length, \")\"].join(\n                    \"\"\n                );\n            }\n        }\n    );\n\n//==============================================================================\nexport default {\n    DatasetAssociation: DatasetAssociation,\n    DatasetAssociationCollection: DatasetAssociationCollection\n};\n"]}