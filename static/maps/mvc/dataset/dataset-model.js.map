{"version":3,"sources":["mvc/dataset/dataset-model.js"],"names":["searchableMixin","_baseMvc2","default","SearchableModelMixin","DatasetAssociation","Backbone","Model","extend","LoggableMixin","mixin","_logNamespace","defaults","logNamespace","_states2","NEW","deleted","name","accessible","data_type","file_size","meta_files","state","initialize","attributes","options","this","misc_info","get","set","NOT_VIEWABLE","urls","_generateUrls","_setUpListeners","id","purge","edit","_downloadQueryParameters","report_error","rerun","show_params","display","_","each","value","key","Galaxy","root","on","currModel","newState","log","inReadyState","trigger","previous","toJSON","json","prototype","isDeletedOrPurged","contains","READY_STATES","ready","hasDetails","has","hasData","fetch","dataset","call","always","parse","response","parsed","create_time","update_time","Date","save","attrs","wait","isUndefined","delete","jQuery","when","undelete","url","hda","xhr","ajax","done","message","status","purged","fail","error","_localization2","indexOf","messageBuriedInUnfortunatelyFormattedError","responseText","responseJSON","searchAliases","title","format","database","blurb","description","info","tag","nameAndId","urlRoot","DatasetAssociationCollection","Collection","ids","model","content","map","item","notReady","deferred","startingLength","resolve","ajaxQueue","ajaxFn","length","curr","total","ajaxFns","chain","reverse","i","responses","push","notify","shift","matchesWhat","matches","toString","join"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-model.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"dataset\";\n//==============================================================================\nvar searchableMixin = BASE_MVC.SearchableModelMixin;\n/** @class base model for any DatasetAssociation (HDAs, LDDAs, DatasetCollectionDAs).\n *      No knowledge of what type (HDA/LDDA/DCDA) should be needed here.\n *  The DA's are made searchable (by attribute) by mixing in SearchableModelMixin.\n */\nvar DatasetAssociation = Backbone.Model.extend(BASE_MVC.LoggableMixin).extend(\n    BASE_MVC.mixin(\n        searchableMixin,\n        /** @lends DatasetAssociation.prototype */ {\n            _logNamespace: logNamespace,\n\n            /** default attributes for a model */\n            defaults: {\n                state: STATES.NEW,\n                deleted: false,\n                purged: false,\n                name: \"(unnamed dataset)\",\n                accessible: true,\n                // sniffed datatype (sam, tabular, bed, etc.)\n                data_type: \"\",\n                file_ext: \"\",\n                file_size: 0,\n\n                // array of associated file types (eg. [ 'bam_index', ... ])\n                meta_files: [],\n\n                misc_blurb: \"\",\n                misc_info: \"\",\n\n                tags: []\n                // do NOT default on annotation, as this default is valid and will be passed on 'save'\n                //  which is incorrect behavior when the model is only partially fetched (annos are not passed in summary data)\n                //annotation          : ''\n            },\n\n            /** instance vars and listeners */\n            initialize: function(attributes, options) {\n                this.debug(`${this}(Dataset).initialize`, attributes, options);\n\n                //!! this state is not in trans.app.model.Dataset.states - set it here -\n                if (!this.get(\"accessible\")) {\n                    this.set(\"state\", STATES.NOT_VIEWABLE);\n                }\n\n                /** Datasets rely/use some web controllers - have the model generate those URLs on startup */\n                this.urls = this._generateUrls();\n\n                this._setUpListeners();\n            },\n\n            /** returns misc. web urls for rendering things like re-run, display, etc. */\n            _generateUrls: function() {\n                var id = this.get(\"id\");\n                if (!id) {\n                    return {};\n                }\n                var urls = {\n                    purge: `datasets/${id}/purge_async`,\n                    display: `datasets/${id}/display/?preview=True`,\n                    edit: `datasets/edit?dataset_id=${id}`,\n                    download: `datasets/${id}/display${this._downloadQueryParameters()}`,\n                    report_error: `dataset/errors?id=${id}`,\n                    rerun: `tool_runner/rerun?id=${id}`,\n                    show_params: `datasets/${id}/show_params`,\n                    visualization: \"visualization\",\n                    meta_download: `dataset/get_metadata_file?hda_id=${id}&metadata_name=`\n                };\n                _.each(urls, (value, key) => {\n                    urls[key] = Galaxy.root + value;\n                });\n                this.urls = urls;\n                return urls;\n            },\n\n            _downloadQueryParameters: function() {\n                return `?to_ext=${this.get(\"file_ext\")}`;\n            },\n\n            /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n            _setUpListeners: function() {\n                // if the state has changed and the new state is a ready state, fire an event\n                this.on(\"change:state\", function(currModel, newState) {\n                    this.log(`${this} has changed state:`, currModel, newState);\n                    if (this.inReadyState()) {\n                        this.trigger(\n                            \"state:ready\",\n                            currModel,\n                            newState,\n                            this.previous(\"state\")\n                        );\n                    }\n                });\n                // the download url (currently) relies on having a correct file extension\n                this.on(\"change:id change:file_ext\", function(currModel) {\n                    this._generateUrls();\n                });\n            },\n\n            // ........................................................................ common queries\n            /** override to add urls */\n            toJSON: function() {\n                var json = Backbone.Model.prototype.toJSON.call(this);\n                //console.warn( 'returning json?' );\n                //return json;\n                return _.extend(json, {\n                    urls: this.urls\n                });\n            },\n\n            /** Is this dataset deleted or purged? */\n            isDeletedOrPurged: function() {\n                return this.get(\"deleted\") || this.get(\"purged\");\n            },\n\n            /** Is this dataset in a 'ready' state; where 'Ready' states are states where no\n     *      processing (for the ds) is left to do on the server.\n     */\n            inReadyState: function() {\n                var ready = _.contains(STATES.READY_STATES, this.get(\"state\"));\n                return this.isDeletedOrPurged() || ready;\n            },\n\n            /** Does this model already contain detailed data (as opposed to just summary level data)? */\n            hasDetails: function() {\n                // if it's inaccessible assume it has everything it needs\n                if (!this.get(\"accessible\")) {\n                    return true;\n                }\n                return this.has(\"annotation\");\n            },\n\n            /** Convenience function to match dataset.has_data. */\n            hasData: function() {\n                return this.get(\"file_size\") > 0;\n            },\n\n            // ........................................................................ ajax\n            fetch: function(options) {\n                var dataset = this;\n                return Backbone.Model.prototype.fetch\n                    .call(this, options)\n                    .always(() => {\n                        dataset._generateUrls();\n                    });\n            },\n\n            /** override to use actual Dates objects for create/update times */\n            parse: function(response, options) {\n                var parsed = Backbone.Model.prototype.parse.call(\n                    this,\n                    response,\n                    options\n                );\n                if (parsed.create_time) {\n                    parsed.create_time = new Date(parsed.create_time);\n                }\n                if (parsed.update_time) {\n                    parsed.update_time = new Date(parsed.update_time);\n                }\n                return parsed;\n            },\n\n            /** override to wait by default */\n            save: function(attrs, options) {\n                options = options || {};\n                options.wait = _.isUndefined(options.wait)\n                    ? true\n                    : options.wait;\n                return Backbone.Model.prototype.save.call(this, attrs, options);\n            },\n\n            //NOTE: subclasses of DA's will need to implement url and urlRoot in order to have these work properly\n            /** save this dataset, _Mark_ing it as deleted (just a flag) */\n            delete: function(options) {\n                if (this.get(\"deleted\")) {\n                    return jQuery.when();\n                }\n                return this.save({ deleted: true }, options);\n            },\n            /** save this dataset, _Mark_ing it as undeleted */\n            undelete: function(options) {\n                if (!this.get(\"deleted\") || this.get(\"purged\")) {\n                    return jQuery.when();\n                }\n                return this.save({ deleted: false }, options);\n            },\n\n            /** remove the file behind this dataset from the filesystem (if permitted) */\n            purge: function _purge(options) {\n                //TODO: use, override model.destroy, HDA.delete({ purge: true })\n                if (this.get(\"purged\")) {\n                    return jQuery.when();\n                }\n                options = options || {};\n                options.url = this.urls.purge;\n\n                //TODO: ideally this would be a DELETE call to the api\n                //  using purge async for now\n                var hda = this;\n\n                var xhr = jQuery.ajax(options);\n                xhr.done((message, status, responseObj) => {\n                    hda.set({ deleted: true, purged: true });\n                });\n                xhr.fail((xhr, status, message) => {\n                    // Exception messages are hidden within error page including:  '...not allowed in this Galaxy instance.'\n                    // unbury and re-add to xhr\n                    var error = _l(\"Unable to purge dataset\");\n                    var messageBuriedInUnfortunatelyFormattedError =\n                        \"Removal of datasets by users \" +\n                        \"is not allowed in this Galaxy instance\";\n                    if (xhr.responseJSON && xhr.responseJSON.error) {\n                        error = xhr.responseJSON.error;\n                    } else if (\n                        xhr.responseText.indexOf(\n                            messageBuriedInUnfortunatelyFormattedError\n                        ) !== -1\n                    ) {\n                        error = messageBuriedInUnfortunatelyFormattedError;\n                    }\n                    xhr.responseText = error;\n                    hda.trigger(\"error\", hda, xhr, options, _l(error), {\n                        error: error\n                    });\n                });\n                return xhr;\n            },\n\n            // ........................................................................ searching\n            /** what attributes of an HDA will be used in a text search */\n            searchAttributes: [\n                \"name\",\n                \"file_ext\",\n                \"genome_build\",\n                \"misc_blurb\",\n                \"misc_info\",\n                \"annotation\",\n                \"tags\"\n            ],\n\n            /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n            searchAliases: {\n                title: \"name\",\n                format: \"file_ext\",\n                database: \"genome_build\",\n                blurb: \"misc_blurb\",\n                description: \"misc_blurb\",\n                info: \"misc_info\",\n                tag: \"tags\"\n            },\n\n            // ........................................................................ misc\n            /** String representation */\n            toString: function() {\n                var nameAndId = this.get(\"id\") || \"\";\n                if (this.get(\"name\")) {\n                    nameAndId = `\"${this.get(\"name\")}\",${nameAndId}`;\n                }\n                return `Dataset(${nameAndId})`;\n            }\n        }\n    )\n);\n\n//==============================================================================\n/** @class Backbone collection for dataset associations.\n */\nvar DatasetAssociationCollection = Backbone.Collection\n    .extend(BASE_MVC.LoggableMixin)\n    .extend(\n        /** @lends HistoryContents.prototype */ {\n            _logNamespace: logNamespace,\n\n            model: DatasetAssociation,\n\n            /** root api url */\n            urlRoot: `${Galaxy.root}api/datasets`,\n\n            /** url fn */\n            url: function() {\n                return this.urlRoot;\n            },\n\n            // ........................................................................ common queries\n            /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n            ids: function() {\n                return this.map(item => item.get(\"id\"));\n            },\n\n            /** Get contents that are not ready\n     *  @returns array of content models\n     */\n            notReady: function() {\n                return this.filter(content => !content.inReadyState());\n            },\n\n            /** return true if any datasets don't have details */\n            haveDetails: function() {\n                return this.all(dataset => dataset.hasDetails());\n            },\n\n            // ........................................................................ ajax\n            /** using a queue, perform ajaxFn on each of the models in this collection */\n            ajaxQueue: function(ajaxFn, options) {\n                var deferred = jQuery.Deferred();\n                var startingLength = this.length;\n                var responses = [];\n\n                if (!startingLength) {\n                    deferred.resolve([]);\n                    return deferred;\n                }\n\n                // use reverse order (stylistic choice)\n                var ajaxFns = this.chain()\n                    .reverse()\n                    .map((dataset, i) => () => {\n                        var xhr = ajaxFn.call(dataset, options);\n                        // if successful, notify using the deferred to allow tracking progress\n                        xhr.done(response => {\n                            deferred.notify({\n                                curr: i,\n                                total: startingLength,\n                                response: response,\n                                model: dataset\n                            });\n                        });\n                        // (regardless of previous error or success) if not last ajax call, shift and call the next\n                        //  if last fn, resolve deferred\n                        xhr.always(response => {\n                            responses.push(response);\n                            if (ajaxFns.length) {\n                                ajaxFns.shift()();\n                            } else {\n                                deferred.resolve(responses);\n                            }\n                        });\n                    })\n                    .value();\n                // start the queue\n                ajaxFns.shift()();\n\n                return deferred;\n            },\n\n            // ........................................................................ sorting/filtering\n            /** return a new collection of datasets whose attributes contain the substring matchesWhat */\n            matches: function(matchesWhat) {\n                return this.filter(dataset => dataset.matches(matchesWhat));\n            },\n\n            /** String representation. */\n            toString: function() {\n                return [\"DatasetAssociationCollection(\", this.length, \")\"].join(\n                    \"\"\n                );\n            }\n        }\n    );\n\n//==============================================================================\nexport default {\n    DatasetAssociation: DatasetAssociation,\n    DatasetAssociationCollection: DatasetAssociationCollection\n};\n"]}