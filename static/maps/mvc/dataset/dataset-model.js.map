{"version":3,"sources":["mvc/dataset/dataset-model.js"],"names":["define","STATES","BASE_MVC","_l","searchableMixin","SearchableModelMixin","DatasetAssociation","Backbone","Model","extend","LoggableMixin","defaults","mixin","state","name","accessible","NEW","deleted","data_type","file_ext","file_size","meta_files","misc_blurb","misc_info","tags","initialize","attributes","options","this","debug","NOT_VIEWABLE","get","urls","_generateUrls","id","purge","display","edit","download","_downloadQueryParameters","report_error","rerun","show_params","visualization","_","each","value","key","root","_setUpListeners","on","inReadyState","currModel","newState","log","trigger","previous","toJSON","json","prototype","call","isDeletedOrPurged","ready","contains","READY_STATES","hasDetails","has","hasData","fetch","dataset","parse","parsed","create_time","response","Date","update_time","wait","save","attrs","delete","jQuery","when","undelete","url","ajax","xhr","done","message","status","responseObj","hda","set","purged","fail","responseJSON","error","indexOf","responseText","messageBuriedInUnfortunatelyFormattedError","searchAttributes","searchAliases","title","format","database","blurb","description","toString","nameAndId","DatasetAssociationCollection","Collection","_logNamespace","model","urlRoot","Galaxy","ids","map","item","notReady","filter","content","haveDetails","all","ajaxQueue","ajaxFn","deferred","Deferred","startingLength","length","responses","resolve","reverse","i","ajaxFns","notify","curr","total","shift","always","matches","matchesWhat","join"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-model.js","sourcesContent":["define([\n    \"mvc/dataset/states\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( STATES, BASE_MVC, _l ){\n'use strict';\n\nvar logNamespace = 'dataset';\n//==============================================================================\nvar searchableMixin = BASE_MVC.SearchableModelMixin;\n/** @class base model for any DatasetAssociation (HDAs, LDDAs, DatasetCollectionDAs).\n *      No knowledge of what type (HDA/LDDA/DCDA) should be needed here.\n *  The DA's are made searchable (by attribute) by mixing in SearchableModelMixin.\n */\nvar DatasetAssociation = Backbone.Model\n        .extend( BASE_MVC.LoggableMixin )\n        .extend( BASE_MVC.mixin( searchableMixin, /** @lends DatasetAssociation.prototype */{\n    _logNamespace : logNamespace,\n\n    /** default attributes for a model */\n    defaults : {\n        state               : STATES.NEW,\n        deleted             : false,\n        purged              : false,\n        name                : '(unnamed dataset)',\n        accessible          : true,\n        // sniffed datatype (sam, tabular, bed, etc.)\n        data_type           : '',\n        file_ext            : '',\n        file_size           : 0,\n\n        // array of associated file types (eg. [ 'bam_index', ... ])\n        meta_files          : [],\n\n        misc_blurb          : '',\n        misc_info           : '',\n\n        tags                : []\n        // do NOT default on annotation, as this default is valid and will be passed on 'save'\n        //  which is incorrect behavior when the model is only partially fetched (annos are not passed in summary data)\n        //annotation          : ''\n    },\n\n    /** instance vars and listeners */\n    initialize : function( attributes, options ){\n        this.debug( this + '(Dataset).initialize', attributes, options );\n\n        //!! this state is not in trans.app.model.Dataset.states - set it here -\n        if( !this.get( 'accessible' ) ){\n            this.set( 'state', STATES.NOT_VIEWABLE );\n        }\n\n        /** Datasets rely/use some web controllers - have the model generate those URLs on startup */\n        this.urls = this._generateUrls();\n\n        this._setUpListeners();\n    },\n\n    /** returns misc. web urls for rendering things like re-run, display, etc. */\n    _generateUrls : function(){\n        var id = this.get( 'id' );\n        if( !id ){ return {}; }\n        var urls = {\n            'purge'         : 'datasets/' + id + '/purge_async',\n            'display'       : 'datasets/' + id + '/display/?preview=True',\n            'edit'          : 'datasets/edit?dataset_id=' + id,\n            'download'      : 'datasets/' + id + '/display' + this._downloadQueryParameters(),\n            'report_error'  : 'dataset/errors?id=' + id,\n            'rerun'         : 'tool_runner/rerun?id=' + id,\n            'show_params'   : 'datasets/' + id + '/show_params',\n            'visualization' : 'visualization',\n            'meta_download' : 'dataset/get_metadata_file?hda_id=' + id + '&metadata_name='\n        };\n        _.each( urls, function( value, key ){\n            urls[ key ] = Galaxy.root + value;\n        });\n        this.urls = urls;\n        return urls;\n    },\n\n    _downloadQueryParameters : function() {\n        return '?to_ext=' + this.get( 'file_ext' );\n    },\n\n    /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n    _setUpListeners : function(){\n        // if the state has changed and the new state is a ready state, fire an event\n        this.on( 'change:state', function( currModel, newState ){\n            this.log( this + ' has changed state:', currModel, newState );\n            if( this.inReadyState() ){\n                this.trigger( 'state:ready', currModel, newState, this.previous( 'state' ) );\n            }\n        });\n        // the download url (currently) relies on having a correct file extension\n        this.on( 'change:id change:file_ext', function( currModel ){\n            this._generateUrls();\n        });\n    },\n\n    // ........................................................................ common queries\n    /** override to add urls */\n    toJSON : function(){\n        var json = Backbone.Model.prototype.toJSON.call( this );\n        //console.warn( 'returning json?' );\n        //return json;\n        return _.extend( json, {\n            urls : this.urls\n        });\n    },\n\n    /** Is this dataset deleted or purged? */\n    isDeletedOrPurged : function(){\n        return ( this.get( 'deleted' ) || this.get( 'purged' ) );\n    },\n\n    /** Is this dataset in a 'ready' state; where 'Ready' states are states where no\n     *      processing (for the ds) is left to do on the server.\n     */\n    inReadyState : function(){\n        var ready = _.contains( STATES.READY_STATES, this.get( 'state' ) );\n        return ( this.isDeletedOrPurged() || ready );\n    },\n\n    /** Does this model already contain detailed data (as opposed to just summary level data)? */\n    hasDetails : function(){\n        // if it's inaccessible assume it has everything it needs\n        if( !this.get( 'accessible' ) ){ return true; }\n        return this.has( 'annotation' );\n    },\n\n    /** Convenience function to match dataset.has_data. */\n    hasData : function(){\n        return ( this.get( 'file_size' ) > 0 );\n    },\n\n    // ........................................................................ ajax\n    fetch : function( options ){\n        var dataset = this;\n        return Backbone.Model.prototype.fetch.call( this, options )\n            .always( function(){\n                dataset._generateUrls();\n            });\n    },\n\n    /** override to use actual Dates objects for create/update times */\n    parse : function( response, options ){\n        var parsed = Backbone.Model.prototype.parse.call( this, response, options );\n        if( parsed.create_time ){\n            parsed.create_time = new Date( parsed.create_time );\n        }\n        if( parsed.update_time ){\n            parsed.update_time = new Date( parsed.update_time );\n        }\n        return parsed;\n    },\n\n    /** override to wait by default */\n    save : function( attrs, options ){\n        options = options || {};\n        options.wait = _.isUndefined( options.wait ) ? true : options.wait;\n        return Backbone.Model.prototype.save.call( this, attrs, options );\n    },\n\n    //NOTE: subclasses of DA's will need to implement url and urlRoot in order to have these work properly\n    /** save this dataset, _Mark_ing it as deleted (just a flag) */\n    'delete' : function( options ){\n        if( this.get( 'deleted' ) ){ return jQuery.when(); }\n        return this.save( { deleted: true }, options );\n    },\n    /** save this dataset, _Mark_ing it as undeleted */\n    undelete : function( options ){\n        if( !this.get( 'deleted' ) || this.get( 'purged' ) ){ return jQuery.when(); }\n        return this.save( { deleted: false }, options );\n    },\n\n    /** remove the file behind this dataset from the filesystem (if permitted) */\n    purge : function _purge( options ){\n        //TODO: use, override model.destroy, HDA.delete({ purge: true })\n        if( this.get( 'purged' ) ){ return jQuery.when(); }\n        options = options || {};\n        options.url = this.urls.purge;\n\n        //TODO: ideally this would be a DELETE call to the api\n        //  using purge async for now\n        var hda = this,\n            xhr = jQuery.ajax( options );\n        xhr.done( function( message, status, responseObj ){\n            hda.set({ deleted: true, purged: true });\n        });\n        xhr.fail( function( xhr, status, message ){\n            // Exception messages are hidden within error page including:  '...not allowed in this Galaxy instance.'\n            // unbury and re-add to xhr\n            var error = _l( \"Unable to purge dataset\" );\n            var messageBuriedInUnfortunatelyFormattedError = ( 'Removal of datasets by users '\n                + 'is not allowed in this Galaxy instance' );\n            if( xhr.responseJSON && xhr.responseJSON.error ){\n                error = xhr.responseJSON.error;\n            } else if( xhr.responseText.indexOf( messageBuriedInUnfortunatelyFormattedError ) !== -1 ){\n                error = messageBuriedInUnfortunatelyFormattedError;\n            }\n            xhr.responseText = error;\n            hda.trigger( 'error', hda, xhr, options, _l( error ), { error: error } );\n        });\n        return xhr;\n    },\n\n    // ........................................................................ searching\n    /** what attributes of an HDA will be used in a text search */\n    searchAttributes : [\n        'name', 'file_ext', 'genome_build', 'misc_blurb', 'misc_info', 'annotation', 'tags'\n    ],\n\n    /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n    searchAliases : {\n        title       : 'name',\n        format      : 'file_ext',\n        database    : 'genome_build',\n        blurb       : 'misc_blurb',\n        description : 'misc_blurb',\n        info        : 'misc_info',\n        tag         : 'tags'\n    },\n\n    // ........................................................................ misc\n    /** String representation */\n    toString : function(){\n        var nameAndId = this.get( 'id' ) || '';\n        if( this.get( 'name' ) ){\n            nameAndId = '\"' + this.get( 'name' ) + '\",' + nameAndId;\n        }\n        return 'Dataset(' + nameAndId + ')';\n    }\n}));\n\n\n//==============================================================================\n/** @class Backbone collection for dataset associations.\n */\nvar DatasetAssociationCollection = Backbone.Collection.extend( BASE_MVC.LoggableMixin ).extend(\n/** @lends HistoryContents.prototype */{\n    _logNamespace : logNamespace,\n\n    model : DatasetAssociation,\n\n    /** root api url */\n    urlRoot : Galaxy.root + 'api/datasets',\n\n    /** url fn */\n    url : function(){\n        return this.urlRoot;\n    },\n\n    // ........................................................................ common queries\n    /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n    ids : function(){\n        return this.map( function( item ){ return item.get('id'); });\n    },\n\n    /** Get contents that are not ready\n     *  @returns array of content models\n     */\n    notReady : function(){\n        return this.filter( function( content ){\n            return !content.inReadyState();\n        });\n    },\n\n    /** return true if any datasets don't have details */\n    haveDetails : function(){\n        return this.all( function( dataset ){ return dataset.hasDetails(); });\n    },\n\n    // ........................................................................ ajax\n    /** using a queue, perform ajaxFn on each of the models in this collection */\n    ajaxQueue : function( ajaxFn, options ){\n        var deferred = jQuery.Deferred(),\n            startingLength = this.length,\n            responses = [];\n\n        if( !startingLength ){\n            deferred.resolve([]);\n            return deferred;\n        }\n\n        // use reverse order (stylistic choice)\n        var ajaxFns = this.chain().reverse().map( function( dataset, i ){\n            return function(){\n                var xhr = ajaxFn.call( dataset, options );\n                // if successful, notify using the deferred to allow tracking progress\n                xhr.done( function( response ){\n                    deferred.notify({ curr: i, total: startingLength, response: response, model: dataset });\n                });\n                // (regardless of previous error or success) if not last ajax call, shift and call the next\n                //  if last fn, resolve deferred\n                xhr.always( function( response ){\n                    responses.push( response );\n                    if( ajaxFns.length ){\n                        ajaxFns.shift()();\n                    } else {\n                        deferred.resolve( responses );\n                    }\n                });\n            };\n        }).value();\n        // start the queue\n        ajaxFns.shift()();\n\n        return deferred;\n    },\n\n    // ........................................................................ sorting/filtering\n    /** return a new collection of datasets whose attributes contain the substring matchesWhat */\n    matches : function( matchesWhat ){\n        return this.filter( function( dataset ){\n            return dataset.matches( matchesWhat );\n        });\n    },\n\n    /** String representation. */\n    toString : function(){\n         return ([ 'DatasetAssociationCollection(', this.length, ')' ].join( '' ));\n    }\n});\n\n\n//==============================================================================\n    return {\n        DatasetAssociation              : DatasetAssociation,\n        DatasetAssociationCollection    : DatasetAssociationCollection\n    };\n});\n"]}