{"version":3,"sources":["mvc/dataset/dataset-li.js"],"names":["define","LIST_ITEM","STATES","faIconButton","BASE_MVC","_l","_super","DatasetListItemView","className","prototype","id","initialize","this","model","get","attributes","join","log","logger","call","linkTarget","_setUpListeners","self","listenTo","change","changedAttributes","state","inReadyState","fetch","silent","done","render","changed","_renderNametags","length","$","html","_fetchModelDetails","view","jQuery","hasDetails","when","Backbone","callback","$el","fadeOut","speed","View","remove","_swapNewRender","$newRender","addClass","has","_renderPrimaryActions","_renderDisplayButton","NOT_VIEWABLE","DISCARDED","displayBtnData","target","classes","disabled","UPLOAD","NEW","title","Galaxy","frame","ev","onclick","active","faIcon","addDataset","_renderDetails","$details","find","templates","noAccess","_renderSummary","prepend","_setUpBehaviors","empty","append","_renderSecondaryActions","_renderDetailMessages","_renderDisplayApplications","json","toJSON","summaries","summaryRenderFn","unknown","$warnings","_","each","detailMessages","templateFn","isDeletedOrPurged","debug","displayApplications","ERROR","OK","FAILED_METADATA","_renderDownloadButton","_renderShowParamsButton","stopPropagation","show_params","add","url","href","preventDefault","hasData","isEmpty","urls","download","_renderMetaFileDownloadButton","events","trigger","meta_file","meta_download","file_type","modelString","template","warnings","failed_metadata","tags","extend","clone","purged","wrapTemplate","deleted","click .download-btn","toString","detailsTemplate","summaryTemplates","detailMessageTemplates","resubmitted","displayApplicationsTemplate","details","noAccessTemplate","QUEUED","RUNNING","SETTING_METADATA","PAUSED","EMPTY"],"mappings":"aAAAA,QACI,qBADJA,qBAOA,oBAHI,eAKJ,sBACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GADA,IAYAC,EAAIC,EAAAA,aAIAC,EAAqBC,EAAAA,QAErBC,cAlBe,UAoBdF,UAPsCF,EAAAG,UAAAD,UAAA,WASvCE,GAAA,WACAC,OAAAA,UAAaC,KAAAC,MAAAC,IAAUC,OAAYC,KAAA,MAE/BL,WAAKM,SAAKF,GACVT,EAAOG,SAAUE,KAAAA,OAAiBC,KAAMG,MAAAA,OAAxCA,EAAAG,QADAN,KAAKK,IAAKL,KAAO,eAAgBG,GAGjCT,EAAAG,UAAAE,WAAAQ,KAAAP,KAAAG,GACAH,KAAKQ,WAAaL,EAAWK,YAAc,UAM3CC,gBAAIC,WADJhB,EAAOG,UAAUY,gBAAgBF,KAAMP,MAGvC,IAAAU,EAAAV,KAGQ,OAAAU,EAAAC,SAAAD,EAAAT,OACAW,OAAA,SAASX,GAKLS,EAAAT,MAAAY,oBAAAC,OACAJ,EAAAT,MAAAc,gBACAL,EAAAA,WACuBA,EAAAA,MAAAA,aAGnBA,EAAAT,MAAAe,OAAAC,QAAA,IACAC,KAAA,WAAAR,EAAAS,WAEAT,EAAAA,IAAAA,EAAQU,QAAR,SAAA,IAAiCC,EAAAA,KAAAA,EAAAA,SAAjCC,OAIPZ,EAAAa,EAAA,aAAAC,KAAAd,EAAAW,mBArBTX,EAAAS,aAkCCM,mBAAA,WACD,IAAAC,EAAOC,KACV,OA7DsCD,EAAAzB,MAAAc,iBAAAW,EAAAzB,MAAA2B,aA0DxBF,EAAKzB,MAAMe,OAAQC,QAAQ,IAM1CU,OAAAE,QAQQC,OAAAA,SAAAA,EAAcjC,GACd,IAAA6B,EAAA1B,KAAgB+B,EAAAA,GAAAA,KAASxB,QAAeP,KAAAgC,IAAAC,QAAAC,EAAA,WAC3CJ,SAHDK,KAAAtC,UAAAuC,OAAA7B,KAAAmB,GAvEmCK,GAAAA,EAAAxB,KAAAmB,MAyFnCW,eAASpC,SAAWqC,GAGpB,OAFI5C,EAAAG,UAAS0C,eAAUhC,KAAWP,KAAKC,GACtCD,KAAAC,MAAAuC,IAAA,UACDxC,KAAAgC,IAAOO,SAAP,SAAAvC,KAAAC,MAAAC,IAAA,UAAOF,KAAKgC,KAOZS,sBAAcC,WAAd,OAAS1C,KAAK0C,yBAMdA,qBAAY,WAIR,IAAA5B,EAAAd,KAAOC,MAAPC,IAAA,SACH,GAAAY,IAAAxB,EAAAqD,cAHK7B,IAAUxB,EAAOsD,YAKvB5C,KAAI6C,MAAAA,IAAAA,cACAC,OAAAA,KADJ,IAAID,GAKJC,OAAA9C,KAAAQ,WACAuC,QAAI,eAIJ,GAAA/C,KAAAC,MAAAC,IAAA,UACC2C,EAAU/B,UAAUxB,EACjBuD,EAAAA,MAAeG,EAAf,kDAGJ,GAAAlC,IAAAxB,EAAA2D,OACCJ,EAAU/B,UAAUxB,EACjBuD,EAAAA,MAAeG,EAAf,mEAIAH,GAAAA,IAAAA,EAAAK,IAJAL,EAAeG,UAAW,EAM1BH,EAAAM,MAAA1D,EAAA,wCAHG,CAMHoD,EAAAM,MAAA1D,EAAA,aAGIoD,EAAIO,KAAOC,KAASD,MAAAA,KAAOC,QAGvBC,IAAAA,EAAAA,KACHT,EAAAU,QAAA,SAAAD,GALLF,OAAAC,OAAAD,OAAAC,MAAAG,SAQJX,OAAeY,MAAfC,WAAAhD,EAAAT,MAAAC,IAAA,OACOX,EAAAA,mBAAP,OAIJsD,EAAAY,OAAA,SAJWlE,EAAcsD,IAYjBc,eAAA,WAIJC,GAAAA,KAAAA,MAASC,IAAM,WAAfvE,EAAAqD,aACAiB,OAAAA,EAASC,KAAMC,UAAfC,SAAkC/D,KAAKgE,MAAAA,SAClCC,OAGL,IAAAL,EAAKM,EAAAA,UAAiBN,eAAtBrD,KAAAP,MAMA,OALA4D,EAAAC,KAAOD,kBAAPO,QAAAC,OAAApE,KAAAqE,2BACHT,EA5KsCC,KAAA,YAAArC,KAAAxB,KAAAgE,kBAuK9BC,QAASjE,KAAKsE,yBAOvBV,EAAAC,KAAA,yBAAArC,KAAAxB,KAAAuE,8BAEIvE,KAAAkE,gBAAgBjE,GAAhB2D,GADJI,eAAiB,WAOjB,IAAAQ,EAAAxE,KAAAC,MAAAwE,SACAH,EAAAA,KAAwBR,UAAAY,UAAAF,EAAA1D,OACpB,OAAA6D,EAAWA,GAAX3E,KAAA8D,UAAAY,UAAAE,SACmBJ,EAAAxE,OAIf6E,sBAAUT,WACb,IAAA1C,EAFD1B,KAGA6E,EAAOA,EAAAA,uCA/L4BL,EAAA9C,EAAAzB,MAAAwE,SAoMG,OAF1CK,EAAAC,KAAArD,EAAAoC,UAAAkB,eAAA,SAAAC,GACAV,EAAAA,OAAAA,EAAAA,EAA6BC,EAAA9C,OACamD,GAMzCN,2BA1MsC,WAoMnC,OAAIvE,KAAKC,MAAMiF,oBAA8B,IAUjDb,KAAAA,UAAAA,oBAA0BrE,KAAAC,MAAAC,IAAA,gBAAUF,MAChCA,KAAKmF,UAAOC,oBAAZpF,KAAAC,MAAAC,IAAA,iBAAAF,OACAI,KAAA,KAKIiE,wBAAYgB,WALhB,OAMQrF,KAAAmF,MAAA,2BANRnF,KAAAC,MAAAC,IAAA,UAQA,KAAAZ,EAASqD,aAxN0B,SAmN/B,KAAKrD,EAAOgG,GAQpB,KAAAhG,EAAAiG,gBANQ,KAAKjG,EAAO+F,MACR,OAASrF,KAAKwF,wBAAyBxF,KAAKyF,2BASpD,OAAAzF,KAAAyF,4BAMIhC,wBAAc,WAEV,OAAAlE,GACI6D,MAAAA,EAAAA,gBACAE,QAAAA,aACAA,KAAAA,KAAGoC,MAAAA,KAAHC,YACH7C,OAAA9C,KAAAQ,WACJiD,OAAA,iBAZeF,QAApB,SAAAD,GAhOmCF,OAAAC,OAAAD,OAAAC,MAAAG,SAwOvBJ,OAAOC,MAAMuC,KAAOzC,MAAO,kBAAmB0C,IAAK7F,KAAK8F,OASxExC,EAAAyC,iBAPgBzC,EAAGoC,uBAgBfF,sBAAgB,WAEf,OAAAxF,KAAAC,MAAAC,IAAA,YAAAF,KAAAC,MAAA+F,UAAA,KAFIlB,EAAEmB,QAASjG,KAAKC,MAAMC,IAAK,eAehCqB,GASgB,oCAKDnB,SAdNJ,KAeDC,MACJiG,KAAAC,SACI,YAjBR1G,EAAA,YAAA,cAzQmC,uCAkQ/B,QA2BR4B,KAAAA,KAvBArB,KAAAoG,iCACAA,8BAAgC,WAgChC,IAAAF,EAAAlG,KAAAC,MAAAiG,KACAG,OAAAA,GACI,2CAA0C,oFADS,WAAA5G,EAAA,YAAA,KAEnD,uCAA0C,OAFS,kEAGnD,gBAA0ByG,EAAAC,SAAA,cAAc1G,EAAA,oBAAA,YAAEqF,EAAKwB,IAAAA,KAASrG,MAAAC,IAAY,cAA1B,SAAAqG,GAAuC,OA3S9C,gBAAAL,EAAAM,cAAAD,EAAAE,UAAA,KAoRXhH,EAAI,YAAc,IAAK8G,EAAUE,UA0B7D,aACArG,KAAA,MACWA,KAAA,MACHsG,QACJ,UACHtG,KAAA,QAGLiB,gBAAA,WAOY,OANZyD,EAAA6B,UACAhH,gFACA,wCAxBoB,4DA0BZiH,UACAC,aAAAA,KAAkBrH,MACdsH,KAAA9G,KAAAC,MAAAC,IAAA,WASAmG,OAAAvB,EAAAiC,OAAAjC,EAAAkC,MAAAtH,EAF0BG,UAGtBwG,SAKRY,qBAAkBC,SACd5D,GAAAtD,KAAAsG,QAAA,UACItG,KAAAsD,IAKR6D,oBAAmBD,SAAa5D,GAAAtD,KAAAsG,QAAA,SAAAtG,KAAAsD,IAC5B8D,sBAAA,SAAA9D,GAAAtD,KAAAsG,QAAA,WAAAtG,KAAAsD,MApCR+D,SAAW,WAEP,MAAO,wBA6CPC,KAAkB9H,MAAS0H,KAAAA,MAC3B,GAAA,cA9C8C,OAyLlD,OA7GJvH,EAAAE,UAAAiE,UAAA,WA+BIyD,IAAAA,EAAAA,EAAAA,UAAyBrE,EAAQ1D,UAAS0H,UAATN,UAGjCW,gBAAkBjI,EAAOqD,cAMzB4E,iDAGAA,oCAGAA,EAAAA,2DAGAA,SAGAA,YAUAA,MAAAA,EAAkBjI,cAtHV,2BA6HR,kCACIkI,EAAAA,wDAAyB,uBACzBC,SACI,YAFqBR,OAA7BzH,EAAA0H,cAvHQ,4BAkIR,+CACIQ,EAAAA,uDAhIQ,SA+IZ,YAEIC,QAAAA,EAAcL,cAEd5C,8CACAM,gDACAI,EAAAA,iCANJ,SAvKJ,cA9UAkC,EAAA9H,EAAA0H,cAsXQ,wBACI,8BAEA,8BACI,2BACA,4BACJ,SAGA,mDACI,mCACA,yCAEA,2CAEA,4BACI,sDACJ,UACJ,UACJ,UACD,WAECU,EAAmBpI,EAAS0H,cAC5B,wBACI,wBACIzH,EAAI,mDACR,SACJ,UACD,WAGC8H,KACJA,EAAkBjI,EAAOgG,IAAOiC,EAAkBjI,EAAOiG,iBAAoB/F,EAAS0H,cAClF,kCACI,sBACI,uDACJ,SACJ,UAEA,gCACI,yBACI,yBAA0BzH,EAAI,UAAY,WAC1C,qDACJ,SACJ,UAEA,sCACI,sBACI,yBAA0BA,EAAI,YAAc,WAC5C,uBACI,gCACJ,UACJ,SACJ,UAEA,iCACI,qBACI,sDACJ,SACJ,WACD,WACH8H,EAAkBjI,EAAO4D,KAAQ1D,EAAS0H,cACtC,QAASzH,EAAI,mEAAqE,UACnF,WACH8H,EAAkBjI,EAAOqD,cAAiBnD,EAAS0H,cAC/C,QAASzH,EAAI,mDAAqD,UACnE,WACH8H,EAAkBjI,EAAOsD,WAAcpD,EAAS0H,cAC5C,QAASzH,EAAI,iEAAmE,UACjF,WACH8H,EAAkBjI,EAAOuI,QAAWrI,EAAS0H,cACzC,QAASzH,EAAI,8BAAgC,UAC9C,WACH8H,EAAkBjI,EAAOwI,SAAYtI,EAAS0H,cAC1C,QAASzH,EAAI,iCAAmC,UACjD,WACH8H,EAAkBjI,EAAO2D,QAAWzD,EAAS0H,cACzC,QAASzH,EAAI,uCAAyC,UACvD,WACH8H,EAAkBjI,EAAOyI,kBAAqBvI,EAAS0H,cACnD,QAASzH,EAAI,mCAAqC,UACnD,WACH8H,EAAkBjI,EAAO0I,QAAWxI,EAAS0H,cACzC,QAASzH,EAAI,kFAAoF,UAClG,WACH8H,EAAkBjI,EAAO+F,OAAU7F,EAAS0H,cACxC,+BACI,uCACJ,UACA,2BAA4BzH,EAAI,uCAAyC,WACzE,8DACD,WACH8H,EAAkBjI,EAAO2I,OAAUzI,EAAS0H,cACxC,QAASzH,EAAI,WAAa,4CAC3B,WACH8H,EAAiB3C,QAAUpF,EAAS0H,cAChC,mEACD,WAGH,IAAIM,GACAC,YAAcjI,EAAS0H,cAEnB,iCACI,iDACIzH,EAAI,sDACR,SACJ,aAKJiI,EAA8BlI,EAAS0H,cACvC,uCACI,oCACI,sEACA,2CACI,6CACI,0DACI,kCACJ,QACJ,YACJ,UACJ,SACJ,aACD,QAEH,OAAOpC,EAAEiC,UAAYrH,EAAOG,UAAUiE,WAClC8C,SAAcA,EACde,QAAcL,EACdvD,SAAc6D,EACdlD,UAAc6C,EACdvC,eAAsBwC,EACtBpC,oBAAsBsC,IAvG9B,IA8GQ/H,oBAAsBA","file":"../../../scripts/mvc/dataset/dataset-li.js","sourcesContent":["define([\n    \"mvc/list/list-item\",\n    \"mvc/dataset/states\",\n    \"ui/fa-icon-button\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( LIST_ITEM, STATES, faIconButton, BASE_MVC, _l ){\n'use strict';\n\nvar logNamespace = 'dataset';\n/*==============================================================================\nTODO:\n    straighten out state rendering and templates used\n    inaccessible/STATES.NOT_VIEWABLE is a special case\n    simplify button rendering\n\n==============================================================================*/\nvar _super = LIST_ITEM.ListItemView;\n/** @class Read only list view for either LDDAs, HDAs, or HDADCEs.\n *      Roughly, any DatasetInstance (and not a raw Dataset).\n */\nvar DatasetListItemView = _super.extend(\n/** @lends DatasetListItemView.prototype */{\n    _logNamespace : logNamespace,\n\n    className   : _super.prototype.className + \" dataset\",\n    //TODO:?? doesn't exactly match an hda's type_id\n    id          : function(){\n        return [ 'dataset', this.model.get( 'id' ) ].join( '-' );\n    },\n\n    /** Set up: instance vars, options, and event handlers */\n    initialize : function( attributes ){\n        if( attributes.logger ){ this.logger = this.model.logger = attributes.logger; }\n        this.log( this + '.initialize:', attributes );\n        _super.prototype.initialize.call( this, attributes );\n\n        /** where should pages from links be displayed? (default to new tab/window) */\n        this.linkTarget = attributes.linkTarget || '_blank';\n    },\n\n    /** event listeners */\n    _setUpListeners : function(){\n        _super.prototype._setUpListeners.call( this );\n        var self = this;\n\n        // re-rendering on any model changes\n        return self.listenTo( self.model, {\n            'change': function( model ){\n                // if the model moved into the ready state and is expanded without details, fetch those details now\n                if( self.model.changedAttributes().state &&\n                    self.model.inReadyState() &&\n                    self.expanded &&\n                    !self.model.hasDetails() ){\n                    // normally, will render automatically (due to fetch -> change),\n                    // but! setting_metadata sometimes doesn't cause any other changes besides state\n                    // so, not rendering causes it to seem frozen in setting_metadata state\n                    self.model.fetch({ silent : true })\n                        .done( function(){ self.render(); });\n                } else {\n                    if( _.has( model.changed, 'tags' ) && _.keys( model.changed ).length === 1 ){\n                        // If only the tags have changed, rerender specifically\n                        // the titlebar region.  Otherwise default to the full\n                        // render.\n                        self.$( '.nametags' ).html( self._renderNametags() );\n                    } else {\n                        self.render();\n                    }\n                }\n            }\n        });\n    },\n\n    // ......................................................................... expandable\n    /** In this override, only get details if in the ready state, get rerunnable if in other states.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n    _fetchModelDetails : function(){\n        var view = this;\n        if( view.model.inReadyState() && !view.model.hasDetails() ){\n            return view.model.fetch({ silent: true });\n        }\n        return jQuery.when();\n    },\n\n    // ......................................................................... removal\n    /** Remove this view's html from the DOM and remove all event listeners.\n     *  @param {Number or String} speed jq effect speed\n     *  @param {Function} callback      an optional function called when removal is done (scoped to this view)\n     */\n    remove : function( speed, callback ){\n        var view = this;\n        speed = speed || this.fxSpeed;\n        this.$el.fadeOut( speed, function(){\n            Backbone.View.prototype.remove.call( view );\n            if( callback ){ callback.call( view ); }\n        });\n    },\n\n    // ......................................................................... rendering\n    /* TODO:\n        dataset states are the issue primarily making dataset rendering complex\n            each state should have it's own way of displaying/set of details\n            often with different actions that can be applied\n        throw in deleted/purged/visible and things get complicated easily\n        I've considered (a couple of times) - creating a view for each state\n            - but recreating the view during an update...seems wrong\n    */\n    /** In this override, add the dataset state as a class for use with state-based CSS */\n    _swapNewRender : function( $newRender ){\n        _super.prototype._swapNewRender.call( this, $newRender );\n        if( this.model.has( 'state' ) ){\n            this.$el.addClass( 'state-' + this.model.get( 'state' ) );\n        }\n        return this.$el;\n    },\n\n    // ................................................................................ titlebar\n    /** In this override, add the dataset display button. */\n    _renderPrimaryActions : function(){\n        // render just the display for read-only\n        return [ this._renderDisplayButton() ];\n    },\n\n    /** Render icon-button to display dataset data */\n    _renderDisplayButton : function(){\n        // don't show display if not viewable or not accessible\n        var state = this.model.get( 'state' );\n        if( ( state === STATES.NOT_VIEWABLE ) ||\n            ( state === STATES.DISCARDED ) ||\n            ( !this.model.get( 'accessible' ) ) ){\n            return null;\n        }\n\n        var displayBtnData = {\n            target      : this.linkTarget,\n            classes     : 'display-btn'\n        };\n\n        // show a disabled display if the data's been purged\n        if( this.model.get( 'purged' ) ){\n            displayBtnData.disabled = true;\n            displayBtnData.title = _l( 'Cannot display datasets removed from disk' );\n\n        // disable if still uploading\n        } else if( state === STATES.UPLOAD ){\n            displayBtnData.disabled = true;\n            displayBtnData.title = _l( 'This dataset must finish uploading before it can be viewed' );\n\n        // disable if still new\n        } else if( state === STATES.NEW ){\n            displayBtnData.disabled = true;\n            displayBtnData.title = _l( 'This dataset is not yet viewable' );\n\n        } else {\n            displayBtnData.title = _l( 'View data' );\n\n            // default link for dataset\n            displayBtnData.href  = this.model.urls.display;\n\n            // add frame manager option onclick event\n            var self = this;\n            displayBtnData.onclick = function( ev ){\n                if (Galaxy.frame && Galaxy.frame.active) {\n                    // Add dataset to frames.\n                    Galaxy.frame.addDataset(self.model.get('id'));\n                    ev.preventDefault();\n                }\n            };\n        }\n        displayBtnData.faIcon = 'fa-eye';\n        return faIconButton( displayBtnData );\n    },\n\n    // ......................................................................... rendering details\n    /** Render the enclosing div of the hda body and, if expanded, the html in the body\n     *  @returns {jQuery} rendered DOM\n     */\n    _renderDetails : function(){\n        //TODO: generalize to be allow different details for each state\n\n        // no access - render nothing but a message\n        if( this.model.get( 'state' ) === STATES.NOT_VIEWABLE ){\n            return $( this.templates.noAccess( this.model.toJSON(), this ) );\n        }\n\n        var $details = _super.prototype._renderDetails.call( this );\n        $details.find( '.actions .left' ).empty().append( this._renderSecondaryActions() );\n        $details.find( '.summary' ).html( this._renderSummary() )\n            .prepend( this._renderDetailMessages() );\n        $details.find( '.display-applications' ).html( this._renderDisplayApplications() );\n\n        this._setUpBehaviors( $details );\n        return $details;\n    },\n\n    /** Defer to the appropo summary rendering fn based on state */\n    _renderSummary : function(){\n        var json = this.model.toJSON(),\n            summaryRenderFn = this.templates.summaries[ json.state ];\n        summaryRenderFn = summaryRenderFn || this.templates.summaries.unknown;\n        return summaryRenderFn( json, this );\n    },\n\n    /** Render messages to be displayed only when the details are shown */\n    _renderDetailMessages : function(){\n        var view = this,\n            $warnings = $( '<div class=\"detail-messages\"></div>' ),\n            json = view.model.toJSON();\n        //TODO:! unordered (map)\n        _.each( view.templates.detailMessages, function( templateFn ){\n            $warnings.append( $( templateFn( json, view ) ) );\n        });\n        return $warnings;\n    },\n\n    /** Render the external display application links */\n    _renderDisplayApplications : function(){\n        if( this.model.isDeletedOrPurged() ){ return ''; }\n        // render both old and new display apps using the same template\n        return [\n            this.templates.displayApplications( this.model.get( 'display_apps' ), this ),\n            this.templates.displayApplications( this.model.get( 'display_types' ), this )\n        ].join( '' );\n    },\n\n    // ......................................................................... secondary/details actions\n    /** A series of links/buttons for less commonly used actions: re-run, info, etc. */\n    _renderSecondaryActions : function(){\n        this.debug( '_renderSecondaryActions' );\n        switch( this.model.get( 'state' ) ){\n            case STATES.NOT_VIEWABLE:\n                return [];\n            case STATES.OK:\n            case STATES.FAILED_METADATA:\n            case STATES.ERROR:\n                return [ this._renderDownloadButton(), this._renderShowParamsButton() ];\n        }\n        return [ this._renderShowParamsButton() ];\n    },\n\n    /** Render icon-button to show the input and output (stdout/err) for the job that created this.\n     *  @returns {jQuery} rendered DOM\n     */\n    _renderShowParamsButton : function(){\n        // gen. safe to show in all cases\n        return faIconButton({\n            title       : _l( 'View details' ),\n            classes     : 'params-btn',\n            href        : this.model.urls.show_params,\n            target      : this.linkTarget,\n            faIcon      : 'fa-info-circle',\n            onclick     : function( ev ) {\n                if ( Galaxy.frame && Galaxy.frame.active ) {\n                    Galaxy.frame.add( { title: 'Dataset details', url: this.href } );\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            }\n        });\n    },\n\n\n    /** Render icon-button/popupmenu to download the data (and/or the associated meta files (bai, etc.)) for this.\n     *  @returns {jQuery} rendered DOM\n     */\n    _renderDownloadButton : function(){\n        // don't show anything if the data's been purged\n        if( this.model.get( 'purged' ) || !this.model.hasData() ){ return null; }\n\n        // return either: a popupmenu with links to download assoc. meta files (if there are meta files)\n        //  or a single download icon-button (if there are no meta files)\n        if( !_.isEmpty( this.model.get( 'meta_files' ) ) ){\n            return this._renderMetaFileDownloadButton();\n        }\n\n        return $([\n            '<a class=\"download-btn icon-btn\" ',\n                'href=\"', this.model.urls.download, '\" title=\"' + _l( 'Download' ) + '\" download>',\n                '<span class=\"fa fa-floppy-o\"></span>',\n            '</a>'\n        ].join( '' ));\n    },\n\n    /** Render the download button which opens a dropdown with links to download assoc. meta files (indeces, etc.) */\n    _renderMetaFileDownloadButton : function(){\n        var urls = this.model.urls;\n        return $([\n            '<div class=\"metafile-dropdown dropdown\">',\n                '<a class=\"download-btn icon-btn\" href=\"javascript:void(0)\" data-toggle=\"dropdown\"',\n                    ' title=\"' + _l( 'Download' ) + '\">',\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                '</a>',\n                '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">',\n                    '<li><a href=\"' + urls.download + '\" download>', _l( 'Download dataset' ), '</a></li>',\n                    _.map( this.model.get( 'meta_files' ), function( meta_file ){\n                        return [\n                            '<li><a href=\"', urls.meta_download + meta_file.file_type, '\">',\n                                _l( 'Download' ), ' ', meta_file.file_type,\n                            '</a></li>'\n                        ].join( '' );\n                    }).join( '\\n' ),\n                '</ul>',\n            '</div>'\n        ].join( '\\n' ));\n    },\n\n    _renderNametags : function(){\n        var tpl =  _.template([\n            '<% _.each(_.sortBy(_.uniq(tags), function(x) { return x }), function(tag){ %>',\n                '<% if (tag.indexOf(\"name:\") == 0){ %>',\n                    '<span class=\"label label-info\"><%- tag.slice(5) %></span>',\n                '<% } %>',\n            '<% }); %>'].join(''));\n        return tpl({tags: this.model.get('tags')});\n    },\n\n    // ......................................................................... misc\n    events : _.extend( _.clone( _super.prototype.events ), {\n        'click .display-btn'    : function( ev ){ this.trigger( 'display', this, ev ); },\n        'click .params-btn'     : function( ev ){ this.trigger( 'params', this, ev ); },\n        'click .download-btn'   : function( ev ){ this.trigger( 'download', this, ev ); }\n    }),\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'DatasetListItemView(' + modelString + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemView.prototype.templates = (function(){\n//TODO: move to require text! plugin\n\n    var warnings = _.extend( {}, _super.prototype.templates.warnings, {\n        failed_metadata : BASE_MVC.wrapTemplate([\n            // failed metadata is rendered as a warning on an otherwise ok dataset view\n            '<% if( model.state === \"failed_metadata\" ){ %>',\n                '<div class=\"warningmessagesmall\">',\n                    _l( 'An error occurred setting the metadata for this dataset' ),\n                '</div>',\n            '<% } %>'\n        ]),\n        error : BASE_MVC.wrapTemplate([\n            // error during index fetch - show error on dataset\n            '<% if( model.error ){ %>',\n                '<div class=\"errormessagesmall\">',\n                    _l( 'There was an error getting the data for this dataset' ), ': <%- model.error %>',\n                '</div>',\n            '<% } %>'\n        ]),\n        purged : BASE_MVC.wrapTemplate([\n            '<% if( model.purged ){ %>',\n                '<div class=\"purged-msg warningmessagesmall\">',\n                    _l( 'This dataset has been deleted and removed from disk' ),\n                '</div>',\n            '<% } %>'\n        ]),\n        deleted : BASE_MVC.wrapTemplate([\n            // deleted not purged\n            '<% if( model.deleted && !model.purged ){ %>',\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l( 'This dataset has been deleted' ),\n                '</div>',\n            '<% } %>'\n        ])\n\n        //NOTE: hidden warning is only needed for HDAs\n    });\n\n    var detailsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"details\">',\n            '<div class=\"summary\"></div>',\n\n            '<div class=\"actions clear\">',\n                '<div class=\"left\"></div>',\n                '<div class=\"right\"></div>',\n            '</div>',\n\n            // do not display tags, annotation, display apps, or peek when deleted\n            '<% if( !dataset.deleted && !dataset.purged ){ %>',\n                '<div class=\"tags-display\"></div>',\n                '<div class=\"annotation-display\"></div>',\n\n                '<div class=\"display-applications\"></div>',\n\n                '<% if( dataset.peek ){ %>',\n                    '<pre class=\"dataset-peek\"><%= dataset.peek %></pre>',\n                '<% } %>',\n            '<% } %>',\n        '</div>'\n    ], 'dataset' );\n\n    var noAccessTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"details\">',\n            '<div class=\"summary\">',\n                _l( 'You do not have permission to view this dataset' ),\n            '</div>',\n        '</div>'\n    ], 'dataset' );\n\n//TODO: still toooooooooooooo complex - rework\n    var summaryTemplates = {};\n    summaryTemplates[ STATES.OK ] = summaryTemplates[ STATES.FAILED_METADATA ] = BASE_MVC.wrapTemplate([\n        '<% if( dataset.misc_blurb ){ %>',\n            '<div class=\"blurb\">',\n                '<span class=\"value\"><%- dataset.misc_blurb %></span>',\n            '</div>',\n        '<% } %>',\n\n        '<% if( dataset.file_ext ){ %>',\n            '<div class=\"datatype\">',\n                '<label class=\"prompt\">', _l( 'format' ), '</label>',\n                '<span class=\"value\"><%- dataset.file_ext %></span>',\n            '</div>',\n        '<% } %>',\n\n        '<% if( dataset.metadata_dbkey ){ %>',\n            '<div class=\"dbkey\">',\n                '<label class=\"prompt\">', _l( 'database' ), '</label>',\n                '<span class=\"value\">',\n                    '<%- dataset.metadata_dbkey %>',\n                '</span>',\n            '</div>',\n        '<% } %>',\n\n        '<% if( dataset.misc_info ){ %>',\n            '<div class=\"info\">',\n                '<span class=\"value\"><%- dataset.misc_info %></span>',\n            '</div>',\n        '<% } %>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.NEW ] = BASE_MVC.wrapTemplate([\n        '<div>', _l( 'This is a new dataset and not all of its data are available yet' ), '</div>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.NOT_VIEWABLE ] = BASE_MVC.wrapTemplate([\n        '<div>', _l( 'You do not have permission to view this dataset' ), '</div>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.DISCARDED ] = BASE_MVC.wrapTemplate([\n        '<div>', _l( 'The job creating this dataset was cancelled before completion' ), '</div>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.QUEUED ] = BASE_MVC.wrapTemplate([\n        '<div>', _l( 'This job is waiting to run' ), '</div>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.RUNNING ] = BASE_MVC.wrapTemplate([\n        '<div>', _l( 'This job is currently running' ), '</div>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.UPLOAD ] = BASE_MVC.wrapTemplate([\n        '<div>', _l( 'This dataset is currently uploading' ), '</div>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.SETTING_METADATA ] = BASE_MVC.wrapTemplate([\n        '<div>', _l( 'Metadata is being auto-detected' ), '</div>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.PAUSED ] = BASE_MVC.wrapTemplate([\n        '<div>', _l( 'This job is paused. Use the \"Resume Paused Jobs\" in the history menu to resume' ), '</div>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.ERROR ] = BASE_MVC.wrapTemplate([\n        '<% if( !dataset.purged ){ %>',\n            '<div><%- dataset.misc_blurb %></div>',\n        '<% } %>',\n        '<span class=\"help-text\">', _l( 'An error occurred with this dataset' ), ':</span>',\n        '<div class=\"job-error-text\"><%- dataset.misc_info %></div>'\n    ], 'dataset' );\n    summaryTemplates[ STATES.EMPTY ] = BASE_MVC.wrapTemplate([\n        '<div>', _l( 'No data' ), ': <i><%- dataset.misc_blurb %></i></div>'\n    ], 'dataset' );\n    summaryTemplates.unknown = BASE_MVC.wrapTemplate([\n        '<div>Error: unknown dataset state: \"<%- dataset.state %>\"</div>'\n    ], 'dataset' );\n\n    // messages to be displayed only within the details section ('below the fold')\n    var detailMessageTemplates = {\n        resubmitted : BASE_MVC.wrapTemplate([\n            // deleted not purged\n            '<% if( model.resubmitted ){ %>',\n                '<div class=\"resubmitted-msg infomessagesmall\">',\n                    _l( 'The job creating this dataset has been resubmitted' ),\n                '</div>',\n            '<% } %>'\n        ])\n    };\n\n    // this is applied to both old and new style display apps\n    var displayApplicationsTemplate = BASE_MVC.wrapTemplate([\n        '<% _.each( apps, function( app ){ %>',\n            '<div class=\"display-application\">',\n                '<span class=\"display-application-location\"><%- app.label %></span> ',\n                '<span class=\"display-application-links\">',\n                    '<% _.each( app.links, function( link ){ %>',\n                        '<a target=\"<%- link.target %>\" href=\"<%- link.href %>\">',\n                            '<% print( _l( link.text ) ); %>',\n                        '</a> ',\n                    '<% }); %>',\n                '</span>',\n            '</div>',\n        '<% }); %>'\n    ], 'apps' );\n\n    return _.extend( {}, _super.prototype.templates, {\n        warnings    : warnings,\n        details     : detailsTemplate,\n        noAccess    : noAccessTemplate,\n        summaries   : summaryTemplates,\n        detailMessages      : detailMessageTemplates,\n        displayApplications : displayApplicationsTemplate\n    });\n}());\n\n\n// ============================================================================\n    return {\n        DatasetListItemView : DatasetListItemView\n    };\n});\n"]}