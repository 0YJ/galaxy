{"version":3,"sources":["mvc/dataset/dataset-li.js"],"names":["_super","_listItem2","default","ListItemView","DatasetListItemView","extend","_logNamespace","className","prototype","id","this","model","get","join","initialize","attributes","logger","log","call","logNamespace","linkTarget","_setUpListeners","self","listenTo","changedAttributes","state","expanded","hasDetails","fetch","silent","done","_","keys","length","$","html","_renderNametags","render","_fetchModelDetails","view","inReadyState","jQuery","when","remove","speed","callback","fxSpeed","$el","fadeOut","Backbone","View","_swapNewRender","$newRender","has","addClass","_renderDisplayButton","_renderPrimaryActions","_states2","NOT_VIEWABLE","classes","target","disabled","displayBtnData","title","_localization2","UPLOAD","NEW","href","urls","display","onclick","ev","Galaxy","frame","active","addDataset","faIcon","_renderDetails","templates","noAccess","toJSON","$details","summaryRenderFn","find","_renderSecondaryActions","_setUpBehaviors","_renderSummary","prepend","_renderDetailMessages","_renderDisplayApplications","summaries","json","unknown","$warnings","each","isDeletedOrPurged","templateFn","append","displayApplications","debug","OK","FAILED_METADATA","ERROR","_renderShowParamsButton","_faIconButton2","_renderDownloadButton","show_params","add","url","preventDefault","stopPropagation","hasData","isEmpty","download","clone","_renderMetaFileDownloadButton","warnings","map","wrapTemplate","meta_file","meta_download","file_type","detailsTemplate","summaryTemplates","template","tags","SETTING_METADATA","events","click .display-btn","trigger","resubmitted","click .download-btn","details","noAccessTemplate","failed_metadata","_baseMvc2","error","purged","deleted","DISCARDED","QUEUED","RUNNING","PAUSED","EMPTY","detailMessageTemplates","displayApplicationsTemplate","detailMessages"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport STATES from \"mvc/dataset/states\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"dataset\";\n/*==============================================================================\nTODO:\n    straighten out state rendering and templates used\n    inaccessible/STATES.NOT_VIEWABLE is a special case\n    simplify button rendering\n\n==============================================================================*/\nvar _super = LIST_ITEM.ListItemView;\n/** @class Read only list view for either LDDAs, HDAs, or HDADCEs.\n *      Roughly, any DatasetInstance (and not a raw Dataset).\n */\nvar DatasetListItemView = _super.extend(\n    /** @lends DatasetListItemView.prototype */ {\n        _logNamespace: logNamespace,\n\n        className: `${_super.prototype.className} dataset`,\n        //TODO:?? doesn't exactly match an hda's type_id\n        id: function() {\n            return [\"dataset\", this.model.get(\"id\")].join(\"-\");\n        },\n\n        /** Set up: instance vars, options, and event handlers */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(`${this}.initialize:`, attributes);\n            _super.prototype.initialize.call(this, attributes);\n\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n        },\n\n        /** event listeners */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            var self = this;\n\n            // re-rendering on any model changes\n            return self.listenTo(self.model, {\n                change: function(model) {\n                    // if the model moved into the ready state and is expanded without details, fetch those details now\n                    if (\n                        self.model.changedAttributes().state &&\n                        self.model.inReadyState() &&\n                        self.expanded &&\n                        !self.model.hasDetails()\n                    ) {\n                        // normally, will render automatically (due to fetch -> change),\n                        // but! setting_metadata sometimes doesn't cause any other changes besides state\n                        // so, not rendering causes it to seem frozen in setting_metadata state\n                        self.model.fetch({ silent: true }).done(() => {\n                            self.render();\n                        });\n                    } else {\n                        if (\n                            _.has(model.changed, \"tags\") &&\n                            _.keys(model.changed).length === 1\n                        ) {\n                            // If only the tags have changed, rerender specifically\n                            // the titlebar region.  Otherwise default to the full\n                            // render.\n                            self.$(\".nametags\").html(self._renderNametags());\n                        } else {\n                            self.render();\n                        }\n                    }\n                }\n            });\n        },\n\n        // ......................................................................... expandable\n        /** In this override, only get details if in the ready state, get rerunnable if in other states.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n        _fetchModelDetails: function() {\n            var view = this;\n            if (view.model.inReadyState() && !view.model.hasDetails()) {\n                return view.model.fetch({ silent: true });\n            }\n            return jQuery.when();\n        },\n\n        // ......................................................................... removal\n        /** Remove this view's html from the DOM and remove all event listeners.\n     *  @param {Number or String} speed jq effect speed\n     *  @param {Function} callback      an optional function called when removal is done (scoped to this view)\n     */\n        remove: function(speed, callback) {\n            var view = this;\n            speed = speed || this.fxSpeed;\n            this.$el.fadeOut(speed, () => {\n                Backbone.View.prototype.remove.call(view);\n                if (callback) {\n                    callback.call(view);\n                }\n            });\n        },\n\n        // ......................................................................... rendering\n        /* TODO:\n        dataset states are the issue primarily making dataset rendering complex\n            each state should have it's own way of displaying/set of details\n            often with different actions that can be applied\n        throw in deleted/purged/visible and things get complicated easily\n        I've considered (a couple of times) - creating a view for each state\n            - but recreating the view during an update...seems wrong\n    */\n        /** In this override, add the dataset state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            if (this.model.has(\"state\")) {\n                this.$el.addClass(`state-${this.model.get(\"state\")}`);\n            }\n            return this.$el;\n        },\n\n        // ................................................................................ titlebar\n        /** In this override, add the dataset display button. */\n        _renderPrimaryActions: function() {\n            // render just the display for read-only\n            return [this._renderDisplayButton()];\n        },\n\n        /** Render icon-button to display dataset data */\n        _renderDisplayButton: function() {\n            // don't show display if not viewable or not accessible\n            var state = this.model.get(\"state\");\n            if (\n                state === STATES.NOT_VIEWABLE ||\n                state === STATES.DISCARDED ||\n                !this.model.get(\"accessible\")\n            ) {\n                return null;\n            }\n\n            var displayBtnData = {\n                target: this.linkTarget,\n                classes: \"display-btn\"\n            };\n\n            // show a disabled display if the data's been purged\n            if (this.model.get(\"purged\")) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\n                    \"Cannot display datasets removed from disk\"\n                );\n\n                // disable if still uploading\n            } else if (state === STATES.UPLOAD) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\n                    \"This dataset must finish uploading before it can be viewed\"\n                );\n\n                // disable if still new\n            } else if (state === STATES.NEW) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\"This dataset is not yet viewable\");\n            } else {\n                displayBtnData.title = _l(\"View data\");\n\n                // default link for dataset\n                displayBtnData.href = this.model.urls.display;\n\n                // add frame manager option onclick event\n                var self = this;\n                displayBtnData.onclick = ev => {\n                    if (Galaxy.frame && Galaxy.frame.active) {\n                        // Add dataset to frames.\n                        Galaxy.frame.addDataset(self.model.get(\"id\"));\n                        ev.preventDefault();\n                    }\n                };\n            }\n            displayBtnData.faIcon = \"fa-eye\";\n            return faIconButton(displayBtnData);\n        },\n\n        // ......................................................................... rendering details\n        /** Render the enclosing div of the hda body and, if expanded, the html in the body\n     *  @returns {jQuery} rendered DOM\n     */\n        _renderDetails: function() {\n            //TODO: generalize to be allow different details for each state\n\n            // no access - render nothing but a message\n            if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                return $(this.templates.noAccess(this.model.toJSON(), this));\n            }\n\n            var $details = _super.prototype._renderDetails.call(this);\n            $details\n                .find(\".actions .left\")\n                .empty()\n                .append(this._renderSecondaryActions());\n            $details\n                .find(\".summary\")\n                .html(this._renderSummary())\n                .prepend(this._renderDetailMessages());\n            $details\n                .find(\".display-applications\")\n                .html(this._renderDisplayApplications());\n\n            this._setUpBehaviors($details);\n            return $details;\n        },\n\n        /** Defer to the appropo summary rendering fn based on state */\n        _renderSummary: function() {\n            var json = this.model.toJSON();\n            var summaryRenderFn = this.templates.summaries[json.state];\n            summaryRenderFn =\n                summaryRenderFn || this.templates.summaries.unknown;\n            return summaryRenderFn(json, this);\n        },\n\n        /** Render messages to be displayed only when the details are shown */\n        _renderDetailMessages: function() {\n            var view = this;\n            var $warnings = $('<div class=\"detail-messages\"></div>');\n            var json = view.model.toJSON();\n            //TODO:! unordered (map)\n            _.each(view.templates.detailMessages, templateFn => {\n                $warnings.append($(templateFn(json, view)));\n            });\n            return $warnings;\n        },\n\n        /** Render the external display application links */\n        _renderDisplayApplications: function() {\n            if (this.model.isDeletedOrPurged()) {\n                return \"\";\n            }\n            // render both old and new display apps using the same template\n            return [\n                this.templates.displayApplications(\n                    this.model.get(\"display_apps\"),\n                    this\n                ),\n                this.templates.displayApplications(\n                    this.model.get(\"display_types\"),\n                    this\n                )\n            ].join(\"\");\n        },\n\n        // ......................................................................... secondary/details actions\n        /** A series of links/buttons for less commonly used actions: re-run, info, etc. */\n        _renderSecondaryActions: function() {\n            this.debug(\"_renderSecondaryActions\");\n            switch (this.model.get(\"state\")) {\n                case STATES.NOT_VIEWABLE:\n                    return [];\n                case STATES.OK:\n                case STATES.FAILED_METADATA:\n                case STATES.ERROR:\n                    return [\n                        this._renderDownloadButton(),\n                        this._renderShowParamsButton()\n                    ];\n            }\n            return [this._renderShowParamsButton()];\n        },\n\n        /** Render icon-button to show the input and output (stdout/err) for the job that created this.\n     *  @returns {jQuery} rendered DOM\n     */\n        _renderShowParamsButton: function() {\n            // gen. safe to show in all cases\n            return faIconButton({\n                title: _l(\"View details\"),\n                classes: \"params-btn\",\n                href: this.model.urls.show_params,\n                target: this.linkTarget,\n                faIcon: \"fa-info-circle\",\n                onclick: function(ev) {\n                    if (Galaxy.frame && Galaxy.frame.active) {\n                        Galaxy.frame.add({\n                            title: \"Dataset details\",\n                            url: this.href\n                        });\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                    }\n                }\n            });\n        },\n\n        /** Render icon-button/popupmenu to download the data (and/or the associated meta files (bai, etc.)) for this.\n     *  @returns {jQuery} rendered DOM\n     */\n        _renderDownloadButton: function() {\n            // don't show anything if the data's been purged\n            if (this.model.get(\"purged\") || !this.model.hasData()) {\n                return null;\n            }\n\n            // return either: a popupmenu with links to download assoc. meta files (if there are meta files)\n            //  or a single download icon-button (if there are no meta files)\n            if (!_.isEmpty(this.model.get(\"meta_files\"))) {\n                return this._renderMetaFileDownloadButton();\n            }\n\n            return $(\n                [\n                    '<a class=\"download-btn icon-btn\" ',\n                    'href=\"',\n                    this.model.urls.download,\n                    `\" title=\"${_l(\"Download\")}\" download>`,\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                    \"</a>\"\n                ].join(\"\")\n            );\n        },\n\n        /** Render the download button which opens a dropdown with links to download assoc. meta files (indeces, etc.) */\n        _renderMetaFileDownloadButton: function() {\n            var urls = this.model.urls;\n            return $(\n                [\n                    '<div class=\"metafile-dropdown dropdown\">',\n                    '<a class=\"download-btn icon-btn\" href=\"javascript:void(0)\" data-toggle=\"dropdown\"',\n                    ` title=\"${_l(\"Download\")}\">`,\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                    \"</a>\",\n                    '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">',\n                    `<li><a href=\"${urls.download}\" download>`,\n                    _l(\"Download dataset\"),\n                    \"</a></li>\",\n                    _.map(this.model.get(\"meta_files\"), meta_file =>\n                        [\n                            '<li><a href=\"',\n                            urls.meta_download + meta_file.file_type,\n                            '\">',\n                            _l(\"Download\"),\n                            \" \",\n                            meta_file.file_type,\n                            \"</a></li>\"\n                        ].join(\"\")\n                    ).join(\"\\n\"),\n                    \"</ul>\",\n                    \"</div>\"\n                ].join(\"\\n\")\n            );\n        },\n\n        _renderNametags: function() {\n            var tpl = _.template(\n                [\n                    \"<% _.each(_.sortBy(_.uniq(tags), function(x) { return x }), function(tag){ %>\",\n                    '<% if (tag.indexOf(\"name:\") == 0){ %>',\n                    '<span class=\"label label-info\"><%- tag.slice(5) %></span>',\n                    \"<% } %>\",\n                    \"<% }); %>\"\n                ].join(\"\")\n            );\n            return tpl({ tags: this.model.get(\"tags\") });\n        },\n\n        // ......................................................................... misc\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .display-btn\": function(ev) {\n                this.trigger(\"display\", this, ev);\n            },\n            \"click .params-btn\": function(ev) {\n                this.trigger(\"params\", this, ev);\n            },\n            \"click .download-btn\": function(ev) {\n                this.trigger(\"download\", this, ev);\n            }\n        }),\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `DatasetListItemView(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemView.prototype.templates = (() => {\n    //TODO: move to require text! plugin\n\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: BASE_MVC.wrapTemplate([\n            // failed metadata is rendered as a warning on an otherwise ok dataset view\n            '<% if( model.state === \"failed_metadata\" ){ %>',\n            '<div class=\"warningmessagesmall\">',\n            _l(\"An error occurred setting the metadata for this dataset\"),\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        error: BASE_MVC.wrapTemplate([\n            // error during index fetch - show error on dataset\n            \"<% if( model.error ){ %>\",\n            '<div class=\"errormessagesmall\">',\n            _l(\"There was an error getting the data for this dataset\"),\n            \": <%- model.error %>\",\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        purged: BASE_MVC.wrapTemplate([\n            \"<% if( model.purged ){ %>\",\n            '<div class=\"purged-msg warningmessagesmall\">',\n            _l(\"This dataset has been deleted and removed from disk\"),\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        deleted: BASE_MVC.wrapTemplate([\n            // deleted not purged\n            \"<% if( model.deleted && !model.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This dataset has been deleted\"),\n            \"</div>\",\n            \"<% } %>\"\n        ])\n\n        //NOTE: hidden warning is only needed for HDAs\n    });\n\n    var detailsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            '<div class=\"summary\"></div>',\n\n            '<div class=\"actions clear\">',\n            '<div class=\"left\"></div>',\n            '<div class=\"right\"></div>',\n            \"</div>\",\n\n            // do not display tags, annotation, display apps, or peek when deleted\n            \"<% if( !dataset.deleted && !dataset.purged ){ %>\",\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"display-applications\"></div>',\n\n            \"<% if( dataset.peek ){ %>\",\n            '<pre class=\"dataset-peek\"><%= dataset.peek %></pre>',\n            \"<% } %>\",\n            \"<% } %>\",\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n\n    var noAccessTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            '<div class=\"summary\">',\n            _l(\"You do not have permission to view this dataset\"),\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n\n    //TODO: still toooooooooooooo complex - rework\n    var summaryTemplates = {};\n    summaryTemplates[STATES.OK] = summaryTemplates[\n        STATES.FAILED_METADATA\n    ] = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( dataset.misc_blurb ){ %>\",\n            '<div class=\"blurb\">',\n            '<span class=\"value\"><%- dataset.misc_blurb %></span>',\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.file_ext ){ %>\",\n            '<div class=\"datatype\">',\n            '<label class=\"prompt\">',\n            _l(\"format\"),\n            \"</label>\",\n            '<span class=\"value\"><%- dataset.file_ext %></span>',\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.metadata_dbkey ){ %>\",\n            '<div class=\"dbkey\">',\n            '<label class=\"prompt\">',\n            _l(\"database\"),\n            \"</label>\",\n            '<span class=\"value\">',\n            \"<%- dataset.metadata_dbkey %>\",\n            \"</span>\",\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.misc_info ){ %>\",\n            '<div class=\"info\">',\n            '<span class=\"value\"><%- dataset.misc_info %></span>',\n            \"</div>\",\n            \"<% } %>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.NEW] = BASE_MVC.wrapTemplate(\n        [\n            \"<div>\",\n            _l(\n                \"This is a new dataset and not all of its data are available yet\"\n            ),\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.NOT_VIEWABLE] = BASE_MVC.wrapTemplate(\n        [\n            \"<div>\",\n            _l(\"You do not have permission to view this dataset\"),\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.DISCARDED] = BASE_MVC.wrapTemplate(\n        [\n            \"<div>\",\n            _l(\"The job creating this dataset was cancelled before completion\"),\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.QUEUED] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This job is waiting to run\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.RUNNING] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This job is currently running\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.UPLOAD] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This dataset is currently uploading\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.SETTING_METADATA] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"Metadata is being auto-detected\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.PAUSED] = BASE_MVC.wrapTemplate(\n        [\n            \"<div>\",\n            _l(\n                'This job is paused. Use the \"Resume Paused Jobs\" in the history menu to resume'\n            ),\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.ERROR] = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( !dataset.purged ){ %>\",\n            \"<div><%- dataset.misc_blurb %></div>\",\n            \"<% } %>\",\n            '<span class=\"help-text\">',\n            _l(\"An error occurred with this dataset\"),\n            \":</span>\",\n            '<div class=\"job-error-text\"><%- dataset.misc_info %></div>'\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.EMPTY] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"No data\"), \": <i><%- dataset.misc_blurb %></i></div>\"],\n        \"dataset\"\n    );\n    summaryTemplates.unknown = BASE_MVC.wrapTemplate(\n        ['<div>Error: unknown dataset state: \"<%- dataset.state %>\"</div>'],\n        \"dataset\"\n    );\n\n    // messages to be displayed only within the details section ('below the fold')\n    var detailMessageTemplates = {\n        resubmitted: BASE_MVC.wrapTemplate([\n            // deleted not purged\n            \"<% if( model.resubmitted ){ %>\",\n            '<div class=\"resubmitted-msg infomessagesmall\">',\n            _l(\"The job creating this dataset has been resubmitted\"),\n            \"</div>\",\n            \"<% } %>\"\n        ])\n    };\n\n    // this is applied to both old and new style display apps\n    var displayApplicationsTemplate = BASE_MVC.wrapTemplate(\n        [\n            \"<% _.each( apps, function( app ){ %>\",\n            '<div class=\"display-application\">',\n            '<span class=\"display-application-location\"><%- app.label %></span> ',\n            '<span class=\"display-application-links\">',\n            \"<% _.each( app.links, function( link ){ %>\",\n            '<a target=\"<%- link.target %>\" href=\"<%- link.href %>\">',\n            \"<% print( _l( link.text ) ); %>\",\n            \"</a> \",\n            \"<% }); %>\",\n            \"</span>\",\n            \"</div>\",\n            \"<% }); %>\"\n        ],\n        \"apps\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        details: detailsTemplate,\n        noAccess: noAccessTemplate,\n        summaries: summaryTemplates,\n        detailMessages: detailMessageTemplates,\n        displayApplications: displayApplicationsTemplate\n    });\n})();\n\n// ============================================================================\nexport default {\n    DatasetListItemView: DatasetListItemView\n};\n"]}