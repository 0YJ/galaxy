{"version":3,"sources":["mvc/dataset/dataset-li.js"],"names":["_listItem","require","_states","_faIconButton","_baseMvc","_localization","logNamespace","_super","_listItem2","default","ListItemView","DatasetListItemView","extend","_logNamespace","className","prototype","id","this","model","get","join","initialize","attributes","logger","log","call","linkTarget","_setUpListeners","self","listenTo","change","changedAttributes","state","inReadyState","expanded","hasDetails","fetch","silent","done","_","has","changed","length","$","html","_renderNametags","_fetchModelDetails","view","render","jQuery","when","remove","speed","callback","fxSpeed","Backbone","_swapNewRender","$newRender","$el","addClass","_renderPrimaryActions","_renderDisplayButton","_states2","NOT_VIEWABLE","DISCARDED","displayBtnData","target","classes","disabled","title","_localization2","UPLOAD","NEW","urls","display","onclick","ev","Galaxy","frame","active","addDataset","preventDefault","faIcon","_renderDetails","templates","noAccess","toJSON","$details","empty","append","_renderSecondaryActions","find","_renderSummary","_renderDetailMessages","_setUpBehaviors","summaryRenderFn","json","summaries","unknown","detailMessages","$warnings","templateFn","each","_renderDisplayApplications","isDeletedOrPurged","displayApplications","debug","_renderShowParamsButton","OK","FAILED_METADATA","ERROR","stopPropagation","_faIconButton2","href","show_params","_renderDownloadButton","add","url","hasData","trigger","download","template","_renderMetaFileDownloadButton","modelString","map","meta_file","meta_download","file_type","summaryTemplates","noAccessTemplate","tags","clone","events","SETTING_METADATA","PAUSED","EMPTY","click .download-btn","detailMessageTemplates","toString","displayApplicationsTemplate","wrapTemplate","warnings","failed_metadata","_baseMvc2","error","purged","deleted","detailsTemplate","QUEUED","RUNNING","resubmitted","details"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport STATES from \"mvc/dataset/states\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"dataset\";\n/*==============================================================================\nTODO:\n    straighten out state rendering and templates used\n    inaccessible/STATES.NOT_VIEWABLE is a special case\n    simplify button rendering\n\n==============================================================================*/\nvar _super = LIST_ITEM.ListItemView;\n/** @class Read only list view for either LDDAs, HDAs, or HDADCEs.\n *      Roughly, any DatasetInstance (and not a raw Dataset).\n */\nvar DatasetListItemView = _super.extend(\n    /** @lends DatasetListItemView.prototype */ {\n        _logNamespace: logNamespace,\n\n        className: _super.prototype.className + \" dataset\",\n        //TODO:?? doesn't exactly match an hda's type_id\n        id: function() {\n            return [\"dataset\", this.model.get(\"id\")].join(\"-\");\n        },\n\n        /** Set up: instance vars, options, and event handlers */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(this + \".initialize:\", attributes);\n            _super.prototype.initialize.call(this, attributes);\n\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n        },\n\n        /** event listeners */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            var self = this;\n\n            // re-rendering on any model changes\n            return self.listenTo(self.model, {\n                change: function(model) {\n                    // if the model moved into the ready state and is expanded without details, fetch those details now\n                    if (\n                        self.model.changedAttributes().state &&\n                        self.model.inReadyState() &&\n                        self.expanded &&\n                        !self.model.hasDetails()\n                    ) {\n                        // normally, will render automatically (due to fetch -> change),\n                        // but! setting_metadata sometimes doesn't cause any other changes besides state\n                        // so, not rendering causes it to seem frozen in setting_metadata state\n                        self.model.fetch({ silent: true }).done(function() {\n                            self.render();\n                        });\n                    } else {\n                        if (\n                            _.has(model.changed, \"tags\") &&\n                            _.keys(model.changed).length === 1\n                        ) {\n                            // If only the tags have changed, rerender specifically\n                            // the titlebar region.  Otherwise default to the full\n                            // render.\n                            self.$(\".nametags\").html(self._renderNametags());\n                        } else {\n                            self.render();\n                        }\n                    }\n                }\n            });\n        },\n\n        // ......................................................................... expandable\n        /** In this override, only get details if in the ready state, get rerunnable if in other states.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n        _fetchModelDetails: function() {\n            var view = this;\n            if (view.model.inReadyState() && !view.model.hasDetails()) {\n                return view.model.fetch({ silent: true });\n            }\n            return jQuery.when();\n        },\n\n        // ......................................................................... removal\n        /** Remove this view's html from the DOM and remove all event listeners.\n     *  @param {Number or String} speed jq effect speed\n     *  @param {Function} callback      an optional function called when removal is done (scoped to this view)\n     */\n        remove: function(speed, callback) {\n            var view = this;\n            speed = speed || this.fxSpeed;\n            this.$el.fadeOut(speed, function() {\n                Backbone.View.prototype.remove.call(view);\n                if (callback) {\n                    callback.call(view);\n                }\n            });\n        },\n\n        // ......................................................................... rendering\n        /* TODO:\n        dataset states are the issue primarily making dataset rendering complex\n            each state should have it's own way of displaying/set of details\n            often with different actions that can be applied\n        throw in deleted/purged/visible and things get complicated easily\n        I've considered (a couple of times) - creating a view for each state\n            - but recreating the view during an update...seems wrong\n    */\n        /** In this override, add the dataset state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            if (this.model.has(\"state\")) {\n                this.$el.addClass(\"state-\" + this.model.get(\"state\"));\n            }\n            return this.$el;\n        },\n\n        // ................................................................................ titlebar\n        /** In this override, add the dataset display button. */\n        _renderPrimaryActions: function() {\n            // render just the display for read-only\n            return [this._renderDisplayButton()];\n        },\n\n        /** Render icon-button to display dataset data */\n        _renderDisplayButton: function() {\n            // don't show display if not viewable or not accessible\n            var state = this.model.get(\"state\");\n            if (\n                state === STATES.NOT_VIEWABLE ||\n                state === STATES.DISCARDED ||\n                !this.model.get(\"accessible\")\n            ) {\n                return null;\n            }\n\n            var displayBtnData = {\n                target: this.linkTarget,\n                classes: \"display-btn\"\n            };\n\n            // show a disabled display if the data's been purged\n            if (this.model.get(\"purged\")) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\n                    \"Cannot display datasets removed from disk\"\n                );\n\n                // disable if still uploading\n            } else if (state === STATES.UPLOAD) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\n                    \"This dataset must finish uploading before it can be viewed\"\n                );\n\n                // disable if still new\n            } else if (state === STATES.NEW) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\"This dataset is not yet viewable\");\n            } else {\n                displayBtnData.title = _l(\"View data\");\n\n                // default link for dataset\n                displayBtnData.href = this.model.urls.display;\n\n                // add frame manager option onclick event\n                var self = this;\n                displayBtnData.onclick = function(ev) {\n                    if (Galaxy.frame && Galaxy.frame.active) {\n                        // Add dataset to frames.\n                        Galaxy.frame.addDataset(self.model.get(\"id\"));\n                        ev.preventDefault();\n                    }\n                };\n            }\n            displayBtnData.faIcon = \"fa-eye\";\n            return faIconButton(displayBtnData);\n        },\n\n        // ......................................................................... rendering details\n        /** Render the enclosing div of the hda body and, if expanded, the html in the body\n     *  @returns {jQuery} rendered DOM\n     */\n        _renderDetails: function() {\n            //TODO: generalize to be allow different details for each state\n\n            // no access - render nothing but a message\n            if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                return $(this.templates.noAccess(this.model.toJSON(), this));\n            }\n\n            var $details = _super.prototype._renderDetails.call(this);\n            $details\n                .find(\".actions .left\")\n                .empty()\n                .append(this._renderSecondaryActions());\n            $details\n                .find(\".summary\")\n                .html(this._renderSummary())\n                .prepend(this._renderDetailMessages());\n            $details\n                .find(\".display-applications\")\n                .html(this._renderDisplayApplications());\n\n            this._setUpBehaviors($details);\n            return $details;\n        },\n\n        /** Defer to the appropo summary rendering fn based on state */\n        _renderSummary: function() {\n            var json = this.model.toJSON(),\n                summaryRenderFn = this.templates.summaries[json.state];\n            summaryRenderFn =\n                summaryRenderFn || this.templates.summaries.unknown;\n            return summaryRenderFn(json, this);\n        },\n\n        /** Render messages to be displayed only when the details are shown */\n        _renderDetailMessages: function() {\n            var view = this,\n                $warnings = $('<div class=\"detail-messages\"></div>'),\n                json = view.model.toJSON();\n            //TODO:! unordered (map)\n            _.each(view.templates.detailMessages, function(templateFn) {\n                $warnings.append($(templateFn(json, view)));\n            });\n            return $warnings;\n        },\n\n        /** Render the external display application links */\n        _renderDisplayApplications: function() {\n            if (this.model.isDeletedOrPurged()) {\n                return \"\";\n            }\n            // render both old and new display apps using the same template\n            return [\n                this.templates.displayApplications(\n                    this.model.get(\"display_apps\"),\n                    this\n                ),\n                this.templates.displayApplications(\n                    this.model.get(\"display_types\"),\n                    this\n                )\n            ].join(\"\");\n        },\n\n        // ......................................................................... secondary/details actions\n        /** A series of links/buttons for less commonly used actions: re-run, info, etc. */\n        _renderSecondaryActions: function() {\n            this.debug(\"_renderSecondaryActions\");\n            switch (this.model.get(\"state\")) {\n                case STATES.NOT_VIEWABLE:\n                    return [];\n                case STATES.OK:\n                case STATES.FAILED_METADATA:\n                case STATES.ERROR:\n                    return [\n                        this._renderDownloadButton(),\n                        this._renderShowParamsButton()\n                    ];\n            }\n            return [this._renderShowParamsButton()];\n        },\n\n        /** Render icon-button to show the input and output (stdout/err) for the job that created this.\n     *  @returns {jQuery} rendered DOM\n     */\n        _renderShowParamsButton: function() {\n            // gen. safe to show in all cases\n            return faIconButton({\n                title: _l(\"View details\"),\n                classes: \"params-btn\",\n                href: this.model.urls.show_params,\n                target: this.linkTarget,\n                faIcon: \"fa-info-circle\",\n                onclick: function(ev) {\n                    if (Galaxy.frame && Galaxy.frame.active) {\n                        Galaxy.frame.add({\n                            title: \"Dataset details\",\n                            url: this.href\n                        });\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                    }\n                }\n            });\n        },\n\n        /** Render icon-button/popupmenu to download the data (and/or the associated meta files (bai, etc.)) for this.\n     *  @returns {jQuery} rendered DOM\n     */\n        _renderDownloadButton: function() {\n            // don't show anything if the data's been purged\n            if (this.model.get(\"purged\") || !this.model.hasData()) {\n                return null;\n            }\n\n            // return either: a popupmenu with links to download assoc. meta files (if there are meta files)\n            //  or a single download icon-button (if there are no meta files)\n            if (!_.isEmpty(this.model.get(\"meta_files\"))) {\n                return this._renderMetaFileDownloadButton();\n            }\n\n            return $(\n                [\n                    '<a class=\"download-btn icon-btn\" ',\n                    'href=\"',\n                    this.model.urls.download,\n                    '\" title=\"' + _l(\"Download\") + '\" download>',\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                    \"</a>\"\n                ].join(\"\")\n            );\n        },\n\n        /** Render the download button which opens a dropdown with links to download assoc. meta files (indeces, etc.) */\n        _renderMetaFileDownloadButton: function() {\n            var urls = this.model.urls;\n            return $(\n                [\n                    '<div class=\"metafile-dropdown dropdown\">',\n                    '<a class=\"download-btn icon-btn\" href=\"javascript:void(0)\" data-toggle=\"dropdown\"',\n                    ' title=\"' + _l(\"Download\") + '\">',\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                    \"</a>\",\n                    '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">',\n                    '<li><a href=\"' + urls.download + '\" download>',\n                    _l(\"Download dataset\"),\n                    \"</a></li>\",\n                    _.map(this.model.get(\"meta_files\"), function(meta_file) {\n                        return [\n                            '<li><a href=\"',\n                            urls.meta_download + meta_file.file_type,\n                            '\">',\n                            _l(\"Download\"),\n                            \" \",\n                            meta_file.file_type,\n                            \"</a></li>\"\n                        ].join(\"\");\n                    }).join(\"\\n\"),\n                    \"</ul>\",\n                    \"</div>\"\n                ].join(\"\\n\")\n            );\n        },\n\n        _renderNametags: function() {\n            var tpl = _.template(\n                [\n                    \"<% _.each(_.sortBy(_.uniq(tags), function(x) { return x }), function(tag){ %>\",\n                    '<% if (tag.indexOf(\"name:\") == 0){ %>',\n                    '<span class=\"label label-info\"><%- tag.slice(5) %></span>',\n                    \"<% } %>\",\n                    \"<% }); %>\"\n                ].join(\"\")\n            );\n            return tpl({ tags: this.model.get(\"tags\") });\n        },\n\n        // ......................................................................... misc\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .display-btn\": function(ev) {\n                this.trigger(\"display\", this, ev);\n            },\n            \"click .params-btn\": function(ev) {\n                this.trigger(\"params\", this, ev);\n            },\n            \"click .download-btn\": function(ev) {\n                this.trigger(\"download\", this, ev);\n            }\n        }),\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? this.model + \"\" : \"(no model)\";\n            return \"DatasetListItemView(\" + modelString + \")\";\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemView.prototype.templates = (function() {\n    //TODO: move to require text! plugin\n\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: BASE_MVC.wrapTemplate([\n            // failed metadata is rendered as a warning on an otherwise ok dataset view\n            '<% if( model.state === \"failed_metadata\" ){ %>',\n            '<div class=\"warningmessagesmall\">',\n            _l(\"An error occurred setting the metadata for this dataset\"),\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        error: BASE_MVC.wrapTemplate([\n            // error during index fetch - show error on dataset\n            \"<% if( model.error ){ %>\",\n            '<div class=\"errormessagesmall\">',\n            _l(\"There was an error getting the data for this dataset\"),\n            \": <%- model.error %>\",\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        purged: BASE_MVC.wrapTemplate([\n            \"<% if( model.purged ){ %>\",\n            '<div class=\"purged-msg warningmessagesmall\">',\n            _l(\"This dataset has been deleted and removed from disk\"),\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        deleted: BASE_MVC.wrapTemplate([\n            // deleted not purged\n            \"<% if( model.deleted && !model.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This dataset has been deleted\"),\n            \"</div>\",\n            \"<% } %>\"\n        ])\n\n        //NOTE: hidden warning is only needed for HDAs\n    });\n\n    var detailsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            '<div class=\"summary\"></div>',\n\n            '<div class=\"actions clear\">',\n            '<div class=\"left\"></div>',\n            '<div class=\"right\"></div>',\n            \"</div>\",\n\n            // do not display tags, annotation, display apps, or peek when deleted\n            \"<% if( !dataset.deleted && !dataset.purged ){ %>\",\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"display-applications\"></div>',\n\n            \"<% if( dataset.peek ){ %>\",\n            '<pre class=\"dataset-peek\"><%= dataset.peek %></pre>',\n            \"<% } %>\",\n            \"<% } %>\",\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n\n    var noAccessTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            '<div class=\"summary\">',\n            _l(\"You do not have permission to view this dataset\"),\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n\n    //TODO: still toooooooooooooo complex - rework\n    var summaryTemplates = {};\n    summaryTemplates[STATES.OK] = summaryTemplates[\n        STATES.FAILED_METADATA\n    ] = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( dataset.misc_blurb ){ %>\",\n            '<div class=\"blurb\">',\n            '<span class=\"value\"><%- dataset.misc_blurb %></span>',\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.file_ext ){ %>\",\n            '<div class=\"datatype\">',\n            '<label class=\"prompt\">',\n            _l(\"format\"),\n            \"</label>\",\n            '<span class=\"value\"><%- dataset.file_ext %></span>',\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.metadata_dbkey ){ %>\",\n            '<div class=\"dbkey\">',\n            '<label class=\"prompt\">',\n            _l(\"database\"),\n            \"</label>\",\n            '<span class=\"value\">',\n            \"<%- dataset.metadata_dbkey %>\",\n            \"</span>\",\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.misc_info ){ %>\",\n            '<div class=\"info\">',\n            '<span class=\"value\"><%- dataset.misc_info %></span>',\n            \"</div>\",\n            \"<% } %>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.NEW] = BASE_MVC.wrapTemplate(\n        [\n            \"<div>\",\n            _l(\n                \"This is a new dataset and not all of its data are available yet\"\n            ),\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.NOT_VIEWABLE] = BASE_MVC.wrapTemplate(\n        [\n            \"<div>\",\n            _l(\"You do not have permission to view this dataset\"),\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.DISCARDED] = BASE_MVC.wrapTemplate(\n        [\n            \"<div>\",\n            _l(\"The job creating this dataset was cancelled before completion\"),\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.QUEUED] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This job is waiting to run\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.RUNNING] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This job is currently running\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.UPLOAD] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This dataset is currently uploading\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.SETTING_METADATA] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"Metadata is being auto-detected\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.PAUSED] = BASE_MVC.wrapTemplate(\n        [\n            \"<div>\",\n            _l(\n                'This job is paused. Use the \"Resume Paused Jobs\" in the history menu to resume'\n            ),\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.ERROR] = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( !dataset.purged ){ %>\",\n            \"<div><%- dataset.misc_blurb %></div>\",\n            \"<% } %>\",\n            '<span class=\"help-text\">',\n            _l(\"An error occurred with this dataset\"),\n            \":</span>\",\n            '<div class=\"job-error-text\"><%- dataset.misc_info %></div>'\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.EMPTY] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"No data\"), \": <i><%- dataset.misc_blurb %></i></div>\"],\n        \"dataset\"\n    );\n    summaryTemplates.unknown = BASE_MVC.wrapTemplate(\n        ['<div>Error: unknown dataset state: \"<%- dataset.state %>\"</div>'],\n        \"dataset\"\n    );\n\n    // messages to be displayed only within the details section ('below the fold')\n    var detailMessageTemplates = {\n        resubmitted: BASE_MVC.wrapTemplate([\n            // deleted not purged\n            \"<% if( model.resubmitted ){ %>\",\n            '<div class=\"resubmitted-msg infomessagesmall\">',\n            _l(\"The job creating this dataset has been resubmitted\"),\n            \"</div>\",\n            \"<% } %>\"\n        ])\n    };\n\n    // this is applied to both old and new style display apps\n    var displayApplicationsTemplate = BASE_MVC.wrapTemplate(\n        [\n            \"<% _.each( apps, function( app ){ %>\",\n            '<div class=\"display-application\">',\n            '<span class=\"display-application-location\"><%- app.label %></span> ',\n            '<span class=\"display-application-links\">',\n            \"<% _.each( app.links, function( link ){ %>\",\n            '<a target=\"<%- link.target %>\" href=\"<%- link.href %>\">',\n            \"<% print( _l( link.text ) ); %>\",\n            \"</a> \",\n            \"<% }); %>\",\n            \"</span>\",\n            \"</div>\",\n            \"<% }); %>\"\n        ],\n        \"apps\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        details: detailsTemplate,\n        noAccess: noAccessTemplate,\n        summaries: summaryTemplates,\n        detailMessages: detailMessageTemplates,\n        displayApplications: displayApplicationsTemplate\n    });\n})();\n\n// ============================================================================\nexport default {\n    DatasetListItemView: DatasetListItemView\n};\n"]}