{"version":3,"sources":["mvc/dataset/dataset-li-edit.js"],"names":["_super","_datasetLi2","default","DatasetListItemView","DatasetListItemEdit","extend","initialize","attributes","prototype","call","this","hasUser","purgeAllowed","tagsEditorShown","annotationEditorShown","_renderPrimaryActions","actions","model","get","NOT_VIEWABLE","concat","_renderEditButton","_renderDeleteButton","self","purged","deleted","editBtnData","title","_localization2","href","Galaxy","root","id","classes","onclick","ev","router","preventDefault","push","dataset_id","disabled","_","contains","_states2","UPLOAD","NEW","_faIconButton2","deletedAlready","isDeletedOrPurged","faIcon","$el","find","trigger","_renderDetails","$details","state","FAILED_METADATA","_renderTags","_renderAnnotation","_setUpBehaviors","_renderToolHelpButton","datasetID","jobID","parseToolBuild","data","helpString","name","append","$","parseHTML","parseToolID","ajax","url","fail","user","divString","length","toggle","console","log","_renderSecondaryActions","unshift","_renderRerunButton","OK","_renderVisualizationsButton","_renderErrButton","creating_job","target","urls","rerun","visualizations","linkTarget","job_id","_addScratchBookFn","li","$links","click","frame","stopPropagation","$visualizations","templates","attr","tagsEditor","$where","onshowFirstTime","view","active","$activator","add","appendTo","annotationEditor","_tag2","TagsEditor","el","render","onshow","onhide","_makeDbkeyEditLink","_annotation2","AnnotationEditor","_clickUndeleteLink","edit","replaceWith","editableDbkey","events","clone","click .undelete-link","click .purge-link","click .edit-btn","toString","click .delete-btn","modelString","click .rerun-btn","warnings","click .visualization-btn","wrapTemplate","visualizationsTemplate","_clickPurgeLink","confirm","purge","failed_metadata","_baseMvc2"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li-edit.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport DATASET_LI from \"mvc/dataset/dataset-li\";\nimport TAGS from \"mvc/tag\";\nimport ANNOTATIONS from \"mvc/annotation\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar _super = DATASET_LI.DatasetListItemView;\n/** @class Editing view for DatasetAssociation.\n */\nvar DatasetListItemEdit = _super.extend(\n    /** @lends DatasetListItemEdit.prototype */ {\n        /** set up: options */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            this.hasUser = attributes.hasUser;\n\n            /** allow user purge of dataset files? */\n            this.purgeAllowed = attributes.purgeAllowed || false;\n\n            //TODO: move to HiddenUntilActivatedViewMixin\n            /** should the tags editor be shown or hidden initially? */\n            this.tagsEditorShown = attributes.tagsEditorShown || false;\n            /** should the tags editor be shown or hidden initially? */\n            this.annotationEditorShown =\n                attributes.annotationEditorShown || false;\n        },\n\n        // ......................................................................... titlebar actions\n        /** In this override, add the other two primary actions: edit and delete */\n        _renderPrimaryActions: function() {\n            var actions = _super.prototype._renderPrimaryActions.call(this);\n            if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                return actions;\n            }\n            // render the display, edit attr and delete icon-buttons\n            return _super.prototype._renderPrimaryActions\n                .call(this)\n                .concat([this._renderEditButton(), this._renderDeleteButton()]);\n        },\n\n        //TODO: move titleButtons into state renderers, remove state checks in the buttons\n\n        /** Render icon-button to edit the attributes (format, permissions, etc.) this dataset. */\n        _renderEditButton: function() {\n            var self = this;\n            // don't show edit while uploading, in-accessible\n            // DO show if in error (ala previous history panel)\n            if (\n                this.model.get(\"state\") === STATES.DISCARDED ||\n                !this.model.get(\"accessible\")\n            ) {\n                return null;\n            }\n            var purged = this.model.get(\"purged\");\n            var deleted = this.model.get(\"deleted\");\n\n            var editBtnData = {\n                title: _l(\"Edit attributes\"),\n                href: `${Galaxy.root}datasets/edit?dataset_id=${this.model\n                    .attributes.id}`,\n                faIcon: \"fa-pencil\",\n                classes: \"edit-btn\",\n                onclick: function(ev) {\n                    if (Galaxy.router) {\n                        ev.preventDefault();\n                        Galaxy.router.push(\"datasets/edit\", {\n                            dataset_id: self.model.attributes.id\n                        });\n                    }\n                }\n            };\n\n            // disable if purged or deleted and explain why in the tooltip\n            if (deleted || purged) {\n                editBtnData.disabled = true;\n                if (purged) {\n                    editBtnData.title = _l(\n                        \"Cannot edit attributes of datasets removed from disk\"\n                    );\n                } else if (deleted) {\n                    editBtnData.title = _l(\n                        \"Undelete dataset to edit attributes\"\n                    );\n                }\n\n                // disable if still uploading or new\n            } else if (\n                _.contains([STATES.UPLOAD, STATES.NEW], this.model.get(\"state\"))\n            ) {\n                editBtnData.disabled = true;\n                editBtnData.title = _l(\"This dataset is not yet editable\");\n            }\n            return faIconButton(editBtnData);\n        },\n\n        /** Render icon-button to delete this hda. */\n        _renderDeleteButton: function() {\n            // don't show delete if...\n            if (!this.model.get(\"accessible\")) {\n                return null;\n            }\n\n            var self = this;\n            var deletedAlready = this.model.isDeletedOrPurged();\n            return faIconButton({\n                title: !deletedAlready\n                    ? _l(\"Delete\")\n                    : _l(\"Dataset is already deleted\"),\n                disabled: deletedAlready,\n                faIcon: \"fa-times\",\n                classes: \"delete-btn\",\n                onclick: function() {\n                    // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                    self.$el.find(\".icon-btn.delete-btn\").trigger(\"mouseout\");\n                    self.model[\"delete\"]();\n                }\n            });\n        },\n\n        // ......................................................................... details\n        /** In this override, add tags and annotations controls, make the ? dbkey a link to editing page */\n        _renderDetails: function() {\n            //TODO: generalize to be allow different details for each state\n            var $details = _super.prototype._renderDetails.call(this);\n\n            var state = this.model.get(\"state\");\n\n            if (\n                !this.model.isDeletedOrPurged() &&\n                _.contains([STATES.OK, STATES.FAILED_METADATA], state)\n            ) {\n                this._renderTags($details);\n                this._renderAnnotation($details);\n                this._makeDbkeyEditLink($details);\n            }\n\n            this._setUpBehaviors($details);\n            return $details;\n        },\n\n        /**************************************************************************\n     * Render help button to show tool help text without rerunning the tool.\n     * Issue #2100\n     */\n        _renderToolHelpButton: function() {\n            var datasetID = this.model.attributes.dataset_id;\n            var jobID = this.model.attributes.creating_job;\n            var self = this;\n\n            var parseToolBuild = data => {\n                var helpString = `<div id=\"thdiv-${datasetID}\" class=\"toolhelp\">`;\n                if (data.name && data.help) {\n                    helpString += `<strong>Tool help for ${data.name}</strong><hr/>`;\n                    helpString += data.help;\n                } else {\n                    helpString +=\n                        \"<strong>Tool help is unavailable for this dataset.</strong><hr/>\";\n                }\n                helpString += \"</div>\";\n                self.$el.find(\".details\").append($.parseHTML(helpString));\n            };\n            var parseToolID = data => {\n                $.ajax({\n                    url: `${Galaxy.root}api/tools/${data.tool_id}/build`\n                })\n                    .done(data => {\n                        parseToolBuild(data);\n                    })\n                    .fail(() => {\n                        parseToolBuild({});\n                    });\n            };\n            if (Galaxy.user.id === null) {\n                return null;\n            }\n            return faIconButton({\n                title: _l(\"Tool Help\"),\n                classes: \"icon-btn\",\n                href: \"#\",\n                faIcon: \"fa-question\",\n                onclick: function() {\n                    var divString = `thdiv-${datasetID}`;\n                    if (self.$el.find(\".toolhelp\").length > 0) {\n                        self.$el.find(\".toolhelp\").toggle();\n                    } else {\n                        $.ajax({\n                            url: `${Galaxy.root}api/jobs/${jobID}`\n                        })\n                            .done(data => {\n                                parseToolID(data);\n                            })\n                            .fail(() => {\n                                console.log(\n                                    `Failed at recovering job information from the  Galaxy API for job id \"${jobID}\".`\n                                );\n                            });\n                    }\n                }\n            });\n        },\n        //*************************************************************************\n\n        /** Add less commonly used actions in the details section based on state */\n        _renderSecondaryActions: function() {\n            var actions = _super.prototype._renderSecondaryActions.call(this);\n            switch (this.model.get(\"state\")) {\n                case STATES.UPLOAD:\n                case STATES.NOT_VIEWABLE:\n                    return actions;\n                case STATES.ERROR:\n                    // error button comes first\n                    actions.unshift(this._renderErrButton());\n                    return actions.concat([\n                        this._renderRerunButton(),\n                        this._renderToolHelpButton()\n                    ]);\n                case STATES.OK:\n                case STATES.FAILED_METADATA:\n                    return actions.concat([\n                        this._renderRerunButton(),\n                        this._renderVisualizationsButton(),\n                        this._renderToolHelpButton()\n                    ]);\n            }\n            return actions.concat([\n                this._renderRerunButton(),\n                this._renderToolHelpButton()\n            ]);\n        },\n\n        /** Render icon-button to report an error on this dataset to the galaxy admin. */\n        _renderErrButton: function() {\n            var self = this;\n            return faIconButton({\n                title: _l(\"View or report this error\"),\n                href: `${Galaxy.root}datasets/error?dataset_id=${this.model\n                    .attributes.id}`,\n                classes: \"report-error-btn\",\n                faIcon: \"fa-bug\",\n                onclick: function(ev) {\n                    if (Galaxy.router) {\n                        ev.preventDefault();\n                        Galaxy.router.push(\"datasets/error\", {\n                            dataset_id: self.model.attributes.id\n                        });\n                    }\n                }\n            });\n        },\n\n        /** Render icon-button to re-run the job that created this dataset. */\n        _renderRerunButton: function() {\n            var creating_job = this.model.get(\"creating_job\");\n            if (this.model.get(\"rerunnable\")) {\n                return faIconButton({\n                    title: _l(\"Run this job again\"),\n                    href: this.model.urls.rerun,\n                    classes: \"rerun-btn\",\n                    target: this.linkTarget,\n                    faIcon: \"fa-refresh\",\n                    onclick: function(ev) {\n                        if (Galaxy.router) {\n                            ev.preventDefault();\n                            Galaxy.router.push(\"/\", {\n                                job_id: creating_job\n                            });\n                        }\n                    }\n                });\n            }\n        },\n\n        /** Render an icon-button or popupmenu of links based on the applicable visualizations */\n        _renderVisualizationsButton: function() {\n            //TODO: someday - lazyload visualizations\n            var visualizations = this.model.get(\"visualizations\");\n            if (\n                this.model.isDeletedOrPurged() ||\n                !this.hasUser ||\n                !this.model.hasData() ||\n                _.isEmpty(visualizations)\n            ) {\n                return null;\n            }\n            if (!_.isObject(visualizations[0])) {\n                this.warn(\"Visualizations have been switched off\");\n                return null;\n            }\n\n            var $visualizations = $(\n                this.templates.visualizations(visualizations, this)\n            );\n            //HACK: need to re-write those directed at galaxy_main with linkTarget\n            $visualizations\n                .find('[target=\"galaxy_main\"]')\n                .attr(\"target\", this.linkTarget);\n            // use addBack here to include the root $visualizations elem (for the case of 1 visualization)\n            this._addScratchBookFn(\n                $visualizations\n                    .find(\".visualization-link\")\n                    .addBack(\".visualization-link\")\n            );\n            return $visualizations;\n        },\n\n        /** add scratchbook functionality to visualization links */\n        _addScratchBookFn: function($links) {\n            var li = this;\n            $links.click(function(ev) {\n                if (Galaxy.frame && Galaxy.frame.active) {\n                    Galaxy.frame.add({\n                        title: \"Visualization\",\n                        url: $(this).attr(\"href\")\n                    });\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            });\n        },\n\n        //TODO: if possible move these to readonly view - but display the owner's tags/annotation (no edit)\n        /** Render the tags list/control */\n        _renderTags: function($where) {\n            if (!this.hasUser) {\n                return;\n            }\n            var view = this;\n            this.tagsEditor = new TAGS.TagsEditor({\n                model: this.model,\n                el: $where.find(\".tags-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                // persist state on the hda view (and not the editor) since these are currently re-created each time\n                onshow: function() {\n                    view.tagsEditorShown = true;\n                },\n                onhide: function() {\n                    view.tagsEditorShown = false;\n                },\n                $activator: faIconButton({\n                    title: _l(\"Edit dataset tags\"),\n                    classes: \"tag-btn\",\n                    faIcon: \"fa-tags\"\n                }).appendTo($where.find(\".actions .right\"))\n            });\n            if (this.tagsEditorShown) {\n                this.tagsEditor.toggle(true);\n            }\n        },\n\n        /** Render the annotation display/control */\n        _renderAnnotation: function($where) {\n            if (!this.hasUser) {\n                return;\n            }\n            var view = this;\n            this.annotationEditor = new ANNOTATIONS.AnnotationEditor({\n                model: this.model,\n                el: $where.find(\".annotation-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                // persist state on the hda view (and not the editor) since these are currently re-created each time\n                onshow: function() {\n                    view.annotationEditorShown = true;\n                },\n                onhide: function() {\n                    view.annotationEditorShown = false;\n                },\n                $activator: faIconButton({\n                    title: _l(\"Edit dataset annotation\"),\n                    classes: \"annotate-btn\",\n                    faIcon: \"fa-comment\"\n                }).appendTo($where.find(\".actions .right\"))\n            });\n            if (this.annotationEditorShown) {\n                this.annotationEditor.toggle(true);\n            }\n        },\n\n        /** If the format/dbkey/genome_build isn't set, make the display a link to the edit page */\n        _makeDbkeyEditLink: function($details) {\n            // make the dbkey a link to editing\n            if (\n                this.model.get(\"metadata_dbkey\") === \"?\" &&\n                !this.model.isDeletedOrPurged()\n            ) {\n                var editableDbkey = $('<a class=\"value\">?</a>')\n                    .attr(\"href\", this.model.urls.edit)\n                    .attr(\"target\", \"_top\");\n                $details.find(\".dbkey .value\").replaceWith(editableDbkey);\n            }\n        },\n\n        // ......................................................................... events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .undelete-link\": \"_clickUndeleteLink\",\n            \"click .purge-link\": \"_clickPurgeLink\",\n\n            \"click .edit-btn\": function(ev) {\n                this.trigger(\"edit\", this, ev);\n            },\n            \"click .delete-btn\": function(ev) {\n                this.trigger(\"delete\", this, ev);\n            },\n            \"click .rerun-btn\": function(ev) {\n                this.trigger(\"rerun\", this, ev);\n            },\n            \"click .report-err-btn\": function(ev) {\n                this.trigger(\"report-err\", this, ev);\n            },\n            \"click .visualization-btn\": function(ev) {\n                this.trigger(\"visualize\", this, ev);\n            },\n            \"click .dbkey a\": function(ev) {\n                this.trigger(\"edit\", this, ev);\n            }\n        }),\n\n        /** listener for item undelete (in the messages section) */\n        _clickUndeleteLink: function(ev) {\n            this.model.undelete();\n            return false;\n        },\n\n        /** listener for item purge (in the messages section) */\n        _clickPurgeLink: function(ev) {\n            if (\n                confirm(\n                    _l(\n                        \"This will permanently remove the data in your dataset. Are you sure?\"\n                    )\n                )\n            ) {\n                this.model.purge();\n            }\n            return false;\n        },\n\n        // ......................................................................... misc\n        /** string rep */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `HDAEditView(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemEdit.prototype.templates = (() => {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: BASE_MVC.wrapTemplate(\n            [\n                // in this override, provide a link to the edit page\n                '<% if( dataset.state === \"failed_metadata\" ){ %>',\n                '<div class=\"failed_metadata-warning warningmessagesmall\">',\n                _l(\"An error occurred setting the metadata for this dataset\"),\n                '<br /><a href=\"<%- dataset.urls.edit %>\" target=\"_top\">',\n                _l(\"Set it manually or retry auto-detection\"),\n                \"</a>\",\n                \"</div>\",\n                \"<% } %>\"\n            ],\n            \"dataset\"\n        ),\n\n        deleted: BASE_MVC.wrapTemplate(\n            [\n                // in this override, provide links to undelete or purge the dataset\n                \"<% if( dataset.deleted && !dataset.purged ){ %>\",\n                // deleted not purged\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                _l(\"This dataset has been deleted\"),\n                '<br /><a class=\"undelete-link\" href=\"javascript:void(0);\">',\n                _l(\"Undelete it\"),\n                \"</a>\",\n                \"<% if( view.purgeAllowed ){ %>\",\n                '<br /><a class=\"purge-link\" href=\"javascript:void(0);\">',\n                _l(\"Permanently remove it from disk\"),\n                \"</a>\",\n                \"<% } %>\",\n                \"</div>\",\n                \"<% } %>\"\n            ],\n            \"dataset\"\n        )\n    });\n\n    var visualizationsTemplate = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( visualizations.length === 1 ){ %>\",\n            '<a class=\"visualization-link icon-btn\" href=\"<%- visualizations[0].href %>\"',\n            ' target=\"<%- visualizations[0].target %>\" title=\"',\n            _l(\"Visualize in\"),\n            ' <%- visualizations[0].html %>\">',\n            '<span class=\"fa fa-bar-chart-o\"></span>',\n            \"</a>\",\n\n            \"<% } else { %>\",\n            '<div class=\"visualizations-dropdown dropdown icon-btn\">',\n            '<a data-toggle=\"dropdown\" title=\"',\n            _l(\"Visualize\"),\n            '\">',\n            '<span class=\"fa fa-bar-chart-o\"></span>',\n            \"</a>\",\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n            \"<% _.each( visualizations, function( visualization ){ %>\",\n            '<li><a class=\"visualization-link\" href=\"<%- visualization.href %>\"',\n            ' target=\"<%- visualization.target %>\">',\n            \"<%- visualization.html %>\",\n            \"</a></li>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"</div>\",\n            \"<% } %>\"\n        ],\n        \"visualizations\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        visualizations: visualizationsTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    DatasetListItemEdit: DatasetListItemEdit\n};\n"]}