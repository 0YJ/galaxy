{"version":3,"sources":["mvc/dataset/dataset-li-edit.js"],"names":["define","STATES","DATASET_LI","TAGS","ANNOTATIONS","faIconButton","BASE_MVC","_l","_super","DatasetListItemView","DatasetListItemEdit","extend","initialize","attributes","prototype","call","this","hasUser","purgeAllowed","tagsEditorShown","annotationEditorShown","_renderPrimaryActions","actions","model","get","NOT_VIEWABLE","concat","_renderEditButton","_renderDeleteButton","DISCARDED","purged","deleted","editBtnData","title","href","urls","edit","target","linkTarget","faIcon","classes","disabled","_","contains","UPLOAD","NEW","self","deletedAlready","isDeletedOrPurged","onclick","$el","find","trigger","_renderDetails","$details","state","OK","FAILED_METADATA","_renderTags","_renderAnnotation","_makeDbkeyEditLink","_setUpBehaviors","_renderToolHelpButton","datasetID","dataset_id","jobID","creating_job","parseToolBuild","data","helpString","name","help","append","$","parseHTML","parseToolID","ajax","url","Galaxy","root","tool_id","done","fail","user","id","length","toggle","console","log","_renderSecondaryActions","ERROR","unshift","_renderErrButton","_renderRerunButton","_renderVisualizationsButton","report_error","rerun","ev","preventDefault","router","push","job_id","visualizations","hasData","isEmpty","isObject","warn","$visualizations","templates","attr","_addScratchBookFn","addBack","$links","click","frame","active","add","stopPropagation","$where","view","tagsEditor","TagsEditor","el","onshowFirstTime","render","onshow","onhide","$activator","appendTo","annotationEditor","AnnotationEditor","editableDbkey","replaceWith","events","clone","click .undelete-link","click .purge-link","click .edit-btn","click .delete-btn","click .rerun-btn","click .report-err-btn","click .visualization-btn","click .dbkey a","_clickUndeleteLink","undelete","_clickPurgeLink","confirm","purge","toString","warnings","failed_metadata","wrapTemplate","visualizationsTemplate"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li-edit.js","sourcesContent":["define([\n    \"mvc/dataset/states\",\n    \"mvc/dataset/dataset-li\",\n    \"mvc/tag\",\n    \"mvc/annotation\",\n    \"ui/fa-icon-button\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( STATES, DATASET_LI, TAGS, ANNOTATIONS, faIconButton, BASE_MVC, _l ){\n\n'use strict';\n//==============================================================================\nvar _super = DATASET_LI.DatasetListItemView;\n/** @class Editing view for DatasetAssociation.\n */\nvar DatasetListItemEdit = _super.extend(\n/** @lends DatasetListItemEdit.prototype */{\n\n    /** set up: options */\n    initialize  : function( attributes ){\n        _super.prototype.initialize.call( this, attributes );\n        this.hasUser = attributes.hasUser;\n\n        /** allow user purge of dataset files? */\n        this.purgeAllowed = attributes.purgeAllowed || false;\n\n        //TODO: move to HiddenUntilActivatedViewMixin\n        /** should the tags editor be shown or hidden initially? */\n        this.tagsEditorShown        = attributes.tagsEditorShown || false;\n        /** should the tags editor be shown or hidden initially? */\n        this.annotationEditorShown  = attributes.annotationEditorShown || false;\n    },\n\n    // ......................................................................... titlebar actions\n    /** In this override, add the other two primary actions: edit and delete */\n    _renderPrimaryActions : function(){\n        var actions = _super.prototype._renderPrimaryActions.call( this );\n        if( this.model.get( 'state' ) === STATES.NOT_VIEWABLE ){\n            return actions;\n        }\n        // render the display, edit attr and delete icon-buttons\n        return _super.prototype._renderPrimaryActions.call( this ).concat([\n            this._renderEditButton(),\n            this._renderDeleteButton()\n        ]);\n    },\n\n    //TODO: move titleButtons into state renderers, remove state checks in the buttons\n\n    /** Render icon-button to edit the attributes (format, permissions, etc.) this dataset. */\n    _renderEditButton : function(){\n        // don't show edit while uploading, in-accessible\n        // DO show if in error (ala previous history panel)\n        if( ( this.model.get( 'state' ) === STATES.DISCARDED )\n        ||  ( !this.model.get( 'accessible' ) ) ){\n            return null;\n        }\n\n        var purged = this.model.get( 'purged' ),\n            deleted = this.model.get( 'deleted' ),\n            editBtnData = {\n                title       : _l( 'Edit attributes' ),\n                href        : this.model.urls.edit,\n                target      : this.linkTarget,\n                faIcon      : 'fa-pencil',\n                classes     : 'edit-btn'\n            };\n\n        // disable if purged or deleted and explain why in the tooltip\n        if( deleted || purged ){\n            editBtnData.disabled = true;\n            if( purged ){\n                editBtnData.title = _l( 'Cannot edit attributes of datasets removed from disk' );\n            } else if( deleted ){\n                editBtnData.title = _l( 'Undelete dataset to edit attributes' );\n            }\n\n        // disable if still uploading or new\n        } else if( _.contains( [ STATES.UPLOAD, STATES.NEW ], this.model.get( 'state' ) ) ){\n            editBtnData.disabled = true;\n            editBtnData.title = _l( 'This dataset is not yet editable' );\n        }\n        return faIconButton( editBtnData );\n    },\n\n    /** Render icon-button to delete this hda. */\n    _renderDeleteButton : function(){\n        // don't show delete if...\n        if( ( !this.model.get( 'accessible' ) ) ){\n            return null;\n        }\n\n        var self = this,\n            deletedAlready = this.model.isDeletedOrPurged();\n        return faIconButton({\n                title       : !deletedAlready? _l( 'Delete' ) : _l( 'Dataset is already deleted' ),\n                disabled    : deletedAlready,\n                faIcon      : 'fa-times',\n                classes     : 'delete-btn',\n                onclick     : function() {\n                    // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                    self.$el.find( '.icon-btn.delete-btn' ).trigger( 'mouseout' );\n                    self.model[ 'delete' ]();\n                }\n        });\n    },\n\n    // ......................................................................... details\n    /** In this override, add tags and annotations controls, make the ? dbkey a link to editing page */\n    _renderDetails : function(){\n        //TODO: generalize to be allow different details for each state\n        var $details = _super.prototype._renderDetails.call( this ),\n            state = this.model.get( 'state' );\n\n        if( !this.model.isDeletedOrPurged() && _.contains([ STATES.OK, STATES.FAILED_METADATA ], state ) ){\n            this._renderTags( $details );\n            this._renderAnnotation( $details );\n            this._makeDbkeyEditLink( $details );\n        }\n\n        this._setUpBehaviors( $details );\n        return $details;\n    },\n\n    /**************************************************************************\n     * Render help button to show tool help text without rerunning the tool.\n     * Issue #2100\n     */\n    _renderToolHelpButton : function() {\n        var datasetID = this.model.attributes.dataset_id;\n        var jobID = this.model.attributes.creating_job;\n        var self = this;\n\n        var parseToolBuild = function(data) {\n            var helpString = '<div id=\"thdiv-' + datasetID + '\" class=\"toolhelp\">'\n            if (data.name && data.help){\n                helpString += '<strong>Tool help for ' + data.name + '</strong><hr/>';\n                helpString += data.help;\n            } else {\n                helpString += '<strong>Tool help is unavailable for this dataset.</strong><hr/>';\n            }\n            helpString += '</div>';\n            self.$el.find( '.details' ).append($.parseHTML(helpString));\n        };\n        var parseToolID = function(data) {\n            $.ajax({\n                url: Galaxy.root + 'api/tools/' + data.tool_id + '/build'\n            }).done(function(data){\n                parseToolBuild(data);\n            }).fail(function(){\n                parseToolBuild({})\n            });\n        };\n        if (Galaxy.user.id === null){\n            return null\n        }\n        return faIconButton({\n            title: 'Tool Help',\n            classes: 'icon-btn',\n            href: '#',\n            faIcon: 'fa-question',\n            onclick: function() {\n                var divString = 'thdiv-' + datasetID;\n                if (self.$el.find(\".toolhelp\").length > 0){\n                    self.$el.find(\".toolhelp\").toggle();\n                } else {\n                    $.ajax({\n                        url: Galaxy.root + 'api/jobs/' + jobID\n                    }).done(function(data){\n                        parseToolID(data);\n                    }).fail(function(){\n                       console.log('Failed at recovering job information from the  Galaxy API for job id \"' + jobID + '\".');\n                    });\n                }\n            }\n        });\n    },\n    //*************************************************************************\n\n    /** Add less commonly used actions in the details section based on state */\n    _renderSecondaryActions : function(){\n        var actions = _super.prototype._renderSecondaryActions.call( this );\n        switch( this.model.get( 'state' ) ){\n            case STATES.UPLOAD:\n            case STATES.NOT_VIEWABLE:\n                return actions;\n            case STATES.ERROR:\n                // error button comes first\n                actions.unshift( this._renderErrButton() );\n                return actions.concat([ this._renderRerunButton(), this._renderToolHelpButton() ]);\n            case STATES.OK:\n            case STATES.FAILED_METADATA:\n                return actions.concat([ this._renderRerunButton(), this._renderVisualizationsButton(), this._renderToolHelpButton() ]);\n        }\n        return actions.concat([ this._renderRerunButton(), this._renderToolHelpButton() ]);\n    },\n\n    /** Render icon-button to report an error on this dataset to the galaxy admin. */\n    _renderErrButton : function(){\n        return faIconButton({\n            title       : _l( 'View or report this error' ),\n            href        : this.model.urls.report_error,\n            classes     : 'report-error-btn',\n            target      : this.linkTarget,\n            faIcon      : 'fa-bug'\n        });\n    },\n\n    /** Render icon-button to re-run the job that created this dataset. */\n    _renderRerunButton : function(){\n        var creating_job = this.model.get( 'creating_job' );\n        if( this.model.get( 'rerunnable' ) ){\n            return faIconButton({\n                title       : _l( 'Run this job again' ),\n                href        : this.model.urls.rerun,\n                classes     : 'rerun-btn',\n                target      : this.linkTarget,\n                faIcon      : 'fa-refresh',\n                onclick     : function( ev ) {\n                    ev.preventDefault();\n                    Galaxy.router.push( '/', { job_id : creating_job } );\n                }\n            });\n        }\n    },\n\n    /** Render an icon-button or popupmenu of links based on the applicable visualizations */\n    _renderVisualizationsButton : function(){\n        //TODO: someday - lazyload visualizations\n        var visualizations = this.model.get( 'visualizations' );\n        if( ( this.model.isDeletedOrPurged() )\n        ||  ( !this.hasUser )\n        ||  ( !this.model.hasData() )\n        ||  ( _.isEmpty( visualizations ) ) ){\n            return null;\n        }\n        if( !_.isObject( visualizations[0] ) ){\n            this.warn( 'Visualizations have been switched off' );\n            return null;\n        }\n\n        var $visualizations = $( this.templates.visualizations( visualizations, this ) );\n        //HACK: need to re-write those directed at galaxy_main with linkTarget\n        $visualizations.find( '[target=\"galaxy_main\"]').attr( 'target', this.linkTarget );\n        // use addBack here to include the root $visualizations elem (for the case of 1 visualization)\n        this._addScratchBookFn( $visualizations.find( '.visualization-link' ).addBack( '.visualization-link' ) );\n        return $visualizations;\n    },\n\n    /** add scratchbook functionality to visualization links */\n    _addScratchBookFn : function( $links ){\n        var li = this;\n        $links.click( function( ev ){\n            if( Galaxy.frame && Galaxy.frame.active ){\n                Galaxy.frame.add({\n                    title       : 'Visualization',\n                    url         : $( this ).attr( 'href' )\n                });\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n        });\n    },\n\n    //TODO: if possible move these to readonly view - but display the owner's tags/annotation (no edit)\n    /** Render the tags list/control */\n    _renderTags : function( $where ){\n        if( !this.hasUser ){ return; }\n        var view = this;\n        this.tagsEditor = new TAGS.TagsEditor({\n            model           : this.model,\n            el              : $where.find( '.tags-display' ),\n            onshowFirstTime : function(){ this.render(); },\n            // persist state on the hda view (and not the editor) since these are currently re-created each time\n            onshow          : function(){ view.tagsEditorShown = true; },\n            onhide          : function(){ view.tagsEditorShown = false; },\n            $activator      : faIconButton({\n                title   : _l( 'Edit dataset tags' ),\n                classes : 'tag-btn',\n                faIcon  : 'fa-tags'\n            }).appendTo( $where.find( '.actions .right' ) )\n        });\n        if( this.tagsEditorShown ){ this.tagsEditor.toggle( true ); }\n    },\n\n    /** Render the annotation display/control */\n    _renderAnnotation : function( $where ){\n        if( !this.hasUser ){ return; }\n        var view = this;\n        this.annotationEditor = new ANNOTATIONS.AnnotationEditor({\n            model           : this.model,\n            el              : $where.find( '.annotation-display' ),\n            onshowFirstTime : function(){ this.render(); },\n            // persist state on the hda view (and not the editor) since these are currently re-created each time\n            onshow          : function(){ view.annotationEditorShown = true; },\n            onhide          : function(){ view.annotationEditorShown = false; },\n            $activator      : faIconButton({\n                title   : _l( 'Edit dataset annotation' ),\n                classes : 'annotate-btn',\n                faIcon  : 'fa-comment'\n            }).appendTo( $where.find( '.actions .right' ) )\n        });\n        if( this.annotationEditorShown ){ this.annotationEditor.toggle( true ); }\n    },\n\n    /** If the format/dbkey/genome_build isn't set, make the display a link to the edit page */\n    _makeDbkeyEditLink : function( $details ){\n        // make the dbkey a link to editing\n        if( this.model.get( 'metadata_dbkey' ) === '?'\n        &&  !this.model.isDeletedOrPurged() ){\n            var editableDbkey = $( '<a class=\"value\">?</a>' )\n                .attr( 'href', this.model.urls.edit )\n                .attr( 'target', this.linkTarget );\n            $details.find( '.dbkey .value' ).replaceWith( editableDbkey );\n        }\n    },\n\n    // ......................................................................... events\n    /** event map */\n    events : _.extend( _.clone( _super.prototype.events ), {\n        'click .undelete-link'  : '_clickUndeleteLink',\n        'click .purge-link'     : '_clickPurgeLink',\n\n        'click .edit-btn'       : function( ev ){ this.trigger( 'edit', this, ev ); },\n        'click .delete-btn'     : function( ev ){ this.trigger( 'delete', this, ev ); },\n        'click .rerun-btn'      : function( ev ){ this.trigger( 'rerun', this, ev ); },\n        'click .report-err-btn' : function( ev ){ this.trigger( 'report-err', this, ev ); },\n        'click .visualization-btn' : function( ev ){ this.trigger( 'visualize', this, ev ); },\n        'click .dbkey a'        : function( ev ){ this.trigger( 'edit', this, ev ); }\n    }),\n\n    /** listener for item undelete (in the messages section) */\n    _clickUndeleteLink : function( ev ){\n        this.model.undelete();\n        return false;\n    },\n\n    /** listener for item purge (in the messages section) */\n    _clickPurgeLink : function( ev ){\n        if( confirm( _l( 'This will permanently remove the data in your dataset. Are you sure?' ) ) ){\n            this.model.purge();\n        }\n        return false;\n    },\n\n    // ......................................................................... misc\n    /** string rep */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'HDAEditView(' + modelString + ')';\n    }\n});\n\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemEdit.prototype.templates = (function(){\n\n    var warnings = _.extend( {}, _super.prototype.templates.warnings, {\n        failed_metadata : BASE_MVC.wrapTemplate([\n            // in this override, provide a link to the edit page\n            '<% if( dataset.state === \"failed_metadata\" ){ %>',\n                '<div class=\"failed_metadata-warning warningmessagesmall\">',\n                    _l( 'An error occurred setting the metadata for this dataset' ),\n                    '<br /><a href=\"<%- dataset.urls.edit %>\" target=\"<%- view.linkTarget %>\">',\n                        _l( 'Set it manually or retry auto-detection' ),\n                    '</a>',\n                '</div>',\n            '<% } %>'\n        ], 'dataset' ),\n\n        deleted : BASE_MVC.wrapTemplate([\n            // in this override, provide links to undelete or purge the dataset\n            '<% if( dataset.deleted && !dataset.purged ){ %>',\n                // deleted not purged\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l( 'This dataset has been deleted' ),\n                    '<br /><a class=\"undelete-link\" href=\"javascript:void(0);\">', _l( 'Undelete it' ), '</a>',\n                    '<% if( view.purgeAllowed ){ %>',\n                        '<br /><a class=\"purge-link\" href=\"javascript:void(0);\">',\n                            _l( 'Permanently remove it from disk' ),\n                        '</a>',\n                    '<% } %>',\n                '</div>',\n            '<% } %>'\n        ], 'dataset' )\n    });\n\n    var visualizationsTemplate = BASE_MVC.wrapTemplate([\n        '<% if( visualizations.length === 1 ){ %>',\n            '<a class=\"visualization-link icon-btn\" href=\"<%- visualizations[0].href %>\"',\n                    ' target=\"<%- visualizations[0].target %>\" title=\"', _l( 'Visualize in' ),\n                    ' <%- visualizations[0].html %>\">',\n                '<span class=\"fa fa-bar-chart-o\"></span>',\n            '</a>',\n\n        '<% } else { %>',\n            '<div class=\"visualizations-dropdown dropdown icon-btn\">',\n                '<a data-toggle=\"dropdown\" title=\"', _l( 'Visualize' ), '\">',\n                    '<span class=\"fa fa-bar-chart-o\"></span>',\n                '</a>',\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    '<% _.each( visualizations, function( visualization ){ %>',\n                        '<li><a class=\"visualization-link\" href=\"<%- visualization.href %>\"',\n                                ' target=\"<%- visualization.target %>\">',\n                            '<%- visualization.html %>',\n                        '</a></li>',\n                    '<% }); %>',\n                '</ul>',\n            '</div>',\n        '<% } %>'\n    ], 'visualizations' );\n\n    return _.extend( {}, _super.prototype.templates, {\n        warnings : warnings,\n        visualizations : visualizationsTemplate\n    });\n}());\n\n\n//==============================================================================\n    return {\n        DatasetListItemEdit : DatasetListItemEdit\n    };\n});\n"]}