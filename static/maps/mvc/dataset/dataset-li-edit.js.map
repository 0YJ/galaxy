{"version":3,"sources":["mvc/dataset/dataset-li-edit.js"],"names":["_super","_datasetLi2","default","DatasetListItemView","DatasetListItemEdit","extend","initialize","attributes","prototype","call","this","hasUser","purgeAllowed","tagsEditorShown","annotationEditorShown","_renderPrimaryActions","actions","model","get","NOT_VIEWABLE","concat","_renderEditButton","_renderDeleteButton","self","purged","deleted","editBtnData","title","_localization2","href","Galaxy","root","id","faIcon","classes","onclick","ev","router","preventDefault","push","dataset_id","_","contains","UPLOAD","_states2","NEW","disabled","_faIconButton2","deletedAlready","isDeletedOrPurged","$el","find","trigger","_renderDetails","state","FAILED_METADATA","_renderAnnotation","_makeDbkeyEditLink","$details","_setUpBehaviors","_renderToolHelpButton","jobID","creating_job","parseToolBuild","data","helpString","datasetID","name","help","$","url","append","parseHTML","tool_id","ajax","done","user","fail","parseToolID","length","toggle","console","log","_renderSecondaryActions","_renderErrButton","ERROR","unshift","OK","_renderRerunButton","target","job_id","isObject","urls","rerun","linkTarget","$visualizations","_addScratchBookFn","visualizations","stopPropagation","hasData","isEmpty","_renderTags","$where","warn","$activator","attr","view","onhide","$links","click","tagsEditor","frame","active","add","onshowFirstTime","onshow","render","editableDbkey","annotationEditor","_annotation2","AnnotationEditor","el","appendTo","_clickPurgeLink","confirm","edit","replaceWith","events","clone","click .undelete-link","click .purge-link","click .edit-btn","templates","failed_metadata","click .rerun-btn","wrapTemplate","click .report-err-btn","click .visualization-btn","click .dbkey a","_clickUndeleteLink","undelete","purge","toString","warnings","_baseMvc2","visualizationsTemplate"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li-edit.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport DATASET_LI from \"mvc/dataset/dataset-li\";\nimport TAGS from \"mvc/tag\";\nimport ANNOTATIONS from \"mvc/annotation\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar _super = DATASET_LI.DatasetListItemView;\n/** @class Editing view for DatasetAssociation.\n */\nvar DatasetListItemEdit = _super.extend(\n    /** @lends DatasetListItemEdit.prototype */ {\n        /** set up: options */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            this.hasUser = attributes.hasUser;\n\n            /** allow user purge of dataset files? */\n            this.purgeAllowed = attributes.purgeAllowed || false;\n\n            //TODO: move to HiddenUntilActivatedViewMixin\n            /** should the tags editor be shown or hidden initially? */\n            this.tagsEditorShown = attributes.tagsEditorShown || false;\n            /** should the tags editor be shown or hidden initially? */\n            this.annotationEditorShown =\n                attributes.annotationEditorShown || false;\n        },\n\n        // ......................................................................... titlebar actions\n        /** In this override, add the other two primary actions: edit and delete */\n        _renderPrimaryActions: function() {\n            var actions = _super.prototype._renderPrimaryActions.call(this);\n            if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                return actions;\n            }\n            // render the display, edit attr and delete icon-buttons\n            return _super.prototype._renderPrimaryActions\n                .call(this)\n                .concat([this._renderEditButton(), this._renderDeleteButton()]);\n        },\n\n        //TODO: move titleButtons into state renderers, remove state checks in the buttons\n\n        /** Render icon-button to edit the attributes (format, permissions, etc.) this dataset. */\n        _renderEditButton: function() {\n            var self = this;\n            // don't show edit while uploading, in-accessible\n            // DO show if in error (ala previous history panel)\n            if (\n                this.model.get(\"state\") === STATES.DISCARDED ||\n                !this.model.get(\"accessible\")\n            ) {\n                return null;\n            }\n            var purged = this.model.get(\"purged\"),\n                deleted = this.model.get(\"deleted\"),\n                editBtnData = {\n                    title: _l(\"Edit attributes\"),\n                    href:\n                        Galaxy.root +\n                        \"datasets/edit?dataset_id=\" +\n                        this.model.attributes.id,\n                    faIcon: \"fa-pencil\",\n                    classes: \"edit-btn\",\n                    onclick: function(ev) {\n                        if (Galaxy.router) {\n                            ev.preventDefault();\n                            Galaxy.router.push(\"datasets/edit\", {\n                                dataset_id: self.model.attributes.id\n                            });\n                        }\n                    }\n                };\n            // disable if purged or deleted and explain why in the tooltip\n            if (deleted || purged) {\n                editBtnData.disabled = true;\n                if (purged) {\n                    editBtnData.title = _l(\n                        \"Cannot edit attributes of datasets removed from disk\"\n                    );\n                } else if (deleted) {\n                    editBtnData.title = _l(\n                        \"Undelete dataset to edit attributes\"\n                    );\n                }\n\n                // disable if still uploading or new\n            } else if (\n                _.contains([STATES.UPLOAD, STATES.NEW], this.model.get(\"state\"))\n            ) {\n                editBtnData.disabled = true;\n                editBtnData.title = _l(\"This dataset is not yet editable\");\n            }\n            return faIconButton(editBtnData);\n        },\n\n        /** Render icon-button to delete this hda. */\n        _renderDeleteButton: function() {\n            // don't show delete if...\n            if (!this.model.get(\"accessible\")) {\n                return null;\n            }\n\n            var self = this,\n                deletedAlready = this.model.isDeletedOrPurged();\n            return faIconButton({\n                title: !deletedAlready\n                    ? _l(\"Delete\")\n                    : _l(\"Dataset is already deleted\"),\n                disabled: deletedAlready,\n                faIcon: \"fa-times\",\n                classes: \"delete-btn\",\n                onclick: function() {\n                    // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                    self.$el.find(\".icon-btn.delete-btn\").trigger(\"mouseout\");\n                    self.model[\"delete\"]();\n                }\n            });\n        },\n\n        // ......................................................................... details\n        /** In this override, add tags and annotations controls, make the ? dbkey a link to editing page */\n        _renderDetails: function() {\n            //TODO: generalize to be allow different details for each state\n            var $details = _super.prototype._renderDetails.call(this),\n                state = this.model.get(\"state\");\n\n            if (\n                !this.model.isDeletedOrPurged() &&\n                _.contains([STATES.OK, STATES.FAILED_METADATA], state)\n            ) {\n                this._renderTags($details);\n                this._renderAnnotation($details);\n                this._makeDbkeyEditLink($details);\n            }\n\n            this._setUpBehaviors($details);\n            return $details;\n        },\n\n        /**************************************************************************\n     * Render help button to show tool help text without rerunning the tool.\n     * Issue #2100\n     */\n        _renderToolHelpButton: function() {\n            var datasetID = this.model.attributes.dataset_id;\n            var jobID = this.model.attributes.creating_job;\n            var self = this;\n\n            var parseToolBuild = function(data) {\n                var helpString =\n                    '<div id=\"thdiv-' + datasetID + '\" class=\"toolhelp\">';\n                if (data.name && data.help) {\n                    helpString +=\n                        \"<strong>Tool help for \" + data.name + \"</strong><hr/>\";\n                    helpString += data.help;\n                } else {\n                    helpString +=\n                        \"<strong>Tool help is unavailable for this dataset.</strong><hr/>\";\n                }\n                helpString += \"</div>\";\n                self.$el.find(\".details\").append($.parseHTML(helpString));\n            };\n            var parseToolID = function(data) {\n                $.ajax({\n                    url: Galaxy.root + \"api/tools/\" + data.tool_id + \"/build\"\n                })\n                    .done(function(data) {\n                        parseToolBuild(data);\n                    })\n                    .fail(function() {\n                        parseToolBuild({});\n                    });\n            };\n            if (Galaxy.user.id === null) {\n                return null;\n            }\n            return faIconButton({\n                title: _l(\"Tool Help\"),\n                classes: \"icon-btn\",\n                href: \"#\",\n                faIcon: \"fa-question\",\n                onclick: function() {\n                    var divString = \"thdiv-\" + datasetID;\n                    if (self.$el.find(\".toolhelp\").length > 0) {\n                        self.$el.find(\".toolhelp\").toggle();\n                    } else {\n                        $.ajax({\n                            url: Galaxy.root + \"api/jobs/\" + jobID\n                        })\n                            .done(function(data) {\n                                parseToolID(data);\n                            })\n                            .fail(function() {\n                                console.log(\n                                    'Failed at recovering job information from the  Galaxy API for job id \"' +\n                                        jobID +\n                                        '\".'\n                                );\n                            });\n                    }\n                }\n            });\n        },\n        //*************************************************************************\n\n        /** Add less commonly used actions in the details section based on state */\n        _renderSecondaryActions: function() {\n            var actions = _super.prototype._renderSecondaryActions.call(this);\n            switch (this.model.get(\"state\")) {\n                case STATES.UPLOAD:\n                case STATES.NOT_VIEWABLE:\n                    return actions;\n                case STATES.ERROR:\n                    // error button comes first\n                    actions.unshift(this._renderErrButton());\n                    return actions.concat([\n                        this._renderRerunButton(),\n                        this._renderToolHelpButton()\n                    ]);\n                case STATES.OK:\n                case STATES.FAILED_METADATA:\n                    return actions.concat([\n                        this._renderRerunButton(),\n                        this._renderVisualizationsButton(),\n                        this._renderToolHelpButton()\n                    ]);\n            }\n            return actions.concat([\n                this._renderRerunButton(),\n                this._renderToolHelpButton()\n            ]);\n        },\n\n        /** Render icon-button to report an error on this dataset to the galaxy admin. */\n        _renderErrButton: function() {\n            var self = this;\n            return faIconButton({\n                title: _l(\"View or report this error\"),\n                href:\n                    Galaxy.root +\n                    \"datasets/error?dataset_id=\" +\n                    this.model.attributes.id,\n                classes: \"report-error-btn\",\n                faIcon: \"fa-bug\",\n                onclick: function(ev) {\n                    if (Galaxy.router) {\n                        ev.preventDefault();\n                        Galaxy.router.push(\"datasets/error\", {\n                            dataset_id: self.model.attributes.id\n                        });\n                    }\n                }\n            });\n        },\n\n        /** Render icon-button to re-run the job that created this dataset. */\n        _renderRerunButton: function() {\n            var creating_job = this.model.get(\"creating_job\");\n            if (this.model.get(\"rerunnable\")) {\n                return faIconButton({\n                    title: _l(\"Run this job again\"),\n                    href: this.model.urls.rerun,\n                    classes: \"rerun-btn\",\n                    target: this.linkTarget,\n                    faIcon: \"fa-refresh\",\n                    onclick: function(ev) {\n                        if (Galaxy.router) {\n                            ev.preventDefault();\n                            Galaxy.router.push(\"/\", {\n                                job_id: creating_job\n                            });\n                        }\n                    }\n                });\n            }\n        },\n\n        /** Render an icon-button or popupmenu of links based on the applicable visualizations */\n        _renderVisualizationsButton: function() {\n            //TODO: someday - lazyload visualizations\n            var visualizations = this.model.get(\"visualizations\");\n            if (\n                this.model.isDeletedOrPurged() ||\n                !this.hasUser ||\n                !this.model.hasData() ||\n                _.isEmpty(visualizations)\n            ) {\n                return null;\n            }\n            if (!_.isObject(visualizations[0])) {\n                this.warn(\"Visualizations have been switched off\");\n                return null;\n            }\n\n            var $visualizations = $(\n                this.templates.visualizations(visualizations, this)\n            );\n            //HACK: need to re-write those directed at galaxy_main with linkTarget\n            $visualizations\n                .find('[target=\"galaxy_main\"]')\n                .attr(\"target\", this.linkTarget);\n            // use addBack here to include the root $visualizations elem (for the case of 1 visualization)\n            this._addScratchBookFn(\n                $visualizations\n                    .find(\".visualization-link\")\n                    .addBack(\".visualization-link\")\n            );\n            return $visualizations;\n        },\n\n        /** add scratchbook functionality to visualization links */\n        _addScratchBookFn: function($links) {\n            var li = this;\n            $links.click(function(ev) {\n                if (Galaxy.frame && Galaxy.frame.active) {\n                    Galaxy.frame.add({\n                        title: \"Visualization\",\n                        url: $(this).attr(\"href\")\n                    });\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            });\n        },\n\n        //TODO: if possible move these to readonly view - but display the owner's tags/annotation (no edit)\n        /** Render the tags list/control */\n        _renderTags: function($where) {\n            if (!this.hasUser) {\n                return;\n            }\n            var view = this;\n            this.tagsEditor = new TAGS.TagsEditor({\n                model: this.model,\n                el: $where.find(\".tags-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                // persist state on the hda view (and not the editor) since these are currently re-created each time\n                onshow: function() {\n                    view.tagsEditorShown = true;\n                },\n                onhide: function() {\n                    view.tagsEditorShown = false;\n                },\n                $activator: faIconButton({\n                    title: _l(\"Edit dataset tags\"),\n                    classes: \"tag-btn\",\n                    faIcon: \"fa-tags\"\n                }).appendTo($where.find(\".actions .right\"))\n            });\n            if (this.tagsEditorShown) {\n                this.tagsEditor.toggle(true);\n            }\n        },\n\n        /** Render the annotation display/control */\n        _renderAnnotation: function($where) {\n            if (!this.hasUser) {\n                return;\n            }\n            var view = this;\n            this.annotationEditor = new ANNOTATIONS.AnnotationEditor({\n                model: this.model,\n                el: $where.find(\".annotation-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                // persist state on the hda view (and not the editor) since these are currently re-created each time\n                onshow: function() {\n                    view.annotationEditorShown = true;\n                },\n                onhide: function() {\n                    view.annotationEditorShown = false;\n                },\n                $activator: faIconButton({\n                    title: _l(\"Edit dataset annotation\"),\n                    classes: \"annotate-btn\",\n                    faIcon: \"fa-comment\"\n                }).appendTo($where.find(\".actions .right\"))\n            });\n            if (this.annotationEditorShown) {\n                this.annotationEditor.toggle(true);\n            }\n        },\n\n        /** If the format/dbkey/genome_build isn't set, make the display a link to the edit page */\n        _makeDbkeyEditLink: function($details) {\n            // make the dbkey a link to editing\n            if (\n                this.model.get(\"metadata_dbkey\") === \"?\" &&\n                !this.model.isDeletedOrPurged()\n            ) {\n                var editableDbkey = $('<a class=\"value\">?</a>')\n                    .attr(\"href\", this.model.urls.edit)\n                    .attr(\"target\", \"_top\");\n                $details.find(\".dbkey .value\").replaceWith(editableDbkey);\n            }\n        },\n\n        // ......................................................................... events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .undelete-link\": \"_clickUndeleteLink\",\n            \"click .purge-link\": \"_clickPurgeLink\",\n\n            \"click .edit-btn\": function(ev) {\n                this.trigger(\"edit\", this, ev);\n            },\n            \"click .delete-btn\": function(ev) {\n                this.trigger(\"delete\", this, ev);\n            },\n            \"click .rerun-btn\": function(ev) {\n                this.trigger(\"rerun\", this, ev);\n            },\n            \"click .report-err-btn\": function(ev) {\n                this.trigger(\"report-err\", this, ev);\n            },\n            \"click .visualization-btn\": function(ev) {\n                this.trigger(\"visualize\", this, ev);\n            },\n            \"click .dbkey a\": function(ev) {\n                this.trigger(\"edit\", this, ev);\n            }\n        }),\n\n        /** listener for item undelete (in the messages section) */\n        _clickUndeleteLink: function(ev) {\n            this.model.undelete();\n            return false;\n        },\n\n        /** listener for item purge (in the messages section) */\n        _clickPurgeLink: function(ev) {\n            if (\n                confirm(\n                    _l(\n                        \"This will permanently remove the data in your dataset. Are you sure?\"\n                    )\n                )\n            ) {\n                this.model.purge();\n            }\n            return false;\n        },\n\n        // ......................................................................... misc\n        /** string rep */\n        toString: function() {\n            var modelString = this.model ? this.model + \"\" : \"(no model)\";\n            return \"HDAEditView(\" + modelString + \")\";\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemEdit.prototype.templates = (function() {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: BASE_MVC.wrapTemplate(\n            [\n                // in this override, provide a link to the edit page\n                '<% if( dataset.state === \"failed_metadata\" ){ %>',\n                '<div class=\"failed_metadata-warning warningmessagesmall\">',\n                _l(\"An error occurred setting the metadata for this dataset\"),\n                '<br /><a href=\"<%- dataset.urls.edit %>\" target=\"_top\">',\n                _l(\"Set it manually or retry auto-detection\"),\n                \"</a>\",\n                \"</div>\",\n                \"<% } %>\"\n            ],\n            \"dataset\"\n        ),\n\n        deleted: BASE_MVC.wrapTemplate(\n            [\n                // in this override, provide links to undelete or purge the dataset\n                \"<% if( dataset.deleted && !dataset.purged ){ %>\",\n                // deleted not purged\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                _l(\"This dataset has been deleted\"),\n                '<br /><a class=\"undelete-link\" href=\"javascript:void(0);\">',\n                _l(\"Undelete it\"),\n                \"</a>\",\n                \"<% if( view.purgeAllowed ){ %>\",\n                '<br /><a class=\"purge-link\" href=\"javascript:void(0);\">',\n                _l(\"Permanently remove it from disk\"),\n                \"</a>\",\n                \"<% } %>\",\n                \"</div>\",\n                \"<% } %>\"\n            ],\n            \"dataset\"\n        )\n    });\n\n    var visualizationsTemplate = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( visualizations.length === 1 ){ %>\",\n            '<a class=\"visualization-link icon-btn\" href=\"<%- visualizations[0].href %>\"',\n            ' target=\"<%- visualizations[0].target %>\" title=\"',\n            _l(\"Visualize in\"),\n            ' <%- visualizations[0].html %>\">',\n            '<span class=\"fa fa-bar-chart-o\"></span>',\n            \"</a>\",\n\n            \"<% } else { %>\",\n            '<div class=\"visualizations-dropdown dropdown icon-btn\">',\n            '<a data-toggle=\"dropdown\" title=\"',\n            _l(\"Visualize\"),\n            '\">',\n            '<span class=\"fa fa-bar-chart-o\"></span>',\n            \"</a>\",\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n            \"<% _.each( visualizations, function( visualization ){ %>\",\n            '<li><a class=\"visualization-link\" href=\"<%- visualization.href %>\"',\n            ' target=\"<%- visualization.target %>\">',\n            \"<%- visualization.html %>\",\n            \"</a></li>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"</div>\",\n            \"<% } %>\"\n        ],\n        \"visualizations\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        visualizations: visualizationsTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    DatasetListItemEdit: DatasetListItemEdit\n};\n"]}