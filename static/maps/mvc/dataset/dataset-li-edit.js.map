{"version":3,"sources":["mvc/dataset/dataset-li-edit.js"],"names":["_states","require","_datasetLi","_tag","_annotation","_faIconButton","_baseMvc","_localization","_super","_datasetLi2","default","DatasetListItemView","DatasetListItemEdit","extend","initialize","attributes","prototype","call","this","hasUser","purgeAllowed","tagsEditorShown","annotationEditorShown","_renderPrimaryActions","actions","model","get","_states2","NOT_VIEWABLE","_renderDeleteButton","_renderEditButton","self","DISCARDED","purged","deleted","editBtnData","_localization2","root","id","faIcon","onclick","ev","Galaxy","router","preventDefault","push","dataset_id","disabled","title","_","contains","UPLOAD","NEW","isDeletedOrPurged","_faIconButton2","deletedAlready","classes","$el","find","trigger","$details","_renderDetails","OK","FAILED_METADATA","state","_renderTags","_renderAnnotation","_makeDbkeyEditLink","_renderToolHelpButton","jobID","creating_job","parseToolBuild","data","helpString","datasetID","help","name","append","$","parseHTML","ajax","tool_id","done","parseToolID","user","href","length","toggle","url","console","log","_renderSecondaryActions","unshift","concat","_renderRerunButton","_renderErrButton","_renderVisualizationsButton","linkTarget","urls","rerun","target","visualizations","job_id","_addScratchBookFn","click","hasData","frame","isObject","stopPropagation","$visualizations","templates","attr","view","tagsEditor","$where","$links","onhide","active","add","appendTo","_tag2","TagsEditor","annotationEditor","onshowFirstTime","onshow","$activator","editableDbkey","_annotation2","replaceWith","el","render","_clickUndeleteLink","undelete","edit","events","clone","click .undelete-link","click .purge-link","click .edit-btn","modelString","click .rerun-btn","click .report-err-btn","failed_metadata","wrapTemplate","click .dbkey a","visualizationsTemplate","confirm","purge","toString","warnings","_baseMvc2"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li-edit.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport DATASET_LI from \"mvc/dataset/dataset-li\";\nimport TAGS from \"mvc/tag\";\nimport ANNOTATIONS from \"mvc/annotation\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar _super = DATASET_LI.DatasetListItemView;\n/** @class Editing view for DatasetAssociation.\n */\nvar DatasetListItemEdit = _super.extend(\n    /** @lends DatasetListItemEdit.prototype */ {\n        /** set up: options */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            this.hasUser = attributes.hasUser;\n\n            /** allow user purge of dataset files? */\n            this.purgeAllowed = attributes.purgeAllowed || false;\n\n            //TODO: move to HiddenUntilActivatedViewMixin\n            /** should the tags editor be shown or hidden initially? */\n            this.tagsEditorShown = attributes.tagsEditorShown || false;\n            /** should the tags editor be shown or hidden initially? */\n            this.annotationEditorShown =\n                attributes.annotationEditorShown || false;\n        },\n\n        // ......................................................................... titlebar actions\n        /** In this override, add the other two primary actions: edit and delete */\n        _renderPrimaryActions: function() {\n            var actions = _super.prototype._renderPrimaryActions.call(this);\n            if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                return actions;\n            }\n            // render the display, edit attr and delete icon-buttons\n            return _super.prototype._renderPrimaryActions\n                .call(this)\n                .concat([this._renderEditButton(), this._renderDeleteButton()]);\n        },\n\n        //TODO: move titleButtons into state renderers, remove state checks in the buttons\n\n        /** Render icon-button to edit the attributes (format, permissions, etc.) this dataset. */\n        _renderEditButton: function() {\n            var self = this;\n            // don't show edit while uploading, in-accessible\n            // DO show if in error (ala previous history panel)\n            if (\n                this.model.get(\"state\") === STATES.DISCARDED ||\n                !this.model.get(\"accessible\")\n            ) {\n                return null;\n            }\n            var purged = this.model.get(\"purged\"),\n                deleted = this.model.get(\"deleted\"),\n                editBtnData = {\n                    title: _l(\"Edit attributes\"),\n                    href:\n                        Galaxy.root +\n                        \"datasets/edit?dataset_id=\" +\n                        this.model.attributes.id,\n                    faIcon: \"fa-pencil\",\n                    classes: \"edit-btn\",\n                    onclick: function(ev) {\n                        if (Galaxy.router) {\n                            ev.preventDefault();\n                            Galaxy.router.push(\"datasets/edit\", {\n                                dataset_id: self.model.attributes.id\n                            });\n                        }\n                    }\n                };\n            // disable if purged or deleted and explain why in the tooltip\n            if (deleted || purged) {\n                editBtnData.disabled = true;\n                if (purged) {\n                    editBtnData.title = _l(\n                        \"Cannot edit attributes of datasets removed from disk\"\n                    );\n                } else if (deleted) {\n                    editBtnData.title = _l(\n                        \"Undelete dataset to edit attributes\"\n                    );\n                }\n\n                // disable if still uploading or new\n            } else if (\n                _.contains([STATES.UPLOAD, STATES.NEW], this.model.get(\"state\"))\n            ) {\n                editBtnData.disabled = true;\n                editBtnData.title = _l(\"This dataset is not yet editable\");\n            }\n            return faIconButton(editBtnData);\n        },\n\n        /** Render icon-button to delete this hda. */\n        _renderDeleteButton: function() {\n            // don't show delete if...\n            if (!this.model.get(\"accessible\")) {\n                return null;\n            }\n\n            var self = this,\n                deletedAlready = this.model.isDeletedOrPurged();\n            return faIconButton({\n                title: !deletedAlready\n                    ? _l(\"Delete\")\n                    : _l(\"Dataset is already deleted\"),\n                disabled: deletedAlready,\n                faIcon: \"fa-times\",\n                classes: \"delete-btn\",\n                onclick: function() {\n                    // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                    self.$el.find(\".icon-btn.delete-btn\").trigger(\"mouseout\");\n                    self.model[\"delete\"]();\n                }\n            });\n        },\n\n        // ......................................................................... details\n        /** In this override, add tags and annotations controls, make the ? dbkey a link to editing page */\n        _renderDetails: function() {\n            //TODO: generalize to be allow different details for each state\n            var $details = _super.prototype._renderDetails.call(this),\n                state = this.model.get(\"state\");\n\n            if (\n                !this.model.isDeletedOrPurged() &&\n                _.contains([STATES.OK, STATES.FAILED_METADATA], state)\n            ) {\n                this._renderTags($details);\n                this._renderAnnotation($details);\n                this._makeDbkeyEditLink($details);\n            }\n\n            this._setUpBehaviors($details);\n            return $details;\n        },\n\n        /**************************************************************************\n     * Render help button to show tool help text without rerunning the tool.\n     * Issue #2100\n     */\n        _renderToolHelpButton: function() {\n            var datasetID = this.model.attributes.dataset_id;\n            var jobID = this.model.attributes.creating_job;\n            var self = this;\n\n            var parseToolBuild = function(data) {\n                var helpString =\n                    '<div id=\"thdiv-' + datasetID + '\" class=\"toolhelp\">';\n                if (data.name && data.help) {\n                    helpString +=\n                        \"<strong>Tool help for \" + data.name + \"</strong><hr/>\";\n                    helpString += data.help;\n                } else {\n                    helpString +=\n                        \"<strong>Tool help is unavailable for this dataset.</strong><hr/>\";\n                }\n                helpString += \"</div>\";\n                self.$el.find(\".details\").append($.parseHTML(helpString));\n            };\n            var parseToolID = function(data) {\n                $.ajax({\n                    url: Galaxy.root + \"api/tools/\" + data.tool_id + \"/build\"\n                })\n                    .done(function(data) {\n                        parseToolBuild(data);\n                    })\n                    .fail(function() {\n                        parseToolBuild({});\n                    });\n            };\n            if (Galaxy.user.id === null) {\n                return null;\n            }\n            return faIconButton({\n                title: _l(\"Tool Help\"),\n                classes: \"icon-btn\",\n                href: \"#\",\n                faIcon: \"fa-question\",\n                onclick: function() {\n                    var divString = \"thdiv-\" + datasetID;\n                    if (self.$el.find(\".toolhelp\").length > 0) {\n                        self.$el.find(\".toolhelp\").toggle();\n                    } else {\n                        $.ajax({\n                            url: Galaxy.root + \"api/jobs/\" + jobID\n                        })\n                            .done(function(data) {\n                                parseToolID(data);\n                            })\n                            .fail(function() {\n                                console.log(\n                                    'Failed at recovering job information from the  Galaxy API for job id \"' +\n                                        jobID +\n                                        '\".'\n                                );\n                            });\n                    }\n                }\n            });\n        },\n        //*************************************************************************\n\n        /** Add less commonly used actions in the details section based on state */\n        _renderSecondaryActions: function() {\n            var actions = _super.prototype._renderSecondaryActions.call(this);\n            switch (this.model.get(\"state\")) {\n                case STATES.UPLOAD:\n                case STATES.NOT_VIEWABLE:\n                    return actions;\n                case STATES.ERROR:\n                    // error button comes first\n                    actions.unshift(this._renderErrButton());\n                    return actions.concat([\n                        this._renderRerunButton(),\n                        this._renderToolHelpButton()\n                    ]);\n                case STATES.OK:\n                case STATES.FAILED_METADATA:\n                    return actions.concat([\n                        this._renderRerunButton(),\n                        this._renderVisualizationsButton(),\n                        this._renderToolHelpButton()\n                    ]);\n            }\n            return actions.concat([\n                this._renderRerunButton(),\n                this._renderToolHelpButton()\n            ]);\n        },\n\n        /** Render icon-button to report an error on this dataset to the galaxy admin. */\n        _renderErrButton: function() {\n            var self = this;\n            return faIconButton({\n                title: _l(\"View or report this error\"),\n                href:\n                    Galaxy.root +\n                    \"datasets/error?dataset_id=\" +\n                    this.model.attributes.id,\n                classes: \"report-error-btn\",\n                faIcon: \"fa-bug\",\n                onclick: function(ev) {\n                    if (Galaxy.router) {\n                        ev.preventDefault();\n                        Galaxy.router.push(\"datasets/error\", {\n                            dataset_id: self.model.attributes.id\n                        });\n                    }\n                }\n            });\n        },\n\n        /** Render icon-button to re-run the job that created this dataset. */\n        _renderRerunButton: function() {\n            var creating_job = this.model.get(\"creating_job\");\n            if (this.model.get(\"rerunnable\")) {\n                return faIconButton({\n                    title: _l(\"Run this job again\"),\n                    href: this.model.urls.rerun,\n                    classes: \"rerun-btn\",\n                    target: this.linkTarget,\n                    faIcon: \"fa-refresh\",\n                    onclick: function(ev) {\n                        if (Galaxy.router) {\n                            ev.preventDefault();\n                            Galaxy.router.push(\"/\", {\n                                job_id: creating_job\n                            });\n                        }\n                    }\n                });\n            }\n        },\n\n        /** Render an icon-button or popupmenu of links based on the applicable visualizations */\n        _renderVisualizationsButton: function() {\n            //TODO: someday - lazyload visualizations\n            var visualizations = this.model.get(\"visualizations\");\n            if (\n                this.model.isDeletedOrPurged() ||\n                !this.hasUser ||\n                !this.model.hasData() ||\n                _.isEmpty(visualizations)\n            ) {\n                return null;\n            }\n            if (!_.isObject(visualizations[0])) {\n                this.warn(\"Visualizations have been switched off\");\n                return null;\n            }\n\n            var $visualizations = $(\n                this.templates.visualizations(visualizations, this)\n            );\n            //HACK: need to re-write those directed at galaxy_main with linkTarget\n            $visualizations\n                .find('[target=\"galaxy_main\"]')\n                .attr(\"target\", this.linkTarget);\n            // use addBack here to include the root $visualizations elem (for the case of 1 visualization)\n            this._addScratchBookFn(\n                $visualizations\n                    .find(\".visualization-link\")\n                    .addBack(\".visualization-link\")\n            );\n            return $visualizations;\n        },\n\n        /** add scratchbook functionality to visualization links */\n        _addScratchBookFn: function($links) {\n            var li = this;\n            $links.click(function(ev) {\n                if (Galaxy.frame && Galaxy.frame.active) {\n                    Galaxy.frame.add({\n                        title: \"Visualization\",\n                        url: $(this).attr(\"href\")\n                    });\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                }\n            });\n        },\n\n        //TODO: if possible move these to readonly view - but display the owner's tags/annotation (no edit)\n        /** Render the tags list/control */\n        _renderTags: function($where) {\n            if (!this.hasUser) {\n                return;\n            }\n            var view = this;\n            this.tagsEditor = new TAGS.TagsEditor({\n                model: this.model,\n                el: $where.find(\".tags-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                // persist state on the hda view (and not the editor) since these are currently re-created each time\n                onshow: function() {\n                    view.tagsEditorShown = true;\n                },\n                onhide: function() {\n                    view.tagsEditorShown = false;\n                },\n                $activator: faIconButton({\n                    title: _l(\"Edit dataset tags\"),\n                    classes: \"tag-btn\",\n                    faIcon: \"fa-tags\"\n                }).appendTo($where.find(\".actions .right\"))\n            });\n            if (this.tagsEditorShown) {\n                this.tagsEditor.toggle(true);\n            }\n        },\n\n        /** Render the annotation display/control */\n        _renderAnnotation: function($where) {\n            if (!this.hasUser) {\n                return;\n            }\n            var view = this;\n            this.annotationEditor = new ANNOTATIONS.AnnotationEditor({\n                model: this.model,\n                el: $where.find(\".annotation-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                // persist state on the hda view (and not the editor) since these are currently re-created each time\n                onshow: function() {\n                    view.annotationEditorShown = true;\n                },\n                onhide: function() {\n                    view.annotationEditorShown = false;\n                },\n                $activator: faIconButton({\n                    title: _l(\"Edit dataset annotation\"),\n                    classes: \"annotate-btn\",\n                    faIcon: \"fa-comment\"\n                }).appendTo($where.find(\".actions .right\"))\n            });\n            if (this.annotationEditorShown) {\n                this.annotationEditor.toggle(true);\n            }\n        },\n\n        /** If the format/dbkey/genome_build isn't set, make the display a link to the edit page */\n        _makeDbkeyEditLink: function($details) {\n            // make the dbkey a link to editing\n            if (\n                this.model.get(\"metadata_dbkey\") === \"?\" &&\n                !this.model.isDeletedOrPurged()\n            ) {\n                var editableDbkey = $('<a class=\"value\">?</a>')\n                    .attr(\"href\", this.model.urls.edit)\n                    .attr(\"target\", \"_top\");\n                $details.find(\".dbkey .value\").replaceWith(editableDbkey);\n            }\n        },\n\n        // ......................................................................... events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .undelete-link\": \"_clickUndeleteLink\",\n            \"click .purge-link\": \"_clickPurgeLink\",\n\n            \"click .edit-btn\": function(ev) {\n                this.trigger(\"edit\", this, ev);\n            },\n            \"click .delete-btn\": function(ev) {\n                this.trigger(\"delete\", this, ev);\n            },\n            \"click .rerun-btn\": function(ev) {\n                this.trigger(\"rerun\", this, ev);\n            },\n            \"click .report-err-btn\": function(ev) {\n                this.trigger(\"report-err\", this, ev);\n            },\n            \"click .visualization-btn\": function(ev) {\n                this.trigger(\"visualize\", this, ev);\n            },\n            \"click .dbkey a\": function(ev) {\n                this.trigger(\"edit\", this, ev);\n            }\n        }),\n\n        /** listener for item undelete (in the messages section) */\n        _clickUndeleteLink: function(ev) {\n            this.model.undelete();\n            return false;\n        },\n\n        /** listener for item purge (in the messages section) */\n        _clickPurgeLink: function(ev) {\n            if (\n                confirm(\n                    _l(\n                        \"This will permanently remove the data in your dataset. Are you sure?\"\n                    )\n                )\n            ) {\n                this.model.purge();\n            }\n            return false;\n        },\n\n        // ......................................................................... misc\n        /** string rep */\n        toString: function() {\n            var modelString = this.model ? this.model + \"\" : \"(no model)\";\n            return \"HDAEditView(\" + modelString + \")\";\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemEdit.prototype.templates = (function() {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: BASE_MVC.wrapTemplate(\n            [\n                // in this override, provide a link to the edit page\n                '<% if( dataset.state === \"failed_metadata\" ){ %>',\n                '<div class=\"failed_metadata-warning warningmessagesmall\">',\n                _l(\"An error occurred setting the metadata for this dataset\"),\n                '<br /><a href=\"<%- dataset.urls.edit %>\" target=\"_top\">',\n                _l(\"Set it manually or retry auto-detection\"),\n                \"</a>\",\n                \"</div>\",\n                \"<% } %>\"\n            ],\n            \"dataset\"\n        ),\n\n        deleted: BASE_MVC.wrapTemplate(\n            [\n                // in this override, provide links to undelete or purge the dataset\n                \"<% if( dataset.deleted && !dataset.purged ){ %>\",\n                // deleted not purged\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                _l(\"This dataset has been deleted\"),\n                '<br /><a class=\"undelete-link\" href=\"javascript:void(0);\">',\n                _l(\"Undelete it\"),\n                \"</a>\",\n                \"<% if( view.purgeAllowed ){ %>\",\n                '<br /><a class=\"purge-link\" href=\"javascript:void(0);\">',\n                _l(\"Permanently remove it from disk\"),\n                \"</a>\",\n                \"<% } %>\",\n                \"</div>\",\n                \"<% } %>\"\n            ],\n            \"dataset\"\n        )\n    });\n\n    var visualizationsTemplate = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( visualizations.length === 1 ){ %>\",\n            '<a class=\"visualization-link icon-btn\" href=\"<%- visualizations[0].href %>\"',\n            ' target=\"<%- visualizations[0].target %>\" title=\"',\n            _l(\"Visualize in\"),\n            ' <%- visualizations[0].html %>\">',\n            '<span class=\"fa fa-bar-chart-o\"></span>',\n            \"</a>\",\n\n            \"<% } else { %>\",\n            '<div class=\"visualizations-dropdown dropdown icon-btn\">',\n            '<a data-toggle=\"dropdown\" title=\"',\n            _l(\"Visualize\"),\n            '\">',\n            '<span class=\"fa fa-bar-chart-o\"></span>',\n            \"</a>\",\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n            \"<% _.each( visualizations, function( visualization ){ %>\",\n            '<li><a class=\"visualization-link\" href=\"<%- visualization.href %>\"',\n            ' target=\"<%- visualization.target %>\">',\n            \"<%- visualization.html %>\",\n            \"</a></li>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"</div>\",\n            \"<% } %>\"\n        ],\n        \"visualizations\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        visualizations: visualizationsTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    DatasetListItemEdit: DatasetListItemEdit\n};\n"]}