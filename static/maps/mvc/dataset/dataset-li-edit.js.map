{"version":3,"sources":["mvc/dataset/dataset-li-edit.js"],"names":["define","STATES","DATASET_LI","TAGS","ANNOTATIONS","faIconButton","BASE_MVC","_l","_super","DatasetListItemView","prototype","initialize","purgeAllowed","call","this","attributes","hasUser","tagsEditorShown","_renderPrimaryActions","annotationEditorShown","actions","model","get","NOT_VIEWABLE","concat","_renderEditButton","_renderDeleteButton","deleted","href","DISCARDED","target","linkTarget","faIcon","purged","editBtnData","disabled","urls","edit","title","_","contains","UPLOAD","NEW","deletedAlready","classes","self","isDeletedOrPurged","onclick","$el","find","trigger","$details","_renderDetails","_setUpBehaviors","state","OK","FAILED_METADATA","_renderTags","_renderAnnotation","_makeDbkeyEditLink","helpString","datasetID","dataset_id","creating_job","data","parseToolID","help","$","name","url","Galaxy","root","parseToolBuild","append","parseHTML","user","ajax","tool_id","done","divString","length","toggle","jobID","fail","_renderSecondaryActions","ERROR","_renderErrButton","unshift","_renderRerunButton","_renderToolHelpButton","report_error","_renderVisualizationsButton","ev","preventDefault","rerun","visualizations","push","job_id","$visualizations","templates","hasData","isEmpty","_addScratchBookFn","isObject","warn","frame","attr","addBack","$links","click","active","add","view","tagsEditor","onshow","$where","onhide","TagsEditor","el","$activator","render","appendTo","annotationEditor","onshowFirstTime","editableDbkey","replaceWith","events","extend","clone","click .undelete-link","click .purge-link","click .edit-btn","click .rerun-btn","click .report-err-btn","click .visualization-btn","click .dbkey a","_clickUndeleteLink","undelete","_clickPurgeLink","confirm","purge","toString","DatasetListItemEdit","warnings","failed_metadata","wrapTemplate","modelString","visualizationsTemplate"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li-edit.js","sourcesContent":["define([\n    \"mvc/dataset/states\",\n    \"mvc/dataset/dataset-li\",\n    \"mvc/tag\",\n    \"mvc/annotation\",\n    \"ui/fa-icon-button\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( STATES, DATASET_LI, TAGS, ANNOTATIONS, faIconButton, BASE_MVC, _l ){\n\n'use strict';\n//==============================================================================\nvar _super = DATASET_LI.DatasetListItemView;\n/** @class Editing view for DatasetAssociation.\n */\nvar DatasetListItemEdit = _super.extend(\n/** @lends DatasetListItemEdit.prototype */{\n\n    /** set up: options */\n    initialize  : function( attributes ){\n        _super.prototype.initialize.call( this, attributes );\n        this.hasUser = attributes.hasUser;\n\n        /** allow user purge of dataset files? */\n        this.purgeAllowed = attributes.purgeAllowed || false;\n\n        //TODO: move to HiddenUntilActivatedViewMixin\n        /** should the tags editor be shown or hidden initially? */\n        this.tagsEditorShown        = attributes.tagsEditorShown || false;\n        /** should the tags editor be shown or hidden initially? */\n        this.annotationEditorShown  = attributes.annotationEditorShown || false;\n    },\n\n    // ......................................................................... titlebar actions\n    /** In this override, add the other two primary actions: edit and delete */\n    _renderPrimaryActions : function(){\n        var actions = _super.prototype._renderPrimaryActions.call( this );\n        if( this.model.get( 'state' ) === STATES.NOT_VIEWABLE ){\n            return actions;\n        }\n        // render the display, edit attr and delete icon-buttons\n        return _super.prototype._renderPrimaryActions.call( this ).concat([\n            this._renderEditButton(),\n            this._renderDeleteButton()\n        ]);\n    },\n\n    //TODO: move titleButtons into state renderers, remove state checks in the buttons\n\n    /** Render icon-button to edit the attributes (format, permissions, etc.) this dataset. */\n    _renderEditButton : function(){\n        // don't show edit while uploading, in-accessible\n        // DO show if in error (ala previous history panel)\n        if( ( this.model.get( 'state' ) === STATES.DISCARDED )\n        ||  ( !this.model.get( 'accessible' ) ) ){\n            return null;\n        }\n\n        var purged = this.model.get( 'purged' ),\n            deleted = this.model.get( 'deleted' ),\n            editBtnData = {\n                title       : _l( 'Edit attributes' ),\n                href        : this.model.urls.edit,\n                target      : this.linkTarget,\n                faIcon      : 'fa-pencil',\n                classes     : 'edit-btn'\n            };\n\n        // disable if purged or deleted and explain why in the tooltip\n        if( deleted || purged ){\n            editBtnData.disabled = true;\n            if( purged ){\n                editBtnData.title = _l( 'Cannot edit attributes of datasets removed from disk' );\n            } else if( deleted ){\n                editBtnData.title = _l( 'Undelete dataset to edit attributes' );\n            }\n\n        // disable if still uploading or new\n        } else if( _.contains( [ STATES.UPLOAD, STATES.NEW ], this.model.get( 'state' ) ) ){\n            editBtnData.disabled = true;\n            editBtnData.title = _l( 'This dataset is not yet editable' );\n        }\n        return faIconButton( editBtnData );\n    },\n\n    /** Render icon-button to delete this hda. */\n    _renderDeleteButton : function(){\n        // don't show delete if...\n        if( ( !this.model.get( 'accessible' ) ) ){\n            return null;\n        }\n\n        var self = this,\n            deletedAlready = this.model.isDeletedOrPurged();\n        return faIconButton({\n                title       : !deletedAlready? _l( 'Delete' ) : _l( 'Dataset is already deleted' ),\n                disabled    : deletedAlready,\n                faIcon      : 'fa-times',\n                classes     : 'delete-btn',\n                onclick     : function() {\n                    // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                    self.$el.find( '.icon-btn.delete-btn' ).trigger( 'mouseout' );\n                    self.model[ 'delete' ]();\n                }\n        });\n    },\n\n    // ......................................................................... details\n    /** In this override, add tags and annotations controls, make the ? dbkey a link to editing page */\n    _renderDetails : function(){\n        //TODO: generalize to be allow different details for each state\n        var $details = _super.prototype._renderDetails.call( this ),\n            state = this.model.get( 'state' );\n\n        if( !this.model.isDeletedOrPurged() && _.contains([ STATES.OK, STATES.FAILED_METADATA ], state ) ){\n            this._renderTags( $details );\n            this._renderAnnotation( $details );\n            this._makeDbkeyEditLink( $details );\n        }\n\n        this._setUpBehaviors( $details );\n        return $details;\n    },\n\n    /**************************************************************************\n     * Render help button to show tool help text without rerunning the tool.\n     * Issue #2100\n     */\n    _renderToolHelpButton : function() {\n        var datasetID = this.model.attributes.dataset_id;\n        var jobID = this.model.attributes.creating_job;\n        var self = this;\n\n        var parseToolBuild = function(data) {\n            var helpString = '<div id=\"thdiv-' + datasetID + '\" class=\"toolhelp\">'\n            if (data.name && data.help){\n                helpString += '<strong>Tool help for ' + data.name + '</strong><hr/>';\n                helpString += data.help;\n            } else {\n                helpString += '<strong>Tool help is unavailable for this dataset.</strong><hr/>';\n            }\n            helpString += '</div>';\n            self.$el.find( '.details' ).append($.parseHTML(helpString));\n        };\n        var parseToolID = function(data) {\n            $.ajax({\n                url: Galaxy.root + 'api/tools/' + data.tool_id + '/build'\n            }).done(function(data){\n                parseToolBuild(data);\n            }).fail(function(){\n                parseToolBuild({})\n            });\n        };\n        if (Galaxy.user.id === null){\n            return null\n        }\n        return faIconButton({\n            title: _l('Tool Help'),\n            classes: 'icon-btn',\n            href: '#',\n            faIcon: 'fa-question',\n            onclick: function() {\n                var divString = 'thdiv-' + datasetID;\n                if (self.$el.find(\".toolhelp\").length > 0){\n                    self.$el.find(\".toolhelp\").toggle();\n                } else {\n                    $.ajax({\n                        url: Galaxy.root + 'api/jobs/' + jobID\n                    }).done(function(data){\n                        parseToolID(data);\n                    }).fail(function(){\n                       console.log('Failed at recovering job information from the  Galaxy API for job id \"' + jobID + '\".');\n                    });\n                }\n            }\n        });\n    },\n    //*************************************************************************\n\n    /** Add less commonly used actions in the details section based on state */\n    _renderSecondaryActions : function(){\n        var actions = _super.prototype._renderSecondaryActions.call( this );\n        switch( this.model.get( 'state' ) ){\n            case STATES.UPLOAD:\n            case STATES.NOT_VIEWABLE:\n                return actions;\n            case STATES.ERROR:\n                // error button comes first\n                actions.unshift( this._renderErrButton() );\n                return actions.concat([ this._renderRerunButton(), this._renderToolHelpButton() ]);\n            case STATES.OK:\n            case STATES.FAILED_METADATA:\n                return actions.concat([ this._renderRerunButton(), this._renderVisualizationsButton(), this._renderToolHelpButton() ]);\n        }\n        return actions.concat([ this._renderRerunButton(), this._renderToolHelpButton() ]);\n    },\n\n    /** Render icon-button to report an error on this dataset to the galaxy admin. */\n    _renderErrButton : function(){\n        return faIconButton({\n            title       : _l( 'View or report this error' ),\n            href        : this.model.urls.report_error,\n            classes     : 'report-error-btn',\n            target      : this.linkTarget,\n            faIcon      : 'fa-bug'\n        });\n    },\n\n    /** Render icon-button to re-run the job that created this dataset. */\n    _renderRerunButton : function(){\n        var creating_job = this.model.get( 'creating_job' );\n        if( this.model.get( 'rerunnable' ) ){\n            return faIconButton({\n                title       : _l( 'Run this job again' ),\n                href        : this.model.urls.rerun,\n                classes     : 'rerun-btn',\n                target      : this.linkTarget,\n                faIcon      : 'fa-refresh',\n                onclick     : function( ev ) {\n                    ev.preventDefault();\n                    Galaxy.router.push( '/', { job_id : creating_job } );\n                }\n            });\n        }\n    },\n\n    /** Render an icon-button or popupmenu of links based on the applicable visualizations */\n    _renderVisualizationsButton : function(){\n        //TODO: someday - lazyload visualizations\n        var visualizations = this.model.get( 'visualizations' );\n        if( ( this.model.isDeletedOrPurged() )\n        ||  ( !this.hasUser )\n        ||  ( !this.model.hasData() )\n        ||  ( _.isEmpty( visualizations ) ) ){\n            return null;\n        }\n        if( !_.isObject( visualizations[0] ) ){\n            this.warn( 'Visualizations have been switched off' );\n            return null;\n        }\n\n        var $visualizations = $( this.templates.visualizations( visualizations, this ) );\n        //HACK: need to re-write those directed at galaxy_main with linkTarget\n        $visualizations.find( '[target=\"galaxy_main\"]').attr( 'target', this.linkTarget );\n        // use addBack here to include the root $visualizations elem (for the case of 1 visualization)\n        this._addScratchBookFn( $visualizations.find( '.visualization-link' ).addBack( '.visualization-link' ) );\n        return $visualizations;\n    },\n\n    /** add scratchbook functionality to visualization links */\n    _addScratchBookFn : function( $links ){\n        var li = this;\n        $links.click( function( ev ){\n            if( Galaxy.frame && Galaxy.frame.active ){\n                Galaxy.frame.add({\n                    title       : 'Visualization',\n                    url         : $( this ).attr( 'href' )\n                });\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n        });\n    },\n\n    //TODO: if possible move these to readonly view - but display the owner's tags/annotation (no edit)\n    /** Render the tags list/control */\n    _renderTags : function( $where ){\n        if( !this.hasUser ){ return; }\n        var view = this;\n        this.tagsEditor = new TAGS.TagsEditor({\n            model           : this.model,\n            el              : $where.find( '.tags-display' ),\n            onshowFirstTime : function(){ this.render(); },\n            // persist state on the hda view (and not the editor) since these are currently re-created each time\n            onshow          : function(){ view.tagsEditorShown = true; },\n            onhide          : function(){ view.tagsEditorShown = false; },\n            $activator      : faIconButton({\n                title   : _l( 'Edit dataset tags' ),\n                classes : 'tag-btn',\n                faIcon  : 'fa-tags'\n            }).appendTo( $where.find( '.actions .right' ) )\n        });\n        if( this.tagsEditorShown ){ this.tagsEditor.toggle( true ); }\n    },\n\n    /** Render the annotation display/control */\n    _renderAnnotation : function( $where ){\n        if( !this.hasUser ){ return; }\n        var view = this;\n        this.annotationEditor = new ANNOTATIONS.AnnotationEditor({\n            model           : this.model,\n            el              : $where.find( '.annotation-display' ),\n            onshowFirstTime : function(){ this.render(); },\n            // persist state on the hda view (and not the editor) since these are currently re-created each time\n            onshow          : function(){ view.annotationEditorShown = true; },\n            onhide          : function(){ view.annotationEditorShown = false; },\n            $activator      : faIconButton({\n                title   : _l( 'Edit dataset annotation' ),\n                classes : 'annotate-btn',\n                faIcon  : 'fa-comment'\n            }).appendTo( $where.find( '.actions .right' ) )\n        });\n        if( this.annotationEditorShown ){ this.annotationEditor.toggle( true ); }\n    },\n\n    /** If the format/dbkey/genome_build isn't set, make the display a link to the edit page */\n    _makeDbkeyEditLink : function( $details ){\n        // make the dbkey a link to editing\n        if( this.model.get( 'metadata_dbkey' ) === '?'\n        &&  !this.model.isDeletedOrPurged() ){\n            var editableDbkey = $( '<a class=\"value\">?</a>' )\n                .attr( 'href', this.model.urls.edit )\n                .attr( 'target', this.linkTarget );\n            $details.find( '.dbkey .value' ).replaceWith( editableDbkey );\n        }\n    },\n\n    // ......................................................................... events\n    /** event map */\n    events : _.extend( _.clone( _super.prototype.events ), {\n        'click .undelete-link'  : '_clickUndeleteLink',\n        'click .purge-link'     : '_clickPurgeLink',\n\n        'click .edit-btn'       : function( ev ){ this.trigger( 'edit', this, ev ); },\n        'click .delete-btn'     : function( ev ){ this.trigger( 'delete', this, ev ); },\n        'click .rerun-btn'      : function( ev ){ this.trigger( 'rerun', this, ev ); },\n        'click .report-err-btn' : function( ev ){ this.trigger( 'report-err', this, ev ); },\n        'click .visualization-btn' : function( ev ){ this.trigger( 'visualize', this, ev ); },\n        'click .dbkey a'        : function( ev ){ this.trigger( 'edit', this, ev ); }\n    }),\n\n    /** listener for item undelete (in the messages section) */\n    _clickUndeleteLink : function( ev ){\n        this.model.undelete();\n        return false;\n    },\n\n    /** listener for item purge (in the messages section) */\n    _clickPurgeLink : function( ev ){\n        if( confirm( _l( 'This will permanently remove the data in your dataset. Are you sure?' ) ) ){\n            this.model.purge();\n        }\n        return false;\n    },\n\n    // ......................................................................... misc\n    /** string rep */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'HDAEditView(' + modelString + ')';\n    }\n});\n\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemEdit.prototype.templates = (function(){\n\n    var warnings = _.extend( {}, _super.prototype.templates.warnings, {\n        failed_metadata : BASE_MVC.wrapTemplate([\n            // in this override, provide a link to the edit page\n            '<% if( dataset.state === \"failed_metadata\" ){ %>',\n                '<div class=\"failed_metadata-warning warningmessagesmall\">',\n                    _l( 'An error occurred setting the metadata for this dataset' ),\n                    '<br /><a href=\"<%- dataset.urls.edit %>\" target=\"<%- view.linkTarget %>\">',\n                        _l( 'Set it manually or retry auto-detection' ),\n                    '</a>',\n                '</div>',\n            '<% } %>'\n        ], 'dataset' ),\n\n        deleted : BASE_MVC.wrapTemplate([\n            // in this override, provide links to undelete or purge the dataset\n            '<% if( dataset.deleted && !dataset.purged ){ %>',\n                // deleted not purged\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l( 'This dataset has been deleted' ),\n                    '<br /><a class=\"undelete-link\" href=\"javascript:void(0);\">', _l( 'Undelete it' ), '</a>',\n                    '<% if( view.purgeAllowed ){ %>',\n                        '<br /><a class=\"purge-link\" href=\"javascript:void(0);\">',\n                            _l( 'Permanently remove it from disk' ),\n                        '</a>',\n                    '<% } %>',\n                '</div>',\n            '<% } %>'\n        ], 'dataset' )\n    });\n\n    var visualizationsTemplate = BASE_MVC.wrapTemplate([\n        '<% if( visualizations.length === 1 ){ %>',\n            '<a class=\"visualization-link icon-btn\" href=\"<%- visualizations[0].href %>\"',\n                    ' target=\"<%- visualizations[0].target %>\" title=\"', _l( 'Visualize in' ),\n                    ' <%- visualizations[0].html %>\">',\n                '<span class=\"fa fa-bar-chart-o\"></span>',\n            '</a>',\n\n        '<% } else { %>',\n            '<div class=\"visualizations-dropdown dropdown icon-btn\">',\n                '<a data-toggle=\"dropdown\" title=\"', _l( 'Visualize' ), '\">',\n                    '<span class=\"fa fa-bar-chart-o\"></span>',\n                '</a>',\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    '<% _.each( visualizations, function( visualization ){ %>',\n                        '<li><a class=\"visualization-link\" href=\"<%- visualization.href %>\"',\n                                ' target=\"<%- visualization.target %>\">',\n                            '<%- visualization.html %>',\n                        '</a></li>',\n                    '<% }); %>',\n                '</ul>',\n            '</div>',\n        '<% } %>'\n    ], 'visualizations' );\n\n    return _.extend( {}, _super.prototype.templates, {\n        warnings : warnings,\n        visualizations : visualizationsTemplate\n    });\n}());\n\n\n//==============================================================================\n    return {\n        DatasetListItemEdit : DatasetListItemEdit\n    };\n});\n"]}