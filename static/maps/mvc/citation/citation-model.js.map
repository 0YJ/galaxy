{"version":3,"sources":["mvc/citation/citation-model.js"],"names":["parseBibtex","_","extend","ENTRY_TYPES_","online","data","Citation","Backbone","Model","_baseMvc2","default","LoggableMixin","_logNamespace","defaults","content","initialize","parsed","this","attributes","err","errors","length","reduce","all","current","log","_fields","logNamespace","first","entries","entry","rawFields","Fields","key","value","lowerKey","toLowerCase","EntryType","undefined","BaseCitationCollection","Collection","urlRoot","Galaxy","root","partial","model","HistoryCitationCollection","url","history_id","ToolCitationCollection","entryType","tool_id"],"mappings":"0OAAYA,yKAMZC,EAAEC,OAAOF,EAAYG,cACjBC,OAPQJ,IAQRK,KAAM,MAGV,IAMIC,EAAWC,SAASC,MAAMN,OAAOO,EAAAC,QAAQC,eAAeT,QACxDU,cAPe,WASfC,UACIC,QAAS,IAGbC,WAAY,WACR,IAAIC,EACJ,IAEIA,EAAShB,EAAYiB,KAAKC,WAAWJ,SACvC,MAAOK,GACL,OAGJ,GAAIH,EAAOI,OAAOC,OAAQ,CAEtB,IAAID,EAASJ,EAAOI,OAAOE,OA/BvC,SAAAC,EAAAC,GAAA,OAAAD,EAAA,KAAAC,IAGIpB,KAAQqB,IAAK,yBAAAL,GAKjB,GA8BQH,KAAKS,WA/BTC,KAAAA,MAAAA,EAAeC,MAAAZ,EAAnBa,SACAZ,KAAAa,MAAA,CACA,IAAAC,EAAAd,KAAAa,MAAAE,OAiCY,IAAK,IAAIC,KAAOF,EAAW,CACvB,IAAIG,EAAQH,EAAUE,GAClBE,EAAWF,EAAIG,cA/B/B9B,KAAWC,QAASC,GAAa0B,KAI7BpB,UAAAA,WADM,OAHqDG,KAAAa,MAAAb,KAAAa,MAAAO,eAAAC,GAO/DvB,OAAAA,WACI,OAAAE,KAAID,WAOJuB,EAAAhC,SAAAiC,WACAtC,OAAAO,EAAAC,QAAIM,eACAd,QACAU,cAxBO,WA2BP6B,QAAAC,OAAAC,KAAA,MACAC,SAAA,EACHC,MAAAvC,IAGDwC,EAAaP,EAAbrC,QAEI6C,IAAA,WACA,OAAA9B,KAAAwB,QAAA,cAA2BxB,KAAA+B,WAAA,gBAI1BC,EAAAV,EAAArC,QAER6C,IAnC8D,WAoC/DG,OAAAA,KAAWT,QAAA,UAAWxB,KAAAkC,QAAA,cAErBP,SAtC8D,eA4CnEtC,SAAAA,EACAwC,0BAAAA,EAiCIG,uBAAwBA","file":"../../../scripts/mvc/citation/citation-model.js","sourcesContent":["import * as parseBibtex from \"libs/bibtex\";\nimport baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n/* global Backbone */\n\n_.extend(parseBibtex.ENTRY_TYPES_, {\n    online: 998, // Galaxy MOD: Handle @online entries for preprints.\n    data: 999 // Galaxy MOD: Handle @data citations coming from figshare.\n});\n\nvar logNamespace = \"citation\";\n//==============================================================================\n/** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\nvar Citation = Backbone.Model.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    defaults: {\n        content: \"\"\n    },\n\n    initialize: function() {\n        var parsed;\n        try {\n            // TODO: to model.parse/.validate\n            parsed = parseBibtex(this.attributes.content);\n        } catch (err) {\n            return;\n        }\n        // bibtex returns successfully parsed in .entries and any parsing errors in .errors\n        if (parsed.errors.length) {\n            // the gen. form of these errors seems to be [ line, col, char, error message ]\n            var errors = parsed.errors.reduce(\n                (all, current) => all + \"; \" + current\n            );\n            // throw new Error( 'Error parsing bibtex: ' + errors );\n            this.log(\"Error parsing bibtex: \" + errors);\n        }\n\n        this._fields = {};\n        this.entry = _.first(parsed.entries);\n        if (this.entry) {\n            var rawFields = this.entry.Fields;\n            for (var key in rawFields) {\n                var value = rawFields[key];\n                var lowerKey = key.toLowerCase();\n                this._fields[lowerKey] = value;\n            }\n        }\n    },\n    entryType: function() {\n        return this.entry ? this.entry.EntryType : undefined;\n    },\n    fields: function() {\n        return this._fields;\n    }\n});\n\n//==============================================================================\n/** @class Backbone collection of citations.\n */\nvar BaseCitationCollection = Backbone.Collection\n    .extend(baseMVC.LoggableMixin)\n    .extend({\n        _logNamespace: logNamespace,\n\n        /** root api url */\n        urlRoot: Galaxy.root + \"api\",\n        partial: true, // Assume some tools in history/workflow may not be properly annotated yet.\n        model: Citation\n    });\n\nvar HistoryCitationCollection = BaseCitationCollection.extend({\n    /** complete api url */\n    url: function() {\n        return this.urlRoot + \"/histories/\" + this.history_id + \"/citations\";\n    }\n});\n\nvar ToolCitationCollection = BaseCitationCollection.extend({\n    /** complete api url */\n    url: function() {\n        return this.urlRoot + \"/tools/\" + this.tool_id + \"/citations\";\n    },\n    partial: false // If a tool has citations, assume they are complete.\n});\n\n//==============================================================================\n\nexport default {\n    Citation: Citation,\n    HistoryCitationCollection: HistoryCitationCollection,\n    ToolCitationCollection: ToolCitationCollection\n};\n"]}