{"version":3,"sources":["mvc/citation/citation-model.js"],"names":["define","parseBibtex","baseMVC","_l","window","BibtexParser","Citation","Backbone","Model","extend","LoggableMixin","_logNamespace","defaults","content","initialize","parsed","this","attributes","err","errors","length","reduce","all","current","log","_fields","entry","_","first","entries","rawFields","Fields","key","value","lowerKey","toLowerCase","entryType","EntryType","undefined","fields","BaseCitationCollection","Collection","urlRoot","Galaxy","root","partial","model","HistoryCitationCollection","url","history_id","ToolCitationCollection","tool_id"],"mappings":"AAAAA,QACI,cACA,eACA,sBACD,SAAUC,EAAaC,EAASC,GAInCF,EAAcA,GAAeG,OAAOC,YAEpC,IAMIC,GAAWC,SAASC,MAAMC,OAAQP,EAAQQ,eAAgBD,QAC1DE,cAPe,WASfC,UACIC,QAAS,IAGbC,WAAY,WACR,GAAIC,EACJ,KAEIA,EAASd,EAAae,KAAKC,WAAWJ,SACxC,MAAOK,GACL,OAGJ,GAAIH,EAAOI,OAAOC,OAAQ,CAEtB,GAAID,GAASJ,EAAOI,OAAOE,OAAQ,SAAUC,EAAKC,GAAW,MAAOD,GAAM,KAAOC,GAEjFP,MAAKQ,IAAK,yBAA2BL,GAKzC,GAFAH,KAAKS,WACLT,KAAKU,MAAQC,EAAEC,MAAOb,EAAOc,SACzBb,KAAKU,MAAO,CACZ,GAAII,GAAYd,KAAKU,MAAMK,MAC3B,KAAK,GAAIC,KAAOF,GAAW,CACvB,GAAIG,GAAQH,EAAWE,GACnBE,EAAWF,EAAIG,aACnBnB,MAAKS,QAASS,GAAaD,KAIvCG,UAAW,WACP,MAAOpB,MAAKU,MAAOV,KAAKU,MAAMW,cAAYC,IAE9CC,OAAQ,WACJ,MAAOvB,MAAKS,WAQhBe,EAAyBjC,SAASkC,WAAWhC,OAAQP,EAAQQ,eAAgBD,QAC7EE,cArDe,WAwDf+B,QAAUC,OAAOC,KAAO,MACxBC,SAAU,EACVC,MAAQxC,GAqBZ,QACIA,SAAWA,EACXyC,0BApB4BP,EAAuB/B,QAEnDuC,IAAM,WACF,MAAOhC,MAAK0B,QAAU,cAAgB1B,KAAKiC,WAAa,gBAkB5DC,uBAdyBV,EAAuB/B,QAEhDuC,IAAM,WACF,MAAOhC,MAAK0B,QAAU,UAAY1B,KAAKmC,QAAU,cAErDN,SAAU","file":"../../../scripts/mvc/citation/citation-model.js","sourcesContent":["define([\n    \"libs/bibtex\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( parseBibtex, baseMVC, _l ){\n/* global Backbone */\n// we use amd here to require, but bibtex uses a global or commonjs pattern.\n// webpack will load via commonjs and plain requirejs will load as global. Check both\nparseBibtex = parseBibtex || window.BibtexParser;\n\nvar logNamespace = 'citation';\n//==============================================================================\n/** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\nvar Citation = Backbone.Model.extend( baseMVC.LoggableMixin ).extend({\n    _logNamespace : logNamespace,\n\n    defaults : {\n        content: ''\n    },\n\n    initialize: function() {\n        var parsed;\n        try {\n            // TODO: to model.parse/.validate\n            parsed = parseBibtex( this.attributes.content );\n        } catch( err ){\n            return;\n        }\n        // bibtex returns successfully parsed in .entries and any parsing errors in .errors\n        if( parsed.errors.length ){\n            // the gen. form of these errors seems to be [ line, col, char, error message ]\n            var errors = parsed.errors.reduce( function( all, current ){ return all + '; ' + current; });\n            // throw new Error( 'Error parsing bibtex: ' + errors );\n            this.log( 'Error parsing bibtex: ' + errors );\n        }\n\n        this._fields = {};\n        this.entry = _.first( parsed.entries );\n        if( this.entry ){\n            var rawFields = this.entry.Fields;\n            for( var key in rawFields ){\n                var value = rawFields[ key ];\n                var lowerKey = key.toLowerCase();\n                this._fields[ lowerKey ] = value;\n            }\n        }\n    },\n    entryType: function() {\n        return this.entry? this.entry.EntryType : undefined;\n    },\n    fields: function() {\n        return this._fields;\n    }\n});\n\n\n//==============================================================================\n/** @class Backbone collection of citations.\n */\nvar BaseCitationCollection = Backbone.Collection.extend( baseMVC.LoggableMixin ).extend( {\n    _logNamespace : logNamespace,\n\n    /** root api url */\n    urlRoot : Galaxy.root + 'api',\n    partial : true, // Assume some tools in history/workflow may not be properly annotated yet.\n    model : Citation,\n} );\n\nvar HistoryCitationCollection = BaseCitationCollection.extend( {\n    /** complete api url */\n    url : function() {\n        return this.urlRoot + '/histories/' + this.history_id + '/citations';\n    }\n} );\n\nvar ToolCitationCollection = BaseCitationCollection.extend( {\n    /** complete api url */\n    url : function() {\n        return this.urlRoot + '/tools/' + this.tool_id + '/citations';\n    },\n    partial : false, // If a tool has citations, assume they are complete.\n} );\n\n\n//==============================================================================\n\nreturn {\n    Citation : Citation,\n    HistoryCitationCollection  : HistoryCitationCollection,\n    ToolCitationCollection: ToolCitationCollection\n};\n\n\n});"]}