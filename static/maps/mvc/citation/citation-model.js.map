{"version":3,"sources":["mvc/citation/citation-model.js"],"names":["define","parseBibtex","baseMVC","_l","_","ENTRY_TYPES_","extend","online","data","defaults","Model","LoggableMixin","content","initialize","parsed","this","attributes","err","errors","length","reduce","all","current","log","_fields","entry","entries","rawFields","key","value","lowerKey","toLowerCase","entryType","EntryType","undefined","fields","BaseCitationCollection","Backbone","Collection","_logNamespace","model","Citation","partial","ToolCitationCollection","HistoryCitationCollection","url","urlRoot","history_id","tool_id"],"mappings":"aAAAA,QACI,cADJA,eAKA,sBACA,SAAAC,EAAAC,EAAAC,GAIAC,EAASH,GAAYI,OAAAA,aAEjBD,EAAAE,OAAAL,EAAyBI,cAFME,OAAnC,IAEIC,KAAqB,MAIzB,IASIC,EAAAA,SAAWC,MAAAJ,OAAAJ,EAAAS,eAAAL,QACPM,cAVW,WASfH,UAIAI,QAAAA,IAGQA,WAAA,WACAC,IAAAA,EACH,IAEAA,EAAAb,EAAAc,KAAAC,WAAAJ,SACD,MAAAK,GACA,OAEiE,GAAAH,EAAAI,OAAAC,OAAa,CAC1E,IAAAD,EAAAJ,EAAAI,OAAAE,OAAA,SAAAC,EAAAC,GAAA,OAAAD,EAAA,KAAAC,IAEHP,KAAAQ,IAAA,yBAAAL,GAKG,GAFJH,KAAAS,WACAT,KAAAU,MAASA,EAAAA,MAAOX,EAAAY,SACZX,KAAAU,MAAIE,CACJ,IAAAA,EAAAZ,KAAgBY,MAAAA,OACZ,IAAA,IAAAC,KAAIC,EAAQF,CACZ,IAAAE,EAAIC,EAAeC,GACnBD,EAAKN,EAASM,cACjBf,KAAAS,QAAAM,GAAAD,KAILG,UAAA,WACH,OApCgEjB,KAAAU,MAAAV,KAAAU,MAAAQ,eAAAC,GAsC7DC,OAAA,WACH,OAAApB,KAAAS,WAODY,EAAyBC,SAASC,WAAWhC,OAAQJ,EAAQS,eAAgBL,QAG7EiC,cAvDe,WA0DfC,QAAAA,OAAQC,KAAAA,MAN6EC,SAAzF,EAMIF,MAAQC,IAwBRE,OAHGF,SAAPA,EA/FAG,0BA+EqBR,EAAA9B,QAEhBuC,IAAA,WAJL,OAAA9B,KAAA+B,QAAA,cAAA/B,KAAAgC,WAAA,gBAqBIJ,uBAZiBP,EAAA9B,QAEhBuC,IAJuD,WAKxDH,OAAAA,KAAUI,QAAO,UAAA/B,KAAAiC,QAAA,cAAjBN,SAAU","file":"../../../scripts/mvc/citation/citation-model.js","sourcesContent":["define([\n    \"libs/bibtex\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( parseBibtex, baseMVC, _l ){\n/* global Backbone */\n// we use amd here to require, but bibtex uses a global or commonjs pattern.\n// webpack will load via commonjs and plain requirejs will load as global. Check both\nparseBibtex = parseBibtex || window.BibtexParser;\n\n_.extend(parseBibtex.ENTRY_TYPES_, {\n    'online'           : 998, // Galaxy MOD: Handle @online entries for preprints.\n    'data'             : 999 // Galaxy MOD: Handle @data citations coming from figshare.\n});\n\n\nvar logNamespace = 'citation';\n//==============================================================================\n/** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\nvar Citation = Backbone.Model.extend( baseMVC.LoggableMixin ).extend({\n    _logNamespace : logNamespace,\n\n    defaults : {\n        content: ''\n    },\n\n    initialize: function() {\n        var parsed;\n        try {\n            // TODO: to model.parse/.validate\n            parsed = parseBibtex( this.attributes.content );\n        } catch( err ){\n            return;\n        }\n        // bibtex returns successfully parsed in .entries and any parsing errors in .errors\n        if( parsed.errors.length ){\n            // the gen. form of these errors seems to be [ line, col, char, error message ]\n            var errors = parsed.errors.reduce( function( all, current ){ return all + '; ' + current; });\n            // throw new Error( 'Error parsing bibtex: ' + errors );\n            this.log( 'Error parsing bibtex: ' + errors );\n        }\n\n        this._fields = {};\n        this.entry = _.first( parsed.entries );\n        if( this.entry ){\n            var rawFields = this.entry.Fields;\n            for( var key in rawFields ){\n                var value = rawFields[ key ];\n                var lowerKey = key.toLowerCase();\n                this._fields[ lowerKey ] = value;\n            }\n        }\n    },\n    entryType: function() {\n        return this.entry? this.entry.EntryType : undefined;\n    },\n    fields: function() {\n        return this._fields;\n    }\n});\n\n\n//==============================================================================\n/** @class Backbone collection of citations.\n */\nvar BaseCitationCollection = Backbone.Collection.extend( baseMVC.LoggableMixin ).extend( {\n    _logNamespace : logNamespace,\n\n    /** root api url */\n    urlRoot : Galaxy.root + 'api',\n    partial : true, // Assume some tools in history/workflow may not be properly annotated yet.\n    model : Citation,\n} );\n\nvar HistoryCitationCollection = BaseCitationCollection.extend( {\n    /** complete api url */\n    url : function() {\n        return this.urlRoot + '/histories/' + this.history_id + '/citations';\n    }\n} );\n\nvar ToolCitationCollection = BaseCitationCollection.extend( {\n    /** complete api url */\n    url : function() {\n        return this.urlRoot + '/tools/' + this.tool_id + '/citations';\n    },\n    partial : false, // If a tool has citations, assume they are complete.\n} );\n\n\n//==============================================================================\n\nreturn {\n    Citation : Citation,\n    HistoryCitationCollection  : HistoryCitationCollection,\n    ToolCitationCollection: ToolCitationCollection\n};\n\n\n});\n"]}