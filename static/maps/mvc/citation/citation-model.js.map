{"version":3,"sources":["mvc/citation/citation-model.js"],"names":["parseBibtex","_","extend","ENTRY_TYPES_","online","data","Citation","Backbone","Model","_baseMvc2","default","LoggableMixin","_logNamespace","defaults","content","initialize","parsed","bibtexParse","toJSON","this","attributes","err","log","_fields","entry","first","rawFields","entryTags","value","key","lowerKey","toLowerCase","entryType","undefined","fields","Collection","partial","model","HistoryCitationCollection","BaseCitationCollection","url","ToolCitationCollection","urlRoot","tool_id"],"mappings":"qKAAYA,oNAKZC,EAAEC,OAAOF,EAAYG,cACjBC,OAAQ,IACRC,KAPQL,MAUZ,IAMIM,EAAWC,SAASC,MAAMN,OAAOO,EAAAC,QAAQC,eAAeT,QACxDU,cAPe,WASfC,UACIC,QAAS,IAGbC,WAAY,WACR,IAAIC,EACJ,IAEIA,EAASC,YAAYC,OAAOC,KAAKC,WAAWN,SAC9C,MAAOO,GACLF,KAAKG,IAAI,yBAA2BD,GA1BhD,GA6BQF,KAAKI,WACLJ,KAAKK,MAAQvB,EAAEwB,MAAMT,GA9B7BG,KAAAK,MAAA,CAgCY,IAAIE,EAAYP,KAAKK,MAAMG,UA9BvC,IAAS3B,IAAAA,KAAYG,EAAc,CACvB,IADuByB,EAClBF,EAAAG,GACHC,EAAAD,EAAAE,cAFdZ,KAAAI,QAAAO,GAAAF,KAOAI,UAAA,WAgCQ,OAAOb,KAAKK,MAAQL,KAAKK,MAAMQ,eAAYC,GAE/CC,OAAQ,WA9BR5B,OAAAA,KAAWC,WAOXQ,EAAYR,SAAA4B,WAAWjC,OAAAO,EAAAC,QAAAC,eAAAT,QACnBU,cAdW,WAiBPI,QAAAA,OAAAA,KAAAA,MACHoB,SAHD,EAIIC,MAAA/B,IAGJgC,EAAAC,EAAArC,QAEAsC,IAAA,WACI,OAAArB,KAAIO,QAAJ,cAA2BC,KAAAA,WAA3B,gBAIIc,EAAKlB,EAALrB,QAEPsC,IAAA,WACJ,OA1B8DrB,KAAAuB,QA0B9D,UA1B8DvB,KAAAwB,QA0B9D,cAEGP,SAAA,eAqCJ9B,SAAUA,EA9BdgC,0BAAAA,EACAG,uBAAAA","file":"../../../scripts/mvc/citation/citation-model.js","sourcesContent":["import * as parseBibtex from \"libs/bibtexParse\";\nimport baseMVC from \"mvc/base-mvc\";\n\n/* global Backbone */\n\n_.extend(parseBibtex.ENTRY_TYPES_, {\n    online: 998, // Galaxy MOD: Handle @online entries for preprints.\n    data: 999 // Galaxy MOD: Handle @data citations coming from figshare.\n});\n\nvar logNamespace = \"citation\";\n//==============================================================================\n/** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\nvar Citation = Backbone.Model.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    defaults: {\n        content: \"\"\n    },\n\n    initialize: function() {\n        var parsed;\n        try {\n            // TODO: to model.parse/.validate\n            parsed = bibtexParse.toJSON(this.attributes.content);\n        } catch (err) {\n            this.log(\"Error parsing bibtex: \" + err);\n        }\n\n        this._fields = {};\n        this.entry = _.first(parsed);\n        if (this.entry) {\n            var rawFields = this.entry.entryTags;\n            for (var key in rawFields) {\n                var value = rawFields[key];\n                var lowerKey = key.toLowerCase();\n                this._fields[lowerKey] = value;\n            }\n        }\n    },\n    entryType: function() {\n        return this.entry ? this.entry.entryType : undefined;\n    },\n    fields: function() {\n        return this._fields;\n    }\n});\n\n//==============================================================================\n/** @class Backbone collection of citations.\n */\nvar BaseCitationCollection = Backbone.Collection.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    /** root api url */\n    urlRoot: `${Galaxy.root}api`,\n    partial: true, // Assume some tools in history/workflow may not be properly annotated yet.\n    model: Citation\n});\n\nvar HistoryCitationCollection = BaseCitationCollection.extend({\n    /** complete api url */\n    url: function() {\n        return `${this.urlRoot}/histories/${this.history_id}/citations`;\n    }\n});\n\nvar ToolCitationCollection = BaseCitationCollection.extend({\n    /** complete api url */\n    url: function() {\n        return `${this.urlRoot}/tools/${this.tool_id}/citations`;\n    },\n    partial: false // If a tool has citations, assume they are complete.\n});\n\n//==============================================================================\n\nexport default {\n    Citation: Citation,\n    HistoryCitationCollection: HistoryCitationCollection,\n    ToolCitationCollection: ToolCitationCollection\n};\n"]}