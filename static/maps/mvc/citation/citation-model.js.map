{"version":3,"sources":["mvc/citation/citation-model.js"],"names":["define","parseBibtex","baseMVC","window","BibtexParser","online","ENTRY_TYPES_","data","_logNamespace","logNamespace","LoggableMixin","extend","content","initialize","parsed","err","this","attributes","errors","length","all","reduce","current","log","_fields","entry","entries","rawFields","key","value","lowerKey","entryType","EntryType","undefined","fields","Collection","urlRoot","Galaxy","root","partial","HistoryCitationCollection","Citation","BaseCitationCollection","history_id","url","ToolCitationCollection","tool_id"],"mappings":"kCAAAA,QAAQ,cAAe,eAAgB,sBAAuB,SAC1DC,EACAC,EAFJF,GAQIC,EAAcA,GAAeE,OAAOC,aAGhCC,EAAAA,OAAAA,EAAaC,cACbC,OAAAA,IAF+BA,KAAnC,MAMA,IAMIC,EAAAA,SAAeC,MAAAA,OADgDP,EAAAQ,eAAAC,QAC/DH,cANJ,WASQI,UADMA,QAHqD,IAQ3DC,WAAIC,WACJ,IAAAA,EACI,IAEHA,EAAQC,EAAKC,KAAAC,WAAAL,SACV,MAAAG,GACH,OAGG,GAAAD,EAAAI,OAAAC,OAAA,CAEI,IAAAD,EAAAJ,EAAOM,OAAAC,OAAaC,SAApBF,EAAAE,GACH,OAFDF,EAAA,KAAAE,IAKHN,KAAAO,IAAA,yBAAAL,GAKG,GAFJF,KAAAQ,WACAR,KAAAS,MAASA,EAAAA,MAAOX,EAAAY,SACZV,KAAAS,MAAIE,CACJ,IAAAA,EAAAX,KAAgBW,MAAAA,OACZ,IAAA,IAAAC,KAAIC,EAAQF,CACZ,IAAAE,EAAIC,EAAWF,GACfE,EAAKN,EAAQM,cAChBd,KAAAQ,QAAAM,GAAAD,KAILE,UAAA,WACH,OAtC8Df,KAAAS,MAAAT,KAAAS,MAAAO,eAAAC,GAwC3DC,OAAA,WACH,OAAAlB,KAAAQ,WASGhB,EAAeC,SADX0B,WADPxB,OAAOT,EAAQQ,eAIZC,QACAyB,cA1DR,WAoDAA,QAAAC,OAAAC,KAAA,MAOQC,SAAS,EAIbC,MAAAA,IAwBP,OAJOC,SAAUA,EACVD,0BAjBQE,EAAoCC,QAJcC,IAA9D,WAGQ,OAMJC,KAAAA,QAAAA,cAAyBH,KAAAA,WAAuB/B,gBAahDkC,uBAReH,EAAA/B,QAHfiC,IAAK,WAMT,OAAA5B,KAAAoB,QAAA,UAAApB,KAAA8B,QAAA,cAEAP,SAAO","file":"../../../scripts/mvc/citation/citation-model.js","sourcesContent":["define([\"libs/bibtex\", \"mvc/base-mvc\", \"utils/localization\"], function(\n    parseBibtex,\n    baseMVC,\n    _l\n) {\n    /* global Backbone */\n    // we use amd here to require, but bibtex uses a global or commonjs pattern.\n    // webpack will load via commonjs and plain requirejs will load as global. Check both\n    parseBibtex = parseBibtex || window.BibtexParser;\n\n    _.extend(parseBibtex.ENTRY_TYPES_, {\n        online: 998, // Galaxy MOD: Handle @online entries for preprints.\n        data: 999 // Galaxy MOD: Handle @data citations coming from figshare.\n    });\n\n    var logNamespace = \"citation\";\n    //==============================================================================\n    /** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\n    var Citation = Backbone.Model.extend(baseMVC.LoggableMixin).extend({\n        _logNamespace: logNamespace,\n\n        defaults: {\n            content: \"\"\n        },\n\n        initialize: function() {\n            var parsed;\n            try {\n                // TODO: to model.parse/.validate\n                parsed = parseBibtex(this.attributes.content);\n            } catch (err) {\n                return;\n            }\n            // bibtex returns successfully parsed in .entries and any parsing errors in .errors\n            if (parsed.errors.length) {\n                // the gen. form of these errors seems to be [ line, col, char, error message ]\n                var errors = parsed.errors.reduce(function(all, current) {\n                    return all + \"; \" + current;\n                });\n                // throw new Error( 'Error parsing bibtex: ' + errors );\n                this.log(\"Error parsing bibtex: \" + errors);\n            }\n\n            this._fields = {};\n            this.entry = _.first(parsed.entries);\n            if (this.entry) {\n                var rawFields = this.entry.Fields;\n                for (var key in rawFields) {\n                    var value = rawFields[key];\n                    var lowerKey = key.toLowerCase();\n                    this._fields[lowerKey] = value;\n                }\n            }\n        },\n        entryType: function() {\n            return this.entry ? this.entry.EntryType : undefined;\n        },\n        fields: function() {\n            return this._fields;\n        }\n    });\n\n    //==============================================================================\n    /** @class Backbone collection of citations.\n */\n    var BaseCitationCollection = Backbone.Collection\n        .extend(baseMVC.LoggableMixin)\n        .extend({\n            _logNamespace: logNamespace,\n\n            /** root api url */\n            urlRoot: Galaxy.root + \"api\",\n            partial: true, // Assume some tools in history/workflow may not be properly annotated yet.\n            model: Citation\n        });\n\n    var HistoryCitationCollection = BaseCitationCollection.extend({\n        /** complete api url */\n        url: function() {\n            return (\n                this.urlRoot + \"/histories/\" + this.history_id + \"/citations\"\n            );\n        }\n    });\n\n    var ToolCitationCollection = BaseCitationCollection.extend({\n        /** complete api url */\n        url: function() {\n            return this.urlRoot + \"/tools/\" + this.tool_id + \"/citations\";\n        },\n        partial: false // If a tool has citations, assume they are complete.\n    });\n\n    //==============================================================================\n\n    return {\n        Citation: Citation,\n        HistoryCitationCollection: HistoryCitationCollection,\n        ToolCitationCollection: ToolCitationCollection\n    };\n});\n"]}