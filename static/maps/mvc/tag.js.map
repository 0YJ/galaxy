{"version":3,"sources":["mvc/tag.js"],"names":["define","baseMVC","_l","TagsEditor","Backbone","View","tagName","LoggableMixin","className","HiddenUntilActivatedViewMixin","extend","events","select_width","initialize","show_editor","this","options","usePrompt","label","workflow_mode","keydown","hiddenUntilActivated","$activator","render","self","_hashToName","$el","html","_workflowTemplate","placeholder","_defaultTemplate","tags","select2","width","_getTagsUsed","_setUpBehaviors","tag","startsWith","slice","_nameToHash","_renderEditor","join","which","_renderTags","keydownHandler","e","hideEditor","showEditor","renderedArray","length","_","each","renderString","push","tagsToCSV","tagsArray","sort","model","get","isArray","isEmpty","map","escape","$input","find","event","on","val","save","added","_addNewTagToTagsUsed","text","newTag","tagsUsed","Galaxy","user","remove","stopListening","prototype","off","call","toString"],"mappings":"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","file":"../../scripts/mvc/tag.js","sourcesContent":["define([\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( baseMVC, _l ){\n// =============================================================================\n/** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\nvar TagsEditor = Backbone.View\n        .extend( baseMVC.LoggableMixin )\n        .extend( baseMVC.HiddenUntilActivatedViewMixin ).extend({\n\n    tagName      : 'div',\n    className    : 'tags-display',\n    select_width : '100%',\n    events: {},\n\n    /** Set up listeners, parse options */\n    initialize : function( options ){\n        //console.debug( this, options );\n        // only listen to the model only for changes to tags - re-render\n        this.show_editor = false;\n        if (options.usePrompt === false) {\n            this.label = '';\n        } else {\n            this.label = '<label class=\"prompt\">' + _l( 'Tags' ) + '</label>';\n        }\n        this.workflow_mode = options.workflow_mode || false;\n        if (this.workflow_mode) {\n            this.events.click = 'showEditor';\n            this.events.keydown = 'keydownHandler';\n        }\n        this.hiddenUntilActivated( options.$activator, options );\n    },\n\n    /** Build the DOM elements, call select to on the created input, and set up behaviors */\n    render : function(){\n        var self = this;\n        if (this.workflow_mode) {\n           this.$el.html(this._workflowTemplate());\n        } else {\n            this.$el.html(this._defaultTemplate());\n        }\n        this.$input().select2({\n            placeholder : 'Add tags',\n            width       : this.workflow_mode ? this.width : this.select_width,\n            tags : function(){\n                // initialize possible tags in the dropdown based on all the tags the user has used so far\n                return self._getTagsUsed();\n            }\n        });\n\n        this._setUpBehaviors();\n        return this;\n    },\n\n    _hashToName: function(tag){\n        if (tag.startsWith('#')){\n            return 'name:' + tag.slice(1);\n        }\n        return tag;\n    },\n\n    _nameToHash: function(tag){\n        if (tag.startsWith('name:')){\n            tag = '#' + tag.slice(5);\n        }\n        return tag;\n    },\n\n    /** @returns {String} the html text used to build the view's DOM */\n    _defaultTemplate : function(){\n        return [\n            this.label,\n            this._renderEditor()\n        ].join( '' );\n    },\n\n    _workflowTemplate : function(){\n        // Shows labels by default, event handler controls whether we show tags or editor\n        return [\n            this.show_editor ? this._renderEditor() : this._renderTags(),\n        ].join( ' ' );\n    },\n\n    keydownHandler : function (e) {\n        switch (e.which) {\n            // esc\n            case 27 :\n                // hide the tag editor when pressing escape\n                this.hideEditor();\n                break;\n        }\n    },\n\n    showEditor: function() {\n        this.show_editor = true;\n        this.render();\n    },\n\n    hideEditor: function() {\n        this.show_editor = false;\n        this.render();\n    },\n\n    _renderEditor: function(){\n        // set up initial tags by adding as CSV to input vals (necc. to init select2)\n        return '<input class=\"tags-input\" value=\"' + this.tagsToCSV() + '\"/>'\n    },\n\n    _renderTags : function(){\n        var tags = this.model.get('tags');\n        var addButton = 'static/images/fugue/tag--plus.png';\n        var renderedArray = [];\n        _.each(tags, function(tag) {\n            tag = tag.indexOf(\"name:\") == 0 ? tag.slice(5) : tag ;\n            var renderString = '<span class=\"label label-info\">' + tag + '</span>';\n            renderedArray.push( renderString );\n        });\n        if (renderedArray.length === 0) {\n            // If there are no tags to render we just show the add-tag-button\n            renderedArray.push('<img src=' + addButton + ' class=\"add-tag-button\" title=\"Add tags\"/>');\n        }\n        return renderedArray.join(\" \");\n    },\n\n    /** @returns {String} the sorted, comma-separated tags from the model */\n    tagsToCSV : function(){\n        var self = this;\n        var tagsArray = this.model.get( 'tags' );\n        if( !_.isArray( tagsArray ) || _.isEmpty( tagsArray ) ){\n            return '';\n        }\n        return tagsArray.map( function( tag ){\n            return _.escape( self._nameToHash( tag ) );\n        }).sort().join( ',' );\n    },\n\n    /** @returns {jQuery} the input for this view */\n    $input : function(){\n        return this.$el.find( 'input.tags-input' );\n    },\n\n    /** @returns {String[]} all tags used by the current user */\n    _getTagsUsed : function(){\n//TODO: global\n        var self = this;\n        return _.map(Galaxy.user.get( 'tags_used' ), self._nameToHash);\n    },\n\n    /** set up any event listeners on the view's DOM (mostly handled by select2) */\n    _setUpBehaviors : function(){\n        var self = this;\n        this.$input().on( 'change', function( event ){\n            // Modify any 'hashtag' 'nametags'\n            event.val = _.map(event.val, self._hashToName);\n            // save the model's tags in either remove or added event\n            self.model.save({ tags: event.val });\n            // if it's new, add the tag to the users tags\n            if( event.added ){\n                //??: solve weird behavior in FF on test.galaxyproject.org where\n                //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                self._addNewTagToTagsUsed( event.added.text + '' );\n            }\n        });\n    },\n\n    /** add a new tag (if not already there) to the list of all tags used by the user\n     *  @param {String} newTag  the tag to add to the list of used\n     */\n    _addNewTagToTagsUsed : function( newTag ){\n//TODO: global\n        var tagsUsed = Galaxy.user.get( 'tags_used' );\n        if( !_.contains( tagsUsed, newTag ) ){\n            tagsUsed.push( newTag );\n            tagsUsed.sort();\n            Galaxy.user.set( 'tags_used', tagsUsed );\n        }\n    },\n\n    /** shut down event listeners and remove this view's DOM */\n    remove : function(){\n        this.$input.off();\n        this.stopListening( this.model );\n        Backbone.View.prototype.remove.call( this );\n    },\n\n    /** string rep */\n    toString : function(){ return [ 'TagsEditor(', this.model + '', ')' ].join(''); }\n});\n\nreturn {\n    TagsEditor : TagsEditor,\n};\n});\n"]}