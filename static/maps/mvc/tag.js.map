{"version":3,"sources":["mvc/tag.js"],"names":["TagsEditor","Backbone","View","extend","_baseMvc2","default","LoggableMixin","HiddenUntilActivatedViewMixin","tagName","className","select_width","events","initialize","options","this","show_editor","usePrompt","label","_localization2","workflow_mode","click","keydown","hiddenUntilActivated","$activator","render","self","_defaultTemplate","$input","select2","placeholder","width","tags","_getTagsUsed","_setUpBehaviors","tag","slice","_nameToHash","_renderEditor","join","_renderTags","keydownHandler","e","_workflowTemplate","hideEditor","showEditor","tagsToCSV","model","get","_","each","renderString","indexOf","push","addButton","length","renderedArray","tagsArray","isArray","isEmpty","map","escape","sort","$el","find","Galaxy","user","on","event","val","_hashToName","save","added","_addNewTagToTagsUsed","text","newTag","contains","tagsUsed","remove","off","stopListening","call","toString"],"mappings":"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","file":"../../scripts/mvc/tag.js","sourcesContent":["import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n// =============================================================================\n/** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\nvar TagsEditor = Backbone.View\n    .extend(baseMVC.LoggableMixin)\n    .extend(baseMVC.HiddenUntilActivatedViewMixin)\n    .extend({\n        tagName: \"div\",\n        className: \"tags-display\",\n        select_width: \"100%\",\n        events: {},\n\n        /** Set up listeners, parse options */\n        initialize: function(options) {\n            //console.debug( this, options );\n            // only listen to the model only for changes to tags - re-render\n            this.show_editor = false;\n            if (options.usePrompt === false) {\n                this.label = \"\";\n            } else {\n                this.label = '<label class=\"prompt\">' + _l(\"Tags\") + \"</label>\";\n            }\n            this.workflow_mode = options.workflow_mode || false;\n            if (this.workflow_mode) {\n                this.events.click = \"showEditor\";\n                this.events.keydown = \"keydownHandler\";\n            }\n            this.hiddenUntilActivated(options.$activator, options);\n        },\n\n        /** Build the DOM elements, call select to on the created input, and set up behaviors */\n        render: function() {\n            var self = this;\n            if (this.workflow_mode) {\n                this.$el.html(this._workflowTemplate());\n            } else {\n                this.$el.html(this._defaultTemplate());\n            }\n            this.$input().select2({\n                placeholder: \"Add tags\",\n                width: this.workflow_mode ? this.width : this.select_width,\n                tags: function() {\n                    // initialize possible tags in the dropdown based on all the tags the user has used so far\n                    return self._getTagsUsed();\n                }\n            });\n\n            this._setUpBehaviors();\n            return this;\n        },\n\n        _hashToName: function(tag) {\n            if (tag.startsWith(\"#\")) {\n                return \"name:\" + tag.slice(1);\n            }\n            return tag;\n        },\n\n        _nameToHash: function(tag) {\n            if (tag.startsWith(\"name:\")) {\n                tag = \"#\" + tag.slice(5);\n            }\n            return tag;\n        },\n\n        /** @returns {String} the html text used to build the view's DOM */\n        _defaultTemplate: function() {\n            return [this.label, this._renderEditor()].join(\"\");\n        },\n\n        _workflowTemplate: function() {\n            // Shows labels by default, event handler controls whether we show tags or editor\n            return [\n                this.show_editor ? this._renderEditor() : this._renderTags()\n            ].join(\" \");\n        },\n\n        keydownHandler: function(e) {\n            switch (e.which) {\n                // esc\n                case 27:\n                    // hide the tag editor when pressing escape\n                    this.hideEditor();\n                    break;\n            }\n        },\n\n        showEditor: function() {\n            this.show_editor = true;\n            this.render();\n        },\n\n        hideEditor: function() {\n            this.show_editor = false;\n            this.render();\n        },\n\n        _renderEditor: function() {\n            // set up initial tags by adding as CSV to input vals (necc. to init select2)\n            return (\n                '<input class=\"tags-input\" value=\"' + this.tagsToCSV() + '\"/>'\n            );\n        },\n\n        _renderTags: function() {\n            var tags = this.model.get(\"tags\");\n            var addButton = \"static/images/fugue/tag--plus.png\";\n            var renderedArray = [];\n            _.each(tags, tag => {\n                tag = tag.indexOf(\"name:\") == 0 ? tag.slice(5) : tag;\n                var renderString =\n                    '<span class=\"label label-info\">' + tag + \"</span>\";\n                renderedArray.push(renderString);\n            });\n            if (renderedArray.length === 0) {\n                // If there are no tags to render we just show the add-tag-button\n                renderedArray.push(\n                    \"<img src=\" +\n                        addButton +\n                        ' class=\"add-tag-button\" title=\"Add tags\"/>'\n                );\n            }\n            return renderedArray.join(\" \");\n        },\n\n        /** @returns {String} the sorted, comma-separated tags from the model */\n        tagsToCSV: function() {\n            var self = this;\n            var tagsArray = this.model.get(\"tags\");\n            if (!_.isArray(tagsArray) || _.isEmpty(tagsArray)) {\n                return \"\";\n            }\n            return tagsArray\n                .map(tag => _.escape(self._nameToHash(tag)))\n                .sort()\n                .join(\",\");\n        },\n\n        /** @returns {jQuery} the input for this view */\n        $input: function() {\n            return this.$el.find(\"input.tags-input\");\n        },\n\n        /** @returns {String[]} all tags used by the current user */\n        _getTagsUsed: function() {\n            //TODO: global\n            var self = this;\n            return _.map(Galaxy.user.get(\"tags_used\"), self._nameToHash);\n        },\n\n        /** set up any event listeners on the view's DOM (mostly handled by select2) */\n        _setUpBehaviors: function() {\n            var self = this;\n            this.$input().on(\"change\", event => {\n                // Modify any 'hashtag' 'nametags'\n                event.val = _.map(event.val, self._hashToName);\n                // save the model's tags in either remove or added event\n                self.model.save({ tags: event.val });\n                // if it's new, add the tag to the users tags\n                if (event.added) {\n                    //??: solve weird behavior in FF on test.galaxyproject.org where\n                    //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                    self._addNewTagToTagsUsed(event.added.text + \"\");\n                }\n            });\n        },\n\n        /** add a new tag (if not already there) to the list of all tags used by the user\n     *  @param {String} newTag  the tag to add to the list of used\n     */\n        _addNewTagToTagsUsed: function(newTag) {\n            //TODO: global\n            var tagsUsed = Galaxy.user.get(\"tags_used\");\n            if (!_.contains(tagsUsed, newTag)) {\n                tagsUsed.push(newTag);\n                tagsUsed.sort();\n                Galaxy.user.set(\"tags_used\", tagsUsed);\n            }\n        },\n\n        /** shut down event listeners and remove this view's DOM */\n        remove: function() {\n            this.$input.off();\n            this.stopListening(this.model);\n            Backbone.View.prototype.remove.call(this);\n        },\n\n        /** string rep */\n        toString: function() {\n            return [\"TagsEditor(\", this.model + \"\", \")\"].join(\"\");\n        }\n    });\n\nexport default {\n    TagsEditor: TagsEditor\n};\n"]}