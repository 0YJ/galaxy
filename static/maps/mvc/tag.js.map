{"version":3,"sources":["mvc/tag.js"],"names":["define","baseMVC","_l","TagsEditor","Backbone","View","tagName","LoggableMixin","className","HiddenUntilActivatedViewMixin","extend","initialize","options","usePrompt","this","label","hiddenUntilActivated","$activator","render","self","$input","_hashToName","placeholder","tags","select2","width","_getTagsUsed","_setUpBehaviors","tag","startsWith","slice","_nameToHash","_template","tagsToCSV","join","tagsArray","_","escape","sort","isEmpty","map","$el","find","user","get","on","event","val","_addNewTagToTagsUsed","added","text","tagsUsed","newTag","Galaxy","contains","push","remove","set","off","toString","model","prototype","call"],"mappings":"YAAAA,SACI,eADJA,sBAIA,SAAAC,EAAAC,GAsIC,OAFGC,WA/HaC,SAASC,KAItBC,OAAcL,EAF8CM,eAG5DC,OAAAA,EAAcC,+BAH8CC,QAK5DJ,QAAA,MACAK,UAAAA,eAGIA,WAAIC,SAAQC,IAGK,IAAbD,EAAAC,UACHC,KAAAC,MAAA,GAbuDD,KAAAC,MAAA,yBAAAb,EAAA,QAAA,WAiB5DY,KAAAE,qBAAAJ,EAAAK,WAAAL,IACAM,OAAS,WAIL,GAAAC,GAAKC,IAaTC,OAZQC,MAAAA,IAAAA,KAAAA,KAAAA,aAEAC,KAAAA,SAAOC,SACHF,YAAA,WACAG,MAAA,OACHF,KAAA,WADG,MAAOJ,GAAKO,kBAIpBZ,KAAKa,kBAITN,MAGKA,YAAA,SAAAO,GACD,MAAAA,GAAAC,WAAA,KAvCwD,QAAAD,EAAAE,MAAA,GA0C5DC,GAGKA,YAAA,SAAAH,GAIL,MAHIA,GAAAC,WAAA,WA9CwDD,EAAA,IAAAA,EAAAE,MAAA,IAiD5DF,GAKQI,UAAA,WAEP,OAJOlB,KAAKC,MAObkB,oCAAsBnB,KAAAmB,YAAA,QAClBC,KAAIf,KAIHc,UAAA,WACD,GAAAd,GAAOgB,KACHA,EAAOC,KAAEC,MAAQlB,IAAKY,OACzB,QAFMK,EAEJE,QAAOJ,IAFVE,EAAAG,QAAAJ,GAjEwD,GAsE5DA,EAAAK,IAAA,SAAAZ,GACAR,MAASgB,GAAAC,OAAAlB,EAAUY,YAAAH,MACfU,OAAAJ,KAAYO,MAIhBf,OAAAA,WACJ,MAAAZ,MAAA2B,IAAAC,KAAA,qBADIhB,aAAe,WAOfC,GAAAA,GAAAA,IACI,OAAAS,GAAIjB,IAAAA,OAAJwB,KAAAC,IAAA,aAAAzB,EAAAY,cAIIJ,gBAAA,WACAR,GAAAA,GAAAA,IACAL,MAAAM,SAAAyB,GAAA,SAAA,SAAAC,GAEIA,EAAAC,IAAAX,EAAAI,IAAAM,EAAAC,IAAA5B,EAAAE,aAEAF,EAAAA,MAAAA,MAAK6B,KAAAA,EAAAA,MATbF,EAAAG,OAcJ9B,EAAA6B,qBAAAF,EAAAG,MAAAC,KAAA,OAQQC,qBAASb,SAATc,GAEH,GAAAD,GAAAE,OAAAV,KAAAC,IAAA,YA7GuDR,GAAAkB,SAAAH,EAAAC,KA0GpDD,EAASI,KAAMH,GAMvBD,EAAAb,OACAkB,OAASb,KAAAc,IAAA,YAAUN,KAAnBK,OAAS,WAMT1C,KAAAM,OAAAsC,MACAC,KAAAA,cAAW7C,KAAA8C,OAAYxD,SAAAC,KAASwD,UAAAL,OAAeM,KAAAhD,OAGnD6C,SAAA,WAAA,OAAA,cAAA7C,KAAA8C,MAAA,GAAA,KAAA1B,KAAA","file":"../../scripts/mvc/tag.js","sourcesContent":["define([\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( baseMVC, _l ){\n// =============================================================================\n/** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\nvar TagsEditor = Backbone.View\n        .extend( baseMVC.LoggableMixin )\n        .extend( baseMVC.HiddenUntilActivatedViewMixin ).extend({\n\n    tagName     : 'div',\n    className   : 'tags-display',\n\n    /** Set up listeners, parse options */\n    initialize : function( options ){\n        //console.debug( this, options );\n        // only listen to the model only for changes to tags - re-render\n        if (options.usePrompt === false) {\n            this.label = '';\n        } else {\n            this.label = '<label class=\"prompt\">' + _l( 'Tags' ) + '</label>';\n        }\n        this.hiddenUntilActivated( options.$activator, options );\n    },\n\n    /** Build the DOM elements, call select to on the created input, and set up behaviors */\n    render : function(){\n        var self = this;\n        this.$el.html( this._template() );\n\n        this.$input().select2({\n            placeholder : 'Add tags',\n            width       : '100%',\n            tags : function(){\n                // initialize possible tags in the dropdown based on all the tags the user has used so far\n                return self._getTagsUsed();\n            }\n        });\n\n        this._setUpBehaviors();\n        return this;\n    },\n\n    _hashToName: function(tag){\n        if (tag.startsWith('#')){\n            return 'name:' + tag.slice(1);\n        }\n        return tag;\n    },\n\n    _nameToHash: function(tag){\n        if (tag.startsWith('name:')){\n            tag = '#' + tag.slice(5);\n        }\n        return tag;\n    },\n\n    /** @returns {String} the html text used to build the view's DOM */\n    _template : function(){\n        return [\n            this.label,\n            // set up initial tags by adding as CSV to input vals (necc. to init select2)\n            '<input class=\"tags-input\" value=\"', this.tagsToCSV(), '\" />'\n        ].join( '' );\n    },\n\n    /** @returns {String} the sorted, comma-separated tags from the model */\n    tagsToCSV : function(){\n        var self = this;\n        var tagsArray = this.model.get( 'tags' );\n        if( !_.isArray( tagsArray ) || _.isEmpty( tagsArray ) ){\n            return '';\n        }\n        return tagsArray.map( function( tag ){\n            return _.escape( self._nameToHash( tag ) );\n        }).sort().join( ',' );\n    },\n\n    /** @returns {jQuery} the input for this view */\n    $input : function(){\n        return this.$el.find( 'input.tags-input' );\n    },\n\n    /** @returns {String[]} all tags used by the current user */\n    _getTagsUsed : function(){\n//TODO: global\n        var self = this;\n        return _.map(Galaxy.user.get( 'tags_used' ), self._nameToHash);\n    },\n\n    /** set up any event listeners on the view's DOM (mostly handled by select2) */\n    _setUpBehaviors : function(){\n        var self = this;\n        this.$input().on( 'change', function( event ){\n            // Modify any 'hashtag' 'nametags'\n            event.val = _.map(event.val, self._hashToName);\n            // save the model's tags in either remove or added event\n            self.model.save({ tags: event.val });\n            // if it's new, add the tag to the users tags\n            if( event.added ){\n                //??: solve weird behavior in FF on test.galaxyproject.org where\n                //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                self._addNewTagToTagsUsed( event.added.text + '' );\n            }\n        });\n    },\n\n    /** add a new tag (if not already there) to the list of all tags used by the user\n     *  @param {String} newTag  the tag to add to the list of used\n     */\n    _addNewTagToTagsUsed : function( newTag ){\n//TODO: global\n        var tagsUsed = Galaxy.user.get( 'tags_used' );\n        if( !_.contains( tagsUsed, newTag ) ){\n            tagsUsed.push( newTag );\n            tagsUsed.sort();\n            Galaxy.user.set( 'tags_used', tagsUsed );\n        }\n    },\n\n    /** shut down event listeners and remove this view's DOM */\n    remove : function(){\n        this.$input.off();\n        this.stopListening( this.model );\n        Backbone.View.prototype.remove.call( this );\n    },\n\n    /** string rep */\n    toString : function(){ return [ 'TagsEditor(', this.model + '', ')' ].join(''); }\n});\n\n// =============================================================================\nreturn {\n    TagsEditor : TagsEditor\n};\n});\n"]}