{"version":3,"sources":["mvc/tag.js"],"names":["define","baseMVC","_l","TagsEditor","Backbone","View","extend","LoggableMixin","HiddenUntilActivatedViewMixin","tagName","className","initialize","options","this","listenTo","model","render","hiddenUntilActivated","$activator","view","$el","html","_template","$input","select2","placeholder","width","tags","_getTagsUsed","_setUpBehaviors","tagsToCSV","join","tagsArray","get","_","isArray","isEmpty","map","tag","escape","sort","find","Galaxy","user","on","event","save","val","silent","added","_addNewTagToTagsUsed","text","newTag","tagsUsed","contains","push","set","remove","off","stopListening","prototype","call","toString"],"mappings":"AAAAA,QACI,eACA,sBACD,SAAUC,EAASC,GAiHtB,OACIC,WA5GaC,SAASC,KACjBC,OAAQL,EAAQM,eAChBD,OAAQL,EAAQO,+BAAgCF,QAErDG,QAAc,MACdC,UAAc,eAGdC,WAAa,SAAUC,GAGnBC,KAAKC,SAAUD,KAAKE,MAAO,cAAe,WACtCF,KAAKG,WAETH,KAAKI,qBAAsBL,EAAQM,WAAYN,IAInDI,OAAS,WACL,GAAIG,GAAON,IAaX,OAZAA,MAAKO,IAAIC,KAAMR,KAAKS,aAEpBT,KAAKU,SAASC,SACVC,YAAc,WACdC,MAAc,OACdC,KAAO,WAEH,MAAOR,GAAKS,kBAIpBf,KAAKgB,kBACEhB,MAIXS,UAAY,WACR,OAEI,yBAA0BpB,EAAI,QAAU,WAExC,oCAAqCW,KAAKiB,YAAa,QACzDC,KAAM,KAIZD,UAAY,WACR,GAAIE,GAAYnB,KAAKE,MAAMkB,IAAK,OAChC,QAAKC,EAAEC,QAASH,IAAeE,EAAEE,QAASJ,GAC/B,GAEJA,EAAUK,IAAK,SAAUC,GAC5B,MAAOJ,GAAEK,OAAQD,KAClBE,OAAOT,KAAM,MAIpBR,OAAS,WACL,MAAOV,MAAKO,IAAIqB,KAAM,qBAI1Bb,aAAe,WAEX,MAAOc,QAAOC,KAAKV,IAAK,cAI5BJ,gBAAkB,WACd,GAAIV,GAAON,IACXA,MAAKU,SAASqB,GAAI,SAAU,SAAUC,GAElC1B,EAAKJ,MAAM+B,MAAOnB,KAAMkB,EAAME,MAASC,QAAQ,IAE3CH,EAAMI,OAGN9B,EAAK+B,qBAAsBL,EAAMI,MAAME,KAAO,OAQ1DD,qBAAuB,SAAUE,GAE7B,GAAIC,GAAWX,OAAOC,KAAKV,IAAK,YAC3BC,GAAEoB,SAAUD,EAAUD,KACvBC,EAASE,KAAMH,GACfC,EAASb,OACTE,OAAOC,KAAKa,IAAK,YAAaH,KAKtCI,OAAS,WACL5C,KAAKU,OAAOmC,MACZ7C,KAAK8C,cAAe9C,KAAKE,OACzBX,SAASC,KAAKuD,UAAUH,OAAOI,KAAMhD,OAIzCiD,SAAW,WAAY,OAAS,cAAejD,KAAKE,MAAQ,GAAI,KAAMgB,KAAK","file":"../../scripts/mvc/tag.js","sourcesContent":["define([\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( baseMVC, _l ){\n// =============================================================================\n/** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\nvar TagsEditor = Backbone.View\n        .extend( baseMVC.LoggableMixin )\n        .extend( baseMVC.HiddenUntilActivatedViewMixin ).extend({\n\n    tagName     : 'div',\n    className   : 'tags-display',\n\n    /** Set up listeners, parse options */\n    initialize : function( options ){\n        //console.debug( this, options );\n        // only listen to the model only for changes to tags - re-render\n        this.listenTo( this.model, 'change:tags', function(){\n            this.render();\n        });\n        this.hiddenUntilActivated( options.$activator, options );\n    },\n\n    /** Build the DOM elements, call select to on the created input, and set up behaviors */\n    render : function(){\n        var view = this;\n        this.$el.html( this._template() );\n\n        this.$input().select2({\n            placeholder : 'Add tags',\n            width       : '100%',\n            tags : function(){\n                // initialize possible tags in the dropdown based on all the tags the user has used so far\n                return view._getTagsUsed();\n            }\n        });\n\n        this._setUpBehaviors();\n        return this;\n    },\n\n    /** @returns {String} the html text used to build the view's DOM */\n    _template : function(){\n        return [\n            //TODO: make prompt optional\n            '<label class=\"prompt\">', _l( 'Tags' ), '</label>',\n            // set up initial tags by adding as CSV to input vals (necc. to init select2)\n            '<input class=\"tags-input\" value=\"', this.tagsToCSV(), '\" />'\n        ].join( '' );\n    },\n\n    /** @returns {String} the sorted, comma-separated tags from the model */\n    tagsToCSV : function(){\n        var tagsArray = this.model.get( 'tags' );\n        if( !_.isArray( tagsArray ) || _.isEmpty( tagsArray ) ){\n            return '';\n        }\n        return tagsArray.map( function( tag ){\n            return _.escape( tag );\n        }).sort().join( ',' );\n    },\n\n    /** @returns {jQuery} the input for this view */\n    $input : function(){\n        return this.$el.find( 'input.tags-input' );\n    },\n\n    /** @returns {String[]} all tags used by the current user */\n    _getTagsUsed : function(){\n//TODO: global\n        return Galaxy.user.get( 'tags_used' );\n    },\n\n    /** set up any event listeners on the view's DOM (mostly handled by select2) */\n    _setUpBehaviors : function(){\n        var view = this;\n        this.$input().on( 'change', function( event ){\n            // save the model's tags in either remove or added event\n            view.model.save({ tags: event.val }, { silent: true });\n            // if it's new, add the tag to the users tags\n            if( event.added ){\n                //??: solve weird behavior in FF on test.galaxyproject.org where\n                //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                view._addNewTagToTagsUsed( event.added.text + '' );\n            }\n        });\n    },\n\n    /** add a new tag (if not already there) to the list of all tags used by the user\n     *  @param {String} newTag  the tag to add to the list of used\n     */\n    _addNewTagToTagsUsed : function( newTag ){\n//TODO: global\n        var tagsUsed = Galaxy.user.get( 'tags_used' );\n        if( !_.contains( tagsUsed, newTag ) ){\n            tagsUsed.push( newTag );\n            tagsUsed.sort();\n            Galaxy.user.set( 'tags_used', tagsUsed );\n        }\n    },\n\n    /** shut down event listeners and remove this view's DOM */\n    remove : function(){\n        this.$input.off();\n        this.stopListening( this.model );\n        Backbone.View.prototype.remove.call( this );\n    },\n\n    /** string rep */\n    toString : function(){ return [ 'TagsEditor(', this.model + '', ')' ].join(''); }\n});\n\n// =============================================================================\nreturn {\n    TagsEditor : TagsEditor\n};\n});\n"]}