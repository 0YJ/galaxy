{"version":3,"sources":["mvc/tag.js"],"names":["define","baseMVC","_l","TagsEditor","Backbone","View","tagName","LoggableMixin","className","HiddenUntilActivatedViewMixin","extend","initialize","listenTo","options","this","hiddenUntilActivated","$activator","render","view","$input","placeholder","tags","select2","width","_getTagsUsed","_setUpBehaviors","_template","tagsToCSV","tagsArray","map","get","_","isArray","isEmpty","tag","escape","join","find","model","event","added","save","val","silent","_addNewTagToTagsUsed","text","tagsUsed","push","newTag","Galaxy","user","set","contains","sort","remove","off","stopListening","toString","prototype","call"],"mappings":"YAAAA,SACI,eADJA,sBAIA,SAAAC,EAAAC,GAgHO,OApHPC,WASiBC,SAASC,KAItBC,OAAcL,EAF8CM,eAG5DC,OAAAA,EAAcC,+BAH8CC,QAK5DJ,QAAA,MACAK,UAAAA,eAGIA,WAAKC,SAAUC,GAGfC,KAAAF,SAAKG,KAAAA,MAAAA,cAA8BC,WAZqBF,KAAAG,WAe5DH,KAAAC,qBAAAF,EAAAG,WAAAH,IACAI,OAAS,WAIL,GAAAC,GAAKC,IAaT,OAZQC,MAAAA,IAAAA,KAAAA,KAAAA,aAEAC,KAAAA,SAAOC,SACHF,YAAA,WACAG,MAAA,OACHF,KAAA,WADG,MAAOH,GAAKM,kBAIpBV,KAAKW,kBAITX,MAIQY,UAAA,WACA,OAtCoD,yBAAAxB,EAAA,QAAA,WA2C5D,oCAAAY,KAAAa,YAAA,QACAA,KAAAA,KAIKA,UAAA,WACD,GAAAC,GAAOA,KAAUC,MAAKC,IAAA,OAClB,QAAAC,EAAAC,QAAOD,IAAPA,EAAAE,QAAAL,GADG,GAAAA,EAAUC,IAAK,SAAUK,GAKpC,MAAAH,GAAAI,OAAAD,KACAf,OAASiB,KAAA,MAITjB,OAAA,WACAK,MAAAA,MAAAA,IAAea,KAAA,qBAAfb,aAAe,WAMfC,MAAAA,QAAAA,KAAkBK,IAAA,cAIVZ,gBAAKoB,WACL,GAAApB,GAAAJ,IACAA,MAAAK,SAAIoB,GAAMC,SAAO,SAAAD,GAEbrB,EAAAoB,MAAAG,MAAApB,KAAAkB,EAAAG,MAAAC,QAAA,IAEHJ,EAAAC,OADGtB,EAAK0B,qBAAsBL,EAAMC,MAAMK,KAAO,OAYlDC,qBAASC,SAATC,GAEAC,GAAAA,GAAOC,OAAKC,KAAKrB,IAAA,YACpBC,GAAAqB,SAAAN,EAAAE,KA1FuDF,EAAAC,KAAAC,GAwFpDF,EAASO,OAKjBJ,OAAAC,KAAAC,IAAA,YAAAL,KAKCQ,OAlG2D,WA+FxDxC,KAAKK,OAAOoC,MAKhBzC,KAAA0C,cAAA1C,KAAAwB,OACAmB,SAAAA,KAAWC,UAAAJ,OAAUK,KAAA7C,OAArB2C,SAAW,WAAY,OAAS,cAAe3C,KAAKwB,MAAQ,GAAI,KAAMF,KAAK","file":"../../scripts/mvc/tag.js","sourcesContent":["define([\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( baseMVC, _l ){\n// =============================================================================\n/** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\nvar TagsEditor = Backbone.View\n        .extend( baseMVC.LoggableMixin )\n        .extend( baseMVC.HiddenUntilActivatedViewMixin ).extend({\n\n    tagName     : 'div',\n    className   : 'tags-display',\n\n    /** Set up listeners, parse options */\n    initialize : function( options ){\n        //console.debug( this, options );\n        // only listen to the model only for changes to tags - re-render\n        this.listenTo( this.model, 'change:tags', function(){\n            this.render();\n        });\n        this.hiddenUntilActivated( options.$activator, options );\n    },\n\n    /** Build the DOM elements, call select to on the created input, and set up behaviors */\n    render : function(){\n        var view = this;\n        this.$el.html( this._template() );\n\n        this.$input().select2({\n            placeholder : 'Add tags',\n            width       : '100%',\n            tags : function(){\n                // initialize possible tags in the dropdown based on all the tags the user has used so far\n                return view._getTagsUsed();\n            }\n        });\n\n        this._setUpBehaviors();\n        return this;\n    },\n\n    /** @returns {String} the html text used to build the view's DOM */\n    _template : function(){\n        return [\n            //TODO: make prompt optional\n            '<label class=\"prompt\">', _l( 'Tags' ), '</label>',\n            // set up initial tags by adding as CSV to input vals (necc. to init select2)\n            '<input class=\"tags-input\" value=\"', this.tagsToCSV(), '\" />'\n        ].join( '' );\n    },\n\n    /** @returns {String} the sorted, comma-separated tags from the model */\n    tagsToCSV : function(){\n        var tagsArray = this.model.get( 'tags' );\n        if( !_.isArray( tagsArray ) || _.isEmpty( tagsArray ) ){\n            return '';\n        }\n        return tagsArray.map( function( tag ){\n            return _.escape( tag );\n        }).sort().join( ',' );\n    },\n\n    /** @returns {jQuery} the input for this view */\n    $input : function(){\n        return this.$el.find( 'input.tags-input' );\n    },\n\n    /** @returns {String[]} all tags used by the current user */\n    _getTagsUsed : function(){\n//TODO: global\n        return Galaxy.user.get( 'tags_used' );\n    },\n\n    /** set up any event listeners on the view's DOM (mostly handled by select2) */\n    _setUpBehaviors : function(){\n        var view = this;\n        this.$input().on( 'change', function( event ){\n            // save the model's tags in either remove or added event\n            view.model.save({ tags: event.val }, { silent: true });\n            // if it's new, add the tag to the users tags\n            if( event.added ){\n                //??: solve weird behavior in FF on test.galaxyproject.org where\n                //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                view._addNewTagToTagsUsed( event.added.text + '' );\n            }\n        });\n    },\n\n    /** add a new tag (if not already there) to the list of all tags used by the user\n     *  @param {String} newTag  the tag to add to the list of used\n     */\n    _addNewTagToTagsUsed : function( newTag ){\n//TODO: global\n        var tagsUsed = Galaxy.user.get( 'tags_used' );\n        if( !_.contains( tagsUsed, newTag ) ){\n            tagsUsed.push( newTag );\n            tagsUsed.sort();\n            Galaxy.user.set( 'tags_used', tagsUsed );\n        }\n    },\n\n    /** shut down event listeners and remove this view's DOM */\n    remove : function(){\n        this.$input.off();\n        this.stopListening( this.model );\n        Backbone.View.prototype.remove.call( this );\n    },\n\n    /** string rep */\n    toString : function(){ return [ 'TagsEditor(', this.model + '', ')' ].join(''); }\n});\n\n// =============================================================================\nreturn {\n    TagsEditor : TagsEditor\n};\n});\n"]}