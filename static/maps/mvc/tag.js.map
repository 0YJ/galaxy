{"version":3,"sources":["mvc/tag.js"],"names":["_baseMvc","require","_localization","TagsEditor","Backbone","View","extend","_baseMvc2","default","LoggableMixin","HiddenUntilActivatedViewMixin","tagName","className","select_width","events","initialize","options","this","show_editor","label","_localization2","workflow_mode","click","keydown","$activator","render","self","_workflowTemplate","_defaultTemplate","hiddenUntilActivated","placeholder","width","tags","_getTagsUsed","$el","startsWith","tag","slice","_nameToHash","_setUpBehaviors","_hashToName","_renderEditor","join","_renderTags","e","hideEditor","showEditor","which","tagsToCSV","model","get","renderedArray","_","each","renderString","indexOf","length","push","tagsArray","isArray","isEmpty","map","escape","sort","$input","find","Galaxy","user","on","event","val","save","added","_addNewTagToTagsUsed","text","newTag","contains","tagsUsed","set","remove","stopListening","prototype","call","toString"],"mappings":"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","file":"../../scripts/mvc/tag.js","sourcesContent":["import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n// =============================================================================\n/** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\nvar TagsEditor = Backbone.View\n    .extend(baseMVC.LoggableMixin)\n    .extend(baseMVC.HiddenUntilActivatedViewMixin)\n    .extend({\n        tagName: \"div\",\n        className: \"tags-display\",\n        select_width: \"100%\",\n        events: {},\n\n        /** Set up listeners, parse options */\n        initialize: function(options) {\n            //console.debug( this, options );\n            // only listen to the model only for changes to tags - re-render\n            this.show_editor = false;\n            if (options.usePrompt === false) {\n                this.label = \"\";\n            } else {\n                this.label = '<label class=\"prompt\">' + _l(\"Tags\") + \"</label>\";\n            }\n            this.workflow_mode = options.workflow_mode || false;\n            if (this.workflow_mode) {\n                this.events.click = \"showEditor\";\n                this.events.keydown = \"keydownHandler\";\n            }\n            this.hiddenUntilActivated(options.$activator, options);\n        },\n\n        /** Build the DOM elements, call select to on the created input, and set up behaviors */\n        render: function() {\n            var self = this;\n            if (this.workflow_mode) {\n                this.$el.html(this._workflowTemplate());\n            } else {\n                this.$el.html(this._defaultTemplate());\n            }\n            this.$input().select2({\n                placeholder: \"Add tags\",\n                width: this.workflow_mode ? this.width : this.select_width,\n                tags: function() {\n                    // initialize possible tags in the dropdown based on all the tags the user has used so far\n                    return self._getTagsUsed();\n                }\n            });\n\n            this._setUpBehaviors();\n            return this;\n        },\n\n        _hashToName: function(tag) {\n            if (tag.startsWith(\"#\")) {\n                return \"name:\" + tag.slice(1);\n            }\n            return tag;\n        },\n\n        _nameToHash: function(tag) {\n            if (tag.startsWith(\"name:\")) {\n                tag = \"#\" + tag.slice(5);\n            }\n            return tag;\n        },\n\n        /** @returns {String} the html text used to build the view's DOM */\n        _defaultTemplate: function() {\n            return [this.label, this._renderEditor()].join(\"\");\n        },\n\n        _workflowTemplate: function() {\n            // Shows labels by default, event handler controls whether we show tags or editor\n            return [\n                this.show_editor ? this._renderEditor() : this._renderTags()\n            ].join(\" \");\n        },\n\n        keydownHandler: function(e) {\n            switch (e.which) {\n                // esc\n                case 27:\n                    // hide the tag editor when pressing escape\n                    this.hideEditor();\n                    break;\n            }\n        },\n\n        showEditor: function() {\n            this.show_editor = true;\n            this.render();\n        },\n\n        hideEditor: function() {\n            this.show_editor = false;\n            this.render();\n        },\n\n        _renderEditor: function() {\n            // set up initial tags by adding as CSV to input vals (necc. to init select2)\n            return (\n                '<input class=\"tags-input\" value=\"' + this.tagsToCSV() + '\"/>'\n            );\n        },\n\n        _renderTags: function() {\n            var tags = this.model.get(\"tags\");\n            var addButton = \"static/images/fugue/tag--plus.png\";\n            var renderedArray = [];\n            _.each(tags, function(tag) {\n                tag = tag.indexOf(\"name:\") == 0 ? tag.slice(5) : tag;\n                var renderString =\n                    '<span class=\"label label-info\">' + tag + \"</span>\";\n                renderedArray.push(renderString);\n            });\n            if (renderedArray.length === 0) {\n                // If there are no tags to render we just show the add-tag-button\n                renderedArray.push(\n                    \"<img src=\" +\n                        addButton +\n                        ' class=\"add-tag-button\" title=\"Add tags\"/>'\n                );\n            }\n            return renderedArray.join(\" \");\n        },\n\n        /** @returns {String} the sorted, comma-separated tags from the model */\n        tagsToCSV: function() {\n            var self = this;\n            var tagsArray = this.model.get(\"tags\");\n            if (!_.isArray(tagsArray) || _.isEmpty(tagsArray)) {\n                return \"\";\n            }\n            return tagsArray\n                .map(function(tag) {\n                    return _.escape(self._nameToHash(tag));\n                })\n                .sort()\n                .join(\",\");\n        },\n\n        /** @returns {jQuery} the input for this view */\n        $input: function() {\n            return this.$el.find(\"input.tags-input\");\n        },\n\n        /** @returns {String[]} all tags used by the current user */\n        _getTagsUsed: function() {\n            //TODO: global\n            var self = this;\n            return _.map(Galaxy.user.get(\"tags_used\"), self._nameToHash);\n        },\n\n        /** set up any event listeners on the view's DOM (mostly handled by select2) */\n        _setUpBehaviors: function() {\n            var self = this;\n            this.$input().on(\"change\", function(event) {\n                // Modify any 'hashtag' 'nametags'\n                event.val = _.map(event.val, self._hashToName);\n                // save the model's tags in either remove or added event\n                self.model.save({ tags: event.val });\n                // if it's new, add the tag to the users tags\n                if (event.added) {\n                    //??: solve weird behavior in FF on test.galaxyproject.org where\n                    //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                    self._addNewTagToTagsUsed(event.added.text + \"\");\n                }\n            });\n        },\n\n        /** add a new tag (if not already there) to the list of all tags used by the user\n     *  @param {String} newTag  the tag to add to the list of used\n     */\n        _addNewTagToTagsUsed: function(newTag) {\n            //TODO: global\n            var tagsUsed = Galaxy.user.get(\"tags_used\");\n            if (!_.contains(tagsUsed, newTag)) {\n                tagsUsed.push(newTag);\n                tagsUsed.sort();\n                Galaxy.user.set(\"tags_used\", tagsUsed);\n            }\n        },\n\n        /** shut down event listeners and remove this view's DOM */\n        remove: function() {\n            this.$input.off();\n            this.stopListening(this.model);\n            Backbone.View.prototype.remove.call(this);\n        },\n\n        /** string rep */\n        toString: function() {\n            return [\"TagsEditor(\", this.model + \"\", \")\"].join(\"\");\n        }\n    });\n\nexport default {\n    TagsEditor: TagsEditor\n};\n"]}