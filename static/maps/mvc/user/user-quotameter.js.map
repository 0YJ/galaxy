{"version":3,"sources":["mvc/user/user-quotameter.js"],"names":["UserQuotaMeter","Backbone","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","options","logNamespace","errorAtPercent","initialize","this","log","_","model","render","update","loadFromApi","isOverQuota","get","_render_quota","modelJson","toJSON","percent","quota_percent","$meter","$","_templateQuotaMeter","$bar","find","attr","css","warnAtPercent","trigger","_render_usage","usage","_templateUsage","meterHtml","undefined","$el","html","tooltip","data","nice_total_disk_usage","_localization2","join","toString"],"mappings":"qOAWIA,EAAiBC,SAASC,KAAKC,OAAOC,EAAAC,QAAQC,eAAeH,QAEzDI,cAVW,OAaXC,SAbJC,cAAe,GACnBC,eAAA,KAkBQC,WAAY,SAASH,GACjBI,KAAKC,IAAID,KAAO,eAAgBJ,GAChCM,EAAEX,OAAOS,KAAKJ,QAASA,GAX3BD,KAAAA,SAeQK,KAAKG,MAbb,+CACAP,KAASQ,SAKTC,OAAA,SAAAT,GAGIM,OAFJH,KAAAA,IAAYC,KAAA,yBAAkBJ,GAC1BI,KAAKC,MAAIK,YAAON,KAAAG,MAAgBP,IAAAA,MAAhCA,GACEL,MAUNgB,YAAA,WACAF,OACI,OAAAL,KAASG,MAAAK,IAAO,kBAChBR,KAAKG,MAAMG,IAAAA,kBAA2BN,KAAtCJ,QAAAE,gBAsBJW,cAAe,WACX,IAAIC,EAAYV,KAAKG,MAAMQ,SAEvBC,EAAUF,EAAUG,cAEpBC,EAASC,EAAEf,KAAKgB,oBAAoBN,IACpCO,EAAOH,EAAOI,KAAK,iBAenB,OAnBAlB,KAAAO,eAUAU,EAAKE,KAAK,QAAS,oCARnBL,EAAAI,KAAA,qBAAAE,IAAA,QAAA,SAEAH,KAAAA,QAAOH,aAAYJ,IAGvBE,GAAAZ,KAAAJ,QAAAyB,eAEIJ,EAAAE,KAAA,QAAA,qCAEAL,KAAAA,QAAY,sCAAkCJ,KAI9CO,EAAAE,KAAA,QAAA,qCAEAnB,KAAAsB,QAAA,6BAAAZ,IAEAI,GAOAS,cAAKD,WAET,IAAAE,EAAOV,EAAPd,KAAAyB,eAAAzB,KAAAG,MAAAQ,WAWA,OAxF+BX,KAAAC,IAAAD,KAAA,oBAAAwB,GAwFxBA,GAFPpB,OAAIoB,WAEJ,IAAAE,EAAA,KA+BA,OA5BJ1B,KAAAC,IAUQD,KAAO,wBACPA,KAAKG,MAAMK,IAAI,kBAHnBkB,EAHA,OAAA1B,KAAAG,MAAAK,IAAA,uBACAmB,IAAID,KAAAA,MAAAA,IAAY,iBAEhB1B,KAAAuB,gBAagBvB,KAAKS,gBAEjBT,KAAA4B,IAAAC,KAAAH,GACH1B,KAAA4B,IAAAV,KAAA,qBAAAY,UAIM9B,MAAPgB,oBAAA,SAAAe,GAvH+B,OA4H3B,sDAFRf,2CACIe,EACIlB,cA5H2B,YAgI3B,uEAeRY,EAAAA,sBAEQ,iBAjJ2BM,EAAAC,sBAoIrB,oDAuBJ,KACN,EAAAC,EAAAxC,SAAO,SACV,IA9JTsC,EAAAlB,cA0IgB,IAwBhB,SAtBgB,UAwBZzB,KAAAA,KApBIqC,eAAgB,SAASM,GACrB,OACI,mFACA,yJACAA,EAAKC,uBACC,EAAAC,EAAAxC,SAAG,UAAYsC,EAAKC,sBACpB,GACN,SACA,UACFE,KAAK,KAGXC,SAAU,WACN,MAAO,kBAAoBnC,KAAKG,MAAQ,kBAOhDf,eAAgBA","file":"../../../scripts/mvc/user/user-quotameter.js","sourcesContent":["import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"user\";\n//==============================================================================\n/** @class View to display a user's disk/storage usage\n *      either as a progress bar representing the percentage of a quota used\n *      or a simple text element displaying the human readable size used.\n *  @name UserQuotaMeter\n *  @augments Backbone.View\n */\nvar UserQuotaMeter = Backbone.View.extend(baseMVC.LoggableMixin).extend(\n    /** @lends UserQuotaMeter.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** Defaults for optional settings passed to initialize */\n        options: {\n            warnAtPercent: 85,\n            errorAtPercent: 100\n        },\n\n        /** Set up, accept options, and bind events */\n        initialize: function(options) {\n            this.log(this + \".initialize:\", options);\n            _.extend(this.options, options);\n\n            //this.bind( 'all', function( event, data ){ this.log( this + ' event:', event, data ); }, this );\n            this.listenTo(\n                this.model,\n                \"change:quota_percent change:total_disk_usage\",\n                this.render\n            );\n        },\n\n        /** Re-load user model data from the api */\n        update: function(options) {\n            this.log(this + \" updating user data...\", options);\n            this.model.loadFromApi(this.model.get(\"id\"), options);\n            return this;\n        },\n\n        /** Is the user over their quota (if there is one)?\n     * @returns {Boolean} true if over quota, false if no quota or under quota\n     */\n        isOverQuota: function() {\n            return (\n                this.model.get(\"quota_percent\") !== null &&\n                this.model.get(\"quota_percent\") >= this.options.errorAtPercent\n            );\n        },\n\n        /** Render the meter when they have an applicable quota. Will render as a progress bar\n     *      with their percentage of that quota in text over the bar.\n     *  @fires quota:over when user is over quota (>= this.errorAtPercent)\n     *  @fires quota:under when user is under quota\n     *  @fires quota:under:approaching when user is >= this.warnAtPercent of their quota\n     *  @fires quota:under:ok when user is below this.warnAtPercent\n     *  @returns {jQuery} the rendered meter\n     */\n        _render_quota: function() {\n            var modelJson = this.model.toJSON(),\n                //prevPercent = this.model.previous( 'quota_percent' ),\n                percent = modelJson.quota_percent,\n                //meter = $( UserQuotaMeter.templates.quota( modelJson ) );\n                $meter = $(this._templateQuotaMeter(modelJson)),\n                $bar = $meter.find(\".progress-bar\");\n            //this.log( this + '.rendering quota, percent:', percent, 'meter:', meter );\n\n            // OVER QUOTA: color the quota bar and show the quota error message\n            if (this.isOverQuota()) {\n                //this.log( '\\t over quota' );\n                $bar.attr(\"class\", \"progress-bar progress-bar-danger\");\n                $meter.find(\".quota-meter-text\").css(\"color\", \"white\");\n                //TODO: only trigger event if state has changed\n                this.trigger(\"quota:over\", modelJson);\n\n                // APPROACHING QUOTA: color the quota bar\n            } else if (percent >= this.options.warnAtPercent) {\n                //this.log( '\\t approaching quota' );\n                $bar.attr(\"class\", \"progress-bar progress-bar-warning\");\n                //TODO: only trigger event if state has changed\n                this.trigger(\"quota:under quota:under:approaching\", modelJson);\n\n                // otherwise, hide/don't use the msg box\n            } else {\n                $bar.attr(\"class\", \"progress-bar progress-bar-success\");\n                //TODO: only trigger event if state has changed\n                this.trigger(\"quota:under quota:under:ok\", modelJson);\n            }\n            return $meter;\n        },\n\n        /** Render the meter when the user has NO applicable quota. Will render as text\n     *      showing the human readable sum storage their data is using.\n     *  @returns {jQuery} the rendered text\n     */\n        _render_usage: function() {\n            //var usage = $( UserQuotaMeter.templates.usage( this.model.toJSON() ) );\n            var usage = $(this._templateUsage(this.model.toJSON()));\n            this.log(this + \".rendering usage:\", usage);\n            return usage;\n        },\n\n        /** Render either the quota percentage meter or the human readable disk usage\n     *      depending on whether the user model has quota info (quota_percent === null -> no quota)\n     *  @returns {Object} this UserQuotaMeter\n     */\n        render: function() {\n            //this.log( this + '.rendering' );\n            var meterHtml = null;\n\n            // no quota on server ('quota_percent' === null (can be valid at 0)), show usage instead\n            this.log(\n                this + \".model.quota_percent:\",\n                this.model.get(\"quota_percent\")\n            );\n            if (\n                this.model.get(\"quota_percent\") === null ||\n                this.model.get(\"quota_percent\") === undefined\n            ) {\n                meterHtml = this._render_usage();\n\n                // otherwise, render percent of quota (and warning, error)\n            } else {\n                meterHtml = this._render_quota();\n                //TODO: add the original text for unregistered quotas\n                //tooltip = \"Your disk quota is %s.  You can increase your quota by registering a Galaxy account.\"\n            }\n\n            this.$el.html(meterHtml);\n            this.$el.find(\".quota-meter-text\").tooltip();\n            return this;\n        },\n\n        _templateQuotaMeter: function(data) {\n            return [\n                '<div id=\"quota-meter\" class=\"quota-meter progress\">',\n                '<div class=\"progress-bar\" style=\"width: ',\n                data.quota_percent,\n                '%\"></div>',\n                '<div class=\"quota-meter-text\" data-placement=\"left\" style=\"top: 6px\"',\n                data.nice_total_disk_usage\n                    ? ' title=\"Using ' +\n                      data.nice_total_disk_usage +\n                      '.  This value is recalculated when you log out.\">'\n                    : \">\",\n                _l(\"Using\"),\n                \" \",\n                data.quota_percent,\n                \"%\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        _templateUsage: function(data) {\n            return [\n                '<div id=\"quota-meter\" class=\"quota-meter\" style=\"background-color: transparent\">',\n                '<div class=\"quota-meter-text\" data-placement=\"left\" data-original-title=\"This value is recalculated when you log out.\" style=\"top: 6px; color: white\">',\n                data.nice_total_disk_usage\n                    ? _l(\"Using \") + data.nice_total_disk_usage\n                    : \"\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        toString: function() {\n            return \"UserQuotaMeter(\" + this.model + \")\";\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    UserQuotaMeter: UserQuotaMeter\n};\n"]}