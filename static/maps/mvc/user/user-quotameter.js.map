{"version":3,"sources":["mvc/user/user-quotameter.js"],"names":["define","baseMVC","_l","UserQuotaMeter","Backbone","View","extend","LoggableMixin","_logNamespace","warnAtPercent","errorAtPercent","initialize","log","options","_","this","listenTo","model","render","update","loadFromApi","get","isOverQuota","_render_quota","modelJson","toJSON","percent","quota_percent","$meter","$","_templateQuotaMeter","$bar","find","attr","css","trigger","_render_usage","usage","_templateUsage","meterHtml","undefined","$el","tooltip","data","nice_total_disk_usage","toString","join"],"mappings":"aAAAA,QACI,eADJA,sBAIA,SAAAC,EAAAC,GAuJA,OACIC,eA7IJC,SAAAC,KAAAC,OAAsCL,EAAAM,eAAAD,QAClCE,cATJ,OAaQC,SACAC,cAAAA,GAFMA,eAJwB,KAW9BC,WAAKC,SAAKC,GACVC,KAAAA,IAAER,KAAQ,eAAcO,GAAxBC,EAAER,OAAQS,KAAKF,QAASA,GAI3BE,KAhBiCC,SAAAD,KAAAE,MAAA,+CAAAF,KAAAG,SAoB9BC,OAAA,SAAUN,GAGb,OAFGE,KAAAH,IAAKK,KAAMG,yBAA6BP,GACxCE,KAAAE,MAAOG,YAAPL,KAAAE,MAAAI,IAAA,MAAAR,GAtB8BE,MA6B9BO,YAAA,WAEH,OA/BiC,OAAAP,KAAAE,MAAAI,IAAA,kBA8BrBN,KAAKE,MAAMI,IAAK,kBAAqBN,KAAKF,QAAQH,gBAW/Da,cAAgB,WAER,IAAAC,EAAAT,KAAAE,MAAAQ,SACAC,EAAUF,EAAUG,cAEpBC,EAASC,EAAGd,KAAKe,oBAAqBN,IAJ1CO,EAKIA,EAAOH,KAAOI,iBAwBlB,OApBAjB,KAAIO,eAEAS,EAAAA,KAAKE,QAAM,oCACXL,EAAAA,KAAOI,qBAAPE,IAAA,QAAA,SAEAnB,KAAAoB,QAAKA,aAASX,IAGXE,GAAIA,KAAWb,QAAKA,eAEvBkB,EAAAA,KAAKE,QAAM,qCAEXlB,KAAAoB,QAAKA,sCAASX,KAIdO,EAAAA,KAAKE,QAAM,qCAEXlB,KAAAoB,QAAKA,6BAASX,IAElBI,GAOJQ,cAAAA,WAEI,IAAAC,EAAIA,EAAAA,KAAWC,eAAKA,KAAgBrB,MAAKA,WAEzC,OADAF,KAAAH,IAAKA,KAAK,oBAAOyB,GACjBA,GAOJnB,OAAAA,WAEI,IAAAqB,EAAIA,KAkBP,OAfGxB,KAAAH,IAAKA,KAAK,wBAAOG,KAAyBE,MAAKA,IAAMI,kBAGjDkB,EAFwC,OAA5CxB,KAAME,MAAKA,IAAL,uBAEFuB,IAAAD,KAAAA,MAAAA,IAAY,iBAAAxB,KAAKqB,gBAKjBrB,KAAAQ,gBAKJR,KAAA0B,IAAKA,KAAIT,GACTjB,KAAA0B,IAAAT,KAAA,qBAAAU,UA5G8B3B,MAgH9Be,oBACI,SAAAa,GAQP,OARO,sDAURL,2CAAiCK,EAAAhB,cAAA,YAC7B,uEA5H8BgB,EAAAC,sBAAA,iBAAAD,EAAAC,sBAAA,oDAAA,IAqHlB1C,EAAI,SAAW,IAAKyC,EAAKhB,cAAe,IAgBxDkB,SACI,UACHC,KAAA,KAILR,eAAA,SAAAK,GACA,OACIxC,mFADJ,yJA3JAwC,EAAAC,sBAAA1C,EAAA,UAAAyC,EAAAC,sBAAA,GA+IgB,SACJ,UACFE,KAAM,KAGZD,SAAW,WACP,MAAO,kBAAoB9B,KAAKE,MAAQ","file":"../../../scripts/mvc/user/user-quotameter.js","sourcesContent":["define([\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( baseMVC, _l ){\n'use strict';\n\nvar logNamespace = 'user';\n//==============================================================================\n/** @class View to display a user's disk/storage usage\n *      either as a progress bar representing the percentage of a quota used\n *      or a simple text element displaying the human readable size used.\n *  @name UserQuotaMeter\n *  @augments Backbone.View\n */\nvar UserQuotaMeter = Backbone.View.extend( baseMVC.LoggableMixin ).extend(\n/** @lends UserQuotaMeter.prototype */{\n    _logNamespace : logNamespace,\n\n    /** Defaults for optional settings passed to initialize */\n    options : {\n        warnAtPercent   : 85,\n        errorAtPercent  : 100\n    },\n\n    /** Set up, accept options, and bind events */\n    initialize : function( options ){\n        this.log( this + '.initialize:', options );\n        _.extend( this.options, options );\n\n        //this.bind( 'all', function( event, data ){ this.log( this + ' event:', event, data ); }, this );\n        this.listenTo( this.model, 'change:quota_percent change:total_disk_usage', this.render );\n    },\n\n    /** Re-load user model data from the api */\n    update : function( options ){\n        this.log( this + ' updating user data...', options );\n        this.model.loadFromApi( this.model.get( 'id' ), options );\n        return this;\n    },\n\n    /** Is the user over their quota (if there is one)?\n     * @returns {Boolean} true if over quota, false if no quota or under quota\n     */\n    isOverQuota : function(){\n        return ( this.model.get( 'quota_percent' ) !== null\n              && this.model.get( 'quota_percent' ) >= this.options.errorAtPercent );\n    },\n\n    /** Render the meter when they have an applicable quota. Will render as a progress bar\n     *      with their percentage of that quota in text over the bar.\n     *  @fires quota:over when user is over quota (>= this.errorAtPercent)\n     *  @fires quota:under when user is under quota\n     *  @fires quota:under:approaching when user is >= this.warnAtPercent of their quota\n     *  @fires quota:under:ok when user is below this.warnAtPercent\n     *  @returns {jQuery} the rendered meter\n     */\n    _render_quota : function(){\n        var modelJson = this.model.toJSON(),\n            //prevPercent = this.model.previous( 'quota_percent' ),\n            percent = modelJson.quota_percent,\n            //meter = $( UserQuotaMeter.templates.quota( modelJson ) );\n            $meter = $( this._templateQuotaMeter( modelJson ) ),\n            $bar = $meter.find( '.progress-bar' );\n        //this.log( this + '.rendering quota, percent:', percent, 'meter:', meter );\n\n        // OVER QUOTA: color the quota bar and show the quota error message\n        if( this.isOverQuota() ){\n            //this.log( '\\t over quota' );\n            $bar.attr( 'class', 'progress-bar progress-bar-danger' );\n            $meter.find( '.quota-meter-text' ).css( 'color', 'white' );\n            //TODO: only trigger event if state has changed\n            this.trigger( 'quota:over', modelJson );\n\n        // APPROACHING QUOTA: color the quota bar\n        } else if( percent >= this.options.warnAtPercent ){\n            //this.log( '\\t approaching quota' );\n            $bar.attr( 'class', 'progress-bar progress-bar-warning' );\n            //TODO: only trigger event if state has changed\n            this.trigger( 'quota:under quota:under:approaching', modelJson );\n\n        // otherwise, hide/don't use the msg box\n        } else {\n            $bar.attr( 'class', 'progress-bar progress-bar-success' );\n            //TODO: only trigger event if state has changed\n            this.trigger( 'quota:under quota:under:ok', modelJson );\n        }\n        return $meter;\n    },\n\n    /** Render the meter when the user has NO applicable quota. Will render as text\n     *      showing the human readable sum storage their data is using.\n     *  @returns {jQuery} the rendered text\n     */\n    _render_usage : function(){\n        //var usage = $( UserQuotaMeter.templates.usage( this.model.toJSON() ) );\n        var usage = $( this._templateUsage( this.model.toJSON() ) );\n        this.log( this + '.rendering usage:', usage );\n        return usage;\n    },\n\n    /** Render either the quota percentage meter or the human readable disk usage\n     *      depending on whether the user model has quota info (quota_percent === null -> no quota)\n     *  @returns {Object} this UserQuotaMeter\n     */\n    render : function(){\n        //this.log( this + '.rendering' );\n        var meterHtml = null;\n\n        // no quota on server ('quota_percent' === null (can be valid at 0)), show usage instead\n        this.log( this + '.model.quota_percent:', this.model.get( 'quota_percent' ) );\n        if( ( this.model.get( 'quota_percent' ) === null )\n        ||  ( this.model.get( 'quota_percent' ) === undefined ) ){\n            meterHtml = this._render_usage();\n\n        // otherwise, render percent of quota (and warning, error)\n        } else {\n            meterHtml = this._render_quota();\n            //TODO: add the original text for unregistered quotas\n            //tooltip = \"Your disk quota is %s.  You can increase your quota by registering a Galaxy account.\"\n        }\n\n        this.$el.html( meterHtml );\n        this.$el.find( '.quota-meter-text' ).tooltip();\n        return this;\n    },\n\n    _templateQuotaMeter : function( data ){\n        return [\n            '<div id=\"quota-meter\" class=\"quota-meter progress\">',\n                '<div class=\"progress-bar\" style=\"width: ', data.quota_percent, '%\"></div>',\n                '<div class=\"quota-meter-text\" data-placement=\"left\" style=\"top: 6px\"',\n                    (( data.nice_total_disk_usage )?( ' title=\"Using ' + data.nice_total_disk_usage + '.  This value is recalculated when you log out.\">' ):( '>' )),\n                    _l( 'Using' ), ' ', data.quota_percent, '%',\n                '</div>',\n            '</div>'\n        ].join( '' );\n    },\n\n    _templateUsage : function( data ){\n        return [\n            '<div id=\"quota-meter\" class=\"quota-meter\" style=\"background-color: transparent\">',\n                '<div class=\"quota-meter-text\" data-placement=\"left\" data-original-title=\"This value is recalculated when you log out.\" style=\"top: 6px; color: white\">',\n                    (( data.nice_total_disk_usage )?( _l( 'Using ' ) + data.nice_total_disk_usage ):( '' )),\n                '</div>',\n            '</div>'\n        ].join( '' );\n    },\n\n    toString : function(){\n        return 'UserQuotaMeter(' + this.model + ')';\n    }\n});\n\n\n//==============================================================================\nreturn {\n    UserQuotaMeter : UserQuotaMeter\n};});\n"]}