{"version":3,"sources":["mvc/user/user-model.js"],"names":["User","_backbone2","default","Model","extend","_baseMvc2","LoggableMixin","_logNamespace","urlRoot","Galaxy","root","defaults","id","username","_localization2","total_disk_usage","quota_percent","is_admin","initialize","data","this","log","model","resp","email","changes","isAnonymous","get","isAdmin","loadFromApi","idOrCurrent","options","CURRENT_ID_STR","success","newModel","response","trigger","userFn","prototype","fetch","call","key","indexOf","sessionStorage","removeItem","toString","userInfo","clearSessionStorage","push","join","getCurrentUserFromApi","currentUser"],"mappings":"4PAUIA,EAAOC,EAAAC,QAASC,MAAMC,OAAOC,EAAAH,QAAQI,eAAeF,QAEhDG,cAPW,OAUXC,QAAS,WACL,OAAOC,OAAOC,KAAO,aATjCC,UAiBYC,GAAI,KACJC,SAAU,KAAM,EAAAC,EAAAZ,SAAG,kBAAoB,IAf/CF,MAAO,GACPe,iBAAA,EACIR,sBADyB,GAkBrBS,cAAe,KAfnBC,UAAA,GAsBAC,WAAY,SAASC,GACjBC,KAAKC,IAAI,mBAAoBF,GAdjCR,KAAAA,GAAU,SAAA,SAAAW,EAA6BC,GAC/BH,KAD+BC,IAAAD,KAAA,eAAAE,EAAAC,KAGnCC,KAAAA,GAAO,SAH4B,SAAAF,EAAAH,GAInCJ,KAAAA,IAAAA,KAJmC,gBAAAO,EAAAH,EAAAM,YAAAC,YAZd,WAqCrB,OAAQN,KAAKO,IAAI,UAGrBC,QAAS,WAfTV,OAAAA,KAAYS,IAAA,aA0BZE,YAAa,SAASC,EAAaC,GAfnCL,EAAaI,GAAA9B,EAAWgC,eAmBpB,IAAIV,EAAQF,KAfhBQ,GAxCyBG,EAAAA,OAwChBE,QAcLF,OAKAA,EAAQE,QAAU,SAASC,EAAUC,GAfzCb,EAAAc,QAAA,SAAAF,EAAAC,GAiBYE,GACAA,EAAOH,EAAUC,IAX7BN,IAAa7B,EAAAgC,iBACTF,EAAAA,IAAcA,KAAAA,QAAe9B,IAAKgC,EAAAA,gBAElCD,EAAAA,QAAUA,MAAWO,UAArBC,MAAAC,KAAApB,KAAAW,IAKAA,oBAAA,WACIT,IAAAA,IAAAA,KAAMc,eAGL,IAAAK,EAAAC,QAAA,YAJLC,eAAAC,WAAAH,GAsBuB,kBAARA,GAffE,eAAAC,WAAAH,IAsBJI,SAAU,WAfV,IAAAC,GAAA1B,KAAAO,IAAA,aAKQ,OAYAP,KAAKO,IAAI,QAfjBoB,EAAAA,QAAqB3B,KAAAO,IAAA,OACjBmB,EAAAE,KAAgBL,KAAAA,IAAAA,WAEZ,QAAAG,EAAAG,KAAA,KAAA,OAMHjD,EAAAgC,eAAA,UAGLhC,EAAAkD,sBAAA,SAAAnB,GACAc,IAAAA,EAAU,IAAA7C,EAEN,OADAmD,EAAIL,YAAY9C,EAAK2B,eAArBI,GACAoB,GAIOlD,EAAAC,QAAU4C,WAASG,OAAnB5C,EAAAH,QAAPI,eAAAF,QACHkB,MAAAtB,EA/FwBQ,QADjC,WAkHQ,OAAOC,OAAOC,KAAO,0BARzByC,KAAAA","file":"../../../scripts/mvc/user/user-model.js","sourcesContent":["import _ from \"libs/underscore\";\nimport Backbone from \"libs/backbone\";\nimport baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\nvar logNamespace = \"user\";\n//==============================================================================\n/** @class Model for a Galaxy user (including anonymous users).\n *  @name User\n */\nvar User = Backbone.Model.extend(baseMVC.LoggableMixin).extend(\n    /** @lends User.prototype */ {\n        _logNamespace: logNamespace,\n\n        /** API location for this resource */\n        urlRoot: function() {\n            return Galaxy.root + \"api/users\";\n        },\n\n        /** Model defaults\n     *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n     *      a safer method is if( !user.get( 'email' ) ) -> anon user\n     */\n        defaults: /** @lends User.prototype */ {\n            id: null,\n            username: \"(\" + _l(\"anonymous user\") + \")\",\n            email: \"\",\n            total_disk_usage: 0,\n            nice_total_disk_usage: \"\",\n            quota_percent: null,\n            is_admin: false\n        },\n\n        /** Set up and bind events\n     *  @param {Object} data Initial model data.\n     */\n        initialize: function(data) {\n            this.log(\"User.initialize:\", data);\n\n            this.on(\"loaded\", function(model, resp) {\n                this.log(this + \" has loaded:\", model, resp);\n            });\n            this.on(\"change\", function(model, data) {\n                this.log(this + \" has changed:\", model, data.changes);\n            });\n        },\n\n        isAnonymous: function() {\n            return !this.get(\"email\");\n        },\n\n        isAdmin: function() {\n            return this.get(\"is_admin\");\n        },\n\n        /** Load a user with the API using an id.\n     *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n     *      (e.g. 'current') and the API will return the current transaction's user data.\n     *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n     *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n     *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n     */\n        loadFromApi: function(idOrCurrent, options) {\n            idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\n            options = options || {};\n            var model = this,\n                userFn = options.success;\n\n            /** @ignore */\n            options.success = function(newModel, response) {\n                model.trigger(\"loaded\", newModel, response);\n                if (userFn) {\n                    userFn(newModel, response);\n                }\n            };\n\n            // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n            if (idOrCurrent === User.CURRENT_ID_STR) {\n                options.url = this.urlRoot + \"/\" + User.CURRENT_ID_STR;\n            }\n            return Backbone.Model.prototype.fetch.call(this, options);\n        },\n\n        /** Clears all data from the sessionStorage.\n     */\n        clearSessionStorage: function() {\n            for (var key in sessionStorage) {\n                //TODO: store these under the user key so we don't have to do this\n                // currently only history\n                if (key.indexOf(\"history:\") === 0) {\n                    sessionStorage.removeItem(key);\n                } else if (key === \"history-panel\") {\n                    sessionStorage.removeItem(key);\n                }\n            }\n        },\n\n        /** string representation */\n        toString: function() {\n            var userInfo = [this.get(\"username\")];\n            if (this.get(\"id\")) {\n                userInfo.unshift(this.get(\"id\"));\n                userInfo.push(this.get(\"email\"));\n            }\n            return \"User(\" + userInfo.join(\":\") + \")\";\n        }\n    }\n);\n\n// string to send to tell server to return this transaction's user (see api/users.py)\nUser.CURRENT_ID_STR = \"current\";\n\n// class method to load the current user via the api and return that model\nUser.getCurrentUserFromApi = function(options) {\n    var currentUser = new User();\n    currentUser.loadFromApi(User.CURRENT_ID_STR, options);\n    return currentUser;\n};\n\n// (stub) collection for users (shouldn't be common unless admin UI)\nvar UserCollection = Backbone.Collection.extend(baseMVC.LoggableMixin).extend({\n    model: User,\n    urlRoot: function() {\n        return Galaxy.root + \"api/users\";\n    }\n    //logger  : console,\n});\n\n//==============================================================================\nexport default {\n    User: User\n};\n"]}