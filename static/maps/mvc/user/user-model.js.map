{"version":3,"sources":["mvc/user/user-model.js"],"names":["define","logNamespace","baseMVC","_l","User","Backbone","Model","extend","LoggableMixin","urlRoot","Galaxy","root","id","username","email","total_disk_usage","nice_total_disk_usage","quota_percent","is_admin","initialize","log","data","this","on","model","resp","changes","isAnonymous","get","isAdmin","loadFromApi","idOrCurrent","options","CURRENT_ID_STR","userFn","success","response","trigger","newModel","url","prototype","fetch","call","clearSessionStorage","key","sessionStorage","indexOf","removeItem","toString","userInfo","unshift","push","join","getCurrentUserFromApi","currentUser","Collection"],"mappings":"aAAAA,QACI,kBADJA,gBAMA,eAFI,sBAIJ,SAAIC,EAAAA,EAAeC,EAAnBC,GAAA,IAKIC,EAAOC,EAASC,MAAMC,OAAQL,EAAQM,eAAgBD,QAKtDE,cAVe,OAUfA,QAAU,WAAY,OAAOC,OAAOC,KAAO,aAOvCC,UACAC,GAAoC,KACpCC,SAHmC,IAAAX,EAAA,kBAAA,IAInCY,MAJmC,GAKnCC,iBAAAA,EACAC,sBANmC,GAOnCC,cAA0B,KAPSA,UAVf,GAwBpBC,WAAKC,SAAKC,GAAVC,KAAKF,IAAK,mBAAoBC,GAEcC,KAAAC,GAAA,SAAU,SAAOC,EAAAC,GAAgBD,KAAOC,IAAxCH,KAAA,eAAAE,EAAAC,KAAiDH,KAA7FC,GAAA,SAAA,SAAAC,EAAAH,GAAAC,KAAAF,IAAAE,KAAA,gBAAAE,EAAAH,EAAAK,YACsGC,YAAtG,WACH,OA5BuBL,KAAAM,IAAA,UA+BpBC,QAAA,WACH,OAhCuBP,KAAAM,IAAA,aA6CxBE,YAAc,SAAUC,EAAaC,GACjCD,EAAcA,GAAe3B,EAAK6B,eAAlCF,IAAAA,EAAAA,KAIIG,GALRJ,EAAAA,OAKyBK,QAYrB,OAbAH,EACIE,QAASF,SAAQG,EADrBC,GAKIZ,EAAMa,QAAS,SAAUC,EAAUF,GAFvCF,GAAAA,EAAAI,EAAAF,IAGkBF,IAAQI,EAAAA,iBAAuBN,EAAAO,IAAAjB,KAAAb,QAAA,IAAAL,EAAA6B,gBAO1C5B,EAASC,MAAMkC,UAAUC,MAAMC,KAAMpB,KAAMU,IAAlDW,oBAAOtC,WACV,IA/DuB,IAAAuC,KAAAC,eAuEkB,IAA9BD,EAAIE,QAAS,YAJzBH,eAAsBI,WAAAH,GAEd,kBAAAA,GACAC,eAAAE,WAAAH,IAOHI,SAAA,WACJ,IA9EuBC,GAAA3B,KAAAM,IAAA,aAmFpB,OAAIN,KAAKM,IAAK,QAHlBqB,EAAAC,QAAA5B,KAAAM,IAAA,OACAoB,EAAWG,KAAA7B,KAAAM,IAAA,WAEP,QAAcqB,EAAQG,KAAA,KAAA,OAKzBhD,EAAA6B,eAAA,UAGL7B,EAAAiD,sBAAA,SAAArB,GACA5B,IAAAA,EAAK6B,IAAiB7B,EAEtB,OAGIkD,EAAYxB,YAAa1B,EAAK6B,eAAgBD,GAHlDsB,GAIWA,EAAPC,WAAAhD,OAAAL,EAAAM,eAAAD,QACHiB,MAJDpB,EASIK,QAAU,WAAY,OAAOC,OAAOC,KAAO,eAAc,OACzDP,KAAAA","file":"../../../scripts/mvc/user/user-model.js","sourcesContent":["define([\n    'libs/underscore',\n    'libs/backbone',\n    'mvc/base-mvc',\n    'utils/localization'\n], function( _, Backbone, baseMVC, _l ){\n'use strict';\n\nvar logNamespace = 'user';\n//==============================================================================\n/** @class Model for a Galaxy user (including anonymous users).\n *  @name User\n */\nvar User = Backbone.Model.extend( baseMVC.LoggableMixin ).extend(\n/** @lends User.prototype */{\n    _logNamespace : logNamespace,\n\n    /** API location for this resource */\n    urlRoot : function(){ return Galaxy.root + 'api/users'; },\n\n    /** Model defaults\n     *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n     *      a safer method is if( !user.get( 'email' ) ) -> anon user\n     */\n    defaults : /** @lends User.prototype */{\n        id                      : null,\n        username                : '(' + _l( \"anonymous user\" ) + ')',\n        email                   : \"\",\n        total_disk_usage        : 0,\n        nice_total_disk_usage   : \"\",\n        quota_percent           : null,\n        is_admin                : false\n    },\n\n    /** Set up and bind events\n     *  @param {Object} data Initial model data.\n     */\n    initialize : function( data ){\n        this.log( 'User.initialize:', data );\n\n        this.on( 'loaded', function( model, resp ){ this.log( this + ' has loaded:', model, resp ); });\n        this.on( 'change', function( model, data ){ this.log( this + ' has changed:', model, data.changes ); });\n    },\n\n    isAnonymous : function(){\n        return ( !this.get( 'email' ) );\n    },\n\n    isAdmin : function(){\n        return ( this.get( 'is_admin' ) );\n    },\n\n    /** Load a user with the API using an id.\n     *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n     *      (e.g. 'current') and the API will return the current transaction's user data.\n     *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n     *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n     *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n     */\n    loadFromApi : function( idOrCurrent, options ){\n        idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\n        options = options || {};\n        var model = this,\n            userFn = options.success;\n\n        /** @ignore */\n        options.success = function( newModel, response ){\n            model.trigger( 'loaded', newModel, response );\n            if( userFn ){ userFn( newModel, response ); }\n        };\n\n        // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n        if( idOrCurrent === User.CURRENT_ID_STR ){\n            options.url = this.urlRoot + '/' + User.CURRENT_ID_STR;\n        }\n        return Backbone.Model.prototype.fetch.call( this, options );\n    },\n\n    /** Clears all data from the sessionStorage.\n     */\n    clearSessionStorage : function(){\n        for( var key in sessionStorage ){\n            //TODO: store these under the user key so we don't have to do this\n            // currently only history\n            if( key.indexOf( 'history:' ) === 0 ){\n                sessionStorage.removeItem( key );\n\n            } else if( key === 'history-panel' ){\n                sessionStorage.removeItem( key );\n            }\n        }\n    },\n\n    /** string representation */\n    toString : function(){\n        var userInfo = [ this.get( 'username' ) ];\n        if( this.get( 'id' ) ){\n            userInfo.unshift( this.get( 'id' ) );\n            userInfo.push( this.get( 'email' ) );\n        }\n        return 'User(' + userInfo.join( ':' ) + ')';\n    }\n});\n\n// string to send to tell server to return this transaction's user (see api/users.py)\nUser.CURRENT_ID_STR = 'current';\n\n// class method to load the current user via the api and return that model\nUser.getCurrentUserFromApi = function( options ){\n    var currentUser = new User();\n    currentUser.loadFromApi( User.CURRENT_ID_STR, options );\n    return currentUser;\n};\n\n// (stub) collection for users (shouldn't be common unless admin UI)\nvar UserCollection = Backbone.Collection.extend( baseMVC.LoggableMixin ).extend({\n    model   : User,\n    urlRoot : function(){ return Galaxy.root + 'api/users'; },\n    //logger  : console,\n});\n\n\n//==============================================================================\nreturn {\n    User : User\n};});\n"]}