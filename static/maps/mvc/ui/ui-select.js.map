{"version":3,"sources":["mvc/ui/ui-select.js"],"names":["define","Utils","View","Backbone","extend","optionsDefault","placeholder","css","data","multiple","initialize","options","this","merge","setElement","container","append","$el","select_data","_refresh","value","_setValue","self","onchange","console","log","new_value","before","_getValue","undefined","after","text","select2","disabled","enable","disable","add","push","id","del","index","_getIndex","splice","remove","update","key","select_opt","containerCssClass","minimumInputLength","ajax","dropdownCssClass","escapeMarkup","formatResult","formatSelection","initSelection","selected","_","findIndex","length","_template","initialData"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select.js","sourcesContent":["// dependencies\ndefine([\"utils/utils\"], function(Utils) {\n    /**\n * A plugin for initializing select2 input items.\n * Make sure the select2 library itself is loaded beforehand.\n * Also the element to which select2 will be appended has to \n * be created before select2 initialization (and passed as option).\n */\n    var View = Backbone.View.extend({\n        // options\n        optionsDefault: {\n            css: \"\",\n            placeholder: \"No data available\",\n            data: [],\n            value: null,\n            multiple: false,\n            minimumInputLength: 0,\n            // example format of initial data: \"id:name,55:anotherrole@role.com,27:role@role.com\"\n            initialData: \"\"\n        },\n\n        // initialize\n        initialize: function(options) {\n            // configure options\n            this.options = Utils.merge(options, this.optionsDefault);\n\n            // create new element\n            this.setElement(this._template(this.options));\n\n            // check if container exists\n            if (!this.options.container) {\n                console.log(\n                    \"ui-select::initialize() : container not specified.\"\n                );\n                return;\n            }\n\n            // add to dom\n            this.options.container.append(this.$el);\n\n            // link selection dictionary\n            this.select_data = this.options.data;\n\n            // refresh\n            this._refresh();\n\n            if (!this.options.multiple) {\n                // initial value\n                if (this.options.value) {\n                    this._setValue(this.options.value);\n                }\n\n                // add change event\n                var self = this;\n                if (this.options.onchange) {\n                    this.$el.on(\"change\", function() {\n                        self.options.onchange(self.value());\n                    });\n                }\n            }\n        },\n\n        // value\n        value: function(new_value) {\n            // get current id/value\n            var before = this._getValue();\n\n            // check if new_value is defined\n            if (new_value !== undefined) {\n                this._setValue(new_value);\n            }\n\n            // get current id/value\n            var after = this._getValue();\n\n            // fire onchange\n            if (after != before && this.options.onchange) {\n                this.options.onchange(after);\n            }\n\n            // return current value\n            return after;\n        },\n\n        // label\n        text: function() {\n            return this.$el.select2(\"data\").text;\n        },\n\n        // disabled\n        disabled: function() {\n            return !this.$el.select2(\"enable\");\n        },\n\n        // enable\n        enable: function() {\n            this.$el.select2(\"enable\", true);\n        },\n\n        // disable\n        disable: function() {\n            this.$el.select2(\"enable\", false);\n        },\n\n        // add\n        add: function(options) {\n            // add options\n            this.select_data.push({\n                id: options.id,\n                text: options.text\n            });\n\n            // refresh\n            this._refresh();\n        },\n\n        // remove\n        del: function(id) {\n            // search option\n            var index = this._getIndex(id);\n\n            // check if found\n            if (index != -1) {\n                // remove options\n                this.select_data.splice(index, 1);\n\n                // refresh\n                this._refresh();\n            }\n        },\n\n        // remove\n        remove: function() {\n            this.$el.select2(\"destroy\");\n        },\n\n        // update\n        update: function(options) {\n            // copy options\n            this.select_data = [];\n            for (var key in options.data) {\n                this.select_data.push(options.data[key]);\n            }\n\n            // refresh\n            this._refresh();\n        },\n\n        // refresh\n        _refresh: function() {\n            // add select2 data based on type of input\n            if (!this.options.multiple) {\n                var selected = this._getValue();\n                var select_opt = {\n                    data: this.select_data,\n                    containerCssClass: this.options.css,\n                    placeholder: this.options.placeholder,\n                    dropdownAutoWidth: true\n                };\n                this.$el.select2(select_opt);\n                // select previous value (if exists)\n                this._setValue(selected);\n            } else {\n                var select_opt = {\n                    multiple: this.options.multiple,\n                    containerCssClass: this.options.css,\n                    placeholder: this.options.placeholder,\n                    minimumInputLength: this.options.minimumInputLength,\n                    ajax: this.options.ajax,\n                    dropdownCssClass: this.options.dropdownCssClass,\n                    escapeMarkup: this.options.escapeMarkup,\n                    formatResult: this.options.formatResult,\n                    formatSelection: this.options.formatSelection,\n                    initSelection: this.options.initSelection,\n                    initialData: this.options.initialData\n                };\n                this.$el.select2(select_opt);\n            }\n        },\n\n        // get index\n        _getIndex: function(value) {\n            // returns the index of the searched value\n            _.findIndex(this.select_data, { id: value });\n        },\n\n        // get value\n        _getValue: function() {\n            return this.$el.select2(\"val\");\n        },\n\n        // set value\n        _setValue: function(new_value) {\n            var index = this._getIndex(new_value);\n            if (index == -1) {\n                if (this.select_data.length > 0) {\n                    new_value = this.select_data[0].id;\n                }\n            }\n            this.$el.select2(\"val\", new_value);\n        },\n\n        // element\n        _template: function(options) {\n            return (\n                '<input type=\"hidden\" value=\"' +\n                this.options.initialData +\n                '\"/>'\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n"]}