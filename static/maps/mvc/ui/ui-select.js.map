{"version":3,"sources":["mvc/ui/ui-select.js"],"names":["define","Utils","View","Backbone","extend","optionsDefault","css","placeholder","data","value","multiple","initialData","initialize","options","this","merge","setElement","_template","container","console","log","append","$el","select_data","_refresh","_setValue","self","onchange","new_value","before","_getValue","undefined","after","text","select2","disabled","enable","disable","add","push","id","del","index","_getIndex","splice","remove","update","key","select_opt","containerCssClass","minimumInputLength","ajax","dropdownCssClass","escapeMarkup","formatResult","formatSelection","initSelection","selected","_","findIndex","length"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select.js","sourcesContent":["// dependencies\ndefine(['utils/utils'], function(Utils) {\n\n/**\n * A plugin for initializing select2 input items.\n * Make sure the select2 library itself is loaded beforehand.\n * Also the element to which select2 will be appended has to \n * be created before select2 initialization (and passed as option).\n */\nvar View = Backbone.View.extend(\n{\n    // options\n    optionsDefault: {\n        css                 : '',\n        placeholder         : 'No data available',\n        data                : [],\n        value               : null,\n        multiple            : false,\n        minimumInputLength  : 0,\n        // example format of initial data: \"id:name,55:anotherrole@role.com,27:role@role.com\"\n        initialData         : ''\n    },\n    \n    // initialize\n    initialize : function(options) {\n        // configure options\n        this.options = Utils.merge(options, this.optionsDefault);\n        \n        // create new element\n        this.setElement(this._template(this.options));\n        \n        // check if container exists\n        if (!this.options.container) {\n            console.log('ui-select::initialize() : container not specified.');\n            return;\n        }\n        \n        // add to dom\n        this.options.container.append(this.$el);\n        \n        // link selection dictionary\n        this.select_data = this.options.data;\n        \n        // refresh\n        this._refresh();\n        \n        if (!this.options.multiple){\n            // initial value\n            if (this.options.value) {\n                this._setValue(this.options.value);\n            }\n            \n            // add change event\n            var self = this;\n            if (this.options.onchange) {\n                this.$el.on('change', function() {\n                    self.options.onchange(self.value());\n                });\n            }\n        }\n    },\n    \n    // value\n    value : function (new_value) {\n        // get current id/value\n        var before = this._getValue();\n        \n        // check if new_value is defined\n        if (new_value !== undefined) {\n            this._setValue(new_value);\n        }\n        \n        // get current id/value\n        var after = this._getValue();\n        \n        // fire onchange\n        if ((after != before && this.options.onchange)) {\n            this.options.onchange(after);\n        }\n            \n        // return current value\n        return after;\n    },\n    \n    // label\n    text : function () {\n        return this.$el.select2('data').text;\n    },\n    \n    // disabled\n    disabled: function() {\n        return !this.$el.select2('enable');\n    },\n\n    // enable\n    enable: function() {\n        this.$el.select2('enable', true);\n    },\n        \n    // disable\n    disable: function() {\n        this.$el.select2('enable', false);\n    },\n    \n    // add\n    add: function(options) {\n        // add options\n        this.select_data.push({\n            id      : options.id,\n            text    : options.text\n        });\n        \n        // refresh\n        this._refresh();\n    },\n    \n    // remove\n    del: function(id) {\n        // search option\n        var index = this._getIndex(id);\n        \n        // check if found\n        if (index != -1) {\n            // remove options\n            this.select_data.splice(index, 1);\n        \n            // refresh\n            this._refresh();\n        }\n    },\n    \n    // remove\n    remove: function() {\n        this.$el.select2('destroy');\n    },\n    \n    // update\n    update: function(options) {\n        // copy options\n        this.select_data = [];\n        for (var key in options.data) {\n            this.select_data.push(options.data[key]);\n        }\n        \n        // refresh\n        this._refresh();\n    },\n    \n    // refresh\n    _refresh: function() {\n        // add select2 data based on type of input\n        if (!this.options.multiple){\n            var selected = this._getValue();\n            var select_opt = {\n                data                : this.select_data,\n                containerCssClass   : this.options.css,\n                placeholder         : this.options.placeholder,\n                dropdownAutoWidth   : true\n            };\n            this.$el.select2(select_opt);\n            // select previous value (if exists)\n            this._setValue(selected);\n        } else {\n            var select_opt = {\n                multiple            : this.options.multiple,\n                containerCssClass   : this.options.css,\n                placeholder         : this.options.placeholder,\n                minimumInputLength  : this.options.minimumInputLength,\n                ajax                : this.options.ajax,\n                dropdownCssClass    : this.options.dropdownCssClass,\n                escapeMarkup        : this.options.escapeMarkup,\n                formatResult        : this.options.formatResult,\n                formatSelection     : this.options.formatSelection,\n                initSelection       : this.options.initSelection,\n                initialData         : this.options.initialData\n            };\n            this.$el.select2(select_opt);\n        }\n    },\n    \n    // get index\n    _getIndex: function(value) {\n        // returns the index of the searched value\n        _.findIndex(this.select_data, {id: value});\n    },\n    \n    // get value\n    _getValue: function() {\n        return this.$el.select2('val');\n    },\n    \n    // set value\n    _setValue: function(new_value) {\n        var index = this._getIndex(new_value);\n        if (index == -1) {\n            if (this.select_data.length > 0) {\n                new_value = this.select_data[0].id;\n            }\n        }\n        this.$el.select2('val', new_value);\n    },\n    \n    // element\n    _template: function(options) {\n            return '<input type=\"hidden\" value=\"' + this.options.initialData + '\"/>';\n    }\n});\n\nreturn {\n    View : View\n};\n\n});\n"]}