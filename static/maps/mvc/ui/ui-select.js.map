{"version":3,"sources":["mvc/ui/ui-select.js"],"names":["define","Utils","View","Backbone","extend","optionsDefault","css","placeholder","data","value","multiple","minimumInputLength","initialData","initialize","options","this","merge","setElement","_template","container","console","log","append","$el","select_data","_refresh","_setValue","self","onchange","on","new_value","before","_getValue","undefined","after","text","select2","disabled","enable","disable","add","push","id","del","index","_getIndex","splice","remove","update","key","select_opt","containerCssClass","ajax","dropdownCssClass","escapeMarkup","formatResult","formatSelection","initSelection","selected","dropdownAutoWidth","_","findIndex","length"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select.js","sourcesContent":["// dependencies\ndefine(['utils/utils'], function(Utils) {\n\n/**\n * A plugin for initializing select2 input items.\n * Make sure the select2 library itself is loaded beforehand.\n * Also the element to which select2 will be appended has to \n * be created before select2 initialization (and passed as option).\n */\nvar View = Backbone.View.extend(\n{\n    // options\n    optionsDefault: {\n        css                 : '',\n        placeholder         : 'No data available',\n        data                : [],\n        value               : null,\n        multiple            : false,\n        minimumInputLength  : 0,\n        // example format of initial data: \"id:name,55:anotherrole@role.com,27:role@role.com\"\n        initialData         : ''\n    },\n    \n    // initialize\n    initialize : function(options) {\n        // configure options\n        this.options = Utils.merge(options, this.optionsDefault);\n        \n        // create new element\n        this.setElement(this._template(this.options));\n        \n        // check if container exists\n        if (!this.options.container) {\n            console.log('ui-select::initialize() : container not specified.');\n            return;\n        }\n        \n        // add to dom\n        this.options.container.append(this.$el);\n        \n        // link selection dictionary\n        this.select_data = this.options.data;\n        \n        // refresh\n        this._refresh();\n        \n        if (!this.options.multiple){\n            // initial value\n            if (this.options.value) {\n                this._setValue(this.options.value);\n            }\n            \n            // add change event\n            var self = this;\n            if (this.options.onchange) {\n                this.$el.on('change', function() {\n                    self.options.onchange(self.value());\n                });\n            }\n        }\n    },\n    \n    // value\n    value : function (new_value) {\n        // get current id/value\n        var before = this._getValue();\n        \n        // check if new_value is defined\n        if (new_value !== undefined) {\n            this._setValue(new_value);\n        }\n        \n        // get current id/value\n        var after = this._getValue();\n        \n        // fire onchange\n        if ((after != before && this.options.onchange)) {\n            this.options.onchange(after);\n        }\n            \n        // return current value\n        return after;\n    },\n    \n    // label\n    text : function () {\n        return this.$el.select2('data').text;\n    },\n    \n    // disabled\n    disabled: function() {\n        return !this.$el.select2('enable');\n    },\n\n    // enable\n    enable: function() {\n        this.$el.select2('enable', true);\n    },\n        \n    // disable\n    disable: function() {\n        this.$el.select2('enable', false);\n    },\n    \n    // add\n    add: function(options) {\n        // add options\n        this.select_data.push({\n            id      : options.id,\n            text    : options.text\n        });\n        \n        // refresh\n        this._refresh();\n    },\n    \n    // remove\n    del: function(id) {\n        // search option\n        var index = this._getIndex(id);\n        \n        // check if found\n        if (index != -1) {\n            // remove options\n            this.select_data.splice(index, 1);\n        \n            // refresh\n            this._refresh();\n        }\n    },\n    \n    // remove\n    remove: function() {\n        this.$el.select2('destroy');\n    },\n    \n    // update\n    update: function(options) {\n        // copy options\n        this.select_data = [];\n        for (var key in options.data) {\n            this.select_data.push(options.data[key]);\n        }\n        \n        // refresh\n        this._refresh();\n    },\n    \n    // refresh\n    _refresh: function() {\n        // add select2 data based on type of input\n        if (!this.options.multiple){\n            var selected = this._getValue();\n            var select_opt = {\n                data                : this.select_data,\n                containerCssClass   : this.options.css,\n                placeholder         : this.options.placeholder,\n                dropdownAutoWidth   : true\n            };\n            this.$el.select2(select_opt);\n            // select previous value (if exists)\n            this._setValue(selected);\n        } else {\n            var select_opt = {\n                multiple            : this.options.multiple,\n                containerCssClass   : this.options.css,\n                placeholder         : this.options.placeholder,\n                minimumInputLength  : this.options.minimumInputLength,\n                ajax                : this.options.ajax,\n                dropdownCssClass    : this.options.dropdownCssClass,\n                escapeMarkup        : this.options.escapeMarkup,\n                formatResult        : this.options.formatResult,\n                formatSelection     : this.options.formatSelection,\n                initSelection       : this.options.initSelection,\n                initialData         : this.options.initialData\n            };\n            this.$el.select2(select_opt);\n        }\n    },\n    \n    // get index\n    _getIndex: function(value) {\n        // returns the index of the searched value\n        _.findIndex(this.select_data, {id: value});\n    },\n    \n    // get value\n    _getValue: function() {\n        return this.$el.select2('val');\n    },\n    \n    // set value\n    _setValue: function(new_value) {\n        var index = this._getIndex(new_value);\n        if (index == -1) {\n            if (this.select_data.length > 0) {\n                new_value = this.select_data[0].id;\n            }\n        }\n        this.$el.select2('val', new_value);\n    },\n    \n    // element\n    _template: function(options) {\n            return '<input type=\"hidden\" value=\"' + this.options.initialData + '\"/>';\n    }\n});\n\nreturn {\n    View : View\n};\n\n});\n"]}