{"version":3,"sources":["mvc/ui/ui-frames.js"],"names":["FrameView","Backbone","View","extend","initialize","options","this","model","Model","setElement","$","addClass","$el","self","append","tooltip","title","listenTo","$title","$header","find","_","menu","$content","$option","render","option","placement","remove","each","url","icon","isFunction","on","onclick","cols","rows","html","cell","attr","indexOf","content","frame_counter","frame_uid","frame_list","defaultOptions","frame","el","margin","scroll","top_min","_frameInit","frame_max","_frameResize","visible","top","frame_shadow","event","defaults","top_max","body","buttons","Close","frame_id","length","width","height","show","hide","_panelRefresh","window","resize","_toPixelCoord","frame_z","parseInt","add","Galaxy","modal","$frame","fadeOut","fadeIn","css","mousemove","mouseup","mouseleave","mousewheel","_frameInsert","left","trigger","del","_eventFrameMouseDown","target","hasClass","id","_panelAnimationComplete","x","y","type","_eventFrameMouseMove","event_xy_new","events","p","_toGridCoord","mousedown .f-close","e","_frameOffset","l","preventDefault","_frameIdentify","xy","_eventFrameMouseUp","pageX","pageY","originalEvent","_eventHide","_frameScreen","frames","stopPropagation","event_xy_delta","_panelScroll","Math","max","min_dim","_eventPanelScroll_up","_eventPanelScroll_down","_frameDragStop","_eventFrameClose","_frameGrid","grid_location","_frameFocus","_eventPanelScroll","srcElement","parents","detail","closest","_frameDragStart","_isCollision","is_collision_pair","a","_locationRank","loc","px","sign","g","delta","animate","top_new","_toGrid","screen_location","_toPixel","i","f","b","place_list","push","grid_rank","min","done","console","log","substring","place","_framePlace","j","has_focus"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-frames.js","sourcesContent":["/** Frame view */\nvar FrameView = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.setElement($(\"<div/>\").addClass(\"corner frame\"));\n        this.$el\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-header corner\")\n                    .append($(\"<div/>\").addClass(\"f-title\"))\n                    .append(\n                        $(\"<div/>\")\n                            .addClass(\"f-icon f-close fa fa-close\")\n                            .tooltip({\n                                title: \"Close\",\n                                placement: \"bottom\"\n                            })\n                    )\n            )\n            .append($(\"<div/>\").addClass(\"f-content\"))\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-resize f-icon corner fa fa-expand\")\n                    .tooltip({ title: \"Resize\" })\n            )\n            .append($(\"<div/>\").addClass(\"f-cover\"));\n        this.$header = this.$(\".f-header\");\n        this.$title = this.$(\".f-title\");\n        this.$content = this.$(\".f-content\");\n        this.render();\n        this.listenTo(this.model, \"change\", this.render, this);\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$title.html(options.title || \"\");\n        this.$header.find(\".f-icon-left\").remove();\n        _.each(options.menu, option => {\n            var $option = $(\"<div/>\")\n                .addClass(\"f-icon-left\")\n                .addClass(option.icon);\n            if (_.isFunction(option.disabled) && option.disabled()) {\n                $option.attr(\"disabled\", true);\n            } else {\n                $option\n                    .on(\"click\", () => {\n                        option.onclick(self);\n                    })\n                    .tooltip({\n                        title: option.tooltip,\n                        placement: \"bottom\"\n                    });\n            }\n            self.$header.append($option);\n        });\n        if (options.url) {\n            this.$content.html(\n                $(\"<iframe/>\")\n                    .addClass(\"f-iframe\")\n                    .attr(\"scrolling\", \"auto\")\n                    .attr(\n                        \"src\",\n                        `${options.url +\n                            (options.url.indexOf(\"?\") === -1\n                                ? \"?\"\n                                : \"&\")}widget=True`\n                    )\n            );\n        } else if (options.content) {\n            _.isFunction(options.content)\n                ? options.content(self.$content)\n                : self.$content.html(options.content);\n        }\n    }\n});\n\n/** Scratchbook viewer */\nvar View = Backbone.View.extend({\n    defaultOptions: {\n        frame: {\n            // default frame size in cells\n            cols: 6,\n            rows: 3\n        },\n        rows: 1000, // maximum number of rows\n        cell: 130, // cell size in px\n        margin: 5, // margin between frames\n        scroll: 5, // scroll speed\n        top_min: 40, // top margin\n        frame_max: 9, // maximum number of frames\n        visible: true // initial visibility\n    },\n\n    cols: 0, // number of columns\n    top: 0, // scroll/element top\n    top_max: 0, // viewport scrolling state\n    frame_z: 0, // frame z-index\n    frame_counter: 0, // frame counter\n    frame_uid: 0, // unique frame id counter\n    frame_list: {}, // list of all frames\n    frame_shadow: null, // frame shown as placeholder when moving active frames\n    visible: false, // flag indicating if scratchbook viewer is visible or not\n    event: {}, // dictionary keeping track of current event\n\n    initialize: function(options) {\n        var self = this;\n        this.options = _.defaults(options || {}, this.defaultOptions);\n        this.visible = this.options.visible;\n        this.top = this.top_max = this.options.top_min;\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"galaxy-frame\")\n                .append($(\"<div/>\").addClass(\"frame-background\"))\n                .append(\n                    $(\"<div/>\").addClass(\n                        \"frame-menu frame-scroll-up fa fa-chevron-up fa-2x\"\n                    )\n                )\n                .append(\n                    $(\"<div/>\").addClass(\n                        \"frame-menu frame-scroll-down fa fa-chevron-down fa-2x\"\n                    )\n                )\n        );\n\n        // initialize shadow to guiding drag/resize events\n        this.frame_shadow = new Backbone.View({\n            el: $(\"<div/>\").addClass(\"corner frame-shadow\")\n        });\n        this.$el.append(this.frame_shadow.$el);\n        this._frameInit(this.frame_shadow, \"#frame-shadow\");\n        this._frameResize(this.frame_shadow, { width: 0, height: 0 });\n        this.frame_list[\"#frame-shadow\"] = this.frame_shadow;\n\n        // initialize panel\n        this.visible ? this.show() : this.hide();\n        this._panelRefresh();\n        $(window).resize(() => {\n            self.visible && self._panelRefresh();\n        });\n    },\n\n    /** Render */\n    render: function() {\n        this.$(\".frame-scroll-up\")[\n            (this.top != this.options.top_min && \"show\") || \"hide\"\n        ]();\n        this.$(\".frame-scroll-down\")[\n            (this.top != this.top_max && \"show\") || \"hide\"\n        ]();\n    },\n\n    /**\n     * Adds and displays a new frame.\n     *\n     * options:\n     *  url     : loaded into an iframe\n     *  content : content is treated as a function or raw HTML, function is passed a single\n     *              argument that is the frame's content DOM element\n     */\n    add: function(options) {\n        if (this.frame_counter >= this.options.frame_max) {\n            Galaxy.modal.show({\n                title: \"Warning\",\n                body: `You have reached the maximum number of allowed frames (${this\n                    .options.frame_max}).`,\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        } else {\n            var frame_id = `#frame-${this.frame_uid++}`;\n            if ($(frame_id).length !== 0) {\n                Galaxy.modal.show({\n                    title: \"Error\",\n                    body:\n                        \"This frame already exists. This page might contain multiple frame managers.\",\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            } else {\n                // initialize new frame elements\n                this.top = this.options.top_min;\n                var frame = new FrameView(options);\n                this.$el.append(frame.$el);\n\n                // set dimensions\n                options.width = this._toPixelCoord(\n                    \"width\",\n                    this.options.frame.cols\n                );\n                options.height = this._toPixelCoord(\n                    \"height\",\n                    this.options.frame.rows\n                );\n\n                // set default z-index and add to ui and frame list\n                this.frame_z = parseInt(frame.$el.css(\"z-index\"));\n                this.frame_list[frame_id] = frame;\n                this.frame_counter++;\n                this._frameInit(frame, frame_id);\n                this._frameResize(frame, {\n                    width: options.width,\n                    height: options.height\n                });\n                this._frameInsert(frame, { top: 0, left: 0 }, true);\n                !this.visible && this.show();\n                this.trigger(\"add\");\n            }\n        }\n    },\n\n    /** Remove a frame */\n    del: function(frame) {\n        var self = this;\n        var $frame = frame.$el;\n        $frame.fadeOut(\"fast\", () => {\n            $frame.remove();\n            delete self.frame_list[frame.id];\n            self.frame_counter--;\n            self._panelRefresh(true);\n            self._panelAnimationComplete();\n            self.trigger(\"remove\");\n        });\n    },\n\n    /** Show panel */\n    show: function() {\n        this.visible = true;\n        this.$el.fadeIn(\"fast\");\n        this.trigger(\"show\");\n    },\n\n    /** Hide panel */\n    hide: function() {\n        if (!this.event.type) {\n            this.visible = false;\n            this.$el.fadeOut(\"fast\", function() {\n                $(this).hide();\n            });\n            this.trigger(\"hide\");\n        }\n    },\n\n    /** Returns the number of frames */\n    length: function() {\n        return this.frame_counter;\n    },\n\n    /*\n        EVENT HANDLING\n    */\n    events: {\n        // global frame events\n        mousemove: \"_eventFrameMouseMove\",\n        mouseup: \"_eventFrameMouseUp\",\n        mouseleave: \"_eventFrameMouseUp\",\n        mousewheel: \"_eventPanelScroll\",\n        DOMMouseScroll: \"_eventPanelScroll\",\n\n        // events fixed to elements\n        \"mousedown .frame\": \"_eventFrameMouseDown\",\n        \"mousedown .frame-background\": \"_eventHide\",\n        \"mousedown .frame-scroll-up\": \"_eventPanelScroll_up\",\n        \"mousedown .frame-scroll-down\": \"_eventPanelScroll_down\",\n        \"mousedown .f-close\": \"_eventFrameClose\"\n    },\n\n    /** Start drag/resize event */\n    _eventFrameMouseDown: function(e) {\n        $(\".tooltip\").hide();\n        if (!this.event.type) {\n            if (\n                $(e.target).hasClass(\"f-header\") ||\n                $(e.target).hasClass(\"f-title\")\n            ) {\n                this.event.type = \"drag\";\n            }\n            if ($(e.target).hasClass(\"f-resize\")) {\n                this.event.type = \"resize\";\n            }\n            if (this.event.type) {\n                e.preventDefault();\n                this.event.target = this._frameIdentify(e.target);\n                this.event.xy = {\n                    x: e.originalEvent.pageX,\n                    y: e.originalEvent.pageY\n                };\n                this._frameDragStart(this.event.target);\n            }\n        }\n    },\n\n    /** Processes drag/resize events */\n    _eventFrameMouseMove: function(e) {\n        if (this.event.type) {\n            // get mouse motion and delta\n            var event_xy_new = {\n                x: e.originalEvent.pageX,\n                y: e.originalEvent.pageY\n            };\n            var event_xy_delta = {\n                x: event_xy_new.x - this.event.xy.x,\n                y: event_xy_new.y - this.event.xy.y\n            };\n            this.event.xy = event_xy_new;\n\n            // get current screen position and size of frame\n            var p = this._frameScreen(this.event.target);\n\n            // drag/resize event\n            if (this.event.type == \"resize\") {\n                p.width += event_xy_delta.x;\n                p.height += event_xy_delta.y;\n                var min_dim = this.options.cell - this.options.margin - 1;\n                p.width = Math.max(p.width, min_dim);\n                p.height = Math.max(p.height, min_dim);\n                this._frameResize(this.event.target, p);\n                p.width = this._toGridCoord(\"width\", p.width) + 1;\n                p.height = this._toGridCoord(\"height\", p.height) + 1;\n                p.width = this._toPixelCoord(\"width\", p.width);\n                p.height = this._toPixelCoord(\"height\", p.height);\n                this._frameResize(this.frame_shadow, p);\n                this._frameInsert(this.frame_shadow, {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                });\n            } else if (this.event.type == \"drag\") {\n                p.left += event_xy_delta.x;\n                p.top += event_xy_delta.y;\n                this._frameOffset(this.event.target, p);\n                var l = {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                };\n                l.left !== 0 && l.left++;\n                this._frameInsert(this.frame_shadow, l);\n            }\n        }\n    },\n\n    /** Stop drag/resize events */\n    _eventFrameMouseUp: function(e) {\n        if (this.event.type) {\n            this._frameDragStop(this.event.target);\n            this.event.type = null;\n        }\n    },\n\n    /** Destroy a frame */\n    _eventFrameClose: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this.del(this._frameIdentify(e.target));\n        }\n    },\n\n    /** Hide all frames */\n    _eventHide: function(e) {\n        !this.event.type && this.hide();\n    },\n\n    /** Fired when scrolling occurs on panel */\n    _eventPanelScroll: function(e) {\n        if (!this.event.type && this.visible) {\n            // Stop propagation if scrolling is happening inside a frame.\n            // TODO: could propagate scrolling if at top/bottom of frame.\n            var frames = $(e.srcElement).parents(\".frame\");\n            if (frames.length !== 0) {\n                e.stopPropagation();\n            } else {\n                e.preventDefault();\n                this._panelScroll(\n                    e.originalEvent.detail\n                        ? e.originalEvent.detail\n                        : e.originalEvent.wheelDelta / -3\n                );\n            }\n        }\n    },\n\n    /** Handle scroll up event */\n    _eventPanelScroll_up: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(-this.options.scroll);\n        }\n    },\n\n    /** Handle scroll down */\n    _eventPanelScroll_down: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(this.options.scroll);\n        }\n    },\n\n    /*\n        FRAME EVENTS SUPPORT\n    */\n\n    /** Identify the target frame */\n    _frameIdentify: function(target) {\n        return this.frame_list[\n            `#${$(target)\n                .closest(\".frame\")\n                .attr(\"id\")}`\n        ];\n    },\n\n    /** Provides drag support */\n    _frameDragStart: function(frame) {\n        this._frameFocus(frame, true);\n        var p = this._frameScreen(frame);\n        this._frameResize(this.frame_shadow, p);\n        this._frameGrid(this.frame_shadow, frame.grid_location);\n        frame.grid_location = null;\n        this.frame_shadow.$el.show();\n        $(\".f-cover\").show();\n    },\n\n    /** Removes drag support */\n    _frameDragStop: function(frame) {\n        this._frameFocus(frame, false);\n        var p = this._frameScreen(this.frame_shadow);\n        this._frameResize(frame, p);\n        this._frameGrid(frame, this.frame_shadow.grid_location, true);\n        this.frame_shadow.grid_location = null;\n        this.frame_shadow.$el.hide();\n        $(\".f-cover\").hide();\n        this._panelAnimationComplete();\n    },\n\n    /*\n        GRID/PIXEL CONVERTER\n    */\n\n    /** Converts a pixel to a grid dimension */\n    _toGridCoord: function(type, px) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        type == \"top\" && (px -= this.top);\n        return parseInt(\n            (px + sign * this.options.margin) / this.options.cell,\n            10\n        );\n    },\n\n    /** Converts a grid to a pixels dimension */\n    _toPixelCoord: function(type, g) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        var px = g * this.options.cell - sign * this.options.margin;\n        type == \"top\" && (px += this.top);\n        return px;\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toGrid: function(px) {\n        return {\n            top: this._toGridCoord(\"top\", px.top),\n            left: this._toGridCoord(\"left\", px.left),\n            width: this._toGridCoord(\"width\", px.width),\n            height: this._toGridCoord(\"height\", px.height)\n        };\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toPixel: function(g) {\n        return {\n            top: this._toPixelCoord(\"top\", g.top),\n            left: this._toPixelCoord(\"left\", g.left),\n            width: this._toPixelCoord(\"width\", g.width),\n            height: this._toPixelCoord(\"height\", g.height)\n        };\n    },\n\n    /* \n        COLLISION DETECTION\n    */\n\n    /** Check collisions for a grid coordinate set */\n    _isCollision: function(g) {\n        function is_collision_pair(a, b) {\n            return !(\n                a.left > b.left + b.width - 1 ||\n                a.left + a.width - 1 < b.left ||\n                a.top > b.top + b.height - 1 ||\n                a.top + a.height - 1 < b.top\n            );\n        }\n        for (var i in this.frame_list) {\n            var frame = this.frame_list[i];\n            if (\n                frame.grid_location !== null &&\n                is_collision_pair(g, frame.grid_location)\n            ) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /** Return location/grid rank */\n    _locationRank: function(loc) {\n        return loc.top * this.cols + loc.left;\n    },\n\n    /*\n        PANEL/WINDOW FUNCTIONS\n    */\n\n    /** Refresh panel */\n    _panelRefresh: function(animate) {\n        this.cols = parseInt($(window).width() / this.options.cell, 10) + 1;\n        this._frameInsert(null, null, animate);\n    },\n\n    /** Complete panel animation / frames not moving */\n    _panelAnimationComplete: function() {\n        var self = this;\n        $(\".frame\")\n            .promise()\n            .done(() => {\n                self._panelScroll(0, true);\n            });\n    },\n\n    /** Scroll panel */\n    _panelScroll: function(delta, animate) {\n        var top_new = this.top - this.options.scroll * delta;\n        top_new = Math.max(top_new, this.top_max);\n        top_new = Math.min(top_new, this.options.top_min);\n        if (this.top != top_new) {\n            for (var i in this.frame_list) {\n                var frame = this.frame_list[i];\n                if (frame.grid_location !== null) {\n                    var screen_location = {\n                        top: frame.screen_location.top - (this.top - top_new),\n                        left: frame.screen_location.left\n                    };\n                    this._frameOffset(frame, screen_location, animate);\n                }\n            }\n            this.top = top_new;\n        }\n        this.render();\n    },\n\n    /*\n        FRAME FUNCTIONS\n    */\n\n    /** Initialize a new frame */\n    _frameInit: function(frame, id) {\n        frame.id = id;\n        frame.screen_location = {};\n        frame.grid_location = {};\n        frame.grid_rank = null;\n        frame.$el.attr(\"id\", id.substring(1));\n    },\n\n    /** Insert frame at given location */\n    _frameInsert: function(frame, new_loc, animate) {\n        var self = this;\n        var place_list = [];\n        if (frame) {\n            frame.grid_location = null;\n            place_list.push([frame, this._locationRank(new_loc)]);\n        }\n        _.each(this.frame_list, f => {\n            if (f.grid_location !== null) {\n                f.grid_location = null;\n                place_list.push([f, f.grid_rank]);\n            }\n        });\n        place_list.sort((a, b) => (a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0));\n        _.each(place_list, place => {\n            self._framePlace(place[0], animate);\n        });\n        this.top_max = 0;\n        _.each(this.frame_list, f => {\n            if (f.grid_location !== null) {\n                self.top_max = Math.max(\n                    self.top_max,\n                    f.grid_location.top + f.grid_location.height\n                );\n            }\n        });\n        this.top_max =\n            $(window).height() -\n            this.top_max * this.options.cell -\n            2 * this.options.margin;\n        this.top_max = Math.min(this.top_max, this.options.top_min);\n        this.render();\n    },\n\n    /** Naive frame placement */\n    _framePlace: function(frame, animate) {\n        frame.grid_location = null;\n        var g = this._toGrid(this._frameScreen(frame));\n        var done = false;\n        for (var i = 0; i < this.options.rows; i++) {\n            for (var j = 0; j < Math.max(1, this.cols - g.width); j++) {\n                g.top = i;\n                g.left = j;\n                if (!this._isCollision(g)) {\n                    done = true;\n                    break;\n                }\n            }\n            if (done) {\n                break;\n            }\n        }\n        if (done) {\n            this._frameGrid(frame, g, animate);\n        } else {\n            console.log(\"Grid dimensions exceeded.\");\n        }\n    },\n\n    /** Handle frame focussing */\n    _frameFocus: function(frame, has_focus) {\n        frame.$el.css(\"z-index\", this.frame_z + (has_focus ? 1 : 0));\n    },\n\n    /** New left/top position frame */\n    _frameOffset: function(frame, p, animate) {\n        frame.screen_location.left = p.left;\n        frame.screen_location.top = p.top;\n        if (animate) {\n            this._frameFocus(frame, true);\n            var self = this;\n            frame.$el.animate({ top: p.top, left: p.left }, \"fast\", () => {\n                self._frameFocus(frame, false);\n            });\n        } else {\n            frame.$el.css({ top: p.top, left: p.left });\n        }\n    },\n\n    /** Resize frame */\n    _frameResize: function(frame, p) {\n        frame.$el.css({ width: p.width, height: p.height });\n        frame.screen_location.width = p.width;\n        frame.screen_location.height = p.height;\n    },\n\n    /** Push frame to new grid location */\n    _frameGrid: function(frame, l, animate) {\n        frame.grid_location = l;\n        this._frameOffset(frame, this._toPixel(l), animate);\n        frame.grid_rank = this._locationRank(l);\n    },\n\n    /** Get frame dimensions */\n    _frameScreen: function(frame) {\n        var p = frame.screen_location;\n        return {\n            top: p.top,\n            left: p.left,\n            width: p.width,\n            height: p.height\n        };\n    }\n});\n\nexport default {\n    View: View\n};\n"]}