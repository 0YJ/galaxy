{"version":3,"sources":["mvc/ui/ui-frames.js"],"names":["FrameView","Backbone","View","extend","initialize","options","this","model","Model","setElement","$","addClass","$el","self","append","tooltip","title","listenTo","$title","$header","find","_","menu","$content","$option","render","option","placement","remove","each","url","icon","isFunction","on","onclick","cols","rows","html","cell","attr","indexOf","content","frame_z","frame_counter","frame_uid","defaultOptions","frame","top","el","scroll","top_min","frame_max","_frameInit","visible","_frameResize","top_max","frame_list","frame_shadow","defaults","body","buttons","frame_id","Galaxy","modal","width","height","show","hide","_panelRefresh","window","resize","_toPixelCoord","add","$frame","length","Close","fadeOut","parseInt","css","mousemove","mouseup","mouseleave","mousewheel","DOMMouseScroll","_frameInsert","left","trigger","del","_eventFrameMouseDown","event","type","id","_panelAnimationComplete","x","y","fadeIn","_eventFrameMouseMove","originalEvent","events","p","mousedown .frame-scroll-down","mousedown .f-close","e","target","hasClass","_toGridCoord","preventDefault","_frameIdentify","_eventFrameMouseUp","pageX","_frameDragStop","pageY","_frameDragStart","event_xy_new","event_xy_delta","xy","_eventPanelScroll","_frameScreen","stopPropagation","min_dim","_panelScroll","detail","Math","max","_eventPanelScroll_up","_eventPanelScroll_down","l","grid_location","_eventHide","srcElement","parents","sign","wheelDelta","margin","px","closest","is_collision_pair","_frameFocus","a","_frameGrid","_locationRank","top_new","g","_frameOffset","_toPixel","_isCollision","i","f","place_list","b","animate","_framePlace","promise","done","delta","console","log","screen_location","has_focus","grid_rank","substring","new_loc","push","place","min","_toGrid","j"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-frames.js","sourcesContent":["/** Frame view */\nvar FrameView = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.setElement($(\"<div/>\").addClass(\"corner frame\"));\n        this.$el\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-header corner\")\n                    .append($(\"<div/>\").addClass(\"f-title\"))\n                    .append(\n                        $(\"<div/>\")\n                            .addClass(\"f-icon f-close fa fa-close\")\n                            .tooltip({\n                                title: \"Close\",\n                                placement: \"bottom\"\n                            })\n                    )\n            )\n            .append($(\"<div/>\").addClass(\"f-content\"))\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-resize f-icon corner fa fa-expand\")\n                    .tooltip({ title: \"Resize\" })\n            )\n            .append($(\"<div/>\").addClass(\"f-cover\"));\n        this.$header = this.$(\".f-header\");\n        this.$title = this.$(\".f-title\");\n        this.$content = this.$(\".f-content\");\n        this.render();\n        this.listenTo(this.model, \"change\", this.render, this);\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$title.html(options.title || \"\");\n        this.$header.find(\".f-icon-left\").remove();\n        _.each(options.menu, function(option) {\n            var $option = $(\"<div/>\")\n                .addClass(\"f-icon-left\")\n                .addClass(option.icon);\n            if (_.isFunction(option.disabled) && option.disabled()) {\n                $option.attr(\"disabled\", true);\n            } else {\n                $option\n                    .on(\"click\", function() {\n                        option.onclick(self);\n                    })\n                    .tooltip({\n                        title: option.tooltip,\n                        placement: \"bottom\"\n                    });\n            }\n            self.$header.append($option);\n        });\n        if (options.url) {\n            this.$content.html(\n                $(\"<iframe/>\")\n                    .addClass(\"f-iframe\")\n                    .attr(\"scrolling\", \"auto\")\n                    .attr(\n                        \"src\",\n                        options.url +\n                            (options.url.indexOf(\"?\") === -1 ? \"?\" : \"&\") +\n                            \"widget=True\"\n                    )\n            );\n        } else if (options.content) {\n            _.isFunction(options.content)\n                ? options.content(self.$content)\n                : self.$content.html(options.content);\n        }\n    }\n});\n\n/** Scratchbook viewer */\nvar View = Backbone.View.extend({\n    defaultOptions: {\n        frame: {\n            // default frame size in cells\n            cols: 6,\n            rows: 3\n        },\n        rows: 1000, // maximum number of rows\n        cell: 130, // cell size in px\n        margin: 5, // margin between frames\n        scroll: 5, // scroll speed\n        top_min: 40, // top margin\n        frame_max: 9, // maximum number of frames\n        visible: true // initial visibility\n    },\n\n    cols: 0, // number of columns\n    top: 0, // scroll/element top\n    top_max: 0, // viewport scrolling state\n    frame_z: 0, // frame z-index\n    frame_counter: 0, // frame counter\n    frame_uid: 0, // unique frame id counter\n    frame_list: {}, // list of all frames\n    frame_shadow: null, // frame shown as placeholder when moving active frames\n    visible: false, // flag indicating if scratchbook viewer is visible or not\n    event: {}, // dictionary keeping track of current event\n\n    initialize: function(options) {\n        var self = this;\n        this.options = _.defaults(options || {}, this.defaultOptions);\n        this.visible = this.options.visible;\n        this.top = this.top_max = this.options.top_min;\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"galaxy-frame\")\n                .append($(\"<div/>\").addClass(\"frame-background\"))\n                .append(\n                    $(\"<div/>\").addClass(\n                        \"frame-menu frame-scroll-up fa fa-chevron-up fa-2x\"\n                    )\n                )\n                .append(\n                    $(\"<div/>\").addClass(\n                        \"frame-menu frame-scroll-down fa fa-chevron-down fa-2x\"\n                    )\n                )\n        );\n\n        // initialize shadow to guiding drag/resize events\n        this.frame_shadow = new Backbone.View({\n            el: $(\"<div/>\").addClass(\"corner frame-shadow\")\n        });\n        this.$el.append(this.frame_shadow.$el);\n        this._frameInit(this.frame_shadow, \"#frame-shadow\");\n        this._frameResize(this.frame_shadow, { width: 0, height: 0 });\n        this.frame_list[\"#frame-shadow\"] = this.frame_shadow;\n\n        // initialize panel\n        this.visible ? this.show() : this.hide();\n        this._panelRefresh();\n        $(window).resize(function() {\n            self.visible && self._panelRefresh();\n        });\n    },\n\n    /** Render */\n    render: function() {\n        this.$(\".frame-scroll-up\")[\n            (this.top != this.options.top_min && \"show\") || \"hide\"\n        ]();\n        this.$(\".frame-scroll-down\")[\n            (this.top != this.top_max && \"show\") || \"hide\"\n        ]();\n    },\n\n    /**\n     * Adds and displays a new frame.\n     *\n     * options:\n     *  url     : loaded into an iframe\n     *  content : content is treated as a function or raw HTML, function is passed a single\n     *              argument that is the frame's content DOM element\n     */\n    add: function(options) {\n        if (this.frame_counter >= this.options.frame_max) {\n            Galaxy.modal.show({\n                title: \"Warning\",\n                body:\n                    \"You have reached the maximum number of allowed frames (\" +\n                    this.options.frame_max +\n                    \").\",\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        } else {\n            var frame_id = \"#frame-\" + this.frame_uid++;\n            if ($(frame_id).length !== 0) {\n                Galaxy.modal.show({\n                    title: \"Error\",\n                    body:\n                        \"This frame already exists. This page might contain multiple frame managers.\",\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            } else {\n                // initialize new frame elements\n                this.top = this.options.top_min;\n                var frame = new FrameView(options);\n                this.$el.append(frame.$el);\n\n                // set dimensions\n                options.width = this._toPixelCoord(\n                    \"width\",\n                    this.options.frame.cols\n                );\n                options.height = this._toPixelCoord(\n                    \"height\",\n                    this.options.frame.rows\n                );\n\n                // set default z-index and add to ui and frame list\n                this.frame_z = parseInt(frame.$el.css(\"z-index\"));\n                this.frame_list[frame_id] = frame;\n                this.frame_counter++;\n                this._frameInit(frame, frame_id);\n                this._frameResize(frame, {\n                    width: options.width,\n                    height: options.height\n                });\n                this._frameInsert(frame, { top: 0, left: 0 }, true);\n                !this.visible && this.show();\n                this.trigger(\"add\");\n            }\n        }\n    },\n\n    /** Remove a frame */\n    del: function(frame) {\n        var self = this;\n        var $frame = frame.$el;\n        $frame.fadeOut(\"fast\", function() {\n            $frame.remove();\n            delete self.frame_list[frame.id];\n            self.frame_counter--;\n            self._panelRefresh(true);\n            self._panelAnimationComplete();\n            self.trigger(\"remove\");\n        });\n    },\n\n    /** Show panel */\n    show: function() {\n        this.visible = true;\n        this.$el.fadeIn(\"fast\");\n        this.trigger(\"show\");\n    },\n\n    /** Hide panel */\n    hide: function() {\n        if (!this.event.type) {\n            this.visible = false;\n            this.$el.fadeOut(\"fast\", function() {\n                $(this).hide();\n            });\n            this.trigger(\"hide\");\n        }\n    },\n\n    /** Returns the number of frames */\n    length: function() {\n        return this.frame_counter;\n    },\n\n    /*\n        EVENT HANDLING\n    */\n    events: {\n        // global frame events\n        mousemove: \"_eventFrameMouseMove\",\n        mouseup: \"_eventFrameMouseUp\",\n        mouseleave: \"_eventFrameMouseUp\",\n        mousewheel: \"_eventPanelScroll\",\n        DOMMouseScroll: \"_eventPanelScroll\",\n\n        // events fixed to elements\n        \"mousedown .frame\": \"_eventFrameMouseDown\",\n        \"mousedown .frame-background\": \"_eventHide\",\n        \"mousedown .frame-scroll-up\": \"_eventPanelScroll_up\",\n        \"mousedown .frame-scroll-down\": \"_eventPanelScroll_down\",\n        \"mousedown .f-close\": \"_eventFrameClose\"\n    },\n\n    /** Start drag/resize event */\n    _eventFrameMouseDown: function(e) {\n        $(\".tooltip\").hide();\n        if (!this.event.type) {\n            if (\n                $(e.target).hasClass(\"f-header\") ||\n                $(e.target).hasClass(\"f-title\")\n            ) {\n                this.event.type = \"drag\";\n            }\n            if ($(e.target).hasClass(\"f-resize\")) {\n                this.event.type = \"resize\";\n            }\n            if (this.event.type) {\n                e.preventDefault();\n                this.event.target = this._frameIdentify(e.target);\n                this.event.xy = {\n                    x: e.originalEvent.pageX,\n                    y: e.originalEvent.pageY\n                };\n                this._frameDragStart(this.event.target);\n            }\n        }\n    },\n\n    /** Processes drag/resize events */\n    _eventFrameMouseMove: function(e) {\n        if (this.event.type) {\n            // get mouse motion and delta\n            var event_xy_new = {\n                x: e.originalEvent.pageX,\n                y: e.originalEvent.pageY\n            };\n            var event_xy_delta = {\n                x: event_xy_new.x - this.event.xy.x,\n                y: event_xy_new.y - this.event.xy.y\n            };\n            this.event.xy = event_xy_new;\n\n            // get current screen position and size of frame\n            var p = this._frameScreen(this.event.target);\n\n            // drag/resize event\n            if (this.event.type == \"resize\") {\n                p.width += event_xy_delta.x;\n                p.height += event_xy_delta.y;\n                var min_dim = this.options.cell - this.options.margin - 1;\n                p.width = Math.max(p.width, min_dim);\n                p.height = Math.max(p.height, min_dim);\n                this._frameResize(this.event.target, p);\n                p.width = this._toGridCoord(\"width\", p.width) + 1;\n                p.height = this._toGridCoord(\"height\", p.height) + 1;\n                p.width = this._toPixelCoord(\"width\", p.width);\n                p.height = this._toPixelCoord(\"height\", p.height);\n                this._frameResize(this.frame_shadow, p);\n                this._frameInsert(this.frame_shadow, {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                });\n            } else if (this.event.type == \"drag\") {\n                p.left += event_xy_delta.x;\n                p.top += event_xy_delta.y;\n                this._frameOffset(this.event.target, p);\n                var l = {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                };\n                l.left !== 0 && l.left++;\n                this._frameInsert(this.frame_shadow, l);\n            }\n        }\n    },\n\n    /** Stop drag/resize events */\n    _eventFrameMouseUp: function(e) {\n        if (this.event.type) {\n            this._frameDragStop(this.event.target);\n            this.event.type = null;\n        }\n    },\n\n    /** Destroy a frame */\n    _eventFrameClose: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this.del(this._frameIdentify(e.target));\n        }\n    },\n\n    /** Hide all frames */\n    _eventHide: function(e) {\n        !this.event.type && this.hide();\n    },\n\n    /** Fired when scrolling occurs on panel */\n    _eventPanelScroll: function(e) {\n        if (!this.event.type && this.visible) {\n            // Stop propagation if scrolling is happening inside a frame.\n            // TODO: could propagate scrolling if at top/bottom of frame.\n            var frames = $(e.srcElement).parents(\".frame\");\n            if (frames.length !== 0) {\n                e.stopPropagation();\n            } else {\n                e.preventDefault();\n                this._panelScroll(\n                    e.originalEvent.detail\n                        ? e.originalEvent.detail\n                        : e.originalEvent.wheelDelta / -3\n                );\n            }\n        }\n    },\n\n    /** Handle scroll up event */\n    _eventPanelScroll_up: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(-this.options.scroll);\n        }\n    },\n\n    /** Handle scroll down */\n    _eventPanelScroll_down: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(this.options.scroll);\n        }\n    },\n\n    /*\n        FRAME EVENTS SUPPORT\n    */\n\n    /** Identify the target frame */\n    _frameIdentify: function(target) {\n        return this.frame_list[\n            \"#\" +\n                $(target)\n                    .closest(\".frame\")\n                    .attr(\"id\")\n        ];\n    },\n\n    /** Provides drag support */\n    _frameDragStart: function(frame) {\n        this._frameFocus(frame, true);\n        var p = this._frameScreen(frame);\n        this._frameResize(this.frame_shadow, p);\n        this._frameGrid(this.frame_shadow, frame.grid_location);\n        frame.grid_location = null;\n        this.frame_shadow.$el.show();\n        $(\".f-cover\").show();\n    },\n\n    /** Removes drag support */\n    _frameDragStop: function(frame) {\n        this._frameFocus(frame, false);\n        var p = this._frameScreen(this.frame_shadow);\n        this._frameResize(frame, p);\n        this._frameGrid(frame, this.frame_shadow.grid_location, true);\n        this.frame_shadow.grid_location = null;\n        this.frame_shadow.$el.hide();\n        $(\".f-cover\").hide();\n        this._panelAnimationComplete();\n    },\n\n    /*\n        GRID/PIXEL CONVERTER\n    */\n\n    /** Converts a pixel to a grid dimension */\n    _toGridCoord: function(type, px) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        type == \"top\" && (px -= this.top);\n        return parseInt(\n            (px + sign * this.options.margin) / this.options.cell,\n            10\n        );\n    },\n\n    /** Converts a grid to a pixels dimension */\n    _toPixelCoord: function(type, g) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        var px = g * this.options.cell - sign * this.options.margin;\n        type == \"top\" && (px += this.top);\n        return px;\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toGrid: function(px) {\n        return {\n            top: this._toGridCoord(\"top\", px.top),\n            left: this._toGridCoord(\"left\", px.left),\n            width: this._toGridCoord(\"width\", px.width),\n            height: this._toGridCoord(\"height\", px.height)\n        };\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toPixel: function(g) {\n        return {\n            top: this._toPixelCoord(\"top\", g.top),\n            left: this._toPixelCoord(\"left\", g.left),\n            width: this._toPixelCoord(\"width\", g.width),\n            height: this._toPixelCoord(\"height\", g.height)\n        };\n    },\n\n    /* \n        COLLISION DETECTION\n    */\n\n    /** Check collisions for a grid coordinate set */\n    _isCollision: function(g) {\n        function is_collision_pair(a, b) {\n            return !(\n                a.left > b.left + b.width - 1 ||\n                a.left + a.width - 1 < b.left ||\n                a.top > b.top + b.height - 1 ||\n                a.top + a.height - 1 < b.top\n            );\n        }\n        for (var i in this.frame_list) {\n            var frame = this.frame_list[i];\n            if (\n                frame.grid_location !== null &&\n                is_collision_pair(g, frame.grid_location)\n            ) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /** Return location/grid rank */\n    _locationRank: function(loc) {\n        return loc.top * this.cols + loc.left;\n    },\n\n    /*\n        PANEL/WINDOW FUNCTIONS\n    */\n\n    /** Refresh panel */\n    _panelRefresh: function(animate) {\n        this.cols = parseInt($(window).width() / this.options.cell, 10) + 1;\n        this._frameInsert(null, null, animate);\n    },\n\n    /** Complete panel animation / frames not moving */\n    _panelAnimationComplete: function() {\n        var self = this;\n        $(\".frame\")\n            .promise()\n            .done(function() {\n                self._panelScroll(0, true);\n            });\n    },\n\n    /** Scroll panel */\n    _panelScroll: function(delta, animate) {\n        var top_new = this.top - this.options.scroll * delta;\n        top_new = Math.max(top_new, this.top_max);\n        top_new = Math.min(top_new, this.options.top_min);\n        if (this.top != top_new) {\n            for (var i in this.frame_list) {\n                var frame = this.frame_list[i];\n                if (frame.grid_location !== null) {\n                    var screen_location = {\n                        top: frame.screen_location.top - (this.top - top_new),\n                        left: frame.screen_location.left\n                    };\n                    this._frameOffset(frame, screen_location, animate);\n                }\n            }\n            this.top = top_new;\n        }\n        this.render();\n    },\n\n    /*\n        FRAME FUNCTIONS\n    */\n\n    /** Initialize a new frame */\n    _frameInit: function(frame, id) {\n        frame.id = id;\n        frame.screen_location = {};\n        frame.grid_location = {};\n        frame.grid_rank = null;\n        frame.$el.attr(\"id\", id.substring(1));\n    },\n\n    /** Insert frame at given location */\n    _frameInsert: function(frame, new_loc, animate) {\n        var self = this;\n        var place_list = [];\n        if (frame) {\n            frame.grid_location = null;\n            place_list.push([frame, this._locationRank(new_loc)]);\n        }\n        _.each(this.frame_list, function(f) {\n            if (f.grid_location !== null) {\n                f.grid_location = null;\n                place_list.push([f, f.grid_rank]);\n            }\n        });\n        place_list.sort(function(a, b) {\n            return a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0;\n        });\n        _.each(place_list, function(place) {\n            self._framePlace(place[0], animate);\n        });\n        this.top_max = 0;\n        _.each(this.frame_list, function(f) {\n            if (f.grid_location !== null) {\n                self.top_max = Math.max(\n                    self.top_max,\n                    f.grid_location.top + f.grid_location.height\n                );\n            }\n        });\n        this.top_max =\n            $(window).height() -\n            this.top_max * this.options.cell -\n            2 * this.options.margin;\n        this.top_max = Math.min(this.top_max, this.options.top_min);\n        this.render();\n    },\n\n    /** Naive frame placement */\n    _framePlace: function(frame, animate) {\n        frame.grid_location = null;\n        var g = this._toGrid(this._frameScreen(frame));\n        var done = false;\n        for (var i = 0; i < this.options.rows; i++) {\n            for (var j = 0; j < Math.max(1, this.cols - g.width); j++) {\n                g.top = i;\n                g.left = j;\n                if (!this._isCollision(g)) {\n                    done = true;\n                    break;\n                }\n            }\n            if (done) {\n                break;\n            }\n        }\n        if (done) {\n            this._frameGrid(frame, g, animate);\n        } else {\n            console.log(\"Grid dimensions exceeded.\");\n        }\n    },\n\n    /** Handle frame focussing */\n    _frameFocus: function(frame, has_focus) {\n        frame.$el.css(\"z-index\", this.frame_z + (has_focus ? 1 : 0));\n    },\n\n    /** New left/top position frame */\n    _frameOffset: function(frame, p, animate) {\n        frame.screen_location.left = p.left;\n        frame.screen_location.top = p.top;\n        if (animate) {\n            this._frameFocus(frame, true);\n            var self = this;\n            frame.$el.animate({ top: p.top, left: p.left }, \"fast\", function() {\n                self._frameFocus(frame, false);\n            });\n        } else {\n            frame.$el.css({ top: p.top, left: p.left });\n        }\n    },\n\n    /** Resize frame */\n    _frameResize: function(frame, p) {\n        frame.$el.css({ width: p.width, height: p.height });\n        frame.screen_location.width = p.width;\n        frame.screen_location.height = p.height;\n    },\n\n    /** Push frame to new grid location */\n    _frameGrid: function(frame, l, animate) {\n        frame.grid_location = l;\n        this._frameOffset(frame, this._toPixel(l), animate);\n        frame.grid_rank = this._locationRank(l);\n    },\n\n    /** Get frame dimensions */\n    _frameScreen: function(frame) {\n        var p = frame.screen_location;\n        return {\n            top: p.top,\n            left: p.left,\n            width: p.width,\n            height: p.height\n        };\n    }\n});\n\nexport default {\n    View: View\n};\n"]}