{"version":3,"sources":["mvc/ui/ui-options.js"],"names":["define","Utils","Buttons","Base","Backbone","View","extend","initialize","options","self","this","model","Model","visible","data","id","uid","error_text","wait_text","multiple","optional","onchange","set","listenTo","_changeValue","_changeWait","_changeData","_changeVisible","on","get","value","render","$el","empty","removeClass","addClass","append","$message","$","$menu","$options","_template","all_button","ButtonCheck","onclick","prop","_getValue","trigger","update","_templateOptions","_","each","option","_templateOption","tooltip","title","placement","length","_messageShow","hide","css","show","_setValue","first","isArray","new_value","undefined","val","wait","unwait","values","v","selected","push","isEmpty","text","status","html","BaseIcons","pair","attr","type","name","label","Radio","prototype","call","Checkbox","RadioButton","closest","icon"],"mappings":"AACAA,QAAS,cAAe,qBAAuB,SAAUC,EAAOC,GAChE,GAAIC,GAAOC,SAASC,KAAKC,QACrBC,WAAY,SAAUC,GAClB,GAAIC,GAAOC,IACXA,MAAKC,MAAQH,GAAWA,EAAQG,OAAS,GAAIP,UAASQ,OAClDC,SAAc,EACdC,QACAC,GAAcd,EAAMe,MACpBC,WAAc,wBACdC,UAAc,iBACdC,UAAc,EACdC,UAAc,EACdC,SAAc,eACfC,IAAKd,GACRE,KAAKa,SAAUb,KAAKC,MAAO,eAAgBD,KAAKc,aAAcd,MAC9DA,KAAKa,SAAUb,KAAKC,MAAO,cAAeD,KAAKe,YAAaf,MAC5DA,KAAKa,SAAUb,KAAKC,MAAO,cAAeD,KAAKgB,YAAahB,MAC5DA,KAAKa,SAAUb,KAAKC,MAAO,iBAAkBD,KAAKiB,eAAgBjB,MAClEA,KAAKkB,GAAI,SAAU,WAAanB,EAAKE,MAAMkB,IAAK,YAAcpB,EAAKqB,WACnEpB,KAAKqB,UAGTA,OAAQ,WACJ,GAAItB,GAAOC,IACXA,MAAKsB,IAAIC,QACAC,cACAC,SAAU,cACVC,OAAQ1B,KAAK2B,SAAaC,EAAG,WAC7BF,OAAQ1B,KAAK6B,MAAaD,EAAG,UAAWH,SAAU,oBAClDC,OAAQ1B,KAAK8B,SAAaF,EAAG5B,KAAK+B,cAG3C/B,KAAKgC,WAAa,KACbhC,KAAKC,MAAMkB,IAAK,cACjBnB,KAAKgC,WAAa,GAAIxC,GAAQyC,aAC1BC,QAAS,WACLnC,EAAK6B,EAAG,SAAUO,KAAM,UAAuC,IAA5BpC,EAAKiC,WAAWZ,SACnDrB,EAAKqB,MAAOrB,EAAKqC,aACjBrC,EAAKsC,QAAS,aAGtBrC,KAAK6B,MAAMH,OAAQ1B,KAAKgC,WAAWV,MAIvCtB,KAAKgB,cACLhB,KAAKe,cACLf,KAAKiB,kBAITqB,OAAQ,SAAUxC,GACdE,KAAKC,MAAMW,IAAK,OAAQd,IAG5BkB,YAAa,WACT,GAAIjB,GAAOC,IACXA,MAAK8B,SAASP,QACTvB,KAAKuC,iBACNvC,KAAK8B,SAASJ,OAAQ1B,KAAKuC,iBAAkBvC,KAAKC,MAAMkB,IAAK,UAE7DqB,EAAEC,KAAMzC,KAAKC,MAAMkB,IAAK,QAAU,SAAUuB,GACxC3C,EAAK+B,SAASJ,OAAQE,EAAG7B,EAAK4C,gBAAiBD,IACtBjB,SAAU,aACVmB,SAAWC,MAAOH,EAAOE,QAASE,UAAW,aAG9E,IAAI/C,GAAOC,IACXA,MAAK4B,EAAG,SAAUV,GAAI,SAAU,WAC5BnB,EAAKqB,MAAOrB,EAAKqC,aACjBrC,EAAKsC,QAAS,YAElBrC,KAAKc,eACLd,KAAKe,eAGTE,eAAgB,WACZjB,KAAKsB,IAAKtB,KAAKC,MAAMkB,IAAK,WAAc,OAAS,WAGrDJ,YAAa,WACJf,KAAKC,MAAMkB,IAAK,QACM,IAAlBnB,KAAK+C,WACN/C,KAAKgD,aAAchD,KAAKC,MAAMkB,IAAK,aAAe,QAClDnB,KAAK8B,SAASmB,OACdjD,KAAK6B,MAAMoB,QAGQ,IAAlBjD,KAAK+C,UACN/C,KAAKgD,aAAchD,KAAKC,MAAMkB,IAAK,cAAgB,UACnDnB,KAAK8B,SAASmB,OACdjD,KAAK6B,MAAMoB,SAEXjD,KAAK2B,SAASsB,OACdjD,KAAK8B,SAASoB,IAAK,UAAW,gBAC9BlD,KAAK6B,MAAMsB,SAKvBrC,aAAc,WACVd,KAAKoD,UAAWpD,KAAKC,MAAMkB,IAAK,UACN,OAArBnB,KAAKoC,aAAyBpC,KAAKC,MAAMkB,IAAK,aAAiBnB,KAAKC,MAAMkB,IAAK,aAChFnB,KAAKoD,UAAWpD,KAAKqD,SAEzBrD,KAAKgC,YAAchC,KAAKgC,WAAWZ,MAAOQ,EAAE0B,QAAStD,KAAKoC,aAAgBpC,KAAKoC,YAAYW,OAAS,EAAG/C,KAAK+C,WAIhH3B,MAAO,SAAWmC,GAEd,WADcC,KAAdD,GAA2BvD,KAAKC,MAAMW,IAAK,QAAS2C,GAC7CvD,KAAKoC,aAIhBiB,MAAO,WACH,GAAIvD,GAAUE,KAAK4B,EAAG,SAAUyB,OAChC,OAAOvD,GAAQiD,OAAS,EAAIjD,EAAQ2D,MAAQ,MAIhDC,KAAM,WACF1D,KAAKC,MAAMW,IAAK,QAAQ,IAI5B+C,OAAQ,WACJ3D,KAAKC,MAAMW,IAAK,QAAQ,IAI5BmC,OAAQ,WACJ,MAAO/C,MAAK4B,EAAG,cAAemB,QAIlCK,UAAW,SAAUG,GACjB,GAAIxD,GAAOC,IACX,QAAmBwD,KAAdD,IACDvD,KAAK4B,EAAG,SAAUO,KAAM,WAAW,GAChB,OAAdoB,GAAqB,CACtB,GAAIK,GAAShC,EAAE0B,QAASC,GAAcA,GAAcA,EACpDf,GAAEC,KAAMmB,EAAQ,SAAUC,GACtB9D,EAAK6B,EAAG,gBAAkBiC,EAAI,MAAOR,QAAQlB,KAAM,WAAW,OAO9EC,UAAW,WACP,GAAI0B,KAIJ,OAHA9D,MAAK4B,EAAG,YAAaa,KAAM,WACvBqB,EAASC,KAAMnC,EAAG5B,MAAOyD,SAExBlE,EAAMyE,QAASF,GACT,KAEJ9D,KAAKC,MAAMkB,IAAK,YAAe2C,EAAWA,EAAU,IAI/Dd,aAAc,SAAUiB,EAAMC,GAC1BlE,KAAK2B,SAASwB,OACA3B,cACAC,SAAU,0BAA4ByC,GACtCC,KAAMF,IAIxBlC,UAAW,WACP,MAAOH,GAAG,UAAWH,SAAU,sBAKnC2C,EAAY3E,EAAKG,QACjB+C,gBAAiB,SAAU0B,GACvB,GAAIhE,GAAKd,EAAMe,KACf,OAAQsB,GAAG,UAAWH,SAAU,aACnBC,OAAQE,EAAG,YAAa0C,MACrBjE,GAAUA,EACVkE,KAAUvE,KAAKC,MAAMkB,IAAK,QAC1BqD,KAAUxE,KAAKC,MAAMI,GACrBe,MAAUiD,EAAKjD,SAClBM,OAAQE,EAAG,YAAaH,SAAU,oBACV6C,KAAM,MAAOjE,GACb8D,KAAME,EAAKI,WAKpDC,IACJA,GAAM/E,KAAOyE,EAAUxE,QACnBC,WAAY,SAAUC,GAClBA,EAAQyE,KAAO,QACfH,EAAUO,UAAU9E,WAAW+E,KAAM5E,KAAMF,KAKnD,IAAI+E,KACJA,GAASlF,KAAOyE,EAAUxE,QACtBC,WAAY,SAAUC,GAClBA,EAAQyE,KAAO,WACfzE,EAAQW,UAAW,EACnB2D,EAAUO,UAAU9E,WAAW+E,KAAM5E,KAAMF,KAKnD,IAAIgF,KA8BJ,OA7BAA,GAAYnF,KAAOF,EAAKG,QACpBC,WAAY,SAAUC,GAClBL,EAAKkF,UAAU9E,WAAW+E,KAAM5E,KAAMF,IAI1CsD,UAAW,SAAWG,OACCC,KAAdD,IACDvD,KAAK4B,EAAG,SAAUO,KAAM,WAAW,GACnCnC,KAAK4B,EAAG,SAAUJ,YAAa,UAC/BxB,KAAK4B,EAAG,WAAa2B,EAAY,MAAOpB,KAAM,WAAW,GAAO4C,QAAS,SAAUtD,SAAU,YAKrGkB,gBAAiB,SAAU0B,GACvB,GAAI/C,GAAOM,EAAG,YAAaH,SAAU,kBAIrC,OAHA4C,GAAKW,MAAQ1D,EAAII,OAAQE,EAAG,QAASH,SAAU,MAAOA,SAAU4C,EAAKW,MAAOvD,UAAW4C,EAAKI,OAAS,eACrGnD,EAAII,OAAQE,EAAG,YAAa0C,MAAQC,KAAM,QAASC,KAAMxE,KAAKC,MAAMI,GAAIe,MAAOiD,EAAKjD,SACpFiD,EAAKI,OAASnD,EAAII,OAAQ2C,EAAKI,OACxBnD,GAIXS,UAAW,WACP,MAAOH,GAAG,UAAWH,SAAU,4BAA6B6C,KAAM,cAAe,eAKrF7E,KAAcA,EACd2E,UAAcA,EACdM,MAAcA,EACdI,YAAcA,EACdD,SAAcA","file":"../../../scripts/mvc/ui/ui-options.js","sourcesContent":["/** Base class for options based ui elements **/\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar Base = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            visible     : true,\n            data        : [],\n            id          : Utils.uid(),\n            error_text  : 'No options available.',\n            wait_text   : 'Please wait...',\n            multiple    : false,\n            optional    : false,\n            onchange    : function(){}\n        }).set( options );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.on( 'change', function() { self.model.get( 'onchange' )( self.value() ) } );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty()\n                .removeClass()\n                .addClass( 'ui-options' )\n                .append( this.$message   = $( '<div/>' ) )\n                .append( this.$menu      = $( '<div/>' ).addClass( 'ui-options-menu' ) )\n                .append( this.$options   = $( this._template() ) );\n\n        // add select/unselect all button\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self.$( 'input' ).prop( 'checked', self.all_button.value() !== 0 );\n                    self.value( self._getValue() );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$menu.append( this.all_button.$el );\n        }\n\n        // finalize dom\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    _changeData: function() {\n        var self = this;\n        this.$options.empty();\n        if ( this._templateOptions ) {\n            this.$options.append( this._templateOptions( this.model.get( 'data' ) ) );\n        } else {\n            _.each( this.model.get( 'data' ), function( option ) {\n                self.$options.append( $( self._templateOption( option ) )\n                                        .addClass( 'ui-option' )\n                                        .tooltip( { title: option.tooltip, placement: 'bottom' } ) );\n            });\n        }\n        var self = this;\n        this.$( 'input' ).on( 'change', function() {\n            self.value( self._getValue() );\n            self.trigger( 'change' );\n        });\n        this._changeValue();\n        this._changeWait();\n    },\n\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    _changeWait: function() {\n        if ( this.model.get( 'wait' ) ) {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'wait_text' ), 'info' );\n                this.$options.hide();\n                this.$menu.hide();\n            }\n        } else {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'error_text' ), 'danger' );\n                this.$options.hide();\n                this.$menu.hide();\n            } else {\n                this.$message.hide();\n                this.$options.css( 'display', 'inline-block' );\n                this.$menu.show();\n            }\n        }\n    },\n\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this._getValue() === null && !this.model.get( 'multiple' ) && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n        this.all_button && this.all_button.value( $.isArray( this._getValue() ) ? this._getValue().length : 0, this.length() );\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return first available option */\n    first: function() {\n        var options = this.$( 'input' ).first();\n        return options.length > 0 ? options.val() : null;\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns the number of options */\n    length: function() {\n        return this.$( '.ui-option' ).length;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            if ( new_value !== null ) {\n                var values = $.isArray( new_value ) ? new_value : [ new_value ];\n                _.each( values, function( v ) {\n                    self.$( 'input[value=\"' + v + '\"]' ).first().prop( 'checked', true );\n                });\n            }\n        }\n    },\n\n    /** Return current selection */\n    _getValue: function() {\n        var selected = [];\n        this.$( ':checked' ).each( function() {\n            selected.push( $( this ).val() );\n        });\n        if ( Utils.isEmpty( selected ) ) {\n            return null;\n        }\n        return this.model.get( 'multiple' ) ? selected : selected[ 0 ];\n    },\n\n    /** Show message instead if options */\n    _messageShow: function( text, status ) {\n        this.$message.show()\n                     .removeClass()\n                     .addClass( 'ui-message alert alert-' + status )\n                     .html( text );\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list' );\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function( pair ) {\n        var id = Utils.uid();\n        return  $( '<div/>' ).addClass( 'ui-option' )\n                    .append( $( '<input/>' ).attr( {\n                        id      : id,\n                        type    : this.model.get( 'type' ),\n                        name    : this.model.id,\n                        value   : pair.value } ) )\n                    .append( $( '<label/>' ).addClass( 'ui-options-label' )\n                                            .attr( 'for', id )\n                                            .html( pair.label ) );\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'radio';\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'checkbox';\n        options.multiple = true;\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    initialize: function( options ) {\n        Base.prototype.initialize.call( this, options );\n    },\n\n    /** Set current value */\n    _setValue: function ( new_value ) {\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            this.$( 'label' ).removeClass( 'active' );\n            this.$( '[value=\"' + new_value + '\"]' ).prop( 'checked', true ).closest( 'label' ).addClass( 'active' );\n        }\n    },\n\n    /** Template for a single option */\n    _templateOption: function( pair ) {\n        var $el =  $( '<label/>' ).addClass( 'btn btn-default' );\n        pair.icon && $el.append( $( '<i/>' ).addClass( 'fa' ).addClass( pair.icon ).addClass( !pair.label && 'no-padding' ) );\n        $el.append( $( '<input/>' ).attr( { type: 'radio', name: this.model.id, value: pair.value } ) );\n        pair.label && $el.append( pair.label );\n        return $el;\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'btn-group ui-radiobutton' ).attr( 'data-toggle', 'buttons' );\n    }\n});\n\nreturn {\n    Base        : Base,\n    BaseIcons   : BaseIcons,\n    Radio       : Radio,\n    RadioButton : RadioButton,\n    Checkbox    : Checkbox\n};\n\n});\n"]}