{"version":3,"sources":["mvc/ui/ui-options.js"],"names":["define","Utils","Buttons","Base","Backbone","View","extend","initialize","options","self","this","model","Model","visible","data","uid","id","error_text","wait_text","multiple","optional","onchange","listenTo","_changeValue","_changeWait","_changeData","on","get","value","render","all_button","$el","empty","onclick","trigger","addClass","append","$options","$","_template","ButtonCheck","_changeVisible","prop","_getValue","$menu","title","placement","_templateOptions","_","each","option","_templateOption","tooltip","length","show","_setValue","hide","_messageShow","$message","css","wait","set","first","isArray","new_value","undefined","values","val","unwait","selected","v","name","push","isEmpty","BaseIcons","text","status","removeClass","Checkbox","RadioButton","pair","prototype","attr","type","html","Radio","call","closest","icon","label"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-options.js","sourcesContent":["/** Base class for options based ui elements **/\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    visible: true,\n                    data: [],\n                    id: Utils.uid(),\n                    error_text: \"No options available.\",\n                    wait_text: \"Please wait...\",\n                    multiple: false,\n                    optional: false,\n                    onchange: function() {}\n                }).set(options);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(\n                this.model,\n                \"change:visible\",\n                this._changeVisible,\n                this\n            );\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\")(self.value());\n            });\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.$el\n                .empty()\n                .removeClass()\n                .addClass(\"ui-options\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")))\n                .append((this.$options = $(this._template())));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get(\"multiple\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        self\n                            .$(\"input\")\n                            .prop(\"checked\", self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        _changeData: function() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(\n                    this._templateOptions(this.model.get(\"data\"))\n                );\n            } else {\n                _.each(this.model.get(\"data\"), function(option) {\n                    self.$options.append(\n                        $(self._templateOption(option))\n                            .addClass(\"ui-option\")\n                            .tooltip({\n                                title: option.tooltip,\n                                placement: \"bottom\"\n                            })\n                    );\n                });\n            }\n            var self = this;\n            this.$(\"input\").on(\"change\", function() {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        _changeWait: function() {\n            if (this.model.get(\"wait\")) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css(\"display\", \"inline-block\");\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (\n                this._getValue() === null &&\n                !this.model.get(\"multiple\") &&\n                !this.model.get(\"optional\")\n            ) {\n                this._setValue(this.first());\n            }\n            this.all_button &&\n                this.all_button.value(\n                    $.isArray(this._getValue()) ? this._getValue().length : 0,\n                    this.length()\n                );\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function() {\n            var options = this.$(\"input\").first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns the number of options */\n        length: function() {\n            return this.$(\".ui-option\").length;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function(v) {\n                        self\n                            .$('input[value=\"' + v + '\"]')\n                            .first()\n                            .prop(\"checked\", true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function() {\n            var selected = [];\n            this.$(\":checked\").each(function() {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get(\"multiple\") ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function(text, status) {\n            this.$message\n                .show()\n                .removeClass()\n                .addClass(\"ui-message alert alert-\" + status)\n                .html(text);\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\").addClass(\"ui-options-list\");\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function(pair) {\n            var id = Utils.uid();\n            return $(\"<div/>\")\n                .addClass(\"ui-option\")\n                .append(\n                    $(\"<input/>\").attr({\n                        id: id,\n                        type: this.model.get(\"type\"),\n                        name: this.model.id,\n                        value: pair.value\n                    })\n                )\n                .append(\n                    $(\"<label/>\")\n                        .addClass(\"ui-options-label\")\n                        .attr(\"for\", id)\n                        .html(pair.label)\n                );\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"radio\";\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"checkbox\";\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function(new_value) {\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                this.$(\"label\").removeClass(\"active\");\n                this.$('[value=\"' + new_value + '\"]')\n                    .prop(\"checked\", true)\n                    .closest(\"label\")\n                    .addClass(\"active\");\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function(pair) {\n            var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n            pair.icon &&\n                $el.append(\n                    $(\"<i/>\")\n                        .addClass(\"fa\")\n                        .addClass(pair.icon)\n                        .addClass(!pair.label && \"no-padding\")\n                );\n            $el.append(\n                $(\"<input/>\").attr({\n                    type: \"radio\",\n                    name: this.model.id,\n                    value: pair.value\n                })\n            );\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"btn-group ui-radiobutton\")\n                .attr(\"data-toggle\", \"buttons\");\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n});\n"]}