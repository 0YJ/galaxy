{"version":3,"sources":["mvc/ui/ui-options.js"],"names":["Base","Backbone","View","extend","initialize","options","self","this","model","Model","visible","data","id","_utils2","default","uid","error_text","wait_text","multiple","optional","onchange","set","_changeValue","_changeWait","listenTo","_changeData","get","value","$el","empty","removeClass","addClass","append","$message","$","$menu","$options","all_button","render","_uiButtons2","ButtonCheck","prop","_getValue","_changeVisible","update","_templateOptions","_","each","option","tooltip","on","_messageShow","length","hide","_setValue","first","new_value","undefined","val","wait","unwait","values","isArray","v","selected","push","show","isEmpty","text","status","BaseIcons","_templateOption","_template","Radio","pair","type","attr","html","label","prototype","call","Checkbox","RadioButton","icon","name"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-options.js","sourcesContent":["/** Base class for options based ui elements **/\nimport Utils from \"utils/utils\";\nimport Buttons from \"mvc/ui/ui-buttons\";\nvar Base = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                visible: true,\n                data: [],\n                id: Utils.uid(),\n                error_text: \"No options available.\",\n                wait_text: \"Please wait...\",\n                multiple: false,\n                optional: false,\n                onchange: function() {}\n            }).set(options);\n        this.listenTo(this.model, \"change:value\", this._changeValue, this);\n        this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n        this.listenTo(this.model, \"change:data\", this._changeData, this);\n        this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n        this.on(\"change\", function() {\n            self.model.get(\"onchange\")(self.value());\n        });\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$el\n            .empty()\n            .removeClass()\n            .addClass(\"ui-options\")\n            .append((this.$message = $(\"<div/>\")))\n            .append((this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")))\n            .append((this.$options = $(this._template())));\n\n        // add select/unselect all button\n        this.all_button = null;\n        if (this.model.get(\"multiple\")) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self\n                        .$(\"input\")\n                        .prop(\"checked\", self.all_button.value() !== 0);\n                    self.value(self._getValue());\n                    self.trigger(\"change\");\n                }\n            });\n            this.$menu.append(this.all_button.$el);\n        }\n\n        // finalize dom\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.model.set(\"data\", options);\n    },\n\n    _changeData: function() {\n        var self = this;\n        this.$options.empty();\n        if (this._templateOptions) {\n            this.$options.append(this._templateOptions(this.model.get(\"data\")));\n        } else {\n            _.each(this.model.get(\"data\"), function(option) {\n                self.$options.append(\n                    $(self._templateOption(option))\n                        .addClass(\"ui-option\")\n                        .tooltip({\n                            title: option.tooltip,\n                            placement: \"bottom\"\n                        })\n                );\n            });\n        }\n        var self = this;\n        this.$(\"input\").on(\"change\", function() {\n            self.value(self._getValue());\n            self.trigger(\"change\");\n        });\n        this._changeValue();\n        this._changeWait();\n    },\n\n    _changeVisible: function() {\n        this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n    },\n\n    _changeWait: function() {\n        if (this.model.get(\"wait\")) {\n            if (this.length() === 0) {\n                this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                this.$options.hide();\n                this.$menu.hide();\n            }\n        } else {\n            if (this.length() === 0) {\n                this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                this.$options.hide();\n                this.$menu.hide();\n            } else {\n                this.$message.hide();\n                this.$options.css(\"display\", \"inline-block\");\n                this.$menu.show();\n            }\n        }\n    },\n\n    _changeValue: function() {\n        this._setValue(this.model.get(\"value\"));\n        if (\n            this._getValue() === null &&\n            !this.model.get(\"multiple\") &&\n            !this.model.get(\"optional\")\n        ) {\n            this._setValue(this.first());\n        }\n        this.all_button &&\n            this.all_button.value(\n                $.isArray(this._getValue()) ? this._getValue().length : 0,\n                this.length()\n            );\n    },\n\n    /** Return/Set current selection */\n    value: function(new_value) {\n        new_value !== undefined && this.model.set(\"value\", new_value);\n        return this._getValue();\n    },\n\n    /** Return first available option */\n    first: function() {\n        var options = this.$(\"input\").first();\n        return options.length > 0 ? options.val() : null;\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Returns the number of options */\n    length: function() {\n        return this.$(\".ui-option\").length;\n    },\n\n    /** Set value to dom */\n    _setValue: function(new_value) {\n        var self = this;\n        if (new_value !== undefined) {\n            this.$(\"input\").prop(\"checked\", false);\n            if (new_value !== null) {\n                var values = $.isArray(new_value) ? new_value : [new_value];\n                _.each(values, function(v) {\n                    self\n                        .$('input[value=\"' + v + '\"]')\n                        .first()\n                        .prop(\"checked\", true);\n                });\n            }\n        }\n    },\n\n    /** Return current selection */\n    _getValue: function() {\n        var selected = [];\n        this.$(\":checked\").each(function() {\n            selected.push($(this).val());\n        });\n        if (Utils.isEmpty(selected)) {\n            return null;\n        }\n        return this.model.get(\"multiple\") ? selected : selected[0];\n    },\n\n    /** Show message instead if options */\n    _messageShow: function(text, status) {\n        this.$message\n            .show()\n            .removeClass()\n            .addClass(\"ui-message alert alert-\" + status)\n            .html(text);\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $(\"<div/>\").addClass(\"ui-options-list\");\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function(pair) {\n        var id = Utils.uid();\n        return $(\"<div/>\")\n            .addClass(\"ui-option\")\n            .append(\n                $(\"<input/>\").attr({\n                    id: id,\n                    type: this.model.get(\"type\"),\n                    name: this.model.id,\n                    value: pair.value\n                })\n            )\n            .append(\n                $(\"<label/>\")\n                    .addClass(\"ui-options-label\")\n                    .attr(\"for\", id)\n                    .html(pair.label)\n            );\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function(options) {\n        options.type = \"radio\";\n        BaseIcons.prototype.initialize.call(this, options);\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function(options) {\n        options.type = \"checkbox\";\n        options.multiple = true;\n        BaseIcons.prototype.initialize.call(this, options);\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    initialize: function(options) {\n        Base.prototype.initialize.call(this, options);\n    },\n\n    /** Set current value */\n    _setValue: function(new_value) {\n        if (new_value !== undefined) {\n            this.$(\"input\").prop(\"checked\", false);\n            this.$(\"label\").removeClass(\"active\");\n            this.$('[value=\"' + new_value + '\"]')\n                .prop(\"checked\", true)\n                .closest(\"label\")\n                .addClass(\"active\");\n        }\n    },\n\n    /** Template for a single option */\n    _templateOption: function(pair) {\n        var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n        pair.icon &&\n            $el.append(\n                $(\"<i/>\")\n                    .addClass(\"fa\")\n                    .addClass(pair.icon)\n                    .addClass(!pair.label && \"no-padding\")\n            );\n        $el.append(\n            $(\"<input/>\").attr({\n                type: \"radio\",\n                name: this.model.id,\n                value: pair.value\n            })\n        );\n        pair.label && $el.append(pair.label);\n        return $el;\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $(\"<div/>\")\n            .addClass(\"btn-group ui-radiobutton\")\n            .attr(\"data-toggle\", \"buttons\");\n    }\n});\n\nexport default {\n    Base: Base,\n    BaseIcons: BaseIcons,\n    Radio: Radio,\n    RadioButton: RadioButton,\n    Checkbox: Checkbox\n};\n"]}