{"version":3,"sources":["mvc/ui/ui-options.js"],"names":["define","Utils","Buttons","Base","Backbone","View","extend","options","initialize","Model","visible","data","uid","id","error_text","wait_text","multiple","optional","onchange","model","this","_changeValue","listenTo","_changeWait","_changeData","on","self","get","value","render","$el","empty","removeClass","addClass","$message","$","append","$options","_template","all_button","onclick","ButtonCheck","_getValue","trigger","$menu","_changeVisible","update","set","_templateOptions","_templateOption","option","tooltip","title","placement","length","_messageShow","hide","css","show","_setValue","isArray","first","new_value","undefined","val","wait","unwait","values","_","each","v","prop","selected","push","isEmpty","text","status","html","BaseIcons","name","attr","type","pair","call","label","Checkbox","prototype","RadioButton","closest","icon","Radio"],"mappings":"YACAA,SAAS,cAAe,qBAAuB,SAAUC,EAAOC,GADhE,GAAAC,GAAAC,SAAAC,KAAAC,QACAN,WAAS,SAAeO,GACpBJ,GAAAA,GAAOC,IACPI,MAAAA,MAAYD,GAAAA,EAAUA,OAAU,GAAAH,UAAAK,OAC5BC,SAAW,EACXC,QACID,GAAcT,EAD0CW,MAExDD,WAFwD,wBAGxDE,UAAoBD,iBACpBE,UAAAA,EACAC,UAAAA,EACAC,SAAc,eACdC,IAAAA,GACAC,KAAAA,SAAAA,KAAcC,MAAA,eAAYC,KAAAC,aAAAD,MAR8BA,KAAnBE,SASjCf,KATRY,MAAA,cAAAC,KAAAG,YAAAH,MAUAA,KAAAE,SAAKA,KAAUH,MAAKA,cAAOC,KAAgBI,YAAKH,MAChDD,KAAAE,SAAKA,KAAUH,MAAKA,iBAAsBC,KAAKG,eAAaH,MAC5DA,KAAAK,GAAKH,SAAU,WAAYI,EAAAP,MAA3BQ,IAA0C,YAA1CD,EAAAE,WACAR,KAAAS,UAC8EA,OAAA,WAC9E,GAAAH,GAAKG,IACRT,MAnB2BU,IAAAC,QAwBfC,cAHLC,SAAA,cACAP,OAAON,KAAXc,SAAAC,EAAA,WACKL,OAAIC,KACAC,MACAC,EAAAA,UAAUA,SACVG,oBAEAA,OAAQhB,KAAKiB,SAAaF,EAAGf,KAAKkB,cAI3ClB,KAAAmB,WAAK,KACDnB,KAAAD,MAAKoB,IAAAA,cACDC,KAAAA,WAAS,GAAAtC,GAAAuC,aACLf,QAAAA,WACAA,EAAAA,EAAAA,SAAYA,KAAKgB,UAAjB,IAAAhB,EAAAa,WAAAX,SACAF,EAAAA,MAAKiB,EAASD,aACjBhB,EAAAiB,QAAA,aAGRvB,KAAAwB,MAAAR,OAAAhB,KAAAmB,WAAAT,MAIDV,KAAAI,cACAJ,KAAAG,cACHH,KA/C2ByB,kBAmDxBC,OAAA,SAAAvC,GACHa,KApD2BD,MAAA4B,IAAA,OAAAxC,IAuDxBiB,YAAIE,WACJ,GAAAA,GAAKW,IACLjB,MAAAiB,SAAUW,QACN5B,KAAA4B,iBACH5B,KAFDiB,SAEOD,OAAAhB,KAAA4B,iBAAA5B,KAAAD,MAAAQ,IAAA,UAECD,EAAAA,KAAAA,KAAKW,MAAAA,IAASD,QAAWV,SAAKuB,GAGjCvB,EAJDW,SAAAD,OAAAD,EAAAT,EAAAuB,gBAAAC,IAKHjB,SAAA,aACDkB,SAAAC,MAAAF,EAAAC,QAAAE,UAAA,aAGI3B,IAAAA,GAAAA,IACHN,MAHDe,EAAA,SAAAV,GAAA,SAAA,WAIAC,EAAKL,MAAAA,EAALqB,aACAhB,EAAKH,QAAAA,YADLH,KAAKC,eAITwB,KAAAA,eAAAA,eAAgB,WAIhBtB,KAAAA,IAAAA,KAAaJ,MAAAQ,IAAA,WAAW,OAAA,WAGZJ,YAAA,WACAH,KAAAD,MAAAQ,IAAKU,QACL,IAAAjB,KAAAkC,WACHlC,KAAAmC,aAAAnC,KAAAD,MAAAQ,IAAA,aAAA,QALLP,KAMOiB,SAAAmB,OACHpC,KAAKwB,MAAKU,QAGN,IAAAlC,KAAAkC,UACHlC,KAJDmC,aAIOnC,KAAAD,MAAAQ,IAAA,cAAA,UACHP,KAAAiB,SAAKH,OACLd,KAAAwB,MAAKP,SAERjB,KAAAc,SAAAsB,OACJpC,KAAAiB,SAAAoB,IAAA,UAAA,gBAhGuBrC,KAAAwB,MAAAc,SAsGpBrC,aAAA,WACHD,KAAAuC,UAAAvC,KAAAD,MAAAQ,IAAA,UACkB,OAAnBP,KAAKmB,aAAmBA,KAAWX,MAAOO,IAAEyB,aAAclB,KAAhBvB,MAAgCQ,IAAKe,aAxGvDtB,KAAAuC,UAAAvC,KAAAyC,SA2G5BzC,KAAAmB,YAAAnB,KAAAmB,WAAAX,MAAAO,EAAAyB,QAAAxC,KAAAsB,aAAAtB,KAAAsB,YAAAY,OAAA,EAAAlC,KAAAkC,WAIC1B,MA/G2B,SAAAkC,GAiH5B,WAJkBC,KAAdD,GAA2B1C,KAAKD,MAAM4B,IAAK,QAASe,GAIxD1C,KAAAsB,aAICmB,MArH2B,WAmHxB,GAAItD,GAAUa,KAAKe,EAAG,SAAU0B,OAIpC,OAAAtD,GAAA+C,OAAA,EAAA/C,EAAAyD,MAAA,MACAC,KAAM,WAIN7C,KAAAD,MAAA4B,IAAA,QAAA,IACAmB,OAAQ,WAIR9C,KAAAD,MAAA4B,IAAA,QAAA,IACAO,OAAQ,WAIR,MAAAlC,MAAAe,EAAA,cAAAmB,QAIQK,UAAA,SAAQG,GACR,GAAApC,GAAAN,IACI,QAAI+C,KAAJL,IACAM,KAAAA,EAAAA,SAAQD,KAAQ,WAAA,GACJ,OAARzC,GAAQ,CACX,GAAAyC,GAFDhC,EAAAyB,QAAAE,GAAAA,GAAAA,EAGHM,GAAAC,KAAAF,EAAA,SAAAG,GACJ5C,EAAAS,EAAA,gBAAAmC,EAAA,MAAAT,QAAAU,KAAA,WAAA,OAOGC,UAAAA,WACH,GAAAA,KAID,OAHApD,MAAAe,EAAKlC,YAAAoE,KAAeG,WAChBA,EAAAC,KAAAtC,EAAAf,MAAA4C,SAEJ/D,EAAOyE,QAAKvD,GA7JY,KAgK5BC,KAAAD,MAAAQ,IAAA,YAAA6C,EAAAA,EAAA,IACAjB,aAAc,SAAUoB,EAAMC,GAO9BxD,KAAAc,SAAAwB,OACW1B,cACGC,SAAWA,0BAArB2C,GACHC,KAAAF,IAILrC,UAAIwC,WACA7B,MAAAA,GAAAA,UAAiBhB,SAAA,sBAMG8C,EAAAA,EAAAA,QACAnD,gBAAAA,SAAeA,GAIlC,GAAAf,GAAAZ,EAAAW,KAZL,OAAAuB,GAAA,UAAAF,SAAA,aAIqBG,OAAQD,EAAG,YAAa6C,MAW7CnE,GAAAA,EACAoE,KAAA7D,KAAAD,MAAAQ,IAAA,QACamD,KAAiB1D,KAAAD,MAAAN,GACde,MAAAsD,EAAAtD,SACAqD,OAAO9C,EAAA,YAAfF,SAAA,oBAC+BkD,KAAM,MAAM5E,GAC9CsE,KAAAK,EAAAE,WAKLC,IACI7E,GAAAA,KAAAA,EAAYF,QACRC,WAAAA,SAAAA,GACAA,EAAAA,KAAQS,QACR8D,EAAAA,UAAUQ,WAAU9E,KAAW2E,KAAM5E,KAK7C,IAAA8E,KACAE,GAAAA,KAAYlF,EAAOF,QACfK,WAAAA,SAAYD,GACRJ,EAAAA,KAAKmF,WACR/E,EAH0BS,UAAA,EANvB8D,EAAUQ,UAAU9E,WAAW2E,KAAM/D,KAAMb,KAevC,IAAAgF,KAoBZ,OAnBYA,GAAAlF,KAAAF,EAAQG,QACXE,WAAA,SAAAD,GACJJ,EAZ0BmF,UAAA9E,WAAA2E,KAAA/D,KAAAb,IAgBvBoD,UAAA,SAAcG,OACDhC,KAAboD,IACApD,KAAIM,EAAAA,SAAWmC,KAAH,WAAwBU,GACpCC,KAAKE,EAAAA,SAAahD,YAAagD,UAC/BhE,KAAAe,EAAOL,WAAPgC,EAAA,MAAAS,KAAA,WAAA,GAAAiB,QAAA,SAAAvD,SAAA,YAKAgB,gBAAU,SAAWhB,GACxB,GAAAH,GAAAK,EAAA,YAAAF,SAAA,kBAID9B,OA9BJ+E,GAAAO,MAAA3D,EAAAM,OAAAD,EAAA,QAAAF,SAAA,MAAAA,SAAAiD,EAAAO,MAAAxD,UAAAiD,EAAAE,OAAA,eAkBQtD,EAAIM,OAAQD,EAAG,YAAa6C,MAAQC,KAAM,QAASF,KAAM3D,KAAKD,MAAMN,GAAIe,MAAOsD,EAAKtD,SAW5FsD,EAAOE,OAAAtD,EAAAM,OAAA8C,EAAAE,OACWjF,GAIdkF,UAAAA,WALJ,MAAAlD,GAAA,UAAAF,SAAA,4BAAA+C,KAAA,cAAA,eACI7E,KAAcA,EACd2E,UAAcA,EACdY,MAAcA,EACdH,YAAcA,EACdF,SAAcA","file":"../../../scripts/mvc/ui/ui-options.js","sourcesContent":["/** Base class for options based ui elements **/\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar Base = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            visible     : true,\n            data        : [],\n            id          : Utils.uid(),\n            error_text  : 'No options available.',\n            wait_text   : 'Please wait...',\n            multiple    : false,\n            optional    : false,\n            onchange    : function(){}\n        }).set( options );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.on( 'change', function() { self.model.get( 'onchange' )( self.value() ) } );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty()\n                .removeClass()\n                .addClass( 'ui-options' )\n                .append( this.$message   = $( '<div/>' ) )\n                .append( this.$menu      = $( '<div/>' ).addClass( 'ui-options-menu' ) )\n                .append( this.$options   = $( this._template() ) );\n\n        // add select/unselect all button\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self.$( 'input' ).prop( 'checked', self.all_button.value() !== 0 );\n                    self.value( self._getValue() );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$menu.append( this.all_button.$el );\n        }\n\n        // finalize dom\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    _changeData: function() {\n        var self = this;\n        this.$options.empty();\n        if ( this._templateOptions ) {\n            this.$options.append( this._templateOptions( this.model.get( 'data' ) ) );\n        } else {\n            _.each( this.model.get( 'data' ), function( option ) {\n                self.$options.append( $( self._templateOption( option ) )\n                                        .addClass( 'ui-option' )\n                                        .tooltip( { title: option.tooltip, placement: 'bottom' } ) );\n            });\n        }\n        var self = this;\n        this.$( 'input' ).on( 'change', function() {\n            self.value( self._getValue() );\n            self.trigger( 'change' );\n        });\n        this._changeValue();\n        this._changeWait();\n    },\n\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    _changeWait: function() {\n        if ( this.model.get( 'wait' ) ) {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'wait_text' ), 'info' );\n                this.$options.hide();\n                this.$menu.hide();\n            }\n        } else {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'error_text' ), 'danger' );\n                this.$options.hide();\n                this.$menu.hide();\n            } else {\n                this.$message.hide();\n                this.$options.css( 'display', 'inline-block' );\n                this.$menu.show();\n            }\n        }\n    },\n\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this._getValue() === null && !this.model.get( 'multiple' ) && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n        this.all_button && this.all_button.value( $.isArray( this._getValue() ) ? this._getValue().length : 0, this.length() );\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return first available option */\n    first: function() {\n        var options = this.$( 'input' ).first();\n        return options.length > 0 ? options.val() : null;\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns the number of options */\n    length: function() {\n        return this.$( '.ui-option' ).length;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            if ( new_value !== null ) {\n                var values = $.isArray( new_value ) ? new_value : [ new_value ];\n                _.each( values, function( v ) {\n                    self.$( 'input[value=\"' + v + '\"]' ).first().prop( 'checked', true );\n                });\n            }\n        }\n    },\n\n    /** Return current selection */\n    _getValue: function() {\n        var selected = [];\n        this.$( ':checked' ).each( function() {\n            selected.push( $( this ).val() );\n        });\n        if ( Utils.isEmpty( selected ) ) {\n            return null;\n        }\n        return this.model.get( 'multiple' ) ? selected : selected[ 0 ];\n    },\n\n    /** Show message instead if options */\n    _messageShow: function( text, status ) {\n        this.$message.show()\n                     .removeClass()\n                     .addClass( 'ui-message alert alert-' + status )\n                     .html( text );\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list' );\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function( pair ) {\n        var id = Utils.uid();\n        return  $( '<div/>' ).addClass( 'ui-option' )\n                    .append( $( '<input/>' ).attr( {\n                        id      : id,\n                        type    : this.model.get( 'type' ),\n                        name    : this.model.id,\n                        value   : pair.value } ) )\n                    .append( $( '<label/>' ).addClass( 'ui-options-label' )\n                                            .attr( 'for', id )\n                                            .html( pair.label ) );\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'radio';\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'checkbox';\n        options.multiple = true;\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    initialize: function( options ) {\n        Base.prototype.initialize.call( this, options );\n    },\n\n    /** Set current value */\n    _setValue: function ( new_value ) {\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            this.$( 'label' ).removeClass( 'active' );\n            this.$( '[value=\"' + new_value + '\"]' ).prop( 'checked', true ).closest( 'label' ).addClass( 'active' );\n        }\n    },\n\n    /** Template for a single option */\n    _templateOption: function( pair ) {\n        var $el =  $( '<label/>' ).addClass( 'btn btn-default' );\n        pair.icon && $el.append( $( '<i/>' ).addClass( 'fa' ).addClass( pair.icon ).addClass( !pair.label && 'no-padding' ) );\n        $el.append( $( '<input/>' ).attr( { type: 'radio', name: this.model.id, value: pair.value } ) );\n        pair.label && $el.append( pair.label );\n        return $el;\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'btn-group ui-radiobutton' ).attr( 'data-toggle', 'buttons' );\n    }\n});\n\nreturn {\n    Base        : Base,\n    BaseIcons   : BaseIcons,\n    Radio       : Radio,\n    RadioButton : RadioButton,\n    Checkbox    : Checkbox\n};\n\n});\n"]}