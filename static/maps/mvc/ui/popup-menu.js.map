{"version":3,"sources":["mvc/ui/popup-menu.js"],"names":["define","PopupMenu","Backbone","View","extend","initialize","$button","options","this","length","data","menu","click","event","$","remove","_renderAndShow","clickEvent","render","$el","appendTo","_setUpCloseBehavior","show","addClass","hide","css","position","html","find","each","attr","li","option","func","call","i","children","preventDefault","template","id","_templateOptions","join","_getShownPosition","divider","menuWidth","pageX","document","x","target","checked","width","Math","min","scrollLeft","window","max","top","pageY","left","index","closePopup","removeItem","off","parent","err","contents","has","one","findItemByHtml","toString","addItem","item","splice","convertedOptions","findIndexByHtml","optionVal","newOption","header","jQuery","button_element","$parent","selector","make_popupmenu","initial_options","_","confirmText","confirm","optionKey","type","push","convertLinksToOptions","elem","$link","$menuElement","$buttonElement","linkTarget","make_popup_menus","location","linkHref","buttonSelectorBuildFn","popupMenusCreated","fromExistingDom","menuElementLinkSelector","menuSelector","fromDom"],"mappings":"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","file":"../../../scripts/mvc/ui/popup-menu.js","sourcesContent":["define(\n    [\n        //jquery\n        //backbone\n    ],\n    function() {\n        // =============================================================================\n        /**\n * view for a popup menu\n */\n        var PopupMenu = Backbone.View.extend({\n            //TODO: maybe better as singleton off the Galaxy obj\n            /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n            initialize: function($button, options) {\n                // default settings\n                this.$button = $button;\n                if (!this.$button.length) {\n                    this.$button = $(\"<div/>\");\n                }\n                this.options = options || [];\n                this.$button.data(\"popupmenu\", this);\n\n                // set up button click -> open menu behavior\n                var menu = this;\n                this.$button.click(function(event) {\n                    // if there's already a menu open, remove it\n                    $(\".popmenu-wrapper\").remove();\n                    menu._renderAndShow(event);\n                    return false;\n                });\n            },\n\n            // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n            _renderAndShow: function(clickEvent) {\n                this.render();\n                this.$el\n                    .appendTo(\"body\")\n                    .css(this._getShownPosition(clickEvent))\n                    .show();\n                this._setUpCloseBehavior();\n            },\n\n            // render the menu\n            // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n            render: function() {\n                // render the menu body absolute and hidden, fill with template\n                this.$el\n                    .addClass(\"popmenu-wrapper\")\n                    .hide()\n                    .css({ position: \"absolute\" })\n                    .html(this.template(this.$button.attr(\"id\"), this.options));\n\n                // set up behavior on each link/anchor elem\n                if (this.options.length) {\n                    var menu = this;\n                    //precondition: there should be one option per li\n                    this.$el.find(\"li\").each(function(i, li) {\n                        var option = menu.options[i];\n\n                        // if the option has 'func', call that function when the anchor is clicked\n                        if (option.func) {\n                            $(this)\n                                .children(\"a.popupmenu-option\")\n                                .click(function(event) {\n                                    option.func.call(menu, event, option);\n                                    // We must preventDefault otherwise clicking \"cancel\"\n                                    // on a purge or something still navigates and causes\n                                    // the action.\n                                    event.preventDefault();\n                                    // bubble up so that an option click will call the close behavior\n                                });\n                        }\n                    });\n                }\n                return this;\n            },\n\n            template: function(id, options) {\n                return [\n                    '<ul id=\"',\n                    id,\n                    '-menu\" class=\"dropdown-menu\">',\n                    this._templateOptions(options),\n                    \"</ul>\"\n                ].join(\"\");\n            },\n\n            _templateOptions: function(options) {\n                if (!options.length) {\n                    return \"<li>(no options)</li>\";\n                }\n                return _.map(options, function(option) {\n                    if (option.divider) {\n                        return '<li class=\"divider\"></li>';\n                    } else if (option.header) {\n                        return [\n                            '<li class=\"head\"><a href=\"javascript:void(0);\">',\n                            option.html,\n                            \"</a></li>\"\n                        ].join(\"\");\n                    }\n                    var href = option.href || \"javascript:void(0);\",\n                        target = option.target\n                            ? ' target=\"' + option.target + '\"'\n                            : \"\",\n                        check = option.checked\n                            ? '<span class=\"fa fa-check\"></span>'\n                            : \"\";\n                    return [\n                        '<li><a class=\"popupmenu-option\" href=\"',\n                        href,\n                        '\"',\n                        target,\n                        \">\",\n                        check,\n                        option.html,\n                        \"</a></li>\"\n                    ].join(\"\");\n                }).join(\"\");\n            },\n\n            // get the absolute position/offset for the menu\n            _getShownPosition: function(clickEvent) {\n                // display menu horiz. centered on click...\n                var menuWidth = this.$el.width();\n                var x = clickEvent.pageX - menuWidth / 2;\n\n                // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n                x = Math.min(\n                    x,\n                    $(document).scrollLeft() + $(window).width() - menuWidth - 5\n                );\n                x = Math.max(x, $(document).scrollLeft() + 5);\n                return {\n                    top: clickEvent.pageY,\n                    left: x\n                };\n            },\n\n            // bind an event handler to all available frames so that when anything is clicked\n            // the menu is removed from the DOM and the event handler unbinds itself\n            _setUpCloseBehavior: function() {\n                var menu = this;\n                //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n                // function to close popup and unbind itself\n                function closePopup(event) {\n                    $(document).off(\"click.close_popup\");\n                    if (window && window.parent !== window) {\n                        try {\n                            $(window.parent.document).off(\"click.close_popup\");\n                        } catch (err) {}\n                    } else {\n                        try {\n                            $(\"iframe#galaxy_main\")\n                                .contents()\n                                .off(\"click.close_popup\");\n                        } catch (err) {}\n                    }\n                    menu.remove();\n                }\n\n                $(\"html\").one(\"click.close_popup\", closePopup);\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document)\n                            .find(\"html\")\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                } else {\n                    try {\n                        $(\"iframe#galaxy_main\")\n                            .contents()\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                }\n            },\n\n            // add a menu option/item at the given index\n            addItem: function(item, index) {\n                // append to end if no index\n                index = index >= 0 ? index : this.options.length;\n                this.options.splice(index, 0, item);\n                return this;\n            },\n\n            // remove a menu option/item at the given index\n            removeItem: function(index) {\n                if (index >= 0) {\n                    this.options.splice(index, 1);\n                }\n                return this;\n            },\n\n            // search for a menu option by its html\n            findIndexByHtml: function(html) {\n                for (var i = 0; i < this.options.length; i++) {\n                    if (\n                        _.has(this.options[i], \"html\") &&\n                        this.options[i].html === html\n                    ) {\n                        return i;\n                    }\n                }\n                return null;\n            },\n\n            // search for a menu option by its html\n            findItemByHtml: function(html) {\n                return this.options[this.findIndexByHtml(html)];\n            },\n\n            // string representation\n            toString: function() {\n                return \"PopupMenu\";\n            }\n        });\n        /** shortcut to new for when you don't need to preserve the ref */\n        PopupMenu.create = function _create($button, options) {\n            return new PopupMenu($button, options);\n        };\n\n        // -----------------------------------------------------------------------------\n        // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n        // to the newer backbone.js PopupMenu\n\n        /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\n        PopupMenu.make_popupmenu = function(button_element, initial_options) {\n            var convertedOptions = [];\n            _.each(initial_options, function(optionVal, optionKey) {\n                var newOption = { html: optionKey };\n\n                // keys with null values indicate: header\n                if (optionVal === null) {\n                    // !optionVal? (null only?)\n                    newOption.header = true;\n\n                    // keys with function values indicate: a menu option\n                } else if (jQuery.type(optionVal) === \"function\") {\n                    newOption.func = optionVal;\n                }\n                //TODO:?? any other special optionVals?\n                // there was no divider option originally\n                convertedOptions.push(newOption);\n            });\n            return new PopupMenu($(button_element), convertedOptions);\n        };\n\n        /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n        //TODO: lose parent and selector, pass in array of links, use map to return options\n        PopupMenu.convertLinksToOptions = function($parent, selector) {\n            $parent = $($parent);\n            selector = selector || \"a\";\n            var options = [];\n            $parent.find(selector).each(function(elem, i) {\n                var option = {},\n                    $link = $(elem);\n\n                // convert link text to the option text (html) and the href into the option func\n                option.html = $link.text();\n                if ($link.attr(\"href\")) {\n                    var linkHref = $link.attr(\"href\"),\n                        linkTarget = $link.attr(\"target\"),\n                        confirmText = $link.attr(\"confirm\");\n\n                    option.func = function() {\n                        // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                        //  if the user cancels - do nothing\n                        if (confirmText && !confirm(confirmText)) {\n                            return;\n                        }\n\n                        // if there's no confirm attribute, or the user accepted the confirm dialog:\n                        switch (linkTarget) {\n                            // relocate the center panel\n                            case \"_parent\":\n                                window.parent.location = linkHref;\n                                break;\n\n                            // relocate the entire window\n                            case \"_top\":\n                                window.top.location = linkHref;\n                                break;\n\n                            // relocate this panel\n                            default:\n                                window.location = linkHref;\n                        }\n                    };\n                }\n                options.push(option);\n            });\n            return options;\n        };\n\n        /** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\n        PopupMenu.fromExistingDom = function(\n            $buttonElement,\n            $menuElement,\n            menuElementLinkSelector\n        ) {\n            $buttonElement = $($buttonElement);\n            $menuElement = $($menuElement);\n            var options = PopupMenu.convertLinksToOptions(\n                $menuElement,\n                menuElementLinkSelector\n            );\n            // we're done with the menu (having converted it to an options map)\n            $menuElement.remove();\n            return new PopupMenu($buttonElement, options);\n        };\n\n        /** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\n        PopupMenu.make_popup_menus = function(\n            parent,\n            menuSelector,\n            buttonSelectorBuildFn\n        ) {\n            parent = parent || document;\n            // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n            //  which contains the id of the button that activates the menu\n            menuSelector = menuSelector || \"div[popupmenu]\";\n            // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n            buttonSelectorBuildFn =\n                buttonSelectorBuildFn ||\n                function($menuElement, parent) {\n                    return \"#\" + $menuElement.attr(\"popupmenu\");\n                };\n\n            // aggregate and return all PopupMenus\n            var popupMenusCreated = [];\n            $(parent)\n                .find(menuSelector)\n                .each(function() {\n                    var $menuElement = $(this),\n                        $buttonElement = $(parent).find(\n                            buttonSelectorBuildFn($menuElement, parent)\n                        );\n                    popupMenusCreated.push(\n                        PopupMenu.fromDom($buttonElement, $menuElement)\n                    );\n                    $buttonElement.addClass(\"popup\");\n                });\n            return popupMenusCreated;\n        };\n\n        // =============================================================================\n        return PopupMenu;\n    }\n);\n"]}