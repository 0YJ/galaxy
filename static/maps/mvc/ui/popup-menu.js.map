{"version":3,"sources":["mvc/ui/popup-menu.js"],"names":["define","PopupMenu","Backbone","View","extend","initialize","$button","options","this","length","$","data","menu","click","event","remove","_renderAndShow","clickEvent","render","$el","appendTo","css","_getShownPosition","show","_setUpCloseBehavior","addClass","hide","position","html","template","attr","find","each","i","li","option","func","children","call","preventDefault","id","_templateOptions","join","_","map","divider","header","href","target","menuWidth","width","x","pageX","Math","min","document","scrollLeft","window","max","top","pageY","left","closePopup","off","parent","err","contents","one","addItem","item","index","splice","removeItem","findIndexByHtml","has","findItemByHtml","toString","create","make_popupmenu","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","jQuery","type","push","convertLinksToOptions","$parent","selector","elem","$link","text","linkHref","linkTarget","confirmText","confirm","location","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom"],"mappings":"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","file":"../../../scripts/mvc/ui/popup-menu.js","sourcesContent":["define([\n    //jquery\n    //backbone\n], function(){\n// =============================================================================\n/**\n * view for a popup menu\n */\nvar PopupMenu = Backbone.View.extend({\n//TODO: maybe better as singleton off the Galaxy obj\n    /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n    initialize: function( $button, options ){\n        // default settings\n        this.$button = $button;\n        if( !this.$button.length ){\n            this.$button = $( '<div/>' );\n        }\n        this.options = options || [];\n        this.$button.data( 'popupmenu', this );\n\n        // set up button click -> open menu behavior\n        var menu = this;\n        this.$button.click( function( event ){\n            // if there's already a menu open, remove it\n            $( '.popmenu-wrapper' ).remove();\n            menu._renderAndShow( event );\n            return false;\n        });\n    },\n\n    // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n    _renderAndShow: function( clickEvent ){\n        this.render();\n        this.$el.appendTo( 'body' ).css( this._getShownPosition( clickEvent )).show();\n        this._setUpCloseBehavior();\n    },\n\n    // render the menu\n    // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n    render: function(){\n        // render the menu body absolute and hidden, fill with template\n        this.$el.addClass( 'popmenu-wrapper' ).hide()\n            .css({ position : 'absolute' })\n            .html( this.template( this.$button.attr( 'id' ), this.options ));\n\n        // set up behavior on each link/anchor elem\n        if( this.options.length ){\n            var menu = this;\n            //precondition: there should be one option per li\n            this.$el.find( 'li' ).each( function( i, li ){\n                var option = menu.options[i];\n\n                // if the option has 'func', call that function when the anchor is clicked\n                if( option.func ){\n                    $( this ).children( 'a.popupmenu-option' ).click( function( event ){\n                        option.func.call( menu, event, option );\n                        // We must preventDefault otherwise clicking \"cancel\"\n                        // on a purge or something still navigates and causes\n                        // the action.\n                        event.preventDefault();\n                        // bubble up so that an option click will call the close behavior\n                    });\n                }\n            });\n        }\n        return this;\n    },\n\n    template : function( id, options ){\n        return [\n            '<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions( options ), '</ul>'\n        ].join( '' );\n    },\n\n    _templateOptions : function( options ){\n        if( !options.length ){\n            return '<li>(no options)</li>';\n        }\n        return _.map( options, function( option ){\n            if( option.divider ){\n                return '<li class=\"divider\"></li>';\n            } else if( option.header ){\n                return [ '<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>' ].join( '' );\n            }\n            var href   = option.href || 'javascript:void(0);',\n                target = ( option.target  )?( ' target=\"' + option.target + '\"' ):( '' ),\n                check  = ( option.checked )?( '<span class=\"fa fa-check\"></span>' ):( '' );\n            return [\n                '<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>',\n                    check, option.html,\n                '</a></li>'\n            ].join( '' );\n        }).join( '' );\n    },\n\n    // get the absolute position/offset for the menu\n    _getShownPosition : function( clickEvent ){\n\n        // display menu horiz. centered on click...\n        var menuWidth = this.$el.width();\n        var x = clickEvent.pageX - menuWidth / 2 ;\n\n        // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n        x = Math.min( x, $( document ).scrollLeft() + $( window ).width() - menuWidth - 5 );\n        x = Math.max( x, $( document ).scrollLeft() + 5 );\n        return {\n            top: clickEvent.pageY,\n            left: x\n        };\n    },\n\n    // bind an event handler to all available frames so that when anything is clicked\n    // the menu is removed from the DOM and the event handler unbinds itself\n    _setUpCloseBehavior: function(){\n        var menu = this;\n//TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n        // function to close popup and unbind itself\n        function closePopup( event ){\n            $( document ).off( 'click.close_popup' );\n            if( window && window.parent !== window ){\n                try {\n                    $( window.parent.document ).off( \"click.close_popup\" );\n                } catch( err ){}\n            } else {\n                try {\n                    $( 'iframe#galaxy_main' ).contents().off( \"click.close_popup\" );\n                } catch( err ){}\n            }\n            menu.remove();\n        }\n\n        $( 'html' ).one( \"click.close_popup\", closePopup );\n        if( window && window.parent !== window ){\n            try {\n                $( window.parent.document ).find( 'html' ).one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        } else {\n            try {\n                $( 'iframe#galaxy_main' ).contents().one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        }\n    },\n\n    // add a menu option/item at the given index\n    addItem: function( item, index ){\n        // append to end if no index\n        index = ( index >= 0 ) ? index : this.options.length;\n        this.options.splice( index, 0, item );\n        return this;\n    },\n\n    // remove a menu option/item at the given index\n    removeItem: function( index ){\n        if( index >=0 ){\n            this.options.splice( index, 1 );\n        }\n        return this;\n    },\n\n    // search for a menu option by its html\n    findIndexByHtml: function( html ){\n        for( var i = 0; i < this.options.length; i++ ){\n            if( _.has( this.options[i], 'html' ) && ( this.options[i].html === html )){\n                return i;\n            }\n        }\n        return null;\n    },\n\n    // search for a menu option by its html\n    findItemByHtml: function( html ){\n        return this.options[( this.findIndexByHtml( html ))];\n    },\n\n    // string representation\n    toString: function(){\n        return 'PopupMenu';\n    }\n});\n/** shortcut to new for when you don't need to preserve the ref */\nPopupMenu.create = function _create( $button, options ){\n    return new PopupMenu( $button, options );\n};\n\n// -----------------------------------------------------------------------------\n// the following class functions are bridges from the original make_popupmenu and make_popup_menus\n// to the newer backbone.js PopupMenu\n\n/** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\nPopupMenu.make_popupmenu = function( button_element, initial_options ){\n    var convertedOptions = [];\n    _.each( initial_options, function( optionVal, optionKey ){\n        var newOption = { html: optionKey };\n\n        // keys with null values indicate: header\n        if( optionVal === null ){ // !optionVal? (null only?)\n            newOption.header = true;\n\n        // keys with function values indicate: a menu option\n        } else if( jQuery.type( optionVal ) === 'function' ){\n            newOption.func = optionVal;\n        }\n        //TODO:?? any other special optionVals?\n        // there was no divider option originally\n        convertedOptions.push( newOption );\n    });\n    return new PopupMenu( $( button_element ), convertedOptions );\n};\n\n/** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n//TODO: lose parent and selector, pass in array of links, use map to return options\nPopupMenu.convertLinksToOptions = function( $parent, selector ){\n    $parent = $( $parent );\n    selector = selector || 'a';\n    var options = [];\n    $parent.find( selector ).each( function( elem, i ){\n        var option = {}, $link = $( elem );\n\n        // convert link text to the option text (html) and the href into the option func\n        option.html = $link.text();\n        if( $link.attr( 'href' ) ){\n            var linkHref    = $link.attr( 'href' ),\n                linkTarget  = $link.attr( 'target' ),\n                confirmText = $link.attr( 'confirm' );\n\n            option.func = function(){\n                // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                //  if the user cancels - do nothing\n                if( ( confirmText ) && ( !confirm( confirmText ) ) ){ return; }\n\n                // if there's no confirm attribute, or the user accepted the confirm dialog:\n                switch( linkTarget ){\n                    // relocate the center panel\n                    case '_parent':\n                        window.parent.location = linkHref;\n                        break;\n\n                    // relocate the entire window\n                    case '_top':\n                        window.top.location = linkHref;\n                        break;\n\n                    // relocate this panel\n                    default:\n                        window.location = linkHref;\n                }\n            };\n        }\n        options.push( option );\n    });\n    return options;\n};\n\n/** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\nPopupMenu.fromExistingDom = function( $buttonElement, $menuElement, menuElementLinkSelector ){\n    $buttonElement = $( $buttonElement );\n    $menuElement = $( $menuElement );\n    var options = PopupMenu.convertLinksToOptions( $menuElement, menuElementLinkSelector );\n    // we're done with the menu (having converted it to an options map)\n    $menuElement.remove();\n    return new PopupMenu( $buttonElement, options );\n};\n\n/** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\nPopupMenu.make_popup_menus = function( parent, menuSelector, buttonSelectorBuildFn ){\n    parent = parent || document;\n    // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n    //  which contains the id of the button that activates the menu\n    menuSelector = menuSelector || 'div[popupmenu]';\n    // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n    buttonSelectorBuildFn = buttonSelectorBuildFn || function( $menuElement, parent ){\n        return '#' + $menuElement.attr( 'popupmenu' );\n    };\n\n    // aggregate and return all PopupMenus\n    var popupMenusCreated = [];\n    $( parent ).find( menuSelector ).each( function(){\n        var $menuElement    = $( this ),\n            $buttonElement  = $( parent ).find( buttonSelectorBuildFn( $menuElement, parent ) );\n        popupMenusCreated.push( PopupMenu.fromDom( $buttonElement, $menuElement ) );\n        $buttonElement.addClass( 'popup' );\n    });\n    return popupMenusCreated;\n};\n\n\n// =============================================================================\n    return PopupMenu;\n});\n\n"]}