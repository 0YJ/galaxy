{"version":3,"sources":["mvc/ui/ui-misc.js"],"names":["Label","Backbone","View","extend","tagName","initialize","options","this","model","Model","setElement","$","listenTo","render","title","new_title","set","value","get","$el","html","message","status","cls","removeClass","persistent","fade","update","addClass","timeout","self","window","setTimeout","fadeOut","messageForDisplay","_","escape","UnescapedMessage","Message","Input","type","placeholder","visible","disabled","readonly","area","color","style","events","input","undefined","new_val","attr","datalist","isArray","autocomplete","source","response","change","length","request","val","each","attr_name","_onchange","removeAttr","Hidden","append","$info","$hidden","Upload","id","$file","on","_readFile","text","hide","show","target","files","reader","onload","$wait","e","Button","ButtonCheck","ButtonLink","Drilldown","Modal","RadioButton","Checkbox","Radio","Select","Slider","file","FileReader","wait","result","readAsText","_uiButtons2","default","ButtonDefault","ButtonIcon","ButtonMenu","_uiOptions2"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-misc.js","sourcesContent":["/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\nimport Utils from \"utils/utils\";\nimport Select from \"mvc/ui/ui-select-default\";\nimport Slider from \"mvc/ui/ui-slider\";\nimport Options from \"mvc/ui/ui-options\";\nimport Drilldown from \"mvc/ui/ui-drilldown\";\nimport Buttons from \"mvc/ui/ui-buttons\";\nimport Modal from \"mvc/ui/ui-modal\";\n/** Label wrapper */\nvar Label = Backbone.View.extend({\n    tagName: \"label\",\n    initialize: function(options) {\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.tagName = options.tagName || this.tagName;\n        this.setElement($(\"<\" + this.tagName + \"/>\"));\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n    title: function(new_title) {\n        this.model.set(\"title\", new_title);\n    },\n    value: function() {\n        return this.model.get(\"title\");\n    },\n    render: function() {\n        this.$el\n            .removeClass()\n            .addClass(\"ui-label\")\n            .addClass(this.model.get(\"cls\"))\n            .html(this.model.get(\"title\"));\n        return this;\n    }\n});\n\n/** Displays messages used e.g. in the tool form */\nvar Message = Backbone.View.extend({\n    initialize: function(options) {\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                message: null,\n                status: \"info\",\n                cls: \"\",\n                persistent: false,\n                fade: true\n            }).set(options);\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n    update: function(options) {\n        this.model.set(options);\n    },\n    render: function() {\n        this.$el\n            .removeClass()\n            .addClass(\"ui-message\")\n            .addClass(this.model.get(\"cls\"));\n        var status = this.model.get(\"status\");\n        if (this.model.get(\"large\")) {\n            this.$el.addClass(\n                ((status == \"success\" && \"done\") ||\n                    (status == \"danger\" && \"error\") ||\n                    status) + \"messagelarge\"\n            );\n        } else {\n            this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n        }\n        if (this.model.get(\"message\")) {\n            this.$el.html(this.messageForDisplay());\n            this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n            this.timeout && window.clearTimeout(this.timeout);\n            if (!this.model.get(\"persistent\")) {\n                var self = this;\n                this.timeout = window.setTimeout(() => {\n                    self.model.set(\"message\", \"\");\n                }, 3000);\n            }\n        } else {\n            this.$el.fadeOut();\n        }\n        return this;\n    },\n    messageForDisplay: function() {\n        return _.escape(this.model.get(\"message\"));\n    }\n});\n\nvar UnescapedMessage = Message.extend({\n    messageForDisplay: function() {\n        return this.model.get(\"message\");\n    }\n});\n\n/** Renders an input element used e.g. in the tool form */\nvar Input = Backbone.View.extend({\n    initialize: function(options) {\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                type: \"text\",\n                placeholder: \"\",\n                disabled: false,\n                readonly: false,\n                visible: true,\n                cls: \"\",\n                area: false,\n                color: null,\n                style: null\n            }).set(options);\n        this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n        this.setElement($(\"<\" + this.tagName + \"/>\"));\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n    events: {\n        input: \"_onchange\"\n    },\n    value: function(new_val) {\n        new_val !== undefined &&\n            this.model.set(\"value\", typeof new_val === \"string\" ? new_val : \"\");\n        return this.model.get(\"value\");\n    },\n    render: function() {\n        var self = this;\n        this.$el\n            .removeClass()\n            .addClass(\"ui-\" + this.tagName)\n            .addClass(this.model.get(\"cls\"))\n            .addClass(this.model.get(\"style\"))\n            .attr(\"id\", this.model.id)\n            .attr(\"type\", this.model.get(\"type\"))\n            .attr(\"placeholder\", this.model.get(\"placeholder\"))\n            .css(\"color\", this.model.get(\"color\") || \"\")\n            .css(\"border-color\", this.model.get(\"color\") || \"\");\n        var datalist = this.model.get(\"datalist\");\n        if ($.isArray(datalist) && datalist.length > 0) {\n            this.$el.autocomplete({\n                source: function(request, response) {\n                    response(self.model.get(\"datalist\"));\n                },\n                change: function() {\n                    self._onchange();\n                }\n            });\n        }\n        if (this.model.get(\"value\") !== this.$el.val()) {\n            this.$el.val(this.model.get(\"value\"));\n        }\n        _.each([\"readonly\", \"disabled\"], attr_name => {\n            self.model.get(attr_name)\n                ? self.$el.attr(attr_name, true)\n                : self.$el.removeAttr(attr_name);\n        });\n        this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        return this;\n    },\n    _onchange: function() {\n        this.value(this.$el.val());\n        this.model.get(\"onchange\") &&\n            this.model.get(\"onchange\")(this.model.get(\"value\"));\n    }\n});\n\n/** Creates a hidden element input field used e.g. in the tool form */\nvar Hidden = Backbone.View.extend({\n    initialize: function(options) {\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.setElement(\n            $(\"<div/>\")\n                .append((this.$info = $(\"<div/>\")))\n                .append((this.$hidden = $(\"<div/>\")))\n        );\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.render();\n    },\n    value: function(new_val) {\n        new_val !== undefined && this.model.set(\"value\", new_val);\n        return this.model.get(\"value\");\n    },\n    render: function() {\n        this.$el.attr(\"id\", this.model.id);\n        this.$hidden.val(this.model.get(\"value\"));\n        this.model.get(\"info\")\n            ? this.$info.show().text(this.model.get(\"info\"))\n            : this.$info.hide();\n        return this;\n    }\n});\n\n/** Creates a upload element input field */\nvar Upload = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.setElement(\n            $(\"<div/>\")\n                .append((this.$info = $(\"<div/>\")))\n                .append(\n                    (this.$file = $(\"<input/>\")\n                        .attr(\"type\", \"file\")\n                        .addClass(\"ui-margin-bottom\"))\n                )\n                .append(\n                    (this.$text = $(\"<textarea/>\")\n                        .addClass(\"ui-textarea\")\n                        .attr(\"disabled\", true))\n                )\n                .append(\n                    (this.$wait = $(\"<i/>\").addClass(\"fa fa-spinner fa-spin\"))\n                )\n        );\n        this.listenTo(this.model, \"change\", this.render, this);\n        this.$file.on(\"change\", e => {\n            self._readFile(e);\n        });\n        this.render();\n    },\n    value: function(new_val) {\n        new_val !== undefined && this.model.set(\"value\", new_val);\n        return this.model.get(\"value\");\n    },\n    render: function() {\n        this.$el.attr(\"id\", this.model.id);\n        this.model.get(\"info\")\n            ? this.$info.show().text(this.model.get(\"info\"))\n            : this.$info.hide();\n        this.model.get(\"value\")\n            ? this.$text.text(this.model.get(\"value\")).show()\n            : this.$text.hide();\n        this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n        return this;\n    },\n    _readFile: function(e) {\n        var self = this;\n        var file = e.target.files && e.target.files[0];\n        if (file) {\n            var reader = new FileReader();\n            reader.onload = function() {\n                self.model.set({ wait: false, value: this.result });\n            };\n            this.model.set({ wait: true, value: null });\n            reader.readAsText(file);\n        }\n    }\n});\n\nexport default {\n    Button: Buttons.ButtonDefault,\n    ButtonIcon: Buttons.ButtonIcon,\n    ButtonCheck: Buttons.ButtonCheck,\n    ButtonMenu: Buttons.ButtonMenu,\n    ButtonLink: Buttons.ButtonLink,\n    Input: Input,\n    Label: Label,\n    Message: Message,\n    UnescapedMessage: UnescapedMessage,\n    Upload: Upload,\n    Modal: Modal,\n    RadioButton: Options.RadioButton,\n    Checkbox: Options.Checkbox,\n    Radio: Options.Radio,\n    Select: Select,\n    Hidden: Hidden,\n    Slider: Slider,\n    Drilldown: Drilldown\n};\n"]}