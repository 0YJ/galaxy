{"version":3,"sources":["mvc/ui/ui-misc.js"],"names":["define","tagName","initialize","Select","Slider","Options","options","Buttons","Modal","Label","Backbone","setElement","extend","listenTo","render","this","model","Model","title","new_title","$","value","set","get","message","$el","removeClass","addClass","Message","View","status","cls","persistent","fade","update","messageForDisplay","timeout","window","setTimeout","fadeOut","clearTimeout","_","escape","self","type","placeholder","disabled","color","style","readonly","visible","area","new_val","events","input","isArray","response","change","undefined","attr_name","attr","css","_onchange","datalist","length","source","request","val","removeAttr","Hidden","append","$info","$hidden","Upload","_readFile","id","show","text","hide","$text","$wait","$file","file","e","target","files","reader","onload","wait","result","ButtonIcon","ButtonCheck","ButtonMenu","ButtonLink","Input","FileReader","readAsText","ButtonDefault","Drilldown","UnescapedMessage","RadioButton","Checkbox","Radio"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-misc.js","sourcesContent":["/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(['utils/utils',\n    'mvc/ui/ui-select-default',\n    'mvc/ui/ui-slider',\n    'mvc/ui/ui-options',\n    'mvc/ui/ui-drilldown',\n    'mvc/ui/ui-buttons',\n    'mvc/ui/ui-modal'],\n    function( Utils, Select, Slider, Options, Drilldown, Buttons, Modal ) {\n\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: 'label',\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.tagName = options.tagName || this.tagName;\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        title: function( new_title ) {\n            this.model.set( 'title', new_title );\n        },\n        value: function() {\n            return this.model.get( 'title' );\n        },\n        render: function() {\n            this.$el.removeClass()\n                    .addClass( 'ui-label' )\n                    .addClass( this.model.get( 'cls' ) )\n                    .html( this.model.get( 'title' ) );\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                message     : null,\n                status      : 'info',\n                cls         : '',\n                persistent  : false,\n                fade        : true\n            }).set( options );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        update: function( options ) {\n            this.model.set( options );\n        },\n        render: function() {\n            this.$el.removeClass().addClass( 'ui-message' ).addClass( this.model.get( 'cls' ) );\n            var status = this.model.get( 'status' );\n            if ( this.model.get( 'large' ) ) {\n                this.$el.addClass((( status == 'success' && 'done' ) ||\n                                   ( status == 'danger' && 'error' ) ||\n                                     status ) + 'messagelarge' );\n            } else {\n                this.$el.addClass( 'alert' ).addClass( 'alert-' + status );\n            }\n            if ( this.model.get( 'message' ) ) {\n                this.$el.html( this.messageForDisplay() );\n                this.$el[ this.model.get( 'fade' ) ? 'fadeIn' : 'show' ]();\n                this.timeout && window.clearTimeout( this.timeout );\n                if ( !this.model.get( 'persistent' ) ) {\n                    var self = this;\n                    this.timeout = window.setTimeout( function() {\n                        self.model.set( 'message', '' );\n                    }, 3000 );\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function() {\n            return _.escape( this.model.get( 'message' ) );\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function() {\n            return this.model.get( 'message' );\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                type            : 'text',\n                placeholder     : '',\n                disabled        : false,\n                readonly        : false,\n                visible         : true,\n                cls             : '',\n                area            : false,\n                color           : null,\n                style           : null\n            }).set( options );\n            this.tagName = this.model.get( 'area' ) ? 'textarea' : 'input';\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        events: {\n            'input': '_onchange'\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', typeof new_val === 'string' ? new_val : '' );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            var self = this;\n            this.$el.removeClass()\n                    .addClass( 'ui-' + this.tagName )\n                    .addClass( this.model.get( 'cls' ) )\n                    .addClass( this.model.get( 'style' ) )\n                    .attr( 'id', this.model.id )\n                    .attr( 'type', this.model.get( 'type' ) )\n                    .attr( 'placeholder', this.model.get( 'placeholder' ) )\n                    .css( 'color', this.model.get( 'color' ) || '' )\n                    .css( 'border-color', this.model.get( 'color' ) || '' );\n            var datalist = this.model.get( 'datalist' );\n            if ( $.isArray( datalist ) && datalist.length > 0 ) {\n                this.$el.autocomplete( { source : function( request, response ) { response( self.model.get( 'datalist' ) ) },\n                                         change : function() { self._onchange() } } );\n            }\n            if ( this.model.get( 'value' ) !== this.$el.val() ) {\n                this.$el.val( this.model.get( 'value' ) );\n            }\n            _.each( [ 'readonly', 'disabled' ], function( attr_name ) {\n                self.model.get( attr_name ) ? self.$el.attr( attr_name, true ) : self.$el.removeAttr( attr_name );\n            });\n            this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n            return this;\n        },\n        _onchange: function() {\n            this.value( this.$el.val() );\n            this.model.get( 'onchange' ) && this.model.get( 'onchange' )( this.model.get( 'value' ) );\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$hidden = $( '<div/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.$hidden.val( this.model.get( 'value' ) );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$file = $( '<input/>' ).attr( 'type', 'file' ).addClass( 'ui-margin-bottom' ) )\n                                           .append( this.$text = $( '<textarea/>' ).addClass( 'ui-textarea' ).attr( 'disabled', true ) )\n                                           .append( this.$wait = $( '<i/>' ).addClass( 'fa fa-spinner fa-spin' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.$file.on( 'change', function( e ) { self._readFile( e ) } );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            this.model.get( 'value' ) ? this.$text.text( this.model.get( 'value' ) ).show() : this.$text.hide();\n            this.model.get( 'wait' ) ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function( e ) {\n            var self = this;\n            var file = e.target.files && e.target.files[ 0 ];\n            if ( file ) {\n                var reader = new FileReader();\n                reader.onload = function() {\n                    self.model.set( { wait: false, value: this.result } );\n                }\n                this.model.set( { wait: true, value: null } );\n                reader.readAsText( file );\n            }\n        }\n    });\n\n    return {\n        Button           : Buttons.ButtonDefault,\n        ButtonIcon       : Buttons.ButtonIcon,\n        ButtonCheck      : Buttons.ButtonCheck,\n        ButtonMenu       : Buttons.ButtonMenu,\n        ButtonLink       : Buttons.ButtonLink,\n        Input            : Input,\n        Label            : Label,\n        Message          : Message,\n        UnescapedMessage : UnescapedMessage,\n        Upload           : Upload,\n        Modal            : Modal,\n        RadioButton      : Options.RadioButton,\n        Checkbox         : Options.Checkbox,\n        Radio            : Options.Radio,\n        Select           : Select,\n        Hidden           : Hidden,\n        Slider           : Slider,\n        Drilldown        : Drilldown\n    }\n});\n"]}