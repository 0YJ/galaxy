{"version":3,"sources":["mvc/ui/ui-misc.js"],"names":["define","tagName","initialize","Utils","Select","setElement","Options","Buttons","Modal","Label","Backbone","View","extend","title","options","this","model","Model","value","get","listenTo","render","new_title","set","fade","message","status","cls","persistent","update","removeClass","addClass","timeout","self","fadeOut","messageForDisplay","$el","escape","window","clearTimeout","setTimeout","disabled","visible","area","color","UnescapedMessage","Message","new_val","undefined","placeholder","datalist","isArray","autocomplete","source","response","change","$","events","_","append","id","attr","css","length","_onchange","Upload","val","each","attr_name","removeAttr","Hidden","_readFile","file","$info","reader","FileReader","wait","readAsText","ButtonLink","Button","ButtonDefault","ButtonIcon","ButtonCheck","ButtonMenu","RadioButton","Checkbox","Slider","Drilldown","$file","$text","$wait","on","e","show","text","hide","target","files","onload","result","Input","Radio"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-misc.js","sourcesContent":["/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-select-default\",\n        \"mvc/ui/ui-slider\",\n        \"mvc/ui/ui-options\",\n        \"mvc/ui/ui-drilldown\",\n        \"mvc/ui/ui-buttons\",\n        \"mvc/ui/ui-modal\"\n    ],\n    function(Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n        /** Label wrapper */\n        var Label = Backbone.View.extend({\n            tagName: \"label\",\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.tagName = options.tagName || this.tagName;\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            title: function(new_title) {\n                this.model.set(\"title\", new_title);\n            },\n            value: function() {\n                return this.model.get(\"title\");\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-label\")\n                    .addClass(this.model.get(\"cls\"))\n                    .html(this.model.get(\"title\"));\n                return this;\n            }\n        });\n\n        /** Displays messages used e.g. in the tool form */\n        var Message = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        message: null,\n                        status: \"info\",\n                        cls: \"\",\n                        persistent: false,\n                        fade: true\n                    }).set(options);\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            update: function(options) {\n                this.model.set(options);\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-message\")\n                    .addClass(this.model.get(\"cls\"));\n                var status = this.model.get(\"status\");\n                if (this.model.get(\"large\")) {\n                    this.$el.addClass(\n                        ((status == \"success\" && \"done\") ||\n                            (status == \"danger\" && \"error\") ||\n                            status) + \"messagelarge\"\n                    );\n                } else {\n                    this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n                }\n                if (this.model.get(\"message\")) {\n                    this.$el.html(this.messageForDisplay());\n                    this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n                    this.timeout && window.clearTimeout(this.timeout);\n                    if (!this.model.get(\"persistent\")) {\n                        var self = this;\n                        this.timeout = window.setTimeout(function() {\n                            self.model.set(\"message\", \"\");\n                        }, 3000);\n                    }\n                } else {\n                    this.$el.fadeOut();\n                }\n                return this;\n            },\n            messageForDisplay: function() {\n                return _.escape(this.model.get(\"message\"));\n            }\n        });\n\n        var UnescapedMessage = Message.extend({\n            messageForDisplay: function() {\n                return this.model.get(\"message\");\n            }\n        });\n\n        /** Renders an input element used e.g. in the tool form */\n        var Input = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        type: \"text\",\n                        placeholder: \"\",\n                        disabled: false,\n                        readonly: false,\n                        visible: true,\n                        cls: \"\",\n                        area: false,\n                        color: null,\n                        style: null\n                    }).set(options);\n                this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            events: {\n                input: \"_onchange\"\n            },\n            value: function(new_val) {\n                new_val !== undefined &&\n                    this.model.set(\n                        \"value\",\n                        typeof new_val === \"string\" ? new_val : \"\"\n                    );\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                var self = this;\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-\" + this.tagName)\n                    .addClass(this.model.get(\"cls\"))\n                    .addClass(this.model.get(\"style\"))\n                    .attr(\"id\", this.model.id)\n                    .attr(\"type\", this.model.get(\"type\"))\n                    .attr(\"placeholder\", this.model.get(\"placeholder\"))\n                    .css(\"color\", this.model.get(\"color\") || \"\")\n                    .css(\"border-color\", this.model.get(\"color\") || \"\");\n                var datalist = this.model.get(\"datalist\");\n                if ($.isArray(datalist) && datalist.length > 0) {\n                    this.$el.autocomplete({\n                        source: function(request, response) {\n                            response(self.model.get(\"datalist\"));\n                        },\n                        change: function() {\n                            self._onchange();\n                        }\n                    });\n                }\n                if (this.model.get(\"value\") !== this.$el.val()) {\n                    this.$el.val(this.model.get(\"value\"));\n                }\n                _.each([\"readonly\", \"disabled\"], function(attr_name) {\n                    self.model.get(attr_name)\n                        ? self.$el.attr(attr_name, true)\n                        : self.$el.removeAttr(attr_name);\n                });\n                this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n                return this;\n            },\n            _onchange: function() {\n                this.value(this.$el.val());\n                this.model.get(\"onchange\") &&\n                    this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n        });\n\n        /** Creates a hidden element input field used e.g. in the tool form */\n        var Hidden = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append((this.$hidden = $(\"<div/>\")))\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.$hidden.val(this.model.get(\"value\"));\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                return this;\n            }\n        });\n\n        /** Creates a upload element input field */\n        var Upload = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append(\n                            (this.$file = $(\"<input/>\")\n                                .attr(\"type\", \"file\")\n                                .addClass(\"ui-margin-bottom\"))\n                        )\n                        .append(\n                            (this.$text = $(\"<textarea/>\")\n                                .addClass(\"ui-textarea\")\n                                .attr(\"disabled\", true))\n                        )\n                        .append(\n                            (this.$wait = $(\"<i/>\").addClass(\n                                \"fa fa-spinner fa-spin\"\n                            ))\n                        )\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.$file.on(\"change\", function(e) {\n                    self._readFile(e);\n                });\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                this.model.get(\"value\")\n                    ? this.$text.text(this.model.get(\"value\")).show()\n                    : this.$text.hide();\n                this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n                return this;\n            },\n            _readFile: function(e) {\n                var self = this;\n                var file = e.target.files && e.target.files[0];\n                if (file) {\n                    var reader = new FileReader();\n                    reader.onload = function() {\n                        self.model.set({ wait: false, value: this.result });\n                    };\n                    this.model.set({ wait: true, value: null });\n                    reader.readAsText(file);\n                }\n            }\n        });\n\n        return {\n            Button: Buttons.ButtonDefault,\n            ButtonIcon: Buttons.ButtonIcon,\n            ButtonCheck: Buttons.ButtonCheck,\n            ButtonMenu: Buttons.ButtonMenu,\n            ButtonLink: Buttons.ButtonLink,\n            Input: Input,\n            Label: Label,\n            Message: Message,\n            UnescapedMessage: UnescapedMessage,\n            Upload: Upload,\n            Modal: Modal,\n            RadioButton: Options.RadioButton,\n            Checkbox: Options.Checkbox,\n            Radio: Options.Radio,\n            Select: Select,\n            Hidden: Hidden,\n            Slider: Slider,\n            Drilldown: Drilldown\n        };\n    }\n);\n"]}