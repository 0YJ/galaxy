{"version":3,"sources":["mvc/ui/ui-select-library.js"],"names":["define","Utils","Ui","Table","List","Libraries","Backbone","Collection","extend","LibraryDatasets","initialize","this","self","Model","library_id","config","on","reset","url","Galaxy","get","View","options","datasets","library_select","Select","onchange","value","set","optional","multiple","trigger","label","libraries","each","model","data","push","update","text","id","dataset_list","setElement","_template","append","$el","success","undefined","val"],"mappings":"kCACAA,QACK,cAAe,iBAAkB,kBAAmB,kBAFzD,SAAAC,EAAAC,EAAAC,EAAAC,GAIQ,IAAAC,EAAAC,SAAAC,WAAAC,QACIH,IAAAA,OAAYC,KAAAA,gCAIhBG,EAAAH,SAAAC,WAAAC,QACIC,WAAAA,WACAC,IAAAA,EAAYC,KACRA,KAAIC,OAAO,IAAXN,SAAAO,OAAAC,WAAA,OACAH,KAAKI,OAALC,GAAc,SAAIV,WAClBM,EAAKG,OAAUE,OAAf,OAGHC,IAP4C,WAQ7CA,OACIC,OACIA,KAKP,iBAfLR,KAAAI,OAAAK,IAAA,cAaY,eA0GZ,OACIC,KAjGIf,SAAWe,KAAXb,QAEAE,WAAA,SAAAY,GAEA,IAAAV,EAAKW,KAGLZ,KAAKW,UAAUA,IAAAA,EAHfX,KAAKY,SAAW,IAAId,EAOpBE,KAAKa,QAAAA,EAAoCb,KAAzCa,eAAA,IAAAtB,EAAAuB,OAAAJ,MACIK,SAAU,SAASC,GAKvBf,EAAAW,SAAAR,OAAAa,IAAA,aAAAD,MAKID,KAAAA,aAAU,IAAAtB,EAAAiB,MACNT,KAAAA,UACHiB,SAAAP,EAAAO,SANLC,SAAAR,EAAAQ,SAIIJ,SAAU,WAKdd,EAAAmB,QAAA,aAKYJ,KAAAA,UAAAA,GAAAA,QADM,WAENK,IAAAA,KAFMpB,EAAVqB,UAAAC,KAAA,SAAAC,GADJC,EAAAC,MAMKb,MAAAA,EAAec,GARxBN,MAAAG,EAAAf,IAAA,YAYAR,EAAKW,eAALe,OAA0BF,KAIlBxB,KAAAA,SAAKW,GAAAA,QAAL,WACI,IAAAa,KAEeD,OADDvB,EAAAY,eAAAe,QAENP,EAAAA,SAAAA,KAAOG,SAAAA,GAFX,SAAUA,EAAVf,IAAA,SAIHgB,EAAAC,MANLV,MAAAQ,EAAAK,GAQHR,MAAAG,EAAAf,IAAA,YAKLR,EAAQ6B,aAAUH,OAAAF,KAIlBzB,KAAAK,GAAA,SAAA,WACAM,EAAKoB,UAAgBC,EAArBjB,SAAAd,EAAAe,WAIAhB,KAAA+B,WAAA/B,KAAAgC,aACAhC,KAAKsB,EAAAA,mBAAgBW,OAAAjC,KAAAa,eAAAqB,KACjB5B,KAAAA,IAAAA,OADiBN,KAAA8B,aAAAI,KAIblC,KAAAsB,UAAIrB,OACAA,OAAAA,EACHkC,QAAA,WACJlC,EAAAY,eAAAO,QAAA,eAPLgB,IAAAnC,EAAAU,QAAAK,OAvEwBf,EAAAe,MAAAf,EAAAU,QAAAK,WAuF5BA,MAAA,SAAAqB,GACAL,OAAWhC,KAAA8B,aAAAd,MAAWqB,IAAtBL,UAAW,WAYR,MACGtB","file":"../../../scripts/mvc/ui/ui-select-library.js","sourcesContent":["// dependencies\ndefine(\n    [\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-table\", \"mvc/ui/ui-list\"],\n    function(Utils, Ui, Table, List) {\n        // collection of libraries\n        var Libraries = Backbone.Collection.extend({\n            url: Galaxy.root + \"api/libraries?deleted=false\"\n        });\n\n        // collection of dataset\n        var LibraryDatasets = Backbone.Collection.extend({\n            initialize: function() {\n                var self = this;\n                this.config = new Backbone.Model({ library_id: null });\n                this.config.on(\"change\", function() {\n                    self.fetch({ reset: true });\n                });\n            },\n            url: function() {\n                return (\n                    Galaxy.root +\n                    \"api/libraries/\" +\n                    this.config.get(\"library_id\") +\n                    \"/contents\"\n                );\n            }\n        });\n\n        // hda/hdca content selector ui element\n        var View = Backbone.View.extend({\n            // initialize\n            initialize: function(options) {\n                // link this\n                var self = this;\n\n                // collections\n                this.libraries = new Libraries();\n                this.datasets = new LibraryDatasets();\n\n                // link app and options\n                this.options = options;\n\n                // select field for the library\n                // TODO: Remove this once the library API supports searching for library datasets\n                this.library_select = new Ui.Select.View({\n                    onchange: function(value) {\n                        self.datasets.config.set(\"library_id\", value);\n                    }\n                });\n\n                // create ui-list view to keep track of selected data libraries\n                this.dataset_list = new List.View({\n                    name: \"dataset\",\n                    optional: options.optional,\n                    multiple: options.multiple,\n                    onchange: function() {\n                        self.trigger(\"change\");\n                    }\n                });\n\n                // add reset handler for fetched libraries\n                this.libraries.on(\"reset\", function() {\n                    var data = [];\n                    self.libraries.each(function(model) {\n                        data.push({\n                            value: model.id,\n                            label: model.get(\"name\")\n                        });\n                    });\n                    self.library_select.update(data);\n                });\n\n                // add reset handler for fetched library datasets\n                this.datasets.on(\"reset\", function() {\n                    var data = [];\n                    var library_current = self.library_select.text();\n                    if (library_current !== null) {\n                        self.datasets.each(function(model) {\n                            if (model.get(\"type\") === \"file\") {\n                                data.push({\n                                    value: model.id,\n                                    label: model.get(\"name\")\n                                });\n                            }\n                        });\n                    }\n                    self.dataset_list.update(data);\n                });\n\n                // add change event. fires on trigger\n                this.on(\"change\", function() {\n                    options.onchange && options.onchange(self.value());\n                });\n\n                // create elements\n                this.setElement(this._template());\n                this.$(\".library-select\").append(this.library_select.$el);\n                this.$el.append(this.dataset_list.$el);\n\n                // initial fetch of libraries\n                this.libraries.fetch({\n                    reset: true,\n                    success: function() {\n                        self.library_select.trigger(\"change\");\n                        if (self.options.value !== undefined) {\n                            self.value(self.options.value);\n                        }\n                    }\n                });\n            },\n\n            /** Return/Set currently selected library datasets */\n            value: function(val) {\n                return this.dataset_list.value(val);\n            },\n\n            /** Template */\n            _template: function() {\n                return (\n                    '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                    '<span class=\"library-title\">Select Library</span>' +\n                    '<span class=\"library-select\"/>' +\n                    \"</div>\" +\n                    \"</div>\"\n                );\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n"]}