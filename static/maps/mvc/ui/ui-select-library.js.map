{"version":3,"sources":["mvc/ui/ui-select-library.js"],"names":["define","Utils","Ui","Table","List","Libraries","Backbone","Collection","extend","url","Galaxy","root","LibraryDatasets","initialize","self","this","config","Model","library_id","on","fetch","reset","get","View","options","libraries","datasets","library_select","Select","onchange","value","set","dataset_list","name","optional","multiple","trigger","data","each","model","push","id","label","update","text","setElement","_template","$","append","$el","success","undefined","val"],"mappings":"AACAA,QAAQ,cAAe,iBAAkB,kBAAmB,kBACpD,SAASC,EAAOC,EAAIC,EAAOC,GAGnC,GAAIC,GAAYC,SAASC,WAAWC,QAChCC,IAAKC,OAAOC,KAAO,gCAInBC,EAAkBN,SAASC,WAAWC,QACtCK,WAAY,WACR,GAAIC,GAAOC,IACXA,MAAKC,OAAS,GAAIV,UAASW,OAAQC,WAAY,OAC/CH,KAAKC,OAAOG,GAAG,SAAU,WACrBL,EAAKM,OAAQC,OAAO,OAG5BZ,IAAK,WACD,MAAOC,QAAOC,KAAO,iBAAmBI,KAAKC,OAAOM,IAAI,cAAgB,cAuGhF,QACIC,KAnGOjB,SAASiB,KAAKf,QAErBK,WAAa,SAASW,GAElB,GAAIV,GAAOC,IAGXA,MAAKU,UAAa,GAAIpB,GACtBU,KAAKW,SAAa,GAAId,GAGtBG,KAAKS,QAAUA,EAIfT,KAAKY,eAAiB,GAAIzB,GAAG0B,OAAOL,MAChCM,SAAc,SAASC,GACnBhB,EAAKY,SAASV,OAAOe,IAAI,aAAcD,MAK/Cf,KAAKiB,aAAe,GAAI5B,GAAKmB,MACzBU,KAAc,UACdC,SAAcV,EAAQU,SACtBC,SAAcX,EAAQW,SACtBN,SAAc,WACVf,EAAKsB,QAAQ,aAKrBrB,KAAKU,UAAUN,GAAG,QAAS,WACvB,GAAIkB,KACJvB,GAAKW,UAAUa,KAAK,SAASC,GACzBF,EAAKG,MACDV,MAAUS,EAAME,GAChBC,MAAUH,EAAMjB,IAAI,YAG5BR,EAAKa,eAAegB,OAAON,KAI/BtB,KAAKW,SAASP,GAAG,QAAS,WACtB,GAAIkB,KAEoB,QADFvB,EAAKa,eAAeiB,QAEtC9B,EAAKY,SAASY,KAAK,SAASC,GACE,SAAtBA,EAAMjB,IAAI,SACVe,EAAKG,MACDV,MAAUS,EAAME,GAChBC,MAAUH,EAAMjB,IAAI,YAKpCR,EAAKkB,aAAaW,OAAON,KAI7BtB,KAAKI,GAAG,SAAU,WACdK,EAAQK,UAAYL,EAAQK,SAASf,EAAKgB,WAI9Cf,KAAK8B,WAAW9B,KAAK+B,aACrB/B,KAAKgC,EAAE,mBAAmBC,OAAOjC,KAAKY,eAAesB,KACrDlC,KAAKkC,IAAID,OAAOjC,KAAKiB,aAAaiB,KAGlClC,KAAKU,UAAUL,OACXC,OAAO,EACP6B,QAAS,WACLpC,EAAKa,eAAeS,QAAQ,cACDe,KAAvBrC,EAAKU,QAAQM,OACbhB,EAAKgB,MAAMhB,EAAKU,QAAQM,WAOxCA,MAAO,SAASsB,GACZ,MAAOrC,MAAKiB,aAAaF,MAAMsB,IAInCN,UAAW,WACP,MAAQ","file":"../../../scripts/mvc/ui/ui-select-library.js","sourcesContent":["// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-table', 'mvc/ui/ui-list'],\n        function(Utils, Ui, Table, List) {\n\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: Galaxy.root + 'api/libraries?deleted=false'\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on('change', function() {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries  = new Libraries();\n        this.datasets   = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange    : function(value) {\n                self.datasets.config.set('library_id', value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name        : 'dataset',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                self.trigger('change');\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on('reset', function() {\n            var data = [];\n            self.libraries.each(function(model) {\n                data.push({\n                    value   : model.id,\n                    label   : model.get('name')\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on('reset', function() {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(function(model) {\n                    if (model.get('type') === 'file') {\n                        data.push({\n                            value   : model.id,\n                            label   : model.get('name')\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            options.onchange && options.onchange(self.value());\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$('.library-select').append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger('change');\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return  '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                        '<span class=\"library-title\">Select Library</span>' +\n                        '<span class=\"library-select\"/>' +\n                    '</div>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n"]}