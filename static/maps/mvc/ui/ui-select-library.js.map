{"version":3,"sources":["mvc/ui/ui-select-library.js"],"names":["define","Utils","Ui","Table","List","Libraries","Backbone","Collection","extend","url","LibraryDatasets","initialize","this","config","self","Model","library_id","on","Galaxy","root","get","View","options","libraries","datasets","library_select","Select","onchange","value","set","dataset_list","name","optional","multiple","data","each","model","id","update","library_current","text","setElement","_template","$","$el","append","fetch","reset","success","trigger","val"],"mappings":"aACAA,QAAQ,cAAe,iBAAkB,kBAAmB,kBAD5D,SAAAC,EAAAC,EAAAC,EAAAC,GAIA,IAAAC,EAAAC,SAAAC,WAAAC,QACAC,IAAIJ,OAAAA,KAAYC,gCAIhBI,EAAAJ,SAAAC,WAAAC,QACAG,WAAID,WACAC,IAAAA,EAAAA,KACIC,KAAAC,OAAIC,IAAOR,SAAXS,OAAAC,WAAA,OACAJ,KAAAC,OAAKA,GAAL,SAAkBP,WAClBQ,EAAKD,OAAOI,OAAG,OAGlBR,IAP4C,WAQ7CA,OAAKS,OAAAC,KAAW,iBAAAP,KAAAC,OAAAO,IAAA,cAAA,eAwGpB,OACIC,KApGJf,SAAAe,KAAAb,QAEIG,WAAA,SAAAW,GAEI,IAAAR,EAAAF,KAGAA,KAAAW,UAAA,IAAAlB,EACAO,KAAAY,SAAA,IAAkBd,EAGlBE,KAAAU,QAAAA,EAIAV,KAAAa,eAAA,IAAAvB,EAAAwB,OAAAL,MACAM,SAAKF,SAAiBG,GAClBD,EAAAA,SAAcd,OAAAgB,IAAA,aAAgBD,MAKlChB,KAAAkB,aAAA,IAAA1B,EAAAiB,MACAU,KAAKD,UACDC,SAAcT,EADgBU,SAE9BA,SAAcV,EAAQU,SACtBC,SAAcX,WACdK,EAAAA,QAAc,aAKlBf,KAAAW,UAAAN,GAAA,QAAA,WACA,IAAAiB,KACIpB,EAAAS,UAAWY,KAAX,SAAAC,GACAtB,EAAKS,MACDW,MAAUE,EAAAC,GACNT,MAAAA,EAAUQ,IADJ,YAIbtB,EALDW,eAAAa,OAAAJ,KASJtB,KAAAY,SAAAP,GAAA,QAAA,WACA,IAAAiB,KAEQK,OADJzB,EAAAW,eAAAe,QAEA1B,EAAIyB,SAAAA,KAAAA,SAAJH,GACuB,SAAnBtB,EAAKU,IAASW,SACVD,EAAIE,MACAF,MAAUE,EAAAC,GACNT,MAAAA,EAAUQ,IADJ,YAMrBtB,EAAAgB,aAAAQ,OAAAJ,KAILtB,KAAAK,GAAA,SAAA,WACAK,EAAQK,UAAUL,EAAAK,SAAWb,EAAAc,WAI7BhB,KAAA6B,WAAA7B,KAAA8B,aACA9B,KAAA+B,EAAA,mBAAqBD,OAAAA,KAArBjB,eAAAmB,KACAhC,KAAAgC,IAAKD,OAAE/B,KAAAkB,aAAmBe,KAG1BjC,KAAAW,UAAAuB,OACAC,OAAKxB,EACDwB,QAAAA,WACAC,EAAAA,eAASC,QAAW,eACIA,IAApBnC,EAAKW,QAAAA,OACLX,EAAIA,MAAKQ,EAALA,QAAAM,WAOhBA,MAAA,SAAAsB,GACAtB,OAAOhB,KAAAkB,aAAAF,MAAcsB,IAIrBR,UAAA,WACAA,MAAAA","file":"../../../scripts/mvc/ui/ui-select-library.js","sourcesContent":["// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-table', 'mvc/ui/ui-list'],\n        function(Utils, Ui, Table, List) {\n\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: Galaxy.root + 'api/libraries?deleted=false'\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on('change', function() {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries  = new Libraries();\n        this.datasets   = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange    : function(value) {\n                self.datasets.config.set('library_id', value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name        : 'dataset',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                self.trigger('change');\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on('reset', function() {\n            var data = [];\n            self.libraries.each(function(model) {\n                data.push({\n                    value   : model.id,\n                    label   : model.get('name')\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on('reset', function() {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(function(model) {\n                    if (model.get('type') === 'file') {\n                        data.push({\n                            value   : model.id,\n                            label   : model.get('name')\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            options.onchange && options.onchange(self.value());\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$('.library-select').append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger('change');\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return  '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                        '<span class=\"library-title\">Select Library</span>' +\n                        '<span class=\"library-select\"/>' +\n                    '</div>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n"]}