{"version":3,"sources":["mvc/ui/ui-select-library.js"],"names":["Libraries","Backbone","Collection","extend","url","Galaxy","root","LibraryDatasets","initialize","self","this","config","Model","library_id","on","fetch","reset","get","View","options","libraries","datasets","Select","onchange","value","set","dataset_list","_uiList2","default","name","optional","multiple","trigger","data","each","model","push","id","library_select","text","label","update","library_current","$el","append","success","undefined","val"],"mappings":"mRAMIA,EAAYC,SAASC,WAAWC,QAChCC,IAAQC,OAAOC,KAAf,gCAIAC,EAAkBN,SAASC,WAAWC,QACtCK,WAAY,WACR,IAAIC,EAAOC,KACXA,KAAKC,OAAS,IAAIV,SAASW,OAAQC,WAAY,OAC/CH,KAAKC,OAAOG,GAAG,SAAU,WACrBL,EAAKM,OAAQC,OAAO,OAG5BZ,IAAK,WACD,OAAUC,OAAOC,KAAjB,iBAAsCI,KAAKC,OAAOM,IAf1D,cAeQ,eAVRC,EAAAjB,SAAAiB,KAAAf,QAEIK,WAAAA,SAAYW,GAER,IAAAV,EAAKE,KAGJD,KAFDU,UAAA,IAAApB,EAGHU,KAP4CW,SAAA,IAAAd,EAY5CG,KAAAS,QAAAA,EAIDD,KAAAA,eAAqBf,IAAAA,EAAAA,QAAOmB,OAAAJ,MAC5BK,SAAA,SAAAC,GACAhB,EAAYa,SAAAV,OAAAc,IAASN,aAASK,MAK1Bd,KAAAgB,aAAA,IAAiBC,EAAAC,QAAI5B,MACrB6B,KAAKR,UAgBDS,SAAUX,EAAQW,SAdtBC,SAAAZ,EAAAY,SACAR,SAAKJ,WAgBGV,EAAKuB,QAAQ,aAVbvB,KAAAA,UAAAA,GAAKY,QAASV,WACjB,IAAAsB,KAHoCxB,EAAzCW,UAAAc,KAAA,SAAAC,GAoBQF,EAAKG,MAdbZ,MAAAW,EAAAE,GACKX,MAAAA,EAAeT,IAAI,YAGpBc,EAAAA,eAAUZ,OAAQY,KAHYrB,KAAdW,SAApBP,GAAA,QAAA,WAuBI,IAAImB,KAbU,OADlBxB,EAAA6B,eAAAC,QAEI9B,EAAIwB,SAAJC,KAAA,SAAAC,GACoB,SAAff,EAALH,IAAeiB,SACXD,EAAAG,MACIZ,MAAOW,EADDE,GAENG,MAAOL,EAAUlB,IAAA,YAoBzBR,EAAKiB,aAAae,OAAOR,KAXzBvB,KAAAI,GAAA,SAAI4B,WACJvB,EAAIuB,UAAAA,EAAoBnB,SAAMd,EAAAe,WAIdA,KAAAA,WAAAA,KAAAA,aACAgB,KAAAA,EAAAA,mBAAAA,OAAOL,KAAMlB,eAAN0B,KAFDjC,KAAAiC,IAAAC,OAAAlC,KAAVgB,aAAAiB,KAMXjC,KAAAU,UAAAL,OACDN,OAAAA,EACHoC,QAdD,WA8BQpC,EAAK6B,eAAeN,QAAQ,eAdpCc,IAAArC,EAAAU,QAAAK,OACQf,EAAAe,MAAUf,EAAAU,QAAMK,WAOxBA,MAAA,SAAAuB,GAgBA,OAAOrC,KAAKgB,aAAaF,MAAMuB,IAX3BF,UAAAA,WACIpC,MACA,iLA0BZS,KAAMA","file":"../../../scripts/mvc/ui/ui-select-library.js","sourcesContent":["// dependencies\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Table from \"mvc/ui/ui-table\";\nimport List from \"mvc/ui/ui-list\";\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: `${Galaxy.root}api/libraries?deleted=false`\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on(\"change\", () => {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return `${Galaxy.root}api/libraries/${this.config.get(\n            \"library_id\"\n        )}/contents`;\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize: function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries = new Libraries();\n        this.datasets = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange: function(value) {\n                self.datasets.config.set(\"library_id\", value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name: \"dataset\",\n            optional: options.optional,\n            multiple: options.multiple,\n            onchange: function() {\n                self.trigger(\"change\");\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on(\"reset\", () => {\n            var data = [];\n            self.libraries.each(model => {\n                data.push({\n                    value: model.id,\n                    label: model.get(\"name\")\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on(\"reset\", () => {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(model => {\n                    if (model.get(\"type\") === \"file\") {\n                        data.push({\n                            value: model.id,\n                            label: model.get(\"name\")\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on(\"change\", () => {\n            options.onchange && options.onchange(self.value());\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$(\".library-select\").append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger(\"change\");\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return (\n            '<div class=\"ui-select-library\">' +\n            '<div class=\"library ui-margin-bottom\">' +\n            '<span class=\"library-title\">Select Library</span>' +\n            '<span class=\"library-select\"/>' +\n            \"</div>\" +\n            \"</div>\"\n        );\n    }\n});\n\nexport default {\n    View: View\n};\n"]}