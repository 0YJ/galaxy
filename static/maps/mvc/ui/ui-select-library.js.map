{"version":3,"sources":["mvc/ui/ui-select-library.js"],"names":["Libraries","Backbone","Collection","extend","url","Galaxy","root","LibraryDatasets","initialize","self","this","config","Model","library_id","on","fetch","reset","View","libraries","datasets","options","library_select","_uiMisc2","default","Select","onchange","value","set","dataset_list","_uiList2","name","optional","multiple","data","model","update","each","text","label","push","id","setElement","_template","$","append","$el","success","undefined","val"],"mappings":"wPAMIA,EAAYC,SAASC,WAAWC,QAChCC,IAAKC,OAAOC,KAAO,gCAInBC,EAAkBN,SAASC,WAAWC,QACtCK,WAAY,WACR,IAAIC,EAAOC,KACXA,KAAKC,OAAS,IAAIV,SAASW,OAAQC,WAAY,OAC/CH,KAAKC,OAAOG,GAAG,SAAU,WACrBL,EAAKM,OAAQC,OAAO,OAG5BZ,IAAK,WACD,OAfRC,OAAAC,KALA,iBAMIN,KAAAA,OAAYC,IAAAA,cACZG,eAMIa,EAAAhB,SAAIQ,KAAON,QAEXK,WAAA,SAAYM,GAEX,IAAAL,EAFDC,KAKAA,KAAAQ,UACIb,IAAOC,EAKdI,KAAAS,SAAA,IAAAZ,EAGLG,KAAAU,QAAAA,EAIQV,KAAAW,eAAA,IAAAC,EAAAC,QAAAC,OAAAP,MACAQ,SAAIhB,SAAJiB,GAaQjB,EAAKU,SAASR,OAAOgB,IAAI,aAAcD,MAP/ChB,KAAAkB,aAAA,IAAAC,EAAAN,QAAAN,MACAa,KAAKV,UAaDW,SAAUX,EAAQW,SAXtBC,SAAAZ,EAAAY,SACAP,SAAA,WACAhB,EAAKY,QAAAA,aAiBLX,KAAKQ,UAAUJ,GAAG,QAAS,WAX3B,IAAAmB,KACAxB,EAAKmB,UAAAA,KAAe,SAAIM,GACpBJ,EAAAA,MACAC,MAAUX,EAAAA,GACVY,MAAUZ,EAAAA,IAAQY,YAGjBvB,EAAAY,eAAAc,OAAAF,KAILvB,KAAAS,SAAKD,GAAAA,QAAa,WACd,IAAAe,KAEc,OADCG,EAAKf,eAAgBgB,QAE5BX,EAAAA,SAAAA,KAAOQ,SADDA,GAEW,SAAjBI,EAAAA,IAAOJ,SAFXD,EAAAM,MADJb,MAAAQ,EAAAM,GAMKnB,MAALa,EAAoBC,IAAOF,YAK3BxB,EAAAmB,aAAAO,OAAAF,KAIQvB,KAAAI,GAAA,SAAA,WACImB,EAAAA,UAAAA,EAAUR,SAAAhB,EAAAiB,WAIbhB,KAAA+B,WAAA/B,KAAAgC,aACJhC,KAAAiC,EAAA,mBAPDC,OAAAlC,KAAAW,eAAAwB,KAQHnC,KAAAmC,IAAAD,OAAAlC,KAAAkB,aAAAiB,KAeLnC,KAAKQ,UAAUH,OAXfC,OAAA,EACA8B,QAAQ,WACJ1B,EAAAA,eAAoBA,QAAQK,eADhCsB,IAAAtC,EAAAW,QAAAM,OAeYjB,EAAKiB,MAAMjB,EAAKW,QAAQM,WALpCA,MAAA,SAAKR,GACDF,OAAAA,KAAAA,aADiBU,MAAAsB,IAKTvC,UAAAA,WACH,MACJ,iLAWLQ,KAAAA","file":"../../../scripts/mvc/ui/ui-select-library.js","sourcesContent":["// dependencies\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Table from \"mvc/ui/ui-table\";\nimport List from \"mvc/ui/ui-list\";\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/libraries?deleted=false\"\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on(\"change\", function() {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return (\n            Galaxy.root +\n            \"api/libraries/\" +\n            this.config.get(\"library_id\") +\n            \"/contents\"\n        );\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize: function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries = new Libraries();\n        this.datasets = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange: function(value) {\n                self.datasets.config.set(\"library_id\", value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name: \"dataset\",\n            optional: options.optional,\n            multiple: options.multiple,\n            onchange: function() {\n                self.trigger(\"change\");\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on(\"reset\", function() {\n            var data = [];\n            self.libraries.each(function(model) {\n                data.push({\n                    value: model.id,\n                    label: model.get(\"name\")\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on(\"reset\", function() {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(function(model) {\n                    if (model.get(\"type\") === \"file\") {\n                        data.push({\n                            value: model.id,\n                            label: model.get(\"name\")\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on(\"change\", function() {\n            options.onchange && options.onchange(self.value());\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$(\".library-select\").append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger(\"change\");\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return (\n            '<div class=\"ui-select-library\">' +\n            '<div class=\"library ui-margin-bottom\">' +\n            '<span class=\"library-title\">Select Library</span>' +\n            '<span class=\"library-select\"/>' +\n            \"</div>\" +\n            \"</div>\"\n        );\n    }\n});\n\nexport default {\n    View: View\n};\n"]}