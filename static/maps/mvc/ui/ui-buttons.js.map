{"version":3,"sources":["mvc/ui/ui-buttons.js"],"names":["define","Utils","ButtonDefault","Backbone","View","initialize","options","model","Model","uid","title","id","floating","icon","cls","wait","wait_text","wait_cls","disabled","percentage","$","attr","append","this","$icon","$title","render","$progress","$progress_bar","self","removeClass","addClass","tooltip","placement","on","hide","onclick","css","width","$el","prop","html","show","disable","set","enable","unwait","setIcon","ButtonLink","setElement","extend","listenTo","href","target","value","ButtonCheck","attributes","off","new_val","total","get","undefined","icons","ButtonIcon","$menu","pull","onunload","visible","tag","ButtonMenu","display","e","collection","$root","submodel","suboptions","divider","float","where","length","add","merge","preventDefault","remove","$link","addMenu"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-buttons.js","sourcesContent":["/** This module contains all button views. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                floating    : 'right',\n                icon        : '',\n                cls         : 'btn btn-default',\n                wait        : false,\n                wait_text   : 'Sending...',\n                wait_cls    : 'btn btn-info',\n                disabled    : false,\n                percentage  : -1\n            }).set( options );\n            this.setElement( $( '<button/>' ).attr( 'type', 'button' )\n                                             .append( this.$icon        = $( '<i/>' ) )\n                                             .append( this.$title       = $( '<span/>' ) )\n                                             .append( this.$progress    = $( '<div/>' ).append( this.$progress_bar = $( '<div/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'ui-button-default' )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'id', options.id )\n                    .attr( 'disabled', options.disabled )\n                    .css( 'float', options.floating )\n                    .off( 'click' ).on( 'click' , function() {\n                        $( '.tooltip' ).hide();\n                        options.onclick && !self.disabled && options.onclick();\n                    })\n                    .tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$progress.addClass( 'progress' ).css( 'display', options.percentage !== -1 ? 'block' : 'none' );\n            this.$progress_bar.addClass( 'progress-bar' ).css( { width : options.percentage + '%' } );\n            this.$icon.removeClass().addClass( 'icon fa' );\n            this.$title.removeClass().addClass( 'title' );\n            if ( options.wait ) {\n                this.$el.addClass( options.wait_cls ).prop( 'disabled', true );\n                this.$icon.addClass( 'fa-spinner fa-spin ui-margin-right' );\n                this.$title.html( options.wait_text );\n            } else {\n                this.$el.addClass( options.cls );\n                this.$icon.addClass( options.icon );\n                this.$title.html( options.title );\n                options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set( 'disabled', true );\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set( 'disabled', false );\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set( 'wait', true );\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set( 'wait', false );\n        },\n\n        /** Change icon */\n        setIcon: function( icon ) {\n            this.model.set( 'icon', icon );\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : ''\n            }).set( options );\n            this.setElement( $( '<a/>' ).append( this.$icon  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .attr( { id         : options.id,\n                             href       : options.href || 'javascript:void(0)',\n                             title      : options.title,\n                             target     : options.target || '_top',\n                             disabled   : options.disabled } )\n                    .off( 'click' ).on( 'click' , function() {\n                        options.onclick && !options.disabled && options.onclick();\n                    });\n            this.$icon.removeClass().addClass( options.icon );\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : 'Select/Unselect all',\n                icons       : [ 'fa-square-o', 'fa-minus-square-o', 'fa-check-square-o' ],\n                value       : 0,\n                onchange    : function(){}\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$icon   = $( '<span/>' ) )\n                                          .append( this.$title  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass( 'ui-button-check' )\n                    .off( 'click' ).on('click', function() {\n                        self.model.set( 'value', ( self.model.get( 'value' ) === 0 && 2 ) || 0 );\n                        options.onclick && options.onclick();\n                    });\n            this.$title.html( options.title );\n            this.$icon.removeClass()\n                      .addClass( 'icon fa ui-margin-right' )\n                      .addClass( options.icons[ options.value ] );\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function ( new_val, total ) {\n            if ( new_val !== undefined ) {\n                if ( total && new_val !== 0 ) {\n                    new_val = ( new_val !== total ) && 1 || 2;\n                }\n                this.model.set( 'value', new_val );\n                this.model.get( 'onchange' )( this.model.get( 'value' ) );\n            }\n            return this.model.get( 'value' );\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                floating    : 'right',\n                icon        : '',\n                cls         : 'ui-button-icon',\n                disabled    : false\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$button = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                               .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render : function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'disabled', options.disabled )\n                    .attr( 'id', options.id )\n                    .css( 'float', options.floating )\n                    .off( 'click' ).on( 'click', function() {\n                        $( '.tooltip' ).hide();\n                        !options.disabled && options.onclick && options.onclick();\n                    });\n            this.$button.addClass( 'button' ).tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function ( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id              : '',\n                title           : '',\n                floating        : 'right',\n                pull            : 'right',\n                icon            : null,\n                onclick         : null,\n                cls             : 'ui-button-icon ui-button-menu',\n                tooltip         : '',\n                target          : '',\n                href            : '',\n                onunload        : null,\n                visible         : true,\n                tag             : ''\n            }).set( options );\n            this.collection = new Backbone.Collection();\n            this.setElement( $( '<div/>' ).append( this.$root = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                             .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.listenTo( this.collection, 'change add remove reset', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'dropdown' )\n                    .addClass( options.cls )\n                    .attr( 'id', options.id )\n                    .css( { float   : options.floating,\n                            display : options.visible && this.collection.where( { visible: true } ).length > 0 ? 'block' : 'none' } );\n            this.$root.addClass( 'root button dropdown-toggle' )\n                      .attr( 'data-toggle', 'dropdown' )\n                      .tooltip( { title: options.tooltip, placement: 'bottom' } )\n                      .off( 'click' ).on( 'click', function( e ) {\n                            $( '.tooltip' ).hide();\n                            e.preventDefault();\n                            options.onclick && options.onclick();\n                      } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.removeClass().addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            this.$menu && this.$menu.remove();\n            if ( this.collection.length > 0 ) {\n                this.$menu = $( '<ul/>' ).addClass( 'menu dropdown-menu' )\n                                         .addClass( 'pull-' + self.model.get( 'pull' ) )\n                                         .attr( 'role', 'menu' );\n                this.$el.append( this.$menu );\n            }\n            this.collection.each( function( submodel ) {\n                var suboptions = submodel.attributes;\n                if ( suboptions.visible ) {\n                    var $link = $( '<a/>' ).addClass( 'dropdown-item' )\n                                           .attr( { href : suboptions.href, target : suboptions.target } )\n                                           .append( $( '<i/>' ).addClass( 'fa' )\n                                                               .addClass( suboptions.icon )\n                                                               .css( 'display', suboptions.icon ? 'inline-block' : 'none' ) )\n                                           .append( suboptions.title )\n                                           .on( 'click', function( e ) {\n                                                if ( suboptions.onclick ) {\n                                                    e.preventDefault();\n                                                    suboptions.onclick();\n                                                }\n                                           } );\n                    self.$menu.append( $( '<li/>' ).append( $link ) );\n                    suboptions.divider && self.$menu.append( $( '<li/>' ).addClass( 'divider' ) );\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function ( options ) {\n            this.collection.add( Utils.merge( options, {\n                title       : '',\n                target      : '',\n                href        : '',\n                onclick     : null,\n                divider     : false,\n                visible     : true,\n                icon        : null,\n                cls         : 'button-menu btn-group'\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault   : ButtonDefault,\n        ButtonLink      : ButtonLink,\n        ButtonIcon      : ButtonIcon,\n        ButtonCheck     : ButtonCheck,\n        ButtonMenu      : ButtonMenu\n    }\n});\n"]}