{"version":3,"sources":["mvc/ui/ui-buttons.js"],"names":["define","Utils","ButtonDefault","Backbone","View","extend","options","this","model","initialize","Model","id","title","icon","cls","wait","wait_text","wait_cls","disabled","percentage","setElement","$","listenTo","render","$icon","append","$title","$progress","$progress_bar","onclick","self","attributes","$el","removeClass","addClass","attr","off","hide","tooltip","placement","show","css","width","prop","disable","set","enable","html","unwait","href","ButtonLink","uid","ButtonCheck","icons","value","target","on","new_val","ButtonIcon","get","total","undefined","onunload","visible","display","e","$button","collection","length","suboptions","preventDefault","$menu","$link","addMenu","add","ButtonMenu","tag","Collection","$root","where","remove","each","submodel","divider","merge"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-buttons.js","sourcesContent":["/** This module contains all button views. */\ndefine([\"utils/utils\"], function(Utils) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"btn btn-default\",\n                    wait: false,\n                    wait_text: \"Sending...\",\n                    wait_cls: \"btn btn-info\",\n                    disabled: false,\n                    percentage: -1\n                }).set(options);\n            this.setElement(\n                $(\"<button/>\")\n                    .attr(\"type\", \"button\")\n                    .append((this.$icon = $(\"<i/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n                    .append(\n                        (this.$progress = $(\"<div/>\").append(\n                            (this.$progress_bar = $(\"<div/>\"))\n                        ))\n                    )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"ui-button-default\")\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"id\", options.id)\n                .attr(\"disabled\", options.disabled)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    options.onclick && !self.disabled && options.onclick();\n                })\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$progress\n                .addClass(\"progress\")\n                .css(\"display\", options.percentage !== -1 ? \"block\" : \"none\");\n            this.$progress_bar\n                .addClass(\"progress-bar\")\n                .css({ width: options.percentage + \"%\" });\n            this.$icon.removeClass().addClass(\"icon fa\");\n            this.$title.removeClass().addClass(\"title\");\n            if (options.wait) {\n                this.$el.addClass(options.wait_cls).prop(\"disabled\", true);\n                this.$icon.addClass(\"fa-spinner fa-spin ui-margin-right\");\n                this.$title.html(options.wait_text);\n            } else {\n                this.$el.addClass(options.cls);\n                this.$icon.addClass(options.icon);\n                this.$title.html(options.title);\n                options.icon &&\n                    options.title &&\n                    this.$icon.addClass(\"ui-margin-right\");\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Change icon */\n        setIcon: function(icon) {\n            this.model.set(\"icon\", icon);\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"\"\n                }).set(options);\n            this.setElement($(\"<a/>\").append((this.$icon = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .attr({\n                    id: options.id,\n                    href: options.href || \"javascript:void(0)\",\n                    title: options.title,\n                    target: options.target || \"_top\",\n                    disabled: options.disabled\n                })\n                .tooltip({ placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function() {\n                    options.onclick && !options.disabled && options.onclick();\n                });\n            this.$icon.removeClass().addClass(options.icon);\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"Select/Unselect all\",\n                    icons: [\n                        \"fa-square-o\",\n                        \"fa-minus-square-o\",\n                        \"fa-check-square-o\"\n                    ],\n                    value: 0,\n                    onchange: function() {}\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\")\n                    .append((this.$icon = $(\"<span/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .addClass(\"ui-button-check\")\n                .off(\"click\")\n                .on(\"click\", function() {\n                    self.model.set(\n                        \"value\",\n                        (self.model.get(\"value\") === 0 && 2) || 0\n                    );\n                    options.onclick && options.onclick();\n                });\n            this.$title.html(options.title);\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa ui-margin-right\")\n                .addClass(options.icons[options.value]);\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function(new_val, total) {\n            if (new_val !== undefined) {\n                if (total && new_val !== 0) {\n                    new_val = (new_val !== total && 1) || 2;\n                }\n                this.model.set(\"value\", new_val);\n                this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n            return this.model.get(\"value\");\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"ui-button-icon\",\n                    disabled: false\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$button = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"disabled\", options.disabled)\n                .attr(\"id\", options.id)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    !options.disabled && options.onclick && options.onclick();\n                });\n            this.$button\n                .addClass(\"button\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title.addClass(\"title\").html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: \"\",\n                    title: \"\",\n                    pull: \"right\",\n                    icon: null,\n                    onclick: null,\n                    cls: \"ui-button-icon ui-button-menu\",\n                    tooltip: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onunload: null,\n                    visible: true,\n                    tag: \"\"\n                }).set(options);\n            this.collection = new Backbone.Collection();\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$root = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.listenTo(\n                this.collection,\n                \"change add remove reset\",\n                this.render,\n                this\n            );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"dropdown\")\n                .addClass(options.cls)\n                .attr(\"id\", options.id)\n                .css({\n                    display:\n                        options.visible &&\n                        this.collection.where({ visible: true }).length > 0\n                            ? \"block\"\n                            : \"none\"\n                });\n            this.$root\n                .addClass(\"root button dropdown-toggle\")\n                .attr(\"data-toggle\", \"dropdown\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function(e) {\n                    $(\".tooltip\").hide();\n                    e.preventDefault();\n                    options.onclick && options.onclick();\n                });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title\n                .removeClass()\n                .addClass(\"title\")\n                .html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n            this.$menu && this.$menu.remove();\n            if (this.collection.length > 0) {\n                this.$menu = $(\"<ul/>\")\n                    .addClass(\"menu dropdown-menu\")\n                    .addClass(\"pull-\" + self.model.get(\"pull\"))\n                    .attr(\"role\", \"menu\");\n                this.$el.append(this.$menu);\n            }\n            this.collection.each(function(submodel) {\n                var suboptions = submodel.attributes;\n                if (suboptions.visible) {\n                    var $link = $(\"<a/>\")\n                        .addClass(\"dropdown-item\")\n                        .attr({\n                            href: suboptions.href,\n                            target: suboptions.target\n                        })\n                        .append(\n                            $(\"<i/>\")\n                                .addClass(\"fa\")\n                                .addClass(suboptions.icon)\n                                .css(\n                                    \"display\",\n                                    suboptions.icon ? \"inline-block\" : \"none\"\n                                )\n                        )\n                        .append(suboptions.title)\n                        .on(\"click\", function(e) {\n                            if (suboptions.onclick) {\n                                e.preventDefault();\n                                suboptions.onclick();\n                            }\n                        });\n                    self.$menu.append($(\"<li/>\").append($link));\n                    suboptions.divider &&\n                        self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function(options) {\n            this.collection.add(\n                Utils.merge(options, {\n                    title: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onclick: null,\n                    divider: false,\n                    visible: true,\n                    icon: null,\n                    cls: \"button-menu btn-group\"\n                })\n            );\n        }\n    });\n\n    return {\n        ButtonDefault: ButtonDefault,\n        ButtonLink: ButtonLink,\n        ButtonIcon: ButtonIcon,\n        ButtonCheck: ButtonCheck,\n        ButtonMenu: ButtonMenu\n    };\n});\n"]}