{"version":3,"sources":["mvc/ui/ui-select-default.js"],"names":["define","Utils","Buttons","View","Backbone","extend","options","initialize","this","data2","model","Model","id","uid","cls","error_text","empty_text","visible","wait","multiple","searchable","optional","disabled","readonly","onchange","value","individual","pagesize","self","get","listenTo","_changeData","_changeDisabled","_changeVisible","_changeValue","render","_renderSearchable","_renderClassic","$el","addClass","attr","$select","empty","_getValue","trigger","_changeWait","append","$","$dropdown","$resize_icon","$resize","removeClass","currentY","currentHeight","minHeight","show","on","off","event","pageY","height","hide","Math","max","all_button","onclick","new_value","select2","each","ButtonCheck","_","option","push","term","prepend","_match","data","text","label","toUpperCase","index","length","matched_tags","closeOnSelect","query","order","q","tags","found","results","filter","e","callback","tag","more","page","result","slice","formatResult","escape","find","remove","memo","prop","html","_setValue","first","isArray","exists","undefined","set","findWhere","d","v","unwait","keep","enable","disable","add","sorter","update","val","selected","sort","a","b","isEmpty"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-default.js","sourcesContent":["/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar View = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.data  = [];\n        this.data2 = [];\n        this.model = options && options.model || new Backbone.Model({\n            id          : Utils.uid(),\n            cls         : 'ui-select',\n            error_text  : 'No options available',\n            empty_text  : 'Nothing selected',\n            visible     : true,\n            wait        : false,\n            multiple    : false,\n            searchable  : true,\n            optional    : false,\n            disabled    : false,\n            readonly    : false,\n            onchange    : function(){},\n            value       : null,\n            individual  : false,\n            pagesize    : 20\n        }).set( options );\n        this.on( 'change', function() { self.model.get( 'onchange' ) && self.model.get( 'onchange' )( self.value() ) } );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:disabled', this._changeDisabled, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:multiple change:searchable change:cls change:id', this.render, this );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.model.get( 'searchable' ) ? this._renderSearchable() : this._renderClassic();\n        this.$el.addClass( this.model.get( 'cls' ) )\n                .attr( 'id', this.model.get( 'id' ) );\n        this.$select.empty().addClass( 'select' )\n                    .attr( 'id', this.model.get( 'id' ) + '_select' )\n                    .prop( 'multiple', this.model.get( 'multiple' ) )\n                    .on( 'change', function() {\n                        self.value( self._getValue() );\n                        self.trigger( 'change' );\n                    });\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n        this._changeDisabled();\n    },\n\n    /** Renders the classic selection field */\n    _renderClassic: function() {\n        var self = this;\n        this.$el.addClass( this.model.get( 'multiple' ) ? 'ui-select-multiple' : 'ui-select' )\n                .append( this.$select      = $( '<select/>' ) )\n                .append( this.$dropdown    = $( '<div/>' ) )\n                .append( this.$resize      = $( '<div/>' )\n                .append( this.$resize_icon = $( '<i/>' ) ) );\n        if ( this.model.get( 'multiple' ) ) {\n            this.$dropdown.hide();\n            this.$resize_icon.addClass( 'fa fa-angle-double-right fa-rotate-45' ).show();\n            this.$resize.removeClass()\n                        .addClass( 'icon-resize' )\n                        .show()\n                        .off( 'mousedown' ).on( 'mousedown', function( event ) {\n                            var currentY = event.pageY;\n                            var currentHeight = self.$select.height();\n                            self.minHeight = self.minHeight || currentHeight;\n                            $( '#dd-helper' ).show().on( 'mousemove', function( event ) {\n                                self.$select.height( Math.max( currentHeight + ( event.pageY - currentY ), self.minHeight ) );\n                            }).on( 'mouseup mouseleave', function() {\n                                $( '#dd-helper' ).hide().off();\n                            });\n                        });\n        } else {\n            this.$dropdown.show();\n            this.$resize.hide();\n            this.$resize_icon.hide();\n        }\n    },\n\n    /** Renders the default select2 field */\n    _renderSearchable: function() {\n        var self = this;\n        this.$el.append( this.$select   = $( '<div/>' ) )\n                .append( this.$dropdown = $( '<div/>' ) );\n        this.$dropdown.hide();\n        if ( !this.model.get( 'multiple' ) ) {\n            this.$dropdown.show().on( 'click', function() {\n                self.$select.select2 && self.$select.select2( 'open' );\n            });\n        }\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) && !this.model.get( 'individual' ) && !this.model.get( 'readonly' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    var new_value = [];\n                    self.all_button.value() !== 0 && _.each( self.model.get( 'data' ), function( option ) {\n                        new_value.push( option.value );\n                    });\n                    self.value( new_value );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$el.prepend( this.all_button.$el );\n        }\n    },\n\n    /** Matches a search term with a given text */\n    _match: function( term, text ) {\n        return !term || term == '' || String( text ).toUpperCase().indexOf( term.toUpperCase() ) >= 0\n    },\n\n    /** Updates the selection options */\n    _changeData: function() {\n        var self = this;\n        this.data = [];\n        if ( !this.model.get( 'multiple' ) && this.model.get( 'optional' ) ) {\n            this.data.push( { value: '__null__', label: self.model.get( 'empty_text' ) } );\n        }\n        _.each( this.model.get( 'data' ), function( option ) {\n            self.data.push( option );\n        });\n        if ( this.length() == 0 ) {\n            this.data.push( { value: '__null__', label: this.model.get( 'error_text' ) } );\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            this.data2 = [];\n            _.each( this.data, function( option, index ) {\n                self.data2.push( { order: index, id: option.value, text: option.label, tags: option.tags } );\n            });\n            this.$select.data( 'select2' ) && this.$select.select2( 'destroy' );\n            this.matched_tags = {};\n            this.$select.select2({\n                data            : self.data2,\n                closeOnSelect   : !this.model.get( 'multiple' ),\n                multiple        : this.model.get( 'multiple' ),\n                query           : function( q ) {\n                    self.matched_tags = {};\n                    var pagesize = self.model.get( 'pagesize' );\n                    var results = _.filter( self.data2, function ( e ) {\n                        var found = false;\n                        _.each( e.tags, function( tag ) {\n                            if ( self._match( q.term, tag ) ) {\n                                found = self.matched_tags[ tag ] = true;\n                            }\n                        });\n                        return found || self._match( q.term, e.text );\n                    });\n                    q.callback({\n                        results: results.slice( ( q.page - 1 ) * pagesize, q.page * pagesize ),\n                        more   : results.length >= q.page * pagesize\n                    });\n                },\n                formatResult    : function( result ) {\n                    return _.escape( result.text ) +\n                        '<div class=\"ui-tags\">' +\n                            _.reduce( result.tags, function( memo, tag ) {\n                                if ( self.matched_tags[ tag ] ) {\n                                    return memo + '&nbsp;' +\n                                        '<div class=\"label label-info\">' +\n                                            _.escape( tag ) +\n                                        '</div>'\n                                }\n                                return memo;\n                            }, '' ) +\n                        '</div>';\n                }\n            });\n            this.$( '.select2-container .select2-search input' ).off( 'blur' );\n        } else {\n            this.$select.find( 'option' ).remove();\n            _.each( this.data, function( option ) {\n                self.$select.append( $( '<option/>' ).attr( 'value', option.value ).html( _.escape( option.label ) ) );\n            });\n        }\n        this.model.set( 'disabled', this.model.get( 'readonly' ) || this.length() == 0 );\n        this._changeValue();\n    },\n\n    /** Handles field enabling/disabling, usually used when no options are available */\n    _changeDisabled: function() {\n        if ( this.model.get( 'searchable' ) ) {\n            this.$select.select2( this.model.get( 'disabled' ) ? 'disable' : 'enable' );\n        } else {\n            this.$select.prop( 'disabled', this.model.get( 'disabled' ) );\n        }\n    },\n\n    /** Searchable fields may display a spinner e.g. while waiting for a server response */\n    _changeWait: function() {\n        this.$dropdown.removeClass()\n                      .addClass( 'icon-dropdown fa' )\n                      .addClass( this.model.get( 'wait' ) ? 'fa-spinner fa-spin' : 'fa-caret-down' );\n    },\n\n    /** Handles field visibility */\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n        this.$select[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    /** Synchronizes the model value with the actually selected field value */\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this.model.get( 'multiple' ) ) {\n            if ( this.all_button ) {\n                var value = this._getValue();\n                this.all_button.value( $.isArray( value ) ? value.length : 0, this.length() );\n            }\n        } else if ( this._getValue() === null && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return the first select option */\n    first: function() {\n        return this.data.length > 0 ? this.data[ 0 ].value : null;\n    },\n\n    /** Check if a value is an existing option */\n    exists: function( value ) {\n        return _.findWhere( this.data, { value: value } );\n    },\n\n    /** Return the label/text of the current selection */\n    text: function () {\n        var v = this._getValue();\n        var d = this.exists( $.isArray( v ) ? v[ 0 ] : v );\n        return d ? d.label : '';\n    },\n\n    /** Show the select field */\n    show: function() {\n        this.model.set( 'visible', true );\n    },\n\n    /** Hide the select field */\n    hide: function() {\n        this.model.set( 'visible', false );\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns true if the field is disabled */\n    disabled: function() {\n        return this.model.get( 'disabled' );\n    },\n\n    /** Enable the select field */\n    enable: function() {\n        this.model.set( 'disabled', false );\n    },\n\n    /** Disable the select field */\n    disable: function() {\n        this.model.set( 'disabled', true );\n    },\n\n    /** Update all available options at once */\n    add: function( options, sorter ) {\n        _.each( this.model.get( 'data' ), function( v ) {\n            v.keep && !_.findWhere( options, { value: v.value } ) && options.push( v );\n        });\n        sorter && options && options.sort( sorter );\n        this.model.set( 'data', options );\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Set the custom onchange callback function */\n    setOnChange: function( callback ) {\n        this.model.set( 'onchange', callback );\n    },\n\n    /** Number of available options */\n    length: function() {\n        return $.isArray( this.model.get( 'data' ) ) ? this.model.get( 'data' ).length : 0;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if( new_value === null || new_value === undefined ) {\n            new_value = '__null__';\n        }\n        if ( this.model.get( 'multiple' ) ) {\n            new_value = $.isArray( new_value ) ? new_value : [ new_value ];\n        } else if ( $.isArray( new_value ) ) {\n            if ( new_value.length > 0 ) {\n                new_value = new_value[ 0 ];\n            } else {\n                new_value = '__null__';\n            }\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            if ( $.isArray( new_value ) ) {\n                var val = [];\n                _.each( new_value, function( v ) {\n                    var d = _.findWhere( self.data2, { id: v } );\n                    d && val.push( d );\n                });\n                new_value = val;\n            } else {\n                var d = _.findWhere( this.data2, { id: new_value } );\n                new_value = d;\n            }\n            this.$select.select2( 'data', new_value );\n        } else {\n            this.$select.val( new_value );\n        }\n    },\n\n    /** Get value from dom */\n    _getValue: function() {\n        var val = null;\n        if ( this.model.get( 'searchable' ) ) {\n            var selected = this.$select.select2( 'data' );\n            if ( selected ) {\n                if ( $.isArray( selected ) ) {\n                    val = [];\n                    selected.sort( function( a, b ) { return a.order - b.order } );\n                    _.each( selected, function( v ) { val.push( v.id ) } );\n                } else {\n                    val = selected.id;\n                }\n            }\n        } else {\n            val = this.$select.val();\n        }\n        return Utils.isEmpty( val ) ? null : val;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n"]}