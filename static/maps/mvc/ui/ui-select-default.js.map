{"version":3,"sources":["mvc/ui/ui-select-default.js"],"names":["define","Utils","Buttons","View","Backbone","extend","initialize","options","self","this","model","Model","id","cls","error_text","empty_text","visible","wait","multiple","searchable","optional","disabled","readonly","onchange","value","individual","pagesize","on","set","get","listenTo","_changeData","_changeWait","render","_getValue","_changeValue","_renderClassic","$el","addClass","_renderSearchable","$resize","removeClass","attr","currentY","event","$select","$","height","Math","prop","trigger","_changeVisible","_changeDisabled","$dropdown","append","all_button","onclick","new_value","hide","show","off","term","text","currentHeight","String","minHeight","max","pageY","push","$resize_icon","tags","matched_tags","select2","data","query","results","_match","found","_","each","e","option","more","formatResult","toUpperCase","indexOf","find","remove","label","length","index","order","data2","closeOnSelect","_setValue","first","q","filter","undefined","tag","callback","slice","page","result","exists","isArray","d","reduce","memo","escape","html","disable","v","sorter","setOnChange","selected","findWhere","val","unwait","enable","add","keep","sort","update","a","b","isEmpty"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-default.js","sourcesContent":["/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.data = [];\n            this.data2 = [];\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    cls: \"ui-select\",\n                    error_text: \"No options available\",\n                    empty_text: \"Nothing selected\",\n                    visible: true,\n                    wait: false,\n                    multiple: false,\n                    searchable: true,\n                    optional: false,\n                    disabled: false,\n                    readonly: false,\n                    onchange: function() {},\n                    value: null,\n                    individual: false,\n                    pagesize: 20\n                }).set(options);\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\") &&\n                    self.model.get(\"onchange\")(self.value());\n            });\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(\n                this.model,\n                \"change:disabled\",\n                this._changeDisabled,\n                this\n            );\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(\n                this.model,\n                \"change:visible\",\n                this._changeVisible,\n                this\n            );\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:multiple change:searchable change:cls change:id\",\n                this.render,\n                this\n            );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.model.get(\"searchable\")\n                ? this._renderSearchable()\n                : this._renderClassic();\n            this.$el\n                .addClass(this.model.get(\"cls\"))\n                .attr(\"id\", this.model.get(\"id\"));\n            this.$select\n                .empty()\n                .addClass(\"select\")\n                .attr(\"id\", this.model.get(\"id\") + \"_select\")\n                .prop(\"multiple\", this.model.get(\"multiple\"))\n                .on(\"change\", function() {\n                    self.value(self._getValue());\n                    self.trigger(\"change\");\n                });\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n            this._changeDisabled();\n        },\n\n        /** Renders the classic selection field */\n        _renderClassic: function() {\n            var self = this;\n            this.$el\n                .addClass(\n                    this.model.get(\"multiple\")\n                        ? \"ui-select-multiple\"\n                        : \"ui-select\"\n                )\n                .append((this.$select = $(\"<select/>\")))\n                .append((this.$dropdown = $(\"<div/>\")))\n                .append(\n                    (this.$resize = $(\"<div/>\").append(\n                        (this.$resize_icon = $(\"<i/>\"))\n                    ))\n                );\n            if (this.model.get(\"multiple\")) {\n                this.$dropdown.hide();\n                this.$resize_icon\n                    .addClass(\"fa fa-angle-double-right fa-rotate-45\")\n                    .show();\n                this.$resize\n                    .removeClass()\n                    .addClass(\"icon-resize\")\n                    .show()\n                    .off(\"mousedown\")\n                    .on(\"mousedown\", function(event) {\n                        var currentY = event.pageY;\n                        var currentHeight = self.$select.height();\n                        self.minHeight = self.minHeight || currentHeight;\n                        $(\"#dd-helper\")\n                            .show()\n                            .on(\"mousemove\", function(event) {\n                                self.$select.height(\n                                    Math.max(\n                                        currentHeight +\n                                            (event.pageY - currentY),\n                                        self.minHeight\n                                    )\n                                );\n                            })\n                            .on(\"mouseup mouseleave\", function() {\n                                $(\"#dd-helper\")\n                                    .hide()\n                                    .off();\n                            });\n                    });\n            } else {\n                this.$dropdown.show();\n                this.$resize.hide();\n                this.$resize_icon.hide();\n            }\n        },\n\n        /** Renders the default select2 field */\n        _renderSearchable: function() {\n            var self = this;\n            this.$el\n                .append((this.$select = $(\"<div/>\")))\n                .append((this.$dropdown = $(\"<div/>\")));\n            this.$dropdown.hide();\n            if (!this.model.get(\"multiple\")) {\n                this.$dropdown.show().on(\"click\", function() {\n                    self.$select.select2 && self.$select.select2(\"open\");\n                });\n            }\n            this.all_button = null;\n            if (\n                this.model.get(\"multiple\") &&\n                !this.model.get(\"individual\") &&\n                !this.model.get(\"readonly\")\n            ) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        var new_value = [];\n                        self.all_button.value() !== 0 &&\n                            _.each(self.model.get(\"data\"), function(option) {\n                                new_value.push(option.value);\n                            });\n                        self.value(new_value);\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$el.prepend(this.all_button.$el);\n            }\n        },\n\n        /** Matches a search term with a given text */\n        _match: function(term, text) {\n            return (\n                !term ||\n                term == \"\" ||\n                String(text)\n                    .toUpperCase()\n                    .indexOf(term.toUpperCase()) >= 0\n            );\n        },\n\n        /** Updates the selection options */\n        _changeData: function() {\n            var self = this;\n            this.data = [];\n            if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: self.model.get(\"empty_text\")\n                });\n            }\n            _.each(this.model.get(\"data\"), function(option) {\n                self.data.push(option);\n            });\n            if (this.length() == 0) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: this.model.get(\"error_text\")\n                });\n            }\n            if (this.model.get(\"searchable\")) {\n                this.data2 = [];\n                _.each(this.data, function(option, index) {\n                    self.data2.push({\n                        order: index,\n                        id: option.value,\n                        text: option.label,\n                        tags: option.tags\n                    });\n                });\n                this.$select.data(\"select2\") && this.$select.select2(\"destroy\");\n                this.matched_tags = {};\n                this.$select.select2({\n                    data: self.data2,\n                    closeOnSelect: !this.model.get(\"multiple\"),\n                    multiple: this.model.get(\"multiple\"),\n                    query: function(q) {\n                        self.matched_tags = {};\n                        var pagesize = self.model.get(\"pagesize\");\n                        var results = _.filter(self.data2, function(e) {\n                            var found = false;\n                            _.each(e.tags, function(tag) {\n                                if (self._match(q.term, tag)) {\n                                    found = self.matched_tags[tag] = true;\n                                }\n                            });\n                            return found || self._match(q.term, e.text);\n                        });\n                        q.callback({\n                            results: results.slice(\n                                (q.page - 1) * pagesize,\n                                q.page * pagesize\n                            ),\n                            more: results.length >= q.page * pagesize\n                        });\n                    },\n                    formatResult: function(result) {\n                        return (\n                            _.escape(result.text) +\n                            '<div class=\"ui-tags\">' +\n                            _.reduce(\n                                result.tags,\n                                function(memo, tag) {\n                                    if (self.matched_tags[tag]) {\n                                        return (\n                                            memo +\n                                            \"&nbsp;\" +\n                                            '<div class=\"label label-info\">' +\n                                            _.escape(tag) +\n                                            \"</div>\"\n                                        );\n                                    }\n                                    return memo;\n                                },\n                                \"\"\n                            ) +\n                            \"</div>\"\n                        );\n                    }\n                });\n                this.$(\".select2-container .select2-search input\").off(\"blur\");\n            } else {\n                this.$select.find(\"option\").remove();\n                _.each(this.data, function(option) {\n                    self.$select.append(\n                        $(\"<option/>\")\n                            .attr(\"value\", option.value)\n                            .html(_.escape(option.label))\n                    );\n                });\n            }\n            this.model.set(\n                \"disabled\",\n                this.model.get(\"readonly\") || this.length() == 0\n            );\n            this._changeValue();\n        },\n\n        /** Handles field enabling/disabling, usually used when no options are available */\n        _changeDisabled: function() {\n            if (this.model.get(\"searchable\")) {\n                this.$select.select2(\n                    this.model.get(\"disabled\") ? \"disable\" : \"enable\"\n                );\n            } else {\n                this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n            }\n        },\n\n        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n        _changeWait: function() {\n            this.$dropdown\n                .removeClass()\n                .addClass(\"icon-dropdown fa\")\n                .addClass(\n                    this.model.get(\"wait\")\n                        ? \"fa-spinner fa-spin\"\n                        : \"fa-caret-down\"\n                );\n        },\n\n        /** Handles field visibility */\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        /** Synchronizes the model value with the actually selected field value */\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (this.model.get(\"multiple\")) {\n                if (this.all_button) {\n                    var value = this._getValue();\n                    this.all_button.value(\n                        $.isArray(value) ? value.length : 0,\n                        this.length()\n                    );\n                }\n            } else if (\n                this._getValue() === null &&\n                !this.model.get(\"optional\")\n            ) {\n                this._setValue(this.first());\n            }\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return the first select option */\n        first: function() {\n            return this.data.length > 0 ? this.data[0].value : null;\n        },\n\n        /** Check if a value is an existing option */\n        exists: function(value) {\n            return _.findWhere(this.data, { value: value });\n        },\n\n        /** Return the label/text of the current selection */\n        text: function() {\n            var v = this._getValue();\n            var d = this.exists($.isArray(v) ? v[0] : v);\n            return d ? d.label : \"\";\n        },\n\n        /** Show the select field */\n        show: function() {\n            this.model.set(\"visible\", true);\n        },\n\n        /** Hide the select field */\n        hide: function() {\n            this.model.set(\"visible\", false);\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns true if the field is disabled */\n        disabled: function() {\n            return this.model.get(\"disabled\");\n        },\n\n        /** Enable the select field */\n        enable: function() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Disable the select field */\n        disable: function() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Update all available options at once */\n        add: function(options, sorter) {\n            _.each(this.model.get(\"data\"), function(v) {\n                v.keep &&\n                    !_.findWhere(options, { value: v.value }) &&\n                    options.push(v);\n            });\n            sorter && options && options.sort(sorter);\n            this.model.set(\"data\", options);\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Set the custom onchange callback function */\n        setOnChange: function(callback) {\n            this.model.set(\"onchange\", callback);\n        },\n\n        /** Number of available options */\n        length: function() {\n            return $.isArray(this.model.get(\"data\"))\n                ? this.model.get(\"data\").length\n                : 0;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value === null || new_value === undefined) {\n                new_value = \"__null__\";\n            }\n            if (this.model.get(\"multiple\")) {\n                new_value = $.isArray(new_value) ? new_value : [new_value];\n            } else if ($.isArray(new_value)) {\n                if (new_value.length > 0) {\n                    new_value = new_value[0];\n                } else {\n                    new_value = \"__null__\";\n                }\n            }\n            if (this.model.get(\"searchable\")) {\n                if ($.isArray(new_value)) {\n                    var val = [];\n                    _.each(new_value, function(v) {\n                        var d = _.findWhere(self.data2, { id: v });\n                        d && val.push(d);\n                    });\n                    new_value = val;\n                } else {\n                    var d = _.findWhere(this.data2, { id: new_value });\n                    new_value = d;\n                }\n                this.$select.select2(\"data\", new_value);\n            } else {\n                this.$select.val(new_value);\n            }\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var val = null;\n            if (this.model.get(\"searchable\")) {\n                var selected = this.$select.select2(\"data\");\n                if (selected) {\n                    if ($.isArray(selected)) {\n                        val = [];\n                        selected.sort(function(a, b) {\n                            return a.order - b.order;\n                        });\n                        _.each(selected, function(v) {\n                            val.push(v.id);\n                        });\n                    } else {\n                        val = selected.id;\n                    }\n                }\n            } else {\n                val = this.$select.val();\n            }\n            return Utils.isEmpty(val) ? null : val;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n"]}