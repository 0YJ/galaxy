{"version":3,"sources":["mvc/ui/ui-select-default.js"],"names":["View","Backbone","extend","initialize","options","self","this","data","data2","model","Model","id","_utils2","default","uid","cls","error_text","empty_text","visible","wait","multiple","readonly","onchange","value","get","searchable","_changeData","optional","disabled","pagesize","_changeWait","listenTo","_changeVisible","_changeValue","render","$el","addClass","$select","empty","_getValue","attr","prop","on","_changeDisabled","trigger","_renderClassic","$","Math","currentHeight","append","$dropdown","$resize","hide","$resize_icon","_renderSearchable","show","off","select2","event","currentY","pageY","height","all_button","minHeight","onclick","new_value","prepend","label","_","push","option","_uiButtons2","ButtonCheck","order","text","tags","_match","term","String","found","indexOf","toUpperCase","results","more","formatResult","matched_tags","each","length","set","index","closeOnSelect","q","filter","e","tag","_setValue","slice","page","result","escape","reduce","undefined","memo","find","remove","html","removeClass","disable","v","keep","sorter","update","setOnChange","isArray","callback","first","findWhere","d","exists","val","unwait","enable","sort","selected","a","b","isEmpty"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-default.js","sourcesContent":["/**\n *  This class creates/wraps a default html select field as backbone class.\n */\nimport Utils from \"utils/utils\";\nimport Buttons from \"mvc/ui/ui-buttons\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.data = [];\n        this.data2 = [];\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                id: Utils.uid(),\n                cls: \"ui-select\",\n                error_text: \"No options available\",\n                empty_text: \"Nothing selected\",\n                visible: true,\n                wait: false,\n                multiple: false,\n                searchable: true,\n                optional: false,\n                disabled: false,\n                readonly: false,\n                onchange: function() {},\n                value: null,\n                individual: false,\n                pagesize: 20\n            }).set(options);\n        this.on(\"change\", function() {\n            self.model.get(\"onchange\") &&\n                self.model.get(\"onchange\")(self.value());\n        });\n        this.listenTo(this.model, \"change:data\", this._changeData, this);\n        this.listenTo(\n            this.model,\n            \"change:disabled\",\n            this._changeDisabled,\n            this\n        );\n        this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n        this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n        this.listenTo(this.model, \"change:value\", this._changeValue, this);\n        this.listenTo(\n            this.model,\n            \"change:multiple change:searchable change:cls change:id\",\n            this.render,\n            this\n        );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.model.get(\"searchable\")\n            ? this._renderSearchable()\n            : this._renderClassic();\n        this.$el\n            .addClass(this.model.get(\"cls\"))\n            .attr(\"id\", this.model.get(\"id\"));\n        this.$select\n            .empty()\n            .addClass(\"select\")\n            .attr(\"id\", this.model.get(\"id\") + \"_select\")\n            .prop(\"multiple\", this.model.get(\"multiple\"))\n            .on(\"change\", function() {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n        this._changeDisabled();\n    },\n\n    /** Renders the classic selection field */\n    _renderClassic: function() {\n        var self = this;\n        this.$el\n            .addClass(\n                this.model.get(\"multiple\") ? \"ui-select-multiple\" : \"ui-select\"\n            )\n            .append((this.$select = $(\"<select/>\")))\n            .append((this.$dropdown = $(\"<div/>\")))\n            .append(\n                (this.$resize = $(\"<div/>\").append(\n                    (this.$resize_icon = $(\"<i/>\"))\n                ))\n            );\n        if (this.model.get(\"multiple\")) {\n            this.$dropdown.hide();\n            this.$resize_icon\n                .addClass(\"fa fa-angle-double-right fa-rotate-45\")\n                .show();\n            this.$resize\n                .removeClass()\n                .addClass(\"icon-resize\")\n                .show()\n                .off(\"mousedown\")\n                .on(\"mousedown\", function(event) {\n                    var currentY = event.pageY;\n                    var currentHeight = self.$select.height();\n                    self.minHeight = self.minHeight || currentHeight;\n                    $(\"#dd-helper\")\n                        .show()\n                        .on(\"mousemove\", function(event) {\n                            self.$select.height(\n                                Math.max(\n                                    currentHeight + (event.pageY - currentY),\n                                    self.minHeight\n                                )\n                            );\n                        })\n                        .on(\"mouseup mouseleave\", function() {\n                            $(\"#dd-helper\")\n                                .hide()\n                                .off();\n                        });\n                });\n        } else {\n            this.$dropdown.show();\n            this.$resize.hide();\n            this.$resize_icon.hide();\n        }\n    },\n\n    /** Renders the default select2 field */\n    _renderSearchable: function() {\n        var self = this;\n        this.$el\n            .append((this.$select = $(\"<div/>\")))\n            .append((this.$dropdown = $(\"<div/>\")));\n        this.$dropdown.hide();\n        if (!this.model.get(\"multiple\")) {\n            this.$dropdown.show().on(\"click\", function() {\n                self.$select.select2 && self.$select.select2(\"open\");\n            });\n        }\n        this.all_button = null;\n        if (\n            this.model.get(\"multiple\") &&\n            !this.model.get(\"individual\") &&\n            !this.model.get(\"readonly\")\n        ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    var new_value = [];\n                    self.all_button.value() !== 0 &&\n                        _.each(self.model.get(\"data\"), function(option) {\n                            new_value.push(option.value);\n                        });\n                    self.value(new_value);\n                    self.trigger(\"change\");\n                }\n            });\n            this.$el.prepend(this.all_button.$el);\n        }\n    },\n\n    /** Matches a search term with a given text */\n    _match: function(term, text) {\n        return (\n            !term ||\n            term == \"\" ||\n            String(text)\n                .toUpperCase()\n                .indexOf(term.toUpperCase()) >= 0\n        );\n    },\n\n    /** Updates the selection options */\n    _changeData: function() {\n        var self = this;\n        this.data = [];\n        if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n            this.data.push({\n                value: \"__null__\",\n                label: self.model.get(\"empty_text\")\n            });\n        }\n        _.each(this.model.get(\"data\"), function(option) {\n            self.data.push(option);\n        });\n        if (this.length() == 0) {\n            this.data.push({\n                value: \"__null__\",\n                label: this.model.get(\"error_text\")\n            });\n        }\n        if (this.model.get(\"searchable\")) {\n            this.data2 = [];\n            _.each(this.data, function(option, index) {\n                self.data2.push({\n                    order: index,\n                    id: option.value,\n                    text: option.label,\n                    tags: option.tags\n                });\n            });\n            this.$select.data(\"select2\") && this.$select.select2(\"destroy\");\n            this.matched_tags = {};\n            this.$select.select2({\n                data: self.data2,\n                closeOnSelect: !this.model.get(\"multiple\"),\n                multiple: this.model.get(\"multiple\"),\n                query: function(q) {\n                    self.matched_tags = {};\n                    var pagesize = self.model.get(\"pagesize\");\n                    var results = _.filter(self.data2, function(e) {\n                        var found = false;\n                        _.each(e.tags, function(tag) {\n                            if (self._match(q.term, tag)) {\n                                found = self.matched_tags[tag] = true;\n                            }\n                        });\n                        return found || self._match(q.term, e.text);\n                    });\n                    q.callback({\n                        results: results.slice(\n                            (q.page - 1) * pagesize,\n                            q.page * pagesize\n                        ),\n                        more: results.length >= q.page * pagesize\n                    });\n                },\n                formatResult: function(result) {\n                    return (\n                        _.escape(result.text) +\n                        '<div class=\"ui-tags\">' +\n                        _.reduce(\n                            result.tags,\n                            function(memo, tag) {\n                                if (self.matched_tags[tag]) {\n                                    return (\n                                        memo +\n                                        \"&nbsp;\" +\n                                        '<div class=\"label label-info\">' +\n                                        _.escape(tag) +\n                                        \"</div>\"\n                                    );\n                                }\n                                return memo;\n                            },\n                            \"\"\n                        ) +\n                        \"</div>\"\n                    );\n                }\n            });\n            this.$(\".select2-container .select2-search input\").off(\"blur\");\n        } else {\n            this.$select.find(\"option\").remove();\n            _.each(this.data, function(option) {\n                self.$select.append(\n                    $(\"<option/>\")\n                        .attr(\"value\", option.value)\n                        .html(_.escape(option.label))\n                );\n            });\n        }\n        this.model.set(\n            \"disabled\",\n            this.model.get(\"readonly\") || this.length() == 0\n        );\n        this._changeValue();\n    },\n\n    /** Handles field enabling/disabling, usually used when no options are available */\n    _changeDisabled: function() {\n        if (this.model.get(\"searchable\")) {\n            this.$select.select2(\n                this.model.get(\"disabled\") ? \"disable\" : \"enable\"\n            );\n        } else {\n            this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n        }\n    },\n\n    /** Searchable fields may display a spinner e.g. while waiting for a server response */\n    _changeWait: function() {\n        this.$dropdown\n            .removeClass()\n            .addClass(\"icon-dropdown fa\")\n            .addClass(\n                this.model.get(\"wait\") ? \"fa-spinner fa-spin\" : \"fa-caret-down\"\n            );\n    },\n\n    /** Handles field visibility */\n    _changeVisible: function() {\n        this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n    },\n\n    /** Synchronizes the model value with the actually selected field value */\n    _changeValue: function() {\n        this._setValue(this.model.get(\"value\"));\n        if (this.model.get(\"multiple\")) {\n            if (this.all_button) {\n                var value = this._getValue();\n                this.all_button.value(\n                    $.isArray(value) ? value.length : 0,\n                    this.length()\n                );\n            }\n        } else if (this._getValue() === null && !this.model.get(\"optional\")) {\n            this._setValue(this.first());\n        }\n    },\n\n    /** Return/Set current selection */\n    value: function(new_value) {\n        new_value !== undefined && this.model.set(\"value\", new_value);\n        return this._getValue();\n    },\n\n    /** Return the first select option */\n    first: function() {\n        return this.data.length > 0 ? this.data[0].value : null;\n    },\n\n    /** Check if a value is an existing option */\n    exists: function(value) {\n        return _.findWhere(this.data, { value: value });\n    },\n\n    /** Return the label/text of the current selection */\n    text: function() {\n        var v = this._getValue();\n        var d = this.exists($.isArray(v) ? v[0] : v);\n        return d ? d.label : \"\";\n    },\n\n    /** Show the select field */\n    show: function() {\n        this.model.set(\"visible\", true);\n    },\n\n    /** Hide the select field */\n    hide: function() {\n        this.model.set(\"visible\", false);\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Returns true if the field is disabled */\n    disabled: function() {\n        return this.model.get(\"disabled\");\n    },\n\n    /** Enable the select field */\n    enable: function() {\n        this.model.set(\"disabled\", false);\n    },\n\n    /** Disable the select field */\n    disable: function() {\n        this.model.set(\"disabled\", true);\n    },\n\n    /** Update all available options at once */\n    add: function(options, sorter) {\n        _.each(this.model.get(\"data\"), function(v) {\n            v.keep &&\n                !_.findWhere(options, { value: v.value }) &&\n                options.push(v);\n        });\n        sorter && options && options.sort(sorter);\n        this.model.set(\"data\", options);\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.model.set(\"data\", options);\n    },\n\n    /** Set the custom onchange callback function */\n    setOnChange: function(callback) {\n        this.model.set(\"onchange\", callback);\n    },\n\n    /** Number of available options */\n    length: function() {\n        return $.isArray(this.model.get(\"data\"))\n            ? this.model.get(\"data\").length\n            : 0;\n    },\n\n    /** Set value to dom */\n    _setValue: function(new_value) {\n        var self = this;\n        if (new_value === null || new_value === undefined) {\n            new_value = \"__null__\";\n        }\n        if (this.model.get(\"multiple\")) {\n            new_value = $.isArray(new_value) ? new_value : [new_value];\n        } else if ($.isArray(new_value)) {\n            if (new_value.length > 0) {\n                new_value = new_value[0];\n            } else {\n                new_value = \"__null__\";\n            }\n        }\n        if (this.model.get(\"searchable\")) {\n            if ($.isArray(new_value)) {\n                var val = [];\n                _.each(new_value, function(v) {\n                    var d = _.findWhere(self.data2, { id: v });\n                    d && val.push(d);\n                });\n                new_value = val;\n            } else {\n                var d = _.findWhere(this.data2, { id: new_value });\n                new_value = d;\n            }\n            this.$select.select2(\"data\", new_value);\n        } else {\n            this.$select.val(new_value);\n        }\n    },\n\n    /** Get value from dom */\n    _getValue: function() {\n        var val = null;\n        if (this.model.get(\"searchable\")) {\n            var selected = this.$select.select2(\"data\");\n            if (selected) {\n                if ($.isArray(selected)) {\n                    val = [];\n                    selected.sort(function(a, b) {\n                        return a.order - b.order;\n                    });\n                    _.each(selected, function(v) {\n                        val.push(v.id);\n                    });\n                } else {\n                    val = selected.id;\n                }\n            }\n        } else {\n            val = this.$select.val();\n        }\n        return Utils.isEmpty(val) ? null : val;\n    }\n});\n\nexport default {\n    View: View\n};\n"]}