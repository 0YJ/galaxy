{"version":3,"sources":["mvc/ui/ui-select-content.js"],"names":["define","Utils","Ui","Select","Batch","DISABLED","ENABLED","LINKED","Configurations","data","tooltip","multiple","batch","icon","data_multiple","src","data_collection","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","initialize","options","model","src_labels","pagelimit","statustimer","set","View","this","$batch_div","Backbone","Model","hda","hdca","linked","enabled","setElement","$","addClass","button_product","RadioButton","value","target","preventDefault","lastenter","self","append","_handleDrop","html","$batch","clone","$el","css","listenTo","e","_changeValue","render","removeClass","on","_changeData","_changeWait","_changeType","_changeCurrent","wait","onchange","unwait","update","new_value","undefined","id_list","isArray","details","result","config","current","Galaxy","emit","length","values","sort","i","a","hid","history","debug","push","b","_","fields","field","get","show","each","$batchfield","batchmode","button_type","hide","config_id","c","optional","searchable","individual","error_text","button_data","extensions","trigger","button_width","Math","empty","max","margin-left","select_options","keep","label","item","tags","items","name","id","list","indexOf","ev","new_id","findWhere","new_src","current_value","drop_data","getData","_handleDropStatus","status","_batch","map_over_type"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-content.js","sourcesContent":["define([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-select-default' ], function( Utils, Ui, Select ) {\n\n/** Batch mode variations */\nvar Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.LINKED     },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.LINKED     } ],\n    data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collections',  multiple: true,    batch: Batch.DISABLED   } ],\n    data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   } ],\n    workflow_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    module_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.ENABLED    } ],\n    module_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder',   tooltip: 'Multiple collections', multiple: true,    batch: Batch.ENABLED    } ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            src_labels  : { 'hda' : 'dataset', 'hdca': 'dataset collection' },\n            pagelimit   : 100,\n            statustimer : 1000\n        }).set( options );\n        this.setElement( $( '<div/>' ).addClass( 'ui-select-content' ) );\n        this.button_product = new Ui.RadioButton.View( {\n            value       : 'false',\n            data        : [ { icon: 'fa fa-chain', value: 'false',\n                              tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' },\n                            { icon: 'fa fa-chain-broken',  value: 'true',\n                              tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' } ] } );\n        var $batch_div = $( '<div/>' ).addClass( 'ui-form-info' )\n                            .append( $( '<i/>' ).addClass( 'fa fa-sitemap' ) )\n                            .append( $( '<span/>' ).html( 'This is a batch mode input field. Separate jobs will be triggered for each dataset selection.' ) );\n        this.$batch = {\n            linked  : $batch_div.clone(),\n            enabled : $batch_div.clone().append( $( '<div/>' )\n                                                    .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( 'Batch options:' ) )\n                                                    .append( this.button_product.$el ) )\n                                                    .append( $( '<div/>' ).css( 'clear', 'both' ) )\n        };\n\n        // add drag-drop event handlers\n        this.$el.on( 'dragenter', function( e ) { this.lastenter = e.target; self.$el.addClass( 'ui-dragover' ); } )\n                .on( 'dragover',  function( e ) { e.preventDefault(); } )\n                .on( 'dragleave', function( e ) { this.lastenter === e.target && self.$el.removeClass( 'ui-dragover' ); } )\n                .on( 'drop',      function( e ) { self._handleDrop( e ); } );\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:current', this._changeCurrent, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this );\n        this.render();\n\n        // add change event\n        this.on( 'change', function() { options.onchange && options.onchange( self.value() ) } );\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Update data representing selectable options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Return the currently selected dataset values */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        var current = this.model.get( 'current' );\n        if ( this.config[ current ] ) {\n            var id_list = this.fields[ current ].value();\n            if (id_list !== null) {\n                id_list = $.isArray( id_list ) ? id_list : [ id_list ];\n                if ( id_list.length > 0 ) {\n                    var result = this._batch( { values: [] } );\n                    for ( var i in id_list ) {\n                        var details = this.history[ id_list[ i ] + '_' + this.config[ current ].src ];\n                        if ( details ) {\n                            result.values.push( details );\n                        } else {\n                            Galaxy.emit.debug( 'ui-select-content::value()', 'Requested details not found for \\'' + id_list[ i ] + '\\'.'  );\n                            return null;\n                        }\n                    }\n                    result.values.sort( function( a, b ) { return a.hid - b.hid } );\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug( 'ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.'  );\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each( this.fields, function( field, i ) {\n            if ( self.model.get( 'current' ) == i ) {\n                field.$el.show();\n                _.each( self.$batch, function( $batchfield, batchmode ) {\n                    $batchfield[ self.config[ i ].batch == batchmode ? 'show' : 'hide' ]();\n                });\n                self.button_type.value( i );\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id = ( this.model.get( 'flavor' ) ? this.model.get( 'flavor' ) + '_' : '' ) +\n                        String( this.model.get( 'type' ) ) + ( this.model.get( 'multiple' ) ? '_multiple' : '' );\n        if ( Configurations[ config_id ] ) {\n            this.config = Configurations[ config_id ];\n        } else {\n            this.config = Configurations[ 'data' ];\n            Galaxy.emit.debug( 'ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.'  );\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get( 'data' );\n        var extensions = Utils.textify( this.model.get( 'extensions' ) );\n        var src_labels = this.model.get( 'src_labels' );\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each( this.config, function( c, i ) {\n            self.button_data.push({\n                value   : i,\n                icon    : c.icon,\n                tooltip : c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional    : self.model.get( 'optional' ),\n                    multiple    : c.multiple,\n                    searchable  : !c.multiple || ( data && data[ c.src ] && data[ c.src ].length > self.model.get( 'pagelimit' ) ),\n                    individual  : true,\n                    error_text  : 'No ' + ( extensions ? extensions + ' ' : '' ) + ( src_labels[ c.src ] || 'content' ) + ' available.',\n                    onchange    : function() {\n                        self.trigger( 'change' );\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value   : this.model.get( 'current' ),\n            data    : this.button_data,\n            onchange: function( value ) {\n                self.model.set( 'current', value );\n                self.trigger( 'change' );\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if ( this.fields.length > 1 ) {\n            this.$el.append( this.button_type.$el );\n            button_width = Math.max( 0, this.fields.length * 36 ) + 'px';\n        }\n        _.each( this.fields, function( field ) {\n            self.$el.append( field.$el.css( { 'margin-left': button_width } ) );\n        });\n        _.each( this.$batch, function( $batchfield, batchmode ) {\n            self.$el.append( $batchfield.css( { 'margin-left': button_width } ) );\n        });\n        this.model.set( 'current', 0 );\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each( this.fields, function( field ) { field[ self.model.get( 'wait' ) ? 'wait' : 'unwait' ]() } );\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get( 'data' );\n        var self = this;\n        var select_options = {};\n        _.each( options, function( items, src ) {\n            select_options[ src ] = [];\n            _.each( items, function( item ) {\n                select_options[ src ].push({\n                    hid  : item.hid,\n                    keep : item.keep,\n                    label: item.hid + ': ' + item.name,\n                    value: item.id,\n                    tags : item.tags\n                });\n                self.history[ item.id + '_' + src ] = item;\n            });\n        });\n        _.each( this.config, function( c, i ) {\n            select_options[ c.src ] && self.fields[ i ].add( select_options[ c.src ], function( a, b ) { return b.hid - a.hid } );\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function () {\n        var new_value = this.model.get( 'value' );\n        if ( new_value && new_value.values && new_value.values.length > 0 ) {\n            // create list with content ids\n            var list = [];\n            _.each( new_value.values, function( value ) {\n                list.push( value.id );\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[ 0 ].src;\n            var multiple = new_value.values.length > 1;\n            for( var i = 0; i < this.config.length; i++ ) {\n                var field = this.fields[ i ];\n                var c = this.config[ i ];\n                if ( c.src == src && [ multiple, true ].indexOf( c.multiple ) !== -1 ) {\n                    this.model.set( 'current', i );\n                    field.value( list );\n                    break;\n                }\n            }\n        } else {\n            _.each( this.fields, function( field ) {\n                field.value( null );\n            });\n        }\n    },\n\n    /** Handles drop events e.g. from history panel */\n    _handleDrop: function( ev ) {\n        try {\n            var data      = this.model.get( 'data' );\n            var current   = this.model.get( 'current' );\n            var config    = this.config[ current ];\n            var field     = this.fields[ current ];\n            var drop_data = JSON.parse( ev.originalEvent.dataTransfer.getData( 'text' ) )[ 0 ];\n            var new_id    = drop_data.id;\n            var new_src   = drop_data.history_content_type == 'dataset' ? 'hda' : 'hdca';\n            var new_value = { id: new_id, src: new_src };\n            if ( data && _.findWhere( data[ new_src ], new_value ) ) {\n                if ( config.src == new_src ) {\n                    var current_value = field.value();\n                    if ( current_value && config.multiple ) {\n                        if ( current_value.indexOf( new_id ) == -1 ) {\n                            current_value.push( new_id );\n                        }\n                    } else {\n                        current_value = new_id;\n                    }\n                    field.value( current_value );\n                } else {\n                    this.model.set( 'value', { values: [ new_value ] } );\n                    this.model.trigger( 'change:value' );\n                }\n                this.trigger( 'change' );\n                this._handleDropStatus( 'success' );\n            } else {\n                this._handleDropStatus( 'danger' );\n            }\n        } catch( e ) {\n            this._handleDropStatus( 'danger' );\n        }\n    },\n\n    /** Highlight drag result */\n    _handleDropStatus: function( status ) {\n        var self = this;\n        this.$el.removeClass( 'ui-dragover' ).addClass( 'ui-dragover-' + status );\n        setTimeout( function() { self.$el.removeClass( 'ui-dragover-' + status ) }, this.model.get( 'statustimer' ) );\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function( result ) {\n        result[ 'batch' ] = false;\n        var current = this.model.get( 'current' );\n        var config = this.config[ current ];\n        if ( config.src == 'hdca' && !config.multiple ) {\n            var hdca = this.history[ this.fields[ current ].value() + '_hdca' ];\n            if ( hdca && hdca.map_over_type ) {\n                result[ 'batch' ] = true;\n            }\n        }\n        if ( config.batch == Batch.LINKED || config.batch == Batch.ENABLED ) {\n            result[ 'batch' ] = true;\n            if ( config.batch == Batch.ENABLED && this.button_product.value() === 'true' ) {\n                result[ 'product' ] = true;\n            }\n        }\n        return result;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});"]}