{"version":3,"sources":["mvc/ui/ui-select-content.js"],"names":["define","Utils","Ui","Batch","DISABLED","ENABLED","LINKED","data","src","tooltip","multiple","batch","icon","data_multiple","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","View","Backbone","pagelimit","statustimer","options","setElement","button_product","value","$batch","extend","linked","$batch_div","enabled","this","model","Model","src_labels","hda","hdca","lastenter","self","addClass","on","e","preventDefault","RadioButton","listenTo","$","onchange","append","html","_changeWait","clone","set","$el","css","target","new_value","current","get","id_list","isArray","i","_handleDrop","details","Galaxy","_changeData","result","values","_changeCurrent","_changeValue","_changeType","render","field","_","$batchfield","unwait","config","Configurations","update","undefined","fields","button_data","each","push","length","_batch","c","history","Select","error_text","emit","debug","trigger","searchable","sort","b","hid","empty","button_width","batchmode","select_options","items","keep","item","label","name","tags","config_id","extensions","textify","list","optional","individual","button_type","drop_data","new_id","new_src","history_content_type","current_value","margin-left","_handleDropStatus","map_over_type","id","add","a","indexOf","ev","JSON","parse","originalEvent","dataTransfer","getData","findWhere","status","removeClass","setTimeout"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-content.js","sourcesContent":["define([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-select-default\"], function(\n    Utils,\n    Ui,\n    Select\n) {\n    /** Batch mode variations */\n    var Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.LINKED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.LINKED\n            }\n        ],\n        data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collections\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        module_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ],\n        module_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder\",\n                tooltip: \"Multiple collections\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                    pagelimit: 100,\n                    statustimer: 1000\n                }).set(options);\n            this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n            this.button_product = new Ui.RadioButton.View({\n                value: \"false\",\n                data: [\n                    {\n                        icon: \"fa fa-chain\",\n                        value: \"false\",\n                        tooltip:\n                            \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                    },\n                    {\n                        icon: \"fa fa-chain-broken\",\n                        value: \"true\",\n                        tooltip:\n                            \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                    }\n                ]\n            });\n            var $batch_div = $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n                .append(\n                    $(\"<span/>\").html(\n                        \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                    )\n                );\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div\n                    .clone()\n                    .append(\n                        $(\"<div/>\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"Batch options:\")\n                            )\n                            .append(this.button_product.$el)\n                    )\n                    .append($(\"<div/>\").css(\"clear\", \"both\"))\n            };\n\n            // add drag-drop event handlers\n            this.$el\n                .on(\"dragenter\", function(e) {\n                    this.lastenter = e.target;\n                    self.$el.addClass(\"ui-dragover\");\n                })\n                .on(\"dragover\", function(e) {\n                    e.preventDefault();\n                })\n                .on(\"dragleave\", function(e) {\n                    this.lastenter === e.target &&\n                        self.$el.removeClass(\"ui-dragover\");\n                })\n                .on(\"drop\", function(e) {\n                    self._handleDrop(e);\n                });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(\n                this.model,\n                \"change:current\",\n                this._changeCurrent,\n                this\n            );\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:type change:optional change:multiple change:extensions\",\n                this._changeType,\n                this\n            );\n            this.render();\n\n            // add change event\n            this.on(\"change\", function() {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Update data representing selectable options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            var current = this.model.get(\"current\");\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[\n                                id_list[i] + \"_\" + this.config[current].src\n                            ];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug(\n                                    \"ui-select-content::value()\",\n                                    \"Requested details not found for '\" +\n                                        id_list[i] +\n                                        \"'.\"\n                                );\n                                return null;\n                            }\n                        }\n                        result.values.sort(function(a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug(\n                    \"ui-select-content::value()\",\n                    \"Invalid value/source '\" + new_value + \"'.\"\n                );\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function() {\n            var self = this;\n            _.each(this.fields, function(field, i) {\n                if (self.model.get(\"current\") == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function($batchfield, batchmode) {\n                        $batchfield[\n                            self.config[i].batch == batchmode ? \"show\" : \"hide\"\n                        ]();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id =\n                (this.model.get(\"flavor\")\n                    ? this.model.get(\"flavor\") + \"_\"\n                    : \"\") +\n                String(this.model.get(\"type\")) +\n                (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations[\"data\"];\n                Galaxy.emit.debug(\n                    \"ui-select-content::_changeType()\",\n                    \"Invalid configuration/type id '\" + config_id + \"'.\"\n                );\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get(\"data\");\n            var extensions = Utils.textify(this.model.get(\"extensions\"));\n            var src_labels = this.model.get(\"src_labels\");\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function(c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(\n                    new Select.View({\n                        optional: self.model.get(\"optional\"),\n                        multiple: c.multiple,\n                        searchable:\n                            !c.multiple ||\n                            (data &&\n                                data[c.src] &&\n                                data[c.src].length >\n                                    self.model.get(\"pagelimit\")),\n                        individual: true,\n                        error_text:\n                            \"No \" +\n                            (extensions ? extensions + \" \" : \"\") +\n                            (src_labels[c.src] || \"content\") +\n                            \" available.\",\n                        onchange: function() {\n                            self.trigger(\"change\");\n                        }\n                    })\n                );\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get(\"current\"),\n                data: this.button_data,\n                onchange: function(value) {\n                    self.model.set(\"current\", value);\n                    self.trigger(\"change\");\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + \"px\";\n            }\n            _.each(this.fields, function(field) {\n                self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n            });\n            _.each(this.$batch, function($batchfield, batchmode) {\n                self.$el.append(\n                    $batchfield.css({ \"margin-left\": button_width })\n                );\n            });\n            this.model.set(\"current\", 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function() {\n            var self = this;\n            _.each(this.fields, function(field) {\n                field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function() {\n            var options = this.model.get(\"data\");\n            var self = this;\n            var select_options = {};\n            _.each(options, function(items, src) {\n                select_options[src] = [];\n                _.each(items, function(item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + \": \" + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + \"_\" + src] = item;\n                });\n            });\n            _.each(this.config, function(c, i) {\n                select_options[c.src] &&\n                    self.fields[i].add(select_options[c.src], function(a, b) {\n                        return b.hid - a.hid;\n                    });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function() {\n            var new_value = this.model.get(\"value\");\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function(value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (\n                        c.src == src &&\n                        [multiple, true].indexOf(c.multiple) !== -1\n                    ) {\n                        this.model.set(\"current\", i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function(field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function(ev) {\n            try {\n                var data = this.model.get(\"data\");\n                var current = this.model.get(\"current\");\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(\n                    ev.originalEvent.dataTransfer.getData(\"text\")\n                )[0];\n                var new_id = drop_data.id;\n                var new_src =\n                    drop_data.history_content_type == \"dataset\"\n                        ? \"hda\"\n                        : \"hdca\";\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set(\"value\", { values: [new_value] });\n                        this.model.trigger(\"change:value\");\n                    }\n                    this.trigger(\"change\");\n                    this._handleDropStatus(\"success\");\n                } else {\n                    this._handleDropStatus(\"danger\");\n                }\n            } catch (e) {\n                this._handleDropStatus(\"danger\");\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function(status) {\n            var self = this;\n            this.$el\n                .removeClass(\"ui-dragover\")\n                .addClass(\"ui-dragover-\" + status);\n            setTimeout(function() {\n                self.$el.removeClass(\"ui-dragover-\" + status);\n            }, this.model.get(\"statustimer\"));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function(result) {\n            result[\"batch\"] = false;\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            if (config.src == \"hdca\" && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n                if (hdca && hdca.map_over_type) {\n                    result[\"batch\"] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result[\"batch\"] = true;\n                if (\n                    config.batch == Batch.ENABLED &&\n                    this.button_product.value() === \"true\"\n                ) {\n                    result[\"product\"] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n"]}