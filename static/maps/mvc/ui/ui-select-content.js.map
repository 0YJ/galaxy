{"version":3,"sources":["mvc/ui/ui-select-content.js"],"names":["Batch","DISABLED","ENABLED","LINKED","Configurations","data","src","icon","tooltip","multiple","batch","data_multiple","data_collection","workflow_data_multiple","workflow_data_collection","module_data","pagelimit","statustimer","self","options","this","model","button_product","value","Model","hda","hdca","setElement","$","addClass","_uiMisc2","default","RadioButton","View","$batch_div","$batch","lastenter","append","html","linked","clone","enabled","listenTo","onchange","$el","css","on","e","target","wait","removeClass","_handleDrop","history","new_value","_changeData","undefined","_changeWait","current","_changeCurrent","config","_changeValue","id_list","_changeType","render","Galaxy","emit","result","set","unwait","field","_","each","get","fields","isArray","length","_batch","values","i","details","src_labels","debug","push","sort","a","b","button_data","hid","optional","individual","button_type","show","$batchfield","batchmode","hide","button_width","String","config_id","extensions","_utils2","textify","select_options","c","keep","tags","searchable","error_text","trigger","empty","Math","margin-left","id","findWhere","current_value","items","item","label","name","_handleDropStatus","ev","preventDefault","add","list","map_over_type","indexOf","drop_data","JSON","parse","originalEvent","dataTransfer","getData","new_id","new_src","history_content_type","status","setTimeout"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-content.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Select from \"mvc/ui/ui-select-default\";\n/** Batch mode variations */\nvar Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.LINKED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.LINKED\n        }\n    ],\n    data_multiple: [\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collections\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }\n    ],\n    data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data_multiple: [\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    module_data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }\n    ],\n    module_data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder\",\n            tooltip: \"Multiple collections\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }\n    ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                pagelimit: 100,\n                statustimer: 1000\n            }).set(options);\n        this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n        this.button_product = new Ui.RadioButton.View({\n            value: \"false\",\n            data: [\n                {\n                    icon: \"fa fa-chain\",\n                    value: \"false\",\n                    tooltip:\n                        \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                },\n                {\n                    icon: \"fa fa-chain-broken\",\n                    value: \"true\",\n                    tooltip:\n                        \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                }\n            ]\n        });\n        var $batch_div = $(\"<div/>\")\n            .addClass(\"ui-form-info\")\n            .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n            .append(\n                $(\"<span/>\").html(\n                    \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                )\n            );\n        this.$batch = {\n            linked: $batch_div.clone(),\n            enabled: $batch_div\n                .clone()\n                .append(\n                    $(\"<div/>\")\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"ui-form-title\")\n                                .html(\"Batch options:\")\n                        )\n                        .append(this.button_product.$el)\n                )\n                .append($(\"<div/>\").css(\"clear\", \"both\"))\n        };\n\n        // add drag-drop event handlers\n        this.$el\n            .on(\"dragenter\", function(e) {\n                this.lastenter = e.target;\n                self.$el.addClass(\"ui-dragover\");\n            })\n            .on(\"dragover\", function(e) {\n                e.preventDefault();\n            })\n            .on(\"dragleave\", function(e) {\n                this.lastenter === e.target &&\n                    self.$el.removeClass(\"ui-dragover\");\n            })\n            .on(\"drop\", function(e) {\n                self._handleDrop(e);\n            });\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo(this.model, \"change:data\", this._changeData, this);\n        this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n        this.listenTo(this.model, \"change:current\", this._changeCurrent, this);\n        this.listenTo(this.model, \"change:value\", this._changeValue, this);\n        this.listenTo(\n            this.model,\n            \"change:type change:optional change:multiple change:extensions\",\n            this._changeType,\n            this\n        );\n        this.render();\n\n        // add change event\n        this.on(\"change\", function() {\n            options.onchange && options.onchange(self.value());\n        });\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Update data representing selectable options */\n    update: function(options) {\n        this.model.set(\"data\", options);\n    },\n\n    /** Return the currently selected dataset values */\n    value: function(new_value) {\n        new_value !== undefined && this.model.set(\"value\", new_value);\n        var current = this.model.get(\"current\");\n        if (this.config[current]) {\n            var id_list = this.fields[current].value();\n            if (id_list !== null) {\n                id_list = $.isArray(id_list) ? id_list : [id_list];\n                if (id_list.length > 0) {\n                    var result = this._batch({ values: [] });\n                    for (var i in id_list) {\n                        var details = this.history[\n                            id_list[i] + \"_\" + this.config[current].src\n                        ];\n                        if (details) {\n                            result.values.push(details);\n                        } else {\n                            Galaxy.emit.debug(\n                                \"ui-select-content::value()\",\n                                \"Requested details not found for '\" +\n                                    id_list[i] +\n                                    \"'.\"\n                            );\n                            return null;\n                        }\n                    }\n                    result.values.sort(function(a, b) {\n                        return a.hid - b.hid;\n                    });\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug(\n                \"ui-select-content::value()\",\n                \"Invalid value/source '\" + new_value + \"'.\"\n            );\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each(this.fields, function(field, i) {\n            if (self.model.get(\"current\") == i) {\n                field.$el.show();\n                _.each(self.$batch, function($batchfield, batchmode) {\n                    $batchfield[\n                        self.config[i].batch == batchmode ? \"show\" : \"hide\"\n                    ]();\n                });\n                self.button_type.value(i);\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id =\n            (this.model.get(\"flavor\") ? this.model.get(\"flavor\") + \"_\" : \"\") +\n            String(this.model.get(\"type\")) +\n            (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n        if (Configurations[config_id]) {\n            this.config = Configurations[config_id];\n        } else {\n            this.config = Configurations[\"data\"];\n            Galaxy.emit.debug(\n                \"ui-select-content::_changeType()\",\n                \"Invalid configuration/type id '\" + config_id + \"'.\"\n            );\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get(\"data\");\n        var extensions = Utils.textify(this.model.get(\"extensions\"));\n        var src_labels = this.model.get(\"src_labels\");\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each(this.config, function(c, i) {\n            self.button_data.push({\n                value: i,\n                icon: c.icon,\n                tooltip: c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional: self.model.get(\"optional\"),\n                    multiple: c.multiple,\n                    searchable:\n                        !c.multiple ||\n                        (data &&\n                            data[c.src] &&\n                            data[c.src].length > self.model.get(\"pagelimit\")),\n                    individual: true,\n                    error_text:\n                        \"No \" +\n                        (extensions ? extensions + \" \" : \"\") +\n                        (src_labels[c.src] || \"content\") +\n                        \" available.\",\n                    onchange: function() {\n                        self.trigger(\"change\");\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value: this.model.get(\"current\"),\n            data: this.button_data,\n            onchange: function(value) {\n                self.model.set(\"current\", value);\n                self.trigger(\"change\");\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if (this.fields.length > 1) {\n            this.$el.append(this.button_type.$el);\n            button_width = Math.max(0, this.fields.length * 36) + \"px\";\n        }\n        _.each(this.fields, function(field) {\n            self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n        });\n        _.each(this.$batch, function($batchfield, batchmode) {\n            self.$el.append($batchfield.css({ \"margin-left\": button_width }));\n        });\n        this.model.set(\"current\", 0);\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each(this.fields, function(field) {\n            field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n        });\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get(\"data\");\n        var self = this;\n        var select_options = {};\n        _.each(options, function(items, src) {\n            select_options[src] = [];\n            _.each(items, function(item) {\n                select_options[src].push({\n                    hid: item.hid,\n                    keep: item.keep,\n                    label: item.hid + \": \" + item.name,\n                    value: item.id,\n                    tags: item.tags\n                });\n                self.history[item.id + \"_\" + src] = item;\n            });\n        });\n        _.each(this.config, function(c, i) {\n            select_options[c.src] &&\n                self.fields[i].add(select_options[c.src], function(a, b) {\n                    return b.hid - a.hid;\n                });\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function() {\n        var new_value = this.model.get(\"value\");\n        if (new_value && new_value.values && new_value.values.length > 0) {\n            // create list with content ids\n            var list = [];\n            _.each(new_value.values, function(value) {\n                list.push(value.id);\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[0].src;\n            var multiple = new_value.values.length > 1;\n            for (var i = 0; i < this.config.length; i++) {\n                var field = this.fields[i];\n                var c = this.config[i];\n                if (\n                    c.src == src &&\n                    [multiple, true].indexOf(c.multiple) !== -1\n                ) {\n                    this.model.set(\"current\", i);\n                    field.value(list);\n                    break;\n                }\n            }\n        } else {\n            _.each(this.fields, function(field) {\n                field.value(null);\n            });\n        }\n    },\n\n    /** Handles drop events e.g. from history panel */\n    _handleDrop: function(ev) {\n        try {\n            var data = this.model.get(\"data\");\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            var field = this.fields[current];\n            var drop_data = JSON.parse(\n                ev.originalEvent.dataTransfer.getData(\"text\")\n            )[0];\n            var new_id = drop_data.id;\n            var new_src =\n                drop_data.history_content_type == \"dataset\" ? \"hda\" : \"hdca\";\n            var new_value = { id: new_id, src: new_src };\n            if (data && _.findWhere(data[new_src], new_value)) {\n                if (config.src == new_src) {\n                    var current_value = field.value();\n                    if (current_value && config.multiple) {\n                        if (current_value.indexOf(new_id) == -1) {\n                            current_value.push(new_id);\n                        }\n                    } else {\n                        current_value = new_id;\n                    }\n                    field.value(current_value);\n                } else {\n                    this.model.set(\"value\", { values: [new_value] });\n                    this.model.trigger(\"change:value\");\n                }\n                this.trigger(\"change\");\n                this._handleDropStatus(\"success\");\n            } else {\n                this._handleDropStatus(\"danger\");\n            }\n        } catch (e) {\n            this._handleDropStatus(\"danger\");\n        }\n        ev.preventDefault();\n    },\n\n    /** Highlight drag result */\n    _handleDropStatus: function(status) {\n        var self = this;\n        this.$el.removeClass(\"ui-dragover\").addClass(\"ui-dragover-\" + status);\n        setTimeout(function() {\n            self.$el.removeClass(\"ui-dragover-\" + status);\n        }, this.model.get(\"statustimer\"));\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function(result) {\n        result[\"batch\"] = false;\n        var current = this.model.get(\"current\");\n        var config = this.config[current];\n        if (config.src == \"hdca\" && !config.multiple) {\n            var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n            if (hdca && hdca.map_over_type) {\n                result[\"batch\"] = true;\n            }\n        }\n        if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n            result[\"batch\"] = true;\n            if (\n                config.batch == Batch.ENABLED &&\n                this.button_product.value() === \"true\"\n            ) {\n                result[\"product\"] = true;\n            }\n        }\n        return result;\n    }\n});\n\nexport default {\n    View: View\n};\n"]}