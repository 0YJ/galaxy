{"version":3,"sources":["mvc/ui/ui-select-content.js"],"names":["define","Utils","Ui","Select","Batch","DISABLED","ENABLED","LINKED","Configurations","data","tooltip","multiple","batch","icon","data_multiple","src","data_collection","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","initialize","options","model","src_labels","pagelimit","set","setElement","$","addClass","View","self","$batch_div","this","$batch","Backbone","Model","linked","clone","hdca","enabled","button_product","RadioButton","value","_changeData","append","_changeValue","html","$el","css","history","listenTo","_changeWait","_changeCurrent","wait","_changeType","render","unwait","onchange","update","new_value","undefined","id_list","isArray","details","current","get","result","sort","fields","hid","length","_batch","values","i","emit","debug","config","Galaxy","push","a","b","_","each","field","show","$batchfield","batchmode","config_id","hide","extensions","String","c","optional","searchable","button_data","button_type","selectall","error_text","button_width","trigger","empty","max","margin-left","keep","label","item","name","select_options","items","id","tags","list","add","indexOf","map_over_type"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-content.js","sourcesContent":["define([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-select-default' ], function( Utils, Ui, Select ) {\n\n/** Batch mode variations */\nvar Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.LINKED     },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.LINKED     } ],\n    data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   } ],\n    workflow_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    module_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.ENABLED    } ],\n    module_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder',   tooltip: 'Multiple collections', multiple: true,    batch: Batch.ENABLED    } ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            src_labels  : { 'hda' : 'dataset', 'hdca': 'dataset collection' },\n            pagelimit   : 100\n        }).set( options );\n        this.setElement( $( '<div/>' ).addClass( 'ui-select-content' ) );\n        this.button_product = new Ui.RadioButton.View( {\n            value       : 'false',\n            data        : [ { icon: 'fa fa-chain', value: 'false',\n                              tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' },\n                            { icon: 'fa fa-chain-broken',  value: 'true',\n                              tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' } ] } );\n        var $batch_div = $( '<div/>' ).addClass( 'ui-form-info' )\n                            .append( $( '<i/>' ).addClass( 'fa fa-sitemap' ) )\n                            .append( $( '<span/>' ).html( 'This is a batch mode input field. Separate jobs will be triggered for each dataset selection.' ) );\n        this.$batch = {\n            linked  : $batch_div.clone(),\n            enabled : $batch_div.clone().append( $( '<div/>' )\n                                                    .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( 'Batch options:' ) )\n                                                    .append( this.button_product.$el ) )\n                                                    .append( $( '<div/>' ).css( 'clear', 'both' ) )\n        };\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:current', this._changeCurrent, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this );\n        this.render();\n\n        // add change event\n        this.on( 'change', function() { options.onchange && options.onchange( self.value() ) } );\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Update data representing selectable options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Return the currently selected dataset values */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        var current = this.model.get( 'current' );\n        if ( this.config[ current ] ) {\n            var id_list = this.fields[ current ].value();\n            if (id_list !== null) {\n                id_list = $.isArray( id_list ) ? id_list : [ id_list ];\n                if ( id_list.length > 0 ) {\n                    var result = this._batch( { values: [] } );\n                    for ( var i in id_list ) {\n                        var details = this.history[ id_list[ i ] + '_' + this.config[ current ].src ];\n                        if ( details ) {\n                            result.values.push( details );\n                        } else {\n                            Galaxy.emit.debug( 'ui-select-content::value()', 'Requested details not found for \\'' + id_list[ i ] + '\\'.'  );\n                            return null;\n                        }\n                    }\n                    result.values.sort( function( a, b ) { return a.hid - b.hid } );\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug( 'ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.'  );\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each( this.fields, function( field, i ) {\n            if ( self.model.get( 'current' ) == i ) {\n                field.$el.show();\n                _.each( self.$batch, function( $batchfield, batchmode ) {\n                    $batchfield[ self.config[ i ].batch == batchmode ? 'show' : 'hide' ]();\n                });\n                self.button_type.value( i );\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id = ( this.model.get( 'flavor' ) ? this.model.get( 'flavor' ) + '_' : '' ) +\n                        String( this.model.get( 'type' ) ) + ( this.model.get( 'multiple' ) ? '_multiple' : '' );\n        if ( Configurations[ config_id ] ) {\n            this.config = Configurations[ config_id ];\n        } else {\n            this.config = Configurations[ 'data' ];\n            Galaxy.emit.debug( 'ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.'  );\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get( 'data' );\n        var extensions = Utils.textify( this.model.get( 'extensions' ) );\n        var src_labels = this.model.get( 'src_labels' );\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each( this.config, function( c, i ) {\n            self.button_data.push({\n                value   : i,\n                icon    : c.icon,\n                tooltip : c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional    : self.model.get( 'optional' ),\n                    multiple    : c.multiple,\n                    searchable  : !c.multiple || ( data && data[ c.src ] && data[ c.src ].length > self.model.get( 'pagelimit' ) ),\n                    selectall   : false,\n                    error_text  : 'No ' + ( extensions ? extensions + ' ' : '' ) + ( src_labels[ c.src ] || 'content' ) + ' available.',\n                    onchange    : function() {\n                        self.trigger( 'change' );\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value   : this.model.get( 'current' ),\n            data    : this.button_data,\n            onchange: function( value ) {\n                self.model.set( 'current', value );\n                self.trigger( 'change' );\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if ( this.fields.length > 1 ) {\n            this.$el.append( this.button_type.$el );\n            button_width = Math.max( 0, this.fields.length * 36 ) + 'px';\n        }\n        _.each( this.fields, function( field ) {\n            self.$el.append( field.$el.css( { 'margin-left': button_width } ) );\n        });\n        _.each( this.$batch, function( $batchfield, batchmode ) {\n            self.$el.append( $batchfield.css( { 'margin-left': button_width } ) );\n        });\n        this.model.set( 'current', 0 );\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each( this.fields, function( field ) { field[ self.model.get( 'wait' ) ? 'wait' : 'unwait' ]() } );\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get( 'data' );\n        var self = this;\n        var select_options = {};\n        _.each( options, function( items, src ) {\n            select_options[ src ] = [];\n            _.each( items, function( item ) {\n                select_options[ src ].push({\n                    hid  : item.hid,\n                    keep : item.keep,\n                    label: item.hid + ': ' + item.name,\n                    value: item.id,\n                    tags : item.tags\n                });\n                self.history[ item.id + '_' + src ] = item;\n            });\n        });\n        _.each( this.config, function( c, i ) {\n            select_options[ c.src ] && self.fields[ i ].add( select_options[ c.src ], function( a, b ) { return b.hid - a.hid } );\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function () {\n        var new_value = this.model.get( 'value' );\n        if ( new_value && new_value.values && new_value.values.length > 0 ) {\n            // create list with content ids\n            var list = [];\n            _.each( new_value.values, function( value ) {\n                list.push( value.id );\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[ 0 ].src;\n            var multiple = new_value.values.length > 1;\n            for( var i = 0; i < this.config.length; i++ ) {\n                var field = this.fields[ i ];\n                var c = this.config[ i ];\n                if ( c.src == src && [ multiple, true ].indexOf( c.multiple ) !== -1 ) {\n                    this.model.set( 'current', i );\n                    field.value( list );\n                    break;\n                }\n            }\n        } else {\n            _.each( this.fields, function( field ) {\n                field.value( null );\n            });\n        }\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function( result ) {\n        result[ 'batch' ] = false;\n        var current = this.model.get( 'current' );\n        var config = this.config[ current ];\n        if ( config.src == 'hdca' && !config.multiple ) {\n            var hdca = this.history[ this.fields[ current ].value() + '_hdca' ];\n            if ( hdca && hdca.map_over_type ) {\n                result[ 'batch' ] = true;\n            }\n        }\n        if ( config.batch == Batch.LINKED || config.batch == Batch.ENABLED ) {\n            result[ 'batch' ] = true;\n            if ( config.batch == Batch.ENABLED && this.button_product.value() === 'true' ) {\n                result[ 'product' ] = true;\n            }\n        }\n        return result;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});"]}