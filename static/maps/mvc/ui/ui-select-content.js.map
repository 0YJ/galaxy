{"version":3,"sources":["mvc/ui/ui-select-content.js"],"names":["Batch","DISABLED","ENABLED","LINKED","Configurations","data","src","icon","tooltip","multiple","batch","data_multiple","data_collection","workflow_data_multiple","workflow_data_collection","module_data","pagelimit","statustimer","self","options","this","model","button_product","value","Model","hda","hdca","setElement","$","addClass","_uiMisc2","default","RadioButton","View","$batch_div","$batch","lastenter","append","html","linked","clone","enabled","listenTo","onchange","$el","css","on","e","target","wait","removeClass","_handleDrop","history","new_value","_changeData","undefined","_changeWait","current","_changeCurrent","config","_changeValue","id_list","_changeType","render","Galaxy","emit","result","set","unwait","field","_","each","get","fields","isArray","length","_batch","values","i","details","src_labels","debug","push","button_data","sort","a","b","hid","show","button_type","$batchfield","batchmode","hide","button_width","config_id","extensions","_utils2","textify","select_options","c","items","keep","label","item","tags","searchable","error_text","trigger","list","empty","Math","max","margin-left","drop_data","JSON","ev","originalEvent","current_value","name","id","_handleDropStatus","add","setTimeout","indexOf","parse","dataTransfer","getData","new_id","new_src","history_content_type","findWhere","preventDefault","status","map_over_type"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-content.js","sourcesContent":["import Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Select from \"mvc/ui/ui-select-default\";\n/** Batch mode variations */\nvar Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.LINKED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.LINKED\n        }\n    ],\n    data_multiple: [\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collections\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }\n    ],\n    data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data_multiple: [\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    module_data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }\n    ],\n    module_data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder\",\n            tooltip: \"Multiple collections\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }\n    ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                pagelimit: 100,\n                statustimer: 1000\n            }).set(options);\n        this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n        this.button_product = new Ui.RadioButton.View({\n            value: \"false\",\n            data: [\n                {\n                    icon: \"fa fa-chain\",\n                    value: \"false\",\n                    tooltip:\n                        \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                },\n                {\n                    icon: \"fa fa-chain-broken\",\n                    value: \"true\",\n                    tooltip:\n                        \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                }\n            ]\n        });\n        var $batch_div = $(\"<div/>\")\n            .addClass(\"ui-form-info\")\n            .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n            .append(\n                $(\"<span/>\").html(\n                    \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                )\n            );\n        this.$batch = {\n            linked: $batch_div.clone(),\n            enabled: $batch_div\n                .clone()\n                .append(\n                    $(\"<div/>\")\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"ui-form-title\")\n                                .html(\"Batch options:\")\n                        )\n                        .append(this.button_product.$el)\n                )\n                .append($(\"<div/>\").css(\"clear\", \"both\"))\n        };\n\n        // add drag-drop event handlers\n        this.$el\n            .on(\"dragenter\", function(e) {\n                this.lastenter = e.target;\n                self.$el.addClass(\"ui-dragover\");\n            })\n            .on(\"dragover\", e => {\n                e.preventDefault();\n            })\n            .on(\"dragleave\", function(e) {\n                this.lastenter === e.target &&\n                    self.$el.removeClass(\"ui-dragover\");\n            })\n            .on(\"drop\", e => {\n                self._handleDrop(e);\n            });\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo(this.model, \"change:data\", this._changeData, this);\n        this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n        this.listenTo(this.model, \"change:current\", this._changeCurrent, this);\n        this.listenTo(this.model, \"change:value\", this._changeValue, this);\n        this.listenTo(\n            this.model,\n            \"change:type change:optional change:multiple change:extensions\",\n            this._changeType,\n            this\n        );\n        this.render();\n\n        // add change event\n        this.on(\"change\", () => {\n            options.onchange && options.onchange(self.value());\n        });\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Update data representing selectable options */\n    update: function(options) {\n        this.model.set(\"data\", options);\n    },\n\n    /** Return the currently selected dataset values */\n    value: function(new_value) {\n        new_value !== undefined && this.model.set(\"value\", new_value);\n        var current = this.model.get(\"current\");\n        if (this.config[current]) {\n            var id_list = this.fields[current].value();\n            if (id_list !== null) {\n                id_list = $.isArray(id_list) ? id_list : [id_list];\n                if (id_list.length > 0) {\n                    var result = this._batch({ values: [] });\n                    for (var i in id_list) {\n                        var details = this.history[\n                            `${id_list[i]}_${this.config[current].src}`\n                        ];\n                        if (details) {\n                            result.values.push(details);\n                        } else {\n                            Galaxy.emit.debug(\n                                \"ui-select-content::value()\",\n                                `Requested details not found for '${id_list[\n                                    i\n                                ]}'.`\n                            );\n                            return null;\n                        }\n                    }\n                    result.values.sort((a, b) => a.hid - b.hid);\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug(\n                \"ui-select-content::value()\",\n                `Invalid value/source '${new_value}'.`\n            );\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each(this.fields, (field, i) => {\n            if (self.model.get(\"current\") == i) {\n                field.$el.show();\n                _.each(self.$batch, ($batchfield, batchmode) => {\n                    $batchfield[\n                        self.config[i].batch == batchmode ? \"show\" : \"hide\"\n                    ]();\n                });\n                self.button_type.value(i);\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id =\n            (this.model.get(\"flavor\") ? `${this.model.get(\"flavor\")}_` : \"\") +\n            String(this.model.get(\"type\")) +\n            (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n        if (Configurations[config_id]) {\n            this.config = Configurations[config_id];\n        } else {\n            this.config = Configurations[\"data\"];\n            Galaxy.emit.debug(\n                \"ui-select-content::_changeType()\",\n                `Invalid configuration/type id '${config_id}'.`\n            );\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get(\"data\");\n        var extensions = Utils.textify(this.model.get(\"extensions\"));\n        var src_labels = this.model.get(\"src_labels\");\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each(this.config, (c, i) => {\n            self.button_data.push({\n                value: i,\n                icon: c.icon,\n                tooltip: c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional: self.model.get(\"optional\"),\n                    multiple: c.multiple,\n                    searchable:\n                        !c.multiple ||\n                        (data &&\n                            data[c.src] &&\n                            data[c.src].length > self.model.get(\"pagelimit\")),\n                    individual: true,\n                    error_text: `No ${extensions\n                        ? `${extensions} `\n                        : \"\"}${src_labels[c.src] || \"content\"} available.`,\n                    onchange: function() {\n                        self.trigger(\"change\");\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value: this.model.get(\"current\"),\n            data: this.button_data,\n            onchange: function(value) {\n                self.model.set(\"current\", value);\n                self.trigger(\"change\");\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if (this.fields.length > 1) {\n            this.$el.append(this.button_type.$el);\n            button_width = `${Math.max(0, this.fields.length * 36)}px`;\n        }\n        _.each(this.fields, field => {\n            self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n        });\n        _.each(this.$batch, ($batchfield, batchmode) => {\n            self.$el.append($batchfield.css({ \"margin-left\": button_width }));\n        });\n        this.model.set(\"current\", 0);\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each(this.fields, field => {\n            field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n        });\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get(\"data\");\n        var self = this;\n        var select_options = {};\n        _.each(options, (items, src) => {\n            select_options[src] = [];\n            _.each(items, item => {\n                select_options[src].push({\n                    hid: item.hid,\n                    keep: item.keep,\n                    label: `${item.hid}: ${item.name}`,\n                    value: item.id,\n                    tags: item.tags\n                });\n                self.history[`${item.id}_${src}`] = item;\n            });\n        });\n        _.each(this.config, (c, i) => {\n            select_options[c.src] &&\n                self.fields[i].add(\n                    select_options[c.src],\n                    (a, b) => b.hid - a.hid\n                );\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function() {\n        var new_value = this.model.get(\"value\");\n        if (new_value && new_value.values && new_value.values.length > 0) {\n            // create list with content ids\n            var list = [];\n            _.each(new_value.values, value => {\n                list.push(value.id);\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[0].src;\n            var multiple = new_value.values.length > 1;\n            for (var i = 0; i < this.config.length; i++) {\n                var field = this.fields[i];\n                var c = this.config[i];\n                if (\n                    c.src == src &&\n                    [multiple, true].indexOf(c.multiple) !== -1\n                ) {\n                    this.model.set(\"current\", i);\n                    field.value(list);\n                    break;\n                }\n            }\n        } else {\n            _.each(this.fields, field => {\n                field.value(null);\n            });\n        }\n    },\n\n    /** Handles drop events e.g. from history panel */\n    _handleDrop: function(ev) {\n        try {\n            var data = this.model.get(\"data\");\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            var field = this.fields[current];\n            var drop_data = JSON.parse(\n                ev.originalEvent.dataTransfer.getData(\"text\")\n            )[0];\n            var new_id = drop_data.id;\n            var new_src =\n                drop_data.history_content_type == \"dataset\" ? \"hda\" : \"hdca\";\n            var new_value = { id: new_id, src: new_src };\n            if (data && _.findWhere(data[new_src], new_value)) {\n                if (config.src == new_src) {\n                    var current_value = field.value();\n                    if (current_value && config.multiple) {\n                        if (current_value.indexOf(new_id) == -1) {\n                            current_value.push(new_id);\n                        }\n                    } else {\n                        current_value = new_id;\n                    }\n                    field.value(current_value);\n                } else {\n                    this.model.set(\"value\", { values: [new_value] });\n                    this.model.trigger(\"change:value\");\n                }\n                this.trigger(\"change\");\n                this._handleDropStatus(\"success\");\n            } else {\n                this._handleDropStatus(\"danger\");\n            }\n        } catch (e) {\n            this._handleDropStatus(\"danger\");\n        }\n        ev.preventDefault();\n    },\n\n    /** Highlight drag result */\n    _handleDropStatus: function(status) {\n        var self = this;\n        this.$el.removeClass(\"ui-dragover\").addClass(`ui-dragover-${status}`);\n        setTimeout(() => {\n            self.$el.removeClass(`ui-dragover-${status}`);\n        }, this.model.get(\"statustimer\"));\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function(result) {\n        result[\"batch\"] = false;\n        var current = this.model.get(\"current\");\n        var config = this.config[current];\n        if (config.src == \"hdca\" && !config.multiple) {\n            var hdca = this.history[`${this.fields[current].value()}_hdca`];\n            if (hdca && hdca.map_over_type) {\n                result[\"batch\"] = true;\n            }\n        }\n        if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n            result[\"batch\"] = true;\n            if (\n                config.batch == Batch.ENABLED &&\n                this.button_product.value() === \"true\"\n            ) {\n                result[\"product\"] = true;\n            }\n        }\n        return result;\n    }\n});\n\nexport default {\n    View: View\n};\n"]}