{"version":3,"sources":["mvc/ui/icon-button.js"],"names":["define","IconButton","Backbone","Model","extend","defaults","title","icon_class","on_click","menu_options","is_menu_button","id","href","target","enabled","visible","tooltip_config","IconButtonView","View","initialize","this","model","attributes","placement","bind","render","$el","tooltip","new_elem","template","toJSON","get","replaceWith","setElement","events","click","event","_","isFunction","options","buffer","$","IconButtonCollection","Collection","IconButtonMenuView","tagName","self","collection","each","button","elt","attr","addClass","appendTo","make_popupmenu","create_icon_buttons_menu","config","global_config","buttons","map","button_config"],"mappings":"AAAAA,UAGG,WAKH,GAAIC,GAAaC,SAASC,MAAMC,QAC5BC,UACIC,MAAkB,GAClBC,WAAkB,GAClBC,SAAkB,KAClBC,aAAkB,KAClBC,gBAAkB,EAClBC,GAAkB,KAClBC,KAAkB,KAClBC,OAAkB,KAClBC,SAAkB,EAClBC,SAAkB,EAClBC,qBAOJC,EAAiBf,SAASgB,KAAKd,QAE/Be,WAAa,WAETC,KAAKC,MAAMC,WAAWN,gBAAmBO,UAAY,UACrDH,KAAKC,MAAMG,KAAM,SAAUJ,KAAKK,OAAQL,OAG5CK,OAAS,WAELL,KAAKM,IAAIC,QAAS,OAElB,IAAIC,GAAWR,KAAKS,SAAUT,KAAKC,MAAMS,SAKzC,OAHAF,GAASD,QAASP,KAAKC,MAAMU,IAAK,mBAClCX,KAAKM,IAAIM,YAAaJ,GACtBR,KAAKa,WAAYL,GACVR,MAGXc,QACIC,MAAU,SAGdA,MAAQ,SAAUC,GAEd,OAAIC,EAAEC,WAAYlB,KAAKC,MAAMU,IAAK,eAC9BX,KAAKC,MAAMU,IAAK,YAAcK,IACvB,IAOfP,SAAU,SAAUU,GAChB,GAAIC,GAAS,UAAYD,EAAQjC,MAAQ,sBAqCzC,OAnCIiC,GAAQ7B,iBACR8B,GAAU,gBAGdA,GAAU,IAAMD,EAAQhC,WAEnBgC,EAAQzB,UACT0B,GAAU,aAIdA,GAAU,IAEND,EAAQ5B,KACR6B,GAAU,QAAUD,EAAQ5B,GAAK,KAGrC6B,GAAU,UAAYD,EAAQ3B,KAAO,IAEjC2B,EAAQ1B,SACR2B,GAAU,YAAcD,EAAQ1B,OAAS,KAGxC0B,EAAQxB,UACTyB,GAAU,2BAKVA,EADCD,EAAQzB,QACA,MAAQ0B,EAAS,KAEjB,SAAWA,EAAS,KAI1BC,EAAGD,MAKdE,EAAuBxC,SAASyC,WAAWvC,QAC3CiB,MAAOpB,IAOP2C,EAAqB1C,SAASgB,KAAKd,QAEnCyC,QAAS,MAET1B,WAAY,WACRC,KAAKK,UAGTA,OAAQ,WAEJ,GAAIqB,GAAO1B,IAwBX,OAvBAA,MAAK2B,WAAWC,KAAK,SAASC,GAE1B,GAAIC,GAAMT,EAAE,QACPU,KAAK,OAAQ,sBACbA,KAAK,QAASF,EAAO3B,WAAWhB,OAChC8C,SAAS,2BACTA,SAASH,EAAO3B,WAAWf,YAC3B8C,SAASP,EAAKpB,KACdS,MAAMc,EAAO3B,WAAWd,SAGzByC,GAAO3B,WAAWN,gBAClBkC,EAAIvB,QAAQsB,EAAO3B,WAAWN,eAIlC,IAAIP,GAAewC,EAAOlB,IAAI,UAC1BtB,IACA6C,eAAeJ,EAAKzC,KAKrBW,OA4BX,QACInB,WAA0BA,EAC1BgB,eAA0BA,EAC1ByB,qBAA0BA,EAC1BE,mBAA0BA,EAC1BW,yBAvBuB,SAASC,EAAQC,GAGvCA,IAAeA,KAGpB,IAAIC,GAAU,GAAIhB,GACdL,EAAEsB,IAAIH,EAAQ,SAASI,GACnB,MAAO,IAAI3D,GAAWoC,EAAEjC,OAAOwD,EAAeH,MAKtD,OAAO,IAAIb,IAAqBG,WAAYW","file":"../../../scripts/mvc/ui/icon-button.js","sourcesContent":["define([\n    //jquery\n    //backbone\n], function(){\n//=============================================================================\n/**\n * backbone model for icon buttons\n */\nvar IconButton = Backbone.Model.extend({\n    defaults: {\n        title           : \"\",\n        icon_class      : \"\",\n        on_click        : null,\n        menu_options    : null,\n        is_menu_button  : true,\n        id              : null,\n        href            : null,\n        target          : null,\n        enabled         : true,\n        visible         : true,\n        tooltip_config  : {}\n    }\n});\n\n/**\n *  backbone view for icon buttons\n */\nvar IconButtonView = Backbone.View.extend({\n\n    initialize : function(){\n        // better rendering this way\n        this.model.attributes.tooltip_config = { placement : 'bottom' };\n        this.model.bind( 'change', this.render, this );\n    },\n\n    render : function( ){\n        // hide tooltip\n        this.$el.tooltip( 'hide' );\n\n        var new_elem = this.template( this.model.toJSON() );\n        // configure tooltip\n        new_elem.tooltip( this.model.get( 'tooltip_config' ));\n        this.$el.replaceWith( new_elem );\n        this.setElement( new_elem );\n        return this;\n    },\n\n    events : {\n        'click' : 'click'\n    },\n\n    click : function( event ){\n        // if on_click pass to that function\n        if( _.isFunction( this.model.get( 'on_click' ) ) ){\n            this.model.get( 'on_click' )( event );\n            return false;\n        }\n        // otherwise, bubble up ( to href or whatever )\n        return true;\n    },\n\n    // generate html element\n    template: function( options ){\n        var buffer = 'title=\"' + options.title + '\" class=\"icon-button';\n\n        if( options.is_menu_button ){\n            buffer += ' menu-button';\n        }\n\n        buffer += ' ' + options.icon_class;\n\n        if( !options.enabled ){\n            buffer += '_disabled';\n        }\n\n        // close class tag\n        buffer += '\"';\n\n        if( options.id ){\n            buffer += ' id=\"' + options.id + '\"';\n        }\n\n        buffer += ' href=\"' + options.href + '\"';\n        // add target for href\n        if( options.target ){\n            buffer += ' target=\"' + options.target + '\"';\n        }\n        // set visibility\n        if( !options.visible ){\n            buffer += ' style=\"display: none;\"';\n        }\n\n        // enabled/disabled\n        if ( options.enabled ){\n            buffer = '<a ' + buffer + '/>';\n        } else {\n            buffer = '<span ' + buffer + '/>';\n        }\n\n        // return element\n        return $( buffer );\n    }\n} );\n\n// define collection\nvar IconButtonCollection = Backbone.Collection.extend({\n    model: IconButton\n});\n\n/**\n * menu with multiple icon buttons\n * views are not needed nor used for individual buttons\n */\nvar IconButtonMenuView = Backbone.View.extend({\n\n    tagName: 'div',\n\n    initialize: function(){\n        this.render();\n    },\n\n    render: function(){\n        // initialize icon buttons\n        var self = this;\n        this.collection.each(function(button){\n            // create and add icon button to menu\n            var elt = $('<a/>')\n                .attr('href', 'javascript:void(0)')\n                .attr('title', button.attributes.title)\n                .addClass('icon-button menu-button')\n                .addClass(button.attributes.icon_class)\n                .appendTo(self.$el)\n                .click(button.attributes.on_click);\n\n            // configure tooltip\n            if (button.attributes.tooltip_config){\n                elt.tooltip(button.attributes.tooltip_config);\n            }\n\n            // add popup menu to icon\n            var menu_options = button.get('options');\n            if (menu_options){\n                make_popupmenu(elt, menu_options);\n            }\n        });\n\n        // return\n        return this;\n    }\n});\n\n/**\n * Returns an IconButtonMenuView for the provided configuration.\n * Configuration is a list of dictionaries where each dictionary\n * defines an icon button. Each dictionary must have the following\n * elements: icon_class, title, and on_click.\n */\nvar create_icon_buttons_menu = function(config, global_config)\n{\n    // initialize global configuration\n    if (!global_config) global_config = {};\n\n    // create and initialize menu\n    var buttons = new IconButtonCollection(\n        _.map(config, function(button_config){\n            return new IconButton(_.extend(button_config, global_config));\n        })\n    );\n\n    // return menu\n    return new IconButtonMenuView( {collection: buttons} );\n};\n\n\n//=============================================================================\n    return {\n        IconButton              : IconButton,\n        IconButtonView          : IconButtonView,\n        IconButtonCollection    : IconButtonCollection,\n        IconButtonMenuView      : IconButtonMenuView,\n        create_icon_buttons_menu: create_icon_buttons_menu\n    };\n})\n"]}