{"version":3,"sources":["mvc/ui/icon-button.js"],"names":["define","IconButton","Backbone","Model","extend","defaults","title","icon_class","on_click","menu_options","is_menu_button","id","href","target","enabled","IconButtonView","View","initialize","tooltip_config","placement","this","model","bind","render","tooltip","new_elem","template","toJSON","$el","replaceWith","events","click","event","get","isFunction","options","buffer","visible","$","IconButtonCollection","Collection","IconButtonMenuView","tagName","collection","each","button","elt","attr","addClass","attributes","appendTo","make_popupmenu","create_icon_buttons_menu","config","global_config","buttons","_","map","button_config"],"mappings":"aAAAA,UACI,WAOJ,IAAIC,EAAaC,SAASC,MAAMC,QAC5BC,UADAJ,MAAaC,GACbG,WAAU,GACNC,SADM,KAENC,aAFM,KAGNC,gBAHM,EAINC,GAAkB,KAClBC,KAAAA,KACAC,OANM,KAONC,SAPM,EAQNC,SARM,EASNC,qBASJC,EAAiBb,SAASc,KAAKZ,QAAnCa,WAAIF,WAEAE,KAAAA,MAAAA,WAAaC,gBAAUC,UAAA,UACnBC,KAAAC,MAAAC,KAAA,SAAAF,KAAAG,OAAAH,OAGHG,OANqC,WAQtCA,KAAAA,IAASC,QAAA,QAEL,IAAAC,EAASD,KAATE,SAAAN,KAAAC,MAAAM,UAKA,OAHAF,EAAIA,QAAAA,KAAWJ,MAAKK,IAAU,mBAC9BN,KAAAQ,IAAAC,YAAAJ,GACAA,KAAAA,WAASD,GACTJ,MAGHU,QAGGC,MAAU,SADLA,MApB6B,SAAAC,GAwBtCD,OAAAA,EAAAA,WAAQX,KAAUY,MAAOC,IAAA,eACrBb,KAAAC,MAAAY,IAAA,WAAAb,CAAAY,IACME,IASVR,SAAU,SAAUS,GADpB,IAAAC,EAAA,UAAAD,EAAA7B,MAAA,uBAuCI,OArCA6B,EAAIC,iBAGAA,GAAU,gBACbA,GAAA,IAAAD,EAAA5B,WAED6B,EAAAA,UAGIA,GAAU,aAIdA,GAAU,IAAVA,EAAAA,KAGIA,GAAU,QAAUD,EAAQxB,GAAK,KACpCyB,GAAA,UAAAD,EAAAvB,KAAA,IAEDwB,EAAAA,SACAA,GAAA,YAAAD,EAAAtB,OAAA,KAGCsB,EAAAE,UACDD,GAAA,2BAKAA,EACKD,EAAQrB,QADb,MAAAsB,EAAA,KAEIA,SAASA,EAAA,KAMNE,EAAGF,MAKdG,EAAuBrC,SAASsC,WAAWpC,QAD/CiB,MAAApB,IASIwC,EAAqBvC,SAASc,KAAKZ,QAAvCsC,QAAID,MAEAC,WAAAA,WAGItB,KAAKG,UACRA,OANyC,WAQ1CA,IAAAA,EAAQH,KA8BZ,OA7BQA,KAAAuB,WAAAC,KAAA,SAAAC,GAEA,IAAAC,EAAKH,EAAAA,QACDI,KAAA,OAAA,sBACAA,KAAID,QAAQD,EACPE,WAAazC,OAEb0C,SAAS,2BAKdA,SAAAH,EAAAI,WAAA1C,YACA2C,SAAIL,EAAOI,KACPH,MAAAA,EAAItB,WAAeyB,UAGvBJ,EAAAI,WAAA/B,gBACA4B,EAAIrC,QAAAA,EAAeoC,WAAW3B,gBAIjC,IApBDT,EAAAoC,EAAAZ,IAAA,WAiBQxB,GAKR0C,eAAAL,EAAArC,KAKRW,QAwBI,OACInB,WAA0BA,EAC1Bc,eAA0BA,EAC1BwB,qBAA0BA,EAC1BE,mBAA0BA,EAC1BW,yBAlBJ,SAAAC,EAAAC,GAEIA,IADJA,MAOA,IAAAC,EAAO,IAAId,EAbfe,EAAAC,IAAAJ,EAAA,SAAAK,GAQY,OAAO,IAAIzD,EAAWuD,EAAEpD,OAAOsD,EAAeJ,OAalDf,OAAAA,IAAAA,GAA0BA,WAAAA","file":"../../../scripts/mvc/ui/icon-button.js","sourcesContent":["define([\n    //jquery\n    //backbone\n], function(){\n//=============================================================================\n/**\n * backbone model for icon buttons\n */\nvar IconButton = Backbone.Model.extend({\n    defaults: {\n        title           : \"\",\n        icon_class      : \"\",\n        on_click        : null,\n        menu_options    : null,\n        is_menu_button  : true,\n        id              : null,\n        href            : null,\n        target          : null,\n        enabled         : true,\n        visible         : true,\n        tooltip_config  : {}\n    }\n});\n\n/**\n *  backbone view for icon buttons\n */\nvar IconButtonView = Backbone.View.extend({\n\n    initialize : function(){\n        // better rendering this way\n        this.model.attributes.tooltip_config = { placement : 'bottom' };\n        this.model.bind( 'change', this.render, this );\n    },\n\n    render : function( ){\n        // hide tooltip\n        this.$el.tooltip( 'hide' );\n\n        var new_elem = this.template( this.model.toJSON() );\n        // configure tooltip\n        new_elem.tooltip( this.model.get( 'tooltip_config' ));\n        this.$el.replaceWith( new_elem );\n        this.setElement( new_elem );\n        return this;\n    },\n\n    events : {\n        'click' : 'click'\n    },\n\n    click : function( event ){\n        // if on_click pass to that function\n        if( _.isFunction( this.model.get( 'on_click' ) ) ){\n            this.model.get( 'on_click' )( event );\n            return false;\n        }\n        // otherwise, bubble up ( to href or whatever )\n        return true;\n    },\n\n    // generate html element\n    template: function( options ){\n        var buffer = 'title=\"' + options.title + '\" class=\"icon-button';\n\n        if( options.is_menu_button ){\n            buffer += ' menu-button';\n        }\n\n        buffer += ' ' + options.icon_class;\n\n        if( !options.enabled ){\n            buffer += '_disabled';\n        }\n\n        // close class tag\n        buffer += '\"';\n\n        if( options.id ){\n            buffer += ' id=\"' + options.id + '\"';\n        }\n\n        buffer += ' href=\"' + options.href + '\"';\n        // add target for href\n        if( options.target ){\n            buffer += ' target=\"' + options.target + '\"';\n        }\n        // set visibility\n        if( !options.visible ){\n            buffer += ' style=\"display: none;\"';\n        }\n\n        // enabled/disabled\n        if ( options.enabled ){\n            buffer = '<a ' + buffer + '/>';\n        } else {\n            buffer = '<span ' + buffer + '/>';\n        }\n\n        // return element\n        return $( buffer );\n    }\n} );\n\n// define collection\nvar IconButtonCollection = Backbone.Collection.extend({\n    model: IconButton\n});\n\n/**\n * menu with multiple icon buttons\n * views are not needed nor used for individual buttons\n */\nvar IconButtonMenuView = Backbone.View.extend({\n\n    tagName: 'div',\n\n    initialize: function(){\n        this.render();\n    },\n\n    render: function(){\n        // initialize icon buttons\n        var self = this;\n        this.collection.each(function(button){\n            // create and add icon button to menu\n            var elt = $('<a/>')\n                .attr('href', 'javascript:void(0)')\n                .attr('title', button.attributes.title)\n                .addClass('icon-button menu-button')\n                .addClass(button.attributes.icon_class)\n                .appendTo(self.$el)\n                .click(button.attributes.on_click);\n\n            // configure tooltip\n            if (button.attributes.tooltip_config){\n                elt.tooltip(button.attributes.tooltip_config);\n            }\n\n            // add popup menu to icon\n            var menu_options = button.get('options');\n            if (menu_options){\n                make_popupmenu(elt, menu_options);\n            }\n        });\n\n        // return\n        return this;\n    }\n});\n\n/**\n * Returns an IconButtonMenuView for the provided configuration.\n * Configuration is a list of dictionaries where each dictionary\n * defines an icon button. Each dictionary must have the following\n * elements: icon_class, title, and on_click.\n */\nvar create_icon_buttons_menu = function(config, global_config)\n{\n    // initialize global configuration\n    if (!global_config) global_config = {};\n\n    // create and initialize menu\n    var buttons = new IconButtonCollection(\n        _.map(config, function(button_config){\n            return new IconButton(_.extend(button_config, global_config));\n        })\n    );\n\n    // return menu\n    return new IconButtonMenuView( {collection: buttons} );\n};\n\n\n//=============================================================================\n    return {\n        IconButton              : IconButton,\n        IconButtonView          : IconButtonView,\n        IconButtonCollection    : IconButtonCollection,\n        IconButtonMenuView      : IconButtonMenuView,\n        create_icon_buttons_menu: create_icon_buttons_menu\n    };\n})\n"]}