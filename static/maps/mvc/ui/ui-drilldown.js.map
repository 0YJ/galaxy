{"version":3,"sources":["mvc/ui/ui-drilldown.js"],"names":["View","_uiOptions2","default","BaseIcons","extend","initialize","options","type","display","multiple","prototype","call","this","_setValue","new_value","undefined","header_index","self","$","isArray","v","_","each","list","element","_setState","values","header_id","$subgroup","is_expanded","show","$button","removeClass","addClass","hide","data","on","header","i","level","$el","find","length","slice","$group","has_options","_utils2","uid","iterate","new_header","name","value","push","append","label","$tmpl","model","get","_template","attr","id"],"mappings":"8NAGIA,EAAOC,EAAAC,QAAQC,UAAUC,QACzBC,WAAY,SAASC,GACjBA,EAAQC,KAAOD,EAAQE,SAAW,WAClCF,EAAQG,SAA2B,YAAhBH,EAAQC,KAC3BN,EAAAC,QAAQC,UAAUO,UAAUL,WAAWM,KAAKC,KAAMN,IAItDO,UAAW,SAASC,GAEhB,GADAb,EAAAC,QAAQC,UAAUO,UAAUG,UAAUF,KAAKC,KAAME,QAE/BC,IAAdD,GACc,OAAdA,GACAF,KAAKI,aAhBjB,CAGIhB,IAAOiB,EAAAL,KACPP,EAAYa,EAAAC,QAAAL,GAAAA,GAAkBA,GAC1BR,EAAAA,KAAAA,EAAeA,SAAAA,GACfA,IAAQG,EAAAA,EAAWH,aAAAc,GACnBC,EAAAC,KAAAC,EAAA,SAAAC,GAJ4BP,EAAAQ,UAAAD,GAAA,SAgBxBC,UAAA,SAAIC,EAAWP,GACfE,IAAAA,EAAAT,KAAOc,EAAP,WAAeC,GACXC,EAAIL,KAAAA,EAAAA,aAAYP,GAChBK,EAAAA,KAAAA,cAAaQ,GACTZ,GACHW,EAFDE,OAGHC,EALDC,YAAA,kBAAAC,SAAA,qBAjBwBL,EAAAM,OAoCxBH,EAAQC,YAAY,mBAAmBC,SAAS,oBANpDF,iBAAQI,WAKJP,SAAAA,EAAAA,EAAUM,GACVH,IAAAA,EAAQC,EAAAA,KAAAA,WAAYL,GACvBI,EAAAK,GAAA,QAAA,WArC2BnB,EAAAQ,UAAAE,GAAAI,EAAAI,KAAA,kBA2C5B,SAAKnB,EAAAA,EAAeV,EAApB+B,GAYIA,EAASA,MAVb,IAAA,IAAAC,KAAAhC,EAAA,CACA,IAAAiC,EAAgBC,EAAKb,GACbI,EAAcU,EAAJnC,SAAAiC,EAAoBZ,QAAlCe,OAAA,EACAX,EAAWM,EAASM,MAAA,GAChB1B,EAAAA,aAAAsB,EAAeZ,OAAYI,EAAaY,MAAA,GAC3C,IAFDC,EAAA1B,EAAA,UAGH,GAAA2B,EAAA,CAYW,IAAIlB,EAAYmB,EAAA5C,QAAM6C,MAVlChB,EAAAb,EAAA,WACS8B,SADT,UACArB,GACaU,SAAAA,yCACJT,EAAStB,EAAd,UACQiC,SADMjC,YACVqB,GACIkB,SAAAA,yBACJD,EAAIK,OACJhC,EAAKD,UACD4B,OAAWb,GACXc,OACIlB,EAAAA,iBACAI,MAAYQ,EAAFW,KAGVtB,MAAcW,EAAAY,UAOeF,EAJjCG,KAAAzB,GAUAsB,EAAAA,EAAAV,EAAgBZ,QAAhBsB,GACAD,EAAAA,OAAQpB,GACRgB,EAAAA,EAAOS,QAEVT,EAAMS,OACHT,EAAAA,iBAEQU,MAAOf,EAAMW,KACbC,MAAOZ,EAAMY,SAK5BI,EAAAF,OAAAT,IA9DL,IAAA3B,EAAIY,KACAD,KAAAA,gBAkEJoB,IAAAA,EAAQO,EAAAA,UAEX,OADGP,EAAAO,EAAOA,KAAPC,MAAAC,IAAA,SAnG4BF,GAwG5BG,UAAA,WAGH,OAAAxC,EAAA,UA3GLe,SAAA,uCA0Ga0B,KAAK,KAAM/C,KAAK4C,MAAMI,kBAK/B5D,KAAMA","file":"../../../scripts/mvc/ui/ui-drilldown.js","sourcesContent":["/** This class creates/wraps a drill down element. */\nimport Utils from \"utils/utils\";\nimport Options from \"mvc/ui/ui-options\";\nvar View = Options.BaseIcons.extend({\n    initialize: function(options) {\n        options.type = options.display || \"checkbox\";\n        options.multiple = options.type == \"checkbox\";\n        Options.BaseIcons.prototype.initialize.call(this, options);\n    },\n\n    /** Set states for selected values */\n    _setValue: function(new_value) {\n        Options.BaseIcons.prototype._setValue.call(this, new_value);\n        if (\n            new_value !== undefined &&\n            new_value !== null &&\n            this.header_index\n        ) {\n            var self = this;\n            var values = $.isArray(new_value) ? new_value : [new_value];\n            _.each(values, v => {\n                var list = self.header_index[v];\n                _.each(list, element => {\n                    self._setState(element, true);\n                });\n            });\n        }\n    },\n\n    /** Expand/collapse a sub group */\n    _setState: function(header_id, is_expanded) {\n        var $button = this.$(`.button-${header_id}`);\n        var $subgroup = this.$(`.subgroup-${header_id}`);\n        $button.data(\"is_expanded\", is_expanded);\n        if (is_expanded) {\n            $subgroup.show();\n            $button.removeClass(\"fa-plus-square\").addClass(\"fa-minus-square\");\n        } else {\n            $subgroup.hide();\n            $button.removeClass(\"fa-minus-square\").addClass(\"fa-plus-square\");\n        }\n    },\n\n    /** Template to create options tree */\n    _templateOptions: function() {\n        var self = this;\n        this.header_index = {};\n\n        // attach event handler\n        function attach($el, header_id) {\n            var $button = $el.find(`.button-${header_id}`);\n            $button.on(\"click\", () => {\n                self._setState(header_id, !$button.data(\"is_expanded\"));\n            });\n        }\n\n        // recursive function which iterates through options\n        function iterate($tmpl, options, header) {\n            header = header || [];\n            for (var i in options) {\n                var level = options[i];\n                var has_options = level.options && level.options.length > 0;\n                var new_header = header.slice(0);\n                self.header_index[level.value] = new_header.slice(0);\n                var $group = $(\"<div/>\");\n                if (has_options) {\n                    var header_id = Utils.uid();\n                    var $button = $(\"<span/>\")\n                        .addClass(`button-${header_id}`)\n                        .addClass(\"ui-drilldown-button fa fa-plus-square\");\n                    var $subgroup = $(\"<div/>\")\n                        .addClass(`subgroup-${header_id}`)\n                        .addClass(\"ui-drilldown-subgroup\");\n                    $group.append(\n                        $(\"<div/>\")\n                            .append($button)\n                            .append(\n                                self._templateOption({\n                                    label: level.name,\n                                    value: level.value\n                                })\n                            )\n                    );\n                    new_header.push(header_id);\n                    iterate($subgroup, level.options, new_header);\n                    $group.append($subgroup);\n                    attach($group, header_id);\n                } else {\n                    $group.append(\n                        self._templateOption({\n                            label: level.name,\n                            value: level.value\n                        })\n                    );\n                }\n                $tmpl.append($group);\n            }\n        }\n\n        // iterate through options and create dom\n        var $tmpl = $(\"<div/>\");\n        iterate($tmpl, this.model.get(\"data\"));\n        return $tmpl;\n    },\n\n    /** Template for drill down view */\n    _template: function() {\n        return $(\"<div/>\")\n            .addClass(\"ui-options-list drilldown-container\")\n            .attr(\"id\", this.model.id);\n    }\n});\n\nexport default {\n    View: View\n};\n"]}