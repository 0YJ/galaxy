{"version":3,"sources":["mvc/toolshed/util.js"],"names":["define","searchShed","request","response","that","this","shed_url","Galaxy","root","$","get","term","tool_shed_url","data","base_url","shedParser","jsondata","results","hits","each","hit","record","name","repository","repo_owner_username","description","label","id","result","addToQueue","metadata","substr","length","key","repository_id","changeset_revision","queued_repos","localStorage","repositories","JSON","stringify","queueLength","hasOwnProperty","parse"],"mappings":"aAAAA,UAAW,WAgDP,OAAOC,WA/CU,SAASC,EAASC,GADhC,IAAIC,EAAAC,KACHJ,EAAaI,KAAAC,SACTF,EAAJG,OAAAC,KAAA,uBACAC,EAAAC,IAAIJ,GAAWK,KAAKL,EAApBK,KAAAC,cAAAN,GAAA,SAAAO,GACIC,IAAAA,EAAkBN,EAAPO,WAAcF,GAC3BH,EAAII,MA2CHC,WApCU,SAASC,GAAtBD,IAAAA,KACIE,EAAAA,EAAJC,KAOC,OANDT,EAAAU,KAAID,EAAOF,SAASE,GAClBC,IAAKD,EAAMA,EAAAE,GACLC,EAAAA,EAAcD,WAAlBE,KAAA,OAAAD,EAAAE,WAAAC,oBAAA,KAAAH,EAAAE,WAAAE,YACIC,GAAQL,MAAOE,EAAAA,WAAkBI,GAAzBD,MAAkCL,GAC9CJ,EAAIW,KAASA,KAHjBX,GAiCGY,WAxBU,SAASC,GAAT,KAAbD,EAAajB,cAAbiB,QAAsBC,KAClBA,EAASlB,cAAcmB,EAAvBnB,cAA0CmB,OAAA,EAAAD,EAAAlB,cAAAoB,OAAA,IAE7C,IAAAC,EAAAH,EAAAlB,cAAA,IAAAkB,EAAAI,cAAA,IAAAJ,EAAAK,mBACGF,EAAerB,IAAAA,OACfwB,aAAAA,eACAC,EAAaC,KAAAA,MAAjBD,aAA+BC,eAE9BF,EAAAH,GAAAH,EACDM,aAAaH,aAAbM,KAAAC,UAAAJ,IAeGK,YAXW,WAAdA,GAAAA,aAAcC,eAAdD,gBAAyB,CACrBJ,IAAAA,EAAaK,KAAAA,MAAeL,aAAAC,cAE5B,OADiBC,OAAKI,KAAMN,GAAaC,OAKzC,OAAO","file":"../../../scripts/mvc/toolshed/util.js","sourcesContent":["define([], function() {\n    var searchShed = function(request, response) {\n        var that = this;\n        var shed_url = this.shed_url;\n        var base_url = Galaxy.root + 'api/tool_shed/search';\n        $.get(base_url, {term: request.term, tool_shed_url: shed_url}, function(data) {\n            var result_list = that.shedParser(data);\n            response(result_list);\n        });\n\n    };\n\n    var shedParser = function(jsondata) {\n        var results = [];\n        var hits = jsondata.hits;\n        $.each(hits, function(hit) {\n            var record = hits[hit];\n            var label = record.repository.name + ' by ' + record.repository.repo_owner_username + ': ' + record.repository.description;\n            var result = {value: record.repository.id, label: label};\n            results.push(result);\n        });\n        return results;\n    };\n\n    var addToQueue = function(metadata) {\n        if (metadata.tool_shed_url.substr(-1) == '/') {\n            metadata.tool_shed_url = metadata.tool_shed_url.substr(0, metadata.tool_shed_url.length - 1);\n        }\n        var key = metadata.tool_shed_url + '|' + metadata.repository_id + '|' + metadata.changeset_revision;\n        var queued_repos = new Object();\n        if (localStorage.repositories) {\n            queued_repos = JSON.parse(localStorage.repositories);\n        }\n        queued_repos[key] = metadata;\n        localStorage.repositories = JSON.stringify(queued_repos);\n    }\n\n    var queueLength = function() {\n        if (localStorage.hasOwnProperty('repositories')) {\n            var repo_queue = JSON.parse(localStorage.repositories);\n            var queue_length = Object.keys(repo_queue).length;\n            return queue_length;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    return {searchShed: searchShed, shedParser: shedParser, addToQueue: addToQueue, queueLength: queueLength};\n});\n"]}