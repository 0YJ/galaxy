{"version":3,"sources":["mvc/toolshed/util.js"],"names":["define","searchShed","request","response","that","this","shed_url","root","$","get","base_url","term","Galaxy","result_list","shedParser","data","results","jsondata","hits","each","record","label","result","repo_owner_username","repository","description","addToQueue","value","metadata","tool_shed_url","localStorage","repositories","queued_repos","JSON","substr","length","stringify","queueLength","queue_length","changeset_revision","Object","parse","key","hasOwnProperty","repo_queue","keys"],"mappings":"sDAAAA,UAAW,WA+DP,OACIC,WA/Da,SAASC,EAASC,GAC/B,IAAIC,EAAOC,KAFZC,EAAID,KAAWC,SACdL,EAAAA,OAAaM,KAAbN,uBACAO,EAAAC,IACAC,GACAC,KAAID,EAAWE,KAAOL,cAAOD,GAC7BE,SACIE,GAGI,IAAIG,EAAcT,EAAKU,WAAWC,GAClCZ,EAASU,MAuDjBC,WAjDIE,SAAJC,GACA,IAAAD,KACAR,EAAOU,EAAMA,KAoBZ,OAnBGV,EAAAW,KAAAD,EAAIE,SAASF,GACb,IAAAE,EAAIC,EACAD,GAKJC,EACAL,EAAAA,WAAaM,KATjB,OAWAF,EAAOJ,WAAPO,oBAdJ,KAUYH,EAAOI,WAAWC,YAO1BC,GAAaC,MAAbD,EAAAA,WAAsBE,GAAUP,MAAAA,GAChCL,EAAIY,KAASC,KAKZb,GA4BDU,WApBII,SAAaC,GACaD,KAA1BE,EAAAA,cAAeC,QAAWH,KAC7BF,EAAAC,cAAAD,EAAAC,cAAAK,OACDF,EACAF,EAAaC,cAAbI,OAAiCC,IAGrC,IAAIC,EACAT,EAAIE,cACA,IACAF,EAAIU,cACJ,IACHV,EAAMW,mBACHP,EAAA,IAAAQ,OACHV,aAAAC,eAPLC,EAAAC,KAAAQ,MAAAX,aAAAC,eAUAC,EAAOU,GAAAd,EACH3B,aAAAA,aADGgC,KAAAG,UAAAJ,IAIHK,YAAAA,WAJG,GAAPP,aAAAa,eAAA,gBAAA,CA/DJ,IAAAC,EAAAX,KAAAQ,MAAAX,aAAAC,cAyDY,OADmBS,OAAOK,KAAKD,GAAYT,OAG3C,OAAO","file":"../../../scripts/mvc/toolshed/util.js","sourcesContent":["define([], function() {\n    var searchShed = function(request, response) {\n        var that = this;\n        var shed_url = this.shed_url;\n        var base_url = Galaxy.root + \"api/tool_shed/search\";\n        $.get(\n            base_url,\n            { term: request.term, tool_shed_url: shed_url },\n            function(data) {\n                var result_list = that.shedParser(data);\n                response(result_list);\n            }\n        );\n    };\n\n    var shedParser = function(jsondata) {\n        var results = [];\n        var hits = jsondata.hits;\n        $.each(hits, function(hit) {\n            var record = hits[hit];\n            var label =\n                record.repository.name +\n                \" by \" +\n                record.repository.repo_owner_username +\n                \": \" +\n                record.repository.description;\n            var result = { value: record.repository.id, label: label };\n            results.push(result);\n        });\n        return results;\n    };\n\n    var addToQueue = function(metadata) {\n        if (metadata.tool_shed_url.substr(-1) == \"/\") {\n            metadata.tool_shed_url = metadata.tool_shed_url.substr(\n                0,\n                metadata.tool_shed_url.length - 1\n            );\n        }\n        var key =\n            metadata.tool_shed_url +\n            \"|\" +\n            metadata.repository_id +\n            \"|\" +\n            metadata.changeset_revision;\n        var queued_repos = new Object();\n        if (localStorage.repositories) {\n            queued_repos = JSON.parse(localStorage.repositories);\n        }\n        queued_repos[key] = metadata;\n        localStorage.repositories = JSON.stringify(queued_repos);\n    };\n\n    var queueLength = function() {\n        if (localStorage.hasOwnProperty(\"repositories\")) {\n            var repo_queue = JSON.parse(localStorage.repositories);\n            var queue_length = Object.keys(repo_queue).length;\n            return queue_length;\n        } else {\n            return 0;\n        }\n    };\n\n    return {\n        searchShed: searchShed,\n        shedParser: shedParser,\n        addToQueue: addToQueue,\n        queueLength: queueLength\n    };\n});\n"]}