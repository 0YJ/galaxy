{"version":3,"sources":["mvc/toolshed/util.js"],"names":["searchShed","request","response","that","this","shed_url","base_url","Galaxy","root","$","get","term","tool_shed_url","data","result_list","shedParser","results","each","hits","hit","record","label","repository","name","description","value","id","jsondata","metadata","substr","length","queued_repos","Object","localStorage","parse","repositories","JSON","stringify","hasOwnProperty","queueLength","repo_queue"],"mappings":"4HAkDIA,WAlDa,SAASC,EAASC,GAC/B,IAAIC,EAAOC,KACPC,EAAWD,KAAKC,SAChBC,EAAcC,OAAOC,KAArB,uBACJC,EAAEC,IAAIJ,GAAYK,KAAMV,EAAQU,KAAMC,cAAeP,GAAY,SAAAQ,GAC7D,IAAIC,EAAcX,EAAKY,WAAWF,GALtCb,EAAAA,MAmDAe,WA/CMT,SAAAA,GACF,IAAAU,KACAd,EAAAA,EAASY,KAQT,OAPHL,EAAAQ,KAHDC,EAAA,SAAAC,GAJJ,IAAAC,EAAAF,EAAAC,GAeYE,EAAWD,EAAOE,WAAWC,KAA7B,OAAwCH,EAAOE,WALvDP,oBAKQ,KALRA,EAAaO,WAAYE,YACrBR,GAAUS,MAAdL,EAAAE,WAAAI,GAAAL,MAAAA,GACAL,EAAIE,KAAOS,KAEPX,GAoCJhB,WAhCIgB,SAAAA,GALJ,KAMCY,EANDhB,cAAAiB,QAAA,KAOAD,EAAOZ,cAAPY,EAAAhB,cAAAiB,OAVJ,EAiBYD,EAAShB,cAAckB,OAAS,IAFpCF,IAAAA,EAAAA,EAAShB,cAATgB,IAAyBA,EAAShB,cAAlCgB,IAAyBA,EAErBA,mBAEPG,EAAA,IAAAC,OACDC,aAAaL,eACbG,EAAIA,KAAeG,MAAIF,aAAvBG,eAEIJ,EAAAA,GAAAA,EACHE,aAAAE,aAAAC,KAAAC,UAAAN,IAiBDhB,YA5BJ,WAiBI,GAAIkB,aAAaK,eAAe,gBAAiB,CADjDC,IAAAA,EAAcH,KAAAF,MAAdK,aAAoBJ,cAEhB,OADaG,OAAAA,KAAbE,GAA4BV,OAG5B,OAAA","file":"../../../scripts/mvc/toolshed/util.js","sourcesContent":["var searchShed = function(request, response) {\n    var that = this;\n    var shed_url = this.shed_url;\n    var base_url = `${Galaxy.root}api/tool_shed/search`;\n    $.get(base_url, { term: request.term, tool_shed_url: shed_url }, data => {\n        var result_list = that.shedParser(data);\n        response(result_list);\n    });\n};\n\nvar shedParser = jsondata => {\n    var results = [];\n    var hits = jsondata.hits;\n    $.each(hits, hit => {\n        var record = hits[hit];\n        var label = `${record.repository.name} by ${record.repository\n            .repo_owner_username}: ${record.repository.description}`;\n        var result = { value: record.repository.id, label: label };\n        results.push(result);\n    });\n    return results;\n};\n\nvar addToQueue = metadata => {\n    if (metadata.tool_shed_url.substr(-1) == \"/\") {\n        metadata.tool_shed_url = metadata.tool_shed_url.substr(\n            0,\n            metadata.tool_shed_url.length - 1\n        );\n    }\n    var key = `${metadata.tool_shed_url}|${metadata.repository_id}|${metadata.changeset_revision}`;\n    var queued_repos = new Object();\n    if (localStorage.repositories) {\n        queued_repos = JSON.parse(localStorage.repositories);\n    }\n    queued_repos[key] = metadata;\n    localStorage.repositories = JSON.stringify(queued_repos);\n};\n\nvar queueLength = () => {\n    if (localStorage.hasOwnProperty(\"repositories\")) {\n        var repo_queue = JSON.parse(localStorage.repositories);\n        var queue_length = Object.keys(repo_queue).length;\n        return queue_length;\n    } else {\n        return 0;\n    }\n};\n\nexport default {\n    searchShed: searchShed,\n    shedParser: shedParser,\n    addToQueue: addToQueue,\n    queueLength: queueLength\n};\n"]}