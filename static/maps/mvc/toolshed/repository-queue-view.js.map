{"version":3,"sources":["mvc/toolshed/repository-queue-view.js"],"names":["define","toolshed_model","toolshed_util","RepoQueueView","View","Backbone","el","defaults","initialize","options","that","this","model","listenTo","render","repo_queue_template","repositories","$el","title","queue","queueLength","$","css","bindEvents","installFromQueue","repository_metadata","loadFromQueue","attr","on","repository_id","localStorage","repo_queue","JSON","parse","hasOwnProperty","queue_key","repository","id","remove","trigger","stringify","navigate","params","Object","shed_tool_conf","tool_shed_repository_ids","install_repository_dependencies","install_resolver_dependencies","repository_queue","data","tool_shed_url","iri_params","changeset","new_route","console","replace","undefined","queueKey","reDraw","join","post","Galaxy","root","templateRepoQueue","log","history","empty","fetch","_","template"],"mappings":"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","file":"../../../scripts/mvc/toolshed/repository-queue-view.js","sourcesContent":["define([\"mvc/toolshed/toolshed-model\", \"mvc/toolshed/util\"], function(\n    toolshed_model,\n    toolshed_util\n) {\n    var View = Backbone.View.extend({\n        el: \"#center\",\n\n        defaults: [{}],\n\n        initialize: function(options) {\n            var that = this;\n            this.model = new toolshed_model.RepoQueue();\n            this.listenTo(this.model, \"sync\", this.render);\n            this.model.fetch();\n            that.render();\n        },\n\n        render: function(options) {\n            var that = this;\n            var repo_queue_template = that.templateRepoQueue;\n            var repositories = that.model.models;\n            that.$el.html(\n                repo_queue_template({\n                    title: \"Repository Installation Queue\",\n                    repositories: repositories,\n                    queue: toolshed_util.queueLength()\n                })\n            );\n            $(\"#center\").css(\"overflow\", \"auto\");\n            that.bindEvents();\n        },\n\n        bindEvents: function() {\n            var that = this;\n            $(\".install_one\").on(\"click\", function() {\n                var repository_metadata = that.loadFromQueue(\n                    $(this).attr(\"data-repokey\")\n                );\n                that.installFromQueue(\n                    repository_metadata,\n                    $(this).attr(\"data-repokey\")\n                );\n            });\n            $(\".remove_one\").on(\"click\", function() {\n                var queue_key = $(this).attr(\"data-repokey\");\n                var repo_queue = JSON.parse(localStorage.repositories);\n                if (repo_queue.hasOwnProperty(queue_key)) {\n                    var repository_id = repo_queue[queue_key].repository.id;\n                    delete repo_queue[queue_key];\n                    $(\"#queued_repository_\" + repository_id).remove();\n                }\n                localStorage.repositories = JSON.stringify(repo_queue);\n            });\n            $(\"#clear_queue\").on(\"click\", function() {\n                localStorage.repositories = \"{}\";\n            });\n            $(\"#from_workflow\").on(\"click\", function() {\n                Backbone.history.navigate(\"workflows\", {\n                    trigger: true,\n                    replace: true\n                });\n            });\n        },\n\n        installFromQueue: function(repository_metadata, queue_key) {\n            var that = this;\n            var params = Object();\n            params.install_tool_dependencies =\n                repository_metadata.install_tool_dependencies;\n            params.install_repository_dependencies =\n                repository_metadata.install_repository_dependencies;\n            params.install_resolver_dependencies =\n                repository_metadata.install_resolver_dependencies;\n            params.tool_panel_section = repository_metadata.tool_panel_section;\n            params.shed_tool_conf = repository_metadata.shed_tool_conf;\n            params.repositories = JSON.stringify([\n                [\n                    repository_metadata.repository.id,\n                    repository_metadata.changeset_revision\n                ]\n            ]);\n            params.tool_shed_repository_ids = JSON.stringify([\n                repository_metadata.repository.id\n            ]);\n            params.tool_shed_url = queue_key.split(\"|\")[0];\n            params.changeset = repository_metadata.changeset_revision;\n            var url =\n                Galaxy.root + \"api/tool_shed_repositories/install?async=True\";\n            $(\n                \"#queued_repository_\" + repository_metadata.repository.id\n            ).remove();\n            if (localStorage.repositories) {\n                if (queue_key === undefined) {\n                    queue_key = toolshed_util.queueKey(repository_metadata);\n                }\n                var repository_queue = JSON.parse(localStorage.repositories);\n                if (repository_queue.hasOwnProperty(queue_key)) {\n                    delete repository_queue[queue_key];\n                    localStorage.repositories = JSON.stringify(\n                        repository_queue\n                    );\n                }\n            }\n\n            $.post(url, params, function(data) {\n                var iri_params = JSON.parse(data);\n                var repositories = iri_params.repositories;\n                var new_route = \"status/r/\" + repositories.join(\"|\");\n                $.post(\n                    Galaxy.root + \"admin_toolshed/manage_repositories\",\n                    iri_params,\n                    function(data) {\n                        console.log(\n                            \"Initializing repository installation succeeded\"\n                        );\n                    }\n                );\n                Backbone.history.navigate(new_route, {\n                    trigger: true,\n                    replace: true\n                });\n            });\n        },\n\n        loadFromQueue: function(queue_key) {\n            var repository_queue = JSON.parse(localStorage.repositories);\n            if (repository_queue.hasOwnProperty(queue_key)) {\n                return repository_queue[queue_key];\n            }\n            return undefined;\n        },\n\n        reDraw: function(options) {\n            this.$el.empty();\n            this.initialize(options);\n            this.model.fetch();\n            this.render(options);\n        },\n\n        templateRepoQueue: _.template(\n            [\n                '<div class=\"unified-panel-header\" id=\"panel_header\" unselectable=\"on\">',\n                '<div class=\"unified-panel-header-inner\"><%= title %></div>',\n                '<div class=\"unified-panel-header-inner\" style=\"position: absolute; right: 5px; top: 0px;\"><a href=\"#/queue\">Repository Queue (<%= queue %>)</a></div>',\n                \"</div>\",\n                '<div class=\"tab-pane\" id=\"panel_header\" id=\"repository_queue\">',\n                '<table id=\"queued_repositories\" class=\"grid\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\" width=\"100%\">',\n                '<thead id=\"grid-table-header\">',\n                \"<tr>\",\n                '<th class=\"datasetRow\">Name</th>',\n                '<th class=\"datasetRow\">Owner</th>',\n                '<th class=\"datasetRow\">Revision</th>',\n                '<th class=\"datasetRow\">ToolShed</th>',\n                '<th class=\"datasetRow\">Install</th>',\n                '<th class=\"datasetRow\"><input class=\"btn btn-primary\" type=\"submit\" id=\"clear_queue\" name=\"clear_queue\" value=\"Clear queue\" /></th>',\n                \"</tr>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<% _.each(repositories, function(repository) { %>\",\n                '<tr id=\"queued_repository_<%= repository.get(\"id\") %>\">',\n                '<td class=\"datasetRow\"><%= repository.get(\"repository\").name %></td>',\n                '<td class=\"datasetRow\"><%= repository.get(\"repository\").owner %></td>',\n                '<td class=\"datasetRow\"><%= repository.get(\"changeset_revision\") %></td>',\n                '<td class=\"datasetRow\"><%= repository.get(\"tool_shed_url\") %></td>',\n                '<td class=\"datasetRow\">',\n                '<input class=\"btn btn-primary install_one\" data-repokey=\"<%= repository.get(\"queue_key\") %>\" type=\"submit\" id=\"install_repository_<%= repository.get(\"id\") %>\" name=\"install_repository\" value=\"Install now\" />',\n                \"</td>\",\n                '<td class=\"datasetRow\">',\n                '<input class=\"btn btn-primary remove_one\" data-repokey=\"<%= repository.get(\"queue_key\") %>\" type=\"submit\" id=\"unqueue_repository_<%= repository.get(\"id\") %>\" name=\"unqueue_repository\" value=\"Remove from queue\" />',\n                \"</td>\",\n                \"</tr>\",\n                \"<% }); %>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<input type=\"button\" class=\"btn btn-primary\" id=\"from_workflow\" value=\"Add from workflow\" />',\n                \"</div>\"\n            ].join(\"\")\n        )\n    });\n\n    return {\n        RepoQueueView: View\n    };\n});\n"]}