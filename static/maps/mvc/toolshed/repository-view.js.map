{"version":3,"sources":["mvc/toolshed/repository-view.js"],"names":["ToolShedRepositoryView","Backbone","View","extend","el","initialize","params","this","options","_","defaults","model","_toolshedModel2","default","RepositoryCollection","listenTo","render","shed","tool_shed","replace","url","repository_id","tool_shed_url","category","fetch","repo_details_template","templateRepoDetails","models","repository","get","queueLength","changesets","Object","metadata","current_changeset","length","tools","templateRepoDependencies","repository_dependency_template","templateRepoDependency","tps_template_global_select","templateGlobalSectionSelect","tps_template_tool_select","templateToolSectionSelect","templateShedToolConf","queue","api_url","Galaxy","root","keys","$el","checkInstalled","current_metadata","bindEvents","$","that","on","tps_select_options","tool_dependencies","stc_html","panel_section_dict","tpsSelection","ev","preventDefault","reDraw","attr","find","tool_shed_repository_ids","JSON","stringify","install_repository_dependencies","val","panelSelect","changeset","repository_metadata","prepareInstall","install_tool_dependencies","key","new_value","install_resolver_dependencies","tool_panel_section","clean","shed_tool_conf","guid","substr","tsr_id","data","cls","toolform","input","modal_title","closing_events","buttons","Close","jstree","name","desc","already_installed","queued","index","installed","_formView2","_utils2","deepeach","type","indexOf","info","textify","repoQueued","_uiModal2","modal","show","title","tool_panel_section_id","action","owner","deleted","uninstalled","changeset_match","changeset_revision","installed_changeset_revision","prop","repository_queue","queued_repos","localStorage","repositories","hide","shed_url","new_tps","new_tool_panel_section","each","post","tool_guid","iri_parameters","controller_url","console","empty","templateGlobalSectionCreate","template","templateToolSectionCreate","RepoDetails","parse","doInstall","new_route","join","log","history","navigate","trigger","templateToolDependency","templatePanelSelectOptions"],"mappings":"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FACA,YACA,YACA,wMACA,6IACA,kIACA,SACA,SACA,wBACA,4DACA,gIACA,6BACA,oDACA,yEACA,uFACA,OACA,0FACA,oEACA,2BACA,wEACA,qGACA,OACA,SACA,4DACA,SACA,SACA,UACA,2DACA,qDACA,6BACA,kDACA,uEACA,mFACA,OACA,8CACA,mEACA,2EACA,OACA,8DACA,2BACA,kEACA,6FACA,OACA,SACA,8HACA,UACA,sGACA,4CACA,mBACA,gBACA,QACA,WACA,yBACA,4EACA,0EACA,mCACA,8BACA,qCACA,kCACA,QACA,YACA,WACA,WACA,SACA,SACA,UACA,yEACA,6IACA,6BACA,yDACA,kHACA,UACA,sGACA,4CACA,uBACA,mBACA,gHACA,WACA,6BACA,wDACA,0GACA,mCACA,wFACA,gPACA,SACA,QACA,mCACA,kDACA,0DACA,iHACA,QACA,QACA,YACA,WACA,WACA,SACA,SACA,UACA,UACA,UACFM,KAAK,KAGX3G,yBAA0B5B,EAAEiI,UAEpB,2DACA,iFACA,OACA,qDACA,2CACA,+DACA,oFACA,oDACA,YACA,UACA,QACA,QACA,UACFM,KAAK,KAGXzG,uBAAwB9B,EAAEiI,UAElB,4EACA,6HACA,2CACA,kCACA,+DACA,oFACA,oDACA,YACA,QACA,UACA,SACFM,KAAK,KAGXpG,qBAAsBnC,EAAEiI,UAEhB,iEACA,6BACA,yBACA,kBACA,kJACA,SACA,UACFM,KAAK,KAGXK,uBAAwB5I,EAAEiI,UAElB,2CACA,+DACA,qDACA,uEACA,8CACA,UACA,YACA,WACFM,KAAK,KAGXP,4BAA6BhI,EAAEiI,UAEvB,gCACA,sCACA,yGACA,+FACA,mDACA,0EACA,SACA,SACA,UACFM,KAAK,KAGXvG,4BAA6BhC,EAAEiI,UAEvB,gCACA,sDACA,6BACA,yCACA,iDACA,sDACA,YACA,qFACA,mDACA,mFACA,SACA,SACA,SACA,UACFM,KAAK,KAGXL,0BAA2BlI,EAAEiI,UAErB,uFACA,+KACA,uLACA,UACFM,KAAK,KAGXrG,0BAA2BlC,EAAEiI,UAErB,6FACA,kMACA,sDACA,YACA,8NACA,yDACA,UACFM,KAAK,KAGXM,2BAA4B7I,EAAEiI,UAEtB,6CACA,iEACA,aACFM,KAAK,kBAKXJ,YAAa5I","file":"../../../scripts/mvc/toolshed/repository-view.js","sourcesContent":["import toolshed_model from \"mvc/toolshed/toolshed-model\";\nimport jstree from \"libs/jquery/jstree\";\nimport Utils from \"utils/utils\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport FormView from \"mvc/form/form-view\";\nimport toolshed_util from \"mvc/toolshed/util\";\nvar ToolShedRepositoryView = Backbone.View.extend({\n    el: \"#center\",\n\n    initialize: function(params) {\n        var self = this;\n        this.options = _.defaults(this.options || {}, this.defaults);\n        this.model = new toolshed_model.RepositoryCollection();\n        this.listenTo(this.model, \"sync\", this.render);\n        var shed = params.tool_shed.replace(/\\//g, \"%2f\");\n        this.model.url += `?tool_shed_url=${shed}&repository_id=${params.repository_id}`;\n        this.model.tool_shed_url = params.tool_shed.replace(/%2f/g, \"/\");\n        this.model.tool_shed = shed;\n        this.model.category = params.repository_id;\n        this.model.fetch();\n    },\n\n    render: function(options) {\n        var repo_details_template = this.templateRepoDetails;\n        var models = this.model.models[0];\n        this.options = {\n            repository: models.get(\"repository\"),\n            tool_shed: this.model.tool_shed,\n            queue: toolshed_util.queueLength()\n        };\n        var changesets = Object.keys(this.options.repository.metadata);\n        this.options.current_changeset =\n            this.options.current_changeset || changesets[changesets.length - 1];\n        this.options.current_metadata = this.options.repository.metadata[\n            this.options.current_changeset\n        ];\n        this.options.current_metadata.tool_shed_url = this.model.tool_shed_url;\n        this.options.tools = this.options.current_metadata.tools;\n        this.options.repository_dependencies_template = this.templateRepoDependencies;\n        this.options.repository_dependency_template = this.templateRepoDependency;\n        this.options.tps_template_global_select = this.templateGlobalSectionSelect;\n        this.options.tps_template_tool_select = this.templateToolSectionSelect;\n        this.options.tps_select_options = this.templatePanelSelectOptions;\n        this.options.tool_dependencies = models.get(\"tool_dependencies\");\n        this.options.shed_tool_conf = this.templateShedToolConf({\n            stc_html: models.get(\"shed_conf\")\n        });\n        this.options.panel_section_dict = models.get(\"panel_section_dict\");\n        this.options.api_url = `${Galaxy.root}api/tool_shed_repositories/install?async=True`;\n        this.options = _.extend(this.options, options);\n        this.$el.html(repo_details_template(this.options));\n        this.checkInstalled(this.options.current_metadata);\n        this.bindEvents();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    bindEvents: function() {\n        var that = this;\n        $(\"#changeset\").on(\"change\", () => {\n            that.options.current_changeset = $(\"#changeset\")\n                .find(\"option:selected\")\n                .text();\n            that.options.current_metadata =\n                that.options.repository.metadata[\n                    that.options.current_changeset\n                ];\n            that.checkInstalled(that.options.current_metadata);\n            that.reDraw();\n        });\n        $(\"#tool_panel_section_select\").on(\"change\", () => {\n            that.tpsSelection();\n        });\n        $(\"#install_repository\").on(\"click\", ev => {\n            var form = $(\"#repository_installation\");\n            ev.preventDefault();\n            var params = {};\n            params.repositories = JSON.stringify([\n                [\n                    $(\"#install_repository\").attr(\"data-tsrid\"),\n                    $(\"#changeset\")\n                        .find(\"option:selected\")\n                        .val()\n                ]\n            ]);\n            params.tool_shed_repository_ids = JSON.stringify([\n                $(\"#install_repository\").attr(\"data-tsrid\")\n            ]);\n            params.tool_shed_url = that.model.tool_shed_url;\n            params.install_tool_dependencies = $(\n                \"#install_tool_dependencies\"\n            ).val();\n            params.install_repository_dependencies = $(\n                \"#install_repository_dependencies\"\n            ).val();\n            params.install_resolver_dependencies = $(\n                \"#install_resolver_dependencies\"\n            ).val();\n            var tps = that.panelSelect(params);\n            params.tool_panel_section = JSON.stringify(\n                that.panelSelect(params)\n            );\n            params.shed_tool_conf = $(\"select[name='shed_tool_conf']\")\n                .find(\"option:selected\")\n                .val();\n            params.changeset = $(\"#changeset\")\n                .find(\"option:selected\")\n                .val();\n            var url = $(\"#repository_installation\").attr(\"action\");\n            that.prepareInstall(params, url);\n        });\n        $(\"#queue_install\").on(\"click\", ev => {\n            that.options.current_changeset = $(\"#changeset\")\n                .find(\"option:selected\")\n                .text();\n            that.options.current_metadata =\n                that.options.repository.metadata[\n                    that.options.current_changeset\n                ];\n            var changeset = that.options.current_changeset;\n            var repository_metadata = {};\n            _.each(Object.keys(that.options.current_metadata), key => {\n                if (!repository_metadata[key]) {\n                    repository_metadata[key] =\n                        that.options.current_metadata[key];\n                }\n            });\n            repository_metadata.install_tool_dependencies = $(\n                \"#install_tool_dependencies\"\n            ).val();\n            repository_metadata.install_repository_dependencies = $(\n                \"#install_repository_dependencies\"\n            ).val();\n            repository_metadata.install_resolver_dependencies = $(\n                \"#install_resolver_dependencies\"\n            ).val();\n            repository_metadata.tool_panel_section = JSON.stringify(\n                that.panelSelect({})\n            );\n            repository_metadata.shed_tool_conf = $(\n                \"select[name='shed_tool_conf']\"\n            )\n                .find(\"option:selected\")\n                .val();\n            repository_metadata.tool_shed_url = that.model.tool_shed_url;\n            if (repository_metadata.tool_shed_url.substr(-1) == \"/\") {\n                repository_metadata.tool_shed_url = repository_metadata.tool_shed_url.substr(\n                    0,\n                    repository_metadata.tool_shed_url.length - 1\n                );\n            }\n            toolshed_util.addToQueue(repository_metadata);\n            that.checkInstalled(repository_metadata);\n        });\n        $(\".tool_panel_section_picker\").on(\"change\", function() {\n            var new_value = $(this)\n                .find(\"option:selected\")\n                .val();\n            var default_tps = $(\"#tool_panel_section_select\")\n                .find(\"option:selected\")\n                .val();\n            if (new_value == default_tps) {\n                $(this).attr(\"default\", \"active\");\n            } else {\n                $(this).removeAttr(\"default\");\n            }\n        });\n        $(() => {\n            $(\"#repository_dependencies\").jstree();\n        });\n        $(\".tool_form\").on(\"click\", function() {\n            var guid = $(this).attr(\"data-guid\");\n            var clean = $(this).attr(\"data-clean\");\n            var name = $(this).attr(\"data-name\");\n            var desc = $(this).attr(\"data-desc\");\n            var tool_shed_url = that.model.tool_shed_url;\n            var tsr_id = $(\"#repository_details\").attr(\"data-tsrid\");\n            var changeset = $(\"#changeset\")\n                .find(\"option:selected\")\n                .val();\n            var api_url = `${Galaxy.root}api/tool_shed/tool_json`;\n            var params = {\n                guid: guid,\n                tool_shed_url: tool_shed_url,\n                tsr_id: tsr_id,\n                changeset: changeset\n            };\n            $.get(api_url, params, data => {\n                data.cls = \"ui-portlet-plain\";\n                var toolform = new FormView(data);\n                Utils.deepeach(data.inputs, input => {\n                    if (input.type) {\n                        if (\n                            [\"data\", \"data_collection\"].indexOf(input.type) !=\n                            -1\n                        ) {\n                            input.type = \"hidden\";\n                            input.info = `Data input '${input.name}' (${Utils.textify(\n                                input.extensions\n                            )})`;\n                        }\n                    }\n                });\n                var modal = new Modal.View();\n                var modal_title = `<u>${name}</u> ${desc}`;\n                modal.show({\n                    closing_events: true,\n                    title: modal_title,\n                    body: toolform.$el,\n                    buttons: {\n                        Close: function() {\n                            modal.hide();\n                        }\n                    }\n                });\n            });\n        });\n    },\n\n    checkInstalled: function(metadata) {\n        var that = this;\n        var params = { name: metadata.name, owner: metadata.owner };\n        var already_installed = false;\n        var queued = that.repoQueued(metadata);\n        $.get(`${Galaxy.root}api/tool_shed_repositories`, params, data => {\n            for (var index = 0; index < data.length; index++) {\n                var repository = data[index];\n                var installed = !repository.deleted && !repository.uninstalled;\n                var changeset_match =\n                    repository.changeset_revision ==\n                        metadata.changeset_revision ||\n                    repository.installed_changeset_revision ==\n                        metadata.changeset_revision;\n                if (\n                    repository.name == metadata.repository.name &&\n                    repository.owner == metadata.repository.owner &&\n                    installed &&\n                    changeset_match\n                ) {\n                    already_installed = true;\n                }\n                if (already_installed) {\n                    $(\"#install_repository\").prop(\"disabled\", true);\n                    $(\"#install_repository\").val(\n                        \"This revision is already installed\"\n                    );\n                } else {\n                    $(\"#install_repository\").prop(\"disabled\", false);\n                    $(\"#install_repository\").val(\"Install this revision\");\n                }\n            }\n            if (that.repoQueued(metadata) || already_installed) {\n                $(\"#queue_install\").hide();\n                $(\"#queue_install\").val(\n                    \"This revision is already in the queue\"\n                );\n            } else {\n                $(\"#queue_install\").show();\n                $(\"#queue_install\").val(\"Install this revision later\");\n            }\n        });\n    },\n\n    panelSelect: function(params) {\n        var tool_panel_section = {};\n        if ($(\"#tool_panel_section_select\").length) {\n            params.tool_panel_section_id = $(\"#tool_panel_section_select\")\n                .find(\"option:selected\")\n                .val();\n        } else {\n            params.new_tool_panel_section = $(\"#new_tool_panel_section\").val();\n        }\n        $(\".tool_panel_section_picker\").each(function() {\n            var element_name = $(this).attr(\"name\");\n            var tool_guid = $(this).attr(\"data-toolguid\");\n            if (element_name === \"tool_panel_section_id\") {\n                tool_panel_section[tool_guid] = {\n                    tool_panel_section: $(this)\n                        .find(\"option:selected\")\n                        .val(),\n                    action: \"append\"\n                };\n            } else {\n                tool_panel_section[tool_guid] = {\n                    tool_panel_section: $(this).val(),\n                    action: \"create\"\n                };\n            }\n        });\n        return tool_panel_section;\n    },\n\n    reDraw: function(options) {\n        this.$el.empty();\n        this.initialize(options);\n    },\n\n    repoQueued: function(metadata) {\n        var that = this;\n        if (!localStorage.repositories) {\n            return;\n        }\n        var repository_queue = JSON.parse(localStorage.repositories);\n        var changeset = metadata.changeset_revision;\n        var queue_key = that.queueKey(metadata);\n        if (localStorage.repositories) {\n            queued_repos = JSON.parse(localStorage.repositories);\n        }\n        if (queued_repos.hasOwnProperty(queue_key)) {\n            return true;\n        }\n        return false;\n    },\n\n    queueKey: function(metadata) {\n        var shed_url = this.model.tool_shed_url;\n        // Make sure there is never a trailing slash on the shed URL.\n        if (shed_url.substr(-1) == \"/\") {\n            shed_url = shed_url.substr(0, shed_url.length - 1);\n        }\n        return `${shed_url}|${metadata.repository_id}|${metadata.changeset_revision}`;\n    },\n\n    tpsSelection: function() {\n        new_tps = $(\"#tool_panel_section_select\")\n            .find(\"option:selected\")\n            .val();\n        $('.tool_panel_section_picker[default=\"active\"]').each(function() {\n            $(this).val(new_tps);\n        });\n    },\n\n    prepareInstall: function(params, api_url) {\n        var that = this;\n        $.post(api_url, params, data => {\n            var iri_parameters = JSON.parse(data);\n            that.doInstall(iri_parameters);\n        });\n    },\n\n    doInstall: function(params) {\n        var controller_url = `${Galaxy.root}admin_toolshed/install_repositories`;\n        var repositories = params.repositories;\n        var new_route = `status/r/${repositories.join(\"|\")}`;\n        $.post(controller_url, params, data => {\n            console.log(\"Initializing repository installation succeeded\");\n        });\n        Backbone.history.navigate(new_route, {\n            trigger: true,\n            replace: true\n        });\n    },\n\n    templateRepoDetails: _.template(\n        [\n            '<div class=\"unified-panel-header\" id=\"panel_header\" unselectable=\"on\">',\n            '<div class=\"unified-panel-header-inner\">Repository information for <strong><%= repository.name %></strong> from <strong><%= repository.owner %></strong></div>',\n            '<div class=\"unified-panel-header-inner\" style=\"position: absolute; right: 5px; top: 0px;\"><a href=\"#/queue\">Repository Queue (<%= queue %>)</a></div>',\n            \"</div>\",\n            '<div class=\"unified-panel-body\" id=\"repository_details\" data-tsrid=\"<%= repository.id %>\">',\n            '<form id=\"repository_installation\" name=\"install_repository\" method=\"post\" action=\"<%= api_url %>\">',\n            '<input type=\"hidden\" id=\"repositories\" name=\"<%= repository.id %>\" value=\"ID\" />',\n            '<input type=\"hidden\" id=\"tool_shed_url\" name=\"tool_shed_url\" value=\"<%= tool_shed %>\" />',\n            '<div class=\"toolForm\">',\n            '<div class=\"toolFormTitle\">Changeset</div>',\n            '<div class=\"toolFormBody changeset\">',\n            '<select id=\"changeset\" name=\"changeset\" style=\"margin: 5px;\">',\n            \"<% _.each(Object.keys(repository.metadata), function(changeset) { %>\",\n            '<% if (changeset == current_changeset) { var selected = \"selected \"; } else { var selected = \"\"; } %>',\n            '<option <%= selected %>value=\"<%= changeset.split(\":\")[1] %>\"><%= changeset %></option>',\n            \"<% }); %>\",\n            \"</select>\",\n            '<input class=\"btn btn-primary preview-button\" data-tsrid=\"<%= current_metadata.repository.id %>\" type=\"submit\" id=\"install_repository\" name=\"install_repository\" value=\"Install this revision now\" />',\n            '<input class=\"btn btn-primary preview-button\" type=\"button\" id=\"queue_install\" name=\"queue_install\" value=\"Install this revision later\" />',\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">Please select a revision and review the settings below before installing.</div>',\n            \"</div>\",\n            \"</div>\",\n            \"<%= shed_tool_conf %>\",\n            \"<% if (current_metadata.has_repository_dependencies) { %>\",\n            '<div class=\"toolFormTitle\">Repository dependencies for <strong id=\"current_changeset\"><%= current_changeset %></strong></div>',\n            '<div class=\"toolFormBody\">',\n            '<p id=\"install_repository_dependencies_checkbox\">',\n            '<input type=\"checkbox\" checked id=\"install_repository_dependencies\" />',\n            '<label for=\"install_repository_dependencies\">Install repository dependencies</label>',\n            \"</p>\",\n            \"<% current_metadata.repository_dependency_template = repository_dependency_template; %>\",\n            '<div class=\"tables container-table\" id=\"repository_dependencies\">',\n            '<div class=\"expandLink\">',\n            '<a class=\"toggle_folder\" data_target=\"repository_dependencies_table\">',\n            \"Repository dependencies &ndash; <em>installation of these additional repositories is required</em>\",\n            \"</a>\",\n            \"</div>\",\n            \"<%= repository_dependencies_template(current_metadata) %>\",\n            \"</div>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"<% if (current_metadata.includes_tool_dependencies) { %>\",\n            '<div class=\"toolFormTitle\">Tool dependencies</div>',\n            '<div class=\"toolFormBody\">',\n            '<p id=\"install_resolver_dependencies_checkbox\">',\n            '<input type=\"checkbox\" checked id=\"install_resolver_dependencies\" />',\n            '<label for=\"install_resolver_dependencies\">Install resolver dependencies</label>',\n            \"</p>\",\n            '<p id=\"install_tool_dependencies_checkbox\">',\n            '<input type=\"checkbox\" checked id=\"install_tool_dependencies\" />',\n            '<label for=\"install_tool_dependencies\">Install tool dependencies</label>',\n            \"</p>\",\n            '<div class=\"tables container-table\" id=\"tool_dependencies\">',\n            '<div class=\"expandLink\">',\n            '<a class=\"toggle_folder\" data_target=\"tool_dependencies_table\">',\n            \"Tool dependencies &ndash; <em>repository tools require handling of these dependencies</em>\",\n            \"</a>\",\n            \"</div>\",\n            '<table class=\"tables container-table\" id=\"tool_dependencies_table\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\" width=\"100%\">',\n            \"<thead>\",\n            '<tr style=\"display: table-row;\" class=\"datasetRow\" parent=\"0\" id=\"libraryItem-rt-f9cad7b01a472135\">',\n            '<th style=\"padding-left: 40px;\">Name</th>',\n            \"<th>Version</th>\",\n            \"<th>Type</th>\",\n            \"</tr>\",\n            \"</thead>\",\n            '<tbody id=\"tool_deps\">',\n            \"<% _.each(tool_dependencies[current_changeset], function(dependency) { %>\",\n            '<tr class=\"datasetRow tool_dependency_row\" style=\"display: table-row;\">',\n            '<td style=\"padding-left: 40px;\">',\n            \"<%= dependency.name %></td>\",\n            \"<td><%= dependency.version %></td>\",\n            \"<td><%= dependency.type %></td>\",\n            \"</tr>\",\n            \"<% }); %>\",\n            \"</tbody>\",\n            \"</table>\",\n            \"</div>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"<% if (current_metadata.includes_tools_for_display_in_tool_panel) { %>\",\n            '<div class=\"toolFormTitle\">Tools &ndash; <em>click the name to preview the tool and use the pop-up menu to inspect all metadata</em></div>',\n            '<div class=\"toolFormBody\">',\n            '<div class=\"tables container-table\" id=\"tools_toggle\">',\n            '<table class=\"tables container-table\" id=\"valid_tools\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\" width=\"100%\">',\n            \"<thead>\",\n            '<tr style=\"display: table-row;\" class=\"datasetRow\" parent=\"0\" id=\"libraryItem-rt-f9cad7b01a472135\">',\n            '<th style=\"padding-left: 40px;\">Name</th>',\n            \"<th>Description</th>\",\n            \"<th>Version</th>\",\n            \"<th><%= tps_template_global_select({tps: panel_section_dict, tps_select_options: tps_select_options}) %></tr>\",\n            \"</thead>\",\n            '<tbody id=\"tools_in_repo\">',\n            \"<% _.each(current_metadata.tools, function(tool) { %>\",\n            '<tr id=\"libraryItem-<%= tool.clean %>\" class=\"tool_row\" style=\"display: table-row;\" style=\"width: 15%\">',\n            '<td style=\"padding-left: 40px;\">',\n            '<div id=\"tool-<%= tool.clean %>\" class=\"menubutton split popup\" style=\"float: left;\">',\n            '<a class=\"tool_form view-info\" data-toggle=\"modal\" data-target=\"toolform_<%= tool.clean %>\" data-clean=\"<%= tool.clean %>\" data-guid=\"<%= tool.guid %>\" data-name=\"<%= tool.name %>\" data-desc=\"<%= tool.description %>\"><%= tool.name %></a>',\n            \"</div>\",\n            \"</td>\",\n            \"<td><%= tool.description %></td>\",\n            '<td style=\"width: 15%\"><%= tool.version %></td>',\n            '<td style=\"width: 35%\" id=\"tool_tps_<%= tool.clean %>\">',\n            \"<%= tps_template_tool_select({tool: tool, tps: panel_section_dict, tps_select_options: tps_select_options}) %>\",\n            \"</td>\",\n            \"</tr>\",\n            \"<% }); %>\",\n            \"</tbody>\",\n            \"</table>\",\n            \"</div>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</form>\",\n            \"</div>\"\n        ].join(\"\")\n    ),\n\n    templateRepoDependencies: _.template(\n        [\n            '<div class=\"toolFormTitle\">Repository Dependencies</div>',\n            '<div class=\"toolFormBody tables container-table\" id=\"repository_dependencies\">',\n            \"<ul>\",\n            \"<li>Repository installation requires the following\",\n            \"<% if (has_repository_dependencies) { %>\",\n            \"<% _.each(repository_dependencies, function(dependency) { %>\",\n            \"<% dependency.repository_dependency_template = repository_dependency_template; %>\",\n            \"<%= repository_dependency_template(dependency) %>\",\n            \"<% }); %>\",\n            \"<% } %>\",\n            \"</li>\",\n            \"</ul>\",\n            \"</div>\"\n        ].join(\"\")\n    ),\n\n    templateRepoDependency: _.template(\n        [\n            '<li id=\"metadata_<%= id %>\" class=\"datasetRow repository_dependency_row\">',\n            \"Repository <b><%= repository.name %></b> revision <b><%= changeset_revision %></b> owned by <b><%= repository.owner %></b>\",\n            \"<% if (has_repository_dependencies) { %>\",\n            '<ul class=\"child_dependencies\">',\n            \"<% _.each(repository_dependencies, function(dependency) { %>\",\n            \"<% dependency.repository_dependency_template = repository_dependency_template; %>\",\n            \"<%= repository_dependency_template(dependency) %>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"<% } %>\",\n            \"</li>\"\n        ].join(\"\")\n    ),\n\n    templateShedToolConf: _.template(\n        [\n            '<div class=\"toolFormTitle\">Shed tool configuration file:</div>',\n            '<div class=\"toolFormBody\">',\n            '<div class=\"form-row\">',\n            \"<%= stc_html %>\",\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">Select the file whose <b>tool_path</b> setting you want used for installing repositories.</div>',\n            \"</div>\",\n            \"</div>\"\n        ].join(\"\")\n    ),\n\n    templateToolDependency: _.template(\n        [\n            \"<% if (has_repository_dependencies) { %>\",\n            \"<% _.each(repository_dependencies, function(dependency) { %>\",\n            \"<% if (dependency.includes_tool_dependencies) { %>\",\n            \"<% dependency.tool_dependency_template = tool_dependency_template %>\",\n            \"<%= tool_dependency_template(dependency) %>\",\n            \"<% } %>\",\n            \"<% }); %>\",\n            \"<% } %>\"\n        ].join(\"\")\n    ),\n\n    templateGlobalSectionCreate: _.template(\n        [\n            '<div id=\"tool_panel_section\">',\n            '<div class=\"form-row\" id=\"new_tps\">',\n            '<input id=\"new_tool_panel_section\" name=\"new_tool_panel_section\" type=\"textfield\" value=\"\" size=\"40\"/>',\n            '<input class=\"btn btn-primary\" type=\"button\" id=\"select_existing\" value=\"Select existing\" />',\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n            \"Add a new tool panel section to contain the installed tools (optional).\",\n            \"</div>\",\n            \"</div>\",\n            \"</div>\"\n        ].join(\"\")\n    ),\n\n    templateGlobalSectionSelect: _.template(\n        [\n            '<div id=\"tool_panel_section\">',\n            '<div class=\"toolFormTitle\">Tool Panel Section</div>',\n            '<div class=\"toolFormBody\">',\n            '<div class=\"tab-pane\" id=\"select_tps\">',\n            '<select name=\"<%= name %>\" id=\"<%= tps.id %>\">',\n            \"<%= tps_select_options({sections: tps.sections}) %>\",\n            \"</select>\",\n            '<input class=\"btn btn-primary\" type=\"button\" id=\"create_new\" value=\"Create new\" />',\n            '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n            \"Select an existing tool panel section to contain the installed tools (optional).\",\n            \"</div>\",\n            \"</div>\",\n            \"</div>\",\n            \"</div>\"\n        ].join(\"\")\n    ),\n\n    templateToolSectionCreate: _.template(\n        [\n            '<div id=\"new_tps_<%= tool.clean %>\" data-clean=\"<%= tool.clean %>\" class=\"form-row\">',\n            '<input data-toolguid=\"<%= tool.guid %>\" class=\"tool_panel_section_picker\" size=\"40\" name=\"new_tool_panel_section\" id=\"new_tool_panel_section_<%= tool.clean %>\" type=\"text\">',\n            '<input id=\"per_tool_select_<%= tool.clean %>\" class=\"btn btn-primary\" data-toolguid=\"<%= tool.guid %>\" value=\"Select existing\" id=\"select_existing_<%= tool.clean %>\" type=\"button\">',\n            \"</div>\"\n        ].join(\"\")\n    ),\n\n    templateToolSectionSelect: _.template(\n        [\n            '<div id=\"select_tps_<%= tool.clean %>\" data-clean=\"<%= tool.clean %>\" class=\"tps_creator\">',\n            '<select default=\"active\" style=\"width: 30em;\" data-toolguid=\"<%= tool.guid %>\" class=\"tool_panel_section_picker\" name=\"tool_panel_section_id\" id=\"tool_panel_section_select_<%= tool.clean %>\">',\n            \"<%= tps_select_options({sections: tps.sections}) %>\",\n            \"</select>\",\n            '<input id=\"per_tool_create_<%= tool.clean %>\" data-clean=\"<%= tool.clean %>\" class=\"btn btn-primary create-tps-button\" data-toolguid=\"<%= tool.guid %>\" value=\"Create new\" id=\"create_new_<%= tool.clean %>\" type=\"button\">',\n            '<div style=\"clear: both;\" class=\"toolParamHelp\"></div>',\n            \"</div>\"\n        ].join(\"\")\n    ),\n\n    templatePanelSelectOptions: _.template(\n        [\n            \"<% _.each(sections, function(section) { %>\",\n            '<option value=\"<%= section.id %>\"><%= section.name %></option>',\n            \"<% }); %>\"\n        ].join(\"\")\n    )\n});\n\nexport default {\n    RepoDetails: ToolShedRepositoryView\n};\n"]}