{"version":3,"sources":["mvc/collection/collection-view.js"],"names":["define","logNamespace","DC_MODEL","DC_LI","BASE_MVC","_l","_logNamespace","CollectionView","_super","extend","className","prototype","modelCollectionKey","DatasetDCEListItemView","NestedDCDCEViewClass","NestedDCDCEListItemView","initialize","hasUser","attributes","call","this","linkTarget","panelStack","parentName","_queueNewRender","foldoutStyle","$newRender","speed","undefined","fxSpeed","panel","log","_swapNewRender","trigger","_filterCollection","_getItemViewClass","model","get","TypeError","_getItemViewOptions","options","_setUpItemViewListeners","view","listenTo","_expandDrilldownPanel","expanded:drilldown","_collapseDrilldownPanel","drilldown","collapsed:drilldown","v","append","$","add","$list","hide","render","$el","pop","events","close","event","remove","toString","controls","controlsTemplate","wrapTemplate","ListCollectionView","DatasetDCEViewClass","PairCollectionView","ListOfPairsCollectionView","_","clone","templates","foldoutPanelClass","ListOfListsCollectionView"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-view.js","sourcesContent":["define([\n    \"mvc/list/list-view\",\n    \"mvc/collection/collection-model\",\n    \"mvc/collection/collection-li\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( LIST_VIEW, DC_MODEL, DC_LI, BASE_MVC, _l ){\n\n'use strict';\n\nvar logNamespace = 'collections';\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class non-editable, read-only View/Controller for a dataset collection.\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar CollectionView = _super.extend(\n/** @lends CollectionView.prototype */{\n    //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n    _logNamespace : logNamespace,\n\n    className           : _super.prototype.className + ' dataset-collection-panel',\n\n    /** sub view class used for datasets */\n    DatasetDCEViewClass : DC_LI.DatasetDCEListItemView,\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass: DC_LI.NestedDCDCEListItemView,\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey  : 'elements',\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n    initialize : function( attributes ){\n        _super.prototype.initialize.call( this, attributes );\n        this.linkTarget = attributes.linkTarget || '_blank';\n\n        this.hasUser = attributes.hasUser;\n        /** A stack of panels that currently cover or hide this panel */\n        this.panelStack = [];\n        /** The text of the link to go back to the panel containing this one */\n        this.parentName = attributes.parentName;\n        /** foldout or drilldown */\n        this.foldoutStyle = attributes.foldoutStyle || 'foldout';\n        this.downloadUrl = this.model.attributes.url + '/download';\n    },\n\n    _queueNewRender : function( $newRender, speed ) {\n        speed = ( speed === undefined )?( this.fxSpeed ):( speed );\n        var panel = this;\n        panel.log( '_queueNewRender:', $newRender, speed );\n\n        // TODO: jquery@1.12 doesn't change display when the elem has display: flex\n        // this causes display: block for those elems after the use of show/hide animations\n        // animations are removed from this view for now until fixed\n        panel._swapNewRender( $newRender );\n        panel.trigger( 'rendered', panel );\n    },\n\n    // ------------------------------------------------------------------------ sub-views\n    /** In this override, use model.getVisibleContents */\n    _filterCollection : function(){\n        //TODO: should *not* be model.getVisibleContents - visibility is not model related\n        return this.model.getVisibleContents();\n    },\n\n    /** override to return proper view class based on element_type */\n    _getItemViewClass : function( model ){\n        //this.debug( this + '._getItemViewClass:', model );\n        //TODO: subclasses use DCEViewClass - but are currently unused - decide\n        switch( model.get( 'element_type' ) ){\n            case 'hda':\n                return this.DatasetDCEViewClass;\n            case 'dataset_collection':\n                return this.NestedDCDCEViewClass;\n        }\n        throw new TypeError( 'Unknown element type:', model.get( 'element_type' ) );\n    },\n\n    /** override to add link target and anon */\n    _getItemViewOptions : function( model ){\n        var options = _super.prototype._getItemViewOptions.call( this, model );\n        return _.extend( options, {\n            linkTarget      : this.linkTarget,\n            hasUser         : this.hasUser,\n            //TODO: could move to only nested: list:paired\n            foldoutStyle    : this.foldoutStyle\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection sub-views\n    /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n    _setUpItemViewListeners : function( view ){\n        var panel = this;\n        _super.prototype._setUpItemViewListeners.call( panel, view );\n\n        // use pub-sub to: handle drilldown expansion and collapse\n        panel.listenTo( view, {\n            'expanded:drilldown': function( v, drilldown ){\n                this._expandDrilldownPanel( drilldown );\n            },\n            'collapsed:drilldown': function( v, drilldown ){\n                this._collapseDrilldownPanel( drilldown );\n            }\n        });\n        return this;\n    },\n\n    /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n    _expandDrilldownPanel : function( drilldown ){\n        this.panelStack.push( drilldown );\n        // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n        this.$( '> .controls' ).add( this.$list() ).hide();\n        drilldown.parentName = this.model.get( 'name' );\n        this.$el.append( drilldown.render().$el );\n    },\n\n    /** Handle drilldown close by freeing the panel and re-rendering this panel */\n    _collapseDrilldownPanel : function( drilldown ){\n        this.panelStack.pop();\n        this.render();\n    },\n\n    // ------------------------------------------------------------------------ panel events\n    /** event map */\n    events : {\n        'click .navigation .back' : 'close'\n    },\n\n    /** close/remove this collection panel */\n    close : function( event ){\n        this.remove();\n        this.trigger( 'close' );\n    },\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'CollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n//------------------------------------------------------------------------------ TEMPLATES\nCollectionView.prototype.templates = (function(){\n\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n            '<div class=\"navigation\">',\n                '<a class=\"back\" href=\"javascript:void(0)\">',\n                    '<span class=\"fa fa-icon fa-angle-left\"></span>',\n                    _l( 'Back to ' ), '<%- view.parentName %>',\n                '</a>',\n            '</div>',\n\n            '<div class=\"title\">',\n                '<div class=\"name\"><%- collection.name || collection.element_identifier %></div>',\n                '<div class=\"subtitle\">',\n                    '<% if( collection.collection_type === \"list\" ){ %>',\n                        _l( 'a list of datasets' ),\n                    '<% } else if( collection.collection_type === \"paired\" ){ %>',\n                        _l( 'a pair of datasets' ),\n                    '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n                        _l( 'a list of paired datasets' ),\n                    '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n                        _l( 'a list of dataset lists' ),\n                    '<% } %>',\n                '</div>',\n            '</div>',\n\n            '<div class=\"tags-display\"></div>',\n\n            '<div class=\"actions\">',\n                '<a class=\"download-btn icon-btn\" ',\n                    'href=\"<%- view.downloadUrl %>', '\" title=\"\" download=\"\" data-original-title=\"Download Collection\">',\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                '</a>',\n            '</div>',\n        '</div>',\n    ], 'collection' );\n\n    return _.extend( _.clone( _super.prototype.templates ), {\n        controls : controlsTemplate\n    });\n}());\n\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListCollectionView = CollectionView.extend(\n/** @lends ListCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for datasets */\n    DatasetDCEViewClass : DC_LI.DatasetDCEListItemView,\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListCollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar PairCollectionView = ListCollectionView.extend(\n/** @lends PairCollectionView.prototype */{\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'PairCollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListOfPairsCollectionView = CollectionView.extend(\n/** @lends ListOfPairsCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass : DC_LI.NestedDCDCEListItemView.extend({\n        foldoutPanelClass : PairCollectionView\n    }),\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListOfPairsCollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a list of lists dataset collection. */\nvar ListOfListsCollectionView = CollectionView.extend({\n\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass : DC_LI.NestedDCDCEListItemView.extend({\n        foldoutPanelClass : PairCollectionView\n    }),\n\n    /** string rep */\n    toString    : function(){\n        return 'ListOfListsCollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n//==============================================================================\n    return {\n        CollectionView              : CollectionView,\n        ListCollectionView          : ListCollectionView,\n        PairCollectionView          : PairCollectionView,\n        ListOfPairsCollectionView   : ListOfPairsCollectionView,\n        ListOfListsCollectionView   : ListOfListsCollectionView\n    };\n});\n"]}