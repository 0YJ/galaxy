{"version":3,"sources":["mvc/collection/collection-view.js"],"names":["define","LIST_VIEW","DC_MODEL","DC_LI","BASE_MVC","_l","_super","ModelListPanel","CollectionView","extend","_logNamespace","className","prototype","DatasetDCEViewClass","DatasetDCEListItemView","NestedDCDCEViewClass","NestedDCDCEListItemView","modelCollectionKey","initialize","attributes","call","this","linkTarget","hasUser","panelStack","parentName","foldoutStyle","_queueNewRender","$newRender","speed","undefined","panel","log","_swapNewRender","trigger","_filterCollection","model","getVisibleContents","_getItemViewClass","get","TypeError","_getItemViewOptions","options","_","_setUpItemViewListeners","view","listenTo","expanded:drilldown","v","drilldown","_expandDrilldownPanel","collapsed:drilldown","_collapseDrilldownPanel","push","$","add","$list","hide","$el","append","render","pop","events","click .navigation .back","close","event","remove","toString","templates","controlsTemplate","wrapTemplate","clone","controls","ListCollectionView","PairCollectionView","ListOfPairsCollectionView","foldoutPanelClass","ListOfListsCollectionView"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-view.js","sourcesContent":["define([\n    \"mvc/list/list-view\",\n    \"mvc/collection/collection-model\",\n    \"mvc/collection/collection-li\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( LIST_VIEW, DC_MODEL, DC_LI, BASE_MVC, _l ){\n\n'use strict';\n\nvar logNamespace = 'collections';\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class non-editable, read-only View/Controller for a dataset collection.\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar CollectionView = _super.extend(\n/** @lends CollectionView.prototype */{\n    //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n    _logNamespace : logNamespace,\n\n    className           : _super.prototype.className + ' dataset-collection-panel',\n\n    /** sub view class used for datasets */\n    DatasetDCEViewClass : DC_LI.DatasetDCEListItemView,\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass: DC_LI.NestedDCDCEListItemView,\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey  : 'elements',\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n    initialize : function( attributes ){\n        _super.prototype.initialize.call( this, attributes );\n        this.linkTarget = attributes.linkTarget || '_blank';\n\n        this.hasUser = attributes.hasUser;\n        /** A stack of panels that currently cover or hide this panel */\n        this.panelStack = [];\n        /** The text of the link to go back to the panel containing this one */\n        this.parentName = attributes.parentName;\n        /** foldout or drilldown */\n        this.foldoutStyle = attributes.foldoutStyle || 'foldout';\n    },\n\n    _queueNewRender : function( $newRender, speed ) {\n        speed = ( speed === undefined )?( this.fxSpeed ):( speed );\n        var panel = this;\n        panel.log( '_queueNewRender:', $newRender, speed );\n\n        // TODO: jquery@1.12 doesn't change display when the elem has display: flex\n        // this causes display: block for those elems after the use of show/hide animations\n        // animations are removed from this view for now until fixed\n        panel._swapNewRender( $newRender );\n        panel.trigger( 'rendered', panel );\n    },\n\n    // ------------------------------------------------------------------------ sub-views\n    /** In this override, use model.getVisibleContents */\n    _filterCollection : function(){\n        //TODO: should *not* be model.getVisibleContents - visibility is not model related\n        return this.model.getVisibleContents();\n    },\n\n    /** override to return proper view class based on element_type */\n    _getItemViewClass : function( model ){\n        //this.debug( this + '._getItemViewClass:', model );\n        //TODO: subclasses use DCEViewClass - but are currently unused - decide\n        switch( model.get( 'element_type' ) ){\n            case 'hda':\n                return this.DatasetDCEViewClass;\n            case 'dataset_collection':\n                return this.NestedDCDCEViewClass;\n        }\n        throw new TypeError( 'Unknown element type:', model.get( 'element_type' ) );\n    },\n\n    /** override to add link target and anon */\n    _getItemViewOptions : function( model ){\n        var options = _super.prototype._getItemViewOptions.call( this, model );\n        return _.extend( options, {\n            linkTarget      : this.linkTarget,\n            hasUser         : this.hasUser,\n            //TODO: could move to only nested: list:paired\n            foldoutStyle    : this.foldoutStyle\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection sub-views\n    /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n    _setUpItemViewListeners : function( view ){\n        var panel = this;\n        _super.prototype._setUpItemViewListeners.call( panel, view );\n\n        // use pub-sub to: handle drilldown expansion and collapse\n        panel.listenTo( view, {\n            'expanded:drilldown': function( v, drilldown ){\n                this._expandDrilldownPanel( drilldown );\n            },\n            'collapsed:drilldown': function( v, drilldown ){\n                this._collapseDrilldownPanel( drilldown );\n            }\n        });\n        return this;\n    },\n\n    /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n    _expandDrilldownPanel : function( drilldown ){\n        this.panelStack.push( drilldown );\n        // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n        this.$( '> .controls' ).add( this.$list() ).hide();\n        drilldown.parentName = this.model.get( 'name' );\n        this.$el.append( drilldown.render().$el );\n    },\n\n    /** Handle drilldown close by freeing the panel and re-rendering this panel */\n    _collapseDrilldownPanel : function( drilldown ){\n        this.panelStack.pop();\n        this.render();\n    },\n\n    // ------------------------------------------------------------------------ panel events\n    /** event map */\n    events : {\n        'click .navigation .back' : 'close'\n    },\n\n    /** close/remove this collection panel */\n    close : function( event ){\n        this.remove();\n        this.trigger( 'close' );\n    },\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'CollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n//------------------------------------------------------------------------------ TEMPLATES\nCollectionView.prototype.templates = (function(){\n\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n            '<div class=\"navigation\">',\n                '<a class=\"back\" href=\"javascript:void(0)\">',\n                    '<span class=\"fa fa-icon fa-angle-left\"></span>',\n                    _l( 'Back to ' ), '<%- view.parentName %>',\n                '</a>',\n            '</div>',\n\n            '<div class=\"title\">',\n                '<div class=\"name\"><%- collection.name || collection.element_identifier %></div>',\n                '<div class=\"subtitle\">',\n                    '<% if( collection.collection_type === \"list\" ){ %>',\n                        _l( 'a list of datasets' ),\n                    '<% } else if( collection.collection_type === \"paired\" ){ %>',\n                        _l( 'a pair of datasets' ),\n                    '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n                        _l( 'a list of paired datasets' ),\n                    '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n                        _l( 'a list of dataset lists' ),\n                    '<% } %>',\n                '</div>',\n            '</div>',\n        '</div>'\n    ], 'collection' );\n\n    return _.extend( _.clone( _super.prototype.templates ), {\n        controls : controlsTemplate\n    });\n}());\n\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListCollectionView = CollectionView.extend(\n/** @lends ListCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for datasets */\n    DatasetDCEViewClass : DC_LI.DatasetDCEListItemView,\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListCollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar PairCollectionView = ListCollectionView.extend(\n/** @lends PairCollectionView.prototype */{\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'PairCollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListOfPairsCollectionView = CollectionView.extend(\n/** @lends ListOfPairsCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass : DC_LI.NestedDCDCEListItemView.extend({\n        foldoutPanelClass : PairCollectionView\n    }),\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListOfPairsCollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a list of lists dataset collection. */\nvar ListOfListsCollectionView = CollectionView.extend({\n\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass : DC_LI.NestedDCDCEListItemView.extend({\n        foldoutPanelClass : PairCollectionView\n    }),\n\n    /** string rep */\n    toString    : function(){\n        return 'ListOfListsCollectionView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n//==============================================================================\n    return {\n        CollectionView              : CollectionView,\n        ListCollectionView          : ListCollectionView,\n        PairCollectionView          : PairCollectionView,\n        ListOfPairsCollectionView   : ListOfPairsCollectionView,\n        ListOfListsCollectionView   : ListOfListsCollectionView\n    };\n});\n"]}