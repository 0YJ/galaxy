{"version":3,"sources":["mvc/collection/collection-view-edit.js"],"names":["_super","_collectionView2","default","CollectionView","CollectionViewEdit","extend","DatasetDCEViewClass","_collectionLiEdit2","DatasetDCEListItemEdit","NestedDCDCEViewClass","NestedDCDCEListItemEdit","initialize","attributes","prototype","call","_setUpBehaviors","$where","this","$el","model","Galaxy","user","isAnonymous","panel","tooltip","placement","make_text_editable","on_finish","newName","previousName","get","text","save","name","fail","find","previous","_tag2","TagsEditor","el","usePrompt","onshowFirstTime","render","toString","PairCollectionViewEdit","ListCollectionViewEdit","ListOfPairsCollectionViewEdit","foldoutPanelClass","NestedPairCollectionViewEdit","ListOfListsCollectionViewEdit"],"mappings":"qbAeIA,EAASC,EAAAC,QAAQC,eACjBC,EAAqBJ,EAAOK,QAQxBC,oBAAqBC,EAAAL,QAAQM,uBAE7BC,qBAAsBF,EAAAL,QAAQQ,wBAM9BC,WAAY,SAASC,GAjBzBZ,EAASa,UAAAF,WAAAG,KAAQX,KAAAA,IAKbY,gBAAA,SAAAC,GAGA,GAFAA,EAAAA,GAAAC,KAAAC,IAmBIlB,EAAOa,UAAUE,gBAAgBD,KAAKG,KAAMD,GAjBhDC,KAAAE,OAKAC,OAAAC,OAAAD,OAAAC,KAAAC,cAAA,CAIAX,KAAAA,iBAAY,EAqBR,IAAIY,EAAQN,KAfhBF,EACIC,KAgBmB,qBAfnBhB,KAAOa,SAAUE,EAAAA,EAAAA,SAAAA,+BACZS,SAALC,UAAiB,WACbC,oBACHC,UAAA,SAAAC,GAmBW,IAAIC,EAAeN,EAAMJ,MAAMW,IAAI,QAjB/CF,GAAAA,IAAAC,GACIN,EAAgBH,IAAAA,KASD,qBATnBW,KAA+CH,GAC3CL,EAAAJ,MAAAa,MAAAC,KAAAL,IAAAM,KAAA,WACHX,EAAAL,IAmBwBiB,KAZN,qBALIJ,KAAvBR,EAAAJ,MAAAiB,SAAA,YAGAb,EAAAL,IAAAiB,KAEmB,qBAFnBJ,KAAAF,MAQQF,KAAAA,WAAW,IAAAU,EAAAnC,QAAAoC,YACPnB,MAAAF,KAAIY,MACJU,GAAAvB,EAAIY,KAAAA,iBACAL,gBAAA,WACAA,KAAAA,UAICiB,WAJD,IAMAjB,KAAAA,WAAAA,QAAUY,KAKtBhB,SAAAA,WACAoB,MACAE,uBACIxB,KAAAE,MAAKuB,KAALvB,MAAAW,IAAA,QAAA,IACH,OAQTa,EAAUvC,EAAWC,QAgBrBC,oBAAqBC,EAAAL,QAAQM,uBAHjCmC,SAAA,WACI,MACA,2BACArC,KAAAA,MAAqBW,KAAAE,MAAAW,IAAA,QAAA,IAQb,OAMhBc,EAAAC,EAAAxC,QAIQsC,SAAA,WACA,MACAA,2BACI1B,KACIE,MAAAF,KAAAE,MAAAW,IAAA,QACMX,IAGb,OAWDJ,EAAiB6B,EAAiBvC,QAAlCU,gBAAiB,SAASC,GAI1BhB,EAAAa,UAAAE,gBAAAD,KAAAG,KAAAD,IAPR2B,SAAA,WAUY,MASZ,iCACA1B,KAAAE,MAAAF,KAAAE,MAAAW,IAAA,QAAA,IACIgB,OAQIA,EAAA1C,EAAAC,QAQCI,qBAAAF,EAAAL,QAAAQ,wBAAAL,QAhBT0C,kBAAAC,IAuBIL,SAAA,WACI,MACA,kCACAlC,KAAAA,MAAsBQ,KAAAE,MAAAW,IAAA,QAAA,IAClBiB,OAJ0CE,EADtD7C,EAAAC,QAsBID,qBAAoBA,EAAAA,QAAAA,wBADTC,QAEXwC,kBAAAA,IAbIF,SAAU,WACN,MACI,kCACC1B,KAAKE,MAAQF,KAAKE,MAAMW,IAAI,QAAU,IACvC,kBAQZ1B,mBAAoBA,EACpByC,uBAAwBA,EACxBD,uBAAwBA,EACxBE,8BAA+BA,EAC/BG,8BAA+BA","file":"../../../scripts/mvc/collection/collection-view-edit.js","sourcesContent":["import DC_VIEW from \"mvc/collection/collection-view\";\nimport DC_MODEL from \"mvc/collection/collection-model\";\nimport DC_EDIT from \"mvc/collection/collection-li-edit\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport TAGS from \"mvc/tag\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport _l from \"utils/localization\";\nimport \"ui/editable-text\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class editable View/Controller for a dataset collection.\n */\nvar _super = DC_VIEW.CollectionView;\nvar CollectionViewEdit = _super.extend(\n    /** @lends CollectionView.prototype */ {\n        //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n\n        /** logger used to record this.log messages, commonly set to console */\n        //logger              : console,\n\n        /** sub view class used for datasets */\n        DatasetDCEViewClass: DC_EDIT.DatasetDCEListItemEdit,\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit,\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n        },\n\n        /** In this override, make the collection name editable\n     */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            _super.prototype._setUpBehaviors.call(this, $where);\n            if (!this.model) {\n                return;\n            }\n\n            // anon users shouldn't have access to any of the following\n            if (!Galaxy.user || Galaxy.user.isAnonymous()) {\n                return;\n            }\n\n            this.tagsEditorShown = true;\n\n            //TODO: extract\n            var panel = this;\n\n            var nameSelector = \"> .controls .name\";\n            $where\n                .find(nameSelector)\n                .attr(\"title\", _l(\"Click to rename collection\"))\n                .tooltip({ placement: \"bottom\" })\n                .make_text_editable({\n                    on_finish: function(newName) {\n                        var previousName = panel.model.get(\"name\");\n                        if (newName && newName !== previousName) {\n                            panel.$el.find(nameSelector).text(newName);\n                            panel.model.save({ name: newName }).fail(() => {\n                                panel.$el\n                                    .find(nameSelector)\n                                    .text(panel.model.previous(\"name\"));\n                            });\n                        } else {\n                            panel.$el.find(nameSelector).text(previousName);\n                        }\n                    }\n                });\n            this.tagsEditor = new TAGS.TagsEditor({\n                model: this.model,\n                el: $where.find(\".tags-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                usePrompt: false\n            });\n            this.tagsEditor.toggle(true);\n        },\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"CollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListCollectionViewEdit = CollectionViewEdit.extend(\n    /** @lends ListCollectionView.prototype */ {\n        //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n        /** sub view class used for datasets */\n        DatasetDCEViewClass: DC_EDIT.DatasetDCEListItemEdit,\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"ListCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class Editable, read-only View/Controller for a dataset collection. */\nvar PairCollectionViewEdit = ListCollectionViewEdit.extend(\n    /** @lends PairCollectionViewEdit.prototype */ {\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"PairCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class Editable (roughly since these collections are immutable),\n *  View/Controller for a dataset collection.\n */\nvar NestedPairCollectionViewEdit = PairCollectionViewEdit.extend(\n    /** @lends NestedPairCollectionViewEdit.prototype */ {\n        /** Override to remove the editable text from the name/identifier - these collections are considered immutable */\n        _setUpBehaviors: function($where) {\n            _super.prototype._setUpBehaviors.call(this, $where);\n        },\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"NestedPairCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class editable, View/Controller for a list of pairs dataset collection. */\nvar ListOfPairsCollectionViewEdit = CollectionViewEdit.extend(\n    /** @lends ListOfPairsCollectionView.prototype */ {\n        //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit.extend({\n            foldoutPanelClass: NestedPairCollectionViewEdit\n        }),\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"ListOfPairsCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class View/Controller for a list of lists dataset collection. */\nvar ListOfListsCollectionViewEdit = CollectionViewEdit.extend(\n    /** @lends ListOfListsCollectionView.prototype */ {\n        //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit.extend({\n            foldoutPanelClass: NestedPairCollectionViewEdit\n        }),\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"ListOfListsCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    CollectionViewEdit: CollectionViewEdit,\n    ListCollectionViewEdit: ListCollectionViewEdit,\n    PairCollectionViewEdit: PairCollectionViewEdit,\n    ListOfPairsCollectionViewEdit: ListOfPairsCollectionViewEdit,\n    ListOfListsCollectionViewEdit: ListOfListsCollectionViewEdit\n};\n"]}