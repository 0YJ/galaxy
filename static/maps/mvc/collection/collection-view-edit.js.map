{"version":3,"sources":["mvc/collection/collection-view-edit.js"],"names":["_collectionView","require","_collectionModel","_collectionLiEdit","_baseMvc","_tag","_faIconButton","_localization","_super","_collectionView2","default","CollectionView","CollectionViewEdit","extend","DatasetDCEViewClass","_collectionLiEdit2","DatasetDCEListItemEdit","NestedDCDCEViewClass","NestedDCDCEListItemEdit","initialize","attributes","prototype","call","this","_setUpBehaviors","$where","$el","model","Galaxy","user","isAnonymous","tagsEditorShown","find","attr","_localization2","tooltip","placement","make_text_editable","on_finish","newName","previousName","get","panel","text","save","name","fail","previous","tagsEditor","_tag2","TagsEditor","el","render","nameSelector","ListCollectionViewEdit","toggle","toString","NestedPairCollectionViewEdit","PairCollectionViewEdit","ListOfPairsCollectionViewEdit","foldoutPanelClass","ListOfListsCollectionViewEdit"],"mappings":"4IAAA,IAAAA,gBAAAC,QAAA,2FACAC,iBAAAD,QAAA,8FACAE,kBAAAF,QAAA,kGACAG,SAAAH,QAAA,2DACAI,KAAAJ,QAAA,8CACAK,cAAAL,QAAA,0EALAM,cAAAN,QAAA,2EAOAA,QAAA,oBAQA,IAAIO,OAASC,iBAAAC,QAAQC,eACjBC,mBAAqBJ,OAAOK,QAQxBC,oBAAqBC,mBAAAL,QAAQM,uBAnBrCC,qBAAAF,mBAAAL,QAAAQ,wBA2BQC,WAAY,SAASC,GACjBZ,OAAOa,UAAUF,WAAWG,KAAKC,KAAMH,IAxBnDI,gBAAA,SAAAC,GAgCY,GAFAA,EAASA,GAAUF,KAAKG,IACxBlB,OAAOa,UAAUG,gBAAgBF,KAAKC,KAAME,GACvCF,KAAKI,OAxBlBC,OAAAC,OAAAD,OAAuCC,KAAAC,cAAvC,CAIIP,KAAAQ,iBAAA,EAGAjB,IAAAA,EAAAA,KAEAG,EA8BSe,KA/BT,qBAGAC,KAAA,SAAA,EAAAC,eAAAxB,SAAA,+BACAyB,SAAAC,UAAA,WA8BSC,oBACGC,UAAW,SAASC,GA5BpB,IAAAC,EAASpB,EAAYO,MAAAc,IAAA,QACZtB,GAAWG,IAAWF,GAhBRsB,EAAAhB,IAAAM,KAQnC,qBARmCW,KAAAJ,GA+CfG,EAAMf,MA5B1BiB,MAAAC,KAAAN,IA8ByBO,KAAK,WA5BbJ,EAAAhB,IACbM,KAdJ,qBAeqCV,KAAKoB,EAAMjB,MAA5CsB,SAAA,YAGCL,EAAAhB,IAAAM,KAlBL,qBAkBKW,KAAAH,MAIGjB,KAAAyB,WAAA,IAAAC,MAAAvC,QAAAwC,YACHvB,MAAAJ,KAAAI,MA8BGwB,GAAI1B,EAAOO,KAAK,iBA5BfD,gBAAkB,WA8BfR,KAAK6B,UA3BTV,WAAJ,IAEAjB,KACKO,WAAKqB,QACLpB,KAOWS,SAAAA,WAGQA,MAGH,uBARTnB,KAAAI,MASOJ,KAAAI,MAAAc,IAAA,QAAA,IACHC,OAQRY,uBAAA1C,mBAAAC,QAIRC,oBAAgByC,mBAAAA,QAAhBvC,uBAIJwC,SAAA,WACAA,MAEQ,2BAIPjC,KAAAI,MAAAJ,KAAAI,MAAAc,IAAA,QAAA,IA/ET,OAyFQ3B,uBAAqBwC,uBAAQtC,QAI7BwC,SAAU,WACN,MAKH,2BAdTjC,KAAAI,MAAAJ,KAAAI,MAAAc,IAAA,QAAA,IA4BgB,OARhBgB,6BAAAC,uBAAA7C,QAeAW,gBAAA,SAAAC,GAOYjB,OAAOa,UAAUG,gBAAgBF,KAAKC,KAAME,IADhDD,SAAAA,WACIhB,MAH6C,iCAWxCe,KAAKI,MAAQJ,KAAKI,MAAMc,IAAI,QAAU,IAL/C,OAaRkB,8BAAA/C,mBAAAC,QAIQI,qBAAAF,mBAAAL,QAAAQ,wBAAAL,QACAI,kBAAsBwC,+BAKtBD,SAAA,WACAA,MAEQ,kCAIPjC,KAAAI,MAAAJ,KAAAI,MAAAc,IAAA,QAAA,IAhBT,OA0BQxB,8BAAsBL,mBAAQM,QAI9BD,qBAAAF,mBAAAL,QAAAQ,wBAAAL,QACA+C,kBAAAH,+BACAD,SAAU,WAUlB,MARgB,kCAUZ5C,KAAAA,MAAoBA,KAAAA,MAAAA,IADT,QAAA,IAEX0C,wBADA1C,mBAAoBA,mBACpB0C,uBAAwBA,uBACxBI,uBAAwBA,uBACxBC,8BAA+BA,8BAC/BE,8BAA+BA","file":"../../../scripts/mvc/collection/collection-view-edit.js","sourcesContent":["import DC_VIEW from \"mvc/collection/collection-view\";\nimport DC_MODEL from \"mvc/collection/collection-model\";\nimport DC_EDIT from \"mvc/collection/collection-li-edit\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport TAGS from \"mvc/tag\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport _l from \"utils/localization\";\nimport \"ui/editable-text\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class editable View/Controller for a dataset collection.\n */\nvar _super = DC_VIEW.CollectionView;\nvar CollectionViewEdit = _super.extend(\n    /** @lends CollectionView.prototype */ {\n        //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n\n        /** logger used to record this.log messages, commonly set to console */\n        //logger              : console,\n\n        /** sub view class used for datasets */\n        DatasetDCEViewClass: DC_EDIT.DatasetDCEListItemEdit,\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit,\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n        },\n\n        /** In this override, make the collection name editable\n     */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            _super.prototype._setUpBehaviors.call(this, $where);\n            if (!this.model) {\n                return;\n            }\n\n            // anon users shouldn't have access to any of the following\n            if (!Galaxy.user || Galaxy.user.isAnonymous()) {\n                return;\n            }\n\n            this.tagsEditorShown = true;\n\n            //TODO: extract\n            var panel = this,\n                nameSelector = \"> .controls .name\";\n            $where\n                .find(nameSelector)\n                .attr(\"title\", _l(\"Click to rename collection\"))\n                .tooltip({ placement: \"bottom\" })\n                .make_text_editable({\n                    on_finish: function(newName) {\n                        var previousName = panel.model.get(\"name\");\n                        if (newName && newName !== previousName) {\n                            panel.$el.find(nameSelector).text(newName);\n                            panel.model\n                                .save({ name: newName })\n                                .fail(function() {\n                                    panel.$el\n                                        .find(nameSelector)\n                                        .text(panel.model.previous(\"name\"));\n                                });\n                        } else {\n                            panel.$el.find(nameSelector).text(previousName);\n                        }\n                    }\n                });\n            this.tagsEditor = new TAGS.TagsEditor({\n                model: this.model,\n                el: $where.find(\".tags-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                usePrompt: false\n            });\n            this.tagsEditor.toggle(true);\n        },\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"CollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListCollectionViewEdit = CollectionViewEdit.extend(\n    /** @lends ListCollectionView.prototype */ {\n        //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n        /** sub view class used for datasets */\n        DatasetDCEViewClass: DC_EDIT.DatasetDCEListItemEdit,\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"ListCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class Editable, read-only View/Controller for a dataset collection. */\nvar PairCollectionViewEdit = ListCollectionViewEdit.extend(\n    /** @lends PairCollectionViewEdit.prototype */ {\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"PairCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class Editable (roughly since these collections are immutable),\n *  View/Controller for a dataset collection.\n */\nvar NestedPairCollectionViewEdit = PairCollectionViewEdit.extend(\n    /** @lends NestedPairCollectionViewEdit.prototype */ {\n        /** Override to remove the editable text from the name/identifier - these collections are considered immutable */\n        _setUpBehaviors: function($where) {\n            _super.prototype._setUpBehaviors.call(this, $where);\n        },\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"NestedPairCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class editable, View/Controller for a list of pairs dataset collection. */\nvar ListOfPairsCollectionViewEdit = CollectionViewEdit.extend(\n    /** @lends ListOfPairsCollectionView.prototype */ {\n        //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit.extend({\n            foldoutPanelClass: NestedPairCollectionViewEdit\n        }),\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"ListOfPairsCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n// =============================================================================\n/** @class View/Controller for a list of lists dataset collection. */\nvar ListOfListsCollectionViewEdit = CollectionViewEdit.extend(\n    /** @lends ListOfListsCollectionView.prototype */ {\n        //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit.extend({\n            foldoutPanelClass: NestedPairCollectionViewEdit\n        }),\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return (\n                \"ListOfListsCollectionViewEdit(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    CollectionViewEdit: CollectionViewEdit,\n    ListCollectionViewEdit: ListCollectionViewEdit,\n    PairCollectionViewEdit: PairCollectionViewEdit,\n    ListOfPairsCollectionViewEdit: ListOfPairsCollectionViewEdit,\n    ListOfListsCollectionViewEdit: ListOfListsCollectionViewEdit\n};\n"]}