{"version":3,"sources":["mvc/collection/collection-view-edit.js"],"names":["define","DC_VIEW","DC_MODEL","DC_EDIT","BASE_MVC","_l","_super","CollectionView","CollectionViewEdit","extend","DatasetDCEViewClass","DatasetDCEListItemEdit","NestedDCDCEViewClass","NestedDCDCEListItemEdit","initialize","attributes","prototype","call","this","_setUpBehaviors","$where","$el","model","Galaxy","user","isAnonymous","panel","find","attr","tooltip","placement","make_text_editable","on_finish","newName","previousName","get","text","save","name","fail","previous","toString","ListCollectionViewEdit","PairCollectionViewEdit","NestedPairCollectionViewEdit","ListOfPairsCollectionViewEdit","foldoutPanelClass","ListOfListsCollectionViewEdit"],"mappings":"AAAAA,QACI,iCACA,kCACA,oCACA,eACA,qBACA,oBACD,SAAUC,EAASC,EAAUC,EAASC,EAAUC,GAEnD,YAOA,IAAIC,GAASL,EAAQM,eACjBC,EAAqBF,EAAOG,QAQ5BC,oBAAsBP,EAAQQ,uBAE9BC,qBAAsBT,EAAQU,wBAM9BC,WAAa,SAAUC,GACnBT,EAAOU,UAAUF,WAAWG,KAAMC,KAAMH,IAK5CI,gBAAkB,SAAUC,GAGxB,GAFAA,EAASA,GAAUF,KAAKG,IACxBf,EAAOU,UAAUG,gBAAgBF,KAAMC,KAAME,GACxCF,KAAKI,OAGLC,OAAOC,OAAQD,OAAOC,KAAKC,cAAhC,CAKA,GAAIC,GAAQR,IAEZE,GAAOO,KADY,qBAEdC,KAAM,QAASvB,EAAI,+BACnBwB,SAAUC,UAAW,WACrBC,oBACGC,UAAW,SAAUC,GACjB,GAAIC,GAAeR,EAAMJ,MAAMa,IAAK,OAChCF,IAAWA,IAAYC,GACvBR,EAAML,IAAIM,KARP,qBAQ4BS,KAAMH,GACrCP,EAAMJ,MAAMe,MAAOC,KAAML,IACpBM,KAAM,WACHb,EAAML,IAAIM,KAXf,qBAWoCS,KAAMV,EAAMJ,MAAMkB,SAAU,YAGnEd,EAAML,IAAIM,KAdP,qBAc4BS,KAAMF,QAQzDO,SAAc,WACV,MAAO,uBAA2BvB,KAAW,MAAIA,KAAKI,MAAMa,IAAK,QAAU,IAAU,OAOzFO,EAAyBlC,EAAmBC,QAK5CC,oBAAsBP,EAAQQ,uBAI9B8B,SAAc,WACV,MAAO,2BAA+BvB,KAAW,MAAIA,KAAKI,MAAMa,IAAK,QAAU,IAAU,OAO7FQ,EAAyBD,EAAuBjC,QAKhDgC,SAAc,WACV,MAAO,2BAA+BvB,KAAW,MAAIA,KAAKI,MAAMa,IAAK,QAAU,IAAU,OAS7FS,EAA+BD,EAAuBlC,QAItDU,gBAAkB,SAAUC,GACxBd,EAAOU,UAAUG,gBAAgBF,KAAMC,KAAME,IAKjDqB,SAAc,WACV,MAAO,iCAAqCvB,KAAW,MAAIA,KAAKI,MAAMa,IAAK,QAAU,IAAU,MA4CnG,QACI3B,mBAAkCA,EAClCkC,uBAAkCA,EAClCC,uBAAkCA,EAClCE,8BAzC4BrC,EAAmBC,QAKnDG,qBAAuBT,EAAQU,wBAAwBJ,QACnDqC,kBAAoBF,IAKxBH,SAAc,WACV,MAAO,kCAAsCvB,KAAW,MAAIA,KAAKI,MAAMa,IAAK,QAAU,IAAU,OA8BhGY,8BAvB4BvC,EAAmBC,QAKnDG,qBAAuBT,EAAQU,wBAAwBJ,QACnDqC,kBAAoBF,IAKxBH,SAAc,WACV,MAAO,kCAAsCvB,KAAW,MAAIA,KAAKI,MAAMa,IAAK,QAAU,IAAU","file":"../../../scripts/mvc/collection/collection-view-edit.js","sourcesContent":["define([\n    \"mvc/collection/collection-view\",\n    \"mvc/collection/collection-model\",\n    \"mvc/collection/collection-li-edit\",\n    \"mvc/base-mvc\",\n    \"utils/localization\",\n    \"ui/editable-text\",\n], function( DC_VIEW, DC_MODEL, DC_EDIT, BASE_MVC, _l ){\n\n'use strict';\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class editable View/Controller for a dataset collection.\n */\nvar _super = DC_VIEW.CollectionView;\nvar CollectionViewEdit = _super.extend(\n/** @lends CollectionView.prototype */{\n    //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n\n    /** logger used to record this.log messages, commonly set to console */\n    //logger              : console,\n\n    /** sub view class used for datasets */\n    DatasetDCEViewClass : DC_EDIT.DatasetDCEListItemEdit,\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit,\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n    initialize : function( attributes ){\n        _super.prototype.initialize.call( this, attributes );\n    },\n\n    /** In this override, make the collection name editable\n     */\n    _setUpBehaviors : function( $where ){\n        $where = $where || this.$el;\n        _super.prototype._setUpBehaviors.call( this, $where );\n        if( !this.model ){ return; }\n\n        // anon users shouldn't have access to any of the following\n        if( !Galaxy.user || Galaxy.user.isAnonymous() ){\n            return;\n        }\n\n        //TODO: extract\n        var panel = this,\n            nameSelector = '> .controls .name';\n        $where.find( nameSelector )\n            .attr( 'title', _l( 'Click to rename collection' ) )\n            .tooltip({ placement: 'bottom' })\n            .make_text_editable({\n                on_finish: function( newName ){\n                    var previousName = panel.model.get( 'name' );\n                    if( newName && newName !== previousName ){\n                        panel.$el.find( nameSelector ).text( newName );\n                        panel.model.save({ name: newName })\n                            .fail( function(){\n                                panel.$el.find( nameSelector ).text( panel.model.previous( 'name' ) );\n                            });\n                    } else {\n                        panel.$el.find( nameSelector ).text( previousName );\n                    }\n                }\n            });\n    },\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'CollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListCollectionViewEdit = CollectionViewEdit.extend(\n/** @lends ListCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for datasets */\n    DatasetDCEViewClass : DC_EDIT.DatasetDCEListItemEdit,\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class Editable, read-only View/Controller for a dataset collection. */\nvar PairCollectionViewEdit = ListCollectionViewEdit.extend(\n/** @lends PairCollectionViewEdit.prototype */{\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'PairCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class Editable (roughly since these collections are immutable),\n *  View/Controller for a dataset collection.\n */\nvar NestedPairCollectionViewEdit = PairCollectionViewEdit.extend(\n/** @lends NestedPairCollectionViewEdit.prototype */{\n\n    /** Override to remove the editable text from the name/identifier - these collections are considered immutable */\n    _setUpBehaviors : function( $where ){\n        _super.prototype._setUpBehaviors.call( this, $where );\n    },\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'NestedPairCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class editable, View/Controller for a list of pairs dataset collection. */\nvar ListOfPairsCollectionViewEdit = CollectionViewEdit.extend(\n/** @lends ListOfPairsCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass : DC_EDIT.NestedDCDCEListItemEdit.extend({\n        foldoutPanelClass : NestedPairCollectionViewEdit\n    }),\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListOfPairsCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class View/Controller for a list of lists dataset collection. */\nvar ListOfListsCollectionViewEdit = CollectionViewEdit.extend(\n/** @lends ListOfListsCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass : DC_EDIT.NestedDCDCEListItemEdit.extend({\n        foldoutPanelClass : NestedPairCollectionViewEdit\n    }),\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListOfListsCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n//==============================================================================\n    return {\n        CollectionViewEdit              : CollectionViewEdit,\n        ListCollectionViewEdit          : ListCollectionViewEdit,\n        PairCollectionViewEdit          : PairCollectionViewEdit,\n        ListOfPairsCollectionViewEdit   : ListOfPairsCollectionViewEdit,\n        ListOfListsCollectionViewEdit   : ListOfListsCollectionViewEdit\n    };\n});\n"]}