{"version":3,"sources":["mvc/collection/collection-view-edit.js"],"names":["define","DC_VIEW","DC_MODEL","DC_EDIT","BASE_MVC","TAGS","faIconButton","_l","_super","CollectionView","CollectionViewEdit","extend","DatasetDCEViewClass","DatasetDCEListItemEdit","initialize","NestedDCDCEListItemEdit","_setUpBehaviors","attributes","$where","$el","this","prototype","user","isAnonymous","model","Galaxy","tagsEditorShown","panel","newName","make_text_editable","on_finish","nameSelector","get","text","previousName","find","save","name","fail","previous","render","tagsEditor","toggle","TagsEditor","el","onshowFirstTime","usePrompt","toString","ListCollectionViewEdit","PairCollectionViewEdit","NestedPairCollectionViewEdit","call","ListOfPairsCollectionViewEdit","NestedDCDCEViewClass","foldoutPanelClass","ListOfListsCollectionViewEdit"],"mappings":"aAAAA,QACI,iCADJA,kCAGI,oCAQJ,eACA,UANI,oBACA,qBACA,oBAQJ,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAQI,IAAAC,EAAAP,EAAAQ,eALAC,EAAqBF,EAAOG,QAQ5BC,oBAAsBT,EAAQU,uBAQ9BC,qBAAaX,EAAAY,wBAMbC,WAAAA,SAAkBC,GACdC,EAAAA,UAASA,WAAeC,KAAxBC,KAAAH,IADJD,gBAAkB,SAAUE,GAOpB,GAFJA,EAAAA,GAAAE,KAAAD,IACAX,EAAAa,UAAYC,gBAAeA,KAAKC,KAAAA,GAC5BH,KAAAI,OAGJC,OAAKC,OAAAA,OAAkBJ,KAAvBC,cAAA,CAGAH,KAAAM,iBACmB,EAMP,IAAAC,EAAAP,KAEIO,EAAAA,KADAC,qBAEAD,KAAAA,QAAAA,EAAMH,+BAEEG,SAAAA,UAAMR,WACTU,oBACRC,UAAM,SAAAF,GACHD,IAAAA,EAAgBI,EAAAA,MAAhBC,IAA+BC,QAClCL,GAAAA,IAAAM,GACJP,EAAAR,IAAAgB,KATOP,qBASPK,KAAAL,GAfTD,EAAAH,MAAAY,MAAAC,KAAAT,IAiBAU,KAAsBjC,WACKmB,EADWL,IAAAgB,KAXtBP,qBAWsBK,KAAAN,EAAAH,MAAAe,SAAA,YAGJZ,EAAKa,IAALL,KAdlBP,qBAckBK,KAAAC,MAGlCd,KAAAqB,WAAKA,IAAWC,EAAQC,YA3DMnB,MAAAJ,KAAAI,MAuD1BoB,GAAkB1B,EAAOiB,KAAM,iBAOvCU,gBAAA,WAAAzB,KAAAoB,UACAM,WAAA,IAEI1B,KAAAqB,WAAOC,QAAA,KAMfK,SAAA,WACIC,MAAAA,uBAAyBtC,KAAAA,MAAmBC,KAAnBa,MAAAQ,IAAA,QAAA,IAAA,OAOzBgB,EAAAtC,EAAAC,QANsCC,oBAD1CT,EAAAU,uBAiBAkC,SAAIE,WACJ,MAAA,2BAAA7B,KAA8CI,MAAAJ,KAAAI,MAAAQ,IAAA,QAAA,IAAA,OAAAiB,EAD9CD,EAAArC,QAKIoC,SAAc,WAUdG,MAAAA,2BAA+BD,KAAAA,MAAAA,KAAuBtC,MAAvBqB,IAAA,QAAA,IAAA,OAS/BkB,EAAAD,EAAAtC,QARgDK,gBADpD,SAAAE,GAKQV,EAAOa,UAAUL,gBAAgBmC,KAAM/B,KAAMF,IAKjD6B,SAAc,WAWd,MAAA,iCAAA3B,KAAAI,MAAAJ,KAAAI,MAAAQ,IAAA,QAAA,IAAA,OAkCA,OACItB,mBAAkCA,EAClCsC,uBAAkCA,EAClCC,uBAAkCA,EAClCG,8BA/BJ1C,EAAAC,QALA0C,qBAAuBlD,EAAQY,wBAAwBJ,QAY3D2C,kBAAAJ,IAKIH,SAAA,WACA,MAAA,kCAAA3B,KAAAI,MAAAJ,KAAAI,MAAAQ,IAAA,QAAA,IAAA,OAmBIuB,8BAZU7C,EAAUC,QAM5B0C,qBAAAlD,EAAAY,wBAAAJ,QACI2C,kBAAOJ,IAKHK,SAAAA,WALJ,MAAA,kCAAAnC,KAAAI,MAAAJ,KAAAI,MAAAQ,IAAA,QAAA,IAAA","file":"../../../scripts/mvc/collection/collection-view-edit.js","sourcesContent":["define([\n    \"mvc/collection/collection-view\",\n    \"mvc/collection/collection-model\",\n    \"mvc/collection/collection-li-edit\",\n    \"mvc/base-mvc\",\n    \"mvc/tag\",\n    \"ui/fa-icon-button\",\n    \"utils/localization\",\n    \"ui/editable-text\",\n], function( DC_VIEW, DC_MODEL, DC_EDIT, BASE_MVC, TAGS, faIconButton, _l ){\n\n'use strict';\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class editable View/Controller for a dataset collection.\n */\nvar _super = DC_VIEW.CollectionView;\nvar CollectionViewEdit = _super.extend(\n/** @lends CollectionView.prototype */{\n    //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n\n    /** logger used to record this.log messages, commonly set to console */\n    //logger              : console,\n\n    /** sub view class used for datasets */\n    DatasetDCEViewClass : DC_EDIT.DatasetDCEListItemEdit,\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit,\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n    initialize : function( attributes ){\n        _super.prototype.initialize.call( this, attributes );\n    },\n\n    /** In this override, make the collection name editable\n     */\n    _setUpBehaviors : function( $where ){\n        $where = $where || this.$el;\n        _super.prototype._setUpBehaviors.call( this, $where );\n        if( !this.model ){ return; }\n\n        // anon users shouldn't have access to any of the following\n        if( !Galaxy.user || Galaxy.user.isAnonymous() ){\n            return;\n        }\n\n        this.tagsEditorShown = true;\n\n        //TODO: extract\n        var panel = this,\n            nameSelector = '> .controls .name';\n        $where.find( nameSelector )\n            .attr( 'title', _l( 'Click to rename collection' ) )\n            .tooltip({ placement: 'bottom' })\n            .make_text_editable({\n                on_finish: function( newName ){\n                    var previousName = panel.model.get( 'name' );\n                    if( newName && newName !== previousName ){\n                        panel.$el.find( nameSelector ).text( newName );\n                        panel.model.save({ name: newName })\n                            .fail( function(){\n                                panel.$el.find( nameSelector ).text( panel.model.previous( 'name' ) );\n                            });\n                    } else {\n                        panel.$el.find( nameSelector ).text( previousName );\n                    }\n                }\n            });\n        this.tagsEditor = new TAGS.TagsEditor({\n            model           : this.model,\n            el              : $where.find( '.tags-display' ),\n            onshowFirstTime : function(){ this.render(); },\n            usePrompt       : false\n        });\n        this.tagsEditor.toggle( true );\n    },\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'CollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class non-editable, read-only View/Controller for a dataset collection. */\nvar ListCollectionViewEdit = CollectionViewEdit.extend(\n/** @lends ListCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for datasets */\n    DatasetDCEViewClass : DC_EDIT.DatasetDCEListItemEdit,\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class Editable, read-only View/Controller for a dataset collection. */\nvar PairCollectionViewEdit = ListCollectionViewEdit.extend(\n/** @lends PairCollectionViewEdit.prototype */{\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'PairCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class Editable (roughly since these collections are immutable),\n *  View/Controller for a dataset collection.\n */\nvar NestedPairCollectionViewEdit = PairCollectionViewEdit.extend(\n/** @lends NestedPairCollectionViewEdit.prototype */{\n\n    /** Override to remove the editable text from the name/identifier - these collections are considered immutable */\n    _setUpBehaviors : function( $where ){\n        _super.prototype._setUpBehaviors.call( this, $where );\n    },\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'NestedPairCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class editable, View/Controller for a list of pairs dataset collection. */\nvar ListOfPairsCollectionViewEdit = CollectionViewEdit.extend(\n/** @lends ListOfPairsCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass : DC_EDIT.NestedDCDCEListItemEdit.extend({\n        foldoutPanelClass : NestedPairCollectionViewEdit\n    }),\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListOfPairsCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n// =============================================================================\n/** @class View/Controller for a list of lists dataset collection. */\nvar ListOfListsCollectionViewEdit = CollectionViewEdit.extend(\n/** @lends ListOfListsCollectionView.prototype */{\n\n    //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n    /** sub view class used for nested collections */\n    NestedDCDCEViewClass : DC_EDIT.NestedDCDCEListItemEdit.extend({\n        foldoutPanelClass : NestedPairCollectionViewEdit\n    }),\n\n    // ........................................................................ misc\n    /** string rep */\n    toString    : function(){\n        return 'ListOfListsCollectionViewEdit(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n//==============================================================================\n    return {\n        CollectionViewEdit              : CollectionViewEdit,\n        ListCollectionViewEdit          : ListCollectionViewEdit,\n        PairCollectionViewEdit          : PairCollectionViewEdit,\n        ListOfPairsCollectionViewEdit   : ListOfPairsCollectionViewEdit,\n        ListOfListsCollectionViewEdit   : ListOfListsCollectionViewEdit\n    };\n});\n"]}