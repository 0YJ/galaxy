{"version":3,"sources":["mvc/collection/collection-li.js"],"names":["FoldoutListItemView","_listItem2","default","ListItemView","DCListItemView","extend","className","prototype","id","this","model","get","join","initialize","attributes","linkTarget","hasUser","call","_setUpListeners","options","_","has","changed","render","$","replaceWith","_renderSubtitle","subtitle","toJSON","_getFoldoutPanelOptions","$selector","templates","warnings","modelString","error","_baseMvc2","wrapTemplate","_localization2","purged","deleted","subtitleTemplate","titleBarTemplate","DCEListItemView","toString","titleBar","DatasetDCEListItemView","logger","log","view","inReadyState","hasDetails","_datasetLi2","DatasetListItemView","_swapNewRender","NestedDCDCEListItemView","jQuery","when","$newRender","state","$el","addClass"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-li.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport DATASET_LI from \"mvc/dataset/dataset-li\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar FoldoutListItemView = LIST_ITEM.FoldoutListItemView;\n\nvar ListItemView = LIST_ITEM.ListItemView;\n/** @class Read only view for DatasetCollection.\n */\nvar DCListItemView = FoldoutListItemView.extend(\n    /** @lends DCListItemView.prototype */ {\n        className:\n            FoldoutListItemView.prototype.className + \" dataset-collection\",\n        id: function() {\n            return [\"dataset_collection\", this.model.get(\"id\")].join(\"-\");\n        },\n\n        /** override to add linkTarget */\n        initialize: function(attributes) {\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n            this.hasUser = attributes.hasUser;\n            FoldoutListItemView.prototype.initialize.call(this, attributes);\n        },\n\n        /** event listeners */\n        _setUpListeners: function() {\n            FoldoutListItemView.prototype._setUpListeners.call(this);\n            this.listenTo(this.model, \"change\", function(model, options) {\n                // if the model has changed deletion status render it entirely\n                if (_.has(model.changed, \"deleted\")) {\n                    this.render();\n\n                    // if the model has been decorated after the fact with the element count,\n                    // render the subtitle where the count is displayed\n                } else if (_.has(model.changed, \"element_count\")) {\n                    this.$(\"> .title-bar .subtitle\").replaceWith(\n                        this._renderSubtitle()\n                    );\n                }\n            });\n        },\n\n        // ......................................................................... rendering\n        /** render a subtitle to show the user what sort of collection this is */\n        _renderSubtitle: function() {\n            return $(this.templates.subtitle(this.model.toJSON(), this));\n        },\n\n        // ......................................................................... foldout\n        /** override to add linktarget to sub-panel */\n        _getFoldoutPanelOptions: function() {\n            var options = FoldoutListItemView.prototype._getFoldoutPanelOptions.call(\n                this\n            );\n            return _.extend(options, {\n                linkTarget: this.linkTarget,\n                hasUser: this.hasUser\n            });\n        },\n\n        /** override to not catch sub-panel selectors */\n        $selector: function() {\n            return this.$(\"> .selector\");\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? this.model + \"\" : \"(no model)\";\n            return \"DCListItemView(\" + modelString + \")\";\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCListItemView.prototype.templates = (() => {\n    var warnings = _.extend(\n        {},\n        FoldoutListItemView.prototype.templates.warnings,\n        {\n            error: BASE_MVC.wrapTemplate([\n                // error during index fetch - show error on dataset\n                \"<% if( model.error ){ %>\",\n                '<div class=\"errormessagesmall\">',\n                _l(\"There was an error getting the data for this collection\"),\n                \": <%- model.error %>\",\n                \"</div>\",\n                \"<% } %>\"\n            ]),\n            purged: BASE_MVC.wrapTemplate([\n                \"<% if( model.purged ){ %>\",\n                '<div class=\"purged-msg warningmessagesmall\">',\n                _l(\"This collection has been deleted and removed from disk\"),\n                \"</div>\",\n                \"<% } %>\"\n            ]),\n            deleted: BASE_MVC.wrapTemplate([\n                // deleted not purged\n                \"<% if( model.deleted && !model.purged ){ %>\",\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                _l(\"This collection has been deleted\"),\n                \"</div>\",\n                \"<% } %>\"\n            ])\n        }\n    );\n\n    // use element identifier\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- collection.element_identifier || collection.name %></span>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            \"</div>\"\n        ],\n        \"collection\"\n    );\n\n    // use element identifier\n    var subtitleTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"subtitle\">',\n            '<% var countText = collection.element_count? ( collection.element_count + \" \" ) : \"\"; %>',\n            '<%        if( collection.collection_type === \"list\" ){ %>',\n            _l(\"a list of <%- countText %>datasets\"),\n            '<% } else if( collection.collection_type === \"paired\" ){ %>',\n            _l(\"a pair of datasets\"),\n            '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n            _l(\"a list of <%- countText %>dataset pairs\"),\n            '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n            _l(\"a list of <%- countText %>dataset lists\"),\n            \"<% } %>\",\n            \"</div>\"\n        ],\n        \"collection\"\n    );\n\n    return _.extend({}, FoldoutListItemView.prototype.templates, {\n        warnings: warnings,\n        titleBar: titleBarTemplate,\n        subtitle: subtitleTemplate\n    });\n})();\n\n//==============================================================================\n/** @class Read only view for DatasetCollectionElement.\n */\nvar DCEListItemView = ListItemView.extend(\n    /** @lends DCEListItemView.prototype */ {\n        /** add the DCE class to the list item */\n        className:\n            ListItemView.prototype.className + \" dataset-collection-element\",\n\n        /** set up */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(\"DCEListItemView.initialize:\", attributes);\n            ListItemView.prototype.initialize.call(this, attributes);\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? this.model + \"\" : \"(no model)\";\n            return \"DCEListItemView(\" + modelString + \")\";\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCEListItemView.prototype.templates = (() => {\n    // use the element identifier here - since that will persist and the user will need it\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- element.element_identifier %></span>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            \"</div>\"\n        ],\n        \"element\"\n    );\n\n    return _.extend({}, ListItemView.prototype.templates, {\n        titleBar: titleBarTemplate\n    });\n})();\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\nvar DatasetDCEListItemView = DATASET_LI.DatasetListItemView.extend(\n    /** @lends DatasetDCEListItemView.prototype */ {\n        className:\n            DATASET_LI.DatasetListItemView.prototype.className +\n            \" dataset-collection-element\",\n\n        /** set up */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(\"DatasetDCEListItemView.initialize:\", attributes);\n            DATASET_LI.DatasetListItemView.prototype.initialize.call(\n                this,\n                attributes\n            );\n        },\n\n        /** In this override, only get details if in the ready state.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n        _fetchModelDetails: function() {\n            var view = this;\n            if (view.model.inReadyState() && !view.model.hasDetails()) {\n                return view.model.fetch({ silent: true });\n            }\n            return jQuery.when();\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? this.model + \"\" : \"(no model)\";\n            return \"DatasetDCEListItemView(\" + modelString + \")\";\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetDCEListItemView.prototype.templates = (() => {\n    // use the element identifier here and not the dataset name\n    //TODO:?? can we steal the DCE titlebar?\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- element.element_identifier %></span>',\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"element\"\n    );\n\n    return _.extend({}, DATASET_LI.DatasetListItemView.prototype.templates, {\n        titleBar: titleBarTemplate\n    });\n})();\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\nvar NestedDCDCEListItemView = DCListItemView.extend(\n    /** @lends NestedDCDCEListItemView.prototype */ {\n        className:\n            DCListItemView.prototype.className + \" dataset-collection-element\",\n\n        /** In this override, add the state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            DCListItemView.prototype._swapNewRender.call(this, $newRender);\n            var state = this.model.get(\"state\") || \"ok\";\n            this.$el.addClass(\"state-\" + state);\n            return this.$el;\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? this.model + \"\" : \"(no model)\";\n            return \"NestedDCDCEListItemView(\" + modelString + \")\";\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    DCListItemView: DCListItemView,\n    DCEListItemView: DCEListItemView,\n    DatasetDCEListItemView: DatasetDCEListItemView,\n    NestedDCDCEListItemView: NestedDCDCEListItemView\n};\n"]}