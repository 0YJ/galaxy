{"version":3,"sources":["mvc/collection/collection-li.js"],"names":["define","LIST_ITEM","DATASET_LI","BASE_MVC","_l","FoldoutListItemView","ListItemView","DCListItemView","extend","className","prototype","id","this","model","get","join","initialize","attributes","linkTarget","hasUser","call","_setUpListeners","listenTo","options","_","has","changed","render","$","replaceWith","_renderSubtitle","templates","subtitle","toJSON","_getFoldoutPanelOptions","$selector","toString","warnings","error","wrapTemplate","purged","deleted","titleBarTemplate","subtitleTemplate","titleBar","DCEListItemView","logger","log","DatasetDCEListItemView","DatasetListItemView","_fetchModelDetails","view","inReadyState","hasDetails","fetch","silent","jQuery","when","NestedDCDCEListItemView","_swapNewRender","$newRender","state","$el","addClass"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-li.js","sourcesContent":["define([\n    \"mvc/list/list-item\",\n    \"mvc/dataset/dataset-li\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( LIST_ITEM, DATASET_LI, BASE_MVC, _l ){\n\n'use strict';\n//==============================================================================\nvar FoldoutListItemView = LIST_ITEM.FoldoutListItemView,\n    ListItemView = LIST_ITEM.ListItemView;\n/** @class Read only view for DatasetCollection.\n */\nvar DCListItemView = FoldoutListItemView.extend(\n/** @lends DCListItemView.prototype */{\n\n    className   : FoldoutListItemView.prototype.className + \" dataset-collection\",\n    id          : function(){\n        return [ 'dataset_collection', this.model.get( 'id' ) ].join( '-' );\n    },\n\n    /** override to add linkTarget */\n    initialize : function( attributes ){\n        this.linkTarget = attributes.linkTarget || '_blank';\n        this.hasUser = attributes.hasUser;\n        FoldoutListItemView.prototype.initialize.call( this, attributes );\n    },\n\n    /** event listeners */\n    _setUpListeners : function(){\n        FoldoutListItemView.prototype._setUpListeners.call( this );\n        this.listenTo( this.model, 'change', function( model, options ){\n            // if the model has changed deletion status render it entirely\n            if( _.has( model.changed, 'deleted' ) ){\n                this.render();\n\n            // if the model has been decorated after the fact with the element count,\n            // render the subtitle where the count is displayed\n            } else if( _.has( model.changed, 'element_count' ) ){\n                this.$( '> .title-bar .subtitle' ).replaceWith( this._renderSubtitle() );\n            }\n        });\n    },\n\n    // ......................................................................... rendering\n    /** render a subtitle to show the user what sort of collection this is */\n    _renderSubtitle : function(){\n        return $( this.templates.subtitle( this.model.toJSON(), this ) );\n    },\n\n    // ......................................................................... foldout\n    /** override to add linktarget to sub-panel */\n    _getFoldoutPanelOptions : function(){\n        var options = FoldoutListItemView.prototype._getFoldoutPanelOptions.call( this );\n        return _.extend( options, {\n            linkTarget  : this.linkTarget,\n            hasUser     : this.hasUser\n        });\n    },\n\n    /** override to not catch sub-panel selectors */\n    $selector : function(){\n        return this.$( '> .selector' );\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'DCListItemView(' + modelString + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCListItemView.prototype.templates = (function(){\n\n    var warnings = _.extend( {}, FoldoutListItemView.prototype.templates.warnings, {\n        error : BASE_MVC.wrapTemplate([\n            // error during index fetch - show error on dataset\n            '<% if( model.error ){ %>',\n                '<div class=\"errormessagesmall\">',\n                    _l( 'There was an error getting the data for this collection' ), ': <%- model.error %>',\n                '</div>',\n            '<% } %>'\n        ]),\n        purged : BASE_MVC.wrapTemplate([\n            '<% if( model.purged ){ %>',\n                '<div class=\"purged-msg warningmessagesmall\">',\n                    _l( 'This collection has been deleted and removed from disk' ),\n                '</div>',\n            '<% } %>'\n        ]),\n        deleted : BASE_MVC.wrapTemplate([\n            // deleted not purged\n            '<% if( model.deleted && !model.purged ){ %>',\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l( 'This collection has been deleted' ),\n                '</div>',\n            '<% } %>'\n        ])\n    });\n\n    // use element identifier\n    var titleBarTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<div class=\"title\">',\n                '<span class=\"name\"><%- collection.element_identifier || collection.name %></span>',\n            '</div>',\n            '<div class=\"subtitle\"></div>',\n        '</div>'\n    ], 'collection' );\n\n    // use element identifier\n    var subtitleTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"subtitle\">',\n            '<% var countText = collection.element_count? ( collection.element_count + \" \" ) : \"\"; %>',\n            '<%        if( collection.collection_type === \"list\" ){ %>',\n                _l( 'a list of <%- countText %>datasets' ),\n            '<% } else if( collection.collection_type === \"paired\" ){ %>',\n                _l( 'a pair of datasets' ),\n            '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n                _l( 'a list of <%- countText %>dataset pairs' ),\n            '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n                _l( 'a list of <%- countText %>dataset lists' ),\n            '<% } %>',\n        '</div>'\n    ], 'collection' );\n\n    return _.extend( {}, FoldoutListItemView.prototype.templates, {\n        warnings    : warnings,\n        titleBar    : titleBarTemplate,\n        subtitle    : subtitleTemplate\n    });\n}());\n\n\n//==============================================================================\n/** @class Read only view for DatasetCollectionElement.\n */\nvar DCEListItemView = ListItemView.extend(\n/** @lends DCEListItemView.prototype */{\n\n    /** add the DCE class to the list item */\n    className   : ListItemView.prototype.className + \" dataset-collection-element\",\n\n    /** set up */\n    initialize  : function( attributes ){\n        if( attributes.logger ){ this.logger = this.model.logger = attributes.logger; }\n        this.log( 'DCEListItemView.initialize:', attributes );\n        ListItemView.prototype.initialize.call( this, attributes );\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'DCEListItemView(' + modelString + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCEListItemView.prototype.templates = (function(){\n\n    // use the element identifier here - since that will persist and the user will need it\n    var titleBarTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<div class=\"title\">',\n                '<span class=\"name\"><%- element.element_identifier %></span>',\n            '</div>',\n            '<div class=\"subtitle\"></div>',\n        '</div>'\n    ], 'element' );\n\n    return _.extend( {}, ListItemView.prototype.templates, {\n        titleBar : titleBarTemplate\n    });\n}());\n\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\nvar DatasetDCEListItemView = DATASET_LI.DatasetListItemView.extend(\n/** @lends DatasetDCEListItemView.prototype */{\n\n    className   : DATASET_LI.DatasetListItemView.prototype.className + \" dataset-collection-element\",\n\n    /** set up */\n    initialize  : function( attributes ){\n        if( attributes.logger ){ this.logger = this.model.logger = attributes.logger; }\n        this.log( 'DatasetDCEListItemView.initialize:', attributes );\n        DATASET_LI.DatasetListItemView.prototype.initialize.call( this, attributes );\n    },\n\n    /** In this override, only get details if in the ready state.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n    _fetchModelDetails : function(){\n        var view = this;\n        if( view.model.inReadyState() && !view.model.hasDetails() ){\n            return view.model.fetch({ silent: true });\n        }\n        return jQuery.when();\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'DatasetDCEListItemView(' + modelString + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetDCEListItemView.prototype.templates = (function(){\n\n    // use the element identifier here and not the dataset name\n    //TODO:?? can we steal the DCE titlebar?\n    var titleBarTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n                '<span class=\"name\"><%- element.element_identifier %></span>',\n            '</div>',\n        '</div>'\n    ], 'element' );\n\n    return _.extend( {}, DATASET_LI.DatasetListItemView.prototype.templates, {\n        titleBar : titleBarTemplate\n    });\n}());\n\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\nvar NestedDCDCEListItemView = DCListItemView.extend(\n/** @lends NestedDCDCEListItemView.prototype */{\n\n    className   : DCListItemView.prototype.className + \" dataset-collection-element\",\n\n    /** In this override, add the state as a class for use with state-based CSS */\n    _swapNewRender : function( $newRender ){\n        DCListItemView.prototype._swapNewRender.call( this, $newRender );\n        var state = this.model.get( 'state' ) || 'ok';\n        this.$el.addClass( 'state-' + state );\n        return this.$el;\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'NestedDCDCEListItemView(' + modelString + ')';\n    }\n});\n\n\n//==============================================================================\n    return {\n        DCListItemView          : DCListItemView,\n        DCEListItemView         : DCEListItemView,\n        DatasetDCEListItemView  : DatasetDCEListItemView,\n        NestedDCDCEListItemView : NestedDCDCEListItemView\n    };\n});\n"]}