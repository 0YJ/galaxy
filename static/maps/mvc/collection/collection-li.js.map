{"version":3,"sources":["mvc/collection/collection-li.js"],"names":["define","LIST_ITEM","DATASET_LI","BASE_MVC","_l","FoldoutListItemView","ListItemView","DCListItemView","extend","className","prototype","model","id","this","get","join","initialize","hasUser","attributes","call","_setUpListeners","listenTo","has","changed","options","_","render","$","replaceWith","_renderSubtitle","templates","subtitle","toJSON","_getFoldoutPanelOptions","linkTarget","$selector","toString","warnings","error","wrapTemplate","deleted","purged","titleBarTemplate","subtitleTemplate","titleBar","DCEListItemView","DatasetDCEListItemView","logger","log","_fetchModelDetails","DatasetListItemView","$el","view","inReadyState","hasDetails","fetch","silent","when","NestedDCDCEListItemView","_swapNewRender","$newRender","state","addClass"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-li.js","sourcesContent":["define([\n    \"mvc/list/list-item\",\n    \"mvc/dataset/dataset-li\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( LIST_ITEM, DATASET_LI, BASE_MVC, _l ){\n\n'use strict';\n//==============================================================================\nvar FoldoutListItemView = LIST_ITEM.FoldoutListItemView,\n    ListItemView = LIST_ITEM.ListItemView;\n/** @class Read only view for DatasetCollection.\n */\nvar DCListItemView = FoldoutListItemView.extend(\n/** @lends DCListItemView.prototype */{\n\n    className   : FoldoutListItemView.prototype.className + \" dataset-collection\",\n    id          : function(){\n        return [ 'dataset_collection', this.model.get( 'id' ) ].join( '-' );\n    },\n\n    /** override to add linkTarget */\n    initialize : function( attributes ){\n        this.linkTarget = attributes.linkTarget || '_blank';\n        this.hasUser = attributes.hasUser;\n        FoldoutListItemView.prototype.initialize.call( this, attributes );\n    },\n\n    /** event listeners */\n    _setUpListeners : function(){\n        FoldoutListItemView.prototype._setUpListeners.call( this );\n        this.listenTo( this.model, 'change', function( model, options ){\n            // if the model has changed deletion status render it entirely\n            if( _.has( model.changed, 'deleted' ) ){\n                this.render();\n\n            // if the model has been decorated after the fact with the element count,\n            // render the subtitle where the count is displayed\n            } else if( _.has( model.changed, 'element_count' ) ){\n                this.$( '> .title-bar .subtitle' ).replaceWith( this._renderSubtitle() );\n            }\n        });\n    },\n\n    // ......................................................................... rendering\n    /** render a subtitle to show the user what sort of collection this is */\n    _renderSubtitle : function(){\n        return $( this.templates.subtitle( this.model.toJSON(), this ) );\n    },\n\n    // ......................................................................... foldout\n    /** override to add linktarget to sub-panel */\n    _getFoldoutPanelOptions : function(){\n        var options = FoldoutListItemView.prototype._getFoldoutPanelOptions.call( this );\n        return _.extend( options, {\n            linkTarget  : this.linkTarget,\n            hasUser     : this.hasUser\n        });\n    },\n\n    /** override to not catch sub-panel selectors */\n    $selector : function(){\n        return this.$( '> .selector' );\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'DCListItemView(' + modelString + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCListItemView.prototype.templates = (function(){\n\n    var warnings = _.extend( {}, FoldoutListItemView.prototype.templates.warnings, {\n        error : BASE_MVC.wrapTemplate([\n            // error during index fetch - show error on dataset\n            '<% if( model.error ){ %>',\n                '<div class=\"errormessagesmall\">',\n                    _l( 'There was an error getting the data for this collection' ), ': <%- model.error %>',\n                '</div>',\n            '<% } %>'\n        ]),\n        purged : BASE_MVC.wrapTemplate([\n            '<% if( model.purged ){ %>',\n                '<div class=\"purged-msg warningmessagesmall\">',\n                    _l( 'This collection has been deleted and removed from disk' ),\n                '</div>',\n            '<% } %>'\n        ]),\n        deleted : BASE_MVC.wrapTemplate([\n            // deleted not purged\n            '<% if( model.deleted && !model.purged ){ %>',\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l( 'This collection has been deleted' ),\n                '</div>',\n            '<% } %>'\n        ])\n    });\n\n    // use element identifier\n    var titleBarTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<div class=\"title\">',\n                '<span class=\"name\"><%- collection.element_identifier || collection.name %></span>',\n            '</div>',\n            '<div class=\"subtitle\"></div>',\n        '</div>'\n    ], 'collection' );\n\n    // use element identifier\n    var subtitleTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"subtitle\">',\n            '<% var countText = collection.element_count? ( collection.element_count + \" \" ) : \"\"; %>',\n            '<%        if( collection.collection_type === \"list\" ){ %>',\n                _l( 'a list of <%- countText %>datasets' ),\n            '<% } else if( collection.collection_type === \"paired\" ){ %>',\n                _l( 'a pair of datasets' ),\n            '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n                _l( 'a list of <%- countText %>dataset pairs' ),\n            '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n                _l( 'a list of <%- countText %>dataset lists' ),\n            '<% } %>',\n        '</div>'\n    ], 'collection' );\n\n    return _.extend( {}, FoldoutListItemView.prototype.templates, {\n        warnings    : warnings,\n        titleBar    : titleBarTemplate,\n        subtitle    : subtitleTemplate\n    });\n}());\n\n\n//==============================================================================\n/** @class Read only view for DatasetCollectionElement.\n */\nvar DCEListItemView = ListItemView.extend(\n/** @lends DCEListItemView.prototype */{\n\n    /** add the DCE class to the list item */\n    className   : ListItemView.prototype.className + \" dataset-collection-element\",\n\n    /** set up */\n    initialize  : function( attributes ){\n        if( attributes.logger ){ this.logger = this.model.logger = attributes.logger; }\n        this.log( 'DCEListItemView.initialize:', attributes );\n        ListItemView.prototype.initialize.call( this, attributes );\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'DCEListItemView(' + modelString + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDCEListItemView.prototype.templates = (function(){\n\n    // use the element identifier here - since that will persist and the user will need it\n    var titleBarTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<div class=\"title\">',\n                '<span class=\"name\"><%- element.element_identifier %></span>',\n            '</div>',\n            '<div class=\"subtitle\"></div>',\n        '</div>'\n    ], 'element' );\n\n    return _.extend( {}, ListItemView.prototype.templates, {\n        titleBar : titleBarTemplate\n    });\n}());\n\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\nvar DatasetDCEListItemView = DATASET_LI.DatasetListItemView.extend(\n/** @lends DatasetDCEListItemView.prototype */{\n\n    className   : DATASET_LI.DatasetListItemView.prototype.className + \" dataset-collection-element\",\n\n    /** set up */\n    initialize  : function( attributes ){\n        if( attributes.logger ){ this.logger = this.model.logger = attributes.logger; }\n        this.log( 'DatasetDCEListItemView.initialize:', attributes );\n        DATASET_LI.DatasetListItemView.prototype.initialize.call( this, attributes );\n    },\n\n    /** In this override, only get details if in the ready state.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n    _fetchModelDetails : function(){\n        var view = this;\n        if( view.model.inReadyState() && !view.model.hasDetails() ){\n            return view.model.fetch({ silent: true });\n        }\n        return jQuery.when();\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'DatasetDCEListItemView(' + modelString + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetDCEListItemView.prototype.templates = (function(){\n\n    // use the element identifier here and not the dataset name\n    //TODO:?? can we steal the DCE titlebar?\n    var titleBarTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n                '<span class=\"name\"><%- element.element_identifier %></span>',\n            '</div>',\n        '</div>'\n    ], 'element' );\n\n    return _.extend( {}, DATASET_LI.DatasetListItemView.prototype.templates, {\n        titleBar : titleBarTemplate\n    });\n}());\n\n\n//==============================================================================\n/** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\nvar NestedDCDCEListItemView = DCListItemView.extend(\n/** @lends NestedDCDCEListItemView.prototype */{\n\n    className   : DCListItemView.prototype.className + \" dataset-collection-element\",\n\n    /** In this override, add the state as a class for use with state-based CSS */\n    _swapNewRender : function( $newRender ){\n        DCListItemView.prototype._swapNewRender.call( this, $newRender );\n        var state = this.model.get( 'state' ) || 'ok';\n        this.$el.addClass( 'state-' + state );\n        return this.$el;\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'NestedDCDCEListItemView(' + modelString + ')';\n    }\n});\n\n\n//==============================================================================\n    return {\n        DCListItemView          : DCListItemView,\n        DCEListItemView         : DCEListItemView,\n        DatasetDCEListItemView  : DatasetDCEListItemView,\n        NestedDCDCEListItemView : NestedDCDCEListItemView\n    };\n});\n"]}