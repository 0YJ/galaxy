{"version":3,"sources":["mvc/job/job-li.js"],"names":["_super","_listItem2","default","FoldoutListItemView","JobListItemView","extend","className","prototype","id","this","model","get","join","foldoutPanelClass","_datasetList2","DatasetList","attributes","logger","initialize","call","tool","jobData","linkTarget","_swapNewRender","$newRender","has","$el","_getFoldoutPanelOptions","options","_","collection","outputCollection","selecting","_labelParamMap","params","labelParamMap","i","_labelInputMap","view","labelInputMap","inputs","input","toolInput","_findToolInput","name","label","toolInputs","findWhere","exactMatch","_findRepeatToolInput","partialMatch","find","indexOf","toString","templates","_baseMvc2","wrapTemplate","titleBarTemplate","_localization2","subtitleTemplate","detailsTemplate","subtitle","titleBar","details"],"mappings":"6RAKIA,EAASC,EAAAC,QAAUC,oBAInBC,EAAkBJ,EAAOK,QAKrBC,UAAWN,EAAOO,UAAUD,UAAY,OACxCE,GAAI,WACA,OAAQ,MAAOC,KAAKC,MAAMC,IAAI,OAAOC,KAAK,MAG9CC,kBAAmBC,EAAAZ,QAAaa,YAdpCf,WAAS,SAAAgB,GACbA,EAAAC,SAkBgBR,KAAKQ,OAASR,KAAKC,MAAMO,OAASD,EAAWC,QAfzDb,KAAAA,IAAAA,KAAkBJ,eAAAgB,GAClBhB,EAAAO,UAAAW,WAAAC,KAAwCV,KAAAO,GAEpCP,KAAAW,KAAAJ,EAAAI,SAkBIX,KAAKY,QAAUL,EAAWK,YAd1BZ,KAAAa,WAAeN,EAAAM,YAA2B,UAqB9CC,eAAgB,SAASC,GAZpB,OAJLxB,EAAAO,UAAAgB,eAAAJ,KAAAV,KAAAe,GACAN,KAAYR,MAAAe,IAAA,UACJT,KAAAA,IAAAA,SAAJ,SAAuBP,KAAAC,MAAAC,IAAA,UAEtBF,KAAAiB,KAIDC,wBAAYX,WACZ,IAAAY,EAAA5B,EAAegB,UAAWK,wBAA1BF,KAAAV,MAkBA,OAAOoB,EAAExB,OAAOuB,GAhBhBE,WAAArB,KAAAC,MAAAqB,iBACAC,WAAA,KASAC,eAAYP,WAmBZ,IAAIQ,EAASzB,KAAKC,MAAMC,IAAI,UAhBhCwB,KAnCoC,OAoCpCR,EAAAA,KAAAA,KAAAA,KAAAA,OAAyB,SAAAS,GAEdP,EAAExB,OAAgB,sBAATuB,EAAAA,cACZE,EAAiBpB,EAAAA,OAAMqB,EAAAA,EAAAA,SAvCKI,GA6CpCE,eAAA,WAmBI,IAAIC,EAAO7B,KAhBf8B,KAOQ,OANRN,EAAAA,KAAAA,KAAgBZ,QAAAmB,OAAA,SAAAC,GACZ,IAAAC,EAAAJ,EAAAK,eAAAF,EAAAG,MACIV,IACAC,EADJO,EAAAG,OAAAJ,KAIIF,GAIJI,eAAOR,SAAPS,GAmBA,IAAIE,EAAarC,KAAKW,KAAKoB,OAhB/BH,EAAgBR,EAAAkB,UAAAD,GAAWF,KAAAA,IACvB,OAAAI,GAGOvC,KAAKY,qBAAgBuB,EAASH,IAIhCQ,qBAAA,SAAAL,EAAAE,GAELA,EAAOP,GAAP9B,KAAAW,KAAAoB,OAxEgC,IAAAU,EAAArB,EAAAsB,KAAAL,EAAA,SAAAV,GA2F5B,OAAgC,IAAzBQ,EAAKQ,QAAQhB,EAAEQ,QAf9BD,GAAAA,EAOI,OAHAd,EAAgBsB,KAAAD,EAAAV,OAAA,SAAAJ,GACZ,OAAA,IAAOY,EAAAA,QAAPZ,EAAAQ,SAOJS,SAAA,WACAP,MAAAA,mBAA2BrC,KAAKW,MAAKoB,OAwBjDpC,EAAgBG,UAAU+C,UAAa,WAhB3BC,EAAArD,QAAAsD,cAGA,6BACH,wCAED,+BAGI,yBACH,6CA5GT,SAgHA,sCACA,gCAmBQ,8BAfJ,WAjBS,IAoCLC,EAAmBF,EAAArD,QAASsD,cAT5B,6CAcI,sBAVJ,kDACA,SAYI,yBARJC,+DAEI,6BACA,KACA,EAAAC,EAAAxD,SAAA,WACA,oDASA,SAOJyD,SAII,UAEA,OAGAA,EAAAJ,EAAArD,QAAAsD,cAPA,yBAaJI,+DAYI,UAeR,OAGIC,EAAUF,EAAAA,QAAAA,cAHd,wBAUAvD,uBA7BQ,iEACA,0FACA,6CAEA,uDACA,SACA,WACA,iEACA,0DACA,6CACA,0CACA,SACA,WACA,SACA,UAEJ,OAGJ,OAAOyB,EAAExB,UAAWL,EAAOO,UAAU+C,WAEjCQ,SAAUL,EACVI,SAAUF,EACVI,QAASH,IAzFsB,cA+FnCxD,gBAAiBA","file":"../../../scripts/mvc/job/job-li.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport DATASET_LIST from \"mvc/dataset/dataset-list\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n//==============================================================================\nvar _super = LIST_ITEM.FoldoutListItemView;\n/** @class A job view used from within a larger list of jobs.\n *      Each job itself is a foldout panel of history contents displaying the outputs of this job.\n */\nvar JobListItemView = _super.extend(\n    /** @lends JobListItemView.prototype */ {\n        /** logger used to record this.log messages, commonly set to console */\n        //logger              : console,\n\n        className: _super.prototype.className + \" job\",\n        id: function() {\n            return [\"job\", this.model.get(\"id\")].join(\"-\");\n        },\n\n        foldoutPanelClass: DATASET_LIST.DatasetList,\n\n        /** Set up: instance vars, options, and event handlers */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(this + \".initialize:\", attributes);\n            _super.prototype.initialize.call(this, attributes);\n\n            this.tool = attributes.tool || {};\n            this.jobData = attributes.jobData || {};\n\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n        },\n\n        /** In this override, add the state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            if (this.model.has(\"state\")) {\n                this.$el.addClass(\"state-\" + this.model.get(\"state\"));\n            }\n            return this.$el;\n        },\n\n        /** Stub to return proper foldout panel options */\n        _getFoldoutPanelOptions: function() {\n            var options = _super.prototype._getFoldoutPanelOptions.call(this);\n            return _.extend(options, {\n                collection: this.model.outputCollection,\n                selecting: false\n            });\n        },\n\n        // ........................................................................ template helpers\n        // all of these are ADAPTERs - in other words, it might be better if the API returned the final form\n        //  or something similar in order to remove some of the complexity here\n\n        /** Return tool.inputs that should/can be safely displayed */\n        _labelParamMap: function() {\n            //ADAPTER\n            var params = this.model.get(\"params\"),\n                labelParamMap = {};\n            _.each(this.tool.inputs, function(i) {\n                //console.debug( i.label, i.model_class );\n                if (i.label && i.model_class !== \"DataToolParameter\") {\n                    labelParamMap[i.label] = params[i.name];\n                }\n            });\n            return labelParamMap;\n        },\n\n        _labelInputMap: function() {\n            //ADAPTER\n            var view = this,\n                labelInputMap = {};\n            _.each(this.jobData.inputs, function(input) {\n                var toolInput = view._findToolInput(input.name);\n                if (toolInput) {\n                    labelInputMap[toolInput.label] = input;\n                }\n            });\n            return labelInputMap;\n        },\n\n        /** Return a tool.inputs object that matches (or partially matches) the given (job input) name */\n        _findToolInput: function(name) {\n            //ADAPTER\n            var toolInputs = this.tool.inputs,\n                exactMatch = _.findWhere(toolInputs, { name: name });\n            if (exactMatch) {\n                return exactMatch;\n            }\n            return this._findRepeatToolInput(name, toolInputs);\n        },\n\n        /** Return a tool.inputs object that partially matches the given (job input) name (for repeat dataset inputs)*/\n        _findRepeatToolInput: function(name, toolInputs) {\n            //ADAPTER\n            toolInputs = toolInputs || this.tool.inputs;\n            var partialMatch = _.find(toolInputs, function(i) {\n                return name.indexOf(i.name) === 0;\n            });\n            if (!partialMatch) {\n                return undefined;\n            }\n\n            var subMatch = _.find(partialMatch.inputs, function(i) {\n                return name.indexOf(i.name) !== -1;\n            });\n            return subMatch;\n        },\n\n        // ........................................................................ misc\n        /** String representation */\n        toString: function() {\n            return \"JobListItemView(\" + this.model + \")\";\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nJobListItemView.prototype.templates = (function() {\n    //TODO: move to require text! plugin\n\n    var elTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"list-element\">',\n        '<div class=\"id\"><%- model.id %></div>',\n        // errors, messages, etc.\n        '<div class=\"warnings\"></div>',\n\n        // multi-select checkbox\n        '<div class=\"selector\">',\n        '<span class=\"fa fa-2x fa-square-o\"></span>',\n        \"</div>\",\n        // space for title bar buttons - gen. floated to the right\n        '<div class=\"primary-actions\"></div>',\n        '<div class=\"title-bar\"></div>',\n\n        // expandable area for more details\n        '<div class=\"details\"></div>',\n        \"</div>\"\n    ]);\n\n    var titleBarTemplate = BASE_MVC.wrapTemplate(\n        [\n            // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n            '<div class=\"title-bar clear\" tabindex=\"0\">',\n            //'<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n            '<span class=\"name\"><%- view.tool.name %></span>',\n            \"</div>\",\n            '<div class=\"subtitle\">',\n            '<span class=\"description\"><%- view.tool.description %></span',\n            '<span class=\"create-time\">',\n            \" \",\n            _l(\"Created\"),\n            \": <%= new Date( job.create_time ).toString() %>, \",\n            \"</span\",\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"job\"\n    );\n\n    var subtitleTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"subtitle\">',\n            '<span class=\"description\"><%- view.tool.description %></span',\n            //'<span class=\"create-time\">',\n            //    ' ', _l( 'Created' ), ': <%= new Date( job.create_time ).toString() %>, ',\n            //'</span',\n            //'<span class=\"version\">',\n            //    ' (', _l( 'version' ), ': <%- view.tool.version %>)',\n            //'</span',\n            \"</div>\"\n        ],\n        \"job\"\n    );\n\n    var detailsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            //'<div class=\"version\">',\n            //    '<label class=\"prompt\">', _l( 'Version' ), '</label>',\n            //    '<span class=\"value\"><%- view.tool.version %></span>',\n            //'</div>',\n            '<div class=\"params\">',\n            \"<% _.each( view._labelInputMap(), function( input, label ){ %>\",\n            '<div class=\"input\" data-input-name=\"<%- input.name %>\" data-input-id=\"<%- input.id %>\">',\n            '<label class=\"prompt\"><%- label %></label>',\n            //TODO: input dataset name\n            '<span class=\"value\"><%- input.content.name %></span>',\n            \"</div>\",\n            \"<% }) %>\",\n            \"<% _.each( view._labelParamMap(), function( param, label ){ %>\",\n            '<div class=\"param\" data-input-name=\"<%- param.name %>\">',\n            '<label class=\"prompt\"><%- label %></label>',\n            '<span class=\"value\"><%- param %></span>',\n            \"</div>\",\n            \"<% }) %>\",\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"job\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        //el          : elTemplate,\n        titleBar: titleBarTemplate,\n        subtitle: subtitleTemplate,\n        details: detailsTemplate\n    });\n})();\n\n//=============================================================================\nexport default {\n    JobListItemView: JobListItemView\n};\n"]}