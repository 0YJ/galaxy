{"version":3,"sources":["mvc/job/job-li.js"],"names":["define","LIST_ITEM","DATASET_LIST","BASE_MVC","_l","_super","FoldoutListItemView","JobListItemView","extend","className","prototype","id","this","model","get","join","foldoutPanelClass","DatasetList","initialize","attributes","logger","log","call","tool","jobData","linkTarget","_swapNewRender","$newRender","has","$el","addClass","_getFoldoutPanelOptions","options","_","collection","outputCollection","selecting","_labelParamMap","params","labelParamMap","each","inputs","i","label","model_class","name","_labelInputMap","view","labelInputMap","input","toolInput","_findToolInput","toolInputs","exactMatch","findWhere","_findRepeatToolInput","partialMatch","find","indexOf","toString","templates","titleBarTemplate","wrapTemplate","subtitleTemplate","detailsTemplate","titleBar","subtitle","details"],"mappings":"AAAAA,QACI,qBACA,2BACA,eACA,sBACD,SAAUC,EAAWC,EAAcC,EAAUC,GAEhD,GAAIC,GAASJ,EAAUK,oBAInBC,EAAkBF,EAAOG,QAKzBC,UAAcJ,EAAOK,UAAUD,UAAY,OAC3CE,GAAc,WACV,OAAS,MAAOC,KAAKC,MAAMC,IAAK,OAASC,KAAM,MAGnDC,kBAAoBd,EAAae,YAGjCC,WAAa,SAAUC,GACfA,EAAWC,SAAUR,KAAKQ,OAASR,KAAKC,MAAMO,OAASD,EAAWC,QACtER,KAAKS,IAAKT,KAAO,eAAgBO,GACjCd,EAAOK,UAAUQ,WAAWI,KAAMV,KAAMO,GAExCP,KAAKW,KAAOJ,EAAWI,SACvBX,KAAKY,QAAUL,EAAWK,YAG1BZ,KAAKa,WAAaN,EAAWM,YAAc,UAI/CC,eAAiB,SAAUC,GAKvB,MAJAtB,GAAOK,UAAUgB,eAAeJ,KAAMV,KAAMe,GACxCf,KAAKC,MAAMe,IAAK,UAChBhB,KAAKiB,IAAIC,SAAU,SAAWlB,KAAKC,MAAMC,IAAK,UAE3CF,KAAKiB,KAIhBE,wBAA0B,WACtB,GAAIC,GAAU3B,EAAOK,UAAUqB,wBAAwBT,KAAMV,KAC7D,OAAOqB,GAAEzB,OAAQwB,GACbE,WAActB,KAAKC,MAAMsB,iBACzBC,WAAc,KAStBC,eAAiB,WAEb,GAAIC,GAAS1B,KAAKC,MAAMC,IAAK,UACzByB,IAOJ,OANAN,GAAEO,KAAM5B,KAAKW,KAAKkB,OAAQ,SAAUC,GAE5BA,EAAEC,OAA2B,sBAAlBD,EAAEE,cACbL,EAAeG,EAAEC,OAAUL,EAAQI,EAAEG,SAGtCN,GAGXO,eAAiB,WAEb,GAAIC,GAAOnC,KACPoC,IAOJ,OANAf,GAAEO,KAAM5B,KAAKY,QAAQiB,OAAQ,SAAUQ,GACnC,GAAIC,GAAYH,EAAKI,eAAgBF,EAAMJ,KACvCK,KACAF,EAAeE,EAAUP,OAAUM,KAGpCD,GAIXG,eAAiB,SAAUN,GAEvB,GAAIO,GAAaxC,KAAKW,KAAKkB,OACvBY,EAAapB,EAAEqB,UAAWF,GAAcP,KAAOA,GACnD,OAAIQ,IACGzC,KAAK2C,qBAAsBV,EAAMO,IAI5CG,qBAAuB,SAAUV,EAAMO,GAEnCA,EAAaA,GAAcxC,KAAKW,KAAKkB,MACrC,IAAIe,GAAevB,EAAEwB,KAAML,EAAY,SAAUV,GAC7C,MAAkC,KAA3BG,EAAKa,QAAShB,EAAEG,OAE3B,IAAKW,EAAL,CAKA,MAHevB,GAAEwB,KAAMD,EAAaf,OAAQ,SAAUC,GAClD,OAAmC,IAA5BG,EAAKa,QAAShB,EAAEG,UAO/Bc,SAAW,WACP,MAAO,mBAAqB/C,KAAKC,MAAQ,MA0F7C,OApFJN,GAAgBG,UAAUkD,UAAa,WAGnC,GAmBIC,IAnBa1D,EAAS2D,cACtB,6BACI,wCAEA,+BAGA,yBACI,6CACJ,SAEA,sCACA,gCAGA,8BACJ,WAGmB3D,EAAS2D,cAE5B,6CAEI,sBACI,kDACJ,SACA,yBACI,+DACA,6BACI,IAAK1D,EAAI,WAAa,oDAC1B,SACJ,SACJ,UACD,QAEC2D,EAAmB5D,EAAS2D,cAC5B,yBACI,+DAOJ,UACD,OAECE,EAAkB7D,EAAS2D,cAC3B,wBAKI,uBACI,iEACI,0FACI,6CAEA,uDACJ,SACJ,WACA,iEACI,0DACI,6CACA,0CACJ,SACJ,WACJ,SACJ,UACD,MAEH,OAAO7B,GAAEzB,UAAYH,EAAOK,UAAUkD,WAElCK,SAAcJ,EACdK,SAAcH,EACdI,QAAcH,QAOdzD,gBAAkBA","file":"../../../scripts/mvc/job/job-li.js","sourcesContent":["define([\n    'mvc/list/list-item',\n    'mvc/dataset/dataset-list',\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( LIST_ITEM, DATASET_LIST, BASE_MVC, _l ){\n//==============================================================================\nvar _super = LIST_ITEM.FoldoutListItemView;\n/** @class A job view used from within a larger list of jobs.\n *      Each job itself is a foldout panel of history contents displaying the outputs of this job.\n */\nvar JobListItemView = _super.extend(/** @lends JobListItemView.prototype */{\n\n    /** logger used to record this.log messages, commonly set to console */\n    //logger              : console,\n\n    className   : _super.prototype.className + \" job\",\n    id          : function(){\n        return [ 'job', this.model.get( 'id' ) ].join( '-' );\n    },\n\n    foldoutPanelClass : DATASET_LIST.DatasetList,\n\n    /** Set up: instance vars, options, and event handlers */\n    initialize : function( attributes ){\n        if( attributes.logger ){ this.logger = this.model.logger = attributes.logger; }\n        this.log( this + '.initialize:', attributes );\n        _super.prototype.initialize.call( this, attributes );\n\n        this.tool = attributes.tool || {};\n        this.jobData = attributes.jobData || {};\n\n        /** where should pages from links be displayed? (default to new tab/window) */\n        this.linkTarget = attributes.linkTarget || '_blank';\n    },\n\n    /** In this override, add the state as a class for use with state-based CSS */\n    _swapNewRender : function( $newRender ){\n        _super.prototype._swapNewRender.call( this, $newRender );\n        if( this.model.has( 'state' ) ){\n            this.$el.addClass( 'state-' + this.model.get( 'state' ) );\n        }\n        return this.$el;\n    },\n\n    /** Stub to return proper foldout panel options */\n    _getFoldoutPanelOptions : function(){\n        var options = _super.prototype._getFoldoutPanelOptions.call( this );\n        return _.extend( options, {\n            collection  : this.model.outputCollection,\n            selecting   : false\n        });\n    },\n\n    // ........................................................................ template helpers\n    // all of these are ADAPTERs - in other words, it might be better if the API returned the final form\n    //  or something similar in order to remove some of the complexity here\n\n    /** Return tool.inputs that should/can be safely displayed */\n    _labelParamMap : function(){\n        //ADAPTER\n        var params = this.model.get( 'params' ),\n            labelParamMap = {};\n        _.each( this.tool.inputs, function( i ){\n            //console.debug( i.label, i.model_class );\n            if( i.label && i.model_class !== 'DataToolParameter' ){\n                labelParamMap[ i.label ] = params[ i.name ];\n            }\n        });\n        return labelParamMap;\n    },\n\n    _labelInputMap : function(){\n        //ADAPTER\n        var view = this,\n            labelInputMap = {};\n        _.each( this.jobData.inputs, function( input ){\n            var toolInput = view._findToolInput( input.name );\n            if( toolInput ){\n                labelInputMap[ toolInput.label ] = input;\n            }\n        });\n        return labelInputMap;\n    },\n\n    /** Return a tool.inputs object that matches (or partially matches) the given (job input) name */\n    _findToolInput : function( name ){\n        //ADAPTER\n        var toolInputs = this.tool.inputs,\n            exactMatch = _.findWhere( toolInputs, { name : name });\n        if( exactMatch ){ return exactMatch; }\n        return this._findRepeatToolInput( name, toolInputs );\n    },\n\n    /** Return a tool.inputs object that partially matches the given (job input) name (for repeat dataset inputs)*/\n    _findRepeatToolInput : function( name, toolInputs ){\n        //ADAPTER\n        toolInputs = toolInputs || this.tool.inputs;\n        var partialMatch = _.find( toolInputs, function( i ){\n            return name.indexOf( i.name ) === 0;\n        });\n        if( !partialMatch ){ return undefined; }\n\n        var subMatch = _.find( partialMatch.inputs, function( i ){\n            return name.indexOf( i.name ) !== -1;\n        });\n        return subMatch;\n    },\n\n    // ........................................................................ misc\n    /** String representation */\n    toString : function(){\n        return 'JobListItemView(' + this.model + ')';\n    }\n});\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nJobListItemView.prototype.templates = (function(){\n//TODO: move to require text! plugin\n\n    var elTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"list-element\">',\n            '<div class=\"id\"><%- model.id %></div>',\n            // errors, messages, etc.\n            '<div class=\"warnings\"></div>',\n\n            // multi-select checkbox\n            '<div class=\"selector\">',\n                '<span class=\"fa fa-2x fa-square-o\"></span>',\n            '</div>',\n            // space for title bar buttons - gen. floated to the right\n            '<div class=\"primary-actions\"></div>',\n            '<div class=\"title-bar\"></div>',\n\n            // expandable area for more details\n            '<div class=\"details\"></div>',\n        '</div>'\n    ]);\n\n    var titleBarTemplate = BASE_MVC.wrapTemplate([\n        // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n        '<div class=\"title-bar clear\" tabindex=\"0\">',\n            //'<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n                '<span class=\"name\"><%- view.tool.name %></span>',\n            '</div>',\n            '<div class=\"subtitle\">',\n                '<span class=\"description\"><%- view.tool.description %></span',\n                '<span class=\"create-time\">',\n                    ' ', _l( 'Created' ), ': <%= new Date( job.create_time ).toString() %>, ',\n                '</span',\n            '</div>',\n        '</div>'\n    ], 'job' );\n\n    var subtitleTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"subtitle\">',\n            '<span class=\"description\"><%- view.tool.description %></span',\n            //'<span class=\"create-time\">',\n            //    ' ', _l( 'Created' ), ': <%= new Date( job.create_time ).toString() %>, ',\n            //'</span',\n            //'<span class=\"version\">',\n            //    ' (', _l( 'version' ), ': <%- view.tool.version %>)',\n            //'</span',\n        '</div>'\n    ], 'job' );\n\n    var detailsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"details\">',\n            //'<div class=\"version\">',\n            //    '<label class=\"prompt\">', _l( 'Version' ), '</label>',\n            //    '<span class=\"value\"><%- view.tool.version %></span>',\n            //'</div>',\n            '<div class=\"params\">',\n                '<% _.each( view._labelInputMap(), function( input, label ){ %>',\n                    '<div class=\"input\" data-input-name=\"<%- input.name %>\" data-input-id=\"<%- input.id %>\">',\n                        '<label class=\"prompt\"><%- label %></label>',\n//TODO: input dataset name\n                        '<span class=\"value\"><%- input.content.name %></span>',\n                    '</div>',\n                '<% }) %>',\n                '<% _.each( view._labelParamMap(), function( param, label ){ %>',\n                    '<div class=\"param\" data-input-name=\"<%- param.name %>\">',\n                        '<label class=\"prompt\"><%- label %></label>',\n                        '<span class=\"value\"><%- param %></span>',\n                    '</div>',\n                '<% }) %>',\n            '</div>',\n        '</div>'\n    ], 'job' );\n\n    return _.extend( {}, _super.prototype.templates, {\n        //el          : elTemplate,\n        titleBar    : titleBarTemplate,\n        subtitle    : subtitleTemplate,\n        details     : detailsTemplate\n    });\n}());\n\n\n//=============================================================================\n    return {\n        JobListItemView : JobListItemView\n    };\n});\n"]}