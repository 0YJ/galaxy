{"version":3,"sources":["mvc/job/job-model.js"],"names":["define","HISTORY_CONTENTS","STATES","AJAX_QUEUE","BASE_MVC","_l","searchableMixin","SearchableModelMixin","Job","Backbone","Model","extend","LoggableMixin","mixin","_logNamespace","defaults","model_class","tool_id","exit_code","inputs","outputs","params","create_time","update_time","state","NEW","parse","response","options","this","parseParams","newParams","_","each","value","key","JSON","initialize","attributes","debug","set","get","silent","outputCollection","HistoryContents","_setUpListeners","on","currModel","newState","log","inReadyState","trigger","previous","contains","READY_STATES","hasDetails","isEmpty","urlRoot","Galaxy","root","toString","join","JobCollection","Collection","model","url","intialize","models","console","ids","map","item","notReady","filter","job","haveDetails","all","queueDetailFetching","collection","queue","AjaxQueue","fetch","done","matches","matchesWhat","length","fromHistory","historyId","data","history_id","window"],"mappings":"AAAAA,QACI,+BACA,qBACA,mBACA,eACA,sBACD,SAAUC,EAAkBC,EAAQC,EAAYC,EAAUC,GAE7D,GAEIC,GAAkBF,EAASG,qBAG3BC,EAAMC,SAASC,MACVC,OAAQP,EAASQ,eACjBD,OAAQP,EAASS,MAAOP,GAC7BQ,cARe,OAWfC,UACIC,YAAc,MAEdC,QAAc,KACdC,UAAc,KAEdC,UACAC,WACAC,UAEAC,YAAc,KACdC,YAAc,KACdC,MAActB,EAAOuB,KAIzBC,MAAQ,SAAUC,EAAUC,GAExB,MADAD,GAASN,OAASQ,KAAKC,YAAaH,EAASN,QACtCM,GAIXG,YAAc,SAAUT,GACpB,GAAIU,KAIJ,OAHAC,GAAEC,KAAMZ,EAAQ,SAAUa,EAAOC,GAC7BJ,EAAWI,GAAQC,KAAKV,MAAOQ,KAE5BH,GAIXM,WAAa,SAAUC,EAAYV,GAC/BC,KAAKU,MAAOV,KAAO,mBAAoBS,EAAYV,GAEnDC,KAAKW,IAAK,SAAUX,KAAKC,YAAaD,KAAKY,IAAK,YAAgBC,QAAQ,IAExEb,KAAKc,iBAAmBL,EAAWK,kBAAoB,GAAI1C,GAAiB2C,oBAC5Ef,KAAKgB,mBAMTA,gBAAkB,WAEdhB,KAAKiB,GAAI,eAAgB,SAAUC,EAAWC,GAC1CnB,KAAKoB,IAAKpB,KAAO,sBAAuBkB,EAAWC,GAC/CnB,KAAKqB,gBACLrB,KAAKsB,QAAS,cAAeJ,EAAWC,EAAUnB,KAAKuB,SAAU,aAS7EF,aAAe,WACX,MAAOlB,GAAEqB,SAAUnD,EAAOoD,aAAczB,KAAKY,IAAK,WAItDc,WAAa,WAET,OAAQvB,EAAEwB,QAAS3B,KAAKY,IAAK,aAKjCgB,QAAUC,OAAOC,KAAO,WAYxBC,SAAW,WACP,OAAS,OAAQ/B,KAAKY,IAAK,MAAQ,IAAKZ,KAAKY,IAAK,WAAa,KAAMoB,KAAM,OAgG/E,QACIrD,IAAkBA,EAClBsD,cA1FYrD,SAASsD,WACpBpD,OAAQP,EAASQ,eACjBD,QACLG,cAxGe,OA0GfkD,MAAQxD,EAGRiD,QAAUC,OAAOC,KAAO,WACxBM,IAAM,WAAY,MAAOpC,MAAK4B,SAE9BS,UAAY,SAAUC,EAAQvC,GAC1BwC,QAAQ7B,MAAO4B,EAAQvC,IAO3ByC,IAAM,WACF,MAAOxC,MAAKyC,IAAK,SAAUC,GAAQ,MAAOA,GAAK9B,IAAK,SAMxD+B,SAAW,WACP,MAAO3C,MAAK4C,OAAQ,SAAUC,GAC1B,OAAQA,EAAIxB,kBAKpByB,YAAc,WACV,MAAO9C,MAAK+C,IAAK,SAAUF,GAAO,MAAOA,GAAInB,gBAKjDsB,oBAAsB,WAClB,GAAIC,GAAajD,KACbkD,EAAQ,GAAI5E,GAAW6E,UAAWnD,KAAKyC,IAAK,SAAUI,GAClD,MAAO,YACH,MAAOA,GAAIO,OAAQvC,QAAQ,OAMvC,OAHAqC,GAAMG,KAAM,WACRJ,EAAW3B,QAAS,oBAEjB4B,GASXI,QAAU,SAAUC,GAChB,MAAOvD,MAAK4C,OAAQ,SAAUC,GAC1B,MAAOA,GAAIS,QAASC,MAM5BxB,SAAW,WACN,OAAU,iBAAkB/B,KAAKwD,OAAQ,KAAMxB,KAAM,OAM1DyB,YAAc,SAAUC,GACpBnB,QAAQ7B,MAAOV,KACf,IAAIkC,GAAalC,KACbiD,EAAa,GAAIf,MAMrB,OALAe,GAAWG,OAAQO,MAAQC,WAAYF,KAClCL,KAAM,WACHQ,OAAOX,MAAQD,EAAWD,wBAG3BC","file":"../../../scripts/mvc/job/job-model.js","sourcesContent":["define([\n    \"mvc/history/history-contents\",\n    \"mvc/dataset/states\",\n    \"utils/ajax-queue\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( HISTORY_CONTENTS, STATES, AJAX_QUEUE, BASE_MVC, _l ){\n\nvar logNamespace = 'jobs';\n//==============================================================================\nvar searchableMixin = BASE_MVC.SearchableModelMixin;\n/** @class Represents a job running or ran on the server job handlers.\n */\nvar Job = Backbone.Model\n        .extend( BASE_MVC.LoggableMixin )\n        .extend( BASE_MVC.mixin( searchableMixin, /** @lends Job.prototype */{\n    _logNamespace : logNamespace,\n\n    /** default attributes for a model */\n    defaults : {\n        model_class : 'Job',\n\n        tool_id     : null,\n        exit_code   : null,\n\n        inputs      : {},\n        outputs     : {},\n        params      : {},\n\n        create_time : null,\n        update_time : null,\n        state       : STATES.NEW\n    },\n\n    /** override to parse params on incomming */\n    parse : function( response, options ){\n        response.params = this.parseParams( response.params );\n        return response;\n    },\n\n    /** override to treat param values as json */\n    parseParams : function( params ){\n        var newParams = {};\n        _.each( params, function( value, key ){\n            newParams[ key ] = JSON.parse( value );\n        });\n        return newParams;\n    },\n\n    /** instance vars and listeners */\n    initialize : function( attributes, options ){\n        this.debug( this + '(Job).initialize', attributes, options );\n\n        this.set( 'params', this.parseParams( this.get( 'params' ) ), { silent: true });\n\n        this.outputCollection = attributes.outputCollection || new HISTORY_CONTENTS.HistoryContents([]);\n        this._setUpListeners();\n    },\n\n    /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n    _setUpListeners : function(){\n        // if the state has changed and the new state is a ready state, fire an event\n        this.on( 'change:state', function( currModel, newState ){\n            this.log( this + ' has changed state:', currModel, newState );\n            if( this.inReadyState() ){\n                this.trigger( 'state:ready', currModel, newState, this.previous( 'state' ) );\n            }\n        });\n    },\n\n    // ........................................................................ common queries\n    /** Is this job in a 'ready' state; where 'Ready' states are states where no\n     *      processing is left to do on the server.\n     */\n    inReadyState : function(){\n        return _.contains( STATES.READY_STATES, this.get( 'state' ) );\n    },\n\n    /** Does this model already contain detailed data (as opposed to just summary level data)? */\n    hasDetails : function(){\n        //?? this may not be reliable\n        return !_.isEmpty( this.get( 'outputs' ) );\n    },\n\n    // ........................................................................ ajax\n    /** root api url */\n    urlRoot : Galaxy.root + 'api/jobs',\n    //url : function(){ return this.urlRoot; },\n\n    // ........................................................................ searching\n    // see base-mvc, SearchableModelMixin\n    /** what attributes of an Job will be used in a text search */\n    //searchAttributes : [\n    //    'tool'\n    //],\n\n    // ........................................................................ misc\n    /** String representation */\n    toString : function(){\n        return [ 'Job(', this.get( 'id' ), ':', this.get( 'tool_id' ), ')' ].join( '' );\n    }\n}));\n\n\n//==============================================================================\n/** @class Backbone collection for Jobs.\n */\nvar JobCollection = Backbone.Collection\n        .extend( BASE_MVC.LoggableMixin )\n        .extend(/** @lends JobCollection.prototype */{\n    _logNamespace : logNamespace,\n\n    model : Job,\n\n    /** root api url */\n    urlRoot : Galaxy.root + 'api/jobs',\n    url : function(){ return this.urlRoot; },\n\n    intialize : function( models, options ){\n        console.debug( models, options );\n    },\n\n    // ........................................................................ common queries\n    /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n    ids : function(){\n        return this.map( function( item ){ return item.get( 'id' ); });\n    },\n\n    /** Get jobs that are not ready\n     *  @returns array of content models\n     */\n    notReady : function(){\n        return this.filter( function( job ){\n            return !job.inReadyState();\n        });\n    },\n\n    /** return true if any jobs don't have details */\n    haveDetails : function(){\n        return this.all( function( job ){ return job.hasDetails(); });\n    },\n\n    // ........................................................................ ajax\n    /** fetches all details for each job in the collection using a queue */\n    queueDetailFetching : function(){\n        var collection = this,\n            queue = new AJAX_QUEUE.AjaxQueue( this.map( function( job ){\n                return function(){\n                    return job.fetch({ silent: true });\n                };\n            }));\n        queue.done( function(){\n            collection.trigger( 'details-loaded' );\n        });\n        return queue;\n    },\n\n    //toDAG : function(){\n    //    return new JobDAG( this.toJSON() );\n    //},\n\n    // ........................................................................ sorting/filtering\n    /** return a new collection of jobs whose attributes contain the substring matchesWhat */\n    matches : function( matchesWhat ){\n        return this.filter( function( job ){\n            return job.matches( matchesWhat );\n        });\n    },\n\n    // ........................................................................ misc\n    /** String representation. */\n    toString : function(){\n         return ([ 'JobCollection(', this.length, ')' ].join( '' ));\n    }\n\n//----------------------------------------------------------------------------- class vars\n}, {\n    /** class level fn for fetching the job details for all jobs in a history */\n    fromHistory : function( historyId ){\n        console.debug( this );\n        var Collection = this,\n            collection = new Collection([]);\n        collection.fetch({ data: { history_id: historyId }})\n            .done( function(){\n                window.queue = collection.queueDetailFetching();\n\n            });\n        return collection;\n    }\n});\n\n\n//=============================================================================\n    return {\n        Job             : Job,\n        JobCollection   : JobCollection\n    };\n});\n"]}