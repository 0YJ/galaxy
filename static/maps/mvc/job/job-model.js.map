{"version":3,"sources":["mvc/job/job-model.js"],"names":["define","searchableMixin","BASE_MVC","SearchableModelMixin","_l","_logNamespace","logNamespace","defaults","Model","model_class","LoggableMixin","extend","mixin","tool_id","inputs","outputs","create_time","state","params","parse","response","NEW","parseParams","options","_","newParams","each","value","key","initialize","JSON","attributes","_setUpListeners","this","debug","set","get","silent","outputCollection","HISTORY_CONTENTS","HistoryContents","on","currModel","newState","log","inReadyState","trigger","previous","contains","isEmpty","READY_STATES","hasDetails","urlRoot","Galaxy","root","toString","join","Job","JobCollection","Backbone","Collection","console","url","intialize","models","ids","map","item","notReady","filter","job","haveDetails","all","queueDetailFetching","collection","queue","AJAX_QUEUE","AjaxQueue","done","fetch","matches","matchesWhat","length","fromHistory","window","history_id","historyId"],"mappings":"aAAAA,QACI,+BADJA,qBAGI,mBAKJ,eACA,sBACA,SAAIC,EAAkBC,EAASC,EAAAA,EAA/BC,GAFA,IAQIC,EAAAA,EAAgBC,qBAGhBC,EAAAA,SAAWC,MACPC,OAAAA,EAAcC,eALbC,OAAQT,EAASU,MAAOX,GAOzBY,cAdW,OAiBXC,UACAC,YAAc,MAJdF,QAAc,KAOdG,UAAAA,KAEAC,UAZOF,WAQPG,UAQJC,YAAQ,KACJC,YAASF,KACTD,MAAOG,EAAPC,KAIJC,MAAAA,SAAcF,EAAAG,GAEVC,OADAJ,EAAIK,OAAAA,KAAJH,YAAAF,EAAAF,QACEQ,GAILJ,YAhCwE,SAAAJ,GA2BrE,IAAIO,KAIJ,OAGJD,EAAAE,KAAAR,EAAA,SAAAS,EAAAC,GACAC,EAAaD,GAAAE,KAAAX,MAAUY,KAJZN,GAUPI,WAAKG,SAAAA,EAALT,GACHU,KA1CwEC,MAAAD,KAAA,mBAAAF,EAAAR,GA4CzEU,KAAAE,IAAA,SAAAF,KAAAX,YAAAW,KAAAG,IAAA,YAAAC,QAAA,IAJIJ,KAAKK,iBAAmBP,EAAWO,kBAAoB,IAAIC,EAAiBC,oBAOhFR,KAAAA,mBAMSA,gBAAA,WAERC,KAvDwEQ,GAAA,eAAA,SAAAC,EAAAC,GAkDjEV,KAAKW,IAAKX,KAAO,sBAAuBS,EAAWC,GAO3DV,KAAAY,gBACAZ,KAAAa,QAAA,cAAAJ,EAAAC,EAAAV,KAAAc,SAAA,aASIF,aAAA,WACA,OAAArB,EAAAwB,SAAUC,EAASC,aAAAjB,KAAnBG,IAAA,WAIJe,WAAA,WAEA,OAAA3B,EAAAyB,QAAAhB,KAAAG,IAAA,aAKAgB,QAAAC,OAAAC,KAAA,WAaJC,SAAA,WANQ,OAAS,OAAQtB,KAAKG,IAAK,MAAQ,IAAKH,KAAKG,IAAK,WAAa,KAAMoB,KAAM,QAgG/E,OACIC,IAAkBA,EAClBC,cAjFEC,SAAUC,WAAEjD,OAAAT,EAAYkD,eAPmBzC,QACjDN,cAxGe,OAiHXwD,MAAAA,EAGJT,QAAAC,OAAAC,KAAA,WACAQ,IAAA,WAAA,OAAA7B,KAAAmB,SALAW,UAAY,SAAUC,EAAQzC,GAQ9B0C,QAAM/B,MAAA8B,EAAUzC,IAAhB0C,IAAM,WACF,OAAOhC,KAAKiC,IAAK,SAAUC,GAAQ,OAAOA,EAAK/B,IAAK,SAMxDgC,SAAW,WAMX,OAAAnC,KAAAoC,OAAA,SAAAC,GACAC,OAAAA,EAAc1B,kBAAd0B,YAAc,WAId,OAAAtC,KAAAuC,IAAA,SAAAF,GAAA,OAAAA,EAAAnB,gBAKYsB,oBAAO,WACH,IAAAC,EAAAzC,KACH0C,EAFD,IAAAC,EAAAC,UAAA5C,KAAAiC,IAAA,SAAAI,GAFR,OAAA,WAMMQ,OAAMR,EAAAS,OAAU1C,QAAA,QAM1B,OAHIsC,EAAAG,KAAOH,WA/CsCD,EAAA5B,QAAA,oBAkDjD6B,GASKK,QAFD,SAAAC,GAGH,OA5DgDhD,KAAAoC,OAAA,SAAAC,GA0DzC,OAAOA,EAAIU,QAASC,MAM5B1B,SAAW,WAIf,OAAA,iBAAAtB,KAAAiD,OAAA,KAAA1B,KAAA,OAKQ2B,YACIT,SAAAA,GACJA,QAAAA,MAAWK,MAEHK,IAEHV,EAJL,IAEeC,SASnB,OANID,EAAOA,OAAAA,MAAPW,WAAAC,KACHR,KAAA,WAnFLM,OAAAT,MAAAD,EAAAD,wBAwFWC","file":"../../../scripts/mvc/job/job-model.js","sourcesContent":["define([\n    \"mvc/history/history-contents\",\n    \"mvc/dataset/states\",\n    \"utils/ajax-queue\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( HISTORY_CONTENTS, STATES, AJAX_QUEUE, BASE_MVC, _l ){\n\nvar logNamespace = 'jobs';\n//==============================================================================\nvar searchableMixin = BASE_MVC.SearchableModelMixin;\n/** @class Represents a job running or ran on the server job handlers.\n */\nvar Job = Backbone.Model\n        .extend( BASE_MVC.LoggableMixin )\n        .extend( BASE_MVC.mixin( searchableMixin, /** @lends Job.prototype */{\n    _logNamespace : logNamespace,\n\n    /** default attributes for a model */\n    defaults : {\n        model_class : 'Job',\n\n        tool_id     : null,\n        exit_code   : null,\n\n        inputs      : {},\n        outputs     : {},\n        params      : {},\n\n        create_time : null,\n        update_time : null,\n        state       : STATES.NEW\n    },\n\n    /** override to parse params on incomming */\n    parse : function( response, options ){\n        response.params = this.parseParams( response.params );\n        return response;\n    },\n\n    /** override to treat param values as json */\n    parseParams : function( params ){\n        var newParams = {};\n        _.each( params, function( value, key ){\n            newParams[ key ] = JSON.parse( value );\n        });\n        return newParams;\n    },\n\n    /** instance vars and listeners */\n    initialize : function( attributes, options ){\n        this.debug( this + '(Job).initialize', attributes, options );\n\n        this.set( 'params', this.parseParams( this.get( 'params' ) ), { silent: true });\n\n        this.outputCollection = attributes.outputCollection || new HISTORY_CONTENTS.HistoryContents([]);\n        this._setUpListeners();\n    },\n\n    /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n    _setUpListeners : function(){\n        // if the state has changed and the new state is a ready state, fire an event\n        this.on( 'change:state', function( currModel, newState ){\n            this.log( this + ' has changed state:', currModel, newState );\n            if( this.inReadyState() ){\n                this.trigger( 'state:ready', currModel, newState, this.previous( 'state' ) );\n            }\n        });\n    },\n\n    // ........................................................................ common queries\n    /** Is this job in a 'ready' state; where 'Ready' states are states where no\n     *      processing is left to do on the server.\n     */\n    inReadyState : function(){\n        return _.contains( STATES.READY_STATES, this.get( 'state' ) );\n    },\n\n    /** Does this model already contain detailed data (as opposed to just summary level data)? */\n    hasDetails : function(){\n        //?? this may not be reliable\n        return !_.isEmpty( this.get( 'outputs' ) );\n    },\n\n    // ........................................................................ ajax\n    /** root api url */\n    urlRoot : Galaxy.root + 'api/jobs',\n    //url : function(){ return this.urlRoot; },\n\n    // ........................................................................ searching\n    // see base-mvc, SearchableModelMixin\n    /** what attributes of an Job will be used in a text search */\n    //searchAttributes : [\n    //    'tool'\n    //],\n\n    // ........................................................................ misc\n    /** String representation */\n    toString : function(){\n        return [ 'Job(', this.get( 'id' ), ':', this.get( 'tool_id' ), ')' ].join( '' );\n    }\n}));\n\n\n//==============================================================================\n/** @class Backbone collection for Jobs.\n */\nvar JobCollection = Backbone.Collection\n        .extend( BASE_MVC.LoggableMixin )\n        .extend(/** @lends JobCollection.prototype */{\n    _logNamespace : logNamespace,\n\n    model : Job,\n\n    /** root api url */\n    urlRoot : Galaxy.root + 'api/jobs',\n    url : function(){ return this.urlRoot; },\n\n    intialize : function( models, options ){\n        console.debug( models, options );\n    },\n\n    // ........................................................................ common queries\n    /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n    ids : function(){\n        return this.map( function( item ){ return item.get( 'id' ); });\n    },\n\n    /** Get jobs that are not ready\n     *  @returns array of content models\n     */\n    notReady : function(){\n        return this.filter( function( job ){\n            return !job.inReadyState();\n        });\n    },\n\n    /** return true if any jobs don't have details */\n    haveDetails : function(){\n        return this.all( function( job ){ return job.hasDetails(); });\n    },\n\n    // ........................................................................ ajax\n    /** fetches all details for each job in the collection using a queue */\n    queueDetailFetching : function(){\n        var collection = this,\n            queue = new AJAX_QUEUE.AjaxQueue( this.map( function( job ){\n                return function(){\n                    return job.fetch({ silent: true });\n                };\n            }));\n        queue.done( function(){\n            collection.trigger( 'details-loaded' );\n        });\n        return queue;\n    },\n\n    //toDAG : function(){\n    //    return new JobDAG( this.toJSON() );\n    //},\n\n    // ........................................................................ sorting/filtering\n    /** return a new collection of jobs whose attributes contain the substring matchesWhat */\n    matches : function( matchesWhat ){\n        return this.filter( function( job ){\n            return job.matches( matchesWhat );\n        });\n    },\n\n    // ........................................................................ misc\n    /** String representation. */\n    toString : function(){\n         return ([ 'JobCollection(', this.length, ')' ].join( '' ));\n    }\n\n//----------------------------------------------------------------------------- class vars\n}, {\n    /** class level fn for fetching the job details for all jobs in a history */\n    fromHistory : function( historyId ){\n        console.debug( this );\n        var Collection = this,\n            collection = new Collection([]);\n        collection.fetch({ data: { history_id: historyId }})\n            .done( function(){\n                window.queue = collection.queueDetailFetching();\n\n            });\n        return collection;\n    }\n});\n\n\n//=============================================================================\n    return {\n        Job             : Job,\n        JobCollection   : JobCollection\n    };\n});\n"]}