{"version":3,"sources":["mvc/job/job-model.js"],"names":["_historyContents","require","_states","_ajaxQueue","_baseMvc","_localization","logNamespace","searchableMixin","_baseMvc2","default","SearchableModelMixin","Job","Backbone","Model","extend","LoggableMixin","mixin","_logNamespace","defaults","model_class","tool_id","exit_code","inputs","outputs","params","create_time","state","_states2","NEW","options","response","this","parseParams","newParams","each","value","key","JSON","parse","attributes","update_time","debug","set","get","silent","outputCollection","_historyContents2","HistoryContents","_setUpListeners","on","currModel","newState","log","inReadyState","trigger","previous","_","contains","READY_STATES","hasDetails","isEmpty","urlRoot","Galaxy","root","toString","join","JobCollection","Collection","model","intialize","models","ids","map","item","notReady","filter","job","haveDetails","queueDetailFetching","collection","queue","_ajaxQueue2","AjaxQueue","fetch","done","matches","matchesWhat","length","fromHistory","historyId","console","data","history_id"],"mappings":"4IAAA,IAAAA,iBAAAC,QAAA,2FACAC,QAAAD,QAAA,+DACAE,WAAAF,QAAA,mEACAG,SAAAH,QAAA,2DACAI,cAAAJ,QAAA,2EACIK,aAAe,OAEfC,gBAAkBC,UAAAC,QAASC,qBAN/BC,IAAAC,SAAAC,MAAAC,OAAAN,UAAAC,QAAAM,eAAAD,OAUIN,UAAAC,QAASO,MACLT,iBAVRU,cAAAX,aAeYY,UAdZC,YAAA,MAiBgBC,QAAS,KACTC,UAAW,KAEXC,UACAC,WACAC,UAEAC,YAAa,KAtBzBnB,YAAJ,KACAoB,MAAAC,SAAAlB,QAAAmB,KAIUhB,MAASC,SAAMC,EAAOe,GAIpBZ,OADJa,EAAAN,OAA4BO,KAAAC,YAAAF,EAAAN,QACTlB,GAIXa,YAAa,SADPK,GAuBN,IAAIS,KAjBI,OAHRb,EAASc,KAHHV,EAAA,SAAAW,EAAAC,GAIKH,EAJLG,GAAAC,KAAAC,MAAAH,KAAAF,GAUNR,WAAa,SAVPc,EAAAV,GAWNW,KAAaC,MAXPV,KAAA,mBAAAQ,EAAAV,GAJcE,KAAAW,IAAA,SAAAX,KAAAC,YAAAD,KAAAY,IAAA,YAuChBC,QAAQ,IAlBZd,KAASN,iBACFM,EAAPe,kBAtBoB,IAAAC,kBAAArC,QAAAsC,oBA6CpBhB,KAAKiB,mBAjBLA,gBAAA,WA5BoBjB,KAAAkB,GAAA,eAAA,SAAAC,EAAAC,GAsDhBpB,KAAKqB,IAAIrB,KAAO,sBAAuBmB,EAAWC,GApB1DpB,KAAAsB,gBACYtB,KAAAuB,QACU,cAsBNJ,EApBOC,EACPpB,KAAAwB,SAAA,aAYhBP,aAAiB,WACb,OAAAQ,EAAAC,SAAA9B,SAAAlB,QAAAiD,aAAA3B,KAAAY,IAAA,WAIQgB,WAAKL,WAHb,OAAAE,EAAAI,QAAA7B,KAAAY,IAAA,aA6BJkB,QAASC,OAAOC,KAAO,WAFvBC,SAAA,WACA,OACgBD,OAChBhC,KAAAY,IAAA,MAeQ,IAbRZ,KAAAY,IAAA,WACA,KACAsB,KAAA,QAeCC,cAAAtD,SAAAuD,WAAArD,OAAAN,UAAAC,QAAAM,eAAAD,QAULG,cAAeX,aAJvB8D,MAAAzD,IAGIkD,QAAAC,OAAAC,KAAA,WACI9C,IAAAA,WAOI,OAAOc,KAAK8B,SAHhBQ,UAAA,SAAAC,EAAAzC,GACAgC,QAAgBE,MAAPO,EAAczC,IANW0C,IAAA,WAoB9B,OAAOxC,KAAKyC,IAAI,SAASC,GAL7B,OAAAA,EAAA9B,IAAA,SAOK+B,SAFD,WApB8B,OAAA3C,KAAA4C,OAAA,SAAAC,GA8B1B,OAAQA,EAAIvB,kBADhBwB,YAAYF,WACR,OAAO5C,KAAKsB,IAAAA,SAAJuB,GADZ,OAAAA,EAAAjB,gBAQImB,oBAAWnB,WADf,IAAAoB,EAAAhD,KApC8BiD,EAAA,IAAAC,YAAAxE,QAAAyE,UA8CtBnD,KAAKyC,IAAI,SAASI,GAL9B,OAAA,WACA,OAAAA,EAAAO,OAAAvC,QAAA,QAEI,OAGYoC,EAAAI,KAAO,WACHL,EAAWI,QAAQvC,oBAJnCoC,GAgBJK,QAAA,SAAAC,GAKI,OAAOvD,KAAK4C,OAAO,SAASC,GAHhC,OAAAA,EAAAS,QAAAC,MA9DkCtB,SAAA,WAyE9B,OAAQ,iBAAkBjC,KAAKwD,OAAQ,KAAKtB,KAAK,OAGrDuB,YAAA,SAAAC,GAEJC,QAAAjD,MAAAV,MACI,IACAyD,EAAa,IADbzD,SAKI,OAHA2D,EACIvB,OAAawB,MAAjBC,WAAAH,KACIV,KAAAA,WAECI,OAAQQ,MAAQC,EAAAA,wBADrBb,sBAYRpE,IAAKA,IACLuD,cAAeA","file":"../../../scripts/mvc/job/job-model.js","sourcesContent":["import HISTORY_CONTENTS from \"mvc/history/history-contents\";\nimport STATES from \"mvc/dataset/states\";\nimport AJAX_QUEUE from \"utils/ajax-queue\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nvar logNamespace = \"jobs\";\n//==============================================================================\nvar searchableMixin = BASE_MVC.SearchableModelMixin;\n/** @class Represents a job running or ran on the server job handlers.\n */\nvar Job = Backbone.Model.extend(BASE_MVC.LoggableMixin).extend(\n    BASE_MVC.mixin(\n        searchableMixin,\n        /** @lends Job.prototype */ {\n            _logNamespace: logNamespace,\n\n            /** default attributes for a model */\n            defaults: {\n                model_class: \"Job\",\n\n                tool_id: null,\n                exit_code: null,\n\n                inputs: {},\n                outputs: {},\n                params: {},\n\n                create_time: null,\n                update_time: null,\n                state: STATES.NEW\n            },\n\n            /** override to parse params on incomming */\n            parse: function(response, options) {\n                response.params = this.parseParams(response.params);\n                return response;\n            },\n\n            /** override to treat param values as json */\n            parseParams: function(params) {\n                var newParams = {};\n                _.each(params, function(value, key) {\n                    newParams[key] = JSON.parse(value);\n                });\n                return newParams;\n            },\n\n            /** instance vars and listeners */\n            initialize: function(attributes, options) {\n                this.debug(this + \"(Job).initialize\", attributes, options);\n\n                this.set(\"params\", this.parseParams(this.get(\"params\")), {\n                    silent: true\n                });\n\n                this.outputCollection =\n                    attributes.outputCollection ||\n                    new HISTORY_CONTENTS.HistoryContents([]);\n                this._setUpListeners();\n            },\n\n            /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n            _setUpListeners: function() {\n                // if the state has changed and the new state is a ready state, fire an event\n                this.on(\"change:state\", function(currModel, newState) {\n                    this.log(this + \" has changed state:\", currModel, newState);\n                    if (this.inReadyState()) {\n                        this.trigger(\n                            \"state:ready\",\n                            currModel,\n                            newState,\n                            this.previous(\"state\")\n                        );\n                    }\n                });\n            },\n\n            // ........................................................................ common queries\n            /** Is this job in a 'ready' state; where 'Ready' states are states where no\n     *      processing is left to do on the server.\n     */\n            inReadyState: function() {\n                return _.contains(STATES.READY_STATES, this.get(\"state\"));\n            },\n\n            /** Does this model already contain detailed data (as opposed to just summary level data)? */\n            hasDetails: function() {\n                //?? this may not be reliable\n                return !_.isEmpty(this.get(\"outputs\"));\n            },\n\n            // ........................................................................ ajax\n            /** root api url */\n            urlRoot: Galaxy.root + \"api/jobs\",\n            //url : function(){ return this.urlRoot; },\n\n            // ........................................................................ searching\n            // see base-mvc, SearchableModelMixin\n            /** what attributes of an Job will be used in a text search */\n            //searchAttributes : [\n            //    'tool'\n            //],\n\n            // ........................................................................ misc\n            /** String representation */\n            toString: function() {\n                return [\n                    \"Job(\",\n                    this.get(\"id\"),\n                    \":\",\n                    this.get(\"tool_id\"),\n                    \")\"\n                ].join(\"\");\n            }\n        }\n    )\n);\n\n//==============================================================================\n/** @class Backbone collection for Jobs.\n */\nvar JobCollection = Backbone.Collection.extend(BASE_MVC.LoggableMixin).extend(\n    /** @lends JobCollection.prototype */ {\n        _logNamespace: logNamespace,\n\n        model: Job,\n\n        /** root api url */\n        urlRoot: Galaxy.root + \"api/jobs\",\n        url: function() {\n            return this.urlRoot;\n        },\n\n        intialize: function(models, options) {\n            console.debug(models, options);\n        },\n\n        // ........................................................................ common queries\n        /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n        ids: function() {\n            return this.map(function(item) {\n                return item.get(\"id\");\n            });\n        },\n\n        /** Get jobs that are not ready\n     *  @returns array of content models\n     */\n        notReady: function() {\n            return this.filter(function(job) {\n                return !job.inReadyState();\n            });\n        },\n\n        /** return true if any jobs don't have details */\n        haveDetails: function() {\n            return this.all(function(job) {\n                return job.hasDetails();\n            });\n        },\n\n        // ........................................................................ ajax\n        /** fetches all details for each job in the collection using a queue */\n        queueDetailFetching: function() {\n            var collection = this,\n                queue = new AJAX_QUEUE.AjaxQueue(\n                    this.map(function(job) {\n                        return function() {\n                            return job.fetch({ silent: true });\n                        };\n                    })\n                );\n            queue.done(function() {\n                collection.trigger(\"details-loaded\");\n            });\n            return queue;\n        },\n\n        //toDAG : function(){\n        //    return new JobDAG( this.toJSON() );\n        //},\n\n        // ........................................................................ sorting/filtering\n        /** return a new collection of jobs whose attributes contain the substring matchesWhat */\n        matches: function(matchesWhat) {\n            return this.filter(function(job) {\n                return job.matches(matchesWhat);\n            });\n        },\n\n        // ........................................................................ misc\n        /** String representation. */\n        toString: function() {\n            return [\"JobCollection(\", this.length, \")\"].join(\"\");\n        }\n\n        //----------------------------------------------------------------------------- class vars\n    },\n    {\n        /** class level fn for fetching the job details for all jobs in a history */\n        fromHistory: function(historyId) {\n            console.debug(this);\n            var Collection = this,\n                collection = new Collection([]);\n            collection\n                .fetch({ data: { history_id: historyId } })\n                .done(function() {\n                    window.queue = collection.queueDetailFetching();\n                });\n            return collection;\n        }\n    }\n);\n\n//=============================================================================\nexport default {\n    Job: Job,\n    JobCollection: JobCollection\n};\n"]}