{"version":3,"sources":["mvc/history/options-menu.js"],"names":["buildMenu","isAnon","purgeAllowed","urlRoot","_","clone","menu","filter","menuOption","anon","purge","href","target","confirm","func","galaxy_main","location","_popupMenu","require","_copyDialog","_baseMvc","_localization","_webhooks","html","_localization2","default","header","Galaxy","currHistoryPanel","createNewHistory","_copyDialog2","model","done","loadCurrentHistory","_delete","router","push","id","post","root","$","user_action","webhooks_menu","each","url","async","callback","index","webhook","toJSON","activate","config","title","options","merge","create","$button","undefined","anonymous","_popupMenu2"],"mappings":"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","file":"../../../scripts/mvc/history/options-menu.js","sourcesContent":["import PopupMenu from \"mvc/ui/popup-menu\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport Webhooks from \"mvc/webhooks\";\n\n// ============================================================================\nvar menu = [\n    {\n        html: _l(\"History Lists\"),\n        header: true\n    },\n    {\n        html: _l(\"Saved Histories\"),\n        href: \"histories/list\",\n        target: \"_top\"\n    },\n    {\n        html: _l(\"Histories Shared with Me\"),\n        href: \"histories/list_shared\",\n        target: \"_top\"\n    },\n    {\n        html: _l(\"Current History\"),\n        header: true,\n        anon: true\n    },\n    {\n        html: _l(\"Create New\"),\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel) {\n                Galaxy.currHistoryPanel.createNewHistory();\n            }\n        }\n    },\n    {\n        html: _l(\"Copy History\"),\n        func: function() {\n            historyCopyDialog(Galaxy.currHistoryPanel.model).done(function() {\n                Galaxy.currHistoryPanel.loadCurrentHistory();\n            });\n        }\n    },\n    {\n        html: _l(\"Share or Publish\"),\n        href: \"history/sharing\"\n    },\n    {\n        html: _l(\"Show Structure\"),\n        href: \"history/display_structured\",\n        anon: true\n    },\n    {\n        html: _l(\"Extract Workflow\"),\n        href: \"workflow/build_from_current_history\"\n    },\n    {\n        html: _l(\"Delete\"),\n        anon: true,\n        func: function() {\n            if (\n                Galaxy &&\n                Galaxy.currHistoryPanel &&\n                confirm(_l(\"Really delete the current history?\"))\n            ) {\n                Galaxy.currHistoryPanel.model._delete().done(function() {\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n            }\n        }\n    },\n    {\n        html: _l(\"Delete Permanently\"),\n        purge: true,\n        anon: true,\n        func: function() {\n            if (\n                Galaxy &&\n                Galaxy.currHistoryPanel &&\n                confirm(\n                    _l(\n                        \"Really delete the current history permanently? This cannot be undone.\"\n                    )\n                )\n            ) {\n                Galaxy.currHistoryPanel.model.purge().done(function() {\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n            }\n        }\n    },\n\n    {\n        html: _l(\"Dataset Actions\"),\n        header: true,\n        anon: true\n    },\n    {\n        html: _l(\"Copy Datasets\"),\n        href: \"dataset/copy_datasets\"\n    },\n    {\n        html: _l(\"Dataset Security\"),\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel && Galaxy.router) {\n                Galaxy.router.push(\n                    \"/histories/permissions?id=\" +\n                        Galaxy.currHistoryPanel.model.id\n                );\n            }\n        }\n    },\n    {\n        html: _l(\"Resume Paused Jobs\"),\n        href: \"history/resume_paused_jobs?current=True\",\n        anon: true\n    },\n    {\n        html: _l(\"Collapse Expanded Datasets\"),\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel) {\n                Galaxy.currHistoryPanel.collapseAll();\n            }\n        }\n    },\n    {\n        html: _l(\"Unhide Hidden Datasets\"),\n        anon: true,\n        func: function() {\n            // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n            if (\n                Galaxy &&\n                Galaxy.currHistoryPanel &&\n                confirm(_l(\"Really unhide all hidden datasets?\"))\n            ) {\n                $.post(\n                    Galaxy.root + \"history/adjust_hidden\",\n                    { user_action: \"unhide\" },\n                    function() {\n                        Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                );\n            }\n        }\n    },\n    {\n        html: _l(\"Delete Hidden Datasets\"),\n        anon: true,\n        func: function() {\n            // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n            if (\n                Galaxy &&\n                Galaxy.currHistoryPanel &&\n                confirm(_l(\"Really delete all hidden datasets?\"))\n            ) {\n                $.post(\n                    Galaxy.root + \"history/adjust_hidden\",\n                    { user_action: \"delete\" },\n                    function() {\n                        Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                );\n            }\n        }\n    },\n    {\n        html: _l(\"Purge Deleted Datasets\"),\n        confirm: _l(\n            \"Really delete all deleted datasets permanently? This cannot be undone.\"\n        ),\n        href: \"history/purge_deleted_datasets\",\n        purge: true,\n        anon: true\n    },\n\n    {\n        html: _l(\"Downloads\"),\n        header: true\n    },\n    {\n        html: _l(\"Export Tool Citations\"),\n        href: \"history/citations\",\n        anon: true\n    },\n    {\n        html: _l(\"Export History to File\"),\n        href: \"history/export_archive?preview=True\",\n        anon: true\n    },\n\n    {\n        html: _l(\"Other Actions\"),\n        header: true\n    },\n    {\n        html: _l(\"Import from File\"),\n        href: \"history/import_archive\"\n    }\n];\n\n// Webhooks\nWebhooks.add({\n    url: \"api/webhooks/history-menu/all\",\n    async: false, // (hypothetically) slows down the performance\n    callback: function(webhooks) {\n        var webhooks_menu = [];\n\n        $.each(webhooks.models, function(index, model) {\n            var webhook = model.toJSON();\n            if (webhook.activate) {\n                webhooks_menu.push({\n                    html: _l(webhook.config.title),\n                    // func: function() {},\n                    anon: true\n                });\n            }\n        });\n\n        if (webhooks_menu.length > 0) {\n            webhooks_menu.unshift({\n                html: _l(\"Webhooks\"),\n                header: true\n            });\n            $.merge(menu, webhooks_menu);\n        }\n    }\n});\n\nfunction buildMenu(isAnon, purgeAllowed, urlRoot) {\n    return _.clone(menu).filter(function(menuOption) {\n        if (isAnon && !menuOption.anon) {\n            return false;\n        }\n        if (!purgeAllowed && menuOption.purge) {\n            return false;\n        }\n\n        //TODO:?? hard-coded galaxy_main\n        if (menuOption.href) {\n            menuOption.href = urlRoot + menuOption.href;\n            menuOption.target = menuOption.target || \"galaxy_main\";\n        }\n\n        if (menuOption.confirm) {\n            menuOption.func = function() {\n                if (confirm(menuOption.confirm)) {\n                    galaxy_main.location = menuOption.href;\n                }\n            };\n        }\n        return true;\n    });\n}\n\nvar create = function($button, options) {\n    options = options || {};\n    var isAnon = options.anonymous === undefined ? true : options.anonymous,\n        purgeAllowed = options.purgeAllowed || false,\n        menu = buildMenu(isAnon, purgeAllowed, Galaxy.root);\n    //console.debug( 'menu:', menu );\n    return new PopupMenu($button, menu);\n};\n\n// ============================================================================\nexport default create;\n"]}