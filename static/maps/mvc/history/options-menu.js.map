{"version":3,"sources":["mvc/history/options-menu.js"],"names":["define","PopupMenu","historyCopyDialog","BASE_MVC","_l","Webhooks","buildMenu","purgeAllowed","urlRoot","_","clone","menu","filter","menuOption","isAnon","anon","purge","href","target","confirm","func","galaxy_main","location","html","Galaxy","header","currHistoryPanel","createNewHistory","model","done","loadCurrentHistory","_delete","$","post","root","user_action","url","webhooks","webhooks_menu","merge","add","async","callback","each","index","toJSON","push","webhook","config","title","length","unshift","create","$button","options","undefined","anonymous"],"mappings":"aAAAA,QACI,oBADJA,0BAGI,eAKJ,qBAHI,gBAKJ,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GA2NI,SAAAC,EAAWL,EAAJM,EAAAC,GACV,OAPDC,EAAAC,MAAAC,GAAAC,OAAA,SAAAC,GAxBQ,QAAIC,IAAWD,EAAWE,WAvMlCR,GAAAM,EAAAG,SA+MYH,EAAWI,OACXJ,EAAWI,KAAOT,EAAUK,EAAWI,KACvCJ,EAAWK,OAASL,EAAWK,QAAU,eAGzCL,EAAWM,UACXN,EAAWO,KAAO,WACVD,QAASN,EAAWM,WACpBE,YAAYC,SAAWT,EAAWI,SAIvC,MA/MX,IAAAN,IAMIM,KAAUb,EAAA,iBACVc,QAAU,IAIVK,KAAcnB,EAAA,mBACda,KAAU,iBACVC,OAAU,SAKVH,KAAUX,EAAA,4BAEda,KAAA,wBACIM,OAAc,SAGNC,KAAAA,EAAAA,mBACHC,QAAA,EACJV,MAAA,IAIDK,KAAUhB,EAAA,cACNF,KAAAA,WAEQsB,QAAOE,OAAAA,kBAFfF,OAAAE,iBAAAC,sBAURJ,KAAAnB,EAAA,gBACImB,KAAc,WACdN,EAAUO,OAAAE,iBAFdE,OAGcC,KAAA,WAEdL,OAAAE,iBAAAI,0BAMIf,KAFJX,EAAA,oBAGIgB,KAAU,oBAEsDI,KAAAA,EAAAA,kBAA8CP,KAAtG,6BACHF,MAAA,IAILQ,KAAcnB,EAAA,oBACdY,KAAU,wCAGNO,KAAIC,EAAAA,UAEAA,MAAAA,EAAsDA,KAAAA,WAA8CA,QAApGA,OAAAE,kBAAAP,QAAAf,EAAA,wCACHoB,OAAAE,iBAAAE,MAAAG,UAAAF,KAAA,WAAAL,OAAAE,iBAAAI,0BAQLf,KAAUX,EAAA,sBAEdY,OAAA,EACIO,MAAc,EACdN,KAAU,WAEdO,QAAAA,OAAAE,kBACctB,QAAIA,EAAA,2EACJoB,OAAAE,iBAAAE,MAAAZ,QAAAa,KAAA,WAAAL,OAAAE,iBAAAI,0BASVV,KAAUhB,EAAA,mBACNqB,QAAID,EACAA,MAAAA,IAIZD,KAAAnB,EAAA,iBACImB,KAAc,0BAGVA,KAAAnB,EAAA,oBACAa,KAAIO,yCAGgED,KAFhEnB,EAAA,sBAGHa,KAAA,0CACJF,MAAA,IAIDA,KAFJX,EAAA,8BAGIgB,KAAU,WACNI,QAAAA,OAAAE,kBACIF,OAAAA,iBAAiBE,iBAKxBH,KAAAnB,EAAA,0BAELW,MAAA,EACIQ,KAAc,WAEJC,QAAAA,OAAAE,kBAHdP,QAAAf,EAAA,wCAIc4B,EAAAC,KAJdT,OAAAU,KAAA,yBAKcC,YAAA,UAId,WAAAX,OAAAE,iBAAAI,0BAMIb,KAAUb,EAAA,0BACVW,MAAU,EAEdK,KAAA,WAEcI,QAAAA,OAAAE,kBAFdP,QAAAf,EAAA,wCAGc4B,EAAAC,KAAAT,OAAAU,KAAA,yBAGdC,YAAA,UACkB,WADlBX,OAAAE,iBAAAI,0BAnJJP,KAAAnB,EAAA,0BA6HQe,QAAUf,EAAI,0EAgCtBa,KAAA,iCACAZ,OAAa,EACT+B,MAAK,IAKDJ,KAAA5B,EAAOiC,aACHZ,QAAA,IAGQF,KAAAA,EAAAA,yBACAN,KAAA,oBACAF,MAAAA,IAGXQ,KATDnB,EAAA,0BArBAa,KAAU,sCAgCVF,MAAIuB,IACsBf,KAAtBnB,EAAA,iBAIA4B,QAAEO,IAtBdhB,KAAAnB,EAAA,oBALQa,KAAU,2BAqCTZ,EAAAmC,KACDJ,IAAA,gCACIK,OAAA,EACHC,SAAA,SAAAL,GA/BD,IAAIC,KAkCJN,EAAAW,KAAAN,EAAIxB,OAAJ,SAAqB+B,EAAAhB,GACjBf,IAAAA,EAAAA,EAAAgC,SACAhC,EAAAA,UACHyB,EAAAQ,MA/BWvB,KAAOnB,EAAI2C,EAAQC,OAAOC,OAkClCpC,MAAWO,MAKdkB,EAAAY,OAAA,IACDZ,EAAAa,SArBJ5B,KAAAnB,EAAA,YAuBHqB,QAAA,IAEG2B,EAAAA,MAASzC,EAATyC,OAWA,OAXS,SAAUC,EAASC,GAE5B,IAEI3C,EAAOL,OAFwBiD,KADnCD,EAAUA,OACWE,WAAgCF,EAAQE,UAC1CF,EAAQ/C,eAAgB,EACCiB,OAAOU,MAEnD,OAAO,IAAIjC,EAAWoD,EAAS1C","file":"../../../scripts/mvc/history/options-menu.js","sourcesContent":["define([\n    \"mvc/ui/popup-menu\",\n    \"mvc/history/copy-dialog\",\n    \"mvc/base-mvc\",\n    \"utils/localization\",\n    \"mvc/webhooks\"\n], function( PopupMenu, historyCopyDialog, BASE_MVC, _l, Webhooks ){\n\n'use strict';\n\n// ============================================================================\nvar menu = [\n    {\n        html    : _l( 'History Lists' ),\n        header  : true\n    },\n    {\n        html    : _l( 'Saved Histories' ),\n        href    : 'histories/list',\n        target  : '_top'\n\n    },\n    {\n        html    : _l( 'Histories Shared with Me' ),\n        href    : 'histories/list_shared',\n        target  : '_top'\n    },\n    {\n        html    : _l( 'Current History' ),\n        header  : true,\n        anon    : true\n    },\n    {\n        html    : _l( 'Create New' ),\n        func    : function() {\n            if( Galaxy && Galaxy.currHistoryPanel ){\n                Galaxy.currHistoryPanel.createNewHistory();\n            }\n        },\n    },\n    {\n        html    : _l( 'Copy History' ),\n        func    : function() {\n            historyCopyDialog( Galaxy.currHistoryPanel.model )\n                .done( function(){\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n        },\n    },\n    {\n        html    : _l( 'Share or Publish' ),\n        href    : 'history/sharing',\n    },\n    {\n        html    : _l( 'Show Structure' ),\n        href    : 'history/display_structured',\n        anon    : true,\n    },\n    {\n        html    : _l( 'Extract Workflow' ),\n        href    : 'workflow/build_from_current_history',\n    },\n    {\n        html    : _l( 'Delete' ),\n        anon    : true,\n        func    : function() {\n            if( Galaxy && Galaxy.currHistoryPanel && confirm( _l( 'Really delete the current history?' ) ) ){\n                Galaxy.currHistoryPanel.model._delete().done(function(){Galaxy.currHistoryPanel.loadCurrentHistory();});\n            }\n        },\n    },\n    {\n        html    : _l( 'Delete Permanently' ),\n        purge   : true,\n        anon    : true,\n        func    : function() {\n            if( Galaxy && Galaxy.currHistoryPanel\n            &&  confirm( _l( 'Really delete the current history permanently? This cannot be undone.' ) ) ){\n                Galaxy.currHistoryPanel.model.purge().done(function(){Galaxy.currHistoryPanel.loadCurrentHistory();});\n            }\n        },\n    },\n\n\n    {\n        html    : _l( 'Dataset Actions' ),\n        header  : true,\n        anon    : true\n    },\n    {\n        html    : _l( 'Copy Datasets' ),\n        href    : 'dataset/copy_datasets',\n    },\n    {\n        html    : _l( 'Dataset Security' ),\n        href    : 'root/history_set_default_permissions',\n    },\n    {\n        html    : _l( 'Resume Paused Jobs' ),\n        href    : 'history/resume_paused_jobs?current=True',\n        anon    : true,\n    },\n    {\n        html    : _l( 'Collapse Expanded Datasets' ),\n        func    : function() {\n            if( Galaxy && Galaxy.currHistoryPanel ){\n                Galaxy.currHistoryPanel.collapseAll();\n            }\n        },\n    },\n    {\n        html    : _l( 'Unhide Hidden Datasets' ),\n        anon    : true,\n        func    : function() {\n            // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n            if( Galaxy && Galaxy.currHistoryPanel && confirm( _l( 'Really unhide all hidden datasets?' ) ) ){\n                $.post(Galaxy.root + \"history/adjust_hidden\",\n                       { 'user_action' : 'unhide' },\n                       function(){Galaxy.currHistoryPanel.loadCurrentHistory();});\n            }\n        },\n    },\n    {\n        html    : _l( 'Delete Hidden Datasets' ),\n        anon    : true,\n        func    : function() {\n            // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n            if( Galaxy && Galaxy.currHistoryPanel && confirm( _l( 'Really delete all hidden datasets?' ) ) ){\n                $.post(Galaxy.root + \"history/adjust_hidden\",\n                       { 'user_action' : 'delete' },\n                       function(){Galaxy.currHistoryPanel.loadCurrentHistory();});\n            }\n        },\n    },\n    {\n        html    : _l( 'Purge Deleted Datasets' ),\n        confirm : _l( 'Really delete all deleted datasets permanently? This cannot be undone.' ),\n        href    : 'history/purge_deleted_datasets',\n        purge   : true,\n        anon    : true,\n    },\n\n\n    {\n        html    : _l( 'Downloads' ),\n        header  : true\n    },\n    {\n        html    : _l( 'Export Tool Citations' ),\n        href    : 'history/citations',\n        anon    : true,\n    },\n    {\n        html    : _l( 'Export History to File' ),\n        href    : 'history/export_archive?preview=True',\n        anon    : true,\n    },\n\n    {\n        html    : _l( 'Other Actions' ),\n        header  : true\n    },\n    {\n        html    : _l( 'Import from File' ),\n        href    : 'history/import_archive',\n    }\n];\n\n// Webhooks\nWebhooks.add({\n    url: 'api/webhooks/history-menu/all',\n    async: false,   // (hypothetically) slows down the performance\n    callback: function(webhooks) {\n        var webhooks_menu = [];\n\n        $.each(webhooks.models, function(index, model) {\n            var webhook = model.toJSON();\n            if (webhook.activate) {\n                webhooks_menu.push({\n                    html : _l( webhook.config.title ),\n                    // func: function() {},\n                    anon : true\n                });\n            }\n        });\n\n        if (webhooks_menu.length > 0) {\n            webhooks_menu.unshift({\n                html   : _l( 'Webhooks' ),\n                header : true\n            });\n            $.merge(menu, webhooks_menu);\n        }\n    }\n});\n\n\nfunction buildMenu( isAnon, purgeAllowed, urlRoot ){\n    return _.clone( menu ).filter( function( menuOption ){\n        if( isAnon && !menuOption.anon ){\n            return false;\n        }\n        if( !purgeAllowed && menuOption.purge ){\n            return false;\n        }\n\n        //TODO:?? hard-coded galaxy_main\n        if( menuOption.href ){\n            menuOption.href = urlRoot + menuOption.href;\n            menuOption.target = menuOption.target || 'galaxy_main';\n        }\n\n        if( menuOption.confirm ){\n            menuOption.func = function(){\n                if( confirm( menuOption.confirm ) ){\n                    galaxy_main.location = menuOption.href;\n                }\n            };\n        }\n        return true;\n    });\n}\n\nvar create = function( $button, options ){\n    options = options || {};\n    var isAnon = options.anonymous === undefined? true : options.anonymous,\n        purgeAllowed = options.purgeAllowed || false,\n        menu = buildMenu( isAnon, purgeAllowed, Galaxy.root );\n    //console.debug( 'menu:', menu );\n    return new PopupMenu( $button, menu );\n};\n\n\n// ============================================================================\n    return create;\n});\n"]}