{"version":3,"sources":["mvc/history/options-menu.js"],"names":["buildMenu","isAnon","purgeAllowed","urlRoot","_","clone","menu","filter","menuOption","anon","purge","href","target","confirm","func","galaxy_main","location","html","_localization2","default","header","Galaxy","currHistoryPanel","createNewHistory","model","done","loadCurrentHistory","_delete","router","id","$","collapseAll","post","root","user_action","webhooks_menu","_webhooks2","add","async","callback","webhooks","each","models","index","webhook","toJSON","activate","create","options","config","title","length","unshift","merge","$button","undefined","anonymous","_popupMenu2"],"mappings":"qOAoOA,SAASA,EAAUC,EAAQC,EAAcC,GACrC,OAAOC,EAAEC,MAAMC,GAAMC,OAAO,SAASC,GACjC,QAAIP,IAAWO,EAAWC,WAGrBP,GAAgBM,EAAWE,SAK5BF,EAAWG,OACXH,EAAWG,KAAOR,EAAUK,EAAWG,KACvCH,EAAWI,OAASJ,EAAWI,QAAU,eAGzCJ,EAAWK,UACXL,EAAWM,KAAO,WACVD,QAAQL,EAAWK,WACnBE,YAAYC,SAAWR,EAAWG,SAIvC,8FAnPXL,IAEIW,MAAM,EAAAC,EAAAC,SAAG,iBACTC,QAAQ,IAGRH,MAAM,EAAAC,EAAAC,SAAG,mBACTR,KAAM,iBACNC,OAAQ,SAGRK,MAAM,EAAAC,EAAAC,SAAG,4BACTR,KAAM,wBACNC,OAAQ,SAdhBK,MAAA,EAAAC,EAAAC,SAAA,mBACIb,QACA,EACIW,MAAM,IAINA,MAAM,EAAAC,EAAAC,SAAA,cACNR,KAAM,WACEU,QAAAA,OAAAC,kBAEZD,OAAAC,iBAAAC,sBAMIN,MAAM,EAAAC,EAAAC,SAAA,gBACNC,KAAAA,YACAX,EAAAA,EAAAA,SAAMY,OAAAC,iBAAAE,OAAAC,KAAA,WAEVJ,OAAAC,iBAAAI,0BAKST,MAAA,EAAAC,EAAAC,SAAA,oBACJR,KAAA,oBAIDG,MAAM,EAAAI,EAAAC,SAAA,kBACFR,KAAA,6BACIU,MAAAA,IAIZJ,MAAA,EAAAC,EAAAC,SAAA,oBACIF,KAAM,wCAINA,MAAM,EAAAC,EAAAC,SAAA,UACNR,MAAM,EACNF,KAAM,WAGAY,QACAA,OAAAC,kBAEVT,SAAA,EAAAK,EAAAC,SAAA,wCAEUE,OAFVC,iBAAAE,MAAAG,UAAAF,KAAA,WAGUJ,OAAAC,iBAAWI,0BAUhBT,MAAA,EAAAC,EAAAC,SAAA,sBAELT,OAAA,EACIO,MAAM,EACNP,KAAAA,WAEMW,QAEEA,OAAAA,kBAQAA,SACIA,EAAAA,EAAAA,SADJ,2EAQFA,OAAAC,iBAAAE,MAAGd,QAAAe,KAAH,WADVJ,OAAAC,iBAAAI,0BAWIZ,MAAM,EAAAI,EAAAC,SAAA,mBACFC,QAAIC,EACAA,MAAAA,IAOZJ,MAAA,EAAAC,EAAAC,SAAA,iBACIF,KAAM,0BAIVA,MAAA,EAAAC,EAAAC,SAAA,oBACIF,KAAM,WACAI,QAAAA,OAAWC,kBAAAD,OAAAO,QACTP,OAAAA,OAAUA,KACVA,6BACHA,OAAAC,iBAAAE,MAAAK,OAODZ,MAAA,EAAAC,EAAAC,SAAA,sBACAR,KAAA,0CAKImB,MAAAA,IAOHb,MAAA,EAAAC,EAAAC,SAAA,8BACJL,KAAA,WAELO,QAAAA,OAAAC,kBACUD,OAAAC,iBAAAS,iBASED,MAAAA,EAAAA,EAAAA,SAAAA,0BAIQT,MAAAA,EACHP,KAAA,WAKjBO,QACUA,OAAAC,kBACNT,SAAS,EAAAK,EAAAC,SAAA,wCAIFW,EAAAE,KACDX,OAAAY,KAAA,yBAGVC,YAAA,UACU,WACEb,OAAAC,iBAAAI,0BASRf,MAAM,EAAAO,EAAAC,SAAA,0BACNV,MAAM,EAGVK,KAAA,WAIAO,QACUA,OAAAC,kBACAT,SAAA,EAAAK,EAAAC,SAAA,wCAzCEW,EAAEE,KA6ClBX,OAAAY,KAAA,yBACAC,YAAa,UACJ,WACSb,OAAAC,iBAAAI,0BAOFS,MAAAA,EAAAA,EAAAA,SAAAA,0BACIlB,SAAAA,EAAAA,EAAAA,SACA,0EAFeN,KAAA,iCAKtBD,OAAA,EACJD,MATD,IAaQQ,MAAAA,EAAAA,EAAAA,SAAAA,aACAG,QAAAA,IAGPH,MAAA,EAAAC,EAAAC,SAAA,yBACJR,KAAA,oBAxBLF,MAAA,IA4BIQ,MAAA,EAAAC,EAAAC,SAASd,0BACLM,KAAA,sCACIF,MAAA,IAIHQ,MAAA,EAAAC,EAAAC,SAAA,iBA3CDC,QAAQ,IA+CJZ,MAAAA,EAAAA,EAAAA,SAAAA,oBACAA,KAAAA,2BAKI4B,EAAAjB,QAAAkB,KACItB,IAAAA,gCACHuB,OAAA,EACJC,SAAA,SAJDC,GAKH,IAAAL,KAEJL,EAtBDW,KAAAD,EAAAE,OAAA,SAAAC,EAAAnB,GAuBH,IAAAoB,EAAApB,EAAAqB,SA3CeD,EAAQE,UA6CpBC,EAAAA,MACUC,MAAAA,EAAAA,EAAAA,SAAWJ,EAArBK,OAAAC,OAEIhD,MAAAA,MAvCIiC,EAAcgB,OAAS,IA6CnChB,EAAAiB,SA3CgBnC,MA4CD8B,EAAAA,EAAAA,SAAAA,YA3CC3B,QAAQ,IAEZU,EAAEuB,MAAM/C,EAAM6B,iBA+Bb,SAASmB,EAASN,GAE3B,IAEI1C,EAAON,OAFwBuD,KADnCP,EAAUA,OACWQ,WAAiCR,EAAQQ,UAC3CR,EAAQ9C,eAAgB,EACAmB,OAAOY,MAElD,OAAO,IAAAwB,EAAAtC,QAAcmC,EAAShD","file":"../../../scripts/mvc/history/options-menu.js","sourcesContent":["import PopupMenu from \"mvc/ui/popup-menu\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport Webhooks from \"mvc/webhooks\";\n\n// ============================================================================\nvar menu = [\n    {\n        html: _l(\"History Lists\"),\n        header: true\n    },\n    {\n        html: _l(\"Saved Histories\"),\n        href: \"histories/list\",\n        target: \"_top\"\n    },\n    {\n        html: _l(\"Histories Shared with Me\"),\n        href: \"histories/list_shared\",\n        target: \"_top\"\n    },\n    {\n        html: _l(\"Current History\"),\n        header: true,\n        anon: true\n    },\n    {\n        html: _l(\"Create New\"),\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel) {\n                Galaxy.currHistoryPanel.createNewHistory();\n            }\n        }\n    },\n    {\n        html: _l(\"Copy History\"),\n        func: function() {\n            historyCopyDialog(Galaxy.currHistoryPanel.model).done(function() {\n                Galaxy.currHistoryPanel.loadCurrentHistory();\n            });\n        }\n    },\n    {\n        html: _l(\"Share or Publish\"),\n        href: \"history/sharing\"\n    },\n    {\n        html: _l(\"Show Structure\"),\n        href: \"history/display_structured\",\n        anon: true\n    },\n    {\n        html: _l(\"Extract Workflow\"),\n        href: \"workflow/build_from_current_history\"\n    },\n    {\n        html: _l(\"Delete\"),\n        anon: true,\n        func: function() {\n            if (\n                Galaxy &&\n                Galaxy.currHistoryPanel &&\n                confirm(_l(\"Really delete the current history?\"))\n            ) {\n                Galaxy.currHistoryPanel.model._delete().done(function() {\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n            }\n        }\n    },\n    {\n        html: _l(\"Delete Permanently\"),\n        purge: true,\n        anon: true,\n        func: function() {\n            if (\n                Galaxy &&\n                Galaxy.currHistoryPanel &&\n                confirm(\n                    _l(\n                        \"Really delete the current history permanently? This cannot be undone.\"\n                    )\n                )\n            ) {\n                Galaxy.currHistoryPanel.model.purge().done(function() {\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n            }\n        }\n    },\n\n    {\n        html: _l(\"Dataset Actions\"),\n        header: true,\n        anon: true\n    },\n    {\n        html: _l(\"Copy Datasets\"),\n        href: \"dataset/copy_datasets\"\n    },\n    {\n        html: _l(\"Dataset Security\"),\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel && Galaxy.router) {\n                Galaxy.router.push(\n                    \"/histories/permissions?id=\" +\n                        Galaxy.currHistoryPanel.model.id\n                );\n            }\n        }\n    },\n    {\n        html: _l(\"Resume Paused Jobs\"),\n        href: \"history/resume_paused_jobs?current=True\",\n        anon: true\n    },\n    {\n        html: _l(\"Collapse Expanded Datasets\"),\n        func: function() {\n            if (Galaxy && Galaxy.currHistoryPanel) {\n                Galaxy.currHistoryPanel.collapseAll();\n            }\n        }\n    },\n    {\n        html: _l(\"Unhide Hidden Datasets\"),\n        anon: true,\n        func: function() {\n            // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n            if (\n                Galaxy &&\n                Galaxy.currHistoryPanel &&\n                confirm(_l(\"Really unhide all hidden datasets?\"))\n            ) {\n                $.post(\n                    Galaxy.root + \"history/adjust_hidden\",\n                    { user_action: \"unhide\" },\n                    function() {\n                        Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                );\n            }\n        }\n    },\n    {\n        html: _l(\"Delete Hidden Datasets\"),\n        anon: true,\n        func: function() {\n            // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n            if (\n                Galaxy &&\n                Galaxy.currHistoryPanel &&\n                confirm(_l(\"Really delete all hidden datasets?\"))\n            ) {\n                $.post(\n                    Galaxy.root + \"history/adjust_hidden\",\n                    { user_action: \"delete\" },\n                    function() {\n                        Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                );\n            }\n        }\n    },\n    {\n        html: _l(\"Purge Deleted Datasets\"),\n        confirm: _l(\n            \"Really delete all deleted datasets permanently? This cannot be undone.\"\n        ),\n        href: \"history/purge_deleted_datasets\",\n        purge: true,\n        anon: true\n    },\n\n    {\n        html: _l(\"Downloads\"),\n        header: true\n    },\n    {\n        html: _l(\"Export Tool Citations\"),\n        href: \"history/citations\",\n        anon: true\n    },\n    {\n        html: _l(\"Export History to File\"),\n        href: \"history/export_archive?preview=True\",\n        anon: true\n    },\n\n    {\n        html: _l(\"Other Actions\"),\n        header: true\n    },\n    {\n        html: _l(\"Import from File\"),\n        href: \"history/import_archive\"\n    }\n];\n\n// Webhooks\nWebhooks.add({\n    url: \"api/webhooks/history-menu/all\",\n    async: false, // (hypothetically) slows down the performance\n    callback: function(webhooks) {\n        var webhooks_menu = [];\n\n        $.each(webhooks.models, function(index, model) {\n            var webhook = model.toJSON();\n            if (webhook.activate) {\n                webhooks_menu.push({\n                    html: _l(webhook.config.title),\n                    // func: function() {},\n                    anon: true\n                });\n            }\n        });\n\n        if (webhooks_menu.length > 0) {\n            webhooks_menu.unshift({\n                html: _l(\"Webhooks\"),\n                header: true\n            });\n            $.merge(menu, webhooks_menu);\n        }\n    }\n});\n\nfunction buildMenu(isAnon, purgeAllowed, urlRoot) {\n    return _.clone(menu).filter(function(menuOption) {\n        if (isAnon && !menuOption.anon) {\n            return false;\n        }\n        if (!purgeAllowed && menuOption.purge) {\n            return false;\n        }\n\n        //TODO:?? hard-coded galaxy_main\n        if (menuOption.href) {\n            menuOption.href = urlRoot + menuOption.href;\n            menuOption.target = menuOption.target || \"galaxy_main\";\n        }\n\n        if (menuOption.confirm) {\n            menuOption.func = function() {\n                if (confirm(menuOption.confirm)) {\n                    galaxy_main.location = menuOption.href;\n                }\n            };\n        }\n        return true;\n    });\n}\n\nvar create = function($button, options) {\n    options = options || {};\n    var isAnon = options.anonymous === undefined ? true : options.anonymous,\n        purgeAllowed = options.purgeAllowed || false,\n        menu = buildMenu(isAnon, purgeAllowed, Galaxy.root);\n    //console.debug( 'menu:', menu );\n    return new PopupMenu($button, menu);\n};\n\n// ============================================================================\nexport default create;\n"]}