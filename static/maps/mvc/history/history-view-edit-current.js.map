{"version":3,"sources":["mvc/history/history-view-edit-current.js"],"names":["define","HISTORY_MODEL","HISTORY_VIEW_EDIT","BASE_MVC","_l","defaults","SessionStorageModel","extend","tagsEditorShown","annotationEditorShown","toString","JSON","stringify","this","toJSON","HistoryViewPrefs","storageKey","_super","HistoryViewEdit","className","prototype","HDCAViewClass","foldoutStyle","emptyMsg","initialize","attributes","id","join","panelStack","preferences","_","pick","keys","_setUpListeners","call","currentContentId","loadCurrentHistory","panel","on","switchToHistory","set","historyId","loadHistory","url","Galaxy","root","user","isAnonymous","trigger","$","when","createNewHistory","log","model","_setUpModelListeners","setModel","render","listenTo","checkForUpdates","_setUpCollectionListeners","arguments","change:id","$where","newState","oldState","get","collection","storage","includeHidden","removeItemView","_setUpBehaviors","$el","_debouncedScrollCaptureHandler","debounce","_buildNewRender","is","scrollTop","$scrollContainer","_renderQuotaMessage","off","$newRender","find","prependTo","_renderTags","tagsEditor","toggle","$whereTo","templates","quotaMsg","_renderAnnotation","annotationEditor","hidden","_swapNewRender","delay","_attachItems","addItemView","scrollTo","pos","_collapseDrilldownPanel","_setCurrentContentById","_setUpItemViewListeners","view","options","length","setCurrentContent","expanded:drilldown","v","drilldown","_expandDrilldownPanel","collapsed:drilldown","removeClass","addClass","delegateEvents","viewFromModelId","$controls","add","$list","hide","parentName","appendTo","show","pop","$toolMenu","events","clone","listenToGalaxy","ev","galaxy","upload","click .get-data-link","parent","click","useToURLRegexMap","center-frame:load","data","pathToMatch","fullpath","hdaId","display","result","report_error","rerun","show_params","regex","use","match","center-panel:load","connectToQuotaMeter","quotaMeter","showQuotaMessage","hideQuotaMessage","clearMessages","$target","isUndefined","$msg","children","not","slideDown","fxSpeed","remove","slideUp","unhideHidden","self","confirm","jQuery","contents","_filterAndUpdate","visible","deleted","purged","done","deleteHidden","CurrentHistoryView","quotaMsgTemplate","wrapTemplate"],"mappings":"aAAAA,QACI,4BADJA,gCAGI,eAIJ,sBAFG,SAAUC,EAAeC,EAAmBC,EAAUC,GASrDC,IAAAA,EAAWF,EAAAG,oBAAAC,QAEPC,UAEAC,iBAAAA,EAEAA,uBAAA,EAMJC,eAAW,GAEVA,SAAA,WAhBL,MAAA,oBAAAC,KAAAC,UAAAC,KAAAC,UAAA,OAsBCC,EAFDC,WAAA,WACI,MAAS,iBASb,IAAAC,EAAAf,EAAAgB,gBASIC,EAAsBF,EAAOG,QAE7BD,UAAAF,EAAAG,UAAAD,UAAA,yBAC4DE,cALiBJ,EAAAG,UAAAC,cAAAd,QAMzEe,aAAe,cAenBC,UACAnB,EAAA,yBAAA,KACAoB,EAAAA,YACIC,sDAXIrB,EAAI,sBAaR,OACAA,EAAA,QACA,sDACIsB,EAAAA,oCAD8C,QATpDC,KAAK,IAgBHH,WAAKI,SAALH,GAXAA,EAAaA,MAgBhBZ,KAxC4EgB,YAAA,IAAAd,EAAAe,EAAAvB,QA6BrEmB,GAAKX,EAAiBC,cAa9Bc,EAAAC,KAAAN,EAAAK,EAAAE,KAAAjB,EAAAK,UAAAf,aAEIY,EAAAA,UAAOG,WAAUa,KAAAA,KAAgBC,GAGjCrB,KAAAe,cAGCf,KAFDsB,iBAAAV,EAAAU,kBAAA,MAOJF,gBAAA,WACAG,EAAAA,UAAAA,gBAAqBF,KAAArB,MAEpB,IA1D4EwB,EAAAxB,KA4D7EA,KAAAyB,GAAA,YAAA,WACAC,EAAAA,YAAkBC,IAAA,iBAAUC,MAL5BL,mBAAqB,WAarB,OAAAvB,KAAA6B,YAAA,MAAAC,IAAAC,OAAAC,KAAA,kCAIQN,gBAAA,SAAAE,EAAAhB,GACH,OAAAmB,OAAAE,KAAAC,eACDlC,KAAAmC,QAAYN,QAALtC,EAAkB,6CAA4BA,EAAA,mBA3EoB6C,EAAAC,QA8E7ErC,KAAA6B,YAAAD,GAAAE,IAAAC,OAAAC,KAAA,6BAAAJ,KAIQU,iBAAKC,SAAK3B,GACV,OAAAmB,OAAAE,KAAKO,eACRxC,KAAAmC,QAAA,QAAA5C,EAAA,6CAAAA,EAAA,mBACM6C,EAAAC,QAVArC,KAAK6B,YAAa,MAAQC,IAAMC,OAAOC,KAAO,gCAgBrD5B,SAAAA,SAAOG,EAAUkC,EAAAA,GAMb,OALJrC,EAAAG,UAAAmC,SAAArB,KAAArB,KAAAwC,EAAA5B,EAAA+B,GACA3C,KAAAwC,OAAYI,KAAAA,MAAU/B,KAClBb,KAAAuC,IAAA,wBACIvC,KAAAwC,MAAAK,mBAEJ7C,MAJ8ByC,qBAAlC,WAUJ,OAFCrC,EArG4EG,UAAAkC,qBAAApB,KAAArB,MAuG7EA,KAAA4C,SAAA5C,KAAAwC,OACAM,+BAA4B,WACxB1C,KAAOG,QAAUuC,sBAAAA,KAAjB9C,KAAAwC,MAAAO,YAEAC,YAAA,WACAhD,KAAK4C,KAAU,eAAiB,WAAA5C,KAAewC,MAAAK,wBAJnDC,0BAA4B,WAY5B1C,EAAAG,UAAAuC,0BAAAzB,KAAArB,MAGIiD,KAAAA,SAASA,KAAAA,WAAT,cAAA,SAAAT,EAAAU,EAAAC,GACAX,EAAAY,IAAA,YACApD,KAAAqD,WAAAC,QAAAC,iBACAvD,KAAAwD,eAAAhB,MAOQiB,gBAAA,SAAAR,GACAA,EAAAA,GAAIzB,KAAMkC,IAIjB,IAAAlC,EAAAxB,KAKD,OAfAI,EAAOG,UAAUkD,gBAAgBpC,KAAMG,EAAOyB,GA5H2BjD,KAAA2D,iCAgIrE3D,KAAK2D,+BAAiC1C,EAAE2C,SAAU,WAe1DC,EAAkBH,IAAAI,GAAA,aACTtC,EAAKgB,YAAOb,IAAA,iBAAAS,EAAApC,MAAA+D,cAAe,KAGhCvC,EAAAwC,iBAAKC,GACLC,IAAA,SAAOC,KAAPR,gCApJyElC,GAAA,SAAAzB,KAAA2D,gCA2IlEnC,GAePqC,gBAAU,WACb,IA3J4E7D,KAAAwC,MAAA,OAAAJ,IAiJzE,IAAI+B,EAAa/D,EAAOG,UAAUsD,gBAAgBxC,KAAMrB,MAcxD,OAFJmE,EAAAC,KAAA,WAAAC,UAAAF,EAAAC,KAAA,gBACAE,KAAAA,oBAAcH,GACVA,GAII3C,oBAAM+C,SAAWC,GAErB,OADCC,EAAAA,GAAAzE,KAAA0D,IACDtB,EAAApC,KAAA0E,UAAAC,YAAA3E,OAAAqE,UAAAI,EAAAL,KAAA,eAMHE,YA3K4E,SAAArB,GA+JzE,IAAIzB,EAAQxB,KAehB4E,EAAAA,UAAAA,YAAoBvD,KAAAG,EAAAyB,GAChBzB,EAAIA,YAAJ4B,IAAA,oBACA5B,EAAA+C,WAAAC,QAAA,GAGIhD,EAAAA,SAAMqD,EAAAA,WAAiBL,yDAC1B,SAAAD,GACD/C,EAAAR,YAAAW,IAAA,kBAAA4C,EAAAO,WAQJF,kBAAA,SAAA3B,GACA8B,IAAAA,EAAAA,KAEI3E,EAAAG,UAAYqE,kBAAZvD,KAAAG,EAAAyB,GACAhC,EAAE+D,YAAO5B,IAAU,0BACf5B,EAAAqD,iBAAgB7D,QAAN,GAGTQ,EAAAoB,SAAApB,EAAAqD,iBAAA,yDACJ,SALDA,GAMArD,EAAAR,YAAAW,IAAA,wBAAAkD,EAAAC,WAMJC,eAAA,SAAAZ,GACAc,EAAAA,UAAeF,eAAA1D,KAAUoD,KAAVN,GACX/D,IAAAA,EAAOG,KASX2E,OARIjE,EAAA+D,MAAIxD,WACJ,IAAIA,EAAMF,EAAAA,YAAkB8B,IAAA,kBACxB5B,GACHA,EAAA2D,SAAAC,EAAA,IAnNwE,IAwN7EF,MAGID,aAAI,SAAKlE,GAAqBX,EAAAG,UAAO0E,aAAKI,KAAAA,KAAAA,GAA4B,IAAA7D,EAAAxB,KAI1E,OAHIwB,EAAAF,kBA5NyEE,EAAA8D,uBAAA9D,EAAAF,kBA+N7EtB,MAIII,YAAAA,SAAAoC,EAAiB+C,EAAAA,GACjB,IAAAC,EAAApF,EAAAG,UAAA2E,YAAA7D,KAAArB,KAAAwC,EAAAa,EAAAoC,GACA,OAAAD,GACIxF,KAAAe,WAAA2E,OAAuB1F,KAAAqF,0BADdzC,GAAgB2C,wBAA7B,SAAAC,GAQH,IA7O4EhE,EAAAxB,KAgP7E2F,OAbIvF,EAAOG,UAAUgF,wBAAwBlE,KAAMG,EAAOgE,GAa1DG,EAAAA,SAAoBH,GAChBI,qBAAQ,SAAAC,EAAAC,GACJN,KAAJO,sBAAUD,IAENE,sBAAK1E,SAAwBkB,EAAAA,GAFjCxC,KAGOqF,wBAAAS,OAMXR,kBAAAA,SAAyBE,GACrBxF,KAAAoC,EAAIoD,oCAAqCS,YAAzC,mBACAT,GA7PyEA,EAAA9B,IAAAwC,SAAA,mBAoPrElG,KAAKsB,iBAAmBkE,EAAKhD,MAAM3B,IAa3CkF,KAAAA,iBAAwB,MAKpBD,uBAAUK,SAAiBxD,GAC9B,IAvQ4E6C,EAAAxF,KAAAoG,gBAAAvF,IAAA,KA6PzEb,KAAK2F,kBAAmBH,IAexBO,sBAAA,SAAAD,GACA9F,KAAAe,WAAKsF,KAAYC,GATjBtG,KAAKqG,YAAYC,IAAKtG,KAAKuG,SAAUC,OAYzCV,EAAAW,WAAAzG,KAAAwC,MAAAY,IAAA,QACA0C,EAAAK,iBAAAxD,SAAAe,IAAAgD,SAAA1G,KAAA0D,MAG6C3B,wBAAc4E,SAAdb,GAA2B9F,KAFjBe,WAAA6F,MAI/C5G,KAAAqG,YAAIQ,IAAAA,KAAeN,SAAAI,QAJ3BG,OAAS7F,EAAEvB,OAAQuB,EAAE8F,MAAO3G,EAAOG,UAAUuG,SAW7CE,uBAAiB,SAAAC,GAAUC,OAAQC,OAAAR,KAAAM,IAC/BG,uBAAA,SAAuBH,GACnB,IAAAJ,EAAAzE,EAAA,sBACAyE,EAAAQ,SAAAtD,UAAA,GACA8C,EAAAzC,KAAA,6BAAAkD,WAKIN,eAAA,SAAIO,GACAvH,KAAA4C,SAAAsE,GAKAM,oBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,SAPmBC,EAAvB,KASA3G,GACI4G,QAAA,iCACAD,KAAUE,8BACVC,aAAA,kCACHC,MAJD,qCAKAC,YAAA,sCAIJhH,EAAAmD,KAAAmD,EAAqB,SAAAW,EAAAC,GA1BzB,OA4BKP,EAAA3G,EAAA6G,OAAAJ,EAAAU,MAAAF,GAAA,KAITlI,KAAAsF,uBAAAsC,EAAA,WAAAA,EAAA,OAGIS,oBAAiB,SAAA7C,GACbxF,KAAAsF,6BAOJgD,oBAAS,SAAAC,GACL,OAAAA,GAIJvI,KAAA4C,SAAA2F,EAAA,aAAAvI,KAAAwI,kBACHxI,KA/U4E4C,SAAA2F,EAAA,cAAAvI,KAAAyI,kBAkV7EC,KAAAA,GAAAA,4BAA0BzB,WAClB0B,GAAaC,EAAa3B,eAG9B0B,KAAAA,qBACA3I,MAZQA,MAkBZ0I,cAAA,SAAAzB,GAVI,IAAI0B,EAAW1H,EAAE2H,YAAa3B,GAa9BjH,KAAI6I,YAAeC,SAAA,sBADvBN,EAAAA,EAAAA,eALI,OAOAG,EAAIE,EAASE,IAAA,mBAAeF,QAAKG,KAALC,QAAqBA,WAAY7G,EAAApC,MAAAkJ,WAPtDlJ,MAcPwI,iBAAU1E,WAAmB+E,IAAAA,EAAAA,KAAKM,EAAAA,kBAA0BN,EAAA/E,GAAA,YAAA+E,EAAAG,UAAAhJ,KAAAiJ,UAKhER,iBAAA,WACAW,IAAAA,EAAAA,KAAehH,EAAA,kBACXyG,EAAIQ,GAAAA,YAAJR,EAAAM,QAAAnJ,KAAAiJ,UASYI,aAAAA,WACH,IAAAA,EAAArJ,KACJ,OAAAsJ,QARD/J,EAAA,uCAUGgK,EAAAA,MAAAC,SAAPC,kBA5XyEC,SAAA,EAAAC,QAAA,GAAAC,OAAA,KAoX/DF,SAAU,IAWxBG,KAAA,WAEQR,EAAO7G,MAAXgH,SAAAjG,eACI+F,EAAS/J,gBAILgK,OAAAlH,QAKXyH,aA3Y4E,WAiYzE,IAAIT,EAAOrJ,KAYf,OAAAsJ,QAAA/J,EAAA,uCACW8J,EAAA7G,MAAAgH,SAAUC,kBAEpBC,SAAA,EAAAC,QAAA,GAAAC,OAAA,KATaD,SAAU,EAAMD,SAAS,IAG5BH,OAAOlH,QAmBsCxC,SAAxD,WARJ,MAAA,uBAAAG,KAAAwC,MAAAxC,KAAAwC,MAAAY,IAAA,QAAA,IAAA,OAgBI,OAGH2G,EAzdDxJ,UAAAmE,UAAA,WAwcI,IAAIsF,EAAmB1K,EAAS2K,cAC5B,2CACI1K,EAAI,gCAAkC,KACtCA,EAAI,oFAAsF,IAC9F,UACD,WACH,OAAO0B,EAAEvB,OAAQuB,EAAE8F,MAAO3G,EAAOG,UAAUmE,YACvCC,SAAWqF,IA/cnB,IAudQD,mBAA4BA","file":"../../../scripts/mvc/history/history-view-edit-current.js","sourcesContent":["define([\n    \"mvc/history/history-model\",\n    \"mvc/history/history-view-edit\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( HISTORY_MODEL, HISTORY_VIEW_EDIT, BASE_MVC, _l ){\n\n'use strict';\n\n// ============================================================================\n/** session storage for history panel preferences (and to maintain state)\n */\nvar HistoryViewPrefs = BASE_MVC.SessionStorageModel.extend(\n/** @lends HistoryViewPrefs.prototype */{\n    defaults : {\n        /** should the tags editor be shown or hidden initially? */\n        tagsEditorShown : false,\n        /** should the annotation editor be shown or hidden initially? */\n        annotationEditorShown : false,\n        ///** what is the currently focused content (dataset or collection) in the current history?\n        // *      (the history panel will highlight and scroll to the focused content view)\n        // */\n        //focusedContentId : null\n        /** Current scroll position */\n        scrollPosition : 0\n    },\n    toString : function(){\n        return 'HistoryViewPrefs(' + JSON.stringify( this.toJSON() ) + ')';\n    }\n});\n\n/** key string to store panel prefs (made accessible on class so you can access sessionStorage directly) */\nHistoryViewPrefs.storageKey = function storageKey(){\n    return ( 'history-panel' );\n};\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\nvar _super = HISTORY_VIEW_EDIT.HistoryViewEdit;\n// used in root/index.mako\n/** @class View/Controller for the user's current history model as used in the history\n *      panel (current right hand panel) of the analysis page.\n *\n *  The only history panel that:\n *      will poll for updates.\n *      displays datasets in reverse hid order.\n */\nvar CurrentHistoryView = _super.extend(/** @lends CurrentHistoryView.prototype */{\n\n    className           : _super.prototype.className + ' current-history-panel',\n\n    /** override to use drilldown (and not foldout) for how collections are displayed */\n    HDCAViewClass       : _super.prototype.HDCAViewClass.extend({\n        foldoutStyle : 'drilldown'\n    }),\n\n    emptyMsg : [\n        _l( 'This history is empty' ), '. ',\n        _l( 'You can ' ),\n        '<a class=\"uploader-link\" href=\"javascript:void(0)\">',\n            _l( 'load your own data' ),\n        '</a>',\n        _l( ' or ' ),\n        '<a class=\"get-data-link\" href=\"javascript:void(0)\">',\n            _l( 'get data from an external source' ),\n        '</a>'\n    ].join(''),\n\n    // ......................................................................... SET UP\n    /** Set up the view, set up storage, bind listeners to HistoryContents events */\n    initialize : function( attributes ){\n        attributes = attributes || {};\n\n        // ---- persistent preferences\n        /** maintain state / preferences over page loads */\n        this.preferences = new HistoryViewPrefs( _.extend({\n            id : HistoryViewPrefs.storageKey()\n        }, _.pick( attributes, _.keys( HistoryViewPrefs.prototype.defaults ) )));\n\n        _super.prototype.initialize.call( this, attributes );\n\n        /** sub-views that will overlay this panel (collections) */\n        this.panelStack = [];\n\n        /** id of currently focused content */\n        this.currentContentId = attributes.currentContentId || null;\n        //NOTE: purposely not sent to localstorage since panel recreation roughly lines up with a reset of this value\n    },\n\n    /** Override to cache the current scroll position with a listener */\n    _setUpListeners : function(){\n        _super.prototype._setUpListeners.call( this );\n\n        var panel = this;\n        // reset scroll position when there's a new history\n        this.on( 'new-model', function(){\n            panel.preferences.set( 'scrollPosition', 0 );\n        });\n    },\n\n    // ------------------------------------------------------------------------ loading history/item models\n    // TODO: next three more appropriate moved to the app level\n    /** (re-)loads the user's current history & contents w/ details */\n    loadCurrentHistory : function(){\n        return this.loadHistory( null, { url : Galaxy.root + 'history/current_history_json' });\n    },\n\n    /** loads a history & contents w/ details and makes them the current history */\n    switchToHistory : function( historyId, attributes ){\n        if( Galaxy.user.isAnonymous() ){\n            this.trigger( 'error', _l( 'You must be logged in to switch histories' ), _l( 'Anonymous user' ) );\n            return $.when();\n        }\n        return this.loadHistory( historyId, { url : Galaxy.root + 'history/set_as_current?id=' + historyId });\n    },\n\n    /** creates a new history on the server and sets it as the user's current history */\n    createNewHistory : function( attributes ){\n        if( Galaxy.user.isAnonymous() ){\n            this.trigger( 'error', _l( 'You must be logged in to create histories' ), _l( 'Anonymous user' )  );\n            return $.when();\n        }\n        return this.loadHistory( null, { url : Galaxy.root + 'history/create_new_current' });\n    },\n\n    /** release/free/shutdown old models and set up panel for new models */\n    setModel : function( model, attributes, render ){\n        _super.prototype.setModel.call( this, model, attributes, render );\n        if( this.model && this.model.id ){\n            this.log( 'checking for updates' );\n            this.model.checkForUpdates();\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ history/content event listening\n    /** listening for history events */\n    _setUpModelListeners : function(){\n        _super.prototype._setUpModelListeners.call( this );\n        // re-broadcast any model change events so that listeners don't have to re-bind to each history\n        return this.listenTo( this.model, {\n            'change:nice_size change:size' : function(){\n                this.trigger( 'history-size-change', this, this.model, arguments );\n            },\n            'change:id' : function(){\n                this.once( 'loading-done', function(){ this.model.checkForUpdates(); });\n            }\n        });\n    },\n\n    /** listening for collection events */\n    _setUpCollectionListeners : function(){\n        _super.prototype._setUpCollectionListeners.call( this );\n        // if a hidden item is created (gen. by a workflow), moves thru the updater to the ready state,\n        //  then: remove it from the collection if the panel is set to NOT show hidden datasets\n        this.listenTo( this.collection, 'state:ready', function( model, newState, oldState ){\n            if( ( !model.get( 'visible' ) )\n            &&  ( !this.collection.storage.includeHidden() ) ){\n                this.removeItemView( model );\n            }\n        });\n    },\n\n    // ------------------------------------------------------------------------ panel rendering\n    /** override to add a handler to capture the scroll position when the parent scrolls */\n    _setUpBehaviors : function( $where ){\n        $where = $where || this.$el;\n        // console.log( '_setUpBehaviors', this.$scrollContainer( $where ).get(0), this.$list( $where ) );\n        // we need to call this in _setUpBehaviors which is called after render since the $el\n        // may not be attached to $el.parent and $scrollContainer() may not work\n        var panel = this;\n        _super.prototype._setUpBehaviors.call( panel, $where );\n\n        // cache the handler to remove and re-add so we don't pile up the handlers\n        if( !this._debouncedScrollCaptureHandler ){\n            this._debouncedScrollCaptureHandler = _.debounce( function scrollCapture(){\n                // cache the scroll position (only if visible)\n                if( panel.$el.is( ':visible' ) ){\n                    panel.preferences.set( 'scrollPosition', $( this ).scrollTop() );\n                }\n            }, 40 );\n        }\n\n        panel.$scrollContainer( $where )\n            .off( 'scroll', this._debouncedScrollCaptureHandler )\n            .on( 'scroll', this._debouncedScrollCaptureHandler );\n        return panel;\n    },\n\n    /** In this override, handle null models and move the search input to the top */\n    _buildNewRender : function(){\n        if( !this.model ){ return $(); }\n        var $newRender = _super.prototype._buildNewRender.call( this );\n        $newRender.find( '.search' ).prependTo( $newRender.find( '> .controls' ) );\n        this._renderQuotaMessage( $newRender );\n        return $newRender;\n    },\n\n    /** render the message displayed when a user is over quota and can't run jobs */\n    _renderQuotaMessage : function( $whereTo ){\n        $whereTo = $whereTo || this.$el;\n        return $( this.templates.quotaMsg( {}, this ) ).prependTo( $whereTo.find( '.messages' ) );\n    },\n\n    /** In this override, get and set current panel preferences when editor is used */\n    _renderTags : function( $where ){\n        var panel = this;\n        // render tags and show/hide based on preferences\n        _super.prototype._renderTags.call( panel, $where );\n        if( panel.preferences.get( 'tagsEditorShown' ) ){\n            panel.tagsEditor.toggle( true );\n        }\n        // store preference when shown or hidden\n        panel.listenTo( panel.tagsEditor, 'hiddenUntilActivated:shown hiddenUntilActivated:hidden',\n            function( tagsEditor ){\n                panel.preferences.set( 'tagsEditorShown', tagsEditor.hidden );\n            }\n        );\n    },\n\n    /** In this override, get and set current panel preferences when editor is used */\n    _renderAnnotation : function( $where ){\n        var panel = this;\n        // render annotation and show/hide based on preferences\n        _super.prototype._renderAnnotation.call( panel, $where );\n        if( panel.preferences.get( 'annotationEditorShown' ) ){\n            panel.annotationEditor.toggle( true );\n        }\n        // store preference when shown or hidden\n        panel.listenTo( panel.annotationEditor, 'hiddenUntilActivated:shown hiddenUntilActivated:hidden',\n            function( annotationEditor ){\n                panel.preferences.set( 'annotationEditorShown', annotationEditor.hidden );\n            }\n        );\n    },\n\n    /** Override to scroll to cached position (in prefs) after swapping */\n    _swapNewRender : function( $newRender ){\n        _super.prototype._swapNewRender.call( this, $newRender );\n        var panel = this;\n        _.delay( function(){\n            var pos = panel.preferences.get( 'scrollPosition' );\n            if( pos ){\n                panel.scrollTo( pos, 0 );\n            }\n        }, 10 );\n        //TODO: is this enough of a delay on larger histories?\n\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ sub-views\n    /** Override to add the current-content highlight class to currentContentId's view */\n    _attachItems : function( $whereTo ){\n        _super.prototype._attachItems.call( this, $whereTo );\n        var panel = this;\n        if( panel.currentContentId ){\n            panel._setCurrentContentById( panel.currentContentId );\n        }\n        return this;\n    },\n\n    /** Override to remove any drill down panels */\n    addItemView : function( model, collection, options ){\n        var view = _super.prototype.addItemView.call( this, model, collection, options );\n        if( !view ){ return view; }\n        if( this.panelStack.length ){ return this._collapseDrilldownPanel(); }\n        return view;\n    },\n\n    // ------------------------------------------------------------------------ collection sub-views\n    /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n    _setUpItemViewListeners : function( view ){\n        var panel = this;\n        _super.prototype._setUpItemViewListeners.call( panel, view );\n        // use pub-sub to: handle drilldown expansion and collapse\n        return panel.listenTo( view, {\n            'expanded:drilldown' : function( v, drilldown ){\n                this._expandDrilldownPanel( drilldown );\n            },\n            'collapsed:drilldown' : function( v, drilldown ){\n                this._collapseDrilldownPanel( drilldown );\n            },\n        });\n    },\n\n    /** display 'current content': add a visible highlight and store the id of a content item */\n    setCurrentContent : function( view ){\n        this.$( '.history-content.current-content' ).removeClass( 'current-content' );\n        if( view ){\n            view.$el.addClass( 'current-content' );\n            this.currentContentId = view.model.id;\n        } else {\n            this.currentContentId = null;\n        }\n    },\n\n    /** find the view with the id and then call setCurrentContent on it */\n    _setCurrentContentById : function( id ){\n        var view = this.viewFromModelId( id ) || null;\n        this.setCurrentContent( view );\n    },\n\n    /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n    _expandDrilldownPanel : function( drilldown ){\n        this.panelStack.push( drilldown );\n        // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n        this.$controls().add( this.$list() ).hide();\n        drilldown.parentName = this.model.get( 'name' );\n        drilldown.delegateEvents().render().$el.appendTo( this.$el );\n    },\n\n    /** Handle drilldown close by freeing the panel and re-rendering this panel */\n    _collapseDrilldownPanel : function( drilldown ){\n        this.panelStack.pop();\n        //TODO: MEM: free the panel\n        this.$controls().add( this.$list() ).show();\n    },\n\n    // ........................................................................ panel events\n    /** event map */\n    events : _.extend( _.clone( _super.prototype.events ), {\n        // the two links in the empty message\n        'click .uploader-link' : function( ev ){ Galaxy.upload.show( ev ); },\n        'click .get-data-link' : function( ev ){\n            var $toolMenu = $( '.toolMenuContainer' );\n            $toolMenu.parent().scrollTop( 0 );\n            $toolMenu.find( 'span:contains(\"Get Data\")' ).click();\n        }\n    }),\n\n    // ........................................................................ external objects/MVC\n    listenToGalaxy : function( galaxy ){\n        this.listenTo( galaxy, {\n            // when the galaxy_main iframe is loaded with a new page,\n            // compare the url to the following list and if there's a match\n            // pull the id from url and indicate in the history view that\n            // the dataset with that id is the 'current'ly active dataset\n            'center-frame:load': function( data ){\n                var pathToMatch = data.fullpath;\n                var hdaId = null;\n                var useToURLRegexMap = {\n                    'display'       : /datasets\\/([a-f0-9]+)\\/display/,\n                    'edit'          : /datasets\\/([a-f0-9]+)\\/edit/,\n                    'report_error'  : /dataset\\/errors\\?id=([a-f0-9]+)/,\n                    'rerun'         : /tool_runner\\/rerun\\?id=([a-f0-9]+)/,\n                    'show_params'   : /datasets\\/([a-f0-9]+)\\/show_params/,\n                    // no great way to do this here? (leave it in the dataset event handlers above?)\n                    // 'visualization' : 'visualization',\n                };\n                _.find( useToURLRegexMap, function( regex, use ){\n                    // grab the more specific match result (1), save, and use it as the find flag\n                    hdaId = _.result( pathToMatch.match( regex ), 1 );\n                    return hdaId;\n                });\n                // need to type mangle to go from web route to history contents\n                this._setCurrentContentById( hdaId? ( 'dataset-' + hdaId ) : null );\n            },\n            // when the center panel is given a new view, clear the current indicator\n            'center-panel:load': function( view ){\n                this._setCurrentContentById();\n            }\n        });\n    },\n\n    //TODO: remove quota meter from panel and remove this\n    /** add listeners to an external quota meter (mvc/user/user-quotameter.js) */\n    connectToQuotaMeter : function( quotaMeter ){\n        if( !quotaMeter ){\n            return this;\n        }\n        // show/hide the 'over quota message' in the history when the meter tells it to\n        this.listenTo( quotaMeter, 'quota:over',  this.showQuotaMessage );\n        this.listenTo( quotaMeter, 'quota:under', this.hideQuotaMessage );\n\n        // having to add this to handle re-render of hview while overquota (the above do not fire)\n        this.on( 'rendered rendered:initial', function(){\n            if( quotaMeter && quotaMeter.isOverQuota() ){\n                this.showQuotaMessage();\n            }\n        });\n        return this;\n    },\n\n    /** Override to preserve the quota message */\n    clearMessages : function( ev ){\n        var $target = !_.isUndefined( ev )?\n            $( ev.currentTarget )\n            :this.$messages().children( '[class$=\"message\"]' );\n        $target = $target.not( '.quota-message' );\n        $target.fadeOut( this.fxSpeed, function(){\n            $( this ).remove();\n        });\n        return this;\n    },\n\n    /** Show the over quota message (which happens to be in the history panel).\n     */\n    showQuotaMessage : function(){\n        var $msg = this.$( '.quota-message' );\n        if( $msg.is( ':hidden' ) ){ $msg.slideDown( this.fxSpeed ); }\n    },\n\n    /** Hide the over quota message (which happens to be in the history panel).\n     */\n    hideQuotaMessage : function(){\n        var $msg = this.$( '.quota-message' );\n        if( !$msg.is( ':hidden' ) ){ $msg.slideUp( this.fxSpeed ); }\n    },\n\n    // ........................................................................ options menu\n    //TODO: remove to batch\n    /** unhide any hidden datasets */\n    unhideHidden : function() {\n        var self = this;\n        if( confirm( _l( 'Really unhide all hidden datasets?' ) ) ){\n            // get all hidden, regardless of deleted/purged\n            return self.model.contents._filterAndUpdate(\n                { visible: false, deleted: '', purged: '' },\n                { visible : true }\n            ).done( function(){\n                // TODO: would be better to render these as they're unhidden instead of all at once\n                if( !self.model.contents.includeHidden ){\n                    self.renderItems();\n                }\n            });\n        }\n        return jQuery.when();\n    },\n\n    /** delete any hidden datasets */\n    deleteHidden : function() {\n        var self = this;\n        if( confirm( _l( 'Really delete all hidden datasets?' ) ) ){\n            return self.model.contents._filterAndUpdate(\n                // get all hidden, regardless of deleted/purged\n                { visible: false, deleted: '', purged: '' },\n                // both delete *and* unhide them\n                { deleted : true, visible: true }\n            );\n        }\n        return jQuery.when();\n    },\n\n    /** Return a string rep of the history */\n    toString : function(){\n        return 'CurrentHistoryView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n//------------------------------------------------------------------------------ TEMPLATES\nCurrentHistoryView.prototype.templates = (function(){\n\n    var quotaMsgTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"quota-message errormessage\">',\n            _l( 'You are over your disk quota' ), '. ',\n            _l( 'Tool execution is on hold until your disk usage drops below your allocated quota' ), '.',\n        '</div>'\n    ], 'history' );\n    return _.extend( _.clone( _super.prototype.templates ), {\n        quotaMsg : quotaMsgTemplate\n    });\n\n}());\n\n\n//==============================================================================\n    return {\n        CurrentHistoryView        : CurrentHistoryView\n    };\n});\n"]}