{"version":3,"sources":["mvc/history/history-view-edit-current.js"],"names":["_historyModel","require","_historyViewEdit","_baseMvc","_localization","HistoryViewPrefs","_baseMvc2","default","SessionStorageModel","extend","defaults","tagsEditorShown","annotationEditorShown","scrollPosition","toString","JSON","stringify","this","toJSON","storageKey","_super","_historyViewEdit2","HistoryViewEdit","CurrentHistoryView","className","prototype","HDCAViewClass","foldoutStyle","_localization2","attributes","preferences","_","pick","keys","initialize","call","panelStack","currentContentId","_setUpListeners","panel","set","loadCurrentHistory","loadHistory","url","Galaxy","root","switchToHistory","isAnonymous","trigger","when","$","historyId","createNewHistory","setModel","log","model","checkForUpdates","render","_setUpModelListeners","id","listenTo","change:nice_size change:size","_setUpCollectionListeners","arguments","change:id","removeItemView","$where","collection","newState","oldState","get","$el","storage","includeHidden","_setUpBehaviors","$newRender","_buildNewRender","_debouncedScrollCaptureHandler","debounce","is","$whereTo","quotaMsg","scrollTop","$scrollContainer","off","tagsEditor","_renderAnnotation","annotationEditor","prependTo","find","_renderQuotaMessage","_swapNewRender","templates","_renderTags","toggle","_attachItems","hidden","view","_expandDrilldownPanel","delay","pos","scrollTo","_setCurrentContentById","setCurrentContent","options","drilldown","addItemView","$controls","length","_collapseDrilldownPanel","_setUpItemViewListeners","upload","show","$toolMenu","v","parent","collapsed:drilldown","removeClass","hdaId","useToURLRegexMap","edit","viewFromModelId","push","add","$list","hide","delegateEvents","appendTo","pop","quotaMeter","events","showQuotaMessage","click .uploader-link","ev","click .get-data-link","clearMessages","$target","isUndefined","currentTarget","listenToGalaxy","galaxy","$msg","data","pathToMatch","fullpath","slideDown","fxSpeed","display","report_error","rerun","show_params","regex","use","result","match","center-panel:load","self","connectToQuotaMeter","_filterAndUpdate","hideQuotaMessage","deleted","isOverQuota","jQuery","quotaMsgTemplate","not","slideUp","unhideHidden","confirm","contents","visible","purged","done","renderItems","deleteHidden","wrapTemplate","clone"],"mappings":"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","file":"../../../scripts/mvc/history/history-view-edit-current.js","sourcesContent":["import HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_VIEW_EDIT from \"mvc/history/history-view-edit\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n// ============================================================================\n/** session storage for history panel preferences (and to maintain state)\n */\nvar HistoryViewPrefs = BASE_MVC.SessionStorageModel.extend(\n    /** @lends HistoryViewPrefs.prototype */ {\n        defaults: {\n            /** should the tags editor be shown or hidden initially? */\n            tagsEditorShown: false,\n            /** should the annotation editor be shown or hidden initially? */\n            annotationEditorShown: false,\n            ///** what is the currently focused content (dataset or collection) in the current history?\n            // *      (the history panel will highlight and scroll to the focused content view)\n            // */\n            //focusedContentId : null\n            /** Current scroll position */\n            scrollPosition: 0\n        },\n        toString: function() {\n            return \"HistoryViewPrefs(\" + JSON.stringify(this.toJSON()) + \")\";\n        }\n    }\n);\n\n/** key string to store panel prefs (made accessible on class so you can access sessionStorage directly) */\nHistoryViewPrefs.storageKey = function storageKey() {\n    return \"history-panel\";\n};\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\nvar _super = HISTORY_VIEW_EDIT.HistoryViewEdit;\n// used in root/index.mako\n/** @class View/Controller for the user's current history model as used in the history\n *      panel (current right hand panel) of the analysis page.\n *\n *  The only history panel that:\n *      will poll for updates.\n *      displays datasets in reverse hid order.\n */\nvar CurrentHistoryView = _super.extend(\n    /** @lends CurrentHistoryView.prototype */ {\n        className: _super.prototype.className + \" current-history-panel\",\n\n        /** override to use drilldown (and not foldout) for how collections are displayed */\n        HDCAViewClass: _super.prototype.HDCAViewClass.extend({\n            foldoutStyle: \"drilldown\"\n        }),\n\n        emptyMsg: [\n            _l(\"This history is empty\"),\n            \". \",\n            _l(\"You can \"),\n            '<a class=\"uploader-link\" href=\"javascript:void(0)\">',\n            _l(\"load your own data\"),\n            \"</a>\",\n            _l(\" or \"),\n            '<a class=\"get-data-link\" href=\"javascript:void(0)\">',\n            _l(\"get data from an external source\"),\n            \"</a>\"\n        ].join(\"\"),\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events */\n        initialize: function(attributes) {\n            attributes = attributes || {};\n\n            // ---- persistent preferences\n            /** maintain state / preferences over page loads */\n            this.preferences = new HistoryViewPrefs(\n                _.extend(\n                    {\n                        id: HistoryViewPrefs.storageKey()\n                    },\n                    _.pick(\n                        attributes,\n                        _.keys(HistoryViewPrefs.prototype.defaults)\n                    )\n                )\n            );\n\n            _super.prototype.initialize.call(this, attributes);\n\n            /** sub-views that will overlay this panel (collections) */\n            this.panelStack = [];\n\n            /** id of currently focused content */\n            this.currentContentId = attributes.currentContentId || null;\n            //NOTE: purposely not sent to localstorage since panel recreation roughly lines up with a reset of this value\n        },\n\n        /** Override to cache the current scroll position with a listener */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n\n            var panel = this;\n            // reset scroll position when there's a new history\n            this.on(\"new-model\", function() {\n                panel.preferences.set(\"scrollPosition\", 0);\n            });\n        },\n\n        // ------------------------------------------------------------------------ loading history/item models\n        // TODO: next three more appropriate moved to the app level\n        /** (re-)loads the user's current history & contents w/ details */\n        loadCurrentHistory: function() {\n            return this.loadHistory(null, {\n                url: Galaxy.root + \"history/current_history_json\"\n            });\n        },\n\n        /** loads a history & contents w/ details and makes them the current history */\n        switchToHistory: function(historyId, attributes) {\n            if (Galaxy.user.isAnonymous()) {\n                this.trigger(\n                    \"error\",\n                    _l(\"You must be logged in to switch histories\"),\n                    _l(\"Anonymous user\")\n                );\n                return $.when();\n            }\n            return this.loadHistory(historyId, {\n                url: Galaxy.root + \"history/set_as_current?id=\" + historyId\n            });\n        },\n\n        /** creates a new history on the server and sets it as the user's current history */\n        createNewHistory: function(attributes) {\n            if (Galaxy.user.isAnonymous()) {\n                this.trigger(\n                    \"error\",\n                    _l(\"You must be logged in to create histories\"),\n                    _l(\"Anonymous user\")\n                );\n                return $.when();\n            }\n            return this.loadHistory(null, {\n                url: Galaxy.root + \"history/create_new_current\"\n            });\n        },\n\n        /** release/free/shutdown old models and set up panel for new models */\n        setModel: function(model, attributes, render) {\n            _super.prototype.setModel.call(this, model, attributes, render);\n            if (this.model && this.model.id) {\n                this.log(\"checking for updates\");\n                this.model.checkForUpdates();\n            }\n            return this;\n        },\n\n        // ------------------------------------------------------------------------ history/content event listening\n        /** listening for history events */\n        _setUpModelListeners: function() {\n            _super.prototype._setUpModelListeners.call(this);\n            // re-broadcast any model change events so that listeners don't have to re-bind to each history\n            return this.listenTo(this.model, {\n                \"change:nice_size change:size\": function() {\n                    this.trigger(\n                        \"history-size-change\",\n                        this,\n                        this.model,\n                        arguments\n                    );\n                },\n                \"change:id\": function() {\n                    this.once(\"loading-done\", function() {\n                        this.model.checkForUpdates();\n                    });\n                }\n            });\n        },\n\n        /** listening for collection events */\n        _setUpCollectionListeners: function() {\n            _super.prototype._setUpCollectionListeners.call(this);\n            // if a hidden item is created (gen. by a workflow), moves thru the updater to the ready state,\n            //  then: remove it from the collection if the panel is set to NOT show hidden datasets\n            this.listenTo(this.collection, \"state:ready\", function(\n                model,\n                newState,\n                oldState\n            ) {\n                if (\n                    !model.get(\"visible\") &&\n                    !this.collection.storage.includeHidden()\n                ) {\n                    this.removeItemView(model);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ panel rendering\n        /** override to add a handler to capture the scroll position when the parent scrolls */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            // console.log( '_setUpBehaviors', this.$scrollContainer( $where ).get(0), this.$list( $where ) );\n            // we need to call this in _setUpBehaviors which is called after render since the $el\n            // may not be attached to $el.parent and $scrollContainer() may not work\n            var panel = this;\n            _super.prototype._setUpBehaviors.call(panel, $where);\n\n            // cache the handler to remove and re-add so we don't pile up the handlers\n            if (!this._debouncedScrollCaptureHandler) {\n                this._debouncedScrollCaptureHandler = _.debounce(\n                    function scrollCapture() {\n                        // cache the scroll position (only if visible)\n                        if (panel.$el.is(\":visible\")) {\n                            panel.preferences.set(\n                                \"scrollPosition\",\n                                $(this).scrollTop()\n                            );\n                        }\n                    },\n                    40\n                );\n            }\n\n            panel\n                .$scrollContainer($where)\n                .off(\"scroll\", this._debouncedScrollCaptureHandler)\n                .on(\"scroll\", this._debouncedScrollCaptureHandler);\n            return panel;\n        },\n\n        /** In this override, handle null models and move the search input to the top */\n        _buildNewRender: function() {\n            if (!this.model) {\n                return $();\n            }\n            var $newRender = _super.prototype._buildNewRender.call(this);\n            $newRender\n                .find(\".search\")\n                .prependTo($newRender.find(\"> .controls\"));\n            this._renderQuotaMessage($newRender);\n            return $newRender;\n        },\n\n        /** render the message displayed when a user is over quota and can't run jobs */\n        _renderQuotaMessage: function($whereTo) {\n            $whereTo = $whereTo || this.$el;\n            return $(this.templates.quotaMsg({}, this)).prependTo(\n                $whereTo.find(\".messages\")\n            );\n        },\n\n        /** In this override, get and set current panel preferences when editor is used */\n        _renderTags: function($where) {\n            var panel = this;\n            // render tags and show/hide based on preferences\n            _super.prototype._renderTags.call(panel, $where);\n            if (panel.preferences.get(\"tagsEditorShown\")) {\n                panel.tagsEditor.toggle(true);\n            }\n            // store preference when shown or hidden\n            panel.listenTo(\n                panel.tagsEditor,\n                \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\",\n                function(tagsEditor) {\n                    panel.preferences.set(\"tagsEditorShown\", tagsEditor.hidden);\n                }\n            );\n        },\n\n        /** In this override, get and set current panel preferences when editor is used */\n        _renderAnnotation: function($where) {\n            var panel = this;\n            // render annotation and show/hide based on preferences\n            _super.prototype._renderAnnotation.call(panel, $where);\n            if (panel.preferences.get(\"annotationEditorShown\")) {\n                panel.annotationEditor.toggle(true);\n            }\n            // store preference when shown or hidden\n            panel.listenTo(\n                panel.annotationEditor,\n                \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\",\n                function(annotationEditor) {\n                    panel.preferences.set(\n                        \"annotationEditorShown\",\n                        annotationEditor.hidden\n                    );\n                }\n            );\n        },\n\n        /** Override to scroll to cached position (in prefs) after swapping */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            var panel = this;\n            _.delay(function() {\n                var pos = panel.preferences.get(\"scrollPosition\");\n                if (pos) {\n                    panel.scrollTo(pos, 0);\n                }\n            }, 10);\n            //TODO: is this enough of a delay on larger histories?\n\n            return this;\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** Override to add the current-content highlight class to currentContentId's view */\n        _attachItems: function($whereTo) {\n            _super.prototype._attachItems.call(this, $whereTo);\n            var panel = this;\n            if (panel.currentContentId) {\n                panel._setCurrentContentById(panel.currentContentId);\n            }\n            return this;\n        },\n\n        /** Override to remove any drill down panels */\n        addItemView: function(model, collection, options) {\n            var view = _super.prototype.addItemView.call(\n                this,\n                model,\n                collection,\n                options\n            );\n            if (!view) {\n                return view;\n            }\n            if (this.panelStack.length) {\n                return this._collapseDrilldownPanel();\n            }\n            return view;\n        },\n\n        // ------------------------------------------------------------------------ collection sub-views\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n            // use pub-sub to: handle drilldown expansion and collapse\n            return panel.listenTo(view, {\n                \"expanded:drilldown\": function(v, drilldown) {\n                    this._expandDrilldownPanel(drilldown);\n                },\n                \"collapsed:drilldown\": function(v, drilldown) {\n                    this._collapseDrilldownPanel(drilldown);\n                }\n            });\n        },\n\n        /** display 'current content': add a visible highlight and store the id of a content item */\n        setCurrentContent: function(view) {\n            this.$(\".history-content.current-content\").removeClass(\n                \"current-content\"\n            );\n            if (view) {\n                view.$el.addClass(\"current-content\");\n                this.currentContentId = view.model.id;\n            } else {\n                this.currentContentId = null;\n            }\n        },\n\n        /** find the view with the id and then call setCurrentContent on it */\n        _setCurrentContentById: function(id) {\n            var view = this.viewFromModelId(id) || null;\n            this.setCurrentContent(view);\n        },\n\n        /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n        _expandDrilldownPanel: function(drilldown) {\n            this.panelStack.push(drilldown);\n            // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n            this.$controls()\n                .add(this.$list())\n                .hide();\n            drilldown.parentName = this.model.get(\"name\");\n            drilldown\n                .delegateEvents()\n                .render()\n                .$el.appendTo(this.$el);\n        },\n\n        /** Handle drilldown close by freeing the panel and re-rendering this panel */\n        _collapseDrilldownPanel: function(drilldown) {\n            this.panelStack.pop();\n            //TODO: MEM: free the panel\n            this.$controls()\n                .add(this.$list())\n                .show();\n        },\n\n        // ........................................................................ panel events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            // the two links in the empty message\n            \"click .uploader-link\": function(ev) {\n                Galaxy.upload.show(ev);\n            },\n            \"click .get-data-link\": function(ev) {\n                var $toolMenu = $(\".toolMenuContainer\");\n                $toolMenu.parent().scrollTop(0);\n                $toolMenu.find('span:contains(\"Get Data\")').click();\n            }\n        }),\n\n        // ........................................................................ external objects/MVC\n        listenToGalaxy: function(galaxy) {\n            this.listenTo(galaxy, {\n                // when the galaxy_main iframe is loaded with a new page,\n                // compare the url to the following list and if there's a match\n                // pull the id from url and indicate in the history view that\n                // the dataset with that id is the 'current'ly active dataset\n                \"center-frame:load\": function(data) {\n                    var pathToMatch = data.fullpath;\n                    var hdaId = null;\n                    var useToURLRegexMap = {\n                        display: /datasets\\/([a-f0-9]+)\\/display/,\n                        edit: /datasets\\/([a-f0-9]+)\\/edit/,\n                        report_error: /dataset\\/errors\\?id=([a-f0-9]+)/,\n                        rerun: /tool_runner\\/rerun\\?id=([a-f0-9]+)/,\n                        show_params: /datasets\\/([a-f0-9]+)\\/show_params/\n                        // no great way to do this here? (leave it in the dataset event handlers above?)\n                        // 'visualization' : 'visualization',\n                    };\n                    _.find(useToURLRegexMap, function(regex, use) {\n                        // grab the more specific match result (1), save, and use it as the find flag\n                        hdaId = _.result(pathToMatch.match(regex), 1);\n                        return hdaId;\n                    });\n                    // need to type mangle to go from web route to history contents\n                    this._setCurrentContentById(\n                        hdaId ? \"dataset-\" + hdaId : null\n                    );\n                },\n                // when the center panel is given a new view, clear the current indicator\n                \"center-panel:load\": function(view) {\n                    this._setCurrentContentById();\n                }\n            });\n        },\n\n        //TODO: remove quota meter from panel and remove this\n        /** add listeners to an external quota meter (mvc/user/user-quotameter.js) */\n        connectToQuotaMeter: function(quotaMeter) {\n            if (!quotaMeter) {\n                return this;\n            }\n            // show/hide the 'over quota message' in the history when the meter tells it to\n            this.listenTo(quotaMeter, \"quota:over\", this.showQuotaMessage);\n            this.listenTo(quotaMeter, \"quota:under\", this.hideQuotaMessage);\n\n            // having to add this to handle re-render of hview while overquota (the above do not fire)\n            this.on(\"rendered rendered:initial\", function() {\n                if (quotaMeter && quotaMeter.isOverQuota()) {\n                    this.showQuotaMessage();\n                }\n            });\n            return this;\n        },\n\n        /** Override to preserve the quota message */\n        clearMessages: function(ev) {\n            var $target = !_.isUndefined(ev)\n                ? $(ev.currentTarget)\n                : this.$messages().children('[class$=\"message\"]');\n            $target = $target.not(\".quota-message\");\n            $target.fadeOut(this.fxSpeed, function() {\n                $(this).remove();\n            });\n            return this;\n        },\n\n        /** Show the over quota message (which happens to be in the history panel).\n     */\n        showQuotaMessage: function() {\n            var $msg = this.$(\".quota-message\");\n            if ($msg.is(\":hidden\")) {\n                $msg.slideDown(this.fxSpeed);\n            }\n        },\n\n        /** Hide the over quota message (which happens to be in the history panel).\n     */\n        hideQuotaMessage: function() {\n            var $msg = this.$(\".quota-message\");\n            if (!$msg.is(\":hidden\")) {\n                $msg.slideUp(this.fxSpeed);\n            }\n        },\n\n        // ........................................................................ options menu\n        //TODO: remove to batch\n        /** unhide any hidden datasets */\n        unhideHidden: function() {\n            var self = this;\n            if (confirm(_l(\"Really unhide all hidden datasets?\"))) {\n                // get all hidden, regardless of deleted/purged\n                return self.model.contents\n                    ._filterAndUpdate(\n                        { visible: false, deleted: \"\", purged: \"\" },\n                        { visible: true }\n                    )\n                    .done(function() {\n                        // TODO: would be better to render these as they're unhidden instead of all at once\n                        if (!self.model.contents.includeHidden) {\n                            self.renderItems();\n                        }\n                    });\n            }\n            return jQuery.when();\n        },\n\n        /** delete any hidden datasets */\n        deleteHidden: function() {\n            var self = this;\n            if (confirm(_l(\"Really delete all hidden datasets?\"))) {\n                return self.model.contents._filterAndUpdate(\n                    // get all hidden, regardless of deleted/purged\n                    { visible: false, deleted: \"\", purged: \"\" },\n                    // both delete *and* unhide them\n                    { deleted: true, visible: true }\n                );\n            }\n            return jQuery.when();\n        },\n\n        /** Return a string rep of the history */\n        toString: function() {\n            return (\n                \"CurrentHistoryView(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nCurrentHistoryView.prototype.templates = (function() {\n    var quotaMsgTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"quota-message errormessage\">',\n            _l(\"You are over your disk quota\"),\n            \". \",\n            _l(\n                \"Tool execution is on hold until your disk usage drops below your allocated quota\"\n            ),\n            \".\",\n            \"</div>\"\n        ],\n        \"history\"\n    );\n    return _.extend(_.clone(_super.prototype.templates), {\n        quotaMsg: quotaMsgTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    CurrentHistoryView: CurrentHistoryView\n};\n"]}