{"version":3,"sources":["mvc/history/history-view-edit-current.js"],"names":["HistoryViewPrefs","_baseMvc2","default","SessionStorageModel","extend","defaults","tagsEditorShown","annotationEditorShown","scrollPosition","toString","JSON","stringify","this","toJSON","storageKey","_super","_historyViewEdit2","HistoryViewEdit","CurrentHistoryView","className","prototype","HDCAViewClass","emptyMsg","_localization2","attributes","_","id","keys","initialize","call","panelStack","currentContentId","_setUpListeners","panel","on","preferences","set","loadCurrentHistory","loadHistory","url","Galaxy","root","switchToHistory","historyId","user","createNewHistory","trigger","when","isAnonymous","model","_setUpModelListeners","setModel","render","listenTo","log","_setUpCollectionListeners","change:id","once","checkForUpdates","collection","newState","oldState","get","storage","includeHidden","removeItemView","_setUpBehaviors","$where","$el","_renderQuotaMessage","$newRender","_debouncedScrollCaptureHandler","debounce","$whereTo","is","$","scrollTop","off","_buildNewRender","find","_swapNewRender","templates","quotaMsg","prependTo","pos","_renderTags","tagsEditor","toggle","_setCurrentContentById","hidden","_renderAnnotation","length","annotationEditor","_collapseDrilldownPanel","_setUpItemViewListeners","delay","setCurrentContent","_attachItems","view","addItemView","$controls","add","hide","drilldown","parentName","options","$toolMenu","expanded:drilldown","v","_expandDrilldownPanel","collapsed:drilldown","listenToGalaxy","galaxy","removeClass","display","edit","report_error","show_params","hdaId","pathToMatch","push","$list","delegateEvents","connectToQuotaMeter","quotaMeter","events","clone","click .uploader-link","ev","upload","show","click .get-data-link","isUndefined","$target","not","fadeOut","fxSpeed","remove","click","center-frame:load","data","fullpath","useToURLRegexMap","hideQuotaMessage","rerun","slideUp","regex","use","result","match","self","_filterAndUpdate","center-panel:load","confirm","showQuotaMessage","deleted","visible","isOverQuota","quotaMsgTemplate","currentTarget","$msg","slideDown","unhideHidden","contents","purged","done","renderItems","jQuery","deleteHidden","wrapTemplate"],"mappings":"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","file":"../../../scripts/mvc/history/history-view-edit-current.js","sourcesContent":["import HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_VIEW_EDIT from \"mvc/history/history-view-edit\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n\n// ============================================================================\n/** session storage for history panel preferences (and to maintain state)\n */\nvar HistoryViewPrefs = BASE_MVC.SessionStorageModel.extend(\n    /** @lends HistoryViewPrefs.prototype */ {\n        defaults: {\n            /** should the tags editor be shown or hidden initially? */\n            tagsEditorShown: false,\n            /** should the annotation editor be shown or hidden initially? */\n            annotationEditorShown: false,\n            ///** what is the currently focused content (dataset or collection) in the current history?\n            // *      (the history panel will highlight and scroll to the focused content view)\n            // */\n            //focusedContentId : null\n            /** Current scroll position */\n            scrollPosition: 0\n        },\n        toString: function() {\n            return \"HistoryViewPrefs(\" + JSON.stringify(this.toJSON()) + \")\";\n        }\n    }\n);\n\n/** key string to store panel prefs (made accessible on class so you can access sessionStorage directly) */\nHistoryViewPrefs.storageKey = function storageKey() {\n    return \"history-panel\";\n};\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\nvar _super = HISTORY_VIEW_EDIT.HistoryViewEdit;\n// used in root/index.mako\n/** @class View/Controller for the user's current history model as used in the history\n *      panel (current right hand panel) of the analysis page.\n *\n *  The only history panel that:\n *      will poll for updates.\n *      displays datasets in reverse hid order.\n */\nvar CurrentHistoryView = _super.extend(\n    /** @lends CurrentHistoryView.prototype */ {\n        className: _super.prototype.className + \" current-history-panel\",\n\n        /** override to use drilldown (and not foldout) for how collections are displayed */\n        HDCAViewClass: _super.prototype.HDCAViewClass.extend({\n            foldoutStyle: \"drilldown\"\n        }),\n\n        emptyMsg: [\n            _l(\"This history is empty\"),\n            \". \",\n            _l(\"You can \"),\n            '<a class=\"uploader-link\" href=\"javascript:void(0)\">',\n            _l(\"load your own data\"),\n            \"</a>\",\n            _l(\" or \"),\n            '<a class=\"get-data-link\" href=\"javascript:void(0)\">',\n            _l(\"get data from an external source\"),\n            \"</a>\"\n        ].join(\"\"),\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events */\n        initialize: function(attributes) {\n            attributes = attributes || {};\n\n            // ---- persistent preferences\n            /** maintain state / preferences over page loads */\n            this.preferences = new HistoryViewPrefs(\n                _.extend(\n                    {\n                        id: HistoryViewPrefs.storageKey()\n                    },\n                    _.pick(\n                        attributes,\n                        _.keys(HistoryViewPrefs.prototype.defaults)\n                    )\n                )\n            );\n\n            _super.prototype.initialize.call(this, attributes);\n\n            /** sub-views that will overlay this panel (collections) */\n            this.panelStack = [];\n\n            /** id of currently focused content */\n            this.currentContentId = attributes.currentContentId || null;\n            //NOTE: purposely not sent to localstorage since panel recreation roughly lines up with a reset of this value\n        },\n\n        /** Override to cache the current scroll position with a listener */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n\n            var panel = this;\n            // reset scroll position when there's a new history\n            this.on(\"new-model\", function() {\n                panel.preferences.set(\"scrollPosition\", 0);\n            });\n        },\n\n        // ------------------------------------------------------------------------ loading history/item models\n        // TODO: next three more appropriate moved to the app level\n        /** (re-)loads the user's current history & contents w/ details */\n        loadCurrentHistory: function() {\n            return this.loadHistory(null, {\n                url: Galaxy.root + \"history/current_history_json\"\n            });\n        },\n\n        /** loads a history & contents w/ details and makes them the current history */\n        switchToHistory: function(historyId, attributes) {\n            if (Galaxy.user.isAnonymous()) {\n                this.trigger(\n                    \"error\",\n                    _l(\"You must be logged in to switch histories\"),\n                    _l(\"Anonymous user\")\n                );\n                return $.when();\n            }\n            return this.loadHistory(historyId, {\n                url: Galaxy.root + \"history/set_as_current?id=\" + historyId\n            });\n        },\n\n        /** creates a new history on the server and sets it as the user's current history */\n        createNewHistory: function(attributes) {\n            if (Galaxy.user.isAnonymous()) {\n                this.trigger(\n                    \"error\",\n                    _l(\"You must be logged in to create histories\"),\n                    _l(\"Anonymous user\")\n                );\n                return $.when();\n            }\n            return this.loadHistory(null, {\n                url: Galaxy.root + \"history/create_new_current\"\n            });\n        },\n\n        /** release/free/shutdown old models and set up panel for new models */\n        setModel: function(model, attributes, render) {\n            _super.prototype.setModel.call(this, model, attributes, render);\n            if (this.model && this.model.id) {\n                this.log(\"checking for updates\");\n                this.model.checkForUpdates();\n            }\n            return this;\n        },\n\n        // ------------------------------------------------------------------------ history/content event listening\n        /** listening for history events */\n        _setUpModelListeners: function() {\n            _super.prototype._setUpModelListeners.call(this);\n            // re-broadcast any model change events so that listeners don't have to re-bind to each history\n            return this.listenTo(this.model, {\n                \"change:nice_size change:size\": function() {\n                    this.trigger(\n                        \"history-size-change\",\n                        this,\n                        this.model,\n                        arguments\n                    );\n                },\n                \"change:id\": function() {\n                    this.once(\"loading-done\", function() {\n                        this.model.checkForUpdates();\n                    });\n                }\n            });\n        },\n\n        /** listening for collection events */\n        _setUpCollectionListeners: function() {\n            _super.prototype._setUpCollectionListeners.call(this);\n            // if a hidden item is created (gen. by a workflow), moves thru the updater to the ready state,\n            //  then: remove it from the collection if the panel is set to NOT show hidden datasets\n            this.listenTo(this.collection, \"state:ready\", function(\n                model,\n                newState,\n                oldState\n            ) {\n                if (\n                    !model.get(\"visible\") &&\n                    !this.collection.storage.includeHidden()\n                ) {\n                    this.removeItemView(model);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ panel rendering\n        /** override to add a handler to capture the scroll position when the parent scrolls */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            // console.log( '_setUpBehaviors', this.$scrollContainer( $where ).get(0), this.$list( $where ) );\n            // we need to call this in _setUpBehaviors which is called after render since the $el\n            // may not be attached to $el.parent and $scrollContainer() may not work\n            var panel = this;\n            _super.prototype._setUpBehaviors.call(panel, $where);\n\n            // cache the handler to remove and re-add so we don't pile up the handlers\n            if (!this._debouncedScrollCaptureHandler) {\n                this._debouncedScrollCaptureHandler = _.debounce(\n                    function scrollCapture() {\n                        // cache the scroll position (only if visible)\n                        if (panel.$el.is(\":visible\")) {\n                            panel.preferences.set(\n                                \"scrollPosition\",\n                                $(this).scrollTop()\n                            );\n                        }\n                    },\n                    40\n                );\n            }\n\n            panel\n                .$scrollContainer($where)\n                .off(\"scroll\", this._debouncedScrollCaptureHandler)\n                .on(\"scroll\", this._debouncedScrollCaptureHandler);\n            return panel;\n        },\n\n        /** In this override, handle null models and move the search input to the top */\n        _buildNewRender: function() {\n            if (!this.model) {\n                return $();\n            }\n            var $newRender = _super.prototype._buildNewRender.call(this);\n            $newRender\n                .find(\".search\")\n                .prependTo($newRender.find(\"> .controls\"));\n            this._renderQuotaMessage($newRender);\n            return $newRender;\n        },\n\n        /** render the message displayed when a user is over quota and can't run jobs */\n        _renderQuotaMessage: function($whereTo) {\n            $whereTo = $whereTo || this.$el;\n            return $(this.templates.quotaMsg({}, this)).prependTo(\n                $whereTo.find(\".messages\")\n            );\n        },\n\n        /** In this override, get and set current panel preferences when editor is used */\n        _renderTags: function($where) {\n            var panel = this;\n            // render tags and show/hide based on preferences\n            _super.prototype._renderTags.call(panel, $where);\n            if (panel.preferences.get(\"tagsEditorShown\")) {\n                panel.tagsEditor.toggle(true);\n            }\n            // store preference when shown or hidden\n            panel.listenTo(\n                panel.tagsEditor,\n                \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\",\n                function(tagsEditor) {\n                    panel.preferences.set(\"tagsEditorShown\", tagsEditor.hidden);\n                }\n            );\n        },\n\n        /** In this override, get and set current panel preferences when editor is used */\n        _renderAnnotation: function($where) {\n            var panel = this;\n            // render annotation and show/hide based on preferences\n            _super.prototype._renderAnnotation.call(panel, $where);\n            if (panel.preferences.get(\"annotationEditorShown\")) {\n                panel.annotationEditor.toggle(true);\n            }\n            // store preference when shown or hidden\n            panel.listenTo(\n                panel.annotationEditor,\n                \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\",\n                function(annotationEditor) {\n                    panel.preferences.set(\n                        \"annotationEditorShown\",\n                        annotationEditor.hidden\n                    );\n                }\n            );\n        },\n\n        /** Override to scroll to cached position (in prefs) after swapping */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            var panel = this;\n            _.delay(function() {\n                var pos = panel.preferences.get(\"scrollPosition\");\n                if (pos) {\n                    panel.scrollTo(pos, 0);\n                }\n            }, 10);\n            //TODO: is this enough of a delay on larger histories?\n\n            return this;\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** Override to add the current-content highlight class to currentContentId's view */\n        _attachItems: function($whereTo) {\n            _super.prototype._attachItems.call(this, $whereTo);\n            var panel = this;\n            if (panel.currentContentId) {\n                panel._setCurrentContentById(panel.currentContentId);\n            }\n            return this;\n        },\n\n        /** Override to remove any drill down panels */\n        addItemView: function(model, collection, options) {\n            var view = _super.prototype.addItemView.call(\n                this,\n                model,\n                collection,\n                options\n            );\n            if (!view) {\n                return view;\n            }\n            if (this.panelStack.length) {\n                return this._collapseDrilldownPanel();\n            }\n            return view;\n        },\n\n        // ------------------------------------------------------------------------ collection sub-views\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n            // use pub-sub to: handle drilldown expansion and collapse\n            return panel.listenTo(view, {\n                \"expanded:drilldown\": function(v, drilldown) {\n                    this._expandDrilldownPanel(drilldown);\n                },\n                \"collapsed:drilldown\": function(v, drilldown) {\n                    this._collapseDrilldownPanel(drilldown);\n                }\n            });\n        },\n\n        /** display 'current content': add a visible highlight and store the id of a content item */\n        setCurrentContent: function(view) {\n            this.$(\".history-content.current-content\").removeClass(\n                \"current-content\"\n            );\n            if (view) {\n                view.$el.addClass(\"current-content\");\n                this.currentContentId = view.model.id;\n            } else {\n                this.currentContentId = null;\n            }\n        },\n\n        /** find the view with the id and then call setCurrentContent on it */\n        _setCurrentContentById: function(id) {\n            var view = this.viewFromModelId(id) || null;\n            this.setCurrentContent(view);\n        },\n\n        /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n        _expandDrilldownPanel: function(drilldown) {\n            this.panelStack.push(drilldown);\n            // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n            this.$controls()\n                .add(this.$list())\n                .hide();\n            drilldown.parentName = this.model.get(\"name\");\n            drilldown\n                .delegateEvents()\n                .render()\n                .$el.appendTo(this.$el);\n        },\n\n        /** Handle drilldown close by freeing the panel and re-rendering this panel */\n        _collapseDrilldownPanel: function(drilldown) {\n            this.panelStack.pop();\n            //TODO: MEM: free the panel\n            this.$controls()\n                .add(this.$list())\n                .show();\n        },\n\n        // ........................................................................ panel events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            // the two links in the empty message\n            \"click .uploader-link\": function(ev) {\n                Galaxy.upload.show(ev);\n            },\n            \"click .get-data-link\": function(ev) {\n                var $toolMenu = $(\".toolMenuContainer\");\n                $toolMenu.parent().scrollTop(0);\n                $toolMenu.find('span:contains(\"Get Data\")').click();\n            }\n        }),\n\n        // ........................................................................ external objects/MVC\n        listenToGalaxy: function(galaxy) {\n            this.listenTo(galaxy, {\n                // when the galaxy_main iframe is loaded with a new page,\n                // compare the url to the following list and if there's a match\n                // pull the id from url and indicate in the history view that\n                // the dataset with that id is the 'current'ly active dataset\n                \"center-frame:load\": function(data) {\n                    var pathToMatch = data.fullpath;\n                    var hdaId = null;\n                    var useToURLRegexMap = {\n                        display: /datasets\\/([a-f0-9]+)\\/display/,\n                        edit: /datasets\\/([a-f0-9]+)\\/edit/,\n                        report_error: /dataset\\/errors\\?id=([a-f0-9]+)/,\n                        rerun: /tool_runner\\/rerun\\?id=([a-f0-9]+)/,\n                        show_params: /datasets\\/([a-f0-9]+)\\/show_params/\n                        // no great way to do this here? (leave it in the dataset event handlers above?)\n                        // 'visualization' : 'visualization',\n                    };\n                    _.find(useToURLRegexMap, function(regex, use) {\n                        // grab the more specific match result (1), save, and use it as the find flag\n                        hdaId = _.result(pathToMatch.match(regex), 1);\n                        return hdaId;\n                    });\n                    // need to type mangle to go from web route to history contents\n                    this._setCurrentContentById(\n                        hdaId ? \"dataset-\" + hdaId : null\n                    );\n                },\n                // when the center panel is given a new view, clear the current indicator\n                \"center-panel:load\": function(view) {\n                    this._setCurrentContentById();\n                }\n            });\n        },\n\n        //TODO: remove quota meter from panel and remove this\n        /** add listeners to an external quota meter (mvc/user/user-quotameter.js) */\n        connectToQuotaMeter: function(quotaMeter) {\n            if (!quotaMeter) {\n                return this;\n            }\n            // show/hide the 'over quota message' in the history when the meter tells it to\n            this.listenTo(quotaMeter, \"quota:over\", this.showQuotaMessage);\n            this.listenTo(quotaMeter, \"quota:under\", this.hideQuotaMessage);\n\n            // having to add this to handle re-render of hview while overquota (the above do not fire)\n            this.on(\"rendered rendered:initial\", function() {\n                if (quotaMeter && quotaMeter.isOverQuota()) {\n                    this.showQuotaMessage();\n                }\n            });\n            return this;\n        },\n\n        /** Override to preserve the quota message */\n        clearMessages: function(ev) {\n            var $target = !_.isUndefined(ev)\n                ? $(ev.currentTarget)\n                : this.$messages().children('[class$=\"message\"]');\n            $target = $target.not(\".quota-message\");\n            $target.fadeOut(this.fxSpeed, function() {\n                $(this).remove();\n            });\n            return this;\n        },\n\n        /** Show the over quota message (which happens to be in the history panel).\n     */\n        showQuotaMessage: function() {\n            var $msg = this.$(\".quota-message\");\n            if ($msg.is(\":hidden\")) {\n                $msg.slideDown(this.fxSpeed);\n            }\n        },\n\n        /** Hide the over quota message (which happens to be in the history panel).\n     */\n        hideQuotaMessage: function() {\n            var $msg = this.$(\".quota-message\");\n            if (!$msg.is(\":hidden\")) {\n                $msg.slideUp(this.fxSpeed);\n            }\n        },\n\n        // ........................................................................ options menu\n        //TODO: remove to batch\n        /** unhide any hidden datasets */\n        unhideHidden: function() {\n            var self = this;\n            if (confirm(_l(\"Really unhide all hidden datasets?\"))) {\n                // get all hidden, regardless of deleted/purged\n                return self.model.contents\n                    ._filterAndUpdate(\n                        { visible: false, deleted: \"\", purged: \"\" },\n                        { visible: true }\n                    )\n                    .done(function() {\n                        // TODO: would be better to render these as they're unhidden instead of all at once\n                        if (!self.model.contents.includeHidden) {\n                            self.renderItems();\n                        }\n                    });\n            }\n            return jQuery.when();\n        },\n\n        /** delete any hidden datasets */\n        deleteHidden: function() {\n            var self = this;\n            if (confirm(_l(\"Really delete all hidden datasets?\"))) {\n                return self.model.contents._filterAndUpdate(\n                    // get all hidden, regardless of deleted/purged\n                    { visible: false, deleted: \"\", purged: \"\" },\n                    // both delete *and* unhide them\n                    { deleted: true, visible: true }\n                );\n            }\n            return jQuery.when();\n        },\n\n        /** Return a string rep of the history */\n        toString: function() {\n            return (\n                \"CurrentHistoryView(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nCurrentHistoryView.prototype.templates = (function() {\n    var quotaMsgTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"quota-message errormessage\">',\n            _l(\"You are over your disk quota\"),\n            \". \",\n            _l(\n                \"Tool execution is on hold until your disk usage drops below your allocated quota\"\n            ),\n            \".\",\n            \"</div>\"\n        ],\n        \"history\"\n    );\n    return _.extend(_.clone(_super.prototype.templates), {\n        quotaMsg: quotaMsgTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    CurrentHistoryView: CurrentHistoryView\n};\n"]}