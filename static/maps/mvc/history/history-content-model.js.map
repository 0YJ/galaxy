{"version":3,"sources":["mvc/history/history-content-model.js"],"names":["define","STATES","BASE_MVC","_l","HistoryContentMixin","defaults","history_id","history_content_type","hid","visible","idAttribute","hidden","this","get","isVisible","includeDeleted","includeHidden","urlRoot","Galaxy","root","url","hide","options","save","jQuery","when","unhide","toString","join"],"mappings":"AAAAA,QACI,qBACA,eACA,sBACD,SAAUC,EAAQC,EAAUC,GAC/B,YAiFI,QACIC,qBA1EJC,UAEIC,WAAsB,KAEtBC,qBAAsB,KAEtBC,IAAsB,KAEtBC,SAAsB,GAO1BC,YAAc,UAIdC,OAAS,WACL,OAAQC,KAAKC,IAAK,YAStBC,UAAY,SAAUC,EAAgBC,GAClC,GAAIF,IAAY,CAShB,OAROC,KACDH,KAAKC,IAAK,aAAeD,KAAKC,IAAK,YACrCC,GAAY,GAETE,GACAJ,KAAKC,IAAK,aACbC,GAAY,GAETA,GAMXG,QAASC,OAAOC,KAAO,iBAGvBC,IAAM,WAGF,MAFUR,MAAKK,QAAUL,KAAKC,IAAK,cAAiB,aAC7CD,KAAKC,IAAI,wBAA0B,KAAOD,KAAKC,IAAK,OAK/DQ,KAAO,SAAUC,GACb,MAAKV,MAAKC,IAAK,WACRD,KAAKW,MAAQd,SAAS,GAASa,GADDE,OAAOC,QAIhDC,OAAS,SAAUJ,GACf,MAAIV,MAAKC,IAAK,WAAsBW,OAAOC,OACpCb,KAAKW,MAAQd,SAAS,GAAQa,IAIzCK,SAAW,WACP,OAAUf,KAAKC,IAAK,WAAaD,KAAKC,IAAK,OAASD,KAAKC,IAAK,SAAWe,KAAK","file":"../../../scripts/mvc/history/history-content-model.js","sourcesContent":["define([\n    \"mvc/dataset/states\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( STATES, BASE_MVC, _l ){\n'use strict';\n\n//==============================================================================\n/** @class Mixin for HistoryContents content (HDAs, HDCAs).\n */\nvar HistoryContentMixin = {\n\n    /** default attributes for a model */\n    defaults : {\n        /** parent (containing) history */\n        history_id          : null,\n        /** some content_type (HistoryContents can contain mixed model classes) */\n        history_content_type: null,\n        /** indicating when/what order the content was generated in the context of the history */\n        hid                 : null,\n        /** whether the user wants the content shown (visible) */\n        visible             : true\n    },\n\n    // ........................................................................ mixed content element\n    // In order to be part of a MIXED bbone collection, we can't rely on the id\n    //  (which may collide btwn models of different classes)\n    // Instead, use type_id which prefixes the history_content_type so the bbone collection can differentiate\n    idAttribute : 'type_id',\n\n    // ........................................................................ common queries\n    /** the more common alias of visible */\n    hidden : function(){\n        return !this.get( 'visible' );\n    },\n\n//TODO: remove\n    /** based on includeDeleted, includeHidden (gen. from the container control),\n     *      would this ds show in the list of ds's?\n     *  @param {Boolean} includeDeleted are we showing deleted hdas?\n     *  @param {Boolean} includeHidden are we showing hidden hdas?\n     */\n    isVisible : function( includeDeleted, includeHidden ){\n        var isVisible = true;\n        if( ( !includeDeleted )\n        &&  ( this.get( 'deleted' ) || this.get( 'purged' ) ) ){\n            isVisible = false;\n        }\n        if( ( !includeHidden )\n        &&  ( !this.get( 'visible' ) ) ){\n            isVisible = false;\n        }\n        return isVisible;\n    },\n\n    // ........................................................................ ajax\n    //TODO?: these are probably better done on the leaf classes\n    /** history content goes through the 'api/histories' API */\n    urlRoot: Galaxy.root + 'api/histories/',\n\n    /** full url spec. for this content */\n    url : function(){\n        var url = this.urlRoot + this.get( 'history_id' ) + '/contents/'\n             + this.get('history_content_type') + 's/' + this.get( 'id' );\n        return url;\n    },\n\n    /** save this content as not visible */\n    hide : function( options ){\n        if( !this.get( 'visible' ) ){ return jQuery.when(); }\n        return this.save( { visible: false }, options );\n    },\n    /** save this content as visible */\n    unhide : function( options ){\n        if( this.get( 'visible' ) ){ return jQuery.when(); }\n        return this.save( { visible: true }, options );\n    },\n\n    // ........................................................................ misc\n    toString : function(){\n        return ([ this.get( 'type_id' ), this.get( 'hid' ), this.get( 'name' ) ].join(':'));\n    }\n};\n\n\n//==============================================================================\n    return {\n        HistoryContentMixin : HistoryContentMixin\n    };\n});\n"]}