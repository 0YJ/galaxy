{"version":3,"sources":["mvc/history/history-view.js"],"names":["define","LIST_VIEW","HISTORY_MODEL","HISTORY_CONTENTS","HISTORY_PREFS","HDA_LI","HDCA_LI","USER","_logNamespace","faIconButton","BASE_MVC","HDAViewClass","searchPlaceholder","HistoryView","_super","extend","FETCH_COLLECTION_COUNTS_DELAY","HDAListItemView","HDCAViewClass","HDCAListItemView","prototype","call","modelCollectionKey","tagName","linkTarget","className","emptyMsg","_l","noneFoundMsg","initialize","attributes","_clearDetailedFetchTimeout","this","clearTimeout","detailedFetchTimeoutId","_createDefaultCollection","collectionClass","history","model","freeModel","error","clearUpdateTimeout","self","_setUpListeners","on","xhr","options","msg","details","loadHistory","errorHandler","historyId","loading-done","_","delay","contentsOptions","trigger","contents","fetchCollectionCounts","view","_renderSelectButton","view:attached","scrollTo","silent","_setUpCollectionListeners","setModel","listenTo","collection","id","fetchWithContents","always","render","refreshContents","_showLoadingIndicator","$indicator","$","when","remove","fetching-more","_toggleContentsLoadingIndicator","_buildNewRender","hide","fetching-more-done","$newRender","$where","$el","speed","callback","html","multiselectActions","length","isUndefined","fxSpeed","_hideLoadingIndicator","slideUp","_renderEmptyMessage","views","empty","$existing","find","$emptyMsg","$scrollContainer","classes","faIcon","prependTo","$whereTo","$emptyMessage","get","active","append","show","renderItems","searchFor","haveSearchDetails","$list","_renderPagination","$paginationControls","current","last","models","_renderSomeItems","map","toggle","push","shouldPaginate","templates","pagination","includeHidden","currentPage","hidden","getLastPage","tooltip","contentType","m","_createItemView","TypeError","expanded","hasUser","includeDeleted","isDeletedOrPurged","_filterItem","_getItemViewClass","panel","collapseAll","_getItemViewOptions","storage","isExpanded","ownedByCurrUser","_setUpItemViewListeners","events","clone","v","addExpanded","collapsed","removeExpanded","clearExpanded","getSelectedModels","_changePageSelect","toggleShowDeleted","click > .controls .next","change > .controls .pages","_clickPrevPage","ev","fetchPrevPage","_clickNextPage","toggleShowHidden","fetchNextPage","currentTarget","fetchPage","page","_firstSearch","undefined","inputSelector","setIncludeDeleted","store","fetchCurrentPage","renderAll","searchItems","searchInput","progressivelyFetchDetails","progress","response","limit","offset","done","clearSearch","isString","message","val","status","readyState","scrollToItem","ordinalIndicator","numStr","number","title","ERROR_MODAL","clearMessages","toString","$messages","children","fadeOut","scrollToHid","controlsTemplate","first","viewsWhereModel","hid","paginationTemplate","charAt","el","mainTemplate","controls","wrapTemplate"],"mappings":"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","file":"../../../scripts/mvc/history/history-view.js","sourcesContent":["define([\n    \"mvc/list/list-view\",\n    \"mvc/history/history-model\",\n    \"mvc/history/history-contents\",\n    \"mvc/history/history-preferences\",\n    \"mvc/history/hda-li\",\n    \"mvc/history/hdca-li\",\n    \"mvc/user/user-model\",\n    \"mvc/ui/error-modal\",\n    \"ui/fa-icon-button\",\n    \"mvc/base-mvc\",\n    \"utils/localization\",\n    \"ui/search-input\"\n], function(\n    LIST_VIEW,\n    HISTORY_MODEL,\n    HISTORY_CONTENTS,\n    HISTORY_PREFS,\n    HDA_LI,\n    HDCA_LI,\n    USER,\n    ERROR_MODAL,\n    faIconButton,\n    BASE_MVC,\n    _l\n){\n'use strict';\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class  non-editable, read-only View/Controller for a history model.\n *  Allows:\n *      changing the loaded history\n *      displaying data, info, and download\n *      tracking history attrs: size, tags, annotations, name, etc.\n *  Does not allow:\n *      changing the name\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar HistoryView = _super.extend(\n/** @lends HistoryView.prototype */{\n    _logNamespace : 'history',\n\n    /** class to use for constructing the HDA views */\n    HDAViewClass        : HDA_LI.HDAListItemView,\n    /** class to use for constructing the HDCA views */\n    HDCAViewClass       : HDCA_LI.HDCAListItemView,\n    /** class to used for constructing collection of sub-view models */\n    collectionClass     : HISTORY_CONTENTS.HistoryContents,\n    /** key of attribute in model to assign to this.collection */\n    modelCollectionKey  : 'contents',\n\n    tagName             : 'div',\n    className           : _super.prototype.className + ' history-panel',\n\n    /** string to display when the collection is empty */\n    emptyMsg            : _l( 'This history is empty' ),\n    /** displayed when no items match the search terms */\n    noneFoundMsg        : _l( 'No matching datasets found' ),\n    /** string used for search placeholder */\n    searchPlaceholder   : _l( 'search datasets' ),\n\n    /** @type {Number} ms to wait after history load to fetch/decorate hdcas with element_count */\n    FETCH_COLLECTION_COUNTS_DELAY : 2000,\n\n    // ......................................................................... SET UP\n    /** Set up the view, bind listeners.\n     *  @param {Object} attributes optional settings for the panel\n     */\n    initialize : function( attributes ){\n        _super.prototype.initialize.call( this, attributes );\n        // ---- instance vars\n        // control contents/behavior based on where (and in what context) the panel is being used\n        /** where should pages from links be displayed? (default to new tab/window) */\n        this.linkTarget = attributes.linkTarget || '_blank';\n\n        /** timeout id for detailed fetch of collection counts, etc... */\n        this.detailedFetchTimeoutId = null;\n    },\n\n    /** create and return a collection for when none is initially passed */\n    _createDefaultCollection : function(){\n        // override\n        return new this.collectionClass([], { history: this.model });\n    },\n\n    /** In this override, clear the update timer on the model */\n    freeModel : function(){\n        _super.prototype.freeModel.call( this );\n        if( this.model ){\n            this.model.clearUpdateTimeout();\n        }\n        this._clearDetailedFetchTimeout();\n        return this;\n    },\n\n    /** clear the timeout and the cached timeout id */\n    _clearDetailedFetchTimeout : function(){\n        if( this.detailedFetchTimeoutId ){\n            clearTimeout( this.detailedFetchTimeoutId );\n            this.detailedFetchTimeoutId = null;\n        }\n    },\n\n    /** create any event listeners for the panel\n     *  @fires: rendered:initial    on the first render\n     *  @fires: empty-history       when switching to a history with no contents or creating a new history\n     */\n    _setUpListeners : function(){\n        _super.prototype._setUpListeners.call( this );\n        this.on({\n            error : function( model, xhr, options, msg, details ){\n                this.errorHandler( model, xhr, options, msg, details );\n            },\n            'loading-done' : function(){\n                var self = this;\n                // after the initial load, decorate with more time consuming fields (like HDCA element_counts)\n                self.detailedFetchTimeoutId = _.delay( function(){\n                    self.detailedFetchTimeoutId = null;\n                    self.model.contents.fetchCollectionCounts();\n                }, self.FETCH_COLLECTION_COUNTS_DELAY );\n            },\n            'views:ready view:attached view:removed' : function( view ){\n                this._renderSelectButton();\n            },\n            'view:attached' : function( view ){\n                this.scrollTo(0);\n            },\n        });\n        // this.on( 'all', function(){ console.debug( arguments ); });\n    },\n\n    // ------------------------------------------------------------------------ loading history/hda models\n    /** load the history with the given id then it's contents, sending ajax options to both */\n    loadHistory : function( historyId, options, contentsOptions ){\n        contentsOptions = _.extend( contentsOptions || { silent: true });\n        this.info( 'loadHistory:', historyId, options, contentsOptions );\n        var self = this;\n        self.setModel( new HISTORY_MODEL.History({ id : historyId }) );\n\n        contentsOptions.silent = true;\n        self.trigger( 'loading' );\n        return self.model\n            .fetchWithContents( options, contentsOptions )\n            .always( function(){\n                self.render();\n                self.trigger( 'loading-done' );\n            });\n    },\n\n    /** convenience alias to the model. Updates the item list only (not the history) */\n    refreshContents : function( options ){\n        if( this.model ){\n            return this.model.refresh( options );\n        }\n        // may have callbacks - so return an empty promise\n        return $.when();\n    },\n\n    /** Override to reset web storage when the id changes (since it needs the id) */\n    _setUpCollectionListeners : function(){\n        _super.prototype._setUpCollectionListeners.call( this );\n        return this.listenTo( this.collection, {\n            // 'all' : function(){ console.log( this.collection + ':', arguments ); },\n            'fetching-more'     : function(){\n                this._toggleContentsLoadingIndicator( true );\n                this.$emptyMessage().hide();\n            },\n            'fetching-more-done': function(){ this._toggleContentsLoadingIndicator( false ); },\n        });\n    },\n\n    // ------------------------------------------------------------------------ panel rendering\n    /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n    _showLoadingIndicator : function( msg, speed, callback ){\n        var $indicator = $( '<div class=\"loading-indicator\"/>' );\n        this.$el.html( $indicator.text( msg ).slideDown( !_.isUndefined( speed )? speed : this.fxSpeed ) );\n    },\n\n    /** hide the loading indicator */\n    _hideLoadingIndicator : function( speed ){\n        // make speed a bit slower to compensate for slow rendering of up to 500 contents\n        this.$( '.loading-indicator' ).slideUp( !_.isUndefined( speed )? speed : ( this.fxSpeed + 200 ), function(){\n            $( this ).remove();\n        });\n    },\n\n    /** In this override, add a btn to toggle the selectors */\n    _buildNewRender : function(){\n        var $newRender = _super.prototype._buildNewRender.call( this );\n        this._renderSelectButton( $newRender );\n        return $newRender;\n    },\n\n    /** button for starting select mode */\n    _renderSelectButton : function( $where ){\n        $where = $where || this.$el;\n        // do not render selector option if no actions\n        if( !this.multiselectActions().length ){\n            return null;\n        }\n        // do not render (and remove even) if nothing to select\n        if( !this.views.length ){\n            this.hideSelectors();\n            $where.find( '.controls .actions .show-selectors-btn' ).remove();\n            return null;\n        }\n        // don't bother rendering if there's one already\n        var $existing = $where.find( '.controls .actions .show-selectors-btn' );\n        if( $existing.length ){\n            return $existing;\n        }\n\n        return faIconButton({\n            title   : _l( 'Operations on multiple datasets' ),\n            classes : 'show-selectors-btn',\n            faIcon  : 'fa-check-square-o'\n        }).prependTo( $where.find( '.controls .actions' ) );\n    },\n\n    /** override to avoid showing intial empty message using contents_active */\n    _renderEmptyMessage : function( $whereTo ){\n        var self = this;\n        var $emptyMsg = self.$emptyMessage( $whereTo );\n\n        var empty = self.model.get( 'contents_active' ).active <= 0;\n        if( empty ){\n            return $emptyMsg.empty().append( self.emptyMsg ).show();\n\n        } else if( self.searchFor && self.model.contents.haveSearchDetails() && !self.views.length ){\n            return $emptyMsg.empty().append( self.noneFoundMsg ).show();\n        }\n        $emptyMsg.hide();\n        return $();\n    },\n\n    /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n    $scrollContainer : function( $where ){\n        // override or set via attributes.$scrollContainer\n        return this.$list( $where );\n    },\n\n    // ------------------------------------------------------------------------ subviews\n    _toggleContentsLoadingIndicator : function( show ){\n        if( !show ){\n            this.$list().find( '.contents-loading-indicator' ).remove();\n        } else {\n            this.$list().html( '<div class=\"contents-loading-indicator\">'\n                + '<span class=\"fa fa-2x fa-spinner fa-spin\"/></div>' );\n        }\n    },\n\n    /** override to render pagination also */\n    renderItems: function( $whereTo ){\n        // console.log( this + '.renderItems-----------------', new Date() );\n        $whereTo = $whereTo || this.$el;\n        var self = this;\n        var $list = self.$list( $whereTo );\n\n        // TODO: bootstrap hack to remove orphaned tooltips\n        $( '.tooltip' ).remove();\n\n        $list.empty();\n        self.views = [];\n\n        var models = self._filterCollection();\n        if( models.length ){\n            self._renderPagination( $whereTo );\n            self.views = self._renderSomeItems( models, $list );\n        } else {\n            // TODO: consolidate with _renderPagination above by (???) passing in models/length?\n            $whereTo.find( '> .controls .list-pagination' ).empty();\n        }\n        self._renderEmptyMessage( $whereTo ).toggle( !models.length );\n\n        self.trigger( 'views:ready', self.views );\n        return self.views;\n    },\n\n    /** render pagination controls if not searching and contents says we're paginating */\n    _renderPagination: function( $whereTo ){\n        var $paginationControls = $whereTo.find( '> .controls .list-pagination' );\n        if( this.searchFor || !this.model.contents.shouldPaginate() ) return $paginationControls.empty();\n\n        $paginationControls.html( this.templates.pagination({\n            // pagination is 1-based for the user\n            current : this.model.contents.currentPage + 1,\n            last    : this.model.contents.getLastPage() + 1,\n        }, this ));\n        $paginationControls.find( 'select.pages' ).tooltip();\n        return $paginationControls;\n    },\n\n    /** render a subset of the entire collection (client-side pagination) */\n    _renderSomeItems: function( models, $list ){\n        var self = this;\n        var views = [];\n        $list.append( models.map( function( m ){\n            var view = self._createItemView( m );\n            views.push( view );\n            return self._renderItemView$el( view );\n        }));\n        return views;\n    },\n\n    // ------------------------------------------------------------------------ sub-views\n    /** in this override, check if the contents would also display based on includeDeleted/hidden */\n    _filterItem : function( model ){\n        var self = this;\n        var contents = self.model.contents;\n        return ( contents.includeHidden  || !model.hidden() )\n            && ( contents.includeDeleted || !model.isDeletedOrPurged() )\n            && ( _super.prototype._filterItem.call( self, model ) );\n    },\n\n    /** In this override, since history contents are mixed,\n     *      get the appropo view class based on history_content_type\n     */\n    _getItemViewClass : function( model ){\n        var contentType = model.get( \"history_content_type\" );\n        switch( contentType ){\n            case 'dataset':\n                return this.HDAViewClass;\n            case 'dataset_collection':\n                return this.HDCAViewClass;\n        }\n        throw new TypeError( 'Unknown history_content_type: ' + contentType );\n    },\n\n    /** in this override, add a linktarget, and expand if id is in web storage */\n    _getItemViewOptions : function( model ){\n        var options = _super.prototype._getItemViewOptions.call( this, model );\n        return _.extend( options, {\n            linkTarget      : this.linkTarget,\n            expanded        : this.model.contents.storage.isExpanded( model.id ),\n            hasUser         : this.model.ownedByCurrUser()\n        });\n    },\n\n    /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n    _setUpItemViewListeners : function( view ){\n        var panel = this;\n        _super.prototype._setUpItemViewListeners.call( panel, view );\n        //TODO: send from content view: this.model.collection.storage.addExpanded\n        // maintain a list of items whose bodies are expanded\n        return panel.listenTo( view, {\n            'expanded': function( v ){\n                panel.model.contents.storage.addExpanded( v.model );\n            },\n            'collapsed': function( v ){\n                panel.model.contents.storage.removeExpanded( v.model );\n            }\n        });\n    },\n\n    /** override to remove expandedIds from webstorage */\n    collapseAll : function(){\n        this.model.contents.storage.clearExpanded();\n        _super.prototype.collapseAll.call( this );\n    },\n\n    // ------------------------------------------------------------------------ selection\n    /** Override to correctly set the historyId of the new collection */\n    getSelectedModels : function(){\n        var collection = _super.prototype.getSelectedModels.call( this );\n        collection.historyId = this.collection.historyId;\n        return collection;\n    },\n\n\n    // ------------------------------------------------------------------------ panel events\n    /** event map */\n    events : _.extend( _.clone( _super.prototype.events ), {\n        'click .show-selectors-btn'         : 'toggleSelectors',\n        'click > .controls .prev'           : '_clickPrevPage',\n        'click > .controls .next'           : '_clickNextPage',\n        'change > .controls .pages'         : '_changePageSelect',\n        // allow (error) messages to be clicked away\n        'click .messages [class$=message]'  : 'clearMessages',\n    }),\n\n    _clickPrevPage : function( ev ){\n        this.model.clearUpdateTimeout();\n        this.model.contents.fetchPrevPage();\n    },\n\n    _clickNextPage : function( ev ){\n        this.model.clearUpdateTimeout();\n        this.model.contents.fetchNextPage();\n    },\n\n    _changePageSelect : function( ev ){\n        this.model.clearUpdateTimeout();\n        var page = $( ev.currentTarget ).val();\n        this.model.contents.fetchPage( page );\n    },\n\n    /** Toggle and store the deleted visibility and re-render items\n     * @returns {Boolean} new setting\n     */\n    toggleShowDeleted : function( show, options ){\n        show = ( show !== undefined )?( show ):( !this.model.contents.includeDeleted );\n        var self = this;\n        var contents = self.model.contents;\n        contents.setIncludeDeleted( show, options );\n        self.trigger( 'show-deleted', show );\n\n        contents.fetchCurrentPage({ renderAll: true });\n        return show;\n    },\n\n    /** Toggle and store whether to render explicity hidden contents\n     * @returns {Boolean} new setting\n     */\n    toggleShowHidden : function( show, store, options ){\n        // console.log( 'toggleShowHidden', show, store );\n        show = ( show !== undefined )?( show ):( !this.model.contents.includeHidden );\n        var self = this;\n        var contents = self.model.contents;\n        contents.setIncludeHidden( show, options );\n        self.trigger( 'show-hidden', show );\n\n        contents.fetchCurrentPage({ renderAll: true });\n        return show;\n    },\n\n    /** On the first search, if there are no details - load them, then search */\n    _firstSearch : function( searchFor ){\n        var self = this;\n        var inputSelector = '> .controls .search-input';\n        this.log( 'onFirstSearch', searchFor );\n\n        // if the contents already have enough details to search, search and return now\n        if( self.model.contents.haveSearchDetails() ){\n            self.searchItems( searchFor );\n            return;\n        }\n\n        // otherwise, load the details progressively here\n        self.$( inputSelector ).searchInput( 'toggle-loading' );\n        // set this now so that only results will show during progress\n        self.searchFor = searchFor;\n        var xhr = self.model.contents.progressivelyFetchDetails({ silent: true })\n            .progress( function( response, limit, offset ){\n                self.renderItems();\n                self.trigger( 'search:loading-progress', limit, offset );\n            })\n            .always( function(){\n                self.$el.find( inputSelector ).searchInput( 'toggle-loading' );\n            })\n            .done( function(){\n                self.searchItems( searchFor, 'force' );\n           });\n    },\n\n    /** clear the search filters and show all views that are normally shown */\n    clearSearch : function( searchFor ){\n        var self = this;\n        if( !self.searchFor ) return self;\n        //self.log( 'onSearchClear', self );\n        self.searchFor = '';\n        self.trigger( 'search:clear', self );\n        self.$( '> .controls .search-query' ).val( '' );\n        // NOTE: silent + render prevents collection update event with merge only\n        // - which causes an empty page due to event handler above\n        self.model.contents.fetchCurrentPage({ silent: true })\n            .done( function(){\n                self.renderItems();\n            });\n        return self;\n    },\n\n    // ........................................................................ error handling\n    /** Event handler for errors (from the panel, the history, or the history's contents)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n    errorHandler : function( model, xhr, options ){\n        //TODO: to mixin or base model\n        // interrupted ajax or no connection\n        if( xhr && xhr.status === 0 && xhr.readyState === 0 ){\n            // return ERROR_MODAL.offlineErrorModal();\n            // fail silently\n            return;\n        }\n        // otherwise, leave something to report in the console\n        this.error( model, xhr, options );\n        // and feedback to a modal\n        // if sent two strings (and possibly details as 'options'), use those as message and title\n        if( _.isString( model ) && _.isString( xhr ) ){\n            var message = model;\n            var title = xhr;\n            return ERROR_MODAL.errorModal( message, title, options );\n        }\n        // bad gateway\n        // TODO: possibly to global handler\n        if( xhr && xhr.status === 502 ){\n            return ERROR_MODAL.badGatewayErrorModal();\n        }\n        return ERROR_MODAL.ajaxErrorModal( model, xhr, options );\n    },\n\n    /** Remove all messages from the panel. */\n    clearMessages : function( ev ){\n        var $target = !_.isUndefined( ev )?\n            $( ev.currentTarget )\n            :this.$messages().children( '[class$=\"message\"]' );\n        $target.fadeOut( this.fxSpeed, function(){\n            $( this ).remove();\n        });\n        return this;\n    },\n\n    // ........................................................................ scrolling\n    /** Scrolls the panel to show the content sub-view with the given hid.\n     *  @param {Integer} hid    the hid of item to scroll into view\n     *  @returns {HistoryView} the panel\n     */\n    scrollToHid : function( hid ){\n        return this.scrollToItem( _.first( this.viewsWhereModel({ hid: hid }) ) );\n    },\n\n    // ........................................................................ misc\n    /** utility for adding -st, -nd, -rd, -th to numbers */\n    ordinalIndicator : function( number ){\n        var numStr = number + '';\n        switch( numStr.charAt( numStr.length - 1 )){\n            case '1': return numStr + 'st';\n            case '2': return numStr + 'nd';\n            case '3': return numStr + 'rd';\n            default : return numStr + 'th';\n        }\n    },\n\n    /** Return a string rep of the history */\n    toString : function(){\n        return 'HistoryView(' + (( this.model )?( this.model.get( 'name' )):( '' )) + ')';\n    }\n});\n\n\n//------------------------------------------------------------------------------ TEMPLATES\nHistoryView.prototype.templates = (function(){\n\n    var mainTemplate = BASE_MVC.wrapTemplate([\n        // temp container\n        '<div>',\n            '<div class=\"controls\"></div>',\n            '<ul class=\"list-items\"></ul>',\n            '<div class=\"empty-message infomessagesmall\"></div>',\n        '</div>'\n    ]);\n\n    var controlsTemplate = BASE_MVC.wrapTemplate([\n        '<div class=\"controls\">',\n            '<div class=\"title\">',\n                '<div class=\"name\"><%- history.name %></div>',\n            '</div>',\n            '<div class=\"subtitle\"></div>',\n            '<div class=\"history-size\"><%- history.nice_size %></div>',\n\n            '<div class=\"actions\"></div>',\n\n            '<div class=\"messages\">',\n                '<% if( history.deleted && history.purged ){ %>',\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                        _l( 'This history has been purged and deleted' ),\n                    '</div>',\n                '<% } else if( history.deleted ){ %>',\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                        _l( 'This history has been deleted' ),\n                    '</div>',\n                '<% } else if( history.purged ){ %>',\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                        _l( 'This history has been purged' ),\n                    '</div>',\n                '<% } %>',\n\n                '<% if( history.message ){ %>',\n                    // should already be localized\n                    '<div class=\"<%= history.message.level || \"info\" %>messagesmall\">',\n                        '<%= history.message.text %>',\n                    '</div>',\n                '<% } %>',\n            '</div>',\n\n            // add tags and annotations\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"search\">',\n                '<div class=\"search-input\"></div>',\n            '</div>',\n\n            '<div class=\"list-actions\">',\n                '<div class=\"btn-group\">',\n                    '<button class=\"select-all btn btn-default\"',\n                            'data-mode=\"select\">', _l( 'All' ), '</button>',\n                    '<button class=\"deselect-all btn btn-default\"',\n                            'data-mode=\"select\">', _l( 'None' ), '</button>',\n                '</div>',\n                '<div class=\"list-action-menu btn-group\">',\n                '</div>',\n            '</div>',\n            '<div class=\"list-pagination form-inline\"></div>',\n        '</div>'\n    ], 'history' );\n\n    var paginationTemplate = BASE_MVC.wrapTemplate([\n        '<button class=\"prev\" <%- pages.current === 1 ? \"disabled\" : \"\" %>>previous</button>',\n        '<select class=\"pages form-control\" ',\n                'title=\"', _l( 'Click to open and select a page. Begin typing a page number to select it' ), '\">',\n            '<% _.range( 1, pages.last + 1 ).forEach( function( i ){ %>',\n                '<option value=\"<%- i - 1 %>\" <%- i === pages.current ? \"selected\" : \"\" %>>',\n                    '<%- view.ordinalIndicator( i ) %> of <%- pages.last %> pages',\n                '</option>',\n            '<% }); %>',\n        '</select>',\n        '<button class=\"next\" <%- pages.current === pages.last ? \"disabled\" : \"\" %>>next</button>',\n    ], 'pages' );\n\n    return _.extend( _.clone( _super.prototype.templates ), {\n        el                      : mainTemplate,\n        controls                : controlsTemplate,\n        pagination              : paginationTemplate,\n    });\n}());\n\n\n//==============================================================================\n    return {\n        HistoryView: HistoryView\n    };\n});\n"]}