{"version":3,"sources":["mvc/history/history-view.js"],"names":["_super","_listView2","default","ModelListPanel","HistoryView","extend","_logNamespace","HDAViewClass","_hdaLi2","HDAListItemView","HDCAViewClass","_hdcaLi2","HDCAListItemView","collectionClass","_historyContents2","HistoryContents","modelCollectionKey","tagName","className","prototype","emptyMsg","_localization2","noneFoundMsg","initialize","attributes","call","this","linkTarget","detailedFetchTimeoutId","_createDefaultCollection","history","model","freeModel","_clearDetailedFetchTimeout","clearTimeout","_setUpListeners","error","xhr","options","msg","details","clearUpdateTimeout","loading-done","self","_","delay","fetchCollectionCounts","views:ready view:attached view:removed","view","_renderSelectButton","view:attached","scrollTo","loadHistory","errorHandler","contentsOptions","silent","info","historyId","setModel","_historyModel2","History","id","fetchWithContents","always","trigger","refreshContents","refresh","when","_setUpCollectionListeners","collection","fetching-more","render","hide","fetching-more-done","_toggleContentsLoadingIndicator","_showLoadingIndicator","speed","callback","$indicator","$","$el","html","fxSpeed","_hideLoadingIndicator","$emptyMessage","slideUp","isUndefined","remove","_buildNewRender","$newRender","$where","multiselectActions","length","find","$existing","_faIconButton2","title","hideSelectors","faIcon","prependTo","_renderEmptyMessage","$whereTo","$emptyMsg","classes","get","active","append","show","contents","haveSearchDetails","empty","$scrollContainer","$list","renderItems","models","_filterCollection","_renderPagination","views","_renderSomeItems","toggle","$paginationControls","current","searchFor","shouldPaginate","templates","pagination","currentPage","last","getLastPage","tooltip","_filterItem","_getItemViewClass","includeHidden","_createItemView","m","push","_renderItemView$el","hidden","includeDeleted","isDeletedOrPurged","contentType","_setUpItemViewListeners","panel","TypeError","_getItemViewOptions","collapsed","expanded","storage","isExpanded","collapseAll","ownedByCurrUser","getSelectedModels","v","addExpanded","removeExpanded","clearExpanded","_clickNextPage","events","page","ev","currentTarget","click .show-selectors-btn","click > .controls .prev","click > .controls .next","change > .controls .pages","click .messages [class$=message]","_clickPrevPage","setIncludeDeleted","fetchCurrentPage","fetchNextPage","_changePageSelect","toggleShowHidden","val","fetchPage","toggleShowDeleted","undefined","_firstSearch","inputSelector","renderAll","log","store","searchInput","progressivelyFetchDetails","clearSearch","progress","response","limit","offset","done","searchItems","errorModal","status","readyState","isString","message","_errorModal2","numStr","clearMessages","$messages","children","fadeOut","toString","scrollToHid","hid","controlsTemplate","first","viewsWhereModel","ordinalIndicator","paginationTemplate","number","clone","mainTemplate","controls","_baseMvc2","wrapTemplate","el"],"mappings":"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","file":"../../../scripts/mvc/history/history-view.js","sourcesContent":["import LIST_VIEW from \"mvc/list/list-view\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_CONTENTS from \"mvc/history/history-contents\";\nimport HISTORY_PREFS from \"mvc/history/history-preferences\";\nimport HDA_LI from \"mvc/history/hda-li\";\nimport HDCA_LI from \"mvc/history/hdca-li\";\nimport USER from \"mvc/user/user-model\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/search-input\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class  non-editable, read-only View/Controller for a history model.\n *  Allows:\n *      changing the loaded history\n *      displaying data, info, and download\n *      tracking history attrs: size, tags, annotations, name, etc.\n *  Does not allow:\n *      changing the name\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar HistoryView = _super.extend(\n    /** @lends HistoryView.prototype */ {\n        _logNamespace: \"history\",\n\n        /** class to use for constructing the HDA views */\n        HDAViewClass: HDA_LI.HDAListItemView,\n        /** class to use for constructing the HDCA views */\n        HDCAViewClass: HDCA_LI.HDCAListItemView,\n        /** class to used for constructing collection of sub-view models */\n        collectionClass: HISTORY_CONTENTS.HistoryContents,\n        /** key of attribute in model to assign to this.collection */\n        modelCollectionKey: \"contents\",\n\n        tagName: \"div\",\n        className: _super.prototype.className + \" history-panel\",\n\n        /** string to display when the collection is empty */\n        emptyMsg: _l(\"This history is empty\"),\n        /** displayed when no items match the search terms */\n        noneFoundMsg: _l(\"No matching datasets found\"),\n        /** string used for search placeholder */\n        searchPlaceholder: _l(\"search datasets\"),\n\n        /** @type {Number} ms to wait after history load to fetch/decorate hdcas with element_count */\n        FETCH_COLLECTION_COUNTS_DELAY: 2000,\n\n        // ......................................................................... SET UP\n        /** Set up the view, bind listeners.\n     *  @param {Object} attributes optional settings for the panel\n     */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            // ---- instance vars\n            // control contents/behavior based on where (and in what context) the panel is being used\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n\n            /** timeout id for detailed fetch of collection counts, etc... */\n            this.detailedFetchTimeoutId = null;\n        },\n\n        /** create and return a collection for when none is initially passed */\n        _createDefaultCollection: function() {\n            // override\n            return new this.collectionClass([], {\n                history: this.model\n            });\n        },\n\n        /** In this override, clear the update timer on the model */\n        freeModel: function() {\n            _super.prototype.freeModel.call(this);\n            if (this.model) {\n                this.model.clearUpdateTimeout();\n            }\n            this._clearDetailedFetchTimeout();\n            return this;\n        },\n\n        /** clear the timeout and the cached timeout id */\n        _clearDetailedFetchTimeout: function() {\n            if (this.detailedFetchTimeoutId) {\n                clearTimeout(this.detailedFetchTimeoutId);\n                this.detailedFetchTimeoutId = null;\n            }\n        },\n\n        /** create any event listeners for the panel\n     *  @fires: rendered:initial    on the first render\n     *  @fires: empty-history       when switching to a history with no contents or creating a new history\n     */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            this.on({\n                error: function(model, xhr, options, msg, details) {\n                    this.errorHandler(model, xhr, options, msg, details);\n                },\n                \"loading-done\": function() {\n                    var self = this;\n                    // after the initial load, decorate with more time consuming fields (like HDCA element_counts)\n                    self.detailedFetchTimeoutId = _.delay(function() {\n                        self.detailedFetchTimeoutId = null;\n                        self.model.contents.fetchCollectionCounts();\n                    }, self.FETCH_COLLECTION_COUNTS_DELAY);\n                },\n                \"views:ready view:attached view:removed\": function(view) {\n                    this._renderSelectButton();\n                },\n                \"view:attached\": function(view) {\n                    this.scrollTo(0);\n                }\n            });\n            // this.on( 'all', function(){ console.debug( arguments ); });\n        },\n\n        // ------------------------------------------------------------------------ loading history/hda models\n        /** load the history with the given id then it's contents, sending ajax options to both */\n        loadHistory: function(historyId, options, contentsOptions) {\n            contentsOptions = _.extend(contentsOptions || { silent: true });\n            this.info(\"loadHistory:\", historyId, options, contentsOptions);\n            var self = this;\n            self.setModel(new HISTORY_MODEL.History({ id: historyId }));\n\n            contentsOptions.silent = true;\n            self.trigger(\"loading\");\n            return self.model\n                .fetchWithContents(options, contentsOptions)\n                .always(function() {\n                    self.render();\n                    self.trigger(\"loading-done\");\n                });\n        },\n\n        /** convenience alias to the model. Updates the item list only (not the history) */\n        refreshContents: function(options) {\n            if (this.model) {\n                return this.model.refresh(options);\n            }\n            // may have callbacks - so return an empty promise\n            return $.when();\n        },\n\n        /** Override to reset web storage when the id changes (since it needs the id) */\n        _setUpCollectionListeners: function() {\n            _super.prototype._setUpCollectionListeners.call(this);\n            return this.listenTo(this.collection, {\n                // 'all' : function(){ console.log( this.collection + ':', arguments ); },\n                \"fetching-more\": function() {\n                    this._toggleContentsLoadingIndicator(true);\n                    this.$emptyMessage().hide();\n                },\n                \"fetching-more-done\": function() {\n                    this._toggleContentsLoadingIndicator(false);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ panel rendering\n        /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n        _showLoadingIndicator: function(msg, speed, callback) {\n            var $indicator = $('<div class=\"loading-indicator\"/>');\n            this.$el.html(\n                $indicator\n                    .text(msg)\n                    .slideDown(!_.isUndefined(speed) ? speed : this.fxSpeed)\n            );\n        },\n\n        /** hide the loading indicator */\n        _hideLoadingIndicator: function(speed) {\n            // make speed a bit slower to compensate for slow rendering of up to 500 contents\n            this.$(\".loading-indicator\").slideUp(\n                !_.isUndefined(speed) ? speed : this.fxSpeed + 200,\n                function() {\n                    $(this).remove();\n                }\n            );\n        },\n\n        /** In this override, add a btn to toggle the selectors */\n        _buildNewRender: function() {\n            var $newRender = _super.prototype._buildNewRender.call(this);\n            this._renderSelectButton($newRender);\n            return $newRender;\n        },\n\n        /** button for starting select mode */\n        _renderSelectButton: function($where) {\n            $where = $where || this.$el;\n            // do not render selector option if no actions\n            if (!this.multiselectActions().length) {\n                return null;\n            }\n            // do not render (and remove even) if nothing to select\n            if (!this.views.length) {\n                this.hideSelectors();\n                $where.find(\".controls .actions .show-selectors-btn\").remove();\n                return null;\n            }\n            // don't bother rendering if there's one already\n            var $existing = $where.find(\n                \".controls .actions .show-selectors-btn\"\n            );\n            if ($existing.length) {\n                return $existing;\n            }\n\n            return faIconButton({\n                title: _l(\"Operations on multiple datasets\"),\n                classes: \"show-selectors-btn\",\n                faIcon: \"fa-check-square-o\"\n            }).prependTo($where.find(\".controls .actions\"));\n        },\n\n        /** override to avoid showing intial empty message using contents_active */\n        _renderEmptyMessage: function($whereTo) {\n            var self = this;\n            var $emptyMsg = self.$emptyMessage($whereTo);\n\n            var empty = self.model.get(\"contents_active\").active <= 0;\n            if (empty) {\n                return $emptyMsg\n                    .empty()\n                    .append(self.emptyMsg)\n                    .show();\n            } else if (\n                self.searchFor &&\n                self.model.contents.haveSearchDetails() &&\n                !self.views.length\n            ) {\n                return $emptyMsg\n                    .empty()\n                    .append(self.noneFoundMsg)\n                    .show();\n            }\n            $emptyMsg.hide();\n            return $();\n        },\n\n        /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n        $scrollContainer: function($where) {\n            // override or set via attributes.$scrollContainer\n            return this.$list($where);\n        },\n\n        // ------------------------------------------------------------------------ subviews\n        _toggleContentsLoadingIndicator: function(show) {\n            if (!show) {\n                this.$list()\n                    .find(\".contents-loading-indicator\")\n                    .remove();\n            } else {\n                this.$list().html(\n                    '<div class=\"contents-loading-indicator\">' +\n                        '<span class=\"fa fa-2x fa-spinner fa-spin\"/></div>'\n                );\n            }\n        },\n\n        /** override to render pagination also */\n        renderItems: function($whereTo) {\n            // console.log( this + '.renderItems-----------------', new Date() );\n            $whereTo = $whereTo || this.$el;\n            var self = this;\n            var $list = self.$list($whereTo);\n\n            // TODO: bootstrap hack to remove orphaned tooltips\n            $(\".tooltip\").remove();\n\n            $list.empty();\n            self.views = [];\n\n            var models = self._filterCollection();\n            if (models.length) {\n                self._renderPagination($whereTo);\n                self.views = self._renderSomeItems(models, $list);\n            } else {\n                // TODO: consolidate with _renderPagination above by (???) passing in models/length?\n                $whereTo.find(\"> .controls .list-pagination\").empty();\n            }\n            self._renderEmptyMessage($whereTo).toggle(!models.length);\n\n            self.trigger(\"views:ready\", self.views);\n            return self.views;\n        },\n\n        /** render pagination controls if not searching and contents says we're paginating */\n        _renderPagination: function($whereTo) {\n            var $paginationControls = $whereTo.find(\n                \"> .controls .list-pagination\"\n            );\n            if (this.searchFor || !this.model.contents.shouldPaginate())\n                return $paginationControls.empty();\n\n            $paginationControls.html(\n                this.templates.pagination(\n                    {\n                        // pagination is 1-based for the user\n                        current: this.model.contents.currentPage + 1,\n                        last: this.model.contents.getLastPage() + 1\n                    },\n                    this\n                )\n            );\n            $paginationControls.find(\"select.pages\").tooltip();\n            return $paginationControls;\n        },\n\n        /** render a subset of the entire collection (client-side pagination) */\n        _renderSomeItems: function(models, $list) {\n            var self = this;\n            var views = [];\n            $list.append(\n                models.map(function(m) {\n                    var view = self._createItemView(m);\n                    views.push(view);\n                    return self._renderItemView$el(view);\n                })\n            );\n            return views;\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** in this override, check if the contents would also display based on includeDeleted/hidden */\n        _filterItem: function(model) {\n            var self = this;\n            var contents = self.model.contents;\n            return (\n                (contents.includeHidden || !model.hidden()) &&\n                (contents.includeDeleted || !model.isDeletedOrPurged()) &&\n                _super.prototype._filterItem.call(self, model)\n            );\n        },\n\n        /** In this override, since history contents are mixed,\n     *      get the appropo view class based on history_content_type\n     */\n        _getItemViewClass: function(model) {\n            var contentType = model.get(\"history_content_type\");\n            switch (contentType) {\n                case \"dataset\":\n                    return this.HDAViewClass;\n                case \"dataset_collection\":\n                    return this.HDCAViewClass;\n            }\n            throw new TypeError(\"Unknown history_content_type: \" + contentType);\n        },\n\n        /** in this override, add a linktarget, and expand if id is in web storage */\n        _getItemViewOptions: function(model) {\n            var options = _super.prototype._getItemViewOptions.call(\n                this,\n                model\n            );\n            return _.extend(options, {\n                linkTarget: this.linkTarget,\n                expanded: this.model.contents.storage.isExpanded(model.id),\n                hasUser: this.model.ownedByCurrUser()\n            });\n        },\n\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n            //TODO: send from content view: this.model.collection.storage.addExpanded\n            // maintain a list of items whose bodies are expanded\n            return panel.listenTo(view, {\n                expanded: function(v) {\n                    panel.model.contents.storage.addExpanded(v.model);\n                },\n                collapsed: function(v) {\n                    panel.model.contents.storage.removeExpanded(v.model);\n                }\n            });\n        },\n\n        /** override to remove expandedIds from webstorage */\n        collapseAll: function() {\n            this.model.contents.storage.clearExpanded();\n            _super.prototype.collapseAll.call(this);\n        },\n\n        // ------------------------------------------------------------------------ selection\n        /** Override to correctly set the historyId of the new collection */\n        getSelectedModels: function() {\n            var collection = _super.prototype.getSelectedModels.call(this);\n            collection.historyId = this.collection.historyId;\n            return collection;\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .show-selectors-btn\": \"toggleSelectors\",\n            \"click > .controls .prev\": \"_clickPrevPage\",\n            \"click > .controls .next\": \"_clickNextPage\",\n            \"change > .controls .pages\": \"_changePageSelect\",\n            // allow (error) messages to be clicked away\n            \"click .messages [class$=message]\": \"clearMessages\"\n        }),\n\n        _clickPrevPage: function(ev) {\n            this.model.clearUpdateTimeout();\n            this.model.contents.fetchPrevPage();\n        },\n\n        _clickNextPage: function(ev) {\n            this.model.clearUpdateTimeout();\n            this.model.contents.fetchNextPage();\n        },\n\n        _changePageSelect: function(ev) {\n            this.model.clearUpdateTimeout();\n            var page = $(ev.currentTarget).val();\n            this.model.contents.fetchPage(page);\n        },\n\n        /** Toggle and store the deleted visibility and re-render items\n     * @returns {Boolean} new setting\n     */\n        toggleShowDeleted: function(show, options) {\n            show =\n                show !== undefined ? show : !this.model.contents.includeDeleted;\n            var self = this;\n            var contents = self.model.contents;\n            contents.setIncludeDeleted(show, options);\n            self.trigger(\"show-deleted\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** Toggle and store whether to render explicity hidden contents\n     * @returns {Boolean} new setting\n     */\n        toggleShowHidden: function(show, store, options) {\n            // console.log( 'toggleShowHidden', show, store );\n            show =\n                show !== undefined ? show : !this.model.contents.includeHidden;\n            var self = this;\n            var contents = self.model.contents;\n            contents.setIncludeHidden(show, options);\n            self.trigger(\"show-hidden\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** On the first search, if there are no details - load them, then search */\n        _firstSearch: function(searchFor) {\n            var self = this;\n            var inputSelector = \"> .controls .search-input\";\n            this.log(\"onFirstSearch\", searchFor);\n\n            // if the contents already have enough details to search, search and return now\n            if (self.model.contents.haveSearchDetails()) {\n                self.searchItems(searchFor);\n                return;\n            }\n\n            // otherwise, load the details progressively here\n            self.$(inputSelector).searchInput(\"toggle-loading\");\n            // set this now so that only results will show during progress\n            self.searchFor = searchFor;\n            var xhr = self.model.contents\n                .progressivelyFetchDetails({ silent: true })\n                .progress(function(response, limit, offset) {\n                    self.renderItems();\n                    self.trigger(\"search:loading-progress\", limit, offset);\n                })\n                .always(function() {\n                    self.$el.find(inputSelector).searchInput(\"toggle-loading\");\n                })\n                .done(function() {\n                    self.searchItems(searchFor, \"force\");\n                });\n        },\n\n        /** clear the search filters and show all views that are normally shown */\n        clearSearch: function(searchFor) {\n            var self = this;\n            if (!self.searchFor) return self;\n            //self.log( 'onSearchClear', self );\n            self.searchFor = \"\";\n            self.trigger(\"search:clear\", self);\n            self.$(\"> .controls .search-query\").val(\"\");\n            // NOTE: silent + render prevents collection update event with merge only\n            // - which causes an empty page due to event handler above\n            self.model.contents\n                .fetchCurrentPage({ silent: true })\n                .done(function() {\n                    self.renderItems();\n                });\n            return self;\n        },\n\n        // ........................................................................ error handling\n        /** Event handler for errors (from the panel, the history, or the history's contents)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n        errorHandler: function(model, xhr, options) {\n            //TODO: to mixin or base model\n            // interrupted ajax or no connection\n            if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n                // return ERROR_MODAL.offlineErrorModal();\n                // fail silently\n                return;\n            }\n            // otherwise, leave something to report in the console\n            this.error(model, xhr, options);\n            // and feedback to a modal\n            // if sent two strings (and possibly details as 'options'), use those as message and title\n            if (_.isString(model) && _.isString(xhr)) {\n                var message = model;\n                var title = xhr;\n                return ERROR_MODAL.errorModal(message, title, options);\n            }\n            // bad gateway\n            // TODO: possibly to global handler\n            if (xhr && xhr.status === 502) {\n                return ERROR_MODAL.badGatewayErrorModal();\n            }\n            return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n        },\n\n        /** Remove all messages from the panel. */\n        clearMessages: function(ev) {\n            var $target = !_.isUndefined(ev)\n                ? $(ev.currentTarget)\n                : this.$messages().children('[class$=\"message\"]');\n            $target.fadeOut(this.fxSpeed, function() {\n                $(this).remove();\n            });\n            return this;\n        },\n\n        // ........................................................................ scrolling\n        /** Scrolls the panel to show the content sub-view with the given hid.\n     *  @param {Integer} hid    the hid of item to scroll into view\n     *  @returns {HistoryView} the panel\n     */\n        scrollToHid: function(hid) {\n            return this.scrollToItem(\n                _.first(this.viewsWhereModel({ hid: hid }))\n            );\n        },\n\n        // ........................................................................ misc\n        /** utility for adding -st, -nd, -rd, -th to numbers */\n        ordinalIndicator: function(number) {\n            var numStr = number + \"\";\n            switch (numStr.charAt(numStr.length - 1)) {\n                case \"1\":\n                    return numStr + \"st\";\n                case \"2\":\n                    return numStr + \"nd\";\n                case \"3\":\n                    return numStr + \"rd\";\n                default:\n                    return numStr + \"th\";\n            }\n        },\n\n        /** Return a string rep of the history */\n        toString: function() {\n            return (\n                \"HistoryView(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nHistoryView.prototype.templates = (function() {\n    var mainTemplate = BASE_MVC.wrapTemplate([\n        // temp container\n        \"<div>\",\n        '<div class=\"controls\"></div>',\n        '<ul class=\"list-items\"></ul>',\n        '<div class=\"empty-message infomessagesmall\"></div>',\n        \"</div>\"\n    ]);\n\n    var controlsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"controls\">',\n            '<div class=\"title\">',\n            '<div class=\"name\"><%- history.name %></div>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            '<div class=\"history-size\"><%- history.nice_size %></div>',\n\n            '<div class=\"actions\"></div>',\n\n            '<div class=\"messages\">',\n            \"<% if( history.deleted && history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged and deleted\"),\n            \"</div>\",\n            \"<% } else if( history.deleted ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been deleted\"),\n            \"</div>\",\n            \"<% } else if( history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged\"),\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( history.message ){ %>\",\n            // should already be localized\n            '<div class=\"<%= history.message.level || \"info\" %>messagesmall\">',\n            \"<%= history.message.text %>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\",\n\n            // add tags and annotations\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"search\">',\n            '<div class=\"search-input\"></div>',\n            \"</div>\",\n\n            '<div class=\"list-actions\">',\n            '<div class=\"btn-group\">',\n            '<button class=\"select-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"All\"),\n            \"</button>\",\n            '<button class=\"deselect-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"None\"),\n            \"</button>\",\n            \"</div>\",\n            '<div class=\"list-action-menu btn-group\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"list-pagination form-inline\"></div>',\n            \"</div>\"\n        ],\n        \"history\"\n    );\n\n    var paginationTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<button class=\"prev\" <%- pages.current === 1 ? \"disabled\" : \"\" %>>previous</button>',\n            '<select class=\"pages form-control\" ',\n            'title=\"',\n            _l(\n                \"Click to open and select a page. Begin typing a page number to select it\"\n            ),\n            '\">',\n            \"<% _.range( 1, pages.last + 1 ).forEach( function( i ){ %>\",\n            '<option value=\"<%- i - 1 %>\" <%- i === pages.current ? \"selected\" : \"\" %>>',\n            \"<%- view.ordinalIndicator( i ) %> of <%- pages.last %> pages\",\n            \"</option>\",\n            \"<% }); %>\",\n            \"</select>\",\n            '<button class=\"next\" <%- pages.current === pages.last ? \"disabled\" : \"\" %>>next</button>'\n        ],\n        \"pages\"\n    );\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        el: mainTemplate,\n        controls: controlsTemplate,\n        pagination: paginationTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    HistoryView: HistoryView\n};\n"]}