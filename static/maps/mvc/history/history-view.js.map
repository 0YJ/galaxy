{"version":3,"sources":["mvc/history/history-view.js"],"names":["_listView","require","_historyModel","_historyContents","_historyPreferences","_hdaLi","_hdcaLi","_userModel","_errorModal","_faIconButton","_baseMvc","_localization","_super","_listView2","default","ModelListPanel","HistoryView","extend","_logNamespace","HDAViewClass","_hdaLi2","HDAListItemView","HDCAViewClass","_hdcaLi2","HDCAListItemView","collectionClass","_historyContents2","HistoryContents","modelCollectionKey","tagName","className","prototype","emptyMsg","_localization2","noneFoundMsg","searchPlaceholder","FETCH_COLLECTION_COUNTS_DELAY","initialize","attributes","call","this","linkTarget","detailedFetchTimeoutId","_createDefaultCollection","history","model","freeModel","clearUpdateTimeout","on","error","xhr","options","msg","details","errorHandler","loading-done","self","_","delay","contents","fetchCollectionCounts","views:ready view:attached view:removed","view","_renderSelectButton","view:attached","scrollTo","loadHistory","historyId","contentsOptions","silent","info","_clearDetailedFetchTimeout","History","id","clearTimeout","fetchWithContents","always","render","trigger","refreshContents","$","listenTo","collection","fetching-more","_toggleContentsLoadingIndicator","$emptyMessage","hide","fetching-more-done","html","setModel","text","isUndefined","speed","fxSpeed","_hideLoadingIndicator","slideUp","remove","_buildNewRender","$newRender","_setUpCollectionListeners","$where","$el","multiselectActions","length","views","hideSelectors","find","$existing","$indicator","_faIconButton2","title","classes","faIcon","prependTo","_renderEmptyMessage","$whereTo","$emptyMsg","get","append","show","haveSearchDetails","empty","$list","searchFor","$scrollContainer","models","_filterCollection","_renderPagination","renderItems","_renderSomeItems","toggle","shouldPaginate","$paginationControls","currentPage","last","getLastPage","map","m","_createItemView","push","_renderItemView$el","_filterItem","includeHidden","hidden","includeDeleted","isDeletedOrPurged","_getItemViewClass","contentType","TypeError","_getItemViewOptions","expanded","hasUser","ownedByCurrUser","storage","isExpanded","_setUpItemViewListeners","panel","v","collapsed","addExpanded","removeExpanded","clearExpanded","collapseAll","getSelectedModels","events","clone","click .show-selectors-btn","click > .controls .prev","click > .controls .next","change > .controls .pages","click .messages [class$=message]","_clickPrevPage","fetchPrevPage","_clickNextPage","fetchNextPage","_changePageSelect","currentTarget","page","ev","val","fetchPage","toggleShowDeleted","setIncludeDeleted","fetchCurrentPage","renderAll","toggleShowHidden","store","undefined","_firstSearch","setIncludeHidden","searchItems","searchInput","inputSelector","progressivelyFetchDetails","limit","offset","clearSearch","done","message","readyState","status","isString","ajaxErrorModal","_errorModal2","errorModal","badGatewayErrorModal","clearMessages","$messages","children","scrollToItem","scrollToHid","numStr","first","hid","ordinalIndicator","number","toString","charAt","mainTemplate","paginationTemplate","templates","_baseMvc2","wrapTemplate","controlsTemplate","el","controls","pagination"],"mappings":"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","file":"../../../scripts/mvc/history/history-view.js","sourcesContent":["import LIST_VIEW from \"mvc/list/list-view\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_CONTENTS from \"mvc/history/history-contents\";\nimport HISTORY_PREFS from \"mvc/history/history-preferences\";\nimport HDA_LI from \"mvc/history/hda-li\";\nimport HDCA_LI from \"mvc/history/hdca-li\";\nimport USER from \"mvc/user/user-model\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/search-input\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class  non-editable, read-only View/Controller for a history model.\n *  Allows:\n *      changing the loaded history\n *      displaying data, info, and download\n *      tracking history attrs: size, tags, annotations, name, etc.\n *  Does not allow:\n *      changing the name\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar HistoryView = _super.extend(\n    /** @lends HistoryView.prototype */ {\n        _logNamespace: \"history\",\n\n        /** class to use for constructing the HDA views */\n        HDAViewClass: HDA_LI.HDAListItemView,\n        /** class to use for constructing the HDCA views */\n        HDCAViewClass: HDCA_LI.HDCAListItemView,\n        /** class to used for constructing collection of sub-view models */\n        collectionClass: HISTORY_CONTENTS.HistoryContents,\n        /** key of attribute in model to assign to this.collection */\n        modelCollectionKey: \"contents\",\n\n        tagName: \"div\",\n        className: _super.prototype.className + \" history-panel\",\n\n        /** string to display when the collection is empty */\n        emptyMsg: _l(\"This history is empty\"),\n        /** displayed when no items match the search terms */\n        noneFoundMsg: _l(\"No matching datasets found\"),\n        /** string used for search placeholder */\n        searchPlaceholder: _l(\"search datasets\"),\n\n        /** @type {Number} ms to wait after history load to fetch/decorate hdcas with element_count */\n        FETCH_COLLECTION_COUNTS_DELAY: 2000,\n\n        // ......................................................................... SET UP\n        /** Set up the view, bind listeners.\n     *  @param {Object} attributes optional settings for the panel\n     */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            // ---- instance vars\n            // control contents/behavior based on where (and in what context) the panel is being used\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n\n            /** timeout id for detailed fetch of collection counts, etc... */\n            this.detailedFetchTimeoutId = null;\n        },\n\n        /** create and return a collection for when none is initially passed */\n        _createDefaultCollection: function() {\n            // override\n            return new this.collectionClass([], {\n                history: this.model\n            });\n        },\n\n        /** In this override, clear the update timer on the model */\n        freeModel: function() {\n            _super.prototype.freeModel.call(this);\n            if (this.model) {\n                this.model.clearUpdateTimeout();\n            }\n            this._clearDetailedFetchTimeout();\n            return this;\n        },\n\n        /** clear the timeout and the cached timeout id */\n        _clearDetailedFetchTimeout: function() {\n            if (this.detailedFetchTimeoutId) {\n                clearTimeout(this.detailedFetchTimeoutId);\n                this.detailedFetchTimeoutId = null;\n            }\n        },\n\n        /** create any event listeners for the panel\n     *  @fires: rendered:initial    on the first render\n     *  @fires: empty-history       when switching to a history with no contents or creating a new history\n     */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            this.on({\n                error: function(model, xhr, options, msg, details) {\n                    this.errorHandler(model, xhr, options, msg, details);\n                },\n                \"loading-done\": function() {\n                    var self = this;\n                    // after the initial load, decorate with more time consuming fields (like HDCA element_counts)\n                    self.detailedFetchTimeoutId = _.delay(function() {\n                        self.detailedFetchTimeoutId = null;\n                        self.model.contents.fetchCollectionCounts();\n                    }, self.FETCH_COLLECTION_COUNTS_DELAY);\n                },\n                \"views:ready view:attached view:removed\": function(view) {\n                    this._renderSelectButton();\n                },\n                \"view:attached\": function(view) {\n                    this.scrollTo(0);\n                }\n            });\n            // this.on( 'all', function(){ console.debug( arguments ); });\n        },\n\n        // ------------------------------------------------------------------------ loading history/hda models\n        /** load the history with the given id then it's contents, sending ajax options to both */\n        loadHistory: function(historyId, options, contentsOptions) {\n            contentsOptions = _.extend(contentsOptions || { silent: true });\n            this.info(\"loadHistory:\", historyId, options, contentsOptions);\n            var self = this;\n            self.setModel(new HISTORY_MODEL.History({ id: historyId }));\n\n            contentsOptions.silent = true;\n            self.trigger(\"loading\");\n            return self.model\n                .fetchWithContents(options, contentsOptions)\n                .always(function() {\n                    self.render();\n                    self.trigger(\"loading-done\");\n                });\n        },\n\n        /** convenience alias to the model. Updates the item list only (not the history) */\n        refreshContents: function(options) {\n            if (this.model) {\n                return this.model.refresh(options);\n            }\n            // may have callbacks - so return an empty promise\n            return $.when();\n        },\n\n        /** Override to reset web storage when the id changes (since it needs the id) */\n        _setUpCollectionListeners: function() {\n            _super.prototype._setUpCollectionListeners.call(this);\n            return this.listenTo(this.collection, {\n                // 'all' : function(){ console.log( this.collection + ':', arguments ); },\n                \"fetching-more\": function() {\n                    this._toggleContentsLoadingIndicator(true);\n                    this.$emptyMessage().hide();\n                },\n                \"fetching-more-done\": function() {\n                    this._toggleContentsLoadingIndicator(false);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ panel rendering\n        /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n        _showLoadingIndicator: function(msg, speed, callback) {\n            var $indicator = $('<div class=\"loading-indicator\"/>');\n            this.$el.html(\n                $indicator\n                    .text(msg)\n                    .slideDown(!_.isUndefined(speed) ? speed : this.fxSpeed)\n            );\n        },\n\n        /** hide the loading indicator */\n        _hideLoadingIndicator: function(speed) {\n            // make speed a bit slower to compensate for slow rendering of up to 500 contents\n            this.$(\".loading-indicator\").slideUp(\n                !_.isUndefined(speed) ? speed : this.fxSpeed + 200,\n                function() {\n                    $(this).remove();\n                }\n            );\n        },\n\n        /** In this override, add a btn to toggle the selectors */\n        _buildNewRender: function() {\n            var $newRender = _super.prototype._buildNewRender.call(this);\n            this._renderSelectButton($newRender);\n            return $newRender;\n        },\n\n        /** button for starting select mode */\n        _renderSelectButton: function($where) {\n            $where = $where || this.$el;\n            // do not render selector option if no actions\n            if (!this.multiselectActions().length) {\n                return null;\n            }\n            // do not render (and remove even) if nothing to select\n            if (!this.views.length) {\n                this.hideSelectors();\n                $where.find(\".controls .actions .show-selectors-btn\").remove();\n                return null;\n            }\n            // don't bother rendering if there's one already\n            var $existing = $where.find(\n                \".controls .actions .show-selectors-btn\"\n            );\n            if ($existing.length) {\n                return $existing;\n            }\n\n            return faIconButton({\n                title: _l(\"Operations on multiple datasets\"),\n                classes: \"show-selectors-btn\",\n                faIcon: \"fa-check-square-o\"\n            }).prependTo($where.find(\".controls .actions\"));\n        },\n\n        /** override to avoid showing intial empty message using contents_active */\n        _renderEmptyMessage: function($whereTo) {\n            var self = this;\n            var $emptyMsg = self.$emptyMessage($whereTo);\n\n            var empty = self.model.get(\"contents_active\").active <= 0;\n            if (empty) {\n                return $emptyMsg\n                    .empty()\n                    .append(self.emptyMsg)\n                    .show();\n            } else if (\n                self.searchFor &&\n                self.model.contents.haveSearchDetails() &&\n                !self.views.length\n            ) {\n                return $emptyMsg\n                    .empty()\n                    .append(self.noneFoundMsg)\n                    .show();\n            }\n            $emptyMsg.hide();\n            return $();\n        },\n\n        /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n        $scrollContainer: function($where) {\n            // override or set via attributes.$scrollContainer\n            return this.$list($where);\n        },\n\n        // ------------------------------------------------------------------------ subviews\n        _toggleContentsLoadingIndicator: function(show) {\n            if (!show) {\n                this.$list()\n                    .find(\".contents-loading-indicator\")\n                    .remove();\n            } else {\n                this.$list().html(\n                    '<div class=\"contents-loading-indicator\">' +\n                        '<span class=\"fa fa-2x fa-spinner fa-spin\"/></div>'\n                );\n            }\n        },\n\n        /** override to render pagination also */\n        renderItems: function($whereTo) {\n            // console.log( this + '.renderItems-----------------', new Date() );\n            $whereTo = $whereTo || this.$el;\n            var self = this;\n            var $list = self.$list($whereTo);\n\n            // TODO: bootstrap hack to remove orphaned tooltips\n            $(\".tooltip\").remove();\n\n            $list.empty();\n            self.views = [];\n\n            var models = self._filterCollection();\n            if (models.length) {\n                self._renderPagination($whereTo);\n                self.views = self._renderSomeItems(models, $list);\n            } else {\n                // TODO: consolidate with _renderPagination above by (???) passing in models/length?\n                $whereTo.find(\"> .controls .list-pagination\").empty();\n            }\n            self._renderEmptyMessage($whereTo).toggle(!models.length);\n\n            self.trigger(\"views:ready\", self.views);\n            return self.views;\n        },\n\n        /** render pagination controls if not searching and contents says we're paginating */\n        _renderPagination: function($whereTo) {\n            var $paginationControls = $whereTo.find(\n                \"> .controls .list-pagination\"\n            );\n            if (this.searchFor || !this.model.contents.shouldPaginate())\n                return $paginationControls.empty();\n\n            $paginationControls.html(\n                this.templates.pagination(\n                    {\n                        // pagination is 1-based for the user\n                        current: this.model.contents.currentPage + 1,\n                        last: this.model.contents.getLastPage() + 1\n                    },\n                    this\n                )\n            );\n            $paginationControls.find(\"select.pages\").tooltip();\n            return $paginationControls;\n        },\n\n        /** render a subset of the entire collection (client-side pagination) */\n        _renderSomeItems: function(models, $list) {\n            var self = this;\n            var views = [];\n            $list.append(\n                models.map(function(m) {\n                    var view = self._createItemView(m);\n                    views.push(view);\n                    return self._renderItemView$el(view);\n                })\n            );\n            return views;\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** in this override, check if the contents would also display based on includeDeleted/hidden */\n        _filterItem: function(model) {\n            var self = this;\n            var contents = self.model.contents;\n            return (\n                (contents.includeHidden || !model.hidden()) &&\n                (contents.includeDeleted || !model.isDeletedOrPurged()) &&\n                _super.prototype._filterItem.call(self, model)\n            );\n        },\n\n        /** In this override, since history contents are mixed,\n     *      get the appropo view class based on history_content_type\n     */\n        _getItemViewClass: function(model) {\n            var contentType = model.get(\"history_content_type\");\n            switch (contentType) {\n                case \"dataset\":\n                    return this.HDAViewClass;\n                case \"dataset_collection\":\n                    return this.HDCAViewClass;\n            }\n            throw new TypeError(\"Unknown history_content_type: \" + contentType);\n        },\n\n        /** in this override, add a linktarget, and expand if id is in web storage */\n        _getItemViewOptions: function(model) {\n            var options = _super.prototype._getItemViewOptions.call(\n                this,\n                model\n            );\n            return _.extend(options, {\n                linkTarget: this.linkTarget,\n                expanded: this.model.contents.storage.isExpanded(model.id),\n                hasUser: this.model.ownedByCurrUser()\n            });\n        },\n\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n            //TODO: send from content view: this.model.collection.storage.addExpanded\n            // maintain a list of items whose bodies are expanded\n            return panel.listenTo(view, {\n                expanded: function(v) {\n                    panel.model.contents.storage.addExpanded(v.model);\n                },\n                collapsed: function(v) {\n                    panel.model.contents.storage.removeExpanded(v.model);\n                }\n            });\n        },\n\n        /** override to remove expandedIds from webstorage */\n        collapseAll: function() {\n            this.model.contents.storage.clearExpanded();\n            _super.prototype.collapseAll.call(this);\n        },\n\n        // ------------------------------------------------------------------------ selection\n        /** Override to correctly set the historyId of the new collection */\n        getSelectedModels: function() {\n            var collection = _super.prototype.getSelectedModels.call(this);\n            collection.historyId = this.collection.historyId;\n            return collection;\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .show-selectors-btn\": \"toggleSelectors\",\n            \"click > .controls .prev\": \"_clickPrevPage\",\n            \"click > .controls .next\": \"_clickNextPage\",\n            \"change > .controls .pages\": \"_changePageSelect\",\n            // allow (error) messages to be clicked away\n            \"click .messages [class$=message]\": \"clearMessages\"\n        }),\n\n        _clickPrevPage: function(ev) {\n            this.model.clearUpdateTimeout();\n            this.model.contents.fetchPrevPage();\n        },\n\n        _clickNextPage: function(ev) {\n            this.model.clearUpdateTimeout();\n            this.model.contents.fetchNextPage();\n        },\n\n        _changePageSelect: function(ev) {\n            this.model.clearUpdateTimeout();\n            var page = $(ev.currentTarget).val();\n            this.model.contents.fetchPage(page);\n        },\n\n        /** Toggle and store the deleted visibility and re-render items\n     * @returns {Boolean} new setting\n     */\n        toggleShowDeleted: function(show, options) {\n            show =\n                show !== undefined ? show : !this.model.contents.includeDeleted;\n            var self = this;\n            var contents = self.model.contents;\n            contents.setIncludeDeleted(show, options);\n            self.trigger(\"show-deleted\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** Toggle and store whether to render explicity hidden contents\n     * @returns {Boolean} new setting\n     */\n        toggleShowHidden: function(show, store, options) {\n            // console.log( 'toggleShowHidden', show, store );\n            show =\n                show !== undefined ? show : !this.model.contents.includeHidden;\n            var self = this;\n            var contents = self.model.contents;\n            contents.setIncludeHidden(show, options);\n            self.trigger(\"show-hidden\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** On the first search, if there are no details - load them, then search */\n        _firstSearch: function(searchFor) {\n            var self = this;\n            var inputSelector = \"> .controls .search-input\";\n            this.log(\"onFirstSearch\", searchFor);\n\n            // if the contents already have enough details to search, search and return now\n            if (self.model.contents.haveSearchDetails()) {\n                self.searchItems(searchFor);\n                return;\n            }\n\n            // otherwise, load the details progressively here\n            self.$(inputSelector).searchInput(\"toggle-loading\");\n            // set this now so that only results will show during progress\n            self.searchFor = searchFor;\n            var xhr = self.model.contents\n                .progressivelyFetchDetails({ silent: true })\n                .progress(function(response, limit, offset) {\n                    self.renderItems();\n                    self.trigger(\"search:loading-progress\", limit, offset);\n                })\n                .always(function() {\n                    self.$el.find(inputSelector).searchInput(\"toggle-loading\");\n                })\n                .done(function() {\n                    self.searchItems(searchFor, \"force\");\n                });\n        },\n\n        /** clear the search filters and show all views that are normally shown */\n        clearSearch: function(searchFor) {\n            var self = this;\n            if (!self.searchFor) return self;\n            //self.log( 'onSearchClear', self );\n            self.searchFor = \"\";\n            self.trigger(\"search:clear\", self);\n            self.$(\"> .controls .search-query\").val(\"\");\n            // NOTE: silent + render prevents collection update event with merge only\n            // - which causes an empty page due to event handler above\n            self.model.contents\n                .fetchCurrentPage({ silent: true })\n                .done(function() {\n                    self.renderItems();\n                });\n            return self;\n        },\n\n        // ........................................................................ error handling\n        /** Event handler for errors (from the panel, the history, or the history's contents)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n        errorHandler: function(model, xhr, options) {\n            //TODO: to mixin or base model\n            // interrupted ajax or no connection\n            if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n                // return ERROR_MODAL.offlineErrorModal();\n                // fail silently\n                return;\n            }\n            // otherwise, leave something to report in the console\n            this.error(model, xhr, options);\n            // and feedback to a modal\n            // if sent two strings (and possibly details as 'options'), use those as message and title\n            if (_.isString(model) && _.isString(xhr)) {\n                var message = model;\n                var title = xhr;\n                return ERROR_MODAL.errorModal(message, title, options);\n            }\n            // bad gateway\n            // TODO: possibly to global handler\n            if (xhr && xhr.status === 502) {\n                return ERROR_MODAL.badGatewayErrorModal();\n            }\n            return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n        },\n\n        /** Remove all messages from the panel. */\n        clearMessages: function(ev) {\n            var $target = !_.isUndefined(ev)\n                ? $(ev.currentTarget)\n                : this.$messages().children('[class$=\"message\"]');\n            $target.fadeOut(this.fxSpeed, function() {\n                $(this).remove();\n            });\n            return this;\n        },\n\n        // ........................................................................ scrolling\n        /** Scrolls the panel to show the content sub-view with the given hid.\n     *  @param {Integer} hid    the hid of item to scroll into view\n     *  @returns {HistoryView} the panel\n     */\n        scrollToHid: function(hid) {\n            return this.scrollToItem(\n                _.first(this.viewsWhereModel({ hid: hid }))\n            );\n        },\n\n        // ........................................................................ misc\n        /** utility for adding -st, -nd, -rd, -th to numbers */\n        ordinalIndicator: function(number) {\n            var numStr = number + \"\";\n            switch (numStr.charAt(numStr.length - 1)) {\n                case \"1\":\n                    return numStr + \"st\";\n                case \"2\":\n                    return numStr + \"nd\";\n                case \"3\":\n                    return numStr + \"rd\";\n                default:\n                    return numStr + \"th\";\n            }\n        },\n\n        /** Return a string rep of the history */\n        toString: function() {\n            return (\n                \"HistoryView(\" +\n                (this.model ? this.model.get(\"name\") : \"\") +\n                \")\"\n            );\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nHistoryView.prototype.templates = (function() {\n    var mainTemplate = BASE_MVC.wrapTemplate([\n        // temp container\n        \"<div>\",\n        '<div class=\"controls\"></div>',\n        '<ul class=\"list-items\"></ul>',\n        '<div class=\"empty-message infomessagesmall\"></div>',\n        \"</div>\"\n    ]);\n\n    var controlsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"controls\">',\n            '<div class=\"title\">',\n            '<div class=\"name\"><%- history.name %></div>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            '<div class=\"history-size\"><%- history.nice_size %></div>',\n\n            '<div class=\"actions\"></div>',\n\n            '<div class=\"messages\">',\n            \"<% if( history.deleted && history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged and deleted\"),\n            \"</div>\",\n            \"<% } else if( history.deleted ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been deleted\"),\n            \"</div>\",\n            \"<% } else if( history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged\"),\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( history.message ){ %>\",\n            // should already be localized\n            '<div class=\"<%= history.message.level || \"info\" %>messagesmall\">',\n            \"<%= history.message.text %>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\",\n\n            // add tags and annotations\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"search\">',\n            '<div class=\"search-input\"></div>',\n            \"</div>\",\n\n            '<div class=\"list-actions\">',\n            '<div class=\"btn-group\">',\n            '<button class=\"select-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"All\"),\n            \"</button>\",\n            '<button class=\"deselect-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"None\"),\n            \"</button>\",\n            \"</div>\",\n            '<div class=\"list-action-menu btn-group\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"list-pagination form-inline\"></div>',\n            \"</div>\"\n        ],\n        \"history\"\n    );\n\n    var paginationTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<button class=\"prev\" <%- pages.current === 1 ? \"disabled\" : \"\" %>>previous</button>',\n            '<select class=\"pages form-control\" ',\n            'title=\"',\n            _l(\n                \"Click to open and select a page. Begin typing a page number to select it\"\n            ),\n            '\">',\n            \"<% _.range( 1, pages.last + 1 ).forEach( function( i ){ %>\",\n            '<option value=\"<%- i - 1 %>\" <%- i === pages.current ? \"selected\" : \"\" %>>',\n            \"<%- view.ordinalIndicator( i ) %> of <%- pages.last %> pages\",\n            \"</option>\",\n            \"<% }); %>\",\n            \"</select>\",\n            '<button class=\"next\" <%- pages.current === pages.last ? \"disabled\" : \"\" %>>next</button>'\n        ],\n        \"pages\"\n    );\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        el: mainTemplate,\n        controls: controlsTemplate,\n        pagination: paginationTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    HistoryView: HistoryView\n};\n"]}