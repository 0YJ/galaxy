{"version":3,"sources":["mvc/history/hdca-li.js"],"names":["define","STATES","DC_LI","DC_VIEW","BASE_MVC","_l","_super","DCListItemView","HDCAListItemView","extend","className","prototype","_setUpListeners","call","this","listenTo","model","change:populated change:visible","options","render","_getFoldoutPanelClass","get","ListCollectionView","PairCollectionView","ListOfPairsCollectionView","ListOfListsCollectionView","TypeError","_swapNewRender","$newRender","state","OK","RUNNING","$el","addClass","toString","templates","warnings","_","hidden","wrapTemplate","titleBarTemplate","titleBar"],"mappings":"AAAAA,QACI,qBACA,+BACA,iCACA,eACA,sBACD,SAAUC,EAAQC,EAAOC,EAASC,EAAUC,GAE/C,YAGA,IAAIC,GAASJ,EAAMK,eAGfC,EAAmBF,EAAOG,QAG1BC,UAAcJ,EAAOK,UAAUD,UAAY,mBAG3CE,gBAAkB,WACdN,EAAOK,UAAUC,gBAAgBC,KAAMC,MAEvCA,KAAKC,SAAUD,KAAKE,OAChBC,kCAAoC,SAAUD,EAAOE,GAAWJ,KAAKK,aAK7EC,sBAAwB,WACpB,OAAQN,KAAKE,MAAMK,IAAK,oBACpB,IAAK,OACD,MAAOlB,GAAQmB,kBACnB,KAAK,SACD,MAAOnB,GAAQoB,kBACnB,KAAK,cACD,MAAOpB,GAAQqB,yBACnB,KAAK,YACD,MAAOrB,GAAQsB,0BAEvB,KAAM,IAAIC,WAAW,2BAA6BZ,KAAKE,MAAMK,IAAK,qBAItEM,eAAiB,SAAUC,GACvBtB,EAAOK,UAAUgB,eAAed,KAAMC,KAAMc,EAE5C,IAAIC,GAASf,KAAKE,MAAMK,IAAK,aAAiCpB,EAAO6B,GAAxB7B,EAAO8B,OAIpD,OAFAjB,MAAKkB,IAAIC,SAAU,SAAWJ,GAEvBf,KAAKkB,KAKhBE,SAAW,WAEP,MAAO,qBADapB,KAAW,MAAIA,KAAKE,MAAQ,GAAK,cACV,MAwC/C,OAnCJR,GAAiBG,UAAUwB,UAAa,WAEpC,GAAIC,GAAWC,EAAE5B,UAAYH,EAAOK,UAAUwB,UAAUC,UACpDE,OAASlC,EAASmC,cAEd,mCACI,+CACIlC,EAAI,mCACR,SACJ,WACD,gBAIHmC,EAAmBpC,EAASmC,cAE5B,6CACI,mCACA,sBAEI,kDACA,mDACJ,SACA,+BACJ,UACD,aAEH,OAAOF,GAAE5B,UAAYH,EAAOK,UAAUwB,WAClCC,SAAWA,EACXK,SAAWD,QAOXhC,iBAAmBA","file":"../../../scripts/mvc/history/hdca-li.js","sourcesContent":["define([\n    \"mvc/dataset/states\",\n    \"mvc/collection/collection-li\",\n    \"mvc/collection/collection-view\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( STATES, DC_LI, DC_VIEW, BASE_MVC, _l ){\n\n'use strict';\n\n//==============================================================================\nvar _super = DC_LI.DCListItemView;\n/** @class Read only view for HistoryDatasetCollectionAssociation (a dataset collection inside a history).\n */\nvar HDCAListItemView = _super.extend(\n/** @lends HDCAListItemView.prototype */{\n\n    className   : _super.prototype.className + \" history-content\",\n\n    /** event listeners */\n    _setUpListeners : function(){\n        _super.prototype._setUpListeners.call( this );\n\n        this.listenTo( this.model, {\n            'change:populated change:visible' : function( model, options ){ this.render(); },\n        });\n    },\n\n    /** Override to provide the proper collections panels as the foldout */\n    _getFoldoutPanelClass : function(){\n        switch( this.model.get( 'collection_type' ) ){\n            case 'list':\n                return DC_VIEW.ListCollectionView;\n            case 'paired':\n                return DC_VIEW.PairCollectionView;\n            case 'list:paired':\n                return DC_VIEW.ListOfPairsCollectionView;\n            case 'list:list':\n                return DC_VIEW.ListOfListsCollectionView;\n        }\n        throw new TypeError( 'Uknown collection_type: ' + this.model.get( 'collection_type' ) );\n    },\n\n    /** In this override, add the state as a class for use with state-based CSS */\n    _swapNewRender : function( $newRender ){\n        _super.prototype._swapNewRender.call( this, $newRender );\n        //TODO: model currently has no state\n        var state = !this.model.get( 'populated' ) ? STATES.RUNNING : STATES.OK;\n        //if( this.model.has( 'state' ) ){\n        this.$el.addClass( 'state-' + state );\n        //}\n        return this.$el;\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'HDCAListItemView(' + modelString + ')';\n    }\n});\n\n/** underscore templates */\nHDCAListItemView.prototype.templates = (function(){\n\n    var warnings = _.extend( {}, _super.prototype.templates.warnings, {\n        hidden : BASE_MVC.wrapTemplate([\n            // add a warning when hidden\n            '<% if( !collection.visible ){ %>',\n                '<div class=\"hidden-msg warningmessagesmall\">',\n                    _l( 'This collection has been hidden' ),\n                '</div>',\n            '<% } %>'\n        ], 'collection' )\n    });\n\n// could steal this from hda-base (or use mixed content)\n    var titleBarTemplate = BASE_MVC.wrapTemplate([\n        // adding the hid display to the title\n        '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n                //TODO: remove whitespace and use margin-right\n                '<span class=\"hid\"><%- collection.hid %></span> ',\n                '<span class=\"name\"><%- collection.name %></span>',\n            '</div>',\n            '<div class=\"subtitle\"></div>',\n        '</div>'\n    ], 'collection' );\n\n    return _.extend( {}, _super.prototype.templates, {\n        warnings : warnings,\n        titleBar : titleBarTemplate\n    });\n}());\n\n\n//==============================================================================\n    return {\n        HDCAListItemView : HDCAListItemView\n    };\n});\n"]}