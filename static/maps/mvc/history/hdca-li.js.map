{"version":3,"sources":["mvc/history/hdca-li.js"],"names":["define","STATES","DC_LI","DC_VIEW","BASE_MVC","_l","_super","HDCAListItemView","className","prototype","_setUpListeners","listenTo","call","this","model","change:populated change:visible","options","render","_getFoldoutPanelClass","get","ListCollectionView","PairCollectionView","ListOfPairsCollectionView","ListOfListsCollectionView","TypeError","_swapNewRender","$newRender","state","OK","RUNNING","$el","addClass","toString","modelString","templates","hidden","wrapTemplate","warnings","titleBarTemplate","titleBar","_","extend"],"mappings":"YAAAA,SACI,qBADJA,+BAGI,iCAKJ,eAHI,sBAKJ,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAIA,GAAAC,GAAIC,EAAAA,eAGAC,EAAcF,EAAOG,QAGrBC,UAAAA,EAAkBD,UAAAD,UAAA,mBAGdE,gBAAKC,WACDL,EAAAG,UAAAC,gBAAAE,KAAAC,MAAgFA,KAAAF,SAAAE,KAAAC,OADzDC,kCAA3B,SAAAD,EAAAE,GAAAH,KAAAI,aAOAC,sBAAaJ,WACT,OAAAD,KAAKC,MAALK,IAAA,oBACI,IAAA,OACJ,MAAKhB,GAALiB,kBACI,KAAA,SACJ,MAAKjB,GAAAkB,kBACD,KAAA,cACJ,MAAKlB,GAAAmB,yBACD,KAAA,YARR,MAAAnB,GAAAoB,0BAWH,KA1BmC,IAAAC,WAAA,2BAAAX,KAAAC,MAAAK,IAAA,qBA8BhCb,eAAOG,SAAUgB,GACjBnB,EAAAG,UAAAgB,eAAAb,KAAAC,KAAAa,EAEA,IAAAC,GAAAd,KAAAC,MAAAK,IAAA,aAAAlB,EAAA2B,GAAA3B,EAAA4B,OAIH,OAFGhB,MAAAiB,IAAAC,SAAA,SAAAJ,GAnCgCd,KAAAiB,KA0ChCE,SAAA,WAEH,MAAA,qBADUnB,KAAAC,MAAsBmB,KAAAA,MAAc,GAA3C,cACH,MAuCD,OAnCJ1B,GAAiBE,UAAUyB,UAAa,WAGhCC,GAAAA,GAAAA,EAAS/B,UAASgC,EAAAA,UAAaF,UAAAG,UAC3BF,OAAA/B,EAAAgC,cAFR,mCAIY,+CAOhB/B,EAAA,mCACQiC,SACA,WACA,gBAWJA,EAAOlC,EAAqBK,cAExB8B,6CAFJ,mCA3BJ,sBAkCA,kDACW,mDACHhC,SADJ,+BAlGJ,UAwFO,aAEH,OAAOiC,GAAEC,UAAYnC,EAAOG,UAAUyB,WAClCG,SAAWA,EACXE,SAAWD,QAOX/B,iBAAmBA","file":"../../../scripts/mvc/history/hdca-li.js","sourcesContent":["define([\n    \"mvc/dataset/states\",\n    \"mvc/collection/collection-li\",\n    \"mvc/collection/collection-view\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( STATES, DC_LI, DC_VIEW, BASE_MVC, _l ){\n\n'use strict';\n\n//==============================================================================\nvar _super = DC_LI.DCListItemView;\n/** @class Read only view for HistoryDatasetCollectionAssociation (a dataset collection inside a history).\n */\nvar HDCAListItemView = _super.extend(\n/** @lends HDCAListItemView.prototype */{\n\n    className   : _super.prototype.className + \" history-content\",\n\n    /** event listeners */\n    _setUpListeners : function(){\n        _super.prototype._setUpListeners.call( this );\n\n        this.listenTo( this.model, {\n            'change:populated change:visible' : function( model, options ){ this.render(); },\n        });\n    },\n\n    /** Override to provide the proper collections panels as the foldout */\n    _getFoldoutPanelClass : function(){\n        switch( this.model.get( 'collection_type' ) ){\n            case 'list':\n                return DC_VIEW.ListCollectionView;\n            case 'paired':\n                return DC_VIEW.PairCollectionView;\n            case 'list:paired':\n                return DC_VIEW.ListOfPairsCollectionView;\n            case 'list:list':\n                return DC_VIEW.ListOfListsCollectionView;\n        }\n        throw new TypeError( 'Uknown collection_type: ' + this.model.get( 'collection_type' ) );\n    },\n\n    /** In this override, add the state as a class for use with state-based CSS */\n    _swapNewRender : function( $newRender ){\n        _super.prototype._swapNewRender.call( this, $newRender );\n        //TODO: model currently has no state\n        var state = !this.model.get( 'populated' ) ? STATES.RUNNING : STATES.OK;\n        //if( this.model.has( 'state' ) ){\n        this.$el.addClass( 'state-' + state );\n        //}\n        return this.$el;\n    },\n\n    // ......................................................................... misc\n    /** String representation */\n    toString : function(){\n        var modelString = ( this.model )?( this.model + '' ):( '(no model)' );\n        return 'HDCAListItemView(' + modelString + ')';\n    }\n});\n\n/** underscore templates */\nHDCAListItemView.prototype.templates = (function(){\n\n    var warnings = _.extend( {}, _super.prototype.templates.warnings, {\n        hidden : BASE_MVC.wrapTemplate([\n            // add a warning when hidden\n            '<% if( !collection.visible ){ %>',\n                '<div class=\"hidden-msg warningmessagesmall\">',\n                    _l( 'This collection has been hidden' ),\n                '</div>',\n            '<% } %>'\n        ], 'collection' )\n    });\n\n// could steal this from hda-base (or use mixed content)\n    var titleBarTemplate = BASE_MVC.wrapTemplate([\n        // adding the hid display to the title\n        '<div class=\"title-bar clear\" tabindex=\"0\">',\n            '<span class=\"state-icon\"></span>',\n            '<div class=\"title\">',\n                //TODO: remove whitespace and use margin-right\n                '<span class=\"hid\"><%- collection.hid %></span> ',\n                '<span class=\"name\"><%- collection.name %></span>',\n            '</div>',\n            '<div class=\"subtitle\"></div>',\n        '</div>'\n    ], 'collection' );\n\n    return _.extend( {}, _super.prototype.templates, {\n        warnings : warnings,\n        titleBar : titleBarTemplate\n    });\n}());\n\n\n//==============================================================================\n    return {\n        HDCAListItemView : HDCAListItemView\n    };\n});\n"]}