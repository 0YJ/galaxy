{"version":3,"sources":["mvc/history/history-preferences.js"],"names":["define","BASE_MVC","HistoryPrefs","SessionStorageModel","defaults","expandedIds","show_deleted","show_hidden","addExpanded","model","current","get","this","save","removeExpanded","isExpanded","contentId","_","result","allExpanded","values","clearExpanded","set","includeDeleted","val","isUndefined","includeHidden","toString","id","storageKeyPrefix","historyStorageKey","historyId","Error","clearAll","key","sessionStorage","indexOf","removeItem"],"mappings":"aAAAA,QACI,gBADJA,SACIC,GAKJ,IAIAC,EAAIA,EAAeD,oBAASE,QAGxBC,UAEIC,eACAC,cAAAA,EACAC,aAAAA,GAIJC,YAAAA,SAAcC,GAEV,IAAAC,EAAIA,KAAUC,IAAKA,eACnBD,EAAAA,EAASD,IAATA,EAAsBA,IAAA,MACtBG,KAAAC,KAAKA,cAAMH,IAIfI,eAAAA,SAAiBL,GACb,IAAAC,EAAIA,KAAUC,IAAKA,sBACnBD,EAAOA,EAASD,IAChBG,KAAAC,KAAKA,cAAMH,IAGfK,WAAAA,SAAaC,GACT,OAAAC,EAAAC,OAASA,KAAQP,IAAKA,eAAfK,GAAA,IAGXG,YAAAA,WACI,OAAAF,EAAAG,OAASA,KAAQT,IAAKA,iBAG1BU,cAAAA,WACIT,KAAAU,IAAKA,mBAGTC,eAAAA,SAAiBC,GAGgB,OAA7BP,EAAAQ,YAAOA,IAAoBb,KAAAU,IAAA,eAAAE,GAAEZ,KAAAD,IAAU,iBAE1Ce,cAzC+B,SAAAF,GA4C5B,OADJE,EAAAA,YAAgBF,IAAAZ,KAAAU,IAAUE,cAAKA,GAC3BZ,KAAAD,IAAA,gBAC8DgB,SAAA,WAC9D,MAAA,gBAAiBf,KAAAgB,GAAjB,OAUJC,iBAAmB,WADnBC,kBAAA,SAAAC,GACAF,IAAAA,EAKQ,MAAM,IAAIG,MAAO,kDAAoDD,GADzE,OAAKA,EAAWF,iBAAAE,GAIhBpB,IAAA,SAAST,GACZ,OAZF,IAAAA,GAAA0B,GAAA1B,EAAA4B,kBAAAC,MAgBKE,SAAA,SAAW/B,GACd,IAjBF,IAAAgC,KAAAC,eAsB8D,IAAjDD,EAAIE,QAASlC,EAAa2B,mBAHtCM,eAAAE,WAAAH,MAOC,OAhFLhC,aAAAA","file":"../../../scripts/mvc/history/history-preferences.js","sourcesContent":["define([\n    \"mvc/base-mvc\"\n], function( BASE_MVC ){\n\n'use strict';\n\nvar logNamespace = 'history';\n\n// ============================================================================\n/** session storage for individual history preferences */\nvar HistoryPrefs = BASE_MVC.SessionStorageModel.extend(\n/** @lends HistoryPrefs.prototype */{\n    //TODO:?? move to user prefs?\n    defaults : {\n        //TODO:?? expandedIds to array?\n        expandedIds : {},\n        show_deleted : false,\n        show_hidden  : false\n    },\n\n    /** add an hda id to the hash of expanded hdas */\n    addExpanded : function( model ){\n//TODO: use type_id and not model\n        var current = this.get( 'expandedIds' );\n        current[ model.id ] = model.get( 'id' );\n        this.save( 'expandedIds', current );\n    },\n\n    /** remove an hda id from the hash of expanded hdas */\n    removeExpanded : function( model ){\n        var current = this.get( 'expandedIds' );\n        delete current[ model.id ];\n        this.save( 'expandedIds', current );\n    },\n\n    isExpanded : function( contentId ){\n        return _.result( this.get( 'expandedIds' ), contentId, false );\n    },\n\n    allExpanded : function(){\n        return _.values( this.get( 'expandedIds' ) );\n    },\n\n    clearExpanded : function(){\n        this.set( 'expandedIds', {} );\n    },\n\n    includeDeleted : function( val ){\n        // moving the invocation here so other components don't need to know the key\n        // TODO: change this key later\n        if( !_.isUndefined( val ) ){ this.set( 'show_deleted', val ); }\n        return this.get( 'show_deleted' );\n    },\n\n    includeHidden : function( val ){\n        // TODO: change this key later\n        if( !_.isUndefined( val ) ){ this.set( 'show_hidden', val ); }\n        return this.get( 'show_hidden' );\n    },\n\n    toString : function(){\n        return 'HistoryPrefs(' + this.id + ')';\n    }\n\n}, {\n    // ........................................................................ class vars\n    // class lvl for access w/o instantiation\n    storageKeyPrefix : 'history:',\n\n    /** key string to store each histories settings under */\n    historyStorageKey : function historyStorageKey( historyId ){\n        if( !historyId ){\n            throw new Error( 'HistoryPrefs.historyStorageKey needs valid id: ' + historyId );\n        }\n        // single point of change\n        return ( HistoryPrefs.storageKeyPrefix + historyId );\n    },\n\n    /** return the existing storage for the history with the given id (or create one if it doesn't exist) */\n    get : function get( historyId ){\n        return new HistoryPrefs({ id: HistoryPrefs.historyStorageKey( historyId ) });\n    },\n\n    /** clear all history related items in sessionStorage */\n    clearAll : function clearAll( historyId ){\n        for( var key in sessionStorage ){\n            if( key.indexOf( HistoryPrefs.storageKeyPrefix ) === 0 ){\n                sessionStorage.removeItem( key );\n            }\n        }\n    }\n});\n\n//==============================================================================\n    return {\n        HistoryPrefs: HistoryPrefs\n    };\n});\n"]}