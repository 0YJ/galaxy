{"version":3,"sources":["mvc/history/history-preferences.js"],"names":["_baseMvc","require","logNamespace","HistoryPrefs","_baseMvc2","default","SessionStorageModel","extend","defaults","expandedIds","show_hidden","addExpanded","model","current","this","get","id","removeExpanded","save","isExpanded","contentId","_","result","clearExpanded","set","includeDeleted","val","values","includeHidden","isUndefined","toString","storageKeyPrefix","historyId","Error","clearAll","key","indexOf","sessionStorage","removeItem"],"mappings":"4IAAA,IAAAA,SAAAC,QAAA,2DAEIC,aAAe,UAFnBC,aAAAC,UAAAC,QAAAC,oBAAAC,QASQC,UAEIC,eATRP,cAAe,EAWPQ,aAAa,GANrBC,YAAA,SAAAC,GAEIJ,IAAUK,EAAAC,KAAAC,IAAA,eACNF,EAAAD,EAAAI,IAAAJ,EAAAG,IAAA,MACAN,KAAAA,KAAa,cAFPI,IAgBVI,eAAgB,SAASL,GATzB,IAAAC,EAAAC,KAAAC,IAAA,sBACaF,EAAAD,EAAAI,IACTF,KAAAI,KAAA,cAAAL,IAGAM,WAAU,SAAAC,GAdmB,OAAAC,EAAAC,OAAAR,KAAAC,IAAA,eAAAK,GAAA,IAkBjCH,YAAgB,WACRJ,OAAAA,EAAAA,OAAeE,KAAIA,IAAA,iBAnBMQ,cAAA,WAiC7BT,KAAKU,IAAI,mBAjCoBC,eAAA,SAAAC,GAgCjCH,OAHaI,EAAAA,YAAYZ,IA7BQD,KAAAU,IAAA,eAAAE,GAgClBZ,KAAAC,IAAA,iBAafa,cAAe,SAASF,GALhB,OAHJL,EAAAQ,YAAAH,IACAZ,KAAAU,IAAA,cAAAE,GAESF,KAAIT,IAAA,gBAxCgBe,SAAA,WAsD7B,MAAO,gBAAkBhB,KAAKE,GAAK,OAJnCe,iBAAgB,WAGpBD,kBAAU,SAAWE,GACjB,IAAOA,EACV,MAAA,IAAAC,MAEL,kDACID,GAIA,OAAA7B,aAAA4B,iBAAAC,GAOKjB,IAAA,SAAAiB,GACD,OAAA,IAAA7B,cACOA,GAAAA,aAAa4B,kBAAmBC,MAKvCE,SAAO,SAAiBF,GACpBhB,IAAIb,IAAAA,KAAAA,eADR,IAAAgC,EAAAC,QAAAjC,aAAA4B,mBAnBRM,eAAAC,WAAAH,uBA+BKhC,aAAAA","file":"../../../scripts/mvc/history/history-preferences.js","sourcesContent":["import BASE_MVC from \"mvc/base-mvc\";\n\nvar logNamespace = \"history\";\n\n// ============================================================================\n/** session storage for individual history preferences */\nvar HistoryPrefs = BASE_MVC.SessionStorageModel.extend(\n    /** @lends HistoryPrefs.prototype */ {\n        //TODO:?? move to user prefs?\n        defaults: {\n            //TODO:?? expandedIds to array?\n            expandedIds: {},\n            show_deleted: false,\n            show_hidden: false\n        },\n\n        /** add an hda id to the hash of expanded hdas */\n        addExpanded: function(model) {\n            //TODO: use type_id and not model\n            var current = this.get(\"expandedIds\");\n            current[model.id] = model.get(\"id\");\n            this.save(\"expandedIds\", current);\n        },\n\n        /** remove an hda id from the hash of expanded hdas */\n        removeExpanded: function(model) {\n            var current = this.get(\"expandedIds\");\n            delete current[model.id];\n            this.save(\"expandedIds\", current);\n        },\n\n        isExpanded: function(contentId) {\n            return _.result(this.get(\"expandedIds\"), contentId, false);\n        },\n\n        allExpanded: function() {\n            return _.values(this.get(\"expandedIds\"));\n        },\n\n        clearExpanded: function() {\n            this.set(\"expandedIds\", {});\n        },\n\n        includeDeleted: function(val) {\n            // moving the invocation here so other components don't need to know the key\n            // TODO: change this key later\n            if (!_.isUndefined(val)) {\n                this.set(\"show_deleted\", val);\n            }\n            return this.get(\"show_deleted\");\n        },\n\n        includeHidden: function(val) {\n            // TODO: change this key later\n            if (!_.isUndefined(val)) {\n                this.set(\"show_hidden\", val);\n            }\n            return this.get(\"show_hidden\");\n        },\n\n        toString: function() {\n            return \"HistoryPrefs(\" + this.id + \")\";\n        }\n    },\n    {\n        // ........................................................................ class vars\n        // class lvl for access w/o instantiation\n        storageKeyPrefix: \"history:\",\n\n        /** key string to store each histories settings under */\n        historyStorageKey: function historyStorageKey(historyId) {\n            if (!historyId) {\n                throw new Error(\n                    \"HistoryPrefs.historyStorageKey needs valid id: \" +\n                        historyId\n                );\n            }\n            // single point of change\n            return HistoryPrefs.storageKeyPrefix + historyId;\n        },\n\n        /** return the existing storage for the history with the given id (or create one if it doesn't exist) */\n        get: function get(historyId) {\n            return new HistoryPrefs({\n                id: HistoryPrefs.historyStorageKey(historyId)\n            });\n        },\n\n        /** clear all history related items in sessionStorage */\n        clearAll: function clearAll(historyId) {\n            for (var key in sessionStorage) {\n                if (key.indexOf(HistoryPrefs.storageKeyPrefix) === 0) {\n                    sessionStorage.removeItem(key);\n                }\n            }\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    HistoryPrefs: HistoryPrefs\n};\n"]}