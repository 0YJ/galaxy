{"version":3,"sources":["mvc/history/history-preferences.js"],"names":["define","BASE_MVC","HistoryPrefs","SessionStorageModel","extend","defaults","expandedIds","show_deleted","show_hidden","addExpanded","model","current","this","get","id","save","removeExpanded","isExpanded","contentId","_","result","allExpanded","values","clearExpanded","set","includeDeleted","val","isUndefined","includeHidden","toString","storageKeyPrefix","historyStorageKey","historyId","Error","clearAll","key","sessionStorage","indexOf","removeItem"],"mappings":"AAAAA,QACI,gBACD,SAAUC,GAEb,YAEA,IAIIC,GAAeD,EAASE,oBAAoBC,QAG5CC,UAEIC,eACAC,cAAe,EACfC,aAAe,GAInBC,YAAc,SAAUC,GAEpB,GAAIC,GAAUC,KAAKC,IAAK,cACxBF,GAASD,EAAMI,IAAOJ,EAAMG,IAAK,MACjCD,KAAKG,KAAM,cAAeJ,IAI9BK,eAAiB,SAAUN,GACvB,GAAIC,GAAUC,KAAKC,IAAK,qBACjBF,GAASD,EAAMI,IACtBF,KAAKG,KAAM,cAAeJ,IAG9BM,WAAa,SAAUC,GACnB,MAAOC,GAAEC,OAAQR,KAAKC,IAAK,eAAiBK,GAAW,IAG3DG,YAAc,WACV,MAAOF,GAAEG,OAAQV,KAAKC,IAAK,iBAG/BU,cAAgB,WACZX,KAAKY,IAAK,mBAGdC,eAAiB,SAAUC,GAIvB,MADKP,GAAEQ,YAAaD,IAASd,KAAKY,IAAK,eAAgBE,GAChDd,KAAKC,IAAK,iBAGrBe,cAAgB,SAAUF,GAGtB,MADKP,GAAEQ,YAAaD,IAASd,KAAKY,IAAK,cAAeE,GAC/Cd,KAAKC,IAAK,gBAGrBgB,SAAW,WACP,MAAO,gBAAkBjB,KAAKE,GAAK,OAMvCgB,iBAAmB,WAGnBC,kBAAoB,SAA4BC,GAC5C,IAAKA,EACD,KAAM,IAAIC,OAAO,kDAAoDD,EAGzE,OAAS9B,GAAa4B,iBAAmBE,GAI7CnB,IAAM,SAAcmB,GAChB,MAAO,IAAI9B,IAAeY,GAAIZ,EAAa6B,kBAAmBC,MAIlEE,SAAW,SAAmBF,GAC1B,IAAK,GAAIG,KAAOC,gBACyC,IAAjDD,EAAIE,QAASnC,EAAa4B,mBAC1BM,eAAeE,WAAYH,KAOvC,QACIjC,aAAcA","file":"../../../scripts/mvc/history/history-preferences.js","sourcesContent":["define([\n    \"mvc/base-mvc\"\n], function( BASE_MVC ){\n\n'use strict';\n\nvar logNamespace = 'history';\n\n// ============================================================================\n/** session storage for individual history preferences */\nvar HistoryPrefs = BASE_MVC.SessionStorageModel.extend(\n/** @lends HistoryPrefs.prototype */{\n    //TODO:?? move to user prefs?\n    defaults : {\n        //TODO:?? expandedIds to array?\n        expandedIds : {},\n        show_deleted : false,\n        show_hidden  : false\n    },\n\n    /** add an hda id to the hash of expanded hdas */\n    addExpanded : function( model ){\n//TODO: use type_id and not model\n        var current = this.get( 'expandedIds' );\n        current[ model.id ] = model.get( 'id' );\n        this.save( 'expandedIds', current );\n    },\n\n    /** remove an hda id from the hash of expanded hdas */\n    removeExpanded : function( model ){\n        var current = this.get( 'expandedIds' );\n        delete current[ model.id ];\n        this.save( 'expandedIds', current );\n    },\n\n    isExpanded : function( contentId ){\n        return _.result( this.get( 'expandedIds' ), contentId, false );\n    },\n\n    allExpanded : function(){\n        return _.values( this.get( 'expandedIds' ) );\n    },\n\n    clearExpanded : function(){\n        this.set( 'expandedIds', {} );\n    },\n\n    includeDeleted : function( val ){\n        // moving the invocation here so other components don't need to know the key\n        // TODO: change this key later\n        if( !_.isUndefined( val ) ){ this.set( 'show_deleted', val ); }\n        return this.get( 'show_deleted' );\n    },\n\n    includeHidden : function( val ){\n        // TODO: change this key later\n        if( !_.isUndefined( val ) ){ this.set( 'show_hidden', val ); }\n        return this.get( 'show_hidden' );\n    },\n\n    toString : function(){\n        return 'HistoryPrefs(' + this.id + ')';\n    }\n\n}, {\n    // ........................................................................ class vars\n    // class lvl for access w/o instantiation\n    storageKeyPrefix : 'history:',\n\n    /** key string to store each histories settings under */\n    historyStorageKey : function historyStorageKey( historyId ){\n        if( !historyId ){\n            throw new Error( 'HistoryPrefs.historyStorageKey needs valid id: ' + historyId );\n        }\n        // single point of change\n        return ( HistoryPrefs.storageKeyPrefix + historyId );\n    },\n\n    /** return the existing storage for the history with the given id (or create one if it doesn't exist) */\n    get : function get( historyId ){\n        return new HistoryPrefs({ id: HistoryPrefs.historyStorageKey( historyId ) });\n    },\n\n    /** clear all history related items in sessionStorage */\n    clearAll : function clearAll( historyId ){\n        for( var key in sessionStorage ){\n            if( key.indexOf( HistoryPrefs.storageKeyPrefix ) === 0 ){\n                sessionStorage.removeItem( key );\n            }\n        }\n    }\n});\n\n//==============================================================================\n    return {\n        HistoryPrefs: HistoryPrefs\n    };\n});\n"]}