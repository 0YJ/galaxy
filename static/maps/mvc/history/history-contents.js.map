{"version":3,"sources":["mvc/history/history-contents.js"],"names":["_super","_controlledFetchCollection2","default","PaginatedCollection","HistoryContents","extend","_baseMvc2","LoggableMixin","_logNamespace","model","attrs","options","history_content_type","_hdaModel2","HistoryDatasetAssociation","collection_type","_hdcaModel2","HistoryListDatasetCollection","HistoryPairDatasetCollection","HistoryListPairedDatasetCollection","msg","HistoryListOfListsDatasetCollection","console","warn","validationError","limitPerProgressiveFetch","order","urlRoot","Galaxy","root","url","this","historyId","models","prototype","initialize","call","history","includeHidden","setHistoryId","newId","_setUpWebStorage","_historyPreferences2","HistoryPrefs","id","historyStorageKey","trigger","storage","on","newVal","includeDeleted","include-hidden","comparators","_","clone","name","buildComparator","ascending","name-dsc","hid","filter","c","inReadyState","runningAndActive","get","getByHid","findWhere","haveDetails","all","hasDetails","hidden","deleted","visibleAndUndeleted","setIncludeDeleted","setting","isBoolean","result","setIncludeHidden","fetch","details","prefs","isEmpty","values","expandedIds","join","_buildFetchData","v","_fetchParams","_buildFetchFilters","superFilters","filters","purged","defaults","getTotalItemCount","contentsShown","remove","update_time-ge","since","toISOString","visible","fetchDeleted","self","always","fetchHidden","fetchAllDetails","detailsFlag","data","_filterAndUpdate","idAttribute","updateArgs","fetched","currJson","then","ajaxQueue","i","modelArray","concat","ajaxFn","args","collection","content","_ajaxQueue2","AjaxQueue","slice","reverse","map","progressivelyFetchDetails","deferred","jQuery","Deferred","_recursivelyFetch","offset","defer","_options","keys","detailKeys","reset","reject","done","response","notify","limit","length","allFetched","contentsJSON","copyableModelClasses","view","searchAttributes","contentType","type","LibraryDatasetDatasetAssociation","HistoryDatasetCollectionAssociation","model_class","copy","json","method","source","fail","xhr","ajax","hdca","history_id","hide_source_items","add","parse","error","status","message","haveSearchDetails","createHDCA","elementIdentifiers","collectionType","hideSourceItems","toString","element_identifiers","has","attributes","matches","matchesWhat","Backbone","Collection"],"mappings":"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","file":"../../../scripts/mvc/history/history-contents.js","sourcesContent":["import CONTROLLED_FETCH_COLLECTION from \"mvc/base/controlled-fetch-collection\";\nimport HDA_MODEL from \"mvc/history/hda-model\";\nimport HDCA_MODEL from \"mvc/history/hdca-model\";\nimport HISTORY_PREFS from \"mvc/history/history-preferences\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport AJAX_QUEUE from \"utils/ajax-queue\";\n\n//==============================================================================\nvar _super = CONTROLLED_FETCH_COLLECTION.PaginatedCollection;\n/** @class Backbone collection for history content.\n *      NOTE: history content seems like a dataset collection, but differs in that it is mixed:\n *          each element can be either an HDA (dataset) or a DatasetCollection and co-exist on\n *          the same level.\n *      Dataset collections on the other hand are not mixed and (so far) can only contain either\n *          HDAs or child dataset collections on one level.\n *      This is why this does not inherit from any of the DatasetCollections (currently).\n */\nvar HistoryContents = _super.extend(BASE_MVC.LoggableMixin).extend({\n    _logNamespace: \"history\",\n\n    // ........................................................................ composite collection\n    /** since history content is a mix, override model fn into a factory, creating based on history_content_type */\n    model: function(attrs, options) {\n        if (attrs.history_content_type === \"dataset\") {\n            return new HDA_MODEL.HistoryDatasetAssociation(attrs, options);\n        } else if (attrs.history_content_type === \"dataset_collection\") {\n            switch (attrs.collection_type) {\n                case \"list\":\n                    return new HDCA_MODEL.HistoryListDatasetCollection(\n                        attrs,\n                        options\n                    );\n                case \"paired\":\n                    return new HDCA_MODEL.HistoryPairDatasetCollection(\n                        attrs,\n                        options\n                    );\n                case \"list:paired\":\n                    return new HDCA_MODEL.HistoryListPairedDatasetCollection(\n                        attrs,\n                        options\n                    );\n                case \"list:list\":\n                    return new HDCA_MODEL.HistoryListOfListsDatasetCollection(\n                        attrs,\n                        options\n                    );\n            }\n            // This is a hack inside a hack:\n            // Raise a plain object with validationError to fake a model.validationError\n            // (since we don't have a model to use validate with)\n            // (the outer hack being the mixed content/model function in this collection)\n            var msg = \"Unknown collection_type: \" + attrs.collection_type;\n            console.warn(msg, attrs);\n            return { validationError: msg };\n        }\n        return {\n            validationError:\n                \"Unknown history_content_type: \" + attrs.history_content_type\n        };\n    },\n\n    // ........................................................................ set up\n    limitPerPage: 500,\n\n    /** @type {Integer} how many contents per call to fetch when using progressivelyFetchDetails */\n    limitPerProgressiveFetch: 500,\n\n    /** @type {String} order used here and when fetching from server */\n    order: \"hid\",\n\n    /** root api url */\n    urlRoot: Galaxy.root + \"api/histories\",\n\n    /** complete api url */\n    url: function() {\n        return this.urlRoot + \"/\" + this.historyId + \"/contents\";\n    },\n\n    /** Set up */\n    initialize: function(models, options) {\n        options = options || {};\n        _super.prototype.initialize.call(this, models, options);\n\n        this.history = options.history || null;\n        this.setHistoryId(options.historyId || null);\n        /** @type {Boolean} does this collection contain and fetch deleted elements */\n        this.includeDeleted = options.includeDeleted || this.includeDeleted;\n        /** @type {Boolean} does this collection contain and fetch non-visible elements */\n        this.includeHidden = options.includeHidden || this.includeHidden;\n\n        // backbonejs uses collection.model.prototype.idAttribute to determine if a model is *already* in a collection\n        //  and either merged or replaced. In this case, our 'model' is a function so we need to add idAttribute\n        //  manually here - if we don't, contents will not merge but be replaced/swapped.\n        this.model.prototype.idAttribute = \"type_id\";\n    },\n\n    setHistoryId: function(newId) {\n        this.historyId = newId;\n        this._setUpWebStorage();\n    },\n\n    /** Set up client side storage. Currently PersistanStorage keyed under 'history:<id>' */\n    _setUpWebStorage: function(initialSettings) {\n        // TODO: use initialSettings\n        if (!this.historyId) {\n            return;\n        }\n        this.storage = new HISTORY_PREFS.HistoryPrefs({\n            id: HISTORY_PREFS.HistoryPrefs.historyStorageKey(this.historyId)\n        });\n        this.trigger(\"new-storage\", this.storage, this);\n\n        this.on({\n            \"include-deleted\": function(newVal) {\n                this.storage.includeDeleted(newVal);\n            },\n            \"include-hidden\": function(newVal) {\n                this.storage.includeHidden(newVal);\n            }\n        });\n\n        this.includeDeleted = this.storage.includeDeleted() || false;\n        this.includeHidden = this.storage.includeHidden() || false;\n        return this;\n    },\n\n    // ........................................................................ common queries\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: _.extend(_.clone(_super.prototype.comparators), {\n        name: BASE_MVC.buildComparator(\"name\", { ascending: true }),\n        \"name-dsc\": BASE_MVC.buildComparator(\"name\", {\n            ascending: false\n        }),\n        hid: BASE_MVC.buildComparator(\"hid\", { ascending: false }),\n        \"hid-asc\": BASE_MVC.buildComparator(\"hid\", { ascending: true })\n    }),\n\n    /** Get every model in this collection not in a 'ready' state (running). */\n    running: function() {\n        return this.filter(function(c) {\n            return !c.inReadyState();\n        });\n    },\n\n    /** return contents that are not ready and not deleted/hidden */\n    runningAndActive: function() {\n        return this.filter(function(c) {\n            return (\n                !c.inReadyState() &&\n                c.get(\"visible\") &&\n                // TODO: deletedOrPurged?\n                !c.get(\"deleted\")\n            );\n        });\n    },\n\n    /** Get the model with the given hid\n     *  @param {Int} hid the hid to search for\n     *  @returns {HistoryDatasetAssociation} the model with the given hid or undefined if not found\n     */\n    getByHid: function(hid) {\n        // note: there *can* be more than one content with a given hid, this finds the first based on order\n        return this.findWhere({ hid: hid });\n    },\n\n    /** return true if all contents have details */\n    haveDetails: function() {\n        return this.all(function(c) {\n            return c.hasDetails();\n        });\n    },\n\n    // ........................................................................ hidden / deleted\n    /** return a new contents collection of only hidden items */\n    hidden: function() {\n        return this.filter(function(c) {\n            return c.hidden();\n        });\n    },\n\n    /** return a new contents collection of only hidden items */\n    deleted: function() {\n        return this.filter(function(c) {\n            return c.get(\"deleted\");\n        });\n    },\n\n    /** return a new contents collection of only hidden items */\n    visibleAndUndeleted: function() {\n        return this.filter(function(c) {\n            return (\n                c.get(\"visible\") &&\n                // TODO: deletedOrPurged?\n                !c.get(\"deleted\")\n            );\n        });\n    },\n\n    /** create a setter in order to publish the change */\n    setIncludeDeleted: function(setting, options) {\n        if (_.isBoolean(setting) && setting !== this.includeDeleted) {\n            this.includeDeleted = setting;\n            if (_.result(options, \"silent\")) {\n                return;\n            }\n            this.trigger(\"include-deleted\", setting, this);\n        }\n    },\n\n    /** create a setter in order to publish the change */\n    setIncludeHidden: function(setting, options) {\n        if (_.isBoolean(setting) && setting !== this.includeHidden) {\n            this.includeHidden = setting;\n            options = options || {};\n            if (_.result(options, \"silent\")) {\n                return;\n            }\n            this.trigger(\"include-hidden\", setting, this);\n        }\n    },\n\n    // ........................................................................ ajax\n    // ............ controlled fetch collection\n    /** override to get expanded ids from sessionStorage and pass to API as details */\n    fetch: function(options) {\n        options = options || {};\n        if (this.historyId && !options.details) {\n            var prefs = HISTORY_PREFS.HistoryPrefs.get(this.historyId).toJSON();\n            if (!_.isEmpty(prefs.expandedIds)) {\n                options.details = _.values(prefs.expandedIds).join(\",\");\n            }\n        }\n        return _super.prototype.fetch.call(this, options);\n    },\n\n    // ............. ControlledFetch stuff\n    /** override to include the API versioning flag */\n    _buildFetchData: function(options) {\n        return _.extend(_super.prototype._buildFetchData.call(this, options), {\n            v: \"dev\"\n        });\n    },\n\n    /** Extend to include details and version */\n    _fetchParams: _super.prototype._fetchParams.concat([\n        // TODO: remove (the need for) both\n        /** version */\n        \"v\",\n        /** dataset ids to get full details of */\n        \"details\"\n    ]),\n\n    /** override to add deleted/hidden filters */\n    _buildFetchFilters: function(options) {\n        var superFilters =\n            _super.prototype._buildFetchFilters.call(this, options) || {};\n        var filters = {};\n        if (!this.includeDeleted) {\n            filters.deleted = false;\n            filters.purged = false;\n        }\n        if (!this.includeHidden) {\n            filters.visible = true;\n        }\n        return _.defaults(superFilters, filters);\n    },\n\n    // ............ paginated collection\n    getTotalItemCount: function() {\n        return this.history.contentsShown();\n    },\n\n    // ............ history contents specific ajax\n    /** override to filter requested contents to those updated after the Date 'since' */\n    fetchUpdated: function(since, options) {\n        if (since) {\n            options = options || { filters: {} };\n            options.remove = false;\n            options.filters = {\n                \"update_time-ge\": since.toISOString(),\n                // workflows will produce hidden datasets (non-output datasets) that still\n                // need to be updated in the collection or they'll update forever\n                // we can remove the default visible filter by using an 'empty' value\n                visible: \"\"\n            };\n        }\n        return this.fetch(options);\n    },\n\n    /** fetch all the deleted==true contents of this collection */\n    fetchDeleted: function(options) {\n        options = options || {};\n        var self = this;\n        options.filters = _.extend(options.filters, {\n            // all deleted, purged or not\n            deleted: true,\n            purged: undefined\n        });\n        options.remove = false;\n\n        self.trigger(\"fetching-deleted\", self);\n        return self.fetch(options).always(function() {\n            self.trigger(\"fetching-deleted-done\", self);\n        });\n    },\n\n    /** fetch all the visible==false contents of this collection */\n    fetchHidden: function(options) {\n        options = options || {};\n        var self = this;\n        options.filters = _.extend(options.filters, {\n            visible: false\n        });\n        options.remove = false;\n\n        self.trigger(\"fetching-hidden\", self);\n        return self.fetch(options).always(function() {\n            self.trigger(\"fetching-hidden-done\", self);\n        });\n    },\n\n    /** fetch detailed model data for all contents in this collection */\n    fetchAllDetails: function(options) {\n        options = options || {};\n        var detailsFlag = { details: \"all\" };\n        options.data = _.extend(options.data || {}, detailsFlag);\n        return this.fetch(options);\n    },\n\n    /** specialty fetch method for retrieving the element_counts of all hdcas in the history */\n    fetchCollectionCounts: function(options) {\n        options = options || {};\n        options.keys = [\"type_id\", \"element_count\"].join(\",\");\n        options.filters = _.extend(options.filters || {}, {\n            history_content_type: \"dataset_collection\"\n        });\n        options.remove = false;\n        return this.fetch(options);\n    },\n\n    // ............. quasi-batch ops\n    // TODO: to batch\n    /** helper that fetches using filterParams then calls save on each fetched using updateWhat as the save params */\n    _filterAndUpdate: function(filterParams, updateWhat) {\n        var self = this;\n        var idAttribute = self.model.prototype.idAttribute;\n        var updateArgs = [updateWhat];\n\n        return self\n            .fetch({ filters: filterParams, remove: false })\n            .then(function(fetched) {\n                // convert filtered json array to model array\n                fetched = fetched.reduce(function(modelArray, currJson, i) {\n                    var model = self.get(currJson[idAttribute]);\n                    return model ? modelArray.concat(model) : modelArray;\n                }, []);\n                return self.ajaxQueue(\"save\", updateArgs, fetched);\n            });\n    },\n\n    /** using a queue, perform ajaxFn on each of the models in this collection */\n    ajaxQueue: function(ajaxFn, args, collection) {\n        collection = collection || this.models;\n        return new AJAX_QUEUE.AjaxQueue(\n            collection\n                .slice()\n                .reverse()\n                .map(function(content, i) {\n                    var fn = _.isString(ajaxFn) ? content[ajaxFn] : ajaxFn;\n                    return function() {\n                        return fn.apply(content, args);\n                    };\n                })\n        ).deferred;\n    },\n\n    /** fetch contents' details in batches of limitPerCall - note: only get searchable details here */\n    progressivelyFetchDetails: function(options) {\n        options = options || {};\n        var deferred = jQuery.Deferred();\n        var self = this;\n        var limit = options.limitPerCall || self.limitPerProgressiveFetch;\n        // TODO: only fetch tags and annotations if specifically requested\n        var searchAttributes =\n            HDA_MODEL.HistoryDatasetAssociation.prototype.searchAttributes;\n        var detailKeys = searchAttributes.join(\",\");\n\n        function _recursivelyFetch(offset) {\n            offset = offset || 0;\n            var _options = _.extend(_.clone(options), {\n                view: \"summary\",\n                keys: detailKeys,\n                limit: limit,\n                offset: offset,\n                reset: offset === 0,\n                remove: false\n            });\n\n            _.defer(function() {\n                self.fetch\n                    .call(self, _options)\n                    .fail(deferred.reject)\n                    .done(function(response) {\n                        deferred.notify(response, limit, offset);\n                        if (response.length !== limit) {\n                            self.allFetched = true;\n                            deferred.resolve(response, limit, offset);\n                        } else {\n                            _recursivelyFetch(offset + limit);\n                        }\n                    });\n            });\n        }\n        _recursivelyFetch();\n        return deferred;\n    },\n\n    /** does some bit of JSON represent something that can be copied into this contents collection */\n    isCopyable: function(contentsJSON) {\n        var copyableModelClasses = [\n            \"HistoryDatasetAssociation\",\n            \"HistoryDatasetCollectionAssociation\"\n        ];\n        return (\n            _.isObject(contentsJSON) &&\n            contentsJSON.id &&\n            _.contains(copyableModelClasses, contentsJSON.model_class)\n        );\n    },\n\n    /** copy an existing, accessible hda into this collection */\n    copy: function(json) {\n        // TODO: somehow showhorn all this into 'save'\n        var id;\n\n        var type;\n        var contentType;\n        if (_.isString(json)) {\n            id = json;\n            contentType = \"hda\";\n            type = \"dataset\";\n        } else {\n            id = json.id;\n            contentType =\n                {\n                    HistoryDatasetAssociation: \"hda\",\n                    LibraryDatasetDatasetAssociation: \"ldda\",\n                    HistoryDatasetCollectionAssociation: \"hdca\"\n                }[json.model_class] || \"hda\";\n            type = contentType === \"hdca\" ? \"dataset_collection\" : \"dataset\";\n        }\n        var collection = this;\n\n        var xhr = jQuery\n            .ajax(this.url(), {\n                method: \"POST\",\n                contentType: \"application/json\",\n                data: JSON.stringify({\n                    content: id,\n                    source: contentType,\n                    type: type\n                })\n            })\n            .done(function(response) {\n                collection.add([response], { parse: true });\n            })\n            .fail(function(error, status, message) {\n                collection.trigger(\n                    \"error\",\n                    collection,\n                    xhr,\n                    {},\n                    \"Error copying contents\",\n                    { type: type, id: id, source: contentType }\n                );\n            });\n\n        return xhr;\n    },\n\n    /** create a new HDCA in this collection */\n    createHDCA: function(\n        elementIdentifiers,\n        collectionType,\n        name,\n        hideSourceItems,\n        options\n    ) {\n        // normally collection.create returns the new model, but we need the promise from the ajax, so we fake create\n        //precondition: elementIdentifiers is an array of plain js objects\n        //  in the proper form to create the collectionType\n        var hdca = this.model({\n            history_content_type: \"dataset_collection\",\n            collection_type: collectionType,\n            history_id: this.historyId,\n            name: name,\n            hide_source_items: hideSourceItems || false,\n            // should probably be able to just send in a bunch of json here and restruct per class\n            // note: element_identifiers is now (incorrectly) an attribute\n            element_identifiers: elementIdentifiers\n            // do not create the model on the client until the ajax returns\n        });\n        return hdca.save(options);\n    },\n\n    // ........................................................................ searching\n    /** return true if all contents have the searchable attributes */\n    haveSearchDetails: function() {\n        return (\n            this.allFetched &&\n            this.all(function(content) {\n                // null (which is a valid returned annotation value)\n                // will return false when using content.has( 'annotation' )\n                //TODO: a bit hacky - formalize\n                return _.has(content.attributes, \"annotation\");\n            })\n        );\n    },\n\n    /** return a new collection of contents whose attributes contain the substring matchesWhat */\n    matches: function(matchesWhat) {\n        return this.filter(function(content) {\n            return content.matches(matchesWhat);\n        });\n    },\n\n    // ........................................................................ misc\n    /** In this override, copy the historyId to the clone */\n    clone: function() {\n        var clone = Backbone.Collection.prototype.clone.call(this);\n        clone.historyId = this.historyId;\n        return clone;\n    },\n\n    /** String representation. */\n    toString: function() {\n        return [\n            \"HistoryContents(\",\n            [this.historyId, this.length].join(),\n            \")\"\n        ].join(\"\");\n    }\n});\n\n//==============================================================================\nexport default {\n    HistoryContents: HistoryContents\n};\n"]}