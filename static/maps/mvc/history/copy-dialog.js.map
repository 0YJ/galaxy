{"version":3,"sources":["mvc/history/copy-dialog.js"],"names":["define","MODAL","ERROR_MODAL","_l","CopyDialog","defaultName","_","template","title","submitLabel","errorMessage","progressive","activeLabel","allLabel","anonWarning","_template","join","_showAjaxIndicator","indicator","this","modal","$","empty","append","css","margin-top","dialog","history","options","checkNameAndCopy","name","val","show","copyAllDatasets","prop","copy","done","response","deferred","resolve","fail","xhr","status","message","ajaxErrorModal","rejectWith","arguments","autoClose","hide","jQuery","Deferred","defaultCopyNameFn","nameFn","defaultCopyName","get","defaultCopyWhat","allDatasets","allowAll","isUndefined","originalClosingCallback","closing_callback","extend","body","isAnon","Galaxy","user","isAnonymous","copyWhat","buttons","object","height","closing_events","cancelled","reject","focus","select","on","ev","keyCode","preventDefault","ImportDialog","window","parent","View","useImport"],"mappings":"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","file":"../../../scripts/mvc/history/copy-dialog.js","sourcesContent":["define([\n    \"mvc/ui/ui-modal\",\n    \"mvc/ui/error-modal\",\n    \"utils/localization\"\n], function( MODAL, ERROR_MODAL, _l ){\n\n'use strict';\n\n//==============================================================================\n/**\n * A dialog/modal that allows copying a user history or 'importing' from user\n * another. Generally called via historyCopyDialog below.\n * @type {Object}\n */\nvar CopyDialog = {\n\n    // language related strings/fns\n    defaultName     : _.template( \"Copy of '<%- name %>'\" ),\n    title           : _.template( _l( 'Copying history' ) + ' \"<%- name %>\"' ),\n    submitLabel     : _l( 'Copy' ),\n    errorMessage    : _l( 'History could not be copied.' ),\n    progressive     : _l( 'Copying history' ),\n    activeLabel     : _l( 'Copy only the active, non-deleted datasets' ),\n    allLabel        : _l( 'Copy all datasets including deleted ones' ),\n    anonWarning     : _l( 'As an anonymous user, unless you login or register, you will lose your current history ' ) +\n                      _l( 'after copying this history. ' ),\n\n    // template for modal body\n    _template : _.template([\n        //TODO: remove inline styles\n        // show a warning message for losing current to anon users\n        '<% if( isAnon ){ %>',\n            '<div class=\"warningmessage\">',\n                '<%- anonWarning %>',\n                _l( 'You can' ),\n                ' <a href=\"/user/login\">', _l( 'login here' ), '</a> ', _l( 'or' ), ' ',\n                ' <a href=\"/user/create\">', _l( 'register here' ), '</a>.',\n            '</div>',\n        '<% } %>',\n        '<form>',\n            '<label for=\"copy-modal-title\">',\n                _l( 'Enter a title for the new history' ), ':',\n            '</label><br />',\n            // TODO: could use required here and the form validators\n            // NOTE: use unescaped here if escaped in the modal function below\n            '<input id=\"copy-modal-title\" class=\"form-control\" style=\"width: 100%\" value=\"<%= name %>\" />',\n            '<p class=\"invalid-title bg-danger\" style=\"color: red; margin: 8px 0px 8px 0px; display: none\">',\n                _l( 'Please enter a valid history title' ),\n            '</p>',\n            // if allowAll, add the option to copy deleted datasets, too\n            '<% if( allowAll ){ %>',\n                '<br />',\n                '<p>', _l( 'Choose which datasets from the original history to include:' ), '</p>',\n                // copy non-deleted is the default\n                '<input name=\"copy-what\" type=\"radio\" id=\"copy-non-deleted\" value=\"copy-non-deleted\" ',\n                    '<% if( copyWhat === \"copy-non-deleted\" ){ print( \"checked\" ); } %>/>',\n                '<label for=\"copy-non-deleted\"> <%- activeLabel %></label>',\n                '<br />',\n                '<input name=\"copy-what\" type=\"radio\" id=\"copy-all\" value=\"copy-all\" ',\n                    '<% if( copyWhat === \"copy-all\" ){ print( \"checked\" ); } %>/>',\n                '<label for=\"copy-all\"> <%- allLabel %></label>',\n            '<% } %>',\n        '</form>'\n    ].join( '' )),\n\n    // empty modal body and let the user know the copy is happening\n    _showAjaxIndicator : function _showAjaxIndicator(){\n        var indicator = '<p><span class=\"fa fa-spinner fa-spin\"></span> ' + this.progressive + '...</p>';\n        this.modal.$( '.modal-body' ).empty().append( indicator ).css({ 'margin-top': '8px' });\n    },\n\n    // (sorta) public interface - display the modal, render the form, and potentially copy the history\n    // returns a jQuery.Deferred done->history copied, fail->user cancelled\n    dialog : function _dialog( modal, history, options ){\n        options = options || {};\n\n        var dialog = this,\n            deferred = jQuery.Deferred(),\n            // TODO: getting a little byzantine here\n            defaultCopyNameFn = options.nameFn || this.defaultName,\n            defaultCopyName = defaultCopyNameFn({ name: history.get( 'name' ) }),\n            // TODO: these two might be simpler as one 3 state option (all,active,no-choice)\n            defaultCopyWhat = options.allDatasets? 'copy-all' : 'copy-non-deleted',\n            allowAll = !_.isUndefined( options.allowAll )? options.allowAll : true,\n            autoClose = !_.isUndefined( options.autoClose )? options.autoClose : true;\n\n        this.modal = modal;\n\n\n        // validate the name and copy if good\n        function checkNameAndCopy(){\n            var name = modal.$( '#copy-modal-title' ).val();\n            if( !name ){\n                modal.$( '.invalid-title' ).show();\n                return;\n            }\n            // get further settings, shut down and indicate the ajax call, then hide and resolve/reject\n            var copyAllDatasets = modal.$( 'input[name=\"copy-what\"]:checked' ).val() === 'copy-all';\n            modal.$( 'button' ).prop( 'disabled', true );\n            dialog._showAjaxIndicator();\n            history.copy( true, name, copyAllDatasets )\n                .done( function( response ){\n                    deferred.resolve( response );\n                })\n                .fail( function( xhr, status, message ){\n                    var options = { name: name, copyAllDatasets: copyAllDatasets };\n                    ERROR_MODAL.ajaxErrorModal( history, xhr, options, dialog.errorMessage );\n                    deferred.rejectWith( deferred, arguments );\n                })\n                .done( function(){\n                    if( autoClose ){ modal.hide(); }\n                });\n        }\n\n        var originalClosingCallback = options.closing_callback;\n        modal.show( _.extend( options, {\n            title   : this.title({ name: history.get( 'name' ) }),\n            body    : $( dialog._template({\n                    name        : defaultCopyName,\n                    isAnon      : Galaxy.user.isAnonymous(),\n                    allowAll    : allowAll,\n                    copyWhat    : defaultCopyWhat,\n                    activeLabel : this.activeLabel,\n                    allLabel    : this.allLabel,\n                    anonWarning : this.anonWarning,\n                })),\n            buttons : _.object([\n                    [ _l( 'Cancel' ),   function(){ modal.hide(); } ],\n                    [ this.submitLabel, checkNameAndCopy ]\n                ]),\n            height          : 'auto',\n            closing_events  : true,\n            closing_callback: function _historyCopyClose( cancelled ){\n                    if( cancelled ){\n                        deferred.reject({ cancelled : true });\n                    }\n                    if( originalClosingCallback ){\n                        originalClosingCallback( cancelled );\n                    }\n                }\n            }));\n\n        // set the default dataset copy, autofocus the title, and set up for a simple return\n        modal.$( '#copy-modal-title' ).focus().select();\n        modal.$( '#copy-modal-title' ).on( 'keydown', function( ev ){\n            if( ev.keyCode === 13 ){\n                ev.preventDefault();\n                checkNameAndCopy();\n            }\n        });\n\n        return deferred;\n    },\n};\n\n//==============================================================================\n// maintain the (slight) distinction between copy and import\n/**\n * Subclass CopyDialog to use the import language.\n */\nvar ImportDialog = _.extend( {}, CopyDialog, {\n    defaultName     : _.template( \"imported: <%- name %>\" ),\n    title           : _.template( _l( 'Importing history' ) + ' \"<%- name %>\"' ),\n    submitLabel     : _l( 'Import' ),\n    errorMessage    : _l( 'History could not be imported.' ),\n    progressive     : _l( 'Importing history' ),\n    activeLabel     : _l( 'Import only the active, non-deleted datasets' ),\n    allLabel        : _l( 'Import all datasets including deleted ones' ),\n    anonWarning     : _l( 'As an anonymous user, unless you login or register, you will lose your current history ' ) +\n                      _l( 'after importing this history. ' ),\n\n});\n\n//==============================================================================\n/**\n * Main interface for both history import and history copy dialogs.\n * @param  {Backbone.Model} history     the history to copy\n * @param  {Object}         options     a hash\n * @return {jQuery.Deferred}            promise that fails on close and succeeds on copy\n *\n * options:\n *     (this object is also passed to the modal used to display the dialog and accepts modal options)\n *     {Function} nameFn    if defined, use this to build the default name shown to the user\n *                          (the fn is passed: {name: <original history's name>})\n *     {bool} useImport     if true, use the 'import' language (instead of Copy)\n *     {bool} allowAll      if true, allow the user to choose between copying all datasets and\n *                          only non-deleted datasets\n *     {String} allDatasets default initial checked radio button: 'copy-all' or 'copy-non-deleted',\n */\nvar historyCopyDialog = function( history, options ){\n    options = options || {};\n    // create our own modal if Galaxy doesn't have one (mako tab without use_panels)\n    var modal = window.parent.Galaxy.modal || new MODAL.View({});\n    return options.useImport?\n        ImportDialog.dialog( modal, history, options ):\n        CopyDialog.dialog( modal, history, options );\n};\n\n\n//==============================================================================\n    return historyCopyDialog;\n});\n"]}