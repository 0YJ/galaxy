{"version":3,"sources":["mvc/history/copy-dialog.js"],"names":["CopyDialog","defaultName","_","template","title","_localization2","default","submitLabel","errorMessage","progressive","activeLabel","allLabel","anonWarning","_template","_showAjaxIndicator","dialog","options","defaultCopyNameFn","name","join","indicator","this","modal","$","empty","append","prop","closing_events","cancelled","closing_callback","_historyCopyClose","deferred","history","copy","originalClosingCallback","resolve","response","fail","xhr","status","message","copyAllDatasets","focus","ev","ajaxErrorModal","preventDefault","checkNameAndCopy","rejectWith","arguments","done","autoClose","hide","buttons","show","jQuery","Deferred","defaultCopyName","defaultCopyWhat","allDatasets","allowAll","isUndefined","body","ImportDialog","get","isAnon","Galaxy","user","isAnonymous","copyWhat","object","height","historyCopyDialog","reject","window","useImport","select","on","keyCode","extend","parent","_uiModal2","View"],"mappings":"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","file":"../../../scripts/mvc/history/copy-dialog.js","sourcesContent":["import MODAL from \"mvc/ui/ui-modal\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\n/**\n * A dialog/modal that allows copying a user history or 'importing' from user\n * another. Generally called via historyCopyDialog below.\n * @type {Object}\n */\nvar CopyDialog = {\n    // language related strings/fns\n    defaultName: _.template(\"Copy of '<%- name %>'\"),\n    title: _.template(_l(\"Copying history\") + ' \"<%- name %>\"'),\n    submitLabel: _l(\"Copy\"),\n    errorMessage: _l(\"History could not be copied.\"),\n    progressive: _l(\"Copying history\"),\n    activeLabel: _l(\"Copy only the active, non-deleted datasets\"),\n    allLabel: _l(\"Copy all datasets including deleted ones\"),\n    anonWarning:\n        _l(\n            \"As an anonymous user, unless you login or register, you will lose your current history \"\n        ) + _l(\"after copying this history. \"),\n\n    // template for modal body\n    _template: _.template(\n        [\n            //TODO: remove inline styles\n            // show a warning message for losing current to anon users\n            \"<% if( isAnon ){ %>\",\n            '<div class=\"warningmessage\">',\n            \"<%- anonWarning %>\",\n            _l(\"You can\"),\n            ' <a href=\"/user/login\">',\n            _l(\"login here\"),\n            \"</a> \",\n            _l(\"or\"),\n            \" \",\n            ' <a href=\"/user/create\">',\n            _l(\"register here\"),\n            \"</a>.\",\n            \"</div>\",\n            \"<% } %>\",\n            \"<form>\",\n            '<label for=\"copy-modal-title\">',\n            _l(\"Enter a title for the new history\"),\n            \":\",\n            \"</label><br />\",\n            // TODO: could use required here and the form validators\n            // NOTE: use unescaped here if escaped in the modal function below\n            '<input id=\"copy-modal-title\" class=\"form-control\" style=\"width: 100%\" value=\"<%= name %>\" />',\n            '<p class=\"invalid-title bg-danger\" style=\"color: red; margin: 8px 0px 8px 0px; display: none\">',\n            _l(\"Please enter a valid history title\"),\n            \"</p>\",\n            // if allowAll, add the option to copy deleted datasets, too\n            \"<% if( allowAll ){ %>\",\n            \"<br />\",\n            \"<p>\",\n            _l(\"Choose which datasets from the original history to include:\"),\n            \"</p>\",\n            // copy non-deleted is the default\n            '<input name=\"copy-what\" type=\"radio\" id=\"copy-non-deleted\" value=\"copy-non-deleted\" ',\n            '<% if( copyWhat === \"copy-non-deleted\" ){ print( \"checked\" ); } %>/>',\n            '<label for=\"copy-non-deleted\"> <%- activeLabel %></label>',\n            \"<br />\",\n            '<input name=\"copy-what\" type=\"radio\" id=\"copy-all\" value=\"copy-all\" ',\n            '<% if( copyWhat === \"copy-all\" ){ print( \"checked\" ); } %>/>',\n            '<label for=\"copy-all\"> <%- allLabel %></label>',\n            \"<% } %>\",\n            \"</form>\"\n        ].join(\"\")\n    ),\n\n    // empty modal body and let the user know the copy is happening\n    _showAjaxIndicator: function _showAjaxIndicator() {\n        var indicator =\n            '<p><span class=\"fa fa-spinner fa-spin\"></span> ' +\n            this.progressive +\n            \"...</p>\";\n        this.modal\n            .$(\".modal-body\")\n            .empty()\n            .append(indicator)\n            .css({ \"margin-top\": \"8px\" });\n    },\n\n    // (sorta) public interface - display the modal, render the form, and potentially copy the history\n    // returns a jQuery.Deferred done->history copied, fail->user cancelled\n    dialog: function _dialog(modal, history, options) {\n        options = options || {};\n\n        var dialog = this;\n        var deferred = jQuery.Deferred();\n\n        var // TODO: getting a little byzantine here\n        defaultCopyNameFn = options.nameFn || this.defaultName;\n\n        var defaultCopyName = defaultCopyNameFn({\n            name: history.get(\"name\")\n        });\n\n        var // TODO: these two might be simpler as one 3 state option (all,active,no-choice)\n        defaultCopyWhat = options.allDatasets ? \"copy-all\" : \"copy-non-deleted\";\n\n        var allowAll = !_.isUndefined(options.allowAll)\n            ? options.allowAll\n            : true;\n\n        var autoClose = !_.isUndefined(options.autoClose)\n            ? options.autoClose\n            : true;\n\n        this.modal = modal;\n\n        // validate the name and copy if good\n        function checkNameAndCopy() {\n            var name = modal.$(\"#copy-modal-title\").val();\n            if (!name) {\n                modal.$(\".invalid-title\").show();\n                return;\n            }\n            // get further settings, shut down and indicate the ajax call, then hide and resolve/reject\n            var copyAllDatasets =\n                modal.$('input[name=\"copy-what\"]:checked').val() === \"copy-all\";\n            modal.$(\"button\").prop(\"disabled\", true);\n            dialog._showAjaxIndicator();\n            history\n                .copy(true, name, copyAllDatasets)\n                .done(function(response) {\n                    deferred.resolve(response);\n                })\n                .fail(function(xhr, status, message) {\n                    var options = {\n                        name: name,\n                        copyAllDatasets: copyAllDatasets\n                    };\n                    ERROR_MODAL.ajaxErrorModal(\n                        history,\n                        xhr,\n                        options,\n                        dialog.errorMessage\n                    );\n                    deferred.rejectWith(deferred, arguments);\n                })\n                .done(function() {\n                    if (autoClose) {\n                        modal.hide();\n                    }\n                });\n        }\n\n        var originalClosingCallback = options.closing_callback;\n        modal.show(\n            _.extend(options, {\n                title: this.title({ name: history.get(\"name\") }),\n                body: $(\n                    dialog._template({\n                        name: defaultCopyName,\n                        isAnon: Galaxy.user.isAnonymous(),\n                        allowAll: allowAll,\n                        copyWhat: defaultCopyWhat,\n                        activeLabel: this.activeLabel,\n                        allLabel: this.allLabel,\n                        anonWarning: this.anonWarning\n                    })\n                ),\n                buttons: _.object([\n                    [\n                        _l(\"Cancel\"),\n                        function() {\n                            modal.hide();\n                        }\n                    ],\n                    [this.submitLabel, checkNameAndCopy]\n                ]),\n                height: \"auto\",\n                closing_events: true,\n                closing_callback: function _historyCopyClose(cancelled) {\n                    if (cancelled) {\n                        deferred.reject({ cancelled: true });\n                    }\n                    if (originalClosingCallback) {\n                        originalClosingCallback(cancelled);\n                    }\n                }\n            })\n        );\n\n        // set the default dataset copy, autofocus the title, and set up for a simple return\n        modal\n            .$(\"#copy-modal-title\")\n            .focus()\n            .select();\n        modal.$(\"#copy-modal-title\").on(\"keydown\", function(ev) {\n            if (ev.keyCode === 13) {\n                ev.preventDefault();\n                checkNameAndCopy();\n            }\n        });\n\n        return deferred;\n    }\n};\n\n//==============================================================================\n// maintain the (slight) distinction between copy and import\n/**\n * Subclass CopyDialog to use the import language.\n */\nvar ImportDialog = _.extend({}, CopyDialog, {\n    defaultName: _.template(\"imported: <%- name %>\"),\n    title: _.template(_l(\"Importing history\") + ' \"<%- name %>\"'),\n    submitLabel: _l(\"Import\"),\n    errorMessage: _l(\"History could not be imported.\"),\n    progressive: _l(\"Importing history\"),\n    activeLabel: _l(\"Import only the active, non-deleted datasets\"),\n    allLabel: _l(\"Import all datasets including deleted ones\"),\n    anonWarning:\n        _l(\n            \"As an anonymous user, unless you login or register, you will lose your current history \"\n        ) + _l(\"after importing this history. \")\n});\n\n//==============================================================================\n/**\n * Main interface for both history import and history copy dialogs.\n * @param  {Backbone.Model} history     the history to copy\n * @param  {Object}         options     a hash\n * @return {jQuery.Deferred}            promise that fails on close and succeeds on copy\n *\n * options:\n *     (this object is also passed to the modal used to display the dialog and accepts modal options)\n *     {Function} nameFn    if defined, use this to build the default name shown to the user\n *                          (the fn is passed: {name: <original history's name>})\n *     {bool} useImport     if true, use the 'import' language (instead of Copy)\n *     {bool} allowAll      if true, allow the user to choose between copying all datasets and\n *                          only non-deleted datasets\n *     {String} allDatasets default initial checked radio button: 'copy-all' or 'copy-non-deleted',\n */\nvar historyCopyDialog = function(history, options) {\n    options = options || {};\n    // create our own modal if Galaxy doesn't have one (mako tab without use_panels)\n    var modal = window.parent.Galaxy.modal || new MODAL.View({});\n    return options.useImport\n        ? ImportDialog.dialog(modal, history, options)\n        : CopyDialog.dialog(modal, history, options);\n};\n\n//==============================================================================\nexport default historyCopyDialog;\n"]}