{"version":3,"sources":["mvc/history/copy-dialog.js"],"names":["define","MODAL","ERROR_MODAL","_l","CopyDialog","title","template","submitLabel","errorMessage","progressive","activeLabel","allLabel","anonWarning","_template","_","_showAjaxIndicator","modal","indicator","dialog","options","defaultCopyName","defaultCopyWhat","allowAll","autoClose","join","this","$","empty","append","css","margin-top","body","name","val","isAnon","prop","buttons","hide","copyAllDatasets","done","height","resolve","response","closing_callback","status","_historyCopyClose","cancelled","deferred","xhr","rejectWith","arguments","originalClosingCallback","show","history","fail","jQuery","get","allDatasets","isUndefined","extend","on","ev","keyCode","preventDefault","checkNameAndCopy","copyWhat","object","closing_events","ImportDialog","reject","focus","select","historyCopyDialog","window","useImport","parent","Galaxy","View"],"mappings":"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","file":"../../../scripts/mvc/history/copy-dialog.js","sourcesContent":["define([\n    \"mvc/ui/ui-modal\",\n    \"mvc/ui/error-modal\",\n    \"utils/localization\"\n], function( MODAL, ERROR_MODAL, _l ){\n\n'use strict';\n\n//==============================================================================\n/**\n * A dialog/modal that allows copying a user history or 'importing' from user\n * another. Generally called via historyCopyDialog below.\n * @type {Object}\n */\nvar CopyDialog = {\n\n    // language related strings/fns\n    defaultName     : _.template( \"Copy of '<%- name %>'\" ),\n    title           : _.template( _l( 'Copying history' ) + ' \"<%- name %>\"' ),\n    submitLabel     : _l( 'Copy' ),\n    errorMessage    : _l( 'History could not be copied.' ),\n    progressive     : _l( 'Copying history' ),\n    activeLabel     : _l( 'Copy only the active, non-deleted datasets' ),\n    allLabel        : _l( 'Copy all datasets including deleted ones' ),\n    anonWarning     : _l( 'As an anonymous user, unless you login or register, you will lose your current history ' ) +\n                      _l( 'after copying this history. ' ),\n\n    // template for modal body\n    _template : _.template([\n        //TODO: remove inline styles\n        // show a warning message for losing current to anon users\n        '<% if( isAnon ){ %>',\n            '<div class=\"warningmessage\">',\n                '<%- anonWarning %>',\n                _l( 'You can' ),\n                ' <a href=\"/user/login\">', _l( 'login here' ), '</a> ', _l( 'or' ), ' ',\n                ' <a href=\"/user/create\">', _l( 'register here' ), '</a>.',\n            '</div>',\n        '<% } %>',\n        '<form>',\n            '<label for=\"copy-modal-title\">',\n                _l( 'Enter a title for the new history' ), ':',\n            '</label><br />',\n            // TODO: could use required here and the form validators\n            // NOTE: use unescaped here if escaped in the modal function below\n            '<input id=\"copy-modal-title\" class=\"form-control\" style=\"width: 100%\" value=\"<%= name %>\" />',\n            '<p class=\"invalid-title bg-danger\" style=\"color: red; margin: 8px 0px 8px 0px; display: none\">',\n                _l( 'Please enter a valid history title' ),\n            '</p>',\n            // if allowAll, add the option to copy deleted datasets, too\n            '<% if( allowAll ){ %>',\n                '<br />',\n                '<p>', _l( 'Choose which datasets from the original history to include:' ), '</p>',\n                // copy non-deleted is the default\n                '<input name=\"copy-what\" type=\"radio\" id=\"copy-non-deleted\" value=\"copy-non-deleted\" ',\n                    '<% if( copyWhat === \"copy-non-deleted\" ){ print( \"checked\" ); } %>/>',\n                '<label for=\"copy-non-deleted\"> <%- activeLabel %></label>',\n                '<br />',\n                '<input name=\"copy-what\" type=\"radio\" id=\"copy-all\" value=\"copy-all\" ',\n                    '<% if( copyWhat === \"copy-all\" ){ print( \"checked\" ); } %>/>',\n                '<label for=\"copy-all\"> <%- allLabel %></label>',\n            '<% } %>',\n        '</form>'\n    ].join( '' )),\n\n    // empty modal body and let the user know the copy is happening\n    _showAjaxIndicator : function _showAjaxIndicator(){\n        var indicator = '<p><span class=\"fa fa-spinner fa-spin\"></span> ' + this.progressive + '...</p>';\n        this.modal.$( '.modal-body' ).empty().append( indicator ).css({ 'margin-top': '8px' });\n    },\n\n    // (sorta) public interface - display the modal, render the form, and potentially copy the history\n    // returns a jQuery.Deferred done->history copied, fail->user cancelled\n    dialog : function _dialog( modal, history, options ){\n        options = options || {};\n\n        var dialog = this,\n            deferred = jQuery.Deferred(),\n            // TODO: getting a little byzantine here\n            defaultCopyNameFn = options.nameFn || this.defaultName,\n            defaultCopyName = defaultCopyNameFn({ name: history.get( 'name' ) }),\n            // TODO: these two might be simpler as one 3 state option (all,active,no-choice)\n            defaultCopyWhat = options.allDatasets? 'copy-all' : 'copy-non-deleted',\n            allowAll = !_.isUndefined( options.allowAll )? options.allowAll : true,\n            autoClose = !_.isUndefined( options.autoClose )? options.autoClose : true;\n\n        this.modal = modal;\n\n\n        // validate the name and copy if good\n        function checkNameAndCopy(){\n            var name = modal.$( '#copy-modal-title' ).val();\n            if( !name ){\n                modal.$( '.invalid-title' ).show();\n                return;\n            }\n            // get further settings, shut down and indicate the ajax call, then hide and resolve/reject\n            var copyAllDatasets = modal.$( 'input[name=\"copy-what\"]:checked' ).val() === 'copy-all';\n            modal.$( 'button' ).prop( 'disabled', true );\n            dialog._showAjaxIndicator();\n            history.copy( true, name, copyAllDatasets )\n                .done( function( response ){\n                    deferred.resolve( response );\n                })\n                .fail( function( xhr, status, message ){\n                    var options = { name: name, copyAllDatasets: copyAllDatasets };\n                    ERROR_MODAL.ajaxErrorModal( history, xhr, options, dialog.errorMessage );\n                    deferred.rejectWith( deferred, arguments );\n                })\n                .done( function(){\n                    if( autoClose ){ modal.hide(); }\n                });\n        }\n\n        var originalClosingCallback = options.closing_callback;\n        modal.show( _.extend( options, {\n            title   : this.title({ name: history.get( 'name' ) }),\n            body    : $( dialog._template({\n                    name        : defaultCopyName,\n                    isAnon      : Galaxy.user.isAnonymous(),\n                    allowAll    : allowAll,\n                    copyWhat    : defaultCopyWhat,\n                    activeLabel : this.activeLabel,\n                    allLabel    : this.allLabel,\n                    anonWarning : this.anonWarning,\n                })),\n            buttons : _.object([\n                    [ _l( 'Cancel' ),   function(){ modal.hide(); } ],\n                    [ this.submitLabel, checkNameAndCopy ]\n                ]),\n            height          : 'auto',\n            closing_events  : true,\n            closing_callback: function _historyCopyClose( cancelled ){\n                    if( cancelled ){\n                        deferred.reject({ cancelled : true });\n                    }\n                    if( originalClosingCallback ){\n                        originalClosingCallback( cancelled );\n                    }\n                }\n            }));\n\n        // set the default dataset copy, autofocus the title, and set up for a simple return\n        modal.$( '#copy-modal-title' ).focus().select();\n        modal.$( '#copy-modal-title' ).on( 'keydown', function( ev ){\n            if( ev.keyCode === 13 ){\n                ev.preventDefault();\n                checkNameAndCopy();\n            }\n        });\n\n        return deferred;\n    },\n};\n\n//==============================================================================\n// maintain the (slight) distinction between copy and import\n/**\n * Subclass CopyDialog to use the import language.\n */\nvar ImportDialog = _.extend( {}, CopyDialog, {\n    defaultName     : _.template( \"imported: <%- name %>\" ),\n    title           : _.template( _l( 'Importing history' ) + ' \"<%- name %>\"' ),\n    submitLabel     : _l( 'Import' ),\n    errorMessage    : _l( 'History could not be imported.' ),\n    progressive     : _l( 'Importing history' ),\n    activeLabel     : _l( 'Import only the active, non-deleted datasets' ),\n    allLabel        : _l( 'Import all datasets including deleted ones' ),\n    anonWarning     : _l( 'As an anonymous user, unless you login or register, you will lose your current history ' ) +\n                      _l( 'after importing this history. ' ),\n\n});\n\n//==============================================================================\n/**\n * Main interface for both history import and history copy dialogs.\n * @param  {Backbone.Model} history     the history to copy\n * @param  {Object}         options     a hash\n * @return {jQuery.Deferred}            promise that fails on close and succeeds on copy\n *\n * options:\n *     (this object is also passed to the modal used to display the dialog and accepts modal options)\n *     {Function} nameFn    if defined, use this to build the default name shown to the user\n *                          (the fn is passed: {name: <original history's name>})\n *     {bool} useImport     if true, use the 'import' language (instead of Copy)\n *     {bool} allowAll      if true, allow the user to choose between copying all datasets and\n *                          only non-deleted datasets\n *     {String} allDatasets default initial checked radio button: 'copy-all' or 'copy-non-deleted',\n */\nvar historyCopyDialog = function( history, options ){\n    options = options || {};\n    // create our own modal if Galaxy doesn't have one (mako tab without use_panels)\n    var modal = window.parent.Galaxy.modal || new MODAL.View({});\n    return options.useImport?\n        ImportDialog.dialog( modal, history, options ):\n        CopyDialog.dialog( modal, history, options );\n};\n\n\n//==============================================================================\n    return historyCopyDialog;\n});\n"]}