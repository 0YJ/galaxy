{"version":3,"sources":["mvc/history/multi-panel.js"],"names":["_localization","require","_historyModel","_historyViewEdit","_copyDialog","_errorModal","_baseMvc","_ajaxQueue","logNamespace","HistoryViewColumn","Backbone","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","tagName","className","id","this","model","get","initialize","options","purgeAllowed","_","isUndefined","panel","createPanel","setUpListeners","panelOptions","_historyViewEdit2","HistoryViewEdit","defaults","$scrollContainer","$el","column","once","trigger","setUpPanelListeners","listenTo","dragItems","view:expanded view:rendered","view","$","off","inView","viewLeft","viewRight","columnLeft","offset","left","width","$panel","render","speed","undefined","toJSON","columnRight","css","setUpBehaviors","template","data","modelData","isCurrentHistory","currentHistory","controlsLeftTemplate","history","controlsRightTemplate","join","setElement","_renderDropTargetHelp","renderPanel","click .switch-to.btn","click .delete-history","_delete","done","click .undelete-history","setAsCurrent","click .purge-history","_localization2","undelete","click .copy-history","copy","_copyDialog2","variable","toString","MultiPanelColumns","log","columnWidth","borderWidth","columnGap","headerHeight","footerHeight","controlsHeight","historySearch","datasetSearch","addClass","setCollection","collection","createColumns","_ajaxQueue2","NamedAjaxQueue","columnMap","columnOptions","multipanel","models","setUpCollectionListeners","fetchMore","stopListening","_historyModel2","HistoryCollection","sort","addModels","setCurrentHistory","scrollLeft","forEach","addColumn","oldCurrentColumn","error","errorHandler","newCurrentColumn","all-fetched","_postFetchAll","new-current","addAsCurrentColumn","set-as-current","change:deleted change:purged","handleDeletedHistory","renderColumns","fetchData","remove","findWhere","height","currentHistoryId","xhr","isString","message","title","includeDeleted","removeColumn","createColumn","status","readyState","searchItems","queueHdaFetchDetails","ajaxErrorModal","_errorModal2","apply","toArray","arguments","create","ev","current","newColumn","each","i","queueHdaFetch","Galaxy","config","allow_user_dataset_purge","widthToRemove","fadeOut","checkColumnsInView","_recalcFirstColumnHeight","setUpColumnListeners","_dropData","currentColumnDropTargetOn","contents","queue","name","fn","in-view","view:draggable:dragstart","JSON","parse","dataTransfer","getData","filters","sortedColumns","filtered","filter","every","call","isCopyable","json","currentPage","add","toCopy","reverse","content","responses","fetch","columnMapLength","Object","keys","length","sortedFilteredColumns","sortedAndFiltered","self","loadingIndicatorTemplate","index","map","_addColumns","isNumber","fxSpeed","$middle","preventStackWidthAdj","numColumns","fetchOptions","silent","details","append","columns","needsContentsLoaded","appendTo","_calcMiddleWidth","hdaQueue","start","contentsShown","ids","values","storage","allExpanded","window","location","_clickToggleDeletedHistories","toggleDeletedHistories","currentTarget","toggleOptionsPopover","renderItems","running","show","haveDetails","delay","toggleShowDeleted","progressivelyFetchDetails","_clickToggleHiddenDatasets","_renderEmptyMessage","renderInfo","msg","text","events","click .done.btn","click #include-deleted","click .order .set-order","currentHistoryModel","close","root","is","val","searchInput","placeholder","onfirstsearch","fetchAll","toggleHiddenDatasets","matchesAll","onclear","slice","progress","clear","searchFor","_scrollLeft","_moreOptionsPopover","debouncedInView","debounce","viewport","checkForEndOfScroll","parent","onsearch","container","placement","optionsPopoverTemplate","controlHeight","find","$firstColumn","$outerMiddle","curr","_viewport","deferred","END_PADDING","scrollRight","resize","currentColumn","dataDropped","currentColumnDropTargetOff","popover","html","first","middleHeight","orderDescriptions","size","right","columnsInView","vp","dropTargetOn","prototype","dataDrop","dropTarget","mainTemplate","update_time","update_time-asc","name-dsc","size-asc"],"mappings":"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","file":"../../../scripts/mvc/history/multi-panel.js","sourcesContent":["import _l from \"utils/localization\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_VIEW_EDIT from \"mvc/history/history-view-edit\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport baseMVC from \"mvc/base-mvc\";\nimport ajaxQueue from \"utils/ajax-queue\";\nimport \"ui/mode-button\";\nimport \"ui/search-input\";\n\nvar logNamespace = \"history\";\n/* ==============================================================================\nTODO:\n\n============================================================================== */\n/** @class A container for a history panel that renders controls for that history (delete, copy, etc.) */\nvar HistoryViewColumn = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    tagName: \"div\",\n    className: \"history-column flex-column flex-row-container\",\n    id: function id() {\n        if (!this.model) {\n            return \"\";\n        }\n        return \"history-column-\" + this.model.get(\"id\");\n    },\n\n    // ------------------------------------------------------------------------ set up\n    /** set up passed-in panel (if any) and listeners */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.purgeAllowed = !_.isUndefined(options.purgeAllowed)\n            ? options.purgeAllowed\n            : false;\n        this.panel = options.panel || this.createPanel(options);\n\n        this.setUpListeners();\n    },\n\n    /** create a history panel for this column */\n    createPanel: function createPanel(panelOptions) {\n        return new HISTORY_VIEW_EDIT.HistoryViewEdit(\n            _.defaults(panelOptions, {\n                model: this.model,\n                // non-current panels should set their hdas to draggable\n                purgeAllowed: this.purgeAllowed,\n                dragItems: true,\n                $scrollContainer: function() {\n                    return this.$el;\n                }\n            })\n        );\n    },\n\n    /** set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        var column = this;\n        //this.log( 'setUpListeners', this );\n        this.once(\"rendered\", function() {\n            column.trigger(\"rendered:initial\", column);\n        });\n        this.setUpPanelListeners();\n    },\n\n    /** set listeners needed for panel */\n    setUpPanelListeners: function setUpPanelListeners() {\n        var column = this;\n        this.listenTo(\n            this.panel,\n            {\n                //'all': function(){ console.info( 'panel of ' + this, arguments ); },\n\n                // assumes panel will take the longest to render\n                rendered: function() {\n                    column.trigger(\"rendered\", column);\n                },\n                // when a panel's view expands turn off the click handler on the rerun button so that it uses it's href\n                // this allows the button to open the tool rerun form in a new tab (instead of erroring)\n                // TODO: hack\n                \"view:expanded view:rendered\": function(view) {\n                    view.$(\".rerun-btn\").off();\n                }\n            },\n            this\n        );\n    },\n\n    /** do the dimensions of this column overlap the given (horizontal) browser coords? */\n    inView: function(viewLeft, viewRight) {\n        var columnLeft = this.$el.offset().left,\n            columnRight = columnLeft + this.$el.width();\n        if (columnRight < viewLeft) {\n            return false;\n        }\n        if (columnLeft > viewRight) {\n            return false;\n        }\n        return true;\n    },\n\n    /** shortcut to the panel */\n    $panel: function $panel() {\n        return this.$(\".history-panel\");\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** render ths column, its panel, and set up plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        //this.log( this + '.render', this.$el, this.el );\n        //TODO: not needed\n        var modelData = this.model ? this.model.toJSON() : {};\n        this.$el.html(this.template(modelData));\n        this.renderPanel(speed);\n        // jq 1.12 doesn't fade/show properly when display: flex, re-set here\n        this.panel.$el.css(\"display\", \"flex\");\n        // if model and not children\n        // template\n        // render controls\n        this.setUpBehaviors();\n        // add panel\n        return this;\n    },\n\n    /** set up plugins */\n    setUpBehaviors: function setUpBehaviors() {\n        //this.log( 'setUpBehaviors:', this );\n        //var column = this;\n        // on panel size change, ...\n    },\n\n    /** column body template with inner div for panel based on data (model json) */\n    template: function template(data) {\n        data = _.extend(data || {}, {\n            isCurrentHistory: this.currentHistory\n        });\n        return $(\n            [\n                '<div class=\"panel-controls clear flex-row\">',\n                this.controlsLeftTemplate({\n                    history: data,\n                    view: this\n                }),\n                //'<button class=\"btn btn-default\">Herp</button>',\n                this.controlsRightTemplate({\n                    history: data,\n                    view: this\n                }),\n                \"</div>\",\n                '<div class=\"inner flex-row flex-column-container\">',\n                '<div id=\"history-',\n                data.id,\n                '\" class=\"history-column history-panel flex-column\"></div>',\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    /** render the panel contained in the column using speed for fx speed */\n    renderPanel: function renderPanel(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        this.panel.setElement(this.$panel()).render(speed);\n        if (this.currentHistory) {\n            this.panel.$list().before(this.panel._renderDropTargetHelp());\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ behaviors and events\n    /** event map */\n    events: {\n        // will make this the current history\n        \"click .switch-to.btn\": function() {\n            this.model.setAsCurrent();\n        },\n        //TODO: remove boiler plate from next 3\n        \"click .delete-history\": function() {\n            var column = this;\n            this.model._delete().done(function(data) {\n                column.render();\n            });\n        },\n        \"click .undelete-history\": function() {\n            var column = this;\n            this.model.undelete().done(function(data) {\n                column.render();\n            });\n        },\n        \"click .purge-history\": function() {\n            if (\n                confirm(\n                    _l(\"This will permanently remove the data. Are you sure?\")\n                )\n            ) {\n                var column = this;\n                this.model.purge().done(function(data) {\n                    column.render();\n                });\n            }\n        },\n        // will copy this history and make the copy the current history\n        \"click .copy-history\": \"copy\"\n    },\n\n    // ------------------------------------------------------------------------ non-current controls\n    /** Open a modal to get a new history name, copy it (if not canceled), and makes the copy current */\n    copy: function copy() {\n        historyCopyDialog(this.model);\n    },\n\n    // ------------------------------------------------------------------------ templates\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsLeftTemplate: _.template(\n        [\n            '<div class=\"pull-left\">',\n            \"<% if( data.history.isCurrentHistory ){ %>\",\n            '<strong class=\"current-label\">',\n            _l(\"Current History\"),\n            \"</strong>\",\n            \"<% } else { %>\",\n            '<button class=\"switch-to btn btn-default\">',\n            _l(\"Switch to\"),\n            \"</button>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsRightTemplate: _.template(\n        [\n            '<div class=\"pull-right\">',\n            \"<% if( !data.history.purged ){ %>\",\n            '<div class=\"panel-menu btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n            \"<% if( !data.history.deleted ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"copy-history\">',\n            _l(\"Copy\"),\n            \"</a></li>\",\n            //'<li><a href=\"javascript:void(0);\" class=\"publish-history\">',\n            //    _l( 'Publish' ),\n            //'</a></li>',\n            '<li><a href=\"javascript:void(0);\" class=\"delete-history\">',\n            _l(\"Delete\"),\n            \"</a></li>\",\n            \"<% } else /* if is deleted */ { %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"undelete-history\">',\n            _l(\"Undelete\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"<% if( data.view.purgeAllowed ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"purge-history\">',\n            _l(\"Purge\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"</ul>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return \"HistoryViewColumn(\" + (this.panel ? this.panel : \"\") + \")\";\n    }\n});\n\n//==============================================================================\n/** @class A view of a HistoryCollection and displays histories similarly to the current history panel.\n */\nvar MultiPanelColumns = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    className: \"multi-panel-history\",\n\n    // ------------------------------------------------------------------------ set up\n    /** Set up internals, history collection, and columns to display the history */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.log(this + \".init\", options);\n\n        // add the className here (since we gen. pass the el in options)\n        this.$el.addClass(this.className);\n\n        // --- instance vars\n        //TODO: move these to some defaults\n        this.options = {\n            columnWidth: 312,\n            borderWidth: 1,\n            columnGap: 8,\n            headerHeight: 29,\n            footerHeight: 0,\n            controlsHeight: 20\n        };\n\n        /** how many histories to get when fetching a new batch/page */\n        this.perPage = options.perPage || 10;\n\n        /** named ajax queue for loading hdas */\n        this.hdaQueue = new ajaxQueue.NamedAjaxQueue([], false);\n\n        // --- set up models, sub-views, and listeners\n        /** the original unfiltered and unordered collection of histories */\n        this.collection = null;\n        /** model id to column map */\n        this.columnMap = {};\n        /** model id to column map */\n        this.columnOptions = options.columnOptions || {};\n\n        /** what to search for within all histories */\n        this.historySearch = null;\n        /** what to search for within all datasets */\n        this.datasetSearch = null;\n\n        this.setCollection(options.histories);\n        this.setUpListeners();\n    },\n\n    /** Set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        var multipanel = this;\n        //multipanel.log( 'setUpListeners', multipanel );\n        this.on(\"end-of-scroll\", function() {\n            multipanel.collection.fetchMore();\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    setCollection: function setCollection(collection) {\n        // console.log( 'setCollection:', collection );\n        this.stopListening(this.collection);\n\n        this.collection = collection || new HISTORY_MODEL.HistoryCollection();\n        this.setUpCollectionListeners();\n\n        this.createColumns();\n        this.hdaQueue.clear();\n\n        this.trigger(\"new-collection\", this);\n        return this;\n    },\n\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    addModels: function addModels(models, collection, options) {\n        // console.log( 'addModels:', models, collection, options );\n        options = options || {};\n        var multipanel = this;\n        models = _.isArray(models) ? models : [models];\n        models.forEach(function(model) {\n            multipanel.addColumn(model, false);\n            // if this is from a fetch, sort will be called and it will call render\n        });\n        return this;\n    },\n\n    /** Set up listeners for the collection - handling: added histories, change of current, deletion, and sorting */\n    setUpCollectionListeners: function() {\n        var multipanel = this;\n        multipanel.listenTo(multipanel.collection, {\n            // handle ajax errors from the collection\n            error: multipanel.errorHandler,\n            // add multiple models\n            add: multipanel.addModels,\n            // when all the histories a user has have been fetched\n            \"all-fetched\": multipanel._postFetchAll,\n            // handle addition of histories, triggered by column copy and create new\n            \"new-current\": multipanel.addAsCurrentColumn,\n            // handle setting a history as current, triggered by history.setAsCurrent\n            \"set-as-current\": multipanel.setCurrentHistory,\n            // handle deleting a history (depends on whether panels is including deleted or not)\n            \"change:deleted change:purged\": multipanel.handleDeletedHistory,\n            // re-render columns after a sort\n            sort: function() {\n                multipanel.renderColumns(0);\n            }\n        });\n    },\n\n    _postFetchAll: function(fetchData) {\n        // console.log( '_postFetchAll' );\n        this.$(\".histories-loading-indicator\").remove();\n        // when new histories is fetched and the indicator is not required,\n        // the panel will jump slightly left - totally aesthetic but jarring\n        // TODO: this probably would be best handled elsewhere during a refinement cycle (if any)\n        if (!this.historySearch) {\n            var $scrollContainer = this.$(\".outer-middle\");\n            $scrollContainer.scrollLeft($scrollContainer.scrollLeft() + 24);\n        }\n    },\n\n    /** Re-render and set currentHistoryId to reflect a new current history */\n    setCurrentHistory: function setCurrentHistory(history) {\n        this.log(\"setCurrentHistory:\", history);\n        var oldCurrentColumn = _.findWhere(this.columnMap, {\n            currentHistory: true\n        });\n        if (oldCurrentColumn) {\n            oldCurrentColumn.currentHistory = false;\n            oldCurrentColumn.$el.height(\"\");\n        }\n\n        var newCurrentColumn = this.columnMap[this.collection.currentHistoryId];\n        newCurrentColumn.currentHistory = true;\n        this.collection.sort();\n        this._recalcFirstColumnHeight();\n        return newCurrentColumn;\n    },\n\n    /** Either remove a deleted history or re-render it to show the deleted message\n     *      based on collection.includeDeleted\n     */\n    handleDeletedHistory: function handleDeletedHistory(history) {\n        if (history.get(\"deleted\") || history.get(\"purged\")) {\n            this.log(\n                \"handleDeletedHistory\",\n                this.collection.includeDeleted,\n                history\n            );\n            var multipanel = this,\n                column = multipanel.columnMap[history.id];\n            if (!column) {\n                return;\n            }\n\n            // if it's the current column, create a new, empty history as the new current\n            if (column.model.id === this.collection.currentHistoryId) {\n                //TODO: figuring out the order of async here is tricky\n                //  - for now let the user handle the two step process\n                //multipanel.collection.create().done( function(){\n                //    if( !multipanel.collection.includeDeleted ){ multipanel.removeColumn( column, false ); }\n                //});\n            } else if (!multipanel.collection.includeDeleted) {\n                multipanel.removeColumn(column);\n            }\n        }\n    },\n\n    // ........................................................................ error handling\n    /** Event handler for errors (from the history collection mainly)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  (e.g. this.trigger( 'error', 'Heres a message', 'Heres a title' ))\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n    errorHandler: function(model, xhr, options) {\n        // interrupted ajax or no connection\n        if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n            // return ERROR_MODAL.offlineErrorModal();\n            // fail silently\n            return;\n        }\n        // otherwise, leave something to report in the console\n        this.error(model, xhr, options);\n        // and feedback to a modal\n        // if sent two strings (and possibly details as 'options'), use those as message and title\n        if (_.isString(model) && _.isString(xhr)) {\n            var message = model;\n            var title = xhr;\n            return ERROR_MODAL.errorModal(message, title, options);\n        }\n        // bad gateway\n        // TODO: possibly to global handler\n        if (xhr && xhr.status === 502) {\n            return ERROR_MODAL.badGatewayErrorModal();\n        }\n        return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n    },\n\n    /** If Galaxy object is available handle error there, otherwise, locally (and crudely) */\n    _ajaxErrorHandler: function() {\n        ERROR_MODAL.ajaxErrorModal.apply(null, _.toArray(arguments));\n    },\n\n    /** create a new history and set it to current */\n    create: function(ev) {\n        return this.collection.create({ current: true });\n    },\n\n    // ------------------------------------------------------------------------ columns\n    /** create columns from collection */\n    createColumns: function createColumns(models, columnOptions) {\n        columnOptions = columnOptions || this.options.columnOptions;\n        var multipanel = this;\n        // clear column map\n        // TODO: make cummulative\n        multipanel.columnMap = {};\n        multipanel.collection.each(function(model, i) {\n            var column = multipanel.createColumn(model, columnOptions);\n            multipanel.columnMap[model.id] = column;\n        });\n    },\n\n    /** create a column and its panel and set up any listeners to them */\n    createColumn: function createColumn(history, options) {\n        // options passed can be re-used, so extend them before adding the model to prevent pollution for the next\n        options = _.extend({}, options, {\n            model: history,\n            purgeAllowed: Galaxy.config.allow_user_dataset_purge\n        });\n        var column = new HistoryViewColumn(options);\n        if (history.id === this.collection.currentHistoryId) {\n            column.currentHistory = true;\n        }\n        this.setUpColumnListeners(column);\n        if (this.datasetSearch) {\n            column.panel.searchItems(this.datasetSearch);\n            this.queueHdaFetchDetails(column);\n        }\n        return column;\n    },\n\n    /** add a new column for history and render all columns if render is true */\n    addColumn: function add(history, render) {\n        // console.debug( 'adding column for:', history, render );\n        render = render !== undefined ? render : true;\n        var newColumn = this.createColumn(history);\n        this.columnMap[history.id] = newColumn;\n        if (render) {\n            this.renderColumns();\n        }\n        return newColumn;\n    },\n\n    /** add a new column for history and make it the current history/column */\n    addAsCurrentColumn: function add(history, collection, options) {\n        //this.log( 'adding current column for:', history );\n        var multipanel = this,\n            newColumn = this.addColumn(history, false);\n        this.setCurrentHistory(history);\n        newColumn.once(\"rendered\", function() {\n            multipanel.queueHdaFetch(newColumn);\n        });\n        return newColumn;\n    },\n\n    /** remove the given column, it's listeners, and optionally render */\n    removeColumn: function remove(column, render) {\n        render = render !== undefined ? render : true;\n        this.log(\"removeColumn\", column);\n        if (!column) {\n            return;\n        }\n        var multipanel = this,\n            widthToRemove = this.options.columnWidth + this.options.columnGap;\n        column.$el.fadeOut(\"fast\", function() {\n            if (render) {\n                $(this).remove();\n                multipanel\n                    .$(\".middle\")\n                    .width(multipanel.$(\".middle\").width() - widthToRemove);\n                multipanel.checkColumnsInView();\n                multipanel._recalcFirstColumnHeight();\n            }\n\n            //TODO: to freeColumn (where Columns have freePanel)\n            multipanel.stopListening(column.panel);\n            multipanel.stopListening(column);\n            delete multipanel.columnMap[column.model.id];\n            column.remove();\n        });\n    },\n\n    /** set up listeners for a column and it's panel - handling: hda lazy-loading, drag and drop */\n    setUpColumnListeners: function setUpColumnListeners(column) {\n        var multipanel = this;\n        multipanel.listenTo(column, {\n            //'all': function(){ console.info( 'column ' + column + ':', arguments ) },\n            \"in-view\": multipanel.queueHdaFetch\n        });\n\n        multipanel.listenTo(column.panel, {\n            //'all': function(){ console.info( 'panel ' + column.panel + ':', arguments ) },\n\n            \"view:draggable:dragstart\": function(ev, view, panel, column) {\n                multipanel._dropData = JSON.parse(\n                    ev.dataTransfer.getData(\"text\")\n                );\n                multipanel.currentColumnDropTargetOn();\n            },\n            \"view:draggable:dragend\": function(ev, view, panel, column) {\n                multipanel._dropData = null;\n                multipanel.currentColumnDropTargetOff();\n            },\n            \"droptarget:drop\": function(ev, data, panel) {\n                //note: bad copy sources fail silently\n                var toCopy = multipanel._dropData.filter(function(json) {\n                    return panel.model.contents.isCopyable(json);\n                });\n                multipanel._dropData = null;\n\n                var queue = new ajaxQueue.NamedAjaxQueue();\n                if (panel.model.contents.currentPage !== 0) {\n                    queue.add({\n                        name: \"fetch-front-page\",\n                        fn: function() {\n                            return panel.model.contents.fetchPage(0);\n                        }\n                    });\n                }\n                // need to reverse to better match expected order\n                // TODO: reconsider order in list-view._setUpItemViewListeners, dragstart (instead of here)\n                toCopy.reverse().forEach(function(content) {\n                    queue.add({\n                        name: \"copy-\" + content.id,\n                        fn: function() {\n                            return panel.model.contents.copy(content);\n                        }\n                    });\n                });\n                queue.start();\n                queue.done(function(responses) {\n                    panel.model.fetch();\n                });\n            }\n        });\n    },\n\n    /** conv. fn to count the columns in columnMap */\n    columnMapLength: function() {\n        return Object.keys(this.columnMap).length;\n    },\n\n    /** return array of Columns filtered by filters and sorted to match the collection\n     *  @param: filters Function[] array of filter fns\n     */\n    sortedFilteredColumns: function(filters) {\n        filters = filters || this.filters;\n        if (!filters || !filters.length) {\n            return this.sortedColumns();\n        }\n        var multipanel = this;\n        return multipanel.sortedColumns().filter(function(column, index) {\n            var filtered =\n                column.currentHistory ||\n                _.every(\n                    filters.map(function(filter) {\n                        return filter.call(column);\n                    })\n                );\n            return filtered;\n        });\n    },\n\n    /** return array of Columns sorted to match the collection */\n    sortedColumns: function() {\n        var multipanel = this;\n        var sorted = this.collection.map(function(history, index) {\n            return multipanel.columnMap[history.id];\n        });\n        return sorted;\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** Render this view, columns, and set up view plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        var multipanel = this;\n\n        multipanel.log(multipanel + \".render\");\n        multipanel.$el.html(multipanel.mainTemplate(multipanel));\n        multipanel.renderColumns(speed);\n\n        // set the columns to full height allowed and set up behaviors for thie multipanel\n        multipanel.setUpBehaviors();\n        //TODO: wrong - has to wait for columns to render\n        //  - create a column listener that fires this when all columns are rendered\n        multipanel.trigger(\"rendered\", multipanel);\n        return multipanel;\n    },\n\n    /** Render the columns and panels */\n    renderColumns: function renderColumns(speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        // console.log( 'renderColumns:', speed );\n        // render columns and track the total number rendered, firing an event when all are rendered\n        var self = this;\n        var sortedAndFiltered = self.sortedFilteredColumns();\n        // console.log( '\\t sortedAndFiltered:', sortedAndFiltered );\n        var $middle = self.$(\".middle\").empty();\n\n        self._addColumns(sortedAndFiltered, speed);\n        if (!self.collection.allFetched) {\n            $middle.append(self.loadingIndicatorTemplate(self));\n        }\n        //TODO: sorta - at least their fx queue has started the re-rendering\n        self.trigger(\"columns-rendered\", sortedAndFiltered, self);\n\n        if (self.datasetSearch && sortedAndFiltered.length <= 1) {\n        } else {\n            // check for in-view, hda lazy-loading if so\n            self.checkColumnsInView();\n            // the first, current column has position: fixed and flex css will not apply - adjust height manually\n            self._recalcFirstColumnHeight();\n        }\n        return sortedAndFiltered;\n    },\n\n    _addColumns: function(columns, speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        var $middle = this.$(\".middle\");\n\n        var numExisting = $middle.children(\".history-column\").length;\n        $middle.width(this._calcMiddleWidth(columns.length + numExisting));\n\n        columns.forEach(function(column, i) {\n            column\n                .delegateEvents()\n                .render(speed)\n                .$el.appendTo($middle);\n        });\n    },\n\n    _calcMiddleWidth: function(numColumns) {\n        var preventStackWidthAdj = 16;\n        return (\n            numColumns * (this.options.columnWidth + this.options.columnGap) +\n            // last column gap\n            this.options.columnGap +\n            // the amount that safely prevents stacking of columns when adding a new one\n            preventStackWidthAdj\n        );\n    },\n\n    //TODO: combine the following two more sensibly\n    //TODO: could have HistoryContents.haveDetails return false\n    //      if column.model.contents.length === 0 && !column.model.get( 'empty' ) then just check that\n    /** Get the *summary* contents of a column's history (and details on any expanded contents),\n     *      queueing the ajax call and using a named queue to prevent the call being sent twice\n     */\n    queueHdaFetch: function queueHdaFetch(column) {\n        // console.log( column.model + '.contentsShown:', column.model.contentsShown() );\n        var contents = column.model.contents;\n        // console.log( 'queueHdaFetch:', column, column.model.get( 'contents_active' ) );\n        // if the history model says it has hdas but none are present, queue an ajax req for them\n        if (contents.length === 0 && column.model.contentsShown()) {\n            var fetchOptions = { silent: true };\n            var ids = _.values(contents.storage.allExpanded()).join();\n            if (ids) {\n                fetchOptions.details = ids;\n            }\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents\n                        .fetchCurrentPage(fetchOptions)\n                        .done(function() {\n                            column.panel.renderItems();\n                        });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** Get the *detailed* json for *all* of a column's history's contents - req'd for searching */\n    queueHdaFetchDetails: function(column) {\n        var contents = column.model.contents;\n        var needsContentsLoaded =\n            contents.length === 0 && column.model.contentsShown();\n        if (needsContentsLoaded || !contents.haveDetails()) {\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents\n                        .progressivelyFetchDetails()\n                        .done(function() {\n                            column.panel._renderEmptyMessage();\n                        });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** put a text msg in the header */\n    renderInfo: function(msg) {\n        return this.$(\".header .header-info\").text(msg);\n    },\n\n    // ------------------------------------------------------------------------ events/behaviors\n    events: {\n        // will move to the server root (gen. Analyze data)\n        \"click .done.btn\": \"close\",\n        // creates a new empty history and makes it current\n        \"click .create-new.btn\": \"create\",\n        \"click #include-deleted\": \"_clickToggleDeletedHistories\",\n        // these change the collection and column sort order\n        \"click .order .set-order\": \"_chooseOrder\",\n        \"click #toggle-deleted\": \"_clickToggleDeletedDatasets\",\n        \"click #toggle-hidden\": \"_clickToggleHiddenDatasets\"\n        //'dragstart .list-item .title-bar'                       : function( e ){ console.debug( 'ok' ); }\n    },\n\n    close: function(ev) {\n        //TODO: switch to pushState/router\n        window.location = Galaxy.root;\n    },\n\n    _clickToggleDeletedHistories: function(ev) {\n        this.toggleDeletedHistories($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    /** Include deleted histories in the collection */\n    toggleDeletedHistories: function(show) {\n        if (show) {\n            window.location =\n                Galaxy.root +\n                \"history/view_multiple?include_deleted_histories=True\";\n        } else {\n            window.location = Galaxy.root + \"history/view_multiple\";\n        }\n    },\n\n    _clickToggleDeletedDatasets: function(ev) {\n        this.toggleDeletedDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleDeletedDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach(function(column, i) {\n            _.delay(function() {\n                column.panel.toggleShowDeleted(show, false);\n            }, i * 200);\n        });\n    },\n\n    _clickToggleHiddenDatasets: function(ev) {\n        this.toggleHiddenDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleHiddenDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach(function(column, i) {\n            _.delay(function() {\n                column.panel.toggleShowHidden(show, false);\n            }, i * 200);\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    _chooseOrder: function(ev) {\n        var multipanel = this,\n            collection = multipanel.collection,\n            orderKey = $(ev.currentTarget).data(\"order\");\n        // set the sort order text also\n        multipanel\n            .$(\".current-order\")\n            .text(multipanel.orderDescriptions[orderKey]);\n        multipanel.toggleOptionsPopover();\n        // set the order and re-fetch using the new order, saving the current history as the first\n        collection.setOrder(orderKey);\n        var currentHistoryModel = collection.slice(0, 1);\n        collection.fetchFirst().done(function() {\n            collection.unshift(currentHistoryModel, {\n                silent: true\n            });\n            multipanel.createColumns();\n            // need to clear this or previously fetched contents won't refetch now (bc of named queue)\n            multipanel.hdaQueue.clear();\n            multipanel.render();\n        });\n        multipanel.once(\"columns-rendered\", multipanel._scrollLeft);\n        //TODO: check allFetched and do not reset if so - just sort instead\n    },\n\n    /** scroll the column container right or left */\n    _scrollLeft: function(val) {\n        val = _.isNumber(val) ? val : 0;\n        this.$(\".outer-middle\").scrollLeft(val);\n    },\n\n    /** Set up any view plugins */\n    setUpBehaviors: function() {\n        var multipanel = this;\n        multipanel._moreOptionsPopover();\n\n        // input to search histories\n        multipanel.$(\"#search-histories\").searchInput({\n            name: \"search-histories\",\n            placeholder: _l(\"search histories\"),\n\n            onfirstsearch: function(searchFor) {\n                multipanel.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                multipanel.renderInfo(_l(\"loading all histories for search\"));\n                multipanel.collection.fetchAll().done(function() {\n                    multipanel\n                        .$(\"#search-histories\")\n                        .searchInput(\"toggle-loading\");\n                    multipanel.renderInfo(\"\");\n                });\n            },\n            onsearch: function(searchFor) {\n                multipanel.historySearch = searchFor;\n                multipanel.filters = [\n                    function() {\n                        return this.model.matchesAll(multipanel.historySearch);\n                    }\n                ];\n                multipanel.renderColumns(0);\n            },\n            onclear: function(searchFor) {\n                multipanel.historySearch = null;\n                //TODO: remove specifically not just reset\n                multipanel.filters = [];\n                multipanel.renderColumns(0);\n            }\n        });\n\n        // input to search datasets\n        multipanel.$(\"#search-datasets\").searchInput({\n            name: \"search-datasets\",\n            placeholder: _l(\"search all datasets\"),\n\n            onfirstsearch: function(searchFor) {\n                multipanel.hdaQueue.clear();\n                multipanel.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach(function(column) {\n                    column.panel.searchItems(searchFor);\n                    // load details for them that need\n                    multipanel.queueHdaFetchDetails(column);\n                });\n                multipanel.hdaQueue.progress(function(progress) {\n                    multipanel.renderInfo(\n                        [\n                            _l(\"searching\"),\n                            progress.curr + 1,\n                            _l(\"of\"),\n                            progress.total\n                        ].join(\" \")\n                    );\n                });\n                multipanel.hdaQueue.deferred.done(function() {\n                    multipanel.renderInfo(\"\");\n                    multipanel\n                        .$(\"#search-datasets\")\n                        .searchInput(\"toggle-loading\");\n                });\n            },\n            onsearch: function(searchFor) {\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach(function(column) {\n                    column.panel.searchItems(searchFor);\n                });\n            },\n            onclear: function(searchFor) {\n                multipanel.datasetSearch = null;\n                multipanel.sortedFilteredColumns().forEach(function(column) {\n                    column.panel.clearSearch();\n                });\n            }\n        });\n\n        // resize first (fixed position) column on page resize\n        $(window).resize(function() {\n            multipanel._recalcFirstColumnHeight();\n        });\n\n        // when scrolling - check for histories now in view: they will fire 'in-view' and queueHdaLoading if necc.\n        //TODO:?? might be able to simplify and not use pub-sub\n        var debouncedInView = _.debounce(function _debouncedInner() {\n            var viewport = multipanel._viewport();\n            multipanel.checkColumnsInView(viewport);\n            multipanel.checkForEndOfScroll(viewport);\n        }, 100);\n        this.$(\".middle\")\n            .parent()\n            .scroll(debouncedInView);\n    },\n\n    /** create the options popover */\n    _moreOptionsPopover: function() {\n        return this.$(\".open-more-options.btn\").popover({\n            container: \".header\",\n            placement: \"bottom\",\n            html: true,\n            content: $(this.optionsPopoverTemplate(this))\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    toggleOptionsPopover: function(ev) {\n        // hide seems broken in our version\n        this.$(\".open-more-options.btn\").popover(\"toggle\");\n    },\n\n    /** Adjust the height of the first, current column since flex-boxes won't work with fixed postiion elements */\n    _recalcFirstColumnHeight: function() {\n        var $firstColumn = this.$(\".history-column\").first(),\n            middleHeight = this.$(\".middle\").height(),\n            controlHeight = $firstColumn.find(\".panel-controls\").height();\n        $firstColumn\n            .height(middleHeight)\n            .find(\".inner\")\n            .height(middleHeight - controlHeight);\n    },\n\n    /** Get the left and right pixel coords of the middle element */\n    _viewport: function() {\n        var $outerMiddle = this.$(\".middle\").parent(),\n            viewLeft = $outerMiddle.offset().left,\n            width = $outerMiddle.width();\n        return {\n            left: viewLeft,\n            right: viewLeft + width\n        };\n    },\n\n    /** returns the columns currently in the viewport */\n    columnsInView: function(viewport) {\n        //TODO: uses offset which is render intensive\n        //TODO: 2N - could use arg filter (sortedFilteredColumns( filter )) instead\n        var vp = viewport || this._viewport();\n        return this.sortedFilteredColumns().filter(function(column) {\n            return column.currentHistory || column.inView(vp.left, vp.right);\n        });\n    },\n\n    //TODO: sortByInView - return cols in view, then others\n    /** trigger in-view from columns in-view */\n    checkColumnsInView: function() {\n        //TODO: assbackward - don't fire from the column, fire from here and listen from here\n        this.columnsInView().forEach(function(column) {\n            column.trigger(\"in-view\", column);\n        });\n    },\n\n    /** is the middle, horizontally scrolling section scrolled fully to the right? */\n    checkForEndOfScroll: function(viewport) {\n        viewport = viewport || this._viewport();\n        var END_PADDING = 16,\n            $middle = this.$(\".middle\"),\n            scrollRight = $middle.parent().scrollLeft() + viewport.right;\n        if (scrollRight >= $middle.width() - END_PADDING) {\n            this.trigger(\"end-of-scroll\");\n        }\n    },\n\n    /** Show and enable the current columns drop target */\n    currentColumnDropTargetOn: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        //TODO: fix this - shouldn't need monkeypatch\n        currentColumn.panel.dataDropped = function(data) {};\n        currentColumn.panel.dropTargetOn();\n    },\n\n    /** Hide and disable the current columns drop target */\n    currentColumnDropTargetOff: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        currentColumn.panel.dataDropped =\n            HISTORY_VIEW_EDIT.HistoryViewEdit.prototype.dataDrop;\n        // slight override of dropTargetOff to not erase drop-target-help\n        currentColumn.panel.dropTarget = false;\n        currentColumn.panel.$(\".history-drop-target\").remove();\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return (\n            \"MultiPanelColumns(\" +\n            (this.columns ? this.columns.length : 0) +\n            \")\"\n        );\n    },\n\n    // ------------------------------------------------------------------------ templates\n    mainTemplate: _.template(\n        [\n            '<div class=\"header flex-column-container\">',\n            '<div class=\"control-column control-column-left flex-column\">',\n            '<button class=\"done btn btn-default\" tabindex=\"1\">',\n            _l(\"Done\"),\n            \"</button>\",\n            '<div id=\"search-histories\" class=\"search-control\"></div>',\n            '<div id=\"search-datasets\" class=\"search-control\"></div>',\n            '<a class=\"open-more-options btn btn-default\" tabindex=\"3\">',\n            '<span class=\"fa fa-ellipsis-h\"></span>',\n            \"</a>\",\n            \"</div>\",\n            // feedback\n            '<div class=\"control-column control-column-center flex-column\">',\n            '<div class=\"header-info\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"control-column control-column-right flex-column\">',\n            '<button class=\"create-new btn btn-default\" tabindex=\"4\">',\n            _l(\"Create new\"),\n            \"</button> \",\n            \"</div>\",\n            \"</div>\",\n            // middle - where the columns go\n            '<div class=\"outer-middle flex-row flex-row-container\">',\n            '<div class=\"middle flex-column-container flex-row\"></div>',\n            \"</div>\",\n            // footer\n            '<div class=\"footer flex-column-container\"></div>'\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    loadingIndicatorTemplate: _.template(\n        [\n            '<div class=\"histories-loading-indicator\">',\n            '<span class=\"fa fa-spin fa-spinner\"></span>',\n            _l(\"Loading histories\"),\n            \"...\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    orderDescriptions: {\n        update_time: _l(\"most recent first\"),\n        \"update_time-asc\": _l(\"least recent first\"),\n        name: _l(\"name, a to z\"),\n        \"name-dsc\": _l(\"name, z to a\"),\n        size: _l(\"size, large to small\"),\n        \"size-asc\": _l(\"size, small to large\")\n    },\n\n    optionsPopoverTemplate: _.template(\n        [\n            '<div class=\"more-options\">',\n            '<div class=\"order btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            _l(\"Order histories by\") + \" \",\n            '<span class=\"current-order\"><%- view.orderDescriptions[ view.collection.order ] %></span> ',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n            \"<% _.each( view.orderDescriptions, function( text, order ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"set-order\" data-order=\"<%- order %>\">',\n            \"<%- text %>\",\n            \"</a></li>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"</div>\",\n\n            '<div class=\"checkbox\"><label><input id=\"include-deleted\" type=\"checkbox\"',\n            '<%= view.collection.includeDeleted? \" checked\" : \"\" %>>',\n            _l(\"Include deleted histories\"),\n            \"</label></div>\",\n\n            \"<hr />\",\n\n            '<div class=\"checkbox\"><label><input id=\"toggle-deleted\" type=\"checkbox\">',\n            _l(\"Include deleted datasets\"),\n            \"</label></div>\",\n            '<div class=\"checkbox\"><label><input id=\"toggle-hidden\" type=\"checkbox\">',\n            _l(\"Include hidden datasets\"),\n            \"</label></div>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    )\n});\n\n//==============================================================================\nexport default {\n    MultiPanelColumns: MultiPanelColumns\n};\n"]}