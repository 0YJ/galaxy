{"version":3,"sources":["mvc/history/multi-panel.js"],"names":["HistoryViewColumn","Backbone","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","tagName","className","id","this","model","get","initialize","options","purgeAllowed","_","isUndefined","panel","createPanel","panelOptions","_historyViewEdit2","HistoryViewEdit","defaults","$el","column","once","$scrollContainer","setUpPanelListeners","listenTo","setUpListeners","rendered","view","$","off","inView","viewLeft","viewRight","columnLeft","offset","left","width","$panel","render","speed","undefined","modelData","toJSON","html","template","renderPanel","css","setUpBehaviors","data","controlsLeftTemplate","history","controlsRightTemplate","join","currentHistory","setElement","$list","before","_renderDropTargetHelp","events","click .switch-to.btn","setAsCurrent","click .delete-history","_delete","done","click .undelete-history","undelete","click .purge-history","_localization2","purge","click .copy-history","_copyDialog2","toString","MultiPanelColumns","columnWidth","footerHeight","controlsHeight","variable","multipanel","setCollection","addClass","borderWidth","columnGap","trigger","headerHeight","addModels","models","hdaQueue","NamedAjaxQueue","collection","columnMap","columnOptions","historySearch","datasetSearch","histories","add","on","fetchMore","_postFetchAll","stopListening","_historyModel2","HistoryCollection","setUpCollectionListeners","createColumns","oldCurrentColumn","isArray","forEach","newCurrentColumn","error","errorHandler","all-fetched","new-current","addAsCurrentColumn","set-as-current","setCurrentHistory","change:deleted change:purged","handleDeletedHistory","sort","renderColumns","fetchData","remove","scrollLeft","xhr","readyState","log","findWhere","height","currentHistoryId","title","_recalcFirstColumnHeight","_ajaxErrorHandler","includeDeleted","each","createColumn","status","isString","addColumn","message","_errorModal2","badGatewayErrorModal","ajaxErrorModal","apply","toArray","arguments","newColumn","queueHdaFetch","current","removeColumn","i","widthToRemove","checkColumnsInView","Galaxy","config","allow_user_dataset_purge","setUpColumnListeners","searchItems","toCopy","queue","_dropData","name","fn","start","columnMapLength","sortedFilteredColumns","in-view","filters","view:draggable:dragstart","ev","JSON","parse","filtered","getData","currentColumnDropTargetOn","view:draggable:dragend","sortedColumns","droptarget:drop","sorted","filter","json","contents","isCopyable","fxSpeed","currentPage","mainTemplate","reverse","content","copy","responses","self","fetch","$middle","Object","keys","length","index","columns","isNumber","map","numExisting","children","_calcMiddleWidth","preventStackWidthAdj","numColumns","sortedAndFiltered","empty","_addColumns","append","loadingIndicatorTemplate","queueHdaFetchDetails","needsContentsLoaded","delegateEvents","renderInfo","appendTo","_clickToggleDeletedHistories","contentsShown","fetchOptions","silent","toggleDeletedHistories","storage","allExpanded","show","window","location","_clickToggleDeletedDatasets","toggleDeletedDatasets","toggleOptionsPopover","renderItems","delay","running","toggleHiddenDatasets","haveDetails","progressivelyFetchDetails","_renderEmptyMessage","orderKey","fetchFirst","currentHistoryModel","click #include-deleted","click .order .set-order","click #toggle-deleted","_scrollLeft","close","root","currentTarget","is","onfirstsearch","_clickToggleHiddenDatasets","searchInput","onsearch","orderDescriptions","searchFor","slice","onclear","clear","val","debouncedInView","debounce","_moreOptionsPopover","container","optionsPopoverTemplate","fetchAll","$firstColumn","middleHeight","matchesAll","_viewport","$outerMiddle","placeholder","vp","viewport","progress","columnsInView","curr","total","deferred","END_PADDING","scrollRight","currentColumn","dataDropped","dropTarget","checkForEndOfScroll","scroll","popover","placement","first","find","controlHeight","parent","right","dropTargetOn","currentColumnDropTargetOff","prototype","dataDrop","update_time","update_time-asc","name-dsc","size","size-asc"],"mappings":"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","file":"../../../scripts/mvc/history/multi-panel.js","sourcesContent":["import _l from \"utils/localization\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_VIEW_EDIT from \"mvc/history/history-view-edit\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport baseMVC from \"mvc/base-mvc\";\nimport ajaxQueue from \"utils/ajax-queue\";\nimport \"ui/mode-button\";\nimport \"ui/search-input\";\n\nvar logNamespace = \"history\";\n/* ==============================================================================\nTODO:\n\n============================================================================== */\n/** @class A container for a history panel that renders controls for that history (delete, copy, etc.) */\nvar HistoryViewColumn = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    tagName: \"div\",\n    className: \"history-column flex-column flex-row-container\",\n    id: function id() {\n        if (!this.model) {\n            return \"\";\n        }\n        return \"history-column-\" + this.model.get(\"id\");\n    },\n\n    // ------------------------------------------------------------------------ set up\n    /** set up passed-in panel (if any) and listeners */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.purgeAllowed = !_.isUndefined(options.purgeAllowed)\n            ? options.purgeAllowed\n            : false;\n        this.panel = options.panel || this.createPanel(options);\n\n        this.setUpListeners();\n    },\n\n    /** create a history panel for this column */\n    createPanel: function createPanel(panelOptions) {\n        return new HISTORY_VIEW_EDIT.HistoryViewEdit(\n            _.defaults(panelOptions, {\n                model: this.model,\n                // non-current panels should set their hdas to draggable\n                purgeAllowed: this.purgeAllowed,\n                dragItems: true,\n                $scrollContainer: function() {\n                    return this.$el;\n                }\n            })\n        );\n    },\n\n    /** set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        var column = this;\n        //this.log( 'setUpListeners', this );\n        this.once(\"rendered\", function() {\n            column.trigger(\"rendered:initial\", column);\n        });\n        this.setUpPanelListeners();\n    },\n\n    /** set listeners needed for panel */\n    setUpPanelListeners: function setUpPanelListeners() {\n        var column = this;\n        this.listenTo(\n            this.panel,\n            {\n                //'all': function(){ console.info( 'panel of ' + this, arguments ); },\n\n                // assumes panel will take the longest to render\n                rendered: function() {\n                    column.trigger(\"rendered\", column);\n                },\n                // when a panel's view expands turn off the click handler on the rerun button so that it uses it's href\n                // this allows the button to open the tool rerun form in a new tab (instead of erroring)\n                // TODO: hack\n                \"view:expanded view:rendered\": function(view) {\n                    view.$(\".rerun-btn\").off();\n                }\n            },\n            this\n        );\n    },\n\n    /** do the dimensions of this column overlap the given (horizontal) browser coords? */\n    inView: function(viewLeft, viewRight) {\n        var columnLeft = this.$el.offset().left;\n        var columnRight = columnLeft + this.$el.width();\n        if (columnRight < viewLeft) {\n            return false;\n        }\n        if (columnLeft > viewRight) {\n            return false;\n        }\n        return true;\n    },\n\n    /** shortcut to the panel */\n    $panel: function $panel() {\n        return this.$(\".history-panel\");\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** render ths column, its panel, and set up plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        //this.log( this + '.render', this.$el, this.el );\n        //TODO: not needed\n        var modelData = this.model ? this.model.toJSON() : {};\n        this.$el.html(this.template(modelData));\n        this.renderPanel(speed);\n        // jq 1.12 doesn't fade/show properly when display: flex, re-set here\n        this.panel.$el.css(\"display\", \"flex\");\n        // if model and not children\n        // template\n        // render controls\n        this.setUpBehaviors();\n        // add panel\n        return this;\n    },\n\n    /** set up plugins */\n    setUpBehaviors: function setUpBehaviors() {\n        //this.log( 'setUpBehaviors:', this );\n        //var column = this;\n        // on panel size change, ...\n    },\n\n    /** column body template with inner div for panel based on data (model json) */\n    template: function template(data) {\n        data = _.extend(data || {}, {\n            isCurrentHistory: this.currentHistory\n        });\n        return $(\n            [\n                '<div class=\"panel-controls clear flex-row\">',\n                this.controlsLeftTemplate({\n                    history: data,\n                    view: this\n                }),\n                //'<button class=\"btn btn-default\">Herp</button>',\n                this.controlsRightTemplate({\n                    history: data,\n                    view: this\n                }),\n                \"</div>\",\n                '<div class=\"inner flex-row flex-column-container\">',\n                '<div id=\"history-',\n                data.id,\n                '\" class=\"history-column history-panel flex-column\"></div>',\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    /** render the panel contained in the column using speed for fx speed */\n    renderPanel: function renderPanel(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        this.panel.setElement(this.$panel()).render(speed);\n        if (this.currentHistory) {\n            this.panel.$list().before(this.panel._renderDropTargetHelp());\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ behaviors and events\n    /** event map */\n    events: {\n        // will make this the current history\n        \"click .switch-to.btn\": function() {\n            this.model.setAsCurrent();\n        },\n        //TODO: remove boiler plate from next 3\n        \"click .delete-history\": function() {\n            var column = this;\n            this.model._delete().done(function(data) {\n                column.render();\n            });\n        },\n        \"click .undelete-history\": function() {\n            var column = this;\n            this.model.undelete().done(function(data) {\n                column.render();\n            });\n        },\n        \"click .purge-history\": function() {\n            if (\n                confirm(\n                    _l(\"This will permanently remove the data. Are you sure?\")\n                )\n            ) {\n                var column = this;\n                this.model.purge().done(function(data) {\n                    column.render();\n                });\n            }\n        },\n        // will copy this history and make the copy the current history\n        \"click .copy-history\": \"copy\"\n    },\n\n    // ------------------------------------------------------------------------ non-current controls\n    /** Open a modal to get a new history name, copy it (if not canceled), and makes the copy current */\n    copy: function copy() {\n        historyCopyDialog(this.model);\n    },\n\n    // ------------------------------------------------------------------------ templates\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsLeftTemplate: _.template(\n        [\n            '<div class=\"pull-left\">',\n            \"<% if( data.history.isCurrentHistory ){ %>\",\n            '<strong class=\"current-label\">',\n            _l(\"Current History\"),\n            \"</strong>\",\n            \"<% } else { %>\",\n            '<button class=\"switch-to btn btn-default\">',\n            _l(\"Switch to\"),\n            \"</button>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsRightTemplate: _.template(\n        [\n            '<div class=\"pull-right\">',\n            \"<% if( !data.history.purged ){ %>\",\n            '<div class=\"panel-menu btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n            \"<% if( !data.history.deleted ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"copy-history\">',\n            _l(\"Copy\"),\n            \"</a></li>\",\n            //'<li><a href=\"javascript:void(0);\" class=\"publish-history\">',\n            //    _l( 'Publish' ),\n            //'</a></li>',\n            '<li><a href=\"javascript:void(0);\" class=\"delete-history\">',\n            _l(\"Delete\"),\n            \"</a></li>\",\n            \"<% } else /* if is deleted */ { %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"undelete-history\">',\n            _l(\"Undelete\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"<% if( data.view.purgeAllowed ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"purge-history\">',\n            _l(\"Purge\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"</ul>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return \"HistoryViewColumn(\" + (this.panel ? this.panel : \"\") + \")\";\n    }\n});\n\n//==============================================================================\n/** @class A view of a HistoryCollection and displays histories similarly to the current history panel.\n */\nvar MultiPanelColumns = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    className: \"multi-panel-history\",\n\n    // ------------------------------------------------------------------------ set up\n    /** Set up internals, history collection, and columns to display the history */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.log(this + \".init\", options);\n\n        // add the className here (since we gen. pass the el in options)\n        this.$el.addClass(this.className);\n\n        // --- instance vars\n        //TODO: move these to some defaults\n        this.options = {\n            columnWidth: 312,\n            borderWidth: 1,\n            columnGap: 8,\n            headerHeight: 29,\n            footerHeight: 0,\n            controlsHeight: 20\n        };\n\n        /** how many histories to get when fetching a new batch/page */\n        this.perPage = options.perPage || 10;\n\n        /** named ajax queue for loading hdas */\n        this.hdaQueue = new ajaxQueue.NamedAjaxQueue([], false);\n\n        // --- set up models, sub-views, and listeners\n        /** the original unfiltered and unordered collection of histories */\n        this.collection = null;\n        /** model id to column map */\n        this.columnMap = {};\n        /** model id to column map */\n        this.columnOptions = options.columnOptions || {};\n\n        /** what to search for within all histories */\n        this.historySearch = null;\n        /** what to search for within all datasets */\n        this.datasetSearch = null;\n\n        this.setCollection(options.histories);\n        this.setUpListeners();\n    },\n\n    /** Set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        var multipanel = this;\n        //multipanel.log( 'setUpListeners', multipanel );\n        this.on(\"end-of-scroll\", function() {\n            multipanel.collection.fetchMore();\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    setCollection: function setCollection(collection) {\n        // console.log( 'setCollection:', collection );\n        this.stopListening(this.collection);\n\n        this.collection = collection || new HISTORY_MODEL.HistoryCollection();\n        this.setUpCollectionListeners();\n\n        this.createColumns();\n        this.hdaQueue.clear();\n\n        this.trigger(\"new-collection\", this);\n        return this;\n    },\n\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    addModels: function addModels(models, collection, options) {\n        // console.log( 'addModels:', models, collection, options );\n        options = options || {};\n        var multipanel = this;\n        models = _.isArray(models) ? models : [models];\n        models.forEach(function(model) {\n            multipanel.addColumn(model, false);\n            // if this is from a fetch, sort will be called and it will call render\n        });\n        return this;\n    },\n\n    /** Set up listeners for the collection - handling: added histories, change of current, deletion, and sorting */\n    setUpCollectionListeners: function() {\n        var multipanel = this;\n        multipanel.listenTo(multipanel.collection, {\n            // handle ajax errors from the collection\n            error: multipanel.errorHandler,\n            // add multiple models\n            add: multipanel.addModels,\n            // when all the histories a user has have been fetched\n            \"all-fetched\": multipanel._postFetchAll,\n            // handle addition of histories, triggered by column copy and create new\n            \"new-current\": multipanel.addAsCurrentColumn,\n            // handle setting a history as current, triggered by history.setAsCurrent\n            \"set-as-current\": multipanel.setCurrentHistory,\n            // handle deleting a history (depends on whether panels is including deleted or not)\n            \"change:deleted change:purged\": multipanel.handleDeletedHistory,\n            // re-render columns after a sort\n            sort: function() {\n                multipanel.renderColumns(0);\n            }\n        });\n    },\n\n    _postFetchAll: function(fetchData) {\n        // console.log( '_postFetchAll' );\n        this.$(\".histories-loading-indicator\").remove();\n        // when new histories is fetched and the indicator is not required,\n        // the panel will jump slightly left - totally aesthetic but jarring\n        // TODO: this probably would be best handled elsewhere during a refinement cycle (if any)\n        if (!this.historySearch) {\n            var $scrollContainer = this.$(\".outer-middle\");\n            $scrollContainer.scrollLeft($scrollContainer.scrollLeft() + 24);\n        }\n    },\n\n    /** Re-render and set currentHistoryId to reflect a new current history */\n    setCurrentHistory: function setCurrentHistory(history) {\n        this.log(\"setCurrentHistory:\", history);\n        var oldCurrentColumn = _.findWhere(this.columnMap, {\n            currentHistory: true\n        });\n        if (oldCurrentColumn) {\n            oldCurrentColumn.currentHistory = false;\n            oldCurrentColumn.$el.height(\"\");\n        }\n\n        var newCurrentColumn = this.columnMap[this.collection.currentHistoryId];\n        newCurrentColumn.currentHistory = true;\n        this.collection.sort();\n        this._recalcFirstColumnHeight();\n        return newCurrentColumn;\n    },\n\n    /** Either remove a deleted history or re-render it to show the deleted message\n     *      based on collection.includeDeleted\n     */\n    handleDeletedHistory: function handleDeletedHistory(history) {\n        if (history.get(\"deleted\") || history.get(\"purged\")) {\n            this.log(\n                \"handleDeletedHistory\",\n                this.collection.includeDeleted,\n                history\n            );\n            var multipanel = this;\n            var column = multipanel.columnMap[history.id];\n            if (!column) {\n                return;\n            }\n\n            // if it's the current column, create a new, empty history as the new current\n            if (column.model.id === this.collection.currentHistoryId) {\n                //TODO: figuring out the order of async here is tricky\n                //  - for now let the user handle the two step process\n                //multipanel.collection.create().done( function(){\n                //    if( !multipanel.collection.includeDeleted ){ multipanel.removeColumn( column, false ); }\n                //});\n            } else if (!multipanel.collection.includeDeleted) {\n                multipanel.removeColumn(column);\n            }\n        }\n    },\n\n    // ........................................................................ error handling\n    /** Event handler for errors (from the history collection mainly)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  (e.g. this.trigger( 'error', 'Heres a message', 'Heres a title' ))\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n    errorHandler: function(model, xhr, options) {\n        // interrupted ajax or no connection\n        if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n            // return ERROR_MODAL.offlineErrorModal();\n            // fail silently\n            return;\n        }\n        // otherwise, leave something to report in the console\n        this.error(model, xhr, options);\n        // and feedback to a modal\n        // if sent two strings (and possibly details as 'options'), use those as message and title\n        if (_.isString(model) && _.isString(xhr)) {\n            var message = model;\n            var title = xhr;\n            return ERROR_MODAL.errorModal(message, title, options);\n        }\n        // bad gateway\n        // TODO: possibly to global handler\n        if (xhr && xhr.status === 502) {\n            return ERROR_MODAL.badGatewayErrorModal();\n        }\n        return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n    },\n\n    /** If Galaxy object is available handle error there, otherwise, locally (and crudely) */\n    _ajaxErrorHandler: function() {\n        ERROR_MODAL.ajaxErrorModal.apply(null, _.toArray(arguments));\n    },\n\n    /** create a new history and set it to current */\n    create: function(ev) {\n        return this.collection.create({ current: true });\n    },\n\n    // ------------------------------------------------------------------------ columns\n    /** create columns from collection */\n    createColumns: function createColumns(models, columnOptions) {\n        columnOptions = columnOptions || this.options.columnOptions;\n        var multipanel = this;\n        // clear column map\n        // TODO: make cummulative\n        multipanel.columnMap = {};\n        multipanel.collection.each(function(model, i) {\n            var column = multipanel.createColumn(model, columnOptions);\n            multipanel.columnMap[model.id] = column;\n        });\n    },\n\n    /** create a column and its panel and set up any listeners to them */\n    createColumn: function createColumn(history, options) {\n        // options passed can be re-used, so extend them before adding the model to prevent pollution for the next\n        options = _.extend({}, options, {\n            model: history,\n            purgeAllowed: Galaxy.config.allow_user_dataset_purge\n        });\n        var column = new HistoryViewColumn(options);\n        if (history.id === this.collection.currentHistoryId) {\n            column.currentHistory = true;\n        }\n        this.setUpColumnListeners(column);\n        if (this.datasetSearch) {\n            column.panel.searchItems(this.datasetSearch);\n            this.queueHdaFetchDetails(column);\n        }\n        return column;\n    },\n\n    /** add a new column for history and render all columns if render is true */\n    addColumn: function add(history, render) {\n        // console.debug( 'adding column for:', history, render );\n        render = render !== undefined ? render : true;\n        var newColumn = this.createColumn(history);\n        this.columnMap[history.id] = newColumn;\n        if (render) {\n            this.renderColumns();\n        }\n        return newColumn;\n    },\n\n    /** add a new column for history and make it the current history/column */\n    addAsCurrentColumn: function add(history, collection, options) {\n        //this.log( 'adding current column for:', history );\n        var multipanel = this;\n\n        var newColumn = this.addColumn(history, false);\n        this.setCurrentHistory(history);\n        newColumn.once(\"rendered\", function() {\n            multipanel.queueHdaFetch(newColumn);\n        });\n        return newColumn;\n    },\n\n    /** remove the given column, it's listeners, and optionally render */\n    removeColumn: function remove(column, render) {\n        render = render !== undefined ? render : true;\n        this.log(\"removeColumn\", column);\n        if (!column) {\n            return;\n        }\n        var multipanel = this;\n        var widthToRemove = this.options.columnWidth + this.options.columnGap;\n        column.$el.fadeOut(\"fast\", function() {\n            if (render) {\n                $(this).remove();\n                multipanel\n                    .$(\".middle\")\n                    .width(multipanel.$(\".middle\").width() - widthToRemove);\n                multipanel.checkColumnsInView();\n                multipanel._recalcFirstColumnHeight();\n            }\n\n            //TODO: to freeColumn (where Columns have freePanel)\n            multipanel.stopListening(column.panel);\n            multipanel.stopListening(column);\n            delete multipanel.columnMap[column.model.id];\n            column.remove();\n        });\n    },\n\n    /** set up listeners for a column and it's panel - handling: hda lazy-loading, drag and drop */\n    setUpColumnListeners: function setUpColumnListeners(column) {\n        var multipanel = this;\n        multipanel.listenTo(column, {\n            //'all': function(){ console.info( 'column ' + column + ':', arguments ) },\n            \"in-view\": multipanel.queueHdaFetch\n        });\n\n        multipanel.listenTo(column.panel, {\n            //'all': function(){ console.info( 'panel ' + column.panel + ':', arguments ) },\n\n            \"view:draggable:dragstart\": function(ev, view, panel, column) {\n                multipanel._dropData = JSON.parse(\n                    ev.dataTransfer.getData(\"text\")\n                );\n                multipanel.currentColumnDropTargetOn();\n            },\n            \"view:draggable:dragend\": function(ev, view, panel, column) {\n                multipanel._dropData = null;\n                multipanel.currentColumnDropTargetOff();\n            },\n            \"droptarget:drop\": function(ev, data, panel) {\n                //note: bad copy sources fail silently\n                var toCopy = multipanel._dropData.filter(function(json) {\n                    return panel.model.contents.isCopyable(json);\n                });\n                multipanel._dropData = null;\n\n                var queue = new ajaxQueue.NamedAjaxQueue();\n                if (panel.model.contents.currentPage !== 0) {\n                    queue.add({\n                        name: \"fetch-front-page\",\n                        fn: function() {\n                            return panel.model.contents.fetchPage(0);\n                        }\n                    });\n                }\n                // need to reverse to better match expected order\n                // TODO: reconsider order in list-view._setUpItemViewListeners, dragstart (instead of here)\n                toCopy.reverse().forEach(function(content) {\n                    queue.add({\n                        name: \"copy-\" + content.id,\n                        fn: function() {\n                            return panel.model.contents.copy(content);\n                        }\n                    });\n                });\n                queue.start();\n                queue.done(function(responses) {\n                    panel.model.fetch();\n                });\n            }\n        });\n    },\n\n    /** conv. fn to count the columns in columnMap */\n    columnMapLength: function() {\n        return Object.keys(this.columnMap).length;\n    },\n\n    /** return array of Columns filtered by filters and sorted to match the collection\n     *  @param: filters Function[] array of filter fns\n     */\n    sortedFilteredColumns: function(filters) {\n        filters = filters || this.filters;\n        if (!filters || !filters.length) {\n            return this.sortedColumns();\n        }\n        var multipanel = this;\n        return multipanel.sortedColumns().filter(function(column, index) {\n            var filtered =\n                column.currentHistory ||\n                _.every(\n                    filters.map(function(filter) {\n                        return filter.call(column);\n                    })\n                );\n            return filtered;\n        });\n    },\n\n    /** return array of Columns sorted to match the collection */\n    sortedColumns: function() {\n        var multipanel = this;\n        var sorted = this.collection.map(function(history, index) {\n            return multipanel.columnMap[history.id];\n        });\n        return sorted;\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** Render this view, columns, and set up view plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n        var multipanel = this;\n\n        multipanel.log(multipanel + \".render\");\n        multipanel.$el.html(multipanel.mainTemplate(multipanel));\n        multipanel.renderColumns(speed);\n\n        // set the columns to full height allowed and set up behaviors for thie multipanel\n        multipanel.setUpBehaviors();\n        //TODO: wrong - has to wait for columns to render\n        //  - create a column listener that fires this when all columns are rendered\n        multipanel.trigger(\"rendered\", multipanel);\n        return multipanel;\n    },\n\n    /** Render the columns and panels */\n    renderColumns: function renderColumns(speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        // console.log( 'renderColumns:', speed );\n        // render columns and track the total number rendered, firing an event when all are rendered\n        var self = this;\n        var sortedAndFiltered = self.sortedFilteredColumns();\n        // console.log( '\\t sortedAndFiltered:', sortedAndFiltered );\n        var $middle = self.$(\".middle\").empty();\n\n        self._addColumns(sortedAndFiltered, speed);\n        if (!self.collection.allFetched) {\n            $middle.append(self.loadingIndicatorTemplate(self));\n        }\n        //TODO: sorta - at least their fx queue has started the re-rendering\n        self.trigger(\"columns-rendered\", sortedAndFiltered, self);\n\n        if (self.datasetSearch && sortedAndFiltered.length <= 1) {\n        } else {\n            // check for in-view, hda lazy-loading if so\n            self.checkColumnsInView();\n            // the first, current column has position: fixed and flex css will not apply - adjust height manually\n            self._recalcFirstColumnHeight();\n        }\n        return sortedAndFiltered;\n    },\n\n    _addColumns: function(columns, speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        var $middle = this.$(\".middle\");\n\n        var numExisting = $middle.children(\".history-column\").length;\n        $middle.width(this._calcMiddleWidth(columns.length + numExisting));\n\n        columns.forEach(function(column, i) {\n            column\n                .delegateEvents()\n                .render(speed)\n                .$el.appendTo($middle);\n        });\n    },\n\n    _calcMiddleWidth: function(numColumns) {\n        var preventStackWidthAdj = 16;\n        return (\n            numColumns * (this.options.columnWidth + this.options.columnGap) +\n            // last column gap\n            this.options.columnGap +\n            // the amount that safely prevents stacking of columns when adding a new one\n            preventStackWidthAdj\n        );\n    },\n\n    //TODO: combine the following two more sensibly\n    //TODO: could have HistoryContents.haveDetails return false\n    //      if column.model.contents.length === 0 && !column.model.get( 'empty' ) then just check that\n    /** Get the *summary* contents of a column's history (and details on any expanded contents),\n     *      queueing the ajax call and using a named queue to prevent the call being sent twice\n     */\n    queueHdaFetch: function queueHdaFetch(column) {\n        // console.log( column.model + '.contentsShown:', column.model.contentsShown() );\n        var contents = column.model.contents;\n        // console.log( 'queueHdaFetch:', column, column.model.get( 'contents_active' ) );\n        // if the history model says it has hdas but none are present, queue an ajax req for them\n        if (contents.length === 0 && column.model.contentsShown()) {\n            var fetchOptions = { silent: true };\n            var ids = _.values(contents.storage.allExpanded()).join();\n            if (ids) {\n                fetchOptions.details = ids;\n            }\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents\n                        .fetchCurrentPage(fetchOptions)\n                        .done(function() {\n                            column.panel.renderItems();\n                        });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** Get the *detailed* json for *all* of a column's history's contents - req'd for searching */\n    queueHdaFetchDetails: function(column) {\n        var contents = column.model.contents;\n        var needsContentsLoaded =\n            contents.length === 0 && column.model.contentsShown();\n        if (needsContentsLoaded || !contents.haveDetails()) {\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents\n                        .progressivelyFetchDetails()\n                        .done(function() {\n                            column.panel._renderEmptyMessage();\n                        });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** put a text msg in the header */\n    renderInfo: function(msg) {\n        return this.$(\".header .header-info\").text(msg);\n    },\n\n    // ------------------------------------------------------------------------ events/behaviors\n    events: {\n        // will move to the server root (gen. Analyze data)\n        \"click .done.btn\": \"close\",\n        // creates a new empty history and makes it current\n        \"click .create-new.btn\": \"create\",\n        \"click #include-deleted\": \"_clickToggleDeletedHistories\",\n        // these change the collection and column sort order\n        \"click .order .set-order\": \"_chooseOrder\",\n        \"click #toggle-deleted\": \"_clickToggleDeletedDatasets\",\n        \"click #toggle-hidden\": \"_clickToggleHiddenDatasets\"\n        //'dragstart .list-item .title-bar'                       : function( e ){ console.debug( 'ok' ); }\n    },\n\n    close: function(ev) {\n        //TODO: switch to pushState/router\n        window.location = Galaxy.root;\n    },\n\n    _clickToggleDeletedHistories: function(ev) {\n        this.toggleDeletedHistories($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    /** Include deleted histories in the collection */\n    toggleDeletedHistories: function(show) {\n        if (show) {\n            window.location =\n                Galaxy.root +\n                \"history/view_multiple?include_deleted_histories=True\";\n        } else {\n            window.location = Galaxy.root + \"history/view_multiple\";\n        }\n    },\n\n    _clickToggleDeletedDatasets: function(ev) {\n        this.toggleDeletedDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleDeletedDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach(function(column, i) {\n            _.delay(function() {\n                column.panel.toggleShowDeleted(show, false);\n            }, i * 200);\n        });\n    },\n\n    _clickToggleHiddenDatasets: function(ev) {\n        this.toggleHiddenDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleHiddenDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach(function(column, i) {\n            _.delay(function() {\n                column.panel.toggleShowHidden(show, false);\n            }, i * 200);\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    _chooseOrder: function(ev) {\n        var multipanel = this;\n        var collection = multipanel.collection;\n        var orderKey = $(ev.currentTarget).data(\"order\");\n        // set the sort order text also\n        multipanel\n            .$(\".current-order\")\n            .text(multipanel.orderDescriptions[orderKey]);\n        multipanel.toggleOptionsPopover();\n        // set the order and re-fetch using the new order, saving the current history as the first\n        collection.setOrder(orderKey);\n        var currentHistoryModel = collection.slice(0, 1);\n        collection.fetchFirst().done(function() {\n            collection.unshift(currentHistoryModel, {\n                silent: true\n            });\n            multipanel.createColumns();\n            // need to clear this or previously fetched contents won't refetch now (bc of named queue)\n            multipanel.hdaQueue.clear();\n            multipanel.render();\n        });\n        multipanel.once(\"columns-rendered\", multipanel._scrollLeft);\n        //TODO: check allFetched and do not reset if so - just sort instead\n    },\n\n    /** scroll the column container right or left */\n    _scrollLeft: function(val) {\n        val = _.isNumber(val) ? val : 0;\n        this.$(\".outer-middle\").scrollLeft(val);\n    },\n\n    /** Set up any view plugins */\n    setUpBehaviors: function() {\n        var multipanel = this;\n        multipanel._moreOptionsPopover();\n\n        // input to search histories\n        multipanel.$(\"#search-histories\").searchInput({\n            name: \"search-histories\",\n            placeholder: _l(\"search histories\"),\n\n            onfirstsearch: function(searchFor) {\n                multipanel.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                multipanel.renderInfo(_l(\"loading all histories for search\"));\n                multipanel.collection.fetchAll().done(function() {\n                    multipanel\n                        .$(\"#search-histories\")\n                        .searchInput(\"toggle-loading\");\n                    multipanel.renderInfo(\"\");\n                });\n            },\n            onsearch: function(searchFor) {\n                multipanel.historySearch = searchFor;\n                multipanel.filters = [\n                    function() {\n                        return this.model.matchesAll(multipanel.historySearch);\n                    }\n                ];\n                multipanel.renderColumns(0);\n            },\n            onclear: function(searchFor) {\n                multipanel.historySearch = null;\n                //TODO: remove specifically not just reset\n                multipanel.filters = [];\n                multipanel.renderColumns(0);\n            }\n        });\n\n        // input to search datasets\n        multipanel.$(\"#search-datasets\").searchInput({\n            name: \"search-datasets\",\n            placeholder: _l(\"search all datasets\"),\n\n            onfirstsearch: function(searchFor) {\n                multipanel.hdaQueue.clear();\n                multipanel.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach(function(column) {\n                    column.panel.searchItems(searchFor);\n                    // load details for them that need\n                    multipanel.queueHdaFetchDetails(column);\n                });\n                multipanel.hdaQueue.progress(function(progress) {\n                    multipanel.renderInfo(\n                        [\n                            _l(\"searching\"),\n                            progress.curr + 1,\n                            _l(\"of\"),\n                            progress.total\n                        ].join(\" \")\n                    );\n                });\n                multipanel.hdaQueue.deferred.done(function() {\n                    multipanel.renderInfo(\"\");\n                    multipanel\n                        .$(\"#search-datasets\")\n                        .searchInput(\"toggle-loading\");\n                });\n            },\n            onsearch: function(searchFor) {\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach(function(column) {\n                    column.panel.searchItems(searchFor);\n                });\n            },\n            onclear: function(searchFor) {\n                multipanel.datasetSearch = null;\n                multipanel.sortedFilteredColumns().forEach(function(column) {\n                    column.panel.clearSearch();\n                });\n            }\n        });\n\n        // resize first (fixed position) column on page resize\n        $(window).resize(function() {\n            multipanel._recalcFirstColumnHeight();\n        });\n\n        // when scrolling - check for histories now in view: they will fire 'in-view' and queueHdaLoading if necc.\n        //TODO:?? might be able to simplify and not use pub-sub\n        var debouncedInView = _.debounce(function _debouncedInner() {\n            var viewport = multipanel._viewport();\n            multipanel.checkColumnsInView(viewport);\n            multipanel.checkForEndOfScroll(viewport);\n        }, 100);\n        this.$(\".middle\")\n            .parent()\n            .scroll(debouncedInView);\n    },\n\n    /** create the options popover */\n    _moreOptionsPopover: function() {\n        return this.$(\".open-more-options.btn\").popover({\n            container: \".header\",\n            placement: \"bottom\",\n            html: true,\n            content: $(this.optionsPopoverTemplate(this))\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    toggleOptionsPopover: function(ev) {\n        // hide seems broken in our version\n        this.$(\".open-more-options.btn\").popover(\"toggle\");\n    },\n\n    /** Adjust the height of the first, current column since flex-boxes won't work with fixed postiion elements */\n    _recalcFirstColumnHeight: function() {\n        var $firstColumn = this.$(\".history-column\").first();\n        var middleHeight = this.$(\".middle\").height();\n        var controlHeight = $firstColumn.find(\".panel-controls\").height();\n        $firstColumn\n            .height(middleHeight)\n            .find(\".inner\")\n            .height(middleHeight - controlHeight);\n    },\n\n    /** Get the left and right pixel coords of the middle element */\n    _viewport: function() {\n        var $outerMiddle = this.$(\".middle\").parent();\n        var viewLeft = $outerMiddle.offset().left;\n        var width = $outerMiddle.width();\n        return {\n            left: viewLeft,\n            right: viewLeft + width\n        };\n    },\n\n    /** returns the columns currently in the viewport */\n    columnsInView: function(viewport) {\n        //TODO: uses offset which is render intensive\n        //TODO: 2N - could use arg filter (sortedFilteredColumns( filter )) instead\n        var vp = viewport || this._viewport();\n        return this.sortedFilteredColumns().filter(function(column) {\n            return column.currentHistory || column.inView(vp.left, vp.right);\n        });\n    },\n\n    //TODO: sortByInView - return cols in view, then others\n    /** trigger in-view from columns in-view */\n    checkColumnsInView: function() {\n        //TODO: assbackward - don't fire from the column, fire from here and listen from here\n        this.columnsInView().forEach(function(column) {\n            column.trigger(\"in-view\", column);\n        });\n    },\n\n    /** is the middle, horizontally scrolling section scrolled fully to the right? */\n    checkForEndOfScroll: function(viewport) {\n        viewport = viewport || this._viewport();\n        var END_PADDING = 16;\n        var $middle = this.$(\".middle\");\n        var scrollRight = $middle.parent().scrollLeft() + viewport.right;\n        if (scrollRight >= $middle.width() - END_PADDING) {\n            this.trigger(\"end-of-scroll\");\n        }\n    },\n\n    /** Show and enable the current columns drop target */\n    currentColumnDropTargetOn: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        //TODO: fix this - shouldn't need monkeypatch\n        currentColumn.panel.dataDropped = function(data) {};\n        currentColumn.panel.dropTargetOn();\n    },\n\n    /** Hide and disable the current columns drop target */\n    currentColumnDropTargetOff: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        currentColumn.panel.dataDropped =\n            HISTORY_VIEW_EDIT.HistoryViewEdit.prototype.dataDrop;\n        // slight override of dropTargetOff to not erase drop-target-help\n        currentColumn.panel.dropTarget = false;\n        currentColumn.panel.$(\".history-drop-target\").remove();\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return (\n            \"MultiPanelColumns(\" +\n            (this.columns ? this.columns.length : 0) +\n            \")\"\n        );\n    },\n\n    // ------------------------------------------------------------------------ templates\n    mainTemplate: _.template(\n        [\n            '<div class=\"header flex-column-container\">',\n            '<div class=\"control-column control-column-left flex-column\">',\n            '<button class=\"done btn btn-default\" tabindex=\"1\">',\n            _l(\"Done\"),\n            \"</button>\",\n            '<div id=\"search-histories\" class=\"search-control\"></div>',\n            '<div id=\"search-datasets\" class=\"search-control\"></div>',\n            '<a class=\"open-more-options btn btn-default\" tabindex=\"3\">',\n            '<span class=\"fa fa-ellipsis-h\"></span>',\n            \"</a>\",\n            \"</div>\",\n            // feedback\n            '<div class=\"control-column control-column-center flex-column\">',\n            '<div class=\"header-info\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"control-column control-column-right flex-column\">',\n            '<button class=\"create-new btn btn-default\" tabindex=\"4\">',\n            _l(\"Create new\"),\n            \"</button> \",\n            \"</div>\",\n            \"</div>\",\n            // middle - where the columns go\n            '<div class=\"outer-middle flex-row flex-row-container\">',\n            '<div class=\"middle flex-column-container flex-row\"></div>',\n            \"</div>\",\n            // footer\n            '<div class=\"footer flex-column-container\"></div>'\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    loadingIndicatorTemplate: _.template(\n        [\n            '<div class=\"histories-loading-indicator\">',\n            '<span class=\"fa fa-spin fa-spinner\"></span>',\n            _l(\"Loading histories\"),\n            \"...\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    orderDescriptions: {\n        update_time: _l(\"most recent first\"),\n        \"update_time-asc\": _l(\"least recent first\"),\n        name: _l(\"name, a to z\"),\n        \"name-dsc\": _l(\"name, z to a\"),\n        size: _l(\"size, large to small\"),\n        \"size-asc\": _l(\"size, small to large\")\n    },\n\n    optionsPopoverTemplate: _.template(\n        [\n            '<div class=\"more-options\">',\n            '<div class=\"order btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            _l(\"Order histories by\") + \" \",\n            '<span class=\"current-order\"><%- view.orderDescriptions[ view.collection.order ] %></span> ',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n            \"<% _.each( view.orderDescriptions, function( text, order ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"set-order\" data-order=\"<%- order %>\">',\n            \"<%- text %>\",\n            \"</a></li>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"</div>\",\n\n            '<div class=\"checkbox\"><label><input id=\"include-deleted\" type=\"checkbox\"',\n            '<%= view.collection.includeDeleted? \" checked\" : \"\" %>>',\n            _l(\"Include deleted histories\"),\n            \"</label></div>\",\n\n            \"<hr />\",\n\n            '<div class=\"checkbox\"><label><input id=\"toggle-deleted\" type=\"checkbox\">',\n            _l(\"Include deleted datasets\"),\n            \"</label></div>\",\n            '<div class=\"checkbox\"><label><input id=\"toggle-hidden\" type=\"checkbox\">',\n            _l(\"Include hidden datasets\"),\n            \"</label></div>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    )\n});\n\n//==============================================================================\nexport default {\n    MultiPanelColumns: MultiPanelColumns\n};\n"]}