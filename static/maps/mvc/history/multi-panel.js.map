{"version":3,"sources":["mvc/history/multi-panel.js"],"names":["define","HISTORY_MODEL","HISTORY_VIEW_EDIT","historyCopyDialog","ERROR_MODAL","baseMVC","ajaxQueue","HistoryViewColumn","model","View","extend","LoggableMixin","_logNamespace","tagName","className","id","this","initialize","options","setUpListeners","purgeAllowed","_","isUndefined","panel","createPanel","dragItems","panelOptions","$scrollContainer","HistoryViewEdit","defaults","$el","column","once","setUpPanelListeners","trigger","listenTo","rendered","view:expanded view:rendered","view","$","off","inView","columnRight","viewLeft","columnLeft","offset","left","width","viewRight","$panel","render","speed","modelData","toJSON","template","renderPanel","css","setUpBehaviors","data","currentHistory","controlsLeftTemplate","history","controlsRightTemplate","join","undefined","setElement","$list","before","_renderDropTargetHelp","events","click .switch-to.btn","done","setAsCurrent","click .delete-history","_delete","undelete","click .purge-history","confirm","purge","click .copy-history","_l","variable","MultiPanelColumns","logNamespace","addClass","columnWidth","headerHeight","footerHeight","controlsHeight","toString","Backbone","log","multipanel","borderWidth","columnGap","perPage","hdaQueue","NamedAjaxQueue","collection","columnMap","columnOptions","addModels","models","isArray","on","setUpCollectionListeners","fetchMore","setCollection","_postFetchAll","stopListening","setCurrentHistory","createColumns","clear","historySearch","scrollLeft","addColumn","oldCurrentColumn","height","error","errorHandler","newCurrentColumn","all-fetched","new-current","addAsCurrentColumn","set-as-current","change:deleted change:purged","handleDeletedHistory","sort","renderColumns","fetchData","remove","findWhere","currentHistoryId","_recalcFirstColumnHeight","get","includeDeleted","message","title","removeColumn","xhr","readyState","isString","createColumn","errorModal","status","ajaxErrorModal","queueHdaFetchDetails","toArray","arguments","create","ev","current","newColumn","each","i","Galaxy","config","allow_user_dataset_purge","searchItems","datasetSearch","checkColumnsInView","setUpColumnListeners","queueHdaFetch","_dropData","widthToRemove","toCopy","contents","currentPage","queue","fn","view:draggable:dragstart","JSON","parse","dataTransfer","getData","start","fetch","currentColumnDropTargetOff","droptarget:drop","filter","json","columnMapLength","isCopyable","add","sortedFilteredColumns","filters","length","fetchPage","reverse","content","filtered","copy","sorted","index","every","map","call","sortedColumns","sortedAndFiltered","$middle","self","columns","forEach","delegateEvents","_calcMiddleWidth","numColumns","_addColumns","allFetched","preventStackWidthAdj","loadingIndicatorTemplate","values","isNumber","fxSpeed","fetchOptions","numExisting","children","fetchCurrentPage","appendTo","progressivelyFetchDetails","contentsShown","running","ids","storage","allExpanded","details","name","text","msg","haveDetails","location","_renderEmptyMessage","toggleDeletedHistories","currentTarget","renderInfo","show","window","_clickToggleDeletedDatasets","click .create-new.btn","click #include-deleted","click #toggle-deleted","close","root","_clickToggleDeletedHistories","toggleOptionsPopover","is","toggleHiddenDatasets","toggleShowHidden","_chooseOrder","toggleDeletedDatasets","currentHistoryModel","_scrollLeft","val","_moreOptionsPopover","orderKey","orderDescriptions","placeholder","onfirstsearch","slice","searchInput","onclear","searchFor","onsearch","clearSearch","resize","viewport","_viewport","progress","checkForEndOfScroll","total","deferred","container","placement","html","optionsPopoverTemplate","$firstColumn","middleHeight","debouncedInView","debounce","$outerMiddle","parent","scroll","popover","columnsInView","first","controlHeight","find","scrollRight","right","currentColumn","dataDropped","vp","currentColumnDropTargetOn","dropTargetOn","prototype","dataDrop","dropTarget","mainTemplate","update_time","update_time-asc","name-dsc","size","size-asc"],"mappings":"YAAAA,SACI,4BADJA,gCAUA,0BANI,qBAQJ,eACA,mBANI,iBACA,mBACD,SAAUC,EAAeC,EAAmBC,EAAmBC,EAAaC,EAASC,GAGxF,GAaQC,GAAUC,SAAOC,KAAAC,OAAAL,EAAAM,eAAAD,QAAcE,cAbpB,UAedC,QATwE,MAKzEC,UAAc,gDAMdC,GAAA,WACA,MAAAC,MAAAR,MACAS,kBAAsBA,KAAYC,MAAAA,IAAS,MAD3C,IAMID,WAAKE,SAALD,GACHA,EAnBwEA,MAerEF,KAAKI,cAAgBC,EAAEC,YAAaJ,EAAQE,eAAgBF,EAAQE,aAMxEJ,KAAAO,MAAAL,EAAAK,OAAAP,KAAAQ,YAAAN,GAEIF,KAAAG,kBAIIM,YAAAA,SAJoEC,GAKpEC,MAAAA,IAAAA,GAAkBC,gBAAAP,EAAAQ,SAAUH,GAAElB,MAAOQ,KAAPR,MALsCY,aAAxEJ,KAAAI,aAvBqEK,WAAA,EA4BjEE,iBAAkB,WAAY,MAAOX,MAAKc,SAQ9CX,eAAA,WACIY,GAAAA,GAAAA,IAEJf,MAAAgB,KAAKC,WAAAA,WAvCgEF,EAAAG,QAAA,mBAAAH,KA0CzEf,KAAAiB,uBAIQA,oBAAA,WAFJ,GAAIF,GAASf,IAITA,MAAAmB,SAAAnB,KAAAO,OAIAa,SAAA,WACAL,EAAAG,QAAA,WAAAH,IARuBM,8BAA3B,SAAAC,GA7CqEA,EAAAC,EAAA,cAAAC,QA6DzExB,OAIIyB,OAAA,SAAIC,EAAcC,GAAY,GAAAC,GAAO5B,KAAPc,IAAAe,SAAAC,IAC9B,SAD6CF,EAAA5B,KAAAc,IAAAiB,QACzCH,GAA0BA,EAAOI,IAIzCC,OAAA,WACAA,MAAAA,MAASV,EAAA,mBAKTW,OAAA,SAAAC,GACAD,MAAkBA,KAATC,EAAwBA,EAAA,MAG7B,IAAAC,GAAApC,KAAAR,MAAAQ,KAAAR,MAAA6C,WAUA,OATArC,MAAAc,IAAIsB,KAAAA,KAAYE,SAAAF,IAChBpC,KAAAuC,YAAeJ,GAEfnC,KAAAO,MAAAO,IAAA0B,IAAA,UAAA,QAIIxC,KAAAyC,iBAEJzC,MAIJyC,eAAA,aAOAH,SAAA,SAAAI,GAEiC,MADjCJ,GAAAA,EAAAA,OAAWI,OACPA,iBAAiBA,KAAQC,iBAAzBpB,GAGA,8CAGQvB,KAAA4C,sBAAAC,QAAAH,EAAApB,KAAAtB,OA7G6DA,KAAA8C,uBAAAD,QAAAH,EAAApB,KAAAtB,OA+GjE,SAOR,qDACAuC,oBAAuBA,EAAaJ,GAAAA,4DAChCA,UACAY,KAAA,MAIAR,YAAA,SAAAJ,GAMA,MALHA,OA9HwEa,KAAAb,EAAAA,EAAA,OAyHrEnC,KAAKO,MAAM0C,WAAYjD,KAAKiC,UAAWC,OAAQC,GAOnDnC,KAAA2C,gBACA3C,KAAAO,MAAA2C,QAAAC,OAAAnD,KAAAO,MAAA6C,yBAEIpD,MAGAqD,QAEIC,uBACKC,WAAMvD,KAAU0C,MAAMc,gBAAoBC,wBAD/C,WAEH,GARI1C,GAAAf,IASLA,MAAAR,MAAAkE,UACIH,KAAIxC,SAAJ2B,GAAA3B,EAAAmB,YAE6BnB,0BAAA,WAAkB,GAAAA,GAD/Cf,IAEHA,MAbIR,MAAAmE,WAcLJ,KAAA,SAAAb,GAAyB3B,EAAAmB,YAEjB0B,uBAAa,WACb,GAAAC,QAAKrE,GAAAA,yDACsB,CAAEuB,GAAAA,GAAAA,IAAkBf,MAD/CR,MAAAsE,QAEHP,KAAA,SAAAb,GAAA3B,EAAAmB,aAnBA6B,sBAlIgE,QA8JrE5E,KAAAA,WACHA,EA/JwEa,KAAAR,QAmKzEoD,qBAAuBvC,EAAEiC,UAUzB,0BACAQ,6CAYwB,iCAAAkB,GAAA,mBAAA,YACA,iBACA,6CAAAA,GAAA,aAAA,YACA,UAnBpB,UAsCJjB,KAAA,KAAAkB,SAAA,SAGInB,sBAAOzC,EAAAiC,UACV,2BApNL,oCAiLgB,qCAuChB,wFACA,8BArCoB,YAuChB4B,oDACgBC,qCArCQ,0DAuCZH,GAAA,QArCY,YA0CV9D,4DACO8D,GAAjB,UArCoB,YAuCpB,qCACSI,8DArCeJ,GAAI,YAuC5B,YACA,UACA,sCACIK,2DADWL,GAAA,SAAA,YAIXM,UACAC,QACAC,SANW,UA9Bf,UAuCAzB,KAAA,KAAAkB,SAAA,SAIAQ,SAAA,WArCA,MAAO,sBAAyBzE,KAAKO,MAAOP,KAAKO,MAAQ,IAAO,MAy0BpE,QACI2D,kBAl0BgBQ,SAASjF,KAAKC,OAAQL,EAAQM,eAAgBD,QAuC9DE,cAxQW,UA0QXE,UAAA,sBAIAG,WAAKE,SAALD,GACHA,EA9CwEA,MASrEF,KAAK2E,IAAK3E,KAAO,QAASE,GAyC1BF,KAAAc,IAAI8D,SAAAA,KAAa9E,WAIhBE,KAFDE,SApDqEmE,YAAA,IAkBjEQ,YAAkB,EAuC1BC,UAAA,EACAR,aAAA,GArCQC,aAAkB,EAClBC,eAAkB,IAItBxE,KAAK+E,QAAU7E,EAAQ6E,SAAW,GAGlC/E,KAAKgF,SAAW,GAAI1F,GAAU2F,mBAAoB,GA0ClDjF,KAAAkF,WAAc,KAEjBlF,KAzEwEmF,aA2EzEnF,KAAAoF,cAAAlF,EAAAkF,kBAGAC,KAAAA,cAAqBA,KAEjBnF,KAAAA,cAAUA,KAEVoF,KAAAA,cAAWC,EAASD,WACpBA,KAAAA,kBAIAnF,eAAO,WACV,GAxFwEyE,GAAA5E,IA0FzEA,MAAAwF,GAAA,gBAAA,WACAC,EAAAA,WAA2BC,eAQnBC,cAAA,SAA6CC,GANL,MAQxC5F,MAAA6F,cAAA7F,KAAkC4E,YAElC5E,KAAAkF,WAAAA,GAAkCN,GAAAA,GAAWkB,kBAC7C9F,KAAAyF,2BAEAzF,KAAA+F,gBACA/F,KAAAgF,SAAAgB,QAEChG,KAAAkB,QAAA,iBAAAlB,MAhBLA,MAuBAqF,UAAA,SAAAC,EAAAJ,EAAAhF,GAEAA,EAAAA,KACA,IAAA0E,GAAUqB,IAMd,OALQX,GAAAjF,EAAAkF,QAAI5E,GAAAA,GAA2B2E,GAC/B3E,EAAAA,QAAAA,SAAiBuF,GACpBtB,EAAAuB,UAAA3G,GAAA,KAGLQ,MAIIyF,yBAAIW,WACAA,GAAAA,GAAAA,IACAA,GAAAA,SAAAA,EAAqBC,YApCrBC,MAAkC1B,EAAW2B,aAwCjDC,IAAkC5B,EAAlCS,UAEAoB,cAAA7B,EAAAgB,cAzIqEc,cAAA9B,EAAA+B,mBA6IzEC,iBAAAhC,EAAAkB,kBApCQe,+BAAkCjC,EAAWkC,qBAwCjDC,KAAIlE,WACA+B,EAAUoC,cAAA,OAGcpB,cAAA,SAAAqB,GAMpB,GAJJjH,KAAAuB,EAAA,gCAAA2F,UAIIlH,KAAAiG,cAAA,CACA,GAAAtF,GAAAX,KAAAuB,EAAA,gBACAZ,GAAAuF,WAAAvF,EAAAuF,aAAA,MAKXJ,kBAlKwE,SAAAjD,GA+HrE7C,KAAK2E,IAAK,qBAAsB9B,EAqCpC,IAAAuD,GAAA/F,EAAA8G,UAAAnH,KAAAmF,WAAAxC,gBAAA,GACAyD,KAnCQA,EAAiBzD,gBAAiB,EAClCyD,EAAiBtF,IAAIuF,OAAQ,IAGjC,IAAIG,GAAmBxG,KAAKmF,UAAWnF,KAAKkF,WAAWkC,iBAwCvD,OAvCAZ,GAAiB7D,gBAAiB,EAqCtC4D,KAAAA,WAAeQ,OACX/G,KAAAqH,2BACAb,GAMAM,qBAAYtH,SAAZqD,GACA,GAAAA,EAAAyE,IAAA,YAAAzE,EAAAyE,IAAA,UAAA,CACAtH,KAAA2E,IAAA,uBAAA3E,KAAAkF,WAAAqC,eAAA1E,EACA,IAAIxC,GAAYb,KACZuB,EAAIyG,EAAJrC,UAAAtC,EAAA9C,GACA,KAAAgB,EAAI0G,MAGR1G,GAAAvB,MAAAO,KAAAC,KAAAkF,WAAAkC,kBA5LqExC,EAAAM,WAAAqC,gBA+J7D3C,EAAW8C,aAAc3G,KAiDrCgF,aAAAA,SAAgBvG,EAASuG,EAAAA,GAErB,IAAA4B,GAAA,IAAI/C,EAAAA,QAAJ,IAAA+C,EAAAC,WAAA,CA3BA,GAiCIhD,KAAAA,MAAAA,EAAWO,EAAAA,GAjCX9E,EAAEwH,SAAUrI,IAAWa,EAAEwH,SAAUF,GAAO,CAqClD,GAAAH,GAAAhI,EACAsI,EAAeH,CACX,OAAAvI,GAAA2I,WAAAP,EAAAC,EAAAvH,GACiC,MAAAyH,IAAjC,MAAAA,EAAAK,OAIIjH,EAAaxB,uBACsCwB,EAAO4B,eAAiBnD,EAAxBmI,EAAAzH,KAGnDa,kBAAOR,WACPnB,EAAA6I,eAAKC,MAAsBnH,KAA3BV,EAAA8H,QAAAC,aA9BRC,OAAS,SAAUC,GAmCnB,MAAAtI,MAAAkF,WAAAmD,QAAAE,SAAA,KAKIxC,cAAKZ,SAA0BqD,EAA/BpD,GACAA,EAAYA,GAAApF,KAAAE,QAAAkF,aACR,IAAAR,GAAKoC,IAGZpC,GAvPwEO,aAsNrEP,EAAWM,WAAWuD,KAAM,SAAUjJ,EAAOkJ,GAmCjD,GAAA3H,GAAA6D,EAAAkD,aAAAtI,EAAA4F,EACAuB,GAAAA,UAAqBnH,EAAAO,IAAc8C,KAK/B2F,aAAAA,SAA4B3F,EAAU3C,GAErCA,EAFDG,EAAAX,UAAAQ,GAGAV,MAAOgJ,EAlQ8DpI,aAAAuI,OAAAC,OAAAC,0BAqQzE,IAAA9H,GAAA,GAAAxB,GAAAW,EAKI,OAJJwH,GAAAA,KAAe1H,KAASkH,WAAQnG,mBAAgBA,EAAA4B,gBAAA,GAC5CT,KAAAA,qBAAoBc,GACpBhD,KAAK2E,gBACL5D,EAAKA,MAAQ+H,YAAA9I,KAAA+I,eAAE/I,KAAAkI,qBAAAnH,IACfA,GAIQQ,UAAAA,SAAU2F,EAAVhF,GAEA0C,MAAAA,KAAAA,GAAWoE,CACXpE,IAAAA,GAAAA,KAAAA,aAAWyC,EAKfzC,OAJC5E,MAAAmF,UAAAtC,EAAA9C,IAAAyI,EA/BDtG,GAiCAlC,KAAAgH,gBAEApC,GAIP+B,mBA1RwE,SAAA9D,EAAAqC,EAAAhF,GA4RzE,GAAA0E,GAAA5E,KACAiJ,EAAAA,KAAAA,UAAgCA,GAAAA,EAEC,OAD7BjJ,MAAA8F,kBAAiBjD,GACjB+B,EAAAA,KAAWzD,WAAUJ,WACjB6D,EAAAsE,cAAAV,KADJA,GAzBJd,aAAe,SAAiB3G,EAAQmB,GAmC5B0C,GAFJ1C,MAAAc,KAAAd,GAAAA,EACI0C,KAAAA,IAAAA,eAAWuE,GACXvE,EAAAA,CACH,GAAAA,GAN8B5E,KAO/BoJ,EAAApJ,KAAAE,QAAAmE,YAA0BrE,KAAAE,QAAA4E,SACtBF,GAAAA,IAAAA,QAAAA,OAAWuE,WACXvE,IACHrD,EAV8BvB,MAAAkH,SAW/BtC,EAAArD,EAAA,WAAmBQ,MAAA6C,EAAU0D,EAAI5F,WAAdX,QAA2BqH,GAC1CxE,EAAAoE,qBACApE,EAAIyE,4BA5BRzE,EAAWiB,cAAe9E,EAAOR,OAiC7BqE,EAAAiB,cAAgBvG,SAChBsF,GAAUpF,UAAM8J,EAASC,MAAAA,IACrBC,EAAAA,aAAUP,qBAAV,SAAAlI,GAMH,GAAA6D,GAAA5E,IACD4E,GAAAzD,SAAAJ,GAEAsI,UAAAA,EAAAH,gBAGQO,EAAAA,SAAAA,EAAKlJ,OAFCmJ,2BAAV,SAAApB,EAAAhH,EAAAf,EAAAQ,GAMH6D,EAPDuE,UAAAQ,KAAAC,MAAAtB,EAAAuB,aAAAC,QAAA,SAQAN,EAAMO,6BAEFxJ,yBAAYyJ,SAAZ1B,EAAAhH,EAAAf,EAAAQ,GACH6D,EAFDuE,UAAA,KAGHvE,EAAAqF,8BA7UgEC,kBAAA,SAAA5B,EAAA5F,EAAAnC,GAiVzE,GAAA8I,GAAAzE,EAAAuE,UAAAgB,OAAA,SAAAC,GACAC,MAAkB9J,GAAAf,MAAA8J,SAAAgB,WAAUF,IAlV6CxF,GAAAuE,UAAA,IAsVzE,IAAAK,GAAA,GAAAlK,GAAA2F,cA/BqD,KAArC1E,EAAMf,MAAM8J,SAASC,aACrBC,EAAMe,KAiCtBC,KAAwB,mBACVC,GAAAA,WACM,MAACA,GAAQC,MAAQpB,SAAAqB,UAAA,MAMzBtB,EAAAuB,UAAOT,QAAapJ,SAApB8J,GADJrB,EAAAe,KAGOO,KAAP,QAAAD,EAAA9K,GAJJ0J,GAAA,WA/VqE,MAAAlJ,GAAAf,MAAA8J,SAAAyB,KAAAF,QAyWjEjG,EAAAA,QACAoG,EAAAA,KAAS,SAAK9F,GACd3E,EAAOqE,MAAAA,cAOf1C,gBAAS,WACLC,MAAAA,QAAQA,KAAAA,KAAUa,WAAWb,QA1BjCqI,sBAAwB,SAAUC,GAkC9B7F,OADA6F,EAAAA,GAAAzK,KAAAyK,UACWhI,EAAAA,OAGAvB,KACJ0D,gBAAPuF,OAAA,SAAApJ,EAAAkK,GAIJjE,MAnYyEjG,GAAA4B,gBAAAtC,EAAA6K,MAAAT,EAAAU,IAAA,SAAAhB,GAiW7D,MAAOA,GAAOiB,KAAMrK,QA2B5Bf,KAAAqL,iBAYAA,cAAIC,WACJ,GAAA1G,GAAA5E,IAIA,OAHIuL,MAAUC,WAAQL,IAAR,SAAdtI,EAAAoI,GA/BI,MAAOrG,GAAWO,UAAWtC,EAAQ9C,OAO7CmC,OAAS,SAAiBC,GAiCtBA,MAAS4G,KAALyC,EAAArJ,EAAsBmJ,KAAAA,OAGtB,IAAA1G,GAAA5E,IAvBJ,OAyBI4E,GAAAD,IAAAC,EAAA,WACA4G,EAAAA,IAAKnE,KAAAA,EAAAA,aAALzC,IACHA,EAAAoC,cAAA7E,GA/BDyC,EAAWnC,iBAqCXmC,EAAI2G,QAAU,WAAQ3G,GAjCfA,GAsCP6G,cAAQC,SAASvJ,GACbpB,EAAAA,EAAAA,SAAO4K,GAAPxJ,EAAwBD,KAAQC,OA/BpC,IAAIqJ,GAAOxL,KAmCf4L,EAAmBJ,EAAAhB,wBAEfe,EACIM,EAAAA,EAAAA,WAAoB3L,OAkBxB,OAhBIsL,GAAAM,YAAahH,EAFb3C,GAGAqJ,EAAAtG,WAAA6G,YACAC,EAAAA,OAAAA,EALJC,yBAAAT,IASJA,EAAAtK,QAAA,mBAAAoK,EAAAE,GAEAA,EAAAzC,eAAAuC,EAAAZ,QAAA,IAIAxB,EAAAA,qBAEIsC,EAAIlC,4BAEJgC,GAGIQ,YAAA,SAAYI,EAAQ5C,GACpBnH,EAAA9B,EAAA8L,SAAShK,GAAAA,EAAAnC,KAAAoM,OAAEC,IAAAA,GAAAA,KAAAA,EAAAA,WACXC,EAAAf,EAAAgB,SAAA,mBAAA7B,MACAa,GAAAxJ,MAAKiD,KAAAA,iBAAayG,EAAAf,OAAA4B,IAEd7C,EAAAA,QAAK,SAAA1I,EAAU2H,GACX3H,EAAA4K,iBAAOrC,OAASkD,GAAAA,IAATC,SAA2BJ,MAHxBT,iBAAlB,SAAAC,GAQA,MAA8BA,IAAK7G,KAAAA,QAALX,YAAArE,KAAAE,QAAA4E,WACjC9E,KAAAE,QAAA4E,UAFG,IAcQoE,cAAA,SAAgBwD,GAC4C,GAAApD,GAAAvI,EAD5DvB,MAAA8J,QAIR,IAAA,IAAAA,EAAAoB,QAAA3J,EAAAvB,MAAAmN,gBAAA,CACA,GAAAN,IAAUrH,QAAS4H,GAAWC,EAAAxM,EAAA6L,OAAKlH,EAAL8H,QAAAC,eAAAhK,MAAwB8J,KAAAR,EAAAW,QAAAH,GA/dW7M,KAAAgF,SAAAuF,KAsc7D0C,KAAOlM,EAAOvB,MAAMO,GA6BhC0J,GAAA,WACa,MAAAH,GAAAkD,iBAAeH,GACjB9I,KAAQ,WAAAxC,EAAyBmM,MAAMC,mBAIzCnN,KAAAgF,SAAA4H,SAAA5M,KAAAgF,SAAA+E,UAKL7B,qBAAA,SAAAnH,GACA,GAAAuI,GAAAvI,EAAAvB,MAAA8J,WANK,IAOLA,EAA8BoB,QAPzB3J,EAAAvB,MAAAmN,kBAQLrD,EAA8B8D,gBAjfuCpN,KAAAgF,SAAAuF,KAwd7D0C,KAAOlM,EAAOvB,MAAMO,GA8BxB0J,GAAA,WACJ,MAAAH,GAAAoD,4BACOW,KAAW1E,WAAlB5H,EAAAR,MAAA+M,2BAIKC,KAAAA,SAAAA,SAA2BjF,KAAGkF,SAAAA,UAKnCC,WAAIC,SAAMP,GACNQ,MAAAA,MAAAA,EAAON,wBAAyBH,KAAAC,IAIvC9J,QAEDuK,kBAA8B,QAE1BC,wBAAA,SACHC,yBA3gBwE,+BA6gBrEJ,0BAAO,eACPK,wBAAA,8BACAnJ,uBAAW4F,8BAIVwD,MAAA,SAJD1F,GAvBAqF,OAAON,SAAW1E,OAAOsF,MAgCzBC,6BAAKC,SAAL7F,GACHtI,KAzhBwEuN,uBAAAhM,EAAA+G,EAAAkF,eAAAY,GAAA,aA0hBzEC,KAAAA,wBAGIzJ,uBAAW4F,SAAAA,GAEHzJ,OAAAA,SADJV,EACWE,OAAM+N,KAAAA,uDAFrB3F,OAAAsF,KAAA,yBAQJM,4BAAe,SAAUjG,GACrBtI,KAAAwO,sBAAAjN,EAAA+G,EAAAkF,eAAAY,GAAA,aAAApO,KAAAmO,wBAGAK,sBAAA,SAAAd,GACA9I,MAAA5B,KAAA4B,GAAc8I,EACHS,KACX3D,wBAAAkB,QAAA,SAAA3K,EAAA2H,GACAxD,EAAAA,MAAAA,WACIuJ,EAAAA,MAAAA,kBAAsBvJ,GAAA,IAC1BA,IAAAA,MAIIN,2BAAWI,SAAXsD,GACA1D,KAAAA,qBAAArD,EAAA+G,EAAAkF,eAAAY,GAAA,aACHpO,KANDmO,wBAQAE,qBAAA,SAAAX,GACHA,MAxjBwE1K,KAAA0K,GAAAA,EA4hBpD1N,KA8BrBwK,wBAAAkB,QAAA,SAAA3K,EAAA2H,GACAgG,EAAAA,MAAc,WACVC,EAAQxC,MAAUwC,iBAAlBjB,GAAA,IACQ,IAARhF,MAKA6F,aAAI3J,SAAa0D,GACjB1D,GAAAA,GAAWgK,KA5BP1J,EAAaN,EAAWM,WA8B5B2J,EAAAtN,EAAA+G,EAAAkF,eAAA9K,KAAA,QAEIuK,GAAAA,EAAc,kBAD8BC,KAAAtI,EAAAkK,kBAAAD,IAE5CE,EAAAA,uBAEAC,EAAAA,SAAAA,EACIpK,IAAAA,GAAcM,EAAA+J,MAAd,EAAoCC,EACpCtK,GAAAA,aAAW6I,KAAAA,WACX7I,EAAAA,QAAWM,GACN3B,QAAM,IACHqB,EAAAA,gBAEHA,EAJLI,SAAAgB,QAKHpB,EAZ2C1C,WAcxC0C,EAAAA,KAAAA,mBAAAA,EAAA8J,cAKHA,YAnB2C,SAAAC,GAoB5CQ,EAAAA,EAAAA,SAAUR,GAAAA,EAAA,EACN/J,KAAAA,EAAAA,iBAAWqB,WAAX0I,IAIHlM,eAAA,WAzB2C,GAAAmC,GAAhD5E,IAHA4E,GAAWgK,sBAiCP3B,EAAAA,EAAc,qBAD6BiC,aAE3CH,KAAAA,mBA7BAA,YAAc/K,GAAI,oBAgCdY,cAAAA,SAAWI,GACXJ,EAAAA,EAAAA,qBAAAsK,YAAgD,kBAChDtK,EAAAA,WAAWmE,GAAAA,qCACXnE,EAAAA,WAAW4F,WACPzJ,KAAAA,WACA6D,EAAArD,EAAA,qBAAA2N,YAAA,kBACAtK,EAAWsD,WAAAA,OAGXtD,SAAAA,SAAAA,GAGHA,EAJDqB,cAAAmJ,EAKAxK,EAAAA,SAAA,WACIA,MAAAA,MAAAA,MAAW6I,WAAX7I,EAAAqB,iBAEHrB,EAHDoC,cAAA,IAKJqI,QAAAA,SAAWD,GACPxK,EAAAA,cAAWmE,KAEPhI,EAAAA,WACH6D,EAFDoC,cAAA,MAOIjG,EAAAA,EAAAA,oBAAauO,aAChBrC,KAFD,kBAGH8B,YAAA/K,GAAA,uBA9BDgL,cAAgB,SAAUI,GAiC9BxK,EAAAI,SAAAgB,QACG2H,EAAS4B,EAAQ,oBAAUL,YAAA,kBAC1BtK,EAAWyC,cAAAA,EADfzC,EAAA4F,wBAAAkB,QAAA,SAAA3K,GA7BYA,EAAOR,MAAMuI,YAAasG,GAkCtCxK,EAAAsD,qBAAAnH,KAEI6D,EAAI4K,SAAW5K,SAAW6K,SAA1BC,GACA9K,EAAWoE,YACXpE,GAAW+K,aAAAA,EAAqBH,KAAhC,EAAAxL,GAAA,MAAA0L,EAAAE,OAHJ7M,KAAA,QA/oBqE6B,EAAAI,SAAA6K,SAAAtM,KAAA,WAsnBzDqB,EAAW6I,WAAY,IAiCvC7I,EAAArD,EAAA,oBAAA2N,YAAA,qBAGQY,SAAAA,SAAcV,GACdW,EAAchH,cAFgCqG,EAG9CY,EAH8CxF,wBAAAkB,QAAA,SAAA3K,GAI9C8J,EAAiBtK,MAAK0P,YAAAA,MA7BtBd,QAAU,SAAUC,GAiC5BxK,EAAAmE,cAAA,KACAoF,EAAAA,wBAAuBzC,QAAUpD,SAAIvH,GACjCA,EAAAR,MAAA+O,mBAMA/N,EAAAoM,QAAIuC,OAAAA,WAAJtL,EACIuL,4BAMR,IAAAC,GAAA/P,EAAAgQ,SAAA,WACAZ,GAAAA,GAAY7K,EAAA6K,WACR7K,GAAI0L,mBAAuBd,GAA3B5K,EACIjD,oBAAwBE,IAD5B,IAGA7B,MAAAuB,EAAA,WAAOgP,SAAAC,OAAAJ,IAIVxB,oBAzrBwE,WAypBrE,MAAO5O,MAAKuB,EAAG,0BAA2BkP,SAkC9CX,UAAA,UACAY,UAAgB,SACZV,MAAA,EACAnF,QAAAtJ,EAAAvB,KAAAiQ,uBAAAjQ,UAKHmO,qBAnsBwE,SAAA7F,GAqsBzEtI,KAAAuB,EAAA,0BAAAkP,QAAA,WAIIpJ,yBAAA,WACItG,GAAAA,GAAOG,KAASK,EAAA,mBAAhBoP,QACHR,EAFDnQ,KAAAuB,EAAA,WAAA8E,SAzsBqEuK,EAAAV,EAAAW,KAAA,mBAAAxK,QA4qBrE6J,GAAa7J,OAAQ8J,GAkCzBU,KAAA,UAAAxK,OAAA8J,EAAAS,IAGInB,UACIlE,WADJ,GAAA+E,GAEIQ,KAAcvF,EAAAA,WAAiBrF,SACnCvE,EAAImP,EAAiBvF,SAAAzJ,IAEpB,QAttBoEA,KAAAH,EAurBjEoP,MAAUpP,EA8BV2O,EAAcvO,UAOI2O,cAAA,SAAAlB,GAEtBwB,GAAAA,GAAAA,GAAczQ,KAAM0Q,WACpBD,OAAAA,MAAAA,wBAAA7G,OAAA,SAAApJ,GA/tBqE,MAAAA,GAAA4B,gBAAA5B,EAAAU,OAAAyP,EAAApP,KAAAoP,EAAAH,UAquB/C/H,mBAAA,WACtBgI,KAAAA,gBAAczQ,QAAM0Q,SAAc/R,GAClC6B,EAAAG,QAAA,UAAAH,MAKJ4O,oBAAA,SAAAH,GACAA,EAAAA,GAAAxP,KAAAyP,WACAhL,IACI8G,GAAOvL,KAAAuB,EAAA,UA/uB8DgK,GAAAgF,SAAArK,aAAAsJ,EAAAuB,OAotBhDxF,EAAQxJ,QA0BtB,IAIX/B,KAAAkB,QAAA,kBAoBIiQ,0BAAA,WAGA,GAAAH,GAAAhR,KAAAmF,UAAAnF,KAAAkF,WAAAkC,iBACA4J,KAGJ/E,EAAAA,MAAAA,YAA6B3J,SACzBI,KA/CAsO,EAAczQ,MAAM6Q,iBAuDpBnH,2BAA0B,WAC1B,GAAA+G,GAA0BhR,KAAAmF,UAJVnF,KAAAkF,WAAAkC,iBAKhB4J,KACAA,EAAAzQ,MAA0B0Q,YAAA/R,EAAJ0B,gBAAAyQ,UAAAC,SAjDtBN,EAAczQ,MAAMgR,YAAa,EAoDrCtB,EAAAA,MAAAA,EAAAA,wBACI/I,WAoCJzC,SAAO,WACHP,MAAAA,sBAAoBA,KAAAA,QAAAA,KAAAA,QAAAA,OAAAA,GAAAA,KA/ExBsN,aAAenR,EAAEiC,UACb,6CACI,+DACI,qDAAsD0B,GAAI,QAAU,YACpE,2DACA,0DACA,6DACI,yCACJ,OACJ,SAEA,iEACI,4BAA6B,SACjC,SACA,gEACI,2DAA4DA,GAAI,cAAgB,aACpF,SACJ,SAEA,yDACI,4DACJ,SAEA,oDACFjB,KAAK,KAAOkB,SAAU,SAExBgI,yBAA2B5L,EAAEiC,UACzB,4CACI,8CAA+C0B,GAAI,qBAAuB,MAC9E,UACFjB,KAAK,KAAOkB,SAAU,SAExB6K,mBACI2C,YAAsBzN,GAAI,qBAC1B0N,kBAAsB1N,GAAI,sBAC1BiJ,KAAsBjJ,GAAI,gBAC1B2N,WAAsB3N,GAAI,gBAC1B4N,KAAsB5N,GAAI,wBAC1B6N,WAAsB7N,GAAI,yBAG9BiM,uBAAyB5P,EAAEiC,UACvB,6BACI,gCACI,wFACI0B,GAAI,sBAAyB,IAC7B,6FACA,8BACJ,YACA,yCACI,iEACI,iFACI,cACJ,YACJ,YACJ,QACJ,SAEA,2EACI,0DACAA,GAAI,6BACR,iBAEA,SAEA,2EACIA,GAAI,4BACR,iBACA,0EACIA,GAAI,2BACR,iBACJ,UACFjB,KAAK,KAAOkB,SAAU","file":"../../../scripts/mvc/history/multi-panel.js","sourcesContent":["define([\n    \"mvc/history/history-model\",\n    \"mvc/history/history-view-edit\",\n    \"mvc/history/copy-dialog\",\n    \"mvc/ui/error-modal\",\n    \"mvc/base-mvc\",\n    \"utils/ajax-queue\",\n    \"ui/mode-button\",\n    \"ui/search-input\"\n], function( HISTORY_MODEL, HISTORY_VIEW_EDIT, historyCopyDialog, ERROR_MODAL, baseMVC, ajaxQueue ){\n'use strict';\n\nvar logNamespace = 'history';\n/* ==============================================================================\nTODO:\n\n============================================================================== */\n/** @class A container for a history panel that renders controls for that history (delete, copy, etc.) */\nvar HistoryViewColumn = Backbone.View.extend( baseMVC.LoggableMixin ).extend({\n\n    _logNamespace : logNamespace,\n\n    tagName     : 'div',\n    className   : 'history-column flex-column flex-row-container',\n    id : function id(){\n        if( !this.model ){ return ''; }\n        return 'history-column-' + this.model.get( 'id' );\n    },\n\n    // ------------------------------------------------------------------------ set up\n    /** set up passed-in panel (if any) and listeners */\n    initialize : function initialize( options ){\n        options = options || {};\n        this.purgeAllowed = !_.isUndefined( options.purgeAllowed )? options.purgeAllowed: false;\n        this.panel = options.panel || this.createPanel( options );\n\n        this.setUpListeners();\n    },\n\n    /** create a history panel for this column */\n    createPanel : function createPanel( panelOptions ){\n        return new HISTORY_VIEW_EDIT.HistoryViewEdit( _.defaults( panelOptions, {\n            model           : this.model,\n            // non-current panels should set their hdas to draggable\n            purgeAllowed    : this.purgeAllowed,\n            dragItems       : true,\n            $scrollContainer: function(){ return this.$el; },\n        }));\n    },\n\n    /** set up reflexive listeners */\n    setUpListeners : function setUpListeners(){\n        var column = this;\n        //this.log( 'setUpListeners', this );\n        this.once( 'rendered', function(){\n            column.trigger( 'rendered:initial', column );\n        });\n        this.setUpPanelListeners();\n    },\n\n    /** set listeners needed for panel */\n    setUpPanelListeners : function setUpPanelListeners(){\n        var column = this;\n        this.listenTo( this.panel, {\n            //'all': function(){ console.info( 'panel of ' + this, arguments ); },\n\n            // assumes panel will take the longest to render\n            'rendered': function(){\n                column.trigger( 'rendered', column );\n            },\n            // when a panel's view expands turn off the click handler on the rerun button so that it uses it's href\n            // this allows the button to open the tool rerun form in a new tab (instead of erroring)\n            // TODO: hack\n            'view:expanded view:rendered': function( view ){\n                view.$( '.rerun-btn' ).off();\n            }\n        }, this );\n    },\n\n    /** do the dimensions of this column overlap the given (horizontal) browser coords? */\n    inView : function( viewLeft, viewRight ){\n        var columnLeft = this.$el.offset().left,\n            columnRight = columnLeft + this.$el.width();\n        if( columnRight < viewLeft ){ return false; }\n        if( columnLeft > viewRight ){ return false; }\n        return true;\n    },\n\n    /** shortcut to the panel */\n    $panel : function $panel(){\n        return this.$( '.history-panel' );\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** render ths column, its panel, and set up plugins */\n    render : function render( speed ){\n        speed = ( speed !== undefined )?( speed ):( 'fast' );\n        //this.log( this + '.render', this.$el, this.el );\n        //TODO: not needed\n        var modelData = this.model? this.model.toJSON(): {};\n        this.$el.html( this.template( modelData ) );\n        this.renderPanel( speed );\n        // jq 1.12 doesn't fade/show properly when display: flex, re-set here\n        this.panel.$el.css( 'display', 'flex' );\n        // if model and not children\n            // template\n            // render controls\n        this.setUpBehaviors();\n        // add panel\n        return this;\n    },\n\n    /** set up plugins */\n    setUpBehaviors : function setUpBehaviors(){\n        //this.log( 'setUpBehaviors:', this );\n        //var column = this;\n        // on panel size change, ...\n    },\n\n    /** column body template with inner div for panel based on data (model json) */\n    template : function template( data ){\n        data = _.extend( data || {}, {\n            isCurrentHistory : this.currentHistory\n        });\n        return $([\n            '<div class=\"panel-controls clear flex-row\">',\n                this.controlsLeftTemplate({ history: data, view: this }),\n                //'<button class=\"btn btn-default\">Herp</button>',\n                this.controlsRightTemplate({ history: data, view: this }),\n            '</div>',\n            '<div class=\"inner flex-row flex-column-container\">',\n                '<div id=\"history-', data.id, '\" class=\"history-column history-panel flex-column\"></div>',\n            '</div>'\n        ].join( '' ));\n    },\n\n    /** render the panel contained in the column using speed for fx speed */\n    renderPanel : function renderPanel( speed ){\n        speed = ( speed !== undefined )?( speed ):( 'fast' );\n        this.panel.setElement( this.$panel() ).render( speed );\n        if( this.currentHistory ){\n            this.panel.$list().before( this.panel._renderDropTargetHelp() );\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ behaviors and events\n    /** event map */\n    events : {\n        // will make this the current history\n        'click .switch-to.btn'      : function(){ this.model.setAsCurrent(); },\n        //TODO: remove boiler plate from next 3\n        'click .delete-history' : function(){\n            var column = this;\n            this.model._delete()\n                .done( function( data ){ column.render(); });\n        },\n        'click .undelete-history' : function(){\n            var column = this;\n            this.model.undelete()\n                .done( function( data ){ column.render(); });\n        },\n        'click .purge-history' : function(){\n            if( confirm( _l( 'This will permanently remove the data. Are you sure?' ) ) ){\n                var column = this;\n                this.model.purge()\n                    .done( function( data ){ column.render(); });\n            }\n        },\n        // will copy this history and make the copy the current history\n        'click .copy-history'       : 'copy'\n    },\n\n    // ------------------------------------------------------------------------ non-current controls\n    /** Open a modal to get a new history name, copy it (if not canceled), and makes the copy current */\n    copy : function copy(){\n        historyCopyDialog( this.model );\n    },\n\n    // ------------------------------------------------------------------------ templates\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsLeftTemplate : _.template([\n        '<div class=\"pull-left\">',\n            '<% if( data.history.isCurrentHistory ){ %>',\n                '<strong class=\"current-label\">', _l( 'Current History' ), '</strong>',\n            '<% } else { %>',\n                '<button class=\"switch-to btn btn-default\">', _l( 'Switch to' ), '</button>',\n            '<% } %>',\n        '</div>'\n    ].join( '' ), { variable : 'data' }),\n\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsRightTemplate : _.template([\n        '<div class=\"pull-right\">',\n            '<% if( !data.history.purged ){ %>',\n                '<div class=\"panel-menu btn-group\">',\n                    '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                        '<span class=\"caret\"></span>',\n                    '</button>',\n                    '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n                        '<% if( !data.history.deleted ){ %>',\n                            '<li><a href=\"javascript:void(0);\" class=\"copy-history\">',\n                                _l( 'Copy' ),\n                            '</a></li>',\n                            //'<li><a href=\"javascript:void(0);\" class=\"publish-history\">',\n                            //    _l( 'Publish' ),\n                            //'</a></li>',\n                            '<li><a href=\"javascript:void(0);\" class=\"delete-history\">',\n                                _l( 'Delete' ),\n                            '</a></li>',\n                        '<% } else /* if is deleted */ { %>',\n                            '<li><a href=\"javascript:void(0);\" class=\"undelete-history\">',\n                                _l( 'Undelete' ),\n                            '</a></li>',\n                        '<% } %>',\n                        '<% if( data.view.purgeAllowed ){ %>',\n                            '<li><a href=\"javascript:void(0);\" class=\"purge-history\">',\n                                _l( 'Purge' ),\n                            '</a></li>',\n                        '<% } %>',\n                    '</ul>',\n                '</div>',\n            '<% } %>',\n        '</div>'\n    ].join( '' ), { variable: 'data' }),\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString : function(){\n        return 'HistoryViewColumn(' + ( this.panel? this.panel : '' ) + ')';\n    }\n});\n\n\n//==============================================================================\n/** @class A view of a HistoryCollection and displays histories similarly to the current history panel.\n */\nvar MultiPanelColumns = Backbone.View.extend( baseMVC.LoggableMixin ).extend({\n    _logNamespace : logNamespace,\n\n    className : 'multi-panel-history',\n\n    // ------------------------------------------------------------------------ set up\n    /** Set up internals, history collection, and columns to display the history */\n    initialize : function initialize( options ){\n        options = options || {};\n        this.log( this + '.init', options );\n\n        // add the className here (since we gen. pass the el in options)\n        this.$el.addClass( this.className );\n\n        // --- instance vars\n        //TODO: move these to some defaults\n        this.options = {\n            columnWidth     : 312,\n            borderWidth     : 1,\n            columnGap       : 8,\n            headerHeight    : 29,\n            footerHeight    : 0,\n            controlsHeight  : 20\n        };\n\n        /** how many histories to get when fetching a new batch/page */\n        this.perPage = options.perPage || 10;\n\n        /** named ajax queue for loading hdas */\n        this.hdaQueue = new ajaxQueue.NamedAjaxQueue( [], false );\n\n        // --- set up models, sub-views, and listeners\n        /** the original unfiltered and unordered collection of histories */\n        this.collection = null;\n        /** model id to column map */\n        this.columnMap = {};\n        /** model id to column map */\n        this.columnOptions = options.columnOptions || {};\n\n        /** what to search for within all histories */\n        this.historySearch = null;\n        /** what to search for within all datasets */\n        this.datasetSearch = null;\n\n        this.setCollection( options.histories );\n        this.setUpListeners();\n    },\n\n    /** Set up reflexive listeners */\n    setUpListeners : function setUpListeners(){\n        var multipanel = this;\n        //multipanel.log( 'setUpListeners', multipanel );\n        this.on( 'end-of-scroll', function(){\n            multipanel.collection.fetchMore();\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    setCollection : function setCollection( collection ){\n        // console.log( 'setCollection:', collection );\n        this.stopListening( this.collection );\n\n        this.collection = collection || new HISTORY_MODEL.HistoryCollection();\n        this.setUpCollectionListeners();\n\n        this.createColumns();\n        this.hdaQueue.clear();\n\n        this.trigger( 'new-collection', this );\n        return this;\n    },\n\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    addModels : function addModels( models, collection, options ){\n        // console.log( 'addModels:', models, collection, options );\n        options = options || {};\n        var multipanel = this;\n        models = _.isArray( models )? models : [ models ];\n        models.forEach( function( model ){\n            multipanel.addColumn( model, false );\n            // if this is from a fetch, sort will be called and it will call render\n        });\n        return this;\n    },\n\n    /** Set up listeners for the collection - handling: added histories, change of current, deletion, and sorting */\n    setUpCollectionListeners : function(){\n        var multipanel = this;\n        multipanel.listenTo( multipanel.collection, {\n            // handle ajax errors from the collection\n            'error'                         : multipanel.errorHandler,\n            // add multiple models\n            'add'                           : multipanel.addModels,\n            // when all the histories a user has have been fetched\n            'all-fetched'                   : multipanel._postFetchAll,\n            // handle addition of histories, triggered by column copy and create new\n            'new-current'                   : multipanel.addAsCurrentColumn,\n            // handle setting a history as current, triggered by history.setAsCurrent\n            'set-as-current'                : multipanel.setCurrentHistory,\n            // handle deleting a history (depends on whether panels is including deleted or not)\n            'change:deleted change:purged'  : multipanel.handleDeletedHistory,\n            // re-render columns after a sort\n            'sort' : function(){\n                multipanel.renderColumns( 0 );\n            },\n        });\n    },\n\n    _postFetchAll : function( fetchData ){\n        // console.log( '_postFetchAll' );\n        this.$( '.histories-loading-indicator' ).remove();\n        // when new histories is fetched and the indicator is not required,\n        // the panel will jump slightly left - totally aesthetic but jarring\n        // TODO: this probably would be best handled elsewhere during a refinement cycle (if any)\n        if( !this.historySearch ){\n            var $scrollContainer = this.$( '.outer-middle' );\n            $scrollContainer.scrollLeft( $scrollContainer.scrollLeft() + 24 );\n        }\n    },\n\n    /** Re-render and set currentHistoryId to reflect a new current history */\n    setCurrentHistory : function setCurrentHistory( history ){\n        this.log( 'setCurrentHistory:', history );\n        var oldCurrentColumn = _.findWhere( this.columnMap, { currentHistory: true });\n        if( oldCurrentColumn ){\n            oldCurrentColumn.currentHistory = false;\n            oldCurrentColumn.$el.height( '' );\n        }\n\n        var newCurrentColumn = this.columnMap[ this.collection.currentHistoryId ];\n        newCurrentColumn.currentHistory = true;\n        this.collection.sort();\n        this._recalcFirstColumnHeight();\n        return newCurrentColumn;\n    },\n\n    /** Either remove a deleted history or re-render it to show the deleted message\n     *      based on collection.includeDeleted\n     */\n    handleDeletedHistory : function handleDeletedHistory( history ){\n        if( history.get( 'deleted' ) || history.get( 'purged' ) ){\n            this.log( 'handleDeletedHistory', this.collection.includeDeleted, history );\n            var multipanel = this,\n                column = multipanel.columnMap[ history.id ];\n            if( !column ){ return; }\n\n            // if it's the current column, create a new, empty history as the new current\n            if( column.model.id === this.collection.currentHistoryId ){\n                //TODO: figuring out the order of async here is tricky\n                //  - for now let the user handle the two step process\n                //multipanel.collection.create().done( function(){\n                //    if( !multipanel.collection.includeDeleted ){ multipanel.removeColumn( column, false ); }\n                //});\n            } else if( !multipanel.collection.includeDeleted ){\n                multipanel.removeColumn( column );\n            }\n       }\n    },\n\n    // ........................................................................ error handling\n    /** Event handler for errors (from the history collection mainly)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  (e.g. this.trigger( 'error', 'Heres a message', 'Heres a title' ))\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n    errorHandler : function( model, xhr, options ){\n        // interrupted ajax or no connection\n        if( xhr && xhr.status === 0 && xhr.readyState === 0 ){\n            // return ERROR_MODAL.offlineErrorModal();\n            // fail silently\n            return;\n        }\n        // otherwise, leave something to report in the console\n        this.error( model, xhr, options );\n        // and feedback to a modal\n        // if sent two strings (and possibly details as 'options'), use those as message and title\n        if( _.isString( model ) && _.isString( xhr ) ){\n            var message = model;\n            var title = xhr;\n            return ERROR_MODAL.errorModal( message, title, options );\n        }\n        // bad gateway\n        // TODO: possibly to global handler\n        if( xhr && xhr.status === 502 ){\n            return ERROR_MODAL.badGatewayErrorModal();\n        }\n        return ERROR_MODAL.ajaxErrorModal( model, xhr, options );\n    },\n\n    /** If Galaxy object is available handle error there, otherwise, locally (and crudely) */\n    _ajaxErrorHandler : function(){\n        ERROR_MODAL.ajaxErrorModal.apply( null, _.toArray( arguments ) );\n    },\n\n    /** create a new history and set it to current */\n    create : function( ev ){\n        return this.collection.create({ current: true });\n    },\n\n    // ------------------------------------------------------------------------ columns\n    /** create columns from collection */\n    createColumns : function createColumns( models, columnOptions ){\n        columnOptions = columnOptions || this.options.columnOptions;\n        var multipanel = this;\n        // clear column map\n        // TODO: make cummulative\n        multipanel.columnMap = {};\n        multipanel.collection.each( function( model, i ){\n            var column = multipanel.createColumn( model, columnOptions );\n            multipanel.columnMap[ model.id ] = column;\n        });\n    },\n\n    /** create a column and its panel and set up any listeners to them */\n    createColumn : function createColumn( history, options ){\n        // options passed can be re-used, so extend them before adding the model to prevent pollution for the next\n        options = _.extend( {}, options, {\n            model       : history,\n            purgeAllowed: Galaxy.config.allow_user_dataset_purge\n        });\n        var column = new HistoryViewColumn( options );\n        if( history.id === this.collection.currentHistoryId ){ column.currentHistory = true; }\n        this.setUpColumnListeners( column );\n        if( this.datasetSearch ){\n            column.panel.searchItems( this.datasetSearch );\n            this.queueHdaFetchDetails( column );\n        }\n        return column;\n    },\n\n    /** add a new column for history and render all columns if render is true */\n    addColumn : function add( history, render ){\n        // console.debug( 'adding column for:', history, render );\n        render = render !== undefined? render : true;\n        var newColumn = this.createColumn( history );\n        this.columnMap[ history.id ] = newColumn;\n        if( render ){\n            this.renderColumns();\n        }\n        return newColumn;\n    },\n\n    /** add a new column for history and make it the current history/column */\n    addAsCurrentColumn : function add( history, collection, options ){\n        //this.log( 'adding current column for:', history );\n        var multipanel = this,\n            newColumn = this.addColumn( history, false );\n        this.setCurrentHistory( history );\n        newColumn.once( 'rendered', function(){\n            multipanel.queueHdaFetch( newColumn );\n        });\n        return newColumn;\n    },\n\n    /** remove the given column, it's listeners, and optionally render */\n    removeColumn : function remove( column, render ){\n        render = render !== undefined? render : true;\n        this.log( 'removeColumn', column );\n        if( !column ){ return; }\n        var multipanel = this,\n            widthToRemove = this.options.columnWidth + this.options.columnGap;\n        column.$el.fadeOut( 'fast', function(){\n            if( render ){\n                $( this ).remove();\n                multipanel.$( '.middle' ).width( multipanel.$( '.middle' ).width() - widthToRemove );\n                multipanel.checkColumnsInView();\n                multipanel._recalcFirstColumnHeight();\n            }\n\n            //TODO: to freeColumn (where Columns have freePanel)\n            multipanel.stopListening( column.panel );\n            multipanel.stopListening( column );\n            delete multipanel.columnMap[ column.model.id ];\n            column.remove();\n        });\n    },\n\n    /** set up listeners for a column and it's panel - handling: hda lazy-loading, drag and drop */\n    setUpColumnListeners : function setUpColumnListeners( column ){\n        var multipanel = this;\n        multipanel.listenTo( column, {\n            //'all': function(){ console.info( 'column ' + column + ':', arguments ) },\n            'in-view': multipanel.queueHdaFetch\n        });\n\n        multipanel.listenTo( column.panel, {\n            //'all': function(){ console.info( 'panel ' + column.panel + ':', arguments ) },\n\n            'view:draggable:dragstart': function( ev, view, panel, column ){\n                multipanel._dropData = JSON.parse( ev.dataTransfer.getData( 'text' ) );\n                multipanel.currentColumnDropTargetOn();\n            },\n            'view:draggable:dragend': function( ev, view, panel, column ){\n                multipanel._dropData = null;\n                multipanel.currentColumnDropTargetOff();\n            },\n            'droptarget:drop': function( ev, data, panel ){\n                //note: bad copy sources fail silently\n                var toCopy = multipanel._dropData.filter( function( json ){\n                    return panel.model.contents.isCopyable( json );\n                });\n                multipanel._dropData = null;\n\n                var queue = new ajaxQueue.NamedAjaxQueue();\n                if( panel.model.contents.currentPage !== 0 ){\n                    queue.add({\n                        name : 'fetch-front-page',\n                        fn : function(){\n                            return panel.model.contents.fetchPage( 0 );\n                        }\n                    });\n                }\n                // need to reverse to better match expected order\n                // TODO: reconsider order in list-view._setUpItemViewListeners, dragstart (instead of here)\n                toCopy.reverse().forEach( function( content ){\n                    queue.add({\n                        name : 'copy-' + content.id,\n                        fn : function(){\n                            return panel.model.contents.copy( content );\n                        }\n                    });\n                });\n                queue.start();\n                queue.done( function( responses ){\n                    panel.model.fetch();\n                });\n            }\n         });\n    },\n\n    /** conv. fn to count the columns in columnMap */\n    columnMapLength : function(){\n        return Object.keys( this.columnMap ).length;\n    },\n\n    /** return array of Columns filtered by filters and sorted to match the collection\n     *  @param: filters Function[] array of filter fns\n     */\n    sortedFilteredColumns : function( filters ){\n        filters = filters || this.filters;\n        if( !filters || !filters.length ){\n            return this.sortedColumns();\n        }\n        var multipanel = this;\n        return multipanel.sortedColumns().filter( function( column, index ){\n            var filtered = column.currentHistory || _.every( filters.map( function( filter ){\n                return filter.call( column );\n            }));\n            return filtered;\n        });\n    },\n\n    /** return array of Columns sorted to match the collection */\n    sortedColumns : function(){\n        var multipanel = this;\n        var sorted = this.collection.map( function( history, index ){\n            return multipanel.columnMap[ history.id ];\n        });\n        return sorted;\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** Render this view, columns, and set up view plugins */\n    render : function render( speed ){\n        speed = speed !== undefined? speed: this.fxSpeed;\n        var multipanel = this;\n\n        multipanel.log( multipanel + '.render' );\n        multipanel.$el.html( multipanel.mainTemplate( multipanel ) );\n        multipanel.renderColumns( speed );\n\n        // set the columns to full height allowed and set up behaviors for thie multipanel\n        multipanel.setUpBehaviors();\n        //TODO: wrong - has to wait for columns to render\n        //  - create a column listener that fires this when all columns are rendered\n        multipanel.trigger( 'rendered', multipanel );\n        return multipanel;\n    },\n\n    /** Render the columns and panels */\n    renderColumns : function renderColumns( speed ){\n        speed = _.isNumber( speed )? speed: this.fxSpeed;\n        // console.log( 'renderColumns:', speed );\n        // render columns and track the total number rendered, firing an event when all are rendered\n        var self = this;\n        var sortedAndFiltered = self.sortedFilteredColumns();\n        // console.log( '\\t sortedAndFiltered:', sortedAndFiltered );\n        var $middle = self.$( '.middle' ).empty();\n\n        self._addColumns( sortedAndFiltered, speed );\n        if( !self.collection.allFetched ){\n            $middle.append( self.loadingIndicatorTemplate( self ) );\n        }\n        //TODO: sorta - at least their fx queue has started the re-rendering\n        self.trigger( 'columns-rendered', sortedAndFiltered, self );\n\n        if( self.datasetSearch && sortedAndFiltered.length <= 1 ){\n\n        } else {\n            // check for in-view, hda lazy-loading if so\n            self.checkColumnsInView();\n            // the first, current column has position: fixed and flex css will not apply - adjust height manually\n            self._recalcFirstColumnHeight();\n        }\n        return sortedAndFiltered;\n    },\n\n    _addColumns : function( columns, speed ){\n        speed = _.isNumber( speed )? speed: this.fxSpeed;\n        var $middle = this.$( '.middle' );\n\n        var numExisting = $middle.children( '.history-column' ).length;\n        $middle.width( this._calcMiddleWidth( columns.length + numExisting ) );\n\n        columns.forEach( function( column, i ){\n            column.delegateEvents().render( speed ).$el.appendTo( $middle );\n        });\n    },\n\n    _calcMiddleWidth : function( numColumns ){\n        var preventStackWidthAdj = 16;\n        return (\n            numColumns * ( this.options.columnWidth + this.options.columnGap ) +\n            // last column gap\n            this.options.columnGap +\n            // the amount that safely prevents stacking of columns when adding a new one\n            preventStackWidthAdj\n        );\n    },\n\n    //TODO: combine the following two more sensibly\n    //TODO: could have HistoryContents.haveDetails return false\n    //      if column.model.contents.length === 0 && !column.model.get( 'empty' ) then just check that\n    /** Get the *summary* contents of a column's history (and details on any expanded contents),\n     *      queueing the ajax call and using a named queue to prevent the call being sent twice\n     */\n    queueHdaFetch : function queueHdaFetch( column ){\n        // console.log( column.model + '.contentsShown:', column.model.contentsShown() );\n        var contents = column.model.contents;\n        // console.log( 'queueHdaFetch:', column, column.model.get( 'contents_active' ) );\n        // if the history model says it has hdas but none are present, queue an ajax req for them\n        if( contents.length === 0 && column.model.contentsShown() ){\n            var fetchOptions = { silent: true };\n            var ids = _.values( contents.storage.allExpanded() ).join();\n            if( ids ){ fetchOptions.details = ids; }\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name : column.model.id,\n                fn : function(){\n                    return contents.fetchCurrentPage( fetchOptions )\n                        .done( function(){ column.panel.renderItems(); });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if( !this.hdaQueue.running ){ this.hdaQueue.start(); }\n        }\n    },\n\n    /** Get the *detailed* json for *all* of a column's history's contents - req'd for searching */\n    queueHdaFetchDetails : function( column ){\n        var contents = column.model.contents;\n        var needsContentsLoaded = contents.length === 0 && column.model.contentsShown();\n        if( needsContentsLoaded || !contents.haveDetails() ){\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name : column.model.id,\n                fn : function(){\n                    return contents.progressivelyFetchDetails()\n                        .done( function(){ column.panel._renderEmptyMessage(); });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if( !this.hdaQueue.running ){ this.hdaQueue.start(); }\n        }\n    },\n\n    /** put a text msg in the header */\n    renderInfo : function( msg ){\n        return this.$( '.header .header-info' ).text( msg );\n    },\n\n    // ------------------------------------------------------------------------ events/behaviors\n    events : {\n        // will move to the server root (gen. Analyze data)\n        'click .done.btn'           : 'close',\n        // creates a new empty history and makes it current\n        'click .create-new.btn'     : 'create',\n        'click #include-deleted'    : '_clickToggleDeletedHistories',\n        // these change the collection and column sort order\n        'click .order .set-order'   : '_chooseOrder',\n        'click #toggle-deleted'     : '_clickToggleDeletedDatasets',\n        'click #toggle-hidden'      : '_clickToggleHiddenDatasets',\n        //'dragstart .list-item .title-bar'                       : function( e ){ console.debug( 'ok' ); }\n    },\n\n    close : function( ev ){\n        //TODO: switch to pushState/router\n        window.location = Galaxy.root;\n    },\n\n    _clickToggleDeletedHistories : function( ev ){\n        this.toggleDeletedHistories( $( ev.currentTarget ).is( ':checked' ) );\n        this.toggleOptionsPopover();\n    },\n    /** Include deleted histories in the collection */\n    toggleDeletedHistories : function( show ){\n        if( show ){\n            window.location = Galaxy.root + 'history/view_multiple?include_deleted_histories=True';\n        } else {\n            window.location = Galaxy.root + 'history/view_multiple';\n        }\n    },\n\n    _clickToggleDeletedDatasets : function( ev ){\n        this.toggleDeletedDatasets( $( ev.currentTarget ).is( ':checked' ) );\n        this.toggleOptionsPopover();\n    },\n    toggleDeletedDatasets : function( show ){\n        show = show !== undefined? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach( function( column, i ){\n            _.delay( function(){\n                column.panel.toggleShowDeleted( show, false );\n            }, i * 200 );\n        });\n    },\n\n    _clickToggleHiddenDatasets : function( ev ){\n        this.toggleHiddenDatasets( $( ev.currentTarget ).is( ':checked' ) );\n        this.toggleOptionsPopover();\n    },\n    toggleHiddenDatasets : function( show ){\n        show = show !== undefined? show : false;\n        var multipanel = this;\n        multipanel.sortedFilteredColumns().forEach( function( column, i ){\n            _.delay( function(){\n                column.panel.toggleShowHidden( show, false );\n            }, i * 200 );\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    _chooseOrder : function( ev ){\n        var multipanel = this,\n            collection = multipanel.collection,\n            orderKey = $( ev.currentTarget ).data( 'order' );\n        // set the sort order text also\n        multipanel.$( '.current-order' ).text( multipanel.orderDescriptions[ orderKey ] );\n        multipanel.toggleOptionsPopover();\n        // set the order and re-fetch using the new order, saving the current history as the first\n        collection.setOrder( orderKey );\n        var currentHistoryModel = collection.slice( 0, 1 );\n        collection.fetchFirst().done( function(){\n            collection.unshift( currentHistoryModel, { silent: true });\n            multipanel.createColumns();\n            // need to clear this or previously fetched contents won't refetch now (bc of named queue)\n            multipanel.hdaQueue.clear();\n            multipanel.render();\n        });\n        multipanel.once( 'columns-rendered', multipanel._scrollLeft );\n        //TODO: check allFetched and do not reset if so - just sort instead\n    },\n\n    /** scroll the column container right or left */\n    _scrollLeft : function( val ){\n        val = _.isNumber( val )? val : 0;\n        this.$( '.outer-middle' ).scrollLeft( val );\n    },\n\n    /** Set up any view plugins */\n    setUpBehaviors : function(){\n        var multipanel = this;\n        multipanel._moreOptionsPopover();\n\n        // input to search histories\n        multipanel.$( '#search-histories' ).searchInput({\n            name        : 'search-histories',\n            placeholder : _l( 'search histories' ),\n\n            onfirstsearch : function( searchFor ){\n                multipanel.$( '#search-histories' ).searchInput( 'toggle-loading' );\n                multipanel.renderInfo( _l( 'loading all histories for search' ) );\n                multipanel.collection.fetchAll()\n                    .done( function(){\n                        multipanel.$( '#search-histories' ).searchInput( 'toggle-loading' );\n                        multipanel.renderInfo( '' );\n                    });\n            },\n            onsearch : function( searchFor ){\n                multipanel.historySearch = searchFor;\n                multipanel.filters = [ function(){\n                    return this.model.matchesAll( multipanel.historySearch );\n                }];\n                multipanel.renderColumns( 0 );\n            },\n            onclear : function( searchFor ){\n                multipanel.historySearch = null;\n                //TODO: remove specifically not just reset\n                multipanel.filters = [];\n                multipanel.renderColumns( 0 );\n            }\n        });\n\n        // input to search datasets\n        multipanel.$( '#search-datasets' ).searchInput({\n            name        : 'search-datasets',\n            placeholder : _l( 'search all datasets' ),\n\n            onfirstsearch : function( searchFor ){\n                multipanel.hdaQueue.clear();\n                multipanel.$( '#search-datasets' ).searchInput( 'toggle-loading' );\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach( function( column ){\n                    column.panel.searchItems( searchFor );\n                    // load details for them that need\n                    multipanel.queueHdaFetchDetails( column );\n                });\n                multipanel.hdaQueue.progress( function( progress ){\n                    multipanel.renderInfo([\n                        _l( 'searching' ), ( progress.curr + 1 ), _l( 'of' ), progress.total\n                    ].join( ' ' ));\n                });\n                multipanel.hdaQueue.deferred.done( function(){\n                    multipanel.renderInfo( '' );\n                    multipanel.$( '#search-datasets' ).searchInput( 'toggle-loading' );\n                });\n            },\n            onsearch : function( searchFor ){\n                multipanel.datasetSearch = searchFor;\n                multipanel.sortedFilteredColumns().forEach( function( column ){\n                    column.panel.searchItems( searchFor );\n                });\n            },\n            onclear : function( searchFor ){\n                multipanel.datasetSearch = null;\n                multipanel.sortedFilteredColumns().forEach( function( column ){\n                    column.panel.clearSearch();\n                });\n            }\n        });\n\n        // resize first (fixed position) column on page resize\n        $( window ).resize( function(){\n            multipanel._recalcFirstColumnHeight();\n        });\n\n        // when scrolling - check for histories now in view: they will fire 'in-view' and queueHdaLoading if necc.\n        //TODO:?? might be able to simplify and not use pub-sub\n        var debouncedInView = _.debounce( function _debouncedInner(){\n            var viewport = multipanel._viewport();\n            multipanel.checkColumnsInView( viewport );\n            multipanel.checkForEndOfScroll( viewport );\n        }, 100 );\n        this.$( '.middle' ).parent().scroll( debouncedInView );\n    },\n\n    /** create the options popover */\n    _moreOptionsPopover : function(){\n        return this.$( '.open-more-options.btn' ).popover({\n            container   : '.header',\n            placement   : 'bottom',\n            html        : true,\n            content     : $( this.optionsPopoverTemplate( this ) )\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    toggleOptionsPopover : function( ev ){\n        // hide seems broken in our version\n        this.$( '.open-more-options.btn' ).popover( 'toggle' );\n    },\n\n    /** Adjust the height of the first, current column since flex-boxes won't work with fixed postiion elements */\n    _recalcFirstColumnHeight : function(){\n        var $firstColumn = this.$( '.history-column' ).first(),\n            middleHeight = this.$( '.middle' ).height(),\n            controlHeight = $firstColumn.find( '.panel-controls' ).height();\n        $firstColumn.height( middleHeight )\n            .find( '.inner' ).height( middleHeight - controlHeight );\n    },\n\n    /** Get the left and right pixel coords of the middle element */\n    _viewport : function(){\n        var $outerMiddle = this.$( '.middle' ).parent(),\n            viewLeft = $outerMiddle.offset().left,\n            width = $outerMiddle.width();\n        return {\n            left    : viewLeft,\n            right   : viewLeft + width\n        };\n    },\n\n    /** returns the columns currently in the viewport */\n    columnsInView : function( viewport ){\n        //TODO: uses offset which is render intensive\n        //TODO: 2N - could use arg filter (sortedFilteredColumns( filter )) instead\n        var vp = viewport || this._viewport();\n        return this.sortedFilteredColumns().filter( function( column ){\n            return column.currentHistory || column.inView( vp.left, vp.right );\n        });\n    },\n\n    //TODO: sortByInView - return cols in view, then others\n    /** trigger in-view from columns in-view */\n    checkColumnsInView : function(){\n        //TODO: assbackward - don't fire from the column, fire from here and listen from here\n        this.columnsInView().forEach( function( column ){\n            column.trigger( 'in-view', column );\n        });\n    },\n\n    /** is the middle, horizontally scrolling section scrolled fully to the right? */\n    checkForEndOfScroll : function( viewport ){\n        viewport = viewport || this._viewport();\n        var END_PADDING = 16,\n            $middle = this.$( '.middle' ),\n            scrollRight = $middle.parent().scrollLeft() + viewport.right;\n        if( scrollRight >= ( $middle.width() - END_PADDING ) ){\n            this.trigger( 'end-of-scroll' );\n        }\n    },\n\n    /** Show and enable the current columns drop target */\n    currentColumnDropTargetOn : function(){\n        var currentColumn = this.columnMap[ this.collection.currentHistoryId ];\n        if( !currentColumn ){ return; }\n        //TODO: fix this - shouldn't need monkeypatch\n        currentColumn.panel.dataDropped = function( data ){};\n        currentColumn.panel.dropTargetOn();\n    },\n\n    /** Hide and disable the current columns drop target */\n    currentColumnDropTargetOff : function(){\n        var currentColumn = this.columnMap[ this.collection.currentHistoryId ];\n        if( !currentColumn ){ return; }\n        currentColumn.panel.dataDropped = HISTORY_VIEW_EDIT.HistoryViewEdit.prototype.dataDrop;\n        // slight override of dropTargetOff to not erase drop-target-help\n        currentColumn.panel.dropTarget = false;\n        currentColumn.panel.$( '.history-drop-target' ).remove();\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString : function(){\n        return 'MultiPanelColumns(' + ( this.columns? this.columns.length : 0 ) + ')';\n    },\n\n    // ------------------------------------------------------------------------ templates\n    mainTemplate : _.template([\n        '<div class=\"header flex-column-container\">',\n            '<div class=\"control-column control-column-left flex-column\">',\n                '<button class=\"done btn btn-default\" tabindex=\"1\">', _l( 'Done' ), '</button>',\n                '<div id=\"search-histories\" class=\"search-control\"></div>',\n                '<div id=\"search-datasets\" class=\"search-control\"></div>',\n                '<a class=\"open-more-options btn btn-default\" tabindex=\"3\">',\n                    '<span class=\"fa fa-ellipsis-h\"></span>',\n                '</a>',\n            '</div>',\n            // feedback\n            '<div class=\"control-column control-column-center flex-column\">',\n                '<div class=\"header-info\">', '</div>',\n            '</div>',\n            '<div class=\"control-column control-column-right flex-column\">',\n                '<button class=\"create-new btn btn-default\" tabindex=\"4\">', _l( 'Create new' ), '</button> ',\n            '</div>',\n        '</div>',\n        // middle - where the columns go\n        '<div class=\"outer-middle flex-row flex-row-container\">',\n            '<div class=\"middle flex-column-container flex-row\"></div>',\n        '</div>',\n        // footer\n        '<div class=\"footer flex-column-container\"></div>'\n    ].join(''), { variable: 'view' }),\n\n    loadingIndicatorTemplate : _.template([\n        '<div class=\"histories-loading-indicator\">',\n            '<span class=\"fa fa-spin fa-spinner\"></span>', _l( 'Loading histories' ), '...',\n        '</div>'\n    ].join(''), { variable: 'view' }),\n\n    orderDescriptions : {\n        'update_time'       : _l( 'most recent first' ),\n        'update_time-asc'   : _l( 'least recent first' ),\n        'name'              : _l( 'name, a to z' ),\n        'name-dsc'          : _l( 'name, z to a' ),\n        'size'              : _l( 'size, large to small' ),\n        'size-asc'          : _l( 'size, small to large' )\n    },\n\n    optionsPopoverTemplate : _.template([\n        '<div class=\"more-options\">',\n            '<div class=\"order btn-group\">',\n                '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                    _l( 'Order histories by' ) + ' ',\n                    '<span class=\"current-order\"><%- view.orderDescriptions[ view.collection.order ] %></span> ',\n                    '<span class=\"caret\"></span>',\n                '</button>',\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    '<% _.each( view.orderDescriptions, function( text, order ){ %>',\n                        '<li><a href=\"javascript:void(0);\" class=\"set-order\" data-order=\"<%- order %>\">',\n                            '<%- text %>',\n                        '</a></li>',\n                    '<% }); %>',\n                '</ul>',\n            '</div>',\n\n            '<div class=\"checkbox\"><label><input id=\"include-deleted\" type=\"checkbox\"',\n                '<%= view.collection.includeDeleted? \" checked\" : \"\" %>>',\n                _l( 'Include deleted histories' ),\n            '</label></div>',\n\n            '<hr />',\n\n            '<div class=\"checkbox\"><label><input id=\"toggle-deleted\" type=\"checkbox\">',\n                _l( 'Include deleted datasets' ),\n            '</label></div>',\n            '<div class=\"checkbox\"><label><input id=\"toggle-hidden\" type=\"checkbox\">',\n                _l( 'Include hidden datasets' ),\n            '</label></div>',\n        '</div>'\n    ].join(''), { variable: 'view' })\n\n});\n\n\n//==============================================================================\n    return {\n        MultiPanelColumns : MultiPanelColumns\n    };\n});\n"]}