{"version":3,"sources":["mvc/library/library-library-view.js"],"names":["LibraryView","Backbone","View","extend","el","model","options","events","click .toolbtn_save_permissions","initialize","this","_","id","fetchLibrary","_libraryModel2","default","Library","fetch","success","that","show_permissions","showPermissions","error","response","responseJSON","_toastr2","err_msg","Galaxy","libraries","library_router","back","onclick","$","remove","undefined","fetched_permissions","access_library_role_list","is_unrestricted","is_admin","user","isAdmin","template","templateLibraryPermissions","$el","library","self","get","html","done","fail","tooltip","css","_serializeRoles","i","selected_roles","role_list","length","prepareSelectBoxes","selected_access_library_roles","selected_manage_library_roles","selected_modify_library_roles","add_library_item_role_list","manage_library_role_list","_createSelectOptions","is_library_access","_uiSelect2","multiple","placeholder","container","ajax","url","data","page","q","page_limit","results","modifySelectObject","formatSelection","initSelection","element","init_data","name","callback","find","initialData","dropdownCssClass","quietMillis","term","makeDatasetPrivate","roles","more","formatResult","role","type","post","root","val","split","each","item","push","ids_list","savePermissions","modify_ids","set","removeDatasetRestrictions","_extractIds","roles_list","event","access_ids","accessSelectObject","select2","add_ids","addSelectObject","manage_ids","manageSelectObject","access_ids[]","add_ids[]","manage_ids[]","modify_ids[]","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-library-view.js","sourcesContent":["import mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nvar LibraryView = Backbone.View.extend({\n    el: \"#center\",\n\n    model: null,\n\n    options: {},\n\n    events: {\n        \"click .toolbtn_save_permissions\": \"savePermissions\"\n    },\n\n    initialize: function(options) {\n        this.options = _.extend(this.options, options);\n        if (this.options.id) {\n            this.fetchLibrary();\n        }\n    },\n\n    fetchLibrary: function(options) {\n        this.options = _.extend(this.options, options);\n        this.model = new mod_library_model.Library({\n            id: this.options.id\n        });\n        var that = this;\n        this.model.fetch({\n            success: function() {\n                if (that.options.show_permissions) {\n                    that.showPermissions();\n                }\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(\n                        `${response.responseJSON\n                            .err_msg} Click this to go back.`,\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                } else {\n                    mod_toastr.error(\n                        \"An error occurred. Click this to go back.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                }\n            }\n        });\n    },\n\n    showPermissions: function(options) {\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").remove();\n\n        if (this.options.fetched_permissions !== undefined) {\n            if (\n                this.options.fetched_permissions.access_library_role_list\n                    .length === 0\n            ) {\n                this.model.set({ is_unrestricted: true });\n            } else {\n                this.model.set({ is_unrestricted: false });\n            }\n        }\n        var is_admin = false;\n        if (Galaxy.user) {\n            is_admin = Galaxy.user.isAdmin();\n        }\n        var template = this.templateLibraryPermissions();\n        this.$el.html(template({ library: this.model, is_admin: is_admin }));\n\n        var self = this;\n        $.get(\n            `${Galaxy.root}api/libraries/${self.id}/permissions?scope=current`\n        )\n            .done(fetched_permissions => {\n                self.prepareSelectBoxes({\n                    fetched_permissions: fetched_permissions\n                });\n            })\n            .fail(() => {\n                mod_toastr.error(\n                    \"An error occurred while attempting to fetch library permissions.\"\n                );\n            });\n\n        $(\"#center [data-toggle]\").tooltip();\n        //hack to show scrollbars\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    _serializeRoles: function(role_list) {\n        var selected_roles = [];\n        for (var i = 0; i < role_list.length; i++) {\n            selected_roles.push(`${role_list[i][1]}:${role_list[i][0]}`);\n        }\n        return selected_roles;\n    },\n\n    prepareSelectBoxes: function(options) {\n        this.options = _.extend(this.options, options);\n        var fetched_permissions = this.options.fetched_permissions;\n        var self = this;\n\n        var selected_access_library_roles = this._serializeRoles(\n            fetched_permissions.access_library_role_list\n        );\n        var selected_add_item_roles = this._serializeRoles(\n            fetched_permissions.add_library_item_role_list\n        );\n        var selected_manage_library_roles = this._serializeRoles(\n            fetched_permissions.manage_library_role_list\n        );\n        var selected_modify_library_roles = this._serializeRoles(\n            fetched_permissions.modify_library_role_list\n        );\n\n        self.accessSelectObject = new mod_select.View(\n            this._createSelectOptions(\n                this,\n                \"access_perm\",\n                selected_access_library_roles,\n                true\n            )\n        );\n        self.addSelectObject = new mod_select.View(\n            this._createSelectOptions(\n                this,\n                \"add_perm\",\n                selected_add_item_roles,\n                false\n            )\n        );\n        self.manageSelectObject = new mod_select.View(\n            this._createSelectOptions(\n                this,\n                \"manage_perm\",\n                selected_manage_library_roles,\n                false\n            )\n        );\n        self.modifySelectObject = new mod_select.View(\n            this._createSelectOptions(\n                this,\n                \"modify_perm\",\n                selected_modify_library_roles,\n                false\n            )\n        );\n    },\n\n    _createSelectOptions: function(self, id, init_data, is_library_access) {\n        is_library_access =\n            is_library_access === true ? is_library_access : false;\n        var select_options = {\n            minimumInputLength: 0,\n            css: id,\n            multiple: true,\n            placeholder: \"Click to select a role\",\n            container: self.$el.find(`#${id}`),\n            ajax: {\n                url: `${Galaxy.root}api/libraries/${self.id}/permissions?scope=available&is_library_access=${is_library_access}`,\n                dataType: \"json\",\n                quietMillis: 100,\n                data: function(term, page) {\n                    // page is the one-based page number tracked by Select2\n                    return {\n                        q: term, //search term\n                        page_limit: 10, // page size\n                        page: page // page number\n                    };\n                },\n                results: function(data, page) {\n                    var more = page * 10 < data.total; // whether or not there are more results available\n                    // notice we return the value of more so Select2 knows if more results can be loaded\n                    return { results: data.roles, more: more };\n                }\n            },\n            formatResult: function roleFormatResult(role) {\n                return `${role.name} type: ${role.type}`;\n            },\n\n            formatSelection: function roleFormatSelection(role) {\n                return role.name;\n            },\n            initSelection: function(element, callback) {\n                // the input tag has a value attribute preloaded that points to a preselected role's id\n                // this function resolves that id attribute to an object that select2 can render\n                // using its formatResult renderer - that way the role name is shown preselected\n                var data = [];\n                $(element.val().split(\",\")).each(function() {\n                    var item = this.split(\":\");\n                    data.push({\n                        id: item[0],\n                        name: item[1]\n                    });\n                });\n                callback(data);\n            },\n            // initialData: init_data.join(','),\n            initialData: init_data,\n            dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n        };\n\n        return select_options;\n    },\n\n    makeDatasetPrivate: function() {\n        var self = this;\n        $.post(\n            `${Galaxy.root}api/libraries/datasets/${self.id}/permissions?action=make_private`\n        )\n            .done(fetched_permissions => {\n                self.model.set({ is_unrestricted: false });\n                self.showPermissions({\n                    fetched_permissions: fetched_permissions\n                });\n                mod_toastr.success(\"The dataset is now private to you.\");\n            })\n            .fail(() => {\n                mod_toastr.error(\n                    \"An error occurred while attempting to make dataset private.\"\n                );\n            });\n    },\n\n    removeDatasetRestrictions: function() {\n        var self = this;\n        $.post(\n            `${Galaxy.root}api/libraries/datasets/${self.id}/permissions?action=remove_restrictions`\n        )\n            .done(fetched_permissions => {\n                self.model.set({ is_unrestricted: true });\n                self.showPermissions({\n                    fetched_permissions: fetched_permissions\n                });\n                mod_toastr.success(\n                    \"Access to this dataset is now unrestricted.\"\n                );\n            })\n            .fail(() => {\n                mod_toastr.error(\n                    \"An error occurred while attempting to make dataset unrestricted.\"\n                );\n            });\n    },\n\n    _extractIds: function(roles_list) {\n        var ids_list = [];\n        for (var i = roles_list.length - 1; i >= 0; i--) {\n            ids_list.push(roles_list[i].id);\n        }\n        return ids_list;\n    },\n    savePermissions: function(event) {\n        var self = this;\n\n        var access_ids = this._extractIds(\n            this.accessSelectObject.$el.select2(\"data\")\n        );\n        var add_ids = this._extractIds(\n            this.addSelectObject.$el.select2(\"data\")\n        );\n        var manage_ids = this._extractIds(\n            this.manageSelectObject.$el.select2(\"data\")\n        );\n        var modify_ids = this._extractIds(\n            this.modifySelectObject.$el.select2(\"data\")\n        );\n\n        $.post(\n            `${Galaxy.root}api/libraries/${self.id}/permissions?action=set_permissions`,\n            {\n                \"access_ids[]\": access_ids,\n                \"add_ids[]\": add_ids,\n                \"manage_ids[]\": manage_ids,\n                \"modify_ids[]\": modify_ids\n            }\n        )\n            .done(fetched_permissions => {\n                //fetch dataset again\n                self.showPermissions({\n                    fetched_permissions: fetched_permissions\n                });\n                mod_toastr.success(\"Permissions saved.\");\n            })\n            .fail(() => {\n                mod_toastr.error(\n                    \"An error occurred while attempting to set library permissions.\"\n                );\n            });\n    },\n\n    templateLibraryPermissions: function() {\n        return _.template(\n            [\n                '<div class=\"library_style_container\">',\n                '<div id=\"library_toolbar\">',\n                '<a href=\"#\">',\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the list of Libraries\" class=\"btn btn-default primary-button\" type=\"button\">',\n                '<span class=\"fa fa-list\"/>',\n                \"&nbsp;Libraries\",\n                \"</button>\",\n                \"</a>\",\n                \"</div>\",\n                \"<h1>\",\n                'Library: <%= _.escape(library.get(\"name\")) %>',\n                \"</h1>\",\n                '<div class=\"alert alert-warning\">',\n                \"<% if (is_admin) { %>\",\n                \"You are logged in as an <strong>administrator</strong> therefore you can manage any library on this Galaxy instance. Please make sure you understand the consequences.\",\n                \"<% } else { %>\",\n                \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\",\n                \"<% }%>\",\n                \"</div>\",\n                '<div class=\"dataset_table\">',\n                \"<h2>Library permissions</h2>\",\n                \"<h4>Roles that can access the library</h4>\",\n                '<div id=\"access_perm\" class=\"access_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can access this library. If there are no access roles set on the library it is considered <strong>unrestricted</strong>.\",\n                \"</div>\",\n                \"<h4>Roles that can manage permissions on this library</h4>\",\n                '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can manage permissions on this library (includes giving access).\",\n                \"</div>\",\n                \"<h4>Roles that can add items to this library</h4>\",\n                '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can add items to this library (folders and datasets).\",\n                \"</div>\",\n                \"<h4>Roles that can modify this library</h4>\",\n                '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can modify this library (name, synopsis, etc.).\",\n                \"</div>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications made on this page\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">',\n                '<span class=\"fa fa-floppy-o\"/>',\n                \"&nbsp;Save\",\n                \"</button>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    LibraryView: LibraryView\n};\n"]}