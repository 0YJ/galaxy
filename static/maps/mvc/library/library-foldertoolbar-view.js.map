{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["define","mod_masthead","mod_utils","mod_toastr","mod_library_model","mod_select","FolderToolbarView","Backbone","View","extend","el","events","click #toolbtn_create_folder","click #toolbtn_bulk_import","click #include_deleted_datasets_chk","click #toolbtn_bulk_delete","click .toolbtn-show-locinfo","click .page_size_prompt","defaults","can_add_library_item","contains_file_or_folder","chain_call_control","total_number","failed_number","disabled_jstree_element","modal","jstree","histories","select_genome","select_extension","list_extensions","auto","id","text","description","list_genomes","initialize","options","this","_","fetchExtAndGenomes","render","toolbar_template","templateToolBar","template_defaults","is_admin","is_anonym","mutiple_add_dataset_options","Galaxy","user","isAdmin","isAnonymous","config","user_library_import_dir","allow_library_path_paste","library_import_dir","$el","html","renderPaginator","paginator_template","templatePaginator","$","find","show_page","parseInt","page_count","total_items_count","items_shown","configureElements","show","hide","tooltip","createFolderFromModal","event","preventDefault","stopPropagation","self","template","templateNewFolderInModal","closing_events","title","body","buttons","Create","create_new_folder_event","Close","folderDetails","serialize_new_folder","validate_new_folder","folder","FolderAsModel","url_items","history","fragment","split","current_folder_id","length","url","urlRoot","save","success","set","type","libraries","folderListView","collection","add","error","model","response","responseJSON","err_msg","name","val","modalBulkImport","info","refreshUserHistoriesList","that","templateBulkImportInModal","models","Import","importAllIntoHistory","callback","GalaxyHistories","fetch","disableButton","new_history_name","post","root","done","new_history","last_used_history_id","processImportToHistory","fail","xhr","status","always","enableButton","history_id","history_name","dataset_ids","folder_ids","each","parentElement","data","classList","contains","push","datasets_to_import","i","library_dataset_id","historyItem","HistoryItem","content","source","library_folder_id","initChainCallControl","action","jQuery","getJSON","chainCallImportingIntoHistory","updateProgress","progress","progressStep","width","Math","round","txt_representation","download","folder_id","format","ld_ids","processDownload","method","param","inputs","pair","appendTo","submit","remove","addFilesFromHistoryModal","template_modal","templateAddFilesFromHistory","folder_name","full_path","Add","addAllDatasetsFromHistory","closing_callback","library_router","back","fetchAndDisplayHistoryContents","change","target","value","importFilesFromPathModal","templateImportPathModal","importFromPathsClicked","navigate","trigger","renderSelectBoxes","get","datatypes","key","extension","description_url","sort","a","b","unshift","cache","genomes","css","container","importFilesFromGalaxyFolderModal","templateBrowserModal","importFromJstreePath","bind","renderJstree","Jstree","require","core","plugins","types","icon","file","checkbox","three_state","err_code","warning","preserve_dirs","is","link_data","file_type","dbkey","paths","valid_paths","trimmed","trim","chainCallImportingFolders","templateAddingDatasetsProgressBar","templateDeletingItemsProgressBar","templateImportIntoHistoryProgressBar","emit","all_nodes","get_selected","selected_nodes","filter","node","state","disabled","selection_type","undefined","li_attr","full_source","chainCallImportingUserdirFiles","history_contents","HistoryContents","history_contents_template","templateHistoryContents","contents","reverse","checked_hdas","history_item_ids","history_item_types","items_to_add","hid","item_type","history_item_id","folder_item","Item","from_hdca_id","from_hda_id","chainCallAddingHdas","history_item_set","popped_item","pop","onclick","window","location","when","hdas_set","added_hdas","Folder","chainCallDeletingItems","items_to_delete","deleted_items","destroy","item","include_deleted","updated_item","model_class","checkIncludeDeleted","checked","fetchFolder","deleteSelectedItems","checkedValues","substring","items_total","dataset","showLocInfo","library","libraryListView","parent_library_id","showLocInfoModal","Library","templateLocInfoInModal","showImportModal","showPageSizePrompt","folder_page_size","prompt","preferences","join"],"mappings":"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mBC,OAAQ,8CAA+CrQ,OAAOuD,UAAU+M,YAAY9G,IAAK,oBACrF,OAApB4G,GAAgCA,GAAoBpP,SAAUoP,KACjEpQ,OAAOuD,UAAU+M,YAAYjN,KAAO+M,iBAAoBpP,SAAUoP,KAClEpQ,OAAOuD,UAAUC,eAAe/D,QAAUT,GAAIM,KAAKD,QAAQL,GAAI+B,UAAW,MAIhFpB,gBAAiB,WACf,MAAOJ,GAAEsC,UAET,wCAEE,6BACE,yCACE,+CAEA,2DACA,sGACE,UACE,mFACF,WACF,SACA,qNACE,qEACF,YACA,0CACA,kEACE,oIACE,8FACF,YACA,yCACE,yEACA,6DACE,gFACF,UACA,qDACE,4BACA,+CACA,wDACE,mFACF,UACA,qDACE,kEACF,UACF,UACF,QACF,SACA,iBACE,0LACE,mEACF,OACF,UACA,iOACE,mCACA,mBACF,YACA,0FACE,kIACE,4EACF,YACA,yCACE,kEACA,kEACA,+DACF,QACF,SACE,+NACA,oDACA,8LACE,0CACA,gBACF,YACA,qGACE,gGACE,gDACE,8CACA,aACF,YACF,OACF,UACF,SACF,UAEF,kCACA,SAEA,wDAEF,UACE0O,KAAK,MAGTN,uBAAwB,WACtB,MAAO1Q,GAAEsC,UACP,QACE,6CACE,UACE,uCACA,YACF,WACA,UACE,OACE,gBACA,sCACF,QACA,gDACE,OACE,uBACA,6CACF,QACF,UACA,6CACE,OACE,oBACA,0CACF,QACF,UACA,uDACE,OACE,mBACA,2GACF,QACF,UACA,OACE,cACA,oCACF,QACF,WACF,WACA,6CACE,UACE,sCACA,YACF,WACA,UACE,OACE,gBACA,sCACF,QACA,gDACE,OACE,uBACA,6CACF,QACF,UACA,OACE,cACA,6BACF,QACA,WACJ,WACJ,UACE0O,KAAK,MAGTzO,yBAA0B,WACxB,MAAOvC,GAAEsC,UACT,8BACE,SACE,wEACA,4EACF,UACF,UACE0O,KAAK,MAITjM,0BAA4B,WAC1B,MAAO/E,GAAEsC,UACT,QACE,mCACE,mBACA,iHACE,8CACE,mGACF,YACF,YACF,SACA,mCACE,kBACA,4GACA,WACF,SACF,UACE0O,KAAK,MAGTtE,qCAAuC,WACrC,MAAO1M,GAAEsC,UACT,4BACE,2EACF,SACA,yBACE,gJACE,mDACF,SACF,UACE0O,KAAK,MAGTxE,kCAAmC,WACjC,MAAOxM,GAAEsC,UACT,4BACE,iFACF,SACA,yBACE,gJACE,mDACF,SACF,UACE0O,KAAK,MAGTvE,iCAAkC,WAChC,MAAOzM,GAAEsC,UACT,4BACA,SACA,yBACE,gJACE,mDACF,SACF,UACE0O,KAAK,MAGTjG,qBAAsB,WACpB,MAAO/K,GAAEsC,UACT,gCACE,0JACA,wLACA,mCACE,oFACE,yGACF,WACA,sFACA,uFACA,WACF,SACA,mCACE,kFACE,yFACA,+BACF,WACA,0EACE,mEACA,gCACF,WACF,SACA,qGACE,aACF,YACA,qGACE,cACF,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACE,gFACA,4EACA,SACJ,UACE0O,KAAK,MAGTpH,wBAAyB,WACvB,MAAO5J,GAAEsC,UACT,gCACE,+JACA,sCACE,4DACE,yFACA,+BACF,WACA,oDACE,mEACA,gCACF,WACF,SACA,uKACA,SACA,kFACA,QACE,gFACA,4EACF,SACF,UACE0O,KAAK,MAGTjI,4BAA6B,WAC3B,MAAO/I,GAAEsC,UACT,6BACE,QACE,oBACA,8EACE,8CACE,mGACF,YACF,YACF,SACA,QACA,sCACA,SACF,UACE0O,KAAK;wZAGTrD,wBAAyB,WACvB,MAAO3N,GAAEsC,UACT,kDACA,OACE,0DACE,oDACE,yDACI,kEACA,0CACE,+GACE,sJACF,QACD,iBACE,6FACG,2GACE,oKACF,UACF,QACF,UACN,iGACI,+GACE,iIACF,QACJ,UACF,UACF,YACF,SACE0O,KAAK,MAGT3P,kBAAmB,WACjB,MAAOrB,GAAEsC,UACT,wCACE,uCACE,gDACE,iGACA,wHACF,iBACE,iGACA,2GACF,UACF,iBACE,kHACA,wHACF,UACA,sBACE,0FACF,QACA,4CACE,2GACA,0HACF,iBACE,yHACA,2IACF,UACF,QACA,SACE,sBACA,8HACE,qBACF,OACA,0CACF,WACE0O,KAAK","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["define([\n    \"layout/masthead\",\n    \"utils/utils\",\n    \"libs/toastr\",\n    \"mvc/library/library-model\",\n    \"mvc/ui/ui-select\"\n    ],\nfunction( mod_masthead,\n          mod_utils,\n          mod_toastr,\n          mod_library_model,\n          mod_select\n        ){\n\nvar FolderToolbarView = Backbone.View.extend({\n  el: '#center',\n\n  events: {\n    'click #toolbtn_create_folder'        : 'createFolderFromModal',\n    'click #toolbtn_bulk_import'          : 'modalBulkImport',\n    'click #include_deleted_datasets_chk' : 'checkIncludeDeleted',\n    'click #toolbtn_bulk_delete'          : 'deleteSelectedItems',\n    'click .toolbtn-show-locinfo'         : 'showLocInfo',\n    'click .page_size_prompt'             : 'showPageSizePrompt'\n\n  },\n\n  defaults: {\n    'can_add_library_item'    : false,\n    'contains_file_or_folder' : false,\n    'chain_call_control'      : {\n                                'total_number'  : 0,\n                                'failed_number' : 0\n                              },\n    'disabled_jstree_element' : 'folders'\n  },\n\n  modal : null,\n\n  // directory browsing object\n  jstree: null,\n\n  // user's histories\n  histories : null,\n\n  // genome select\n  select_genome : null,\n\n  // extension select\n  select_extension : null,\n\n  // extension types\n  list_extensions :[],\n\n  // datatype placeholder for extension auto-detection\n  auto: {\n      id          : 'auto',\n      text        : 'Auto-detect',\n      description : 'This system will try to detect the file type automatically.' +\n                    ' If your file is not detected properly as one of the known formats,' +\n                    ' it most likely means that it has some format problems (e.g., different' +\n                    ' number of columns on different rows). You can still coerce the system' +\n                    ' to set your data to the format you think it should be.' +\n                    ' You can also upload compressed files, which will automatically be decompressed.'\n  },\n\n  // genomes\n  list_genomes : [],\n\n  initialize: function(options){\n    this.options = _.defaults( options || {}, this.defaults );\n    this.fetchExtAndGenomes();\n    this.render();\n  },\n\n  render: function(options){\n    this.options = _.extend( this.options, options );\n    var toolbar_template = this.templateToolBar();\n    var template_defaults = {\n        id: this.options.id,\n        is_admin: false,\n        is_anonym: true,\n        mutiple_add_dataset_options: false\n    }\n    if (Galaxy.user){\n      template_defaults.is_admin = Galaxy.user.isAdmin();\n      template_defaults.is_anonym = Galaxy.user.isAnonymous();\n      if ( Galaxy.config.user_library_import_dir !== null || Galaxy.config.allow_library_path_paste !== false || Galaxy.config.library_import_dir !== null ){\n        template_defaults.mutiple_add_dataset_options = true;\n      }\n    }\n    this.$el.html(toolbar_template(template_defaults));\n  },\n\n  /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n  renderPaginator: function( options ){\n      this.options = _.extend( this.options, options );\n      var paginator_template = this.templatePaginator();\n      $(\"body\").find( '.folder-paginator' ).html( paginator_template({\n          id: this.options.id,\n          show_page: parseInt( this.options.show_page ),\n          page_count: parseInt( this.options.page_count ),\n          total_items_count: this.options.total_items_count,\n          items_shown: this.options.items_shown\n      }));\n  },\n\n  configureElements: function(options){\n    this.options = _.extend(this.options, options);\n\n    if (this.options.can_add_library_item === true){\n      $('.add-library-items').show();\n    } else{\n      $('.add-library-items').hide();\n    }\n    if (this.options.contains_file_or_folder === true){\n      if (Galaxy.user){\n        if (!Galaxy.user.isAnonymous()){\n          $('.logged-dataset-manipulation').show();\n          $('.dataset-manipulation').show();\n        } else {\n          $('.dataset-manipulation').show();\n          $('.logged-dataset-manipulation').hide();\n        }\n      } else {\n        $('.logged-dataset-manipulation').hide();\n        $('.dataset-manipulation').hide();\n      }\n    } else {\n      $('.logged-dataset-manipulation').hide();\n      $('.dataset-manipulation').hide();\n    }\n    this.$el.find('[data-toggle]').tooltip();\n  },\n\n  // shows modal for creating folder\n  createFolderFromModal: function( event ){\n    event.preventDefault();\n    event.stopPropagation();\n\n    // create modal\n    var self = this;\n    var template = this.templateNewFolderInModal();\n    this.modal = Galaxy.modal;\n    this.modal.show({\n        closing_events  : true,\n        title           : 'Create New Folder',\n        body            : template(),\n        buttons         : {\n            'Create'    : function() {self.create_new_folder_event();},\n            'Close'     : function() {Galaxy.modal.hide();}\n        }\n    });\n  },\n\n  // create the new folder from modal\n  create_new_folder_event: function(){\n      var folderDetails = this.serialize_new_folder();\n      if (this.validate_new_folder(folderDetails)){\n          var folder = new mod_library_model.FolderAsModel();\n          url_items = Backbone.history.fragment.split('/');\n          current_folder_id = url_items[url_items.length-1];\n          folder.url = folder.urlRoot + current_folder_id ;\n\n          folder.save(folderDetails, {\n            success: function (folder) {\n              Galaxy.modal.hide();\n              mod_toastr.success('Folder created.');\n              folder.set({'type' : 'folder'});\n              Galaxy.libraries.folderListView.collection.add(folder);\n            },\n            error: function(model, response){\n              Galaxy.modal.hide();\n              if (typeof response.responseJSON !== \"undefined\"){\n                mod_toastr.error(response.responseJSON.err_msg);\n              } else {\n                mod_toastr.error('An error ocurred.');\n              }\n            }\n          });\n      } else {\n          mod_toastr.error('Folder\\'s name is missing.');\n      }\n      return false;\n  },\n\n  // serialize data from the modal\n  serialize_new_folder : function(){\n      return {\n          name: $(\"input[name='Name']\").val(),\n          description: $(\"input[name='Description']\").val()\n      };\n  },\n\n  // validate new folder info\n  validate_new_folder: function(folderDetails){\n      return folderDetails.name !== '';\n  },\n\n\n  // show bulk import modal\n  modalBulkImport : function(){\n      var checkedValues = $('#folder_table').find(':checked');\n      if(checkedValues.length === 0){\n          mod_toastr.info('You must select some datasets first.');\n      } else {\n          this.refreshUserHistoriesList(function(that){\n            var template = that.templateBulkImportInModal();\n            that.modal = Galaxy.modal;\n            that.modal.show({\n                closing_events  : true,\n                title           : 'Import into History',\n                body            : template({histories : that.histories.models}),\n                buttons         : {\n                    'Import'    : function() {that.importAllIntoHistory();},\n                    'Close'     : function() {Galaxy.modal.hide();}\n                }\n            });\n          });\n      }\n  },\n\n  refreshUserHistoriesList: function(callback){\n    var that = this;\n    this.histories = new mod_library_model.GalaxyHistories();\n    this.histories.fetch({\n      success: function (){\n        callback(that);\n      },\n      error: function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          mod_toastr.error(response.responseJSON.err_msg);\n        } else {\n          mod_toastr.error('An error ocurred.');\n        }\n      }\n    });\n  },\n\n  /**\n   * Import all selected datasets into history.\n   */\n  importAllIntoHistory : function (){\n    this.modal.disableButton('Import');\n    var new_history_name = this.modal.$('input[name=history_name]').val();\n    var that = this;\n    if (new_history_name !== ''){\n      $.post( Galaxy.root + 'api/histories', {name: new_history_name})\n        .done(function( new_history ) {\n          that.options.last_used_history_id = new_history.id;\n          that.processImportToHistory(new_history.id, new_history.name);\n        })\n        .fail(function( xhr, status, error ) {\n          mod_toastr.error('An error ocurred.');\n        })\n        .always(function() {\n          that.modal.enableButton('Import');\n        });\n    } else {\n      var history_id = $(\"select[name=dataset_import_bulk] option:selected\").val();\n      this.options.last_used_history_id = history_id;\n      var history_name = $(\"select[name=dataset_import_bulk] option:selected\").text();\n      this.processImportToHistory(history_id, history_name);\n      this.modal.enableButton('Import');\n    }\n  },\n\n  processImportToHistory: function( history_id, history_name ){\n    var dataset_ids = [];\n    var folder_ids = [];\n    $('#folder_table').find(':checked').each(function(){\n        if ($(this.parentElement.parentElement).data('id') !== '' && this.parentElement.parentElement.classList.contains('dataset_row') ) {\n            dataset_ids.push($(this.parentElement.parentElement).data('id'));\n        } else if ($(this.parentElement.parentElement).data('id') !== '' && this.parentElement.parentElement.classList.contains('folder_row') ) {\n            folder_ids.push($(this.parentElement.parentElement).data('id'));\n        }\n    });\n    // prepare the dataset objects to be imported\n    var datasets_to_import = [];\n    for (var i = dataset_ids.length - 1; i >= 0; i--) {\n        var library_dataset_id = dataset_ids[i];\n        var historyItem = new mod_library_model.HistoryItem();\n        historyItem.url = historyItem.urlRoot + history_id + '/contents';\n        historyItem.content = library_dataset_id;\n        historyItem.source = 'library';\n        datasets_to_import.push(historyItem);\n    }\n\n    // prepare the folder objects to be imported\n    var folders_to_import = [];\n    for (var i = folder_ids.length - 1; i >= 0; i--) {\n        var library_folder_id = folder_ids[i];\n        var historyItem = new mod_library_model.HistoryItem();\n        historyItem.url = historyItem.urlRoot + history_id + '/contents';\n        historyItem.content = library_folder_id;\n        historyItem.source = 'library_folder';\n        datasets_to_import.push(historyItem);\n    }\n\n    this.initChainCallControl( { length: datasets_to_import.length, action: 'to_history', history_name: history_name } );\n    // set the used history as current so user will see the last one\n    // that he imported into in the history panel on the 'analysis' page\n    jQuery.getJSON( Galaxy.root + 'history/set_as_current?id=' + history_id  );\n    this.chainCallImportingIntoHistory( datasets_to_import, history_name );\n  },\n\n  /**\n   * Update the progress bar in modal window.\n   */\n  updateProgress: function(){\n      this.progress += this.progressStep;\n      $( '.progress-bar-import' ).width( Math.round( this.progress ) + '%' );\n      txt_representation = Math.round( this.progress ) + '% Complete';\n      $( '.completion_span' ).text( txt_representation );\n  },\n\n  /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n  download : function( folder_id, format ){\n    var dataset_ids = [];\n    var folder_ids = [];\n        $( '#folder_table' ).find( ':checked' ).each( function(){\n            if ( $(this.parentElement.parentElement).data('id') !== '' && this.parentElement.parentElement.classList.contains('dataset_row') ) {\n                dataset_ids.push( $(this.parentElement.parentElement).data('id') );\n            } else if ( $(this.parentElement.parentElement).data('id') !== '' && this.parentElement.parentElement.classList.contains('folder_row') ) {\n                folder_ids.push( $(this.parentElement.parentElement).data('id') );\n            }\n        } );\n    var url = Galaxy.root + 'api/libraries/datasets/download/' + format;\n    var data = { 'ld_ids' : dataset_ids, 'folder_ids' : folder_ids };\n    this.processDownload( url, data, 'get' );\n  },\n\n  /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n  processDownload: function( url, data, method ){\n    if ( url && data ){\n      // data can be string of parameters or array/object\n      data = typeof data === 'string' ? data : $.param( data );\n      // split params into form inputs\n      var inputs = '';\n      $.each( data.split( '&' ), function(){\n              var pair = this.split( '=' );\n              inputs+='<input type=\"hidden\" name=\"'+ pair[0] +'\" value=\"'+ pair[1] +'\" />';\n      });\n      // send request\n      $('<form action=\"'+ url +'\" method=\"'+ (method||'post') +'\">'+inputs+'</form>')\n      .appendTo( 'body' ).submit().remove();\n      mod_toastr.info( 'Your download will begin soon.' );\n    } else {\n      mod_toastr.error( 'An error occurred.' );\n    }\n  },\n\n  addFilesFromHistoryModal: function(){\n    this.refreshUserHistoriesList( function( self ){\n      self.modal = Galaxy.modal;\n      var template_modal = self.templateAddFilesFromHistory();\n      var folder_name = self.options.full_path[self.options.full_path.length - 1][1]\n      self.modal.show({\n          closing_events  : true,\n          title           : 'Adding datasets from your history to folder ' + folder_name,\n          body            : template_modal({histories: self.histories.models}),\n          buttons         : {\n              'Add'       : function() {self.addAllDatasetsFromHistory();},\n              'Close'     : function() {Galaxy.modal.hide();}\n          },\n          closing_callback: function(){\n            Galaxy.libraries.library_router.back();\n          }\n      });\n\n      // user should always have a history, even anonymous user\n      if (self.histories.models.length > 0){\n        self.fetchAndDisplayHistoryContents(self.histories.models[0].id);\n        $( \"#dataset_add_bulk\" ).change(function(event) {\n          self.fetchAndDisplayHistoryContents(event.target.value);\n        });\n      } else {\n        mod_toastr.error( 'An error ocurred.' );\n      }\n    });\n  },\n\n  /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n  importFilesFromPathModal: function(){\n    var that = this;\n    this.modal = Galaxy.modal;\n    var template_modal = this.templateImportPathModal();\n    this.modal.show({\n        closing_events  : true,\n        title           : 'Please enter paths to import',\n        body            : template_modal({}),\n        buttons         : {\n            'Import'    : function() { that.importFromPathsClicked(that); },\n            'Close'     : function() { Galaxy.modal.hide(); }\n        },\n        closing_callback: function(){\n          //  TODO: should not trigger routes outside of the router\n          Galaxy.libraries.library_router.navigate( 'folders/' + that.id, { trigger: true } );\n        }\n    });\n    this.renderSelectBoxes();\n  },\n\n  /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n  fetchExtAndGenomes: function(){\n    var that = this;\n    mod_utils.get({\n        url      :  Galaxy.root + \"api/datatypes?extension_only=False\",\n        success  :  function( datatypes ) {\n                        that.list_extensions = [];\n                        for (key in datatypes) {\n                            that.list_extensions.push({\n                                id              : datatypes[key].extension,\n                                text            : datatypes[key].extension,\n                                description     : datatypes[key].description,\n                                description_url : datatypes[key].description_url\n                            });\n                        }\n                        that.list_extensions.sort(function(a, b) {\n                            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                        });\n                        that.list_extensions.unshift(that.auto);\n                    },\n        cache    : true\n      });\n    mod_utils.get({\n        url     :    Galaxy.root + \"api/genomes\",\n        success : function( genomes ) {\n                    that.list_genomes = [];\n                    for ( key in genomes ) {\n                        that.list_genomes.push({\n                            id      : genomes[key][1],\n                            text    : genomes[key][0]\n                        });\n                    }\n                    that.list_genomes.sort(function(a, b) {\n                        return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                    });\n                },\n        cache   : true\n    });\n  },\n\n  renderSelectBoxes: function(){\n    // This won't work properly unlesss we already have the data fetched.\n    // See this.fetchExtAndGenomes()\n    // TODO switch to common resources:\n    // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n    var that = this;\n    this.select_genome = new mod_select.View( {\n        css: 'library-genome-select',\n        data: that.list_genomes,\n        container: Galaxy.modal.$el.find( '#library_genome_select' ),\n        value: '?'\n    } );\n    this.select_extension = new mod_select.View({\n      css: 'library-extension-select',\n      data: that.list_extensions,\n      container: Galaxy.modal.$el.find( '#library_extension_select' ),\n      value: 'auto'\n    });\n  },\n\n  /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n  importFilesFromGalaxyFolderModal: function( options ){\n    var that = this;\n    var template_modal = this.templateBrowserModal();\n    this.modal = Galaxy.modal;\n    this.modal.show({\n      closing_events  : true,\n      title           : 'Please select folders or files',\n      body            : template_modal({}),\n      buttons         : {\n          'Import'    : function() {\n            that.importFromJstreePath( that, options );\n          },\n          'Close'     : function() {\n            Galaxy.modal.hide();\n          }\n      },\n      closing_callback: function(){\n        //  TODO: should not trigger routes outside of the router\n        Galaxy.libraries.library_router.navigate('folders/' + that.id, {trigger: true});\n      }\n    });\n\n    $('.libimport-select-all').bind(\"click\", function(){\n      $('#jstree_browser').jstree(\"check_all\");\n    });\n    $('.libimport-select-none').bind(\"click\", function(){\n      $('#jstree_browser').jstree(\"uncheck_all\");\n    });\n\n    this.renderSelectBoxes();\n    options.disabled_jstree_element = 'folders';\n    this.renderJstree( options );\n\n    $( 'input[type=radio]' ).change( function( event ){\n        if (event.target.value ==='jstree-disable-folders') {\n          options.disabled_jstree_element = 'folders';\n          that.renderJstree( options );\n          $('.jstree-folders-message').hide();\n          $('.jstree-preserve-structure').hide();\n          $('.jstree-link-files').hide();\n          $('.jstree-files-message').show();\n        } else if ( event.target.value ==='jstree-disable-files' ){\n          $('.jstree-files-message').hide();\n          $('.jstree-folders-message').show();\n          $('.jstree-link-files').show();\n          $('.jstree-preserve-structure').show();\n          options.disabled_jstree_element = 'files';\n          that.renderJstree( options );\n        }\n      }\n    );\n  },\n\n  /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n  renderJstree: function( options ){\n    var that = this;\n    this.options = _.extend( this.options, options );\n    var target = options.source || 'userdir';\n    var disabled_jstree_element = this.options.disabled_jstree_element;\n    this.jstree = new mod_library_model.Jstree();\n    this.jstree.url = this.jstree.urlRoot +\n                        '?target=' + target +\n                        '&format=jstree' +\n                        '&disable=' + disabled_jstree_element;\n    this.jstree.fetch({\n      success: function(model, response){\n        // This is to prevent double jquery load. I think. Carl is magician.\n        define( 'jquery', function(){ return jQuery; });\n        // Now we need jstree, time to lazy load it.\n        require([ 'libs/jquery/jstree' ], function(jstree){\n          $('#jstree_browser').jstree(\"destroy\");\n          $('#jstree_browser').jstree({\n            'core':{\n              'data': model\n            },\n            'plugins': ['types', 'checkbox'],\n            'types': {\n              \"folder\": {\n                \"icon\": \"jstree-folder\"\n              },\n              \"file\": {\n                \"icon\": \"jstree-file\"\n              }\n            },\n            'checkbox': {\n              three_state: false\n            }\n          });\n        });\n      },\n      error: function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          if (response.responseJSON.err_code === 404001){\n            mod_toastr.warning(response.responseJSON.err_msg);\n          } else{\n            mod_toastr.error(response.responseJSON.err_msg);\n          }\n        } else {\n          mod_toastr.error('An error ocurred.');\n        }\n      }\n    })\n  },\n\n  /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n  importFromPathsClicked: function(){\n    var preserve_dirs = this.modal.$el.find('.preserve-checkbox').is(':checked');\n    var link_data = this.modal.$el.find('.link-checkbox').is(':checked');\n    var file_type = this.select_extension.value();\n    var dbkey = this.select_genome.value();\n    var paths = $('textarea#import_paths').val();\n    var valid_paths = [];\n    if (!paths){\n      mod_toastr.info('Please enter a path relative to Galaxy root.');\n    } else {\n      this.modal.disableButton('Import');\n      paths = paths.split('\\n');\n      for (var i = paths.length - 1; i >= 0; i--) {\n        trimmed = paths[i].trim();\n        if (trimmed.length!==0){\n          valid_paths.push(trimmed);\n        }\n      };\n      this.initChainCallControl( { length: valid_paths.length, action: 'adding_datasets' } );\n      this.chainCallImportingFolders( { paths: valid_paths,\n                                        preserve_dirs: preserve_dirs,\n                                        link_data: link_data,\n                                        source: 'admin_path',\n                                        file_type: file_type,\n                                        dbkey: dbkey } );\n    }\n  },\n\n  /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n  initChainCallControl: function( options ){\n    var template;\n    switch( options.action ){\n      case \"adding_datasets\":\n        template = this.templateAddingDatasetsProgressBar();\n        this.modal.$el.find( '.modal-body' ).html( template( { folder_name : this.options.folder_name } ) );\n        break;\n      case \"deleting_datasets\":\n        template = this.templateDeletingItemsProgressBar();\n        this.modal.$el.find( '.modal-body' ).html( template() );\n        break;\n      case \"to_history\":\n        template = this.templateImportIntoHistoryProgressBar();\n        this.modal.$el.find( '.modal-body' ).html( template( { history_name : options.history_name } ) );\n        break;\n      default:\n        Galaxy.emit.error( 'Wrong action specified.', 'datalibs');\n        break;\n    }\n\n    // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n    // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n    this.progress = 0;\n    this.progressStep = 100 / options.length;\n    this.options.chain_call_control.total_number = options.length;\n    this.options.chain_call_control.failed_number = 0;\n  },\n\n  /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n  importFromJstreePath: function ( that, options ){\n    var all_nodes = $( '#jstree_browser' ).jstree().get_selected( true );\n    // remove the disabled elements that could have been trigerred with the 'select all'\n    selected_nodes = _.filter(all_nodes, function(node){ return node.state.disabled == false; })\n    var preserve_dirs = this.modal.$el.find( '.preserve-checkbox' ).is( ':checked' );\n    var link_data = this.modal.$el.find( '.link-checkbox' ).is( ':checked' );\n    var file_type = this.select_extension.value();\n    var dbkey = this.select_genome.value();\n    var selection_type = selected_nodes[0].type;\n    var paths = [];\n    if ( selected_nodes.length < 1 ){\n      mod_toastr.info( 'Please select some items first.' );\n    } else {\n      this.modal.disableButton( 'Import' );\n      for ( var i = selected_nodes.length - 1; i >= 0; i-- ){\n        if ( selected_nodes[i].li_attr.full_path !== undefined ){\n          paths.push( selected_nodes[i].li_attr.full_path );\n        }\n      }\n      this.initChainCallControl( { length: paths.length, action: 'adding_datasets' } );\n      if ( selection_type === 'folder' ){\n        var full_source = options.source + '_folder';\n        this.chainCallImportingFolders( { paths: paths,\n                                          preserve_dirs: preserve_dirs,\n                                          link_data: link_data,\n                                          source: full_source,\n                                          file_type: file_type,\n                                          dbkey: dbkey } );\n      } else if ( selection_type === 'file' ){\n        var full_source = options.source + '_file';\n        this.chainCallImportingUserdirFiles( { paths : paths,\n                                               file_type: file_type,\n                                               dbkey: dbkey,\n                                               source: full_source } );\n      }\n    }\n  },\n\n  fetchAndDisplayHistoryContents: function(history_id){\n    var history_contents = new mod_library_model.HistoryContents({id:history_id});\n    var self = this;\n    history_contents.fetch({\n      success: function(history_contents){\n        var history_contents_template = self.templateHistoryContents();\n        self.histories.get(history_id).set({'contents' : history_contents});\n        self.modal.$el.find('#selected_history_content').html(history_contents_template({history_contents: history_contents.models.reverse()}));\n      },\n      error: function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          mod_toastr.error(response.responseJSON.err_msg);\n        } else {\n          mod_toastr.error('An error ocurred.');\n        }\n      }\n    });\n  },\n\n  /**\n   * Import all selected datasets from history into the current folder.\n   */\n  addAllDatasetsFromHistory : function (){\n    var checked_hdas = this.modal.$el.find( '#selected_history_content' ).find( ':checked' );\n    var history_item_ids = [];  // can be hda or hdca\n    var history_item_types = [];\n    var items_to_add = [];\n    if ( checked_hdas.length < 1 ){\n      mod_toastr.info( 'You must select some datasets first.' );\n    } else {\n      this.modal.disableButton( 'Add' );\n      checked_hdas.each(function(){\n        var hid = $( this.parentElement ).data( 'id' );\n        if ( hid ) {\n          var item_type = $( this.parentElement ).data( 'name' );\n          history_item_ids.push( hid );\n          history_item_types.push( item_type );\n        }\n      });\n      for ( var i = history_item_ids.length - 1; i >= 0; i-- ) {\n        history_item_id = history_item_ids[i];\n        var folder_item = new mod_library_model.Item();\n        folder_item.url = Galaxy.root + 'api/folders/' + this.options.id + '/contents';\n        if (history_item_types[i] === 'collection') {\n          folder_item.set({'from_hdca_id': history_item_id});\n        } else {\n          folder_item.set({'from_hda_id': history_item_id});\n        }\n        items_to_add.push(folder_item);\n      }\n      this.initChainCallControl( { length: items_to_add.length, action: 'adding_datasets' } );\n      this.chainCallAddingHdas( items_to_add );\n    }\n  },\n\n  /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n  chainCallImportingIntoHistory: function( history_item_set, history_name ){\n    var self = this;\n    var popped_item = history_item_set.pop();\n    if ( typeof popped_item == \"undefined\" ) {\n      if ( this.options.chain_call_control.failed_number === 0 ){\n        mod_toastr.success( 'Selected datasets imported into history. Click this to start analyzing it.', '', { onclick: function() { window.location=Galaxy.root } } );\n      } else if ( this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number ){\n        mod_toastr.error( 'There was an error and no datasets were imported into history.' );\n      } else if ( this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number ){\n        mod_toastr.warning( 'Some of the datasets could not be imported into history. Click this to see what was imported.', '', { onclick: function() { window.location=Galaxy.root } } );\n      }\n      Galaxy.modal.hide();\n      return true;\n    }\n    var promise = $.when( popped_item.save( { content: popped_item.content, source: popped_item.source } ) );\n\n    promise.done( function(){\n              self.updateProgress();\n              self.chainCallImportingIntoHistory( history_item_set, history_name );\n            } )\n            .fail( function(){\n              self.options.chain_call_control.failed_number += 1;\n              self.updateProgress();\n              self.chainCallImportingIntoHistory( history_item_set, history_name );\n            } );\n  },\n\n  /**\n   * Take the array of paths and createa request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths           paths relative to user folder on Galaxy\n   */\n  chainCallImportingUserdirFiles: function( options ){\n\n    var that = this;\n    var popped_item = options.paths.pop();\n    if ( typeof popped_item === \"undefined\" ) {\n      if ( this.options.chain_call_control.failed_number === 0 ){\n        mod_toastr.success( 'Selected files imported into the current folder' );\n        Galaxy.modal.hide();\n      } else {\n        mod_toastr.error( 'An error occured.' );\n      }\n      return true;\n    }\n    var promise = $.when( $.post( Galaxy.root + 'api/libraries/datasets?encoded_folder_id=' + that.id +\n                                                       '&source=' + options.source +\n                                                       '&path=' + popped_item +\n                                                       '&file_type=' + options.file_type +\n                                                       '&dbkey=' + options.dbkey ) )\n    promise.done( function( response ){\n              that.updateProgress();\n              that.chainCallImportingUserdirFiles( options );\n            } )\n            .fail( function(){\n              that.options.chain_call_control.failed_number += 1;\n              that.updateProgress();\n              that.chainCallImportingUserdirFiles( options );\n            } );\n  },\n\n  /**\n   * Take the array of paths and createa request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths           paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs indicates whether to preserve folder structure\n   * @param  {boolean} link_data     copy files to Galaxy or link instead\n   * @param  {str} source            string representing what type of folder\n   *                                 is the source of import\n   */\n  chainCallImportingFolders: function( options ){\n    // TODO need to check which paths to call\n    var that = this;\n    var popped_item = options.paths.pop();\n    if (typeof popped_item == \"undefined\") {\n      if (this.options.chain_call_control.failed_number === 0){\n        mod_toastr.success('Selected folders and their contents imported into the current folder.');\n        Galaxy.modal.hide();\n      } else {\n        // TODO better error report\n        mod_toastr.error('An error occured.');\n      }\n      return true;\n    }\n    var promise = $.when( $.post( Galaxy.root + 'api/libraries/datasets?encoded_folder_id=' + that.id +\n                                                          '&source=' + options.source +\n                                                          '&path=' + popped_item +\n                                                          '&preserve_dirs=' + options.preserve_dirs +\n                                                          '&link_data=' + options.link_data +\n                                                          '&file_type=' + options.file_type +\n                                                          '&dbkey=' + options.dbkey ) )\n    promise.done(function(response){\n              that.updateProgress();\n              that.chainCallImportingFolders( options );\n            })\n            .fail(function(){\n              that.options.chain_call_control.failed_number += 1;\n              that.updateProgress();\n              that.chainCallImportingFolders( options );\n            });\n  },\n\n  /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n  chainCallAddingHdas: function( hdas_set ){\n    var self = this;\n    this.added_hdas = new mod_library_model.Folder();\n    var popped_item = hdas_set.pop();\n    if ( typeof popped_item == \"undefined\" ) {\n      if ( this.options.chain_call_control.failed_number === 0 ){\n        mod_toastr.success( 'Selected datasets from history added to the folder' );\n      } else if ( this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number ){\n        mod_toastr.error( 'There was an error and no datasets were added to the folder.' );\n      } else if ( this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number ){\n        mod_toastr.warning( 'Some of the datasets could not be added to the folder' );\n      }\n      Galaxy.modal.hide();\n      return this.added_hdas;\n    }\n    var promise = $.when( popped_item.save( { from_hda_id: popped_item.get( 'from_hda_id' ) } ) );\n\n    promise.done( function( model ){\n              Galaxy.libraries.folderListView.collection.add( model );\n              self.updateProgress();\n              self.chainCallAddingHdas( hdas_set );\n            })\n            .fail( function(){\n              self.options.chain_call_control.failed_number += 1;\n              self.updateProgress();\n              self.chainCallAddingHdas( hdas_set );\n            });\n  },\n\n  /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n  chainCallDeletingItems: function( items_to_delete ){\n  var self = this;\n  this.deleted_items = new mod_library_model.Folder();\n  var popped_item = items_to_delete.pop();\n  if ( typeof popped_item === \"undefined\" ) {\n    if ( this.options.chain_call_control.failed_number === 0 ){\n      mod_toastr.success( 'Selected items were deleted.' );\n    } else if ( this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number ){\n      mod_toastr.error( 'There was an error and no items were deleted. Please make sure you have sufficient permissions.' );\n    } else if ( this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number ){\n      mod_toastr.warning( 'Some of the items could not be deleted. Please make sure you have sufficient permissions.' );\n    }\n    Galaxy.modal.hide();\n    return this.deleted_items;\n  }\n  var promise = $.when( popped_item.destroy() );\n\n  promise.done( function( item ){\n            Galaxy.libraries.folderListView.collection.remove( popped_item.id );\n            self.updateProgress();\n            // add the deleted item to collection, triggers rendering\n            if ( Galaxy.libraries.folderListView.options.include_deleted ){\n              var updated_item = null;\n              if (item.type === 'folder' || item.model_class === 'LibraryFolder'){\n                updated_item = new mod_library_model.FolderAsModel( item );\n              } else if (item.type === 'file' || item.model_class === 'LibraryDataset'){\n                updated_item = new mod_library_model.Item( item );\n              } else {\n                Galaxy.emit.error('Unknown library item type found.', 'datalibs');\n                Galaxy.emit.error(item.type || item.model_class, 'datalibs');\n              }\n              Galaxy.libraries.folderListView.collection.add( updated_item );\n            }\n            self.chainCallDeletingItems( items_to_delete );\n          })\n          .fail( function(){\n            self.options.chain_call_control.failed_number += 1;\n            self.updateProgress();\n            self.chainCallDeletingItems( items_to_delete );\n          });\n  },\n\n  /**\n   * Handles the click on 'show deleted' checkbox\n   */\n  checkIncludeDeleted: function(event){\n    if (event.target.checked){\n      Galaxy.libraries.folderListView.fetchFolder({include_deleted: true});\n    } else{\n      Galaxy.libraries.folderListView.fetchFolder({include_deleted: false});\n    }\n  },\n\n  /**\n   * Delete the selected items. Atomic. One by one.\n   */\n  deleteSelectedItems: function(){\n    var checkedValues = $('#folder_table').find(':checked');\n    if(checkedValues.length === 0){\n        mod_toastr.info('You must select at least one item for deletion.');\n    } else {\n      var template = this.templateDeletingItemsProgressBar();\n      this.modal = Galaxy.modal;\n      this.modal.show({\n          closing_events  : true,\n          title           : 'Deleting selected items',\n          body            : template({}),\n          buttons         : {\n              'Close'     : function() {Galaxy.modal.hide();}\n          }\n      });\n      // init the control counters\n      this.options.chain_call_control.total_number = 0;\n      this.options.chain_call_control.failed_number = 0;\n\n      var dataset_ids = [];\n      var folder_ids = [];\n      checkedValues.each(function(){\n          if ($(this.parentElement.parentElement).data('id') !== undefined) {\n              if ($(this.parentElement.parentElement).data('id').substring(0,1) == 'F'){\n                folder_ids.push($(this.parentElement.parentElement).data('id'));\n              } else {\n                dataset_ids.push($(this.parentElement.parentElement).data('id'));\n              }\n          }\n      });\n      // init the progress bar\n      var items_total = dataset_ids.length + folder_ids.length\n      this.progressStep = 100 / items_total;\n      this.progress = 0;\n\n      // prepare the dataset items to be added\n      var items_to_delete = [];\n      for (var i = dataset_ids.length - 1; i >= 0; i--) {\n          var dataset = new mod_library_model.Item({id:dataset_ids[i]});\n          items_to_delete.push(dataset);\n      }\n      for (var i = folder_ids.length - 1; i >= 0; i--) {\n          var folder = new mod_library_model.FolderAsModel({id:folder_ids[i]});\n          items_to_delete.push(folder);\n      }\n\n      this.options.chain_call_control.total_number = items_total.length;\n      // call the recursive function to call ajax one after each other (request FIFO queue)\n      this.chainCallDeletingItems(items_to_delete);\n    }\n  },\n\n\n  showLocInfo: function(){\n    var library = null;\n    var that = this;\n    if (Galaxy.libraries.libraryListView !== null){\n      library = Galaxy.libraries.libraryListView.collection.get(this.options.parent_library_id);\n      this.showLocInfoModal(library);\n    } else {\n      library = new mod_library_model.Library({id: this.options.parent_library_id});\n      library.fetch({\n        success: function(){\n          that.showLocInfoModal(library);\n        },\n        error: function(model, response){\n          if (typeof response.responseJSON !== \"undefined\"){\n            mod_toastr.error(response.responseJSON.err_msg);\n          } else {\n            mod_toastr.error('An error ocurred.');\n          }\n        }\n      })\n    }\n  },\n\n  showLocInfoModal: function(library){\n    var that = this;\n    var template = this.templateLocInfoInModal();\n    this.modal = Galaxy.modal;\n    this.modal.show({\n        closing_events  : true,\n        title           : 'Location Details',\n        body            : template({library: library, options: that.options}),\n        buttons         : {\n            'Close'     : function() {Galaxy.modal.hide();}\n        }\n    });\n  },\n\n  showImportModal: function(options){\n    switch(options.source){\n      case \"history\":\n        this.addFilesFromHistoryModal();\n        break;\n      case \"importdir\":\n        this.importFilesFromGalaxyFolderModal( { source: 'importdir' } );\n        break;\n      case \"path\":\n        this.importFilesFromPathModal();\n        break;\n      case \"userdir\":\n        this.importFilesFromGalaxyFolderModal( { source: 'userdir' } );\n        break;\n      default:\n        Galaxy.libraries.library_router.back();\n        mod_toastr.error('Invalid import source.');\n        break;\n    }\n  },\n\n  /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n  showPageSizePrompt: function(){\n    var folder_page_size = prompt( 'How many items per page do you want to see?', Galaxy.libraries.preferences.get( 'folder_page_size' ) );\n    if ( ( folder_page_size != null ) && ( folder_page_size == parseInt( folder_page_size ) ) ) {\n        Galaxy.libraries.preferences.set( { 'folder_page_size': parseInt( folder_page_size ) } );\n        Galaxy.libraries.folderListView.render( { id: this.options.id, show_page: 1 } );\n    }\n  },\n\n  templateToolBar: function(){\n    return _.template([\n    // container start\n    '<div class=\"library_style_container\">',\n      // toolbar start\n      '<div id=\"library_toolbar\">',\n        '<form class=\"form-inline\" role=\"form\">',\n          '<span><strong>DATA LIBRARIES</strong></span>',\n          // paginator will append here\n          '<span class=\"library-paginator folder-paginator\"></span>',\n          '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n            '<label>',\n              '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n            '</label>',\n          '</div>',\n          '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n            '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n          '</button>',\n          '<% if(mutiple_add_dataset_options) { %>',\n          '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n            '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n              '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n            '</button>',\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n              '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n              '<% if(Galaxy.config.user_library_import_dir !== null) { %>',\n                '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n              '<% } %>',\n              '<% if(Galaxy.config.allow_library_path_paste) { %>',\n                '<li class=\"divider\"></li>',\n                '<li class=\"dropdown-header\">Admins only</li>',\n                '<% if(Galaxy.config.library_import_dir !== null) { %>',\n                  '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                '<% } %>',\n                '<% if(Galaxy.config.allow_library_path_paste) { %>',\n                  '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                '<% } %>',\n              '<% } %>',\n            '</ul>',\n          '</div>',\n          '<% } else { %>',\n            '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n              '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n            '</a>',\n          '<% } %>',\n          '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n            '<span class=\"fa fa-book\"></span>',\n            '&nbsp;to History',\n          '</button>',\n          '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n            '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n              '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n            '</button>',\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n              '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n              '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n              '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n            '</ul>',\n          '</div>',\n            '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n            '<span class=\"fa fa-times\"></span> Delete</button>',\n            '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n              '<span class=\"fa fa-info-circle\"></span>',\n              '&nbsp;Details',\n            '</button>',\n            '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Visit Libraries Wiki\">',\n              '<a href=\"https://wiki.galaxyproject.org/DataLibraries/screen/FolderContents\" target=\"_blank\">',\n                '<button class=\"primary-button\" type=\"button\">',\n                  '<span class=\"fa fa-question-circle\"></span>',\n                  '&nbsp;Help',\n                '</button>',\n              '</a>',\n            '</span>',\n          '</div>',\n        '</form>',\n      // toolbar end\n      '<div id=\"folder_items_element\">',\n      '</div>',\n      // paginator will append here\n      '<div class=\"folder-paginator paginator-bottom\"></div>',\n    // container end\n    '</div>',\n    ].join(''));\n  },\n\n  templateLocInfoInModal: function(){\n    return _.template([\n      '<div>',\n        '<table class=\"grid table table-condensed\">',\n          '<thead>',\n            '<th style=\"width: 25%;\">library</th>',\n            '<th></th>',\n          '</thead>',\n          '<tbody>',\n            '<tr>',\n              '<td>name</td>',\n              '<td><%- library.get(\"name\") %></td>',\n            '</tr>',\n            '<% if(library.get(\"description\") !== \"\") { %>',\n              '<tr>',\n                '<td>description</td>',\n                '<td><%- library.get(\"description\") %></td>',\n              '</tr>',\n            '<% } %>',\n            '<% if(library.get(\"synopsis\") !== \"\") { %>',\n              '<tr>',\n                '<td>synopsis</td>',\n                '<td><%- library.get(\"synopsis\") %></td>',\n              '</tr>',\n            '<% } %>',\n            '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n              '<tr>',\n                '<td>created</td>',\n                '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n              '</tr>',\n            '<% } %>',\n            '<tr>',\n              '<td>id</td>',\n              '<td><%- library.get(\"id\") %></td>',\n            '</tr>',\n          '</tbody>',\n        '</table>',\n        '<table class=\"grid table table-condensed\">',\n          '<thead>',\n            '<th style=\"width: 25%;\">folder</th>',\n            '<th></th>',\n          '</thead>',\n          '<tbody>',\n            '<tr>',\n              '<td>name</td>',\n              '<td><%- options.folder_name %></td>',\n            '</tr>',\n            '<% if(options.folder_description !== \"\") { %>',\n              '<tr>',\n                '<td>description</td>',\n                '<td><%- options.folder_description %></td>',\n              '</tr>',\n            '<% } %>',\n            '<tr>',\n              '<td>id</td>',\n              '<td><%- options.id %></td>',\n            '</tr>',\n            '</tbody>',\n        '</table>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateNewFolderInModal: function(){\n    return _.template([\n    '<div id=\"new_folder_modal\">',\n      '<form>',\n        '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n        '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n      '</form>',\n    '</div>'\n    ].join(''));\n  },\n\n\n  templateBulkImportInModal : function(){\n    return _.template([\n    '<div>',\n      '<div class=\"library-modal-item\">',\n        'Select history: ',\n        '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n          '<% _.each(histories, function(history) { %>',\n            '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n          '<% }); %>',\n        '</select>',\n      '</div>',\n      '<div class=\"library-modal-item\">',\n        'or create new: ',\n        '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n        '</input>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateImportIntoHistoryProgressBar : function (){\n    return _.template([\n    '<div class=\"import_text\">',\n      'Importing selected items to history <b><%= _.escape(history_name) %></b>',\n    '</div>',\n    '<div class=\"progress\">',\n      '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n        '<span class=\"completion_span\">0% Complete</span>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateAddingDatasetsProgressBar: function (){\n    return _.template([\n    '<div class=\"import_text\">',\n      'Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>',\n    '</div>',\n    '<div class=\"progress\">',\n      '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n        '<span class=\"completion_span\">0% Complete</span>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateDeletingItemsProgressBar: function (){\n    return _.template([\n    '<div class=\"import_text\">',\n    '</div>',\n    '<div class=\"progress\">',\n      '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n        '<span class=\"completion_span\">0% Complete</span>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateBrowserModal: function(){\n    return _.template([\n    '<div id=\"file_browser_modal\">',\n      '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n      '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n      '<div style=\"margin-bottom:1em;\">',\n        '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n          '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n        '</label>',\n        '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n        '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n        '</label>',\n      '</div>',\n      '<div style=\"margin-bottom:1em;\">',\n        '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n          '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n          'Preserve directory structure',\n        '</label>',\n        '<label class=\"checkbox-inline jstree-link-files\" style=\"display:none;\">',\n          '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n          'Link files instead of copying',\n        '</label>',\n      '</div>',\n      '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n        'Select all',\n      '</button>',\n      '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n        'Select none',\n      '</button>',\n      '<hr />',\n      // append jstree object here\n      '<div id=\"jstree_browser\">',\n      '</div>',\n      '<hr />',\n      '<p>You can set extension type and genome for all imported datasets at once:</p>',\n      '<div>',\n        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n        '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateImportPathModal: function(){\n    return _.template([\n    '<div id=\"file_browser_modal\">',\n      '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n      '<div style=\"margin-bottom: 0.5em;\">',\n        '<label class=\"checkbox-inline jstree-preserve-structure\">',\n          '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n          'Preserve directory structure',\n        '</label>',\n        '<label class=\"checkbox-inline jstree-link-files\">',\n          '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n          'Link files instead of copying',\n        '</label>',\n      '</div>',\n      '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n      '<hr />',\n      '<p>You can set extension type and genome for all imported datasets at once:</p>',\n      '<div>',\n        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateAddFilesFromHistory: function (){\n    return _.template([\n    '<div id=\"add_files_modal\">',\n      '<div>',\n        'Select history:  ',\n        '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n          '<% _.each(histories, function(history) { %>', //history select box\n            '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n          '<% }); %>',\n        '</select>',\n      '</div>',\n      '<br/>',\n      '<div id=\"selected_history_content\">',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateHistoryContents: function (){\n    return _.template([\n    '<strong>Choose the datasets to import:</strong>',\n    '<ul>',\n      '<% _.each(history_contents, function(history_item) { %>',\n        '<% if (history_item.get(\"deleted\") != true ) { %>',\n          '<% if (history_item.get(\"type\") === \"collection\") { %>',\n              '<% var collection_type = history_item.get(\"collection_type\") %>',\n              '<% if (collection_type === \"list\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                  '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: <%= _.escape(history_item.get(\"name\")) %> (Dataset Collection)',\n                '</li>',\n               '<% } else { %>',\n                 '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                    '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                      ' <%= _.escape(history_item.get(\"hid\")) %>: <%= _.escape(history_item.get(\"name\")) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                    '</span>',\n                  '</li>',\n                '<% } %>',\n          '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n              '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: <%= _.escape(history_item.get(\"name\")) %>',\n              '</li>',\n          '<% } %>',\n        '<% } %>',\n      '<% }); %>',\n    '</ul>'\n    ].join(''));\n  },\n\n  templatePaginator: function(){\n    return _.template([\n    '<ul class=\"pagination pagination-sm\">',\n      '<% if ( ( show_page - 1 ) > 0 ) { %>',\n        '<% if ( ( show_page - 1 ) > page_count ) { %>', // we are on higher page than total page count\n          '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n          '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n        '<% } else { %>',\n          '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n          '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n        '<% } %>',\n      '<% } else { %>', // we are on the first page\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n      '<% } %>',\n      '<li class=\"active\">',\n        '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n      '</li>',\n      '<% if ( ( show_page ) < page_count ) { %>',\n        '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n        '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n      '<% } else { %>',\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n      '<% } %>',\n    '</ul>',\n    '<span>',\n      '&nbsp;showing&nbsp;',\n      '<a data-toggle=\"tooltip\" data-placement=\"top\" title=\"Click to change the number of items on page\" class=\"page_size_prompt\">',\n        '<%- items_shown %>',\n      '</a>',\n      '&nbsp;of <%- total_items_count %> items',\n    '</span>'\n    ].join(''));\n  },\n\n});\n\nreturn {\n    FolderToolbarView: FolderToolbarView\n};\n\n});\n"]}