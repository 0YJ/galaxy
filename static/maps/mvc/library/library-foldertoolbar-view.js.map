{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["FolderToolbarView","Backbone","View","extend","el","events","click #toolbtn_create_folder","click #toolbtn_bulk_import","click #include_deleted_datasets_chk","click #toolbtn_bulk_delete","click .toolbtn-show-locinfo","click .page_size_prompt","defaults","can_add_library_item","contains_file_or_folder","chain_call_control","total_number","failed_number","jstree","histories","list_extensions","auto","modal","text","description","select_extension","initialize","options","this","fetchExtAndGenomes","render","toolbar_template","templateToolBar","template_defaults","id","list_genomes","is_anonym","Galaxy","is_admin","user","isAdmin","isAnonymous","config","user_library_import_dir","mutiple_add_dataset_options","renderPaginator","_","paginator_template","$","find","html","show_page","parseInt","templatePaginator","total_items_count","items_shown","show","hide","$el","tooltip","createFolderFromModal","event","preventDefault","stopPropagation","closing_events","title","self","body","template","buttons","Create","create_new_folder_event","folderDetails","serialize_new_folder","validate_new_folder","folder","_libraryModel2","default","FolderAsModel","url_items","history","fragment","split","current_folder_id","length","url","indexOf","save","urlRoot","set","type","libraries","collection","add","folderListView","error","_toastr2","name","val","info","modalBulkImport","$checkedValues","findCheckedRows","fetch","done","that","templateBulkImportInModal","models","importAllIntoHistory","Import","fail","model","response","responseJSON","err_msg","disableButton","new_history_name","post","root","last_used_history_id","new_history","processImportToHistory","xhr","enableButton","always","history_id","dataset_ids","history_name","row_id","folder_ids","each","datasets_to_import","closest","data","library_dataset_id","historyItem","source","folders_to_import","i","library_folder_id","HistoryItem","content","action","jQuery","initChainCallControl","getJSON","txt_representation","Math","updateProgress","progress","progressStep","download","width","folder_id","round","format","processDownload","substring","push","method","param","inputs","addFilesFromHistoryModal","template_modal","Add","Close","appendTo","closing_callback","fetchAndDisplayHistoryContents","templateAddFilesFromHistory","addAllDatasetsFromHistory","importFromPathsClicked","navigate","trigger","change","target","value","renderSelectBoxes","importFilesFromPathModal","key","datatypes","description_url","cache","_utils2","get","success","extension","select_genome","sort","a","b","genomes","importFilesFromGalaxyFolderModal","library_router","container","_uiSelect2","bind","renderJstree","disabled_jstree_element","core","plugins","types","icon","file","checkbox","Jstree","preserve_dirs","to_posix_lines","tag_using_filenames","file_type","valid_paths","paths","three_state","chainCallImportingFolders","err_code","link_data","is","space_to_tab","folder_name","dbkey","templateImportIntoHistoryProgressBar","trimmed","trim","importFromJstreePath","all_nodes","selected_nodes","templateAddingDatasetsProgressBar","selection_type","full_source","chainCallImportingUserdirFiles","node","state","disabled","history_contents","contents","undefined","li_attr","full_path","checked_hdas","history_item_types","items_to_add","item_type","history_item_ids","folder_item","chainCallAddingHdas","HistoryContents","history_contents_template","templateHistoryContents","chainCallImportingIntoHistory","popped_item","reverse","onclick","window","prop","hid","promise","Item","from_hdca_id","history_item_id","from_hda_id","history_item_set","pop","when","location","added_hdas","chainCallDeletingItems","deleted_items","item_to_delete","updated_item","checkIncludeDeleted","include_deleted","deleteSelectedItems","items_to_delete","dataset","library","libraryListView","hdas_set","Folder","showLocInfoModal","warning","showPageSizePrompt","folder_page_size","destroy","item","templateLocInfoInModal","remove","templateNewFolderInModal","model_class","emit","templateDeletingItemsProgressBar","templateBrowserModal","templateImportPathModal","checked","fetchFolder","items_total","showLocInfo","parent_library_id","Library","showImportModal","back","prompt","preferences","join"],"mappings":"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A,kCACA,SAEA,wDAEA,UACF0O,KAAK,MAIflB,uBAAwB,WACpB,OAAO9O,EAAEsB,UAED,QACA,6CACA,UACA,uCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACF0O,KAAK,MAIfhB,yBAA0B,WACtB,OAAOhP,EAAEsB,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACF0O,KAAK,MAIfpM,0BAA2B,WACvB,OAAO5D,EAAEsB,UAED,QACA,mCACA,mBACA,iHACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,4GACA,WACA,SACA,UACF0O,KAAK,MAIflF,qCAAsC,WAClC,OAAO9K,EAAEsB,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACF0O,KAAK,MAIf5E,kCAAmC,WAC/B,OAAOpL,EAAEsB,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACF0O,KAAK,MAIfb,iCAAkC,WAC9B,OAAOnP,EAAEsB,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACF0O,KAAK,MAIfZ,qBAAsB,WAClB,OAAOpP,EAAEsB,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACF0O,KAAK,MAIfX,wBAAyB,WACrB,OAAOrP,EAAEsB,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACF0O,KAAK,MAIfrI,4BAA6B,WACzB,OAAO3H,EAAEsB,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,sCACA,SACA,UACF0O,KAAK,MAIfvD,wBAAyB,WACrB,OAAOzM,EAAEsB,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACF0O,KAAK,MAIfzP,kBAAmB,WACf,OAAOP,EAAEsB,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,sBACA,8HACA,qBACA,OACA,0CACA,WACF0O,KAAK,oBAMf9S,kBAAmBA","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["import mod_masthead from \"layout/masthead\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nimport jstree from \"libs/jquery/jstree\";\nvar FolderToolbarView = Backbone.View.extend({\n    el: \"#center\",\n\n    events: {\n        \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n        \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n        \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n        \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n        \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n        \"click .page_size_prompt\": \"showPageSizePrompt\"\n    },\n\n    defaults: {\n        can_add_library_item: false,\n        contains_file_or_folder: false,\n        chain_call_control: {\n            total_number: 0,\n            failed_number: 0\n        },\n        disabled_jstree_element: \"folders\"\n    },\n\n    modal: null,\n\n    // directory browsing object\n    jstree: null,\n\n    // user's histories\n    histories: null,\n\n    // genome select\n    select_genome: null,\n\n    // extension select\n    select_extension: null,\n\n    // extension types\n    list_extensions: [],\n\n    // datatype placeholder for extension auto-detection\n    auto: {\n        id: \"auto\",\n        text: \"Auto-detect\",\n        description:\n            \"This system will try to detect the file type automatically.\" +\n            \" If your file is not detected properly as one of the known formats,\" +\n            \" it most likely means that it has some format problems (e.g., different\" +\n            \" number of columns on different rows). You can still coerce the system\" +\n            \" to set your data to the format you think it should be.\" +\n            \" You can also upload compressed files, which will automatically be decompressed.\"\n    },\n\n    // genomes\n    list_genomes: [],\n\n    initialize: function(options) {\n        this.options = _.defaults(options || {}, this.defaults);\n        this.fetchExtAndGenomes();\n        this.render();\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var toolbar_template = this.templateToolBar();\n        var template_defaults = {\n            id: this.options.id,\n            is_admin: false,\n            is_anonym: true,\n            mutiple_add_dataset_options: false\n        };\n        if (Galaxy.user) {\n            template_defaults.is_admin = Galaxy.user.isAdmin();\n            template_defaults.is_anonym = Galaxy.user.isAnonymous();\n            if (\n                Galaxy.config.user_library_import_dir !== null ||\n                Galaxy.config.allow_library_path_paste !== false ||\n                Galaxy.config.library_import_dir !== null\n            ) {\n                template_defaults.mutiple_add_dataset_options = true;\n            }\n        }\n        this.$el.html(toolbar_template(template_defaults));\n    },\n\n    /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n    renderPaginator: function(options) {\n        this.options = _.extend(this.options, options);\n        var paginator_template = this.templatePaginator();\n        $(\"body\")\n            .find(\".folder-paginator\")\n            .html(\n                paginator_template({\n                    id: this.options.id,\n                    show_page: parseInt(this.options.show_page),\n                    page_count: parseInt(this.options.page_count),\n                    total_items_count: this.options.total_items_count,\n                    items_shown: this.options.items_shown\n                })\n            );\n    },\n\n    configureElements: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.can_add_library_item === true) {\n            $(\".add-library-items\").show();\n        } else {\n            $(\".add-library-items\").hide();\n        }\n        if (this.options.contains_file_or_folder === true) {\n            if (Galaxy.user) {\n                if (!Galaxy.user.isAnonymous()) {\n                    $(\".logged-dataset-manipulation\").show();\n                    $(\".dataset-manipulation\").show();\n                } else {\n                    $(\".dataset-manipulation\").show();\n                    $(\".logged-dataset-manipulation\").hide();\n                }\n            } else {\n                $(\".logged-dataset-manipulation\").hide();\n                $(\".dataset-manipulation\").hide();\n            }\n        } else {\n            $(\".logged-dataset-manipulation\").hide();\n            $(\".dataset-manipulation\").hide();\n        }\n        this.$el.find(\"[data-toggle]\").tooltip();\n    },\n\n    // shows modal for creating folder\n    createFolderFromModal: function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // create modal\n        var self = this;\n        var template = this.templateNewFolderInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Create New Folder\",\n            body: template(),\n            buttons: {\n                Create: function() {\n                    self.create_new_folder_event();\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    // create the new folder from modal\n    create_new_folder_event: function() {\n        var folderDetails = this.serialize_new_folder();\n        if (this.validate_new_folder(folderDetails)) {\n            var folder = new mod_library_model.FolderAsModel();\n            var url_items = Backbone.history.fragment.split(\"/\"),\n                current_folder_id;\n            if (url_items.indexOf(\"page\") > -1) {\n                current_folder_id = url_items[url_items.length - 3];\n            } else {\n                current_folder_id = url_items[url_items.length - 1];\n            }\n            folder.url = folder.urlRoot + current_folder_id;\n\n            folder.save(folderDetails, {\n                success: function(folder) {\n                    Galaxy.modal.hide();\n                    mod_toastr.success(\"Folder created.\");\n                    folder.set({ type: \"folder\" });\n                    Galaxy.libraries.folderListView.collection.add(folder);\n                },\n                error: function(model, response) {\n                    Galaxy.modal.hide();\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        } else {\n            mod_toastr.error(\"Folder's name is missing.\");\n        }\n        return false;\n    },\n\n    // serialize data from the modal\n    serialize_new_folder: function() {\n        return {\n            name: $(\"input[name='Name']\").val(),\n            description: $(\"input[name='Description']\").val()\n        };\n    },\n\n    // validate new folder info\n    validate_new_folder: function(folderDetails) {\n        return folderDetails.name !== \"\";\n    },\n\n    // show bulk import modal\n    modalBulkImport: function() {\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            var that = this;\n            this.histories = new mod_library_model.GalaxyHistories();\n            this.histories\n                .fetch()\n                .done(function() {\n                    var template = that.templateBulkImportInModal();\n                    that.modal = Galaxy.modal;\n                    that.modal.show({\n                        closing_events: true,\n                        title: \"Import into History\",\n                        body: template({\n                            histories: that.histories.models\n                        }),\n                        buttons: {\n                            Import: function() {\n                                that.importAllIntoHistory();\n                            },\n                            Close: function() {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                })\n                .fail(function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                });\n        }\n    },\n\n    /**\n   * Import all selected datasets into history.\n   */\n    importAllIntoHistory: function() {\n        this.modal.disableButton(\"Import\");\n        var new_history_name = this.modal.$(\"input[name=history_name]\").val();\n        var that = this;\n        if (new_history_name !== \"\") {\n            $.post(Galaxy.root + \"api/histories\", {\n                name: new_history_name\n            })\n                .done(function(new_history) {\n                    that.options.last_used_history_id = new_history.id;\n                    that.processImportToHistory(\n                        new_history.id,\n                        new_history.name\n                    );\n                })\n                .fail(function(xhr, status, error) {\n                    mod_toastr.error(\"An error occurred.\");\n                })\n                .always(function() {\n                    that.modal.enableButton(\"Import\");\n                });\n        } else {\n            var history_id = $(\n                \"select[name=dataset_import_bulk] option:selected\"\n            ).val();\n            this.options.last_used_history_id = history_id;\n            var history_name = $(\n                \"select[name=dataset_import_bulk] option:selected\"\n            ).text();\n            this.processImportToHistory(history_id, history_name);\n            this.modal.enableButton(\"Import\");\n        }\n    },\n\n    processImportToHistory: function(history_id, history_name) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        // prepare the dataset objects to be imported\n        var datasets_to_import = [];\n        for (var i = dataset_ids.length - 1; i >= 0; i--) {\n            var library_dataset_id = dataset_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = historyItem.urlRoot + history_id + \"/contents\";\n            historyItem.content = library_dataset_id;\n            historyItem.source = \"library\";\n            datasets_to_import.push(historyItem);\n        }\n\n        // prepare the folder objects to be imported\n        var folders_to_import = [];\n        for (var i = folder_ids.length - 1; i >= 0; i--) {\n            var library_folder_id = folder_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = historyItem.urlRoot + history_id + \"/contents\";\n            historyItem.content = library_folder_id;\n            historyItem.source = \"library_folder\";\n            datasets_to_import.push(historyItem);\n        }\n\n        this.initChainCallControl({\n            length: datasets_to_import.length,\n            action: \"to_history\",\n            history_name: history_name\n        });\n        // set the used history as current so user will see the last one\n        // that he imported into in the history panel on the 'analysis' page\n        jQuery.getJSON(Galaxy.root + \"history/set_as_current?id=\" + history_id);\n        this.chainCallImportingIntoHistory(datasets_to_import, history_name);\n    },\n\n    /**\n   * Update the progress bar in modal window.\n   */\n    updateProgress: function() {\n        this.progress += this.progressStep;\n        $(\".progress-bar-import\").width(Math.round(this.progress) + \"%\");\n        var txt_representation = Math.round(this.progress) + \"% Complete\";\n        $(\".completion_span\").text(txt_representation);\n    },\n\n    /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n    download: function(folder_id, format) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        var url = Galaxy.root + \"api/libraries/datasets/download/\" + format;\n        var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n        this.processDownload(url, data, \"get\");\n    },\n\n    /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n    processDownload: function(url, data, method) {\n        if (url && data) {\n            // data can be string of parameters or array/object\n            data = typeof data === \"string\" ? data : $.param(data);\n            // split params into form inputs\n            var inputs = \"\";\n            $.each(data.split(\"&\"), function() {\n                var pair = this.split(\"=\");\n                inputs +=\n                    '<input type=\"hidden\" name=\"' +\n                    pair[0] +\n                    '\" value=\"' +\n                    pair[1] +\n                    '\" />';\n            });\n            // send request\n            $(\n                '<form action=\"' +\n                    url +\n                    '\" method=\"' +\n                    (method || \"post\") +\n                    '\">' +\n                    inputs +\n                    \"</form>\"\n            )\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            mod_toastr.info(\"Your download will begin soon.\");\n        } else {\n            mod_toastr.error(\"An error occurred.\");\n        }\n    },\n\n    addFilesFromHistoryModal: function() {\n        this.histories = new mod_library_model.GalaxyHistories();\n        var self = this;\n        this.histories\n            .fetch()\n            .done(function() {\n                self.modal = Galaxy.modal;\n                var template_modal = self.templateAddFilesFromHistory();\n                self.modal.show({\n                    closing_events: true,\n                    title: \"Adding datasets from your history\",\n                    body: template_modal({\n                        histories: self.histories.models\n                    }),\n                    buttons: {\n                        Add: function() {\n                            self.addAllDatasetsFromHistory();\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + self.id,\n                            { trigger: true }\n                        );\n                    }\n                });\n                self.fetchAndDisplayHistoryContents(\n                    self.histories.models[0].id\n                );\n                $(\"#dataset_add_bulk\").change(function(event) {\n                    self.fetchAndDisplayHistoryContents(event.target.value);\n                });\n            })\n            .fail(function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            });\n    },\n\n    /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n    importFilesFromPathModal: function() {\n        var that = this;\n        this.modal = Galaxy.modal;\n        var template_modal = this.templateImportPathModal();\n        this.modal.show({\n            closing_events: true,\n            title: \"Please enter paths to import\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromPathsClicked(that);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(\"folders/\" + that.id, {\n                    trigger: true\n                });\n            }\n        });\n        this.renderSelectBoxes();\n    },\n\n    /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n    fetchExtAndGenomes: function() {\n        var that = this;\n        mod_utils.get({\n            url: Galaxy.root + \"api/datatypes?extension_only=False\",\n            success: function(datatypes) {\n                that.list_extensions = [];\n                for (var key in datatypes) {\n                    that.list_extensions.push({\n                        id: datatypes[key].extension,\n                        text: datatypes[key].extension,\n                        description: datatypes[key].description,\n                        description_url: datatypes[key].description_url\n                    });\n                }\n                that.list_extensions.sort(function(a, b) {\n                    return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                });\n                that.list_extensions.unshift(that.auto);\n            },\n            cache: true\n        });\n        mod_utils.get({\n            url: Galaxy.root + \"api/genomes\",\n            success: function(genomes) {\n                that.list_genomes = [];\n                for (var key in genomes) {\n                    that.list_genomes.push({\n                        id: genomes[key][1],\n                        text: genomes[key][0]\n                    });\n                }\n                that.list_genomes.sort(function(a, b) {\n                    return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                });\n            },\n            cache: true\n        });\n    },\n\n    renderSelectBoxes: function() {\n        // This won't work properly unlesss we already have the data fetched.\n        // See this.fetchExtAndGenomes()\n        // TODO switch to common resources:\n        // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n        var that = this;\n        this.select_genome = new mod_select.View({\n            css: \"library-genome-select\",\n            data: that.list_genomes,\n            container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n            value: \"?\"\n        });\n        this.select_extension = new mod_select.View({\n            css: \"library-extension-select\",\n            data: that.list_extensions,\n            container: Galaxy.modal.$el.find(\"#library_extension_select\"),\n            value: \"auto\"\n        });\n    },\n\n    /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n    importFilesFromGalaxyFolderModal: function(options) {\n        var that = this;\n        var template_modal = this.templateBrowserModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Please select folders or files\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromJstreePath(that, options);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(\"folders/\" + that.id, {\n                    trigger: true\n                });\n            }\n        });\n\n        $(\".libimport-select-all\").bind(\"click\", function() {\n            $(\"#jstree_browser\").jstree(\"check_all\");\n        });\n        $(\".libimport-select-none\").bind(\"click\", function() {\n            $(\"#jstree_browser\").jstree(\"uncheck_all\");\n        });\n\n        this.renderSelectBoxes();\n        options.disabled_jstree_element = \"folders\";\n        this.renderJstree(options);\n\n        $(\"input[type=radio]\").change(function(event) {\n            if (event.target.value === \"jstree-disable-folders\") {\n                options.disabled_jstree_element = \"folders\";\n                that.renderJstree(options);\n                $(\".jstree-folders-message\").hide();\n                $(\".jstree-preserve-structure\").hide();\n                $(\".jstree-files-message\").show();\n            } else if (event.target.value === \"jstree-disable-files\") {\n                $(\".jstree-files-message\").hide();\n                $(\".jstree-folders-message\").show();\n                $(\".jstree-preserve-structure\").show();\n                options.disabled_jstree_element = \"files\";\n                that.renderJstree(options);\n            }\n        });\n    },\n\n    /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n    renderJstree: function(options) {\n        var that = this;\n        this.options = _.extend(this.options, options);\n        var target = options.source || \"userdir\";\n        var disabled_jstree_element = this.options.disabled_jstree_element;\n        this.jstree = new mod_library_model.Jstree();\n        this.jstree.url =\n            this.jstree.urlRoot +\n            \"?target=\" +\n            target +\n            \"&format=jstree\" +\n            \"&disable=\" +\n            disabled_jstree_element;\n        this.jstree.fetch({\n            success: function(model, response) {\n                // This is to prevent double jquery load. I think. Carl is magician.\n                // Now we need jstree, time to lazy load it.\n                $(\"#jstree_browser\").jstree(\"destroy\");\n                $(\"#jstree_browser\").jstree({\n                    core: {\n                        data: model\n                    },\n                    plugins: [\"types\", \"checkbox\"],\n                    types: {\n                        folder: {\n                            icon: \"jstree-folder\"\n                        },\n                        file: {\n                            icon: \"jstree-file\"\n                        }\n                    },\n                    checkbox: {\n                        three_state: false\n                    }\n                });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    if (response.responseJSON.err_code === 404001) {\n                        mod_toastr.warning(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    }\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n    importFromPathsClicked: function() {\n        var preserve_dirs = this.modal.$el\n            .find(\".preserve-checkbox\")\n            .is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el\n            .find(\".spacetab-checkbox\")\n            .is(\":checked\");\n        var to_posix_lines = this.modal.$el\n            .find(\".posix-checkbox\")\n            .is(\":checked\");\n        var tag_using_filenames = this.modal.$el\n            .find(\".tag-files\")\n            .is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var paths = $(\"textarea#import_paths\").val();\n        var valid_paths = [];\n        if (!paths) {\n            mod_toastr.info(\"Please enter a path relative to Galaxy root.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            paths = paths.split(\"\\n\");\n            for (var i = paths.length - 1; i >= 0; i--) {\n                var trimmed = paths[i].trim();\n                if (trimmed.length !== 0) {\n                    valid_paths.push(trimmed);\n                }\n            }\n            this.initChainCallControl({\n                length: valid_paths.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallImportingFolders({\n                paths: valid_paths,\n                preserve_dirs: preserve_dirs,\n                link_data: link_data,\n                space_to_tab: space_to_tab,\n                to_posix_lines: to_posix_lines,\n                source: \"admin_path\",\n                file_type: file_type,\n                tag_using_filenames: tag_using_filenames,\n                dbkey: dbkey\n            });\n        }\n    },\n\n    /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n    initChainCallControl: function(options) {\n        var template;\n        switch (options.action) {\n            case \"adding_datasets\":\n                template = this.templateAddingDatasetsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(\n                    template({\n                        folder_name: this.options.folder_name\n                    })\n                );\n                break;\n            case \"deleting_datasets\":\n                template = this.templateDeletingItemsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template());\n                break;\n            case \"to_history\":\n                template = this.templateImportIntoHistoryProgressBar();\n                this.modal.$el\n                    .find(\".modal-body\")\n                    .html(template({ history_name: options.history_name }));\n                break;\n            default:\n                Galaxy.emit.error(\"Wrong action specified.\", \"datalibs\");\n                break;\n        }\n\n        // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n        // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n        this.progress = 0;\n        this.progressStep = 100 / options.length;\n        this.options.chain_call_control.total_number = options.length;\n        this.options.chain_call_control.failed_number = 0;\n    },\n\n    /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n    importFromJstreePath: function(that, options) {\n        var all_nodes = $(\"#jstree_browser\")\n            .jstree()\n            .get_selected(true);\n        // remove the disabled elements that could have been trigerred with the 'select all'\n        var selected_nodes = _.filter(all_nodes, function(node) {\n            return node.state.disabled == false;\n        });\n        var preserve_dirs = this.modal.$el\n            .find(\".preserve-checkbox\")\n            .is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el\n            .find(\".spacetab-checkbox\")\n            .is(\":checked\");\n        var to_posix_lines = this.modal.$el\n            .find(\".posix-checkbox\")\n            .is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var tag_using_filenames = this.modal.$el\n            .find(\".tag-files\")\n            .is(\":checked\");\n        var selection_type = selected_nodes[0].type;\n        var paths = [];\n        if (selected_nodes.length < 1) {\n            mod_toastr.info(\"Please select some items first.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                if (selected_nodes[i].li_attr.full_path !== undefined) {\n                    paths.push(selected_nodes[i].li_attr.full_path);\n                }\n            }\n            this.initChainCallControl({\n                length: paths.length,\n                action: \"adding_datasets\"\n            });\n            if (selection_type === \"folder\") {\n                var full_source = options.source + \"_folder\";\n                this.chainCallImportingFolders({\n                    paths: paths,\n                    preserve_dirs: preserve_dirs,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    tag_using_filenames: tag_using_filenames\n                });\n            } else if (selection_type === \"file\") {\n                var full_source = options.source + \"_file\";\n                this.chainCallImportingUserdirFiles({\n                    paths: paths,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    tag_using_filenames: tag_using_filenames\n                });\n            }\n        }\n    },\n\n    fetchAndDisplayHistoryContents: function(history_id) {\n        var history_contents = new mod_library_model.HistoryContents({\n            id: history_id\n        });\n        var self = this;\n        history_contents.fetch({\n            success: function(history_contents) {\n                var history_contents_template = self.templateHistoryContents();\n                self.histories\n                    .get(history_id)\n                    .set({ contents: history_contents });\n                self.modal.$el.find(\"#selected_history_content\").html(\n                    history_contents_template({\n                        history_contents: history_contents.models.reverse()\n                    })\n                );\n                self.modal.$el\n                    .find(\".history-import-select-all\")\n                    .bind(\"click\", function() {\n                        $(\"#selected_history_content [type=checkbox]\").prop(\n                            \"checked\",\n                            true\n                        );\n                    });\n                self.modal.$el\n                    .find(\".history-import-unselect-all\")\n                    .bind(\"click\", function() {\n                        $(\"#selected_history_content [type=checkbox]\").prop(\n                            \"checked\",\n                            false\n                        );\n                    });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n   * Import all selected datasets from history into the current folder.\n   */\n    addAllDatasetsFromHistory: function() {\n        var checked_hdas = this.modal.$el\n            .find(\"#selected_history_content\")\n            .find(\":checked\");\n        var history_item_ids = []; // can be hda or hdca\n        var history_item_types = [];\n        var items_to_add = [];\n        if (checked_hdas.length < 1) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            this.modal.disableButton(\"Add\");\n            checked_hdas.each(function() {\n                var hid = $(this)\n                    .closest(\"li\")\n                    .data(\"id\");\n                if (hid) {\n                    var item_type = $(this)\n                        .closest(\"li\")\n                        .data(\"name\");\n                    history_item_ids.push(hid);\n                    history_item_types.push(item_type);\n                }\n            });\n            for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                var history_item_id = history_item_ids[i];\n                var folder_item = new mod_library_model.Item();\n                folder_item.url =\n                    Galaxy.root +\n                    \"api/folders/\" +\n                    this.options.id +\n                    \"/contents\";\n                if (history_item_types[i] === \"collection\") {\n                    folder_item.set({ from_hdca_id: history_item_id });\n                } else {\n                    folder_item.set({ from_hda_id: history_item_id });\n                }\n                items_to_add.push(folder_item);\n            }\n            this.initChainCallControl({\n                length: items_to_add.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallAddingHdas(items_to_add);\n        }\n    },\n\n    /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n    chainCallImportingIntoHistory: function(history_item_set, history_name) {\n        var self = this;\n        var popped_item = history_item_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected datasets imported into history. Click this to start analyzing it.\",\n                    \"\",\n                    {\n                        onclick: function() {\n                            window.location = Galaxy.root;\n                        }\n                    }\n                );\n            } else if (\n                this.options.chain_call_control.failed_number ===\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.error(\n                    \"There was an error and no datasets were imported into history.\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number <\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.warning(\n                    \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                    \"\",\n                    {\n                        onclick: function() {\n                            window.location = Galaxy.root;\n                        }\n                    }\n                );\n            }\n            Galaxy.modal.hide();\n            return true;\n        }\n        var promise = $.when(\n            popped_item.save({\n                content: popped_item.content,\n                source: popped_item.source\n            })\n        );\n\n        promise\n            .done(function() {\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(\n                    history_item_set,\n                    history_name\n                );\n            })\n            .fail(function() {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(\n                    history_item_set,\n                    history_name\n                );\n            });\n    },\n\n    /**\n   * Take the array of paths and create a request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to user folder on Galaxy\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n    chainCallImportingUserdirFiles: function(options) {\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected files imported into the current folder\"\n                );\n                Galaxy.modal.hide();\n            } else {\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                Galaxy.root +\n                    \"api/libraries/datasets?encoded_folder_id=\" +\n                    that.id +\n                    \"&source=\" +\n                    options.source +\n                    \"&path=\" +\n                    popped_item +\n                    \"&file_type=\" +\n                    options.file_type +\n                    \"&link_data=\" +\n                    options.link_data +\n                    \"&space_to_tab=\" +\n                    options.space_to_tab +\n                    \"&to_posix_lines=\" +\n                    options.to_posix_lines +\n                    \"&dbkey=\" +\n                    options.dbkey +\n                    \"&tag_using_filenames=\" +\n                    options.tag_using_filenames\n            )\n        );\n        promise\n            .done(function(response) {\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            })\n            .fail(function() {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            });\n    },\n\n    /**\n   * Take the array of paths and create a request for each of them\n   * calling them in series. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n   * @param  {boolean} link_data              copy files to Galaxy or link instead\n   * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n   * @param  {boolean} space_to_tab           convert spaces to tabs\n   * @param  {str} source                     string representing what type of folder\n   *                                          is the source of import\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n    chainCallImportingFolders: function(options) {\n        // TODO need to check which paths to call\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected folders and their contents imported into the current folder.\"\n                );\n                Galaxy.modal.hide();\n            } else {\n                // TODO better error report\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                Galaxy.root +\n                    \"api/libraries/datasets?encoded_folder_id=\" +\n                    that.id +\n                    \"&source=\" +\n                    options.source +\n                    \"&path=\" +\n                    popped_item +\n                    \"&preserve_dirs=\" +\n                    options.preserve_dirs +\n                    \"&link_data=\" +\n                    options.link_data +\n                    \"&to_posix_lines=\" +\n                    options.to_posix_lines +\n                    \"&space_to_tab=\" +\n                    options.space_to_tab +\n                    \"&file_type=\" +\n                    options.file_type +\n                    \"&dbkey=\" +\n                    options.dbkey +\n                    \"&tag_using_filenames=\" +\n                    options.tag_using_filenames\n            )\n        );\n        promise\n            .done(function(response) {\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            })\n            .fail(function() {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            });\n    },\n\n    /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n    chainCallAddingHdas: function(hdas_set) {\n        var self = this;\n        this.added_hdas = new mod_library_model.Folder();\n        var popped_item = hdas_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected datasets from history added to the folder\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number ===\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.error(\n                    \"There was an error and no datasets were added to the folder.\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number <\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.warning(\n                    \"Some of the datasets could not be added to the folder\"\n                );\n            }\n            Galaxy.modal.hide();\n            return this.added_hdas;\n        }\n        var promise = $.when(\n            popped_item.save({\n                from_hda_id: popped_item.get(\"from_hda_id\")\n            })\n        );\n\n        promise\n            .done(function(model) {\n                Galaxy.libraries.folderListView.collection.add(model);\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            })\n            .fail(function() {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            });\n    },\n\n    /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n    chainCallDeletingItems: function(items_to_delete) {\n        var self = this;\n        this.deleted_items = new mod_library_model.Folder();\n        var item_to_delete = items_to_delete.pop();\n        if (typeof item_to_delete === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected items were deleted.\");\n            } else if (\n                this.options.chain_call_control.failed_number ===\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.error(\n                    \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number <\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.warning(\n                    \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                );\n            }\n            Galaxy.modal.hide();\n            return this.deleted_items;\n        }\n        item_to_delete\n            .destroy()\n            .done(function(item) {\n                Galaxy.libraries.folderListView.collection.remove(\n                    item_to_delete.id\n                );\n                self.updateProgress();\n                // add the deleted item to collection, triggers rendering\n                if (Galaxy.libraries.folderListView.options.include_deleted) {\n                    var updated_item = null;\n                    if (\n                        item.type === \"folder\" ||\n                        item.model_class === \"LibraryFolder\"\n                    ) {\n                        updated_item = new mod_library_model.FolderAsModel(\n                            item\n                        );\n                    } else if (\n                        item.type === \"file\" ||\n                        item.model_class === \"LibraryDataset\"\n                    ) {\n                        updated_item = new mod_library_model.Item(item);\n                    } else {\n                        Galaxy.emit.error(\n                            \"Unknown library item type found.\",\n                            \"datalibs\"\n                        );\n                        Galaxy.emit.error(\n                            item.type || item.model_class,\n                            \"datalibs\"\n                        );\n                    }\n                    Galaxy.libraries.folderListView.collection.add(\n                        updated_item\n                    );\n                }\n                self.chainCallDeletingItems(items_to_delete);\n            })\n            .fail(function() {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallDeletingItems(items_to_delete);\n            });\n    },\n\n    /**\n   * Handles the click on 'show deleted' checkbox\n   */\n    checkIncludeDeleted: function(event) {\n        if (event.target.checked) {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: true\n            });\n        } else {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: false\n            });\n        }\n    },\n\n    /**\n   * Delete the selected items. Atomic. One by one.\n   */\n    deleteSelectedItems: function() {\n        var dataset_ids = [];\n        var folder_ids = [];\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select at least one item for deletion.\");\n        } else {\n            var template = this.templateDeletingItemsProgressBar();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: \"Deleting selected items\",\n                body: template({}),\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n            // init the control counters\n            this.options.chain_call_control.total_number = 0;\n            this.options.chain_call_control.failed_number = 0;\n            $checkedValues.each(function() {\n                var row_id = $(this)\n                    .closest(\"tr\")\n                    .data(\"id\");\n                if (row_id !== undefined) {\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                }\n            });\n            // init the progress bar\n            var items_total = dataset_ids.length + folder_ids.length;\n            this.progressStep = 100 / items_total;\n            this.progress = 0;\n\n            // prepare the dataset items to be added\n            var items_to_delete = [];\n            for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                var dataset = new mod_library_model.Item({\n                    id: dataset_ids[i]\n                });\n                items_to_delete.push(dataset);\n            }\n            for (var i = folder_ids.length - 1; i >= 0; i--) {\n                var folder = new mod_library_model.FolderAsModel({\n                    id: folder_ids[i]\n                });\n                items_to_delete.push(folder);\n            }\n\n            this.options.chain_call_control.total_number = items_total;\n            // call the recursive function to call ajax one after each other (request FIFO queue)\n            this.chainCallDeletingItems(items_to_delete);\n        }\n    },\n\n    showLocInfo: function() {\n        var library = null;\n        var that = this;\n        if (Galaxy.libraries.libraryListView !== null) {\n            library = Galaxy.libraries.libraryListView.collection.get(\n                this.options.parent_library_id\n            );\n            this.showLocInfoModal(library);\n        } else {\n            library = new mod_library_model.Library({\n                id: this.options.parent_library_id\n            });\n            library.fetch({\n                success: function() {\n                    that.showLocInfoModal(library);\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        }\n    },\n\n    showLocInfoModal: function(library) {\n        var that = this;\n        var template = this.templateLocInfoInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Location Details\",\n            body: template({ library: library, options: that.options }),\n            buttons: {\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    showImportModal: function(options) {\n        switch (options.source) {\n            case \"history\":\n                this.addFilesFromHistoryModal();\n                break;\n            case \"importdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"importdir\"\n                });\n                break;\n            case \"path\":\n                this.importFilesFromPathModal();\n                break;\n            case \"userdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"userdir\"\n                });\n                break;\n            default:\n                Galaxy.libraries.library_router.back();\n                mod_toastr.error(\"Invalid import source.\");\n                break;\n        }\n    },\n\n    /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n    showPageSizePrompt: function() {\n        var folder_page_size = prompt(\n            \"How many items per page do you want to see?\",\n            Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        if (\n            folder_page_size != null &&\n            folder_page_size == parseInt(folder_page_size)\n        ) {\n            Galaxy.libraries.preferences.set({\n                folder_page_size: parseInt(folder_page_size)\n            });\n            Galaxy.libraries.folderListView.render({\n                id: this.options.id,\n                show_page: 1\n            });\n        }\n    },\n\n    findCheckedRows: function() {\n        return $(\"#folder_list_body\").find(\":checked\");\n    },\n\n    templateToolBar: function() {\n        return _.template(\n            [\n                // container start\n                '<div class=\"library_style_container\">',\n                // toolbar start\n                '<div id=\"library_toolbar\">',\n                '<form class=\"form-inline\" role=\"form\">',\n                \"<span><strong>DATA LIBRARIES</strong></span>\",\n                // paginator will append here\n                '<span class=\"library-paginator folder-paginator\"></span>',\n                '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                \"<label>\",\n                '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n                \"</label>\",\n                \"</div>\",\n                '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n                \"</button>\",\n                \"<% if(mutiple_add_dataset_options) { %>\",\n                '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n                '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li class=\"divider\"></li>',\n                '<li class=\"dropdown-header\">Admins only</li>',\n                \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                \"<% } %>\",\n                \"<% } %>\",\n                \"</ul>\",\n                \"</div>\",\n                \"<% } else { %>\",\n                '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                \"</a>\",\n                \"<% } %>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n                '<span class=\"fa fa-book\"></span>',\n                \"&nbsp;to History\",\n                \"</button>\",\n                '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n                '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                \"</ul>\",\n                \"</div>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n                '<span class=\"fa fa-times\"></span> Delete</button>',\n                '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n                '<span class=\"fa fa-info-circle\"></span>',\n                \"&nbsp;Details\",\n                \"</button>\",\n                '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                '<button class=\"primary-button\" type=\"button\">',\n                '<span class=\"fa fa-question-circle\"></span>',\n                \"&nbsp;Help\",\n                \"</button>\",\n                \"</a>\",\n                \"</span>\",\n                \"</div>\",\n                \"</form>\",\n                // toolbar end\n                '<div id=\"folder_items_element\">',\n                \"</div>\",\n                // paginator will append here\n                '<div class=\"folder-paginator paginator-bottom\"></div>',\n                // container end\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateLocInfoInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">library</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                '<td><%- library.get(\"name\") %></td>',\n                \"</tr>\",\n                '<% if(library.get(\"description\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                '<td><%- library.get(\"description\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>synopsis</td>\",\n                '<td><%- library.get(\"synopsis\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>created</td>\",\n                '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                '<td><%- library.get(\"id\") %></td>',\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">folder</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                \"<td><%- options.folder_name %></td>\",\n                \"</tr>\",\n                '<% if(options.folder_description !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                \"<td><%- options.folder_description %></td>\",\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                \"<td><%- options.id %></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateNewFolderInModal: function() {\n        return _.template(\n            [\n                '<div id=\"new_folder_modal\">',\n                \"<form>\",\n                '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                \"</form>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBulkImportInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<div class=\"library-modal-item\">',\n                \"Select history: \",\n                '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                \"<% _.each(histories, function(history) { %>\",\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                '<div class=\"library-modal-item\">',\n                \"or create new: \",\n                '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n                \"</input>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportIntoHistoryProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddingDatasetsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateDeletingItemsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBrowserModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom:1em;\">',\n                '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                \"</label>\",\n                '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                \"</label>\",\n                \"</div>\",\n                '<div style=\"margin-bottom:1em;\">',\n                '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"<hr />\",\n                // append jstree object here\n                '<div id=\"jstree_browser\">',\n                \"</div>\",\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<br>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportPathModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom: 0.5em;\">',\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                \"<br>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddFilesFromHistory: function() {\n        return _.template(\n            [\n                '<div id=\"add_files_modal\">',\n                \"<div>\",\n                \"1.&nbsp;Select history:&nbsp;\",\n                '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                \"<% _.each(histories, function(history) { %>\", //history select box\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                \"<br/>\",\n                '<div id=\"selected_history_content\">',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateHistoryContents: function() {\n        return _.template(\n            [\n                \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                \"<div>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"</div>\",\n                \"<br>\",\n                \"<ul>\",\n                \"<% _.each(history_contents, function(history_item) { %>\",\n                '<% if (history_item.get(\"deleted\") != true ) { %>',\n                '<% var item_name = history_item.get(\"name\") %>',\n                '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                '<% var collection_type = history_item.get(\"collection_type\") %>',\n                '<% if (collection_type === \"list\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                \"<label>\",\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                \"</label>\",\n                \"</li>\",\n                \"<% } else { %>\",\n                '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                \"</span>\",\n                \"</li>\",\n                \"<% } %>\",\n                '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                \"</label>\",\n                \"</li>\",\n                \"<% } %>\",\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ul>\"\n            ].join(\"\")\n        );\n    },\n\n    templatePaginator: function() {\n        return _.template(\n            [\n                '<ul class=\"pagination pagination-sm\">',\n                \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } else { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                \"<% } else { %>\", // we are on the first page\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                '<li class=\"active\">',\n                '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                \"</li>\",\n                \"<% if ( ( show_page ) < page_count ) { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } else { %>\",\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } %>\",\n                \"</ul>\",\n                \"<span>\",\n                \"&nbsp;showing&nbsp;\",\n                '<a data-toggle=\"tooltip\" data-placement=\"top\" title=\"Click to change the number of items on page\" class=\"page_size_prompt\">',\n                \"<%- items_shown %>\",\n                \"</a>\",\n                \"&nbsp;of <%- total_items_count %> items\",\n                \"</span>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderToolbarView: FolderToolbarView\n};\n"]}