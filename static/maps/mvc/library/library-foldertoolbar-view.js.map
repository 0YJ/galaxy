{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["define","el","mod_masthead","mod_utils","mod_toastr","mod_library_model","mod_select","FolderToolbarView","Backbone","View","extend","defaults","contains_file_or_folder","chain_call_control","total_number","failed_number","click #toolbtn_bulk_delete","disabled_jstree_element","click .page_size_prompt","can_add_library_item","jstree","histories","modal","text","select_extension","list_extensions","auto","id","description","list_genomes","template_defaults","this","options","config","user_library_import_dir","render","_","toolbar_template","templateToolBar","is_admin","renderPaginator","mutiple_add_dataset_options","Galaxy","find","user","isAdmin","show_page","parseInt","isAnonymous","total_items_count","items_shown","library_import_dir","$el","html","$","templatePaginator","page_count","hide","configureElements","createFolderFromModal","show","event","stopPropagation","self","template","templateNewFolderInModal","tooltip","folderDetails","serialize_new_folder","preventDefault","url_items","current_folder_id","closing_events","folder","url","body","success","libraries","validate_new_folder","FolderAsModel","history","fragment","split","indexOf","length","urlRoot","name","set","type","folderListView","collection","add","error","model","response","responseJSON","$checkedValues","findCheckedRows","err_msg","info","that","buttons","val","Import","GalaxyHistories","fetch","done","templateBulkImportInModal","importAllIntoHistory","disableButton","new_history_name","title","root","models","last_used_history_id","processImportToHistory","history_id","history_name","folder_ids","dataset_ids","push","row_id","datasets_to_import","post","i","library_dataset_id","historyItem","content","new_history","source","folders_to_import","status","initChainCallControl","action","enableButton","each","updateProgress","progress","Math","substring","width","txt_representation","folder_id","HistoryItem","closest","data","processDownload","library_folder_id","jQuery","getJSON","inputs","chainCallImportingIntoHistory","progressStep","addFilesFromHistoryModal","template_modal","Add","format","Close","closing_callback","fail","ld_ids","method","param","importFromPathsClicked","renderSelectBoxes","appendTo","submit","remove","fetchExtAndGenomes","description_url","datatypes","addAllDatasetsFromHistory","genomes","library_router","navigate","trigger","fetchAndDisplayHistoryContents","change","target","value","templateImportPathModal","importFilesFromGalaxyFolderModal","templateBrowserModal","importFromJstreePath","get","renderJstree","key","extension","sort","a","b","cache","select_genome","css","require","plugins","types","to_posix_lines","dbkey","paths","trimmed","valid_paths","chainCallImportingFolders","Jstree","folder_name","templateDeletingItemsProgressBar","templateImportIntoHistoryProgressBar","core","icon","file","checkbox","three_state","err_code","warning","state","disabled","link_data","preserve_dirs","selected_nodes","is","selection_type","space_to_tab","file_type","chainCallImportingUserdirFiles","trim","tag_using_filenames","history_contents","history_contents_template","checked_hdas","history_item_ids","history_item_types","items_to_add","hid","history_item_id","folder_item","chainCallAddingHdas","all_nodes","get_selected","filter","node","popped_item","onclick","window","location","undefined","promise","full_path","li_attr","full_source","templateHistoryContents","contents","reverse","bind","prop","hdas_set","item_type","added_hdas","save","from_hdca_id","from_hda_id","chainCallDeletingItems","deleted_items","history_item_set","pop","include_deleted","updated_item","item","items_to_delete","checkIncludeDeleted","when","items_total","library","showLocInfoModal","importFilesFromPathModal","folder_page_size","Folder","join","templateLocInfoInModal","item_to_delete","destroy","model_class","Item","emit","checked","fetchFolder","deleteSelectedItems","dataset","showLocInfo","libraryListView","parent_library_id","Library","showImportModal","back","showPageSizePrompt","prompt","preferences","templateAddingDatasetsProgressBar","templateAddFilesFromHistory"],"mappings":"kCAAAA,QAEQ,kBAFRA,cAeQ,cACIC,4BAVJ,oBAaQ,SACAC,EACAC,EACAC,EACAC,EACAC,GAm1DR,OACIC,kBA71DoBC,SAASC,KAAKC,QAYlCC,GAAAA,UAEIC,QACAC,+BAAoB,wBAChBC,6BADgB,kBAEhBC,sCAAe,sBAFCC,6BAHd,sBAONC,8BAAyB,cAnBYC,0BAAA,sBAYzCP,UAYAQ,sBAAA,EACAC,yBAzByC,EAerCP,oBAYJC,aAAA,EACAO,cA5ByC,GA8BzCJ,wBAAA,WAGAK,MAAA,KAGAF,OAAA,KAGAC,UAAA,KAGIE,cAAM,KARVC,iBAAkB,KAGlBC,mBAoBIC,MACAC,GAAA,OA1DqCJ,KAAA,cA2CrCK,YAkBI,sZASJC,gBAEIC,WAAAA,SAAAA,GACAC,KAAAC,QACWC,EAAAA,SAAOC,MAAAA,KAAdvB,UAIAmB,KAAAA,qBACHC,KAAAI,UAGRA,OAlFwC,SAAAH,GA8DrCD,KAAKC,QAAUI,EAAE1B,OAAOqB,KAAKC,QAASA,GAsB1C,IAAAK,EAAAN,KAAAO,kBApBQR,GACAH,GAAII,KAAKC,QAAQL,GACjBY,UAAU,EAsBlBC,WAAiB,EACbC,6BAA6BT,GAE3BU,OACGC,OAGOhB,EAAiBA,SADFe,OAAAE,KAAAC,UAEfC,EAAWC,UAAcf,OAAQc,KAAtBE,cAEqBC,OAAhCA,OAAAA,OAAAA,0BAC0BC,IAA1BA,OAAAA,OAAkBlB,0BAR9B,OAAAU,OAAAT,OAAAkB,qBAbQrB,EAAkBW,6BAA8B,IAGxDV,KAAKqB,IAAIC,KAAKhB,EAAiBP,KAgC3BU,gBAAIE,SAAaV,GACbD,KAAAC,QAAKU,EAAAA,OAAAX,KAAYiB,QAAjBhB,GACIsB,IAAAA,EAAEvB,KAAAwB,oBACFD,EAAAA,QACHX,KAHD,qBAIIW,KACAA,GACH3B,GAAAI,KAAAC,QAAAL,GACEmB,UAAAC,SAAAhB,KAAAC,QAAAc,WACDU,WAAAT,SAAAhB,KAAAC,QAAFwB,YACEP,kBAAAlB,KAAyB0B,QAA3BR,kBACHC,YAAAnB,KAAAC,QAAAkB,gBAKLQ,kBAAc,SAAA1B,GAjIuBD,KAAAC,QAAAI,EAAA1B,OAAAqB,KAAAC,QAAAA,IAoIzC,IAAAD,KAAAC,QAAAb,qBACAwC,EAAAA,sBAAuBC,OAEnBC,EAAMC,sBAANL,QAEA,IAAA1B,KAAAC,QAAApB,yBACImD,OAAJnB,KACIoB,OAAgBC,KAAAA,eAITX,EAAA,yBAFKM,OAGNI,EAAAA,gCAHMP,SADhBH,EAAaZ,gCAAbkB,OACWA,EAAAA,yBAAKA,SAUPN,EAAA,gCAAAG,OANIH,EAAA,yBAAAG,QAjJwB1B,KAAAqB,IAAAT,KAAA,iBAAAuB,WA8JrCP,sBAAIQ,SAAqBC,GACzBP,EAAIQ,iBACAR,EAAAC,kBAGA,IAAAC,EAAIO,KACAC,EAAAA,KAAAA,2BACHxC,KAFDT,MAEOoB,OAAApB,MACHiD,KAAAA,MAAAA,MACHC,gBAAA,EACDC,MAAOC,oBAxBPC,KAAMX,IA0BNS,SACIG,OAAAA,WACIlC,EAAAA,2BAEA+B,MAAAA,WACA/B,OAAOmC,MAAAA,YASHzE,wBAAAA,WACH,IAAA+D,EAAApC,KAAAqC,uBACJ,GAAArC,KAAA+C,oBAAAX,GAAA,CAhBsB,IAmB3B/D,EAnBAqE,EAAA,IAAApE,EAAA0E,cAkBGT,EAAA9D,SAAAwE,QAAAC,SAAAC,MAAA,KAGAX,EADND,EAAAa,QAAA,SAAA,EACDb,EAAAA,EAAAc,OAAA,GAzB4Bd,EAAUA,EAAUc,OAAS,GA6B7DhB,EAAAA,IAAAA,EAAsBiB,QAAAd,EAEde,EAAMhC,KAAEa,GACRvC,QAAa0B,SAAEmB,GAFnB/B,OAAApB,MAAAmC,OApMqCrD,EAAAwE,QAAA,mBA8KzBH,EAAOc,KAAMC,KAAM,WA4BnC9C,OAAAmC,UAAAY,eAAAC,WAAAC,IACAb,IAxBYc,MAAO,SAASC,EAAOC,GA4BnCpD,OAAApB,MAAAmC,YAC4B,IAAXqC,EAAAC,aACTC,EAAsBC,MAAAA,EAALF,aAArBG,SAEeC,EAAKP,MAAA,8BAORxF,EAAI4D,MAAAA,6BAEJoC,OAAAA,GAIQ/E,qBAAAA,WADW,OAGfgF,KAAAA,EAAAA,sBAASC,MACLC,YAAAA,EAAAA,6BAAmBD,QAKlBxB,oBAAA,SAAAX,GANI,MAAA,KAAAA,EAAAmB,MAYTlF,gBAAAA,WAEAA,GAAiB,IADd2B,KAAAkE,kBACH7F,OACHA,EAAA+F,KAAA,4CA1BT,CA4BH,IAAAC,EAAArE,KAnPoCA,KAAAV,UAAA,IAAAhB,EAAAmG,gBAuNjCzE,KAAKV,UA+BboF,QA7BaC,KAAK,WACF,IAAI1C,EAAWoC,EAAKO,4BA+BpCC,EAAAA,MAAsBlE,OAAApB,MACPuF,EAAAA,MAAAA,MACPC,gBAAwBxF,EAG5ByF,MAAA,sBACID,KAAAA,GACcE,UAAOZ,EAAA/E,UAAiB4F,SAG5BZ,SACFE,OAAaW,WACRC,EAAAA,wBAMMvB,MAAM,WAEblD,OAAWpB,MAAAmC,aAOlBzB,KAAAA,SAAQkF,EAAAA,QAET,IADe5D,EACfyC,aAECoB,EAAAA,MAAuBC,EAA5BrB,aAAwCsB,SAE3CjH,EAAAwF,MAAA,0BAWO0B,qBAAAA,WACHvF,KAFDT,MAEOuF,cAAA,UACHU,IAAAA,EAAYC,KAAKC,MACpBnE,EAAA,4BARLgD,MAUAF,EAAArE,KACA,GAAyB,KAArB2F,EACJpE,EAAKqE,KAAIC,OAAIL,KAAYnC,iBACjByC,KAAAA,IAEJC,KAAAA,SACIA,GACJA,EAAYC,QAAZb,qBAAAc,EAAArG,GACAmG,EAAYG,uBACZP,EAAwBI,GAC3BE,EAAA1C,QAGG4C,KAAAA,SAAAA,EAAJC,EAAAvC,GACSgC,EAAIN,MAAWlC,wBAEhB0C,OAAAA,WACJA,EAAYpD,MACRoD,aAAYzC,gBAEhByC,CACAJ,IAAAA,EAAAA,EACH,oDA7CKpB,MA+CNvE,KAAKqG,QAAAA,qBAAqBhB,EACtBhC,IAAAA,EAAQsC,EACRW,oDACAhB,OAHJtF,KAAAoF,uBAAAC,EAAAC,GAKAtF,KAAAT,MAAAgH,aAAA,YASHnB,uBAhVwC,SAAAC,EAAAC,GA8RrC,IAAIE,KAoDRD,KAlDIvF,KAAKkE,kBAAkBsC,KAAK,WACxB,IAAId,EAASnE,EAAEvB,MAoDvByG,QAAgB,MACPC,KAAL,MAEIC,KADFjB,EAAAkB,UAAF,EAA0BC,GAGtBC,EAAAA,KAAAA,GA1ViCtB,EAAAC,KAAAC,KA4SrC,IAAK,IADDC,KACKE,EAAIL,EAAYnC,OAAS,EAAGwC,GAAK,EAAGA,IAAK,CAC9C,IAAIC,EAAqBN,EAAYK,IAuDnCE,EAAA,IAASgB,EAAmBC,aAC9BxB,IACAD,EAAJjC,QAAA+B,EAAA,YACAU,EAAK7B,QAAkBsC,EACnBT,EAAIL,OACCuB,UAELtB,EAAWiB,KAAab,GAK3B,IATDF,EAAAN,EAAAlC,OAAA,EAAAwC,GAAA,EAAAA,IAAA,CAUIlD,IAAAA,EACc4C,EAAAM,GACdqB,EAAiB1B,IAAAA,EAAaD,YAClCQ,EAAKoB,IApXgCpB,EAAAzC,QAAA+B,EAAA,YA6TjCU,EAAYC,QAAUoB,EA0D9BrB,EAAAG,OAAA,iBAxDQP,EAAmBF,KAAKM,GAG5B/F,KAAKqG,sBACDhD,OAAQsC,EAAmBtC,OAC3BiD,OAAQ,aA0DhBa,aAAiB7B,IAIT+B,OAAAC,QACA3G,OAAI4G,KAAS,6BAAblC,GAEIrF,KAAAwH,8BACAD,EAMHjC,IAkBRmB,eA9ZwC,WAsVrCzG,KAAK0G,UAAY1G,KAAKyH,aA0E1BC,EAAAA,wBAA0Bb,MACtBF,KAAKrH,MAALU,KAAiB0G,UAAIpI,KAErB,IAAAwI,EAGQ9E,KAAKzC,MAALS,KAAaW,UAAb,aACAY,EAAA,oBAAIoG,KAAiB3F,IAQb4F,SAAAA,SAAAA,EAAKC,GACD7F,IAAAA,KACHuD,KACDuC,KAAAA,kBAAOtB,KAAA,WACH7F,IAAAA,EAAAA,EAAAA,MACHsG,QAAA,MAZOC,KAAA,MAcM,KAAlBa,EAAAA,UAAAA,EAAkB,GACdpH,EAAOmC,KAAAA,GAff0C,EAAAC,KAAAC,KAyBI1D,IAAAA,EAGHrB,OAJDsE,KAAA,mCAAA4C,EAMHG,GAAKC,OAASnE,EAATyB,WAA0BA,GAC5BvF,KAAAmH,gBAAWpD,EAASC,EAAAA,QAzEhCmD,gBAAiB,SAASxE,EAAKuE,EAAMgB,GACjC,GAAIvF,GAAOuE,EAAM,CAqFb7C,EAAJ,iBAAA6C,EAAAA,EAAA3F,EAAA4G,MAAAjB,GAEIS,IAAAA,EAAAA,GACJpG,EAAKhC,KAAMsC,EAAKsB,MAAA,KAAA,WACZV,IAAAA,EAAAA,KADYU,MAAA,KAEZ6B,GACM2C,8BACNrD,EAAS,GACLE,YACIH,EAAK+D,GAFJ,SAMJ7G,EAVO,iBAYZwG,EACI,cACApH,GAAOmC,QAIV,KAlBLyE,EAoBKc,WApFIC,SAAS,QAuFtBC,SArFaC,SACLnK,EAAW+F,KAAK,uCAwFxBqE,EAAAA,MAAoB,uBAIZ5F,yBAAS,WACLwB,KAAAA,UAAK3E,IAAAA,EAAL+E,gBACA,IAAAzC,EAAAhC,KACIqE,KAAAA,UACIzE,QACAJ,KAAAA,WACAK,EAAAA,MAAAA,OAAAA,MACA6I,IAAAA,EAAAA,EAAiBC,8BAJK3G,EAA1BzC,MAAAsC,MAMHY,gBAAA,EACD4B,MAAK3E,oCACDkD,KAAA+E,GADJrI,UAAA0C,EAAA1C,UAAA4F,SAZMZ,SAiBHsD,IAAA,WAjBX5F,EAAA4G,6BAoBgB3D,MAAO,WACVtE,OAAApB,MAASsJ,SAGVxE,iBAAkBoB,WACd7F,OAAIiJ,UAAaC,eADEC,SAEnBvJ,WAAMwC,EAAApC,IAFVoJ,SAAA,OAOHhH,EAFDiH,+BAVMjH,EAAA1C,UAAA4F,OAAA,GAAAtF,IAAd2B,EAAA,qBAAA2H,OAAA,SAAApH,GAvgBqCE,EAAAiH,+BAkcrBnH,EAAMqH,OAAOC,WA0F7BpB,KAAA,SAAAlE,EAAAC,QACA,IAAAA,EAAAC,aACW3F,EAAXwF,MAAAE,EAAAC,aAAAG,SAES9F,EAAAwF,MAAA,yBAWLuF,yBAAO,WANiC,IAA5C/E,EAAArE,KAriBqCA,KAAAT,MAAAoB,OAAApB,MAsdrC,IAAIoI,EAAiB3H,KAAKqJ,0BAyF9BrJ,KAAAT,MAAAsC,MAvFQY,gBAAgB,EAChBuC,MAAO,+BACPpC,KAAM+E,MAyFd2B,SACQjF,OAAJ,WACIsD,EAAAA,uBAAsB4B,IAErBhK,MAAL,WACIkD,OAAAA,MADYf,SAIZ4C,iBAAS,WAEDD,OAAAA,UAAKmF,eAAqBnF,SAFzB,WAAAA,EAAAzE,IAILkI,SAAO,OAIXC,KAAAA,qBAUAxG,mBAAE,WACL,IAFD8C,EAAArE,KAGAuB,EAAEkI,KACElI,IAAEZ,OAAAsE,KAAF,qCADJpC,QAAA,SAAA8F,GAxFQtE,EAAK3E,mBA4FR2I,IAAAA,IAAAA,KAALM,EACQzJ,EAAAA,gBAARuG,MACKiE,GAAazJ,EAAlB0J,GAAAC,UA1FgBpK,KAAMmJ,EAAUgB,GAAKC,UA4FnC/J,YAAF8I,EAA8BgB,GAAS7H,YACzBqH,gBAAiBR,EAAAgB,GAAAjB,kBAGvBnH,EAAE7B,gBAAAmK,KAAA,SAAFC,EAAAC,GACE,OAAAD,EAAAlK,GAAAmK,EAAAnK,GAAA,EAAAkK,EAAFlK,GAAAmK,EAAAnK,IAAA,EAAA,IAJJyE,EAMO3E,gBAAiB0J,QAAb/E,EAAuB1E,OAE9B4B,OAAE,IAEFtB,EAAAA,KACAoE,IAAAA,OAAKqF,KAAAA,cACR7G,QAAA,SAAAgG,GAbLxE,EAAAvE,gBAvlBqC,IAAA,IAAA6J,KAAAd,EA4gBzBxE,EAAKvE,aAAa2F,MA4FlC7F,GAAAiJ,EAAAc,GAAA,GA1FoBnK,KAAMqJ,EAAQc,GAAK,KAG3BtF,EAAKvE,aAAa+J,KAAK,SAASC,EAAGC,GAC/B,OAAOD,EAAElK,GAAKmK,EAAEnK,GAAK,EAAIkK,EAAElK,GAAKmK,EAAEnK,IAAM,EAAI,KA8FxDoK,OAAK/J,KAKLoI,kBAAA,WAWY,IAAAhE,EAAArE,KACHA,KAAAiK,cAFD,IAAA1L,EAAAG,MAGAwL,IAAA,wBACAC,KAAAA,EAAAA,aACI5I,UAAEZ,OAAApB,MAAA8B,IAAFT,KAAqBvB,0BACrBkC,MAAAA,MAEQ2F,KAAAA,iBAAAA,IAAMpD,EAAAA,MADJoG,IAAA,2BAGNE,KAAAA,EAAAA,gBACAC,UAAAA,OAAAA,MAAOhJ,IAAAT,KACH8B,6BAAQ0G,MAAA,UANYE,iCAA5B,SAAArJ,GAiBH,IAAAoE,EAnBDrE,KAoBH2H,EA3Ba3H,KAAAuJ,uBA4Bd1F,KAAAA,MAAOlD,OAAApB,MACHS,KAAAT,MAAAsC,MACIY,gBAAIsB,EACA1F,MAAAA,iCAGHuE,KAAA+E,MACGtJ,SACHmG,OAAA,WAPLH,EAQOmF,qBAAAnF,EAAApE,IAEN6H,MAAA,WACJnH,OAAApB,MAAAmC,SAjGDqG,iBAAkB,WAEdpH,OAAOmC,UAAUgG,eAAeC,SAC5B,WAAa1E,EAAKzE,IAChBoJ,SAAS,OA6GvBzH,EAAA,yBAAwBhC,KAAM8B,QACpB,WAENiJ,EAAAA,mBAAiBjL,OAAWgC,eAMhCE,EAAA,0BAAqB9B,KAAAA,QAAiB2J,WAClCmB,EAAAA,mBAAaN,OAAcb,iBAG/BpJ,KAAKwK,oBACDnM,EAAAA,wBACI,UAEP2B,KAJD0J,aAIOzJ,GAEHuK,EAAAA,qBAAQtB,OAAR,SAAApH,GACa,2BAAbA,EAAS+D,OAAI2E,OACTvK,EAAIwK,wBAAJ,UACApG,EAAIoG,aAAAxK,GACAyK,EAAAA,2BAAAhJ,OACHH,EAAA,8BAAAG,OACJH,EAAA,yBAAAM,QACyB,yBAArBwE,EAAAA,OAAAA,QACDhD,EAAAA,yBADsB3B,OAEtB4E,EAAAA,2BAAQzE,OAFZN,EAAA,8BAAAM,OAIA5B,EAAK0K,wBAA0B,QAC3BH,EAAAA,aAD2BvK,OAYtCyJ,aA9tBwC,SAAAzJ,GAguBzCD,KAAAC,QAAAI,EAAA1B,OAAAqB,KAAAC,QAAAA,GA/GI,IAAIkJ,EAASlJ,EAAQiG,QAAU,UAC3BhH,EAA0Bc,KAAKC,QAC9Bf,wBACLc,KAAKX,OAAS,IAAIf,EAAkBsM,OAiHxCvE,KAAAA,OAAAA,IACQpE,KAAAA,OAAJqB,QACA,WACI6F,EACIlH,0BAGQ4I,EADK7K,KAAAX,OADbqF,OAKA7B,QAAA,SAAAiB,EAAAC,GAEA9B,OAAAA,SAAgB6I,WAChB,OAAWzJ,SAGXY,SAAAA,sBAAgB8I,SAAAA,GAChBxJ,EAAKhC,mBACKF,OAAA,WAIVkC,EAAA,mBAAAlC,QACJ2L,MACgBnH,KACRC,GAvBZsG,SAAA,QAAA,YA7FgBC,OA0HhB3H,QACAuI,KAAA,iBAEoBC,MACPpM,KAAAA,gBAtHGqM,UA0HpBC,aAAA,QApHQvH,MAAO,SAASC,EAAOC,QACkB,IAA1BA,EAASC,aACuB,SAAnCD,EAASC,aAAaqH,SA0H1C7B,EAAsB8B,QACAvH,EAAAC,aACb3E,SAIWkM,EAAMC,MAAXzH,EAAPC,aAAAG,SAKAsH,EAAiBlM,MAAM8B,0BAmBvB+G,uBAAWtD,WACX,IAAA4G,EAAaC,KAAAA,MAAAA,IACT/K,KAAA,sBACI4J,GAAAA,YACHiB,EAAAzL,KAAAT,MAAA8B,IACJT,KAAA,kBACDgL,GAAA,YACIvI,EAAQmH,KAAMnH,MADQhC,IAEtBiF,KAAAA,sBAFJsF,GAAA,YAIAtB,EAAIuB,KAAAA,MAAmBxK,IACnBT,KAAA,mBACAgL,GAAA,YACIpB,EAD2BxK,KAAAT,MAAA8B,IAE3BqK,KAAAA,cACAD,GAAAA,YACAK,EAAAA,KAAAA,iBAJ2B1C,QAK3BkB,EAAAA,KAAAA,cAAgBA,QAChBpE,EAAAA,EAAAA,yBAN2B3B,MAO3BwH,KACAxB,GAAAA,EAIJ,CACAvK,KAAAT,MAAKyM,cAAAA,UAEDD,IAAAA,IAAAA,GADAvB,EAAAA,EAAAA,MADgC,OAErBuB,OAFqB,EAAAlG,GAAA,EAAAA,IAAA,CAGhC0E,IAAAA,EAAOA,EAHyB1E,GAAAoG,OAIrBR,IAAXA,EAAAA,QACAK,EAAAA,KAAcA,GAGdI,KAAAA,sBARgC7I,OAApCqH,EAAArH,OAUHiD,OAAA,oBAr1BgCtG,KAAA2K,2BAmtB7BH,MAAOE,EAsInBzB,cAAAA,EACQkD,UAAAA,EACI9G,aAAAA,EADRiF,eAAAA,EAGItI,OAAJ,aACAmK,UAAiBzH,EACb7B,oBAASqJ,EACL3B,MAAI6B,SAzBAF,EAAAA,KAT2B,iDAwD1B7F,qBANL,SAAApG,GAOH,IAAAgC,EACD4B,OAAAA,EAAOyC,QACH,IAAA,kBACIjI,EAAAA,KAAWwF,oCACd7D,KAFDT,MAEO8B,IAAAT,KAAA,eAAAU,KACHjD,GACHwM,YAAA7K,KAAAC,QAAA4K,eA73B4B,MAgvBjC,IAAK,oBAkJb5I,EAAAjC,KAAA8K,mCAhJY9K,KAAKT,MAAM8B,IAAIT,KAAK,eAAeU,KAAKW,KACxC,MAkJZ2G,IAAAA,aACQyD,EAAerM,KAAKT,uCAGpB+M,KAAAA,MAAAA,IACAC,KAAAA,eACAC,KACAH,GAAJ/G,aAA6BrF,EAAAqF,gBAEtB,MACH,QACA+G,OAAAA,KAAa7F,MACLiG,0BAGAA,YASJzM,KAAA0G,SAAIgG,EACJ1M,KAAAyH,aAAIkF,IAAc1M,EAAI3B,OACtBqO,KAAAA,QAAAA,mBACIhM,aACAV,EADAoD,OAIJrD,KAAAC,QAAIsM,mBAAAvN,cAA0B,GAWlCwK,qBAAKoD,SAAAA,EAAoBJ,GAC5B,IAAAK,EAAAtL,EAAA,mBAh7BoClC,SAuxBhCyN,cAAa,GAEdnB,EAAiBtL,EAAE0M,OAAOF,EAAW,SAASG,GAC9C,OAA8B,GAAvBA,EAAKzB,MAAMC,WAElBE,EAAgB1L,KAAKT,MAAM8B,IAC1BT,KAAK,sBA4Jd4G,GAAAA,YAIQxF,EAAJhC,KAAAT,MAAA8B,IACI4L,KAAAA,kBACArB,GAAA,YACAE,EAAS7L,KAAQnB,MAAAA,IACbT,KAAAA,sBAIQ6O,GAAAA,YACIC,EAAAA,KAAOC,MAAP/L,IACHT,KAAA,mBAHLgL,GAAA,YAMPG,EACG/L,KAAKC,iBAAQnB,QAGbT,EAAAA,KAAAA,cACI+K,QAEP8C,EACQjM,KAAQnB,MAAAA,IAGbT,KAAAA,cAIQ6O,GAAAA,YACIC,EAAAA,EAAkBxM,GAAAA,KACrB6J,KAHL,GAAAmB,EAHJtI,OAAA,EASHhF,EAAA+F,KAAA,uCACDzD,CACAX,KAAAT,MAAAuF,cAAA,UACH,IAAA,IAAAe,EAAA8F,EAAAtI,OAAA,EAAAwC,GAAA,EAAAA,SAEoBwH,IADjBC,EACAL,GAAAA,QAAiBM,WACbvH,EAASiH,KAAAA,EADIpH,GAAA2H,QAAAD,WAchBvF,GAzLDhI,KAAKqG,sBAkLJ1B,OAAK6F,EAAAnH,OACFrB,OAAKyE,oBAMQ,WAAXoF,EAAW,CACR5L,EAAQnB,EAAAA,OAAmBE,UAChCgD,KAAKyE,2BACAe,MAAAA,EAXbkE,cAAAA,EAz+BqCD,UAAAA,EAk0BzBK,aAAcA,EAyL9BxB,eAAAA,EAvLgBpE,OAAQuH,EACR1B,UAAWA,EACXxB,MAAOA,EACP2B,oBAAqBA,SA0LrCF,GAAgC,SAAhCA,EAAgC,CACxB3H,IAAOoJ,EAAXxN,EAAAiG,OAAA,QACI+G,KAAAA,gCACOA,MAAAA,EACHlB,UAAajN,EACbT,MAAWwE,EAGXlC,UAAae,EACVoK,aAAAA,EACHzN,eAAiBiM,EACpBpE,OAAAuH,EACMvB,oBAAPA,OA6BCjD,+BACgB,SAAA5D,GACbhB,IANRrC,EAAAhC,KAMqBlB,IAAAA,EAAmBE,iBAChCqF,GAAAA,IA7iC6BK,OA+1BjC7B,QAAS,SAASsJ,GAmN1B,IAAAC,EAAApK,EAAA0L,0BAjNY1L,EAAK1C,UACAmK,IAAIpE,GACJ7B,KAAMmK,SAAUxB,IACrBnK,EAAKzC,MAAM8B,IAAIT,KAAK,6BAA6BU,KAC7C8K,GACID,iBAAkBA,EAAiBjH,OAAO0I,aAGlD5L,EAAKzC,MAAM8B,IACNT,KAAK,8BACLiN,KAAK,QAAS,WAmN/BlD,EACI,6CACAmD,KAAA,WAAA,KAEI9L,EAAOiL,MAAAA,IACEhN,KAAAA,gCACL5B,KAAAA,QACI,WAEGkB,EACJ,6CACHuO,KAAA,WAAA,MAGJjK,MAAO,SAAPC,EAAAC,QACH,IAAAA,EAAAC,aACGsJ,EACE1H,MACEjF,EAAOsE,aACHd,SAwBCsC,EAAL5C,MAAA,0BAUZ+E,0BAAA,WA7OI,IAAIyD,EAAerM,KAAKT,MAAM8B,IACzBT,KAAK,6BACLA,KAAK,YACN0L,KA+ORM,KACQ5K,KACJ,GAAAqK,EAAAhJ,OAAsB/E,EAClB2O,EAAAA,KAAcc,4CACd,CACA/N,KAAIT,MAAKU,cAAQnB,OACbT,EAAAA,KAAWwE,WADf,IAIO4J,EACHlL,EAAKtB,MAGL5B,QAAWwF,MAGRqD,KACH,MAGA7I,GAAAA,EAAAA,CAGH,IAAA2P,EAAAzM,EAAAvB,MACY0B,QAAb,MACYuM,KAAAA,QACf3B,EAAA7G,KAAAgH,GACGa,EACAL,KAAYiB,MAxPZ,IAAK,IAAIrI,EAAIyG,EAAiBjJ,OAAS,EAAGwC,GAAK,EAAGA,IAAK,CA8PtDlB,IADL+H,EAC0BJ,EAAAzG,GACX/C,EAAUY,IAAAA,EAA0BE,KAC3C5B,EAAKyE,IACAmG,OAAAA,KAEH,eACG3M,KAAQnB,QAAAA,GACR2H,YACL,eAAKmG,EAAoBmB,GATjCpB,EAAAnJ,KAAA2K,aAAAzB,IAlPYC,EAAYnJ,KAAM4K,YAAa1B,IAEnCF,EAAa/G,KAAKkH,GAEtB3M,KAAKqG,sBACDhD,OAAQmJ,EAAanJ,OA+PjCgL,OAAAA,oBAEIrO,KAAKsO,oBAAoBhQ,KAoBrBqC,8BAAA,SACA4N,EACHjJ,GAIO3E,IAAAA,EAAOmC,KAGPd,EAAKyE,EAAL+H,MACA,QAAA,IAAAvB,EAqDP,OAlDgBwB,IADL9N,KAAAA,QAAOmC,mBAAyB7C,cAGhC5B,EAAIqQ,QAEAC,6EAGAD,IAOAA,QAAAA,WACGvB,OAAAC,SAAAzM,OAAAsE,QAaVjF,KAAAC,QAAAnB,mBAAAE,gBACDgD,KAAKqM,QAAAA,mBAAuBO,aAG5B5M,EAAalD,MACR2H,kEA/uCwBzG,KAAAC,QAAAnB,mBAAAE,cAm9B7BgB,KAAKC,QAAQnB,mBAAmBC,cAEhCV,EAAWiN,QACP,gGAiShBuD,IAEe/L,QAAUY,WACb+K,OAAiBrB,SAAAzM,OAAAsE,QAGuBtE,OAA5CpB,MAAAmC,QAGH,EA9RaH,EAAEuN,KAiSpB7B,EAAAiB,MA/RYlI,QAASiH,EAAYjH,QACrBE,OAAQ+G,EAAY/G,UAqSxBjC,KAAAA,WACA5F,EAAAA,iBAGG2D,EAAAwF,8BACCvF,EACC1C,KAGDyF,KAAAA,WACApC,EAAAA,QAAMX,mBAHMjD,eAAA,EAIZsF,EAAAA,iBACIwD,EAAAA,8BACInH,EACH2E,MAaA0G,+BAAM,SAAA/L,GACHuF,IAAAA,EAAAA,KACHyH,EAAAhN,EAAAuK,MAAAgE,MACJ,QAAA,IAAAvB,EASL,OAnBA,IAAAjN,KAAAC,QAAAnB,mBAAAE,eAYAX,EAAAwE,QACIkM,mDAEJpO,OAAK+F,MAALhF,QAEArD,EAAAwF,MAAA,sBAEK,EAEGjE,EAAI4F,KADiCjE,EAAAqE,KAGzCgJ,OAAAA,KACH,4CACIvK,EAAQkB,GACL7C,WACA9C,EAAI2F,OADR,SAGAqJ,EACH,cAnSO3O,EAAQ8L,UAqSX9L,cACLA,EAAAwL,UACK4C,iBACRpO,EAAA6L,aAj0CoC,mBA+hCzB7L,EAAQqK,eAqSX,UACL0E,EAAJzE,MACW,wBACAzH,EAAPoJ,sBAMA8C,KAAAA,SAAc1Q,GACVsB,EAAI6G,iBADRpC,EAAA2H,+BAAA/L,KAII4C,KAAAA,WACIwB,EAAAA,QAAK4K,mBAAiBD,eAAtB,EACH3K,EAHSoC,iBAIV5C,EAAAA,+BAAuBE,MAgB3BtB,0BAAgB,SADJxC,GAGZ2C,IAAAA,EAAMX,KACNqC,EAASrE,EAAAuK,MAAAgE,MACL1G,QAAO,IAAPA,EAUA,OATI,IAAAnH,KAAAA,QAAOpB,mBAAPP,eACHX,EAAAwE,QAHI,yEAv2CwBlC,OAAApB,MAAAmC,QAg3C7BzB,EAAQiG,MAAhB,sBAEQ,EAEC3E,EAAAuN,KACDvN,EAAAqE,KACIM,OAAAA,KADJ,4CAGA7B,EAAAzE,GACC,WACDK,EAAKiP,OACL,SACCjC,EACD,kBACI/G,EAAQwF,cADZ,cAGAzL,EAAAwL,UACJ,mBACI9K,EAAOmC,eACPzE,iBACA4B,EAAA6L,aApBR,cAh3CqC7L,EAAA8L,UAimCzB,UAuShB9L,EAAAsK,MArSgB,wBACAtK,EAAQiM,sBAgThBvL,KAAAA,SAAOmC,GACHqM,EAAAA,iBADJ9K,EAAAsG,0BAAA1K,KAIIL,KAAAA,WACAmB,EAAAA,QAAWjC,mBAAAE,eAAA,EAFfqF,EAAAoC,iBAIHpC,EAAAsG,0BAAA1K,MAUO2M,oBAAA,SAAAmB,GACA,IAAA/L,EAAAhC,KACAA,KAAAiO,WAAA,IAAA3P,EAAA8Q,OACA,IAAAnC,EAAAc,EAAAS,MAGA,QAAA,IAAAvB,EA1RJ,OAmRA,IAQIjN,KAAAC,QAAAnB,mBAAAE,cAkEAX,EAAAwE,QACA,sDAIA7C,KAAAC,QAAAnB,mBAAAE,gBA/EJgB,KAiFEqP,QAlFNvQ,mBAAAC,aA9RQV,EAAWwF,MAoXvByL,gEAhXYtP,KAAKC,QAAQnB,mBAAmBE,cAib5CkD,KAAAA,QAAAA,mBAA0BnD,cA1jDeV,EAAAiN,QA6oCzB,yDA7oCyB3K,OAAApB,MAAAmC,OAipC1B1B,KAAKiO,WA6cPhM,EAAAA,KA9lD4BgL,EAAAiB,MAqpC7BE,YAAanB,EAAYxD,IAAI,kBAsezCqB,KAAAA,SAAAA,GACWzK,OAAE4B,UAEDyB,eAAAC,WACAC,IAAAE,GA/nD6B9B,EAAAyE,iBA6pC7BzE,EAAK4K,oBAAoBmB,KA6ejC/F,KAAS/F,WAsCDD,EAAA/B,QAAAnB,mBAAAE,eAAA,EACAgD,EAAAyE,iBAjrD6BzE,EAAA4K,oBAAAmB,MAiwDxCM,uBAjwDwC,SAAAO,GA4qCrC,IAAI5M,EAAOhC,KAulBf0N,KAAAA,cAAyB,IAAApP,EAAA8Q,OACrB,IAAAG,EAEQX,EAAAJ,MAtwD6B,QAAA,IAAAe,EAksCjC,OAlBsD,IAAlDvP,KAAKC,QAAQnB,mBAAmBE,cAqoB5CwC,EAAmBqB,QAAA,gCAMP7C,KAAAC,QAAAnB,mBAAAE,gBAOAgB,KAAAC,QAAAnB,mBAAAC,aAl0DhBV,EAAAwF,MAurCoB,mGAqqBpB7D,KAAAC,QAAAnB,mBAAAE,cA32DRgB,KAAAC,QAAAnB,mBAAAC,cA4sCwBV,EAAWiN,QACP,6FAGR3K,OAAOpB,MAAMmC,OACN1B,KAAKsO,cAEhBiB,EACKC,UACA7K,KAAK,SAASgK,GAMX,GALAhO,OAAOmC,UAAUY,eAAeC,WAAW6E,OACvC+G,EAAe3P,IAEnBoC,EAAKyE,iBAGD9F,OAAOmC,UAAUY,eAAezD,QAC3BwO,gBACP,CACE,IAAIC,EAAe,KAED,WAAdC,EAAKlL,MACgB,kBAArBkL,EAAKc,YAELf,EAAe,IAAIpQ,EAAkB0E,cACjC2L,GAGU,SAAdA,EAAKlL,MACgB,mBAArBkL,EAAKc,YAELf,EAAe,IAAIpQ,EAAkBoR,KAAKf,IAE1ChO,OAAOgP,KAAK9L,MACR,mCACA,YAEJlD,OAAOgP,KAAK9L,MACR8K,EAAKlL,MAAQkL,EAAKc,YAClB,aAGR9O,OAAOmC,UAAUY,eAAeC,WAAWC,IACvC8K,GAGR1M,EAAKqM,uBAAuBO,KAE/B5G,KAAK,WACFhG,EAAK/B,QAAQnB,mBAAmBE,eAAiB,EACjDgD,EAAKyE,iBACLzE,EAAKqM,uBAAuBO,MAOxCC,oBAAqB,SAAS/M,GACtBA,EAAMqH,OAAOyG,QACbjP,OAAOmC,UAAUY,eAAemM,aAC5BpB,iBAAiB,IAGrB9N,OAAOmC,UAAUY,eAAemM,aAC5BpB,iBAAiB,KAQ7BqB,oBAAqB,WACjB,IAAItK,KACAD,KACAtB,EAAiBjE,KAAKkE,kBAC1B,GAA8B,IAA1BD,EAAeZ,OACfhF,EAAW+F,KACP,uDAED,CACH,IAAInC,EAAWjC,KAAK8K,mCACpB9K,KAAKT,MAAQoB,OAAOpB,MACpBS,KAAKT,MAAMsC,MACPY,gBAAgB,EAChBuC,MAAO,0BACPpC,KAAMX,MACNqC,SACIwD,MAAO,WACHnH,OAAOpB,MAAMmC,WAKzB1B,KAAKC,QAAQnB,mBAAmBC,aAAe,EAC/CiB,KAAKC,QAAQnB,mBAAmBE,cAAgB,EAChDiF,EAAeuC,KAAK,WAChB,IAAId,EAASnE,EAAEvB,MACViH,QAAQ,MACRC,KAAK,WACKmG,IAAX3H,IAC8B,KAA1BA,EAAOkB,UAAU,EAAG,GACpBrB,EAAWE,KAAKC,GAEhBF,EAAYC,KAAKC,MAK7B,IAAIqJ,EAAcvJ,EAAYnC,OAASkC,EAAWlC,OAClDrD,KAAKyH,aAAe,IAAMsH,EAC1B/O,KAAK0G,SAAW,EAIhB,IAAK,IADDkI,KACK/I,EAAIL,EAAYnC,OAAS,EAAGwC,GAAK,EAAGA,IAAK,CAC9C,IAAIkK,EAAU,IAAIzR,EAAkBoR,MAChC9P,GAAI4F,EAAYK,KAEpB+I,EAAgBnJ,KAAKsK,GAEzB,IAASlK,EAAIN,EAAWlC,OAAS,EAAGwC,GAAK,EAAGA,IAAK,CAC7C,IAAInD,EAAS,IAAIpE,EAAkB0E,eAC/BpD,GAAI2F,EAAWM,KAEnB+I,EAAgBnJ,KAAK/C,GAGzB1C,KAAKC,QAAQnB,mBAAmBC,aAAegQ,EAE/C/O,KAAKqO,uBAAuBO,KAIpCoB,YAAa,WACT,IAAIhB,EAAU,KACV3K,EAAOrE,KAC8B,OAArCW,OAAOmC,UAAUmN,iBACjBjB,EAAUrO,OAAOmC,UAAUmN,gBAAgBtM,WAAW8F,IAClDzJ,KAAKC,QAAQiQ,mBAEjBlQ,KAAKiP,iBAAiBD,KAEtBA,EAAU,IAAI1Q,EAAkB6R,SAC5BvQ,GAAII,KAAKC,QAAQiQ,qBAEbxL,OACJ7B,QAAS,WACLwB,EAAK4K,iBAAiBD,IAE1BnL,MAAO,SAASC,EAAOC,QACkB,IAA1BA,EAASC,aAChB3F,EAAWwF,MAAME,EAASC,aAAaG,SAEvC9F,EAAWwF,MAAM,0BAOrCoL,iBAAkB,SAASD,GACvB,IAAI3K,EAAOrE,KACPiC,EAAWjC,KAAKsP,yBACpBtP,KAAKT,MAAQoB,OAAOpB,MACpBS,KAAKT,MAAMsC,MACPY,gBAAgB,EAChBuC,MAAO,mBACPpC,KAAMX,GAAW+M,QAASA,EAAS/O,QAASoE,EAAKpE,UACjDqE,SACIwD,MAAO,WACHnH,OAAOpB,MAAMmC,YAM7B0O,gBAAiB,SAASnQ,GACtB,OAAQA,EAAQiG,QACZ,IAAK,UACDlG,KAAK0H,2BACL,MACJ,IAAK,YACD1H,KAAKsJ,kCACDpD,OAAQ,cAEZ,MACJ,IAAK,OACDlG,KAAKkP,2BACL,MACJ,IAAK,UACDlP,KAAKsJ,kCACDpD,OAAQ,YAEZ,MACJ,QACIvF,OAAOmC,UAAUgG,eAAeuH,OAChChS,EAAWwF,MAAM,4BAQ7ByM,mBAAoB,WAChB,IAAInB,EAAmBoB,OACnB,8CACA5P,OAAOmC,UAAU0N,YAAY/G,IAAI,qBAGb,MAApB0F,GACAA,GAAoBnO,SAASmO,KAE7BxO,OAAOmC,UAAU0N,YAAYhN,KACzB2L,iBAAkBnO,SAASmO,KAE/BxO,OAAOmC,UAAUY,eAAetD,QAC5BR,GAAII,KAAKC,QAAQL,GACjBmB,UAAW,MAKvBmD,gBAAiB,WACb,OAAO3C,EAAE,qBAAqBX,KAAK,aAGvCL,gBAAiB,WACb,OAAOF,EAAE4B,UAGD,wCAEA,6BACA,yCACA,+CAEA,2DACA,sGACA,UACA,mFACA,WACA,SACA,qNACA,qEACA,YACA,0CACA,kEACA,oIACA,8FACA,YACA,yCACA,yEACA,6DACA,gFACA,UACA,qDACA,4BACA,+CACA,wDACA,mFACA,UACA,qDACA,kEACA,UACA,UACA,QACA,SACA,iBACA,0LACA,mEACA,OACA,UACA,iOACA,mCACA,mBACA,YACA,0FACA,kIACA,4EACA,YACA,yCACA,kEACA,kEACA,+DACA,QACA,SACA,+NACA,oDACA,8LACA,0CACA,gBACA,YACA,0GACA,8FACA,gDACA,8CACA,aACA,YACA,OACA,UACA,SACA,UAEA,kCACA,SAEA,wDAEA,UACFoN,KAAK,MAIfC,uBAAwB,WACpB,OAAOjP,EAAE4B,UAED,QACA,6CACA,UACA,uCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACFoN,KAAK,MAIfnN,yBAA0B,WACtB,OAAO7B,EAAE4B,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACFoN,KAAK,MAIfzK,0BAA2B,WACvB,OAAOvE,EAAE4B,UAED,QACA,mCACA,mBACA,iHACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,4GACA,WACA,SACA,UACFoN,KAAK,MAIftE,qCAAsC,WAClC,OAAO1K,EAAE4B,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACFoN,KAAK,MAIfoB,kCAAmC,WAC/B,OAAOpQ,EAAE4B,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACFoN,KAAK,MAIfvE,iCAAkC,WAC9B,OAAOzK,EAAE4B,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACFoN,KAAK,MAIf9F,qBAAsB,WAClB,OAAOlJ,EAAE4B,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFoN,KAAK,MAIfhG,wBAAyB,WACrB,OAAOhJ,EAAE4B,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFoN,KAAK,MAIfqB,4BAA6B,WACzB,OAAOrQ,EAAE4B,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,sCACA,SACA,UACFoN,KAAK,MAIf3B,wBAAyB,WACrB,OAAOrN,EAAE4B,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACFoN,KAAK,MAIf7N,kBAAmB,WACf,OAAOnB,EAAE4B,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,sBACA,8HACA,qBACA,OACA,0CACA,WACFoN,KAAK","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["define(\n    [\n        \"layout/masthead\",\n        \"utils/utils\",\n        \"libs/toastr\",\n        \"mvc/library/library-model\",\n        \"mvc/ui/ui-select\"\n    ],\n    function(\n        mod_masthead,\n        mod_utils,\n        mod_toastr,\n        mod_library_model,\n        mod_select\n    ) {\n        var FolderToolbarView = Backbone.View.extend({\n            el: \"#center\",\n\n            events: {\n                \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n                \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n                \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n                \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n                \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n                \"click .page_size_prompt\": \"showPageSizePrompt\"\n            },\n\n            defaults: {\n                can_add_library_item: false,\n                contains_file_or_folder: false,\n                chain_call_control: {\n                    total_number: 0,\n                    failed_number: 0\n                },\n                disabled_jstree_element: \"folders\"\n            },\n\n            modal: null,\n\n            // directory browsing object\n            jstree: null,\n\n            // user's histories\n            histories: null,\n\n            // genome select\n            select_genome: null,\n\n            // extension select\n            select_extension: null,\n\n            // extension types\n            list_extensions: [],\n\n            // datatype placeholder for extension auto-detection\n            auto: {\n                id: \"auto\",\n                text: \"Auto-detect\",\n                description:\n                    \"This system will try to detect the file type automatically.\" +\n                    \" If your file is not detected properly as one of the known formats,\" +\n                    \" it most likely means that it has some format problems (e.g., different\" +\n                    \" number of columns on different rows). You can still coerce the system\" +\n                    \" to set your data to the format you think it should be.\" +\n                    \" You can also upload compressed files, which will automatically be decompressed.\"\n            },\n\n            // genomes\n            list_genomes: [],\n\n            initialize: function(options) {\n                this.options = _.defaults(options || {}, this.defaults);\n                this.fetchExtAndGenomes();\n                this.render();\n            },\n\n            render: function(options) {\n                this.options = _.extend(this.options, options);\n                var toolbar_template = this.templateToolBar();\n                var template_defaults = {\n                    id: this.options.id,\n                    is_admin: false,\n                    is_anonym: true,\n                    mutiple_add_dataset_options: false\n                };\n                if (Galaxy.user) {\n                    template_defaults.is_admin = Galaxy.user.isAdmin();\n                    template_defaults.is_anonym = Galaxy.user.isAnonymous();\n                    if (\n                        Galaxy.config.user_library_import_dir !== null ||\n                        Galaxy.config.allow_library_path_paste !== false ||\n                        Galaxy.config.library_import_dir !== null\n                    ) {\n                        template_defaults.mutiple_add_dataset_options = true;\n                    }\n                }\n                this.$el.html(toolbar_template(template_defaults));\n            },\n\n            /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n            renderPaginator: function(options) {\n                this.options = _.extend(this.options, options);\n                var paginator_template = this.templatePaginator();\n                $(\"body\")\n                    .find(\".folder-paginator\")\n                    .html(\n                        paginator_template({\n                            id: this.options.id,\n                            show_page: parseInt(this.options.show_page),\n                            page_count: parseInt(this.options.page_count),\n                            total_items_count: this.options.total_items_count,\n                            items_shown: this.options.items_shown\n                        })\n                    );\n            },\n\n            configureElements: function(options) {\n                this.options = _.extend(this.options, options);\n\n                if (this.options.can_add_library_item === true) {\n                    $(\".add-library-items\").show();\n                } else {\n                    $(\".add-library-items\").hide();\n                }\n                if (this.options.contains_file_or_folder === true) {\n                    if (Galaxy.user) {\n                        if (!Galaxy.user.isAnonymous()) {\n                            $(\".logged-dataset-manipulation\").show();\n                            $(\".dataset-manipulation\").show();\n                        } else {\n                            $(\".dataset-manipulation\").show();\n                            $(\".logged-dataset-manipulation\").hide();\n                        }\n                    } else {\n                        $(\".logged-dataset-manipulation\").hide();\n                        $(\".dataset-manipulation\").hide();\n                    }\n                } else {\n                    $(\".logged-dataset-manipulation\").hide();\n                    $(\".dataset-manipulation\").hide();\n                }\n                this.$el.find(\"[data-toggle]\").tooltip();\n            },\n\n            // shows modal for creating folder\n            createFolderFromModal: function(event) {\n                event.preventDefault();\n                event.stopPropagation();\n\n                // create modal\n                var self = this;\n                var template = this.templateNewFolderInModal();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Create New Folder\",\n                    body: template(),\n                    buttons: {\n                        Create: function() {\n                            self.create_new_folder_event();\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            },\n\n            // create the new folder from modal\n            create_new_folder_event: function() {\n                var folderDetails = this.serialize_new_folder();\n                if (this.validate_new_folder(folderDetails)) {\n                    var folder = new mod_library_model.FolderAsModel();\n                    var url_items = Backbone.history.fragment.split(\"/\"),\n                        current_folder_id;\n                    if (url_items.indexOf(\"page\") > -1) {\n                        current_folder_id = url_items[url_items.length - 3];\n                    } else {\n                        current_folder_id = url_items[url_items.length - 1];\n                    }\n                    folder.url = folder.urlRoot + current_folder_id;\n\n                    folder.save(folderDetails, {\n                        success: function(folder) {\n                            Galaxy.modal.hide();\n                            mod_toastr.success(\"Folder created.\");\n                            folder.set({ type: \"folder\" });\n                            Galaxy.libraries.folderListView.collection.add(\n                                folder\n                            );\n                        },\n                        error: function(model, response) {\n                            Galaxy.modal.hide();\n                            if (typeof response.responseJSON !== \"undefined\") {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            } else {\n                                mod_toastr.error(\"An error occurred.\");\n                            }\n                        }\n                    });\n                } else {\n                    mod_toastr.error(\"Folder's name is missing.\");\n                }\n                return false;\n            },\n\n            // serialize data from the modal\n            serialize_new_folder: function() {\n                return {\n                    name: $(\"input[name='Name']\").val(),\n                    description: $(\"input[name='Description']\").val()\n                };\n            },\n\n            // validate new folder info\n            validate_new_folder: function(folderDetails) {\n                return folderDetails.name !== \"\";\n            },\n\n            // show bulk import modal\n            modalBulkImport: function() {\n                var $checkedValues = this.findCheckedRows();\n                if ($checkedValues.length === 0) {\n                    mod_toastr.info(\"You must select some datasets first.\");\n                } else {\n                    var that = this;\n                    this.histories = new mod_library_model.GalaxyHistories();\n                    this.histories\n                        .fetch()\n                        .done(function() {\n                            var template = that.templateBulkImportInModal();\n                            that.modal = Galaxy.modal;\n                            that.modal.show({\n                                closing_events: true,\n                                title: \"Import into History\",\n                                body: template({\n                                    histories: that.histories.models\n                                }),\n                                buttons: {\n                                    Import: function() {\n                                        that.importAllIntoHistory();\n                                    },\n                                    Close: function() {\n                                        Galaxy.modal.hide();\n                                    }\n                                }\n                            });\n                        })\n                        .fail(function(model, response) {\n                            if (typeof response.responseJSON !== \"undefined\") {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            } else {\n                                mod_toastr.error(\"An error occurred.\");\n                            }\n                        });\n                }\n            },\n\n            /**\n   * Import all selected datasets into history.\n   */\n            importAllIntoHistory: function() {\n                this.modal.disableButton(\"Import\");\n                var new_history_name = this.modal\n                    .$(\"input[name=history_name]\")\n                    .val();\n                var that = this;\n                if (new_history_name !== \"\") {\n                    $.post(Galaxy.root + \"api/histories\", {\n                        name: new_history_name\n                    })\n                        .done(function(new_history) {\n                            that.options.last_used_history_id = new_history.id;\n                            that.processImportToHistory(\n                                new_history.id,\n                                new_history.name\n                            );\n                        })\n                        .fail(function(xhr, status, error) {\n                            mod_toastr.error(\"An error occurred.\");\n                        })\n                        .always(function() {\n                            that.modal.enableButton(\"Import\");\n                        });\n                } else {\n                    var history_id = $(\n                        \"select[name=dataset_import_bulk] option:selected\"\n                    ).val();\n                    this.options.last_used_history_id = history_id;\n                    var history_name = $(\n                        \"select[name=dataset_import_bulk] option:selected\"\n                    ).text();\n                    this.processImportToHistory(history_id, history_name);\n                    this.modal.enableButton(\"Import\");\n                }\n            },\n\n            processImportToHistory: function(history_id, history_name) {\n                var dataset_ids = [];\n                var folder_ids = [];\n                this.findCheckedRows().each(function() {\n                    var row_id = $(this)\n                        .closest(\"tr\")\n                        .data(\"id\");\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                });\n                // prepare the dataset objects to be imported\n                var datasets_to_import = [];\n                for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                    var library_dataset_id = dataset_ids[i];\n                    var historyItem = new mod_library_model.HistoryItem();\n                    historyItem.url =\n                        historyItem.urlRoot + history_id + \"/contents\";\n                    historyItem.content = library_dataset_id;\n                    historyItem.source = \"library\";\n                    datasets_to_import.push(historyItem);\n                }\n\n                // prepare the folder objects to be imported\n                var folders_to_import = [];\n                for (var i = folder_ids.length - 1; i >= 0; i--) {\n                    var library_folder_id = folder_ids[i];\n                    var historyItem = new mod_library_model.HistoryItem();\n                    historyItem.url =\n                        historyItem.urlRoot + history_id + \"/contents\";\n                    historyItem.content = library_folder_id;\n                    historyItem.source = \"library_folder\";\n                    datasets_to_import.push(historyItem);\n                }\n\n                this.initChainCallControl({\n                    length: datasets_to_import.length,\n                    action: \"to_history\",\n                    history_name: history_name\n                });\n                // set the used history as current so user will see the last one\n                // that he imported into in the history panel on the 'analysis' page\n                jQuery.getJSON(\n                    Galaxy.root + \"history/set_as_current?id=\" + history_id\n                );\n                this.chainCallImportingIntoHistory(\n                    datasets_to_import,\n                    history_name\n                );\n            },\n\n            /**\n   * Update the progress bar in modal window.\n   */\n            updateProgress: function() {\n                this.progress += this.progressStep;\n                $(\".progress-bar-import\").width(\n                    Math.round(this.progress) + \"%\"\n                );\n                var txt_representation =\n                    Math.round(this.progress) + \"% Complete\";\n                $(\".completion_span\").text(txt_representation);\n            },\n\n            /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n            download: function(folder_id, format) {\n                var dataset_ids = [];\n                var folder_ids = [];\n                this.findCheckedRows().each(function() {\n                    var row_id = $(this)\n                        .closest(\"tr\")\n                        .data(\"id\");\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                });\n                var url =\n                    Galaxy.root + \"api/libraries/datasets/download/\" + format;\n                var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n                this.processDownload(url, data, \"get\");\n            },\n\n            /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n            processDownload: function(url, data, method) {\n                if (url && data) {\n                    // data can be string of parameters or array/object\n                    data = typeof data === \"string\" ? data : $.param(data);\n                    // split params into form inputs\n                    var inputs = \"\";\n                    $.each(data.split(\"&\"), function() {\n                        var pair = this.split(\"=\");\n                        inputs +=\n                            '<input type=\"hidden\" name=\"' +\n                            pair[0] +\n                            '\" value=\"' +\n                            pair[1] +\n                            '\" />';\n                    });\n                    // send request\n                    $(\n                        '<form action=\"' +\n                            url +\n                            '\" method=\"' +\n                            (method || \"post\") +\n                            '\">' +\n                            inputs +\n                            \"</form>\"\n                    )\n                        .appendTo(\"body\")\n                        .submit()\n                        .remove();\n                    mod_toastr.info(\"Your download will begin soon.\");\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            },\n\n            addFilesFromHistoryModal: function() {\n                this.histories = new mod_library_model.GalaxyHistories();\n                var self = this;\n                this.histories\n                    .fetch()\n                    .done(function() {\n                        self.modal = Galaxy.modal;\n                        var template_modal = self.templateAddFilesFromHistory();\n                        self.modal.show({\n                            closing_events: true,\n                            title: \"Adding datasets from your history\",\n                            body: template_modal({\n                                histories: self.histories.models\n                            }),\n                            buttons: {\n                                Add: function() {\n                                    self.addAllDatasetsFromHistory();\n                                },\n                                Close: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            },\n                            closing_callback: function() {\n                                Galaxy.libraries.library_router.navigate(\n                                    \"folders/\" + self.id,\n                                    { trigger: true }\n                                );\n                            }\n                        });\n                        self.fetchAndDisplayHistoryContents(\n                            self.histories.models[0].id\n                        );\n                        $(\"#dataset_add_bulk\").change(function(event) {\n                            self.fetchAndDisplayHistoryContents(\n                                event.target.value\n                            );\n                        });\n                    })\n                    .fail(function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    });\n            },\n\n            /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n            importFilesFromPathModal: function() {\n                var that = this;\n                this.modal = Galaxy.modal;\n                var template_modal = this.templateImportPathModal();\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Please enter paths to import\",\n                    body: template_modal({}),\n                    buttons: {\n                        Import: function() {\n                            that.importFromPathsClicked(that);\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        //  TODO: should not trigger routes outside of the router\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + that.id,\n                            { trigger: true }\n                        );\n                    }\n                });\n                this.renderSelectBoxes();\n            },\n\n            /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n            fetchExtAndGenomes: function() {\n                var that = this;\n                mod_utils.get({\n                    url: Galaxy.root + \"api/datatypes?extension_only=False\",\n                    success: function(datatypes) {\n                        that.list_extensions = [];\n                        for (var key in datatypes) {\n                            that.list_extensions.push({\n                                id: datatypes[key].extension,\n                                text: datatypes[key].extension,\n                                description: datatypes[key].description,\n                                description_url: datatypes[key].description_url\n                            });\n                        }\n                        that.list_extensions.sort(function(a, b) {\n                            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                        });\n                        that.list_extensions.unshift(that.auto);\n                    },\n                    cache: true\n                });\n                mod_utils.get({\n                    url: Galaxy.root + \"api/genomes\",\n                    success: function(genomes) {\n                        that.list_genomes = [];\n                        for (var key in genomes) {\n                            that.list_genomes.push({\n                                id: genomes[key][1],\n                                text: genomes[key][0]\n                            });\n                        }\n                        that.list_genomes.sort(function(a, b) {\n                            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                        });\n                    },\n                    cache: true\n                });\n            },\n\n            renderSelectBoxes: function() {\n                // This won't work properly unlesss we already have the data fetched.\n                // See this.fetchExtAndGenomes()\n                // TODO switch to common resources:\n                // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n                var that = this;\n                this.select_genome = new mod_select.View({\n                    css: \"library-genome-select\",\n                    data: that.list_genomes,\n                    container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n                    value: \"?\"\n                });\n                this.select_extension = new mod_select.View({\n                    css: \"library-extension-select\",\n                    data: that.list_extensions,\n                    container: Galaxy.modal.$el.find(\n                        \"#library_extension_select\"\n                    ),\n                    value: \"auto\"\n                });\n            },\n\n            /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n            importFilesFromGalaxyFolderModal: function(options) {\n                var that = this;\n                var template_modal = this.templateBrowserModal();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Please select folders or files\",\n                    body: template_modal({}),\n                    buttons: {\n                        Import: function() {\n                            that.importFromJstreePath(that, options);\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        //  TODO: should not trigger routes outside of the router\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + that.id,\n                            { trigger: true }\n                        );\n                    }\n                });\n\n                $(\".libimport-select-all\").bind(\"click\", function() {\n                    $(\"#jstree_browser\").jstree(\"check_all\");\n                });\n                $(\".libimport-select-none\").bind(\"click\", function() {\n                    $(\"#jstree_browser\").jstree(\"uncheck_all\");\n                });\n\n                this.renderSelectBoxes();\n                options.disabled_jstree_element = \"folders\";\n                this.renderJstree(options);\n\n                $(\"input[type=radio]\").change(function(event) {\n                    if (event.target.value === \"jstree-disable-folders\") {\n                        options.disabled_jstree_element = \"folders\";\n                        that.renderJstree(options);\n                        $(\".jstree-folders-message\").hide();\n                        $(\".jstree-preserve-structure\").hide();\n                        $(\".jstree-files-message\").show();\n                    } else if (event.target.value === \"jstree-disable-files\") {\n                        $(\".jstree-files-message\").hide();\n                        $(\".jstree-folders-message\").show();\n                        $(\".jstree-preserve-structure\").show();\n                        options.disabled_jstree_element = \"files\";\n                        that.renderJstree(options);\n                    }\n                });\n            },\n\n            /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n            renderJstree: function(options) {\n                var that = this;\n                this.options = _.extend(this.options, options);\n                var target = options.source || \"userdir\";\n                var disabled_jstree_element = this.options\n                    .disabled_jstree_element;\n                this.jstree = new mod_library_model.Jstree();\n                this.jstree.url =\n                    this.jstree.urlRoot +\n                    \"?target=\" +\n                    target +\n                    \"&format=jstree\" +\n                    \"&disable=\" +\n                    disabled_jstree_element;\n                this.jstree.fetch({\n                    success: function(model, response) {\n                        // This is to prevent double jquery load. I think. Carl is magician.\n                        define(\"jquery\", function() {\n                            return jQuery;\n                        });\n                        // Now we need jstree, time to lazy load it.\n                        require([\"libs/jquery/jstree\"], function(jstree) {\n                            $(\"#jstree_browser\").jstree(\"destroy\");\n                            $(\"#jstree_browser\").jstree({\n                                core: {\n                                    data: model\n                                },\n                                plugins: [\"types\", \"checkbox\"],\n                                types: {\n                                    folder: {\n                                        icon: \"jstree-folder\"\n                                    },\n                                    file: {\n                                        icon: \"jstree-file\"\n                                    }\n                                },\n                                checkbox: {\n                                    three_state: false\n                                }\n                            });\n                        });\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            if (response.responseJSON.err_code === 404001) {\n                                mod_toastr.warning(\n                                    response.responseJSON.err_msg\n                                );\n                            } else {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            }\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    }\n                });\n            },\n\n            /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n            importFromPathsClicked: function() {\n                var preserve_dirs = this.modal.$el\n                    .find(\".preserve-checkbox\")\n                    .is(\":checked\");\n                var link_data = this.modal.$el\n                    .find(\".link-checkbox\")\n                    .is(\":checked\");\n                var space_to_tab = this.modal.$el\n                    .find(\".spacetab-checkbox\")\n                    .is(\":checked\");\n                var to_posix_lines = this.modal.$el\n                    .find(\".posix-checkbox\")\n                    .is(\":checked\");\n                var tag_using_filenames = this.modal.$el\n                    .find(\".tag-files\")\n                    .is(\":checked\");\n                var file_type = this.select_extension.value();\n                var dbkey = this.select_genome.value();\n                var paths = $(\"textarea#import_paths\").val();\n                var valid_paths = [];\n                if (!paths) {\n                    mod_toastr.info(\n                        \"Please enter a path relative to Galaxy root.\"\n                    );\n                } else {\n                    this.modal.disableButton(\"Import\");\n                    paths = paths.split(\"\\n\");\n                    for (var i = paths.length - 1; i >= 0; i--) {\n                        var trimmed = paths[i].trim();\n                        if (trimmed.length !== 0) {\n                            valid_paths.push(trimmed);\n                        }\n                    }\n                    this.initChainCallControl({\n                        length: valid_paths.length,\n                        action: \"adding_datasets\"\n                    });\n                    this.chainCallImportingFolders({\n                        paths: valid_paths,\n                        preserve_dirs: preserve_dirs,\n                        link_data: link_data,\n                        space_to_tab: space_to_tab,\n                        to_posix_lines: to_posix_lines,\n                        source: \"admin_path\",\n                        file_type: file_type,\n                        tag_using_filenames: tag_using_filenames,\n                        dbkey: dbkey\n                    });\n                }\n            },\n\n            /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n            initChainCallControl: function(options) {\n                var template;\n                switch (options.action) {\n                    case \"adding_datasets\":\n                        template = this.templateAddingDatasetsProgressBar();\n                        this.modal.$el.find(\".modal-body\").html(\n                            template({\n                                folder_name: this.options.folder_name\n                            })\n                        );\n                        break;\n                    case \"deleting_datasets\":\n                        template = this.templateDeletingItemsProgressBar();\n                        this.modal.$el.find(\".modal-body\").html(template());\n                        break;\n                    case \"to_history\":\n                        template = this.templateImportIntoHistoryProgressBar();\n                        this.modal.$el\n                            .find(\".modal-body\")\n                            .html(\n                                template({ history_name: options.history_name })\n                            );\n                        break;\n                    default:\n                        Galaxy.emit.error(\n                            \"Wrong action specified.\",\n                            \"datalibs\"\n                        );\n                        break;\n                }\n\n                // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n                // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n                this.progress = 0;\n                this.progressStep = 100 / options.length;\n                this.options.chain_call_control.total_number = options.length;\n                this.options.chain_call_control.failed_number = 0;\n            },\n\n            /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n            importFromJstreePath: function(that, options) {\n                var all_nodes = $(\"#jstree_browser\")\n                    .jstree()\n                    .get_selected(true);\n                // remove the disabled elements that could have been trigerred with the 'select all'\n                var selected_nodes = _.filter(all_nodes, function(node) {\n                    return node.state.disabled == false;\n                });\n                var preserve_dirs = this.modal.$el\n                    .find(\".preserve-checkbox\")\n                    .is(\":checked\");\n                var link_data = this.modal.$el\n                    .find(\".link-checkbox\")\n                    .is(\":checked\");\n                var space_to_tab = this.modal.$el\n                    .find(\".spacetab-checkbox\")\n                    .is(\":checked\");\n                var to_posix_lines = this.modal.$el\n                    .find(\".posix-checkbox\")\n                    .is(\":checked\");\n                var file_type = this.select_extension.value();\n                var dbkey = this.select_genome.value();\n                var tag_using_filenames = this.modal.$el\n                    .find(\".tag-files\")\n                    .is(\":checked\");\n                var selection_type = selected_nodes[0].type;\n                var paths = [];\n                if (selected_nodes.length < 1) {\n                    mod_toastr.info(\"Please select some items first.\");\n                } else {\n                    this.modal.disableButton(\"Import\");\n                    for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                        if (selected_nodes[i].li_attr.full_path !== undefined) {\n                            paths.push(selected_nodes[i].li_attr.full_path);\n                        }\n                    }\n                    this.initChainCallControl({\n                        length: paths.length,\n                        action: \"adding_datasets\"\n                    });\n                    if (selection_type === \"folder\") {\n                        var full_source = options.source + \"_folder\";\n                        this.chainCallImportingFolders({\n                            paths: paths,\n                            preserve_dirs: preserve_dirs,\n                            link_data: link_data,\n                            space_to_tab: space_to_tab,\n                            to_posix_lines: to_posix_lines,\n                            source: full_source,\n                            file_type: file_type,\n                            dbkey: dbkey,\n                            tag_using_filenames: tag_using_filenames\n                        });\n                    } else if (selection_type === \"file\") {\n                        var full_source = options.source + \"_file\";\n                        this.chainCallImportingUserdirFiles({\n                            paths: paths,\n                            file_type: file_type,\n                            dbkey: dbkey,\n                            link_data: link_data,\n                            space_to_tab: space_to_tab,\n                            to_posix_lines: to_posix_lines,\n                            source: full_source,\n                            tag_using_filenames: tag_using_filenames\n                        });\n                    }\n                }\n            },\n\n            fetchAndDisplayHistoryContents: function(history_id) {\n                var history_contents = new mod_library_model.HistoryContents({\n                    id: history_id\n                });\n                var self = this;\n                history_contents.fetch({\n                    success: function(history_contents) {\n                        var history_contents_template = self.templateHistoryContents();\n                        self.histories\n                            .get(history_id)\n                            .set({ contents: history_contents });\n                        self.modal.$el.find(\"#selected_history_content\").html(\n                            history_contents_template({\n                                history_contents: history_contents.models.reverse()\n                            })\n                        );\n                        self.modal.$el\n                            .find(\".history-import-select-all\")\n                            .bind(\"click\", function() {\n                                $(\n                                    \"#selected_history_content [type=checkbox]\"\n                                ).prop(\"checked\", true);\n                            });\n                        self.modal.$el\n                            .find(\".history-import-unselect-all\")\n                            .bind(\"click\", function() {\n                                $(\n                                    \"#selected_history_content [type=checkbox]\"\n                                ).prop(\"checked\", false);\n                            });\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    }\n                });\n            },\n\n            /**\n   * Import all selected datasets from history into the current folder.\n   */\n            addAllDatasetsFromHistory: function() {\n                var checked_hdas = this.modal.$el\n                    .find(\"#selected_history_content\")\n                    .find(\":checked\");\n                var history_item_ids = []; // can be hda or hdca\n                var history_item_types = [];\n                var items_to_add = [];\n                if (checked_hdas.length < 1) {\n                    mod_toastr.info(\"You must select some datasets first.\");\n                } else {\n                    this.modal.disableButton(\"Add\");\n                    checked_hdas.each(function() {\n                        var hid = $(this)\n                            .closest(\"li\")\n                            .data(\"id\");\n                        if (hid) {\n                            var item_type = $(this)\n                                .closest(\"li\")\n                                .data(\"name\");\n                            history_item_ids.push(hid);\n                            history_item_types.push(item_type);\n                        }\n                    });\n                    for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                        var history_item_id = history_item_ids[i];\n                        var folder_item = new mod_library_model.Item();\n                        folder_item.url =\n                            Galaxy.root +\n                            \"api/folders/\" +\n                            this.options.id +\n                            \"/contents\";\n                        if (history_item_types[i] === \"collection\") {\n                            folder_item.set({ from_hdca_id: history_item_id });\n                        } else {\n                            folder_item.set({ from_hda_id: history_item_id });\n                        }\n                        items_to_add.push(folder_item);\n                    }\n                    this.initChainCallControl({\n                        length: items_to_add.length,\n                        action: \"adding_datasets\"\n                    });\n                    this.chainCallAddingHdas(items_to_add);\n                }\n            },\n\n            /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n            chainCallImportingIntoHistory: function(\n                history_item_set,\n                history_name\n            ) {\n                var self = this;\n                var popped_item = history_item_set.pop();\n                if (typeof popped_item == \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected datasets imported into history. Click this to start analyzing it.\",\n                            \"\",\n                            {\n                                onclick: function() {\n                                    window.location = Galaxy.root;\n                                }\n                            }\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number ===\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.error(\n                            \"There was an error and no datasets were imported into history.\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number <\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.warning(\n                            \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                            \"\",\n                            {\n                                onclick: function() {\n                                    window.location = Galaxy.root;\n                                }\n                            }\n                        );\n                    }\n                    Galaxy.modal.hide();\n                    return true;\n                }\n                var promise = $.when(\n                    popped_item.save({\n                        content: popped_item.content,\n                        source: popped_item.source\n                    })\n                );\n\n                promise\n                    .done(function() {\n                        self.updateProgress();\n                        self.chainCallImportingIntoHistory(\n                            history_item_set,\n                            history_name\n                        );\n                    })\n                    .fail(function() {\n                        self.options.chain_call_control.failed_number += 1;\n                        self.updateProgress();\n                        self.chainCallImportingIntoHistory(\n                            history_item_set,\n                            history_name\n                        );\n                    });\n            },\n\n            /**\n   * Take the array of paths and create a request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to user folder on Galaxy\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n            chainCallImportingUserdirFiles: function(options) {\n                var that = this;\n                var popped_item = options.paths.pop();\n                if (typeof popped_item === \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected files imported into the current folder\"\n                        );\n                        Galaxy.modal.hide();\n                    } else {\n                        mod_toastr.error(\"An error occured.\");\n                    }\n                    return true;\n                }\n                var promise = $.when(\n                    $.post(\n                        Galaxy.root +\n                            \"api/libraries/datasets?encoded_folder_id=\" +\n                            that.id +\n                            \"&source=\" +\n                            options.source +\n                            \"&path=\" +\n                            popped_item +\n                            \"&file_type=\" +\n                            options.file_type +\n                            \"&link_data=\" +\n                            options.link_data +\n                            \"&space_to_tab=\" +\n                            options.space_to_tab +\n                            \"&to_posix_lines=\" +\n                            options.to_posix_lines +\n                            \"&dbkey=\" +\n                            options.dbkey +\n                            \"&tag_using_filenames=\" +\n                            options.tag_using_filenames\n                    )\n                );\n                promise\n                    .done(function(response) {\n                        that.updateProgress();\n                        that.chainCallImportingUserdirFiles(options);\n                    })\n                    .fail(function() {\n                        that.options.chain_call_control.failed_number += 1;\n                        that.updateProgress();\n                        that.chainCallImportingUserdirFiles(options);\n                    });\n            },\n\n            /**\n   * Take the array of paths and create a request for each of them\n   * calling them in series. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n   * @param  {boolean} link_data              copy files to Galaxy or link instead\n   * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n   * @param  {boolean} space_to_tab           convert spaces to tabs\n   * @param  {str} source                     string representing what type of folder\n   *                                          is the source of import\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n            chainCallImportingFolders: function(options) {\n                // TODO need to check which paths to call\n                var that = this;\n                var popped_item = options.paths.pop();\n                if (typeof popped_item == \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected folders and their contents imported into the current folder.\"\n                        );\n                        Galaxy.modal.hide();\n                    } else {\n                        // TODO better error report\n                        mod_toastr.error(\"An error occured.\");\n                    }\n                    return true;\n                }\n                var promise = $.when(\n                    $.post(\n                        Galaxy.root +\n                            \"api/libraries/datasets?encoded_folder_id=\" +\n                            that.id +\n                            \"&source=\" +\n                            options.source +\n                            \"&path=\" +\n                            popped_item +\n                            \"&preserve_dirs=\" +\n                            options.preserve_dirs +\n                            \"&link_data=\" +\n                            options.link_data +\n                            \"&to_posix_lines=\" +\n                            options.to_posix_lines +\n                            \"&space_to_tab=\" +\n                            options.space_to_tab +\n                            \"&file_type=\" +\n                            options.file_type +\n                            \"&dbkey=\" +\n                            options.dbkey +\n                            \"&tag_using_filenames=\" +\n                            options.tag_using_filenames\n                    )\n                );\n                promise\n                    .done(function(response) {\n                        that.updateProgress();\n                        that.chainCallImportingFolders(options);\n                    })\n                    .fail(function() {\n                        that.options.chain_call_control.failed_number += 1;\n                        that.updateProgress();\n                        that.chainCallImportingFolders(options);\n                    });\n            },\n\n            /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n            chainCallAddingHdas: function(hdas_set) {\n                var self = this;\n                this.added_hdas = new mod_library_model.Folder();\n                var popped_item = hdas_set.pop();\n                if (typeof popped_item == \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected datasets from history added to the folder\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number ===\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.error(\n                            \"There was an error and no datasets were added to the folder.\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number <\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.warning(\n                            \"Some of the datasets could not be added to the folder\"\n                        );\n                    }\n                    Galaxy.modal.hide();\n                    return this.added_hdas;\n                }\n                var promise = $.when(\n                    popped_item.save({\n                        from_hda_id: popped_item.get(\"from_hda_id\")\n                    })\n                );\n\n                promise\n                    .done(function(model) {\n                        Galaxy.libraries.folderListView.collection.add(model);\n                        self.updateProgress();\n                        self.chainCallAddingHdas(hdas_set);\n                    })\n                    .fail(function() {\n                        self.options.chain_call_control.failed_number += 1;\n                        self.updateProgress();\n                        self.chainCallAddingHdas(hdas_set);\n                    });\n            },\n\n            /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n            chainCallDeletingItems: function(items_to_delete) {\n                var self = this;\n                this.deleted_items = new mod_library_model.Folder();\n                var item_to_delete = items_to_delete.pop();\n                if (typeof item_to_delete === \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\"Selected items were deleted.\");\n                    } else if (\n                        this.options.chain_call_control.failed_number ===\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.error(\n                            \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number <\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.warning(\n                            \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                        );\n                    }\n                    Galaxy.modal.hide();\n                    return this.deleted_items;\n                }\n                item_to_delete\n                    .destroy()\n                    .done(function(item) {\n                        Galaxy.libraries.folderListView.collection.remove(\n                            item_to_delete.id\n                        );\n                        self.updateProgress();\n                        // add the deleted item to collection, triggers rendering\n                        if (\n                            Galaxy.libraries.folderListView.options\n                                .include_deleted\n                        ) {\n                            var updated_item = null;\n                            if (\n                                item.type === \"folder\" ||\n                                item.model_class === \"LibraryFolder\"\n                            ) {\n                                updated_item = new mod_library_model.FolderAsModel(\n                                    item\n                                );\n                            } else if (\n                                item.type === \"file\" ||\n                                item.model_class === \"LibraryDataset\"\n                            ) {\n                                updated_item = new mod_library_model.Item(item);\n                            } else {\n                                Galaxy.emit.error(\n                                    \"Unknown library item type found.\",\n                                    \"datalibs\"\n                                );\n                                Galaxy.emit.error(\n                                    item.type || item.model_class,\n                                    \"datalibs\"\n                                );\n                            }\n                            Galaxy.libraries.folderListView.collection.add(\n                                updated_item\n                            );\n                        }\n                        self.chainCallDeletingItems(items_to_delete);\n                    })\n                    .fail(function() {\n                        self.options.chain_call_control.failed_number += 1;\n                        self.updateProgress();\n                        self.chainCallDeletingItems(items_to_delete);\n                    });\n            },\n\n            /**\n   * Handles the click on 'show deleted' checkbox\n   */\n            checkIncludeDeleted: function(event) {\n                if (event.target.checked) {\n                    Galaxy.libraries.folderListView.fetchFolder({\n                        include_deleted: true\n                    });\n                } else {\n                    Galaxy.libraries.folderListView.fetchFolder({\n                        include_deleted: false\n                    });\n                }\n            },\n\n            /**\n   * Delete the selected items. Atomic. One by one.\n   */\n            deleteSelectedItems: function() {\n                var dataset_ids = [];\n                var folder_ids = [];\n                var $checkedValues = this.findCheckedRows();\n                if ($checkedValues.length === 0) {\n                    mod_toastr.info(\n                        \"You must select at least one item for deletion.\"\n                    );\n                } else {\n                    var template = this.templateDeletingItemsProgressBar();\n                    this.modal = Galaxy.modal;\n                    this.modal.show({\n                        closing_events: true,\n                        title: \"Deleting selected items\",\n                        body: template({}),\n                        buttons: {\n                            Close: function() {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                    // init the control counters\n                    this.options.chain_call_control.total_number = 0;\n                    this.options.chain_call_control.failed_number = 0;\n                    $checkedValues.each(function() {\n                        var row_id = $(this)\n                            .closest(\"tr\")\n                            .data(\"id\");\n                        if (row_id !== undefined) {\n                            if (row_id.substring(0, 1) == \"F\") {\n                                folder_ids.push(row_id);\n                            } else {\n                                dataset_ids.push(row_id);\n                            }\n                        }\n                    });\n                    // init the progress bar\n                    var items_total = dataset_ids.length + folder_ids.length;\n                    this.progressStep = 100 / items_total;\n                    this.progress = 0;\n\n                    // prepare the dataset items to be added\n                    var items_to_delete = [];\n                    for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                        var dataset = new mod_library_model.Item({\n                            id: dataset_ids[i]\n                        });\n                        items_to_delete.push(dataset);\n                    }\n                    for (var i = folder_ids.length - 1; i >= 0; i--) {\n                        var folder = new mod_library_model.FolderAsModel({\n                            id: folder_ids[i]\n                        });\n                        items_to_delete.push(folder);\n                    }\n\n                    this.options.chain_call_control.total_number = items_total;\n                    // call the recursive function to call ajax one after each other (request FIFO queue)\n                    this.chainCallDeletingItems(items_to_delete);\n                }\n            },\n\n            showLocInfo: function() {\n                var library = null;\n                var that = this;\n                if (Galaxy.libraries.libraryListView !== null) {\n                    library = Galaxy.libraries.libraryListView.collection.get(\n                        this.options.parent_library_id\n                    );\n                    this.showLocInfoModal(library);\n                } else {\n                    library = new mod_library_model.Library({\n                        id: this.options.parent_library_id\n                    });\n                    library.fetch({\n                        success: function() {\n                            that.showLocInfoModal(library);\n                        },\n                        error: function(model, response) {\n                            if (typeof response.responseJSON !== \"undefined\") {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            } else {\n                                mod_toastr.error(\"An error occurred.\");\n                            }\n                        }\n                    });\n                }\n            },\n\n            showLocInfoModal: function(library) {\n                var that = this;\n                var template = this.templateLocInfoInModal();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Location Details\",\n                    body: template({ library: library, options: that.options }),\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            },\n\n            showImportModal: function(options) {\n                switch (options.source) {\n                    case \"history\":\n                        this.addFilesFromHistoryModal();\n                        break;\n                    case \"importdir\":\n                        this.importFilesFromGalaxyFolderModal({\n                            source: \"importdir\"\n                        });\n                        break;\n                    case \"path\":\n                        this.importFilesFromPathModal();\n                        break;\n                    case \"userdir\":\n                        this.importFilesFromGalaxyFolderModal({\n                            source: \"userdir\"\n                        });\n                        break;\n                    default:\n                        Galaxy.libraries.library_router.back();\n                        mod_toastr.error(\"Invalid import source.\");\n                        break;\n                }\n            },\n\n            /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n            showPageSizePrompt: function() {\n                var folder_page_size = prompt(\n                    \"How many items per page do you want to see?\",\n                    Galaxy.libraries.preferences.get(\"folder_page_size\")\n                );\n                if (\n                    folder_page_size != null &&\n                    folder_page_size == parseInt(folder_page_size)\n                ) {\n                    Galaxy.libraries.preferences.set({\n                        folder_page_size: parseInt(folder_page_size)\n                    });\n                    Galaxy.libraries.folderListView.render({\n                        id: this.options.id,\n                        show_page: 1\n                    });\n                }\n            },\n\n            findCheckedRows: function() {\n                return $(\"#folder_list_body\").find(\":checked\");\n            },\n\n            templateToolBar: function() {\n                return _.template(\n                    [\n                        // container start\n                        '<div class=\"library_style_container\">',\n                        // toolbar start\n                        '<div id=\"library_toolbar\">',\n                        '<form class=\"form-inline\" role=\"form\">',\n                        \"<span><strong>DATA LIBRARIES</strong></span>\",\n                        // paginator will append here\n                        '<span class=\"library-paginator folder-paginator\"></span>',\n                        '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                        \"<label>\",\n                        '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n                        \"</label>\",\n                        \"</div>\",\n                        '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n                        '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n                        \"</button>\",\n                        \"<% if(mutiple_add_dataset_options) { %>\",\n                        '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n                        '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                        '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n                        \"</button>\",\n                        '<ul class=\"dropdown-menu\" role=\"menu\">',\n                        '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                        \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                        \"<% } %>\",\n                        \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                        '<li class=\"divider\"></li>',\n                        '<li class=\"dropdown-header\">Admins only</li>',\n                        \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                        \"<% } %>\",\n                        \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                        \"<% } %>\",\n                        \"<% } %>\",\n                        \"</ul>\",\n                        \"</div>\",\n                        \"<% } else { %>\",\n                        '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                        '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                        \"</a>\",\n                        \"<% } %>\",\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n                        '<span class=\"fa fa-book\"></span>',\n                        \"&nbsp;to History\",\n                        \"</button>\",\n                        '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n                        '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                        '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n                        \"</button>\",\n                        '<ul class=\"dropdown-menu\" role=\"menu\">',\n                        '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                        '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                        '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                        \"</ul>\",\n                        \"</div>\",\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n                        '<span class=\"fa fa-times\"></span> Delete</button>',\n                        '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n                        '<span class=\"fa fa-info-circle\"></span>',\n                        \"&nbsp;Details\",\n                        \"</button>\",\n                        '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                        '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                        '<button class=\"primary-button\" type=\"button\">',\n                        '<span class=\"fa fa-question-circle\"></span>',\n                        \"&nbsp;Help\",\n                        \"</button>\",\n                        \"</a>\",\n                        \"</span>\",\n                        \"</div>\",\n                        \"</form>\",\n                        // toolbar end\n                        '<div id=\"folder_items_element\">',\n                        \"</div>\",\n                        // paginator will append here\n                        '<div class=\"folder-paginator paginator-bottom\"></div>',\n                        // container end\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateLocInfoInModal: function() {\n                return _.template(\n                    [\n                        \"<div>\",\n                        '<table class=\"grid table table-condensed\">',\n                        \"<thead>\",\n                        '<th style=\"width: 25%;\">library</th>',\n                        \"<th></th>\",\n                        \"</thead>\",\n                        \"<tbody>\",\n                        \"<tr>\",\n                        \"<td>name</td>\",\n                        '<td><%- library.get(\"name\") %></td>',\n                        \"</tr>\",\n                        '<% if(library.get(\"description\") !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>description</td>\",\n                        '<td><%- library.get(\"description\") %></td>',\n                        \"</tr>\",\n                        \"<% } %>\",\n                        '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>synopsis</td>\",\n                        '<td><%- library.get(\"synopsis\") %></td>',\n                        \"</tr>\",\n                        \"<% } %>\",\n                        '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>created</td>\",\n                        '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                        \"</tr>\",\n                        \"<% } %>\",\n                        \"<tr>\",\n                        \"<td>id</td>\",\n                        '<td><%- library.get(\"id\") %></td>',\n                        \"</tr>\",\n                        \"</tbody>\",\n                        \"</table>\",\n                        '<table class=\"grid table table-condensed\">',\n                        \"<thead>\",\n                        '<th style=\"width: 25%;\">folder</th>',\n                        \"<th></th>\",\n                        \"</thead>\",\n                        \"<tbody>\",\n                        \"<tr>\",\n                        \"<td>name</td>\",\n                        \"<td><%- options.folder_name %></td>\",\n                        \"</tr>\",\n                        '<% if(options.folder_description !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>description</td>\",\n                        \"<td><%- options.folder_description %></td>\",\n                        \"</tr>\",\n                        \"<% } %>\",\n                        \"<tr>\",\n                        \"<td>id</td>\",\n                        \"<td><%- options.id %></td>\",\n                        \"</tr>\",\n                        \"</tbody>\",\n                        \"</table>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateNewFolderInModal: function() {\n                return _.template(\n                    [\n                        '<div id=\"new_folder_modal\">',\n                        \"<form>\",\n                        '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                        '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                        \"</form>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateBulkImportInModal: function() {\n                return _.template(\n                    [\n                        \"<div>\",\n                        '<div class=\"library-modal-item\">',\n                        \"Select history: \",\n                        '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                        \"<% _.each(histories, function(history) { %>\",\n                        '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                        \"<% }); %>\",\n                        \"</select>\",\n                        \"</div>\",\n                        '<div class=\"library-modal-item\">',\n                        \"or create new: \",\n                        '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n                        \"</input>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateImportIntoHistoryProgressBar: function() {\n                return _.template(\n                    [\n                        '<div class=\"import_text\">',\n                        \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                        \"</div>\",\n                        '<div class=\"progress\">',\n                        '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                        '<span class=\"completion_span\">0% Complete</span>',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateAddingDatasetsProgressBar: function() {\n                return _.template(\n                    [\n                        '<div class=\"import_text\">',\n                        \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                        \"</div>\",\n                        '<div class=\"progress\">',\n                        '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                        '<span class=\"completion_span\">0% Complete</span>',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateDeletingItemsProgressBar: function() {\n                return _.template(\n                    [\n                        '<div class=\"import_text\">',\n                        \"</div>\",\n                        '<div class=\"progress\">',\n                        '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                        '<span class=\"completion_span\">0% Complete</span>',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateBrowserModal: function() {\n                return _.template(\n                    [\n                        '<div id=\"file_browser_modal\">',\n                        '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                        '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                        '<div style=\"margin-bottom:1em;\">',\n                        '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                        '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                        \"</label>\",\n                        '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                        '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                        \"</label>\",\n                        \"</div>\",\n                        '<div style=\"margin-bottom:1em;\">',\n                        '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                        '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                        \"Preserve directory structure\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                        \"Link files instead of copying\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                        \"Convert line endings to POSIX\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                        \"Convert spaces to tabs\",\n                        \"</label>\",\n                        \"</div>\",\n                        '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                        \"Select all\",\n                        \"</button>\",\n                        '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                        \"Unselect all\",\n                        \"</button>\",\n                        \"<hr />\",\n                        // append jstree object here\n                        '<div id=\"jstree_browser\">',\n                        \"</div>\",\n                        \"<hr />\",\n                        \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                        \"<div>\",\n                        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                        \"</div>\",\n                        \"<br>\",\n                        \"<div>\",\n                        '<label class=\"checkbox-inline tag-files\">',\n                        \"Tag datasets based on file names.\",\n                        '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                        \"</label>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateImportPathModal: function() {\n                return _.template(\n                    [\n                        '<div id=\"file_browser_modal\">',\n                        '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                        '<div style=\"margin-bottom: 0.5em;\">',\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                        \"Preserve directory structure\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                        \"Link files instead of copying\",\n                        \"</label>\",\n                        \"<br>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                        \"Convert line endings to POSIX\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                        \"Convert spaces to tabs\",\n                        \"</label>\",\n                        \"</div>\",\n                        '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                        \"<hr />\",\n                        \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                        \"<div>\",\n                        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                        \"</div>\",\n                        \"<div>\",\n                        '<label class=\"checkbox-inline tag-files\">',\n                        \"Tag datasets based on file names.\",\n                        '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                        \"</label>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateAddFilesFromHistory: function() {\n                return _.template(\n                    [\n                        '<div id=\"add_files_modal\">',\n                        \"<div>\",\n                        \"1.&nbsp;Select history:&nbsp;\",\n                        '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                        \"<% _.each(histories, function(history) { %>\", //history select box\n                        '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                        \"<% }); %>\",\n                        \"</select>\",\n                        \"</div>\",\n                        \"<br/>\",\n                        '<div id=\"selected_history_content\">',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateHistoryContents: function() {\n                return _.template(\n                    [\n                        \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                        \"<div>\",\n                        '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                        \"Select all\",\n                        \"</button>\",\n                        '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                        \"Unselect all\",\n                        \"</button>\",\n                        \"</div>\",\n                        \"<br>\",\n                        \"<ul>\",\n                        \"<% _.each(history_contents, function(history_item) { %>\",\n                        '<% if (history_item.get(\"deleted\") != true ) { %>',\n                        '<% var item_name = history_item.get(\"name\") %>',\n                        '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                        '<% var collection_type = history_item.get(\"collection_type\") %>',\n                        '<% if (collection_type === \"list\") { %>',\n                        '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                        \"<label>\",\n                        '<label title=\"<%= _.escape(item_name) %>\">',\n                        '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                        '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                        \"</label>\",\n                        \"</li>\",\n                        \"<% } else { %>\",\n                        '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                        '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                        '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                        '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                        \"</span>\",\n                        \"</li>\",\n                        \"<% } %>\",\n                        '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                        '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                        '<label title=\"<%= _.escape(item_name) %>\">',\n                        '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                        '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                        \"</label>\",\n                        \"</li>\",\n                        \"<% } %>\",\n                        \"<% } %>\",\n                        \"<% }); %>\",\n                        \"</ul>\"\n                    ].join(\"\")\n                );\n            },\n\n            templatePaginator: function() {\n                return _.template(\n                    [\n                        '<ul class=\"pagination pagination-sm\">',\n                        \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                        \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                        '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                        \"<% } else { %>\",\n                        '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                        '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                        \"<% } %>\",\n                        \"<% } else { %>\", // we are on the first page\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                        \"<% } %>\",\n                        '<li class=\"active\">',\n                        '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                        \"</li>\",\n                        \"<% if ( ( show_page ) < page_count ) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                        '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                        \"<% } else { %>\",\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                        \"<% } %>\",\n                        \"</ul>\",\n                        \"<span>\",\n                        \"&nbsp;showing&nbsp;\",\n                        '<a data-toggle=\"tooltip\" data-placement=\"top\" title=\"Click to change the number of items on page\" class=\"page_size_prompt\">',\n                        \"<%- items_shown %>\",\n                        \"</a>\",\n                        \"&nbsp;of <%- total_items_count %> items\",\n                        \"</span>\"\n                    ].join(\"\")\n                );\n            }\n        });\n\n        return {\n            FolderToolbarView: FolderToolbarView\n        };\n    }\n);\n"]}