{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["FolderToolbarView","Backbone","View","extend","el","events","click #toolbtn_create_folder","click #toolbtn_bulk_import","click #include_deleted_datasets_chk","click #toolbtn_bulk_delete","click .toolbtn-show-locinfo","click .page_size_prompt","defaults","can_add_library_item","contains_file_or_folder","chain_call_control","total_number","disabled_jstree_element","modal","jstree","histories","failed_number","list_extensions","auto","id","description","list_genomes","initialize","options","this","_","render","toolbar_template","templateToolBar","is_anonym","mutiple_add_dataset_options","Galaxy","user","template_defaults","is_admin","isAdmin","isAnonymous","config","$el","renderPaginator","html","paginator_template","templatePaginator","$","find","total_items_count","items_shown","show_page","get","page_count","configureElements","hide","show","tooltip","createFolderFromModal","event","self","template","templateNewFolderInModal","closing_events","title","body","buttons","Create","Close","create_new_folder_event","serialize_new_folder","folderDetails","current_folder_id","folder","validate_new_folder","url_items","history","fragment","split","FolderAsModel","indexOf","length","url","urlRoot","save","success","set","type","collection","add","error","model","response","_toastr2","default","responseJSON","err_msg","name","val","modalBulkImport","findCheckedRows","$checkedValues","that","_libraryModel2","GalaxyHistories","fetch","done","models","Import","importAllIntoHistory","fail","new_history_name","post","root","last_used_history_id","new_history","always","processImportToHistory","enableButton","status","history_name","dataset_ids","history_id","folder_ids","datasets_to_import","historyItem","push","row_id","i","library_folder_id","source","HistoryItem","content","library_dataset_id","initChainCallControl","jQuery","chainCallImportingIntoHistory","updateProgress","progress","progressStep","txt_representation","getJSON","width","closest","round","data","Math","download","folder_id","format","each","substring","inputs","processDownload","method","param","template_modal","pair","Add","remove","addFilesFromHistoryModal","addAllDatasetsFromHistory","importFilesFromPathModal","templateImportPathModal","libraries","library_router","navigate","trigger","fetchAndDisplayHistoryContents","target","value","fetchExtAndGenomes","text","datatypes","closing_callback","cache","_utils2","key","extension","renderSelectBoxes","description_url","sort","select_genome","a","b","select_extension","css","container","genomes","_uiSelect2","importFilesFromGalaxyFolderModal","renderJstree","importFromJstreePath","bind","change","core","plugins","types","icon","file","Jstree","importFromPathsClicked","preserve_dirs","space_to_tab","to_posix_lines","dbkey","disableButton","paths","err_code","trimmed","file_type","tag_using_filenames","link_data","is","templateDeletingItemsProgressBar","trim","valid_paths","chainCallImportingFolders","folder_name","all_nodes","selected_nodes","templateAddingDatasetsProgressBar","selection_type","templateImportIntoHistoryProgressBar","full_path","emit","full_source","chainCallImportingUserdirFiles","history_contents","history_contents_template","undefined","li_attr","action","checked_hdas","history_item_ids","history_item_types","items_to_add","item_type","folder_item","from_hdca_id","HistoryContents","templateHistoryContents","chainCallAddingHdas","reverse","prop","onclick","window","location","promise","info","hid","popped_item","history_item_id","Item","from_hda_id","history_item_set","pop","warning","added_hdas","when","deleted_items","item_to_delete","items_to_delete","updated_item","folderListView","include_deleted","Folder","chainCallDeletingItems","library","hdas_set","showImportModal","templateLocInfoInModal","destroy","item","model_class","preventDefault","folder_page_size","prompt","checkIncludeDeleted","checked","fetchFolder","deleteSelectedItems","templateBulkImportInModal","templateBrowserModal","items_total","dataset","showLocInfo","libraryListView","parent_library_id","showLocInfoModal","Library","back","showPageSizePrompt","e","preferences","parseInt","join","templateAddFilesFromHistory"],"mappings":"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CACA,UACA,uCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACF2O,KAAK,MAIf1O,yBAA0B,WACtB,OAAOjC,EAAEgC,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACF2O,KAAK,MAIfd,0BAA2B,WACvB,OAAO7P,EAAEgC,UAED,QACA,mCACA,mBACA,iHACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,4GACA,WACA,SACA,UACF2O,KAAK,MAIfzE,qCAAsC,WAClC,OAAOlM,EAAEgC,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACF2O,KAAK,MAIf3E,kCAAmC,WAC/B,OAAOhM,EAAEgC,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACF2O,KAAK,MAIflF,iCAAkC,WAC9B,OAAOzL,EAAEgC,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACF2O,KAAK,MAIfb,qBAAsB,WAClB,OAAO9P,EAAEgC,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACF2O,KAAK,MAIfrI,wBAAyB,WACrB,OAAOtI,EAAEgC,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACF2O,KAAK,MAIfC,4BAA6B,WACzB,OAAO5Q,EAAEgC,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,sCACA,SACA,UACF2O,KAAK,MAIfvD,wBAAyB,WACrB,OAAOpN,EAAEgC,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACF2O,KAAK,MAIf1P,kBAAmB,WACf,OAAOjB,EAAEgC,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,iLACA,UACA,SACA,kCACA,WACF2O,KAAK,mBAMfzS,kBAAmBA","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["import mod_masthead from \"layout/masthead\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nimport \"libs/jquery/jstree\";\nvar FolderToolbarView = Backbone.View.extend({\n    el: \"#center\",\n\n    events: {\n        \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n        \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n        \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n        \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n        \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n        \"click .page_size_prompt\": \"showPageSizePrompt\"\n    },\n\n    defaults: {\n        can_add_library_item: false,\n        contains_file_or_folder: false,\n        chain_call_control: {\n            total_number: 0,\n            failed_number: 0\n        },\n        disabled_jstree_element: \"folders\"\n    },\n\n    modal: null,\n\n    // directory browsing object\n    jstree: null,\n\n    // user's histories\n    histories: null,\n\n    // genome select\n    select_genome: null,\n\n    // extension select\n    select_extension: null,\n\n    // extension types\n    list_extensions: [],\n\n    // datatype placeholder for extension auto-detection\n    auto: {\n        id: \"auto\",\n        text: \"Auto-detect\",\n        description:\n            \"This system will try to detect the file type automatically.\" +\n            \" If your file is not detected properly as one of the known formats,\" +\n            \" it most likely means that it has some format problems (e.g., different\" +\n            \" number of columns on different rows). You can still coerce the system\" +\n            \" to set your data to the format you think it should be.\" +\n            \" You can also upload compressed files, which will automatically be decompressed.\"\n    },\n\n    // genomes\n    list_genomes: [],\n\n    initialize: function(options) {\n        this.options = _.defaults(options || {}, this.defaults);\n        this.fetchExtAndGenomes();\n        this.render();\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var toolbar_template = this.templateToolBar();\n        var template_defaults = {\n            id: this.options.id,\n            is_admin: false,\n            is_anonym: true,\n            mutiple_add_dataset_options: false\n        };\n        if (Galaxy.user) {\n            template_defaults.is_admin = Galaxy.user.isAdmin();\n            template_defaults.is_anonym = Galaxy.user.isAnonymous();\n            if (\n                Galaxy.config.user_library_import_dir !== null ||\n                Galaxy.config.allow_library_path_paste !== false ||\n                Galaxy.config.library_import_dir !== null\n            ) {\n                template_defaults.mutiple_add_dataset_options = true;\n            }\n        }\n        this.$el.html(toolbar_template(template_defaults));\n    },\n\n    /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n    renderPaginator: function(options) {\n        this.options = _.extend(this.options, options);\n        var paginator_template = this.templatePaginator();\n        $(\"body\")\n            .find(\".folder-paginator\")\n            .html(\n                paginator_template({\n                    id: this.options.id,\n                    show_page: parseInt(this.options.show_page),\n                    page_count: parseInt(this.options.page_count),\n                    total_items_count: this.options.total_items_count,\n                    items_shown: this.options.items_shown,\n                    folder_page_size: Galaxy.libraries.preferences.get(\n                        \"folder_page_size\"\n                    )\n                })\n            );\n    },\n\n    configureElements: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.can_add_library_item === true) {\n            $(\".add-library-items\").show();\n        } else {\n            $(\".add-library-items\").hide();\n        }\n        if (this.options.contains_file_or_folder === true) {\n            if (Galaxy.user) {\n                if (!Galaxy.user.isAnonymous()) {\n                    $(\".logged-dataset-manipulation\").show();\n                    $(\".dataset-manipulation\").show();\n                } else {\n                    $(\".dataset-manipulation\").show();\n                    $(\".logged-dataset-manipulation\").hide();\n                }\n            } else {\n                $(\".logged-dataset-manipulation\").hide();\n                $(\".dataset-manipulation\").hide();\n            }\n        } else {\n            $(\".logged-dataset-manipulation\").hide();\n            $(\".dataset-manipulation\").hide();\n        }\n        this.$el.find(\"[data-toggle]\").tooltip();\n    },\n\n    // shows modal for creating folder\n    createFolderFromModal: function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // create modal\n        var self = this;\n        var template = this.templateNewFolderInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Create New Folder\",\n            body: template(),\n            buttons: {\n                Create: function() {\n                    self.create_new_folder_event();\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    // create the new folder from modal\n    create_new_folder_event: function() {\n        var folderDetails = this.serialize_new_folder();\n        if (this.validate_new_folder(folderDetails)) {\n            var folder = new mod_library_model.FolderAsModel();\n            var url_items = Backbone.history.fragment.split(\"/\");\n            var current_folder_id;\n            if (url_items.indexOf(\"page\") > -1) {\n                current_folder_id = url_items[url_items.length - 3];\n            } else {\n                current_folder_id = url_items[url_items.length - 1];\n            }\n            folder.url = folder.urlRoot + current_folder_id;\n\n            folder.save(folderDetails, {\n                success: function(folder) {\n                    Galaxy.modal.hide();\n                    mod_toastr.success(\"Folder created.\");\n                    folder.set({ type: \"folder\" });\n                    Galaxy.libraries.folderListView.collection.add(folder);\n                },\n                error: function(model, response) {\n                    Galaxy.modal.hide();\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        } else {\n            mod_toastr.error(\"Folder's name is missing.\");\n        }\n        return false;\n    },\n\n    // serialize data from the modal\n    serialize_new_folder: function() {\n        return {\n            name: $(\"input[name='Name']\").val(),\n            description: $(\"input[name='Description']\").val()\n        };\n    },\n\n    // validate new folder info\n    validate_new_folder: function(folderDetails) {\n        return folderDetails.name !== \"\";\n    },\n\n    // show bulk import modal\n    modalBulkImport: function() {\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            var that = this;\n            this.histories = new mod_library_model.GalaxyHistories();\n            this.histories\n                .fetch()\n                .done(() => {\n                    var template = that.templateBulkImportInModal();\n                    that.modal = Galaxy.modal;\n                    that.modal.show({\n                        closing_events: true,\n                        title: \"Import into History\",\n                        body: template({\n                            histories: that.histories.models\n                        }),\n                        buttons: {\n                            Import: function() {\n                                that.importAllIntoHistory();\n                            },\n                            Close: function() {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                })\n                .fail((model, response) => {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                });\n        }\n    },\n\n    /**\n   * Import all selected datasets into history.\n   */\n    importAllIntoHistory: function() {\n        this.modal.disableButton(\"Import\");\n        var new_history_name = this.modal.$(\"input[name=history_name]\").val();\n        var that = this;\n        if (new_history_name !== \"\") {\n            $.post(`${Galaxy.root}api/histories`, {\n                name: new_history_name\n            })\n                .done(new_history => {\n                    that.options.last_used_history_id = new_history.id;\n                    that.processImportToHistory(\n                        new_history.id,\n                        new_history.name\n                    );\n                })\n                .fail((xhr, status, error) => {\n                    mod_toastr.error(\"An error occurred.\");\n                })\n                .always(() => {\n                    that.modal.enableButton(\"Import\");\n                });\n        } else {\n            var history_id = $(\n                \"select[name=dataset_import_bulk] option:selected\"\n            ).val();\n            this.options.last_used_history_id = history_id;\n            var history_name = $(\n                \"select[name=dataset_import_bulk] option:selected\"\n            ).text();\n            this.processImportToHistory(history_id, history_name);\n            this.modal.enableButton(\"Import\");\n        }\n    },\n\n    processImportToHistory: function(history_id, history_name) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        // prepare the dataset objects to be imported\n        var datasets_to_import = [];\n        for (var i = dataset_ids.length - 1; i >= 0; i--) {\n            var library_dataset_id = dataset_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = `${historyItem.urlRoot + history_id}/contents`;\n            historyItem.content = library_dataset_id;\n            historyItem.source = \"library\";\n            datasets_to_import.push(historyItem);\n        }\n\n        // prepare the folder objects to be imported\n        var folders_to_import = [];\n        for (var i = folder_ids.length - 1; i >= 0; i--) {\n            var library_folder_id = folder_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = `${historyItem.urlRoot + history_id}/contents`;\n            historyItem.content = library_folder_id;\n            historyItem.source = \"library_folder\";\n            datasets_to_import.push(historyItem);\n        }\n\n        this.initChainCallControl({\n            length: datasets_to_import.length,\n            action: \"to_history\",\n            history_name: history_name\n        });\n        // set the used history as current so user will see the last one\n        // that he imported into in the history panel on the 'analysis' page\n        jQuery.getJSON(`${Galaxy.root}history/set_as_current?id=${history_id}`);\n        this.chainCallImportingIntoHistory(datasets_to_import, history_name);\n    },\n\n    /**\n   * Update the progress bar in modal window.\n   */\n    updateProgress: function() {\n        this.progress += this.progressStep;\n        $(\".progress-bar-import\").width(`${Math.round(this.progress)}%`);\n        var txt_representation = `${Math.round(this.progress)}% Complete`;\n        $(\".completion_span\").text(txt_representation);\n    },\n\n    /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n    download: function(folder_id, format) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        var url = `${Galaxy.root}api/libraries/datasets/download/${format}`;\n        var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n        this.processDownload(url, data, \"get\");\n    },\n\n    /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n    processDownload: function(url, data, method) {\n        if (url && data) {\n            // data can be string of parameters or array/object\n            data = typeof data === \"string\" ? data : $.param(data);\n            // split params into form inputs\n            var inputs = \"\";\n            $.each(data.split(\"&\"), function() {\n                var pair = this.split(\"=\");\n                inputs += `<input type=\"hidden\" name=\"${pair[0]}\" value=\"${pair[1]}\" />`;\n            });\n            // send request\n            $(\n                `<form action=\"${url}\" method=\"${method ||\n                    \"post\"}\">${inputs}</form>`\n            )\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            mod_toastr.info(\"Your download will begin soon.\");\n        } else {\n            mod_toastr.error(\"An error occurred.\");\n        }\n    },\n\n    addFilesFromHistoryModal: function() {\n        this.histories = new mod_library_model.GalaxyHistories();\n        var self = this;\n        this.histories\n            .fetch()\n            .done(() => {\n                self.modal = Galaxy.modal;\n                var template_modal = self.templateAddFilesFromHistory();\n                self.modal.show({\n                    closing_events: true,\n                    title: \"Adding datasets from your history\",\n                    body: template_modal({\n                        histories: self.histories.models\n                    }),\n                    buttons: {\n                        Add: function() {\n                            self.addAllDatasetsFromHistory();\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        Galaxy.libraries.library_router.navigate(\n                            `folders/${self.id}`,\n                            { trigger: true }\n                        );\n                    }\n                });\n                self.fetchAndDisplayHistoryContents(\n                    self.histories.models[0].id\n                );\n                $(\"#dataset_add_bulk\").change(event => {\n                    self.fetchAndDisplayHistoryContents(event.target.value);\n                });\n            })\n            .fail((model, response) => {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            });\n    },\n\n    /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n    importFilesFromPathModal: function() {\n        var that = this;\n        this.modal = Galaxy.modal;\n        var template_modal = this.templateImportPathModal();\n        this.modal.show({\n            closing_events: true,\n            title: \"Please enter paths to import\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromPathsClicked(that);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(`folders/${that.id}`, {\n                    trigger: true\n                });\n            }\n        });\n        this.renderSelectBoxes();\n    },\n\n    /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n    fetchExtAndGenomes: function() {\n        var that = this;\n        mod_utils.get({\n            url: `${Galaxy.root}api/datatypes?extension_only=False`,\n            success: function(datatypes) {\n                that.list_extensions = [];\n                for (var key in datatypes) {\n                    that.list_extensions.push({\n                        id: datatypes[key].extension,\n                        text: datatypes[key].extension,\n                        description: datatypes[key].description,\n                        description_url: datatypes[key].description_url\n                    });\n                }\n                that.list_extensions.sort(\n                    (a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0)\n                );\n                that.list_extensions.unshift(that.auto);\n            },\n            cache: true\n        });\n        mod_utils.get({\n            url: `${Galaxy.root}api/genomes`,\n            success: function(genomes) {\n                that.list_genomes = [];\n                for (var key in genomes) {\n                    that.list_genomes.push({\n                        id: genomes[key][1],\n                        text: genomes[key][0]\n                    });\n                }\n                that.list_genomes.sort(\n                    (a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0)\n                );\n            },\n            cache: true\n        });\n    },\n\n    renderSelectBoxes: function() {\n        // This won't work properly unlesss we already have the data fetched.\n        // See this.fetchExtAndGenomes()\n        // TODO switch to common resources:\n        // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n        var that = this;\n        this.select_genome = new mod_select.View({\n            css: \"library-genome-select\",\n            data: that.list_genomes,\n            container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n            value: \"?\"\n        });\n        this.select_extension = new mod_select.View({\n            css: \"library-extension-select\",\n            data: that.list_extensions,\n            container: Galaxy.modal.$el.find(\"#library_extension_select\"),\n            value: \"auto\"\n        });\n    },\n\n    /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n    importFilesFromGalaxyFolderModal: function(options) {\n        var that = this;\n        var template_modal = this.templateBrowserModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Please select folders or files\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromJstreePath(that, options);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(`folders/${that.id}`, {\n                    trigger: true\n                });\n            }\n        });\n\n        $(\".libimport-select-all\").bind(\"click\", () => {\n            $(\"#jstree_browser\").jstree(\"check_all\");\n        });\n        $(\".libimport-select-none\").bind(\"click\", () => {\n            $(\"#jstree_browser\").jstree(\"uncheck_all\");\n        });\n\n        this.renderSelectBoxes();\n        options.disabled_jstree_element = \"folders\";\n        this.renderJstree(options);\n\n        $(\"input[type=radio]\").change(event => {\n            if (event.target.value === \"jstree-disable-folders\") {\n                options.disabled_jstree_element = \"folders\";\n                that.renderJstree(options);\n                $(\".jstree-folders-message\").hide();\n                $(\".jstree-preserve-structure\").hide();\n                $(\".jstree-files-message\").show();\n            } else if (event.target.value === \"jstree-disable-files\") {\n                $(\".jstree-files-message\").hide();\n                $(\".jstree-folders-message\").show();\n                $(\".jstree-preserve-structure\").show();\n                options.disabled_jstree_element = \"files\";\n                that.renderJstree(options);\n            }\n        });\n    },\n\n    /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n    renderJstree: function(options) {\n        var that = this;\n        this.options = _.extend(this.options, options);\n        var target = options.source || \"userdir\";\n        var disabled_jstree_element = this.options.disabled_jstree_element;\n        this.jstree = new mod_library_model.Jstree();\n        this.jstree.url = `${this.jstree\n            .urlRoot}?target=${target}&format=jstree&disable=${disabled_jstree_element}`;\n        this.jstree.fetch({\n            success: function(model, response) {\n                $(\"#jstree_browser\").jstree(\"destroy\");\n                $(\"#jstree_browser\").jstree({\n                    core: {\n                        data: model\n                    },\n                    plugins: [\"types\", \"checkbox\"],\n                    types: {\n                        folder: {\n                            icon: \"jstree-folder\"\n                        },\n                        file: {\n                            icon: \"jstree-file\"\n                        }\n                    },\n                    checkbox: {\n                        three_state: false\n                    }\n                });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    if (response.responseJSON.err_code === 404001) {\n                        mod_toastr.warning(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    }\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n    importFromPathsClicked: function() {\n        var preserve_dirs = this.modal.$el\n            .find(\".preserve-checkbox\")\n            .is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el\n            .find(\".spacetab-checkbox\")\n            .is(\":checked\");\n        var to_posix_lines = this.modal.$el\n            .find(\".posix-checkbox\")\n            .is(\":checked\");\n        var tag_using_filenames = this.modal.$el\n            .find(\".tag-files\")\n            .is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var paths = $(\"textarea#import_paths\").val();\n        var valid_paths = [];\n        if (!paths) {\n            mod_toastr.info(\"Please enter a path relative to Galaxy root.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            paths = paths.split(\"\\n\");\n            for (var i = paths.length - 1; i >= 0; i--) {\n                var trimmed = paths[i].trim();\n                if (trimmed.length !== 0) {\n                    valid_paths.push(trimmed);\n                }\n            }\n            this.initChainCallControl({\n                length: valid_paths.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallImportingFolders({\n                paths: valid_paths,\n                preserve_dirs: preserve_dirs,\n                link_data: link_data,\n                space_to_tab: space_to_tab,\n                to_posix_lines: to_posix_lines,\n                source: \"admin_path\",\n                file_type: file_type,\n                tag_using_filenames: tag_using_filenames,\n                dbkey: dbkey\n            });\n        }\n    },\n\n    /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n    initChainCallControl: function(options) {\n        var template;\n        switch (options.action) {\n            case \"adding_datasets\":\n                template = this.templateAddingDatasetsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(\n                    template({\n                        folder_name: this.options.folder_name\n                    })\n                );\n                break;\n            case \"deleting_datasets\":\n                template = this.templateDeletingItemsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template());\n                break;\n            case \"to_history\":\n                template = this.templateImportIntoHistoryProgressBar();\n                this.modal.$el\n                    .find(\".modal-body\")\n                    .html(template({ history_name: options.history_name }));\n                break;\n            default:\n                Galaxy.emit.error(\"Wrong action specified.\", \"datalibs\");\n                break;\n        }\n\n        // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n        // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n        this.progress = 0;\n        this.progressStep = 100 / options.length;\n        this.options.chain_call_control.total_number = options.length;\n        this.options.chain_call_control.failed_number = 0;\n    },\n\n    /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n    importFromJstreePath: function(that, options) {\n        var all_nodes = $(\"#jstree_browser\")\n            .jstree()\n            .get_selected(true);\n        // remove the disabled elements that could have been trigerred with the 'select all'\n        var selected_nodes = _.filter(\n            all_nodes,\n            node => node.state.disabled == false\n        );\n        var preserve_dirs = this.modal.$el\n            .find(\".preserve-checkbox\")\n            .is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el\n            .find(\".spacetab-checkbox\")\n            .is(\":checked\");\n        var to_posix_lines = this.modal.$el\n            .find(\".posix-checkbox\")\n            .is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var tag_using_filenames = this.modal.$el\n            .find(\".tag-files\")\n            .is(\":checked\");\n        var selection_type = selected_nodes[0].type;\n        var paths = [];\n        if (selected_nodes.length < 1) {\n            mod_toastr.info(\"Please select some items first.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                if (selected_nodes[i].li_attr.full_path !== undefined) {\n                    paths.push(selected_nodes[i].li_attr.full_path);\n                }\n            }\n            this.initChainCallControl({\n                length: paths.length,\n                action: \"adding_datasets\"\n            });\n            if (selection_type === \"folder\") {\n                var full_source = `${options.source}_folder`;\n                this.chainCallImportingFolders({\n                    paths: paths,\n                    preserve_dirs: preserve_dirs,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    tag_using_filenames: tag_using_filenames\n                });\n            } else if (selection_type === \"file\") {\n                var full_source = `${options.source}_file`;\n                this.chainCallImportingUserdirFiles({\n                    paths: paths,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    tag_using_filenames: tag_using_filenames\n                });\n            }\n        }\n    },\n\n    fetchAndDisplayHistoryContents: function(history_id) {\n        var history_contents = new mod_library_model.HistoryContents({\n            id: history_id\n        });\n        var self = this;\n        history_contents.fetch({\n            success: function(history_contents) {\n                var history_contents_template = self.templateHistoryContents();\n                self.histories\n                    .get(history_id)\n                    .set({ contents: history_contents });\n                self.modal.$el.find(\"#selected_history_content\").html(\n                    history_contents_template({\n                        history_contents: history_contents.models.reverse()\n                    })\n                );\n                self.modal.$el\n                    .find(\".history-import-select-all\")\n                    .bind(\"click\", () => {\n                        $(\"#selected_history_content [type=checkbox]\").prop(\n                            \"checked\",\n                            true\n                        );\n                    });\n                self.modal.$el\n                    .find(\".history-import-unselect-all\")\n                    .bind(\"click\", () => {\n                        $(\"#selected_history_content [type=checkbox]\").prop(\n                            \"checked\",\n                            false\n                        );\n                    });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n   * Import all selected datasets from history into the current folder.\n   */\n    addAllDatasetsFromHistory: function() {\n        var checked_hdas = this.modal.$el\n            .find(\"#selected_history_content\")\n            .find(\":checked\");\n        var history_item_ids = []; // can be hda or hdca\n        var history_item_types = [];\n        var items_to_add = [];\n        if (checked_hdas.length < 1) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            this.modal.disableButton(\"Add\");\n            checked_hdas.each(function() {\n                var hid = $(this)\n                    .closest(\"li\")\n                    .data(\"id\");\n                if (hid) {\n                    var item_type = $(this)\n                        .closest(\"li\")\n                        .data(\"name\");\n                    history_item_ids.push(hid);\n                    history_item_types.push(item_type);\n                }\n            });\n            for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                var history_item_id = history_item_ids[i];\n                var folder_item = new mod_library_model.Item();\n                folder_item.url = `${Galaxy.root}api/folders/${this.options\n                    .id}/contents`;\n                if (history_item_types[i] === \"collection\") {\n                    folder_item.set({ from_hdca_id: history_item_id });\n                } else {\n                    folder_item.set({ from_hda_id: history_item_id });\n                }\n                items_to_add.push(folder_item);\n            }\n            this.initChainCallControl({\n                length: items_to_add.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallAddingHdas(items_to_add);\n        }\n    },\n\n    /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n    chainCallImportingIntoHistory: function(history_item_set, history_name) {\n        var self = this;\n        var popped_item = history_item_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected datasets imported into history. Click this to start analyzing it.\",\n                    \"\",\n                    {\n                        onclick: function() {\n                            window.location = Galaxy.root;\n                        }\n                    }\n                );\n            } else if (\n                this.options.chain_call_control.failed_number ===\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.error(\n                    \"There was an error and no datasets were imported into history.\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number <\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.warning(\n                    \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                    \"\",\n                    {\n                        onclick: function() {\n                            window.location = Galaxy.root;\n                        }\n                    }\n                );\n            }\n            Galaxy.modal.hide();\n            return true;\n        }\n        var promise = $.when(\n            popped_item.save({\n                content: popped_item.content,\n                source: popped_item.source\n            })\n        );\n\n        promise\n            .done(() => {\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(\n                    history_item_set,\n                    history_name\n                );\n            })\n            .fail(() => {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(\n                    history_item_set,\n                    history_name\n                );\n            });\n    },\n\n    /**\n   * Take the array of paths and create a request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to user folder on Galaxy\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n    chainCallImportingUserdirFiles: function(options) {\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected files imported into the current folder\"\n                );\n                Galaxy.modal.hide();\n            } else {\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                `${Galaxy.root}api/libraries/datasets?encoded_folder_id=${that.id}&source=${options.source}&path=${popped_item}&file_type=${options.file_type}&link_data=${options.link_data}&space_to_tab=${options.space_to_tab}&to_posix_lines=${options.to_posix_lines}&dbkey=${options.dbkey}&tag_using_filenames=${options.tag_using_filenames}`\n            )\n        );\n        promise\n            .done(response => {\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            })\n            .fail(() => {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            });\n    },\n\n    /**\n   * Take the array of paths and create a request for each of them\n   * calling them in series. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n   * @param  {boolean} link_data              copy files to Galaxy or link instead\n   * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n   * @param  {boolean} space_to_tab           convert spaces to tabs\n   * @param  {str} source                     string representing what type of folder\n   *                                          is the source of import\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n    chainCallImportingFolders: function(options) {\n        // TODO need to check which paths to call\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected folders and their contents imported into the current folder.\"\n                );\n                Galaxy.modal.hide();\n            } else {\n                // TODO better error report\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                `${Galaxy.root}api/libraries/datasets?encoded_folder_id=${that.id}&source=${options.source}&path=${popped_item}&preserve_dirs=${options.preserve_dirs}&link_data=${options.link_data}&to_posix_lines=${options.to_posix_lines}&space_to_tab=${options.space_to_tab}&file_type=${options.file_type}&dbkey=${options.dbkey}&tag_using_filenames=${options.tag_using_filenames}`\n            )\n        );\n        promise\n            .done(response => {\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            })\n            .fail(() => {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            });\n    },\n\n    /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n    chainCallAddingHdas: function(hdas_set) {\n        var self = this;\n        this.added_hdas = new mod_library_model.Folder();\n        var popped_item = hdas_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected datasets from history added to the folder\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number ===\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.error(\n                    \"There was an error and no datasets were added to the folder.\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number <\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.warning(\n                    \"Some of the datasets could not be added to the folder\"\n                );\n            }\n            Galaxy.modal.hide();\n            return this.added_hdas;\n        }\n        var promise = $.when(\n            popped_item.save({\n                from_hda_id: popped_item.get(\"from_hda_id\")\n            })\n        );\n\n        promise\n            .done(model => {\n                Galaxy.libraries.folderListView.collection.add(model);\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            })\n            .fail(() => {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            });\n    },\n\n    /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n    chainCallDeletingItems: function(items_to_delete) {\n        var self = this;\n        this.deleted_items = new mod_library_model.Folder();\n        var item_to_delete = items_to_delete.pop();\n        if (typeof item_to_delete === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected items were deleted.\");\n            } else if (\n                this.options.chain_call_control.failed_number ===\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.error(\n                    \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number <\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.warning(\n                    \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                );\n            }\n            Galaxy.modal.hide();\n            return this.deleted_items;\n        }\n        item_to_delete\n            .destroy()\n            .done(item => {\n                Galaxy.libraries.folderListView.collection.remove(\n                    item_to_delete.id\n                );\n                self.updateProgress();\n                // add the deleted item to collection, triggers rendering\n                if (Galaxy.libraries.folderListView.options.include_deleted) {\n                    var updated_item = null;\n                    if (\n                        item.type === \"folder\" ||\n                        item.model_class === \"LibraryFolder\"\n                    ) {\n                        updated_item = new mod_library_model.FolderAsModel(\n                            item\n                        );\n                    } else if (\n                        item.type === \"file\" ||\n                        item.model_class === \"LibraryDataset\"\n                    ) {\n                        updated_item = new mod_library_model.Item(item);\n                    } else {\n                        Galaxy.emit.error(\n                            \"Unknown library item type found.\",\n                            \"datalibs\"\n                        );\n                        Galaxy.emit.error(\n                            item.type || item.model_class,\n                            \"datalibs\"\n                        );\n                    }\n                    Galaxy.libraries.folderListView.collection.add(\n                        updated_item\n                    );\n                }\n                self.chainCallDeletingItems(items_to_delete);\n            })\n            .fail(() => {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallDeletingItems(items_to_delete);\n            });\n    },\n\n    /**\n   * Handles the click on 'show deleted' checkbox\n   */\n    checkIncludeDeleted: function(event) {\n        if (event.target.checked) {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: true\n            });\n        } else {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: false\n            });\n        }\n    },\n\n    /**\n   * Delete the selected items. Atomic. One by one.\n   */\n    deleteSelectedItems: function() {\n        var dataset_ids = [];\n        var folder_ids = [];\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select at least one item for deletion.\");\n        } else {\n            var template = this.templateDeletingItemsProgressBar();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: \"Deleting selected items\",\n                body: template({}),\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n            // init the control counters\n            this.options.chain_call_control.total_number = 0;\n            this.options.chain_call_control.failed_number = 0;\n            $checkedValues.each(function() {\n                var row_id = $(this)\n                    .closest(\"tr\")\n                    .data(\"id\");\n                if (row_id !== undefined) {\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                }\n            });\n            // init the progress bar\n            var items_total = dataset_ids.length + folder_ids.length;\n            this.progressStep = 100 / items_total;\n            this.progress = 0;\n\n            // prepare the dataset items to be added\n            var items_to_delete = [];\n            for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                var dataset = new mod_library_model.Item({\n                    id: dataset_ids[i]\n                });\n                items_to_delete.push(dataset);\n            }\n            for (var i = folder_ids.length - 1; i >= 0; i--) {\n                var folder = new mod_library_model.FolderAsModel({\n                    id: folder_ids[i]\n                });\n                items_to_delete.push(folder);\n            }\n\n            this.options.chain_call_control.total_number = items_total;\n            // call the recursive function to call ajax one after each other (request FIFO queue)\n            this.chainCallDeletingItems(items_to_delete);\n        }\n    },\n\n    showLocInfo: function() {\n        var library = null;\n        var that = this;\n        if (Galaxy.libraries.libraryListView !== null) {\n            library = Galaxy.libraries.libraryListView.collection.get(\n                this.options.parent_library_id\n            );\n            this.showLocInfoModal(library);\n        } else {\n            library = new mod_library_model.Library({\n                id: this.options.parent_library_id\n            });\n            library.fetch({\n                success: function() {\n                    that.showLocInfoModal(library);\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        }\n    },\n\n    showLocInfoModal: function(library) {\n        var that = this;\n        var template = this.templateLocInfoInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Location Details\",\n            body: template({ library: library, options: that.options }),\n            buttons: {\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    showImportModal: function(options) {\n        switch (options.source) {\n            case \"history\":\n                this.addFilesFromHistoryModal();\n                break;\n            case \"importdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"importdir\"\n                });\n                break;\n            case \"path\":\n                this.importFilesFromPathModal();\n                break;\n            case \"userdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"userdir\"\n                });\n                break;\n            default:\n                Galaxy.libraries.library_router.back();\n                mod_toastr.error(\"Invalid import source.\");\n                break;\n        }\n    },\n\n    /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n    showPageSizePrompt: function(e) {\n        e.preventDefault();\n        var folder_page_size = prompt(\n            \"How many items per page do you want to see?\",\n            Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        if (\n            folder_page_size != null &&\n            folder_page_size == parseInt(folder_page_size)\n        ) {\n            Galaxy.libraries.preferences.set({\n                folder_page_size: parseInt(folder_page_size)\n            });\n            Galaxy.libraries.folderListView.render({\n                id: this.options.id,\n                show_page: 1\n            });\n        }\n    },\n\n    findCheckedRows: function() {\n        return $(\"#folder_list_body\").find(\":checked\");\n    },\n\n    templateToolBar: function() {\n        return _.template(\n            [\n                // container start\n                '<div class=\"library_style_container\">',\n                // toolbar start\n                '<div id=\"library_toolbar\">',\n                '<form class=\"form-inline\" role=\"form\">',\n                \"<span><strong>DATA LIBRARIES</strong></span>\",\n                // paginator will append here\n                '<span class=\"library-paginator folder-paginator\"></span>',\n                '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                \"<label>\",\n                '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n                \"</label>\",\n                \"</div>\",\n                '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n                \"</button>\",\n                \"<% if(mutiple_add_dataset_options) { %>\",\n                '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n                '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li class=\"divider\"></li>',\n                '<li class=\"dropdown-header\">Admins only</li>',\n                \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                \"<% } %>\",\n                \"<% } %>\",\n                \"</ul>\",\n                \"</div>\",\n                \"<% } else { %>\",\n                '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                \"</a>\",\n                \"<% } %>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n                '<span class=\"fa fa-book\"></span>',\n                \"&nbsp;to History\",\n                \"</button>\",\n                '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n                '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                \"</ul>\",\n                \"</div>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n                '<span class=\"fa fa-times\"></span> Delete</button>',\n                '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n                '<span class=\"fa fa-info-circle\"></span>',\n                \"&nbsp;Details\",\n                \"</button>\",\n                '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                '<button class=\"primary-button\" type=\"button\">',\n                '<span class=\"fa fa-question-circle\"></span>',\n                \"&nbsp;Help\",\n                \"</button>\",\n                \"</a>\",\n                \"</span>\",\n                \"</div>\",\n                \"</form>\",\n                // toolbar end\n                '<div id=\"folder_items_element\">',\n                \"</div>\",\n                // paginator will append here\n                '<div class=\"folder-paginator paginator-bottom\"></div>',\n                // container end\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateLocInfoInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">library</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                '<td><%- library.get(\"name\") %></td>',\n                \"</tr>\",\n                '<% if(library.get(\"description\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                '<td><%- library.get(\"description\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>synopsis</td>\",\n                '<td><%- library.get(\"synopsis\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>created</td>\",\n                '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                '<td><%- library.get(\"id\") %></td>',\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">folder</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                \"<td><%- options.folder_name %></td>\",\n                \"</tr>\",\n                '<% if(options.folder_description !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                \"<td><%- options.folder_description %></td>\",\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                \"<td><%- options.id %></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateNewFolderInModal: function() {\n        return _.template(\n            [\n                '<div id=\"new_folder_modal\">',\n                \"<form>\",\n                '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                \"</form>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBulkImportInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<div class=\"library-modal-item\">',\n                \"Select history: \",\n                '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                \"<% _.each(histories, function(history) { %>\",\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                '<div class=\"library-modal-item\">',\n                \"or create new: \",\n                '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n                \"</input>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportIntoHistoryProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddingDatasetsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateDeletingItemsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBrowserModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom:1em;\">',\n                '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                \"</label>\",\n                '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                \"</label>\",\n                \"</div>\",\n                '<div style=\"margin-bottom:1em;\">',\n                '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"<hr />\",\n                // append jstree object here\n                '<div id=\"jstree_browser\">',\n                \"</div>\",\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<br>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportPathModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom: 0.5em;\">',\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                \"<br>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddFilesFromHistory: function() {\n        return _.template(\n            [\n                '<div id=\"add_files_modal\">',\n                \"<div>\",\n                \"1.&nbsp;Select history:&nbsp;\",\n                '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                \"<% _.each(histories, function(history) { %>\", //history select box\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                \"<br/>\",\n                '<div id=\"selected_history_content\">',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateHistoryContents: function() {\n        return _.template(\n            [\n                \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                \"<div>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"</div>\",\n                \"<br>\",\n                \"<ul>\",\n                \"<% _.each(history_contents, function(history_item) { %>\",\n                '<% if (history_item.get(\"deleted\") != true ) { %>',\n                '<% var item_name = history_item.get(\"name\") %>',\n                '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                '<% var collection_type = history_item.get(\"collection_type\") %>',\n                '<% if (collection_type === \"list\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                \"<label>\",\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                \"</label>\",\n                \"</li>\",\n                \"<% } else { %>\",\n                '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                \"</span>\",\n                \"</li>\",\n                \"<% } %>\",\n                '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                \"</label>\",\n                \"</li>\",\n                \"<% } %>\",\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ul>\"\n            ].join(\"\")\n        );\n    },\n\n    templatePaginator: function() {\n        return _.template(\n            [\n                '<ul class=\"pagination pagination-sm\">',\n                \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } else { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                \"<% } else { %>\", // we are on the first page\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                '<li class=\"active\">',\n                '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                \"</li>\",\n                \"<% if ( ( show_page ) < page_count ) { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } else { %>\",\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } %>\",\n                \"</ul>\",\n                \"<span>\",\n                ' <%- items_shown %> items shown <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"currently <%- folder_page_size %> per page\" class=\"page_size_prompt\">(change)</a>',\n                \"</span>\",\n                \"<span>\",\n                \" <%- total_items_count %> total\",\n                \"</span>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderToolbarView: FolderToolbarView\n};\n"]}