{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["define","el","events","mod_utils","mod_toastr","mod_library_model","mod_select","FolderToolbarView","Backbone","View","extend","defaults","click #toolbtn_create_folder","click #toolbtn_bulk_import","click #include_deleted_datasets_chk","click #toolbtn_bulk_delete","click .toolbtn-show-locinfo","click .page_size_prompt","modal","can_add_library_item","contains_file_or_folder","jstree","total_number","failed_number","disabled_jstree_element","histories","id","select_extension","list_genomes","auto","fetchExtAndGenomes","text","description","mutiple_add_dataset_options","initialize","Galaxy","options","template_defaults","is_admin","user","isAdmin","this","render","_","toolbar_template","templateToolBar","is_anonym","paginator_template","templatePaginator","$","html","config","allow_library_path_paste","library_import_dir","show_page","parseInt","items_shown","renderPaginator","find","page_count","total_items_count","isAnonymous","hide","show","$el","createFolderFromModal","event","preventDefault","closing_events","body","template","tooltip","self","templateNewFolderInModal","create_new_folder_event","title","validate_new_folder","buttons","url_items","history","fragment","current_folder_id","folder","folderDetails","serialize_new_folder","save","success","FolderAsModel","split","indexOf","folderListView","collection","model","response","length","url","responseJSON","set","type","libraries","add","error","err_msg","modalBulkImport","val","$checkedValues","fetch","findCheckedRows","info","that","GalaxyHistories","templateBulkImportInModal","fail","models","importAllIntoHistory","Close","always","enableButton","new_history_name","post","history_id","name","done","last_used_history_id","history_name","new_history","processImportToHistory","xhr","status","dataset_ids","substring","folder_ids","row_id","datasets_to_import","each","historyItem","urlRoot","library_dataset_id","source","push","library_folder_id","i","content","jQuery","getJSON","root","chainCallImportingIntoHistory","HistoryItem","initChainCallControl","width","Math","progress","action","download","progressStep","round","txt_representation","closest","data","folder_id","processDownload","format","method","param","inputs","addFilesFromHistoryModal","pair","template_modal","templateAddFilesFromHistory","submit","remove","closing_callback","library_router","fetchAndDisplayHistoryContents","Add","addAllDatasetsFromHistory","navigate","trigger","change","target","value","importFilesFromPathModal","templateImportPathModal","Import","importFromPathsClicked","renderSelectBoxes","list_extensions","datatypes","description_url","key","sort","b","extension","unshift","a","genomes","cache","css","container","templateBrowserModal","importFromJstreePath","bind","renderJstree","Jstree","require","core","plugins","three_state","icon","file","err_code","warning","preserve_dirs","is","space_to_tab","to_posix_lines","disableButton","paths","file_type","dbkey","trimmed","trim","valid_paths","chainCallImportingFolders","link_data","tag_using_filenames","templateAddingDatasetsProgressBar","folder_name","templateDeletingItemsProgressBar","templateImportIntoHistoryProgressBar","chain_call_control","all_nodes","get_selected","selected_nodes","node","state","disabled","selection_type","full_path","full_source","li_attr","chainCallImportingUserdirFiles","HistoryContents","history_contents","templateHistoryContents","get","contents","history_contents_template","reverse","prop","checked_hdas","history_item_types","items_to_add","item_type","history_item_ids","hid","history_item_id","folder_item","Item","chainCallAddingHdas","from_hda_id","history_item_set","pop","popped_item","window","location","onclick","promise","updateProgress","when","hdas_set","added_hdas","Folder","chainCallDeletingItems","deleted_items","item_to_delete","updated_item","items_to_delete","destroy","item","checkIncludeDeleted","fetchFolder","include_deleted","model_class","emit","checked","items_total","dataset","libraryListView","library","showLocInfoModal","showLocInfo","parent_library_id","Library","showImportModal","templateLocInfoInModal","importFilesFromGalaxyFolderModal","showPageSizePrompt","folder_page_size","back","prompt","preferences","join"],"mappings":"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CF,QACF,UACA,6CACE,OACE,oBACA,0CACF,QACF,UACA,uDACE,OACE,mBACA,2GACF,QACF,UACA,OACE,cACA,oCACF,QACF,WACF,WACA,6CACE,UACE,sCACA,YACF,WACA,UACE,OACE,gBACA,sCACF,QACA,gDACE,OACE,uBACA,6CACF,QACF,UACA,OACE,cACA,6BACF,QACA,WACJ,WACJ,UACEwO,KAAK,MAGTrO,yBAA0B,WACxB,OAAO9B,EAAE2B,UACT,8BACE,SACE,wEACA,4EACF,UACF,UACEwO,KAAK,MAIT/L,0BAA4B,WAC1B,OAAOpE,EAAE2B,UACT,QACE,mCACE,mBACA,iHACE,8CACE,mGACF,YACF,YACF,SACA,mCACE,kBACA,4GACA,WACF,SACF,UACEwO,KAAK,MAGTzE,qCAAuC,WACrC,OAAO1L,EAAE2B,UACT,4BACE,2EACF,SACA,yBACE,gJACE,mDACF,SACF,UACEwO,KAAK,MAGT5E,kCAAmC,WACjC,OAAOvL,EAAE2B,UACT,4BACE,iFACF,SACA,yBACE,gJACE,mDACF,SACF,UACEwO,KAAK,MAGT1E,iCAAkC,WAChC,OAAOzL,EAAE2B,UACT,4BACA,SACA,yBACE,gJACE,mDACF,SACF,UACEwO,KAAK,MAGTvG,qBAAsB,WACpB,OAAO5J,EAAE2B,UACT,gCACE,0JACA,wLACA,mCACE,oFACE,yGACF,WACA,sFACA,uFACA,WACF,SACA,mCACE,kFACE,yFACA,+BACF,WACA,kCACE,mEACA,gCACF,WACA,kCACE,0FACA,gCACF,WACA,kCACE,yEACA,yBACF,WACF,SACA,qGACE,aACF,YACA,qGACE,eACF,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACE,gFACA,4EACF,SACA,OACA,QACG,4CACG,oCACA,0FACH,WACH,SACF,UACEwO,KAAK,MAGTxH,wBAAyB,WACvB,OAAO3I,EAAE2B,UACT,gCACE,+JACA,sCACE,kCACE,yFACA,+BACF,WACA,kCACE,mEACA,gCACF,WACA,OACA,kCACE,0FACA,gCACF,WACA,kCACE,yEACA,yBACF,WACF,SACA,uKACA,SACA,kFACA,QACE,gFACA,4EACF,SACA,QACG,4CACG,oCACA,0FACH,WACH,SACF,UACEwO,KAAK,MAGTtI,4BAA6B,WAC3B,OAAO7H,EAAE2B,UACT,6BACE,QACE,gCACA,8EACE,8CACE,mGACF,YACF,YACF,SACA,QACA,sCACA,SACF,UACEwO,KAAK,MAGT1D,wBAAyB,WACvB,OAAOzM,EAAE2B,UACT,gDACA,QACA,6GACE,aACF,YACA,+GACE,eACF,YACA,SACA,OACA,OACE,0DACE,oDACE,iDACA,yDACI,kEACA,0CACE,+GACE,UACF,6CACI,wFACA,0HACF,WACF,QACD,iBACE,6FACG,2GACE,6CACA,kLACF,UACF,QACF,UACN,iGACI,+GACE,6CACE,wFACA,qGACF,WACF,QACJ,UACF,UACF,YACF,SACEwO,KAAK,MAGT9P,kBAAmB,WACjB,OAAOL,EAAE2B,UACT,wCACE,uCACE,gDACE,iGACA,wHACF,iBACE,iGACA,2GACF,UACF,iBACE,kHACA,wHACF,UACA,sBACE,0FACF,QACA,4CACE,2GACA,0HACF,iBACE,yHACA,2IACF,UACF,QACA,SACE,sBACA,8HACE,qBACF,OACA,0CACF,WACEwO,KAAK","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["define([\n    \"layout/masthead\",\n    \"utils/utils\",\n    \"libs/toastr\",\n    \"mvc/library/library-model\",\n    \"mvc/ui/ui-select\"\n    ],\nfunction( mod_masthead,\n          mod_utils,\n          mod_toastr,\n          mod_library_model,\n          mod_select\n        ){\n\nvar FolderToolbarView = Backbone.View.extend({\n  el: '#center',\n\n  events: {\n    'click #toolbtn_create_folder'        : 'createFolderFromModal',\n    'click #toolbtn_bulk_import'          : 'modalBulkImport',\n    'click #include_deleted_datasets_chk' : 'checkIncludeDeleted',\n    'click #toolbtn_bulk_delete'          : 'deleteSelectedItems',\n    'click .toolbtn-show-locinfo'         : 'showLocInfo',\n    'click .page_size_prompt'             : 'showPageSizePrompt'\n\n  },\n\n  defaults: {\n    'can_add_library_item'    : false,\n    'contains_file_or_folder' : false,\n    'chain_call_control'      : {\n                                'total_number'  : 0,\n                                'failed_number' : 0\n                              },\n    'disabled_jstree_element' : 'folders'\n  },\n\n  modal : null,\n\n  // directory browsing object\n  jstree: null,\n\n  // user's histories\n  histories : null,\n\n  // genome select\n  select_genome : null,\n\n  // extension select\n  select_extension : null,\n\n  // extension types\n  list_extensions :[],\n\n  // datatype placeholder for extension auto-detection\n  auto: {\n      id          : 'auto',\n      text        : 'Auto-detect',\n      description : 'This system will try to detect the file type automatically.' +\n                    ' If your file is not detected properly as one of the known formats,' +\n                    ' it most likely means that it has some format problems (e.g., different' +\n                    ' number of columns on different rows). You can still coerce the system' +\n                    ' to set your data to the format you think it should be.' +\n                    ' You can also upload compressed files, which will automatically be decompressed.'\n  },\n\n  // genomes\n  list_genomes : [],\n\n  initialize: function(options){\n    this.options = _.defaults( options || {}, this.defaults );\n    this.fetchExtAndGenomes();\n    this.render();\n  },\n\n  render: function(options){\n    this.options = _.extend( this.options, options );\n    var toolbar_template = this.templateToolBar();\n    var template_defaults = {\n        id: this.options.id,\n        is_admin: false,\n        is_anonym: true,\n        mutiple_add_dataset_options: false\n    }\n    if (Galaxy.user){\n      template_defaults.is_admin = Galaxy.user.isAdmin();\n      template_defaults.is_anonym = Galaxy.user.isAnonymous();\n      if ( Galaxy.config.user_library_import_dir !== null || Galaxy.config.allow_library_path_paste !== false || Galaxy.config.library_import_dir !== null ){\n        template_defaults.mutiple_add_dataset_options = true;\n      }\n    }\n    this.$el.html(toolbar_template(template_defaults));\n  },\n\n  /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n  renderPaginator: function( options ){\n      this.options = _.extend( this.options, options );\n      var paginator_template = this.templatePaginator();\n      $(\"body\").find( '.folder-paginator' ).html( paginator_template({\n          id: this.options.id,\n          show_page: parseInt( this.options.show_page ),\n          page_count: parseInt( this.options.page_count ),\n          total_items_count: this.options.total_items_count,\n          items_shown: this.options.items_shown\n      }));\n  },\n\n  configureElements: function(options){\n    this.options = _.extend(this.options, options);\n\n    if (this.options.can_add_library_item === true){\n      $('.add-library-items').show();\n    } else{\n      $('.add-library-items').hide();\n    }\n    if (this.options.contains_file_or_folder === true){\n      if (Galaxy.user){\n        if (!Galaxy.user.isAnonymous()){\n          $('.logged-dataset-manipulation').show();\n          $('.dataset-manipulation').show();\n        } else {\n          $('.dataset-manipulation').show();\n          $('.logged-dataset-manipulation').hide();\n        }\n      } else {\n        $('.logged-dataset-manipulation').hide();\n        $('.dataset-manipulation').hide();\n      }\n    } else {\n      $('.logged-dataset-manipulation').hide();\n      $('.dataset-manipulation').hide();\n    }\n    this.$el.find('[data-toggle]').tooltip();\n  },\n\n  // shows modal for creating folder\n  createFolderFromModal: function( event ){\n    event.preventDefault();\n    event.stopPropagation();\n\n    // create modal\n    var self = this;\n    var template = this.templateNewFolderInModal();\n    this.modal = Galaxy.modal;\n    this.modal.show({\n        closing_events  : true,\n        title           : 'Create New Folder',\n        body            : template(),\n        buttons         : {\n            'Create'    : function() {self.create_new_folder_event();},\n            'Close'     : function() {Galaxy.modal.hide();}\n        }\n    });\n  },\n\n  // create the new folder from modal\n  create_new_folder_event: function(){\n      var folderDetails = this.serialize_new_folder();\n      if (this.validate_new_folder(folderDetails)){\n          var folder = new mod_library_model.FolderAsModel();\n          var url_items = Backbone.history.fragment.split('/'),\n              current_folder_id;\n          if(url_items.indexOf('page') > -1){\n            current_folder_id = url_items[url_items.length-3];\n          }else {\n            current_folder_id = url_items[url_items.length-1];\n          }\n          folder.url = folder.urlRoot + current_folder_id ;\n\n          folder.save(folderDetails, {\n            success: function (folder) {\n              Galaxy.modal.hide();\n              mod_toastr.success('Folder created.');\n              folder.set({'type' : 'folder'});\n              Galaxy.libraries.folderListView.collection.add(folder);\n            },\n            error: function(model, response){\n              Galaxy.modal.hide();\n              if (typeof response.responseJSON !== \"undefined\"){\n                mod_toastr.error(response.responseJSON.err_msg);\n              } else {\n                mod_toastr.error('An error occurred.');\n              }\n            }\n          });\n      } else {\n          mod_toastr.error('Folder\\'s name is missing.');\n      }\n      return false;\n  },\n\n  // serialize data from the modal\n  serialize_new_folder : function(){\n      return {\n          name: $(\"input[name='Name']\").val(),\n          description: $(\"input[name='Description']\").val()\n      };\n  },\n\n  // validate new folder info\n  validate_new_folder: function(folderDetails){\n      return folderDetails.name !== '';\n  },\n\n  // show bulk import modal\n  modalBulkImport : function(){\n      var $checkedValues = this.findCheckedRows();\n      if($checkedValues.length === 0){\n          mod_toastr.info('You must select some datasets first.');\n      } else {\n        var that = this;\n        this.histories = new mod_library_model.GalaxyHistories();\n        this.histories.fetch()\n        .done(function(){\n          var template = that.templateBulkImportInModal();\n          that.modal = Galaxy.modal;\n          that.modal.show({\n              closing_events  : true,\n              title           : 'Import into History',\n              body            : template({histories : that.histories.models}),\n              buttons         : {\n                  'Import'    : function() {that.importAllIntoHistory();},\n                  'Close'     : function() {Galaxy.modal.hide();}\n              }\n          });\n        })\n        .fail(function(model, response){\n          if (typeof response.responseJSON !== \"undefined\"){\n            mod_toastr.error(response.responseJSON.err_msg);\n          } else {\n            mod_toastr.error('An error occurred.');\n          }\n        });\n      }\n  },\n\n  /**\n   * Import all selected datasets into history.\n   */\n  importAllIntoHistory : function (){\n    this.modal.disableButton('Import');\n    var new_history_name = this.modal.$('input[name=history_name]').val();\n    var that = this;\n    if (new_history_name !== ''){\n      $.post(Galaxy.root + 'api/histories', {name: new_history_name})\n        .done(function( new_history ) {\n          that.options.last_used_history_id = new_history.id;\n          that.processImportToHistory(new_history.id, new_history.name);\n        })\n        .fail(function( xhr, status, error ) {\n          mod_toastr.error('An error occurred.');\n        })\n        .always(function() {\n          that.modal.enableButton('Import');\n        });\n    } else {\n      var history_id = $(\"select[name=dataset_import_bulk] option:selected\").val();\n      this.options.last_used_history_id = history_id;\n      var history_name = $(\"select[name=dataset_import_bulk] option:selected\").text();\n      this.processImportToHistory(history_id, history_name);\n      this.modal.enableButton('Import');\n    }\n  },\n\n  processImportToHistory: function( history_id, history_name ){\n    var dataset_ids = [];\n    var folder_ids = [];\n    this.findCheckedRows().each(function(){\n        var row_id = $(this).closest('tr').data('id');\n        if (row_id.substring(0,1) == 'F'){\n            folder_ids.push(row_id);\n        } else {\n            dataset_ids.push(row_id);\n        }\n    });\n    // prepare the dataset objects to be imported\n    var datasets_to_import = [];\n    for (var i = dataset_ids.length - 1; i >= 0; i--) {\n        var library_dataset_id = dataset_ids[i];\n        var historyItem = new mod_library_model.HistoryItem();\n        historyItem.url = historyItem.urlRoot + history_id + '/contents';\n        historyItem.content = library_dataset_id;\n        historyItem.source = 'library';\n        datasets_to_import.push(historyItem);\n    }\n\n    // prepare the folder objects to be imported\n    var folders_to_import = [];\n    for (var i = folder_ids.length - 1; i >= 0; i--) {\n        var library_folder_id = folder_ids[i];\n        var historyItem = new mod_library_model.HistoryItem();\n        historyItem.url = historyItem.urlRoot + history_id + '/contents';\n        historyItem.content = library_folder_id;\n        historyItem.source = 'library_folder';\n        datasets_to_import.push(historyItem);\n    }\n\n    this.initChainCallControl( { length: datasets_to_import.length, action: 'to_history', history_name: history_name } );\n    // set the used history as current so user will see the last one\n    // that he imported into in the history panel on the 'analysis' page\n    jQuery.getJSON( Galaxy.root + 'history/set_as_current?id=' + history_id  );\n    this.chainCallImportingIntoHistory( datasets_to_import, history_name );\n  },\n\n  /**\n   * Update the progress bar in modal window.\n   */\n  updateProgress: function(){\n      this.progress += this.progressStep;\n      $( '.progress-bar-import' ).width( Math.round( this.progress ) + '%' );\n      var txt_representation = Math.round( this.progress ) + '% Complete';\n      $( '.completion_span' ).text( txt_representation );\n  },\n\n  /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n  download : function( folder_id, format ){\n    var dataset_ids = [];\n    var folder_ids = [];\n        this.findCheckedRows().each( function(){\n            var row_id = $(this).closest('tr').data('id');\n            if (row_id.substring(0,1) == 'F'){\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        } );\n    var url = Galaxy.root + 'api/libraries/datasets/download/' + format;\n    var data = { 'ld_ids' : dataset_ids, 'folder_ids' : folder_ids };\n    this.processDownload( url, data, 'get' );\n  },\n\n  /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n  processDownload: function( url, data, method ){\n    if ( url && data ){\n      // data can be string of parameters or array/object\n      data = typeof data === 'string' ? data : $.param( data );\n      // split params into form inputs\n      var inputs = '';\n      $.each( data.split( '&' ), function(){\n              var pair = this.split( '=' );\n              inputs+='<input type=\"hidden\" name=\"'+ pair[0] +'\" value=\"'+ pair[1] +'\" />';\n      });\n      // send request\n      $('<form action=\"'+ url +'\" method=\"'+ (method||'post') +'\">'+inputs+'</form>')\n      .appendTo( 'body' ).submit().remove();\n      mod_toastr.info( 'Your download will begin soon.' );\n    } else {\n      mod_toastr.error( 'An error occurred.' );\n    }\n  },\n\n  addFilesFromHistoryModal: function(){\n    this.histories = new mod_library_model.GalaxyHistories();\n    var self = this;\n    this.histories.fetch()\n      .done(function(){\n        self.modal = Galaxy.modal;\n        var template_modal = self.templateAddFilesFromHistory();\n        self.modal.show({\n            closing_events  : true,\n            title           : 'Adding datasets from your history',\n            body            : template_modal({histories: self.histories.models}),\n            buttons         : {\n                'Add'       : function() {self.addAllDatasetsFromHistory();},\n                'Close'     : function() {Galaxy.modal.hide();}\n            },\n            closing_callback: function(){\n              Galaxy.libraries.library_router.navigate('folders/' + self.id, {trigger: true});\n            }\n        });\n        self.fetchAndDisplayHistoryContents(self.histories.models[0].id);\n        $( \"#dataset_add_bulk\" ).change(function(event) {\n          self.fetchAndDisplayHistoryContents(event.target.value);\n        });\n      })\n      .fail(function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          mod_toastr.error(response.responseJSON.err_msg);\n        } else {\n          mod_toastr.error('An error occurred.');\n        }\n      });\n  },\n\n  /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n  importFilesFromPathModal: function(){\n    var that = this;\n    this.modal = Galaxy.modal;\n    var template_modal = this.templateImportPathModal();\n    this.modal.show({\n        closing_events  : true,\n        title           : 'Please enter paths to import',\n        body            : template_modal({}),\n        buttons         : {\n            'Import'    : function() { that.importFromPathsClicked(that); },\n            'Close'     : function() { Galaxy.modal.hide(); }\n        },\n        closing_callback: function(){\n          //  TODO: should not trigger routes outside of the router\n          Galaxy.libraries.library_router.navigate( 'folders/' + that.id, { trigger: true } );\n        }\n    });\n    this.renderSelectBoxes();\n  },\n\n  /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n  fetchExtAndGenomes: function(){\n    var that = this;\n    mod_utils.get({\n        url      :  Galaxy.root + \"api/datatypes?extension_only=False\",\n        success  :  function( datatypes ) {\n                        that.list_extensions = [];\n                        for (var key in datatypes) {\n                            that.list_extensions.push({\n                                id              : datatypes[key].extension,\n                                text            : datatypes[key].extension,\n                                description     : datatypes[key].description,\n                                description_url : datatypes[key].description_url\n                            });\n                        }\n                        that.list_extensions.sort(function(a, b) {\n                            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                        });\n                        that.list_extensions.unshift(that.auto);\n                    },\n        cache    : true\n      });\n    mod_utils.get({\n        url     :    Galaxy.root + \"api/genomes\",\n        success : function( genomes ) {\n                    that.list_genomes = [];\n                    for (var key in genomes ) {\n                        that.list_genomes.push({\n                            id      : genomes[key][1],\n                            text    : genomes[key][0]\n                        });\n                    }\n                    that.list_genomes.sort(function(a, b) {\n                        return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                    });\n                },\n        cache   : true\n    });\n  },\n\n  renderSelectBoxes: function(){\n    // This won't work properly unlesss we already have the data fetched.\n    // See this.fetchExtAndGenomes()\n    // TODO switch to common resources:\n    // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n    var that = this;\n    this.select_genome = new mod_select.View( {\n        css: 'library-genome-select',\n        data: that.list_genomes,\n        container: Galaxy.modal.$el.find( '#library_genome_select' ),\n        value: '?'\n    } );\n    this.select_extension = new mod_select.View({\n      css: 'library-extension-select',\n      data: that.list_extensions,\n      container: Galaxy.modal.$el.find( '#library_extension_select' ),\n      value: 'auto'\n    });\n  },\n\n  /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n  importFilesFromGalaxyFolderModal: function( options ){\n    var that = this;\n    var template_modal = this.templateBrowserModal();\n    this.modal = Galaxy.modal;\n    this.modal.show({\n      closing_events  : true,\n      title           : 'Please select folders or files',\n      body            : template_modal({}),\n      buttons         : {\n          'Import'    : function() {\n            that.importFromJstreePath( that, options );\n          },\n          'Close'     : function() {\n            Galaxy.modal.hide();\n          }\n      },\n      closing_callback: function(){\n        //  TODO: should not trigger routes outside of the router\n        Galaxy.libraries.library_router.navigate('folders/' + that.id, {trigger: true});\n      }\n    });\n\n    $('.libimport-select-all').bind(\"click\", function(){\n      $('#jstree_browser').jstree(\"check_all\");\n    });\n    $('.libimport-select-none').bind(\"click\", function(){\n      $('#jstree_browser').jstree(\"uncheck_all\");\n    });\n\n    this.renderSelectBoxes();\n    options.disabled_jstree_element = 'folders';\n    this.renderJstree( options );\n\n    $( 'input[type=radio]' ).change( function( event ){\n        if (event.target.value ==='jstree-disable-folders') {\n          options.disabled_jstree_element = 'folders';\n          that.renderJstree( options );\n          $('.jstree-folders-message').hide();\n          $('.jstree-preserve-structure').hide();\n          $('.jstree-files-message').show();\n        } else if ( event.target.value ==='jstree-disable-files' ){\n          $('.jstree-files-message').hide();\n          $('.jstree-folders-message').show();\n          $('.jstree-preserve-structure').show();\n          options.disabled_jstree_element = 'files';\n          that.renderJstree( options );\n        }\n      }\n    );\n  },\n\n  /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n  renderJstree: function( options ){\n    var that = this;\n    this.options = _.extend( this.options, options );\n    var target = options.source || 'userdir';\n    var disabled_jstree_element = this.options.disabled_jstree_element;\n    this.jstree = new mod_library_model.Jstree();\n    this.jstree.url = this.jstree.urlRoot +\n                        '?target=' + target +\n                        '&format=jstree' +\n                        '&disable=' + disabled_jstree_element;\n    this.jstree.fetch({\n      success: function(model, response){\n        // This is to prevent double jquery load. I think. Carl is magician.\n        define( 'jquery', function(){ return jQuery; });\n        // Now we need jstree, time to lazy load it.\n        require([ 'libs/jquery/jstree' ], function(jstree){\n          $('#jstree_browser').jstree(\"destroy\");\n          $('#jstree_browser').jstree({\n            'core':{\n              'data': model\n            },\n            'plugins': ['types', 'checkbox'],\n            'types': {\n              \"folder\": {\n                \"icon\": \"jstree-folder\"\n              },\n              \"file\": {\n                \"icon\": \"jstree-file\"\n              }\n            },\n            'checkbox': {\n              three_state: false\n            }\n          });\n        });\n      },\n      error: function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          if (response.responseJSON.err_code === 404001){\n            mod_toastr.warning(response.responseJSON.err_msg);\n          } else{\n            mod_toastr.error(response.responseJSON.err_msg);\n          }\n        } else {\n          mod_toastr.error('An error occurred.');\n        }\n      }\n    })\n  },\n\n  /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n  importFromPathsClicked: function(){\n    var preserve_dirs = this.modal.$el.find('.preserve-checkbox').is(':checked');\n    var link_data = this.modal.$el.find('.link-checkbox').is(':checked');\n    var space_to_tab = this.modal.$el.find('.spacetab-checkbox').is(':checked');\n    var to_posix_lines = this.modal.$el.find('.posix-checkbox').is(':checked');\n    var tag_using_filenames = this.modal.$el.find('.tag-files').is(':checked');\n    var file_type = this.select_extension.value();\n    var dbkey = this.select_genome.value();\n    var paths = $('textarea#import_paths').val();\n    var valid_paths = [];\n    if (!paths){\n      mod_toastr.info('Please enter a path relative to Galaxy root.');\n    } else {\n      this.modal.disableButton('Import');\n      paths = paths.split('\\n');\n      for (var i = paths.length - 1; i >= 0; i--) {\n        var trimmed = paths[i].trim();\n        if (trimmed.length!==0){\n          valid_paths.push(trimmed);\n        }\n      };\n      this.initChainCallControl( { length: valid_paths.length, action: 'adding_datasets' } );\n      this.chainCallImportingFolders( { paths: valid_paths,\n                                        preserve_dirs: preserve_dirs,\n                                        link_data: link_data,\n                                        space_to_tab: space_to_tab,\n                                        to_posix_lines: to_posix_lines,\n                                        source: 'admin_path',\n                                        file_type: file_type,\n                                        tag_using_filenames: tag_using_filenames,\n                                        dbkey: dbkey } );\n    }\n  },\n\n  /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n  initChainCallControl: function( options ){\n    var template;\n    switch( options.action ){\n      case \"adding_datasets\":\n        template = this.templateAddingDatasetsProgressBar();\n        this.modal.$el.find( '.modal-body' ).html( template( { folder_name : this.options.folder_name } ) );\n        break;\n      case \"deleting_datasets\":\n        template = this.templateDeletingItemsProgressBar();\n        this.modal.$el.find( '.modal-body' ).html( template() );\n        break;\n      case \"to_history\":\n        template = this.templateImportIntoHistoryProgressBar();\n        this.modal.$el.find( '.modal-body' ).html( template( { history_name : options.history_name } ) );\n        break;\n      default:\n        Galaxy.emit.error( 'Wrong action specified.', 'datalibs');\n        break;\n    }\n\n    // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n    // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n    this.progress = 0;\n    this.progressStep = 100 / options.length;\n    this.options.chain_call_control.total_number = options.length;\n    this.options.chain_call_control.failed_number = 0;\n  },\n\n  /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n  importFromJstreePath: function ( that, options ){\n    var all_nodes = $( '#jstree_browser' ).jstree().get_selected( true );\n    // remove the disabled elements that could have been trigerred with the 'select all'\n    var selected_nodes = _.filter(all_nodes, function(node){ return node.state.disabled == false; })\n    var preserve_dirs = this.modal.$el.find( '.preserve-checkbox' ).is( ':checked' );\n    var link_data = this.modal.$el.find( '.link-checkbox' ).is( ':checked' );\n    var space_to_tab = this.modal.$el.find('.spacetab-checkbox').is(':checked');\n    var to_posix_lines = this.modal.$el.find('.posix-checkbox').is(':checked');\n    var file_type = this.select_extension.value();\n    var dbkey = this.select_genome.value();\n    var tag_using_filenames = this.modal.$el.find( '.tag-files' ).is( ':checked' );\n    var selection_type = selected_nodes[0].type;\n    var paths = [];\n    if ( selected_nodes.length < 1 ){\n      mod_toastr.info( 'Please select some items first.' );\n    } else {\n      this.modal.disableButton( 'Import' );\n      for ( var i = selected_nodes.length - 1; i >= 0; i-- ){\n        if ( selected_nodes[i].li_attr.full_path !== undefined ){\n          paths.push( selected_nodes[i].li_attr.full_path );\n        }\n      }\n      this.initChainCallControl( { length: paths.length, action: 'adding_datasets' } );\n      if ( selection_type === 'folder' ){\n        var full_source = options.source + '_folder';\n        this.chainCallImportingFolders( { paths: paths,\n                                          preserve_dirs: preserve_dirs,\n                                          link_data: link_data,\n                                          space_to_tab: space_to_tab,\n                                          to_posix_lines: to_posix_lines,\n                                          source: full_source,\n                                          file_type: file_type,\n                                          dbkey: dbkey,\n                                          tag_using_filenames: tag_using_filenames } );\n      } else if ( selection_type === 'file' ){\n        var full_source = options.source + '_file';\n        this.chainCallImportingUserdirFiles( { paths : paths,\n                                               file_type: file_type,\n                                               dbkey: dbkey,\n                                               link_data: link_data,\n                                               space_to_tab: space_to_tab,\n                                               to_posix_lines: to_posix_lines,\n                                               source: full_source,\n                                               tag_using_filenames: tag_using_filenames } );\n      }\n    }\n  },\n\n  fetchAndDisplayHistoryContents: function(history_id){\n    var history_contents = new mod_library_model.HistoryContents({id:history_id});\n    var self = this;\n    history_contents.fetch({\n      success: function(history_contents){\n        var history_contents_template = self.templateHistoryContents();\n        self.histories.get(history_id).set({'contents' : history_contents});\n        self.modal.$el.find('#selected_history_content').html(history_contents_template({history_contents: history_contents.models.reverse()}));\n        self.modal.$el.find('.history-import-select-all').bind(\"click\", function(){\n          $('#selected_history_content [type=checkbox]').prop('checked', true);\n        });\n        self.modal.$el.find('.history-import-unselect-all').bind(\"click\", function(){\n          $('#selected_history_content [type=checkbox]').prop('checked', false);\n        });\n      },\n      error: function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          mod_toastr.error(response.responseJSON.err_msg);\n        } else {\n          mod_toastr.error('An error occurred.');\n        }\n      }\n    });\n  },\n\n  /**\n   * Import all selected datasets from history into the current folder.\n   */\n  addAllDatasetsFromHistory : function (){\n    var checked_hdas = this.modal.$el.find( '#selected_history_content' ).find( ':checked' );\n    var history_item_ids = [];  // can be hda or hdca\n    var history_item_types = [];\n    var items_to_add = [];\n    if ( checked_hdas.length < 1 ){\n      mod_toastr.info( 'You must select some datasets first.' );\n    } else {\n      this.modal.disableButton( 'Add' );\n      checked_hdas.each(function(){\n        var hid = $(this).closest('li').data( 'id' );\n        if ( hid ) {\n          var item_type = $(this).closest('li').data( 'name' );\n          history_item_ids.push( hid );\n          history_item_types.push( item_type );\n        }\n      });\n      for ( var i = history_item_ids.length - 1; i >= 0; i-- ) {\n        var history_item_id = history_item_ids[i];\n        var folder_item = new mod_library_model.Item();\n        folder_item.url = Galaxy.root + 'api/folders/' + this.options.id + '/contents';\n        if (history_item_types[i] === 'collection') {\n          folder_item.set({'from_hdca_id': history_item_id});\n        } else {\n          folder_item.set({'from_hda_id': history_item_id});\n        }\n        items_to_add.push(folder_item);\n      }\n      this.initChainCallControl( { length: items_to_add.length, action: 'adding_datasets' } );\n      this.chainCallAddingHdas( items_to_add );\n    }\n  },\n\n  /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n  chainCallImportingIntoHistory: function( history_item_set, history_name ){\n    var self = this;\n    var popped_item = history_item_set.pop();\n    if ( typeof popped_item == \"undefined\" ) {\n      if ( this.options.chain_call_control.failed_number === 0 ){\n        mod_toastr.success( 'Selected datasets imported into history. Click this to start analyzing it.', '', { onclick: function() { window.location=Galaxy.root } } );\n      } else if ( this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number ){\n        mod_toastr.error( 'There was an error and no datasets were imported into history.' );\n      } else if ( this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number ){\n        mod_toastr.warning( 'Some of the datasets could not be imported into history. Click this to see what was imported.', '', { onclick: function() { window.location=Galaxy.root } } );\n      }\n      Galaxy.modal.hide();\n      return true;\n    }\n    var promise = $.when( popped_item.save( { content: popped_item.content, source: popped_item.source } ) );\n\n    promise.done( function(){\n              self.updateProgress();\n              self.chainCallImportingIntoHistory( history_item_set, history_name );\n            } )\n            .fail( function(){\n              self.options.chain_call_control.failed_number += 1;\n              self.updateProgress();\n              self.chainCallImportingIntoHistory( history_item_set, history_name );\n            } );\n  },\n\n  /**\n   * Take the array of paths and create a request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to user folder on Galaxy\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n  chainCallImportingUserdirFiles: function( options ){\n    var that = this;\n    var popped_item = options.paths.pop();\n    if ( typeof popped_item === \"undefined\" ) {\n      if ( this.options.chain_call_control.failed_number === 0 ){\n        mod_toastr.success( 'Selected files imported into the current folder' );\n        Galaxy.modal.hide();\n      } else {\n        mod_toastr.error( 'An error occured.' );\n      }\n      return true;\n    }\n    var promise = $.when( $.post( Galaxy.root + 'api/libraries/datasets?encoded_folder_id=' + that.id +\n                                                       '&source=' + options.source +\n                                                       '&path=' + popped_item +\n                                                       '&file_type=' + options.file_type +\n                                                       '&link_data=' + options.link_data +\n                                                       '&space_to_tab=' + options.space_to_tab +\n                                                       '&to_posix_lines=' + options.to_posix_lines +\n                                                       '&dbkey=' + options.dbkey +\n                                                       '&tag_using_filenames=' + options.tag_using_filenames ) )\n    promise.done( function( response ){\n              that.updateProgress();\n              that.chainCallImportingUserdirFiles( options );\n            } )\n            .fail( function(){\n              that.options.chain_call_control.failed_number += 1;\n              that.updateProgress();\n              that.chainCallImportingUserdirFiles( options );\n            } );\n  },\n\n  /**\n   * Take the array of paths and create a request for each of them\n   * calling them in series. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n   * @param  {boolean} link_data              copy files to Galaxy or link instead\n   * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n   * @param  {boolean} space_to_tab           convert spaces to tabs\n   * @param  {str} source                     string representing what type of folder\n   *                                          is the source of import\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n  chainCallImportingFolders: function( options ){\n    // TODO need to check which paths to call\n    var that = this;\n    var popped_item = options.paths.pop();\n    if (typeof popped_item == \"undefined\") {\n      if (this.options.chain_call_control.failed_number === 0){\n        mod_toastr.success('Selected folders and their contents imported into the current folder.');\n        Galaxy.modal.hide();\n      } else {\n        // TODO better error report\n        mod_toastr.error('An error occured.');\n      }\n      return true;\n    }\n    var promise = $.when( $.post( Galaxy.root + 'api/libraries/datasets?encoded_folder_id=' + that.id +\n                                                          '&source=' + options.source +\n                                                          '&path=' + popped_item +\n                                                          '&preserve_dirs=' + options.preserve_dirs +\n                                                          '&link_data=' + options.link_data +\n                                                          '&to_posix_lines=' + options.to_posix_lines +\n                                                          '&space_to_tab=' + options.space_to_tab +\n                                                          '&file_type=' + options.file_type +\n                                                          '&dbkey=' + options.dbkey +\n                                                          '&tag_using_filenames=' + options.tag_using_filenames ) )\n    promise.done(function(response){\n              that.updateProgress();\n              that.chainCallImportingFolders( options );\n            })\n            .fail(function(){\n              that.options.chain_call_control.failed_number += 1;\n              that.updateProgress();\n              that.chainCallImportingFolders( options );\n            });\n  },\n\n  /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n  chainCallAddingHdas: function( hdas_set ){\n    var self = this;\n    this.added_hdas = new mod_library_model.Folder();\n    var popped_item = hdas_set.pop();\n    if ( typeof popped_item == \"undefined\" ) {\n      if ( this.options.chain_call_control.failed_number === 0 ){\n        mod_toastr.success( 'Selected datasets from history added to the folder' );\n      } else if ( this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number ){\n        mod_toastr.error( 'There was an error and no datasets were added to the folder.' );\n      } else if ( this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number ){\n        mod_toastr.warning( 'Some of the datasets could not be added to the folder' );\n      }\n      Galaxy.modal.hide();\n      return this.added_hdas;\n    }\n    var promise = $.when( popped_item.save( { from_hda_id: popped_item.get( 'from_hda_id' ) } ) );\n\n    promise.done( function( model ){\n              Galaxy.libraries.folderListView.collection.add( model );\n              self.updateProgress();\n              self.chainCallAddingHdas( hdas_set );\n            })\n            .fail( function(){\n              self.options.chain_call_control.failed_number += 1;\n              self.updateProgress();\n              self.chainCallAddingHdas( hdas_set );\n            });\n  },\n\n  /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n  chainCallDeletingItems: function( items_to_delete ){\n  var self = this;\n  this.deleted_items = new mod_library_model.Folder();\n  var item_to_delete = items_to_delete.pop();\n  if ( typeof item_to_delete === \"undefined\" ) {\n    if ( this.options.chain_call_control.failed_number === 0 ){\n      mod_toastr.success( 'Selected items were deleted.' );\n    } else if ( this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number ){\n      mod_toastr.error( 'There was an error and no items were deleted. Please make sure you have sufficient permissions.' );\n    } else if ( this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number ){\n      mod_toastr.warning( 'Some of the items could not be deleted. Please make sure you have sufficient permissions.' );\n    }\n    Galaxy.modal.hide();\n    return this.deleted_items;\n  }\n  item_to_delete.destroy()\n      .done( function( item ){\n            Galaxy.libraries.folderListView.collection.remove( item_to_delete.id );\n            self.updateProgress();\n            // add the deleted item to collection, triggers rendering\n            if ( Galaxy.libraries.folderListView.options.include_deleted ){\n              var updated_item = null;\n              if (item.type === 'folder' || item.model_class === 'LibraryFolder'){\n                updated_item = new mod_library_model.FolderAsModel( item );\n              } else if (item.type === 'file' || item.model_class === 'LibraryDataset'){\n                updated_item = new mod_library_model.Item( item );\n              } else {\n                Galaxy.emit.error('Unknown library item type found.', 'datalibs');\n                Galaxy.emit.error(item.type || item.model_class, 'datalibs');\n              }\n              Galaxy.libraries.folderListView.collection.add( updated_item );\n            }\n            self.chainCallDeletingItems( items_to_delete );\n          })\n      .fail( function(){\n        self.options.chain_call_control.failed_number += 1;\n        self.updateProgress();\n        self.chainCallDeletingItems( items_to_delete );\n      });\n  },\n\n  /**\n   * Handles the click on 'show deleted' checkbox\n   */\n  checkIncludeDeleted: function(event){\n    if (event.target.checked){\n      Galaxy.libraries.folderListView.fetchFolder({include_deleted: true});\n    } else{\n      Galaxy.libraries.folderListView.fetchFolder({include_deleted: false});\n    }\n  },\n\n  /**\n   * Delete the selected items. Atomic. One by one.\n   */\n  deleteSelectedItems: function(){\n    var dataset_ids = [];\n    var folder_ids = [];\n    var $checkedValues = this.findCheckedRows();\n    if($checkedValues.length === 0){\n        mod_toastr.info('You must select at least one item for deletion.');\n    } else {\n      var template = this.templateDeletingItemsProgressBar();\n      this.modal = Galaxy.modal;\n      this.modal.show({\n          closing_events  : true,\n          title           : 'Deleting selected items',\n          body            : template({}),\n          buttons         : {\n              'Close'     : function() {Galaxy.modal.hide();}\n          }\n      });\n      // init the control counters\n      this.options.chain_call_control.total_number = 0;\n      this.options.chain_call_control.failed_number = 0;\n      $checkedValues.each(function(){\n          var row_id = $(this).closest('tr').data('id');\n          if (row_id !== undefined) {\n              if (row_id.substring(0,1) == 'F'){\n                folder_ids.push(row_id);\n              } else {\n                dataset_ids.push(row_id);\n              }\n          }\n      });\n      // init the progress bar\n      var items_total = dataset_ids.length + folder_ids.length\n      this.progressStep = 100 / items_total;\n      this.progress = 0;\n\n      // prepare the dataset items to be added\n      var items_to_delete = [];\n      for (var i = dataset_ids.length - 1; i >= 0; i--) {\n          var dataset = new mod_library_model.Item({id:dataset_ids[i]});\n          items_to_delete.push(dataset);\n      }\n      for (var i = folder_ids.length - 1; i >= 0; i--) {\n          var folder = new mod_library_model.FolderAsModel({id:folder_ids[i]});\n          items_to_delete.push(folder);\n      }\n\n      this.options.chain_call_control.total_number = items_total;\n      // call the recursive function to call ajax one after each other (request FIFO queue)\n      this.chainCallDeletingItems(items_to_delete);\n    }\n  },\n\n\n  showLocInfo: function(){\n    var library = null;\n    var that = this;\n    if (Galaxy.libraries.libraryListView !== null){\n      library = Galaxy.libraries.libraryListView.collection.get(this.options.parent_library_id);\n      this.showLocInfoModal(library);\n    } else {\n      library = new mod_library_model.Library({id: this.options.parent_library_id});\n      library.fetch({\n        success: function(){\n          that.showLocInfoModal(library);\n        },\n        error: function(model, response){\n          if (typeof response.responseJSON !== \"undefined\"){\n            mod_toastr.error(response.responseJSON.err_msg);\n          } else {\n            mod_toastr.error('An error occurred.');\n          }\n        }\n      })\n    }\n  },\n\n  showLocInfoModal: function(library){\n    var that = this;\n    var template = this.templateLocInfoInModal();\n    this.modal = Galaxy.modal;\n    this.modal.show({\n        closing_events  : true,\n        title           : 'Location Details',\n        body            : template({library: library, options: that.options}),\n        buttons         : {\n            'Close'     : function() {Galaxy.modal.hide();}\n        }\n    });\n  },\n\n  showImportModal: function(options){\n    switch(options.source){\n      case \"history\":\n        this.addFilesFromHistoryModal();\n        break;\n      case \"importdir\":\n        this.importFilesFromGalaxyFolderModal( { source: 'importdir' } );\n        break;\n      case \"path\":\n        this.importFilesFromPathModal();\n        break;\n      case \"userdir\":\n        this.importFilesFromGalaxyFolderModal( { source: 'userdir' } );\n        break;\n      default:\n        Galaxy.libraries.library_router.back();\n        mod_toastr.error('Invalid import source.');\n        break;\n    }\n  },\n\n  /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n  showPageSizePrompt: function(){\n    var folder_page_size = prompt( 'How many items per page do you want to see?', Galaxy.libraries.preferences.get( 'folder_page_size' ) );\n    if ( ( folder_page_size != null ) && ( folder_page_size == parseInt( folder_page_size ) ) ) {\n        Galaxy.libraries.preferences.set( { 'folder_page_size': parseInt( folder_page_size ) } );\n        Galaxy.libraries.folderListView.render( { id: this.options.id, show_page: 1 } );\n    }\n  },\n\n  findCheckedRows: function(){\n    return $('#folder_list_body').find(':checked');\n  },\n\n  templateToolBar: function(){\n    return _.template([\n    // container start\n    '<div class=\"library_style_container\">',\n      // toolbar start\n      '<div id=\"library_toolbar\">',\n        '<form class=\"form-inline\" role=\"form\">',\n          '<span><strong>DATA LIBRARIES</strong></span>',\n          // paginator will append here\n          '<span class=\"library-paginator folder-paginator\"></span>',\n          '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n            '<label>',\n              '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n            '</label>',\n          '</div>',\n          '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n            '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n          '</button>',\n          '<% if(mutiple_add_dataset_options) { %>',\n          '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n            '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n              '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n            '</button>',\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n              '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n              '<% if(Galaxy.config.user_library_import_dir !== null) { %>',\n                '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n              '<% } %>',\n              '<% if(Galaxy.config.allow_library_path_paste) { %>',\n                '<li class=\"divider\"></li>',\n                '<li class=\"dropdown-header\">Admins only</li>',\n                '<% if(Galaxy.config.library_import_dir !== null) { %>',\n                  '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                '<% } %>',\n                '<% if(Galaxy.config.allow_library_path_paste) { %>',\n                  '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                '<% } %>',\n              '<% } %>',\n            '</ul>',\n          '</div>',\n          '<% } else { %>',\n            '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n              '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n            '</a>',\n          '<% } %>',\n          '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n            '<span class=\"fa fa-book\"></span>',\n            '&nbsp;to History',\n          '</button>',\n          '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n            '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n              '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n            '</button>',\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n              '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n              '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n              '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n            '</ul>',\n          '</div>',\n            '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n            '<span class=\"fa fa-times\"></span> Delete</button>',\n            '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n              '<span class=\"fa fa-info-circle\"></span>',\n              '&nbsp;Details',\n            '</button>',\n            '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n              '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                '<button class=\"primary-button\" type=\"button\">',\n                  '<span class=\"fa fa-question-circle\"></span>',\n                  '&nbsp;Help',\n                '</button>',\n              '</a>',\n            '</span>',\n          '</div>',\n        '</form>',\n      // toolbar end\n      '<div id=\"folder_items_element\">',\n      '</div>',\n      // paginator will append here\n      '<div class=\"folder-paginator paginator-bottom\"></div>',\n    // container end\n    '</div>',\n    ].join(''));\n  },\n\n  templateLocInfoInModal: function(){\n    return _.template([\n      '<div>',\n        '<table class=\"grid table table-condensed\">',\n          '<thead>',\n            '<th style=\"width: 25%;\">library</th>',\n            '<th></th>',\n          '</thead>',\n          '<tbody>',\n            '<tr>',\n              '<td>name</td>',\n              '<td><%- library.get(\"name\") %></td>',\n            '</tr>',\n            '<% if(library.get(\"description\") !== \"\") { %>',\n              '<tr>',\n                '<td>description</td>',\n                '<td><%- library.get(\"description\") %></td>',\n              '</tr>',\n            '<% } %>',\n            '<% if(library.get(\"synopsis\") !== \"\") { %>',\n              '<tr>',\n                '<td>synopsis</td>',\n                '<td><%- library.get(\"synopsis\") %></td>',\n              '</tr>',\n            '<% } %>',\n            '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n              '<tr>',\n                '<td>created</td>',\n                '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n              '</tr>',\n            '<% } %>',\n            '<tr>',\n              '<td>id</td>',\n              '<td><%- library.get(\"id\") %></td>',\n            '</tr>',\n          '</tbody>',\n        '</table>',\n        '<table class=\"grid table table-condensed\">',\n          '<thead>',\n            '<th style=\"width: 25%;\">folder</th>',\n            '<th></th>',\n          '</thead>',\n          '<tbody>',\n            '<tr>',\n              '<td>name</td>',\n              '<td><%- options.folder_name %></td>',\n            '</tr>',\n            '<% if(options.folder_description !== \"\") { %>',\n              '<tr>',\n                '<td>description</td>',\n                '<td><%- options.folder_description %></td>',\n              '</tr>',\n            '<% } %>',\n            '<tr>',\n              '<td>id</td>',\n              '<td><%- options.id %></td>',\n            '</tr>',\n            '</tbody>',\n        '</table>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateNewFolderInModal: function(){\n    return _.template([\n    '<div id=\"new_folder_modal\">',\n      '<form>',\n        '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n        '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n      '</form>',\n    '</div>'\n    ].join(''));\n  },\n\n\n  templateBulkImportInModal : function(){\n    return _.template([\n    '<div>',\n      '<div class=\"library-modal-item\">',\n        'Select history: ',\n        '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n          '<% _.each(histories, function(history) { %>',\n            '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n          '<% }); %>',\n        '</select>',\n      '</div>',\n      '<div class=\"library-modal-item\">',\n        'or create new: ',\n        '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n        '</input>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateImportIntoHistoryProgressBar : function (){\n    return _.template([\n    '<div class=\"import_text\">',\n      'Importing selected items to history <b><%= _.escape(history_name) %></b>',\n    '</div>',\n    '<div class=\"progress\">',\n      '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n        '<span class=\"completion_span\">0% Complete</span>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateAddingDatasetsProgressBar: function (){\n    return _.template([\n    '<div class=\"import_text\">',\n      'Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>',\n    '</div>',\n    '<div class=\"progress\">',\n      '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n        '<span class=\"completion_span\">0% Complete</span>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateDeletingItemsProgressBar: function (){\n    return _.template([\n    '<div class=\"import_text\">',\n    '</div>',\n    '<div class=\"progress\">',\n      '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n        '<span class=\"completion_span\">0% Complete</span>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateBrowserModal: function(){\n    return _.template([\n    '<div id=\"file_browser_modal\">',\n      '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n      '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n      '<div style=\"margin-bottom:1em;\">',\n        '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n          '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n        '</label>',\n        '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n        '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n        '</label>',\n      '</div>',\n      '<div style=\"margin-bottom:1em;\">',\n        '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n          '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n          'Preserve directory structure',\n        '</label>',\n        '<label class=\"checkbox-inline\">',\n          '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n          'Link files instead of copying',\n        '</label>',\n        '<label class=\"checkbox-inline\">',\n          '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n          'Convert line endings to POSIX',\n        '</label>',\n        '<label class=\"checkbox-inline\">',\n          '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n          'Convert spaces to tabs',\n        '</label>',\n      '</div>',\n      '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n        'Select all',\n      '</button>',\n      '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n        'Unselect all',\n      '</button>',\n      '<hr />',\n      // append jstree object here\n      '<div id=\"jstree_browser\">',\n      '</div>',\n      '<hr />',\n      '<p>You can set extension type and genome for all imported datasets at once:</p>',\n      '<div>',\n        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n      '</div>',\n      '<br>',\n      '<div>',\n         '<label class=\"checkbox-inline tag-files\">',\n            'Tag datasets based on file names.',\n            '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n         '</label>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateImportPathModal: function(){\n    return _.template([\n    '<div id=\"file_browser_modal\">',\n      '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n      '<div style=\"margin-bottom: 0.5em;\">',\n        '<label class=\"checkbox-inline\">',\n          '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n          'Preserve directory structure',\n        '</label>',\n        '<label class=\"checkbox-inline\">',\n          '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n          'Link files instead of copying',\n        '</label>',\n        '<br>',\n        '<label class=\"checkbox-inline\">',\n          '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n          'Convert line endings to POSIX',\n        '</label>',\n        '<label class=\"checkbox-inline\">',\n          '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n          'Convert spaces to tabs',\n        '</label>',\n      '</div>',\n      '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n      '<hr />',\n      '<p>You can set extension type and genome for all imported datasets at once:</p>',\n      '<div>',\n        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n      '</div>',\n      '<div>',\n         '<label class=\"checkbox-inline tag-files\">',\n            'Tag datasets based on file names.',\n            '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n         '</label>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateAddFilesFromHistory: function (){\n    return _.template([\n    '<div id=\"add_files_modal\">',\n      '<div>',\n        '1.&nbsp;Select history:&nbsp;',\n        '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n          '<% _.each(histories, function(history) { %>', //history select box\n            '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n          '<% }); %>',\n        '</select>',\n      '</div>',\n      '<br/>',\n      '<div id=\"selected_history_content\">',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateHistoryContents: function (){\n    return _.template([\n    '<p>2.&nbsp;Choose the datasets to import:</p>',\n    '<div>',\n    '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n      'Select all',\n    '</button>',\n    '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n      'Unselect all',\n    '</button>',\n    '</div>',\n    '<br>',\n    '<ul>',\n      '<% _.each(history_contents, function(history_item) { %>',\n        '<% if (history_item.get(\"deleted\") != true ) { %>',\n          '<% var item_name = history_item.get(\"name\") %>',\n          '<% if (history_item.get(\"type\") === \"collection\") { %>',\n              '<% var collection_type = history_item.get(\"collection_type\") %>',\n              '<% if (collection_type === \"list\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                  '<label>',\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                    '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                    '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                  '</label>',\n                '</li>',\n               '<% } else { %>',\n                 '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                    '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                      '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                      '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                    '</span>',\n                  '</li>',\n                '<% } %>',\n          '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n              '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                  '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                  '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                '</label>',\n              '</li>',\n          '<% } %>',\n        '<% } %>',\n      '<% }); %>',\n    '</ul>',\n    ].join(''));\n  },\n\n  templatePaginator: function(){\n    return _.template([\n    '<ul class=\"pagination pagination-sm\">',\n      '<% if ( ( show_page - 1 ) > 0 ) { %>',\n        '<% if ( ( show_page - 1 ) > page_count ) { %>', // we are on higher page than total page count\n          '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n          '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n        '<% } else { %>',\n          '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n          '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n        '<% } %>',\n      '<% } else { %>', // we are on the first page\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n      '<% } %>',\n      '<li class=\"active\">',\n        '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n      '</li>',\n      '<% if ( ( show_page ) < page_count ) { %>',\n        '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n        '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n      '<% } else { %>',\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n      '<% } %>',\n    '</ul>',\n    '<span>',\n      '&nbsp;showing&nbsp;',\n      '<a data-toggle=\"tooltip\" data-placement=\"top\" title=\"Click to change the number of items on page\" class=\"page_size_prompt\">',\n        '<%- items_shown %>',\n      '</a>',\n      '&nbsp;of <%- total_items_count %> items',\n    '</span>'\n    ].join(''));\n  },\n\n});\n\nreturn {\n    FolderToolbarView: FolderToolbarView\n};\n\n});\n"]}