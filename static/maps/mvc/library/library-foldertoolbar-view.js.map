{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["define","el","events","mod_utils","mod_toastr","mod_library_model","mod_select","FolderToolbarView","Backbone","View","extend","defaults","click #toolbtn_create_folder","click #toolbtn_bulk_import","click #include_deleted_datasets_chk","click #toolbtn_bulk_delete","click .toolbtn-show-locinfo","click .page_size_prompt","modal","can_add_library_item","contains_file_or_folder","jstree","total_number","failed_number","disabled_jstree_element","histories","id","select_extension","list_genomes","auto","fetchExtAndGenomes","text","description","mutiple_add_dataset_options","initialize","Galaxy","options","template_defaults","is_admin","user","isAdmin","this","render","_","toolbar_template","templateToolBar","is_anonym","paginator_template","templatePaginator","$","html","config","allow_library_path_paste","library_import_dir","show_page","parseInt","items_shown","renderPaginator","find","page_count","total_items_count","isAnonymous","hide","show","$el","createFolderFromModal","event","preventDefault","closing_events","body","template","tooltip","self","templateNewFolderInModal","create_new_folder_event","title","validate_new_folder","buttons","url_items","fragment","current_folder_id","length","success","folder","serialize_new_folder","folderListView","collection","FolderAsModel","error","history","response","split","url","responseJSON","save","folderDetails","set","type","libraries","add","model","err_msg","modalBulkImport","val","checkedValues","templateBulkImportInModal","that","importAllIntoHistory","info","models","refreshUserHistoriesList","Close","GalaxyHistories","callback","new_history_name","post","root","name","done","history_id","last_used_history_id","history_name","new_history","fail","enableButton","always","processImportToHistory","folder_ids","parentElement","dataset_ids","push","datasets_to_import","historyItem","classList","contains","content","library_dataset_id","data","source","i","library_folder_id","HistoryItem","urlRoot","jQuery","chainCallImportingIntoHistory","initChainCallControl","progressStep","action","getJSON","txt_representation","updateProgress","download","width","Math","round","progress","folder_id","each","format","processDownload","method","param","inputs","addFilesFromHistoryModal","pair","full_path","submit","remove","template_modal","templateAddFilesFromHistory","folder_name","closing_callback","Add","addAllDatasetsFromHistory","fetchAndDisplayHistoryContents","change","target","value","importFromPathsClicked","templateImportPathModal","Import","library_router","navigate","trigger","renderSelectBoxes","list_extensions","get","datatypes","key","description_url","extension","sort","a","b","unshift","genomes","container","css","importFilesFromGalaxyFolderModal","templateBrowserModal","importFromJstreePath","bind","renderJstree","fetch","Jstree","require","core","plugins","types","icon","file","three_state","err_code","warning","preserve_dirs","is","file_type","dbkey","disableButton","paths","valid_paths","trimmed","chainCallImportingFolders","link_data","templateAddingDatasetsProgressBar","templateDeletingItemsProgressBar","templateImportIntoHistoryProgressBar","chain_call_control","all_nodes","get_selected","selected_nodes","select_genome","node","state","disabled","selection_type","li_attr","full_source","chainCallImportingUserdirFiles","history_contents","history_contents_template","templateHistoryContents","contents","reverse","checked_hdas","history_item_types","items_to_add","hid","item_type","history_item_ids","history_item_id","folder_item","Item","from_hdca_id","chainCallAddingHdas","history_item_set","window","location","popped_item","onclick","promise","pop","when","added_hdas","Folder","hdas_set","from_hda_id","chainCallDeletingItems","deleted_items","items_to_delete","include_deleted","updated_item","item","model_class","emit","checkIncludeDeleted","fetchFolder","deleteSelectedItems","undefined","substring","dataset","items_total","showLocInfo","libraryListView","library","parent_library_id","showLocInfoModal","Library","showImportModal","templateLocInfoInModal","importFilesFromPathModal","showPageSizePrompt","preferences","back","folder_page_size","prompt","join"],"mappings":"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ACF,YACF,YACF,SACA,mCACE,kBACA,4GACA,WACF,SACF,UACEkO,KAAK,MAGTtE,qCAAuC,WACrC,MAAOvL,GAAE2B,UACT,4BACE,2EACF,SACA,yBACE,gJACE,mDACF,SACF,UACEkO,KAAK,MAGTxE,kCAAmC,WACjC,MAAOrL,GAAE2B,UACT,4BACE,iFACF,SACA,yBACE,gJACE,mDACF,SACF,UACEkO,KAAK,MAGTvE,iCAAkC,WAChC,MAAOtL,GAAE2B,UACT,4BACA,SACA,yBACE,gJACE,mDACF,SACF,UACEkO,KAAK,MAGTjG,qBAAsB,WACpB,MAAO5J,GAAE2B,UACT,gCACE,0JACA,wLACA,mCACE,oFACE,yGACF,WACA,sFACA,uFACA,WACF,SACA,mCACE,kFACE,yFACA,+BACF,WACA,0EACE,mEACA,gCACF,WACF,SACA,qGACE,aACF,YACA,qGACE,cACF,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACE,gFACA,4EACA,SACJ,UACEkO,KAAK,MAGTrH,wBAAyB,WACvB,MAAOxI,GAAE2B,UACT,gCACE,+JACA,sCACE,4DACE,yFACA,+BACF,WACA,oDACE,mEACA,gCACF,WACF,SACA,uKACA,SACA,kFACA,QACE,gFACA,4EACF,SACF,UACEkO,KAAK,MAGT/H,4BAA6B,WAC3B,MAAO9H,GAAE2B,UACT,6BACE,QACE,oBACA,8EACE,8CACE,mGACF,YACF,YACF,SACA,QACA,sCACA,SACF,UACEkO,KAAK;wZAGTvD,wBAAyB,WACvB,MAAOtM,GAAE2B,UACT,kDACA,OACE,0DACE,oDACE,yDACI,kEACA,0CACE,+GACE,sJACF,QACD,iBACE,6FACG,2GACE,oKACF,UACF,QACF,UACN,iGACI,+GACE,iIACF,QACJ,UACF,UACF,YACF,SACEkO,KAAK,MAGTxP,kBAAmB,WACjB,MAAOL,GAAE2B,UACT,wCACE,uCACE,gDACE,iGACA,wHACF,iBACE,iGACA,2GACF,UACF,iBACE,kHACA,wHACF,UACA,sBACE,0FACF,QACA,4CACE,2GACA,0HACF,iBACE,yHACA,2IACF,UACF,QACA,SACE,sBACA,8HACE,qBACF,OACA,0CACF,WACEkO,KAAK","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["define([\n    \"layout/masthead\",\n    \"utils/utils\",\n    \"libs/toastr\",\n    \"mvc/library/library-model\",\n    \"mvc/ui/ui-select\"\n    ],\nfunction( mod_masthead,\n          mod_utils,\n          mod_toastr,\n          mod_library_model,\n          mod_select\n        ){\n\nvar FolderToolbarView = Backbone.View.extend({\n  el: '#center',\n\n  events: {\n    'click #toolbtn_create_folder'        : 'createFolderFromModal',\n    'click #toolbtn_bulk_import'          : 'modalBulkImport',\n    'click #include_deleted_datasets_chk' : 'checkIncludeDeleted',\n    'click #toolbtn_bulk_delete'          : 'deleteSelectedItems',\n    'click .toolbtn-show-locinfo'         : 'showLocInfo',\n    'click .page_size_prompt'             : 'showPageSizePrompt'\n\n  },\n\n  defaults: {\n    'can_add_library_item'    : false,\n    'contains_file_or_folder' : false,\n    'chain_call_control'      : {\n                                'total_number'  : 0,\n                                'failed_number' : 0\n                              },\n    'disabled_jstree_element' : 'folders'\n  },\n\n  modal : null,\n\n  // directory browsing object\n  jstree: null,\n\n  // user's histories\n  histories : null,\n\n  // genome select\n  select_genome : null,\n\n  // extension select\n  select_extension : null,\n\n  // extension types\n  list_extensions :[],\n\n  // datatype placeholder for extension auto-detection\n  auto: {\n      id          : 'auto',\n      text        : 'Auto-detect',\n      description : 'This system will try to detect the file type automatically.' +\n                    ' If your file is not detected properly as one of the known formats,' +\n                    ' it most likely means that it has some format problems (e.g., different' +\n                    ' number of columns on different rows). You can still coerce the system' +\n                    ' to set your data to the format you think it should be.' +\n                    ' You can also upload compressed files, which will automatically be decompressed.'\n  },\n\n  // genomes\n  list_genomes : [],\n\n  initialize: function(options){\n    this.options = _.defaults( options || {}, this.defaults );\n    this.fetchExtAndGenomes();\n    this.render();\n  },\n\n  render: function(options){\n    this.options = _.extend( this.options, options );\n    var toolbar_template = this.templateToolBar();\n    var template_defaults = {\n        id: this.options.id,\n        is_admin: false,\n        is_anonym: true,\n        mutiple_add_dataset_options: false\n    }\n    if (Galaxy.user){\n      template_defaults.is_admin = Galaxy.user.isAdmin();\n      template_defaults.is_anonym = Galaxy.user.isAnonymous();\n      if ( Galaxy.config.user_library_import_dir !== null || Galaxy.config.allow_library_path_paste !== false || Galaxy.config.library_import_dir !== null ){\n        template_defaults.mutiple_add_dataset_options = true;\n      }\n    }\n    this.$el.html(toolbar_template(template_defaults));\n  },\n\n  /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n  renderPaginator: function( options ){\n      this.options = _.extend( this.options, options );\n      var paginator_template = this.templatePaginator();\n      $(\"body\").find( '.folder-paginator' ).html( paginator_template({\n          id: this.options.id,\n          show_page: parseInt( this.options.show_page ),\n          page_count: parseInt( this.options.page_count ),\n          total_items_count: this.options.total_items_count,\n          items_shown: this.options.items_shown\n      }));\n  },\n\n  configureElements: function(options){\n    this.options = _.extend(this.options, options);\n\n    if (this.options.can_add_library_item === true){\n      $('.add-library-items').show();\n    } else{\n      $('.add-library-items').hide();\n    }\n    if (this.options.contains_file_or_folder === true){\n      if (Galaxy.user){\n        if (!Galaxy.user.isAnonymous()){\n          $('.logged-dataset-manipulation').show();\n          $('.dataset-manipulation').show();\n        } else {\n          $('.dataset-manipulation').show();\n          $('.logged-dataset-manipulation').hide();\n        }\n      } else {\n        $('.logged-dataset-manipulation').hide();\n        $('.dataset-manipulation').hide();\n      }\n    } else {\n      $('.logged-dataset-manipulation').hide();\n      $('.dataset-manipulation').hide();\n    }\n    this.$el.find('[data-toggle]').tooltip();\n  },\n\n  // shows modal for creating folder\n  createFolderFromModal: function( event ){\n    event.preventDefault();\n    event.stopPropagation();\n\n    // create modal\n    var self = this;\n    var template = this.templateNewFolderInModal();\n    this.modal = Galaxy.modal;\n    this.modal.show({\n        closing_events  : true,\n        title           : 'Create New Folder',\n        body            : template(),\n        buttons         : {\n            'Create'    : function() {self.create_new_folder_event();},\n            'Close'     : function() {Galaxy.modal.hide();}\n        }\n    });\n  },\n\n  // create the new folder from modal\n  create_new_folder_event: function(){\n      var folderDetails = this.serialize_new_folder();\n      if (this.validate_new_folder(folderDetails)){\n          var folder = new mod_library_model.FolderAsModel();\n          url_items = Backbone.history.fragment.split('/');\n          current_folder_id = url_items[url_items.length-1];\n          folder.url = folder.urlRoot + current_folder_id ;\n\n          folder.save(folderDetails, {\n            success: function (folder) {\n              Galaxy.modal.hide();\n              mod_toastr.success('Folder created.');\n              folder.set({'type' : 'folder'});\n              Galaxy.libraries.folderListView.collection.add(folder);\n            },\n            error: function(model, response){\n              Galaxy.modal.hide();\n              if (typeof response.responseJSON !== \"undefined\"){\n                mod_toastr.error(response.responseJSON.err_msg);\n              } else {\n                mod_toastr.error('An error ocurred.');\n              }\n            }\n          });\n      } else {\n          mod_toastr.error('Folder\\'s name is missing.');\n      }\n      return false;\n  },\n\n  // serialize data from the modal\n  serialize_new_folder : function(){\n      return {\n          name: $(\"input[name='Name']\").val(),\n          description: $(\"input[name='Description']\").val()\n      };\n  },\n\n  // validate new folder info\n  validate_new_folder: function(folderDetails){\n      return folderDetails.name !== '';\n  },\n\n\n  // show bulk import modal\n  modalBulkImport : function(){\n      var checkedValues = $('#folder_table').find(':checked');\n      if(checkedValues.length === 0){\n          mod_toastr.info('You must select some datasets first.');\n      } else {\n          this.refreshUserHistoriesList(function(that){\n            var template = that.templateBulkImportInModal();\n            that.modal = Galaxy.modal;\n            that.modal.show({\n                closing_events  : true,\n                title           : 'Import into History',\n                body            : template({histories : that.histories.models}),\n                buttons         : {\n                    'Import'    : function() {that.importAllIntoHistory();},\n                    'Close'     : function() {Galaxy.modal.hide();}\n                }\n            });\n          });\n      }\n  },\n\n  refreshUserHistoriesList: function(callback){\n    var that = this;\n    this.histories = new mod_library_model.GalaxyHistories();\n    this.histories.fetch({\n      success: function (){\n        callback(that);\n      },\n      error: function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          mod_toastr.error(response.responseJSON.err_msg);\n        } else {\n          mod_toastr.error('An error ocurred.');\n        }\n      }\n    });\n  },\n\n  /**\n   * Import all selected datasets into history.\n   */\n  importAllIntoHistory : function (){\n    this.modal.disableButton('Import');\n    var new_history_name = this.modal.$('input[name=history_name]').val();\n    var that = this;\n    if (new_history_name !== ''){\n      $.post( Galaxy.root + 'api/histories', {name: new_history_name})\n        .done(function( new_history ) {\n          that.options.last_used_history_id = new_history.id;\n          that.processImportToHistory(new_history.id, new_history.name);\n        })\n        .fail(function( xhr, status, error ) {\n          mod_toastr.error('An error ocurred.');\n        })\n        .always(function() {\n          that.modal.enableButton('Import');\n        });\n    } else {\n      var history_id = $(\"select[name=dataset_import_bulk] option:selected\").val();\n      this.options.last_used_history_id = history_id;\n      var history_name = $(\"select[name=dataset_import_bulk] option:selected\").text();\n      this.processImportToHistory(history_id, history_name);\n      this.modal.enableButton('Import');\n    }\n  },\n\n  processImportToHistory: function( history_id, history_name ){\n    var dataset_ids = [];\n    var folder_ids = [];\n    $('#folder_table').find(':checked').each(function(){\n        if ($(this.parentElement.parentElement).data('id') !== '' && this.parentElement.parentElement.classList.contains('dataset_row') ) {\n            dataset_ids.push($(this.parentElement.parentElement).data('id'));\n        } else if ($(this.parentElement.parentElement).data('id') !== '' && this.parentElement.parentElement.classList.contains('folder_row') ) {\n            folder_ids.push($(this.parentElement.parentElement).data('id'));\n        }\n    });\n    // prepare the dataset objects to be imported\n    var datasets_to_import = [];\n    for (var i = dataset_ids.length - 1; i >= 0; i--) {\n        var library_dataset_id = dataset_ids[i];\n        var historyItem = new mod_library_model.HistoryItem();\n        historyItem.url = historyItem.urlRoot + history_id + '/contents';\n        historyItem.content = library_dataset_id;\n        historyItem.source = 'library';\n        datasets_to_import.push(historyItem);\n    }\n\n    // prepare the folder objects to be imported\n    var folders_to_import = [];\n    for (var i = folder_ids.length - 1; i >= 0; i--) {\n        var library_folder_id = folder_ids[i];\n        var historyItem = new mod_library_model.HistoryItem();\n        historyItem.url = historyItem.urlRoot + history_id + '/contents';\n        historyItem.content = library_folder_id;\n        historyItem.source = 'library_folder';\n        datasets_to_import.push(historyItem);\n    }\n\n    this.initChainCallControl( { length: datasets_to_import.length, action: 'to_history', history_name: history_name } );\n    // set the used history as current so user will see the last one\n    // that he imported into in the history panel on the 'analysis' page\n    jQuery.getJSON( Galaxy.root + 'history/set_as_current?id=' + history_id  );\n    this.chainCallImportingIntoHistory( datasets_to_import, history_name );\n  },\n\n  /**\n   * Update the progress bar in modal window.\n   */\n  updateProgress: function(){\n      this.progress += this.progressStep;\n      $( '.progress-bar-import' ).width( Math.round( this.progress ) + '%' );\n      txt_representation = Math.round( this.progress ) + '% Complete';\n      $( '.completion_span' ).text( txt_representation );\n  },\n\n  /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n  download : function( folder_id, format ){\n    var dataset_ids = [];\n    var folder_ids = [];\n        $( '#folder_table' ).find( ':checked' ).each( function(){\n            if ( $(this.parentElement.parentElement).data('id') !== '' && this.parentElement.parentElement.classList.contains('dataset_row') ) {\n                dataset_ids.push( $(this.parentElement.parentElement).data('id') );\n            } else if ( $(this.parentElement.parentElement).data('id') !== '' && this.parentElement.parentElement.classList.contains('folder_row') ) {\n                folder_ids.push( $(this.parentElement.parentElement).data('id') );\n            }\n        } );\n    var url = Galaxy.root + 'api/libraries/datasets/download/' + format;\n    var data = { 'ld_ids' : dataset_ids, 'folder_ids' : folder_ids };\n    this.processDownload( url, data, 'get' );\n  },\n\n  /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n  processDownload: function( url, data, method ){\n    if ( url && data ){\n      // data can be string of parameters or array/object\n      data = typeof data === 'string' ? data : $.param( data );\n      // split params into form inputs\n      var inputs = '';\n      $.each( data.split( '&' ), function(){\n              var pair = this.split( '=' );\n              inputs+='<input type=\"hidden\" name=\"'+ pair[0] +'\" value=\"'+ pair[1] +'\" />';\n      });\n      // send request\n      $('<form action=\"'+ url +'\" method=\"'+ (method||'post') +'\">'+inputs+'</form>')\n      .appendTo( 'body' ).submit().remove();\n      mod_toastr.info( 'Your download will begin soon.' );\n    } else {\n      mod_toastr.error( 'An error occurred.' );\n    }\n  },\n\n  addFilesFromHistoryModal: function(){\n    this.refreshUserHistoriesList( function( self ){\n      self.modal = Galaxy.modal;\n      var template_modal = self.templateAddFilesFromHistory();\n      var folder_name = self.options.full_path[self.options.full_path.length - 1][1]\n      self.modal.show({\n          closing_events  : true,\n          title           : 'Adding datasets from your history to folder ' + folder_name,\n          body            : template_modal({histories: self.histories.models}),\n          buttons         : {\n              'Add'       : function() {self.addAllDatasetsFromHistory();},\n              'Close'     : function() {Galaxy.modal.hide();}\n          },\n          closing_callback: function(){\n            Galaxy.libraries.library_router.back();\n          }\n      });\n\n      // user should always have a history, even anonymous user\n      if (self.histories.models.length > 0){\n        self.fetchAndDisplayHistoryContents(self.histories.models[0].id);\n        $( \"#dataset_add_bulk\" ).change(function(event) {\n          self.fetchAndDisplayHistoryContents(event.target.value);\n        });\n      } else {\n        mod_toastr.error( 'An error ocurred.' );\n      }\n    });\n  },\n\n  /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n  importFilesFromPathModal: function(){\n    var that = this;\n    this.modal = Galaxy.modal;\n    var template_modal = this.templateImportPathModal();\n    this.modal.show({\n        closing_events  : true,\n        title           : 'Please enter paths to import',\n        body            : template_modal({}),\n        buttons         : {\n            'Import'    : function() { that.importFromPathsClicked(that); },\n            'Close'     : function() { Galaxy.modal.hide(); }\n        },\n        closing_callback: function(){\n          //  TODO: should not trigger routes outside of the router\n          Galaxy.libraries.library_router.navigate( 'folders/' + that.id, { trigger: true } );\n        }\n    });\n    this.renderSelectBoxes();\n  },\n\n  /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n  fetchExtAndGenomes: function(){\n    var that = this;\n    mod_utils.get({\n        url      :  Galaxy.root + \"api/datatypes?extension_only=False\",\n        success  :  function( datatypes ) {\n                        that.list_extensions = [];\n                        for (key in datatypes) {\n                            that.list_extensions.push({\n                                id              : datatypes[key].extension,\n                                text            : datatypes[key].extension,\n                                description     : datatypes[key].description,\n                                description_url : datatypes[key].description_url\n                            });\n                        }\n                        that.list_extensions.sort(function(a, b) {\n                            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                        });\n                        that.list_extensions.unshift(that.auto);\n                    },\n        cache    : true\n      });\n    mod_utils.get({\n        url     :    Galaxy.root + \"api/genomes\",\n        success : function( genomes ) {\n                    that.list_genomes = [];\n                    for ( key in genomes ) {\n                        that.list_genomes.push({\n                            id      : genomes[key][1],\n                            text    : genomes[key][0]\n                        });\n                    }\n                    that.list_genomes.sort(function(a, b) {\n                        return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                    });\n                },\n        cache   : true\n    });\n  },\n\n  renderSelectBoxes: function(){\n    // This won't work properly unlesss we already have the data fetched.\n    // See this.fetchExtAndGenomes()\n    // TODO switch to common resources:\n    // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n    var that = this;\n    this.select_genome = new mod_select.View( {\n        css: 'library-genome-select',\n        data: that.list_genomes,\n        container: Galaxy.modal.$el.find( '#library_genome_select' ),\n        value: '?'\n    } );\n    this.select_extension = new mod_select.View({\n      css: 'library-extension-select',\n      data: that.list_extensions,\n      container: Galaxy.modal.$el.find( '#library_extension_select' ),\n      value: 'auto'\n    });\n  },\n\n  /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n  importFilesFromGalaxyFolderModal: function( options ){\n    var that = this;\n    var template_modal = this.templateBrowserModal();\n    this.modal = Galaxy.modal;\n    this.modal.show({\n      closing_events  : true,\n      title           : 'Please select folders or files',\n      body            : template_modal({}),\n      buttons         : {\n          'Import'    : function() {\n            that.importFromJstreePath( that, options );\n          },\n          'Close'     : function() {\n            Galaxy.modal.hide();\n          }\n      },\n      closing_callback: function(){\n        //  TODO: should not trigger routes outside of the router\n        Galaxy.libraries.library_router.navigate('folders/' + that.id, {trigger: true});\n      }\n    });\n\n    $('.libimport-select-all').bind(\"click\", function(){\n      $('#jstree_browser').jstree(\"check_all\");\n    });\n    $('.libimport-select-none').bind(\"click\", function(){\n      $('#jstree_browser').jstree(\"uncheck_all\");\n    });\n\n    this.renderSelectBoxes();\n    options.disabled_jstree_element = 'folders';\n    this.renderJstree( options );\n\n    $( 'input[type=radio]' ).change( function( event ){\n        if (event.target.value ==='jstree-disable-folders') {\n          options.disabled_jstree_element = 'folders';\n          that.renderJstree( options );\n          $('.jstree-folders-message').hide();\n          $('.jstree-preserve-structure').hide();\n          $('.jstree-link-files').hide();\n          $('.jstree-files-message').show();\n        } else if ( event.target.value ==='jstree-disable-files' ){\n          $('.jstree-files-message').hide();\n          $('.jstree-folders-message').show();\n          $('.jstree-link-files').show();\n          $('.jstree-preserve-structure').show();\n          options.disabled_jstree_element = 'files';\n          that.renderJstree( options );\n        }\n      }\n    );\n  },\n\n  /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n  renderJstree: function( options ){\n    var that = this;\n    this.options = _.extend( this.options, options );\n    var target = options.source || 'userdir';\n    var disabled_jstree_element = this.options.disabled_jstree_element;\n    this.jstree = new mod_library_model.Jstree();\n    this.jstree.url = this.jstree.urlRoot +\n                        '?target=' + target +\n                        '&format=jstree' +\n                        '&disable=' + disabled_jstree_element;\n    this.jstree.fetch({\n      success: function(model, response){\n        // This is to prevent double jquery load. I think. Carl is magician.\n        define( 'jquery', function(){ return jQuery; });\n        // Now we need jstree, time to lazy load it.\n        require([ 'libs/jquery/jstree' ], function(jstree){\n          $('#jstree_browser').jstree(\"destroy\");\n          $('#jstree_browser').jstree({\n            'core':{\n              'data': model\n            },\n            'plugins': ['types', 'checkbox'],\n            'types': {\n              \"folder\": {\n                \"icon\": \"jstree-folder\"\n              },\n              \"file\": {\n                \"icon\": \"jstree-file\"\n              }\n            },\n            'checkbox': {\n              three_state: false\n            }\n          });\n        });\n      },\n      error: function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          if (response.responseJSON.err_code === 404001){\n            mod_toastr.warning(response.responseJSON.err_msg);\n          } else{\n            mod_toastr.error(response.responseJSON.err_msg);\n          }\n        } else {\n          mod_toastr.error('An error ocurred.');\n        }\n      }\n    })\n  },\n\n  /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n  importFromPathsClicked: function(){\n    var preserve_dirs = this.modal.$el.find('.preserve-checkbox').is(':checked');\n    var link_data = this.modal.$el.find('.link-checkbox').is(':checked');\n    var file_type = this.select_extension.value();\n    var dbkey = this.select_genome.value();\n    var paths = $('textarea#import_paths').val();\n    var valid_paths = [];\n    if (!paths){\n      mod_toastr.info('Please enter a path relative to Galaxy root.');\n    } else {\n      this.modal.disableButton('Import');\n      paths = paths.split('\\n');\n      for (var i = paths.length - 1; i >= 0; i--) {\n        trimmed = paths[i].trim();\n        if (trimmed.length!==0){\n          valid_paths.push(trimmed);\n        }\n      };\n      this.initChainCallControl( { length: valid_paths.length, action: 'adding_datasets' } );\n      this.chainCallImportingFolders( { paths: valid_paths,\n                                        preserve_dirs: preserve_dirs,\n                                        link_data: link_data,\n                                        source: 'admin_path',\n                                        file_type: file_type,\n                                        dbkey: dbkey } );\n    }\n  },\n\n  /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n  initChainCallControl: function( options ){\n    var template;\n    switch( options.action ){\n      case \"adding_datasets\":\n        template = this.templateAddingDatasetsProgressBar();\n        this.modal.$el.find( '.modal-body' ).html( template( { folder_name : this.options.folder_name } ) );\n        break;\n      case \"deleting_datasets\":\n        template = this.templateDeletingItemsProgressBar();\n        this.modal.$el.find( '.modal-body' ).html( template() );\n        break;\n      case \"to_history\":\n        template = this.templateImportIntoHistoryProgressBar();\n        this.modal.$el.find( '.modal-body' ).html( template( { history_name : options.history_name } ) );\n        break;\n      default:\n        Galaxy.emit.error( 'Wrong action specified.', 'datalibs');\n        break;\n    }\n\n    // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n    // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n    this.progress = 0;\n    this.progressStep = 100 / options.length;\n    this.options.chain_call_control.total_number = options.length;\n    this.options.chain_call_control.failed_number = 0;\n  },\n\n  /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n  importFromJstreePath: function ( that, options ){\n    var all_nodes = $( '#jstree_browser' ).jstree().get_selected( true );\n    // remove the disabled elements that could have been trigerred with the 'select all'\n    selected_nodes = _.filter(all_nodes, function(node){ return node.state.disabled == false; })\n    var preserve_dirs = this.modal.$el.find( '.preserve-checkbox' ).is( ':checked' );\n    var link_data = this.modal.$el.find( '.link-checkbox' ).is( ':checked' );\n    var file_type = this.select_extension.value();\n    var dbkey = this.select_genome.value();\n    var selection_type = selected_nodes[0].type;\n    var paths = [];\n    if ( selected_nodes.length < 1 ){\n      mod_toastr.info( 'Please select some items first.' );\n    } else {\n      this.modal.disableButton( 'Import' );\n      for ( var i = selected_nodes.length - 1; i >= 0; i-- ){\n        if ( selected_nodes[i].li_attr.full_path !== undefined ){\n          paths.push( selected_nodes[i].li_attr.full_path );\n        }\n      }\n      this.initChainCallControl( { length: paths.length, action: 'adding_datasets' } );\n      if ( selection_type === 'folder' ){\n        var full_source = options.source + '_folder';\n        this.chainCallImportingFolders( { paths: paths,\n                                          preserve_dirs: preserve_dirs,\n                                          link_data: link_data,\n                                          source: full_source,\n                                          file_type: file_type,\n                                          dbkey: dbkey } );\n      } else if ( selection_type === 'file' ){\n        var full_source = options.source + '_file';\n        this.chainCallImportingUserdirFiles( { paths : paths,\n                                               file_type: file_type,\n                                               dbkey: dbkey,\n                                               source: full_source } );\n      }\n    }\n  },\n\n  fetchAndDisplayHistoryContents: function(history_id){\n    var history_contents = new mod_library_model.HistoryContents({id:history_id});\n    var self = this;\n    history_contents.fetch({\n      success: function(history_contents){\n        var history_contents_template = self.templateHistoryContents();\n        self.histories.get(history_id).set({'contents' : history_contents});\n        self.modal.$el.find('#selected_history_content').html(history_contents_template({history_contents: history_contents.models.reverse()}));\n      },\n      error: function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          mod_toastr.error(response.responseJSON.err_msg);\n        } else {\n          mod_toastr.error('An error ocurred.');\n        }\n      }\n    });\n  },\n\n  /**\n   * Import all selected datasets from history into the current folder.\n   */\n  addAllDatasetsFromHistory : function (){\n    var checked_hdas = this.modal.$el.find( '#selected_history_content' ).find( ':checked' );\n    var history_item_ids = [];  // can be hda or hdca\n    var history_item_types = [];\n    var items_to_add = [];\n    if ( checked_hdas.length < 1 ){\n      mod_toastr.info( 'You must select some datasets first.' );\n    } else {\n      this.modal.disableButton( 'Add' );\n      checked_hdas.each(function(){\n        var hid = $( this.parentElement ).data( 'id' );\n        if ( hid ) {\n          var item_type = $( this.parentElement ).data( 'name' );\n          history_item_ids.push( hid );\n          history_item_types.push( item_type );\n        }\n      });\n      for ( var i = history_item_ids.length - 1; i >= 0; i-- ) {\n        history_item_id = history_item_ids[i];\n        var folder_item = new mod_library_model.Item();\n        folder_item.url = Galaxy.root + 'api/folders/' + this.options.id + '/contents';\n        if (history_item_types[i] === 'collection') {\n          folder_item.set({'from_hdca_id': history_item_id});\n        } else {\n          folder_item.set({'from_hda_id': history_item_id});\n        }\n        items_to_add.push(folder_item);\n      }\n      this.initChainCallControl( { length: items_to_add.length, action: 'adding_datasets' } );\n      this.chainCallAddingHdas( items_to_add );\n    }\n  },\n\n  /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n  chainCallImportingIntoHistory: function( history_item_set, history_name ){\n    var self = this;\n    var popped_item = history_item_set.pop();\n    if ( typeof popped_item == \"undefined\" ) {\n      if ( this.options.chain_call_control.failed_number === 0 ){\n        mod_toastr.success( 'Selected datasets imported into history. Click this to start analyzing it.', '', { onclick: function() { window.location=Galaxy.root } } );\n      } else if ( this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number ){\n        mod_toastr.error( 'There was an error and no datasets were imported into history.' );\n      } else if ( this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number ){\n        mod_toastr.warning( 'Some of the datasets could not be imported into history. Click this to see what was imported.', '', { onclick: function() { window.location=Galaxy.root } } );\n      }\n      Galaxy.modal.hide();\n      return true;\n    }\n    var promise = $.when( popped_item.save( { content: popped_item.content, source: popped_item.source } ) );\n\n    promise.done( function(){\n              self.updateProgress();\n              self.chainCallImportingIntoHistory( history_item_set, history_name );\n            } )\n            .fail( function(){\n              self.options.chain_call_control.failed_number += 1;\n              self.updateProgress();\n              self.chainCallImportingIntoHistory( history_item_set, history_name );\n            } );\n  },\n\n  /**\n   * Take the array of paths and createa request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths           paths relative to user folder on Galaxy\n   */\n  chainCallImportingUserdirFiles: function( options ){\n\n    var that = this;\n    var popped_item = options.paths.pop();\n    if ( typeof popped_item === \"undefined\" ) {\n      if ( this.options.chain_call_control.failed_number === 0 ){\n        mod_toastr.success( 'Selected files imported into the current folder' );\n        Galaxy.modal.hide();\n      } else {\n        mod_toastr.error( 'An error occured.' );\n      }\n      return true;\n    }\n    var promise = $.when( $.post( Galaxy.root + 'api/libraries/datasets?encoded_folder_id=' + that.id +\n                                                       '&source=' + options.source +\n                                                       '&path=' + popped_item +\n                                                       '&file_type=' + options.file_type +\n                                                       '&dbkey=' + options.dbkey ) )\n    promise.done( function( response ){\n              that.updateProgress();\n              that.chainCallImportingUserdirFiles( options );\n            } )\n            .fail( function(){\n              that.options.chain_call_control.failed_number += 1;\n              that.updateProgress();\n              that.chainCallImportingUserdirFiles( options );\n            } );\n  },\n\n  /**\n   * Take the array of paths and createa request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths           paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs indicates whether to preserve folder structure\n   * @param  {boolean} link_data     copy files to Galaxy or link instead\n   * @param  {str} source            string representing what type of folder\n   *                                 is the source of import\n   */\n  chainCallImportingFolders: function( options ){\n    // TODO need to check which paths to call\n    var that = this;\n    var popped_item = options.paths.pop();\n    if (typeof popped_item == \"undefined\") {\n      if (this.options.chain_call_control.failed_number === 0){\n        mod_toastr.success('Selected folders and their contents imported into the current folder.');\n        Galaxy.modal.hide();\n      } else {\n        // TODO better error report\n        mod_toastr.error('An error occured.');\n      }\n      return true;\n    }\n    var promise = $.when( $.post( Galaxy.root + 'api/libraries/datasets?encoded_folder_id=' + that.id +\n                                                          '&source=' + options.source +\n                                                          '&path=' + popped_item +\n                                                          '&preserve_dirs=' + options.preserve_dirs +\n                                                          '&link_data=' + options.link_data +\n                                                          '&file_type=' + options.file_type +\n                                                          '&dbkey=' + options.dbkey ) )\n    promise.done(function(response){\n              that.updateProgress();\n              that.chainCallImportingFolders( options );\n            })\n            .fail(function(){\n              that.options.chain_call_control.failed_number += 1;\n              that.updateProgress();\n              that.chainCallImportingFolders( options );\n            });\n  },\n\n  /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n  chainCallAddingHdas: function( hdas_set ){\n    var self = this;\n    this.added_hdas = new mod_library_model.Folder();\n    var popped_item = hdas_set.pop();\n    if ( typeof popped_item == \"undefined\" ) {\n      if ( this.options.chain_call_control.failed_number === 0 ){\n        mod_toastr.success( 'Selected datasets from history added to the folder' );\n      } else if ( this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number ){\n        mod_toastr.error( 'There was an error and no datasets were added to the folder.' );\n      } else if ( this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number ){\n        mod_toastr.warning( 'Some of the datasets could not be added to the folder' );\n      }\n      Galaxy.modal.hide();\n      return this.added_hdas;\n    }\n    var promise = $.when( popped_item.save( { from_hda_id: popped_item.get( 'from_hda_id' ) } ) );\n\n    promise.done( function( model ){\n              Galaxy.libraries.folderListView.collection.add( model );\n              self.updateProgress();\n              self.chainCallAddingHdas( hdas_set );\n            })\n            .fail( function(){\n              self.options.chain_call_control.failed_number += 1;\n              self.updateProgress();\n              self.chainCallAddingHdas( hdas_set );\n            });\n  },\n\n  /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n  chainCallDeletingItems: function( items_to_delete ){\n  var self = this;\n  this.deleted_items = new mod_library_model.Folder();\n  var popped_item = items_to_delete.pop();\n  if ( typeof popped_item === \"undefined\" ) {\n    if ( this.options.chain_call_control.failed_number === 0 ){\n      mod_toastr.success( 'Selected items were deleted.' );\n    } else if ( this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number ){\n      mod_toastr.error( 'There was an error and no items were deleted. Please make sure you have sufficient permissions.' );\n    } else if ( this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number ){\n      mod_toastr.warning( 'Some of the items could not be deleted. Please make sure you have sufficient permissions.' );\n    }\n    Galaxy.modal.hide();\n    return this.deleted_items;\n  }\n  var promise = $.when( popped_item.destroy() );\n\n  promise.done( function( item ){\n            Galaxy.libraries.folderListView.collection.remove( popped_item.id );\n            self.updateProgress();\n            // add the deleted item to collection, triggers rendering\n            if ( Galaxy.libraries.folderListView.options.include_deleted ){\n              var updated_item = null;\n              if (item.type === 'folder' || item.model_class === 'LibraryFolder'){\n                updated_item = new mod_library_model.FolderAsModel( item );\n              } else if (item.type === 'file' || item.model_class === 'LibraryDataset'){\n                updated_item = new mod_library_model.Item( item );\n              } else {\n                Galaxy.emit.error('Unknown library item type found.', 'datalibs');\n                Galaxy.emit.error(item.type || item.model_class, 'datalibs');\n              }\n              Galaxy.libraries.folderListView.collection.add( updated_item );\n            }\n            self.chainCallDeletingItems( items_to_delete );\n          })\n          .fail( function(){\n            self.options.chain_call_control.failed_number += 1;\n            self.updateProgress();\n            self.chainCallDeletingItems( items_to_delete );\n          });\n  },\n\n  /**\n   * Handles the click on 'show deleted' checkbox\n   */\n  checkIncludeDeleted: function(event){\n    if (event.target.checked){\n      Galaxy.libraries.folderListView.fetchFolder({include_deleted: true});\n    } else{\n      Galaxy.libraries.folderListView.fetchFolder({include_deleted: false});\n    }\n  },\n\n  /**\n   * Delete the selected items. Atomic. One by one.\n   */\n  deleteSelectedItems: function(){\n    var checkedValues = $('#folder_table').find(':checked');\n    if(checkedValues.length === 0){\n        mod_toastr.info('You must select at least one item for deletion.');\n    } else {\n      var template = this.templateDeletingItemsProgressBar();\n      this.modal = Galaxy.modal;\n      this.modal.show({\n          closing_events  : true,\n          title           : 'Deleting selected items',\n          body            : template({}),\n          buttons         : {\n              'Close'     : function() {Galaxy.modal.hide();}\n          }\n      });\n      // init the control counters\n      this.options.chain_call_control.total_number = 0;\n      this.options.chain_call_control.failed_number = 0;\n\n      var dataset_ids = [];\n      var folder_ids = [];\n      checkedValues.each(function(){\n          if ($(this.parentElement.parentElement).data('id') !== undefined) {\n              if ($(this.parentElement.parentElement).data('id').substring(0,1) == 'F'){\n                folder_ids.push($(this.parentElement.parentElement).data('id'));\n              } else {\n                dataset_ids.push($(this.parentElement.parentElement).data('id'));\n              }\n          }\n      });\n      // init the progress bar\n      var items_total = dataset_ids.length + folder_ids.length\n      this.progressStep = 100 / items_total;\n      this.progress = 0;\n\n      // prepare the dataset items to be added\n      var items_to_delete = [];\n      for (var i = dataset_ids.length - 1; i >= 0; i--) {\n          var dataset = new mod_library_model.Item({id:dataset_ids[i]});\n          items_to_delete.push(dataset);\n      }\n      for (var i = folder_ids.length - 1; i >= 0; i--) {\n          var folder = new mod_library_model.FolderAsModel({id:folder_ids[i]});\n          items_to_delete.push(folder);\n      }\n\n      this.options.chain_call_control.total_number = items_total.length;\n      // call the recursive function to call ajax one after each other (request FIFO queue)\n      this.chainCallDeletingItems(items_to_delete);\n    }\n  },\n\n\n  showLocInfo: function(){\n    var library = null;\n    var that = this;\n    if (Galaxy.libraries.libraryListView !== null){\n      library = Galaxy.libraries.libraryListView.collection.get(this.options.parent_library_id);\n      this.showLocInfoModal(library);\n    } else {\n      library = new mod_library_model.Library({id: this.options.parent_library_id});\n      library.fetch({\n        success: function(){\n          that.showLocInfoModal(library);\n        },\n        error: function(model, response){\n          if (typeof response.responseJSON !== \"undefined\"){\n            mod_toastr.error(response.responseJSON.err_msg);\n          } else {\n            mod_toastr.error('An error ocurred.');\n          }\n        }\n      })\n    }\n  },\n\n  showLocInfoModal: function(library){\n    var that = this;\n    var template = this.templateLocInfoInModal();\n    this.modal = Galaxy.modal;\n    this.modal.show({\n        closing_events  : true,\n        title           : 'Location Details',\n        body            : template({library: library, options: that.options}),\n        buttons         : {\n            'Close'     : function() {Galaxy.modal.hide();}\n        }\n    });\n  },\n\n  showImportModal: function(options){\n    switch(options.source){\n      case \"history\":\n        this.addFilesFromHistoryModal();\n        break;\n      case \"importdir\":\n        this.importFilesFromGalaxyFolderModal( { source: 'importdir' } );\n        break;\n      case \"path\":\n        this.importFilesFromPathModal();\n        break;\n      case \"userdir\":\n        this.importFilesFromGalaxyFolderModal( { source: 'userdir' } );\n        break;\n      default:\n        Galaxy.libraries.library_router.back();\n        mod_toastr.error('Invalid import source.');\n        break;\n    }\n  },\n\n  /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n  showPageSizePrompt: function(){\n    var folder_page_size = prompt( 'How many items per page do you want to see?', Galaxy.libraries.preferences.get( 'folder_page_size' ) );\n    if ( ( folder_page_size != null ) && ( folder_page_size == parseInt( folder_page_size ) ) ) {\n        Galaxy.libraries.preferences.set( { 'folder_page_size': parseInt( folder_page_size ) } );\n        Galaxy.libraries.folderListView.render( { id: this.options.id, show_page: 1 } );\n    }\n  },\n\n  templateToolBar: function(){\n    return _.template([\n    // container start\n    '<div class=\"library_style_container\">',\n      // toolbar start\n      '<div id=\"library_toolbar\">',\n        '<form class=\"form-inline\" role=\"form\">',\n          '<span><strong>DATA LIBRARIES</strong></span>',\n          // paginator will append here\n          '<span class=\"library-paginator folder-paginator\"></span>',\n          '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n            '<label>',\n              '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n            '</label>',\n          '</div>',\n          '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n            '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n          '</button>',\n          '<% if(mutiple_add_dataset_options) { %>',\n          '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n            '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n              '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n            '</button>',\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n              '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n              '<% if(Galaxy.config.user_library_import_dir !== null) { %>',\n                '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n              '<% } %>',\n              '<% if(Galaxy.config.allow_library_path_paste) { %>',\n                '<li class=\"divider\"></li>',\n                '<li class=\"dropdown-header\">Admins only</li>',\n                '<% if(Galaxy.config.library_import_dir !== null) { %>',\n                  '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                '<% } %>',\n                '<% if(Galaxy.config.allow_library_path_paste) { %>',\n                  '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                '<% } %>',\n              '<% } %>',\n            '</ul>',\n          '</div>',\n          '<% } else { %>',\n            '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n              '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n            '</a>',\n          '<% } %>',\n          '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n            '<span class=\"fa fa-book\"></span>',\n            '&nbsp;to History',\n          '</button>',\n          '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n            '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n              '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n            '</button>',\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n              '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n              '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n              '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n            '</ul>',\n          '</div>',\n            '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n            '<span class=\"fa fa-times\"></span> Delete</button>',\n            '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n              '<span class=\"fa fa-info-circle\"></span>',\n              '&nbsp;Details',\n            '</button>',\n            '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Visit Libraries Wiki\">',\n              '<a href=\"https://wiki.galaxyproject.org/DataLibraries/screen/FolderContents\" target=\"_blank\">',\n                '<button class=\"primary-button\" type=\"button\">',\n                  '<span class=\"fa fa-question-circle\"></span>',\n                  '&nbsp;Help',\n                '</button>',\n              '</a>',\n            '</span>',\n          '</div>',\n        '</form>',\n      // toolbar end\n      '<div id=\"folder_items_element\">',\n      '</div>',\n      // paginator will append here\n      '<div class=\"folder-paginator paginator-bottom\"></div>',\n    // container end\n    '</div>',\n    ].join(''));\n  },\n\n  templateLocInfoInModal: function(){\n    return _.template([\n      '<div>',\n        '<table class=\"grid table table-condensed\">',\n          '<thead>',\n            '<th style=\"width: 25%;\">library</th>',\n            '<th></th>',\n          '</thead>',\n          '<tbody>',\n            '<tr>',\n              '<td>name</td>',\n              '<td><%- library.get(\"name\") %></td>',\n            '</tr>',\n            '<% if(library.get(\"description\") !== \"\") { %>',\n              '<tr>',\n                '<td>description</td>',\n                '<td><%- library.get(\"description\") %></td>',\n              '</tr>',\n            '<% } %>',\n            '<% if(library.get(\"synopsis\") !== \"\") { %>',\n              '<tr>',\n                '<td>synopsis</td>',\n                '<td><%- library.get(\"synopsis\") %></td>',\n              '</tr>',\n            '<% } %>',\n            '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n              '<tr>',\n                '<td>created</td>',\n                '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n              '</tr>',\n            '<% } %>',\n            '<tr>',\n              '<td>id</td>',\n              '<td><%- library.get(\"id\") %></td>',\n            '</tr>',\n          '</tbody>',\n        '</table>',\n        '<table class=\"grid table table-condensed\">',\n          '<thead>',\n            '<th style=\"width: 25%;\">folder</th>',\n            '<th></th>',\n          '</thead>',\n          '<tbody>',\n            '<tr>',\n              '<td>name</td>',\n              '<td><%- options.folder_name %></td>',\n            '</tr>',\n            '<% if(options.folder_description !== \"\") { %>',\n              '<tr>',\n                '<td>description</td>',\n                '<td><%- options.folder_description %></td>',\n              '</tr>',\n            '<% } %>',\n            '<tr>',\n              '<td>id</td>',\n              '<td><%- options.id %></td>',\n            '</tr>',\n            '</tbody>',\n        '</table>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateNewFolderInModal: function(){\n    return _.template([\n    '<div id=\"new_folder_modal\">',\n      '<form>',\n        '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n        '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n      '</form>',\n    '</div>'\n    ].join(''));\n  },\n\n\n  templateBulkImportInModal : function(){\n    return _.template([\n    '<div>',\n      '<div class=\"library-modal-item\">',\n        'Select history: ',\n        '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n          '<% _.each(histories, function(history) { %>',\n            '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n          '<% }); %>',\n        '</select>',\n      '</div>',\n      '<div class=\"library-modal-item\">',\n        'or create new: ',\n        '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n        '</input>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateImportIntoHistoryProgressBar : function (){\n    return _.template([\n    '<div class=\"import_text\">',\n      'Importing selected items to history <b><%= _.escape(history_name) %></b>',\n    '</div>',\n    '<div class=\"progress\">',\n      '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n        '<span class=\"completion_span\">0% Complete</span>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateAddingDatasetsProgressBar: function (){\n    return _.template([\n    '<div class=\"import_text\">',\n      'Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>',\n    '</div>',\n    '<div class=\"progress\">',\n      '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n        '<span class=\"completion_span\">0% Complete</span>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateDeletingItemsProgressBar: function (){\n    return _.template([\n    '<div class=\"import_text\">',\n    '</div>',\n    '<div class=\"progress\">',\n      '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n        '<span class=\"completion_span\">0% Complete</span>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateBrowserModal: function(){\n    return _.template([\n    '<div id=\"file_browser_modal\">',\n      '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n      '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n      '<div style=\"margin-bottom:1em;\">',\n        '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n          '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n        '</label>',\n        '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n        '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n        '</label>',\n      '</div>',\n      '<div style=\"margin-bottom:1em;\">',\n        '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n          '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n          'Preserve directory structure',\n        '</label>',\n        '<label class=\"checkbox-inline jstree-link-files\" style=\"display:none;\">',\n          '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n          'Link files instead of copying',\n        '</label>',\n      '</div>',\n      '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n        'Select all',\n      '</button>',\n      '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n        'Select none',\n      '</button>',\n      '<hr />',\n      // append jstree object here\n      '<div id=\"jstree_browser\">',\n      '</div>',\n      '<hr />',\n      '<p>You can set extension type and genome for all imported datasets at once:</p>',\n      '<div>',\n        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n        '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateImportPathModal: function(){\n    return _.template([\n    '<div id=\"file_browser_modal\">',\n      '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n      '<div style=\"margin-bottom: 0.5em;\">',\n        '<label class=\"checkbox-inline jstree-preserve-structure\">',\n          '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n          'Preserve directory structure',\n        '</label>',\n        '<label class=\"checkbox-inline jstree-link-files\">',\n          '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n          'Link files instead of copying',\n        '</label>',\n      '</div>',\n      '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n      '<hr />',\n      '<p>You can set extension type and genome for all imported datasets at once:</p>',\n      '<div>',\n        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateAddFilesFromHistory: function (){\n    return _.template([\n    '<div id=\"add_files_modal\">',\n      '<div>',\n        'Select history:  ',\n        '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n          '<% _.each(histories, function(history) { %>', //history select box\n            '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n          '<% }); %>',\n        '</select>',\n      '</div>',\n      '<br/>',\n      '<div id=\"selected_history_content\">',\n      '</div>',\n    '</div>'\n    ].join(''));\n  },\n\n  templateHistoryContents: function (){\n    return _.template([\n    '<strong>Choose the datasets to import:</strong>',\n    '<ul>',\n      '<% _.each(history_contents, function(history_item) { %>',\n        '<% if (history_item.get(\"deleted\") != true ) { %>',\n          '<% if (history_item.get(\"type\") === \"collection\") { %>',\n              '<% var collection_type = history_item.get(\"collection_type\") %>',\n              '<% if (collection_type === \"list\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                  '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: <%= _.escape(history_item.get(\"name\")) %> (Dataset Collection)',\n                '</li>',\n               '<% } else { %>',\n                 '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                    '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                      ' <%= _.escape(history_item.get(\"hid\")) %>: <%= _.escape(history_item.get(\"name\")) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                    '</span>',\n                  '</li>',\n                '<% } %>',\n          '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n              '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: <%= _.escape(history_item.get(\"name\")) %>',\n              '</li>',\n          '<% } %>',\n        '<% } %>',\n      '<% }); %>',\n    '</ul>'\n    ].join(''));\n  },\n\n  templatePaginator: function(){\n    return _.template([\n    '<ul class=\"pagination pagination-sm\">',\n      '<% if ( ( show_page - 1 ) > 0 ) { %>',\n        '<% if ( ( show_page - 1 ) > page_count ) { %>', // we are on higher page than total page count\n          '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n          '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n        '<% } else { %>',\n          '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n          '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n        '<% } %>',\n      '<% } else { %>', // we are on the first page\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n      '<% } %>',\n      '<li class=\"active\">',\n        '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n      '</li>',\n      '<% if ( ( show_page ) < page_count ) { %>',\n        '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n        '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n      '<% } else { %>',\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n      '<% } %>',\n    '</ul>',\n    '<span>',\n      '&nbsp;showing&nbsp;',\n      '<a data-toggle=\"tooltip\" data-placement=\"top\" title=\"Click to change the number of items on page\" class=\"page_size_prompt\">',\n        '<%- items_shown %>',\n      '</a>',\n      '&nbsp;of <%- total_items_count %> items',\n    '</span>'\n    ].join(''));\n  },\n\n});\n\nreturn {\n    FolderToolbarView: FolderToolbarView\n};\n\n});\n"]}