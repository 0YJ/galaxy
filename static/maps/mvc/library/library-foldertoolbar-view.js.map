{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["FolderToolbarView","Backbone","View","extend","el","events","click #toolbtn_create_folder","click #toolbtn_bulk_import","click #include_deleted_datasets_chk","click #toolbtn_bulk_delete","click .toolbtn-show-locinfo","click .page_size_prompt","defaults","can_add_library_item","contains_file_or_folder","chain_call_control","total_number","disabled_jstree_element","modal","jstree","histories","failed_number","list_extensions","auto","id","description","list_genomes","initialize","options","this","_","render","toolbar_template","templateToolBar","is_anonym","mutiple_add_dataset_options","Galaxy","user","template_defaults","is_admin","isAdmin","isAnonymous","config","$el","renderPaginator","html","paginator_template","templatePaginator","$","find","total_items_count","items_shown","show_page","get","page_count","configureElements","hide","show","tooltip","createFolderFromModal","event","self","template","templateNewFolderInModal","closing_events","title","body","buttons","Create","Close","create_new_folder_event","serialize_new_folder","folderDetails","current_folder_id","folder","validate_new_folder","url_items","history","fragment","split","FolderAsModel","indexOf","length","url","urlRoot","save","success","set","type","collection","add","error","model","response","_toastr2","default","responseJSON","err_msg","name","val","modalBulkImport","findCheckedRows","$checkedValues","that","_libraryModel2","GalaxyHistories","fetch","done","models","Import","importAllIntoHistory","fail","new_history_name","post","root","new_history","last_used_history_id","always","processImportToHistory","enableButton","history_name","dataset_ids","history_id","folder_ids","datasets_to_import","historyItem","push","row_id","i","library_folder_id","source","HistoryItem","content","library_dataset_id","initChainCallControl","jQuery","chainCallImportingIntoHistory","updateProgress","progress","progressStep","txt_representation","getJSON","width","closest","round","data","substring","download","folder_id","format","each","inputs","processDownload","method","param","template_modal","closing_callback","appendTo","fetchAndDisplayHistoryContents","addFilesFromHistoryModal","templateAddFilesFromHistory","importFilesFromPathModal","templateImportPathModal","Add","importFromPathsClicked","libraries","library_router","navigate","renderSelectBoxes","change","target","value","description_url","cache","text","trigger","fetchExtAndGenomes","_utils2","datatypes","select_genome","css","key","container","extension","select_extension","a","b","unshift","importFilesFromGalaxyFolderModal","genomes","sort","_uiSelect2","importFromJstreePath","renderJstree","bind","plugins","types","icon","file","checkbox","three_state","Jstree","file_type","dbkey","paths","valid_paths","disableButton","trimmed","action","preserve_dirs","link_data","space_to_tab","err_code","to_posix_lines","is","folder_name","templateDeletingItemsProgressBar","tag_using_filenames","chainCallImportingFolders","all_nodes","selected_nodes","node","info","selection_type","full_source","history_contents","get_selected","filter","history_contents_template","undefined","li_attr","full_path","addAllDatasetsFromHistory","history_item_types","items_to_add","checked_hdas","hid","item_type","history_item_ids","history_item_id","folder_item","HistoryContents","templateHistoryContents","popped_item","onclick","window","location","reverse","prop","when","promise","history_item_set","chainCallImportingUserdirFiles","Item","from_hdca_id","from_hda_id","chainCallAddingHdas","pop","warning","added_hdas","deleted_items","item_to_delete","items_to_delete","updated_item","checkIncludeDeleted","include_deleted","deleteSelectedItems","chainCallDeletingItems","showLocInfo","library","parent_library_id","hdas_set","Folder","showLocInfoModal","templateLocInfoInModal","folderListView","preferences","folder_page_size","destroy","item","remove","model_class","templateAddingDatasetsProgressBar","emit","templateBrowserModal","fetchFolder","items_total","dataset","libraryListView","Library","showImportModal","back","showPageSizePrompt","e","preventDefault","prompt","parseInt","join","templateBulkImportInModal","templateImportIntoHistoryProgressBar"],"mappings":"0VAMIA,EAAoBC,SAASC,KAAKC,QAClCC,GAAI,UAEJC,QACIC,+BAAgC,wBAChCC,6BAA8B,kBAC9BC,sCAAuC,sBACvCC,6BAA8B,sBAC9BC,8BAA+B,cAC/BC,0BAA2B,sBAG/BC,UACIC,sBAAsB,EACtBC,yBAAyB,EACzBC,oBACIC,aAAc,EAhBtBhB,cAAAA,GAmBIiB,wBAAyB,WAdzBC,MAAA,KAGAC,OAAA,KAoBJC,UAAW,KAdPN,cAAAA,KAGIO,iBAAAA,KALEC,mBA4BVC,MAhBAC,GAAA,OACAL,KAAAA,cAkBIM,YAhBJ,sZASAC,gBAmBAC,WAAY,SAASC,GAhBrBC,KAAAD,QAAAE,EAAAlB,SAAAgB,MAAAC,KAAAjB,UACAW,KAAAA,qBACIC,KAAAA,UADEO,OAxCmC,SAAAH,GA8DrCC,KAAKD,QAAUE,EAAE3B,OAAO0B,KAAKD,QAASA,GAV1C,IAAAI,EAAAH,KAAAI,kBACAP,GAYQF,GAAIK,KAAKD,QAAQJ,GAVzBG,UAAY,EACRO,WAAKN,EACLO,6BAAA,GAzDqCC,OAAAC,OAuEjCC,EAAkBC,SAAWH,OAAOC,KAAKG,UAVjDT,EAAQG,UAAkBE,OAAAC,KAAAI,cAEtB,OAAIT,OAAAA,OAAAA,0BACoB,IAApBM,OAAAA,OAAAA,0BAAoB,OACpBd,OAAIkB,OAAKd,qBAETM,EAHoBC,6BAAA,IAMxBN,KAAAc,IAAIP,KAAAA,EAAaE,KAWjBM,gBAASC,SAAKb,GACjBH,KAlFwCD,QAAAE,EAAA3B,OAAA0B,KAAAD,QAAAA,GA0FrC,IAAIkB,EAAqBjB,KAAKkB,oBANlCC,EAAA,QAQSC,KAAK,qBACLJ,KACGC,GANZF,GAAAA,KAAiBhB,QAAAJ,GACRI,UAAYzB,SAAO0B,KAAKD,QAASA,WAClCkB,WAAAA,SAAqBjB,KAAKkB,QAAAA,YAC9BG,kBACUrB,KAAAD,QADVsB,kBAIgBC,YAAa3B,KADFI,QAAAuB,YAEfC,iBAAoBhB,OAAKR,UAAQwB,YAFlBC,IAGfC,wBAUhBC,kBAAmB,SAAS3B,GAA5B2B,KAAAA,QAAAA,EAAAA,OAAmB1B,KAAAD,QAAAA,IAG2B,IAAtCC,KAAKD,QAAQf,qBAAjBmC,EAAA,sBAAiBnC,OAEhBmC,EAFD,sBAEOQ,QAEN,IAAA3B,KAAAD,QAAAd,yBACGsB,OAAKR,KACDQ,OAAOC,KAAMI,eAIZO,EAHD,yBAGOS,OACHT,EAAAA,gCAA2BS,SAJ/BT,EAAA,gCAAgCS,OAC5BT,EAAAA,yBAAES,SAUbT,EAbD,gCAaOQ,OACHR,EAAAA,yBAAEQ,QAEL3B,KAAAc,IAAAM,KAAA,iBAAAS,WAILC,sBAAA,SAAAC,GACAD,EAAAA,iBACIC,EAAAA,kBAGA,IAAAC,EAAAhC,KACAiC,EAAWjC,KAAXkC,2BACAlC,KAAAX,MAAI4C,OAAW5C,MACfW,KAAAX,MAAKA,MACL8C,gBAAgB,EACZA,MAAAA,oBACAC,KAAAA,IACAC,SACAC,OAAAA,WACIC,EAAAA,2BAECC,MAHI,WAILA,OAAOnD,MAAAsC,YAOnBc,wBAAA,WACAA,IAAAA,EAAAA,KAAyBC,uBACrB,GAAA1C,KAAI2C,oBAAqBD,GAAAA,CACzB,IAEIE,EAFAC,EAAKC,IAAAA,EAAAA,QAAoBH,cACzBI,EAAIF,SAAaG,QAAAC,SAAAC,MAAkBC,KAGnCP,EAFAG,EACIH,QAAAA,SADJ,EAEcQ,EAAVL,EAAgCM,OAAA,GAE7BN,EAAAA,EAAAM,OAAA,GAENR,EAAAS,IAAAT,EAAAU,QAAAX,EAGDC,EAAOW,KAAKb,GAAZE,QAAOW,SAAKb,GACRc,OAAAA,MAAS9B,OACLpB,EAAAA,QAAOlB,QAAMsC,mBACbkB,EAAAa,KAAAC,KAAA,WACAd,OAAAA,UAAac,eAAFC,WAAXC,IAAAhB,IAEHiB,MANsB,SAAAC,EAAAC,GAOvBF,OAAOzE,MAAAsC,YACH,IAAOtC,EAAMsC,aACbsC,EAAAC,QAAWF,MAAAA,EAASG,aAAiBC,SAEpCH,EAAAC,QAAMJ,MAAA,8BAKlBG,EAAAC,QAAMJ,MAAA,6BAEN,OAAA,GAILpB,qBAAA,WACAA,OACI2B,KAAAlD,EAAO,sBAAAmD,MACHD,YAAQlD,EAAA,6BADLmD,QAMXxB,oBAAA,SAAAH,GACAG,MAAqB,KAArBA,EAAqBuB,MAIrBE,gBAAA,WAEI,GAA0BC,IADbxE,KAAAwE,kBACTC,OACJR,EAAAC,QAAIO,KAAAA,4CACA,CACH,IAFDC,EAEO1E,KACHA,KAAAT,UAAW,IAAXoF,EAAAT,QAAAU,gBACA5E,KAAAT,UACAsF,QAGQC,KAAA,WACAJ,IAAAA,EAAanE,EAAOlB,4BACpBqF,EAAKrF,MAAMuC,OAAKvC,MACZ8C,EAAAA,MAAAA,MACAC,gBAAO,EACPC,MAAMJ,sBACF1C,KAAAA,GAJQA,UAAAmF,EAAAnF,UAAAwF,SAORC,SACIN,OAAAA,WAFCA,EAAAO,wBAKD1E,MAAAA,WACHA,OAAAlB,MAAAsC,aAMLuD,KAAA,SAAAnB,EAAAC,QACG,IAAAA,EAAAG,aACHF,EAAAC,QAAAJ,MAAWA,EAAMK,aAAAC,SAzB7BH,EAAAC,QAAAJ,MAAA,0BAoCJmB,qBAAIE,WACJnF,KAAAX,MAAIqF,cAAJ,UACA,IAAAS,EAAIA,KAAAA,MAAyBhE,EAAA,4BAAAmD,MACzBnD,EAAEiE,KACEf,GAAMc,KAANd,EADkClD,EAAAiE,KAGjCN,OAAKO,KAAA,iBACFX,KAAAA,IAJRI,KAUKI,SAAKI,GACFZ,EAAA3E,QAAAwF,qBAAiBD,EAAjB3F,GAEH6F,EAbLC,uBAcQf,EAAWgB,GAdnBJ,EAAAjB,QAoBAa,KAAKnF,SAAQwF,EAAAA,EAAAA,GACTI,EAAAA,QAAAA,MACA,wBAGJH,OAAKnG,WACRqF,EAAArF,MAAAqG,aAAA,gBAVM,CAaXD,IAAAA,EAAAA,EACQG,oDACJtB,MACAtE,KAAKwE,QAAAA,qBAAuBqB,EACxB,IAAAF,EAAexE,EAGf,oDACI2E,OACH9F,KAFDyF,uBAEOI,EAAAF,GACHC,KAAAA,MAAAA,aAAA,YAIRH,uBAAIM,SAAqBF,EAAzBF,GACA,IAAAC,KACIE,KACA9F,KAAAwE,kBAAIwB,KAAc,WAClBA,IAAAA,EAAAA,EAAAA,MACAA,QAAAA,MACAA,KAAAA,MACwBA,KAAxBD,EAAAA,UAAAA,EAAmBE,GACtBH,EAAAG,KAAAC,GAEDN,EAAAK,KAAAC,KAKIF,IAAAA,IADAD,KACAC,EAAAA,EAAA3C,OAAkB2C,EAAAA,GAAYzC,EAAZ4C,IAAsBN,CACxCG,IAAAA,EAAAJ,EAAsBQ,IACtBJ,EAAYK,IAAZ1B,EAAAT,QAAqBoC,aACrBP,IAAAA,EAAwBC,QAAxBH,EAAA,YACHG,EAAAO,QAAAC,EAbGR,EAAYK,OAAS,UAezBN,EAAKU,KAAAA,GAKL,IAAAN,EAAAL,EAAAzC,OAAA,EAAA8C,GAAA,EAAAA,IAAA,CACA,IAAAC,EAAAN,EAAAK,GACAO,EAAenG,IAAO8E,EAAAA,QAAOiB,YAC7BN,EAAKW,IAAAA,EAAAA,QAA8BZ,EAAnC,YAvUqCC,EAAAO,QAAAH,EA2TjCJ,EAAYK,OAAS,iBAe7BN,EAAAE,KAAAD,GAGAY,KAAAA,sBACIvD,OAAKwD,EAAiBC,OACtB3F,OAAE,aACFwE,aAAIoB,IAIRL,OAAAM,QAAAzG,OAAA8E,KAAA,6BAAAQ,GAbI7F,KAAK2G,8BAA8BZ,EAAoBJ,IAoBvDiB,eAAId,WACJ9F,KAAA6G,UAAKrC,KAAAA,aACDrD,EAAA,wBAAe8F,MACVC,KAAQC,MACRC,KAAKP,UAFV,KAGA,IAAAE,EAAWM,KAAPF,MAAAnH,KAAJ6G,UAAmC,aAC/Bf,EAAAA,oBAAAA,KAAAiB,IAQXO,SAzWwC,SAAAC,EAAAC,GA0VrC,IAAI5B,KAiBRE,KAfI9F,KAAKwE,kBAAkBiD,KAAK,WACxB,IAAIvB,EAAS/E,EAAEnB,MACVkH,QAAQ,MACRE,KAAK,MACoB,KAA1BlB,EAAOmB,UAAU,EAAG,GACpBvB,EAAWG,KAAKC,GAkBpB5C,EAAJ2C,KAAiBC,KAGb,IAAA5C,EAAA/C,OAAA8E,KAAA,mCAAAmC,EACAJ,GAAIM,OAAS9B,EAAbE,WAAAA,GACA3E,KAAAA,gBAAY+B,EAAMkE,EAAM,QA0B/BO,gBAlZwC,SAAArE,EAAA8D,EAAAQ,GAmXrC,GAAItE,GAAO8D,EAAM,CAkCjBA,EAAqB,iBAArBA,EAAqBA,EAAAjG,EAAA0G,MAAkBjD,GAEvC,IAAA8C,EAAKnI,GAGGyC,EAAAA,KAAAA,EAAK3C,MAAQkB,KAAOlB,WACpB,IAAIyI,EAAAA,KAAAA,MAAiB9F,KACrBA,GACIG,8BACAC,EAAAA,GACAC,YACI9C,EAAAA,GADiB,SAKbyC,EACH,iBACDQ,EACIjC,cACHqH,GAAA,QANI,KAQTG,EACIxH,WAfRyH,SAAA,QAqBAhG,SAGAb,SACIa,EAAAA,QAAAA,KAAKiG,uCAEZhE,EAAAC,QACKJ,MAAA,uBAIEoE,yBAAA,WACHlI,KAAAT,UAAA,IAAAoF,EAAAT,QAAAU,gBACJ,IAAA5C,EAvCLhC,KAwCHA,KA/bwCT,UAwZhCsF,QAyCTC,KAAA,WAvCY9C,EAAK3C,MAAQkB,OAAOlB,MACpB,IAAIyI,EAAiB9F,EAAKmG,8BAC1BnG,EAAK3C,MAAMuC,MAyCvBwG,gBAA0B,EAClB1D,MAAJ,oCACKrF,KAAQkB,GACTuH,UAAiB9F,EAAKqG,UAAAA,SAEtBlG,SACOmG,IAAA,WACDR,EAAAA,6BAEF9C,MAAQ,WACJN,OAAK6D,MAAAA,SAGLhI,iBAAaoB,WAChBpB,OAAAiI,UAAAC,eAAAC,SAVO,WAAA1G,EAAArC,IAYZoI,SAAkB,OAEiD/F,EAA/DiG,+BAGHjG,EAAAzC,UAAAwF,OAAA,GAAApF,IAELwB,EAAKwH,qBAALC,OAAA,SAAA7G,GA5dqCC,EAAAiG,+BAAAlG,EAAA8G,OAAAC,WAwbhC5D,KAAK,SAASnB,EAAOC,QACmB,IAA1BA,EAASG,aAChBF,EAAAC,QAAWJ,MAAME,EAASG,aAAaC,SA0C/CM,EAAAA,QAAJZ,MAAA,yBASgBlE,yBAAAA,WACAmJ,IAAAA,EAAAA,KAJsB/I,KAAAX,MAAAkB,OAA1BlB,MAMH,IAAAyI,EAAA9H,KAAAqI,0BACD3D,KAAAA,MAAAA,MACIvC,gBAAA,EACHC,MAAA,+BACDsC,KAAAA,MACHpC,SACD0G,OAAO,WAjBXtE,EAAA6D,uBAAA7D,IAoBIpB,MAAK/C,WACLkD,OAASpE,MAAAsC,SAGD+C,iBAAK7E,WAEDoJ,OAAAA,UAAAA,eAAMP,SAAA,WAAAhE,EAAA/E,IAFauJ,SAAvB,OAOHlJ,KAAA2I,qBAOTQ,mBAAA,WACA,IAAAzE,EAAA1E,KACAoJ,EAAAlF,QAAA1C,KACA8B,IAAA/C,OAAA8E,KAAA,qCACA5B,QAAIiB,SAAJ2E,GACA3E,EAAK4E,mBACDC,IAAK,IAAAC,KAAAH,EACLjC,EAAM1C,gBAF+BuB,MAGrCwD,GAAWlJ,EAAOlB,GAAPqK,UACJT,KAAAI,EAAAG,GAAAE,UAJX9J,YAAAyJ,EAAAG,GAAA5J,YAMK+J,gBAAuBN,EAAAG,GAAAT,kBAGxBU,EAAAA,gBAAkBpK,KAAMyB,SAAS8I,EAAAC,GACjCf,OAAOc,EAAAjK,GAAAkK,EAAAlK,GAAA,EAAAiK,EAAAjK,GAAAkK,EAAAlK,IAAA,EAAA,IA1hB0B+E,EAAAjF,gBAAAqK,QAAApF,EAAAhF,OA8hBzCsJ,OAAA,IAtCII,EAAAlF,QAAU1C,KACN8B,IAAK/C,OAAO8E,KAAO,cAyC3B0E,QAAAA,SAAAA,GACQrF,EAAAA,gBACAoD,IAAAA,IAAAA,KAAAA,EACCzI,EAAQkB,aAAb0F,MACWrE,GAAKoI,EAAAR,GAAA,GACZrH,KAAAA,EADYqH,GAAA,KAIZlH,EAAAA,aAAS2H,KAAA,SAAAL,EAAAC,GACL7E,OAAAA,EAAQrF,GAAAkK,EAAAlK,GAAA,EAAAiK,EAAWjK,GAAAkK,EAAAlK,IAAA,EAAA,KAGnB6C,OAAAA,KAIJuF,kBAAAA,WAKC,IAAArD,EAAA1E,KAjBWA,KAAhBsJ,cAAA,IAAAY,EAAAhG,QAAA7F,MArBIkL,IAAK,wBAyCTpI,KAAEuD,EAAA7E,aACEsB,UAAEZ,OAAAlB,MAAFyB,IAAqBxB,KAAO,0BAC/BwJ,MAFD,MAII3H,KAAAA,iBAAE,IAAF+I,EAAAhG,QAA4B7F,MAC/BkL,IAFD,2BArCInC,KAAM1C,EAAKjF,gBAyCfgK,UAAKd,OAAAA,MAAL7H,IAAAM,KAAA,6BACArB,MAAAA,UAQQoB,iCAAE,SAAApB,GACFoB,IAAAA,EAAAA,KACH2G,EAAU/F,KAAM8G,uBACb1H,KAAAA,MAAAA,OAAE9B,MACF8B,KAAAA,MAAAA,MACAA,gBAAE,EACFpB,MAAAA,iCACA2E,KAAAA,MACHpC,SAbL0C,OAAA,WArkBqCN,EAAAyF,qBAAAzF,EAAA3E,IAslBzCyC,MAAA,WAvCgBjC,OAAOlB,MAAMsC,SAGrBoG,iBAAkB,WA0C1BqC,OAAc5B,UAAAC,eAAS1I,SAAS,WAAA2E,EAAA/E,IACxB+E,SAAJ,OAKAvD,EAAA,yBACS7B,KAAAA,QAAL,WAMJ6B,EAAA,mBAAkB7B,OAAA,eAEV6B,EAAAA,0BAAEkJ,KAAmB/K,QAAO,WAC5B6B,EAAAA,mBAAE7B,OAAF,iBACUU,KAAA2I,oBAGN2B,EAAAA,wBAAS,UACTC,KAAAA,aAAAA,GAEQC,EAAAA,qBAAAA,OAAM,SAAAzI,GAFP,2BACKA,EAAA8G,OADLC,OAIH2B,EAAAA,wBAAM,UACFD,EAAAA,aAAAA,GADErJ,EAAA,2BAAAQ,OAJHR,EAAA,8BALiBQ,OAaxB+I,EAAAA,yBAAU9I,QACO,yBAAb+I,EAAAA,OAAAA,QADMxJ,EAAA,yBAAAQ,OAbcR,EAAA,2BAA5BS,OAiBHT,EApBa,8BAAAS,OAqBdkC,EAAO1E,wBAAgB4E,QACnBU,EAAA0F,aAAWpG,OAWtBoG,aA1oBwC,SAAArK,GA4oBzCC,KAAAD,QAAAE,EAAA3B,OAAA0B,KAAAD,QAAAA,GA7CI,IAAI8I,EAAS9I,EAAQsG,QAAU,UAC3BjH,EAA0BY,KAAKD,QAAQX,wBAC3CY,KAAKV,OAAS,IAAIqF,EAAAT,QAAkB0G,OACpC5K,KAAKV,OAAOgE,IA+ChBiF,KAAAA,OAAAA,QACI,WAGAM,EACA,0BAMAzJ,EAGAY,KAAAV,OAAIuL,OACJpH,QAAIqH,SAAaxB,EAAAA,GACbyB,EAAAA,mBAAUzL,OAAA,WACV0L,EAAAA,mBAAJ1L,QACKyL,MACD3D,KAAArD,GAEAuG,SAAWW,QAAAA,YACXF,OACKlI,QACGqI,KAAUH,iBAEVC,MACHR,KAAA,gBAGDnH,UACA8H,aAAQ,MAIRC,MAAAA,SAAAA,EAAeA,QAFY,IAG3BC,EAAWA,aAHgB,SAI3BC,EAAAA,aAJ2BC,SAK3BC,EAAAA,QAAAA,QAAgBA,EALWrH,aAAAC,SAO3ByG,EAAAA,QAAWA,MAPgB7G,EAAAG,aAAAC,SAA/BH,EAAAC,QAAAJ,MAAA,0BAqBJyE,uBAAgB4C,WACZ,IAAAC,EAAKpL,KAAAX,MAALyB,IACImB,KAAAA,sBACAwJ,GAAA,YAEQC,EAAAA,KAAAA,MAAAA,IAAatK,KAAKrB,kBAAQ2L,GAAAA,YADrBJ,EADbtL,KAAAX,MAAAyB,IAKAM,KAAA,sBACJqK,GAAA,YACIxJ,EAAAA,KAAW5C,MAAKsM,IAChBvK,KAAA,mBACAqK,GAAA,YACJG,EAAA5L,KAAAX,MAAAyB,IACImB,KAAAA,cACAwJ,GAAA,YAGAZ,EAAA7K,KAAA2J,iBAAAb,QACJgC,EAAA9K,KAAAsJ,cAAAR,QACIvI,EAAAA,EAAAA,yBAAkB+D,MAClB0G,KArBR,GAAAD,EAwBA,CACA/K,KAAAX,MAAA4L,cAAA,UAEA,IAAKnE,IAAAA,GADLiE,EAAKlE,EAAL3D,MAAA,OACAG,OAA0BtD,EAAAA,GAAQsD,EAAAA,IAAlC,CACA,IAAKtD,EAAQb,EAAAA,GAAAA,OACAA,IAARa,EAAQb,QApuBwB8L,EAAA/E,KAAAiF,GA8qBjClL,KAAKyG,sBACDpD,OAAQ2H,EAAY3H,OACpB8H,OAAQ,oBAEZnL,KAAK6L,2BACDd,MAAOC,EACPI,cAAeA,EA2D3BjB,UAAAA,EACQ2B,aAAcR,EAGlBE,eAAAA,EACIO,OAAAA,aACAlB,UAAOmB,EADXJ,oBAAAA,EAGIR,MAAAA,SAnFAnH,EAAAC,QAAW+H,KAAK,iDAqGhBxF,qBAAA,SAAWwF,GACd,IAAAhK,EACG,OAAAlC,EAAKV,QACL,IAAA,kBACI4C,EAAI8J,KAAAA,oCACAhB,KAAAA,MAAAA,IAAM9E,KAAK8F,eAAA/K,KACdiB,GACJyJ,YAAA1L,KAAAD,QAAA2L,eAGGP,MAFsB,IAA1B,oBAIAlJ,EAAIiK,KAAAA,mCACAlM,KAAAX,MAAI8M,IAAAA,KAAAA,eAAsB9F,KAASpE,KACnC,MACI8I,IAAAA,aACAK,EAAAA,KAAAA,uCACAC,KAAAA,MAAAA,IACAC,KAAAA,eACAE,KAAAA,GAAAA,aAAgBA,EALW7F,gBAM3BU,MACAwE,QACAC,OAAAA,KAAAA,MAAOA,0BARoB,YAc3BC,KAAAA,SAAAA,EACAF,KAAAA,aAAAA,IAAAA,EAAWA,OACXC,KAAAA,QAAAA,mBAHgC3L,aAAAY,EAAAsD,OAIhCgI,KAAAA,QAAAA,mBAAWA,cAJqB,GAe5ClB,qBAAIiC,SAAmB1H,EAAI3E,GACvBJ,IAAAA,EAAIkG,EAAAA,mBADevG,SAGvB+M,cAAW,GAEP5I,EAASxD,EAAAqM,OAAAR,EAASM,SAATJ,GACL,OAAIO,GAAJP,EAAIO,MAAAA,WAIJvK,EAAK3C,KAAMyB,MAAXA,IAEQsL,KAAAA,sBADsBX,GAAA,YAI9BzJ,EAAAA,KAAK3C,MACA+B,IADLA,KACU,kBAAAqK,GAAA,YAEFtK,EAAEnB,KAAAX,MAAAyB,IAILM,KAAA,sBACLY,GAAAA,YAGQb,EAAEnB,KAAAX,MAAAyB,IAILM,KAAA,mBACRqK,GAAA,YACD3H,EAAO9D,KAAA2J,iBAAgB3F,QACnB8G,EAAA9K,KAAIsJ,cAAOtF,QACP4H,EAAA5L,KAAAX,MAAWyE,IACd1C,KAAA,cACGqK,GAAA,YACHS,EAAAH,EAAA,GAAApI,KACJoH,KAlCkB,GAAAgB,EAAvB1I,OAAA,EAvzBqCY,EAAAC,QAAA+H,KAAA,uCA0wB9B,CAmFXjM,KAAAX,MAAA4L,cAAA,UAjFQ,IAAK,IAAI9E,EAAI4F,EAAe1I,OAAS,EAAG8C,GAAK,EAAGA,SACAqG,IAAxCT,EAAe5F,GAAGsG,QAAQC,WAmF1CC,EAAAA,KAAAA,EAA2BxG,GAAAsG,QAAAC,WAStB,GAJD1M,KAAI4M,sBACAC,OAAAA,EAAAA,OACAC,OAAAA,oBAEG,WAFPZ,EAEO,CACHC,EAAWlB,EAAc5E,OAAzB,UACAyG,KAAAA,2BACI/B,MAAIgC,EAGJ3B,cAASA,EACLC,UAAI2B,EAGJC,aAAAA,EACAL,eAAAA,EACHvG,OAAA8F,EAVLtB,UAAAA,EAYAC,MAAS3E,EACLyF,oBAAIsB,SAEJC,GACI5M,SADJ4M,EACI,CAIJ,IAAAhB,EAAIS,EAAAA,OAA0B,QAC1BO,KAAAA,gCACHpC,MAAMA,EACHoC,UAAAA,EACHrC,MAAAA,EACD+B,UAAAA,EACHvB,aAAAA,EACDE,eAAK/E,EACDpD,OAAQwJ,EACR1B,oBAAQS,OAMpB3D,+BAAA,SAAApC,GA3FI,IAGI7D,EAAOhC,KAHY,IAAI2E,EAAAT,QAAkBkJ,iBACzCzN,GAAIkG,IAGShB,OA6FrB8B,QAAAA,SAAAA,GACQ3E,IAAAA,EAAJA,EAAAqL,0BACIC,EAAAA,UACA9L,IAAO8L,GACH5J,KAAK3D,SAAQb,IACb8C,EAAA3C,MAAAyB,IAAAM,KAAA,6BACIJ,KAGIuM,GACIC,iBAAOC,EAAP1I,OAAA2I,aAIf1L,EAVD3C,MAWIyB,IAGAM,KAAA,8BAJGiJ,KAOA,QACEtK,WAGLoB,EAAA,6CACIwM,KAGIJ,WACIC,KAIfxL,EAAA3C,MAAAyB,IACDP,KAAOlB,gCACPgL,KAAO,QAAP,WACHlJ,EAAA,6CAAAwM,KACeC,WAECN,MAKjBO,MAAAA,SACU9J,EAAAC,QACF,IAAK4C,EAALzC,aACAnC,EAAAA,QAAK2E,MAAAA,EAAAA,aACDmH,SAKJ9L,EAAAA,QAAa9C,MAAAA,0BA1GzByN,0BAA2B,WACvB,IAAIG,EAAe9M,KAAKX,MAAMyB,IACzBM,KAAK,6BAuHd2M,KAAAA,YACId,KACAL,KACAC,KACI,GAAAC,EAAS/M,OAAQb,EACb+E,EAAAC,QAAA+H,KAAA,4CAGA1L,CACHP,KALDX,MAKO4L,cAAA,OACH6B,EAAArF,KAAA,WACH,IAAAsF,EAAA5L,EAAAnB,MACDkH,QAAA,MACHE,KAAA,MACGyG,GAAAA,EAAAA,CAwBC/I,IADLkI,EACmBhJ,EAAAA,MACN4C,QAAAA,MACAmH,KAAAA,QAEHd,EAAWhH,KAAA8G,GACbrI,EAAaxF,KAAAA,MAGhB,IATL,IAAAiH,EAAA8G,EAAA5J,OAAA,EAAA8C,GAAA,EAAAA,IAAA,CA9/BqC,IAAA+G,EAAAD,EAAA9G,GAy3BzBgH,EAAc,IAAIxI,EAAAT,QAAkB8J,KAiJpDb,EAAA7J,IA/IgB/C,OAAO8E,KACP,eACArF,KAAKD,QAAQJ,GACb,YAC0B,eAA1BiN,EAAmBzG,GACnBgH,EAAYzJ,KAAMuK,aAAcf,IAEhCC,EAAYzJ,KAAMwK,YAAahB,IAEnCL,EAAa5G,KAAKkH,GAkJ9BtB,KAAAA,sBACIxI,OAAAwJ,EAAAxJ,OACIqB,OAAO,oBAEX1E,KAAImO,oBAAAtB,KAYJlG,8BACMvB,SACE7E,EACIoF,GAsBZkI,IAAAA,EAAAA,KAEQnJ,EAAKkC,EAALwH,MACA1J,QAAKmH,IAALnH,EAiDAnE,OA/Ca,IAAhB2E,KAAKnF,QAAAb,mBAAWM,cACbkF,EAAAA,QAAK3E,QACL2E,6EACAA,IAvkC6B6I,QAAA,WA85BjBC,OAAOC,SAAWlN,OAAO8E,QAKrCrF,KAAKD,QAAQb,mBAAmBM,gBA6K5C2O,KAAAA,QAAqBjP,mBAAAC,aAEjB8E,EAAAC,QAAAJ,MACIwJ,kEAGItN,KAAAD,QAAAb,mBACIM,cAEPQ,KAJDD,QAKIb,mBAAaA,cAMhB+E,EAAAC,QACGmK,QAGA,gGAGH,IAEMd,QAAKe,WACfd,OAAAC,SAAAlN,OAAA8E,QAODwI,OAAAA,MACUlM,QACFpB,EAEK4N,EAAAA,KACRb,EACK9J,MACFxB,QAAKjC,EAAQb,QACb8C,OAAK4E,EAALP,UAKZvB,KAAA,WA3LY9C,EAAK4E,iBACL5E,EAAK2E,8BACDmH,EACAnI,KA+LZT,KAAKqJ,WACDC,EAAAA,QAAAA,mBAAiBC,eAArB,EACIzM,EAAA4E,iBACA5E,EAAI2E,8BACAmH,EADJnI,MA2BIoI,+BAAA,SAAAhO,GACA,IAAA2E,EAAA1E,KACIsN,EAAIoB,EAAAA,MAAeN,MACnB,QACI,IADJd,EAyBH,OArB4CnK,IAArCuL,KAAAA,QAAAA,mBAAmBlP,eAGtByE,EAAAC,QAAMT,QAIHiL,mDAEAnO,OAAAA,MAAAA,QAQH0D,EAAAC,QAAAJ,MAAA,sBAIJ,EAGC3C,EAAAyM,KACF5L,EAAAA,KACAA,OAAK4E,KACL5E,4CAzCR0C,EAAA/E,GA5pCqC,WA6+BzBI,EAAQsG,OA4NxB,SA1NgBiH,EACA,cA4NhBqB,EAAAA,UACQ5M,cACAxB,EAAOiI,UACHoG,iBADJ7O,EAAAuL,aAGG,mBACH/K,EAAOiI,eACHoG,UADJ7O,EAAA+K,MAGH,wBArtCoC/K,EAAA6L,sBA+/BhC9G,KAAK,SAASd,GA4NvB6K,EAAAA,iBACQjJ,EAAAA,+BAAJ7F,KAEAmF,KAAIT,WACAA,EAAAA,QAAAA,mBAA6BjF,eAAA,EAC7BkF,EAAAkC,iBADJlC,EAEOqJ,+BAAAhO,MAgBH0E,0BAAegD,SAAK1H,GAIhB,IAAA2E,EAAA1E,KACIsN,EAAAvN,EAAImG,MAAOmB,MACPvB,QAAAA,IAAAA,EAnNZ,OAoNe,IAAN9F,KAAAD,QAFDb,mBAEOM,eACHoG,EAAAA,QAAAA,QACH,yEAERrF,OAXDlB,MAAAsC,QAcAsC,EAAAC,QAAK4C,MAAL,sBA3NO,EA+NH2H,EAAAA,KACJtN,EAAAiE,KACI7E,OAAA8E,KACI1F,4CADqC+E,EAAzC/E,GAGA8O,WACH1O,EAAAsG,OACD,SACIiH,EACI3N,kBAD6CI,EAAjDqL,cAGAqD,cACH1O,EAAAsL,UA5NO,mBA8NRtL,EAAAyL,eACA,iBACAzL,EAAK+O,aACR,cApxCoC/O,EAAA8K,UAyjCzB,UA8NhBkE,EAAajE,MACLkE,wBACAtK,EAAJkH,sBACA9G,KAAA,SAKOd,GACHgL,EAAAA,iBACIrP,EAAAA,0BAAiBsP,KAErBD,KAAAA,WACIvL,EAAAA,QAASvE,mBAAWM,eAAA,EAChBkF,EAAAA,iBACHA,EAHSmH,0BAAA9L,MAYjBoO,oBAAA,SAAAe,GACJ,IAhzCwClN,EAAAhC,KAklCrCA,KAAKsO,WAAa,IAAI3J,EAAAT,QAAkBiL,OAgO5CC,IAAAA,EAAkBF,EAAAd,MACd,QAAA,IAAI1J,EAqBI,OApBR,IAAIzC,KAAAA,QAAW/C,mBAAKmQ,cACpBpL,EAAAC,QAAa3D,QACRlB,sDAGDgD,KAAAA,QAAMJ,mBAAoB+M,gBAC1B1M,KAAAA,QAASpD,mBAAAC,aAEDoB,EAAAA,QAAAA,MACH,gEA7zC4BP,KAAAD,QAAAb,mBAAAM,cAkmC7BQ,KAAKD,QAAQb,mBAAmBC,cAiOxC8E,EAAAC,QAAQnE,QACJ,yDAGAQ,OAAAlB,MAAKsC,OACD3B,KAAAsO,WAAAnN,EAAAyM,KAGAN,EAAA9J,MACJ0K,YAAAZ,EAAA9L,IAAA,kBAKQ6E,KAAAA,SAAAA,GADkC9F,OAAtCiI,UAAA8G,eAAA1L,WAAAC,IAAAE,GAGA/B,EAAA4E,iBACJ5E,EAAAmM,oBAAAe,KAEIhK,KAAA,WACAlD,EAAAjC,QAAAb,mBAAAM,eAAA,EApBRwC,EAAA4E,iBAn0CqC5E,EAAAmM,oBAAAe,MAw2CjC3O,uBAAOiI,SAAU+G,GACbC,IAAAA,EAAAA,KAD6BxP,KAAAuO,cAAjC,IAAA5J,EAAAT,QAAAiL,OAGA5O,IAAAA,EAAOiI,EAAU8G,MACb3P,QAAiBA,IAAjBA,EAuFA,OAtFW,IAAX4B,KAAAA,QAAAA,mBAAW/B,cAFwByE,EAAAC,QAAvCT,QAAA,gCA32CiCzD,KAAAD,QAAAb,mBAAAM,gBA4oC7BQ,KAAKD,QAAQb,mBAAmBC,aAuOxC8E,EAAAC,QAASJ,MAn3C4B,mGAu3CrC9D,KAASiC,QAAF/C,mBACHM,cACIQ,KAAAD,QAAAb,mBAAAC,cAEA8E,EAAAC,QAAAmK,QACA,6FAsEA9N,OAAAlB,MAAAsC,OACA3B,KAAAuO,cAGAC,EACAiB,UACA3K,KAAA,SACG4K,GArSH,GApqC6BnP,OAAAiI,UAAA8G,eAAA1L,WAAA+L,OAgqCzBnB,EAAe7O,IA8S3BqC,EAASC,iBA1SG1B,OAAOiI,UAAU8G,eAAevP,QAAQ6O,gBAAiB,CA0WzE1M,IAAAA,EAA0B,KA9gDe,WAAAwN,EAAA/L,MAwqCA,kBAArB+L,EAAKE,YAoXZ3N,EACL,IAEI0C,EAAAT,QAAAf,cA/hD6BuM,GAojD7B,SAFCzN,EAAF0B,MAljD8B,mBAAA+L,EAAAE,YAgkDzCC,EAAAA,IAAmClL,EAAAT,QAAA8J,KAAA0B,IAhkDMnP,OAAAuP,KAAAhM,MAorCjB,mCA2ZxB6H,YA/kDyCpL,OAAAuP,KAAAhM,MAwrCjB4L,EAAK/L,MAAQ+L,EAAKE,YAqa1CG,aAwCYxP,OAAAiI,UAAA8G,eAEA1L,WACAC,IAxoD6B6K,GA0pDrC1M,EAASC,uBAEDwM,KA1dHvJ,KAAK,WAigBdiD,EAAAA,QAAAA,mBAA6B3I,eAAA,EACzBwC,EAASC,iBAODD,EAAA8M,uBAAAL,MA8DZvN,oBAAAA,SAAmBa,GACfA,EAAA8G,OAAS5G,QAKD1B,OAAAiI,UAAA8G,eAAAU,aAOApB,iBAAA,IApkBJrO,OAAOiI,UAAU8G,eAAeU,aAC5BpB,iBA4lBD,KAplBXC,oBAAqB,WACjB,IAAIjJ,KACAE,KACArB,EAAiBzE,KAAKwE,kBAC1B,GAA8B,IAA1BC,EAAepB,OACfY,EAAAC,QAAW+H,KAAK,uDACb,CACH,IAAIhK,EAAWjC,KAAK2L,mCACpB3L,KAAKX,MAAQkB,OAAOlB,MACpBW,KAAKX,MAAMuC,MACPO,gBAAgB,EAChBC,MAAO,0BACPC,KAAMJ,MACNK,SACIE,MAAO,WACHjC,OAAOlB,MAAMsC,WAKzB3B,KAAKD,QAAQb,mBAAmBC,aAAe,EAC/Ca,KAAKD,QAAQb,mBAAmBM,cAAgB,EAChDiF,EAAegD,KAAK,WAChB,IAAIvB,EAAS/E,EAAEnB,MACVkH,QAAQ,MACRE,KAAK,WACKoF,IAAXtG,IAC8B,KAA1BA,EAAOmB,UAAU,EAAG,GACpBvB,EAAWG,KAAKC,GAEhBN,EAAYK,KAAKC,MAK7B,IAAI+J,EAAcrK,EAAYvC,OAASyC,EAAWzC,OAClDrD,KAAK8G,aAAe,IAAMmJ,EAC1BjQ,KAAK6G,SAAW,EAIhB,IAAK,IADD4H,KACKtI,EAAIP,EAAYvC,OAAS,EAAG8C,GAAK,EAAGA,IAAK,CAC9C,IAAI+J,EAAU,IAAIvL,EAAAT,QAAkB8J,MAChCrO,GAAIiG,EAAYO,KAEpBsI,EAAgBxI,KAAKiK,GAEzB,IAAS/J,EAAIL,EAAWzC,OAAS,EAAG8C,GAAK,EAAGA,IAAK,CAC7C,IAAItD,EAAS,IAAI8B,EAAAT,QAAkBf,eAC/BxD,GAAImG,EAAWK,KAEnBsI,EAAgBxI,KAAKpD,GAGzB7C,KAAKD,QAAQb,mBAAmBC,aAAe8Q,EAE/CjQ,KAAK8O,uBAAuBL,KAIpCM,YAAa,WACT,IAAIC,EAAU,KACVtK,EAAO1E,KAC8B,OAArCO,OAAOiI,UAAU2H,iBACjBnB,EAAUzO,OAAOiI,UAAU2H,gBAAgBvM,WAAWpC,IAClDxB,KAAKD,QAAQkP,mBAEjBjP,KAAKoP,iBAAiBJ,KAEtBA,EAAU,IAAIrK,EAAAT,QAAkBkM,SAC5BzQ,GAAIK,KAAKD,QAAQkP,qBAEbpK,OACJpB,QAAS,WACLiB,EAAK0K,iBAAiBJ,IAE1BlL,MAAO,SAASC,EAAOC,QACkB,IAA1BA,EAASG,aAChBF,EAAAC,QAAWJ,MAAME,EAASG,aAAaC,SAEvCH,EAAAC,QAAWJ,MAAM,0BAOrCsL,iBAAkB,SAASJ,GACvB,IAAItK,EAAO1E,KACPiC,EAAWjC,KAAKqP,yBACpBrP,KAAKX,MAAQkB,OAAOlB,MACpBW,KAAKX,MAAMuC,MACPO,gBAAgB,EAChBC,MAAO,mBACPC,KAAMJ,GAAW+M,QAASA,EAASjP,QAAS2E,EAAK3E,UACjDuC,SACIE,MAAO,WACHjC,OAAOlB,MAAMsC,YAM7B0O,gBAAiB,SAAStQ,GACtB,OAAQA,EAAQsG,QACZ,IAAK,UACDrG,KAAKkI,2BACL,MACJ,IAAK,YACDlI,KAAK+J,kCACD1D,OAAQ,cAEZ,MACJ,IAAK,OACDrG,KAAKoI,2BACL,MACJ,IAAK,UACDpI,KAAK+J,kCACD1D,OAAQ,YAEZ,MACJ,QACI9F,OAAOiI,UAAUC,eAAe6H,OAChCrM,EAAAC,QAAWJ,MAAM,4BAQ7ByM,mBAAoB,SAASC,GACzBA,EAAEC,iBACF,IAAIjB,EAAmBkB,OACnB,8CACAnQ,OAAOiI,UAAU+G,YAAY/N,IAAI,qBAGb,MAApBgO,GACAA,GAAoBmB,SAASnB,KAE7BjP,OAAOiI,UAAU+G,YAAY7L,KACzB8L,iBAAkBmB,SAASnB,KAE/BjP,OAAOiI,UAAU8G,eAAepP,QAC5BP,GAAIK,KAAKD,QAAQJ,GACjB4B,UAAW,MAKvBiD,gBAAiB,WACb,OAAOrD,EAAE,qBAAqBC,KAAK,aAGvChB,gBAAiB,WACb,OAAOH,EAAEgC,UAGD,wCAEA,6BACA,yCACA,+CAEA,2DACA,sGACA,UACA,mFACA,WACA,SACA,qNACA,qEACA,YACA,0CACA,kEACA,oIACA,8FACA,YACA,yCACA,yEACA,6DACA,gFACA,UACA,qDACA,4BACA,+CACA,wDACA,mFACA,UACA,qDACA,kEACA,UACA,UACA,QACA,SACA,iBACA,0LACA,mEACA,OACA,UACA,iOACA,mCACA,mBACA,YACA,0FACA,kIACA,4EACA,YACA,yCACA,kEACA,kEACA,+DACA,QACA,SACA,+NACA,oDACA,8LACA,0CACA,gBACA,YACA,0GACA,8FACA,gDACA,8CACA,aACA,YACA,OACA,UACA,SACA,UAEA,kCACA,SAEA,wDAEA,UACF2O,KAAK,MAIfvB,uBAAwB,WACpB,OAAOpP,EAAEgC,UAED,QACA,6CACA,UACA,uCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACF2O,KAAK,MAIf1O,yBAA0B,WACtB,OAAOjC,EAAEgC,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACF2O,KAAK,MAIfC,0BAA2B,WACvB,OAAO5Q,EAAEgC,UAED,QACA,mCACA,mBACA,iHACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,4GACA,WACA,SACA,UACF2O,KAAK,MAIfE,qCAAsC,WAClC,OAAO7Q,EAAEgC,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACF2O,KAAK,MAIff,kCAAmC,WAC/B,OAAO5P,EAAEgC,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACF2O,KAAK,MAIfjF,iCAAkC,WAC9B,OAAO1L,EAAEgC,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACF2O,KAAK,MAIfb,qBAAsB,WAClB,OAAO9P,EAAEgC,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACF2O,KAAK,MAIfvI,wBAAyB,WACrB,OAAOpI,EAAEgC,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACF2O,KAAK,MAIfzI,4BAA6B,WACzB,OAAOlI,EAAEgC,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,sCACA,SACA,UACF2O,KAAK,MAIfvD,wBAAyB,WACrB,OAAOpN,EAAEgC,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACF2O,KAAK,MAIf1P,kBAAmB,WACf,OAAOjB,EAAEgC,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,iLACA,UACA,SACA,kCACA,WACF2O,KAAK,mBAMfzS,kBAAmBA","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["import mod_masthead from \"layout/masthead\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nimport \"libs/jquery/jstree\";\nvar FolderToolbarView = Backbone.View.extend({\n    el: \"#center\",\n\n    events: {\n        \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n        \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n        \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n        \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n        \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n        \"click .page_size_prompt\": \"showPageSizePrompt\"\n    },\n\n    defaults: {\n        can_add_library_item: false,\n        contains_file_or_folder: false,\n        chain_call_control: {\n            total_number: 0,\n            failed_number: 0\n        },\n        disabled_jstree_element: \"folders\"\n    },\n\n    modal: null,\n\n    // directory browsing object\n    jstree: null,\n\n    // user's histories\n    histories: null,\n\n    // genome select\n    select_genome: null,\n\n    // extension select\n    select_extension: null,\n\n    // extension types\n    list_extensions: [],\n\n    // datatype placeholder for extension auto-detection\n    auto: {\n        id: \"auto\",\n        text: \"Auto-detect\",\n        description:\n            \"This system will try to detect the file type automatically.\" +\n            \" If your file is not detected properly as one of the known formats,\" +\n            \" it most likely means that it has some format problems (e.g., different\" +\n            \" number of columns on different rows). You can still coerce the system\" +\n            \" to set your data to the format you think it should be.\" +\n            \" You can also upload compressed files, which will automatically be decompressed.\"\n    },\n\n    // genomes\n    list_genomes: [],\n\n    initialize: function(options) {\n        this.options = _.defaults(options || {}, this.defaults);\n        this.fetchExtAndGenomes();\n        this.render();\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var toolbar_template = this.templateToolBar();\n        var template_defaults = {\n            id: this.options.id,\n            is_admin: false,\n            is_anonym: true,\n            mutiple_add_dataset_options: false\n        };\n        if (Galaxy.user) {\n            template_defaults.is_admin = Galaxy.user.isAdmin();\n            template_defaults.is_anonym = Galaxy.user.isAnonymous();\n            if (\n                Galaxy.config.user_library_import_dir !== null ||\n                Galaxy.config.allow_library_path_paste !== false ||\n                Galaxy.config.library_import_dir !== null\n            ) {\n                template_defaults.mutiple_add_dataset_options = true;\n            }\n        }\n        this.$el.html(toolbar_template(template_defaults));\n    },\n\n    /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n    renderPaginator: function(options) {\n        this.options = _.extend(this.options, options);\n        var paginator_template = this.templatePaginator();\n        $(\"body\")\n            .find(\".folder-paginator\")\n            .html(\n                paginator_template({\n                    id: this.options.id,\n                    show_page: parseInt(this.options.show_page),\n                    page_count: parseInt(this.options.page_count),\n                    total_items_count: this.options.total_items_count,\n                    items_shown: this.options.items_shown,\n                    folder_page_size: Galaxy.libraries.preferences.get(\n                        \"folder_page_size\"\n                    )\n                })\n            );\n    },\n\n    configureElements: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.can_add_library_item === true) {\n            $(\".add-library-items\").show();\n        } else {\n            $(\".add-library-items\").hide();\n        }\n        if (this.options.contains_file_or_folder === true) {\n            if (Galaxy.user) {\n                if (!Galaxy.user.isAnonymous()) {\n                    $(\".logged-dataset-manipulation\").show();\n                    $(\".dataset-manipulation\").show();\n                } else {\n                    $(\".dataset-manipulation\").show();\n                    $(\".logged-dataset-manipulation\").hide();\n                }\n            } else {\n                $(\".logged-dataset-manipulation\").hide();\n                $(\".dataset-manipulation\").hide();\n            }\n        } else {\n            $(\".logged-dataset-manipulation\").hide();\n            $(\".dataset-manipulation\").hide();\n        }\n        this.$el.find(\"[data-toggle]\").tooltip();\n    },\n\n    // shows modal for creating folder\n    createFolderFromModal: function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // create modal\n        var self = this;\n        var template = this.templateNewFolderInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Create New Folder\",\n            body: template(),\n            buttons: {\n                Create: function() {\n                    self.create_new_folder_event();\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    // create the new folder from modal\n    create_new_folder_event: function() {\n        var folderDetails = this.serialize_new_folder();\n        if (this.validate_new_folder(folderDetails)) {\n            var folder = new mod_library_model.FolderAsModel();\n            var url_items = Backbone.history.fragment.split(\"/\"),\n                current_folder_id;\n            if (url_items.indexOf(\"page\") > -1) {\n                current_folder_id = url_items[url_items.length - 3];\n            } else {\n                current_folder_id = url_items[url_items.length - 1];\n            }\n            folder.url = folder.urlRoot + current_folder_id;\n\n            folder.save(folderDetails, {\n                success: function(folder) {\n                    Galaxy.modal.hide();\n                    mod_toastr.success(\"Folder created.\");\n                    folder.set({ type: \"folder\" });\n                    Galaxy.libraries.folderListView.collection.add(folder);\n                },\n                error: function(model, response) {\n                    Galaxy.modal.hide();\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        } else {\n            mod_toastr.error(\"Folder's name is missing.\");\n        }\n        return false;\n    },\n\n    // serialize data from the modal\n    serialize_new_folder: function() {\n        return {\n            name: $(\"input[name='Name']\").val(),\n            description: $(\"input[name='Description']\").val()\n        };\n    },\n\n    // validate new folder info\n    validate_new_folder: function(folderDetails) {\n        return folderDetails.name !== \"\";\n    },\n\n    // show bulk import modal\n    modalBulkImport: function() {\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            var that = this;\n            this.histories = new mod_library_model.GalaxyHistories();\n            this.histories\n                .fetch()\n                .done(function() {\n                    var template = that.templateBulkImportInModal();\n                    that.modal = Galaxy.modal;\n                    that.modal.show({\n                        closing_events: true,\n                        title: \"Import into History\",\n                        body: template({\n                            histories: that.histories.models\n                        }),\n                        buttons: {\n                            Import: function() {\n                                that.importAllIntoHistory();\n                            },\n                            Close: function() {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                })\n                .fail(function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                });\n        }\n    },\n\n    /**\n   * Import all selected datasets into history.\n   */\n    importAllIntoHistory: function() {\n        this.modal.disableButton(\"Import\");\n        var new_history_name = this.modal.$(\"input[name=history_name]\").val();\n        var that = this;\n        if (new_history_name !== \"\") {\n            $.post(Galaxy.root + \"api/histories\", {\n                name: new_history_name\n            })\n                .done(function(new_history) {\n                    that.options.last_used_history_id = new_history.id;\n                    that.processImportToHistory(\n                        new_history.id,\n                        new_history.name\n                    );\n                })\n                .fail(function(xhr, status, error) {\n                    mod_toastr.error(\"An error occurred.\");\n                })\n                .always(function() {\n                    that.modal.enableButton(\"Import\");\n                });\n        } else {\n            var history_id = $(\n                \"select[name=dataset_import_bulk] option:selected\"\n            ).val();\n            this.options.last_used_history_id = history_id;\n            var history_name = $(\n                \"select[name=dataset_import_bulk] option:selected\"\n            ).text();\n            this.processImportToHistory(history_id, history_name);\n            this.modal.enableButton(\"Import\");\n        }\n    },\n\n    processImportToHistory: function(history_id, history_name) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        // prepare the dataset objects to be imported\n        var datasets_to_import = [];\n        for (var i = dataset_ids.length - 1; i >= 0; i--) {\n            var library_dataset_id = dataset_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = historyItem.urlRoot + history_id + \"/contents\";\n            historyItem.content = library_dataset_id;\n            historyItem.source = \"library\";\n            datasets_to_import.push(historyItem);\n        }\n\n        // prepare the folder objects to be imported\n        var folders_to_import = [];\n        for (var i = folder_ids.length - 1; i >= 0; i--) {\n            var library_folder_id = folder_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = historyItem.urlRoot + history_id + \"/contents\";\n            historyItem.content = library_folder_id;\n            historyItem.source = \"library_folder\";\n            datasets_to_import.push(historyItem);\n        }\n\n        this.initChainCallControl({\n            length: datasets_to_import.length,\n            action: \"to_history\",\n            history_name: history_name\n        });\n        // set the used history as current so user will see the last one\n        // that he imported into in the history panel on the 'analysis' page\n        jQuery.getJSON(Galaxy.root + \"history/set_as_current?id=\" + history_id);\n        this.chainCallImportingIntoHistory(datasets_to_import, history_name);\n    },\n\n    /**\n   * Update the progress bar in modal window.\n   */\n    updateProgress: function() {\n        this.progress += this.progressStep;\n        $(\".progress-bar-import\").width(Math.round(this.progress) + \"%\");\n        var txt_representation = Math.round(this.progress) + \"% Complete\";\n        $(\".completion_span\").text(txt_representation);\n    },\n\n    /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n    download: function(folder_id, format) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        var url = Galaxy.root + \"api/libraries/datasets/download/\" + format;\n        var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n        this.processDownload(url, data, \"get\");\n    },\n\n    /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n    processDownload: function(url, data, method) {\n        if (url && data) {\n            // data can be string of parameters or array/object\n            data = typeof data === \"string\" ? data : $.param(data);\n            // split params into form inputs\n            var inputs = \"\";\n            $.each(data.split(\"&\"), function() {\n                var pair = this.split(\"=\");\n                inputs +=\n                    '<input type=\"hidden\" name=\"' +\n                    pair[0] +\n                    '\" value=\"' +\n                    pair[1] +\n                    '\" />';\n            });\n            // send request\n            $(\n                '<form action=\"' +\n                    url +\n                    '\" method=\"' +\n                    (method || \"post\") +\n                    '\">' +\n                    inputs +\n                    \"</form>\"\n            )\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            mod_toastr.info(\"Your download will begin soon.\");\n        } else {\n            mod_toastr.error(\"An error occurred.\");\n        }\n    },\n\n    addFilesFromHistoryModal: function() {\n        this.histories = new mod_library_model.GalaxyHistories();\n        var self = this;\n        this.histories\n            .fetch()\n            .done(function() {\n                self.modal = Galaxy.modal;\n                var template_modal = self.templateAddFilesFromHistory();\n                self.modal.show({\n                    closing_events: true,\n                    title: \"Adding datasets from your history\",\n                    body: template_modal({\n                        histories: self.histories.models\n                    }),\n                    buttons: {\n                        Add: function() {\n                            self.addAllDatasetsFromHistory();\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + self.id,\n                            { trigger: true }\n                        );\n                    }\n                });\n                self.fetchAndDisplayHistoryContents(\n                    self.histories.models[0].id\n                );\n                $(\"#dataset_add_bulk\").change(function(event) {\n                    self.fetchAndDisplayHistoryContents(event.target.value);\n                });\n            })\n            .fail(function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            });\n    },\n\n    /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n    importFilesFromPathModal: function() {\n        var that = this;\n        this.modal = Galaxy.modal;\n        var template_modal = this.templateImportPathModal();\n        this.modal.show({\n            closing_events: true,\n            title: \"Please enter paths to import\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromPathsClicked(that);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(\"folders/\" + that.id, {\n                    trigger: true\n                });\n            }\n        });\n        this.renderSelectBoxes();\n    },\n\n    /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n    fetchExtAndGenomes: function() {\n        var that = this;\n        mod_utils.get({\n            url: Galaxy.root + \"api/datatypes?extension_only=False\",\n            success: function(datatypes) {\n                that.list_extensions = [];\n                for (var key in datatypes) {\n                    that.list_extensions.push({\n                        id: datatypes[key].extension,\n                        text: datatypes[key].extension,\n                        description: datatypes[key].description,\n                        description_url: datatypes[key].description_url\n                    });\n                }\n                that.list_extensions.sort(function(a, b) {\n                    return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                });\n                that.list_extensions.unshift(that.auto);\n            },\n            cache: true\n        });\n        mod_utils.get({\n            url: Galaxy.root + \"api/genomes\",\n            success: function(genomes) {\n                that.list_genomes = [];\n                for (var key in genomes) {\n                    that.list_genomes.push({\n                        id: genomes[key][1],\n                        text: genomes[key][0]\n                    });\n                }\n                that.list_genomes.sort(function(a, b) {\n                    return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                });\n            },\n            cache: true\n        });\n    },\n\n    renderSelectBoxes: function() {\n        // This won't work properly unlesss we already have the data fetched.\n        // See this.fetchExtAndGenomes()\n        // TODO switch to common resources:\n        // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n        var that = this;\n        this.select_genome = new mod_select.View({\n            css: \"library-genome-select\",\n            data: that.list_genomes,\n            container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n            value: \"?\"\n        });\n        this.select_extension = new mod_select.View({\n            css: \"library-extension-select\",\n            data: that.list_extensions,\n            container: Galaxy.modal.$el.find(\"#library_extension_select\"),\n            value: \"auto\"\n        });\n    },\n\n    /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n    importFilesFromGalaxyFolderModal: function(options) {\n        var that = this;\n        var template_modal = this.templateBrowserModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Please select folders or files\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromJstreePath(that, options);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(\"folders/\" + that.id, {\n                    trigger: true\n                });\n            }\n        });\n\n        $(\".libimport-select-all\").bind(\"click\", function() {\n            $(\"#jstree_browser\").jstree(\"check_all\");\n        });\n        $(\".libimport-select-none\").bind(\"click\", function() {\n            $(\"#jstree_browser\").jstree(\"uncheck_all\");\n        });\n\n        this.renderSelectBoxes();\n        options.disabled_jstree_element = \"folders\";\n        this.renderJstree(options);\n\n        $(\"input[type=radio]\").change(function(event) {\n            if (event.target.value === \"jstree-disable-folders\") {\n                options.disabled_jstree_element = \"folders\";\n                that.renderJstree(options);\n                $(\".jstree-folders-message\").hide();\n                $(\".jstree-preserve-structure\").hide();\n                $(\".jstree-files-message\").show();\n            } else if (event.target.value === \"jstree-disable-files\") {\n                $(\".jstree-files-message\").hide();\n                $(\".jstree-folders-message\").show();\n                $(\".jstree-preserve-structure\").show();\n                options.disabled_jstree_element = \"files\";\n                that.renderJstree(options);\n            }\n        });\n    },\n\n    /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n    renderJstree: function(options) {\n        var that = this;\n        this.options = _.extend(this.options, options);\n        var target = options.source || \"userdir\";\n        var disabled_jstree_element = this.options.disabled_jstree_element;\n        this.jstree = new mod_library_model.Jstree();\n        this.jstree.url =\n            this.jstree.urlRoot +\n            \"?target=\" +\n            target +\n            \"&format=jstree\" +\n            \"&disable=\" +\n            disabled_jstree_element;\n        this.jstree.fetch({\n            success: function(model, response) {\n                $(\"#jstree_browser\").jstree(\"destroy\");\n                $(\"#jstree_browser\").jstree({\n                    core: {\n                        data: model\n                    },\n                    plugins: [\"types\", \"checkbox\"],\n                    types: {\n                        folder: {\n                            icon: \"jstree-folder\"\n                        },\n                        file: {\n                            icon: \"jstree-file\"\n                        }\n                    },\n                    checkbox: {\n                        three_state: false\n                    }\n                });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    if (response.responseJSON.err_code === 404001) {\n                        mod_toastr.warning(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    }\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n    importFromPathsClicked: function() {\n        var preserve_dirs = this.modal.$el\n            .find(\".preserve-checkbox\")\n            .is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el\n            .find(\".spacetab-checkbox\")\n            .is(\":checked\");\n        var to_posix_lines = this.modal.$el\n            .find(\".posix-checkbox\")\n            .is(\":checked\");\n        var tag_using_filenames = this.modal.$el\n            .find(\".tag-files\")\n            .is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var paths = $(\"textarea#import_paths\").val();\n        var valid_paths = [];\n        if (!paths) {\n            mod_toastr.info(\"Please enter a path relative to Galaxy root.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            paths = paths.split(\"\\n\");\n            for (var i = paths.length - 1; i >= 0; i--) {\n                var trimmed = paths[i].trim();\n                if (trimmed.length !== 0) {\n                    valid_paths.push(trimmed);\n                }\n            }\n            this.initChainCallControl({\n                length: valid_paths.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallImportingFolders({\n                paths: valid_paths,\n                preserve_dirs: preserve_dirs,\n                link_data: link_data,\n                space_to_tab: space_to_tab,\n                to_posix_lines: to_posix_lines,\n                source: \"admin_path\",\n                file_type: file_type,\n                tag_using_filenames: tag_using_filenames,\n                dbkey: dbkey\n            });\n        }\n    },\n\n    /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n    initChainCallControl: function(options) {\n        var template;\n        switch (options.action) {\n            case \"adding_datasets\":\n                template = this.templateAddingDatasetsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(\n                    template({\n                        folder_name: this.options.folder_name\n                    })\n                );\n                break;\n            case \"deleting_datasets\":\n                template = this.templateDeletingItemsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template());\n                break;\n            case \"to_history\":\n                template = this.templateImportIntoHistoryProgressBar();\n                this.modal.$el\n                    .find(\".modal-body\")\n                    .html(template({ history_name: options.history_name }));\n                break;\n            default:\n                Galaxy.emit.error(\"Wrong action specified.\", \"datalibs\");\n                break;\n        }\n\n        // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n        // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n        this.progress = 0;\n        this.progressStep = 100 / options.length;\n        this.options.chain_call_control.total_number = options.length;\n        this.options.chain_call_control.failed_number = 0;\n    },\n\n    /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n    importFromJstreePath: function(that, options) {\n        var all_nodes = $(\"#jstree_browser\")\n            .jstree()\n            .get_selected(true);\n        // remove the disabled elements that could have been trigerred with the 'select all'\n        var selected_nodes = _.filter(all_nodes, function(node) {\n            return node.state.disabled == false;\n        });\n        var preserve_dirs = this.modal.$el\n            .find(\".preserve-checkbox\")\n            .is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el\n            .find(\".spacetab-checkbox\")\n            .is(\":checked\");\n        var to_posix_lines = this.modal.$el\n            .find(\".posix-checkbox\")\n            .is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var tag_using_filenames = this.modal.$el\n            .find(\".tag-files\")\n            .is(\":checked\");\n        var selection_type = selected_nodes[0].type;\n        var paths = [];\n        if (selected_nodes.length < 1) {\n            mod_toastr.info(\"Please select some items first.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                if (selected_nodes[i].li_attr.full_path !== undefined) {\n                    paths.push(selected_nodes[i].li_attr.full_path);\n                }\n            }\n            this.initChainCallControl({\n                length: paths.length,\n                action: \"adding_datasets\"\n            });\n            if (selection_type === \"folder\") {\n                var full_source = options.source + \"_folder\";\n                this.chainCallImportingFolders({\n                    paths: paths,\n                    preserve_dirs: preserve_dirs,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    tag_using_filenames: tag_using_filenames\n                });\n            } else if (selection_type === \"file\") {\n                var full_source = options.source + \"_file\";\n                this.chainCallImportingUserdirFiles({\n                    paths: paths,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    tag_using_filenames: tag_using_filenames\n                });\n            }\n        }\n    },\n\n    fetchAndDisplayHistoryContents: function(history_id) {\n        var history_contents = new mod_library_model.HistoryContents({\n            id: history_id\n        });\n        var self = this;\n        history_contents.fetch({\n            success: function(history_contents) {\n                var history_contents_template = self.templateHistoryContents();\n                self.histories\n                    .get(history_id)\n                    .set({ contents: history_contents });\n                self.modal.$el.find(\"#selected_history_content\").html(\n                    history_contents_template({\n                        history_contents: history_contents.models.reverse()\n                    })\n                );\n                self.modal.$el\n                    .find(\".history-import-select-all\")\n                    .bind(\"click\", function() {\n                        $(\"#selected_history_content [type=checkbox]\").prop(\n                            \"checked\",\n                            true\n                        );\n                    });\n                self.modal.$el\n                    .find(\".history-import-unselect-all\")\n                    .bind(\"click\", function() {\n                        $(\"#selected_history_content [type=checkbox]\").prop(\n                            \"checked\",\n                            false\n                        );\n                    });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n   * Import all selected datasets from history into the current folder.\n   */\n    addAllDatasetsFromHistory: function() {\n        var checked_hdas = this.modal.$el\n            .find(\"#selected_history_content\")\n            .find(\":checked\");\n        var history_item_ids = []; // can be hda or hdca\n        var history_item_types = [];\n        var items_to_add = [];\n        if (checked_hdas.length < 1) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            this.modal.disableButton(\"Add\");\n            checked_hdas.each(function() {\n                var hid = $(this)\n                    .closest(\"li\")\n                    .data(\"id\");\n                if (hid) {\n                    var item_type = $(this)\n                        .closest(\"li\")\n                        .data(\"name\");\n                    history_item_ids.push(hid);\n                    history_item_types.push(item_type);\n                }\n            });\n            for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                var history_item_id = history_item_ids[i];\n                var folder_item = new mod_library_model.Item();\n                folder_item.url =\n                    Galaxy.root +\n                    \"api/folders/\" +\n                    this.options.id +\n                    \"/contents\";\n                if (history_item_types[i] === \"collection\") {\n                    folder_item.set({ from_hdca_id: history_item_id });\n                } else {\n                    folder_item.set({ from_hda_id: history_item_id });\n                }\n                items_to_add.push(folder_item);\n            }\n            this.initChainCallControl({\n                length: items_to_add.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallAddingHdas(items_to_add);\n        }\n    },\n\n    /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n    chainCallImportingIntoHistory: function(history_item_set, history_name) {\n        var self = this;\n        var popped_item = history_item_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected datasets imported into history. Click this to start analyzing it.\",\n                    \"\",\n                    {\n                        onclick: function() {\n                            window.location = Galaxy.root;\n                        }\n                    }\n                );\n            } else if (\n                this.options.chain_call_control.failed_number ===\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.error(\n                    \"There was an error and no datasets were imported into history.\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number <\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.warning(\n                    \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                    \"\",\n                    {\n                        onclick: function() {\n                            window.location = Galaxy.root;\n                        }\n                    }\n                );\n            }\n            Galaxy.modal.hide();\n            return true;\n        }\n        var promise = $.when(\n            popped_item.save({\n                content: popped_item.content,\n                source: popped_item.source\n            })\n        );\n\n        promise\n            .done(function() {\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(\n                    history_item_set,\n                    history_name\n                );\n            })\n            .fail(function() {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(\n                    history_item_set,\n                    history_name\n                );\n            });\n    },\n\n    /**\n   * Take the array of paths and create a request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to user folder on Galaxy\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n    chainCallImportingUserdirFiles: function(options) {\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected files imported into the current folder\"\n                );\n                Galaxy.modal.hide();\n            } else {\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                Galaxy.root +\n                    \"api/libraries/datasets?encoded_folder_id=\" +\n                    that.id +\n                    \"&source=\" +\n                    options.source +\n                    \"&path=\" +\n                    popped_item +\n                    \"&file_type=\" +\n                    options.file_type +\n                    \"&link_data=\" +\n                    options.link_data +\n                    \"&space_to_tab=\" +\n                    options.space_to_tab +\n                    \"&to_posix_lines=\" +\n                    options.to_posix_lines +\n                    \"&dbkey=\" +\n                    options.dbkey +\n                    \"&tag_using_filenames=\" +\n                    options.tag_using_filenames\n            )\n        );\n        promise\n            .done(function(response) {\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            })\n            .fail(function() {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            });\n    },\n\n    /**\n   * Take the array of paths and create a request for each of them\n   * calling them in series. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n   * @param  {boolean} link_data              copy files to Galaxy or link instead\n   * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n   * @param  {boolean} space_to_tab           convert spaces to tabs\n   * @param  {str} source                     string representing what type of folder\n   *                                          is the source of import\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n    chainCallImportingFolders: function(options) {\n        // TODO need to check which paths to call\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected folders and their contents imported into the current folder.\"\n                );\n                Galaxy.modal.hide();\n            } else {\n                // TODO better error report\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                Galaxy.root +\n                    \"api/libraries/datasets?encoded_folder_id=\" +\n                    that.id +\n                    \"&source=\" +\n                    options.source +\n                    \"&path=\" +\n                    popped_item +\n                    \"&preserve_dirs=\" +\n                    options.preserve_dirs +\n                    \"&link_data=\" +\n                    options.link_data +\n                    \"&to_posix_lines=\" +\n                    options.to_posix_lines +\n                    \"&space_to_tab=\" +\n                    options.space_to_tab +\n                    \"&file_type=\" +\n                    options.file_type +\n                    \"&dbkey=\" +\n                    options.dbkey +\n                    \"&tag_using_filenames=\" +\n                    options.tag_using_filenames\n            )\n        );\n        promise\n            .done(function(response) {\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            })\n            .fail(function() {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            });\n    },\n\n    /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n    chainCallAddingHdas: function(hdas_set) {\n        var self = this;\n        this.added_hdas = new mod_library_model.Folder();\n        var popped_item = hdas_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\n                    \"Selected datasets from history added to the folder\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number ===\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.error(\n                    \"There was an error and no datasets were added to the folder.\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number <\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.warning(\n                    \"Some of the datasets could not be added to the folder\"\n                );\n            }\n            Galaxy.modal.hide();\n            return this.added_hdas;\n        }\n        var promise = $.when(\n            popped_item.save({\n                from_hda_id: popped_item.get(\"from_hda_id\")\n            })\n        );\n\n        promise\n            .done(function(model) {\n                Galaxy.libraries.folderListView.collection.add(model);\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            })\n            .fail(function() {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            });\n    },\n\n    /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n    chainCallDeletingItems: function(items_to_delete) {\n        var self = this;\n        this.deleted_items = new mod_library_model.Folder();\n        var item_to_delete = items_to_delete.pop();\n        if (typeof item_to_delete === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected items were deleted.\");\n            } else if (\n                this.options.chain_call_control.failed_number ===\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.error(\n                    \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                );\n            } else if (\n                this.options.chain_call_control.failed_number <\n                this.options.chain_call_control.total_number\n            ) {\n                mod_toastr.warning(\n                    \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                );\n            }\n            Galaxy.modal.hide();\n            return this.deleted_items;\n        }\n        item_to_delete\n            .destroy()\n            .done(function(item) {\n                Galaxy.libraries.folderListView.collection.remove(\n                    item_to_delete.id\n                );\n                self.updateProgress();\n                // add the deleted item to collection, triggers rendering\n                if (Galaxy.libraries.folderListView.options.include_deleted) {\n                    var updated_item = null;\n                    if (\n                        item.type === \"folder\" ||\n                        item.model_class === \"LibraryFolder\"\n                    ) {\n                        updated_item = new mod_library_model.FolderAsModel(\n                            item\n                        );\n                    } else if (\n                        item.type === \"file\" ||\n                        item.model_class === \"LibraryDataset\"\n                    ) {\n                        updated_item = new mod_library_model.Item(item);\n                    } else {\n                        Galaxy.emit.error(\n                            \"Unknown library item type found.\",\n                            \"datalibs\"\n                        );\n                        Galaxy.emit.error(\n                            item.type || item.model_class,\n                            \"datalibs\"\n                        );\n                    }\n                    Galaxy.libraries.folderListView.collection.add(\n                        updated_item\n                    );\n                }\n                self.chainCallDeletingItems(items_to_delete);\n            })\n            .fail(function() {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallDeletingItems(items_to_delete);\n            });\n    },\n\n    /**\n   * Handles the click on 'show deleted' checkbox\n   */\n    checkIncludeDeleted: function(event) {\n        if (event.target.checked) {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: true\n            });\n        } else {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: false\n            });\n        }\n    },\n\n    /**\n   * Delete the selected items. Atomic. One by one.\n   */\n    deleteSelectedItems: function() {\n        var dataset_ids = [];\n        var folder_ids = [];\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select at least one item for deletion.\");\n        } else {\n            var template = this.templateDeletingItemsProgressBar();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: \"Deleting selected items\",\n                body: template({}),\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n            // init the control counters\n            this.options.chain_call_control.total_number = 0;\n            this.options.chain_call_control.failed_number = 0;\n            $checkedValues.each(function() {\n                var row_id = $(this)\n                    .closest(\"tr\")\n                    .data(\"id\");\n                if (row_id !== undefined) {\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                }\n            });\n            // init the progress bar\n            var items_total = dataset_ids.length + folder_ids.length;\n            this.progressStep = 100 / items_total;\n            this.progress = 0;\n\n            // prepare the dataset items to be added\n            var items_to_delete = [];\n            for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                var dataset = new mod_library_model.Item({\n                    id: dataset_ids[i]\n                });\n                items_to_delete.push(dataset);\n            }\n            for (var i = folder_ids.length - 1; i >= 0; i--) {\n                var folder = new mod_library_model.FolderAsModel({\n                    id: folder_ids[i]\n                });\n                items_to_delete.push(folder);\n            }\n\n            this.options.chain_call_control.total_number = items_total;\n            // call the recursive function to call ajax one after each other (request FIFO queue)\n            this.chainCallDeletingItems(items_to_delete);\n        }\n    },\n\n    showLocInfo: function() {\n        var library = null;\n        var that = this;\n        if (Galaxy.libraries.libraryListView !== null) {\n            library = Galaxy.libraries.libraryListView.collection.get(\n                this.options.parent_library_id\n            );\n            this.showLocInfoModal(library);\n        } else {\n            library = new mod_library_model.Library({\n                id: this.options.parent_library_id\n            });\n            library.fetch({\n                success: function() {\n                    that.showLocInfoModal(library);\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        }\n    },\n\n    showLocInfoModal: function(library) {\n        var that = this;\n        var template = this.templateLocInfoInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Location Details\",\n            body: template({ library: library, options: that.options }),\n            buttons: {\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    showImportModal: function(options) {\n        switch (options.source) {\n            case \"history\":\n                this.addFilesFromHistoryModal();\n                break;\n            case \"importdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"importdir\"\n                });\n                break;\n            case \"path\":\n                this.importFilesFromPathModal();\n                break;\n            case \"userdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"userdir\"\n                });\n                break;\n            default:\n                Galaxy.libraries.library_router.back();\n                mod_toastr.error(\"Invalid import source.\");\n                break;\n        }\n    },\n\n    /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n    showPageSizePrompt: function(e) {\n        e.preventDefault();\n        var folder_page_size = prompt(\n            \"How many items per page do you want to see?\",\n            Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        if (\n            folder_page_size != null &&\n            folder_page_size == parseInt(folder_page_size)\n        ) {\n            Galaxy.libraries.preferences.set({\n                folder_page_size: parseInt(folder_page_size)\n            });\n            Galaxy.libraries.folderListView.render({\n                id: this.options.id,\n                show_page: 1\n            });\n        }\n    },\n\n    findCheckedRows: function() {\n        return $(\"#folder_list_body\").find(\":checked\");\n    },\n\n    templateToolBar: function() {\n        return _.template(\n            [\n                // container start\n                '<div class=\"library_style_container\">',\n                // toolbar start\n                '<div id=\"library_toolbar\">',\n                '<form class=\"form-inline\" role=\"form\">',\n                \"<span><strong>DATA LIBRARIES</strong></span>\",\n                // paginator will append here\n                '<span class=\"library-paginator folder-paginator\"></span>',\n                '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                \"<label>\",\n                '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n                \"</label>\",\n                \"</div>\",\n                '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n                \"</button>\",\n                \"<% if(mutiple_add_dataset_options) { %>\",\n                '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n                '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li class=\"divider\"></li>',\n                '<li class=\"dropdown-header\">Admins only</li>',\n                \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                \"<% } %>\",\n                \"<% } %>\",\n                \"</ul>\",\n                \"</div>\",\n                \"<% } else { %>\",\n                '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                \"</a>\",\n                \"<% } %>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n                '<span class=\"fa fa-book\"></span>',\n                \"&nbsp;to History\",\n                \"</button>\",\n                '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n                '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                \"</ul>\",\n                \"</div>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n                '<span class=\"fa fa-times\"></span> Delete</button>',\n                '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n                '<span class=\"fa fa-info-circle\"></span>',\n                \"&nbsp;Details\",\n                \"</button>\",\n                '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                '<button class=\"primary-button\" type=\"button\">',\n                '<span class=\"fa fa-question-circle\"></span>',\n                \"&nbsp;Help\",\n                \"</button>\",\n                \"</a>\",\n                \"</span>\",\n                \"</div>\",\n                \"</form>\",\n                // toolbar end\n                '<div id=\"folder_items_element\">',\n                \"</div>\",\n                // paginator will append here\n                '<div class=\"folder-paginator paginator-bottom\"></div>',\n                // container end\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateLocInfoInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">library</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                '<td><%- library.get(\"name\") %></td>',\n                \"</tr>\",\n                '<% if(library.get(\"description\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                '<td><%- library.get(\"description\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>synopsis</td>\",\n                '<td><%- library.get(\"synopsis\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>created</td>\",\n                '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                '<td><%- library.get(\"id\") %></td>',\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">folder</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                \"<td><%- options.folder_name %></td>\",\n                \"</tr>\",\n                '<% if(options.folder_description !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                \"<td><%- options.folder_description %></td>\",\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                \"<td><%- options.id %></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateNewFolderInModal: function() {\n        return _.template(\n            [\n                '<div id=\"new_folder_modal\">',\n                \"<form>\",\n                '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                \"</form>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBulkImportInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<div class=\"library-modal-item\">',\n                \"Select history: \",\n                '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                \"<% _.each(histories, function(history) { %>\",\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                '<div class=\"library-modal-item\">',\n                \"or create new: \",\n                '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n                \"</input>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportIntoHistoryProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddingDatasetsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateDeletingItemsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBrowserModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom:1em;\">',\n                '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                \"</label>\",\n                '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                \"</label>\",\n                \"</div>\",\n                '<div style=\"margin-bottom:1em;\">',\n                '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"<hr />\",\n                // append jstree object here\n                '<div id=\"jstree_browser\">',\n                \"</div>\",\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<br>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportPathModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom: 0.5em;\">',\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                \"<br>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddFilesFromHistory: function() {\n        return _.template(\n            [\n                '<div id=\"add_files_modal\">',\n                \"<div>\",\n                \"1.&nbsp;Select history:&nbsp;\",\n                '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                \"<% _.each(histories, function(history) { %>\", //history select box\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                \"<br/>\",\n                '<div id=\"selected_history_content\">',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateHistoryContents: function() {\n        return _.template(\n            [\n                \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                \"<div>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"</div>\",\n                \"<br>\",\n                \"<ul>\",\n                \"<% _.each(history_contents, function(history_item) { %>\",\n                '<% if (history_item.get(\"deleted\") != true ) { %>',\n                '<% var item_name = history_item.get(\"name\") %>',\n                '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                '<% var collection_type = history_item.get(\"collection_type\") %>',\n                '<% if (collection_type === \"list\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                \"<label>\",\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                \"</label>\",\n                \"</li>\",\n                \"<% } else { %>\",\n                '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                \"</span>\",\n                \"</li>\",\n                \"<% } %>\",\n                '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                \"</label>\",\n                \"</li>\",\n                \"<% } %>\",\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ul>\"\n            ].join(\"\")\n        );\n    },\n\n    templatePaginator: function() {\n        return _.template(\n            [\n                '<ul class=\"pagination pagination-sm\">',\n                \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } else { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                \"<% } else { %>\", // we are on the first page\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                '<li class=\"active\">',\n                '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                \"</li>\",\n                \"<% if ( ( show_page ) < page_count ) { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } else { %>\",\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } %>\",\n                \"</ul>\",\n                \"<span>\",\n                ' <%- items_shown %> items shown <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"currently <%- folder_page_size %> per page\" class=\"page_size_prompt\">(change)</a>',\n                \"</span>\",\n                \"<span>\",\n                \" <%- total_items_count %> total\",\n                \"</span>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderToolbarView: FolderToolbarView\n};\n"]}