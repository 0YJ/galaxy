{"version":3,"sources":["mvc/library/library-folder-view.js"],"names":["define","mod_toastr","mod_library_model","mod_select","FolderView","Backbone","View","extend","model","options","events","initialize","_","this","fetchFolder","id","that","fetch","success","show_permissions","error","response","responseJSON","onclick","Galaxy","libraries","library_router","back","showPermissions","template","templateFolderPermissions","$el","folder","$","remove","get","root","self","prepareSelectBoxes","fetched_permissions","fail","is_admin","_serializeRoles","selected_roles","push","selected_manage_folder_roles","css","modifySelectObject","i","role_list","length","_createSelectOptions","select_options","multiple","ajax","url","dataType","quietMillis","selected_add_item_roles","add_library_item_role_list","page_limit","page","selected_modify_folder_roles","results","modify_folder_role_list","addSelectObject","roles","formatResult","manageSelectObject","initSelection","split","data","name","init_data","minimumInputLength","placeholder","container","find","_extractIds","ids_list","term","q","modify_ids","manage_ids","more","role","element","callback","val","each","item","initialData","join","dropdownCssClass","roles_list","savePermissions","event","add_ids","select2","post","add_ids[]","manage_ids[]","modify_ids[]","done"],"mappings":"kCAAAA,QACK,cAAe,4BAA6B,oBAC7C,SAASC,EAAYC,EAAmBC,GAmTpC,OACIC,WArTRC,SAAgBC,KAAAC,QAERH,GAAAA,UAGAI,MAAO,KAEPC,WAEAC,QAAAA,kCAAQ,mBAIRC,WAAY,SAASF,GAArBE,KAAAA,QAAYC,EAAAL,OAAAM,KAASJ,QAASA,GAC1BI,KAAKJ,QAAYF,IACbM,KAAKJ,eAKbK,YAAa,SAASL,GAAtBK,KAAAA,QAAaF,EAAAL,OAAAM,KAAAJ,QAAAA,GACTI,KAAKJ,MAAL,IAAiBF,EAAYE,eAC7BM,GAAKP,KAAQC,QAAIP,KAAgC,IAAjDc,EAAAH,KAGAA,KAAIG,MAAOC,OACXC,QAAWD,WACPC,EAAST,QAAAU,kBACDH,EAAKP,mBAGZW,MALY,SAAAZ,EAAAa,QAMoB,IAA1BA,EAASb,aACRP,EAAOoB,MACPpB,EAAWmB,aACEE,QAILC,0BACIC,IANZD,QAAA,WAUGC,OAAAC,UAAAC,eAAAC,UAIC1B,EAHJmB,MASH,4CACJ,IArDyBG,QAAA,WAgDNC,OAAOC,UAAUC,eAAeC,cAiBxDC,gBAAIC,SAAgBC,GACpBjB,KAAKkB,QACDF,EAAAA,OAAShB,KAAEmB,QAAaxB,GAR5ByB,EAAE,YAAYC,SAYdD,IAAEE,GACSC,EAMHC,OAAKC,OACDC,EAAAA,OAAAA,KAAAA,WAEP,IACAC,EAAK3B,KAAWiB,4BACb7B,KAAAA,IAAAA,KAZR4B,GAAAG,OAAAnB,KAAAL,MAAAiC,SAAAA,KAkBA,IAAAJ,EAAAxB,KACAoB,EAAEE,IA1F4BX,OAAAY,KAyEtB,eAoBZM,EAAiB3B,GACT4B,8BAEAA,KAAAA,SAAeC,GAGlBP,EAAAC,oBACMK,oBAAPJ,MAGJD,KAAAA,WACS7B,EAAYF,MACbgC,qEAMJN,EAAA,yBAAIY,UArBJZ,EAAE,WAAWa,IAAI,WAAY,SA4C7BT,gBAAKU,SAAAA,GAvCL,IAAK,IA/FyBJ,KA+FrBK,EAAI,EAAGA,EAAIC,EAAUC,OAAQF,IAiD1CG,EAAsBP,KACdQ,EAAAA,GAAiB,GAAA,IAAAH,EAAAD,GAAA,IAGjBK,OAAAA,GAGAC,mBAAM,SAAA7C,GACF8C,KAAAA,QACI/B,EAAAA,OAAAX,KACAJ,QAAAA,GAGJ+C,IAAAA,EANE3C,KAAAJ,QAAA8B,oBAOFkB,EAAAA,KAEIC,EAAA7C,KAAA6B,gBACAH,EAAOoB,4BAEHC,EAAgB/C,KAAA6B,gBAChBmB,EAAMA,yBAEbC,EAfCjD,KAAA6B,gBAgBFqB,EAASC,yBAGL3B,EAAA4B,gBAASF,IAAAA,EAAcG,KAC1BrD,KAAAsC,qBA1BYtC,KA4BjBsD,WACIT,GA7Ba,IAiCbrB,EAAA+B,mBAAA,IAAAjE,EAAAG,KACHO,KAlCgBsC,qBAmCjBkB,KACI,cACAxB,GACA,IAGIR,EAAAU,mBAAW,IAAKuB,EAAhBhE,KACAiE,KAAAA,qBACIxD,KACAyD,cAFMV,GAIb,KA9CYX,qBAArB,SAAAd,EAAAtB,EAAA0D,GAqDA,OAAAC,mBAAA,EAtM8B5B,IAAA/B,EAoJ1BsC,UAAU,EAqDlBsB,YAAA,yBAnDQC,UAAWvC,EAAKN,IAAI8C,KAAK,IAAM9D,GAC/BuC,MAqDRwB,IACQC,OAAJ3C,KACSY,eACL+B,EAAAhE,GACH,+BACMgE,SAAP,OAjN8BtB,YAAA,IA+JtBc,KAAM,SAASS,EAAMnB,GAEjB,OACIoB,EAAGD,EAqDNpB,WAAA,GACbC,KAAAA,IAOIqB,QAAa,SAAKJ,EAAAA,GAIlBtD,IAAOY,EACH,GAAAyB,EADJU,EAEIlC,MAIA,OAAgB8C,QAFpBZ,EAAAL,MAAAkB,KAAAA,KAOI/C,aAAKT,SAAgByD,GACjB9C,OAAAA,EAAAA,KAAAA,UAAqBA,EAAAA,MAI5BC,gBAAgB,SAAA6C,GACbpF,OAAWmB,EAAXoD,MApPsBH,cAAA,SAAAiB,EAAAC,GA+SjC,IAAAhB,KA/SLtC,EAAAqD,EAAAE,MAAAlB,MAAA,MAAAmB,KAAA,WA0LoB,IAAIC,EAAO7E,KAAKyD,MAAM,KAwHnCC,EAAA3B,MACSxC,GAAAA,EAAAA,GADhBoE,KAAAkB,EAAA,OAlHgBH,EAAShB,IAEboB,YAAalB,EAAUmB,KAAK,KAC5BC,iBAAkB,YAS1Bf,YAAa,SAASgB,GAElB,IAAK,IADDf,KACK/B,EAAI8C,EAAW5C,OAAS,EAAGF,GAAK,EAAGA,IACxC+B,EAASnC,KAAKkD,EAAW9C,GAAGjC,IAEhC,OAAOgE,GAMXgB,gBAAiB,SAASC,GACtB,IAAI3D,EAAOxB,KACPoF,EAAUpF,KAAKiE,YACfjE,KAAKoD,gBAAgBlC,IAAImE,QAAQ,SAEjCf,EAAatE,KAAKiE,YAClBjE,KAAKuD,mBAAmBrC,IAAImE,QAAQ,SAEpChB,EAAarE,KAAKiE,YAClBjE,KAAKkC,mBAAmBhB,IAAImE,QAAQ,SAExCjE,EAAEkE,KACE3E,OAAOY,KACH,eACAC,EAAKtB,GACL,uCAEAqF,YAAaH,EACbI,eAAgBlB,EAChBmB,eAAgBpB,IAGnBqB,KAAK,SAAShE,GACXF,EAAKT,iBACDW,oBAAqBA,IAEzBtC,EAAWiB,QAAQ,wBAEtBsB,KAAK,WACFvC,EAAWmB,MACP,oEAKhBU,0BAA2B,WACvB,OAAOlB,EAAEiB,UAED,wCACA,6BACA,sDACA,gJACA,yCACA,sBACA,YACA,OACA,SACA,OACA,8CACA,QACA,oCACA,wBACA,wKACA,iBACA,+IACA,SACA,SACA,8BACA,8BACA,OACA,mDACA,QACA,8DACA,iDACA,uFACA,SACA,OACA,0CACA,QACA,wDACA,iDACA,qGACA,SACA,OACA,oCACA,QACA,8DACA,iDACA,qFACA,SACA,+JACA,iCACA,aACA,YACA,SACA,UACF+D,KAAK","file":"../../../scripts/mvc/library/library-folder-view.js","sourcesContent":["define(\n    [\"libs/toastr\", \"mvc/library/library-model\", \"mvc/ui/ui-select\"],\n    function(mod_toastr, mod_library_model, mod_select) {\n        var FolderView = Backbone.View.extend({\n            el: \"#center\",\n\n            model: null,\n\n            options: {},\n\n            events: {\n                \"click .toolbtn_save_permissions\": \"savePermissions\"\n            },\n\n            initialize: function(options) {\n                this.options = _.extend(this.options, options);\n                if (this.options.id) {\n                    this.fetchFolder();\n                }\n            },\n\n            fetchFolder: function(options) {\n                this.options = _.extend(this.options, options);\n                this.model = new mod_library_model.FolderAsModel({\n                    id: this.options.id\n                });\n                var that = this;\n                this.model.fetch({\n                    success: function() {\n                        if (that.options.show_permissions) {\n                            that.showPermissions();\n                        }\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(\n                                response.responseJSON.err_msg +\n                                    \" Click this to go back.\",\n                                \"\",\n                                {\n                                    onclick: function() {\n                                        Galaxy.libraries.library_router.back();\n                                    }\n                                }\n                            );\n                        } else {\n                            mod_toastr.error(\n                                \"An error occurred. Click this to go back.\",\n                                \"\",\n                                {\n                                    onclick: function() {\n                                        Galaxy.libraries.library_router.back();\n                                    }\n                                }\n                            );\n                        }\n                    }\n                });\n            },\n\n            showPermissions: function(options) {\n                this.options = _.extend(this.options, options);\n                $(\".tooltip\").remove();\n\n                var is_admin = false;\n                if (Galaxy.user) {\n                    is_admin = Galaxy.user.isAdmin();\n                }\n                var template = this.templateFolderPermissions();\n                this.$el.html(\n                    template({ folder: this.model, is_admin: is_admin })\n                );\n\n                var self = this;\n                $.get(\n                    Galaxy.root +\n                        \"api/folders/\" +\n                        self.id +\n                        \"/permissions?scope=current\"\n                )\n                    .done(function(fetched_permissions) {\n                        self.prepareSelectBoxes({\n                            fetched_permissions: fetched_permissions\n                        });\n                    })\n                    .fail(function() {\n                        mod_toastr.error(\n                            \"An error occurred while attempting to fetch folder permissions.\"\n                        );\n                    });\n\n                $(\"#center [data-toggle]\").tooltip();\n                //hack to show scrollbars\n                $(\"#center\").css(\"overflow\", \"auto\");\n            },\n\n            _serializeRoles: function(role_list) {\n                var selected_roles = [];\n                for (var i = 0; i < role_list.length; i++) {\n                    selected_roles.push(\n                        role_list[i][1] + \":\" + role_list[i][0]\n                    );\n                }\n                return selected_roles;\n            },\n\n            prepareSelectBoxes: function(options) {\n                this.options = _.extend(this.options, options);\n                var fetched_permissions = this.options.fetched_permissions;\n                var self = this;\n\n                var selected_add_item_roles = this._serializeRoles(\n                    fetched_permissions.add_library_item_role_list\n                );\n                var selected_manage_folder_roles = this._serializeRoles(\n                    fetched_permissions.manage_folder_role_list\n                );\n                var selected_modify_folder_roles = this._serializeRoles(\n                    fetched_permissions.modify_folder_role_list\n                );\n\n                self.addSelectObject = new mod_select.View(\n                    this._createSelectOptions(\n                        this,\n                        \"add_perm\",\n                        selected_add_item_roles,\n                        false\n                    )\n                );\n                self.manageSelectObject = new mod_select.View(\n                    this._createSelectOptions(\n                        this,\n                        \"manage_perm\",\n                        selected_manage_folder_roles,\n                        false\n                    )\n                );\n                self.modifySelectObject = new mod_select.View(\n                    this._createSelectOptions(\n                        this,\n                        \"modify_perm\",\n                        selected_modify_folder_roles,\n                        false\n                    )\n                );\n            },\n\n            _createSelectOptions: function(self, id, init_data) {\n                var select_options = {\n                    minimumInputLength: 0,\n                    css: id,\n                    multiple: true,\n                    placeholder: \"Click to select a role\",\n                    container: self.$el.find(\"#\" + id),\n                    ajax: {\n                        url:\n                            Galaxy.root +\n                            \"api/folders/\" +\n                            self.id +\n                            \"/permissions?scope=available\",\n                        dataType: \"json\",\n                        quietMillis: 100,\n                        data: function(term, page) {\n                            // page is the one-based page number tracked by Select2\n                            return {\n                                q: term, //search term\n                                page_limit: 10, // page size\n                                page: page // page number\n                            };\n                        },\n                        results: function(data, page) {\n                            var more = page * 10 < data.total; // whether or not there are more results available\n                            // notice we return the value of more so Select2 knows if more results can be loaded\n                            return { results: data.roles, more: more };\n                        }\n                    },\n                    formatResult: function roleFormatResult(role) {\n                        return role.name + \" type: \" + role.type;\n                    },\n\n                    formatSelection: function roleFormatSelection(role) {\n                        return role.name;\n                    },\n                    initSelection: function(element, callback) {\n                        // the input tag has a value attribute preloaded that points to a preselected role's id\n                        // this function resolves that id attribute to an object that select2 can render\n                        // using its formatResult renderer - that way the role name is shown preselected\n                        var data = [];\n                        $(element.val().split(\",\")).each(function() {\n                            var item = this.split(\":\");\n                            data.push({\n                                id: item[0],\n                                name: item[1]\n                            });\n                        });\n                        callback(data);\n                    },\n                    initialData: init_data.join(\",\"),\n                    dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n                };\n\n                return select_options;\n            },\n\n            /**\n   * Extract the role ids from Select2 elements's 'data'\n   */\n            _extractIds: function(roles_list) {\n                var ids_list = [];\n                for (var i = roles_list.length - 1; i >= 0; i--) {\n                    ids_list.push(roles_list[i].id);\n                }\n                return ids_list;\n            },\n\n            /**\n   * Save the permissions for roles entered in the select boxes.\n   */\n            savePermissions: function(event) {\n                var self = this;\n                var add_ids = this._extractIds(\n                    this.addSelectObject.$el.select2(\"data\")\n                );\n                var manage_ids = this._extractIds(\n                    this.manageSelectObject.$el.select2(\"data\")\n                );\n                var modify_ids = this._extractIds(\n                    this.modifySelectObject.$el.select2(\"data\")\n                );\n                $.post(\n                    Galaxy.root +\n                        \"api/folders/\" +\n                        self.id +\n                        \"/permissions?action=set_permissions\",\n                    {\n                        \"add_ids[]\": add_ids,\n                        \"manage_ids[]\": manage_ids,\n                        \"modify_ids[]\": modify_ids\n                    }\n                )\n                    .done(function(fetched_permissions) {\n                        self.showPermissions({\n                            fetched_permissions: fetched_permissions\n                        });\n                        mod_toastr.success(\"Permissions saved.\");\n                    })\n                    .fail(function() {\n                        mod_toastr.error(\n                            \"An error occurred while attempting to set folder permissions.\"\n                        );\n                    });\n            },\n\n            templateFolderPermissions: function() {\n                return _.template(\n                    [\n                        '<div class=\"library_style_container\">',\n                        '<div id=\"library_toolbar\">',\n                        '<a href=\"#/folders/<%= folder.get(\"parent_id\") %>\">',\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the parent folder\" class=\"btn btn-default primary-button\" type=\"button\">',\n                        '<span class=\"fa fa-caret-left fa-lg\"/>',\n                        \"&nbsp;Parent folder\",\n                        \"</button>\",\n                        \"</a>\",\n                        \"</div>\",\n                        \"<h1>\",\n                        'Folder: <%= _.escape(folder.get(\"name\")) %>',\n                        \"</h1>\",\n                        '<div class=\"alert alert-warning\">',\n                        \"<% if (is_admin) { %>\",\n                        \"You are logged in as an <strong>administrator</strong> therefore you can manage any folder on this Galaxy instance. Please make sure you understand the consequences.\",\n                        \"<% } else { %>\",\n                        \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\",\n                        \"<% }%>\",\n                        \"</div>\",\n                        '<div class=\"dataset_table\">',\n                        \"<h2>Folder permissions</h2>\",\n                        \"<h4>\",\n                        \"Roles that can manage permissions on this folder\",\n                        \"</h4>\",\n                        '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>',\n                        '<div class=\"alert alert-info roles-selection\">',\n                        \"User with <strong>any</strong> of these roles can manage permissions on this folder.\",\n                        \"</div>\",\n                        \"<h4>\",\n                        \"Roles that can add items to this folder\",\n                        \"</h4>\",\n                        '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>',\n                        '<div class=\"alert alert-info roles-selection\">',\n                        \"User with <strong>any</strong> of these roles can add items to this folder (folders and datasets).\",\n                        \"</div>\",\n                        \"<h4>\",\n                        \"Roles that can modify this folder\",\n                        \"</h4>\",\n                        '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>',\n                        '<div class=\"alert alert-info roles-selection\">',\n                        \"User with <strong>any</strong> of these roles can modify this folder (name, etc.).\",\n                        \"</div>\",\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">',\n                        '<span class=\"fa fa-floppy-o\"/>',\n                        \"&nbsp;Save\",\n                        \"</button>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            }\n        });\n\n        return {\n            FolderView: FolderView\n        };\n    }\n);\n"]}