{"version":3,"sources":["mvc/library/library-folder-view.js"],"names":["define","el","mod_toastr","model","mod_select","FolderView","Backbone","View","extend","options","events","click .toolbtn_save_permissions","initialize","mod_library_model","this","_","fetch","success","fetchFolder","error","response","responseJSON","id","Galaxy","that","show_permissions","err_msg","onclick","libraries","library_router","back","showPermissions","user","is_admin","isAdmin","$","remove","self","prepareSelectBoxes","fail","html","template","folder","get","root","done","fetched_permissions","css","_serializeRoles","tooltip","i","role_list","selected_roles","length","selected_add_item_roles","selected_manage_folder_roles","selected_modify_folder_roles","_createSelectOptions","manage_folder_role_list","modify_folder_role_list","init_data","manageSelectObject","minimumInputLength","placeholder","ajax","url","dataType","quietMillis","data","$el","find","term","page","q","page_limit","results","more","total","name","roles","role","type","formatSelection","roleFormatSelection","initSelection","element","callback","item","split","each","push","initialData","select_options","join","dropdownCssClass","_extractIds","roles_list","ids_list","savePermissions","modify_ids","post","select2","modifySelectObject","add_ids[]","add_ids","manage_ids[]","manage_ids","modify_ids[]","templateFolderPermissions"],"mappings":"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","file":"../../../scripts/mvc/library/library-folder-view.js","sourcesContent":["define([\n  \"libs/toastr\",\n  \"mvc/library/library-model\",\n  'mvc/ui/ui-select'\n  ],\nfunction(\n        mod_toastr,\n        mod_library_model,\n        mod_select\n        ) {\n\nvar FolderView = Backbone.View.extend({\n  el: '#center',\n\n  model: null,\n\n  options: {\n\n  },\n\n  events: {\n    \"click .toolbtn_save_permissions\"     :   \"savePermissions\"\n  },\n\n  initialize: function(options){\n    this.options = _.extend(this.options, options);\n    if (this.options.id){\n      this.fetchFolder();\n    }\n  },\n\n  fetchFolder: function(options){\n    this.options = _.extend(this.options, options);\n    this.model = new mod_library_model.FolderAsModel({id:this.options.id});\n    var that = this;\n    this.model.fetch({\n      success: function() {\n        if (that.options.show_permissions){\n            that.showPermissions();\n        }\n      },\n      error: function(model, response){\n        if (typeof response.responseJSON !== \"undefined\"){\n          mod_toastr.error(response.responseJSON.err_msg + ' Click this to go back.', '', {onclick: function() {Galaxy.libraries.library_router.back();}});\n        } else {\n          mod_toastr.error('An error occurred. Click this to go back.', '', {onclick: function() {Galaxy.libraries.library_router.back();}});\n        }\n      }\n    });\n  },\n\n  showPermissions: function(options){\n    this.options = _.extend(this.options, options);\n    $(\".tooltip\").remove();\n\n    var is_admin = false;\n    if (Galaxy.user){\n      is_admin = Galaxy.user.isAdmin();\n    }\n    var template = this.templateFolderPermissions();\n    this.$el.html(template({folder: this.model, is_admin:is_admin}));\n\n    var self = this;\n    $.get( Galaxy.root + \"api/folders/\" + self.id + \"/permissions?scope=current\").done(function(fetched_permissions) {\n      self.prepareSelectBoxes({fetched_permissions:fetched_permissions});\n    }).fail(function(){\n        mod_toastr.error('An error occurred while attempting to fetch folder permissions.');\n    });\n\n    $(\"#center [data-toggle]\").tooltip();\n    //hack to show scrollbars\n    $(\"#center\").css('overflow','auto');\n  },\n\n  _serializeRoles : function(role_list){\n    var selected_roles = [];\n    for (var i = 0; i < role_list.length; i++) {\n      selected_roles.push(role_list[i][1] + ':' + role_list[i][0]);\n    }\n    return selected_roles;\n  },\n\n  prepareSelectBoxes: function(options){\n    this.options = _.extend(this.options, options);\n    var fetched_permissions = this.options.fetched_permissions;\n    var self = this;\n\n    var selected_add_item_roles = this._serializeRoles(fetched_permissions.add_library_item_role_list);\n    var selected_manage_folder_roles = this._serializeRoles(fetched_permissions.manage_folder_role_list);\n    var selected_modify_folder_roles = this._serializeRoles(fetched_permissions.modify_folder_role_list);\n\n    self.addSelectObject = new mod_select.View(this._createSelectOptions(this, 'add_perm', selected_add_item_roles, false));\n    self.manageSelectObject = new mod_select.View(this._createSelectOptions(this, 'manage_perm', selected_manage_folder_roles, false));\n    self.modifySelectObject = new mod_select.View(this._createSelectOptions(this, 'modify_perm', selected_modify_folder_roles, false));\n  },\n\n  _createSelectOptions: function(self, id, init_data){\n    var select_options = {\n      minimumInputLength: 0,\n      css: id,\n      multiple:true,\n      placeholder: 'Click to select a role',\n      container: self.$el.find('#' + id),\n      ajax: {\n          url: Galaxy.root + \"api/folders/\" + self.id + \"/permissions?scope=available\",\n          dataType: 'json',\n          quietMillis: 100,\n          data: function (term, page) { // page is the one-based page number tracked by Select2\n              return {\n                  q: term, //search term\n                  page_limit: 10, // page size\n                  page: page // page number\n              };\n          },\n          results: function (data, page) {\n              var more = (page * 10) < data.total; // whether or not there are more results available\n              // notice we return the value of more so Select2 knows if more results can be loaded\n              return {results: data.roles, more: more};\n          }\n      },\n      formatResult : function roleFormatResult(role) {\n          return role.name + ' type: ' + role.type;\n      },\n\n      formatSelection: function roleFormatSelection(role) {\n          return role.name;\n      },\n      initSelection: function(element, callback) {\n      // the input tag has a value attribute preloaded that points to a preselected role's id\n      // this function resolves that id attribute to an object that select2 can render\n      // using its formatResult renderer - that way the role name is shown preselected\n          var data = [];\n          $(element.val().split(\",\")).each(function() {\n              var item = this.split(':');\n              data.push({\n                  id: item[0],\n                  name: item[1]\n              });\n          });\n          callback(data);\n      },\n      initialData: init_data.join(','),\n      dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n    };\n\n    return select_options;\n  },\n\n  /**\n   * Extract the role ids from Select2 elements's 'data'\n   */\n  _extractIds: function(roles_list){\n    var ids_list = [];\n    for (var i = roles_list.length - 1; i >= 0; i--) {\n      ids_list.push(roles_list[i].id);\n    };\n    return ids_list;\n  },\n\n  /**\n   * Save the permissions for roles entered in the select boxes.\n   */\n  savePermissions: function(event){\n    var self = this;\n    var add_ids = this._extractIds(this.addSelectObject.$el.select2('data'));\n    var manage_ids = this._extractIds(this.manageSelectObject.$el.select2('data'));\n    var modify_ids = this._extractIds(this.modifySelectObject.$el.select2('data'));\n    $.post( Galaxy.root + \"api/folders/\" + self.id + \"/permissions?action=set_permissions\", { 'add_ids[]': add_ids, 'manage_ids[]': manage_ids, 'modify_ids[]': modify_ids, } )\n    .done(function(fetched_permissions){\n      self.showPermissions({fetched_permissions:fetched_permissions})\n      mod_toastr.success('Permissions saved.');\n    })\n    .fail(function(){\n      mod_toastr.error('An error occurred while attempting to set folder permissions.');\n    })\n  },\n\n  templateFolderPermissions : function(){\n    return _.template([\n    '<div class=\"library_style_container\">',\n      '<div id=\"library_toolbar\">',\n        '<a href=\"#/folders/<%= folder.get(\"parent_id\") %>\">',\n          '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the parent folder\" class=\"btn btn-default primary-button\" type=\"button\">',\n            '<span class=\"fa fa-caret-left fa-lg\"/>',\n            '&nbsp;Parent folder',\n          '</button>',\n        '</a>',\n      '</div>',\n      '<h1>',\n        'Folder: <%= _.escape(folder.get(\"name\")) %>',\n      '</h1>',\n      '<div class=\"alert alert-warning\">',\n        '<% if (is_admin) { %>',\n          'You are logged in as an <strong>administrator</strong> therefore you can manage any folder on this Galaxy instance. Please make sure you understand the consequences.',\n        '<% } else { %>',\n          'You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.',\n        '<% }%>',\n      '</div>',\n      '<div class=\"dataset_table\">',\n        '<h2>Folder permissions</h2>',\n        '<h4>',\n          'Roles that can manage permissions on this folder',\n        '</h4>',\n        '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>',\n        '<div class=\"alert alert-info roles-selection\">',\n          'User with <strong>any</strong> of these roles can manage permissions on this folder.',\n        '</div>',\n        '<h4>',\n          'Roles that can add items to this folder',\n        '</h4>',\n        '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>',\n        '<div class=\"alert alert-info roles-selection\">',\n          'User with <strong>any</strong> of these roles can add items to this folder (folders and datasets).',\n        '</div>',\n        '<h4>',\n          'Roles that can modify this folder',\n        '</h4>',\n        '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>',\n        '<div class=\"alert alert-info roles-selection\">',\n          'User with <strong>any</strong> of these roles can modify this folder (name, etc.).',\n        '</div>',\n        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">',\n          '<span class=\"fa fa-floppy-o\"/>',\n          '&nbsp;Save',\n        '</button>',\n      '</div>',\n    '</div>'\n    ].join(''));\n  }\n\n});\n\nreturn {\n    FolderView: FolderView\n};\n\n});\n"]}