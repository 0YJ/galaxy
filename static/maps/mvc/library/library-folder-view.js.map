{"version":3,"sources":["mvc/library/library-folder-view.js"],"names":["FolderView","Backbone","View","extend","el","model","options","events","click .toolbtn_save_permissions","initialize","this","_","id","fetchFolder","_libraryModel2","default","FolderAsModel","fetch","success","that","show_permissions","showPermissions","error","response","responseJSON","_toastr2","err_msg","Galaxy","libraries","library_router","back","onclick","$","remove","is_admin","user","isAdmin","template","html","folder","self","get","done","fetched_permissions","fail","tooltip","css","_serializeRoles","i","selected_roles","role_list","length","prepareSelectBoxes","selected_add_item_roles","selected_modify_folder_roles","add_library_item_role_list","modifySelectObject","_createSelectOptions","modify_folder_role_list","_uiSelect2","multiple","placeholder","container","ajax","url","data","page","q","page_limit","results","formatSelection","roleFormatSelection","minimumInputLength","initSelection","$el","find","root","name","dataType","quietMillis","callback","initialData","dropdownCssClass","more","total","roles","formatResult","roles_list","ids_list","push","role","type","element","add_ids","manage_ids","split","_extractIds","modify_ids","item","init_data","join","savePermissions","event","addSelectObject","select2","manageSelectObject","post","add_ids[]","manage_ids[]","modify_ids[]","templateFolderPermissions"],"mappings":"8QAGIA,EAAaC,SAASC,KAAKC,QAC3BC,GAAI,UAEJC,MAAO,KAEPC,WAEAC,QACIC,kCAAmC,mBAGvCC,WAAY,SAASH,GACjBI,KAAKJ,QAAUK,EAAER,OAAOO,KAAKJ,QAASA,GAClCI,KAAKJ,QAAQM,IACbF,KAAKG,eAIbA,YAAa,SAASP,GAftBD,KAAAA,QAHkCM,EAAAR,OAAAO,KAAAJ,QAAAA,GAoB9BI,KAAKL,MAAQ,IAAIS,EAAAC,QAAkBC,eAfvCV,GAAAA,KALkCA,QAAAM,KAOlCL,IAAAA,EAAQG,KACJA,KAAAL,MAAAY,OAR8BC,QAAA,WA0BlBC,EAAKb,QAAQc,kBAfjBD,EAAAE,mBAGJC,MAAA,SAAKT,EAALU,QACH,IAAAA,EAAAC,aAf6BC,EAAAV,QAAAO,MAiCdC,EAASC,aAAaE,QAf7B,0BACT,IAEapB,QAAQM,WADrBe,OAAAC,UAAAC,eAAAC,UAOYX,EAAAA,QAAKE,MACR,4CAJQ,IAOLU,QAAOR,WACPI,OAAAC,UACIL,eAASC,cAgBJH,gBAAA,SAAAf,GAHLI,KAAAJ,QAAAK,EAHJR,OAAAO,KAAAJ,QAAAA,GASH0B,EAAA,YAAAC,SA5BQ,IAAAC,GAAjB,EAxB8BP,OAAAQ,OA+D1BD,EAAWP,OAAOQ,KAAKC,WAL3B,IAAAC,EAAK/B,KAAUK,4BACfqB,KAAAA,IAAEM,KAAAD,GAAFE,OAAA7B,KAAAL,MAAA6B,SAAAA,KAEA,IAAAM,EAAIN,KACJF,EAAAS,IACIP,OAAAA,KACH,eACGG,EAAAA,GACJ,8BAEAK,KAAIF,SAAJG,GACEF,EACEd,oBAMIa,oBAAwBG,MAPhCC,KAWKA,WACGnB,EAAAV,QAAAO,MAZR,qEAmBAU,EAAAA,yBAAiBa,UAAjBb,EAAE,WAAWc,IAAI,WAAY,SAK7BC,gBAASC,SAAOA,GAEf,IAAA,IADGC,KACHD,EAAA,EAAAA,EAAAE,EAAAC,OAAAH,IACDC,EAAOA,KAAAA,EAAPD,GAAA,GAAA,IAAAE,EAAAF,GAAA,IAAA,OAAOC,GAKPG,mBAAIT,SAAAA,GACJjC,KAAAJ,QAAWK,EAAAR,OAAXO,KAAAJ,QAAAA,GADA,IAAIqC,EAAsBjC,KAAKJ,QAAQqC,oBAGvCH,EAAIa,KAMJA,EAAIC,KAAAA,gBALAX,EAAoBY,4BAiBxBf,EAA8B9B,KAAAqC,gBAQ9BP,EAAKgB,yBApBDF,EAA+B5C,KAAKqC,gBA8B5CU,EAAsBC,yBAGdZ,EAAAA,gBAFiB,IAAAa,EAAA5C,QAAAb,KAGjB0D,KAAAA,qBACAC,KACAC,WACAC,GACIC,IAOAC,EAAAA,mBAAM,IAAAN,EAAA5C,QAAemD,KACjBxD,KAAA+C,qBACA/C,KACIyD,cACAC,GACAF,IAGRG,EAAAA,mBAAS,IAAAV,EAAA5C,QAASkD,KACdvD,KAAA+C,qBACA/C,KACA,cACH4C,GApBC,KA0BNgB,qBAAAA,SAAiB9B,EAAA5B,EAAS2D,GAsEzB,OApEAC,mBAlCgB,EAmCjBC,IAAAA,EACIb,UAAA,EACAC,YAAA,yBACAC,UAAAtB,EAAAkC,IAAAC,KAAA,IAAA/D,GACAmD,MACA/B,IACIL,OAAAiD,KACAX,eACIrD,EAAAA,GACAiE,+BAFMC,SAAV,OAIHC,YAND,IAOAC,KAAAA,SAASf,EAATC,GAEJe,OACAC,EAAAA,EAlDJd,WAAA,GAmBgBF,KAAMA,IAGdG,QAAS,SAASJ,EAAMC,GAkCpC,IAAAiB,EAAA,GAAAjB,EAAAD,EAAAmB,MA/BgB,OAASf,QAASJ,EAAKoB,MAAOF,KAAMA,KAoChDG,aAAaC,SAAuBvC,GAChCwC,OAAAA,EAASC,KAAKF,UAAdG,EAAAC,MA3M0BrB,gBAAA,SAAAoB,GA8KtB,OAAOA,EAAKb,MAEhBJ,cAAe,SAASmB,EAASZ,GAqCjCa,IAAAA,KAGAC,EAAAA,EAAAA,MAAaC,MAAKC,MAAAA,KAClB,WAEAC,IAAAA,EAAavF,KAAKsF,MAAAA,KAIlBrE,EAAAA,MAKIf,GAAAsF,EAAaL,GACbhB,KAAAqB,EAAgBJ,OAKhBtD,EAAKnB,IAAgB4D,YAArBkB,EAAAC,KAAA,KAGAlB,iBAAA,YA7OsBc,YAAtC,SAAAT,GA0MQ,IAAK,IADDC,KACKxC,EAAIuC,EAoGNpC,OAAA,EAAAH,GAAA,EAAAA,IACXhD,EAAYA,KAAAA,EAAAA,GAAAA,IAlGR,OAAOwF,GAMXa,gBAAiB,SAASC,GACtB,IAAI9D,EAAO9B,KACPmF,EAAUnF,KAAKsF,YACftF,KAAK6F,gBAAgB7B,IAAI8B,QAAQ,SAEjCV,EAAapF,KAAKsF,YAClBtF,KAAK+F,mBAAmB/B,IAAI8B,QAAQ,SAEpCP,EAAavF,KAAKsF,YAClBtF,KAAK8C,mBAAmBkB,IAAI8B,QAAQ,SAExCxE,EAAE0E,KACE/E,OAAOiD,KACH,eACApC,EAAK5B,GACL,uCAEA+F,YAAad,EACbe,eAAgBd,EAChBe,eAAgBZ,IAGnBvD,KAAK,SAASC,GACXH,EAAKnB,iBACDsB,oBAAqBA,IAEzBlB,EAAAV,QAAWG,QAAQ,wBAEtB0B,KAAK,WACFnB,EAAAV,QAAWO,MACP,oEAKhBwF,0BAA2B,WACvB,OAAOnG,EAAE0B,UAED,wCACA,6BACA,sDACA,gJACA,yCACA,sBACA,YACA,OACA,SACA,OACA,8CACA,QACA,oCACA,wBACA,wKACA,iBACA,+IACA,SACA,SACA,8BACA,8BACA,OACA,mDACA,QACA,8DACA,iDACA,uFACA,SACA,OACA,0CACA,QACA,wDACA,iDACA,qGACA,SACA,OACA,oCACA,QACA,8DACA,iDACA,qFACA,SACA,+JACA,iCACA,aACA,YACA,SACA,UACF+D,KAAK,mBAMfpG,WAAYA","file":"../../../scripts/mvc/library/library-folder-view.js","sourcesContent":["import mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nvar FolderView = Backbone.View.extend({\n    el: \"#center\",\n\n    model: null,\n\n    options: {},\n\n    events: {\n        \"click .toolbtn_save_permissions\": \"savePermissions\"\n    },\n\n    initialize: function(options) {\n        this.options = _.extend(this.options, options);\n        if (this.options.id) {\n            this.fetchFolder();\n        }\n    },\n\n    fetchFolder: function(options) {\n        this.options = _.extend(this.options, options);\n        this.model = new mod_library_model.FolderAsModel({\n            id: this.options.id\n        });\n        var that = this;\n        this.model.fetch({\n            success: function() {\n                if (that.options.show_permissions) {\n                    that.showPermissions();\n                }\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(\n                        response.responseJSON.err_msg +\n                            \" Click this to go back.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                } else {\n                    mod_toastr.error(\n                        \"An error occurred. Click this to go back.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                }\n            }\n        });\n    },\n\n    showPermissions: function(options) {\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").remove();\n\n        var is_admin = false;\n        if (Galaxy.user) {\n            is_admin = Galaxy.user.isAdmin();\n        }\n        var template = this.templateFolderPermissions();\n        this.$el.html(template({ folder: this.model, is_admin: is_admin }));\n\n        var self = this;\n        $.get(\n            Galaxy.root +\n                \"api/folders/\" +\n                self.id +\n                \"/permissions?scope=current\"\n        )\n            .done(function(fetched_permissions) {\n                self.prepareSelectBoxes({\n                    fetched_permissions: fetched_permissions\n                });\n            })\n            .fail(function() {\n                mod_toastr.error(\n                    \"An error occurred while attempting to fetch folder permissions.\"\n                );\n            });\n\n        $(\"#center [data-toggle]\").tooltip();\n        //hack to show scrollbars\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    _serializeRoles: function(role_list) {\n        var selected_roles = [];\n        for (var i = 0; i < role_list.length; i++) {\n            selected_roles.push(role_list[i][1] + \":\" + role_list[i][0]);\n        }\n        return selected_roles;\n    },\n\n    prepareSelectBoxes: function(options) {\n        this.options = _.extend(this.options, options);\n        var fetched_permissions = this.options.fetched_permissions;\n        var self = this;\n\n        var selected_add_item_roles = this._serializeRoles(\n            fetched_permissions.add_library_item_role_list\n        );\n        var selected_manage_folder_roles = this._serializeRoles(\n            fetched_permissions.manage_folder_role_list\n        );\n        var selected_modify_folder_roles = this._serializeRoles(\n            fetched_permissions.modify_folder_role_list\n        );\n\n        self.addSelectObject = new mod_select.View(\n            this._createSelectOptions(\n                this,\n                \"add_perm\",\n                selected_add_item_roles,\n                false\n            )\n        );\n        self.manageSelectObject = new mod_select.View(\n            this._createSelectOptions(\n                this,\n                \"manage_perm\",\n                selected_manage_folder_roles,\n                false\n            )\n        );\n        self.modifySelectObject = new mod_select.View(\n            this._createSelectOptions(\n                this,\n                \"modify_perm\",\n                selected_modify_folder_roles,\n                false\n            )\n        );\n    },\n\n    _createSelectOptions: function(self, id, init_data) {\n        var select_options = {\n            minimumInputLength: 0,\n            css: id,\n            multiple: true,\n            placeholder: \"Click to select a role\",\n            container: self.$el.find(\"#\" + id),\n            ajax: {\n                url:\n                    Galaxy.root +\n                    \"api/folders/\" +\n                    self.id +\n                    \"/permissions?scope=available\",\n                dataType: \"json\",\n                quietMillis: 100,\n                data: function(term, page) {\n                    // page is the one-based page number tracked by Select2\n                    return {\n                        q: term, //search term\n                        page_limit: 10, // page size\n                        page: page // page number\n                    };\n                },\n                results: function(data, page) {\n                    var more = page * 10 < data.total; // whether or not there are more results available\n                    // notice we return the value of more so Select2 knows if more results can be loaded\n                    return { results: data.roles, more: more };\n                }\n            },\n            formatResult: function roleFormatResult(role) {\n                return role.name + \" type: \" + role.type;\n            },\n\n            formatSelection: function roleFormatSelection(role) {\n                return role.name;\n            },\n            initSelection: function(element, callback) {\n                // the input tag has a value attribute preloaded that points to a preselected role's id\n                // this function resolves that id attribute to an object that select2 can render\n                // using its formatResult renderer - that way the role name is shown preselected\n                var data = [];\n                $(element.val().split(\",\")).each(function() {\n                    var item = this.split(\":\");\n                    data.push({\n                        id: item[0],\n                        name: item[1]\n                    });\n                });\n                callback(data);\n            },\n            initialData: init_data.join(\",\"),\n            dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n        };\n\n        return select_options;\n    },\n\n    /**\n   * Extract the role ids from Select2 elements's 'data'\n   */\n    _extractIds: function(roles_list) {\n        var ids_list = [];\n        for (var i = roles_list.length - 1; i >= 0; i--) {\n            ids_list.push(roles_list[i].id);\n        }\n        return ids_list;\n    },\n\n    /**\n   * Save the permissions for roles entered in the select boxes.\n   */\n    savePermissions: function(event) {\n        var self = this;\n        var add_ids = this._extractIds(\n            this.addSelectObject.$el.select2(\"data\")\n        );\n        var manage_ids = this._extractIds(\n            this.manageSelectObject.$el.select2(\"data\")\n        );\n        var modify_ids = this._extractIds(\n            this.modifySelectObject.$el.select2(\"data\")\n        );\n        $.post(\n            Galaxy.root +\n                \"api/folders/\" +\n                self.id +\n                \"/permissions?action=set_permissions\",\n            {\n                \"add_ids[]\": add_ids,\n                \"manage_ids[]\": manage_ids,\n                \"modify_ids[]\": modify_ids\n            }\n        )\n            .done(function(fetched_permissions) {\n                self.showPermissions({\n                    fetched_permissions: fetched_permissions\n                });\n                mod_toastr.success(\"Permissions saved.\");\n            })\n            .fail(function() {\n                mod_toastr.error(\n                    \"An error occurred while attempting to set folder permissions.\"\n                );\n            });\n    },\n\n    templateFolderPermissions: function() {\n        return _.template(\n            [\n                '<div class=\"library_style_container\">',\n                '<div id=\"library_toolbar\">',\n                '<a href=\"#/folders/<%= folder.get(\"parent_id\") %>\">',\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the parent folder\" class=\"btn btn-default primary-button\" type=\"button\">',\n                '<span class=\"fa fa-caret-left fa-lg\"/>',\n                \"&nbsp;Parent folder\",\n                \"</button>\",\n                \"</a>\",\n                \"</div>\",\n                \"<h1>\",\n                'Folder: <%= _.escape(folder.get(\"name\")) %>',\n                \"</h1>\",\n                '<div class=\"alert alert-warning\">',\n                \"<% if (is_admin) { %>\",\n                \"You are logged in as an <strong>administrator</strong> therefore you can manage any folder on this Galaxy instance. Please make sure you understand the consequences.\",\n                \"<% } else { %>\",\n                \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\",\n                \"<% }%>\",\n                \"</div>\",\n                '<div class=\"dataset_table\">',\n                \"<h2>Folder permissions</h2>\",\n                \"<h4>\",\n                \"Roles that can manage permissions on this folder\",\n                \"</h4>\",\n                '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can manage permissions on this folder.\",\n                \"</div>\",\n                \"<h4>\",\n                \"Roles that can add items to this folder\",\n                \"</h4>\",\n                '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can add items to this folder (folders and datasets).\",\n                \"</div>\",\n                \"<h4>\",\n                \"Roles that can modify this folder\",\n                \"</h4>\",\n                '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>',\n                '<div class=\"alert alert-info roles-selection\">',\n                \"User with <strong>any</strong> of these roles can modify this folder (name, etc.).\",\n                \"</div>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">',\n                '<span class=\"fa fa-floppy-o\"/>',\n                \"&nbsp;Save\",\n                \"</button>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderView: FolderView\n};\n"]}