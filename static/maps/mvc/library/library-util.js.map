{"version":3,"sources":["mvc/library/library-util.js"],"names":["define","generateFolderComparator","sort_key","sort_order","itemA","itemB","set","get","toLowerCase","generateLibraryComparator","libraryB","libraryA"],"mappings":"aAAAA,UAAW,WA+DP,OACIC,yBAvD2B,SAASC,EAAUC,GAC9C,OAAO,SAASC,EAAOC,GAKfA,OANRJ,EAAAA,IAAAA,IACOG,EAAAE,IAASF,EAAOC,IAEfD,EAAME,IAAIJ,IACbG,EAAAC,IAAAJ,EAAA,IAEGG,EAAMC,IAAIJ,UAAVG,EAAAE,IAAA,QAEAH,EAAUG,IAAAL,GAAYG,cAElBD,EAAMG,IAAIL,GAAUM,cAIvB,QAAAL,EAAA,GAAA,EAMAE,EAAAE,IAAAL,GAAAM,cACDJ,EAAUG,IAAAL,GAAAM,cAEgB,QAAhBD,GAAV,EAAoC,EAE7B,EAEN,WAAAH,EAAAG,IAAA,SACJ,EA5BT,IAwDIE,0BAZK,SAAAP,EAAAC,GACD,OAAA,SACIO,EAAaR,GAGb,OACHS,EAAAJ,IAAAL,GAAAM,cACDE,EAAUH,IAAAL,GAAAM,cAdlB,QAAAL,EAAA,GAAA,EAmBIM,EAAAA,IAAAA,GAA2BA,cAF/BE,EAAAJ,IAAAL,GAAAM,cALkC,QAAfL,GAAwB,EAAI,EAEhC","file":"../../../scripts/mvc/library/library-util.js","sourcesContent":["define([], function() {\n    /**\n     * Create alphabetical based two-argument comparator\n     * that takes into account that Folder comes before Dataset.\n     * If sort_key is not present it is set to ''.\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\n    var generateFolderComparator = function(sort_key, sort_order) {\n        return function(itemA, itemB) {\n            if (!itemA.has(sort_key)) {\n                itemA.set(sort_key, \"\");\n            }\n            if (!itemB.has(sort_key)) {\n                itemB.set(sort_key, \"\");\n            }\n            if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                if (\n                    itemA.get(sort_key).toLowerCase() >\n                    itemB.get(sort_key).toLowerCase()\n                ) {\n                    return sort_order === \"asc\" ? 1 : -1;\n                }\n                if (\n                    itemB.get(sort_key).toLowerCase() >\n                    itemA.get(sort_key).toLowerCase()\n                ) {\n                    return sort_order === \"asc\" ? -1 : 1;\n                }\n                return 0; // equal\n            } else {\n                if (itemA.get(\"type\") === \"folder\") {\n                    return -1; // folder is always before dataset\n                } else {\n                    return 1;\n                }\n            }\n        };\n    };\n    /**\n     * Create alphabetical based two-argument comparator\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\n    var generateLibraryComparator = function(sort_key, sort_order) {\n        return function(libraryA, libraryB) {\n            if (\n                libraryA.get(sort_key).toLowerCase() >\n                libraryB.get(sort_key).toLowerCase()\n            ) {\n                return sort_order === \"asc\" ? 1 : -1;\n            }\n            if (\n                libraryB.get(sort_key).toLowerCase() >\n                libraryA.get(sort_key).toLowerCase()\n            ) {\n                return sort_order === \"asc\" ? -1 : 1;\n            }\n            return 0; // equal\n        };\n    };\n    return {\n        generateFolderComparator: generateFolderComparator,\n        generateLibraryComparator: generateLibraryComparator\n    };\n});\n"]}