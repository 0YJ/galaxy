{"version":3,"sources":["mvc/library/library-util.js"],"names":["define","generateFolderComparator","sort_key","sort_order","itemA","itemB","get","hasOwnProperty","a_has","b_has","toLowerCase","generateLibraryComparator","libraryB","libraryA"],"mappings":"aAAAA,UAAW,WAqEP,OACIC,yBA9D2B,SAASC,EAAUC,GAC9C,OAAO,SAASC,EAAOC,GADvBJ,GAAAA,EAAAA,IAAAA,UAA2BI,EAA3BJ,IAAAA,QAAAA,CACO,GAAgBI,aAAhBH,EAAuB,CACtBE,IAAME,EAANF,EAAsBC,eAAU,aAASD,EAAAE,IAAA,YACtCJ,EAAAA,EAAaK,eAAW,aAAAF,EAAAC,IAAA,YACvB,IAAIE,IAAQJ,EACRK,OAAAA,IAAcF,GACHE,GAEPD,GAAAC,EACH,EAEG,EAGP,OACJL,EAAAE,IAAAJ,GAAAQ,cAEGN,EAAME,IAAIJ,GAAUQ,cAIvB,QAAAP,EAAA,GAAA,EAMAE,EAAAC,IAAAJ,GAAAQ,cACDN,EAAUE,IAAAJ,GAAAQ,cAEgB,QAAhBJ,GAAV,EAAoC,EAE7B,EAEN,MAAA,WAAAF,EAAAE,IAAA,SACJ,EAnCT,IA+DIK,0BAZK,SAAAT,EAAAC,GACD,OAAA,SACIS,EAAaV,GAGb,OACHW,EAAAP,IAAAJ,GAAAQ,cACDE,EAAUN,IAAAJ,GAAAQ,cAdlB,QAAAP,EAAA,GAAA,EAmBIQ,EAAAA,IAAAA,GAA2BA,cAF/BE,EAAAP,IAAAJ,GAAAQ,cALkC,QAAfP,GAAwB,EAAI,EAEhC","file":"../../../scripts/mvc/library/library-util.js","sourcesContent":["define([], function() {\n    /**\n     * Create alphabetical based two-argument comparator\n     * that takes into account that Folder > Dataset\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\n    var generateFolderComparator = function(sort_key, sort_order) {\n        return function(itemA, itemB) {\n            if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                if(sort_key === \"file_ext\"){\n                    var a_has = itemA.hasOwnProperty(\"file_ext\") && itemA.get(\"file_ext\");\n                    var b_has = itemB.hasOwnProperty(\"file_ext\") && itemB.get(\"file_ext\");\n                    if (!(a_has && b_has)){\n                        if (a_has && !b_has){\n                            return -1;\n                        }\n                        if (!a_has && b_has){\n                            return 1;\n                        }\n                        return 0;\n                    }\n                }\n                if (\n                    itemA.get(sort_key).toLowerCase() >\n                    itemB.get(sort_key).toLowerCase()\n                ) {\n                    return sort_order === \"asc\" ? 1 : -1;\n                }\n                if (\n                    itemB.get(sort_key).toLowerCase() >\n                    itemA.get(sort_key).toLowerCase()\n                ) {\n                    return sort_order === \"asc\" ? -1 : 1;\n                }\n                return 0; // equal\n            } else {\n                if (itemA.get(\"type\") === \"folder\") {\n                    return -1; // folder is always before dataset\n                } else {\n                    return 1;\n                }\n            }\n        };\n    };\n    /**\n     * Create alphabetical based two-argument comparator\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\n    var generateLibraryComparator = function(sort_key, sort_order) {\n        return function(libraryA, libraryB) {\n            if (\n                libraryA.get(sort_key).toLowerCase() >\n                libraryB.get(sort_key).toLowerCase()\n            ) {\n                return sort_order === \"asc\" ? 1 : -1;\n            }\n            if (\n                libraryB.get(sort_key).toLowerCase() >\n                libraryA.get(sort_key).toLowerCase()\n            ) {\n                return sort_order === \"asc\" ? -1 : 1;\n            }\n            return 0; // equal\n        };\n    };\n    return {\n        generateFolderComparator: generateFolderComparator,\n        generateLibraryComparator: generateLibraryComparator\n    };\n});\n"]}