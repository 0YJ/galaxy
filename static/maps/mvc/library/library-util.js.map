{"version":3,"sources":["mvc/library/library-util.js"],"names":["generateFolderComparator","sort_key","sort_order","itemA","itemB","get","has","toLowerCase","generateLibraryComparator","libraryA","libraryB"],"mappings":"mIA+DIA,yBAvD2B,SAASC,EAAUC,GAC9C,OAAO,SAASC,EAAOC,GACnB,OAAID,EAAME,IAAI,UAAYD,EAAMC,IAAI,QAC3BF,EAAMG,IAAIL,IAAcG,EAAME,IAAIL,GAE3BE,EAAMG,IAAIL,GAJvBG,EAAAE,IAAgBF,GAIdD,EAFDE,IAEOJ,GAAWK,cACdF,EAAAC,IAAAJ,GAAAM,cAEA,QAAAL,EAAA,GAAA,EAMAE,EAAAC,IAAAJ,GAAOC,cACVC,EAAAE,IAAAJ,GAAAM,cAKUL,QAAPA,GAAO,EAAwB,EAEnC,GApBMG,EAFdL,EAImB,EAoBP,WAAJG,EAAIA,IAAME,SACN,EAEJ,IA6BRG,0BAnBAA,SAA4BP,EAA5BO,GACA,OAAA,SAAOC,EAASA,GACZ,OAIIA,EAAAJ,IAAOH,GAAAA,cACVQ,EAAAL,IAAAJ,GAAAM,cAKUL,QAAPA,EAAsB,GAAS,EAXvCQ,EAAAL,IAAAJ,GAAAM,cADJE,EAAAJ,IAAAJ,GAAAM,cAkB8BP,QAA1BA,GAA0BA,EAAAA,EAJf","file":"../../../scripts/mvc/library/library-util.js","sourcesContent":["/**\n     * Create alphabetical based two-argument comparator\n     * that takes into account that Folder comes before Dataset.\n     * If sort_key is not present it is set to ''.\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\nvar generateFolderComparator = function(sort_key, sort_order) {\n    return function(itemA, itemB) {\n        if (itemA.get(\"type\") === itemB.get(\"type\")) {\n            if (!itemA.has(sort_key) && !itemB.has(sort_key)) {\n                return 0;\n            } else if (!itemA.has(sort_key)) {\n                return 1;\n            } else if (!itemB.has(sort_key)) {\n                return -1;\n            }\n            if (\n                itemA.get(sort_key).toLowerCase() >\n                itemB.get(sort_key).toLowerCase()\n            ) {\n                return sort_order === \"asc\" ? 1 : -1;\n            }\n            if (\n                itemB.get(sort_key).toLowerCase() >\n                itemA.get(sort_key).toLowerCase()\n            ) {\n                return sort_order === \"asc\" ? -1 : 1;\n            }\n            return 0; // equal\n        } else {\n            if (itemA.get(\"type\") === \"folder\") {\n                return -1; // folder is always before dataset\n            }\n            return 1;\n        }\n    };\n};\n/**\n     * Create alphabetical based two-argument comparator\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\nvar generateLibraryComparator = function(sort_key, sort_order) {\n    return function(libraryA, libraryB) {\n        if (\n            libraryA.get(sort_key).toLowerCase() >\n            libraryB.get(sort_key).toLowerCase()\n        ) {\n            return sort_order === \"asc\" ? 1 : -1;\n        }\n        if (\n            libraryB.get(sort_key).toLowerCase() >\n            libraryA.get(sort_key).toLowerCase()\n        ) {\n            return sort_order === \"asc\" ? -1 : 1;\n        }\n        return 0; // equal\n    };\n};\nexport default {\n    generateFolderComparator: generateFolderComparator,\n    generateLibraryComparator: generateLibraryComparator\n};\n"]}