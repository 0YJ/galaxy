{"version":3,"sources":["mvc/library/library-util.js"],"names":["generateFolderComparator","sort_key","sort_order","itemA","itemB","get","has","toLowerCase","generateLibraryComparator","libraryA","libraryB"],"mappings":"mIA8DIA,yBAtD2B,SAACC,EAAUC,GAAX,OAA0B,SAACC,EAAOC,GAC7D,OAAID,EAAME,IAAI,UAAYD,EAAMC,IAAI,QAC3BF,EAAMG,IAAIL,IAAcG,EAAME,IAAIL,GAE3BE,EAAMG,IAAIL,GAJ1BD,EAAAA,IAAAA,GAGQG,EAAAE,IAAAJ,GAAAM,cACHH,EAFDC,IAAAJ,GAEYE,cAEMG,QAFXJ,EAEeD,GAAf,EAGPG,EAAAC,IACIF,GAAUF,cAGVE,EAAAE,IAAAJ,GAAOC,cAGGD,QADdC,GACwBK,EAAAA,EAIvB,GApBgD,EAKtC,EAFA,EAmBR,WAANJ,EArBDE,IAqBO,SACCF,EAEH,IA8BLK,0BApB4B,SAACP,EAAUC,GAAX,OAA0B,SACtDO,EADJC,GAII,OAIID,EAAAJ,IAAAJ,GAAOC,cACVQ,EAAAL,IAAAJ,GAAAM,cAKUL,QAAPA,EAAsB,GAAf,EAGdQ,EAjB+BL,IAAAJ,GAAAM,cAAhCE,EAAAJ,IAAAJ,GAAAM,cAmBIP,QAAAA,GAA0BA,EAAAA,EAHnB","file":"../../../scripts/mvc/library/library-util.js","sourcesContent":["/**\n     * Create alphabetical based two-argument comparator\n     * that takes into account that Folder comes before Dataset.\n     * If sort_key is not present it is set to ''.\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\nvar generateFolderComparator = (sort_key, sort_order) => (itemA, itemB) => {\n    if (itemA.get(\"type\") === itemB.get(\"type\")) {\n        if (!itemA.has(sort_key) && !itemB.has(sort_key)) {\n            return 0;\n        } else if (!itemA.has(sort_key)) {\n            return 1;\n        } else if (!itemB.has(sort_key)) {\n            return -1;\n        }\n        if (\n            itemA.get(sort_key).toLowerCase() >\n            itemB.get(sort_key).toLowerCase()\n        ) {\n            return sort_order === \"asc\" ? 1 : -1;\n        }\n        if (\n            itemB.get(sort_key).toLowerCase() >\n            itemA.get(sort_key).toLowerCase()\n        ) {\n            return sort_order === \"asc\" ? -1 : 1;\n        }\n        return 0; // equal\n    } else {\n        if (itemA.get(\"type\") === \"folder\") {\n            return -1; // folder is always before dataset\n        }\n        return 1;\n    }\n};\n/**\n     * Create alphabetical based two-argument comparator\n     * @param  {str} sort_key   key to sort by\n     * @param  {str} sort_order order to sort by (asc, desc)\n     * @return {function} two-argument comparator function\n     */\nvar generateLibraryComparator = (sort_key, sort_order) => (\n    libraryA,\n    libraryB\n) => {\n    if (\n        libraryA.get(sort_key).toLowerCase() >\n        libraryB.get(sort_key).toLowerCase()\n    ) {\n        return sort_order === \"asc\" ? 1 : -1;\n    }\n    if (\n        libraryB.get(sort_key).toLowerCase() >\n        libraryA.get(sort_key).toLowerCase()\n    ) {\n        return sort_order === \"asc\" ? -1 : 1;\n    }\n    return 0; // equal\n};\nexport default {\n    generateFolderComparator: generateFolderComparator,\n    generateLibraryComparator: generateLibraryComparator\n};\n"]}