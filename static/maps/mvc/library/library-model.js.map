{"version":3,"sources":["mvc/library/library-model.js"],"names":["Library","Backbone","Model","extend","urlRoot","Galaxy","root","isVisible","show_deleted","this","get","model","sort_key","options","sort_order","search_term","lowercase_term","toLowerCase","filter","data","indexOf","getVisible","filters","Libraries","item","sortByNameAsc","comparator","libraryA","libraryB","sort","sortByNameDesc","LibraryItem","Ldda","Folder","FolderAsModel","itemA","itemB","FolderContainer","defaults","folder","obj","id","parse","reset","folder_contents","length","i","type","folder_item","HistoryContents","Collection","initialize","file_item","add","emit","error","HistoryItem","Item","Jstree","GalaxyHistory","GalaxyHistories"],"mappings":"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","file":"../../../scripts/mvc/library/library-model.js","sourcesContent":["// ============================================================================\n// LIBRARY RELATED MODELS\n\nvar Library = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/libraries/\",\n\n    /** based on show_deleted would this lib show in the list of lib's?\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       */\n    isVisible: function(show_deleted) {\n        var isVisible = true;\n        if (!show_deleted && this.get(\"deleted\")) {\n            isVisible = false;\n        }\n        return isVisible;\n    }\n});\n\nvar Libraries = Backbone.Collection.extend({\n    urlRoot: Galaxy.root + \"api/libraries\",\n\n    model: Library,\n\n    sort_key: \"name\", // default\n\n    sort_order: null, // default\n\n    initialize: function(options) {\n        options = options || {};\n    },\n\n    search: function(search_term) {\n        /**\n         * Search the collection and return only the models that have\n         * the search term in their names.\n         * [the term to search]\n         * @type {string}\n         */\n        if (search_term == \"\") return this;\n        var lowercase_term = search_term.toLowerCase();\n        return this.filter(function(data) {\n            var lowercase_name = data.get(\"name\").toLowerCase();\n            return lowercase_name.indexOf(lowercase_term) !== -1;\n        });\n    },\n\n    /** Get every 'shown' library in this collection based on deleted filter\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       *  @returns array of library models\n       */\n    getVisible: function(show_deleted, filters) {\n        filters = filters || [];\n        var filteredLibraries = new Libraries(\n            this.filter(function(item) {\n                return item.isVisible(show_deleted);\n            })\n        );\n\n        return filteredLibraries;\n    },\n\n    /** Sort collection by library name (ascending) and return the sorted\n       *  collection\n       */\n    sortByNameAsc: function() {\n        this.comparator = function(libraryA, libraryB) {\n            if (\n                libraryA.get(\"name\").toLowerCase() >\n                libraryB.get(\"name\").toLowerCase()\n            ) {\n                return 1; // after\n            }\n            if (\n                libraryB.get(\"name\").toLowerCase() >\n                libraryA.get(\"name\").toLowerCase()\n            ) {\n                return -1; // before\n            }\n            return 0; // equal\n        };\n        this.sort();\n        return this;\n    },\n\n    /** Sort collection by library name (descending) and return the sorted\n       *  collection\n       */\n    sortByNameDesc: function() {\n        this.comparator = function(libraryA, libraryB) {\n            if (\n                libraryA.get(\"name\").toLowerCase() >\n                libraryB.get(\"name\").toLowerCase()\n            ) {\n                return -1; // before\n            }\n            if (\n                libraryB.get(\"name\").toLowerCase() >\n                libraryA.get(\"name\").toLowerCase()\n            ) {\n                return 1; // after\n            }\n            return 0; // equal\n        };\n        this.sort();\n        return this;\n    }\n});\n\n// ============================================================================\n// FOLDER RELATED MODELS\n\nvar LibraryItem = Backbone.Model.extend({});\n\nvar Ldda = LibraryItem.extend({\n    urlRoot: Galaxy.root + \"api/libraries/datasets/\"\n});\n\nvar FolderAsModel = LibraryItem.extend({\n    urlRoot: Galaxy.root + \"api/folders/\"\n});\n\nvar Folder = Backbone.Collection.extend({\n    model: LibraryItem,\n\n    /** Sort collection by item name (ascending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n    sortByNameAsc: function() {\n        this.comparator = function(itemA, itemB) {\n            if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                if (\n                    itemA.get(\"name\").toLowerCase() >\n                    itemB.get(\"name\").toLowerCase()\n                ) {\n                    return 1; // after\n                }\n                if (\n                    itemB.get(\"name\").toLowerCase() >\n                    itemA.get(\"name\").toLowerCase()\n                ) {\n                    return -1; // before\n                }\n                return 0; // equal\n            } else {\n                if (itemA.get(\"type\") === \"folder\") {\n                    return -1; // folder is always before dataset\n                } else {\n                    return 1;\n                }\n            }\n        };\n        this.sort();\n        return this;\n    },\n\n    /** Sort collection by item name (descending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n    sortByNameDesc: function() {\n        this.comparator = function(itemA, itemB) {\n            if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                if (\n                    itemA.get(\"name\").toLowerCase() >\n                    itemB.get(\"name\").toLowerCase()\n                ) {\n                    return -1; // after\n                }\n                if (\n                    itemB.get(\"name\").toLowerCase() >\n                    itemA.get(\"name\").toLowerCase()\n                ) {\n                    return 1; // before\n                }\n                return 0; // equal\n            } else {\n                if (itemA.get(\"type\") === \"folder\") {\n                    return -1; // folder is always before dataset\n                } else {\n                    return 1;\n                }\n            }\n        };\n        this.sort();\n        return this;\n    }\n});\n\nvar FolderContainer = Backbone.Model.extend({\n    defaults: {\n        folder: new Folder(),\n        urlRoot: Galaxy.root + \"api/folders/\",\n        id: \"unknown\"\n    },\n    parse: function(obj) {\n        // empty the collection\n        this.get(\"folder\").reset();\n        // response is not a simple array, it contains metadata\n        // this will update the inner collection\n        for (var i = 0; i < obj.folder_contents.length; i++) {\n            if (obj.folder_contents[i].type === \"folder\") {\n                var folder_item = new FolderAsModel(obj.folder_contents[i]);\n                this.get(\"folder\").add(folder_item);\n            } else if (obj.folder_contents[i].type === \"file\") {\n                var file_item = new Ldda(obj.folder_contents[i]);\n                this.get(\"folder\").add(file_item);\n            } else {\n                Galaxy.emit.error(\n                    \"Unknown folder item type encountered while parsing response.\"\n                );\n            }\n        }\n        return obj;\n    }\n});\n\n// ============================================================================\n// HISTORY RELATED MODELS\n// TODO UNITE\n\nvar HistoryItem = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/histories/\"\n});\n\nvar HistoryContents = Backbone.Collection.extend({\n    urlRoot: Galaxy.root + \"api/histories/\",\n    initialize: function(options) {\n        this.id = options.id;\n    },\n    url: function() {\n        return this.urlRoot + this.id + \"/contents\";\n    },\n    model: HistoryItem\n});\n\nvar GalaxyHistory = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/histories/\"\n});\n\nvar GalaxyHistories = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/histories\",\n    model: GalaxyHistory\n});\n\n// ============================================================================\n// JSTREE MODEL\n/** Represents folder structure parsable by the jstree component.\n     *\n     */\n\nvar Jstree = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/remote_files\"\n});\n\nexport default {\n    Library: Library,\n    Libraries: Libraries,\n    Item: Ldda,\n    Ldda: Ldda,\n    FolderAsModel: FolderAsModel,\n    Folder: Folder,\n    FolderContainer: FolderContainer,\n    HistoryItem: HistoryItem,\n    HistoryContents: HistoryContents,\n    GalaxyHistory: GalaxyHistory,\n    GalaxyHistories: GalaxyHistories,\n    Jstree: Jstree\n};\n"]}