{"version":3,"sources":["mvc/library/library-model.js"],"names":["define","Library","Backbone","Model","extend","urlRoot","Galaxy","root","isVisible","show_deleted","this","get","Libraries","Collection","model","sort_key","sort_order","initialize","options","search","search_term","lowercase_term","toLowerCase","filter","data","lowercase_name","indexOf","getVisible","filters","item","sortByNameAsc","comparator","libraryA","libraryB","sort","sortByNameDesc","LibraryItem","Ldda","FolderAsModel","Folder","itemA","itemB","FolderContainer","defaults","folder","id","parse","obj","reset","i","folder_contents","length","type","folder_item","add","file_item","emit","error","HistoryItem","HistoryContents","url","GalaxyHistory","GalaxyHistories","Jstree","Item"],"mappings":"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","file":"../../../scripts/mvc/library/library-model.js","sourcesContent":["define([], function() {\n\n// ============================================================================\n// LIBRARY RELATED MODELS\n\n    var Library = Backbone.Model.extend({\n      urlRoot: Galaxy.root + 'api/libraries/',\n\n      /** based on show_deleted would this lib show in the list of lib's?\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       */\n      isVisible : function(show_deleted){\n          var isVisible = true;\n          if( (!show_deleted) && (this.get('deleted')) ){\n              isVisible = false;\n          }\n          return isVisible;\n      }\n    });\n\n    var Libraries = Backbone.Collection.extend({\n      urlRoot: Galaxy.root + 'api/libraries',\n\n      model: Library,\n\n      sort_key: 'name', // default\n\n      sort_order: null, // default\n\n      initialize : function(options){\n          options = options || {};\n      },\n\n      search : function(search_term){\n        /**\n         * Search the collection and return only the models that have\n         * the search term in their names.\n         * [the term to search]\n         * @type {string}\n         */\n        if (search_term == \"\") return this;\n        var lowercase_term = search_term.toLowerCase();\n        return this.filter(function(data) {\n          lowercase_name = data.get(\"name\").toLowerCase();\n          return lowercase_name.indexOf(lowercase_term) !== -1;\n        });\n      },\n\n      /** Get every 'shown' library in this collection based on deleted filter\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       *  @returns array of library models\n       */\n      getVisible : function(show_deleted, filters){\n          filters = filters || [];\n          var filteredLibraries = new Libraries( this.filter( function( item ){\n              return item.isVisible(show_deleted);\n          }));\n\n          return filteredLibraries;\n      },\n\n      /** Sort collection by library name (ascending) and return the sorted\n       *  collection\n       */\n      sortByNameAsc: function(){\n        this.comparator = function(libraryA, libraryB){\n          if (libraryA.get('name').toLowerCase() > libraryB.get('name').toLowerCase()) {\n            return 1; // after\n          }\n          if (libraryB.get('name').toLowerCase() > libraryA.get('name').toLowerCase()) {\n            return -1; // before\n          }\n          return 0; // equal\n        };\n        this.sort();\n        return this;\n      },\n\n      /** Sort collection by library name (descending) and return the sorted\n       *  collection\n       */\n      sortByNameDesc: function(){\n        this.comparator = function(libraryA, libraryB){\n          if (libraryA.get('name').toLowerCase() > libraryB.get('name').toLowerCase()) {\n            return -1; // before\n          }\n            if (libraryB.get('name').toLowerCase() > libraryA.get('name').toLowerCase()) {\n          return 1; // after\n          }\n          return 0; // equal\n        };\n        this.sort();\n        return this;\n      }\n\n    });\n\n// ============================================================================\n// FOLDER RELATED MODELS\n\n    var LibraryItem = Backbone.Model.extend({\n    });\n\n    var Ldda = LibraryItem.extend({\n      urlRoot : Galaxy.root + 'api/libraries/datasets/'\n    });\n\n    var FolderAsModel = LibraryItem.extend({\n      urlRoot: Galaxy.root + 'api/folders/'\n    });\n\n    var Folder = Backbone.Collection.extend({\n      model: LibraryItem,\n\n      /** Sort collection by item name (ascending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n      sortByNameAsc: function(){\n        this.comparator = function(itemA, itemB){\n          if (itemA.get('type') === itemB.get('type')){\n            if (itemA.get('name').toLowerCase() > itemB.get('name').toLowerCase()) {\n              return 1; // after\n            }\n            if (itemB.get('name').toLowerCase() > itemA.get('name').toLowerCase()) {\n              return -1; // before\n            }\n            return 0; // equal\n          } else {\n            if (itemA.get('type') === 'folder'){\n              return -1; // folder is always before dataset\n            } else {\n              return 1;\n            }\n          }\n        };\n        this.sort();\n        return this;\n      },\n\n      /** Sort collection by item name (descending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n      sortByNameDesc: function(){\n        this.comparator = function(itemA, itemB){\n          if (itemA.get('type') === itemB.get('type')){\n            if (itemA.get('name').toLowerCase() > itemB.get('name').toLowerCase()) {\n              return -1; // after\n            }\n            if (itemB.get('name').toLowerCase() > itemA.get('name').toLowerCase()) {\n              return 1; // before\n            }\n            return 0; // equal\n          } else {\n            if (itemA.get('type') === 'folder'){\n              return -1; // folder is always before dataset\n            } else {\n              return 1;\n            }\n          }\n        };\n        this.sort();\n        return this;\n      }\n    });\n\n    var FolderContainer = Backbone.Model.extend({\n      defaults : {\n          folder : new Folder(),\n          urlRoot : Galaxy.root + 'api/folders/',\n          id : \"unknown\"\n      },\n      parse : function(obj) {\n        // empty the collection\n        this.get(\"folder\").reset();\n        // response is not a simple array, it contains metadata\n        // this will update the inner collection\n          for (var i = 0; i < obj.folder_contents.length; i++) {\n            if (obj.folder_contents[i].type === 'folder'){\n              var folder_item = new FolderAsModel(obj.folder_contents[i])\n              this.get(\"folder\").add(folder_item);\n            } else if(obj.folder_contents[i].type === 'file'){\n              var file_item = new Ldda(obj.folder_contents[i])\n              this.get(\"folder\").add(file_item);\n            } else{\n              Galaxy.emit.error('Unknown folder item type encountered while parsing response.');\n            }\n          };\n        return obj;\n      }\n    });\n\n\n// ============================================================================\n// HISTORY RELATED MODELS\n// TODO UNITE\n\n    var HistoryItem = Backbone.Model.extend({\n      urlRoot : Galaxy.root + 'api/histories/'\n    });\n\n    var HistoryContents = Backbone.Collection.extend({\n      urlRoot : Galaxy.root + 'api/histories/',\n      initialize: function(options){\n        this.id = options.id;\n      },\n      url : function(){\n        return this.urlRoot + this.id + '/contents';\n      },\n      model : HistoryItem\n    });\n\n    var GalaxyHistory = Backbone.Model.extend({\n      urlRoot : Galaxy.root + 'api/histories/'\n    });\n\n    var GalaxyHistories = Backbone.Collection.extend({\n      url : Galaxy.root + 'api/histories',\n      model : GalaxyHistory\n    });\n\n// ============================================================================\n// JSTREE MODEL\n    /** Represents folder structure parsable by the jstree component.\n     *\n     */\n\n    var Jstree = Backbone.Model.extend({\n      urlRoot: Galaxy.root + 'api/remote_files'\n    });\n\nreturn {\n    Library: Library,\n    Libraries : Libraries,\n    Item : Ldda,\n    Ldda : Ldda,\n    FolderAsModel : FolderAsModel,\n    Folder : Folder,\n    FolderContainer : FolderContainer,\n    HistoryItem : HistoryItem,\n    HistoryContents : HistoryContents,\n    GalaxyHistory : GalaxyHistory,\n    GalaxyHistories : GalaxyHistories,\n    Jstree: Jstree\n};\n\n});\n"]}