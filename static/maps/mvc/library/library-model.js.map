{"version":3,"sources":["mvc/library/library-model.js"],"names":["Library","Backbone","Model","extend","urlRoot","Galaxy","root","isVisible","show_deleted","this","get","model","options","search","search_term","toLowerCase","filter","data","indexOf","lowercase_term","getVisible","filters","Libraries","item","sortLibraries","sort_key","sort_order","comparator","_libraryUtil2","default","generateLibraryComparator","sort","Ldda","LibraryItem","FolderAsModel","Folder","Collection","sortFolder","generateFolderComparator","defaults","folder","id","parse","FolderContainer","i","obj","folder_contents","length","type","folder_item","reset","file_item","emit","HistoryItem","HistoryContents","initialize","GalaxyHistory","GalaxyHistories","Jstree","Item"],"mappings":"iNAIIA,EAAUC,SAASC,MAAMC,QACzBC,QAASC,OAAOC,KAAO,iBAKvBC,UAAW,SAASC,GAChB,IAAID,GAAY,EAVxB,OAWaC,GAAgBC,KAAKC,IAAI,aAC1BH,GAAY,GAZxBA,KAIIH,EAAAA,SAAgBE,WAAOH,QAevBC,QAASC,OAAOC,KAAO,gBAEvBK,MAAOX,EAZPO,WAAAA,SAAWK,GACPA,EAAIL,OAGHM,OAAA,SAAAC,GAqBD,GAAmB,IAAfA,EAAmB,OAAOL,KAblCE,IAAAA,EAHuCG,EAAAC,cAkBnC,OAAON,KAAKO,OAAO,SAASC,GAZ5BL,OAAA,IADQK,EAAAP,IAASE,QAASG,cACLG,QAArBC,MAsBJC,WAAY,SAASZ,EAAca,GANlC,OAOGA,EAAUA,MAbS,IAAIC,EACvBb,KAAIU,OAAAA,SAAiBL,GACrB,OAAOS,EAAKP,UAAOR,OAqBvBgB,cAAe,SAASC,EAAUC,GAC9BjB,KAAKkB,WAAaC,EAAAC,QAASC,0BACvBL,EAbRL,GAEIX,KAAAsB,UASJP,EAAAA,SAAetB,MAAAC,WAKX6B,EAAAC,EAAA9B,QACHC,QAAAC,OAAAC,KAAA,4BAGL4B,EAAAD,EAAA9B,QACAC,QAAAC,OAAAC,KAAA,iBAYI6B,EAASlC,SAASmC,WAAWjC,QARjCQ,MAAIqB,EAA0BK,WAA9B,SAAAZ,EAAAC,GAYQjB,KAAKkB,WAAaC,EAAAC,QAASS,yBAR/BJ,EACA9B,GAWIK,KAAKsB,UALTM,EAAYpC,SAAAC,MAAAC,QACRoC,UAIAC,OAAA,IAAKT,EACR3B,QAAAC,OAAAC,KAAA,eATLmC,GAAA,WAYAC,MAAIC,SAAAA,GAEIH,KAAAA,IAAAA,UAAYL,QADN,IAD8B,IAAAS,EAAA,EAAAA,EAAAC,EAAAC,gBAAAC,OAAAH,IAMxCF,GAAqB,WAAdG,EAAAC,gBAAcF,GAAAI,KAAA,CACjB,IAAAC,EAAA,IAAAf,EAAAW,EAAAC,gBAAAF,IACAnC,KAASC,IAAA,UAAUwC,IAAnBD,QACA,GAAA,SAAAJ,EAAAC,gBAAAF,GAAAI,KAAA,CACA,IAAAG,EAAA,IAAAnB,EAAAa,EAAAC,gBAAAF,IACAnC,KAASmC,IAAI,UAAOC,IAAIC,QAEhBzC,OAAA+C,KAAIH,MACJ,gEAIH,OAAAJ,KAUbQ,EAAApD,SAAAC,MAAAC,QACAC,QAAAC,OAAAC,KAAA,mBAGAgD,EAAkBrD,SAASC,WAAMC,QAC7BC,QAAAA,OAASC,KAAOC,iBADoBiD,WAAxC,SAAA3C,GAOQH,KAAKgC,GAAK7B,EAAQ6B,IAFtBrC,IAAAA,WACAmD,OAAAA,KAAYnD,QAAAK,KAAAgC,GAAS7B,aAEpBD,MAJ4C0C,IAO5CG,EAP4CvD,SAAAC,MAAAC,QAQ7CQ,QAAAA,OAAO0C,KAAAA,mBAGXI,EAAID,SAAgBvD,WAAeE,QAC/BC,IAAAA,OAAAA,KAASC,gBAD6BM,MAA1C6C,IAWAE,EAAAzD,SAAAC,MAAAC,QAKIC,QAASC,OAAOC,KAAO,gCAAvBF,QAAAA,EAD+BkB,UAAnCA,EAOIqC,KAAM3B,EACNA,KAAMA,EAHNhC,cAASA,EACTsB,OAAAA,EACAqC,gBAHWhB,EAIXX,YAAMA,EACNE,gBAAAA,EACAC,cAAQA,EACRQ,gBAAAA,EACAU,OAAAA","file":"../../../scripts/mvc/library/library-model.js","sourcesContent":["import mod_util from \"mvc/library/library-util\";\n// ============================================================================\n// LIBRARY RELATED MODELS\n\nvar Library = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/libraries/\",\n\n    /** based on show_deleted would this lib show in the list of lib's?\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       */\n    isVisible: function(show_deleted) {\n        var isVisible = true;\n        if (!show_deleted && this.get(\"deleted\")) {\n            isVisible = false;\n        }\n        return isVisible;\n    }\n});\n\nvar Libraries = Backbone.Collection.extend({\n    urlRoot: Galaxy.root + \"api/libraries\",\n\n    model: Library,\n\n    initialize: function(options) {\n        options = options || {};\n    },\n\n    search: function(search_term) {\n        /**\n         * Search the collection and return only the models that have\n         * the search term in their names.\n         * [the term to search]\n         * @type {string}\n         */\n        if (search_term == \"\") return this;\n        var lowercase_term = search_term.toLowerCase();\n        return this.filter(function(data) {\n            var lowercase_name = data.get(\"name\").toLowerCase();\n            return lowercase_name.indexOf(lowercase_term) !== -1;\n        });\n    },\n\n    /** Get every 'shown' library in this collection based on deleted filter\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       *  @returns array of library models\n       */\n    getVisible: function(show_deleted, filters) {\n        filters = filters || [];\n        var filteredLibraries = new Libraries(\n            this.filter(function(item) {\n                return item.isVisible(show_deleted);\n            })\n        );\n\n        return filteredLibraries;\n    },\n\n    sortLibraries: function(sort_key, sort_order) {\n        this.comparator = mod_util.generateLibraryComparator(\n            sort_key,\n            sort_order\n        );\n        this.sort();\n    }\n});\n\n// ============================================================================\n// FOLDER RELATED MODELS\n\nvar LibraryItem = Backbone.Model.extend({});\n\nvar Ldda = LibraryItem.extend({\n    urlRoot: Galaxy.root + \"api/libraries/datasets/\"\n});\n\nvar FolderAsModel = LibraryItem.extend({\n    urlRoot: Galaxy.root + \"api/folders/\"\n});\n\nvar Folder = Backbone.Collection.extend({\n    model: LibraryItem,\n\n    sortFolder: function(sort_key, sort_order) {\n        this.comparator = mod_util.generateFolderComparator(\n            sort_key,\n            sort_order\n        );\n        this.sort();\n    }\n});\n\nvar FolderContainer = Backbone.Model.extend({\n    defaults: {\n        folder: new Folder(),\n        urlRoot: Galaxy.root + \"api/folders/\",\n        id: \"unknown\"\n    },\n    parse: function(obj) {\n        // empty the collection\n        this.get(\"folder\").reset();\n        // response is not a simple array, it contains metadata\n        // this will update the inner collection\n        for (var i = 0; i < obj.folder_contents.length; i++) {\n            if (obj.folder_contents[i].type === \"folder\") {\n                var folder_item = new FolderAsModel(obj.folder_contents[i]);\n                this.get(\"folder\").add(folder_item);\n            } else if (obj.folder_contents[i].type === \"file\") {\n                var file_item = new Ldda(obj.folder_contents[i]);\n                this.get(\"folder\").add(file_item);\n            } else {\n                Galaxy.emit.error(\n                    \"Unknown folder item type encountered while parsing response.\"\n                );\n            }\n        }\n        return obj;\n    }\n});\n\n// ============================================================================\n// HISTORY RELATED MODELS\n// TODO UNITE\n\nvar HistoryItem = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/histories/\"\n});\n\nvar HistoryContents = Backbone.Collection.extend({\n    urlRoot: Galaxy.root + \"api/histories/\",\n    initialize: function(options) {\n        this.id = options.id;\n    },\n    url: function() {\n        return this.urlRoot + this.id + \"/contents\";\n    },\n    model: HistoryItem\n});\n\nvar GalaxyHistory = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/histories/\"\n});\n\nvar GalaxyHistories = Backbone.Collection.extend({\n    url: Galaxy.root + \"api/histories\",\n    model: GalaxyHistory\n});\n\n// ============================================================================\n// JSTREE MODEL\n/** Represents folder structure parsable by the jstree component.\n     *\n     */\n\nvar Jstree = Backbone.Model.extend({\n    urlRoot: Galaxy.root + \"api/remote_files\"\n});\n\nexport default {\n    Library: Library,\n    Libraries: Libraries,\n    Item: Ldda,\n    Ldda: Ldda,\n    FolderAsModel: FolderAsModel,\n    Folder: Folder,\n    FolderContainer: FolderContainer,\n    HistoryItem: HistoryItem,\n    HistoryContents: HistoryContents,\n    GalaxyHistory: GalaxyHistory,\n    GalaxyHistories: GalaxyHistories,\n    Jstree: Jstree\n};\n"]}