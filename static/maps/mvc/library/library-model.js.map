{"version":3,"sources":["mvc/library/library-model.js"],"names":["define","Library","Backbone","Model","extend","urlRoot","Galaxy","root","isVisible","show_deleted","this","get","Libraries","Collection","model","sort_key","sort_order","initialize","options","search_term","lowercase_term","toLowerCase","filter","data","getVisible","filters","item","sortByNameAsc","libraryA","libraryB","sort","sortByNameDesc","comparator","LibraryItem","Ldda","FolderAsModel","itemA","Folder","itemB","folder_contents","i","FolderContainer","defaults","folder","id","parse","obj","HistoryContents","type","folder_item","add","file_item","HistoryItem","Jstree","url","Item","GalaxyHistory","GalaxyHistories"],"mappings":"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","file":"../../../scripts/mvc/library/library-model.js","sourcesContent":["define([], function() {\n    // ============================================================================\n    // LIBRARY RELATED MODELS\n\n    var Library = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/libraries/\",\n\n        /** based on show_deleted would this lib show in the list of lib's?\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       */\n        isVisible: function(show_deleted) {\n            var isVisible = true;\n            if (!show_deleted && this.get(\"deleted\")) {\n                isVisible = false;\n            }\n            return isVisible;\n        }\n    });\n\n    var Libraries = Backbone.Collection.extend({\n        urlRoot: Galaxy.root + \"api/libraries\",\n\n        model: Library,\n\n        sort_key: \"name\", // default\n\n        sort_order: null, // default\n\n        initialize: function(options) {\n            options = options || {};\n        },\n\n        search: function(search_term) {\n            /**\n         * Search the collection and return only the models that have\n         * the search term in their names.\n         * [the term to search]\n         * @type {string}\n         */\n            if (search_term == \"\") return this;\n            var lowercase_term = search_term.toLowerCase();\n            return this.filter(function(data) {\n                var lowercase_name = data.get(\"name\").toLowerCase();\n                return lowercase_name.indexOf(lowercase_term) !== -1;\n            });\n        },\n\n        /** Get every 'shown' library in this collection based on deleted filter\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       *  @returns array of library models\n       */\n        getVisible: function(show_deleted, filters) {\n            filters = filters || [];\n            var filteredLibraries = new Libraries(\n                this.filter(function(item) {\n                    return item.isVisible(show_deleted);\n                })\n            );\n\n            return filteredLibraries;\n        },\n\n        /** Sort collection by library name (ascending) and return the sorted\n       *  collection\n       */\n        sortByNameAsc: function() {\n            this.comparator = function(libraryA, libraryB) {\n                if (\n                    libraryA.get(\"name\").toLowerCase() >\n                    libraryB.get(\"name\").toLowerCase()\n                ) {\n                    return 1; // after\n                }\n                if (\n                    libraryB.get(\"name\").toLowerCase() >\n                    libraryA.get(\"name\").toLowerCase()\n                ) {\n                    return -1; // before\n                }\n                return 0; // equal\n            };\n            this.sort();\n            return this;\n        },\n\n        /** Sort collection by library name (descending) and return the sorted\n       *  collection\n       */\n        sortByNameDesc: function() {\n            this.comparator = function(libraryA, libraryB) {\n                if (\n                    libraryA.get(\"name\").toLowerCase() >\n                    libraryB.get(\"name\").toLowerCase()\n                ) {\n                    return -1; // before\n                }\n                if (\n                    libraryB.get(\"name\").toLowerCase() >\n                    libraryA.get(\"name\").toLowerCase()\n                ) {\n                    return 1; // after\n                }\n                return 0; // equal\n            };\n            this.sort();\n            return this;\n        }\n    });\n\n    // ============================================================================\n    // FOLDER RELATED MODELS\n\n    var LibraryItem = Backbone.Model.extend({});\n\n    var Ldda = LibraryItem.extend({\n        urlRoot: Galaxy.root + \"api/libraries/datasets/\"\n    });\n\n    var FolderAsModel = LibraryItem.extend({\n        urlRoot: Galaxy.root + \"api/folders/\"\n    });\n\n    var Folder = Backbone.Collection.extend({\n        model: LibraryItem,\n\n        /** Sort collection by item name (ascending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n        sortByNameAsc: function() {\n            this.comparator = function(itemA, itemB) {\n                if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                    if (\n                        itemA.get(\"name\").toLowerCase() >\n                        itemB.get(\"name\").toLowerCase()\n                    ) {\n                        return 1; // after\n                    }\n                    if (\n                        itemB.get(\"name\").toLowerCase() >\n                        itemA.get(\"name\").toLowerCase()\n                    ) {\n                        return -1; // before\n                    }\n                    return 0; // equal\n                } else {\n                    if (itemA.get(\"type\") === \"folder\") {\n                        return -1; // folder is always before dataset\n                    } else {\n                        return 1;\n                    }\n                }\n            };\n            this.sort();\n            return this;\n        },\n\n        /** Sort collection by item name (descending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n        sortByNameDesc: function() {\n            this.comparator = function(itemA, itemB) {\n                if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                    if (\n                        itemA.get(\"name\").toLowerCase() >\n                        itemB.get(\"name\").toLowerCase()\n                    ) {\n                        return -1; // after\n                    }\n                    if (\n                        itemB.get(\"name\").toLowerCase() >\n                        itemA.get(\"name\").toLowerCase()\n                    ) {\n                        return 1; // before\n                    }\n                    return 0; // equal\n                } else {\n                    if (itemA.get(\"type\") === \"folder\") {\n                        return -1; // folder is always before dataset\n                    } else {\n                        return 1;\n                    }\n                }\n            };\n            this.sort();\n            return this;\n        }\n    });\n\n    var FolderContainer = Backbone.Model.extend({\n        defaults: {\n            folder: new Folder(),\n            urlRoot: Galaxy.root + \"api/folders/\",\n            id: \"unknown\"\n        },\n        parse: function(obj) {\n            // empty the collection\n            this.get(\"folder\").reset();\n            // response is not a simple array, it contains metadata\n            // this will update the inner collection\n            for (var i = 0; i < obj.folder_contents.length; i++) {\n                if (obj.folder_contents[i].type === \"folder\") {\n                    var folder_item = new FolderAsModel(obj.folder_contents[i]);\n                    this.get(\"folder\").add(folder_item);\n                } else if (obj.folder_contents[i].type === \"file\") {\n                    var file_item = new Ldda(obj.folder_contents[i]);\n                    this.get(\"folder\").add(file_item);\n                } else {\n                    Galaxy.emit.error(\n                        \"Unknown folder item type encountered while parsing response.\"\n                    );\n                }\n            }\n            return obj;\n        }\n    });\n\n    // ============================================================================\n    // HISTORY RELATED MODELS\n    // TODO UNITE\n\n    var HistoryItem = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/histories/\"\n    });\n\n    var HistoryContents = Backbone.Collection.extend({\n        urlRoot: Galaxy.root + \"api/histories/\",\n        initialize: function(options) {\n            this.id = options.id;\n        },\n        url: function() {\n            return this.urlRoot + this.id + \"/contents\";\n        },\n        model: HistoryItem\n    });\n\n    var GalaxyHistory = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/histories/\"\n    });\n\n    var GalaxyHistories = Backbone.Collection.extend({\n        url: Galaxy.root + \"api/histories\",\n        model: GalaxyHistory\n    });\n\n    // ============================================================================\n    // JSTREE MODEL\n    /** Represents folder structure parsable by the jstree component.\n     *\n     */\n\n    var Jstree = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/remote_files\"\n    });\n\n    return {\n        Library: Library,\n        Libraries: Libraries,\n        Item: Ldda,\n        Ldda: Ldda,\n        FolderAsModel: FolderAsModel,\n        Folder: Folder,\n        FolderContainer: FolderContainer,\n        HistoryItem: HistoryItem,\n        HistoryContents: HistoryContents,\n        GalaxyHistory: GalaxyHistory,\n        GalaxyHistories: GalaxyHistories,\n        Jstree: Jstree\n    };\n});\n"]}