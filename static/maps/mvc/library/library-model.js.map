{"version":3,"sources":["mvc/library/library-model.js"],"names":["define","Library","Backbone","Model","extend","urlRoot","Galaxy","root","isVisible","show_deleted","Libraries","Collection","model","sort_key","sort_order","options","search","search_term","this","lowercase_term","toLowerCase","data","indexOf","getVisible","filters","item","sortByNameAsc","comparator","libraryA","libraryB","get","sort","sortByNameDesc","LibraryItem","Ldda","FolderAsModel","Folder","itemA","itemB","FolderContainer","defaults","folder","parse","obj","reset","i","folder_contents","length","type","folder_item","file_item","emit","error","HistoryItem","HistoryContents","initialize","id","url","GalaxyHistory","GalaxyHistories","Jstree","Item"],"mappings":"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","file":"../../../scripts/mvc/library/library-model.js","sourcesContent":["define([], function() {\n\n// ============================================================================\n// LIBRARY RELATED MODELS\n\n    var Library = Backbone.Model.extend({\n      urlRoot: Galaxy.root + 'api/libraries/',\n\n      /** based on show_deleted would this lib show in the list of lib's?\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       */\n      isVisible : function(show_deleted){\n          var isVisible = true;\n          if( (!show_deleted) && (this.get('deleted')) ){\n              isVisible = false;\n          }\n          return isVisible;\n      }\n    });\n\n    var Libraries = Backbone.Collection.extend({\n      urlRoot: Galaxy.root + 'api/libraries',\n\n      model: Library,\n\n      sort_key: 'name', // default\n\n      sort_order: null, // default\n\n      initialize : function(options){\n          options = options || {};\n      },\n\n      search : function(search_term){\n        /**\n         * Search the collection and return only the models that have\n         * the search term in their names.\n         * [the term to search]\n         * @type {string}\n         */\n        if (search_term == \"\") return this;\n        var lowercase_term = search_term.toLowerCase();\n        return this.filter(function(data) {\n          var lowercase_name = data.get(\"name\").toLowerCase();\n          return lowercase_name.indexOf(lowercase_term) !== -1;\n        });\n      },\n\n      /** Get every 'shown' library in this collection based on deleted filter\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       *  @returns array of library models\n       */\n      getVisible : function(show_deleted, filters){\n          filters = filters || [];\n          var filteredLibraries = new Libraries( this.filter( function( item ){\n              return item.isVisible(show_deleted);\n          }));\n\n          return filteredLibraries;\n      },\n\n      /** Sort collection by library name (ascending) and return the sorted\n       *  collection\n       */\n      sortByNameAsc: function(){\n        this.comparator = function(libraryA, libraryB){\n          if (libraryA.get('name').toLowerCase() > libraryB.get('name').toLowerCase()) {\n            return 1; // after\n          }\n          if (libraryB.get('name').toLowerCase() > libraryA.get('name').toLowerCase()) {\n            return -1; // before\n          }\n          return 0; // equal\n        };\n        this.sort();\n        return this;\n      },\n\n      /** Sort collection by library name (descending) and return the sorted\n       *  collection\n       */\n      sortByNameDesc: function(){\n        this.comparator = function(libraryA, libraryB){\n          if (libraryA.get('name').toLowerCase() > libraryB.get('name').toLowerCase()) {\n            return -1; // before\n          }\n            if (libraryB.get('name').toLowerCase() > libraryA.get('name').toLowerCase()) {\n          return 1; // after\n          }\n          return 0; // equal\n        };\n        this.sort();\n        return this;\n      }\n\n    });\n\n// ============================================================================\n// FOLDER RELATED MODELS\n\n    var LibraryItem = Backbone.Model.extend({\n    });\n\n    var Ldda = LibraryItem.extend({\n      urlRoot : Galaxy.root + 'api/libraries/datasets/'\n    });\n\n    var FolderAsModel = LibraryItem.extend({\n      urlRoot: Galaxy.root + 'api/folders/'\n    });\n\n    var Folder = Backbone.Collection.extend({\n      model: LibraryItem,\n\n      /** Sort collection by item name (ascending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n      sortByNameAsc: function(){\n        this.comparator = function(itemA, itemB){\n          if (itemA.get('type') === itemB.get('type')){\n            if (itemA.get('name').toLowerCase() > itemB.get('name').toLowerCase()) {\n              return 1; // after\n            }\n            if (itemB.get('name').toLowerCase() > itemA.get('name').toLowerCase()) {\n              return -1; // before\n            }\n            return 0; // equal\n          } else {\n            if (itemA.get('type') === 'folder'){\n              return -1; // folder is always before dataset\n            } else {\n              return 1;\n            }\n          }\n        };\n        this.sort();\n        return this;\n      },\n\n      /** Sort collection by item name (descending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n      sortByNameDesc: function(){\n        this.comparator = function(itemA, itemB){\n          if (itemA.get('type') === itemB.get('type')){\n            if (itemA.get('name').toLowerCase() > itemB.get('name').toLowerCase()) {\n              return -1; // after\n            }\n            if (itemB.get('name').toLowerCase() > itemA.get('name').toLowerCase()) {\n              return 1; // before\n            }\n            return 0; // equal\n          } else {\n            if (itemA.get('type') === 'folder'){\n              return -1; // folder is always before dataset\n            } else {\n              return 1;\n            }\n          }\n        };\n        this.sort();\n        return this;\n      }\n    });\n\n    var FolderContainer = Backbone.Model.extend({\n      defaults : {\n          folder : new Folder(),\n          urlRoot : Galaxy.root + 'api/folders/',\n          id : \"unknown\"\n      },\n      parse : function(obj) {\n        // empty the collection\n        this.get(\"folder\").reset();\n        // response is not a simple array, it contains metadata\n        // this will update the inner collection\n          for (var i = 0; i < obj.folder_contents.length; i++) {\n            if (obj.folder_contents[i].type === 'folder'){\n              var folder_item = new FolderAsModel(obj.folder_contents[i])\n              this.get(\"folder\").add(folder_item);\n            } else if(obj.folder_contents[i].type === 'file'){\n              var file_item = new Ldda(obj.folder_contents[i])\n              this.get(\"folder\").add(file_item);\n            } else{\n              Galaxy.emit.error('Unknown folder item type encountered while parsing response.');\n            }\n          };\n        return obj;\n      }\n    });\n\n\n// ============================================================================\n// HISTORY RELATED MODELS\n// TODO UNITE\n\n    var HistoryItem = Backbone.Model.extend({\n      urlRoot : Galaxy.root + 'api/histories/'\n    });\n\n    var HistoryContents = Backbone.Collection.extend({\n      urlRoot : Galaxy.root + 'api/histories/',\n      initialize: function(options){\n        this.id = options.id;\n      },\n      url : function(){\n        return this.urlRoot + this.id + '/contents';\n      },\n      model : HistoryItem\n    });\n\n    var GalaxyHistory = Backbone.Model.extend({\n      urlRoot : Galaxy.root + 'api/histories/'\n    });\n\n    var GalaxyHistories = Backbone.Collection.extend({\n      url : Galaxy.root + 'api/histories',\n      model : GalaxyHistory\n    });\n\n// ============================================================================\n// JSTREE MODEL\n    /** Represents folder structure parsable by the jstree component.\n     *\n     */\n\n    var Jstree = Backbone.Model.extend({\n      urlRoot: Galaxy.root + 'api/remote_files'\n    });\n\nreturn {\n    Library: Library,\n    Libraries : Libraries,\n    Item : Ldda,\n    Ldda : Ldda,\n    FolderAsModel : FolderAsModel,\n    Folder : Folder,\n    FolderContainer : FolderContainer,\n    HistoryItem : HistoryItem,\n    HistoryContents : HistoryContents,\n    GalaxyHistory : GalaxyHistory,\n    GalaxyHistories : GalaxyHistories,\n    Jstree: Jstree\n};\n\n});\n"]}