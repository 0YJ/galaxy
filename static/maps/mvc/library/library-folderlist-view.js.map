{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["define","mod_masthead","mod_utils","mod_toastr","mod_library_model","mod_library_folderrow_view","mod_library_dataset_view","FolderListView","Backbone","View","extend","el","progress","progressStep","folderContainer","sort","events","click #select-all-checkboxes","click .dataset_row","click .folder_row","click .sort-folder-link","collection","defaults","include_deleted","page_count","show_page","initialize","options","this","_","modal","rowViews","Folder","listenTo","renderOne","removeOne","rePaint","fetchFolder","that","FolderContainer","id","url","attributes","urlRoot","fetch","success","folder_container","render","error","model","response","responseJSON","err_msg","onclick","Galaxy","libraries","library_router","back","template","templateFolder","$","hide","upper_folder_id","path","metadata","full_path","length","$el","html","parent_library_id","order","dataset_id","row","findWhere","showDatasetDetails","paginate","tooltip","css","total_items_count","get","models","Math","ceil","preferences","page_start","items_to_render","slice","items_shown","folderToolbarView","renderPaginator","reset","removeAllRows","renderAll","checkEmptiness","addAll","each","folderListView","add","postRender","fetched_metadata","contains_file_or_folder","type","configureElements","reverse","set","rowView","FolderRowView","find","after","filter","data","remove","show","sortColumnClicked","event","preventDefault","sortFolder","renderSortIcon","sort_by","sortByNameAsc","sortByNameDesc","selectAll","selected","target","checked","$row","parentElement","makeDarkRow","makeWhiteRow","selectClickedRow","source","checkbox","localName","removeClass","addClass","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["define([\n    \"layout/masthead\",\n    \"utils/utils\",\n    \"libs/toastr\",\n    \"mvc/library/library-model\",\n    \"mvc/library/library-folderrow-view\",\n    \"mvc/library/library-dataset-view\"\n    ],\nfunction(mod_masthead,\n         mod_utils,\n         mod_toastr,\n         mod_library_model,\n         mod_library_folderrow_view,\n         mod_library_dataset_view\n         ) {\n\nvar FolderListView = Backbone.View.extend({\n    el : '#folder_items_element',\n    // progress percentage\n    progress: 0,\n    // progress rate per one item\n    progressStep: 1,\n\n    folderContainer: null,\n\n    sort: 'asc',\n\n    events: {\n        'click #select-all-checkboxes'  : 'selectAll',\n        'click .dataset_row'            : 'selectClickedRow',\n        'click .folder_row'             : 'selectClickedRow',\n        'click .sort-folder-link'       : 'sortColumnClicked'\n    },\n\n    collection: null,\n\n    defaults: {\n        include_deleted: false,\n        page_count: null,\n        show_page: null\n    },\n\n    /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n    initialize : function( options ){\n        this.options = _.defaults( this.options || {}, this.defaults, options );\n        this.modal = null;\n        // map of folder item ids to item views = cache\n        this.rowViews = {};\n\n        // create a collection of folder items for this view\n        this.collection = new mod_library_model.Folder();\n\n        // start to listen if someone modifies the collection\n        this.listenTo( this.collection, 'add', this.renderOne );\n        this.listenTo( this.collection, 'remove', this.removeOne );\n        this.listenTo( this.collection, 'sort', this.rePaint );\n        this.listenTo( this.collection, 'reset', this.rePaint );\n\n        this.fetchFolder();\n    },\n\n    fetchFolder: function( options ){\n        var options = options || {};\n        this.options.include_deleted = options.include_deleted;\n        var that = this;\n\n        this.folderContainer = new mod_library_model.FolderContainer( { id: this.options.id } );\n        this.folderContainer.url = this.folderContainer.attributes.urlRoot + this.options.id + '/contents';\n\n        if ( this.options.include_deleted ){\n            this.folderContainer.url = this.folderContainer.url + '?include_deleted=true';\n        }\n        this.folderContainer.fetch({\n            success: function( folder_container ) {\n              that.folder_container = folder_container;\n              that.render();\n            },\n            error: function( model, response ){\n              if ( typeof response.responseJSON !== \"undefined\" ){\n                mod_toastr.error( response.responseJSON.err_msg + ' Click this to go back.', '', { onclick: function() { Galaxy.libraries.library_router.back(); } } );\n              } else {\n                mod_toastr.error( 'An error ocurred. Click this to go back.', '', { onclick: function() { Galaxy.libraries.library_router.back(); } } );\n              }\n            }\n        });\n    },\n\n    render: function( options ){\n        this.options = _.extend( this.options, options );\n        var template = this.templateFolder();\n        $(\".tooltip\").hide();\n\n        // find the upper id in the full path\n        var path = this.folderContainer.attributes.metadata.full_path;\n        var upper_folder_id;\n        if ( path.length === 1 ){ // the library is above us\n          upper_folder_id = 0;\n        } else {\n          upper_folder_id = path[ path.length-2 ][ 0 ];\n        }\n\n        this.$el.html( template( {\n            path: this.folderContainer.attributes.metadata.full_path,\n            parent_library_id: this.folderContainer.attributes.metadata.parent_library_id,\n            id: this.options.id,\n            upper_folder_id: upper_folder_id,\n            order: this.sort\n        } ) );\n\n        // when dataset_id is present render its details too\n        if ( this.options.dataset_id ){\n            row = _.findWhere( that.rowViews, { id: this.options.dataset_id } );\n            if ( row ) {\n              row.showDatasetDetails();\n            } else {\n              mod_toastr.error( 'Requested dataset not found. Showing folder instead.' );\n            }\n        } else {\n            if ( this.options.show_page === null || this.options.show_page < 1 ){\n                this.options.show_page = 1;\n            }\n            this.paginate();\n        }\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css('overflow','auto');\n    },\n\n    paginate: function( options ){\n        this.options = _.extend( this.options, options );\n\n        if ( this.options.show_page === null || this.options.show_page < 1 ){\n            this.options.show_page = 1;\n        }\n        this.options.total_items_count = this.folder_container.get( 'folder' ).models.length;\n        this.options.page_count = Math.ceil( this.options.total_items_count / Galaxy.libraries.preferences.get( 'folder_page_size' ) );\n        var page_start = ( Galaxy.libraries.preferences.get( 'folder_page_size' ) * ( this.options.show_page - 1 ) );\n        var items_to_render = null;\n        items_to_render = this.folder_container.get( 'folder' ).models.slice( page_start, page_start + Galaxy.libraries.preferences.get( 'folder_page_size' ) );\n        this.options.items_shown = items_to_render.length;\n        // User requests page with no items\n        if ( Galaxy.libraries.preferences.get( 'folder_page_size' ) * this.options.show_page > ( this.options.total_items_count + Galaxy.libraries.preferences.get( 'folder_page_size' ) ) ){\n            items_to_render = [];\n        }\n        Galaxy.libraries.folderToolbarView.renderPaginator( this.options );\n        this.collection.reset( items_to_render );\n    },\n\n    rePaint: function( options ){\n        this.options = _.extend( this.options, options );\n        this.removeAllRows();\n        this.renderAll();\n        this.checkEmptiness();\n    },\n\n    /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n    addAll: function( models ){\n        _.each(models, function( model ) {\n            Galaxy.libraries.folderListView.collection.add( model, { sort: false } );\n        });\n        $( \"#center [data-toggle]\" ).tooltip();\n        this.checkEmptiness();\n        this.postRender();\n    },\n\n    /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n    postRender: function(){\n        var fetched_metadata = this.folderContainer.attributes.metadata;\n        fetched_metadata.contains_file_or_folder = typeof this.collection.findWhere({type: 'file'}) !== 'undefined' || typeof this.collection.findWhere({type: 'folder'}) !== 'undefined';\n        Galaxy.libraries.folderToolbarView.configureElements(fetched_metadata);\n    },\n\n    /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n    renderAll: function(){\n        var that = this;\n        _.each( this.collection.models.reverse(), function( model ) {\n          that.renderOne( model );\n        });\n        this.postRender();\n    },\n\n    /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n    renderOne: function(model){\n        this.options.contains_file_or_folder = true;\n        //if (model.get('type') !== 'folder'){\n            // model.set('readable_size', this.size_to_string(model.get('file_size')));\n        //}\n        model.set('folder_id', this.id);\n        var rowView = new mod_library_folderrow_view.FolderRowView({model: model});\n\n        // save new rowView to cache\n        this.rowViews[model.get('id')] = rowView;\n\n        this.$el.find('#first_folder_item').after(rowView.el);\n    },\n\n    /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n    removeOne: function( model ){\n       this.$el.find('tr').filter(function(){\n           return $(this).data('id') && $(this).data('id') === model.id;\n       }).remove();\n    },\n\n    /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n    removeAllRows: function(){\n        $('.library-row').remove();\n    },\n\n    /** Checks whether the list is empty and adds/removes the message */\n    checkEmptiness : function(){\n        if ((this.$el.find('.dataset_row').length === 0) && (this.$el.find('.folder_row').length === 0)){\n          this.$el.find('.empty-folder-message').show();\n        } else {\n          this.$el.find('.empty-folder-message').hide();\n        }\n    },\n\n    /** User clicked the table heading = he wants to sort stuff */\n    sortColumnClicked : function(event){\n        event.preventDefault();\n        if (this.sort === 'asc'){\n            this.sortFolder('name','desc');\n            this.sort = 'desc';\n        } else {\n            this.sortFolder('name','asc');\n            this.sort = 'asc';\n        }\n        this.renderSortIcon();\n    },\n\n    /**\n     *  Sorts the underlying collection according to the parameters received.\n     *  Currently supports only sorting by name.\n     */\n    sortFolder: function(sort_by, order){\n        // default to asc sort by name\n        if (sort_by === 'undefined' && order === 'undefined'){\n            return this.collection.sortByNameAsc();\n        }\n        if (sort_by === 'name'){\n            if (order === 'asc'){\n                return this.collection.sortByNameAsc();\n            } else if (order === 'desc'){\n                return this.collection.sortByNameDesc();\n            }\n        }\n    },\n\n    /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n    selectAll : function (event) {\n         var selected = event.target.checked;\n         that = this;\n         // Iterate each checkbox\n         $(':checkbox', '#folder_list_body').each(function() {\n            this.checked = selected;\n            $row = $(this.parentElement.parentElement);\n            // Change color of selected/unselected\n            if (selected) {\n              that.makeDarkRow($row);\n            } else {\n              that.makeWhiteRow($row);\n            }\n        });\n     },\n\n    /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n    selectClickedRow : function (event) {\n        var checkbox = '';\n        var $row;\n        var source;\n        if (event.target.localName === 'input'){\n            checkbox = event.target;\n            $row = $(event.target.parentElement.parentElement);\n            source = 'input';\n        } else if (event.target.localName === 'td') {\n            $row = $(event.target.parentElement);\n            checkbox = $row.find(':checkbox')[0];\n            source = 'td';\n        }\n        if (checkbox.checked){\n            if (source==='td'){\n                checkbox.checked = '';\n                this.makeWhiteRow($row);\n            } else if (source==='input') {\n                this.makeDarkRow($row);\n            }\n        } else {\n            if (source==='td'){\n                checkbox.checked = 'selected';\n                this.makeDarkRow($row);\n            } else if (source==='input') {\n                this.makeWhiteRow($row);\n            }\n        }\n    },\n\n    makeDarkRow: function($row){\n        $row.removeClass('light').addClass('dark');\n        $row.find('a').removeClass('light').addClass('dark');\n        $row.find('.fa-file-o').removeClass('fa-file-o').addClass('fa-file');\n        $row.find('.fa-folder-o').removeClass('fa-folder-o').addClass('fa-folder');\n    },\n\n    makeWhiteRow: function($row){\n        $row.removeClass('dark').addClass('light');\n        $row.find('a').removeClass('dark').addClass('light');\n        $row.find('.fa-file').removeClass('fa-file').addClass('fa-file-o');\n        $row.find('.fa-folder').removeClass('fa-folder').addClass('fa-folder-o');\n    },\n\n    renderSortIcon: function(){\n        if (this.sort === 'asc'){\n            $('.sort-icon').removeClass('fa-sort-alpha-desc').addClass('fa-sort-alpha-asc');\n        } else {\n            $('.sort-icon').removeClass('fa-sort-alpha-asc').addClass('fa-sort-alpha-desc');\n        }\n    },\n\n    templateFolder : function (){\n      return _.template([\n      // BREADCRUMBS\n      '<ol class=\"breadcrumb\">',\n        '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n        '<% _.each(path, function(path_item) { %>',\n          '<% if (path_item[0] != id) { %>',\n            '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n          '<% } else { %>',\n            '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n          '<% } %>',\n        '<% }); %>',\n      '</ol>',\n\n      // FOLDER CONTENT\n      '<table data-library-id=\"<%- parent_library_id  %>\" id=\"folder_table\" class=\"grid table table-condensed\">',\n        '<thead>',\n          '<th class=\"button_heading\"></th>',\n          '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n          '<th><a class=\"sort-folder-link\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon fa fa-sort-alpha-<%- order %>\"></span></th>',\n          '<th style=\"width:25%;\">description</th>',\n          '<th style=\"width:5%;\">data type</th>',\n          '<th style=\"width:10%;\">size</th>',\n          '<th style=\"width:160px;\">time updated (UTC)</th>',\n          '<th style=\"width:10%;\"></th> ',\n        '</thead>',\n        '<tbody id=\"folder_list_body\">',\n          '<tr id=\"first_folder_item\">',\n          '<td>',\n            '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n          '</td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '</tr>',\n        '</tbody>',\n      '</table>',\n      '<div class=\"empty-folder-message\" style=\"display:none;\">',\n          'This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up',\n          ' please consult the <a href=\"https://wiki.galaxyproject.org/Admin/DataLibraries/LibrarySecurity\" target=\"_blank\">library security wikipage</a>',\n          ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n      '</div>'\n      ].join(''));\n    }\n\n});\n\nreturn {\n    FolderListView: FolderListView\n};\n\n});\n"]}