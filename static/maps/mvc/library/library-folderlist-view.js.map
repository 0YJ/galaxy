{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["FolderListView","Backbone","View","extend","el","progress","progressStep","folderContainer","current_sort_order","current_sort_key","events","click #select-all-checkboxes","click .dataset_row","click .folder_row","click .sort-folder-name","click .sort-folder-file_ext","collection","defaults","page_count","initialize","options","this","_","modal","rowViews","_libraryModel2","default","Folder","include_deleted","renderOne","removeOne","show_page","rePaint","listenTo","fetchFolder","that","FolderContainer","id","url","attributes","urlRoot","fetch","success","folder_container","error","model","response","responseJSON","onclick","libraries","library_router","back","render","template","templateFolder","$","hide","upper_folder_id","metadata","full_path","path","$el","html","parent_library_id","dataset_id","row","findWhere","_toastr2","paginate","tooltip","css","total_items_count","get","models","page_start","Galaxy","items_to_render","preferences","folderToolbarView","slice","renderAll","length","each","renderPaginator","removeAllRows","checkEmptiness","addAll","fetched_metadata","configureElements","postRender","contains_file_or_folder","type","reverse","rowView","find","set","_libraryFolderrowView2","FolderRowView","after","sortColumnClicked","event","preventDefault","filter","currentTarget","className","replace","remove","selectAll","$row","makeDarkRow","show","makeWhiteRow","selectClickedRow","sortFolder","source","checkbox","selected","checked","closest","target","removeClass","localName","renderSortIcon","addClass","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["import mod_masthead from \"layout/masthead\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_library_folderrow_view from \"mvc/library/library-folderrow-view\";\nimport mod_library_dataset_view from \"mvc/library/library-dataset-view\";\nvar FolderListView = Backbone.View.extend({\n    el: \"#folder_items_element\",\n    // progress percentage\n    progress: 0,\n    // progress rate per one item\n    progressStep: 1,\n\n    folderContainer: null,\n\n    current_sort_order: \"asc\",\n\n    current_sort_key: \"name\",\n\n    events: {\n        \"click #select-all-checkboxes\": \"selectAll\",\n        \"click .dataset_row\": \"selectClickedRow\",\n        \"click .folder_row\": \"selectClickedRow\",\n        \"click .sort-folder-name\": \"sortColumnClicked\",\n        \"click .sort-folder-file_ext\": \"sortColumnClicked\",\n        \"click .sort-folder-description\": \"sortColumnClicked\",\n        \"click .sort-folder-state\": \"sortColumnClicked\"\n    },\n\n    collection: null,\n\n    defaults: {\n        include_deleted: false,\n        page_count: null,\n        show_page: null\n    },\n\n    /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n    initialize: function(options) {\n        this.options = _.defaults(this.options || {}, this.defaults, options);\n        this.modal = null;\n        // map of folder item ids to item views = cache\n        this.rowViews = {};\n\n        // create a collection of folder items for this view\n        this.collection = new mod_library_model.Folder();\n\n        // start to listen if someone modifies the collection\n        this.listenTo(this.collection, \"add\", this.renderOne);\n        this.listenTo(this.collection, \"remove\", this.removeOne);\n        this.listenTo(this.collection, \"sort\", this.rePaint);\n        this.listenTo(this.collection, \"reset\", this.rePaint);\n\n        this.fetchFolder();\n    },\n\n    fetchFolder: function(options) {\n        var options = options || {};\n        this.options.include_deleted = options.include_deleted;\n        var that = this;\n\n        this.folderContainer = new mod_library_model.FolderContainer({\n            id: this.options.id\n        });\n        this.folderContainer.url =\n            this.folderContainer.attributes.urlRoot +\n            this.options.id +\n            \"/contents\";\n\n        if (this.options.include_deleted) {\n            this.folderContainer.url =\n                this.folderContainer.url + \"?include_deleted=true\";\n        }\n        this.folderContainer.fetch({\n            success: function(folder_container) {\n                that.folder_container = folder_container;\n                that.render();\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(\n                        response.responseJSON.err_msg +\n                            \" Click this to go back.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                } else {\n                    mod_toastr.error(\n                        \"An error occurred. Click this to go back.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                }\n            }\n        });\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var template = this.templateFolder();\n        $(\".tooltip\").hide();\n\n        // find the upper id in the full path\n        var path = this.folderContainer.attributes.metadata.full_path;\n        var upper_folder_id;\n        if (path.length === 1) {\n            // the library is above us\n            upper_folder_id = 0;\n        } else {\n            upper_folder_id = path[path.length - 2][0];\n        }\n\n        this.$el.html(\n            template({\n                path: this.folderContainer.attributes.metadata.full_path,\n                parent_library_id: this.folderContainer.attributes.metadata\n                    .parent_library_id,\n                id: this.options.id,\n                upper_folder_id: upper_folder_id,\n                order: this.current_sort_order\n            })\n        );\n\n        // when dataset_id is present render its details too\n        if (this.options.dataset_id) {\n            var row = _.findWhere(that.rowViews, {\n                id: this.options.dataset_id\n            });\n            if (row) {\n                row.showDatasetDetails();\n            } else {\n                mod_toastr.error(\n                    \"Requested dataset not found. Showing folder instead.\"\n                );\n            }\n        } else {\n            if (this.options.show_page === null || this.options.show_page < 1) {\n                this.options.show_page = 1;\n            }\n            this.paginate();\n        }\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    paginate: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.show_page === null || this.options.show_page < 1) {\n            this.options.show_page = 1;\n        }\n        this.options.total_items_count = this.folder_container.get(\n            \"folder\"\n        ).models.length;\n        this.options.page_count = Math.ceil(\n            this.options.total_items_count /\n                Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        var page_start =\n            Galaxy.libraries.preferences.get(\"folder_page_size\") *\n            (this.options.show_page - 1);\n        var items_to_render = null;\n        items_to_render = this.folder_container\n            .get(\"folder\")\n            .models.slice(\n                page_start,\n                page_start +\n                    Galaxy.libraries.preferences.get(\"folder_page_size\")\n            );\n        this.options.items_shown = items_to_render.length;\n        // User requests page with no items\n        if (\n            Galaxy.libraries.preferences.get(\"folder_page_size\") *\n                this.options.show_page >\n            this.options.total_items_count +\n                Galaxy.libraries.preferences.get(\"folder_page_size\")\n        ) {\n            items_to_render = [];\n        }\n        Galaxy.libraries.folderToolbarView.renderPaginator(this.options);\n        this.collection.reset(items_to_render);\n    },\n\n    rePaint: function(options) {\n        this.options = _.extend(this.options, options);\n        this.removeAllRows();\n        this.renderAll();\n        this.checkEmptiness();\n    },\n\n    /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n    addAll: function(models) {\n        _.each(models, model => {\n            Galaxy.libraries.folderListView.collection.add(model, {\n                current_sort_order: false\n            });\n        });\n        $(\"#center [data-toggle]\").tooltip();\n        this.checkEmptiness();\n        this.postRender();\n    },\n\n    /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n    postRender: function() {\n        var fetched_metadata = this.folderContainer.attributes.metadata;\n        fetched_metadata.contains_file_or_folder =\n            typeof this.collection.findWhere({ type: \"file\" }) !==\n                \"undefined\" ||\n            typeof this.collection.findWhere({ type: \"folder\" }) !==\n                \"undefined\";\n        Galaxy.libraries.folderToolbarView.configureElements(fetched_metadata);\n    },\n\n    /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n    renderAll: function() {\n        var that = this;\n        _.each(this.collection.models.reverse(), model => {\n            that.renderOne(model);\n        });\n        this.postRender();\n    },\n\n    /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n    renderOne: function(model) {\n        this.options.contains_file_or_folder = true;\n        //if (model.get('type') !== 'folder'){\n        // model.set('readable_size', this.size_to_string(model.get('file_size')));\n        //}\n        model.set(\"folder_id\", this.id);\n        var rowView = new mod_library_folderrow_view.FolderRowView({\n            model: model\n        });\n\n        // save new rowView to cache\n        this.rowViews[model.get(\"id\")] = rowView;\n\n        this.$el.find(\"#first_folder_item\").after(rowView.el);\n    },\n\n    /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n    removeOne: function(model) {\n        this.$el\n            .find(\"tr\")\n            .filter(function() {\n                return $(this).data(\"id\") && $(this).data(\"id\") === model.id;\n            })\n            .remove();\n    },\n\n    /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n    removeAllRows: function() {\n        $(\".library-row\").remove();\n    },\n\n    /** Checks whether the list is empty and adds/removes the message */\n    checkEmptiness: function() {\n        if (\n            this.$el.find(\".dataset_row\").length === 0 &&\n            this.$el.find(\".folder_row\").length === 0\n        ) {\n            this.$el.find(\".empty-folder-message\").show();\n        } else {\n            this.$el.find(\".empty-folder-message\").hide();\n        }\n    },\n\n    sortColumnClicked: function(event) {\n        event.preventDefault();\n        this.current_sort_order =\n            this.current_sort_order === \"asc\" ? \"desc\" : \"asc\";\n        this.current_sort_key = event.currentTarget.className.replace(\n            \"sort-folder-\",\n            \"\"\n        );\n        this.collection.sortFolder(\n            this.current_sort_key,\n            this.current_sort_order\n        );\n        this.renderSortIcon();\n    },\n\n    /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n    selectAll: function(event) {\n        var selected = event.target.checked;\n        that = this;\n        // Iterate each checkbox\n        $(\":checkbox\", \"#folder_list_body\").each(function() {\n            this.checked = selected;\n            var $row = $(this).closest(\"tr\");\n            // Change color of selected/unselected\n            if (selected) {\n                that.makeDarkRow($row);\n            } else {\n                that.makeWhiteRow($row);\n            }\n        });\n    },\n\n    /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n    selectClickedRow: function(event) {\n        var checkbox = \"\";\n        var $row;\n        var source;\n        $row = $(event.target).closest(\"tr\");\n        if (event.target.localName === \"input\") {\n            checkbox = event.target;\n            source = \"input\";\n        } else if (event.target.localName === \"td\") {\n            checkbox = $row.find(\":checkbox\")[0];\n            source = \"td\";\n        }\n        if (checkbox.checked) {\n            if (source === \"td\") {\n                checkbox.checked = \"\";\n                this.makeWhiteRow($row);\n            } else if (source === \"input\") {\n                this.makeDarkRow($row);\n            }\n        } else {\n            if (source === \"td\") {\n                checkbox.checked = \"selected\";\n                this.makeDarkRow($row);\n            } else if (source === \"input\") {\n                this.makeWhiteRow($row);\n            }\n        }\n    },\n\n    makeDarkRow: function($row) {\n        $row.removeClass(\"light\").addClass(\"dark\");\n        $row\n            .find(\"a\")\n            .removeClass(\"light\")\n            .addClass(\"dark\");\n        $row\n            .find(\".fa-file-o\")\n            .removeClass(\"fa-file-o\")\n            .addClass(\"fa-file\");\n        $row\n            .find(\".fa-folder-o\")\n            .removeClass(\"fa-folder-o\")\n            .addClass(\"fa-folder\");\n    },\n\n    makeWhiteRow: function($row) {\n        $row.removeClass(\"dark\").addClass(\"light\");\n        $row\n            .find(\"a\")\n            .removeClass(\"dark\")\n            .addClass(\"light\");\n        $row\n            .find(\".fa-file\")\n            .removeClass(\"fa-file\")\n            .addClass(\"fa-file-o\");\n        $row\n            .find(\".fa-folder\")\n            .removeClass(\"fa-folder\")\n            .addClass(\"fa-folder-o\");\n    },\n\n    renderSortIcon: function() {\n        if (this.current_sort_order === \"asc\") {\n            $('[class*=\"sort-icon\"]')\n                .removeClass(\"fa-sort-alpha-desc\")\n                .removeClass(\"fa-sort-alpha-asc\");\n            $(\".sort-icon\" + \"-\" + this.current_sort_key).addClass(\n                \"fa-sort-alpha-asc\"\n            );\n        } else {\n            $(\".sort-icon\" + \"-\" + this.current_sort_key).addClass(\n                \"fa-sort-alpha-desc\"\n            );\n        }\n    },\n\n    templateFolder: function() {\n        return _.template(\n            [\n                // BREADCRUMBS\n                '<ol class=\"breadcrumb\">',\n                '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n                \"<% _.each(path, function(path_item) { %>\",\n                \"<% if (path_item[0] != id) { %>\",\n                '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n                \"<% } else { %>\",\n                '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ol>\",\n\n                // FOLDER CONTENT\n                '<table data-library-id=\"<%- parent_library_id  %>\" class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th class=\"button_heading\"></th>',\n                '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n                '<th><a class=\"sort-folder-name\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-name fa fa-sort-alpha-<%- order %>\"></span></th>',\n                '<th style=\"width:20%;\"><a class=\"sort-folder-description\" title=\"Click to reverse order\" href=\"#\">description</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-description fa\"></span></th>',\n                '<th style=\"width:5%;\"><a class=\"sort-folder-file_ext\" title=\"Click to reverse order\" href=\"#\">data type</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-file_ext fa\"></span></th>',\n                '<th style=\"width:10%;\">size</th>',\n                '<th style=\"width:160px;\">time updated (UTC)</th>',\n                '<th style=\"width:5%;\"><a class=\"sort-folder-state\" title=\"Click to reverse order\" href=\"#\">state</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-state fa\"></span></th>',\n                '<th style=\"width:150px;\"></th> ',\n                \"</thead>\",\n                '<tbody id=\"folder_list_body\">',\n                '<tr id=\"first_folder_item\">',\n                \"<td>\",\n                '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n                \"</td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<div class=\"empty-folder-message\" style=\"display:none;\">',\n                \"This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up\",\n                ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>',\n                ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderListView: FolderListView\n};\n"]}