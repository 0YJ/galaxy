{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["define","el","progress","progressStep","mod_masthead","folderContainer","mod_toastr","sort","mod_library_folderrow_view","events","FolderListView","Backbone","View","extend","collection","defaults","page_count","click #select-all-checkboxes","click .dataset_row","click .folder_row","click .sort-folder-link","options","include_deleted","show_page","initialize","listenTo","this","_","fetchFolder","that","id","renderOne","removeOne","rePaint","success","error","responseJSON","Galaxy","libraries","library_router","url","urlRoot","onclick","fetch","folder_container","render","model","response","attributes","upper_folder_id","back","parent_library_id","template","templateFolder","$","hide","path","metadata","full_path","length","$el","html","total_items_count","page_start","items_to_render","dataset_id","findWhere","folderToolbarView","reset","row","showDatasetDetails","removeAllRows","renderAll","each","models","tooltip","css","paginate","checkEmptiness","postRender","get","fetched_metadata","preferences","items_shown","contains_file_or_folder","rowView","after","addAll","folderListView","add","preventDefault","sortColumnClicked","type","event","configureElements","reverse","sortFolder","sort_by","set","FolderRowView","find","makeWhiteRow","filter","data","selectClickedRow","checkbox","source","remove","checked","show","makeDarkRow","$row","removeClass","order","sortByNameAsc","sortByNameDesc","selectAll","selected","target","closest","localName","addClass","renderSortIcon","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["define(\n    [\n        \"layout/masthead\",\n        \"utils/utils\",\n        \"libs/toastr\",\n        \"mvc/library/library-model\",\n        \"mvc/library/library-folderrow-view\",\n        \"mvc/library/library-dataset-view\"\n    ],\n    function(\n        mod_masthead,\n        mod_utils,\n        mod_toastr,\n        mod_library_model,\n        mod_library_folderrow_view,\n        mod_library_dataset_view\n    ) {\n        var FolderListView = Backbone.View.extend({\n            el: \"#folder_items_element\",\n            // progress percentage\n            progress: 0,\n            // progress rate per one item\n            progressStep: 1,\n\n            folderContainer: null,\n\n            sort: \"asc\",\n\n            events: {\n                \"click #select-all-checkboxes\": \"selectAll\",\n                \"click .dataset_row\": \"selectClickedRow\",\n                \"click .folder_row\": \"selectClickedRow\",\n                \"click .sort-folder-link\": \"sortColumnClicked\"\n            },\n\n            collection: null,\n\n            defaults: {\n                include_deleted: false,\n                page_count: null,\n                show_page: null\n            },\n\n            /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n            initialize: function(options) {\n                this.options = _.defaults(\n                    this.options || {},\n                    this.defaults,\n                    options\n                );\n                this.modal = null;\n                // map of folder item ids to item views = cache\n                this.rowViews = {};\n\n                // create a collection of folder items for this view\n                this.collection = new mod_library_model.Folder();\n\n                // start to listen if someone modifies the collection\n                this.listenTo(this.collection, \"add\", this.renderOne);\n                this.listenTo(this.collection, \"remove\", this.removeOne);\n                this.listenTo(this.collection, \"sort\", this.rePaint);\n                this.listenTo(this.collection, \"reset\", this.rePaint);\n\n                this.fetchFolder();\n            },\n\n            fetchFolder: function(options) {\n                var options = options || {};\n                this.options.include_deleted = options.include_deleted;\n                var that = this;\n\n                this.folderContainer = new mod_library_model.FolderContainer({\n                    id: this.options.id\n                });\n                this.folderContainer.url =\n                    this.folderContainer.attributes.urlRoot +\n                    this.options.id +\n                    \"/contents\";\n\n                if (this.options.include_deleted) {\n                    this.folderContainer.url =\n                        this.folderContainer.url + \"?include_deleted=true\";\n                }\n                this.folderContainer.fetch({\n                    success: function(folder_container) {\n                        that.folder_container = folder_container;\n                        that.render();\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(\n                                response.responseJSON.err_msg +\n                                    \" Click this to go back.\",\n                                \"\",\n                                {\n                                    onclick: function() {\n                                        Galaxy.libraries.library_router.back();\n                                    }\n                                }\n                            );\n                        } else {\n                            mod_toastr.error(\n                                \"An error occurred. Click this to go back.\",\n                                \"\",\n                                {\n                                    onclick: function() {\n                                        Galaxy.libraries.library_router.back();\n                                    }\n                                }\n                            );\n                        }\n                    }\n                });\n            },\n\n            render: function(options) {\n                this.options = _.extend(this.options, options);\n                var template = this.templateFolder();\n                $(\".tooltip\").hide();\n\n                // find the upper id in the full path\n                var path = this.folderContainer.attributes.metadata.full_path;\n                var upper_folder_id;\n                if (path.length === 1) {\n                    // the library is above us\n                    upper_folder_id = 0;\n                } else {\n                    upper_folder_id = path[path.length - 2][0];\n                }\n\n                this.$el.html(\n                    template({\n                        path: this.folderContainer.attributes.metadata\n                            .full_path,\n                        parent_library_id: this.folderContainer.attributes\n                            .metadata.parent_library_id,\n                        id: this.options.id,\n                        upper_folder_id: upper_folder_id,\n                        order: this.sort\n                    })\n                );\n\n                // when dataset_id is present render its details too\n                if (this.options.dataset_id) {\n                    var row = _.findWhere(that.rowViews, {\n                        id: this.options.dataset_id\n                    });\n                    if (row) {\n                        row.showDatasetDetails();\n                    } else {\n                        mod_toastr.error(\n                            \"Requested dataset not found. Showing folder instead.\"\n                        );\n                    }\n                } else {\n                    if (\n                        this.options.show_page === null ||\n                        this.options.show_page < 1\n                    ) {\n                        this.options.show_page = 1;\n                    }\n                    this.paginate();\n                }\n                $(\"#center [data-toggle]\").tooltip();\n                $(\"#center\").css(\"overflow\", \"auto\");\n            },\n\n            paginate: function(options) {\n                this.options = _.extend(this.options, options);\n\n                if (\n                    this.options.show_page === null ||\n                    this.options.show_page < 1\n                ) {\n                    this.options.show_page = 1;\n                }\n                this.options.total_items_count = this.folder_container.get(\n                    \"folder\"\n                ).models.length;\n                this.options.page_count = Math.ceil(\n                    this.options.total_items_count /\n                        Galaxy.libraries.preferences.get(\"folder_page_size\")\n                );\n                var page_start =\n                    Galaxy.libraries.preferences.get(\"folder_page_size\") *\n                    (this.options.show_page - 1);\n                var items_to_render = null;\n                items_to_render = this.folder_container\n                    .get(\"folder\")\n                    .models.slice(\n                        page_start,\n                        page_start +\n                            Galaxy.libraries.preferences.get(\"folder_page_size\")\n                    );\n                this.options.items_shown = items_to_render.length;\n                // User requests page with no items\n                if (\n                    Galaxy.libraries.preferences.get(\"folder_page_size\") *\n                        this.options.show_page >\n                    this.options.total_items_count +\n                        Galaxy.libraries.preferences.get(\"folder_page_size\")\n                ) {\n                    items_to_render = [];\n                }\n                Galaxy.libraries.folderToolbarView.renderPaginator(\n                    this.options\n                );\n                this.collection.reset(items_to_render);\n            },\n\n            rePaint: function(options) {\n                this.options = _.extend(this.options, options);\n                this.removeAllRows();\n                this.renderAll();\n                this.checkEmptiness();\n            },\n\n            /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n            addAll: function(models) {\n                _.each(models, function(model) {\n                    Galaxy.libraries.folderListView.collection.add(model, {\n                        sort: false\n                    });\n                });\n                $(\"#center [data-toggle]\").tooltip();\n                this.checkEmptiness();\n                this.postRender();\n            },\n\n            /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n            postRender: function() {\n                var fetched_metadata = this.folderContainer.attributes.metadata;\n                fetched_metadata.contains_file_or_folder =\n                    typeof this.collection.findWhere({ type: \"file\" }) !==\n                        \"undefined\" ||\n                    typeof this.collection.findWhere({ type: \"folder\" }) !==\n                        \"undefined\";\n                Galaxy.libraries.folderToolbarView.configureElements(\n                    fetched_metadata\n                );\n            },\n\n            /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n            renderAll: function() {\n                var that = this;\n                _.each(this.collection.models.reverse(), function(model) {\n                    that.renderOne(model);\n                });\n                this.postRender();\n            },\n\n            /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n            renderOne: function(model) {\n                this.options.contains_file_or_folder = true;\n                //if (model.get('type') !== 'folder'){\n                // model.set('readable_size', this.size_to_string(model.get('file_size')));\n                //}\n                model.set(\"folder_id\", this.id);\n                var rowView = new mod_library_folderrow_view.FolderRowView({\n                    model: model\n                });\n\n                // save new rowView to cache\n                this.rowViews[model.get(\"id\")] = rowView;\n\n                this.$el.find(\"#first_folder_item\").after(rowView.el);\n            },\n\n            /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n            removeOne: function(model) {\n                this.$el\n                    .find(\"tr\")\n                    .filter(function() {\n                        return (\n                            $(this).data(\"id\") &&\n                            $(this).data(\"id\") === model.id\n                        );\n                    })\n                    .remove();\n            },\n\n            /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n            removeAllRows: function() {\n                $(\".library-row\").remove();\n            },\n\n            /** Checks whether the list is empty and adds/removes the message */\n            checkEmptiness: function() {\n                if (\n                    this.$el.find(\".dataset_row\").length === 0 &&\n                    this.$el.find(\".folder_row\").length === 0\n                ) {\n                    this.$el.find(\".empty-folder-message\").show();\n                } else {\n                    this.$el.find(\".empty-folder-message\").hide();\n                }\n            },\n\n            /** User clicked the table heading = he wants to sort stuff */\n            sortColumnClicked: function(event) {\n                event.preventDefault();\n                if (this.sort === \"asc\") {\n                    this.sortFolder(\"name\", \"desc\");\n                    this.sort = \"desc\";\n                } else {\n                    this.sortFolder(\"name\", \"asc\");\n                    this.sort = \"asc\";\n                }\n                this.renderSortIcon();\n            },\n\n            /**\n     *  Sorts the underlying collection according to the parameters received.\n     *  Currently supports only sorting by name.\n     */\n            sortFolder: function(sort_by, order) {\n                // default to asc sort by name\n                if (sort_by === \"undefined\" && order === \"undefined\") {\n                    return this.collection.sortByNameAsc();\n                }\n                if (sort_by === \"name\") {\n                    if (order === \"asc\") {\n                        return this.collection.sortByNameAsc();\n                    } else if (order === \"desc\") {\n                        return this.collection.sortByNameDesc();\n                    }\n                }\n            },\n\n            /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n            selectAll: function(event) {\n                var selected = event.target.checked;\n                that = this;\n                // Iterate each checkbox\n                $(\":checkbox\", \"#folder_list_body\").each(function() {\n                    this.checked = selected;\n                    var $row = $(this).closest(\"tr\");\n                    // Change color of selected/unselected\n                    if (selected) {\n                        that.makeDarkRow($row);\n                    } else {\n                        that.makeWhiteRow($row);\n                    }\n                });\n            },\n\n            /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n            selectClickedRow: function(event) {\n                var checkbox = \"\";\n                var $row;\n                var source;\n                $row = $(event.target).closest(\"tr\");\n                if (event.target.localName === \"input\") {\n                    checkbox = event.target;\n                    source = \"input\";\n                } else if (event.target.localName === \"td\") {\n                    checkbox = $row.find(\":checkbox\")[0];\n                    source = \"td\";\n                }\n                if (checkbox.checked) {\n                    if (source === \"td\") {\n                        checkbox.checked = \"\";\n                        this.makeWhiteRow($row);\n                    } else if (source === \"input\") {\n                        this.makeDarkRow($row);\n                    }\n                } else {\n                    if (source === \"td\") {\n                        checkbox.checked = \"selected\";\n                        this.makeDarkRow($row);\n                    } else if (source === \"input\") {\n                        this.makeWhiteRow($row);\n                    }\n                }\n            },\n\n            makeDarkRow: function($row) {\n                $row.removeClass(\"light\").addClass(\"dark\");\n                $row\n                    .find(\"a\")\n                    .removeClass(\"light\")\n                    .addClass(\"dark\");\n                $row\n                    .find(\".fa-file-o\")\n                    .removeClass(\"fa-file-o\")\n                    .addClass(\"fa-file\");\n                $row\n                    .find(\".fa-folder-o\")\n                    .removeClass(\"fa-folder-o\")\n                    .addClass(\"fa-folder\");\n            },\n\n            makeWhiteRow: function($row) {\n                $row.removeClass(\"dark\").addClass(\"light\");\n                $row\n                    .find(\"a\")\n                    .removeClass(\"dark\")\n                    .addClass(\"light\");\n                $row\n                    .find(\".fa-file\")\n                    .removeClass(\"fa-file\")\n                    .addClass(\"fa-file-o\");\n                $row\n                    .find(\".fa-folder\")\n                    .removeClass(\"fa-folder\")\n                    .addClass(\"fa-folder-o\");\n            },\n\n            renderSortIcon: function() {\n                if (this.sort === \"asc\") {\n                    $(\".sort-icon\")\n                        .removeClass(\"fa-sort-alpha-desc\")\n                        .addClass(\"fa-sort-alpha-asc\");\n                } else {\n                    $(\".sort-icon\")\n                        .removeClass(\"fa-sort-alpha-asc\")\n                        .addClass(\"fa-sort-alpha-desc\");\n                }\n            },\n\n            templateFolder: function() {\n                return _.template(\n                    [\n                        // BREADCRUMBS\n                        '<ol class=\"breadcrumb\">',\n                        '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n                        \"<% _.each(path, function(path_item) { %>\",\n                        \"<% if (path_item[0] != id) { %>\",\n                        '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n                        \"<% } else { %>\",\n                        '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n                        \"<% } %>\",\n                        \"<% }); %>\",\n                        \"</ol>\",\n\n                        // FOLDER CONTENT\n                        '<table data-library-id=\"<%- parent_library_id  %>\" class=\"grid table table-condensed\">',\n                        \"<thead>\",\n                        '<th class=\"button_heading\"></th>',\n                        '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n                        '<th><a class=\"sort-folder-link\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon fa fa-sort-alpha-<%- order %>\"></span></th>',\n                        '<th style=\"width:25%;\">description</th>',\n                        '<th style=\"width:5%;\">data type</th>',\n                        '<th style=\"width:10%;\">size</th>',\n                        '<th style=\"width:160px;\">time updated (UTC)</th>',\n                        '<th style=\"width:10%;\"></th> ',\n                        \"</thead>\",\n                        '<tbody id=\"folder_list_body\">',\n                        '<tr id=\"first_folder_item\">',\n                        \"<td>\",\n                        '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n                        \"</td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"</tr>\",\n                        \"</tbody>\",\n                        \"</table>\",\n                        '<div class=\"empty-folder-message\" style=\"display:none;\">',\n                        \"This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up\",\n                        ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>',\n                        ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            }\n        });\n\n        return {\n            FolderListView: FolderListView\n        };\n    }\n);\n"]}