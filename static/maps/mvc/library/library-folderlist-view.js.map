{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["FolderListView","Backbone","View","extend","el","progress","progressStep","folderContainer","sort","events","click #select-all-checkboxes","click .dataset_row","click .folder_row","click .sort-folder-link","collection","include_deleted","show_page","options","this","_","defaults","modal","rowViews","_libraryModel2","default","Folder","renderOne","page_count","removeOne","rePaint","listenTo","fetchFolder","initialize","that","FolderContainer","id","url","attributes","urlRoot","fetch","success","folder_container","error","model","response","responseJSON","onclick","libraries","library_router","back","render","template","templateFolder","$","hide","upper_folder_id","metadata","full_path","path","$el","html","parent_library_id","dataset_id","row","findWhere","_toastr2","paginate","tooltip","css","total_items_count","get","models","page_start","Galaxy","items_to_render","preferences","folderToolbarView","slice","renderAll","length","each","renderPaginator","removeAllRows","checkEmptiness","addAll","fetched_metadata","contains_file_or_folder","configureElements","postRender","type","reverse","rowView","find","set","_libraryFolderrowView2","FolderRowView","after","sortColumnClicked","event","preventDefault","data","remove","order","sort_by","show","sortFolder","selectAll","makeDarkRow","$row","sortByNameAsc","sortByNameDesc","source","selected","target","localName","checkbox","checked","closest","makeWhiteRow","selectClickedRow","removeClass","renderSortIcon","addClass","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["import mod_masthead from \"layout/masthead\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_library_folderrow_view from \"mvc/library/library-folderrow-view\";\nimport mod_library_dataset_view from \"mvc/library/library-dataset-view\";\nvar FolderListView = Backbone.View.extend({\n    el: \"#folder_items_element\",\n    // progress percentage\n    progress: 0,\n    // progress rate per one item\n    progressStep: 1,\n\n    folderContainer: null,\n\n    sort: \"asc\",\n\n    events: {\n        \"click #select-all-checkboxes\": \"selectAll\",\n        \"click .dataset_row\": \"selectClickedRow\",\n        \"click .folder_row\": \"selectClickedRow\",\n        \"click .sort-folder-link\": \"sortColumnClicked\"\n    },\n\n    collection: null,\n\n    defaults: {\n        include_deleted: false,\n        page_count: null,\n        show_page: null\n    },\n\n    /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n    initialize: function(options) {\n        this.options = _.defaults(this.options || {}, this.defaults, options);\n        this.modal = null;\n        // map of folder item ids to item views = cache\n        this.rowViews = {};\n\n        // create a collection of folder items for this view\n        this.collection = new mod_library_model.Folder();\n\n        // start to listen if someone modifies the collection\n        this.listenTo(this.collection, \"add\", this.renderOne);\n        this.listenTo(this.collection, \"remove\", this.removeOne);\n        this.listenTo(this.collection, \"sort\", this.rePaint);\n        this.listenTo(this.collection, \"reset\", this.rePaint);\n\n        this.fetchFolder();\n    },\n\n    fetchFolder: function(options) {\n        var options = options || {};\n        this.options.include_deleted = options.include_deleted;\n        var that = this;\n\n        this.folderContainer = new mod_library_model.FolderContainer({\n            id: this.options.id\n        });\n        this.folderContainer.url =\n            this.folderContainer.attributes.urlRoot +\n            this.options.id +\n            \"/contents\";\n\n        if (this.options.include_deleted) {\n            this.folderContainer.url =\n                this.folderContainer.url + \"?include_deleted=true\";\n        }\n        this.folderContainer.fetch({\n            success: function(folder_container) {\n                that.folder_container = folder_container;\n                that.render();\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(\n                        response.responseJSON.err_msg +\n                            \" Click this to go back.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                } else {\n                    mod_toastr.error(\n                        \"An error occurred. Click this to go back.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                }\n            }\n        });\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var template = this.templateFolder();\n        $(\".tooltip\").hide();\n\n        // find the upper id in the full path\n        var path = this.folderContainer.attributes.metadata.full_path;\n        var upper_folder_id;\n        if (path.length === 1) {\n            // the library is above us\n            upper_folder_id = 0;\n        } else {\n            upper_folder_id = path[path.length - 2][0];\n        }\n\n        this.$el.html(\n            template({\n                path: this.folderContainer.attributes.metadata.full_path,\n                parent_library_id: this.folderContainer.attributes.metadata\n                    .parent_library_id,\n                id: this.options.id,\n                upper_folder_id: upper_folder_id,\n                order: this.sort\n            })\n        );\n\n        // when dataset_id is present render its details too\n        if (this.options.dataset_id) {\n            var row = _.findWhere(that.rowViews, {\n                id: this.options.dataset_id\n            });\n            if (row) {\n                row.showDatasetDetails();\n            } else {\n                mod_toastr.error(\n                    \"Requested dataset not found. Showing folder instead.\"\n                );\n            }\n        } else {\n            if (this.options.show_page === null || this.options.show_page < 1) {\n                this.options.show_page = 1;\n            }\n            this.paginate();\n        }\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    paginate: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.show_page === null || this.options.show_page < 1) {\n            this.options.show_page = 1;\n        }\n        this.options.total_items_count = this.folder_container.get(\n            \"folder\"\n        ).models.length;\n        this.options.page_count = Math.ceil(\n            this.options.total_items_count /\n                Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        var page_start =\n            Galaxy.libraries.preferences.get(\"folder_page_size\") *\n            (this.options.show_page - 1);\n        var items_to_render = null;\n        items_to_render = this.folder_container\n            .get(\"folder\")\n            .models.slice(\n                page_start,\n                page_start +\n                    Galaxy.libraries.preferences.get(\"folder_page_size\")\n            );\n        this.options.items_shown = items_to_render.length;\n        // User requests page with no items\n        if (\n            Galaxy.libraries.preferences.get(\"folder_page_size\") *\n                this.options.show_page >\n            this.options.total_items_count +\n                Galaxy.libraries.preferences.get(\"folder_page_size\")\n        ) {\n            items_to_render = [];\n        }\n        Galaxy.libraries.folderToolbarView.renderPaginator(this.options);\n        this.collection.reset(items_to_render);\n    },\n\n    rePaint: function(options) {\n        this.options = _.extend(this.options, options);\n        this.removeAllRows();\n        this.renderAll();\n        this.checkEmptiness();\n    },\n\n    /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n    addAll: function(models) {\n        _.each(models, function(model) {\n            Galaxy.libraries.folderListView.collection.add(model, {\n                sort: false\n            });\n        });\n        $(\"#center [data-toggle]\").tooltip();\n        this.checkEmptiness();\n        this.postRender();\n    },\n\n    /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n    postRender: function() {\n        var fetched_metadata = this.folderContainer.attributes.metadata;\n        fetched_metadata.contains_file_or_folder =\n            typeof this.collection.findWhere({ type: \"file\" }) !==\n                \"undefined\" ||\n            typeof this.collection.findWhere({ type: \"folder\" }) !==\n                \"undefined\";\n        Galaxy.libraries.folderToolbarView.configureElements(fetched_metadata);\n    },\n\n    /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n    renderAll: function() {\n        var that = this;\n        _.each(this.collection.models.reverse(), function(model) {\n            that.renderOne(model);\n        });\n        this.postRender();\n    },\n\n    /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n    renderOne: function(model) {\n        this.options.contains_file_or_folder = true;\n        //if (model.get('type') !== 'folder'){\n        // model.set('readable_size', this.size_to_string(model.get('file_size')));\n        //}\n        model.set(\"folder_id\", this.id);\n        var rowView = new mod_library_folderrow_view.FolderRowView({\n            model: model\n        });\n\n        // save new rowView to cache\n        this.rowViews[model.get(\"id\")] = rowView;\n\n        this.$el.find(\"#first_folder_item\").after(rowView.el);\n    },\n\n    /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n    removeOne: function(model) {\n        this.$el\n            .find(\"tr\")\n            .filter(function() {\n                return $(this).data(\"id\") && $(this).data(\"id\") === model.id;\n            })\n            .remove();\n    },\n\n    /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n    removeAllRows: function() {\n        $(\".library-row\").remove();\n    },\n\n    /** Checks whether the list is empty and adds/removes the message */\n    checkEmptiness: function() {\n        if (\n            this.$el.find(\".dataset_row\").length === 0 &&\n            this.$el.find(\".folder_row\").length === 0\n        ) {\n            this.$el.find(\".empty-folder-message\").show();\n        } else {\n            this.$el.find(\".empty-folder-message\").hide();\n        }\n    },\n\n    /** User clicked the table heading = he wants to sort stuff */\n    sortColumnClicked: function(event) {\n        event.preventDefault();\n        if (this.sort === \"asc\") {\n            this.sortFolder(\"name\", \"desc\");\n            this.sort = \"desc\";\n        } else {\n            this.sortFolder(\"name\", \"asc\");\n            this.sort = \"asc\";\n        }\n        this.renderSortIcon();\n    },\n\n    /**\n     *  Sorts the underlying collection according to the parameters received.\n     *  Currently supports only sorting by name.\n     */\n    sortFolder: function(sort_by, order) {\n        // default to asc sort by name\n        if (sort_by === \"undefined\" && order === \"undefined\") {\n            return this.collection.sortByNameAsc();\n        }\n        if (sort_by === \"name\") {\n            if (order === \"asc\") {\n                return this.collection.sortByNameAsc();\n            } else if (order === \"desc\") {\n                return this.collection.sortByNameDesc();\n            }\n        }\n    },\n\n    /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n    selectAll: function(event) {\n        var selected = event.target.checked;\n        that = this;\n        // Iterate each checkbox\n        $(\":checkbox\", \"#folder_list_body\").each(function() {\n            this.checked = selected;\n            var $row = $(this).closest(\"tr\");\n            // Change color of selected/unselected\n            if (selected) {\n                that.makeDarkRow($row);\n            } else {\n                that.makeWhiteRow($row);\n            }\n        });\n    },\n\n    /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n    selectClickedRow: function(event) {\n        var checkbox = \"\";\n        var $row;\n        var source;\n        $row = $(event.target).closest(\"tr\");\n        if (event.target.localName === \"input\") {\n            checkbox = event.target;\n            source = \"input\";\n        } else if (event.target.localName === \"td\") {\n            checkbox = $row.find(\":checkbox\")[0];\n            source = \"td\";\n        }\n        if (checkbox.checked) {\n            if (source === \"td\") {\n                checkbox.checked = \"\";\n                this.makeWhiteRow($row);\n            } else if (source === \"input\") {\n                this.makeDarkRow($row);\n            }\n        } else {\n            if (source === \"td\") {\n                checkbox.checked = \"selected\";\n                this.makeDarkRow($row);\n            } else if (source === \"input\") {\n                this.makeWhiteRow($row);\n            }\n        }\n    },\n\n    makeDarkRow: function($row) {\n        $row.removeClass(\"light\").addClass(\"dark\");\n        $row\n            .find(\"a\")\n            .removeClass(\"light\")\n            .addClass(\"dark\");\n        $row\n            .find(\".fa-file-o\")\n            .removeClass(\"fa-file-o\")\n            .addClass(\"fa-file\");\n        $row\n            .find(\".fa-folder-o\")\n            .removeClass(\"fa-folder-o\")\n            .addClass(\"fa-folder\");\n    },\n\n    makeWhiteRow: function($row) {\n        $row.removeClass(\"dark\").addClass(\"light\");\n        $row\n            .find(\"a\")\n            .removeClass(\"dark\")\n            .addClass(\"light\");\n        $row\n            .find(\".fa-file\")\n            .removeClass(\"fa-file\")\n            .addClass(\"fa-file-o\");\n        $row\n            .find(\".fa-folder\")\n            .removeClass(\"fa-folder\")\n            .addClass(\"fa-folder-o\");\n    },\n\n    renderSortIcon: function() {\n        if (this.sort === \"asc\") {\n            $(\".sort-icon\")\n                .removeClass(\"fa-sort-alpha-desc\")\n                .addClass(\"fa-sort-alpha-asc\");\n        } else {\n            $(\".sort-icon\")\n                .removeClass(\"fa-sort-alpha-asc\")\n                .addClass(\"fa-sort-alpha-desc\");\n        }\n    },\n\n    templateFolder: function() {\n        return _.template(\n            [\n                // BREADCRUMBS\n                '<ol class=\"breadcrumb\">',\n                '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n                \"<% _.each(path, function(path_item) { %>\",\n                \"<% if (path_item[0] != id) { %>\",\n                '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n                \"<% } else { %>\",\n                '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ol>\",\n\n                // FOLDER CONTENT\n                '<table data-library-id=\"<%- parent_library_id  %>\" class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th class=\"button_heading\"></th>',\n                '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n                '<th><a class=\"sort-folder-link\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon fa fa-sort-alpha-<%- order %>\"></span></th>',\n                '<th style=\"width:25%;\">description</th>',\n                '<th style=\"width:5%;\">data type</th>',\n                '<th style=\"width:10%;\">size</th>',\n                '<th style=\"width:160px;\">time updated (UTC)</th>',\n                '<th style=\"width:10%;\"></th> ',\n                \"</thead>\",\n                '<tbody id=\"folder_list_body\">',\n                '<tr id=\"first_folder_item\">',\n                \"<td>\",\n                '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n                \"</td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<div class=\"empty-folder-message\" style=\"display:none;\">',\n                \"This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up\",\n                ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>',\n                ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderListView: FolderListView\n};\n"]}