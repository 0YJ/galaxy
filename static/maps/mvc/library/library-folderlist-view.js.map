{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["FolderListView","Backbone","View","extend","el","progress","progressStep","folderContainer","current_sort_order","current_sort_key","events","click #select-all-checkboxes","click .dataset_row","click .folder_row","click .sort-folder-name","click .sort-folder-file_ext","collection","defaults","page_count","initialize","options","this","_","modal","rowViews","_libraryModel2","default","Folder","include_deleted","renderOne","removeOne","show_page","rePaint","listenTo","fetchFolder","self","FolderContainer","id","url","urlRoot","fetch","success","folder_container","render","error","response","responseJSON","Galaxy","libraries","library_router","back","onclick","template","templateFolder","$","hide","upper_folder_id","path","attributes","metadata","full_path","length","$el","parent_library_id","order","findWhere","dataset_id","row","showDatasetDetails","paginate","tooltip","get","models","total_items_count","page_start","preferences","items_to_render","items_shown","checkEmptiness","folderToolbarView","renderPaginator","addAll","reset","removeAllRows","postRender","model","fetched_metadata","add","contains_file_or_folder","type","configureElements","each","reverse","set","rowView","_libraryFolderrowView2","FolderRowView","remove","find","after","sortColumnClicked","event","preventDefault","data","checked","show","makeDarkRow","currentTarget","className","replace","checkbox","$row","source","renderSortIcon","selectAll","selected","closest","makeWhiteRow","target","addClass","removeClass","localName","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["import mod_masthead from \"layout/masthead\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_library_folderrow_view from \"mvc/library/library-folderrow-view\";\nimport mod_library_dataset_view from \"mvc/library/library-dataset-view\";\nvar FolderListView = Backbone.View.extend({\n    el: \"#folder_items_element\",\n    // progress percentage\n    progress: 0,\n    // progress rate per one item\n    progressStep: 1,\n\n    folderContainer: null,\n\n    current_sort_order: \"asc\",\n\n    current_sort_key: \"name\",\n\n    events: {\n        \"click #select-all-checkboxes\": \"selectAll\",\n        \"click .dataset_row\": \"selectClickedRow\",\n        \"click .folder_row\": \"selectClickedRow\",\n        \"click .sort-folder-name\": \"sortColumnClicked\",\n        \"click .sort-folder-file_ext\": \"sortColumnClicked\",\n        \"click .sort-folder-description\": \"sortColumnClicked\",\n        \"click .sort-folder-state\": \"sortColumnClicked\"\n    },\n\n    collection: null,\n\n    defaults: {\n        include_deleted: false,\n        page_count: null,\n        show_page: null\n    },\n\n    /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n    initialize: function(options) {\n        this.options = _.defaults(this.options || {}, this.defaults, options);\n        this.modal = null;\n        // map of folder item ids to item views = cache\n        this.rowViews = {};\n\n        // create a collection of folder items for this view\n        this.collection = new mod_library_model.Folder();\n\n        // start to listen if someone modifies the collection\n        this.listenTo(this.collection, \"add\", this.renderOne);\n        this.listenTo(this.collection, \"remove\", this.removeOne);\n        this.listenTo(this.collection, \"sort\", this.rePaint);\n        this.listenTo(this.collection, \"reset\", this.rePaint);\n\n        this.fetchFolder();\n    },\n\n    fetchFolder: function(options) {\n        var options = options || {};\n        this.options.include_deleted = options.include_deleted;\n        var self = this;\n\n        this.folderContainer = new mod_library_model.FolderContainer({\n            id: this.options.id\n        });\n        this.folderContainer.url = `${this.folderContainer.attributes.urlRoot +\n            this.options.id}/contents`;\n\n        if (this.options.include_deleted) {\n            this.folderContainer.url = `${this.folderContainer\n                .url}?include_deleted=true`;\n        }\n        this.folderContainer.fetch({\n            success: function(folder_container) {\n                self.folder_container = folder_container;\n                self.render();\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(\n                        `${response.responseJSON\n                            .err_msg} Click this to go back.`,\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                } else {\n                    mod_toastr.error(\n                        \"An error occurred. Click this to go back.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        }\n                    );\n                }\n            }\n        });\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var template = this.templateFolder();\n        $(\".tooltip\").hide();\n\n        // find the upper id in the full path\n        var path = this.folderContainer.attributes.metadata.full_path;\n        var upper_folder_id;\n        if (path.length === 1) {\n            // the library is above us\n            upper_folder_id = 0;\n        } else {\n            upper_folder_id = path[path.length - 2][0];\n        }\n\n        this.$el.html(\n            template({\n                path: this.folderContainer.attributes.metadata.full_path,\n                parent_library_id: this.folderContainer.attributes.metadata\n                    .parent_library_id,\n                id: this.options.id,\n                upper_folder_id: upper_folder_id,\n                order: this.current_sort_order\n            })\n        );\n\n        // when dataset_id is present render its details too\n        if (this.options.dataset_id) {\n            var row = _.findWhere(self.rowViews, {\n                id: this.options.dataset_id\n            });\n            if (row) {\n                row.showDatasetDetails();\n            } else {\n                mod_toastr.error(\n                    \"Requested dataset not found. Showing folder instead.\"\n                );\n            }\n        } else {\n            if (this.options.show_page === null || this.options.show_page < 1) {\n                this.options.show_page = 1;\n            }\n            this.paginate();\n        }\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    paginate: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.show_page === null || this.options.show_page < 1) {\n            this.options.show_page = 1;\n        }\n        this.options.total_items_count = this.folder_container.get(\n            \"folder\"\n        ).models.length;\n        this.options.page_count = Math.ceil(\n            this.options.total_items_count /\n                Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        var page_start =\n            Galaxy.libraries.preferences.get(\"folder_page_size\") *\n            (this.options.show_page - 1);\n        var items_to_render = null;\n        items_to_render = this.folder_container\n            .get(\"folder\")\n            .models.slice(\n                page_start,\n                page_start +\n                    Galaxy.libraries.preferences.get(\"folder_page_size\")\n            );\n        this.options.items_shown = items_to_render.length;\n        // User requests page with no items\n        if (\n            Galaxy.libraries.preferences.get(\"folder_page_size\") *\n                this.options.show_page >\n            this.options.total_items_count +\n                Galaxy.libraries.preferences.get(\"folder_page_size\")\n        ) {\n            items_to_render = [];\n        }\n        Galaxy.libraries.folderToolbarView.renderPaginator(this.options);\n        this.collection.reset(items_to_render);\n    },\n\n    rePaint: function(options) {\n        this.options = _.extend(this.options, options);\n        this.removeAllRows();\n        this.renderAll();\n        this.checkEmptiness();\n    },\n\n    /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n    addAll: function(models) {\n        _.each(models, model => {\n            Galaxy.libraries.folderListView.collection.add(model, {\n                current_sort_order: false\n            });\n        });\n        $(\"#center [data-toggle]\").tooltip();\n        this.checkEmptiness();\n        this.postRender();\n    },\n\n    /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n    postRender: function() {\n        var fetched_metadata = this.folderContainer.attributes.metadata;\n        fetched_metadata.contains_file_or_folder =\n            typeof this.collection.findWhere({ type: \"file\" }) !==\n                \"undefined\" ||\n            typeof this.collection.findWhere({ type: \"folder\" }) !==\n                \"undefined\";\n        Galaxy.libraries.folderToolbarView.configureElements(fetched_metadata);\n    },\n\n    /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n    renderAll: function() {\n        var self = this;\n        _.each(this.collection.models.reverse(), model => {\n            self.renderOne(model);\n        });\n        this.postRender();\n    },\n\n    /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n    renderOne: function(model) {\n        this.options.contains_file_or_folder = true;\n        //if (model.get('type') !== 'folder'){\n        // model.set('readable_size', this.size_to_string(model.get('file_size')));\n        //}\n        model.set(\"folder_id\", this.id);\n        var rowView = new mod_library_folderrow_view.FolderRowView({\n            model: model\n        });\n\n        // save new rowView to cache\n        this.rowViews[model.get(\"id\")] = rowView;\n\n        this.$el.find(\"#first_folder_item\").after(rowView.el);\n    },\n\n    /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n    removeOne: function(model) {\n        this.$el\n            .find(\"tr\")\n            .filter(function() {\n                return $(this).data(\"id\") && $(this).data(\"id\") === model.id;\n            })\n            .remove();\n    },\n\n    /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n    removeAllRows: function() {\n        $(\".library-row\").remove();\n    },\n\n    /** Checks whether the list is empty and adds/removes the message */\n    checkEmptiness: function() {\n        if (\n            this.$el.find(\".dataset_row\").length === 0 &&\n            this.$el.find(\".folder_row\").length === 0\n        ) {\n            this.$el.find(\".empty-folder-message\").show();\n        } else {\n            this.$el.find(\".empty-folder-message\").hide();\n        }\n    },\n\n    sortColumnClicked: function(event) {\n        event.preventDefault();\n        this.current_sort_order =\n            this.current_sort_order === \"asc\" ? \"desc\" : \"asc\";\n        this.current_sort_key = event.currentTarget.className.replace(\n            \"sort-folder-\",\n            \"\"\n        );\n        this.collection.sortFolder(\n            this.current_sort_key,\n            this.current_sort_order\n        );\n        this.renderSortIcon();\n    },\n\n    /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n    selectAll: function(event) {\n        var selected = event.target.checked;\n        var self = this;\n        // Iterate each checkbox\n        $(\":checkbox\", \"#folder_list_body\").each(function() {\n            this.checked = selected;\n            var $row = $(this).closest(\"tr\");\n            // Change color of selected/unselected\n            if (selected) {\n                self.makeDarkRow($row);\n            } else {\n                self.makeWhiteRow($row);\n            }\n        });\n    },\n\n    /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n    selectClickedRow: function(event) {\n        var checkbox = \"\";\n        var $row;\n        var source;\n        $row = $(event.target).closest(\"tr\");\n        if (event.target.localName === \"input\") {\n            checkbox = event.target;\n            source = \"input\";\n        } else if (event.target.localName === \"td\") {\n            checkbox = $row.find(\":checkbox\")[0];\n            source = \"td\";\n        }\n        if (checkbox.checked) {\n            if (source === \"td\") {\n                checkbox.checked = \"\";\n                this.makeWhiteRow($row);\n            } else if (source === \"input\") {\n                this.makeDarkRow($row);\n            }\n        } else {\n            if (source === \"td\") {\n                checkbox.checked = \"selected\";\n                this.makeDarkRow($row);\n            } else if (source === \"input\") {\n                this.makeWhiteRow($row);\n            }\n        }\n    },\n\n    makeDarkRow: function($row) {\n        $row.removeClass(\"light\").addClass(\"dark\");\n        $row\n            .find(\"a\")\n            .removeClass(\"light\")\n            .addClass(\"dark\");\n        $row\n            .find(\".fa-file-o\")\n            .removeClass(\"fa-file-o\")\n            .addClass(\"fa-file\");\n        $row\n            .find(\".fa-folder-o\")\n            .removeClass(\"fa-folder-o\")\n            .addClass(\"fa-folder\");\n    },\n\n    makeWhiteRow: function($row) {\n        $row.removeClass(\"dark\").addClass(\"light\");\n        $row\n            .find(\"a\")\n            .removeClass(\"dark\")\n            .addClass(\"light\");\n        $row\n            .find(\".fa-file\")\n            .removeClass(\"fa-file\")\n            .addClass(\"fa-file-o\");\n        $row\n            .find(\".fa-folder\")\n            .removeClass(\"fa-folder\")\n            .addClass(\"fa-folder-o\");\n    },\n\n    renderSortIcon: function() {\n        if (this.current_sort_order === \"asc\") {\n            $('[class*=\"sort-icon\"]')\n                .removeClass(\"fa-sort-alpha-desc\")\n                .removeClass(\"fa-sort-alpha-asc\");\n            $(`.sort-icon-${this.current_sort_key}`).addClass(\n                \"fa-sort-alpha-asc\"\n            );\n        } else {\n            $(`.sort-icon-${this.current_sort_key}`).addClass(\n                \"fa-sort-alpha-desc\"\n            );\n        }\n    },\n\n    templateFolder: function() {\n        return _.template(\n            [\n                // BREADCRUMBS\n                '<ol class=\"breadcrumb\">',\n                '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n                \"<% _.each(path, function(path_item) { %>\",\n                \"<% if (path_item[0] != id) { %>\",\n                '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n                \"<% } else { %>\",\n                '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ol>\",\n\n                // FOLDER CONTENT\n                '<table data-library-id=\"<%- parent_library_id  %>\" class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th class=\"button_heading\"></th>',\n                '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n                '<th><a class=\"sort-folder-name\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-name fa fa-sort-alpha-<%- order %>\"></span></th>',\n                '<th style=\"width:20%;\"><a class=\"sort-folder-description\" title=\"Click to reverse order\" href=\"#\">description</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-description fa\"></span></th>',\n                '<th style=\"width:5%;\"><a class=\"sort-folder-file_ext\" title=\"Click to reverse order\" href=\"#\">data type</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-file_ext fa\"></span></th>',\n                '<th style=\"width:10%;\">size</th>',\n                '<th style=\"width:160px;\">time updated (UTC)</th>',\n                '<th style=\"width:5%;\"><a class=\"sort-folder-state\" title=\"Click to reverse order\" href=\"#\">state</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-state fa\"></span></th>',\n                '<th style=\"width:150px;\"></th> ',\n                \"</thead>\",\n                '<tbody id=\"folder_list_body\">',\n                '<tr id=\"first_folder_item\">',\n                \"<td>\",\n                '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n                \"</td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<div class=\"empty-folder-message\" style=\"display:none;\">',\n                \"This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up\",\n                ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>',\n                ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderListView: FolderListView\n};\n"]}