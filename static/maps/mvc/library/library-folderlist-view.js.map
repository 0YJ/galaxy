{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["define","el","mod_masthead","progressStep","mod_toastr","folderContainer","mod_library_folderrow_view","sort","FolderListView","Backbone","View","extend","progress","include_deleted","show_page","click #select-all-checkboxes","click .dataset_row","click .folder_row","click .sort-folder-link","initialize","defaults","page_count","rowViews","listenTo","options","this","collection","rePaint","modal","Folder","renderOne","mod_library_model","fetchFolder","success","that","response","FolderContainer","id","error","responseJSON","err_msg","url","Galaxy","folder_container","render","model","onclick","libraries","library_router","back","template","templateFolder","length","_","upper_folder_id","$","hide","path","attributes","metadata","full_path","parent_library_id","$el","html","dataset_id","row","findWhere","showDatasetDetails","paginate","page_start","preferences","items_to_render","get","slice","items_shown","Math","ceil","total_items_count","folderToolbarView","reset","models","renderAll","renderPaginator","checkEmptiness","removeAllRows","addAll","each","folderListView","add","tooltip","postRender","fetched_metadata","contains_file_or_folder","type","configureElements","reverse","set","rowView","FolderRowView","removeOne","after","find","filter","data","remove","sortColumnClicked","show","event","preventDefault","renderSortIcon","sortFolder","sort_by","sortByNameDesc","sortByNameAsc","order","selectAll","selected","target","checked","$row","parentElement","makeDarkRow","makeWhiteRow","source","checkbox","localName","removeClass","addClass","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["define([\n    \"layout/masthead\",\n    \"utils/utils\",\n    \"libs/toastr\",\n    \"mvc/library/library-model\",\n    \"mvc/library/library-folderrow-view\",\n    \"mvc/library/library-dataset-view\"\n    ],\nfunction(mod_masthead,\n         mod_utils,\n         mod_toastr,\n         mod_library_model,\n         mod_library_folderrow_view,\n         mod_library_dataset_view\n         ) {\n\nvar FolderListView = Backbone.View.extend({\n    el : '#folder_items_element',\n    // progress percentage\n    progress: 0,\n    // progress rate per one item\n    progressStep: 1,\n\n    folderContainer: null,\n\n    sort: 'asc',\n\n    events: {\n        'click #select-all-checkboxes'  : 'selectAll',\n        'click .dataset_row'            : 'selectClickedRow',\n        'click .folder_row'             : 'selectClickedRow',\n        'click .sort-folder-link'       : 'sortColumnClicked'\n    },\n\n    collection: null,\n\n    defaults: {\n        include_deleted: false,\n        page_count: null,\n        show_page: null\n    },\n\n    /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n    initialize : function( options ){\n        this.options = _.defaults( this.options || {}, this.defaults, options );\n        this.modal = null;\n        // map of folder item ids to item views = cache\n        this.rowViews = {};\n\n        // create a collection of folder items for this view\n        this.collection = new mod_library_model.Folder();\n\n        // start to listen if someone modifies the collection\n        this.listenTo( this.collection, 'add', this.renderOne );\n        this.listenTo( this.collection, 'remove', this.removeOne );\n        this.listenTo( this.collection, 'sort', this.rePaint );\n        this.listenTo( this.collection, 'reset', this.rePaint );\n\n        this.fetchFolder();\n    },\n\n    fetchFolder: function( options ){\n        var options = options || {};\n        this.options.include_deleted = options.include_deleted;\n        var that = this;\n\n        this.folderContainer = new mod_library_model.FolderContainer( { id: this.options.id } );\n        this.folderContainer.url = this.folderContainer.attributes.urlRoot + this.options.id + '/contents';\n\n        if ( this.options.include_deleted ){\n            this.folderContainer.url = this.folderContainer.url + '?include_deleted=true';\n        }\n        this.folderContainer.fetch({\n            success: function( folder_container ) {\n              that.folder_container = folder_container;\n              that.render();\n            },\n            error: function( model, response ){\n              if ( typeof response.responseJSON !== \"undefined\" ){\n                mod_toastr.error( response.responseJSON.err_msg + ' Click this to go back.', '', { onclick: function() { Galaxy.libraries.library_router.back(); } } );\n              } else {\n                mod_toastr.error( 'An error ocurred. Click this to go back.', '', { onclick: function() { Galaxy.libraries.library_router.back(); } } );\n              }\n            }\n        });\n    },\n\n    render: function( options ){\n        this.options = _.extend( this.options, options );\n        var template = this.templateFolder();\n        $(\".tooltip\").hide();\n\n        // find the upper id in the full path\n        var path = this.folderContainer.attributes.metadata.full_path;\n        var upper_folder_id;\n        if ( path.length === 1 ){ // the library is above us\n          upper_folder_id = 0;\n        } else {\n          upper_folder_id = path[ path.length-2 ][ 0 ];\n        }\n\n        this.$el.html( template( {\n            path: this.folderContainer.attributes.metadata.full_path,\n            parent_library_id: this.folderContainer.attributes.metadata.parent_library_id,\n            id: this.options.id,\n            upper_folder_id: upper_folder_id,\n            order: this.sort\n        } ) );\n\n        // when dataset_id is present render its details too\n        if ( this.options.dataset_id ){\n            row = _.findWhere( that.rowViews, { id: this.options.dataset_id } );\n            if ( row ) {\n              row.showDatasetDetails();\n            } else {\n              mod_toastr.error( 'Requested dataset not found. Showing folder instead.' );\n            }\n        } else {\n            if ( this.options.show_page === null || this.options.show_page < 1 ){\n                this.options.show_page = 1;\n            }\n            this.paginate();\n        }\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css('overflow','auto');\n    },\n\n    paginate: function( options ){\n        this.options = _.extend( this.options, options );\n\n        if ( this.options.show_page === null || this.options.show_page < 1 ){\n            this.options.show_page = 1;\n        }\n        this.options.total_items_count = this.folder_container.get( 'folder' ).models.length;\n        this.options.page_count = Math.ceil( this.options.total_items_count / Galaxy.libraries.preferences.get( 'folder_page_size' ) );\n        var page_start = ( Galaxy.libraries.preferences.get( 'folder_page_size' ) * ( this.options.show_page - 1 ) );\n        var items_to_render = null;\n        items_to_render = this.folder_container.get( 'folder' ).models.slice( page_start, page_start + Galaxy.libraries.preferences.get( 'folder_page_size' ) );\n        this.options.items_shown = items_to_render.length;\n        // User requests page with no items\n        if ( Galaxy.libraries.preferences.get( 'folder_page_size' ) * this.options.show_page > ( this.options.total_items_count + Galaxy.libraries.preferences.get( 'folder_page_size' ) ) ){\n            items_to_render = [];\n        }\n        Galaxy.libraries.folderToolbarView.renderPaginator( this.options );\n        this.collection.reset( items_to_render );\n    },\n\n    rePaint: function( options ){\n        this.options = _.extend( this.options, options );\n        this.removeAllRows();\n        this.renderAll();\n        this.checkEmptiness();\n    },\n\n    /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n    addAll: function( models ){\n        _.each(models, function( model ) {\n            Galaxy.libraries.folderListView.collection.add( model, { sort: false } );\n        });\n        $( \"#center [data-toggle]\" ).tooltip();\n        this.checkEmptiness();\n        this.postRender();\n    },\n\n    /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n    postRender: function(){\n        var fetched_metadata = this.folderContainer.attributes.metadata;\n        fetched_metadata.contains_file_or_folder = typeof this.collection.findWhere({type: 'file'}) !== 'undefined' || typeof this.collection.findWhere({type: 'folder'}) !== 'undefined';\n        Galaxy.libraries.folderToolbarView.configureElements(fetched_metadata);\n    },\n\n    /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n    renderAll: function(){\n        var that = this;\n        _.each( this.collection.models.reverse(), function( model ) {\n          that.renderOne( model );\n        });\n        this.postRender();\n    },\n\n    /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n    renderOne: function(model){\n        this.options.contains_file_or_folder = true;\n        //if (model.get('type') !== 'folder'){\n            // model.set('readable_size', this.size_to_string(model.get('file_size')));\n        //}\n        model.set('folder_id', this.id);\n        var rowView = new mod_library_folderrow_view.FolderRowView({model: model});\n\n        // save new rowView to cache\n        this.rowViews[model.get('id')] = rowView;\n\n        this.$el.find('#first_folder_item').after(rowView.el);\n    },\n\n    /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n    removeOne: function( model ){\n       this.$el.find('tr').filter(function(){\n           return $(this).data('id') && $(this).data('id') === model.id;\n       }).remove();\n    },\n\n    /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n    removeAllRows: function(){\n        $('.library-row').remove();\n    },\n\n    /** Checks whether the list is empty and adds/removes the message */\n    checkEmptiness : function(){\n        if ((this.$el.find('.dataset_row').length === 0) && (this.$el.find('.folder_row').length === 0)){\n          this.$el.find('.empty-folder-message').show();\n        } else {\n          this.$el.find('.empty-folder-message').hide();\n        }\n    },\n\n    /** User clicked the table heading = he wants to sort stuff */\n    sortColumnClicked : function(event){\n        event.preventDefault();\n        if (this.sort === 'asc'){\n            this.sortFolder('name','desc');\n            this.sort = 'desc';\n        } else {\n            this.sortFolder('name','asc');\n            this.sort = 'asc';\n        }\n        this.renderSortIcon();\n    },\n\n    /**\n     *  Sorts the underlying collection according to the parameters received.\n     *  Currently supports only sorting by name.\n     */\n    sortFolder: function(sort_by, order){\n        // default to asc sort by name\n        if (sort_by === 'undefined' && order === 'undefined'){\n            return this.collection.sortByNameAsc();\n        }\n        if (sort_by === 'name'){\n            if (order === 'asc'){\n                return this.collection.sortByNameAsc();\n            } else if (order === 'desc'){\n                return this.collection.sortByNameDesc();\n            }\n        }\n    },\n\n    /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n    selectAll : function (event) {\n         var selected = event.target.checked;\n         that = this;\n         // Iterate each checkbox\n         $(':checkbox', '#folder_list_body').each(function() {\n            this.checked = selected;\n            $row = $(this.parentElement.parentElement);\n            // Change color of selected/unselected\n            if (selected) {\n              that.makeDarkRow($row);\n            } else {\n              that.makeWhiteRow($row);\n            }\n        });\n     },\n\n    /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n    selectClickedRow : function (event) {\n        var checkbox = '';\n        var $row;\n        var source;\n        if (event.target.localName === 'input'){\n            checkbox = event.target;\n            $row = $(event.target.parentElement.parentElement);\n            source = 'input';\n        } else if (event.target.localName === 'td') {\n            $row = $(event.target.parentElement);\n            checkbox = $row.find(':checkbox')[0];\n            source = 'td';\n        }\n        if (checkbox.checked){\n            if (source==='td'){\n                checkbox.checked = '';\n                this.makeWhiteRow($row);\n            } else if (source==='input') {\n                this.makeDarkRow($row);\n            }\n        } else {\n            if (source==='td'){\n                checkbox.checked = 'selected';\n                this.makeDarkRow($row);\n            } else if (source==='input') {\n                this.makeWhiteRow($row);\n            }\n        }\n    },\n\n    makeDarkRow: function($row){\n        $row.removeClass('light').addClass('dark');\n        $row.find('a').removeClass('light').addClass('dark');\n        $row.find('.fa-file-o').removeClass('fa-file-o').addClass('fa-file');\n        $row.find('.fa-folder-o').removeClass('fa-folder-o').addClass('fa-folder');\n    },\n\n    makeWhiteRow: function($row){\n        $row.removeClass('dark').addClass('light');\n        $row.find('a').removeClass('dark').addClass('light');\n        $row.find('.fa-file').removeClass('fa-file').addClass('fa-file-o');\n        $row.find('.fa-folder').removeClass('fa-folder').addClass('fa-folder-o');\n    },\n\n    renderSortIcon: function(){\n        if (this.sort === 'asc'){\n            $('.sort-icon').removeClass('fa-sort-alpha-desc').addClass('fa-sort-alpha-asc');\n        } else {\n            $('.sort-icon').removeClass('fa-sort-alpha-asc').addClass('fa-sort-alpha-desc');\n        }\n    },\n\n    templateFolder : function (){\n      return _.template([\n      // BREADCRUMBS\n      '<ol class=\"breadcrumb\">',\n        '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n        '<% _.each(path, function(path_item) { %>',\n          '<% if (path_item[0] != id) { %>',\n            '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n          '<% } else { %>',\n            '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n          '<% } %>',\n        '<% }); %>',\n      '</ol>',\n\n      // FOLDER CONTENT\n      '<table data-library-id=\"<%- parent_library_id  %>\" id=\"folder_table\" class=\"grid table table-condensed\">',\n        '<thead>',\n          '<th class=\"button_heading\"></th>',\n          '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n          '<th><a class=\"sort-folder-link\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon fa fa-sort-alpha-<%- order %>\"></span></th>',\n          '<th style=\"width:25%;\">description</th>',\n          '<th style=\"width:5%;\">data type</th>',\n          '<th style=\"width:10%;\">size</th>',\n          '<th style=\"width:160px;\">time updated (UTC)</th>',\n          '<th style=\"width:10%;\"></th> ',\n        '</thead>',\n        '<tbody id=\"folder_list_body\">',\n          '<tr id=\"first_folder_item\">',\n          '<td>',\n            '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n          '</td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '<td></td>',\n          '</tr>',\n        '</tbody>',\n      '</table>',\n      '<div class=\"empty-folder-message\" style=\"display:none;\">',\n          'This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up',\n          ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>',\n          ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n      '</div>'\n      ].join(''));\n    }\n\n});\n\nreturn {\n    FolderListView: FolderListView\n};\n\n});\n"]}