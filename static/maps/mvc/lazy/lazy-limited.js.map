{"version":3,"sources":["mvc/lazy/lazy-limited.js"],"names":["define","Backbone","View","extend","initialize","options","this","self","collection","$container","new_content","max","addClass","append","content_list","$message","_reset","_refresh","listenTo","_done","done","_","size","each","content","remove","hide","_remove","model","model_id","id","i","models","view"],"mappings":"aACAA,UAAW,WADX,OAAAC,SAAAC,KAAAC,QACOC,WAAI,SAAWC,GAEdD,KAAAA,WAAYC,EAAUA,WAClBC,KAAIC,WAAJF,EAAAG,WACAF,KAAKG,YAAeJ,EAAQI,YAC5BH,KAAKE,IAAeH,EAAQG,KAAAA,GAC5BF,KAAKI,gBACLJ,KAAKK,SAAuBA,EAAR,UAApBC,SAAA,kBAAAC,OAAA,qBAAAP,KAAAK,IAAA,yBACAL,KAAKQ,WAAAA,OAALR,KAAAS,UACAT,KAAKS,SAALT,KAAuBE,WAAWI,QAAUN,KAAAU,OAAxBV,MACpBA,KAAKG,SAALH,KAAgBO,WAAaE,MAA7BT,KAAAW,SAAAX,MACAA,KAAKY,SAAUZ,KAAKE,WAAY,SAASF,KAAKU,QAAQV,OAM1Da,MAAO,WADP,IAAAC,EAAAC,EAAAC,KAAAhB,KAAAQ,cAAAR,KAAAK,IAEI,OADJQ,KAAOJ,SAAAK,EAAW,OAAA,UACVA,GAMRJ,OAAQ,WADRK,EAAAE,KAAAjB,KAAAQ,aAAA,SAAAU,GACQA,EAAAC,WAEAD,KAAAA,gBACHlB,KAFDS,SAAAW,QAQJC,QAAS,SAAUC,GADnB,IAAAC,EAAAD,EAAAE,GACAH,EAASrB,KAAAQ,aAAkBe,GACnBA,IACAL,EAAAA,gBACJlB,KAAeQ,aAAAe,IAEXvB,KAAAW,YAMRA,SAAU,WADV,IAAAX,KAAAa,QACAF,IAAU,IAAAc,KAAAzB,KAAAE,WAAWwB,OAAA,CACX,IAAKb,EAAUb,KAAAE,WAAAwB,OAAAD,GACFzB,KAAKE,aAAWwB,EAASF,IACpC,IAAIF,KAAAA,aAAapB,EAAWwB,IAA5B,CACIC,IAAAA,EAAYnB,KAAAA,YAAoBgB,GAEhC,GADCxB,KAACQ,aAAmBc,EAAME,IAAON,EAC9BA,KAAAA,QACJ","file":"../../../scripts/mvc/lazy/lazy-limited.js","sourcesContent":["/** Contains helpers to limit/lazy load views for backbone views */\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.$container   = options.$container;\n            this.collection   = options.collection;\n            this.new_content  = options.new_content;\n            this.max          = options.max || 50;\n            this.content_list = {}\n            this.$message     = $( '<div/>' ).addClass( 'ui-limitloader' ).append( '...only the first ' + this.max + ' entries are visible.' );\n            this.$container.append( this.$message );\n            this.listenTo( this.collection, 'reset', this._reset, this );\n            this.listenTo( this.collection, 'add', this._refresh, this );\n            this.listenTo( this.collection, 'remove', this._remove, this );\n        },\n\n        /** Checks if the limit has been reached */\n        _done: function() {\n            var done = _.size( this.content_list ) > this.max;\n            this.$message[ done ? 'show' : 'hide' ]();\n            return done;\n        },\n\n        /** Remove all content */\n        _reset: function() {\n            _.each( this.content_list, function( content ) {\n                content.remove();\n            });\n            this.content_list = {};\n            this.$message.hide();\n        },\n\n        /** Remove content */\n        _remove: function( model ) {\n            var model_id = model.id;\n            var content = this.content_list[ model_id ];\n            if ( content ) {\n                content.remove();\n                delete this.content_list[ model_id ];\n            }\n            this._refresh();\n        },\n\n        /** Refreshes container content by adding new views if visible */\n        _refresh: function() {\n            if ( !this._done() ) {\n                for ( var i in this.collection.models ) {\n                    var model = this.collection.models[ i ];\n                    var view = this.content_list[ model.id ];\n                    if ( !this.content_list[ model.id ] ) {\n                        var content = this.new_content( model );\n                        this.content_list[ model.id ] = content;\n                        if ( this._done() ) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    });\n});"]}