{"version":3,"sources":["mvc/grid/grid-model.js"],"names":["Backbone","Model","extend","defaults","url_base","async","async_ops","categorical_filters","filters","sort_key","undefined","show_item_checkboxes","can_async_op","op","_","indexOf","this","attributes","add_filter","key","value","append","new_val","cur_val","values","push","remove_filter","condition","condition_index","get_url_data","url_data","sort","page","cur_page","advanced_search","item_ids","id","self","k","get_url","args","get","$","param"],"mappings":"oFAGeA,SAASC,MAAMC,QAC1BC,UAJJC,SAAA,GAMQC,OAAO,EAJfC,aAMQC,uBAJJJ,WACIC,SAAU,KACVC,sBAFM,EAGNC,iBAHM,EAINC,SAAAA,EACAC,UALM,EAMNC,eAAUC,EACVC,cAAAA,GAPMC,aADuB,SAAAC,GAoB7B,OAAqD,IAA9CC,EAAEC,QAAQC,KAAKC,WAAWX,UAAWO,IAC/CK,WArBgC,SAAAC,EAAAC,EAAAC,GAuBjC,GAAAA,EAAA,CAOQ,IAJIC,EAIAC,EAAUP,KAAKC,WAAWT,QAAQW,GAH1C,GAAA,OAAAI,QAAAb,IAAAa,EACIF,EAAQD,OACR,GAAA,iBAAAG,EACIA,GAAeN,OAAfM,GAAeN,GAAmBE,EAClCG,EADJF,MAEIG,CAEG,IAAIC,KACHD,EAAAA,GAAWA,EACXD,EAAAA,GAAUF,EADdE,EAEOE,OAKH,KADAA,EAAAA,GACAF,QAAAF,IACHE,EAAAG,KAAAL,GAGDE,KAAAA,WAAUC,QAAVJ,GAAAG,OAGCN,KAAAC,WAAAT,QAAAW,GAAAC,GAOZM,cAxDgC,SAAAP,EAAAQ,GA8D7B,IAAIJ,EAAUP,KAAKC,WAAWT,QAAQW,GAJ1C,GAAA,OAAAI,QAAAb,IAAAa,EAMQ,OAAO,EAFX,GAAmBN,iBAAfM,EAEAP,KAAAC,WAAAT,QAAAW,GAAA,OACH,CAEG,IAAAS,EAAmBd,EAAAC,QAAUQ,EAAAI,IAC7B,IAAAC,IACAL,EAAKN,GAA0B,MAQtCY,aA7EgC,WAmF7B,IAAIC,GAJRzB,MAAAW,KAAAC,WAAAZ,MAMQ0B,KAAMf,KAAKC,WAAWR,SACtBuB,KAAMhB,KAAKC,WAAWgB,SAJ9BJ,qBAAcb,KAAAC,WAAWN,qBACjBmB,gBAAWd,KAAAC,WAAAiB,iBAIXvB,KAAAA,WAAAA,YACAuB,EAAAA,UAAiBlB,KAAKC,WAAWiB,WAOjClB,KAAKC,WAAWkB,WAJpBL,EAAAM,GAAApB,KAAAC,WAAAkB,UAIA,IAAIE,EAAKpB,KAIT,OAHIa,EAAAA,KAAAA,EAAAA,MAAAO,EAAcpB,WAAKA,SAAWkB,SAA9BG,GACHR,EAAA,KAAAQ,EAAA,IAAAA,EAAA,KAEDR,GAICS,QAFD,SAAAC,GAGA,OAxG6BxB,KAAAyB,IAAA,YA+GzB,IAJRC,EAAAC,MAAA3B,KAAAa,gBACAU,IACIG,EAAAC,MACSF","file":"../../../scripts/mvc/grid/grid-model.js","sourcesContent":["// dependencies\n\n// grid model\nexport default Backbone.Model.extend({\n    defaults: {\n        url_base: \"\",\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Return true if operation can be done asynchronously.\n     */\n    can_async_op: function(op) {\n        return _.indexOf(this.attributes.async_ops, op) !== -1;\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function(key, value, append) {\n        // Update URL arg with new condition.\n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key],\n                new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } else if (typeof cur_val == \"string\") {\n                if (cur_val == \"All\" || cur_val == value) {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;\n                }\n            } else {\n                // Current value is an array.\n                new_val = cur_val;\n                if (new_val.indexOf(value) === -1) {\n                    new_val.push(value);\n                }\n            }\n            this.attributes.filters[key] = new_val;\n        } else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;\n        }\n\n        if (typeof cur_val === \"string\") {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = \"\";\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = \"\";\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), function(k) {\n            url_data[\"f-\" + k[0]] = k[1];\n        });\n        return url_data;\n    },\n\n    // Return URL for obtaining a new grid\n    get_url: function(args) {\n        return (\n            this.get(\"url_base\") +\n            \"?\" +\n            $.param(this.get_url_data()) +\n            \"&\" +\n            $.param(args)\n        );\n    }\n});\n"]}