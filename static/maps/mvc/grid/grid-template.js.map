{"version":3,"sources":["mvc/grid/grid-template.js"],"names":["grid","options","tmpl","embedded","this","grid_header","grid_table","info_text","show_popup","title","global_actions","length","i","action","target","url_args","label","insert","grid_filters","href","header","items","num_rows_rendered","items_length","column","columns","key","item","encoded_id","popupmenu_id","extra","nowrap","link","column_settings","id","encode_id","cls","current_item_id","show_item_checkboxes","j","visible","column_config","value","num_pages","use_paging","replace","page_link_range","min_page","cur_page_num","min_offset","max_range","max_page","operations","max_offset","label_id_prefix","page_index","footer","num_page_links","allow_multiple","found_global","filters","advanced_search","advanced_search_display","show_advanced_search_link","column_key","f_key","d_key","standard_search_display","operation","global_operation","grid_column_filter","column_label","filterable","legend","filter_value","message","column_filter","status","_","escape","default_filter_dict","filter","params","toLowerCase","cf_key","cf_arg","cf","seperator","is_text","url","temp_column","JSON","stringify","type","jQuery","filter_element","slice","size","cf_label","categorical_filters","filter_key","_utils2","default","sanitize"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-template.js","sourcesContent":["// dependencies\nimport Utils from \"utils/utils\";\n// grid view templates\nexport default {\n    // template\n    grid: function(options) {\n        var tmpl = \"\";\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl =\n                '<div class=\"loading-elt-overlay\"></div>' +\n                \"<table>\" +\n                \"<tr>\" +\n                '<td width=\"75%\">' +\n                this.grid_header(options) +\n                \"</td>\" +\n                \"<td></td>\" +\n                \"<td></td>\" +\n                \"</tr>\" +\n                \"<tr>\" +\n                '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' +\n                \"<td></td>\" +\n                \"<td></td>\" +\n                \"</tr>\" +\n                \"</table>\" +\n                this.grid_table(options);\n        }\n\n        // add info text\n        if (options.info_text) {\n            tmpl +=\n                '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' +\n                options.info_text +\n                \"</div>\";\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    grid_table: function(options) {\n        return (\n            '<form method=\"post\" onsubmit=\"return false;\">' +\n            '<table id=\"grid-table\" class=\"grid\">' +\n            '<thead id=\"grid-table-header\"></thead>' +\n            '<tbody id=\"grid-table-body\"></tbody>' +\n            '<tfoot id=\"grid-table-footer\"></tfoot>' +\n            \"</table>\" +\n            \"</form>\"\n        );\n    },\n\n    // template\n    grid_header: function(options) {\n        var tmpl = '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl += \"<h2>\" + options.title + \"</h2>\";\n        }\n        if (options.global_actions) {\n            tmpl += '<ul class=\"manage-table-actions\">';\n            var show_popup = options.global_actions.length >= 3;\n            if (show_popup) {\n                tmpl +=\n                    '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                    '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (var i in options.global_actions) {\n                var action = options.global_actions[i];\n                tmpl +=\n                    \"<li>\" +\n                    '<a class=\"action-button use-target\" target=\"' +\n                    action.target +\n                    '\" href=\"' +\n                    action.url_args +\n                    '\" onclick=\"return false;\" >' +\n                    action.label +\n                    \"</a>\" +\n                    \"</li>\";\n            }\n            if (show_popup) {\n                tmpl += \"</div>\";\n            }\n            tmpl += \"</ul>\";\n        }\n        if (options.insert) {\n            tmpl += options.insert;\n        }\n\n        // add grid filters\n        tmpl += this.grid_filters(options);\n        tmpl += \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        // start\n        var tmpl = \"<tr>\";\n\n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl += \"<th>\";\n            if (options.items.length > 0) {\n                tmpl +=\n                    '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                    '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl += \"</th>\";\n        }\n\n        // create header elements\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.visible) {\n                tmpl += '<th id=\"' + column.key + '-header\">';\n                if (column.href) {\n                    tmpl +=\n                        '<a href=\"' +\n                        column.href +\n                        '\" class=\"sort-link\" sort_key=\"' +\n                        column.key +\n                        '\">' +\n                        column.label +\n                        \"</a>\";\n                } else {\n                    tmpl += column.label;\n                }\n                tmpl +=\n                    '<span class=\"sort-arrow\">' +\n                    column.extra +\n                    \"</span>\" +\n                    \"</th>\";\n            }\n        }\n\n        // finalize\n        tmpl += \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = \"\";\n        var num_rows_rendered = 0;\n        var items_length = options.items.length;\n\n        // empty grid?\n        if (items_length == 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n            num_rows_rendered = 1;\n        }\n\n        // create rows\n        for (var i in options.items) {\n            // encode ids\n            var item = options.items[i];\n            var encoded_id = item.encode_id;\n            var popupmenu_id = \"grid-\" + i + \"-popup\";\n\n            // Tag current\n            tmpl += \"<tr \";\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += \">\";\n\n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl +=\n                    '<td style=\"width: 1.5em;\">' +\n                    '<input type=\"checkbox\" name=\"id\" value=\"' +\n                    encoded_id +\n                    '\" id=\"' +\n                    encoded_id +\n                    '\" class=\"grid-row-select-checkbox\" />' +\n                    \"</td>\";\n            }\n\n            // Data columns\n            for (var j in options.columns) {\n                var column = options.columns[j];\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = \"\";\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n\n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n\n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n\n                    // unescape value\n                    if (jQuery.type(value) === \"string\") {\n                        value = value.replace(/\\/\\//g, \"/\");\n                    }\n\n                    // Attach popup menu?\n                    var id = \"\";\n                    var cls = \"\";\n                    if (column.attach_popup) {\n                        id = \"grid-\" + i + \"-popup\";\n                        cls = \"menubutton\";\n                        if (link != \"\") {\n                            cls += \" split\";\n                        }\n                        cls += \" popup\";\n                    }\n\n                    // Check for row wrapping\n                    tmpl += \"<td \" + nowrap + \">\";\n\n                    // Link\n                    if (link) {\n                        if (options.operations.length != 0) {\n                            tmpl +=\n                                '<div id=\"' +\n                                id +\n                                '\" class=\"' +\n                                cls +\n                                '\" style=\"float: left;\">';\n                        }\n                        tmpl +=\n                            '<a class=\"menubutton-label use-target\" target=\"' +\n                            target +\n                            '\" href=\"' +\n                            link +\n                            '\" onclick=\"return false;\">' +\n                            value +\n                            \"</a>\";\n                        if (options.operations.length != 0) {\n                            tmpl += \"</div>\";\n                        }\n                    } else {\n                        tmpl +=\n                            '<div id=\"' +\n                            id +\n                            '\" class=\"' +\n                            cls +\n                            '\"><label id=\"' +\n                            column.label_id_prefix +\n                            encoded_id +\n                            '\" for=\"' +\n                            encoded_id +\n                            '\">' +\n                            (value || \"\") +\n                            \"</label></div>\";\n                    }\n                    tmpl += \"</td>\";\n                }\n            }\n            tmpl += \"</tr>\";\n            num_rows_rendered++;\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n        // create template string\n        var tmpl = \"\";\n\n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links = options.num_page_links;\n            var cur_page_num = options.cur_page_num;\n            var num_pages = options.num_pages;\n\n            // First pass on min page.\n            var page_link_range = num_page_links / 2;\n            var min_page = cur_page_num - page_link_range;\n            var min_offset = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - (cur_page_num - min_page);\n            }\n\n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            var max_offset;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - (max_page + 1 - cur_page_num);\n            }\n\n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset != 0) {\n                min_page -= max_offset;\n                if (min_page < 1) {\n                    min_page = 1;\n                }\n            }\n\n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += \"<td></td>\";\n            }\n            tmpl +=\n                '<td colspan=\"100\">' +\n                '<span id=\"page-link-container\">' +\n                \"Page:\";\n\n            if (min_page > 1) {\n                tmpl +=\n                    '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n\n            // create page urls\n            for (\n                var page_index = min_page;\n                page_index < max_page + 1;\n                page_index++\n            ) {\n                if (page_index == options.cur_page_num) {\n                    tmpl +=\n                        '<span class=\"page-link inactive-link\" id=\"page-link-' +\n                        page_index +\n                        '\">' +\n                        page_index +\n                        \"</span>\";\n                } else {\n                    tmpl +=\n                        '<span class=\"page-link\" id=\"page-link-' +\n                        page_index +\n                        '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' +\n                        page_index +\n                        '\">' +\n                        page_index +\n                        \"</a></span>\";\n                }\n            }\n\n            // show last page\n            if (max_page < num_pages) {\n                tmpl +=\n                    \"...\" +\n                    '<span class=\"page-link\" id=\"page-link-' +\n                    num_pages +\n                    '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' +\n                    num_pages +\n                    '\">' +\n                    num_pages +\n                    \"</a></span>\";\n            }\n            tmpl += \"</span>\";\n\n            // Show all link\n            tmpl +=\n                '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                \"</td>\" +\n                \"</tr>\";\n        }\n\n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl +=\n                \"<tr>\" +\n                '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                \"<td></td>\" +\n                '<td colspan=\"100\">' +\n                'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n            // configure buttons for operations\n            for (var i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.allow_multiple) {\n                    tmpl +=\n                        '<input type=\"button\" value=\"' +\n                        operation.label +\n                        '\" class=\"operation-button action-button\">&nbsp;';\n                }\n            }\n\n            // finalize template\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // count global operations\n        var found_global = false;\n        for (i in options.operations) {\n            if (options.operations[i].global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n\n        // add global operations\n        if (found_global) {\n            tmpl += \"<tr>\" + '<td colspan=\"100\">';\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.global_operation) {\n                    tmpl +=\n                        '<a class=\"action-button\" href=\"' +\n                        operation.global_operation +\n                        '\">' +\n                        operation.label +\n                        \"</a>\";\n                }\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // add legend\n        if (options.legend) {\n            tmpl +=\n                \"<tr>\" +\n                '<td colspan=\"100\">' +\n                options.legend +\n                \"</td>\" +\n                \"</tr>\";\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    message: function(options) {\n        var status = options.status == \"success\" ? \"done\" : options.status;\n        return (\n            \"<p>\" +\n            '<div class=\"' +\n            status +\n            'message transient-message\">' +\n            _.escape(options.message) +\n            \"</div>\" +\n            '<div style=\"clear: both\"></div>' +\n            \"</p>\"\n        );\n    },\n\n    // template\n    grid_filters: function(options) {\n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = \"none\";\n        if (options.advanced_search) {\n            advanced_search_display = \"block\";\n        }\n\n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"advanced\") {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = \"block\";\n                }\n                show_advanced_search_link = true;\n            }\n        }\n\n        // hide standard search if advanced is shown\n        var standard_search_display = \"block\";\n        if (advanced_search_display == \"block\") {\n            standard_search_display = \"none\";\n        }\n\n        //\n        // standard search\n        //\n        var tmpl =\n            '<div id=\"standard-search\" style=\"display: ' +\n            standard_search_display +\n            ';\">' +\n            \"<table>\" +\n            \"<tr>\" +\n            '<td style=\"padding: 0;\">' +\n            \"<table>\";\n\n        // add standard filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"standard\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize standard search\n        tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl +=\n                '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n\n        // finalize standard search display\n        tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n        //\n        // advanced search\n        //\n        tmpl +=\n            '<div id=\"advanced-search\" style=\"display: ' +\n            advanced_search_display +\n            '; margin-top: 5px; border: 1px solid #ccc;\">' +\n            \"<table>\" +\n            \"<tr>\" +\n            '<td style=\"text-align: left\" colspan=\"100\">' +\n            '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' +\n            \"</td>\" +\n            \"</tr>\";\n\n        // add advanced filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == \"advanced\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize advanced search template\n        tmpl += \"</table>\" + \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    grid_column_filter: function(options, column) {\n        // collect parameters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == \"advanced\") {\n            column_label = column_label.toLowerCase();\n        }\n\n        // start\n        var tmpl = \"<tr>\";\n\n        if (column.filterable == \"advanced\") {\n            tmpl +=\n                '<td align=\"left\" style=\"padding-left: 10px\">' +\n                column_label +\n                \":</td>\";\n        }\n        tmpl += '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl +=\n                '<form class=\"text-filter-form\" column_key=\"' +\n                column_key +\n                '\" action=\"' +\n                options.url +\n                '\" method=\"get\" >';\n            // Carry forward filtering criteria with hidden inputs.\n            for (i in options.columns) {\n                var temp_column = options.columns[i];\n                var filter_value = filters[temp_column.key];\n                if (filter_value) {\n                    if (filter_value != \"All\") {\n                        if (temp_column.is_text) {\n                            filter_value = JSON.stringify(filter_value);\n                        }\n                        tmpl +=\n                            '<input type=\"hidden\" id=\"' +\n                            temp_column.key +\n                            '\" name=\"f-' +\n                            temp_column.key +\n                            '\" value=\"' +\n                            filter_value +\n                            '\"/>';\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n\n                // single filter value\n                if (type == \"string\") {\n                    if (column_filter != \"All\") {\n                        // append template\n                        tmpl += this.filter_element(column_key, column_filter);\n                    }\n                }\n\n                // multiple filter values\n                if (type == \"array\") {\n                    for (var i in column_filter) {\n                        // get filter\n                        var filter = column_filter[i];\n\n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl += this.filter_element(column_key, filter);\n                    }\n                }\n            }\n\n            // close span\n            tmpl += \"</span>\";\n\n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = \"\";\n            if (column.filterable == \"standard\") {\n                value = column.label.toLowerCase();\n                var size = value.length;\n                if (size < 20) {\n                    size = 20;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n\n            // print input field for column\n            tmpl +=\n                '<span class=\"search-box\">' +\n                '<input class=\"search-box-input\" id=\"input-' +\n                column_key +\n                '-filter\" name=\"f-' +\n                column_key +\n                '\" type=\"text\" placeholder=\"' +\n                value +\n                '\" size=\"' +\n                size +\n                '\"/>' +\n                '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' +\n                '<i class=\"fa fa-search\"></i>' +\n                \"</button>\" +\n                \"</span>\" +\n                \"</form>\";\n        } else {\n            // filter criteria\n            tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n            // add category filters\n            var seperator = false;\n            for (var cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n\n                // each filter will have only a single argument, so get that single argument\n                var cf_key = \"\";\n                var cf_arg = \"\";\n                for (var key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n\n                // add seperator\n                if (seperator) {\n                    tmpl += \" | \";\n                }\n                seperator = true;\n\n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl +=\n                        '<span class=\"categorical-filter ' +\n                        column_key +\n                        '-filter current-filter\">' +\n                        cf_label +\n                        \"</span>\";\n                } else {\n                    tmpl +=\n                        '<span class=\"categorical-filter ' +\n                        column_key +\n                        '-filter\">' +\n                        '<a href=\"javascript:void(0);\" filter_key=\"' +\n                        cf_key +\n                        '\" filter_val=\"' +\n                        cf_arg +\n                        '\">' +\n                        cf_label +\n                        \"</a>\" +\n                        \"</span>\";\n                }\n            }\n            tmpl += \"</span>\";\n        }\n        tmpl += \"</td>\" + \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return (\n            '<span class=\"text-filter-val\">' +\n            filter_value +\n            '<a href=\"javascript:void(0);\" filter_key=\"' +\n            filter_key +\n            '\" filter_val=\"' +\n            filter_value +\n            '\">' +\n            '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' +\n            \"</a>\" +\n            \"</span>\"\n        );\n    }\n};\n"]}