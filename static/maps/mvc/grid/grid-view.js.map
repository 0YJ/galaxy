{"version":3,"sources":["mvc/grid/grid-view.js"],"names":["jQuery","ajaxSettings","traditional","define","GridModel","Templates","PopupMenu","Backbone","View","extend","grid","initialize","grid_config","this","setElement","use_panels","$","css","padding","overflow","init_grid","handle_refresh","refresh_frames","inArray","top","Galaxy","currHistoryPanel","loadCurrentHistory","options","attributes","url","get","replace","set","$el","html","find","header","body","footer","message","self","use_hide_message","setTimeout","init_grid_elements","init_grid_controls","init_refresh_on_change","each","off","click","submit_operation","select","keyup","set_sort_condition","attr","submit","column_key","text_input_obj","text_input","val","add_filter_condition","parent","remove","remove_filter_condition","set_categorical_filter","slideToggle","on","check_all_items","checkboxes","check_count","update_checked","text","filter","length","change","rating","set_page","e","execute","href","target","items","i","item","button","popup","j","operation","operation_id","operation_settings","popupConfig","confirmation_text","func","preventDefault","label","findItemByHtml","addItem","name","value","add_filter","t","filter_element","append","go_page_one","remove_filter","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","addClass","new_value","category_filter","cur_value","trim","filter_value","empty","removeClass","new_page","id","page_num","parseInt","split","cur_page","children","operation_button","operation_name","_","findWhere","operations","confirm","item_ids","push","chk_all","document","getElementById","checks","getElementsByTagName","total","checked","undefined","href_parts","href_parms_str","href_parms","index","toLowerCase","can_async_op","update_grid","go_to","async","advanced_search","is","param","get_url_data","$div","closest","load","window","location","method","show","ajax","type","data","error","response","alert","success","response_text","embedded","insert","json","parseJSON","hide","complete"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-view.js","sourcesContent":["// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine([\n    'mvc/grid/grid-model',\n    'mvc/grid/grid-template',\n    \"mvc/ui/popup-menu\"\n], function(GridModel, Templates, PopupMenu) {\n\n// grid view\nreturn Backbone.View.extend({\n\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config)\n    {\n        // set element\n        this.setElement('#grid-container');\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $('#center').css ({\n                padding     : '10px',\n                overflow    : 'auto'\n            });\n        }\n\n        // initialize controls\n        this.init_grid(grid_config);\n    },\n\n    // refresh frames\n    handle_refresh: function (refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray('history', refresh_frames) > -1) {\n                if( top.Galaxy && top.Galaxy.currHistoryPanel ){\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config)\n    {\n        // link grid model\n        this.grid = new GridModel(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get('url_base');\n        url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n        this.grid.set('url_base', url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find('#grid-table-header').html(Templates.header(options));\n        this.$el.find('#grid-table-body').html(Templates.body(options));\n        this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find('#grid-message').html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout( function() { self.$el.find('#grid-message').html(''); }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find('.operation-button').each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find('input[type=text]').each(function() {\n            $(this).off();\n            $(this).click(function() { $(this).select(); } )\n                   .keyup(function () { $(this).css('font-style', 'normal'); });\n        });\n\n        // Initialize sort links.\n        this.$el.find('.sort-link').each( function() {\n            $(this).off();\n            $(this).click( function() {\n               self.set_sort_condition( $(this).attr('sort_key') );\n               return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find('.text-filter-form').each( function() {\n            $(this).off();\n            $(this).submit( function() {\n                var column_key = $(this).attr('column_key');\n                var text_input_obj = $('#input-' + column_key + '-filter');\n                var text_input = text_input_obj.val();\n                text_input_obj.val('');\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.text-filter-val > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                // Remove visible element.\n                $(this).parent().remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition ($(this).attr('filter_key'), $(this).attr('filter_val'));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.categorical-filter > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.set_categorical_filter( $(this).attr('filter_key'), $(this).attr('filter_val') );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find('.advanced-search-toggle').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.$el.find('#standard-search').slideToggle('fast');\n                self.$el.find('#advanced-search').slideToggle('fast');\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find('#check_all').off();\n        this.$el.find('#check_all').on('click', function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements : function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find('.grid').each( function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text( $(checkboxes).filter(\":checked\").length );\n            };\n\n            $(checkboxes).each( function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find('.community_rating_star').length !== 0)\n            this.$el.find('.community_rating_star').rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find('.page-link > a').each( function() {\n            $(this).click( function() {\n               self.set_page( $(this).attr('page_num') );\n               return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find('.use-target').each( function() {\n            $(this).click( function(e) {\n                self.execute({\n                    href : $(this).attr('href'),\n                    target : $(this).attr('target')\n                });\n                return false;\n\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        //\n        // add operation popup menus\n        //\n        for (var i in options.items)\n        {\n            // get items\n            var item = options.items[i];\n\n            // get identifiers\n            var button = this.$el.find('#grid-' + i + '-popup');\n            button.off();\n            var popup = new PopupMenu(button);\n\n            // load details\n            for (var j in options['operations'])\n            {\n                // get operation details\n                var operation = options['operations'][j];\n                var operation_id = operation['label'];\n                var operation_settings = item['operation_config'][operation_id];\n                var encode_id = item['encode_id'];\n\n                // check\n                if (operation_settings['allowed'] && operation['allow_popup'])\n                {\n                    // popup configuration\n                    var popupConfig =\n                    {\n                        html : operation['label'],\n                        href : operation_settings['url_args'],\n                        target : operation_settings['target'],\n                        confirmation_text : operation['confirm']\n                    };\n\n                    // add popup function\n                    popupConfig.func = function(e)\n                    {\n                        e.preventDefault();\n                        var label = $(e.target).html();\n                        var options = this.findItemByHtml(label);\n                        self.execute(options);\n                    };\n\n                    // add item\n                    popup.addItem(popupConfig);\n                }\n            }\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function (name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find('#' + name + '-filtering-criteria');\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function (name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function (col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get('sort_key');\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== '-') {\n                new_sort = '-' + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find('.sort-arrow').remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = (new_sort.substring(0,1) == '-') ? '&uarr;' : '&darr;';\n        var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\n        // Add to header\n        this.$el.find('#' + col_key + '-header').append(t);\n\n        // Update grid.\n        this.grid.set('sort_key', new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function (name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get('categorical_filters')[name],\n            cur_value = this.grid.get('filters')[name];\n        var self = this;\n        this.$el.find('.' + name + '-filter').each( function() {\n            var text = $.trim( $(this).text() );\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass('current-filter');\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_categorical_filter( name, filter_value );\n                });\n                $(this).removeClass('current-filter');\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function (new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find('.page-link').each( function() {\n            var id = $(this).attr('id'),\n                page_num = parseInt( id.split('-')[2], 10 ), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get('cur_page'),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this).children().text();\n                $(this).empty();\n                $(this).addClass('inactive-link');\n                $(this).text(text);\n            }\n            else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass('inactive-link');\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === 'all') {\n            this.grid.set('cur_page', new_page);\n        } else {\n            this.grid.set('cur_page', parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function (operation_button, confirmation_text)\n    {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {label: operation_name});\n        if (operation && !confirmation_text){\n            confirmation_text = operation.confirm || '';\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find('input[name=id]:checked').each(function() {\n            item_ids.push( $(this).val() );\n        });\n\n        // execute operation\n        this.execute({\n            operation: operation_name,\n            id: item_ids,\n            confirmation_text: confirmation_text\n        });\n\n        // return\n        return true;\n    },\n\n    check_all_items: function () {\n        var chk_all = document.getElementById('check_all'),\n            checks = document.getElementsByTagName('input'),\n            total = 0,\n            i;\n        if ( chk_all.checked === true ) {\n            for ( i=0; i < checks.length; i++ ) {\n                if ( checks[i].name.indexOf( 'id' ) !== -1) {\n                   checks[i].checked = true;\n                   total++;\n                }\n            }\n        }\n        else {\n            for ( i=0; i < checks.length; i++ ) {\n                if ( checks[i].name.indexOf( 'id' ) !== -1) {\n                   checks[i].checked = false;\n                }\n\n            }\n        }\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function () {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get('cur_page');\n        if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n            this.grid.set('cur_page', 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function (options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf('operation=') != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf('operation') != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split('=')[1];\n                            operation = operation.replace (/\\+/g, ' ');\n                        } else if (href_parms[index].indexOf('id') != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split('=')[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null')\n                if(!confirm(confirmation_text))\n                    return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if (this.grid.can_async_op(operation)) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get('async')) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function (target, href) {\n        // get aysnc status\n        var async = this.grid.get('async');\n        this.grid.set('async', false);\n\n        // get slide status\n        advanced_search = this.$el.find('#advanced-search').is(':visible');\n        this.grid.set('advanced_search', advanced_search);\n\n        // get default url\n        if(!href) {\n            href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case 'inbound':\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $('.grid-header').closest('.inbound');\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case 'top':\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function () {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = (this.grid.get('operation') ? 'POST' : 'GET' );\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find('.loading-elt-overlay').show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get('url_base'),\n            data: self.grid.get_url_data(),\n            error: function(response) { alert( 'Grid refresh failed' );},\n            success: function(response_text) {\n\n                // backup\n                var embedded = self.grid.get('embedded');\n                var insert = self.grid.get('insert');\n\n                // request new configuration\n                var json = $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find('.loading-elt-overlay').hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n\n});\n"]}