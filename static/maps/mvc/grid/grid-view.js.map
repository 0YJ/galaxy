{"version":3,"sources":["mvc/grid/grid-view.js"],"names":["_utils","require","_gridModel","_gridTemplate","_popupMenu","jQuery","ajaxSettings","traditional","Backbone","View","extend","grid","initialize","grid_config","this","_gridModel2","default","dict_format","title","self","window","add_tag_to_grid_filter","tag_name","tag_value","tag","undefined","$","is","slideToggle","add_filter_condition","setElement","items","url_data","filters","v","k","advanced_search","url_base","response","embedded","init_grid","use_panels","url","success","handle_refresh","refresh_frames","inArray","top","Galaxy","currHistoryPanel","loadCurrentHistory","overflow","set","options","attributes","get","replace","html","_gridTemplate2","header","$el","find","body","allow_title_display","footer","message","use_hide_message","init_grid_elements","init_refresh_on_change","init_grid_controls","each","off","click","select","keyup","css","set_sort_condition","attr","submit","column_key","text_input_obj","text_input","val","remove_filter_condition","set_categorical_filter","on","check_all_items","checkboxes","check_count","update_checked","text","filter","length","change","rating","set_page","e","execute","href","target","_","items_length","index","popup","_popupMenu2","button","operation","_add_operation","item","settings","operation_config","label","allowed","allow_popup","addItem","url_args","encode_id","findItemByHtml","name","value","add_filter","t","filter_element","remove","append","go_page_one","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","addClass","new_value","category_filter","cur_value","filter_value","empty","removeClass","id","page_num","parseInt","split","cur_page","new_page","children","submit_operation","operation_button","confirmation_text","operation_name","findWhere","operations","item_ids","push","check","state","prop","c","href_parts","href_parms","href_parms_str","confirm","toLowerCase","update_grid","param","get_url_data","go_to","can_async_op","async","$div","closest","load","location","type","method","error","show","alert","ajax","data","insert","response_text","json","parseJSON","complete","hide"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-view.js","sourcesContent":["// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\nimport Utils from \"utils/utils\";\nimport GridModel from \"mvc/grid/grid-model\";\nimport Templates from \"mvc/grid/grid-template\";\nimport PopupMenu from \"mvc/ui/popup-menu\";\n// grid view\nexport default Backbone.View.extend({\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.grid = new GridModel();\n        this.dict_format = grid_config.dict_format;\n        this.title = grid_config.title;\n        var self = this;\n        window.add_tag_to_grid_filter = function(tag_name, tag_value) {\n            // Put tag name and value together.\n            var tag =\n                tag_name +\n                (tag_value !== undefined && tag_value !== \"\"\n                    ? \":\" + tag_value\n                    : \"\");\n            var advanced_search = $(\"#advanced-search\").is(\":visible\");\n            if (!advanced_search) {\n                $(\"#standard-search\").slideToggle(\"fast\");\n                $(\"#advanced-search\").slideToggle(\"fast\");\n            }\n            self.add_filter_condition(\"tags\", tag);\n        };\n\n        // set element\n        if (this.dict_format) {\n            this.setElement(\"<div/>\");\n            if (grid_config.url_base && !grid_config.items) {\n                var url_data = grid_config.url_data || {};\n                _.each(grid_config.filters, function(v, k) {\n                    url_data[\"f-\" + k] = v;\n                });\n                $.ajax({\n                    url: grid_config.url_base + \"?\" + $.param(url_data),\n                    success: function(response) {\n                        response.embedded = grid_config.embedded;\n                        response.filters = grid_config.filters || {};\n                        self.init_grid(response);\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement(\"#grid-container\");\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $(\"#center\").css({\n                padding: \"10px\",\n                overflow: \"auto\"\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function(refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray(\"history\", refresh_frames) > -1) {\n                if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        this.grid.set(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        if (this.allow_title_display && options.title) {\n            Utils.setWindowTitle(options.title);\n        }\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get(\"url_base\");\n        url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n        this.grid.set(\"url_base\", url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find(\"#grid-table-header\").html(Templates.header(options));\n        this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n        this.$el.find(\"#grid-table-footer\").html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find(\"#grid-message\").html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout(function() {\n                    self.$el.find(\"#grid-message\").html(\"\");\n                }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find(\".operation-button\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find(\"input[type=text]\").each(function() {\n            $(this).off();\n            $(this)\n                .click(function() {\n                    $(this).select();\n                })\n                .keyup(function() {\n                    $(this).css(\"font-style\", \"normal\");\n                });\n        });\n\n        // Initialize sort links.\n        this.$el.find(\".sort-link\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.set_sort_condition($(this).attr(\"sort_key\"));\n                return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find(\".text-filter-form\").each(function() {\n            $(this).off();\n            $(this).submit(function() {\n                var column_key = $(this).attr(\"column_key\");\n                var text_input_obj = $(\"#input-\" + column_key + \"-filter\");\n                var text_input = text_input_obj.val();\n                text_input_obj.val(\"\");\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".text-filter-val > a\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                // Remove visible element.\n                $(this)\n                    .parent()\n                    .remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition(\n                    $(this).attr(\"filter_key\"),\n                    $(this).attr(\"filter_val\")\n                );\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".categorical-filter > a\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.set_categorical_filter(\n                    $(this).attr(\"filter_key\"),\n                    $(this).attr(\"filter_val\")\n                );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find(\".advanced-search-toggle\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find(\"#check_all\").off();\n        this.$el.find(\"#check_all\").on(\"click\", function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements: function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find(\".grid\").each(function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text($(checkboxes).filter(\":checked\").length);\n            };\n\n            $(checkboxes).each(function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find(\".community_rating_star\").length !== 0)\n            this.$el.find(\".community_rating_star\").rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find(\".page-link > a\").each(function() {\n            $(this).click(function() {\n                self.set_page($(this).attr(\"page_num\"));\n                return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find(\".use-target\").each(function() {\n            $(this).click(function(e) {\n                self.execute({\n                    href: $(this).attr(\"href\"),\n                    target: $(this).attr(\"target\")\n                });\n                return false;\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each(options.items, function(item, index) {\n            var button = self.$(\"#grid-\" + index + \"-popup\").off();\n            var popup = new PopupMenu(button);\n            _.each(options[\"operations\"], function(operation) {\n                self._add_operation(popup, operation, item);\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function(popup, operation, item) {\n        var self = this;\n        var settings = item.operation_config[operation.label];\n        if (settings.allowed && operation.allow_popup) {\n            popup.addItem({\n                html: operation.label,\n                href: settings.url_args,\n                target: settings.target,\n                confirmation_text: operation.confirm,\n                func: function(e) {\n                    e.preventDefault();\n                    var label = $(e.target).html();\n                    if (operation.onclick) {\n                        operation.onclick(item.encode_id);\n                    } else {\n                        self.execute(this.findItemByHtml(label));\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function(name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find(\"#\" + name + \"-filtering-criteria\");\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function(name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function(col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get(\"sort_key\");\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== \"-\") {\n                new_sort = \"-\" + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find(\".sort-arrow\").remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n        var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\"sort-arrow\");\n\n        // Add to header\n        this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n        // Update grid.\n        this.grid.set(\"sort_key\", new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function(name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get(\"categorical_filters\")[name],\n            cur_value = this.grid.get(\"filters\")[name];\n        var self = this;\n        this.$el.find(\".\" + name + \"-filter\").each(function() {\n            var text = $.trim($(this).text());\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass(\"current-filter\");\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + \"</a>\");\n                t.click(function() {\n                    self.set_categorical_filter(name, filter_value);\n                });\n                $(this).removeClass(\"current-filter\");\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function(new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find(\".page-link\").each(function() {\n            var id = $(this).attr(\"id\"),\n                page_num = parseInt(id.split(\"-\")[2], 10), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get(\"cur_page\"),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this)\n                    .children()\n                    .text();\n                $(this).empty();\n                $(this).addClass(\"inactive-link\");\n                $(this).text(text);\n            } else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass(\"inactive-link\");\n                var t = $('<a href=\"#\">' + text + \"</a>\");\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === \"all\") {\n            this.grid.set(\"cur_page\", new_page);\n        } else {\n            this.grid.set(\"cur_page\", parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function(operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked')\n            .length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {\n            label: operation_name\n        });\n        if (operation && !confirmation_text) {\n            confirmation_text = operation.confirm || \"\";\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find(\"input[name=id]:checked\").each(function() {\n            item_ids.push($(this).val());\n        });\n\n        // execute operation\n        var options = {\n            operation: operation_name,\n            id: item_ids,\n            confirmation_text: confirmation_text\n        };\n        if (operation.target == \"top\") {\n            options = _.extend(options, {\n                href: operation.href,\n                target: operation.target\n            });\n        }\n        this.execute(options);\n        return true;\n    },\n\n    check_all_items: function() {\n        var check = this.$(\".grid-row-select-checkbox\");\n        var state = this.$(\"#check_all\").prop(\"checked\");\n        _.each(check, function(c) {\n            $(c).prop(\"checked\", state);\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function() {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get(\"cur_page\");\n        if (cur_page !== null && cur_page !== undefined && cur_page !== \"all\") {\n            this.grid.set(\"cur_page\", 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function(options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf(\"operation=\") != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf(\"operation\") != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split(\"=\")[1];\n                            operation = operation.replace(/\\+/g, \" \");\n                        } else if (href_parms[index].indexOf(\"id\") != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split(\"=\")[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (\n                confirmation_text &&\n                confirmation_text != \"\" &&\n                confirmation_text != \"None\" &&\n                confirmation_text != \"null\"\n            )\n                if (!confirm(confirmation_text)) return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if (target == \"top\") {\n                window.top.location =\n                    href + \"?\" + $.param(this.grid.get_url_data());\n            } else if (this.grid.can_async_op(operation) || this.dict_format) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get(\"async\") || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function(target, href) {\n        // get aysnc status\n        var async = this.grid.get(\"async\");\n        this.grid.set(\"async\", false);\n\n        // get slide status\n        var advanced_search = this.$el.find(\"#advanced-search\").is(\":visible\");\n        this.grid.set(\"advanced_search\", advanced_search);\n\n        // get default url\n        if (!href) {\n            href =\n                this.grid.get(\"url_base\") +\n                \"?\" +\n                $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case \"inbound\":\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $(\".grid-header\").closest(\".inbound\");\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case \"top\":\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function() {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find(\".loading-elt-overlay\").show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get(\"url_base\"),\n            data: self.grid.get_url_data(),\n            error: function(response) {\n                alert(\"Grid refresh failed\");\n            },\n            success: function(response_text) {\n                // backup\n                var embedded = self.grid.get(\"embedded\");\n                var insert = self.grid.get(\"insert\");\n                var advanced_search = self.$el\n                    .find(\"#advanced-search\")\n                    .is(\":visible\");\n\n                // request new configuration\n                var json = self.dict_format\n                    ? response_text\n                    : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n                json.advanced_search = advanced_search;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find(\".loading-elt-overlay\").hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n"]}