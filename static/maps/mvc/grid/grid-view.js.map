{"version":3,"sources":["mvc/grid/grid-view.js"],"names":["jQuery","ajaxSettings","traditional","define","GridModel","Templates","PopupMenu","Backbone","View","extend","grid","initialize","setElement","this","grid_config","overflow","$","css","padding","init_grid","handle_refresh","Galaxy","top","inArray","refresh_frames","currHistoryPanel","loadCurrentHistory","options","attributes","url","replace","get","setTimeout","$el","set","find","html","header","body","message","self","use_hide_message","init_grid_elements","init_grid_controls","init_refresh_on_change","each","click","submit_operation","keyup","select","off","set_sort_condition","attr","submit","column_key","text_input_obj","text_input","val","parent","remove","remove_filter_condition","set_categorical_filter","slideToggle","on","checkboxes","check_count","update_checked","length","rating","set_page","e","href","target","items_length","items","i","item","button","popup","j","operation","encode_id","operation_id","operation_settings","confirmation_text","popupConfig","func","preventDefault","addItem","findItemByHtml","label","execute","add_filter_condition","name","value","add_filter","t","filter_element","append","go_page_one","remove_filter","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","addClass","text","category_filter","filter_value","filter","cur_value","new_value","trim","empty","new_page","page_num","id","parseInt","split","children","cur_page","removeClass","operation_button","number_of_checked_ids","operation_name","findWhere","operations","item_ids","push","confirm","check_all_items","checks","total","chk_all","checked","undefined","href_parts","href_parms","index","href_parms_str","toLowerCase","can_async_op","go_to","update_grid","async","is","param","get_url_data","$div","closest","load","method","window","location","error","show","ajax","type","data","json","response","alert","success","response_text","embedded","insert","parseJSON","complete","hide"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-view.js","sourcesContent":["// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine([\n    'mvc/grid/grid-model',\n    'mvc/grid/grid-template',\n    \"mvc/ui/popup-menu\"\n], function(GridModel, Templates, PopupMenu) {\n\n// grid view\nreturn Backbone.View.extend({\n\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config)\n    {\n        // set element\n        this.setElement('#grid-container');\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $('#center').css ({\n                padding     : '10px',\n                overflow    : 'auto'\n            });\n        }\n\n        // initialize controls\n        this.init_grid(grid_config);\n    },\n\n    // refresh frames\n    handle_refresh: function (refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray('history', refresh_frames) > -1) {\n                if( top.Galaxy && top.Galaxy.currHistoryPanel ){\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config)\n    {\n        // link grid model\n        this.grid = new GridModel(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get('url_base');\n        url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n        this.grid.set('url_base', url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find('#grid-table-header').html(Templates.header(options));\n        this.$el.find('#grid-table-body').html(Templates.body(options));\n        this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find('#grid-message').html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout( function() { self.$el.find('#grid-message').html(''); }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find('.operation-button').each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find('input[type=text]').each(function() {\n            $(this).off();\n            $(this).click(function() { $(this).select(); } )\n                   .keyup(function () { $(this).css('font-style', 'normal'); });\n        });\n\n        // Initialize sort links.\n        this.$el.find('.sort-link').each( function() {\n            $(this).off();\n            $(this).click( function() {\n               self.set_sort_condition( $(this).attr('sort_key') );\n               return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find('.text-filter-form').each( function() {\n            $(this).off();\n            $(this).submit( function() {\n                var column_key = $(this).attr('column_key');\n                var text_input_obj = $('#input-' + column_key + '-filter');\n                var text_input = text_input_obj.val();\n                text_input_obj.val('');\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.text-filter-val > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                // Remove visible element.\n                $(this).parent().remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition ($(this).attr('filter_key'), $(this).attr('filter_val'));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.categorical-filter > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.set_categorical_filter( $(this).attr('filter_key'), $(this).attr('filter_val') );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find('.advanced-search-toggle').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.$el.find('#standard-search').slideToggle('fast');\n                self.$el.find('#advanced-search').slideToggle('fast');\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find('#check_all').off();\n        this.$el.find('#check_all').on('click', function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements : function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find('.grid').each( function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text( $(checkboxes).filter(\":checked\").length );\n            };\n\n            $(checkboxes).each( function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find('.community_rating_star').length !== 0)\n            this.$el.find('.community_rating_star').rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find('.page-link > a').each( function() {\n            $(this).click( function() {\n               self.set_page( $(this).attr('page_num') );\n               return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find('.use-target').each( function() {\n            $(this).click( function(e) {\n                self.execute({\n                    href : $(this).attr('href'),\n                    target : $(this).attr('target')\n                });\n                return false;\n\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        //\n        // add operation popup menus\n        //\n        for (var i in options.items)\n        {\n            // get items\n            var item = options.items[i];\n\n            // get identifiers\n            var button = this.$el.find('#grid-' + i + '-popup');\n            button.off();\n            var popup = new PopupMenu(button);\n\n            // load details\n            for (var j in options['operations'])\n            {\n                // get operation details\n                var operation = options['operations'][j];\n                var operation_id = operation['label'];\n                var operation_settings = item['operation_config'][operation_id];\n                var encode_id = item['encode_id'];\n\n                // check\n                if (operation_settings['allowed'] && operation['allow_popup'])\n                {\n                    // popup configuration\n                    var popupConfig =\n                    {\n                        html : operation['label'],\n                        href : operation_settings['url_args'],\n                        target : operation_settings['target'],\n                        confirmation_text : operation['confirm']\n                    };\n\n                    // add popup function\n                    popupConfig.func = function(e)\n                    {\n                        e.preventDefault();\n                        var label = $(e.target).html();\n                        var options = this.findItemByHtml(label);\n                        self.execute(options);\n                    };\n\n                    // add item\n                    popup.addItem(popupConfig);\n                }\n            }\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function (name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find('#' + name + '-filtering-criteria');\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function (name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function (col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get('sort_key');\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== '-') {\n                new_sort = '-' + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find('.sort-arrow').remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = (new_sort.substring(0,1) == '-') ? '&uarr;' : '&darr;';\n        var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\n        // Add to header\n        this.$el.find('#' + col_key + '-header').append(t);\n\n        // Update grid.\n        this.grid.set('sort_key', new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function (name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get('categorical_filters')[name],\n            cur_value = this.grid.get('filters')[name];\n        var self = this;\n        this.$el.find('.' + name + '-filter').each( function() {\n            var text = $.trim( $(this).text() );\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass('current-filter');\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_categorical_filter( name, filter_value );\n                });\n                $(this).removeClass('current-filter');\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function (new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find('.page-link').each( function() {\n            var id = $(this).attr('id'),\n                page_num = parseInt( id.split('-')[2], 10 ), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get('cur_page'),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this).children().text();\n                $(this).empty();\n                $(this).addClass('inactive-link');\n                $(this).text(text);\n            }\n            else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass('inactive-link');\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === 'all') {\n            this.grid.set('cur_page', new_page);\n        } else {\n            this.grid.set('cur_page', parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function (operation_button, confirmation_text)\n    {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {label: operation_name});\n        if (operation && !confirmation_text){\n            confirmation_text = operation.confirm || '';\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find('input[name=id]:checked').each(function() {\n            item_ids.push( $(this).val() );\n        });\n\n        // execute operation\n        this.execute({\n            operation: operation_name,\n            id: item_ids,\n            confirmation_text: confirmation_text\n        });\n\n        // return\n        return true;\n    },\n\n    check_all_items: function () {\n        var chk_all = document.getElementById('check_all'),\n            checks = document.getElementsByTagName('input'),\n            total = 0,\n            i;\n        if ( chk_all.checked === true ) {\n            for ( i=0; i < checks.length; i++ ) {\n                if ( checks[i].name.indexOf( 'id' ) !== -1) {\n                   checks[i].checked = true;\n                   total++;\n                }\n            }\n        }\n        else {\n            for ( i=0; i < checks.length; i++ ) {\n                if ( checks[i].name.indexOf( 'id' ) !== -1) {\n                   checks[i].checked = false;\n                }\n\n            }\n        }\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function () {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get('cur_page');\n        if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n            this.grid.set('cur_page', 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function (options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf('operation=') != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf('operation') != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split('=')[1];\n                            operation = operation.replace (/\\+/g, ' ');\n                        } else if (href_parms[index].indexOf('id') != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split('=')[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null')\n                if(!confirm(confirmation_text))\n                    return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if (this.grid.can_async_op(operation)) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get('async')) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function (target, href) {\n        // get aysnc status\n        var async = this.grid.get('async');\n        this.grid.set('async', false);\n\n        // get slide status\n        advanced_search = this.$el.find('#advanced-search').is(':visible');\n        this.grid.set('advanced_search', advanced_search);\n\n        // get default url\n        if(!href) {\n            href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case 'inbound':\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $('.grid-header').closest('.inbound');\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case 'top':\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function () {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = (this.grid.get('operation') ? 'POST' : 'GET' );\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find('.loading-elt-overlay').show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get('url_base'),\n            data: self.grid.get_url_data(),\n            error: function(response) { alert( 'Grid refresh failed' );},\n            success: function(response_text) {\n\n                // backup\n                var embedded = self.grid.get('embedded');\n                var insert = self.grid.get('insert');\n\n                // request new configuration\n                var json = $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find('.loading-elt-overlay').hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n\n});\n"]}