{"version":3,"sources":["mvc/grid/grid-view.js"],"names":["jQuery","ajaxSettings","traditional","define","Backbone","extend","PopupMenu","grid","View","initialize","self","grid_config","window","add_tag_to_grid_filter","this","dict_format","tag_name","is","$","slideToggle","tag_value","add_filter_condition","tag","url_data","_","items","ajax","filters","v","k","url","url_base","response","init_grid","embedded","setElement","overflow","css","padding","handle_refresh","Galaxy","top","inArray","refresh_frames","currHistoryPanel","loadCurrentHistory","options","get","replace","$el","html","Templates","find","header","body","footer","use_hide_message","setTimeout","message","init_grid_elements","init_grid_controls","init_refresh_on_change","each","off","submit_operation","select","keyup","click","set_sort_condition","attr","submit","column_key","text_input_obj","text_input","val","remove","remove_filter_condition","set_categorical_filter","on","checkboxes","check_count","update_checked","filter","length","change","rating","attributes","set_page","e","execute","href","items_length","item","button","index","popup","operation","_add_operation","settings","operation_config","label","url_args","target","confirmation_text","func","onclick","findItemByHtml","name","value","add_filter","t","filter_element","container","append","go_page_one","remove_filter","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","addClass","set","new_value","category_filter","cur_value","text","trim","filter_value","empty","removeClass","new_page","cur_page","id","page_num","parseInt","split","children","operation_button","operation_name","number_of_checked_ids","findWhere","operations","item_ids","push","check_all_items","check","state","prop","c","href_parts","href_parms","href_parms_str","confirm","toLowerCase","update_grid","param","get_url_data","can_async_op","go_to","async","advanced_search","undefined","$div","load","closest","location","method","show","type","data","error","alert","success","response_text","insert","json","parseJSON","hide","complete"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-view.js","sourcesContent":["// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine([\n    'utils/utils',\n    'mvc/grid/grid-model',\n    'mvc/grid/grid-template',\n    'mvc/ui/popup-menu'\n], function(Utils, GridModel, Templates, PopupMenu) {\n\n// grid view\nreturn Backbone.View.extend({\n\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.grid = new GridModel();\n        this.dict_format = grid_config.dict_format;\n        var self = this;\n        window.add_tag_to_grid_filter = function( tag_name, tag_value ){\n            // Put tag name and value together.\n            var tag = tag_name + ( tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\" );\n            var advanced_search = $( '#advanced-search').is(\":visible\" );\n            if( !advanced_search ){\n                $('#standard-search').slideToggle('fast');\n                $('#advanced-search').slideToggle('fast');\n            }\n            self.add_filter_condition( \"tags\", tag );\n        };\n\n        // set element\n        if ( this.dict_format ) {\n            this.setElement('<div/>');\n            if ( grid_config.url_base && !grid_config.items ) {\n                var url_data = grid_config.url_data || {};\n                _.each(grid_config.filters, function(v, k) {\n                    url_data['f-' + k] = v;\n                });\n                $.ajax({\n                    url     : grid_config.url_base + '?' + $.param( url_data ),\n                    success : function( response ) {\n                        response.embedded = grid_config.embedded;\n                        response.filters  = grid_config.filters || {};\n                        self.init_grid( response );\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement('#grid-container');\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $('#center').css ({\n                padding     : '10px',\n                overflow    : 'auto'\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function (refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray('history', refresh_frames) > -1) {\n                if( top.Galaxy && top.Galaxy.currHistoryPanel ){\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        this.grid.set( grid_config );\n\n        // get options\n        var options = this.grid.attributes;\n\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get('url_base');\n        url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n        this.grid.set('url_base', url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find('#grid-table-header').html(Templates.header(options));\n        this.$el.find('#grid-table-body').html(Templates.body(options));\n        this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find('#grid-message').html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout( function() { self.$el.find('#grid-message').html(''); }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find('.operation-button').each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find('input[type=text]').each(function() {\n            $(this).off();\n            $(this).click(function() { $(this).select(); } )\n                   .keyup(function () { $(this).css('font-style', 'normal'); });\n        });\n\n        // Initialize sort links.\n        this.$el.find('.sort-link').each( function() {\n            $(this).off();\n            $(this).click( function() {\n               self.set_sort_condition( $(this).attr('sort_key') );\n               return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find('.text-filter-form').each( function() {\n            $(this).off();\n            $(this).submit( function() {\n                var column_key = $(this).attr('column_key');\n                var text_input_obj = $('#input-' + column_key + '-filter');\n                var text_input = text_input_obj.val();\n                text_input_obj.val('');\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.text-filter-val > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                // Remove visible element.\n                $(this).parent().remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition ($(this).attr('filter_key'), $(this).attr('filter_val'));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.categorical-filter > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.set_categorical_filter( $(this).attr('filter_key'), $(this).attr('filter_val') );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find('.advanced-search-toggle').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.$el.find('#standard-search').slideToggle('fast');\n                self.$el.find('#advanced-search').slideToggle('fast');\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find('#check_all').off();\n        this.$el.find('#check_all').on('click', function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements : function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find('.grid').each( function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text( $(checkboxes).filter(\":checked\").length );\n            };\n\n            $(checkboxes).each( function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find('.community_rating_star').length !== 0)\n            this.$el.find('.community_rating_star').rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find('.page-link > a').each( function() {\n            $(this).click( function() {\n               self.set_page( $(this).attr('page_num') );\n               return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find('.use-target').each( function() {\n            $(this).click( function(e) {\n                self.execute({\n                    href : $(this).attr('href'),\n                    target : $(this).attr('target')\n                });\n                return false;\n\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each( options.items, function( item, index ) {\n            var button = self.$( '#grid-' + index + '-popup' ).off();\n            var popup = new PopupMenu( button );\n            _.each( options[ 'operations' ], function( operation ) {\n                self._add_operation( popup, operation, item );\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function( popup, operation, item ) {\n        var self = this;\n        var settings = item.operation_config[ operation.label ];\n        if ( settings.allowed && operation.allow_popup ) {\n            popup.addItem({\n                html                : operation.label,\n                href                : settings.url_args,\n                target              : settings.target,\n                confirmation_text   : operation.confirm,\n                func                : function( e ) {\n                    e.preventDefault();\n                    var label = $( e.target ).html();\n                    if ( operation.onclick ) {\n                        operation.onclick( item.encode_id );\n                    } else {\n                        self.execute( this.findItemByHtml( label ) );\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function (name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find('#' + name + '-filtering-criteria');\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function (name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function (col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get('sort_key');\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== '-') {\n                new_sort = '-' + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find('.sort-arrow').remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = (new_sort.substring(0,1) == '-') ? '&uarr;' : '&darr;';\n        var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\n        // Add to header\n        this.$el.find('#' + col_key + '-header').append(t);\n\n        // Update grid.\n        this.grid.set('sort_key', new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function (name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get('categorical_filters')[name],\n            cur_value = this.grid.get('filters')[name];\n        var self = this;\n        this.$el.find('.' + name + '-filter').each( function() {\n            var text = $.trim( $(this).text() );\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass('current-filter');\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_categorical_filter( name, filter_value );\n                });\n                $(this).removeClass('current-filter');\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function (new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find('.page-link').each( function() {\n            var id = $(this).attr('id'),\n                page_num = parseInt( id.split('-')[2], 10 ), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get('cur_page'),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this).children().text();\n                $(this).empty();\n                $(this).addClass('inactive-link');\n                $(this).text(text);\n            }\n            else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass('inactive-link');\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === 'all') {\n            this.grid.set('cur_page', new_page);\n        } else {\n            this.grid.set('cur_page', parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function (operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {label: operation_name});\n        if (operation && !confirmation_text){\n            confirmation_text = operation.confirm || '';\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find('input[name=id]:checked').each(function() {\n            item_ids.push( $(this).val() );\n        });\n\n        // execute operation\n        var options = {\n            operation           : operation_name,\n            id                  : item_ids,\n            confirmation_text   : confirmation_text\n        };\n        if ( operation.target == 'top' ) {\n            options = _.extend( options, {\n                href   : operation.href,\n                target : operation.target\n            });\n        }\n        this.execute( options );\n        return true;\n    },\n\n    check_all_items: function () {\n        var check = this.$('.grid-row-select-checkbox');\n        var state = this.$( '#check_all' ).prop( 'checked' );\n        _.each( check, function( c ) {\n            $( c ).prop( 'checked', state );\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function () {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get('cur_page');\n        if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n            this.grid.set('cur_page', 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function (options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf('operation=') != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf('operation') != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split('=')[1];\n                            operation = operation.replace (/\\+/g, ' ');\n                        } else if (href_parms[index].indexOf('id') != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split('=')[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null')\n                if(!confirm(confirmation_text))\n                    return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if ( target == 'top' ) {\n                window.top.location = href + '?' + $.param( this.grid.get_url_data() );\n            } else if ( this.grid.can_async_op(operation) || this.dict_format ) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get('async') || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function (target, href) {\n        // get aysnc status\n        var async = this.grid.get('async');\n        this.grid.set('async', false);\n\n        // get slide status\n        var advanced_search = this.$el.find('#advanced-search').is(':visible');\n        this.grid.set('advanced_search', advanced_search);\n\n        // get default url\n        if(!href) {\n            href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case 'inbound':\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $('.grid-header').closest('.inbound');\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case 'top':\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function () {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = (this.grid.get('operation') ? 'POST' : 'GET' );\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find('.loading-elt-overlay').show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get('url_base'),\n            data: self.grid.get_url_data(),\n            error: function(response) { alert( 'Grid refresh failed' );},\n            success: function(response_text) {\n\n                // backup\n                var embedded = self.grid.get('embedded');\n                var insert = self.grid.get('insert');\n                var advanced_search = self.$el.find('#advanced-search').is(':visible');\n\n                // request new configuration\n                var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n                json.advanced_search = advanced_search;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find('.loading-elt-overlay').hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n\n});\n"]}