{"version":3,"sources":["mvc/grid/grid-view.js"],"names":["jQuery","ajaxSettings","traditional","Backbone","View","extend","grid","initialize","grid_config","this","_gridModel2","default","dict_format","title","self","window","add_tag_to_grid_filter","tag_name","tag_value","tag","undefined","$","is","slideToggle","setElement","advanced_search","url_data","_","each","v","k","ajax","add_filter_condition","param","success","response","embedded","filters","url","css","padding","overflow","handle_refresh","refresh_frames","inArray","use_panels","Galaxy","currHistoryPanel","top","loadCurrentHistory","init_grid","options","allow_title_display","_utils2","setWindowTitle","set","replace","$el","html","find","_gridTemplate2","header","body","footer","message","use_hide_message","setTimeout","init_grid_elements","init_grid_controls","off","click","init_refresh_on_change","select","attr","keyup","submit","column_key","set_sort_condition","text_input","text_input_obj","val","parent","remove","remove_filter_condition","set_categorical_filter","on","checkboxes","check_count","update_checked","filter","length","change","rating","attributes","set_page","e","execute","href","items_length","items","item","index","popup","button","operation","_add_operation","settings","operation_config","label","addItem","target","confirm","confirmation_text","func","preventDefault","onclick","encode_id","findItemByHtml","name","value","add_filter","t","filter_element","container","go_page_one","remove_filter","col_key","cur_sort","get","new_sort","substring","sort_arrow","addClass","append","new_value","category_filter","cur_value","text","trim","filter_value","empty","removeClass","new_page","id","page_num","parseInt","split","cur_page","children","submit_operation","operation_button","operation_name","number_of_checked_ids","item_ids","push","check_all_items","check","state","prop","c","indexOf","href_parts","href_parms_str","href_parms","toLowerCase","update_grid","location","get_url_data","can_async_op","go_to","async","$div","closest","load","method","error","type","data","json","alert","insert","complete","response_text","hide"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-view.js","sourcesContent":["// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\nimport Utils from \"utils/utils\";\nimport GridModel from \"mvc/grid/grid-model\";\nimport Templates from \"mvc/grid/grid-template\";\nimport PopupMenu from \"mvc/ui/popup-menu\";\n// grid view\nexport default Backbone.View.extend({\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.grid = new GridModel();\n        this.dict_format = grid_config.dict_format;\n        this.title = grid_config.title;\n        var self = this;\n        window.add_tag_to_grid_filter = function(tag_name, tag_value) {\n            // Put tag name and value together.\n            var tag =\n                tag_name +\n                (tag_value !== undefined && tag_value !== \"\"\n                    ? \":\" + tag_value\n                    : \"\");\n            var advanced_search = $(\"#advanced-search\").is(\":visible\");\n            if (!advanced_search) {\n                $(\"#standard-search\").slideToggle(\"fast\");\n                $(\"#advanced-search\").slideToggle(\"fast\");\n            }\n            self.add_filter_condition(\"tags\", tag);\n        };\n\n        // set element\n        if (this.dict_format) {\n            this.setElement(\"<div/>\");\n            if (grid_config.url_base && !grid_config.items) {\n                var url_data = grid_config.url_data || {};\n                _.each(grid_config.filters, function(v, k) {\n                    url_data[\"f-\" + k] = v;\n                });\n                $.ajax({\n                    url: grid_config.url_base + \"?\" + $.param(url_data),\n                    success: function(response) {\n                        response.embedded = grid_config.embedded;\n                        response.filters = grid_config.filters || {};\n                        self.init_grid(response);\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement(\"#grid-container\");\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $(\"#center\").css({\n                padding: \"10px\",\n                overflow: \"auto\"\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function(refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray(\"history\", refresh_frames) > -1) {\n                if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        this.grid.set(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        if (this.allow_title_display && options.title) {\n            Utils.setWindowTitle(options.title);\n        }\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get(\"url_base\");\n        url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n        this.grid.set(\"url_base\", url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find(\"#grid-table-header\").html(Templates.header(options));\n        this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n        this.$el.find(\"#grid-table-footer\").html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find(\"#grid-message\").html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout(function() {\n                    self.$el.find(\"#grid-message\").html(\"\");\n                }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find(\".operation-button\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find(\"input[type=text]\").each(function() {\n            $(this).off();\n            $(this)\n                .click(function() {\n                    $(this).select();\n                })\n                .keyup(function() {\n                    $(this).css(\"font-style\", \"normal\");\n                });\n        });\n\n        // Initialize sort links.\n        this.$el.find(\".sort-link\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.set_sort_condition($(this).attr(\"sort_key\"));\n                return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find(\".text-filter-form\").each(function() {\n            $(this).off();\n            $(this).submit(function() {\n                var column_key = $(this).attr(\"column_key\");\n                var text_input_obj = $(\"#input-\" + column_key + \"-filter\");\n                var text_input = text_input_obj.val();\n                text_input_obj.val(\"\");\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".text-filter-val > a\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                // Remove visible element.\n                $(this)\n                    .parent()\n                    .remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition(\n                    $(this).attr(\"filter_key\"),\n                    $(this).attr(\"filter_val\")\n                );\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".categorical-filter > a\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.set_categorical_filter(\n                    $(this).attr(\"filter_key\"),\n                    $(this).attr(\"filter_val\")\n                );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find(\".advanced-search-toggle\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find(\"#check_all\").off();\n        this.$el.find(\"#check_all\").on(\"click\", function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements: function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find(\".grid\").each(function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text($(checkboxes).filter(\":checked\").length);\n            };\n\n            $(checkboxes).each(function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find(\".community_rating_star\").length !== 0)\n            this.$el.find(\".community_rating_star\").rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find(\".page-link > a\").each(function() {\n            $(this).click(function() {\n                self.set_page($(this).attr(\"page_num\"));\n                return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find(\".use-target\").each(function() {\n            $(this).click(function(e) {\n                self.execute({\n                    href: $(this).attr(\"href\"),\n                    target: $(this).attr(\"target\")\n                });\n                return false;\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each(options.items, function(item, index) {\n            var button = self.$(\"#grid-\" + index + \"-popup\").off();\n            var popup = new PopupMenu(button);\n            _.each(options[\"operations\"], function(operation) {\n                self._add_operation(popup, operation, item);\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function(popup, operation, item) {\n        var self = this;\n        var settings = item.operation_config[operation.label];\n        if (settings.allowed && operation.allow_popup) {\n            popup.addItem({\n                html: operation.label,\n                href: settings.url_args,\n                target: settings.target,\n                confirmation_text: operation.confirm,\n                func: function(e) {\n                    e.preventDefault();\n                    var label = $(e.target).html();\n                    if (operation.onclick) {\n                        operation.onclick(item.encode_id);\n                    } else {\n                        self.execute(this.findItemByHtml(label));\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function(name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find(\"#\" + name + \"-filtering-criteria\");\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function(name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function(col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get(\"sort_key\");\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== \"-\") {\n                new_sort = \"-\" + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find(\".sort-arrow\").remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n        var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\"sort-arrow\");\n\n        // Add to header\n        this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n        // Update grid.\n        this.grid.set(\"sort_key\", new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function(name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get(\"categorical_filters\")[name],\n            cur_value = this.grid.get(\"filters\")[name];\n        var self = this;\n        this.$el.find(\".\" + name + \"-filter\").each(function() {\n            var text = $.trim($(this).text());\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass(\"current-filter\");\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + \"</a>\");\n                t.click(function() {\n                    self.set_categorical_filter(name, filter_value);\n                });\n                $(this).removeClass(\"current-filter\");\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function(new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find(\".page-link\").each(function() {\n            var id = $(this).attr(\"id\"),\n                page_num = parseInt(id.split(\"-\")[2], 10), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get(\"cur_page\"),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this)\n                    .children()\n                    .text();\n                $(this).empty();\n                $(this).addClass(\"inactive-link\");\n                $(this).text(text);\n            } else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass(\"inactive-link\");\n                var t = $('<a href=\"#\">' + text + \"</a>\");\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === \"all\") {\n            this.grid.set(\"cur_page\", new_page);\n        } else {\n            this.grid.set(\"cur_page\", parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function(operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked')\n            .length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {\n            label: operation_name\n        });\n        if (operation && !confirmation_text) {\n            confirmation_text = operation.confirm || \"\";\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find(\"input[name=id]:checked\").each(function() {\n            item_ids.push($(this).val());\n        });\n\n        // execute operation\n        var options = {\n            operation: operation_name,\n            id: item_ids,\n            confirmation_text: confirmation_text\n        };\n        if (operation.target == \"top\") {\n            options = _.extend(options, {\n                href: operation.href,\n                target: operation.target\n            });\n        }\n        this.execute(options);\n        return true;\n    },\n\n    check_all_items: function() {\n        var check = this.$(\".grid-row-select-checkbox\");\n        var state = this.$(\"#check_all\").prop(\"checked\");\n        _.each(check, function(c) {\n            $(c).prop(\"checked\", state);\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function() {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get(\"cur_page\");\n        if (cur_page !== null && cur_page !== undefined && cur_page !== \"all\") {\n            this.grid.set(\"cur_page\", 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function(options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf(\"operation=\") != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf(\"operation\") != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split(\"=\")[1];\n                            operation = operation.replace(/\\+/g, \" \");\n                        } else if (href_parms[index].indexOf(\"id\") != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split(\"=\")[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (\n                confirmation_text &&\n                confirmation_text != \"\" &&\n                confirmation_text != \"None\" &&\n                confirmation_text != \"null\"\n            )\n                if (!confirm(confirmation_text)) return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if (target == \"top\") {\n                window.top.location =\n                    href + \"?\" + $.param(this.grid.get_url_data());\n            } else if (this.grid.can_async_op(operation) || this.dict_format) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get(\"async\") || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function(target, href) {\n        // get aysnc status\n        var async = this.grid.get(\"async\");\n        this.grid.set(\"async\", false);\n\n        // get slide status\n        var advanced_search = this.$el.find(\"#advanced-search\").is(\":visible\");\n        this.grid.set(\"advanced_search\", advanced_search);\n\n        // get default url\n        if (!href) {\n            href =\n                this.grid.get(\"url_base\") +\n                \"?\" +\n                $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case \"inbound\":\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $(\".grid-header\").closest(\".inbound\");\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case \"top\":\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function() {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find(\".loading-elt-overlay\").show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get(\"url_base\"),\n            data: self.grid.get_url_data(),\n            error: function(response) {\n                alert(\"Grid refresh failed\");\n            },\n            success: function(response_text) {\n                // backup\n                var embedded = self.grid.get(\"embedded\");\n                var insert = self.grid.get(\"insert\");\n                var advanced_search = self.$el\n                    .find(\"#advanced-search\")\n                    .is(\":visible\");\n\n                // request new configuration\n                var json = self.dict_format\n                    ? response_text\n                    : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n                json.advanced_search = advanced_search;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find(\".loading-elt-overlay\").hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n"]}