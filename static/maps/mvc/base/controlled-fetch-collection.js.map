{"version":3,"sources":["mvc/base/controlled-fetch-collection.js"],"names":["define","_","Backbone","BASE_MVC","ControlledFetchCollection","Collection","extend","prototype","setOrder","options","order","this","silent","_setUpListeners","on","changed-order","sort","_buildFetchOptions","fetch","call","self","traditional","data","_buildFetchData","filters","_buildFetchFilters","_fetchFiltersToAjaxData","defaults","pick","_fetchParams","clone","filterMap","q","qv","each","v","push","k","reset","models","comparators","update_time","ascending","update_time-asc","buildComparator","create_time","create_time-asc","collection","comparator","isUndefined","Error","trigger","limitPerPage","initialize","currentPage","getTotalItemCount","PaginatedCollection","getLastPage","Math","floor","getPageCount","getPageLimitOffset","pageNum","constrainPageNum","offset","max","min","fetchPage","limit","always","fetchNextPage","limitOnFirstFetch","limitPerFetch","lastFetched","remove","allFetched","fetchFirst","fetchMore","jQuery","when","done","numFetched","isArray","fetchedData","length","fetchAll","fetchData","InfinitelyScrollingCollection"],"mappings":"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","file":"../../../scripts/mvc/base/controlled-fetch-collection.js","sourcesContent":["define([\n    'libs/underscore',\n    'libs/backbone',\n    'mvc/base-mvc',\n], function( _, Backbone, BASE_MVC ){\n'use strict';\n\n//=============================================================================\n/**\n * A Collection that can be limited/offset/re-ordered/filtered.\n * @type {Backbone.Collection}\n */\nvar ControlledFetchCollection = Backbone.Collection.extend({\n\n    /** call setOrder on initialization to build the comparator based on options */\n    initialize : function( models, options ){\n        Backbone.Collection.prototype.initialize.call( this, models, options );\n        this.setOrder( options.order || this.order, { silent: true });\n    },\n\n    /** set up to track order changes and re-sort when changed */\n    _setUpListeners : function(){\n        return this.on({\n            'changed-order' : this.sort\n        });\n    },\n\n    /** override to provide order and offsets based on instance vars, set limit if passed,\n     *  and set allFetched/fire 'all-fetched' when xhr returns\n     */\n    fetch : function( options ){\n        options = this._buildFetchOptions( options );\n        // console.log( 'fetch options:', options );\n        return Backbone.Collection.prototype.fetch.call( this, options );\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions : function( options ){\n        // note: we normally want options passed in to override the defaults built here\n        // so most of these fns will generate defaults\n        options = _.clone( options ) || {};\n        var self = this;\n\n        // jquery ajax option; allows multiple q/qv for filters (instead of 'q[]')\n        options.traditional = true;\n\n        // options.data\n        // we keep limit, offset, etc. in options *as well as move it into data* because:\n        // - it makes fetch calling convenient to add it to a single options map (instead of as mult. args)\n        // - it allows the std. event handlers (for fetch, etc.) to have access\n        //   to the pagination options too\n        //      (i.e. this.on( 'sync', function( options ){ if( options.limit ){ ... } }))\n        // however, when we send to xhr/jquery we copy them to data also so that they become API query params\n        options.data = options.data || self._buildFetchData( options );\n        // console.log( 'data:', options.data );\n\n        // options.data.filters --> options.data.q, options.data.qv\n        var filters = this._buildFetchFilters( options );\n        // console.log( 'filters:', filters );\n        if( !_.isEmpty( filters ) ){\n            _.extend( options.data, this._fetchFiltersToAjaxData( filters ) );\n        }\n        // console.log( 'data:', options.data );\n        return options;\n    },\n\n    /** Build the dictionary to send to fetch's XHR as data */\n    _buildFetchData : function( options ){\n        var defaults = {};\n        if( this.order ){ defaults.order = this.order; }\n        return _.defaults( _.pick( options, this._fetchParams ), defaults );\n    },\n\n    /** These attribute keys are valid params to fetch/API-index */\n    _fetchParams : [\n        /** model dependent string to control the order of models returned */\n        'order',\n        /** limit the number of models returned from a fetch */\n        'limit',\n        /** skip this number of models when fetching */\n        'offset',\n        /** what series of attributes to return (model dependent) */\n        'view',\n        /** individual keys to return for the models (see api/histories.index) */\n        'keys'\n    ],\n\n    /** add any needed filters here based on collection state */\n    _buildFetchFilters : function( options ){\n        // override\n        return _.clone( options.filters || {} );\n    },\n\n    /** Convert dictionary filters to qqv style arrays */\n    _fetchFiltersToAjaxData : function( filters ){\n        // return as a map so ajax.data can extend from it\n        var filterMap = {\n            q  : [],\n            qv : []\n        };\n        _.each( filters, function( v, k ){\n            // don't send if filter value is empty\n            if( v === undefined || v === '' ){ return; }\n            // json to python\n            if( v === true ){ v = 'True'; }\n            if( v === false ){ v = 'False'; }\n            if( v === null ){ v = 'None'; }\n            // map to k/v arrays (q/qv)\n            filterMap.q.push( k );\n            filterMap.qv.push( v );\n        });\n        return filterMap;\n    },\n\n    /** override to reset allFetched flag to false */\n    reset : function( models, options ){\n        this.allFetched = false;\n        return Backbone.Collection.prototype.reset.call( this, models, options );\n    },\n\n    // ........................................................................ order\n    order : null,\n\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators : {\n        'update_time'       : BASE_MVC.buildComparator( 'update_time', { ascending: false }),\n        'update_time-asc'   : BASE_MVC.buildComparator( 'update_time', { ascending: true }),\n        'create_time'       : BASE_MVC.buildComparator( 'create_time', { ascending: false }),\n        'create_time-asc'   : BASE_MVC.buildComparator( 'create_time', { ascending: true }),\n    },\n\n    /** set the order and comparator for this collection then sort with the new order\n     *  @event 'changed-order' passed the new order and the collection\n     */\n    setOrder : function( order, options ){\n        options = options || {};\n        var collection = this;\n        var comparator = collection.comparators[ order ];\n        if( _.isUndefined( comparator ) ){ throw new Error( 'unknown order: ' + order ); }\n        // if( _.isUndefined( comparator ) ){ return; }\n        if( comparator === collection.comparator ){ return; }\n\n        var oldOrder = collection.order;\n        collection.order = order;\n        collection.comparator = comparator;\n\n        if( !options.silent ){\n            collection.trigger( 'changed-order', options );\n        }\n        return collection;\n    },\n\n});\n\n\n//=============================================================================\n/**\n *\n */\nvar PaginatedCollection = ControlledFetchCollection.extend({\n\n    /** @type {Number} limit used for each page's fetch */\n    limitPerPage       : 500,\n\n    initialize : function( models, options ){\n        ControlledFetchCollection.prototype.initialize.call( this, models, options );\n        this.currentPage = options.currentPage || 0;\n    },\n\n    getTotalItemCount : function(){\n        return this.length;\n    },\n\n    shouldPaginate : function(){\n        return this.getTotalItemCount() >= this.limitPerPage;\n    },\n\n    getLastPage : function(){\n        return Math.floor( this.getTotalItemCount() / this.limitPerPage );\n    },\n\n    getPageCount : function(){\n        return this.getLastPage() + 1;\n    },\n\n    getPageLimitOffset : function( pageNum ){\n        pageNum = this.constrainPageNum( pageNum );\n        return {\n            limit : this.limitPerPage,\n            offset: pageNum * this.limitPerPage\n        };\n    },\n\n    constrainPageNum : function( pageNum ){\n        return Math.max( 0, Math.min( pageNum, this.getLastPage() ));\n    },\n\n    /** fetch the next page of data */\n    fetchPage : function( pageNum, options ){\n        var self = this;\n        pageNum = self.constrainPageNum( pageNum );\n        self.currentPage = pageNum;\n        options = _.defaults( options || {}, self.getPageLimitOffset( pageNum ) );\n\n        self.trigger( 'fetching-more' );\n        return self.fetch( options )\n            .always( function(){\n                self.trigger( 'fetching-more-done' );\n            });\n    },\n\n    fetchCurrentPage : function( options ){\n        return this.fetchPage( this.currentPage, options );\n    },\n\n    fetchPrevPage : function( options ){\n        return this.fetchPage( this.currentPage - 1, options );\n    },\n\n    fetchNextPage : function( options ){\n        return this.fetchPage( this.currentPage + 1, options );\n    },\n});\n\n\n//=============================================================================\n/**\n * A Collection that will load more elements without reseting.\n */\nvar InfinitelyScrollingCollection = ControlledFetchCollection.extend({\n\n    /** @type {Number} limit used for the first fetch (or a reset) */\n    limitOnFirstFetch   : null,\n    /** @type {Number} limit used for each subsequent fetch */\n    limitPerFetch       : 100,\n\n    initialize : function( models, options ){\n        ControlledFetchCollection.prototype.initialize.call( this, models, options );\n        /** @type {Integer} number of contents to return from the first fetch */\n        this.limitOnFirstFetch = options.limitOnFirstFetch || this.limitOnFirstFetch;\n        /** @type {Integer} limit for every fetch after the first */\n        this.limitPerFetch = options.limitPerFetch || this.limitPerFetch;\n        /** @type {Boolean} are all contents fetched? */\n        this.allFetched = false;\n        /** @type {Integer} what was the offset of the last content returned */\n        this.lastFetched = options.lastFetched || 0;\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions : function( options ){\n        // options (options for backbone.fetch and jquery.ajax generally)\n        // backbone option; false here to make fetching an addititive process\n        options.remove = options.remove || false;\n        return ControlledFetchCollection.prototype._buildFetchOptions.call( this, options );\n    },\n\n    /** fetch the first 'page' of data */\n    fetchFirst : function( options ){\n        // console.log( 'ControlledFetchCollection.fetchFirst:', options );\n        options = options? _.clone( options ) : {};\n        this.allFetched = false;\n        this.lastFetched = 0;\n        return this.fetchMore( _.defaults( options, {\n            reset : true,\n            limit : this.limitOnFirstFetch,\n        }));\n    },\n\n    /** fetch the next page of data */\n    fetchMore : function( options ){\n        // console.log( 'ControlledFetchCollection.fetchMore:', options );\n        options = _.clone( options || {} );\n        var collection = this;\n\n        // console.log( 'fetchMore, options.reset:', options.reset );\n        if( ( !options.reset && collection.allFetched ) ){\n            return jQuery.when();\n        }\n\n        // TODO: this fails in the edge case where\n        //  the first fetch offset === limit (limit 4, offset 4, collection.length 4)\n        options.offset = options.reset? 0 : ( options.offset || collection.lastFetched );\n        var limit = options.limit = options.limit || collection.limitPerFetch || null;\n        // console.log( 'fetchMore, limit:', limit, 'offset:', options.offset );\n\n        collection.trigger( 'fetching-more' );\n        return collection.fetch( options )\n            .always( function(){\n                collection.trigger( 'fetching-more-done' );\n            })\n            // maintain allFetched flag and trigger if all were fetched this time\n            .done( function _postFetchMore( fetchedData ){\n                var numFetched = _.isArray( fetchedData )? fetchedData.length : 0;\n                collection.lastFetched += numFetched;\n                // console.log( 'fetchMore, lastFetched:', collection.lastFetched );\n                // anything less than a full page means we got all there is to get\n                if( !limit || numFetched < limit ){\n                    collection.allFetched = true;\n                    collection.trigger( 'all-fetched', this );\n                }\n            }\n        );\n    },\n\n    /** fetch all the collection */\n    fetchAll : function( options ){\n        // whitelist options to prevent allowing limit/offset/filters\n        // (use vanilla fetch instead)\n        options = options || {};\n        var self = this;\n        options = _.pick( options, 'silent' );\n        options.filters = {};\n        return self.fetch( options ).done( function( fetchData ){\n            self.allFetched = true;\n            self.trigger( 'all-fetched', self );\n        });\n    },\n});\n\n\n//==============================================================================\n    return {\n        ControlledFetchCollection     : ControlledFetchCollection,\n        PaginatedCollection           : PaginatedCollection,\n        InfinitelyScrollingCollection : InfinitelyScrollingCollection,\n    };\n});\n"]}