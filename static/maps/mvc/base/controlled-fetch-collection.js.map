{"version":3,"sources":["mvc/base/controlled-fetch-collection.js"],"names":["define","_","Backbone","BASE_MVC","ControlledFetchCollection","Collection","extend","initialize","models","options","prototype","call","this","setOrder","order","silent","_setUpListeners","on","changed-order","sort","fetch","_buildFetchOptions","clone","self","traditional","data","_buildFetchData","filters","_buildFetchFilters","isEmpty","_fetchFiltersToAjaxData","defaults","pick","_fetchParams","filterMap","q","qv","each","v","k","undefined","push","reset","allFetched","comparators","update_time","buildComparator","ascending","update_time-asc","create_time","create_time-asc","collection","comparator","isUndefined","Error","trigger","PaginatedCollection","limitPerPage","currentPage","getTotalItemCount","length","shouldPaginate","getLastPage","Math","floor","getPageCount","getPageLimitOffset","pageNum","constrainPageNum","limit","offset","max","min","fetchPage","always","fetchCurrentPage","fetchPrevPage","fetchNextPage","InfinitelyScrollingCollection","limitOnFirstFetch","limitPerFetch","lastFetched","remove","fetchFirst","fetchMore","jQuery","when","done","fetchedData","numFetched","isArray","fetchAll","fetchData"],"mappings":"AAAAA,QACI,kBACA,gBACA,gBACD,SAAUC,EAAGC,EAAUC,GAC1B,YAOA,IAAIC,GAA4BF,EAASG,WAAWC,QAGhDC,WAAa,SAAUC,EAAQC,GAC3BP,EAASG,WAAWK,UAAUH,WAAWI,KAAMC,KAAMJ,EAAQC,GAC7DG,KAAKC,SAAUJ,EAAQK,OAASF,KAAKE,OAASC,QAAQ,KAI1DC,gBAAkB,WACd,MAAOJ,MAAKK,IACRC,gBAAkBN,KAAKO,QAO/BC,MAAQ,SAAUX,GAGd,MAFAA,GAAUG,KAAKS,mBAAoBZ,GAE5BP,EAASG,WAAWK,UAAUU,MAAMT,KAAMC,KAAMH,IAI3DY,mBAAqB,SAAUZ,GAG3BA,EAAUR,EAAEqB,MAAOb,MACnB,IAAIc,GAAOX,IAGXH,GAAQe,aAAc,EAStBf,EAAQgB,KAAOhB,EAAQgB,MAAQF,EAAKG,gBAAiBjB,EAIrD,IAAIkB,GAAUf,KAAKgB,mBAAoBnB,EAMvC,OAJKR,GAAE4B,QAASF,IACZ1B,EAAEK,OAAQG,EAAQgB,KAAMb,KAAKkB,wBAAyBH,IAGnDlB,GAIXiB,gBAAkB,SAAUjB,GACxB,GAAIsB,KAEJ,OADInB,MAAKE,QAASiB,EAASjB,MAAQF,KAAKE,OACjCb,EAAE8B,SAAU9B,EAAE+B,KAAMvB,EAASG,KAAKqB,cAAgBF,IAI7DE,cAEI,QAEA,QAEA,SAEA,OAEA,QAIJL,mBAAqB,SAAUnB,GAE3B,MAAOR,GAAEqB,MAAOb,EAAQkB,cAI5BG,wBAA0B,SAAUH,GAEhC,GAAIO,IACAC,KACAC,MAaJ,OAXAnC,GAAEoC,KAAMV,EAAS,SAAUW,EAAGC,OAEhBC,KAANF,GAAyB,KAANA,KAEb,IAANA,IAAcA,EAAI,SACZ,IAANA,IAAeA,EAAI,SACb,OAANA,IAAcA,EAAI,QAEtBJ,EAAUC,EAAEM,KAAMF,GAClBL,EAAUE,GAAGK,KAAMH,MAEhBJ,GAIXQ,MAAQ,SAAUlC,EAAQC,GAEtB,MADAG,MAAK+B,YAAa,EACXzC,EAASG,WAAWK,UAAUgC,MAAM/B,KAAMC,KAAMJ,EAAQC,IAInEK,MAAQ,KAGR8B,aACIC,YAAsB1C,EAAS2C,gBAAiB,eAAiBC,WAAW,IAC5EC,kBAAsB7C,EAAS2C,gBAAiB,eAAiBC,WAAW,IAC5EE,YAAsB9C,EAAS2C,gBAAiB,eAAiBC,WAAW,IAC5EG,kBAAsB/C,EAAS2C,gBAAiB,eAAiBC,WAAW,KAMhFlC,SAAW,SAAUC,EAAOL,GACxBA,EAAUA,KACV,IAAI0C,GAAavC,KACbwC,EAAaD,EAAWP,YAAa9B,EACzC,IAAIb,EAAEoD,YAAaD,GAAgB,KAAM,IAAIE,OAAO,kBAAoBxC,EAExE,IAAIsC,IAAeD,EAAWC,WAA9B,CAEeD,EAAWrC,KAO1B,OANAqC,GAAWrC,MAAQA,EACnBqC,EAAWC,WAAaA,EAEnB3C,EAAQM,QACToC,EAAWI,QAAS,gBAAiB9C,GAElC0C,MAUXK,EAAsBpD,EAA0BE,QAGhDmD,aAAqB,IAErBlD,WAAa,SAAUC,EAAQC,GAC3BL,EAA0BM,UAAUH,WAAWI,KAAMC,KAAMJ,EAAQC,GACnEG,KAAK8C,YAAcjD,EAAQiD,aAAe,GAG9CC,kBAAoB,WAChB,MAAO/C,MAAKgD,QAGhBC,eAAiB,WACb,MAAOjD,MAAK+C,qBAAuB/C,KAAK6C,cAG5CK,YAAc,WACV,MAAOC,MAAKC,MAAOpD,KAAK+C,oBAAsB/C,KAAK6C,eAGvDQ,aAAe,WACX,MAAOrD,MAAKkD,cAAgB,GAGhCI,mBAAqB,SAAUC,GAE3B,MADAA,GAAUvD,KAAKwD,iBAAkBD,IAE7BE,MAAQzD,KAAK6C,aACba,OAAQH,EAAUvD,KAAK6C,eAI/BW,iBAAmB,SAAUD,GACzB,MAAOJ,MAAKQ,IAAK,EAAGR,KAAKS,IAAKL,EAASvD,KAAKkD,iBAIhDW,UAAY,SAAUN,EAAS1D,GAC3B,GAAIc,GAAOX,IAMX,OALAuD,GAAU5C,EAAK6C,iBAAkBD,GACjC5C,EAAKmC,YAAcS,EACnB1D,EAAUR,EAAE8B,SAAUtB,MAAec,EAAK2C,mBAAoBC,IAE9D5C,EAAKgC,QAAS,iBACPhC,EAAKH,MAAOX,GACdiE,OAAQ,WACLnD,EAAKgC,QAAS,yBAI1BoB,iBAAmB,SAAUlE,GACzB,MAAOG,MAAK6D,UAAW7D,KAAK8C,YAAajD,IAG7CmE,cAAgB,SAAUnE,GACtB,MAAOG,MAAK6D,UAAW7D,KAAK8C,YAAc,EAAGjD,IAGjDoE,cAAgB,SAAUpE,GACtB,MAAOG,MAAK6D,UAAW7D,KAAK8C,YAAc,EAAGjD,MASjDqE,EAAgC1E,EAA0BE,QAG1DyE,kBAAsB,KAEtBC,cAAsB,IAEtBzE,WAAa,SAAUC,EAAQC,GAC3BL,EAA0BM,UAAUH,WAAWI,KAAMC,KAAMJ,EAAQC,GAEnEG,KAAKmE,kBAAoBtE,EAAQsE,mBAAqBnE,KAAKmE,kBAE3DnE,KAAKoE,cAAgBvE,EAAQuE,eAAiBpE,KAAKoE,cAEnDpE,KAAK+B,YAAa,EAElB/B,KAAKqE,YAAcxE,EAAQwE,aAAe,GAI9C5D,mBAAqB,SAAUZ,GAI3B,MADAA,GAAQyE,OAASzE,EAAQyE,SAAU,EAC5B9E,EAA0BM,UAAUW,mBAAmBV,KAAMC,KAAMH,IAI9E0E,WAAa,SAAU1E,GAKnB,MAHAA,GAAUA,EAASR,EAAEqB,MAAOb,MAC5BG,KAAK+B,YAAa,EAClB/B,KAAKqE,YAAc,EACZrE,KAAKwE,UAAWnF,EAAE8B,SAAUtB,GAC/BiC,OAAQ,EACR2B,MAAQzD,KAAKmE,sBAKrBK,UAAY,SAAU3E,GAElBA,EAAUR,EAAEqB,MAAOb,MACnB,IAAI0C,GAAavC,IAGjB,KAAOH,EAAQiC,OAASS,EAAWR,WAC/B,MAAO0C,QAAOC,MAKlB7E,GAAQ6D,OAAS7D,EAAQiC,MAAO,EAAMjC,EAAQ6D,QAAUnB,EAAW8B,WACnE,IAAIZ,GAAQ5D,EAAQ4D,MAAQ5D,EAAQ4D,OAASlB,EAAW6B,eAAiB,IAIzE,OADA7B,GAAWI,QAAS,iBACbJ,EAAW/B,MAAOX,GACpBiE,OAAQ,WACLvB,EAAWI,QAAS,wBAGvBgC,KAAM,SAAyBC,GAC5B,GAAIC,GAAaxF,EAAEyF,QAASF,GAAeA,EAAY5B,OAAS,CAChET,GAAW8B,aAAeQ,IAGrBpB,GAASoB,EAAapB,KACvBlB,EAAWR,YAAa,EACxBQ,EAAWI,QAAS,cAAe3C,UAOnD+E,SAAW,SAAUlF,GAGjBA,EAAUA,KACV,IAAIc,GAAOX,IAGX,OAFAH,GAAUR,EAAE+B,KAAMvB,EAAS,UAC3BA,EAAQkB,WACDJ,EAAKH,MAAOX,GAAU8E,KAAM,SAAUK,GACzCrE,EAAKoB,YAAa,EAClBpB,EAAKgC,QAAS,cAAehC,OAOrC,QACInB,0BAAgCA,EAChCoD,oBAAgCA,EAChCsB,8BAAgCA","file":"../../../scripts/mvc/base/controlled-fetch-collection.js","sourcesContent":["define([\n    'libs/underscore',\n    'libs/backbone',\n    'mvc/base-mvc',\n], function( _, Backbone, BASE_MVC ){\n'use strict';\n\n//=============================================================================\n/**\n * A Collection that can be limited/offset/re-ordered/filtered.\n * @type {Backbone.Collection}\n */\nvar ControlledFetchCollection = Backbone.Collection.extend({\n\n    /** call setOrder on initialization to build the comparator based on options */\n    initialize : function( models, options ){\n        Backbone.Collection.prototype.initialize.call( this, models, options );\n        this.setOrder( options.order || this.order, { silent: true });\n    },\n\n    /** set up to track order changes and re-sort when changed */\n    _setUpListeners : function(){\n        return this.on({\n            'changed-order' : this.sort\n        });\n    },\n\n    /** override to provide order and offsets based on instance vars, set limit if passed,\n     *  and set allFetched/fire 'all-fetched' when xhr returns\n     */\n    fetch : function( options ){\n        options = this._buildFetchOptions( options );\n        // console.log( 'fetch options:', options );\n        return Backbone.Collection.prototype.fetch.call( this, options );\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions : function( options ){\n        // note: we normally want options passed in to override the defaults built here\n        // so most of these fns will generate defaults\n        options = _.clone( options ) || {};\n        var self = this;\n\n        // jquery ajax option; allows multiple q/qv for filters (instead of 'q[]')\n        options.traditional = true;\n\n        // options.data\n        // we keep limit, offset, etc. in options *as well as move it into data* because:\n        // - it makes fetch calling convenient to add it to a single options map (instead of as mult. args)\n        // - it allows the std. event handlers (for fetch, etc.) to have access\n        //   to the pagination options too\n        //      (i.e. this.on( 'sync', function( options ){ if( options.limit ){ ... } }))\n        // however, when we send to xhr/jquery we copy them to data also so that they become API query params\n        options.data = options.data || self._buildFetchData( options );\n        // console.log( 'data:', options.data );\n\n        // options.data.filters --> options.data.q, options.data.qv\n        var filters = this._buildFetchFilters( options );\n        // console.log( 'filters:', filters );\n        if( !_.isEmpty( filters ) ){\n            _.extend( options.data, this._fetchFiltersToAjaxData( filters ) );\n        }\n        // console.log( 'data:', options.data );\n        return options;\n    },\n\n    /** Build the dictionary to send to fetch's XHR as data */\n    _buildFetchData : function( options ){\n        var defaults = {};\n        if( this.order ){ defaults.order = this.order; }\n        return _.defaults( _.pick( options, this._fetchParams ), defaults );\n    },\n\n    /** These attribute keys are valid params to fetch/API-index */\n    _fetchParams : [\n        /** model dependent string to control the order of models returned */\n        'order',\n        /** limit the number of models returned from a fetch */\n        'limit',\n        /** skip this number of models when fetching */\n        'offset',\n        /** what series of attributes to return (model dependent) */\n        'view',\n        /** individual keys to return for the models (see api/histories.index) */\n        'keys'\n    ],\n\n    /** add any needed filters here based on collection state */\n    _buildFetchFilters : function( options ){\n        // override\n        return _.clone( options.filters || {} );\n    },\n\n    /** Convert dictionary filters to qqv style arrays */\n    _fetchFiltersToAjaxData : function( filters ){\n        // return as a map so ajax.data can extend from it\n        var filterMap = {\n            q  : [],\n            qv : []\n        };\n        _.each( filters, function( v, k ){\n            // don't send if filter value is empty\n            if( v === undefined || v === '' ){ return; }\n            // json to python\n            if( v === true ){ v = 'True'; }\n            if( v === false ){ v = 'False'; }\n            if( v === null ){ v = 'None'; }\n            // map to k/v arrays (q/qv)\n            filterMap.q.push( k );\n            filterMap.qv.push( v );\n        });\n        return filterMap;\n    },\n\n    /** override to reset allFetched flag to false */\n    reset : function( models, options ){\n        this.allFetched = false;\n        return Backbone.Collection.prototype.reset.call( this, models, options );\n    },\n\n    // ........................................................................ order\n    order : null,\n\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators : {\n        'update_time'       : BASE_MVC.buildComparator( 'update_time', { ascending: false }),\n        'update_time-asc'   : BASE_MVC.buildComparator( 'update_time', { ascending: true }),\n        'create_time'       : BASE_MVC.buildComparator( 'create_time', { ascending: false }),\n        'create_time-asc'   : BASE_MVC.buildComparator( 'create_time', { ascending: true }),\n    },\n\n    /** set the order and comparator for this collection then sort with the new order\n     *  @event 'changed-order' passed the new order and the collection\n     */\n    setOrder : function( order, options ){\n        options = options || {};\n        var collection = this;\n        var comparator = collection.comparators[ order ];\n        if( _.isUndefined( comparator ) ){ throw new Error( 'unknown order: ' + order ); }\n        // if( _.isUndefined( comparator ) ){ return; }\n        if( comparator === collection.comparator ){ return; }\n\n        var oldOrder = collection.order;\n        collection.order = order;\n        collection.comparator = comparator;\n\n        if( !options.silent ){\n            collection.trigger( 'changed-order', options );\n        }\n        return collection;\n    },\n\n});\n\n\n//=============================================================================\n/**\n *\n */\nvar PaginatedCollection = ControlledFetchCollection.extend({\n\n    /** @type {Number} limit used for each page's fetch */\n    limitPerPage       : 500,\n\n    initialize : function( models, options ){\n        ControlledFetchCollection.prototype.initialize.call( this, models, options );\n        this.currentPage = options.currentPage || 0;\n    },\n\n    getTotalItemCount : function(){\n        return this.length;\n    },\n\n    shouldPaginate : function(){\n        return this.getTotalItemCount() >= this.limitPerPage;\n    },\n\n    getLastPage : function(){\n        return Math.floor( this.getTotalItemCount() / this.limitPerPage );\n    },\n\n    getPageCount : function(){\n        return this.getLastPage() + 1;\n    },\n\n    getPageLimitOffset : function( pageNum ){\n        pageNum = this.constrainPageNum( pageNum );\n        return {\n            limit : this.limitPerPage,\n            offset: pageNum * this.limitPerPage\n        };\n    },\n\n    constrainPageNum : function( pageNum ){\n        return Math.max( 0, Math.min( pageNum, this.getLastPage() ));\n    },\n\n    /** fetch the next page of data */\n    fetchPage : function( pageNum, options ){\n        var self = this;\n        pageNum = self.constrainPageNum( pageNum );\n        self.currentPage = pageNum;\n        options = _.defaults( options || {}, self.getPageLimitOffset( pageNum ) );\n\n        self.trigger( 'fetching-more' );\n        return self.fetch( options )\n            .always( function(){\n                self.trigger( 'fetching-more-done' );\n            });\n    },\n\n    fetchCurrentPage : function( options ){\n        return this.fetchPage( this.currentPage, options );\n    },\n\n    fetchPrevPage : function( options ){\n        return this.fetchPage( this.currentPage - 1, options );\n    },\n\n    fetchNextPage : function( options ){\n        return this.fetchPage( this.currentPage + 1, options );\n    },\n});\n\n\n//=============================================================================\n/**\n * A Collection that will load more elements without reseting.\n */\nvar InfinitelyScrollingCollection = ControlledFetchCollection.extend({\n\n    /** @type {Number} limit used for the first fetch (or a reset) */\n    limitOnFirstFetch   : null,\n    /** @type {Number} limit used for each subsequent fetch */\n    limitPerFetch       : 100,\n\n    initialize : function( models, options ){\n        ControlledFetchCollection.prototype.initialize.call( this, models, options );\n        /** @type {Integer} number of contents to return from the first fetch */\n        this.limitOnFirstFetch = options.limitOnFirstFetch || this.limitOnFirstFetch;\n        /** @type {Integer} limit for every fetch after the first */\n        this.limitPerFetch = options.limitPerFetch || this.limitPerFetch;\n        /** @type {Boolean} are all contents fetched? */\n        this.allFetched = false;\n        /** @type {Integer} what was the offset of the last content returned */\n        this.lastFetched = options.lastFetched || 0;\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions : function( options ){\n        // options (options for backbone.fetch and jquery.ajax generally)\n        // backbone option; false here to make fetching an addititive process\n        options.remove = options.remove || false;\n        return ControlledFetchCollection.prototype._buildFetchOptions.call( this, options );\n    },\n\n    /** fetch the first 'page' of data */\n    fetchFirst : function( options ){\n        // console.log( 'ControlledFetchCollection.fetchFirst:', options );\n        options = options? _.clone( options ) : {};\n        this.allFetched = false;\n        this.lastFetched = 0;\n        return this.fetchMore( _.defaults( options, {\n            reset : true,\n            limit : this.limitOnFirstFetch,\n        }));\n    },\n\n    /** fetch the next page of data */\n    fetchMore : function( options ){\n        // console.log( 'ControlledFetchCollection.fetchMore:', options );\n        options = _.clone( options || {} );\n        var collection = this;\n\n        // console.log( 'fetchMore, options.reset:', options.reset );\n        if( ( !options.reset && collection.allFetched ) ){\n            return jQuery.when();\n        }\n\n        // TODO: this fails in the edge case where\n        //  the first fetch offset === limit (limit 4, offset 4, collection.length 4)\n        options.offset = options.reset? 0 : ( options.offset || collection.lastFetched );\n        var limit = options.limit = options.limit || collection.limitPerFetch || null;\n        // console.log( 'fetchMore, limit:', limit, 'offset:', options.offset );\n\n        collection.trigger( 'fetching-more' );\n        return collection.fetch( options )\n            .always( function(){\n                collection.trigger( 'fetching-more-done' );\n            })\n            // maintain allFetched flag and trigger if all were fetched this time\n            .done( function _postFetchMore( fetchedData ){\n                var numFetched = _.isArray( fetchedData )? fetchedData.length : 0;\n                collection.lastFetched += numFetched;\n                // console.log( 'fetchMore, lastFetched:', collection.lastFetched );\n                // anything less than a full page means we got all there is to get\n                if( !limit || numFetched < limit ){\n                    collection.allFetched = true;\n                    collection.trigger( 'all-fetched', this );\n                }\n            }\n        );\n    },\n\n    /** fetch all the collection */\n    fetchAll : function( options ){\n        // whitelist options to prevent allowing limit/offset/filters\n        // (use vanilla fetch instead)\n        options = options || {};\n        var self = this;\n        options = _.pick( options, 'silent' );\n        options.filters = {};\n        return self.fetch( options ).done( function( fetchData ){\n            self.allFetched = true;\n            self.trigger( 'all-fetched', self );\n        });\n    },\n});\n\n\n//==============================================================================\n    return {\n        ControlledFetchCollection     : ControlledFetchCollection,\n        PaginatedCollection           : PaginatedCollection,\n        InfinitelyScrollingCollection : InfinitelyScrollingCollection,\n    };\n});\n"]}