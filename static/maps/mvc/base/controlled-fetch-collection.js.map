{"version":3,"sources":["mvc/base/controlled-fetch-collection.js"],"names":["_","Backbone","ControlledFetchCollection","Collection","extend","initialize","models","options","prototype","call","this","setOrder","order","silent","_setUpListeners","on","changed-order","sort","fetch","_buildFetchOptions","Galaxy","debug","self","clone","traditional","data","_buildFetchData","filters","_buildFetchFilters","isEmpty","_fetchFiltersToAjaxData","defaults","_fetchParams","filterMap","qv","v","pick","q","push","k","reset","allFetched","comparators","update_time","undefined","ascending","update_time-asc","_baseMvc2","default","buildComparator","create_time","create_time-asc","collection","comparator","trigger","PaginatedCollection","limitPerPage","currentPage","Error","getTotalItemCount","length","Math","floor","getPageCount","getLastPage","getPageLimitOffset","pageNum","constrainPageNum","limit","max","min","fetchPage","shouldPaginate","fetchCurrentPage","fetchPrevPage","fetchNextPage","limitOnFirstFetch","limitPerFetch","lastFetched","InfinitelyScrollingCollection","fetchFirst","remove","offset","fetchMore","jQuery","always","fetchedData","isArray","numFetched","fetchAll","done"],"mappings":"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","file":"../../../scripts/mvc/base/controlled-fetch-collection.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport BASE_MVC from \"mvc/base-mvc\";\n\n//=============================================================================\n/**\n * A Collection that can be limited/offset/re-ordered/filtered.\n * @type {Backbone.Collection}\n */\nvar ControlledFetchCollection = Backbone.Collection.extend({\n    /** call setOrder on initialization to build the comparator based on options */\n    initialize: function(models, options) {\n        Backbone.Collection.prototype.initialize.call(this, models, options);\n        this.setOrder(options.order || this.order, { silent: true });\n    },\n\n    /** set up to track order changes and re-sort when changed */\n    _setUpListeners: function() {\n        return this.on({\n            \"changed-order\": this.sort\n        });\n    },\n\n    /** override to provide order and offsets based on instance vars, set limit if passed,\n     *  and set allFetched/fire 'all-fetched' when xhr returns\n     */\n    fetch: function(options) {\n        options = this._buildFetchOptions(options);\n        Galaxy.debug(\"fetch options:\", options);\n        return Backbone.Collection.prototype.fetch.call(this, options);\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions: function(options) {\n        // note: we normally want options passed in to override the defaults built here\n        // so most of these fns will generate defaults\n        options = _.clone(options) || {};\n        var self = this;\n\n        // jquery ajax option; allows multiple q/qv for filters (instead of 'q[]')\n        options.traditional = true;\n\n        // options.data\n        // we keep limit, offset, etc. in options *as well as move it into data* because:\n        // - it makes fetch calling convenient to add it to a single options map (instead of as mult. args)\n        // - it allows the std. event handlers (for fetch, etc.) to have access\n        //   to the pagination options too\n        //      (i.e. this.on( 'sync', function( options ){ if( options.limit ){ ... } }))\n        // however, when we send to xhr/jquery we copy them to data also so that they become API query params\n        options.data = options.data || self._buildFetchData(options);\n        Galaxy.debug(\"data:\", options.data);\n\n        // options.data.filters --> options.data.q, options.data.qv\n        var filters = this._buildFetchFilters(options);\n        Galaxy.debug(\"filters:\", filters);\n        if (!_.isEmpty(filters)) {\n            _.extend(options.data, this._fetchFiltersToAjaxData(filters));\n        }\n        Galaxy.debug(\"data:\", options.data);\n        return options;\n    },\n\n    /** Build the dictionary to send to fetch's XHR as data */\n    _buildFetchData: function(options) {\n        var defaults = {};\n        if (this.order) {\n            defaults.order = this.order;\n        }\n        return _.defaults(_.pick(options, this._fetchParams), defaults);\n    },\n\n    /** These attribute keys are valid params to fetch/API-index */\n    _fetchParams: [\n        /** model dependent string to control the order of models returned */\n        \"order\",\n        /** limit the number of models returned from a fetch */\n        \"limit\",\n        /** skip this number of models when fetching */\n        \"offset\",\n        /** what series of attributes to return (model dependent) */\n        \"view\",\n        /** individual keys to return for the models (see api/histories.index) */\n        \"keys\"\n    ],\n\n    /** add any needed filters here based on collection state */\n    _buildFetchFilters: function(options) {\n        // override\n        return _.clone(options.filters || {});\n    },\n\n    /** Convert dictionary filters to qqv style arrays */\n    _fetchFiltersToAjaxData: function(filters) {\n        // return as a map so ajax.data can extend from it\n        var filterMap = {\n            q: [],\n            qv: []\n        };\n        _.each(filters, (v, k) => {\n            // don't send if filter value is empty\n            if (v === undefined || v === \"\") {\n                return;\n            }\n            // json to python\n            if (v === true) {\n                v = \"True\";\n            }\n            if (v === false) {\n                v = \"False\";\n            }\n            if (v === null) {\n                v = \"None\";\n            }\n            // map to k/v arrays (q/qv)\n            filterMap.q.push(k);\n            filterMap.qv.push(v);\n        });\n        return filterMap;\n    },\n\n    /** override to reset allFetched flag to false */\n    reset: function(models, options) {\n        this.allFetched = false;\n        return Backbone.Collection.prototype.reset.call(this, models, options);\n    },\n\n    // ........................................................................ order\n    order: null,\n\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: {\n        update_time: BASE_MVC.buildComparator(\"update_time\", {\n            ascending: false\n        }),\n        \"update_time-asc\": BASE_MVC.buildComparator(\"update_time\", {\n            ascending: true\n        }),\n        create_time: BASE_MVC.buildComparator(\"create_time\", {\n            ascending: false\n        }),\n        \"create_time-asc\": BASE_MVC.buildComparator(\"create_time\", {\n            ascending: true\n        })\n    },\n\n    /** set the order and comparator for this collection then sort with the new order\n     *  @event 'changed-order' passed the new order and the collection\n     */\n    setOrder: function(order, options) {\n        options = options || {};\n        var collection = this;\n        var comparator = collection.comparators[order];\n        if (_.isUndefined(comparator)) {\n            throw new Error(`unknown order: ${order}`);\n        }\n        // if( _.isUndefined( comparator ) ){ return; }\n        if (comparator === collection.comparator) {\n            return;\n        }\n\n        collection.order = order;\n        collection.comparator = comparator;\n\n        if (!options.silent) {\n            collection.trigger(\"changed-order\", options);\n        }\n        return collection;\n    }\n});\n\n//=============================================================================\n/**\n *\n */\nvar PaginatedCollection = ControlledFetchCollection.extend({\n    /** @type {Number} limit used for each page's fetch */\n    limitPerPage: 500,\n\n    initialize: function(models, options) {\n        ControlledFetchCollection.prototype.initialize.call(\n            this,\n            models,\n            options\n        );\n        this.currentPage = options.currentPage || 0;\n    },\n\n    getTotalItemCount: function() {\n        return this.length;\n    },\n\n    shouldPaginate: function() {\n        return this.getTotalItemCount() >= this.limitPerPage;\n    },\n\n    getLastPage: function() {\n        return Math.floor(this.getTotalItemCount() / this.limitPerPage);\n    },\n\n    getPageCount: function() {\n        return this.getLastPage() + 1;\n    },\n\n    getPageLimitOffset: function(pageNum) {\n        pageNum = this.constrainPageNum(pageNum);\n        return {\n            limit: this.limitPerPage,\n            offset: pageNum * this.limitPerPage\n        };\n    },\n\n    constrainPageNum: function(pageNum) {\n        return Math.max(0, Math.min(pageNum, this.getLastPage()));\n    },\n\n    /** fetch the next page of data */\n    fetchPage: function(pageNum, options) {\n        var self = this;\n        pageNum = self.constrainPageNum(pageNum);\n        self.currentPage = pageNum;\n        options = _.defaults(options || {}, self.getPageLimitOffset(pageNum));\n\n        self.trigger(\"fetching-more\");\n        return self.fetch(options).always(() => {\n            self.trigger(\"fetching-more-done\");\n        });\n    },\n\n    fetchCurrentPage: function(options) {\n        return this.fetchPage(this.currentPage, options);\n    },\n\n    fetchPrevPage: function(options) {\n        return this.fetchPage(this.currentPage - 1, options);\n    },\n\n    fetchNextPage: function(options) {\n        return this.fetchPage(this.currentPage + 1, options);\n    }\n});\n\n//=============================================================================\n/**\n * A Collection that will load more elements without reseting.\n */\nvar InfinitelyScrollingCollection = ControlledFetchCollection.extend({\n    /** @type {Number} limit used for the first fetch (or a reset) */\n    limitOnFirstFetch: null,\n    /** @type {Number} limit used for each subsequent fetch */\n    limitPerFetch: 100,\n\n    initialize: function(models, options) {\n        ControlledFetchCollection.prototype.initialize.call(\n            this,\n            models,\n            options\n        );\n        /** @type {Integer} number of contents to return from the first fetch */\n        this.limitOnFirstFetch =\n            options.limitOnFirstFetch || this.limitOnFirstFetch;\n        /** @type {Integer} limit for every fetch after the first */\n        this.limitPerFetch = options.limitPerFetch || this.limitPerFetch;\n        /** @type {Boolean} are all contents fetched? */\n        this.allFetched = false;\n        /** @type {Integer} what was the offset of the last content returned */\n        this.lastFetched = options.lastFetched || 0;\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions: function(options) {\n        // options (options for backbone.fetch and jquery.ajax generally)\n        // backbone option; false here to make fetching an addititive process\n        options.remove = options.remove || false;\n        return ControlledFetchCollection.prototype._buildFetchOptions.call(\n            this,\n            options\n        );\n    },\n\n    /** fetch the first 'page' of data */\n    fetchFirst: function(options) {\n        Galaxy.debug(\"ControlledFetchCollection.fetchFirst:\", options);\n        options = options ? _.clone(options) : {};\n        this.allFetched = false;\n        this.lastFetched = 0;\n        return this.fetchMore(\n            _.defaults(options, {\n                reset: true,\n                limit: this.limitOnFirstFetch\n            })\n        );\n    },\n\n    /** fetch the next page of data */\n    fetchMore: function(options) {\n        Galaxy.debug(\"ControlledFetchCollection.fetchMore:\", options);\n        options = _.clone(options || {});\n        var collection = this;\n\n        Galaxy.debug(\"fetchMore, options.reset:\", options.reset);\n        if (!options.reset && collection.allFetched) {\n            return jQuery.when();\n        }\n\n        // TODO: this fails in the edge case where\n        //  the first fetch offset === limit (limit 4, offset 4, collection.length 4)\n        if (options.reset) {\n            options.offset = 0;\n        } else if (options.offset === undefined) {\n            options.offset = collection.lastFetched;\n        }\n        var limit = (options.limit =\n            options.limit || collection.limitPerFetch || null);\n        Galaxy.debug(\"fetchMore, limit:\", limit, \"offset:\", options.offset);\n\n        collection.trigger(\"fetching-more\");\n        return (\n            collection\n                .fetch(options)\n                .always(() => {\n                    collection.trigger(\"fetching-more-done\");\n                })\n                // maintain allFetched flag and trigger if all were fetched this time\n                .done(function _postFetchMore(fetchedData) {\n                    var numFetched = _.isArray(fetchedData)\n                        ? fetchedData.length\n                        : 0;\n                    collection.lastFetched += numFetched;\n                    Galaxy.debug(\n                        \"fetchMore, lastFetched:\",\n                        collection.lastFetched\n                    );\n                    // anything less than a full page means we got all there is to get\n                    if (!limit || numFetched < limit) {\n                        collection.allFetched = true;\n                        collection.trigger(\"all-fetched\", this);\n                    }\n                })\n        );\n    },\n\n    /** fetch all the collection */\n    fetchAll: function(options) {\n        // whitelist options to prevent allowing limit/offset/filters\n        // (use vanilla fetch instead)\n        options = options || {};\n        var self = this;\n        options = _.pick(options, \"silent\");\n        options.filters = {};\n        return self.fetch(options).done(() => {\n            self.allFetched = true;\n            self.trigger(\"all-fetched\", self);\n        });\n    }\n});\n\n//==============================================================================\nexport default {\n    ControlledFetchCollection: ControlledFetchCollection,\n    PaginatedCollection: PaginatedCollection,\n    InfinitelyScrollingCollection: InfinitelyScrollingCollection\n};\n"]}