{"version":3,"sources":["mvc/base/controlled-fetch-collection.js"],"names":["ControlledFetchCollection","_backbone2","default","Collection","extend","initialize","models","options","prototype","call","this","setOrder","order","silent","_setUpListeners","on","changed-order","sort","_buildFetchOptions","Galaxy","debug","fetch","self","_underscore2","clone","traditional","data","_buildFetchData","filters","_buildFetchFilters","_fetchFiltersToAjaxData","defaults","pick","_fetchParams","filterMap","q","qv","each","v","k","undefined","push","reset","comparators","update_time","buildComparator","ascending","update_time-asc","_baseMvc2","create_time","create_time-asc","collection","Error","comparator","limitPerPage","trigger","currentPage","getTotalItemCount","PaginatedCollection","shouldPaginate","getLastPage","Math","floor","getPageCount","getPageLimitOffset","pageNum","constrainPageNum","limit","offset","max","min","always","fetchNextPage","fetchPage","InfinitelyScrollingCollection","limitOnFirstFetch","limitPerFetch","allFetched","lastFetched","remove","fetchFirst","fetchMore","jQuery","numFetched","done","fetchedData","fetchAll"],"mappings":"gOASIA,EAA4BC,EAAAC,QAASC,WAAWC,QAEhDC,WAAY,SAASC,EAAQC,GACzBN,EAAAC,QAASC,WAAWK,UAAUH,WAAWI,KAAKC,KAAMJ,EAAQC,GAC5DG,KAAKC,SAASJ,EAAQK,OAASF,KAAKE,OAASC,QAAQ,KAIzDC,gBAAiB,WACb,OAAOJ,KAAKK,IAdpBC,gBAAAN,KAAAO,QAOIZ,MAAAA,SAAYE,GAGX,OAFGA,EAAAG,KAAAQ,mBAAoBV,GACpBW,OAAAC,MAAKT,iBAASJ,GAJqCN,EAAAC,QAAAC,WAAAK,UAAAa,MAAAZ,KAAAC,KAAAH,IASnDW,mBAAYH,SAAGR,GAmBf,IAAIe,EAAOZ,MAhBdH,EAZsDgB,EAAArB,QAAAsB,MAAAjB,QA+B3CkB,aAAc,EANtBlB,EAAAmB,KAAAnB,EAAAmB,MAAAJ,EAAAK,gBAAApB,GACAY,OAAAC,MAAA,QAAAb,EAAAmB,MAkBA,IAAIE,EAAUlB,KAAKmB,mBAAmBtB,GATtC,OALAY,OAAAC,MAAA,WAAAQ,GACArB,EAAAA,QAAAA,QAAQkB,IAgBJF,EAAArB,QAAEE,OAAOG,EAAQmB,KAAMhB,KAAKoB,wBAAwBF,IAbxDT,OAAAC,MAAA,QAAAb,EAAAmB,MACAnB,GAIAoB,gBAAA,SAAApB,GACAA,IAAAA,KAIA,OAHAY,KAAAA,QAgBIY,EAASnB,MAAQF,KAAKE,OAb1BW,EAAArB,QAAI0B,SAAUL,EAAArB,QAAA8B,KAAKH,EAAAA,KAAAA,cAAnBE,IAICE,cAED,QAiBA,QAbJN,SAEI,OAEC,QAILE,mBAAA,SAAAtB,GAEI,OAAAgB,EAAArB,QAAAsB,MAAAjB,EAAAqB,cAIAE,wBAAA,SAAAF,GAEA,IAAAM,GACAC,KACAC,OAsBI,OALJb,EAAArB,QAAEmC,KAAKT,EAAS,SAASU,EAAGC,QAZhCV,IAAAA,GAAoB,KAAAS,KAkBF,IAANA,IAbZA,EAAA,SAEI,IAAAA,IACIJ,EAAAA,SAEI,OAAJE,IAFJE,EAAA,QAMIJ,EAAII,EAAAA,KAAME,GACNN,EAAAE,GAAAK,KAAAH,MAEJJ,GAIAQ,MAAA,SAAIJ,EAAM/B,GAET,OADG+B,KAAAA,YAAI,EACPrC,EAAAC,QAAAC,WAAAK,UAAAkC,MAAAjC,KAAAC,KAAAJ,EAAAC,IAIDK,MAAA,KAGH+B,aACDC,YAAOV,EAAAA,QAAPW,gBAAA,eA5GmDC,WAAA,IA+GvDC,kBAAAC,EAAA9C,QAAA2C,gBAAA,eACAH,WAAO,IAEHO,YAAOD,EAAA9C,QAAA2C,gBAAS1C,eAlHmC2C,WAAA,IAqHvDI,kBAAAF,EAAA9C,QAAA2C,gBAAA,eACAjC,WAtHuD,KA6HnDD,SAAA,SAAAC,EAAAL,GACIuC,EAAAA,MADuD,IAAAK,EAJlDzC,KAOTuC,EAAaE,EAAAR,YAASE,GAClBC,GAAAA,EAAAA,QAAAA,YAAAA,GADiD,MAP5C,IAAAM,MAAA,kBAAAxC,GAUkD,GAAAyC,IAAxCF,EAAAE,WAYnB,OAQAF,EAAWvC,MAAQA,EACnBuC,EAAWE,WAAaA,EAZxB9C,EAAAA,QACA4C,EAAIA,QAAa,gBAAjB5C,GAEA4C,KAQAA,EAAWvC,EAAXR,QAgBJkD,aAAc,IAZNH,WAAAA,SAAAA,EAAWI,GACdvD,EAAAQ,UAAAH,WAAAI,KACDC,KACHJ,EA9JLC,GAiKAG,KAAA8C,YAAAjD,EAAAiD,aAAA,GAiBIC,kBAAmB,WAbnBC,OAAAA,KAAAA,QAiBAC,eAAgB,WAbhBtD,OAAAA,KAAYoD,qBAASnD,KAAQC,cAO5BqD,YAXsD,WAsBnD,OAAOC,KAAKC,MAAMpD,KAAK+C,oBAAsB/C,KAAK4C,eAPrDS,aAfsD,WA0BnD,OAAOrD,KAAKkD,cAAgB,GAP/BI,mBAnBsD,SAAAC,GAqBvDL,OASIK,EAAUvD,KAAKwD,iBAAiBD,IARhCE,MAAON,KAAKC,aAtBuCM,OAAAH,EAAAvD,KAAA4C,eA2BtDY,iBA3BsD,SAAAD,GAsCnD,OAAOJ,KAAKQ,IAAI,EAAGR,KAAKS,IAAIL,EAASvD,KAAKkD,iBANtCO,UAAAA,SAAOF,EAAKX,GACZc,IAAAA,EAAAA,KAMP,OARUH,EAAP3C,EAAA4C,iBAAAD,GAIH3C,EAnCsDkC,YAAAS,EA8CnD1D,EAAUgB,EAAArB,QAAE6B,SAASxB,MAAee,EAAK0C,mBAAmBC,IAR5D3C,EAAAiC,QAAOM,iBAtC4CvC,EAAAD,MAAAd,GAAAgE,OAAA,WAkD/CjD,EAAKiC,QAAQ,yBANjBU,iBAAU3C,SAAK4C,GACf5C,OAAAA,KAAKkC,UAAL9C,KAAmBuD,YAAnB1D,IAGAe,cAAKiC,SAAQhD,GACb,OAAAG,KAAOY,UAAWf,KAAAA,YAAgB,EAAAA,IAGrCiE,cApDsD,SAAAjE,GA+DnD,OAAOG,KAAK+D,UAAU/D,KAAK8C,YAAc,EAAGjD,MAQhDmE,EAAgC1E,EAA0BI,QARtDuE,kBAAO,KA/D4CC,cAA3D,IAmEAvE,WAAA,SAAAC,EAAAC,GACAP,EAAAQ,UAAAH,WAAAI,KAWYC,KACAJ,EATRoE,GAGAhE,KAAAiE,kBACAC,EAAAA,mBAJiElE,KAAAiE,kBAMjEtE,KAAAA,cAAYE,EAAAqE,eAAiBrE,KAASqE,cAMlClE,KAAAmE,YAAA,EAGAnE,KAAAoE,YAAAvE,EAAAuE,aAAA,GAIA5D,mBAAA,SAAAX,GAIJ,OAIIA,EAAQwE,OAASxE,EAAQwE,SAAU,EAJvC/E,EAAAQ,UAAAU,mBAAAT,KACAS,KACIX,IAUJyE,WAAY,SAASzE,GAGjB,OAJJY,OAAAC,MAAA,wCAAAb,GACAyE,EAAAA,EAAYzD,EAAArB,QAAAsB,MAAAjB,MACRY,KAAAA,YAAa,EACbZ,KAAAA,YAAUA,EACVG,KAAKmE,UACLtD,EAAArB,QAAA6B,SAAK+C,GACLpC,OAAO,EAECA,MAAOhC,KADSiE,sBAQ5BM,UAAAA,SAAW1E,GACPY,OAAAA,MAAOC,uCAAMb,GACbA,EAAAA,EAAAA,QAAAA,MAAUA,OACV,IAAA4C,EAAIA,KAGJ,GADAhC,OAAAA,MAAOC,4BAAMb,EAA6BA,QAC1CA,EAAKA,OAAD4C,EAAkBA,WAClB,OAAA+B,OAAOA,OAKX3E,EAAIA,MACAA,EAAAA,OAAQ6D,OACD5B,IAAJjC,EAAIA,SACPA,EAAAA,OAAQ6D,EAASjB,aAErB,IAAAgB,EAAIA,EAAS5D,MAEbY,EAAOC,OAAM+B,EAAAyB,eAA4B,KAO7BzB,OAPZhC,OAAOC,MAAM,oBAAqB+C,EAAO,UAAW5D,EAAQ6D,QAG5DjB,EACIA,QAAAA,iBAIKA,EACD9B,MAAAd,GALJgE,OAMU,WACEY,EAAAA,QAAa,wBAQjBC,KAAA,SAAAC,GACI,IAAClB,EAASgB,EAAAA,QAAAA,QAAahB,GACvBhB,EAAW0B,OACX1B,EACHA,EAAA2B,aAAAK,EApBbhE,OAAAC,MAvE6D,0BAqF7C+B,EAAW2B,eAa3BX,GAAAgB,EAAAhB,KACAhB,EAAA0B,YAAA,EACUtE,EAAVgD,QAAA,cAAA7C,UAOC4E,SAHD,SAAA/E,GAJAA,EAAUA,MAWlB,IAAAe,EAAAZ,KAGIgD,OAZInD,EAAUgB,EAAArB,QAAE8B,KAULzB,EAAA,UACXP,EAAAA,WACA0D,EAAAA,MAAAA,GAAqBA,KAAAA,WACrBgB,EAAAA,YAAAA,EATQpD,EAAKiC,QAAQ,cAAejC,mBAOpCtB,0BAA2BA,EAC3B0D,oBAAqBA,EACrBgB,8BAA+BA","file":"../../../scripts/mvc/base/controlled-fetch-collection.js","sourcesContent":["import _ from \"libs/underscore\";\nimport Backbone from \"libs/backbone\";\nimport BASE_MVC from \"mvc/base-mvc\";\n\n//=============================================================================\n/**\n * A Collection that can be limited/offset/re-ordered/filtered.\n * @type {Backbone.Collection}\n */\nvar ControlledFetchCollection = Backbone.Collection.extend({\n    /** call setOrder on initialization to build the comparator based on options */\n    initialize: function(models, options) {\n        Backbone.Collection.prototype.initialize.call(this, models, options);\n        this.setOrder(options.order || this.order, { silent: true });\n    },\n\n    /** set up to track order changes and re-sort when changed */\n    _setUpListeners: function() {\n        return this.on({\n            \"changed-order\": this.sort\n        });\n    },\n\n    /** override to provide order and offsets based on instance vars, set limit if passed,\n     *  and set allFetched/fire 'all-fetched' when xhr returns\n     */\n    fetch: function(options) {\n        options = this._buildFetchOptions(options);\n        Galaxy.debug(\"fetch options:\", options);\n        return Backbone.Collection.prototype.fetch.call(this, options);\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions: function(options) {\n        // note: we normally want options passed in to override the defaults built here\n        // so most of these fns will generate defaults\n        options = _.clone(options) || {};\n        var self = this;\n\n        // jquery ajax option; allows multiple q/qv for filters (instead of 'q[]')\n        options.traditional = true;\n\n        // options.data\n        // we keep limit, offset, etc. in options *as well as move it into data* because:\n        // - it makes fetch calling convenient to add it to a single options map (instead of as mult. args)\n        // - it allows the std. event handlers (for fetch, etc.) to have access\n        //   to the pagination options too\n        //      (i.e. this.on( 'sync', function( options ){ if( options.limit ){ ... } }))\n        // however, when we send to xhr/jquery we copy them to data also so that they become API query params\n        options.data = options.data || self._buildFetchData(options);\n        Galaxy.debug(\"data:\", options.data);\n\n        // options.data.filters --> options.data.q, options.data.qv\n        var filters = this._buildFetchFilters(options);\n        Galaxy.debug(\"filters:\", filters);\n        if (!_.isEmpty(filters)) {\n            _.extend(options.data, this._fetchFiltersToAjaxData(filters));\n        }\n        Galaxy.debug(\"data:\", options.data);\n        return options;\n    },\n\n    /** Build the dictionary to send to fetch's XHR as data */\n    _buildFetchData: function(options) {\n        var defaults = {};\n        if (this.order) {\n            defaults.order = this.order;\n        }\n        return _.defaults(_.pick(options, this._fetchParams), defaults);\n    },\n\n    /** These attribute keys are valid params to fetch/API-index */\n    _fetchParams: [\n        /** model dependent string to control the order of models returned */\n        \"order\",\n        /** limit the number of models returned from a fetch */\n        \"limit\",\n        /** skip this number of models when fetching */\n        \"offset\",\n        /** what series of attributes to return (model dependent) */\n        \"view\",\n        /** individual keys to return for the models (see api/histories.index) */\n        \"keys\"\n    ],\n\n    /** add any needed filters here based on collection state */\n    _buildFetchFilters: function(options) {\n        // override\n        return _.clone(options.filters || {});\n    },\n\n    /** Convert dictionary filters to qqv style arrays */\n    _fetchFiltersToAjaxData: function(filters) {\n        // return as a map so ajax.data can extend from it\n        var filterMap = {\n            q: [],\n            qv: []\n        };\n        _.each(filters, function(v, k) {\n            // don't send if filter value is empty\n            if (v === undefined || v === \"\") {\n                return;\n            }\n            // json to python\n            if (v === true) {\n                v = \"True\";\n            }\n            if (v === false) {\n                v = \"False\";\n            }\n            if (v === null) {\n                v = \"None\";\n            }\n            // map to k/v arrays (q/qv)\n            filterMap.q.push(k);\n            filterMap.qv.push(v);\n        });\n        return filterMap;\n    },\n\n    /** override to reset allFetched flag to false */\n    reset: function(models, options) {\n        this.allFetched = false;\n        return Backbone.Collection.prototype.reset.call(this, models, options);\n    },\n\n    // ........................................................................ order\n    order: null,\n\n    /** @type {Object} map of collection available sorting orders containing comparator fns */\n    comparators: {\n        update_time: BASE_MVC.buildComparator(\"update_time\", {\n            ascending: false\n        }),\n        \"update_time-asc\": BASE_MVC.buildComparator(\"update_time\", {\n            ascending: true\n        }),\n        create_time: BASE_MVC.buildComparator(\"create_time\", {\n            ascending: false\n        }),\n        \"create_time-asc\": BASE_MVC.buildComparator(\"create_time\", {\n            ascending: true\n        })\n    },\n\n    /** set the order and comparator for this collection then sort with the new order\n     *  @event 'changed-order' passed the new order and the collection\n     */\n    setOrder: function(order, options) {\n        options = options || {};\n        var collection = this;\n        var comparator = collection.comparators[order];\n        if (_.isUndefined(comparator)) {\n            throw new Error(\"unknown order: \" + order);\n        }\n        // if( _.isUndefined( comparator ) ){ return; }\n        if (comparator === collection.comparator) {\n            return;\n        }\n\n        collection.order = order;\n        collection.comparator = comparator;\n\n        if (!options.silent) {\n            collection.trigger(\"changed-order\", options);\n        }\n        return collection;\n    }\n});\n\n//=============================================================================\n/**\n *\n */\nvar PaginatedCollection = ControlledFetchCollection.extend({\n    /** @type {Number} limit used for each page's fetch */\n    limitPerPage: 500,\n\n    initialize: function(models, options) {\n        ControlledFetchCollection.prototype.initialize.call(\n            this,\n            models,\n            options\n        );\n        this.currentPage = options.currentPage || 0;\n    },\n\n    getTotalItemCount: function() {\n        return this.length;\n    },\n\n    shouldPaginate: function() {\n        return this.getTotalItemCount() >= this.limitPerPage;\n    },\n\n    getLastPage: function() {\n        return Math.floor(this.getTotalItemCount() / this.limitPerPage);\n    },\n\n    getPageCount: function() {\n        return this.getLastPage() + 1;\n    },\n\n    getPageLimitOffset: function(pageNum) {\n        pageNum = this.constrainPageNum(pageNum);\n        return {\n            limit: this.limitPerPage,\n            offset: pageNum * this.limitPerPage\n        };\n    },\n\n    constrainPageNum: function(pageNum) {\n        return Math.max(0, Math.min(pageNum, this.getLastPage()));\n    },\n\n    /** fetch the next page of data */\n    fetchPage: function(pageNum, options) {\n        var self = this;\n        pageNum = self.constrainPageNum(pageNum);\n        self.currentPage = pageNum;\n        options = _.defaults(options || {}, self.getPageLimitOffset(pageNum));\n\n        self.trigger(\"fetching-more\");\n        return self.fetch(options).always(function() {\n            self.trigger(\"fetching-more-done\");\n        });\n    },\n\n    fetchCurrentPage: function(options) {\n        return this.fetchPage(this.currentPage, options);\n    },\n\n    fetchPrevPage: function(options) {\n        return this.fetchPage(this.currentPage - 1, options);\n    },\n\n    fetchNextPage: function(options) {\n        return this.fetchPage(this.currentPage + 1, options);\n    }\n});\n\n//=============================================================================\n/**\n * A Collection that will load more elements without reseting.\n */\nvar InfinitelyScrollingCollection = ControlledFetchCollection.extend({\n    /** @type {Number} limit used for the first fetch (or a reset) */\n    limitOnFirstFetch: null,\n    /** @type {Number} limit used for each subsequent fetch */\n    limitPerFetch: 100,\n\n    initialize: function(models, options) {\n        ControlledFetchCollection.prototype.initialize.call(\n            this,\n            models,\n            options\n        );\n        /** @type {Integer} number of contents to return from the first fetch */\n        this.limitOnFirstFetch =\n            options.limitOnFirstFetch || this.limitOnFirstFetch;\n        /** @type {Integer} limit for every fetch after the first */\n        this.limitPerFetch = options.limitPerFetch || this.limitPerFetch;\n        /** @type {Boolean} are all contents fetched? */\n        this.allFetched = false;\n        /** @type {Integer} what was the offset of the last content returned */\n        this.lastFetched = options.lastFetched || 0;\n    },\n\n    /** build ajax data/parameters from options */\n    _buildFetchOptions: function(options) {\n        // options (options for backbone.fetch and jquery.ajax generally)\n        // backbone option; false here to make fetching an addititive process\n        options.remove = options.remove || false;\n        return ControlledFetchCollection.prototype._buildFetchOptions.call(\n            this,\n            options\n        );\n    },\n\n    /** fetch the first 'page' of data */\n    fetchFirst: function(options) {\n        Galaxy.debug(\"ControlledFetchCollection.fetchFirst:\", options);\n        options = options ? _.clone(options) : {};\n        this.allFetched = false;\n        this.lastFetched = 0;\n        return this.fetchMore(\n            _.defaults(options, {\n                reset: true,\n                limit: this.limitOnFirstFetch\n            })\n        );\n    },\n\n    /** fetch the next page of data */\n    fetchMore: function(options) {\n        Galaxy.debug(\"ControlledFetchCollection.fetchMore:\", options);\n        options = _.clone(options || {});\n        var collection = this;\n\n        Galaxy.debug(\"fetchMore, options.reset:\", options.reset);\n        if (!options.reset && collection.allFetched) {\n            return jQuery.when();\n        }\n\n        // TODO: this fails in the edge case where\n        //  the first fetch offset === limit (limit 4, offset 4, collection.length 4)\n        if (options.reset) {\n            options.offset = 0;\n        } else if (options.offset === undefined) {\n            options.offset = collection.lastFetched;\n        }\n        var limit = (options.limit =\n            options.limit || collection.limitPerFetch || null);\n        Galaxy.debug(\"fetchMore, limit:\", limit, \"offset:\", options.offset);\n\n        collection.trigger(\"fetching-more\");\n        return (\n            collection\n                .fetch(options)\n                .always(function() {\n                    collection.trigger(\"fetching-more-done\");\n                })\n                // maintain allFetched flag and trigger if all were fetched this time\n                .done(function _postFetchMore(fetchedData) {\n                    var numFetched = _.isArray(fetchedData)\n                        ? fetchedData.length\n                        : 0;\n                    collection.lastFetched += numFetched;\n                    Galaxy.debug(\n                        \"fetchMore, lastFetched:\",\n                        collection.lastFetched\n                    );\n                    // anything less than a full page means we got all there is to get\n                    if (!limit || numFetched < limit) {\n                        collection.allFetched = true;\n                        collection.trigger(\"all-fetched\", this);\n                    }\n                })\n        );\n    },\n\n    /** fetch all the collection */\n    fetchAll: function(options) {\n        // whitelist options to prevent allowing limit/offset/filters\n        // (use vanilla fetch instead)\n        options = options || {};\n        var self = this;\n        options = _.pick(options, \"silent\");\n        options.filters = {};\n        return self.fetch(options).done(function() {\n            self.allFetched = true;\n            self.trigger(\"all-fetched\", self);\n        });\n    }\n});\n\n//==============================================================================\nexport default {\n    ControlledFetchCollection: ControlledFetchCollection,\n    PaginatedCollection: PaginatedCollection,\n    InfinitelyScrollingCollection: InfinitelyScrollingCollection\n};\n"]}