{"version":3,"sources":["galaxy.interactive_environments.js"],"names":["test_ie_availability","$","load_when_ready","children","remove","append_notebook","clear_main_area","galaxy_root","make_spin_state","type","ajax_timeout_init","ajax_timeout_max","sleep_init","sleep_max","sleep_step","log_attempts","ajax_timeout","ajax_timeout_step","sleep","count","toastr","console_msg","user_msg","clear","closeButton","timeOut","extendedTimeOut","tapToDismiss","spin_again","spin_state","console","log","window","setTimeout","spinner","timeout","success","success_callback","error","ajax_params","url","withCredentials","jqxhr","error_callback","status","timeout_callback","message_once","message","ajax","messages","spin_error","display_spinner","timeout_error","wait_warn","spin_until","spin","bool_response","data","not_ready","unknown_response","waiting"],"mappings":"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","file":"../scripts/galaxy.interactive_environments.js","sourcesContent":["/**\n * Internal function to remove content from the main area and add the notebook.\n * Not idempotent\n * TODO: This isn't just internal, some notebooks are calling it?\n */\nexport function append_notebook(url) {\n    clear_main_area();\n    $(\"#main\").append(\n        `<iframe frameBorder=\"0\" seamless=\"seamless\" style=\"width: 100%; height: 100%; overflow:hidden;\" scrolling=\"no\" src=\"${url}\"></iframe>`\n    );\n}\n\nexport function clear_main_area() {\n    $(\"#spinner\").remove();\n    $(\"#main\")\n        .children()\n        .remove();\n}\n\nexport function display_spinner() {\n    $(\"#main\").append(\n        `<img id=\"spinner\" src=\"${galaxy_root}static/style/largespinner.gif\" style=\"position:absolute;margin:auto;top:0;left:0;right:0;bottom:0;\">`\n    );\n}\n\n/* Create a spin_state object used by spin() and spin_again() */\nexport function make_spin_state(\n    type,\n    ajax_timeout_init,\n    ajax_timeout_max,\n    ajax_timeout_step,\n    sleep_init,\n    sleep_max,\n    sleep_step,\n    log_attempts\n) {\n    var s = {\n        type: typeof type !== \"undefined\" ? type : \"GIE spin\",\n        ajax_timeout:\n            typeof ajax_timeout_init !== \"undefined\" ? ajax_timeout_init : 2000,\n        ajax_timeout_max:\n            typeof ajax_timeout_max !== \"undefined\" ? ajax_timeout_max : 16000,\n        ajax_timeout_step:\n            typeof ajax_timeout_step !== \"undefined\" ? ajax_timeout_step : 500,\n        sleep: typeof sleep_init !== \"undefined\" ? sleep_init : 500,\n        sleep_max: typeof sleep_max !== \"undefined\" ? sleep_max : 8000,\n        sleep_step: typeof sleep_step !== \"undefined\" ? sleep_step : 100,\n        log_attempts: typeof log_attempts !== \"undefined\" ? log_attempts : true,\n        count: 0\n    };\n    return s;\n}\n\n/* Log/display an error when spinning fails. */\nexport function spin_error(console_msg, user_msg, clear) {\n    console.log(console_msg);\n    if (clear) clear_main_area();\n    if (typeof user_msg == \"string\") {\n        toastr.clear();\n        toastr.error(user_msg, \"Error\", {\n            closeButton: true,\n            timeOut: 0,\n            extendedTimeOut: 0,\n            tapToDismiss: false\n        });\n    }\n}\n\n/* Increase sleep time and spin again. */\nfunction spin_again(spin_state) {\n    if (spin_state.sleep < spin_state.sleep_max) {\n        spin_state.sleep += spin_state.sleep_step;\n    }\n    if (spin_state.log_attempts) {\n        console.log(\n            `${spin_state.type} request ${spin_state.count} request timeout ${spin_state.ajax_timeout}ms sleeping ${spin_state.sleep /\n                1000}s`\n        );\n    }\n    window.setTimeout(spin_state.spinner, spin_state.sleep);\n}\n\n/*\n * Spin on a URL as long as it times out, otherwise, call the provided success or error callback. If the callback\n * returns `true`, the condition is considered \"resolved\" and spinning stops. Otherwise, continue spinning, increasing\n * AJAX timeouts and/or sleep values as configured in the spin_state.\n */\nexport function spin(\n    url,\n    bool_response,\n    success_callback,\n    timeout_callback,\n    error_callback,\n    spin_state\n) {\n    var spinner = () => {\n        var ajax_params = {\n            url: url,\n            xhrFields: {\n                withCredentials: true\n            },\n            type: \"GET\",\n            timeout: spin_state.ajax_timeout,\n            success: function(data, status, jqxhr) {\n                if (!success_callback(data, status, jqxhr)) {\n                    spin_state.count++;\n                    spin_again(spin_state);\n                }\n            },\n            error: function(jqxhr, status, error) {\n                if (status == \"timeout\") {\n                    if (spin_state.ajax_timeout < spin_state.ajax_timeout_max) {\n                        spin_state.ajax_timeout += spin_state.ajax_timeout_step;\n                    }\n                    spin_state.count++;\n                    if (!timeout_callback(jqxhr, status, error))\n                        spin_again(spin_state);\n                } else {\n                    spin_state.count++;\n                    if (!error_callback(jqxhr, status, error))\n                        spin_again(spin_state);\n                }\n            }\n        };\n        if (bool_response) ajax_params[\"dataType\"] = \"json\";\n        $.ajax(ajax_params);\n    };\n    console.log(`Setting up new spinner for ${spin_state.type} on ${url}`);\n    spin_state.spinner = spinner;\n    window.setTimeout(spinner, spin_state.sleep);\n}\n\n/*\n * Spin on a URL forever until there is an acceptable response. \n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK).\n * @param {Boolean} bool_response: If set to `true`, do not stop spinning until the response is `true`. Otherwise, stop\n *     as soon as a successful response is received.\n */\nfunction spin_until(\n    url,\n    bool_response,\n    messages,\n    success_callback,\n    spin_state\n) {\n    var warn_at = 40; // ~2 mins\n    var message_once = (message, spin_state) => {\n        if (spin_state.count == 1) {\n            display_spinner();\n            toastr.info(message, null, {\n                closeButton: true,\n                timeOut: 0,\n                extendedTimeOut: 0,\n                tapToDismiss: false\n            });\n        }\n    };\n    var wrapped_success = data => {\n        if (!bool_response || (bool_response && data == true)) {\n            console.log(messages[\"success\"]);\n            clear_main_area();\n            toastr.clear();\n            success_callback();\n        } else if (bool_response && data == false) {\n            message_once(messages[\"not_ready\"], spin_state);\n            return false; // keep spinning\n        } else {\n            spin_error(\n                `Invalid response to ${spin_state.type} request`,\n                messages[\"invalid_response\"],\n                true\n            );\n        }\n        return true; // stop spinning\n    };\n    var timeout_error = (jqxhr, status, error) => {\n        message_once(messages[\"waiting\"], spin_state);\n        if (spin_state.count == warn_at) {\n            toastr.warning(messages[\"wait_warn\"], \"Warning\", {\n                closeButton: true,\n                timeOut: 0,\n                extendedTimeOut: 0,\n                tapToDismiss: false\n            });\n        }\n        return false; // keep spinning\n    };\n    spin(\n        url,\n        bool_response,\n        wrapped_success,\n        timeout_error,\n        timeout_error,\n        spin_state\n    );\n}\n\n/**\n * Test availability of a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test availability of. Must return a 200 (302->200 is OK).\n * @param {String} callback: function to call once successfully connected.\n *\n */\nexport function test_ie_availability(url, success_callback) {\n    var messages = {\n        success: \"IE connection succeeded, returning\",\n        waiting:\n            \"Interactive environment container is running, attempting to connect to the IE. Please wait...\",\n        wait_warn:\n            \"It is taking an usually long time to connect to the interactive environment. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error:\n            \"An error was encountered while attempting to connect to the interactive environment, contact your administrator.\"\n    };\n    var spin_state = make_spin_state(\"IE availability\");\n    spin_until(url, false, messages, success_callback, spin_state);\n}\n\n/**\n * Test a boolean (json) response from a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK) and either `true` or `false`.\n * @param {String} callback: function to call once successfully connected.\n *\n */\nexport function load_when_ready(url, success_callback) {\n    var messages = {\n        success: \"Galaxy reports IE container ready, returning\",\n        not_ready:\n            \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        unknown_response:\n            \"Galaxy failed to launch a container in which to run this interactive environment, contact a Galaxy administrator.\",\n        waiting:\n            \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        wait_warn:\n            \"It is taking an usually long time to start a container. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error:\n            \"Galaxy encountered an error while attempting to determine the readiness of this interactive environment's container, contact a Galaxy administrator.\"\n    };\n    var spin_state = make_spin_state(\"IE container readiness\");\n    spin_until(url, true, messages, success_callback, spin_state);\n}\n"]}