{"version":3,"sources":["galaxy.interactive_environments.js"],"names":["append_notebook","url","clear_main_area","$","children","remove","display_spinner","galaxy_root","make_spin_state","type","ajax_timeout_init","ajax_timeout_max","ajax_timeout_step","sleep_init","sleep_max","sleep_step","log_attempts","ajax_timeout","sleep","count","console","console_msg","user_msg","clear","toastr","error","closeButton","timeOut","extendedTimeOut","tapToDismiss","spin_again","spin_state","window","setTimeout","spinner","log","bool_response","success_callback","timeout_callback","error_callback","timeout","success","xhrFields","data","status","jqxhr","ajax_params","ajax","wrapped_success","messages","message","message_once","timeout_error","unknown_response","warning","load_when_ready","wait_warn","spin_error","spin_until","waiting","test_ie_availability"],"mappings":"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","file":"../scripts/galaxy.interactive_environments.js","sourcesContent":["/**\n * Internal function to remove content from the main area and add the notebook.\n * Not idempotent\n */\nfunction append_notebook(url){\n    clear_main_area();\n    $('#main').append('<iframe frameBorder=\"0\" seamless=\"seamless\" style=\"width: 100%; height: 100%; overflow:hidden;\" scrolling=\"no\" src=\"'+ url +'\"></iframe>'\n    );\n}\n\nfunction clear_main_area(){\n    $('#spinner').remove();\n    $('#main').children().remove();\n}\n\nfunction display_spinner(){\n        $('#main').append('<img id=\"spinner\" src=\"' + galaxy_root + 'static/style/largespinner.gif\" style=\"position:absolute;margin:auto;top:0;left:0;right:0;bottom:0;\">');\n}\n\n\n/* Create a spin_state object used by spin() and spin_again() */\nfunction make_spin_state(type, ajax_timeout_init, ajax_timeout_max, ajax_timeout_step, sleep_init, sleep_max, sleep_step, log_attempts){\n    var s = {\n        type: (typeof type !== 'undefined') ? type : \"GIE spin\",\n        ajax_timeout: (typeof ajax_timeout_init !== 'undefined') ? ajax_timeout_init : 2000,\n        ajax_timeout_max: (typeof ajax_timeout_max !== 'undefined') ? ajax_timeout_max : 16000,\n        ajax_timeout_step: (typeof ajax_timeout_step !== 'undefined') ? ajax_timeout_step : 500,\n        sleep: (typeof sleep_init !== 'undefined') ? sleep_init : 500,\n        sleep_max: (typeof sleep_max !== 'undefined') ? sleep_max : 8000,\n        sleep_step: (typeof sleep_step !== 'undefined') ? sleep_step : 100,\n        log_attempts: (typeof log_attempts !== 'undefined') ? log_attempts : true,\n        count: 0,\n    }\n    return s;\n}\n\n\n/* Log/display an error when spinning fails. */\nfunction spin_error(console_msg, user_msg, clear){\n    console.log(console_msg);\n    if(clear) clear_main_area();\n    if(typeof user_msg == \"string\"){\n        toastr.clear();\n        toastr.error(\n            user_msg,\n            \"Error\",\n            {'closeButton': true, 'timeOut': 0, 'extendedTimeOut': 0, 'tapToDismiss': false}\n        );\n    }\n}\n\n\n/* Increase sleep time and spin again. */\nfunction spin_again(spin_state){\n    if(spin_state.sleep < spin_state.sleep_max){\n        spin_state.sleep += spin_state.sleep_step;\n    }\n    if(spin_state.log_attempts){\n        console.log(spin_state.type + \" request \" + spin_state.count + \" request timeout \" + spin_state.ajax_timeout + \"ms sleeping \" + spin_state.sleep / 1000 + \"s\");\n    }\n    window.setTimeout(spin_state.spinner, spin_state.sleep);\n}\n\n\n/*\n * Spin on a URL as long as it times out, otherwise, call the provided success or error callback. If the callback\n * returns `true`, the condition is considered \"resolved\" and spinning stops. Otherwise, continue spinning, increasing\n * AJAX timeouts and/or sleep values as configured in the spin_state.\n */\nfunction spin(url, bool_response, success_callback, timeout_callback, error_callback, spin_state){\n    var spinner = function(){\n        var ajax_params = {\n            url: url,\n            xhrFields: {\n                withCredentials: true\n            },\n            type: \"GET\",\n            timeout: spin_state.ajax_timeout,\n            success: function(data, status, jqxhr){\n                if(!success_callback(data, status, jqxhr)) spin_again(spin_state);\n            },\n            error: function(jqxhr, status, error){\n                if(status == \"timeout\"){\n                    if(spin_state.ajax_timeout < spin_state.ajax_timeout_max){\n                        spin_state.ajax_timeout += spin_state.ajax_timeout_step;\n                    }\n                    spin_state.count++;\n                    if(!timeout_callback(jqxhr, status, error)) spin_again(spin_state);\n                }else{\n                    spin_state.count++;\n                    if(!error_callback(jqxhr, status, error)) spin_again(spin_state);\n                }\n            },\n        }\n        if(bool_response) ajax_params[\"dataType\"] = \"json\";\n        $.ajax(ajax_params);\n    }\n    console.log(\"Setting up new spinner for \" + spin_state.type + \" on \" + url);\n    spin_state.spinner = spinner;\n    window.setTimeout(spinner, spin_state.sleep);\n}\n\n\n/*\n * Spin on a URL forever until there is an acceptable response. \n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK).\n * @param {Boolean} bool_response: If set to `true`, do not stop spinning until the response is `true`. Otherwise, stop\n *     as soon as a successful response is received.\n */\nfunction spin_until(url, bool_response, messages, success_callback, spin_state){\n    var warn_at = 40;  // ~2 mins\n    var message_once = function(message, spin_state){\n        if(spin_state.count == 1){\n            display_spinner();\n            toastr.info(\n                message,\n                null,\n                {'closeButton': true, 'timeOut': 0, 'extendedTimeOut': 0, 'tapToDismiss': false}\n            );\n        }\n    }\n    var wrapped_success = function(data){\n        if(!bool_response || (bool_response && data == true)){\n            console.log(messages[\"success\"]);\n            clear_main_area();\n            toastr.clear();\n            success_callback();\n        }else if(bool_response && data == false){\n            message_once(messages[\"not_ready\"], spin_state);\n            return false;  // keep spinning\n        }else{\n            spin_error(\"Invalid response to \" + spin_state.type + \" request\", messages[\"invalid_response\"], true);\n        }\n        return true;  // stop spinning\n    }\n    var timeout_error = function(jqxhr, status, error){\n        message_once(messages[\"waiting\"], spin_state)\n        if(spin_state.count == warn_at){\n            toastr.warning(\n                messages[\"wait_warn\"],\n                \"Warning\",\n                {'closeButton': true, 'timeOut': 0, 'extendedTimeOut': 0, 'tapToDismiss': false}\n            );\n        }\n        return false; // keep spinning\n    }\n    spin(\n        url,\n        bool_response,\n        wrapped_success,\n        timeout_error,\n        timeout_error,\n        spin_state\n    );\n}\n\n\n/**\n * Test a boolean (json) response from a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK) and either `true` or `false`.\n * @param {String} callback: function to call once successfully connected.\n *\n */\nfunction load_when_ready(url, success_callback){\n    var messages = {\n        success: \"Galaxy reports IE container ready, returning\",\n        not_ready: \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        unknown_response: \"Galaxy failed to launch a container in which to run this interactive environment, contact a Galaxy administrator.\",\n        waiting: \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        wait_warn: \"It is taking an usually long time to start a container. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error: \"Galaxy encountered an error while attempting to determine the readiness of this interactive environment's container, contact a Galaxy administrator.\"\n    }\n    var spin_state = make_spin_state(\"IE container readiness\");\n    spin_until(url, true, messages, success_callback, spin_state);\n}\n\n\n/**\n * Test availability of a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test availability of. Must return a 200 (302->200 is OK).\n * @param {String} callback: function to call once successfully connected.\n *\n */\nfunction test_ie_availability(url, success_callback){\n    var messages = {\n        success: \"IE connection succeeded, returning\",\n        waiting: \"Interactive environment container is running, attempting to connect to the IE. Please wait...\",\n        wait_warn: \"It is taking an usually long time to connect to the interactive environment. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error: \"An error was encountered while attempting to connect to the interactive environment, contact your administrator.\"\n    }\n    var spin_state = make_spin_state(\"IE availability\");\n    spin_until(url, false, messages, success_callback, spin_state);\n}\n"]}