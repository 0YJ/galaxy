{"version":3,"sources":["galaxy.interactive_environments.js"],"names":["clear_main_area","$","children","remove","append","galaxy_root","make_spin_state","type","ajax_timeout_init","ajax_timeout","ajax_timeout_max","ajax_timeout_step","sleep","sleep_max","timeOut","count","user_msg","spin_error","console","console_msg","sleep_init","sleep_step","toastr","log_attempts","clear","log","spin_again","spin_state","url","spinner","ajax_params","window","setTimeout","spin","error","bool_response","success_callback","error_callback","xhrFields","withCredentials","success","data","status","jqxhr","messages","display_spinner","info","tapToDismiss","ajax","wrapped_success","message_once","closeButton","extendedTimeOut","timeout_error","not_ready","warning","load_when_ready","waiting","wait_warn","test_ie_availability","spin_until","unknown_response"],"mappings":"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","file":"../scripts/galaxy.interactive_environments.js","sourcesContent":["/**\n * Internal function to remove content from the main area and add the notebook.\n * Not idempotent\n */\nfunction append_notebook(url) {\n    clear_main_area();\n    $(\"#main\").append(\n        `<iframe frameBorder=\"0\" seamless=\"seamless\" style=\"width: 100%; height: 100%; overflow:hidden;\" scrolling=\"no\" src=\"${url}\"></iframe>`\n    );\n}\n\nfunction clear_main_area() {\n    $(\"#spinner\").remove();\n    $(\"#main\")\n        .children()\n        .remove();\n}\n\nfunction display_spinner() {\n    $(\"#main\").append(\n        `<img id=\"spinner\" src=\"${galaxy_root}static/style/largespinner.gif\" style=\"position:absolute;margin:auto;top:0;left:0;right:0;bottom:0;\">`\n    );\n}\n\n/* Create a spin_state object used by spin() and spin_again() */\nfunction make_spin_state(\n    type,\n    ajax_timeout_init,\n    ajax_timeout_max,\n    ajax_timeout_step,\n    sleep_init,\n    sleep_max,\n    sleep_step,\n    log_attempts\n) {\n    var s = {\n        type: typeof type !== \"undefined\" ? type : \"GIE spin\",\n        ajax_timeout:\n            typeof ajax_timeout_init !== \"undefined\" ? ajax_timeout_init : 2000,\n        ajax_timeout_max:\n            typeof ajax_timeout_max !== \"undefined\" ? ajax_timeout_max : 16000,\n        ajax_timeout_step:\n            typeof ajax_timeout_step !== \"undefined\" ? ajax_timeout_step : 500,\n        sleep: typeof sleep_init !== \"undefined\" ? sleep_init : 500,\n        sleep_max: typeof sleep_max !== \"undefined\" ? sleep_max : 8000,\n        sleep_step: typeof sleep_step !== \"undefined\" ? sleep_step : 100,\n        log_attempts: typeof log_attempts !== \"undefined\" ? log_attempts : true,\n        count: 0\n    };\n    return s;\n}\n\n/* Log/display an error when spinning fails. */\nfunction spin_error(console_msg, user_msg, clear) {\n    console.log(console_msg);\n    if (clear) clear_main_area();\n    if (typeof user_msg == \"string\") {\n        toastr.clear();\n        toastr.error(user_msg, \"Error\", {\n            closeButton: true,\n            timeOut: 0,\n            extendedTimeOut: 0,\n            tapToDismiss: false\n        });\n    }\n}\n\n/* Increase sleep time and spin again. */\nfunction spin_again(spin_state) {\n    if (spin_state.sleep < spin_state.sleep_max) {\n        spin_state.sleep += spin_state.sleep_step;\n    }\n    if (spin_state.log_attempts) {\n        console.log(\n            `${spin_state.type} request ${spin_state.count} request timeout ${spin_state.ajax_timeout}ms sleeping ${spin_state.sleep /\n                1000}s`\n        );\n    }\n    window.setTimeout(spin_state.spinner, spin_state.sleep);\n}\n\n/*\n * Spin on a URL as long as it times out, otherwise, call the provided success or error callback. If the callback\n * returns `true`, the condition is considered \"resolved\" and spinning stops. Otherwise, continue spinning, increasing\n * AJAX timeouts and/or sleep values as configured in the spin_state.\n */\nfunction spin(\n    url,\n    bool_response,\n    success_callback,\n    timeout_callback,\n    error_callback,\n    spin_state\n) {\n    var spinner = () => {\n        var ajax_params = {\n            url: url,\n            xhrFields: {\n                withCredentials: true\n            },\n            type: \"GET\",\n            timeout: spin_state.ajax_timeout,\n            success: function(data, status, jqxhr) {\n                if (!success_callback(data, status, jqxhr)) {\n                    spin_state.count++;\n                    spin_again(spin_state);\n                }\n            },\n            error: function(jqxhr, status, error) {\n                if (status == \"timeout\") {\n                    if (spin_state.ajax_timeout < spin_state.ajax_timeout_max) {\n                        spin_state.ajax_timeout += spin_state.ajax_timeout_step;\n                    }\n                    spin_state.count++;\n                    if (!timeout_callback(jqxhr, status, error))\n                        spin_again(spin_state);\n                } else {\n                    spin_state.count++;\n                    if (!error_callback(jqxhr, status, error))\n                        spin_again(spin_state);\n                }\n            }\n        };\n        if (bool_response) ajax_params[\"dataType\"] = \"json\";\n        $.ajax(ajax_params);\n    };\n    console.log(`Setting up new spinner for ${spin_state.type} on ${url}`);\n    spin_state.spinner = spinner;\n    window.setTimeout(spinner, spin_state.sleep);\n}\n\n/*\n * Spin on a URL forever until there is an acceptable response. \n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK).\n * @param {Boolean} bool_response: If set to `true`, do not stop spinning until the response is `true`. Otherwise, stop\n *     as soon as a successful response is received.\n */\nfunction spin_until(\n    url,\n    bool_response,\n    messages,\n    success_callback,\n    spin_state\n) {\n    var warn_at = 40; // ~2 mins\n    var message_once = (message, spin_state) => {\n        if (spin_state.count == 1) {\n            display_spinner();\n            toastr.info(message, null, {\n                closeButton: true,\n                timeOut: 0,\n                extendedTimeOut: 0,\n                tapToDismiss: false\n            });\n        }\n    };\n    var wrapped_success = data => {\n        if (!bool_response || (bool_response && data == true)) {\n            console.log(messages[\"success\"]);\n            clear_main_area();\n            toastr.clear();\n            success_callback();\n        } else if (bool_response && data == false) {\n            message_once(messages[\"not_ready\"], spin_state);\n            return false; // keep spinning\n        } else {\n            spin_error(\n                `Invalid response to ${spin_state.type} request`,\n                messages[\"invalid_response\"],\n                true\n            );\n        }\n        return true; // stop spinning\n    };\n    var timeout_error = (jqxhr, status, error) => {\n        message_once(messages[\"waiting\"], spin_state);\n        if (spin_state.count == warn_at) {\n            toastr.warning(messages[\"wait_warn\"], \"Warning\", {\n                closeButton: true,\n                timeOut: 0,\n                extendedTimeOut: 0,\n                tapToDismiss: false\n            });\n        }\n        return false; // keep spinning\n    };\n    spin(\n        url,\n        bool_response,\n        wrapped_success,\n        timeout_error,\n        timeout_error,\n        spin_state\n    );\n}\n\n/**\n * Test availability of a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test availability of. Must return a 200 (302->200 is OK).\n * @param {String} callback: function to call once successfully connected.\n *\n */\nfunction test_ie_availability(url, success_callback) {\n    var messages = {\n        success: \"IE connection succeeded, returning\",\n        waiting:\n            \"Interactive environment container is running, attempting to connect to the IE. Please wait...\",\n        wait_warn:\n            \"It is taking an usually long time to connect to the interactive environment. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error:\n            \"An error was encountered while attempting to connect to the interactive environment, contact your administrator.\"\n    };\n    var spin_state = make_spin_state(\"IE availability\");\n    spin_until(url, false, messages, success_callback, spin_state);\n}\n\n/**\n * Test a boolean (json) response from a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK) and either `true` or `false`.\n * @param {String} callback: function to call once successfully connected.\n *\n */\nexport default function load_when_ready(url, success_callback) {\n    var messages = {\n        success: \"Galaxy reports IE container ready, returning\",\n        not_ready:\n            \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        unknown_response:\n            \"Galaxy failed to launch a container in which to run this interactive environment, contact a Galaxy administrator.\",\n        waiting:\n            \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        wait_warn:\n            \"It is taking an usually long time to start a container. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error:\n            \"Galaxy encountered an error while attempting to determine the readiness of this interactive environment's container, contact a Galaxy administrator.\"\n    };\n    var spin_state = make_spin_state(\"IE container readiness\");\n    spin_until(url, true, messages, success_callback, spin_state);\n}\n"]}