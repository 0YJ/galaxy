{"version":3,"sources":["libs/bbi/jquery-ajax-native.js"],"names":["root","factory","define","amd","exports","module","require","jQuery","this","$","ajaxSettings","responseFields","native","converters","support","xhrId","xhrSuccessStatus","0","1223","xhrCallbacks","xhrSupported","xhr","window","ActiveXObject","on","key","cors","ajax","ajaxTransport","options","callback","crossDomain","send","headers","complete","i","id","responses","open","type","url","async","username","password","xhrFields","mimeType","overrideMimeType","setRequestHeader","onload","onerror","abort","status","statusText","response","getAllResponseHeaders","hasContent","data","e","getNative","dataType","responseType","success"],"mappings":"CAIC,SAAUA,EAAMC,GACS,kBAAXC,SAAyBA,OAAOC,IAEvCD,QAAQ,UAAWD,GACO,gBAAZG,SAIdC,OAAOD,QAAUH,EAAQK,QAAQ,WAGjCL,EAAQD,EAAKO,SAEnBC,KAAM,SAAWC,GACf,GAAIC,GAAeD,EAAEC,YACrBA,GAAaC,eAAeC,OAAS,iBACrCF,EAAaG,WAAY,aAAe,CACxC,IAAIC,MACAC,EAAQ,EACRC,GAEIC,EAAG,IAGHC,KAAM,KAEVC,KACAC,EAAeb,OAAOG,aAAaW,KAGlCC,QAAOC,eACRd,EAAGa,QAASE,GAAI,SAAU,WACtB,IAAM,GAAIC,KAAON,GACbA,EAAcM,OAI1BX,EAAQY,OAASN,GAAkB,mBAAqBA,GACxDN,EAAQa,KAAOP,IAAiBA,EAGhCX,EAAEmB,cAAc,SAAU,SAAWC,GACjC,GAAIC,EAEJ,IAAKhB,EAAQY,MAAQN,IAAiBS,EAAQE,YAC1C,OACIC,KAAM,SAAUC,EAASC,GACrB,GAAIC,GACAd,EAAMQ,EAAQR,MACde,IAAOrB,EACPsB,IAKJ,IAHAhB,EAAIiB,KAAMT,EAAQU,KAAMV,EAAQW,IAAKX,EAAQY,MAAOZ,EAAQa,SAAUb,EAAQc,UAGzEd,EAAQe,UACT,IAAMT,IAAKN,GAAQe,UACfvB,EAAKc,GAAMN,EAAQe,UAAWT,EAKjCN,GAAQgB,UAAYxB,EAAIyB,kBACzBzB,EAAIyB,iBAAkBjB,EAAQgB,UAQ5BhB,EAAQE,aAAgBE,EAAQ,sBAClCA,EAAQ,oBAAsB,iBAIlC,KAAME,IAAKF,GACPZ,EAAI0B,iBAAkBZ,EAAGF,EAASE,GAItCL,GAAW,SAAUS,GACjB,MAAO,YACET,UACMX,GAAciB,GACrBN,EAAWT,EAAI2B,OAAS3B,EAAI4B,QAAU,KAExB,UAATV,EACDlB,EAAI6B,QACa,UAATX,EACRL,EAEIb,EAAI8B,OACJ9B,EAAI+B,aAKH/B,EAAIgC,WACLhB,EAAUzB,OAASS,EAAIgC,UAG3BnB,EACIlB,EAAkBK,EAAI8B,SAAY9B,EAAI8B,OACtC9B,EAAI+B,WACJf,EACAhB,EAAIiC,6BAQxBjC,EAAI2B,OAASlB,IACbT,EAAI4B,QAAUnB,EAAS,SAGvBA,EAAWX,EAAciB,GAAON,EAAS,QAEzC,KAEIT,EAAIW,KAAMH,EAAQ0B,YAAc1B,EAAQ2B,MAAQ,MAClD,MAAQC,GAEN,GAAK3B,EACD,KAAM2B,KAKlBP,MAAO,WACEpB,GACDA,QASpBrB,EAAEiD,UAAY,SAAWlB,EAAKV,GAC1B,MAAOrB,GAAEkB,MACLgC,SAAU,SACVnB,IAAKA,EACLI,WACIgB,aAAc,eAElBC,QAAS/B","file":"../../../scripts/libs/bbi/jquery-ajax-native.js","sourcesContent":["//     jQuery Ajax Native Plugin\n\n//     (c) 2015 Tarik Zakaria Benmerar, Acigna Inc.\n//      jQuery Ajax Native Plugin may be freely distributed under the MIT license.\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('jquery'));\n    } else {\n        // Browser globals (root is window)\n        factory(root.jQuery);\n    }\n}(this, function ( $ ) {\n    var ajaxSettings = $.ajaxSettings;\n    ajaxSettings.responseFields.native = 'responseNative';\n    ajaxSettings.converters[ '* native' ] = true;\n    var support = {},\n        xhrId = 0,\n        xhrSuccessStatus = {\n            // file protocol always yields status code 0, assume 200\n            0: 200,\n            // Support: IE9\n            // #1450: sometimes IE returns 1223 when it should be 204\n            1223: 204\n        },\n        xhrCallbacks = {},\n        xhrSupported = jQuery.ajaxSettings.xhr();\n    // Support: IE9\n    // Open requests must be manually aborted on unload (#5280)\n    if ( window.ActiveXObject ) {\n        $( window ).on( \"unload\", function() {\n            for ( var key in xhrCallbacks ) {\n                xhrCallbacks[ key ]();\n            }\n        });\n    }\n    support.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\n    support.ajax = xhrSupported = !!xhrSupported;\n\n    //Native Data Type Ajax Transport\n    $.ajaxTransport('native', function ( options ) {\n        var callback;\n        // Cross domain only allowed if supported through XMLHttpRequest\n        if ( support.cors || xhrSupported && !options.crossDomain ) {\n            return {\n                send: function( headers, complete ) {\n                    var i,\n                        xhr = options.xhr(),\n                        id = ++xhrId,\n                        responses = {};\n\n                    xhr.open( options.type, options.url, options.async, options.username, options.password );\n\n                    // Apply custom fields if provided\n                    if ( options.xhrFields ) {\n                        for ( i in options.xhrFields ) {\n                            xhr[ i ] = options.xhrFields[ i ];\n                        }\n                    }\n\n                    // Override mime type if needed\n                    if ( options.mimeType && xhr.overrideMimeType ) {\n                        xhr.overrideMimeType( options.mimeType );\n                    }\n\n                    // X-Requested-With header\n                    // For cross-domain requests, seeing as conditions for a preflight are\n                    // akin to a jigsaw puzzle, we simply never set it to be sure.\n                    // (it can always be set on a per-request basis or even using ajaxSetup)\n                    // For same-domain requests, won't change header if already provided.\n                    if ( !options.crossDomain && !headers[\"X-Requested-With\"] ) {\n                        headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    }\n\n                    // Set headers\n                    for ( i in headers ) {\n                        xhr.setRequestHeader( i, headers[ i ] );\n                    }\n\n                    // Callback\n                    callback = function( type ) {\n                        return function() {\n                            if ( callback ) {\n                                delete xhrCallbacks[ id ];\n                                callback = xhr.onload = xhr.onerror = null;\n\n                                if ( type === \"abort\" ) {\n                                    xhr.abort();\n                                } else if ( type === \"error\" ) {\n                                    complete(\n                                        // file: protocol always yields status 0; see #8605, #14207\n                                        xhr.status,\n                                        xhr.statusText\n                                    );\n                                } else {\n                                    // The native response associated with the responseType\n                                    // Stored in the xhr.response attribute (XHR2 Spec)\n                                    if ( xhr.response ) {\n                                        responses.native = xhr.response;\n                                    }\n\n                                    complete(\n                                        xhrSuccessStatus[ xhr.status ] || xhr.status,\n                                        xhr.statusText,\n                                        responses,\n                                        xhr.getAllResponseHeaders()\n                                    );\n                                }\n                            }\n                        };\n                    };\n\n                    // Listen to events\n                    xhr.onload = callback();\n                    xhr.onerror = callback(\"error\");\n\n                    // Create the abort callback\n                    callback = xhrCallbacks[ id ] = callback(\"abort\");\n\n                    try {\n                        // Do send the request (this may raise an exception)\n                        xhr.send( options.hasContent && options.data || null );\n                    } catch ( e ) {\n                        // #14683: Only rethrow if this hasn't been notified as an error yet\n                        if ( callback ) {\n                            throw e;\n                        }\n                    }\n                },\n\n                abort: function() {\n                    if ( callback ) {\n                        callback();\n                    }\n                }\n            };\n        }\n    });\n\n\n    //$.getNative wrapper\n    $.getNative = function ( url, callback ) {\n        return $.ajax({\n            dataType: 'native',\n            url: url,\n            xhrFields: {\n                responseType: 'arraybuffer'\n            },\n            success: callback\n        });\n    }\n}));\n"]}