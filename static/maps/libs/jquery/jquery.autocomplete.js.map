{"version":3,"sources":["libs/jquery/jquery.autocomplete.js"],"names":["$","fn","autocomplete_verheul","options","url","arguments","length","opts","extend","defaults","this","each","$this","data","Autocompleter","meta","inputClass","loadingClass","resultsClass","selectClass","queryParamName","extraParams","remoteDataType","lineSeparator","cellSeparator","minChars","maxItemsToShow","delay","useCache","maxCacheLength","matchSubset","matchCase","matchInside","mustMatch","selectFirst","selectOnly","showResult","preventDefaultReturn","preventDefaultTab","autoFill","filterResults","filter","sortResults","sortFunction","onItemSelect","onNoMatch","onFinish","matchStringConverter","beforeUseConverter","autoWidth","useDelimiter","delimiterChar","delimiterKeyCode","processData","onError","enabled","sanitizeResult","result","value","type","isArray","slice","String","sanitizeInteger","stdValue","num","parseInt","isNaN","min","makeUrlParam","name","encodeURIComponent","join","makeUrl","params","urlAppend","index","push","indexOf","sortValueAlpha","a","b","toLowerCase","plainTextParser","text","i","j","line","lines","results","replace","split","decodeURIComponent","shift","$elem","get","tagName","toUpperCase","Error","self","cacheData_","cacheLength_","selectClass_","keyTimeout_","finishTimeout_","lastKeyPressed_","lastProcessedValue_","lastSelectedValue_","active_","finishOnBlur_","dom","attr","addClass","$results","hide","css","position","append","keydown","e","keyCode","selectCurrent","preventDefault","focusPrev","activate","focusNext","deactivate","on","onBlurFunction","blur","setTimeout","parents","prototype","offset","height","outerHeight","totalHeight","window","inputBottom","top","bottomIfDown","left","topIfUp","cacheRead","filterLength","searchLength","search","maxPos","pos","substr","undefined","cacheWrite","cacheFlush","callHook","hook","f","isFunction","clearTimeout","activateNow","val","fetchData","processResults","showResults","fetchRemoteData","remoteData","callback","dataType","ajaxCallback","parsed","parseRemoteData","removeClass","ajax","success","error","jqXHR","textStatus","errorThrown","setExtraParam","trim","param","parseJSON","defaultFilter","pattern","testValue","patternIndex","filterResult","filtered","sort","s","converter","getValue","enableFinishOnBlur","disableFinishOnBlur","createItemFromResult","$li","html","click","selectItem","mousedown","mouseup","getItems","numResults","$ul","first","$first","firstItemClass","lastItemClass","show","outerWidth","width","hover","focusItem","hideResults","lcValue","lcFilter","valueLength","d","getDelimiterOffsets","pad","start","setValue","end","selectRange","focusMove","modifier","$items","hasClass","item","$item","displayValue","processedDisplayValue","delimiter","elem","extraCaretPos","substring","setCaret","focus","finish","input","setSelectionRange","createTextRange","range","collapse","moveEnd","moveStart","select","getCaret","selection","stored_range","document","createRange","duplicate","lastIndexOf","moveToElementText","setEndPoint","selectionStart","selectionEnd","preCaretVal","postCaretVal","jQuery"],"mappings":"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","file":"../../../scripts/libs/jquery/jquery.autocomplete.js","sourcesContent":["/**\n * @fileOverview jquery-autocomplete, the jQuery Autocompleter\n * @author <a href=\"mailto:dylan@dyve.net\">Dylan Verheul</a>\n * @version 2.4.4\n * @requires jQuery 1.6+\n * @license MIT | GPL | Apache 2.0, see LICENSE.txt\n * @see https://github.com/dyve/jquery-autocomplete\n */\n(function($) {\n    \"use strict\";\n\n    /**\n     * jQuery autocomplete plugin\n     * @param {object|string} options\n     * @returns (object} jQuery object\n     */\n    $.fn.autocomplete_verheul = function(options) {\n        var url;\n        if (arguments.length > 1) {\n            url = options;\n            options = arguments[1];\n            options.url = url;\n        } else if (typeof options === 'string') {\n            url = options;\n            options = { url: url };\n        }\n        var opts = $.extend({}, $.fn.autocomplete_verheul.defaults, options);\n        return this.each(function() {\n            var $this = $(this);\n            $this.data('autocompleter', new $.Autocompleter(\n                $this,\n                $.meta ? $.extend({}, opts, $this.data()) : opts\n            ));\n        });\n    };\n\n    /**\n     * Store default options\n     * @type {object}\n     */\n    $.fn.autocomplete_verheul.defaults = {\n        inputClass: 'acInput',\n        loadingClass: 'acLoading',\n        resultsClass: 'acResults',\n        selectClass: 'acSelect',\n        queryParamName: 'q',\n        extraParams: {},\n        remoteDataType: false,\n        lineSeparator: '\\n',\n        cellSeparator: '|',\n        minChars: 2,\n        maxItemsToShow: 10,\n        delay: 400,\n        useCache: true,\n        maxCacheLength: 10,\n        matchSubset: true,\n        matchCase: false,\n        matchInside: true,\n        mustMatch: false,\n        selectFirst: false,\n        selectOnly: false,\n        showResult: null,\n        preventDefaultReturn: 1,\n        preventDefaultTab: 0,\n        autoFill: false,\n        filterResults: true,\n        filter: true,\n        sortResults: true,\n        sortFunction: null,\n        onItemSelect: null,\n        onNoMatch: null,\n        onFinish: null,\n        matchStringConverter: null,\n        beforeUseConverter: null,\n        autoWidth: 'min-width',\n        useDelimiter: false,\n        delimiterChar: ',',\n        delimiterKeyCode: 188,\n        processData: null,\n        onError: null,\n        enabled: true\n    };\n\n    /**\n     * Sanitize result\n     * @param {Object} result\n     * @returns {Object} object with members value (String) and data (Object)\n     * @private\n     */\n    var sanitizeResult = function(result) {\n        var value, data;\n        var type = typeof result;\n        if (type === 'string') {\n            value = result;\n            data = {};\n        } else if ($.isArray(result)) {\n            value = result[0];\n            data = result.slice(1);\n        } else if (type === 'object') {\n            value = result.value;\n            data = result.data;\n        }\n        value = String(value);\n        if (typeof data !== 'object') {\n            data = {};\n        }\n        return {\n            value: value,\n            data: data\n        };\n    };\n\n    /**\n     * Sanitize integer\n     * @param {mixed} value\n     * @param {Object} options\n     * @returns {Number} integer\n     * @private\n     */\n    var sanitizeInteger = function(value, stdValue, options) {\n        var num = parseInt(value, 10);\n        options = options || {};\n        if (isNaN(num) || (options.min && num < options.min)) {\n            num = stdValue;\n        }\n        return num;\n    };\n\n    /**\n     * Create partial url for a name/value pair\n     */\n    var makeUrlParam = function(name, value) {\n        return [name, encodeURIComponent(value)].join('=');\n    };\n\n    /**\n     * Build an url\n     * @param {string} url Base url\n     * @param {object} [params] Dictionary of parameters\n     */\n    var makeUrl = function(url, params) {\n        var urlAppend = [];\n        $.each(params, function(index, value) {\n            urlAppend.push(makeUrlParam(index, value));\n        });\n        if (urlAppend.length) {\n            url += url.indexOf('?') === -1 ? '?' : '&';\n            url += urlAppend.join('&');\n        }\n        return url;\n    };\n\n    /**\n     * Default sort filter\n     * @param {object} a\n     * @param {object} b\n     * @param {boolean} matchCase\n     * @returns {number}\n     */\n    var sortValueAlpha = function(a, b, matchCase) {\n        a = String(a.value);\n        b = String(b.value);\n        if (!matchCase) {\n            a = a.toLowerCase();\n            b = b.toLowerCase();\n        }\n        if (a > b) {\n            return 1;\n        }\n        if (a < b) {\n            return -1;\n        }\n        return 0;\n    };\n\n    /**\n     * Parse data received in text format\n     * @param {string} text Plain text input\n     * @param {string} lineSeparator String that separates lines\n     * @param {string} cellSeparator String that separates cells\n     * @returns {array} Array of autocomplete data objects\n     */\n    var plainTextParser = function(text, lineSeparator, cellSeparator) {\n        var results = [];\n        var i, j, data, line, value, lines;\n        // Be nice, fix linebreaks before splitting on lineSeparator\n        lines = String(text).replace('\\r\\n', '\\n').split(lineSeparator);\n        for (i = 0; i < lines.length; i++) {\n            line = lines[i].split(cellSeparator);\n            data = [];\n            for (j = 0; j < line.length; j++) {\n                data.push(decodeURIComponent(line[j]));\n            }\n            value = data.shift();\n            results.push({ value: value, data: data });\n        }\n        return results;\n    };\n\n    /**\n     * Autocompleter class\n     * @param {object} $elem jQuery object with one input tag\n     * @param {object} options Settings\n     * @constructor\n     */\n    $.Autocompleter = function($elem, options) {\n\n        /**\n         * Assert parameters\n         */\n        if (!$elem || !($elem instanceof $) || $elem.length !== 1 || ($elem.get(0).tagName.toUpperCase() !== 'INPUT' && $elem.get(0).tagName.toUpperCase() !== 'TEXTAREA')) {\n            throw new Error('Invalid parameter for jquery.Autocompleter, jQuery object with one element with INPUT or TEXTAREA tag expected.');\n        }\n\n        /**\n         * @constant Link to this instance\n         * @type object\n         * @private\n         */\n        var self = this;\n\n        /**\n         * @property {object} Options for this instance\n         * @public\n         */\n        this.options = options;\n\n        /**\n         * @property object Cached data for this instance\n         * @private\n         */\n        this.cacheData_ = {};\n\n        /**\n         * @property {number} Number of cached data items\n         * @private\n         */\n        this.cacheLength_ = 0;\n\n        /**\n         * @property {string} Class name to mark selected item\n         * @private\n         */\n        this.selectClass_ = 'jquery-autocomplete-selected-item';\n\n        /**\n         * @property {number} Handler to activation timeout\n         * @private\n         */\n        this.keyTimeout_ = null;\n\n        /**\n         * @property {number} Handler to finish timeout\n         * @private\n         */\n        this.finishTimeout_ = null;\n\n        /**\n         * @property {number} Last key pressed in the input field (store for behavior)\n         * @private\n         */\n        this.lastKeyPressed_ = null;\n\n        /**\n         * @property {string} Last value processed by the autocompleter\n         * @private\n         */\n        this.lastProcessedValue_ = null;\n\n        /**\n         * @property {string} Last value selected by the user\n         * @private\n         */\n        this.lastSelectedValue_ = null;\n\n        /**\n         * @property {boolean} Is this autocompleter active (showing results)?\n         * @see showResults\n         * @private\n         */\n        this.active_ = false;\n\n        /**\n         * @property {boolean} Is this autocompleter allowed to finish on blur?\n         * @private\n         */\n        this.finishOnBlur_ = true;\n\n        /**\n         * Sanitize options\n         */\n        this.options.minChars = sanitizeInteger(this.options.minChars, $.fn.autocomplete_verheul.defaults.minChars, { min: 0 });\n        this.options.maxItemsToShow = sanitizeInteger(this.options.maxItemsToShow, $.fn.autocomplete_verheul.defaults.maxItemsToShow, { min: 0 });\n        this.options.maxCacheLength = sanitizeInteger(this.options.maxCacheLength, $.fn.autocomplete_verheul.defaults.maxCacheLength, { min: 1 });\n        this.options.delay = sanitizeInteger(this.options.delay, $.fn.autocomplete_verheul.defaults.delay, { min: 0 });\n        if (this.options.preventDefaultReturn != 2) {\n            this.options.preventDefaultReturn = this.options.preventDefaultReturn ? 1 : 0;\n        }\n        if (this.options.preventDefaultTab != 2) {\n            this.options.preventDefaultTab = this.options.preventDefaultTab ? 1 : 0;\n        }\n\n        /**\n         * Init DOM elements repository\n         */\n        this.dom = {};\n\n        /**\n         * Store the input element we're attached to in the repository\n         */\n        this.dom.$elem = $elem;\n\n        /**\n         * Switch off the native autocomplete and add the input class\n         */\n        this.dom.$elem.attr('autocomplete', 'off').addClass(this.options.inputClass);\n\n        /**\n         * Create DOM element to hold results, and force absolute position\n         */\n        this.dom.$results = $('<div></div>').hide().addClass(this.options.resultsClass).css({\n            position: 'absolute'\n        });\n        $('body').append(this.dom.$results);\n\n        /**\n         * Attach keyboard monitoring to $elem\n         */\n        $elem.keydown(function(e) {\n            self.lastKeyPressed_ = e.keyCode;\n            switch(self.lastKeyPressed_) {\n\n                case self.options.delimiterKeyCode: // comma = 188\n                    if (self.options.useDelimiter && self.active_) {\n                        self.selectCurrent();\n                    }\n                    break;\n\n                // ignore navigational & special keys\n                case 35: // end\n                case 36: // home\n                case 16: // shift\n                case 17: // ctrl\n                case 18: // alt\n                case 37: // left\n                case 39: // right\n                    break;\n\n                case 38: // up\n                    e.preventDefault();\n                    if (self.active_) {\n                        self.focusPrev();\n                    } else {\n                        self.activate();\n                    }\n                    return false;\n\n                case 40: // down\n                    e.preventDefault();\n                    if (self.active_) {\n                        self.focusNext();\n                    } else {\n                        self.activate();\n                    }\n                    return false;\n\n                case 9: // tab\n                    if (self.active_) {\n                        self.selectCurrent();\n                        if (self.options.preventDefaultTab) {\n                            e.preventDefault();\n                            return false;\n                        }\n                    }\n                    if (self.options.preventDefaultTab === 2) {\n                        e.preventDefault();\n                        return false;\n                    }\n                break;\n\n                case 13: // return\n                    if (self.active_) {\n                        self.selectCurrent();\n                        if (self.options.preventDefaultReturn) {\n                            e.preventDefault();\n                            return false;\n                        }\n                    }\n                    if (self.options.preventDefaultReturn === 2) {\n                        e.preventDefault();\n                        return false;\n                    }\n                break;\n\n                case 27: // escape\n                    if (self.active_) {\n                        e.preventDefault();\n                        self.deactivate(true);\n                        return false;\n                    }\n                break;\n\n                default:\n                    self.activate();\n\n            }\n        });\n\n        /**\n         * Attach paste event listener because paste may occur much later then keydown or even without a keydown at all\n         */\n        $elem.on('paste', function() {\n            self.activate();\n        });\n\n        /**\n         * Finish on blur event\n         * Use a timeout because instant blur gives race conditions\n         */\n        var onBlurFunction = function() {\n            self.deactivate(true);\n        }\n        $elem.blur(function() {\n            if (self.finishOnBlur_) {\n                self.finishTimeout_ = setTimeout(onBlurFunction, 200);\n            }\n        });\n        /**\n         * Catch a race condition on form submit\n         */\n        $elem.parents('form').on('submit', onBlurFunction);\n\n    };\n\n    /**\n     * Position output DOM elements\n     * @private\n     */\n    $.Autocompleter.prototype.position = function() {\n        var offset = this.dom.$elem.offset();\n        var height = this.dom.$results.outerHeight();\n        var totalHeight = $(window).outerHeight();\n        var inputBottom = offset.top + this.dom.$elem.outerHeight();\n        var bottomIfDown = inputBottom + height;\n        // Set autocomplete results at the bottom of input\n        var position = {top: inputBottom, left: offset.left};\n        if (bottomIfDown > totalHeight) {\n            // Try to set autocomplete results at the top of input\n            var topIfUp = offset.top - height;\n            if (topIfUp >= 0) {\n                position.top = topIfUp;\n            }\n        }\n        this.dom.$results.css(position);\n    };\n\n    /**\n     * Read from cache\n     * @private\n     */\n    $.Autocompleter.prototype.cacheRead = function(filter) {\n        var filterLength, searchLength, search, maxPos, pos;\n        if (this.options.useCache) {\n            filter = String(filter);\n            filterLength = filter.length;\n            if (this.options.matchSubset) {\n                searchLength = 1;\n            } else {\n                searchLength = filterLength;\n            }\n            while (searchLength <= filterLength) {\n                if (this.options.matchInside) {\n                    maxPos = filterLength - searchLength;\n                } else {\n                    maxPos = 0;\n                }\n                pos = 0;\n                while (pos <= maxPos) {\n                    search = filter.substr(0, searchLength);\n                    if (this.cacheData_[search] !== undefined) {\n                        return this.cacheData_[search];\n                    }\n                    pos++;\n                }\n                searchLength++;\n            }\n        }\n        return false;\n    };\n\n    /**\n     * Write to cache\n     * @private\n     */\n    $.Autocompleter.prototype.cacheWrite = function(filter, data) {\n        if (this.options.useCache) {\n            if (this.cacheLength_ >= this.options.maxCacheLength) {\n                this.cacheFlush();\n            }\n            filter = String(filter);\n            if (this.cacheData_[filter] !== undefined) {\n                this.cacheLength_++;\n            }\n            this.cacheData_[filter] = data;\n            return this.cacheData_[filter];\n        }\n        return false;\n    };\n\n    /**\n     * Flush cache\n     * @public\n     */\n    $.Autocompleter.prototype.cacheFlush = function() {\n        this.cacheData_ = {};\n        this.cacheLength_ = 0;\n    };\n\n    /**\n     * Call hook\n     * Note that all called hooks are passed the autocompleter object\n     * @param {string} hook\n     * @param data\n     * @returns Result of called hook, false if hook is undefined\n     */\n    $.Autocompleter.prototype.callHook = function(hook, data) {\n        var f = this.options[hook];\n        if (f && $.isFunction(f)) {\n            return f(data, this);\n        }\n        return false;\n    };\n\n    /**\n     * Set timeout to activate autocompleter\n     */\n    $.Autocompleter.prototype.activate = function() {\n        if (!this.options.enabled) return;\n        var self = this;\n        if (this.keyTimeout_) {\n            clearTimeout(this.keyTimeout_);\n        }\n        this.keyTimeout_ = setTimeout(function() {\n            self.activateNow();\n        }, this.options.delay);\n    };\n\n    /**\n     * Activate autocompleter immediately\n     */\n    $.Autocompleter.prototype.activateNow = function() {\n        var value = this.beforeUseConverter(this.dom.$elem.val());\n        if (value !== this.lastProcessedValue_ && value !== this.lastSelectedValue_) {\n            this.fetchData(value);\n        }\n    };\n\n    /**\n     * Get autocomplete data for a given value\n     * @param {string} value Value to base autocompletion on\n     * @private\n     */\n    $.Autocompleter.prototype.fetchData = function(value) {\n        var self = this;\n        var processResults = function(results, filter) {\n            if (self.options.processData) {\n                results = self.options.processData(results);\n            }\n            self.showResults(self.filterResults(results, filter), filter);\n        };\n        this.lastProcessedValue_ = value;\n        if (value.length < this.options.minChars) {\n            processResults([], value);\n        } else if (this.options.data) {\n            processResults(this.options.data, value);\n        } else {\n            this.fetchRemoteData(value, function(remoteData) {\n                processResults(remoteData, value);\n            });\n        }\n    };\n\n    /**\n     * Get remote autocomplete data for a given value\n     * @param {string} filter The filter to base remote data on\n     * @param {function} callback The function to call after data retrieval\n     * @private\n     */\n    $.Autocompleter.prototype.fetchRemoteData = function(filter, callback) {\n        var data = this.cacheRead(filter);\n        if (data) {\n            callback(data);\n        } else {\n            var self = this;\n            var dataType = self.options.remoteDataType === 'json' ? 'json' : 'text';\n            var ajaxCallback = function(data) {\n                var parsed = false;\n                if (data !== false) {\n                    parsed = self.parseRemoteData(data);\n                    self.cacheWrite(filter, parsed);\n                }\n                self.dom.$elem.removeClass(self.options.loadingClass);\n                callback(parsed);\n            };\n            this.dom.$elem.addClass(this.options.loadingClass);\n            $.ajax({\n                url: this.makeUrl(filter),\n                success: ajaxCallback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    if($.isFunction(self.options.onError)) {\n                        self.options.onError(jqXHR, textStatus, errorThrown);\n                    } else {\n                      ajaxCallback(false);\n                    }\n                },\n                dataType: dataType\n            });\n        }\n    };\n\n    /**\n     * Create or update an extra parameter for the remote request\n     * @param {string} name Parameter name\n     * @param {string} value Parameter value\n     * @public\n     */\n    $.Autocompleter.prototype.setExtraParam = function(name, value) {\n        var index = $.trim(String(name));\n        if (index) {\n            if (!this.options.extraParams) {\n                this.options.extraParams = {};\n            }\n            if (this.options.extraParams[index] !== value) {\n                this.options.extraParams[index] = value;\n                this.cacheFlush();\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Build the url for a remote request\n     * If options.queryParamName === false, append query to url instead of using a GET parameter\n     * @param {string} param The value parameter to pass to the backend\n     * @returns {string} The finished url with parameters\n     */\n    $.Autocompleter.prototype.makeUrl = function(param) {\n        var self = this;\n        var url = this.options.url;\n        var params = $.extend({}, this.options.extraParams);\n\n        if (this.options.queryParamName === false) {\n            url += encodeURIComponent(param);\n        } else {\n            params[this.options.queryParamName] = param;\n        }\n\n        return makeUrl(url, params);\n    };\n\n    /**\n     * Parse data received from server\n     * @param remoteData Data received from remote server\n     * @returns {array} Parsed data\n     */\n    $.Autocompleter.prototype.parseRemoteData = function(remoteData) {\n        var remoteDataType;\n        var data = remoteData;\n        if (this.options.remoteDataType === 'json') {\n            remoteDataType = typeof(remoteData);\n            switch (remoteDataType) {\n                case 'object':\n                    data = remoteData;\n                    break;\n                case 'string':\n                    data = $.parseJSON(remoteData);\n                    break;\n                default:\n                    throw new Error(\"Unexpected remote data type: \" + remoteDataType);\n            }\n            return data;\n        }\n        return plainTextParser(data, this.options.lineSeparator, this.options.cellSeparator);\n    };\n\n    /**\n     * Default filter for results\n     * @param {Object} result\n     * @param {String} filter\n     * @returns {boolean} Include this result\n     * @private\n     */\n    $.Autocompleter.prototype.defaultFilter = function(result, filter) {\n        if (!result.value) {\n            return false;\n        }\n        if (this.options.filterResults) {\n            var pattern = this.matchStringConverter(filter);\n            var testValue = this.matchStringConverter(result.value);\n            if (!this.options.matchCase) {\n                pattern = pattern.toLowerCase();\n                testValue = testValue.toLowerCase();\n            }\n            var patternIndex = testValue.indexOf(pattern);\n            if (this.options.matchInside) {\n                return patternIndex > -1;\n            } else {\n                return patternIndex === 0;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Filter result\n     * @param {Object} result\n     * @param {String} filter\n     * @returns {boolean} Include this result\n     * @private\n     */\n    $.Autocompleter.prototype.filterResult = function(result, filter) {\n        // No filter\n        if (this.options.filter === false) {\n            return true;\n        }\n        // Custom filter\n        if ($.isFunction(this.options.filter)) {\n            return this.options.filter(result, filter);\n        }\n        // Default filter\n        return this.defaultFilter(result, filter);\n    };\n\n    /**\n     * Filter results\n     * @param results\n     * @param filter\n     */\n    $.Autocompleter.prototype.filterResults = function(results, filter) {\n        var filtered = [];\n        var i, result;\n\n        for (i = 0; i < results.length; i++) {\n            result = sanitizeResult(results[i]);\n            if (this.filterResult(result, filter)) {\n                filtered.push(result);\n            }\n        }\n        if (this.options.sortResults) {\n            filtered = this.sortResults(filtered, filter);\n        }\n        if (this.options.maxItemsToShow > 0 && this.options.maxItemsToShow < filtered.length) {\n            filtered.length = this.options.maxItemsToShow;\n        }\n        return filtered;\n    };\n\n    /**\n     * Sort results\n     * @param results\n     * @param filter\n     */\n    $.Autocompleter.prototype.sortResults = function(results, filter) {\n        var self = this;\n        var sortFunction = this.options.sortFunction;\n        if (!$.isFunction(sortFunction)) {\n            sortFunction = function(a, b, f) {\n                return sortValueAlpha(a, b, self.options.matchCase);\n            };\n        }\n        results.sort(function(a, b) {\n            return sortFunction(a, b, filter, self.options);\n        });\n        return results;\n    };\n\n    /**\n     * Convert string before matching\n     * @param s\n     * @param a\n     * @param b\n     */\n    $.Autocompleter.prototype.matchStringConverter = function(s, a, b) {\n        var converter = this.options.matchStringConverter;\n        if ($.isFunction(converter)) {\n            s = converter(s, a, b);\n        }\n        return s;\n    };\n\n    /**\n     * Convert string before use\n     * @param {String} s\n     */\n    $.Autocompleter.prototype.beforeUseConverter = function(s) {\n        s = this.getValue(s);\n        var converter = this.options.beforeUseConverter;\n        if ($.isFunction(converter)) {\n            s = converter(s);\n        }\n        return s;\n    };\n\n    /**\n     * Enable finish on blur event\n     */\n    $.Autocompleter.prototype.enableFinishOnBlur = function() {\n        this.finishOnBlur_ = true;\n    };\n\n    /**\n     * Disable finish on blur event\n     */\n    $.Autocompleter.prototype.disableFinishOnBlur = function() {\n        this.finishOnBlur_ = false;\n    };\n\n    /**\n     * Create a results item (LI element) from a result\n     * @param result\n     */\n    $.Autocompleter.prototype.createItemFromResult = function(result) {\n        var self = this;\n        var $li = $('<li/>');\n        $li.html(this.showResult(result.value, result.data));\n        $li.data({value: result.value, data: result.data})\n            .click(function() {\n                self.selectItem($li);\n            })\n            .mousedown(self.disableFinishOnBlur)\n            .mouseup(self.enableFinishOnBlur)\n        ;\n        return $li;\n    };\n\n    /**\n     * Get all items from the results list\n     * @param result\n     */\n    $.Autocompleter.prototype.getItems = function() {\n        return $('>ul>li', this.dom.$results);\n    };\n\n    /**\n     * Show all results\n     * @param results\n     * @param filter\n     */\n    $.Autocompleter.prototype.showResults = function(results, filter) {\n        var numResults = results.length;\n        var self = this;\n        var $ul = $('<ul></ul>');\n        var i, result, $li, autoWidth, first = false, $first = false;\n\n        if (numResults) {\n            for (i = 0; i < numResults; i++) {\n                result = results[i];\n                $li = this.createItemFromResult(result);\n                $ul.append($li);\n                if (first === false) {\n                    first = String(result.value);\n                    $first = $li;\n                    $li.addClass(this.options.firstItemClass);\n                }\n                if (i === numResults - 1) {\n                    $li.addClass(this.options.lastItemClass);\n                }\n            }\n\n            this.dom.$results.html($ul).show();\n\n            // Always recalculate position since window size or\n            // input element location may have changed.\n            this.position();\n            if (this.options.autoWidth) {\n                autoWidth = this.dom.$elem.outerWidth() - this.dom.$results.outerWidth() + this.dom.$results.width();\n                this.dom.$results.css(this.options.autoWidth, autoWidth);\n            }\n            this.getItems().hover(\n                function() { self.focusItem(this); },\n                function() { /* void */ }\n            );\n            if (this.autoFill(first, filter) || this.options.selectFirst || (this.options.selectOnly && numResults === 1)) {\n                this.focusItem($first);\n            }\n            this.active_ = true;\n        } else {\n            this.hideResults();\n            this.active_ = false;\n        }\n    };\n\n    $.Autocompleter.prototype.showResult = function(value, data) {\n        if ($.isFunction(this.options.showResult)) {\n            return this.options.showResult(value, data);\n        } else {\n            return $('<p></p>').text(value).html();\n        }\n    };\n\n    $.Autocompleter.prototype.autoFill = function(value, filter) {\n        var lcValue, lcFilter, valueLength, filterLength;\n        if (this.options.autoFill && this.lastKeyPressed_ !== 8) {\n            lcValue = String(value).toLowerCase();\n            lcFilter = String(filter).toLowerCase();\n            valueLength = value.length;\n            filterLength = filter.length;\n            if (lcValue.substr(0, filterLength) === lcFilter) {\n                var d = this.getDelimiterOffsets();\n                var pad = d.start ? ' ' : ''; // if there is a preceding delimiter\n                this.setValue( pad + value );\n                var start = filterLength + d.start + pad.length;\n                var end = valueLength + d.start + pad.length;\n                this.selectRange(start, end);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    $.Autocompleter.prototype.focusNext = function() {\n        this.focusMove(+1);\n    };\n\n    $.Autocompleter.prototype.focusPrev = function() {\n        this.focusMove(-1);\n    };\n\n    $.Autocompleter.prototype.focusMove = function(modifier) {\n        var $items = this.getItems();\n        modifier = sanitizeInteger(modifier, 0);\n        if (modifier) {\n            for (var i = 0; i < $items.length; i++) {\n                if ($($items[i]).hasClass(this.selectClass_)) {\n                    this.focusItem(i + modifier);\n                    return;\n                }\n            }\n        }\n        this.focusItem(0);\n    };\n\n    $.Autocompleter.prototype.focusItem = function(item) {\n        var $item, $items = this.getItems();\n        if ($items.length) {\n            $items.removeClass(this.selectClass_).removeClass(this.options.selectClass);\n            if (typeof item === 'number') {\n                if (item < 0) {\n                    item = 0;\n                } else if (item >= $items.length) {\n                    item = $items.length - 1;\n                }\n                $item = $($items[item]);\n            } else {\n                $item = $(item);\n            }\n            if ($item) {\n                $item.addClass(this.selectClass_).addClass(this.options.selectClass);\n            }\n        }\n    };\n\n    $.Autocompleter.prototype.selectCurrent = function() {\n        var $item = $('li.' + this.selectClass_, this.dom.$results);\n        if ($item.length === 1) {\n            this.selectItem($item);\n        } else {\n            this.deactivate(false);\n        }\n    };\n\n    $.Autocompleter.prototype.selectItem = function($li) {\n        var value = $li.data('value');\n        var data = $li.data('data');\n        var displayValue = this.displayValue(value, data);\n        var processedDisplayValue = this.beforeUseConverter(displayValue);\n        this.lastProcessedValue_ = processedDisplayValue;\n        this.lastSelectedValue_ = processedDisplayValue;\n        var d = this.getDelimiterOffsets();\n        var delimiter = this.options.delimiterChar;\n        var elem = this.dom.$elem;\n        var extraCaretPos = 0;\n        if ( this.options.useDelimiter ) {\n            // if there is a preceding delimiter, add a space after the delimiter\n            if ( elem.val().substring(d.start-1, d.start) == delimiter && delimiter != ' ' ) {\n                displayValue = ' ' + displayValue;\n            }\n            // if there is not already a delimiter trailing this value, add it\n            if ( elem.val().substring(d.end, d.end+1) != delimiter && this.lastKeyPressed_ != this.options.delimiterKeyCode ) {\n                displayValue = displayValue + delimiter;\n            } else {\n                // move the cursor after the existing trailing delimiter\n                extraCaretPos = 1;\n            }\n        }\n        this.setValue(displayValue);\n        this.setCaret(d.start + displayValue.length + extraCaretPos);\n        this.callHook('onItemSelect', { value: value, data: data });\n        this.deactivate(true);\n        elem.focus();\n    };\n\n    $.Autocompleter.prototype.displayValue = function(value, data) {\n        if ($.isFunction(this.options.displayValue)) {\n            return this.options.displayValue(value, data);\n        }\n        return value;\n    };\n\n    $.Autocompleter.prototype.hideResults = function() {\n        this.dom.$results.hide();\n    };\n\n    $.Autocompleter.prototype.deactivate = function(finish) {\n        if (this.finishTimeout_) {\n            clearTimeout(this.finishTimeout_);\n        }\n        if (this.keyTimeout_) {\n            clearTimeout(this.keyTimeout_);\n        }\n        if (finish) {\n            if (this.lastProcessedValue_ !== this.lastSelectedValue_) {\n                if (this.options.mustMatch) {\n                    this.setValue('');\n                }\n                this.callHook('onNoMatch');\n            }\n            if (this.active_) {\n                this.callHook('onFinish');\n            }\n            this.lastKeyPressed_ = null;\n            this.lastProcessedValue_ = null;\n            this.lastSelectedValue_ = null;\n            this.active_ = false;\n        }\n        this.hideResults();\n    };\n\n    $.Autocompleter.prototype.selectRange = function(start, end) {\n        var input = this.dom.$elem.get(0);\n        if (input.setSelectionRange) {\n            input.focus();\n            input.setSelectionRange(start, end);\n        } else if (input.createTextRange) {\n            var range = input.createTextRange();\n            range.collapse(true);\n            range.moveEnd('character', end);\n            range.moveStart('character', start);\n            range.select();\n        }\n    };\n\n    /**\n     * Move caret to position\n     * @param {Number} pos\n     */\n    $.Autocompleter.prototype.setCaret = function(pos) {\n        this.selectRange(pos, pos);\n    };\n\n    /**\n     * Get caret position\n     */\n    $.Autocompleter.prototype.getCaret = function() {\n        var $elem = this.dom.$elem;\n        var elem = $elem[0];\n        var val, selection, range, start, end, stored_range;\n        if (elem.createTextRange) { // IE\n            selection = document.selection;\n            if (elem.tagName.toLowerCase() != 'textarea') {\n                val = $elem.val();\n                range = selection.createRange().duplicate();\n                range.moveEnd('character', val.length);\n                if (range.text === '') {\n                    start = val.length;\n                } else {\n                    start = val.lastIndexOf(range.text);\n                }\n                range = selection.createRange().duplicate();\n                range.moveStart('character', -val.length);\n                end = range.text.length;\n            } else {\n                range = selection.createRange();\n                stored_range = range.duplicate();\n                stored_range.moveToElementText(elem);\n                stored_range.setEndPoint('EndToEnd', range);\n                start = stored_range.text.length - range.text.length;\n                end = start + range.text.length;\n            }\n        } else {\n            start = $elem[0].selectionStart;\n            end = $elem[0].selectionEnd;\n        }\n        return {\n            start: start,\n            end: end\n        };\n    };\n\n    /**\n     * Set the value that is currently being autocompleted\n     * @param {String} value\n     */\n    $.Autocompleter.prototype.setValue = function(value) {\n        if ( this.options.useDelimiter ) {\n            // set the substring between the current delimiters\n            var val = this.dom.$elem.val();\n            var d = this.getDelimiterOffsets();\n            var preVal = val.substring(0, d.start);\n            var postVal = val.substring(d.end);\n            value = preVal + value + postVal;\n        }\n        this.dom.$elem.val(value);\n    };\n\n    /**\n     * Get the value currently being autocompleted\n     * @param {String} value\n     */\n    $.Autocompleter.prototype.getValue = function(value) {\n        if ( this.options.useDelimiter ) {\n            var d = this.getDelimiterOffsets();\n            return value.substring(d.start, d.end).trim();\n        } else {\n            return value;\n        }\n    };\n\n    /**\n     * Get the offsets of the value currently being autocompleted\n     */\n    $.Autocompleter.prototype.getDelimiterOffsets = function() {\n        var val = this.dom.$elem.val();\n        if ( this.options.useDelimiter ) {\n            var preCaretVal = val.substring(0, this.getCaret().start);\n            var start = preCaretVal.lastIndexOf(this.options.delimiterChar) + 1;\n            var postCaretVal = val.substring(this.getCaret().start);\n            var end = postCaretVal.indexOf(this.options.delimiterChar);\n            if ( end == -1 ) end = val.length;\n            end += this.getCaret().start;\n        } else {\n            start = 0;\n            end = val.length;\n        }\n        return {\n            start: start,\n            end: end\n        };\n    };\n\n})(jQuery);"]}