{"version":3,"sources":["libs/jquery.sparklines.js"],"names":["document","Math","undefined","factory","define","amd","jQuery","fn","sparkline","$","getDefaults","createClass","SPFormat","clipval","quartile","normalizeValue","normalizeValues","remove","isNumber","all","addCSS","ensureArray","formatNumber","RangeMap","MouseHandler","Tooltip","barHighlightMixin","line","bar","tristate","discrete","bullet","pie","box","defaultStyles","initStyles","VShape","VCanvas_base","VCanvas_canvas","VCanvas_vml","pending","UNSET_OPTION","shapeCount","common","type","lineColor","fillColor","defaultPixelsPerValue","width","height","composite","tagValuesAttribute","tagOptionsPrefix","enableTagOptions","enableHighlight","highlightLighten","tooltipSkipNull","tooltipPrefix","tooltipSuffix","disableHiddenCheck","numberFormatter","numberDigitGroupCount","numberDigitGroupSep","numberDecimalMark","disableTooltips","disableInteraction","spotColor","highlightSpotColor","highlightLineColor","spotRadius","minSpotColor","maxSpotColor","lineWidth","normalRangeMin","normalRangeMax","normalRangeColor","drawNormalOnTop","chartRangeMin","chartRangeMax","chartRangeMinX","chartRangeMaxX","tooltipFormat","barColor","negBarColor","stackedBarColor","zeroColor","nullColor","zeroAxis","barWidth","barSpacing","chartRangeClip","colorMap","posBarColor","zeroBarColor","tooltipValueLookups","map","-1","0","1","lineHeight","thresholdColor","thresholdValue","targetColor","targetWidth","performanceColor","rangeColors","base","fields","r","p","t","offset","sliceColors","borderWidth","borderColor","raw","boxLineColor","boxFillColor","whiskerColor","outlierLineColor","outlierFillColor","medianColor","showOutliers","outlierIQR","target","tooltipFormatFieldlistKey","lq","med","uq","lo","ro","lw","rw","Class","args","this","init","apply","arguments","length","prototype","extend","_super","Array","slice","call","unshift","cls","SPFormatClass","fre","precre","format","fclass","render","fieldset","lookups","options","match","token","lookupkey","fieldvalue","prec","self","replace","lookup","exec","get","spformat","val","min","max","values","q","vl","floor","nf","parseFloat","vals","i","result","filter","push","num","isNaN","isFinite","groupsize","groupsep","decsep","toString","toFixed","split","inArray","splice","join","arr","ignoreNull","isArray","css","tag","createStyleSheet","cssText","createElement","getElementsByTagName","appendChild","body","style","WebkitAppearance","simpledraw","useExisting","interact","mhandler","data","canvas","el","getContext","namespaces","v","add","innerWidth","innerHeight","registerCanvas","cleardraw","reset","RangeMapClass","key","range","rangelist","hasOwnProperty","indexOf","Infinity","value","range_map","$el","currentPageX","currentPageY","splist","tooltip","over","displayTooltips","highlightEnabled","registerSparkline","sp","updateDisplay","$canvas","mouseenter","proxy","mouseleave","click","mouseclick","removeTooltip","e","clickEvent","Event","originalEvent","sparklines","trigger","unbind","bind","mousemove","pageX","pageY","currentEl","updatePosition","spcount","needsRefresh","clearRegionHighlight","tooltiphtml","changeEvent","localX","left","localY","top","setRegionHighlight","getCurrentRegionTooltip","setContent","disableHighlight","sizeStyle","tooltipClassname","sizetipStyle","container","tooltipOffsetX","tooltipOffsetY","sizetip","id","class","appendTo","offsetLeft","offsetTop","hidden","window","updateWindowDims","scrollTop","scrollLeft","scrollRight","getSize","content","html","visibility","x","y","mousex","mousey","userValues","userOptions","each","$this","tmp","getAttribute","innerHTML","alert","is","parents","defaults","sparkline_display_visible","pl","done","closest","extendedOptions","tagOptionType","tagValCache","getTagSetting","mergedOptions","pairs","keyval","prefix","substr","defaultval","tagOption","_base","disabled","currentRegion","initTarget","interactive","canvasWidth","pixelWidth","canvasHeight","pixelHeight","getRegion","newRegion","removeHighlight","renderHighlight","changeHighlight","highlight","formats","formatlen","text","showFields","showFieldsKey","newFields","fv","formatter","fieldlen","j","header","entries","getCurrentRegionFields","isNull","suffix","calcHighlightColor","color","parse","mult","rgbnew","highlightColor","lighten","round","parseInt","newShapes","shapeids","regionShapes","renderRegion","replaceWithShapes","newShape","replaceWithShape","shapes","ids","append","vertices","regionMap","xvalues","yvalues","yminmax","hightlightSpotId","lastShapeId","highlightSpot","highlightLine","vertex","drawCircle","highlightSpotId","insertAfterShape","drawLine","canvasTop","highlightLineId","removeShapeId","scanValues","isStr","valcount","Number","maxy","maxyorg","miny","minyorg","maxx","minx","processRangeOptions","drawNormalRange","canvasLeft","rangey","ytop","drawRect","rangex","yvallast","path","paths","xnext","xpos","xposnext","last","next","yvalcount","lineShapes","fillShapes","plen","valueSpots","hlSpotsEnabled","ceil","pop","drawShape","getLastShapeId","isStackString","groupMin","groupMax","stackRanges","numValues","vlen","xaxisOffset","clipMin","clipMax","stacked","vlist","slen","svals","yoffset","yMaxCalc","stackMin","stackMax","totalBarWidth","stackTotals","stackRangesNeg","abs","canvasHeightEf","colorMapByIndex","colorMapByValue","calcColor","stacknum","valuenum","newColor","yoffsetNeg","minPlotted","allMin","halfHeight","interval","itemWidth","pheight","valueShapes","regiondata","shapeid","getShapeAt","fieldkey","region","shape","renderRange","renderPerformance","renderTarget","rn","rangeval","rangewidth","perfval","perfwidth","targetval","targettop","targetheight","p1","t0","total","radius","percent","newslice","renderSlice","start","end","circle","PI","drawPieSlice","field","quartiles","loutlier","routlier","lwhisker","rwhisker","iqr","q1","q2","q3","size","unitSize","minValue","maxValue","sort","a","b","appendShape","_pxregex","x1","y1","x2","y2","_genShape","startAngle","endAngle","getElement","_insert","_calculatePixelDims","shapetype","shapeargs","display","verticalAlign","shapeseq","currentTargetShapeId","_getContext","context","strokeStyle","fillStyle","clearRect","_drawShape","beginPath","moveTo","lineTo","stroke","fill","targetX","targetY","isPointInPath","_drawCircle","arc","_drawPieSlice","closePath","_drawRect","sid","first","shapemap","groupel","position","overflow","margin","padding","insertAdjacentHTML","group","children","rendered","prerender","initial","closed","vpath","startx","starty","endx","endy","cos","sin","vel","existing","outerHTML","removeChild"],"mappings":"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","file":"../../scripts/libs/jquery.sparklines.js","sourcesContent":["/**\n*\n* jquery.sparkline.js\n*\n* v2.1.2\n* (c) Splunk, Inc\n* Contact: Gareth Watts (gareth@splunk.com)\n* http://omnipotent.net/jquery.sparkline/\n*\n* Generates inline sparkline charts from data supplied either to the method\n* or inline in HTML\n*\n* Compatible with Internet Explorer 6.0+ and modern browsers equipped with the canvas tag\n* (Firefox 2.0+, Safari, Opera, etc)\n*\n* License: New BSD License\n*\n* Copyright (c) 2012, Splunk Inc.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*\n*     * Redistributions of source code must retain the above copyright notice,\n*       this list of conditions and the following disclaimer.\n*     * Redistributions in binary form must reproduce the above copyright notice,\n*       this list of conditions and the following disclaimer in the documentation\n*       and/or other materials provided with the distribution.\n*     * Neither the name of Splunk Inc nor the names of its contributors may\n*       be used to endorse or promote products derived from this software without\n*       specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\n* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n* SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\n* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*\n*\n* Usage:\n*  $(selector).sparkline(values, options)\n*\n* If values is undefined or set to 'html' then the data values are read from the specified tag:\n*   <p>Sparkline: <span class=\"sparkline\">1,4,6,6,8,5,3,5</span></p>\n*   $('.sparkline').sparkline();\n* There must be no spaces in the enclosed data set\n*\n* Otherwise values must be an array of numbers or null values\n*    <p>Sparkline: <span id=\"sparkline1\">This text replaced if the browser is compatible</span></p>\n*    $('#sparkline1').sparkline([1,4,6,6,8,5,3,5])\n*    $('#sparkline2').sparkline([1,4,6,null,null,5,3,5])\n*\n* Values can also be specified in an HTML comment, or as a values attribute:\n*    <p>Sparkline: <span class=\"sparkline\"><!--1,4,6,6,8,5,3,5 --></span></p>\n*    <p>Sparkline: <span class=\"sparkline\" values=\"1,4,6,6,8,5,3,5\"></span></p>\n*    $('.sparkline').sparkline();\n*\n* For line charts, x values can also be specified:\n*   <p>Sparkline: <span class=\"sparkline\">1:1,2.7:4,3.4:6,5:6,6:8,8.7:5,9:3,10:5</span></p>\n*    $('#sparkline1').sparkline([ [1,1], [2.7,4], [3.4,6], [5,6], [6,8], [8.7,5], [9,3], [10,5] ])\n*\n* By default, options should be passed in as teh second argument to the sparkline function:\n*   $('.sparkline').sparkline([1,2,3,4], {type: 'bar'})\n*\n* Options can also be set by passing them on the tag itself.  This feature is disabled by default though\n* as there's a slight performance overhead:\n*   $('.sparkline').sparkline([1,2,3,4], {enableTagOptions: true})\n*   <p>Sparkline: <span class=\"sparkline\" sparkType=\"bar\" sparkBarColor=\"red\">loading</span></p>\n* Prefix all options supplied as tag attribute with \"spark\" (configurable by setting tagOptionPrefix)\n*\n* Supported options:\n*   lineColor - Color of the line used for the chart\n*   fillColor - Color used to fill in the chart - Set to '' or false for a transparent chart\n*   width - Width of the chart - Defaults to 3 times the number of values in pixels\n*   height - Height of the chart - Defaults to the height of the containing element\n*   chartRangeMin - Specify the minimum value to use for the Y range of the chart - Defaults to the minimum value supplied\n*   chartRangeMax - Specify the maximum value to use for the Y range of the chart - Defaults to the maximum value supplied\n*   chartRangeClip - Clip out of range values to the max/min specified by chartRangeMin and chartRangeMax\n*   chartRangeMinX - Specify the minimum value to use for the X range of the chart - Defaults to the minimum value supplied\n*   chartRangeMaxX - Specify the maximum value to use for the X range of the chart - Defaults to the maximum value supplied\n*   composite - If true then don't erase any existing chart attached to the tag, but draw\n*           another chart over the top - Note that width and height are ignored if an\n*           existing chart is detected.\n*   tagValuesAttribute - Name of tag attribute to check for data values - Defaults to 'values'\n*   enableTagOptions - Whether to check tags for sparkline options\n*   tagOptionPrefix - Prefix used for options supplied as tag attributes - Defaults to 'spark'\n*   disableHiddenCheck - If set to true, then the plugin will assume that charts will never be drawn into a\n*           hidden dom element, avoding a browser reflow\n*   disableInteraction - If set to true then all mouseover/click interaction behaviour will be disabled,\n*       making the plugin perform much like it did in 1.x\n*   disableTooltips - If set to true then tooltips will be disabled - Defaults to false (tooltips enabled)\n*   disableHighlight - If set to true then highlighting of selected chart elements on mouseover will be disabled\n*       defaults to false (highlights enabled)\n*   highlightLighten - Factor to lighten/darken highlighted chart values by - Defaults to 1.4 for a 40% increase\n*   tooltipContainer - Specify which DOM element the tooltip should be rendered into - defaults to document.body\n*   tooltipClassname - Optional CSS classname to apply to tooltips - If not specified then a default style will be applied\n*   tooltipOffsetX - How many pixels away from the mouse pointer to render the tooltip on the X axis\n*   tooltipOffsetY - How many pixels away from the mouse pointer to render the tooltip on the r axis\n*   tooltipFormatter  - Optional callback that allows you to override the HTML displayed in the tooltip\n*       callback is given arguments of (sparkline, options, fields)\n*   tooltipChartTitle - If specified then the tooltip uses the string specified by this setting as a title\n*   tooltipFormat - A format string or SPFormat object  (or an array thereof for multiple entries)\n*       to control the format of the tooltip\n*   tooltipPrefix - A string to prepend to each field displayed in a tooltip\n*   tooltipSuffix - A string to append to each field displayed in a tooltip\n*   tooltipSkipNull - If true then null values will not have a tooltip displayed (defaults to true)\n*   tooltipValueLookups - An object or range map to map field values to tooltip strings\n*       (eg. to map -1 to \"Lost\", 0 to \"Draw\", and 1 to \"Win\")\n*   numberFormatter - Optional callback for formatting numbers in tooltips\n*   numberDigitGroupSep - Character to use for group separator in numbers \"1,234\" - Defaults to \",\"\n*   numberDecimalMark - Character to use for the decimal point when formatting numbers - Defaults to \".\"\n*   numberDigitGroupCount - Number of digits between group separator - Defaults to 3\n*\n* There are 7 types of sparkline, selected by supplying a \"type\" option of 'line' (default),\n* 'bar', 'tristate', 'bullet', 'discrete', 'pie' or 'box'\n*    line - Line chart.  Options:\n*       spotColor - Set to '' to not end each line in a circular spot\n*       minSpotColor - If set, color of spot at minimum value\n*       maxSpotColor - If set, color of spot at maximum value\n*       spotRadius - Radius in pixels\n*       lineWidth - Width of line in pixels\n*       normalRangeMin\n*       normalRangeMax - If set draws a filled horizontal bar between these two values marking the \"normal\"\n*                      or expected range of values\n*       normalRangeColor - Color to use for the above bar\n*       drawNormalOnTop - Draw the normal range above the chart fill color if true\n*       defaultPixelsPerValue - Defaults to 3 pixels of width for each value in the chart\n*       highlightSpotColor - The color to use for drawing a highlight spot on mouseover - Set to null to disable\n*       highlightLineColor - The color to use for drawing a highlight line on mouseover - Set to null to disable\n*       valueSpots - Specify which points to draw spots on, and in which color.  Accepts a range map\n*\n*   bar - Bar chart.  Options:\n*       barColor - Color of bars for postive values\n*       negBarColor - Color of bars for negative values\n*       zeroColor - Color of bars with zero values\n*       nullColor - Color of bars with null values - Defaults to omitting the bar entirely\n*       barWidth - Width of bars in pixels\n*       colorMap - Optional mappnig of values to colors to override the *BarColor values above\n*                  can be an Array of values to control the color of individual bars or a range map\n*                  to specify colors for individual ranges of values\n*       barSpacing - Gap between bars in pixels\n*       zeroAxis - Centers the y-axis around zero if true\n*\n*   tristate - Charts values of win (>0), lose (<0) or draw (=0)\n*       posBarColor - Color of win values\n*       negBarColor - Color of lose values\n*       zeroBarColor - Color of draw values\n*       barWidth - Width of bars in pixels\n*       barSpacing - Gap between bars in pixels\n*       colorMap - Optional mappnig of values to colors to override the *BarColor values above\n*                  can be an Array of values to control the color of individual bars or a range map\n*                  to specify colors for individual ranges of values\n*\n*   discrete - Options:\n*       lineHeight - Height of each line in pixels - Defaults to 30% of the graph height\n*       thesholdValue - Values less than this value will be drawn using thresholdColor instead of lineColor\n*       thresholdColor\n*\n*   bullet - Values for bullet graphs msut be in the order: target, performance, range1, range2, range3, ...\n*       options:\n*       targetColor - The color of the vertical target marker\n*       targetWidth - The width of the target marker in pixels\n*       performanceColor - The color of the performance measure horizontal bar\n*       rangeColors - Colors to use for each qualitative range background color\n*\n*   pie - Pie chart. Options:\n*       sliceColors - An array of colors to use for pie slices\n*       offset - Angle in degrees to offset the first slice - Try -90 or +90\n*       borderWidth - Width of border to draw around the pie chart, in pixels - Defaults to 0 (no border)\n*       borderColor - Color to use for the pie chart border - Defaults to #000\n*\n*   box - Box plot. Options:\n*       raw - Set to true to supply pre-computed plot points as values\n*             values should be: low_outlier, low_whisker, q1, median, q3, high_whisker, high_outlier\n*             When set to false you can supply any number of values and the box plot will\n*             be computed for you.  Default is false.\n*       showOutliers - Set to true (default) to display outliers as circles\n*       outlierIQR - Interquartile range used to determine outliers.  Default 1.5\n*       boxLineColor - Outline color of the box\n*       boxFillColor - Fill color for the box\n*       whiskerColor - Line color used for whiskers\n*       outlierLineColor - Outline color of outlier circles\n*       outlierFillColor - Fill color of the outlier circles\n*       spotRadius - Radius of outlier circles\n*       medianColor - Line color of the median line\n*       target - Draw a target cross hair at the supplied value (default undefined)\n*\n*\n*\n*   Examples:\n*   $('#sparkline1').sparkline(myvalues, { lineColor: '#f00', fillColor: false });\n*   $('.barsparks').sparkline('html', { type:'bar', height:'40px', barWidth:5 });\n*   $('#tristate').sparkline([1,1,-1,1,0,0,-1], { type:'tristate' }):\n*   $('#discrete').sparkline([1,3,4,5,5,3,4,5], { type:'discrete' });\n*   $('#bullet').sparkline([10,12,12,9,7], { type:'bullet' });\n*   $('#pie').sparkline([1,1,2], { type:'pie' });\n*/\n\n/*jslint regexp: true, browser: true, jquery: true, white: true, nomen: false, plusplus: false, maxerr: 500, indent: 4 */\n\n(function(document, Math, undefined) { // performance/minified-size optimization\n(function(factory) {\n    if(typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (jQuery && !jQuery.fn.sparkline) {\n        factory(jQuery);\n    }\n}\n(function($) {\n    'use strict';\n\n    var UNSET_OPTION = {},\n        getDefaults, createClass, SPFormat, clipval, quartile, normalizeValue, normalizeValues,\n        remove, isNumber, all, sum, addCSS, ensureArray, formatNumber, RangeMap,\n        MouseHandler, Tooltip, barHighlightMixin,\n        line, bar, tristate, discrete, bullet, pie, box, defaultStyles, initStyles,\n        VShape, VCanvas_base, VCanvas_canvas, VCanvas_vml, pending, shapeCount = 0;\n\n    /**\n     * Default configuration settings\n     */\n    getDefaults = function () {\n        return {\n            // Settings common to most/all chart types\n            common: {\n                type: 'line',\n                lineColor: '#00f',\n                fillColor: '#cdf',\n                defaultPixelsPerValue: 3,\n                width: 'auto',\n                height: 'auto',\n                composite: false,\n                tagValuesAttribute: 'values',\n                tagOptionsPrefix: 'spark',\n                enableTagOptions: false,\n                enableHighlight: true,\n                highlightLighten: 1.4,\n                tooltipSkipNull: true,\n                tooltipPrefix: '',\n                tooltipSuffix: '',\n                disableHiddenCheck: false,\n                numberFormatter: false,\n                numberDigitGroupCount: 3,\n                numberDigitGroupSep: ',',\n                numberDecimalMark: '.',\n                disableTooltips: false,\n                disableInteraction: false\n            },\n            // Defaults for line charts\n            line: {\n                spotColor: '#f80',\n                highlightSpotColor: '#5f5',\n                highlightLineColor: '#f22',\n                spotRadius: 1.5,\n                minSpotColor: '#f80',\n                maxSpotColor: '#f80',\n                lineWidth: 1,\n                normalRangeMin: undefined,\n                normalRangeMax: undefined,\n                normalRangeColor: '#ccc',\n                drawNormalOnTop: false,\n                chartRangeMin: undefined,\n                chartRangeMax: undefined,\n                chartRangeMinX: undefined,\n                chartRangeMaxX: undefined,\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{prefix}}{{y}}{{suffix}}')\n            },\n            // Defaults for bar charts\n            bar: {\n                barColor: '#3366cc',\n                negBarColor: '#f44',\n                stackedBarColor: ['#3366cc', '#dc3912', '#ff9900', '#109618', '#66aa00',\n                    '#dd4477', '#0099c6', '#990099'],\n                zeroColor: undefined,\n                nullColor: undefined,\n                zeroAxis: true,\n                barWidth: 4,\n                barSpacing: 1,\n                chartRangeMax: undefined,\n                chartRangeMin: undefined,\n                chartRangeClip: false,\n                colorMap: undefined,\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{prefix}}{{value}}{{suffix}}')\n            },\n            // Defaults for tristate charts\n            tristate: {\n                barWidth: 4,\n                barSpacing: 1,\n                posBarColor: '#6f6',\n                negBarColor: '#f44',\n                zeroBarColor: '#999',\n                colorMap: {},\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{value:map}}'),\n                tooltipValueLookups: { map: { '-1': 'Loss', '0': 'Draw', '1': 'Win' } }\n            },\n            // Defaults for discrete charts\n            discrete: {\n                lineHeight: 'auto',\n                thresholdColor: undefined,\n                thresholdValue: 0,\n                chartRangeMax: undefined,\n                chartRangeMin: undefined,\n                chartRangeClip: false,\n                tooltipFormat: new SPFormat('{{prefix}}{{value}}{{suffix}}')\n            },\n            // Defaults for bullet charts\n            bullet: {\n                targetColor: '#f33',\n                targetWidth: 3, // width of the target bar in pixels\n                performanceColor: '#33f',\n                rangeColors: ['#d3dafe', '#a8b6ff', '#7f94ff'],\n                base: undefined, // set this to a number to change the base start number\n                tooltipFormat: new SPFormat('{{fieldkey:fields}} - {{value}}'),\n                tooltipValueLookups: { fields: {r: 'Range', p: 'Performance', t: 'Target'} }\n            },\n            // Defaults for pie charts\n            pie: {\n                offset: 0,\n                sliceColors: ['#3366cc', '#dc3912', '#ff9900', '#109618', '#66aa00',\n                    '#dd4477', '#0099c6', '#990099'],\n                borderWidth: 0,\n                borderColor: '#000',\n                tooltipFormat: new SPFormat('<span style=\"color: {{color}}\">&#9679;</span> {{value}} ({{percent.1}}%)')\n            },\n            // Defaults for box plots\n            box: {\n                raw: false,\n                boxLineColor: '#000',\n                boxFillColor: '#cdf',\n                whiskerColor: '#000',\n                outlierLineColor: '#333',\n                outlierFillColor: '#fff',\n                medianColor: '#f00',\n                showOutliers: true,\n                outlierIQR: 1.5,\n                spotRadius: 1.5,\n                target: undefined,\n                targetColor: '#4a2',\n                chartRangeMax: undefined,\n                chartRangeMin: undefined,\n                tooltipFormat: new SPFormat('{{field:fields}}: {{value}}'),\n                tooltipFormatFieldlistKey: 'field',\n                tooltipValueLookups: { fields: { lq: 'Lower Quartile', med: 'Median',\n                    uq: 'Upper Quartile', lo: 'Left Outlier', ro: 'Right Outlier',\n                    lw: 'Left Whisker', rw: 'Right Whisker'} }\n            }\n        };\n    };\n\n    // You can have tooltips use a css class other than jqstooltip by specifying tooltipClassname\n    defaultStyles = '.jqstooltip { ' +\n            'position: absolute;' +\n            'left: 0px;' +\n            'top: 0px;' +\n            'visibility: hidden;' +\n            'background: rgb(0, 0, 0) transparent;' +\n            'background-color: rgba(0,0,0,0.6);' +\n            'filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);' +\n            '-ms-filter: \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)\";' +\n            'color: white;' +\n            'font: 10px arial, san serif;' +\n            'text-align: left;' +\n            'white-space: nowrap;' +\n            'padding: 5px;' +\n            'border: 1px solid white;' +\n            'z-index: 10000;' +\n            '}' +\n            '.jqsfield { ' +\n            'color: white;' +\n            'font: 10px arial, san serif;' +\n            'text-align: left;' +\n            '}';\n\n    /**\n     * Utilities\n     */\n\n    createClass = function (/* [baseclass, [mixin, ...]], definition */) {\n        var Class, args;\n        Class = function () {\n            this.init.apply(this, arguments);\n        };\n        if (arguments.length > 1) {\n            if (arguments[0]) {\n                Class.prototype = $.extend(new arguments[0](), arguments[arguments.length - 1]);\n                Class._super = arguments[0].prototype;\n            } else {\n                Class.prototype = arguments[arguments.length - 1];\n            }\n            if (arguments.length > 2) {\n                args = Array.prototype.slice.call(arguments, 1, -1);\n                args.unshift(Class.prototype);\n                $.extend.apply($, args);\n            }\n        } else {\n            Class.prototype = arguments[0];\n        }\n        Class.prototype.cls = Class;\n        return Class;\n    };\n\n    /**\n     * Wraps a format string for tooltips\n     * {{x}}\n     * {{x.2}\n     * {{x:months}}\n     */\n    $.SPFormatClass = SPFormat = createClass({\n        fre: /\\{\\{([\\w.]+?)(:(.+?))?\\}\\}/g,\n        precre: /(\\w+)\\.(\\d+)/,\n\n        init: function (format, fclass) {\n            this.format = format;\n            this.fclass = fclass;\n        },\n\n        render: function (fieldset, lookups, options) {\n            var self = this,\n                fields = fieldset,\n                match, token, lookupkey, fieldvalue, prec;\n            return this.format.replace(this.fre, function () {\n                var lookup;\n                token = arguments[1];\n                lookupkey = arguments[3];\n                match = self.precre.exec(token);\n                if (match) {\n                    prec = match[2];\n                    token = match[1];\n                } else {\n                    prec = false;\n                }\n                fieldvalue = fields[token];\n                if (fieldvalue === undefined) {\n                    return '';\n                }\n                if (lookupkey && lookups && lookups[lookupkey]) {\n                    lookup = lookups[lookupkey];\n                    if (lookup.get) { // RangeMap\n                        return lookups[lookupkey].get(fieldvalue) || fieldvalue;\n                    } else {\n                        return lookups[lookupkey][fieldvalue] || fieldvalue;\n                    }\n                }\n                if (isNumber(fieldvalue)) {\n                    if (options.get('numberFormatter')) {\n                        fieldvalue = options.get('numberFormatter')(fieldvalue);\n                    } else {\n                        fieldvalue = formatNumber(fieldvalue, prec,\n                            options.get('numberDigitGroupCount'),\n                            options.get('numberDigitGroupSep'),\n                            options.get('numberDecimalMark'));\n                    }\n                }\n                return fieldvalue;\n            });\n        }\n    });\n\n    // convience method to avoid needing the new operator\n    $.spformat = function(format, fclass) {\n        return new SPFormat(format, fclass);\n    };\n\n    clipval = function (val, min, max) {\n        if (val < min) {\n            return min;\n        }\n        if (val > max) {\n            return max;\n        }\n        return val;\n    };\n\n    quartile = function (values, q) {\n        var vl;\n        if (q === 2) {\n            vl = Math.floor(values.length / 2);\n            return values.length % 2 ? values[vl] : (values[vl-1] + values[vl]) / 2;\n        } else {\n            if (values.length % 2 ) { // odd\n                vl = (values.length * q + q) / 4;\n                return vl % 1 ? (values[Math.floor(vl)] + values[Math.floor(vl) - 1]) / 2 : values[vl-1];\n            } else { //even\n                vl = (values.length * q + 2) / 4;\n                return vl % 1 ? (values[Math.floor(vl)] + values[Math.floor(vl) - 1]) / 2 :  values[vl-1];\n\n            }\n        }\n    };\n\n    normalizeValue = function (val) {\n        var nf;\n        switch (val) {\n            case 'undefined':\n                val = undefined;\n                break;\n            case 'null':\n                val = null;\n                break;\n            case 'true':\n                val = true;\n                break;\n            case 'false':\n                val = false;\n                break;\n            default:\n                nf = parseFloat(val);\n                if (val == nf) {\n                    val = nf;\n                }\n        }\n        return val;\n    };\n\n    normalizeValues = function (vals) {\n        var i, result = [];\n        for (i = vals.length; i--;) {\n            result[i] = normalizeValue(vals[i]);\n        }\n        return result;\n    };\n\n    remove = function (vals, filter) {\n        var i, vl, result = [];\n        for (i = 0, vl = vals.length; i < vl; i++) {\n            if (vals[i] !== filter) {\n                result.push(vals[i]);\n            }\n        }\n        return result;\n    };\n\n    isNumber = function (num) {\n        return !isNaN(parseFloat(num)) && isFinite(num);\n    };\n\n    formatNumber = function (num, prec, groupsize, groupsep, decsep) {\n        var p, i;\n        num = (prec === false ? parseFloat(num).toString() : num.toFixed(prec)).split('');\n        p = (p = $.inArray('.', num)) < 0 ? num.length : p;\n        if (p < num.length) {\n            num[p] = decsep;\n        }\n        for (i = p - groupsize; i > 0; i -= groupsize) {\n            num.splice(i, 0, groupsep);\n        }\n        return num.join('');\n    };\n\n    // determine if all values of an array match a value\n    // returns true if the array is empty\n    all = function (val, arr, ignoreNull) {\n        var i;\n        for (i = arr.length; i--; ) {\n            if (ignoreNull && arr[i] === null) continue;\n            if (arr[i] !== val) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // sums the numeric values in an array, ignoring other values\n    sum = function (vals) {\n        var total = 0, i;\n        for (i = vals.length; i--;) {\n            total += typeof vals[i] === 'number' ? vals[i] : 0;\n        }\n        return total;\n    };\n\n    ensureArray = function (val) {\n        return $.isArray(val) ? val : [val];\n    };\n\n    // http://paulirish.com/2008/bookmarklet-inject-new-css-rules/\n    addCSS = function(css) {\n        var tag;\n        //if ('\\v' == 'v') /* ie only */ {\n        if (document.createStyleSheet) {\n            document.createStyleSheet().cssText = css;\n        } else {\n            tag = document.createElement('style');\n            tag.type = 'text/css';\n            document.getElementsByTagName('head')[0].appendChild(tag);\n            tag[(typeof document.body.style.WebkitAppearance == 'string') /* webkit only */ ? 'innerText' : 'innerHTML'] = css;\n        }\n    };\n\n    // Provide a cross-browser interface to a few simple drawing primitives\n    $.fn.simpledraw = function (width, height, useExisting, interact) {\n        var target, mhandler;\n        if (useExisting && (target = this.data('_jqs_vcanvas'))) {\n            return target;\n        }\n\n        if ($.fn.sparkline.canvas === false) {\n            // We've already determined that neither Canvas nor VML are available\n            return false;\n\n        } else if ($.fn.sparkline.canvas === undefined) {\n            // No function defined yet -- need to see if we support Canvas or VML\n            var el = document.createElement('canvas');\n            if (!!(el.getContext && el.getContext('2d'))) {\n                // Canvas is available\n                $.fn.sparkline.canvas = function(width, height, target, interact) {\n                    return new VCanvas_canvas(width, height, target, interact);\n                };\n            } else if (document.namespaces && !document.namespaces.v) {\n                // VML is available\n                document.namespaces.add('v', 'urn:schemas-microsoft-com:vml', '#default#VML');\n                $.fn.sparkline.canvas = function(width, height, target, interact) {\n                    return new VCanvas_vml(width, height, target);\n                };\n            } else {\n                // Neither Canvas nor VML are available\n                $.fn.sparkline.canvas = false;\n                return false;\n            }\n        }\n\n        if (width === undefined) {\n            width = $(this).innerWidth();\n        }\n        if (height === undefined) {\n            height = $(this).innerHeight();\n        }\n\n        target = $.fn.sparkline.canvas(width, height, this, interact);\n\n        mhandler = $(this).data('_jqs_mhandler');\n        if (mhandler) {\n            mhandler.registerCanvas(target);\n        }\n        return target;\n    };\n\n    $.fn.cleardraw = function () {\n        var target = this.data('_jqs_vcanvas');\n        if (target) {\n            target.reset();\n        }\n    };\n\n    $.RangeMapClass = RangeMap = createClass({\n        init: function (map) {\n            var key, range, rangelist = [];\n            for (key in map) {\n                if (map.hasOwnProperty(key) && typeof key === 'string' && key.indexOf(':') > -1) {\n                    range = key.split(':');\n                    range[0] = range[0].length === 0 ? -Infinity : parseFloat(range[0]);\n                    range[1] = range[1].length === 0 ? Infinity : parseFloat(range[1]);\n                    range[2] = map[key];\n                    rangelist.push(range);\n                }\n            }\n            this.map = map;\n            this.rangelist = rangelist || false;\n        },\n\n        get: function (value) {\n            var rangelist = this.rangelist,\n                i, range, result;\n            if ((result = this.map[value]) !== undefined) {\n                return result;\n            }\n            if (rangelist) {\n                for (i = rangelist.length; i--;) {\n                    range = rangelist[i];\n                    if (range[0] <= value && range[1] >= value) {\n                        return range[2];\n                    }\n                }\n            }\n            return undefined;\n        }\n    });\n\n    // Convenience function\n    $.range_map = function(map) {\n        return new RangeMap(map);\n    };\n\n    MouseHandler = createClass({\n        init: function (el, options) {\n            var $el = $(el);\n            this.$el = $el;\n            this.options = options;\n            this.currentPageX = 0;\n            this.currentPageY = 0;\n            this.el = el;\n            this.splist = [];\n            this.tooltip = null;\n            this.over = false;\n            this.displayTooltips = !options.get('disableTooltips');\n            this.highlightEnabled = !options.get('disableHighlight');\n        },\n\n        registerSparkline: function (sp) {\n            this.splist.push(sp);\n            if (this.over) {\n                this.updateDisplay();\n            }\n        },\n\n        registerCanvas: function (canvas) {\n            var $canvas = $(canvas.canvas);\n            this.canvas = canvas;\n            this.$canvas = $canvas;\n            $canvas.mouseenter($.proxy(this.mouseenter, this));\n            $canvas.mouseleave($.proxy(this.mouseleave, this));\n            $canvas.click($.proxy(this.mouseclick, this));\n        },\n\n        reset: function (removeTooltip) {\n            this.splist = [];\n            if (this.tooltip && removeTooltip) {\n                this.tooltip.remove();\n                this.tooltip = undefined;\n            }\n        },\n\n        mouseclick: function (e) {\n            var clickEvent = $.Event('sparklineClick');\n            clickEvent.originalEvent = e;\n            clickEvent.sparklines = this.splist;\n            this.$el.trigger(clickEvent);\n        },\n\n        mouseenter: function (e) {\n            $(document.body).unbind('mousemove.jqs');\n            $(document.body).bind('mousemove.jqs', $.proxy(this.mousemove, this));\n            this.over = true;\n            this.currentPageX = e.pageX;\n            this.currentPageY = e.pageY;\n            this.currentEl = e.target;\n            if (!this.tooltip && this.displayTooltips) {\n                this.tooltip = new Tooltip(this.options);\n                this.tooltip.updatePosition(e.pageX, e.pageY);\n            }\n            this.updateDisplay();\n        },\n\n        mouseleave: function () {\n            $(document.body).unbind('mousemove.jqs');\n            var splist = this.splist,\n                 spcount = splist.length,\n                 needsRefresh = false,\n                 sp, i;\n            this.over = false;\n            this.currentEl = null;\n\n            if (this.tooltip) {\n                this.tooltip.remove();\n                this.tooltip = null;\n            }\n\n            for (i = 0; i < spcount; i++) {\n                sp = splist[i];\n                if (sp.clearRegionHighlight()) {\n                    needsRefresh = true;\n                }\n            }\n\n            if (needsRefresh) {\n                this.canvas.render();\n            }\n        },\n\n        mousemove: function (e) {\n            this.currentPageX = e.pageX;\n            this.currentPageY = e.pageY;\n            this.currentEl = e.target;\n            if (this.tooltip) {\n                this.tooltip.updatePosition(e.pageX, e.pageY);\n            }\n            this.updateDisplay();\n        },\n\n        updateDisplay: function () {\n            var splist = this.splist,\n                 spcount = splist.length,\n                 needsRefresh = false,\n                 offset = this.$canvas.offset(),\n                 localX = this.currentPageX - offset.left,\n                 localY = this.currentPageY - offset.top,\n                 tooltiphtml, sp, i, result, changeEvent;\n            if (!this.over) {\n                return;\n            }\n            for (i = 0; i < spcount; i++) {\n                sp = splist[i];\n                result = sp.setRegionHighlight(this.currentEl, localX, localY);\n                if (result) {\n                    needsRefresh = true;\n                }\n            }\n            if (needsRefresh) {\n                changeEvent = $.Event('sparklineRegionChange');\n                changeEvent.sparklines = this.splist;\n                this.$el.trigger(changeEvent);\n                if (this.tooltip) {\n                    tooltiphtml = '';\n                    for (i = 0; i < spcount; i++) {\n                        sp = splist[i];\n                        tooltiphtml += sp.getCurrentRegionTooltip();\n                    }\n                    this.tooltip.setContent(tooltiphtml);\n                }\n                if (!this.disableHighlight) {\n                    this.canvas.render();\n                }\n            }\n            if (result === null) {\n                this.mouseleave();\n            }\n        }\n    });\n\n\n    Tooltip = createClass({\n        sizeStyle: 'position: static !important;' +\n            'display: block !important;' +\n            'visibility: hidden !important;' +\n            'float: left !important;',\n\n        init: function (options) {\n            var tooltipClassname = options.get('tooltipClassname', 'jqstooltip'),\n                sizetipStyle = this.sizeStyle,\n                offset;\n            this.container = options.get('tooltipContainer') || document.body;\n            this.tooltipOffsetX = options.get('tooltipOffsetX', 10);\n            this.tooltipOffsetY = options.get('tooltipOffsetY', 12);\n            // remove any previous lingering tooltip\n            $('#jqssizetip').remove();\n            $('#jqstooltip').remove();\n            this.sizetip = $('<div/>', {\n                id: 'jqssizetip',\n                style: sizetipStyle,\n                'class': tooltipClassname\n            });\n            this.tooltip = $('<div/>', {\n                id: 'jqstooltip',\n                'class': tooltipClassname\n            }).appendTo(this.container);\n            // account for the container's location\n            offset = this.tooltip.offset();\n            this.offsetLeft = offset.left;\n            this.offsetTop = offset.top;\n            this.hidden = true;\n            $(window).unbind('resize.jqs scroll.jqs');\n            $(window).bind('resize.jqs scroll.jqs', $.proxy(this.updateWindowDims, this));\n            this.updateWindowDims();\n        },\n\n        updateWindowDims: function () {\n            this.scrollTop = $(window).scrollTop();\n            this.scrollLeft = $(window).scrollLeft();\n            this.scrollRight = this.scrollLeft + $(window).width();\n            this.updatePosition();\n        },\n\n        getSize: function (content) {\n            this.sizetip.html(content).appendTo(this.container);\n            this.width = this.sizetip.width() + 1;\n            this.height = this.sizetip.height();\n            this.sizetip.remove();\n        },\n\n        setContent: function (content) {\n            if (!content) {\n                this.tooltip.css('visibility', 'hidden');\n                this.hidden = true;\n                return;\n            }\n            this.getSize(content);\n            this.tooltip.html(content)\n                .css({\n                    'width': this.width,\n                    'height': this.height,\n                    'visibility': 'visible'\n                });\n            if (this.hidden) {\n                this.hidden = false;\n                this.updatePosition();\n            }\n        },\n\n        updatePosition: function (x, y) {\n            if (x === undefined) {\n                if (this.mousex === undefined) {\n                    return;\n                }\n                x = this.mousex - this.offsetLeft;\n                y = this.mousey - this.offsetTop;\n\n            } else {\n                this.mousex = x = x - this.offsetLeft;\n                this.mousey = y = y - this.offsetTop;\n            }\n            if (!this.height || !this.width || this.hidden) {\n                return;\n            }\n\n            y -= this.height + this.tooltipOffsetY;\n            x += this.tooltipOffsetX;\n\n            if (y < this.scrollTop) {\n                y = this.scrollTop;\n            }\n            if (x < this.scrollLeft) {\n                x = this.scrollLeft;\n            } else if (x + this.width > this.scrollRight) {\n                x = this.scrollRight - this.width;\n            }\n\n            this.tooltip.css({\n                'left': x,\n                'top': y\n            });\n        },\n\n        remove: function () {\n            this.tooltip.remove();\n            this.sizetip.remove();\n            this.sizetip = this.tooltip = undefined;\n            $(window).unbind('resize.jqs scroll.jqs');\n        }\n    });\n\n    initStyles = function() {\n        addCSS(defaultStyles);\n    };\n\n    $(initStyles);\n\n    pending = [];\n    $.fn.sparkline = function (userValues, userOptions) {\n        return this.each(function () {\n            var options = new $.fn.sparkline.options(this, userOptions),\n                 $this = $(this),\n                 render, i;\n            render = function () {\n                var values, width, height, tmp, mhandler, sp, vals;\n                if (userValues === 'html' || userValues === undefined) {\n                    vals = this.getAttribute(options.get('tagValuesAttribute'));\n                    if (vals === undefined || vals === null) {\n                        vals = $this.html();\n                    }\n                    values = vals.replace(/(^\\s*<!--)|(-->\\s*$)|\\s+/g, '').split(',');\n                } else {\n                    values = userValues;\n                }\n\n                width = options.get('width') === 'auto' ? values.length * options.get('defaultPixelsPerValue') : options.get('width');\n                if (options.get('height') === 'auto') {\n                    if (!options.get('composite') || !$.data(this, '_jqs_vcanvas')) {\n                        // must be a better way to get the line height\n                        tmp = document.createElement('span');\n                        tmp.innerHTML = 'a';\n                        $this.html(tmp);\n                        height = $(tmp).innerHeight() || $(tmp).height();\n                        $(tmp).remove();\n                        tmp = null;\n                    }\n                } else {\n                    height = options.get('height');\n                }\n\n                if (!options.get('disableInteraction')) {\n                    mhandler = $.data(this, '_jqs_mhandler');\n                    if (!mhandler) {\n                        mhandler = new MouseHandler(this, options);\n                        $.data(this, '_jqs_mhandler', mhandler);\n                    } else if (!options.get('composite')) {\n                        mhandler.reset();\n                    }\n                } else {\n                    mhandler = false;\n                }\n\n                if (options.get('composite') && !$.data(this, '_jqs_vcanvas')) {\n                    if (!$.data(this, '_jqs_errnotify')) {\n                        alert('Attempted to attach a composite sparkline to an element with no existing sparkline');\n                        $.data(this, '_jqs_errnotify', true);\n                    }\n                    return;\n                }\n\n                sp = new $.fn.sparkline[options.get('type')](this, values, options, width, height);\n\n                sp.render();\n\n                if (mhandler) {\n                    mhandler.registerSparkline(sp);\n                }\n            };\n            if (($(this).html() && !options.get('disableHiddenCheck') && $(this).is(':hidden')) || !$(this).parents('body').length) {\n                if (!options.get('composite') && $.data(this, '_jqs_pending')) {\n                    // remove any existing references to the element\n                    for (i = pending.length; i; i--) {\n                        if (pending[i - 1][0] == this) {\n                            pending.splice(i - 1, 1);\n                        }\n                    }\n                }\n                pending.push([this, render]);\n                $.data(this, '_jqs_pending', true);\n            } else {\n                render.call(this);\n            }\n        });\n    };\n\n    $.fn.sparkline.defaults = getDefaults();\n\n\n    $.sparkline_display_visible = function () {\n        var el, i, pl;\n        var done = [];\n        for (i = 0, pl = pending.length; i < pl; i++) {\n            el = pending[i][0];\n            if ($(el).is(':visible') && !$(el).parents().is(':hidden')) {\n                pending[i][1].call(el);\n                $.data(pending[i][0], '_jqs_pending', false);\n                done.push(i);\n            } else if (!$(el).closest('html').length && !$.data(el, '_jqs_pending')) {\n                // element has been inserted and removed from the DOM\n                // If it was not yet inserted into the dom then the .data request\n                // will return true.\n                // removing from the dom causes the data to be removed.\n                $.data(pending[i][0], '_jqs_pending', false);\n                done.push(i);\n            }\n        }\n        for (i = done.length; i; i--) {\n            pending.splice(done[i - 1], 1);\n        }\n    };\n\n\n    /**\n     * User option handler\n     */\n    $.fn.sparkline.options = createClass({\n        init: function (tag, userOptions) {\n            var extendedOptions, defaults, base, tagOptionType;\n            this.userOptions = userOptions = userOptions || {};\n            this.tag = tag;\n            this.tagValCache = {};\n            defaults = $.fn.sparkline.defaults;\n            base = defaults.common;\n            this.tagOptionsPrefix = userOptions.enableTagOptions && (userOptions.tagOptionsPrefix || base.tagOptionsPrefix);\n\n            tagOptionType = this.getTagSetting('type');\n            if (tagOptionType === UNSET_OPTION) {\n                extendedOptions = defaults[userOptions.type || base.type];\n            } else {\n                extendedOptions = defaults[tagOptionType];\n            }\n            this.mergedOptions = $.extend({}, base, extendedOptions, userOptions);\n        },\n\n\n        getTagSetting: function (key) {\n            var prefix = this.tagOptionsPrefix,\n                val, i, pairs, keyval;\n            if (prefix === false || prefix === undefined) {\n                return UNSET_OPTION;\n            }\n            if (this.tagValCache.hasOwnProperty(key)) {\n                val = this.tagValCache.key;\n            } else {\n                val = this.tag.getAttribute(prefix + key);\n                if (val === undefined || val === null) {\n                    val = UNSET_OPTION;\n                } else if (val.substr(0, 1) === '[') {\n                    val = val.substr(1, val.length - 2).split(',');\n                    for (i = val.length; i--;) {\n                        val[i] = normalizeValue(val[i].replace(/(^\\s*)|(\\s*$)/g, ''));\n                    }\n                } else if (val.substr(0, 1) === '{') {\n                    pairs = val.substr(1, val.length - 2).split(',');\n                    val = {};\n                    for (i = pairs.length; i--;) {\n                        keyval = pairs[i].split(':', 2);\n                        val[keyval[0].replace(/(^\\s*)|(\\s*$)/g, '')] = normalizeValue(keyval[1].replace(/(^\\s*)|(\\s*$)/g, ''));\n                    }\n                } else {\n                    val = normalizeValue(val);\n                }\n                this.tagValCache.key = val;\n            }\n            return val;\n        },\n\n        get: function (key, defaultval) {\n            var tagOption = this.getTagSetting(key),\n                result;\n            if (tagOption !== UNSET_OPTION) {\n                return tagOption;\n            }\n            return (result = this.mergedOptions[key]) === undefined ? defaultval : result;\n        }\n    });\n\n\n    $.fn.sparkline._base = createClass({\n        disabled: false,\n\n        init: function (el, values, options, width, height) {\n            this.el = el;\n            this.$el = $(el);\n            this.values = values;\n            this.options = options;\n            this.width = width;\n            this.height = height;\n            this.currentRegion = undefined;\n        },\n\n        /**\n         * Setup the canvas\n         */\n        initTarget: function () {\n            var interactive = !this.options.get('disableInteraction');\n            if (!(this.target = this.$el.simpledraw(this.width, this.height, this.options.get('composite'), interactive))) {\n                this.disabled = true;\n            } else {\n                this.canvasWidth = this.target.pixelWidth;\n                this.canvasHeight = this.target.pixelHeight;\n            }\n        },\n\n        /**\n         * Actually render the chart to the canvas\n         */\n        render: function () {\n            if (this.disabled) {\n                this.el.innerHTML = '';\n                return false;\n            }\n            return true;\n        },\n\n        /**\n         * Return a region id for a given x/y co-ordinate\n         */\n        getRegion: function (x, y) {\n        },\n\n        /**\n         * Highlight an item based on the moused-over x,y co-ordinate\n         */\n        setRegionHighlight: function (el, x, y) {\n            var currentRegion = this.currentRegion,\n                highlightEnabled = !this.options.get('disableHighlight'),\n                newRegion;\n            if (x > this.canvasWidth || y > this.canvasHeight || x < 0 || y < 0) {\n                return null;\n            }\n            newRegion = this.getRegion(el, x, y);\n            if (currentRegion !== newRegion) {\n                if (currentRegion !== undefined && highlightEnabled) {\n                    this.removeHighlight();\n                }\n                this.currentRegion = newRegion;\n                if (newRegion !== undefined && highlightEnabled) {\n                    this.renderHighlight();\n                }\n                return true;\n            }\n            return false;\n        },\n\n        /**\n         * Reset any currently highlighted item\n         */\n        clearRegionHighlight: function () {\n            if (this.currentRegion !== undefined) {\n                this.removeHighlight();\n                this.currentRegion = undefined;\n                return true;\n            }\n            return false;\n        },\n\n        renderHighlight: function () {\n            this.changeHighlight(true);\n        },\n\n        removeHighlight: function () {\n            this.changeHighlight(false);\n        },\n\n        changeHighlight: function (highlight)  {},\n\n        /**\n         * Fetch the HTML to display as a tooltip\n         */\n        getCurrentRegionTooltip: function () {\n            var options = this.options,\n                header = '',\n                entries = [],\n                fields, formats, formatlen, fclass, text, i,\n                showFields, showFieldsKey, newFields, fv,\n                formatter, format, fieldlen, j;\n            if (this.currentRegion === undefined) {\n                return '';\n            }\n            fields = this.getCurrentRegionFields();\n            formatter = options.get('tooltipFormatter');\n            if (formatter) {\n                return formatter(this, options, fields);\n            }\n            if (options.get('tooltipChartTitle')) {\n                header += '<div class=\"jqs jqstitle\">' + options.get('tooltipChartTitle') + '</div>\\n';\n            }\n            formats = this.options.get('tooltipFormat');\n            if (!formats) {\n                return '';\n            }\n            if (!$.isArray(formats)) {\n                formats = [formats];\n            }\n            if (!$.isArray(fields)) {\n                fields = [fields];\n            }\n            showFields = this.options.get('tooltipFormatFieldlist');\n            showFieldsKey = this.options.get('tooltipFormatFieldlistKey');\n            if (showFields && showFieldsKey) {\n                // user-selected ordering of fields\n                newFields = [];\n                for (i = fields.length; i--;) {\n                    fv = fields[i][showFieldsKey];\n                    if ((j = $.inArray(fv, showFields)) != -1) {\n                        newFields[j] = fields[i];\n                    }\n                }\n                fields = newFields;\n            }\n            formatlen = formats.length;\n            fieldlen = fields.length;\n            for (i = 0; i < formatlen; i++) {\n                format = formats[i];\n                if (typeof format === 'string') {\n                    format = new SPFormat(format);\n                }\n                fclass = format.fclass || 'jqsfield';\n                for (j = 0; j < fieldlen; j++) {\n                    if (!fields[j].isNull || !options.get('tooltipSkipNull')) {\n                        $.extend(fields[j], {\n                            prefix: options.get('tooltipPrefix'),\n                            suffix: options.get('tooltipSuffix')\n                        });\n                        text = format.render(fields[j], options.get('tooltipValueLookups'), options);\n                        entries.push('<div class=\"' + fclass + '\">' + text + '</div>');\n                    }\n                }\n            }\n            if (entries.length) {\n                return header + entries.join('\\n');\n            }\n            return '';\n        },\n\n        getCurrentRegionFields: function () {},\n\n        calcHighlightColor: function (color, options) {\n            var highlightColor = options.get('highlightColor'),\n                lighten = options.get('highlightLighten'),\n                parse, mult, rgbnew, i;\n            if (highlightColor) {\n                return highlightColor;\n            }\n            if (lighten) {\n                // extract RGB values\n                parse = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(color) || /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(color);\n                if (parse) {\n                    rgbnew = [];\n                    mult = color.length === 4 ? 16 : 1;\n                    for (i = 0; i < 3; i++) {\n                        rgbnew[i] = clipval(Math.round(parseInt(parse[i + 1], 16) * mult * lighten), 0, 255);\n                    }\n                    return 'rgb(' + rgbnew.join(',') + ')';\n                }\n\n            }\n            return color;\n        }\n\n    });\n\n    barHighlightMixin = {\n        changeHighlight: function (highlight) {\n            var currentRegion = this.currentRegion,\n                target = this.target,\n                shapeids = this.regionShapes[currentRegion],\n                newShapes;\n            // will be null if the region value was null\n            if (shapeids) {\n                newShapes = this.renderRegion(currentRegion, highlight);\n                if ($.isArray(newShapes) || $.isArray(shapeids)) {\n                    target.replaceWithShapes(shapeids, newShapes);\n                    this.regionShapes[currentRegion] = $.map(newShapes, function (newShape) {\n                        return newShape.id;\n                    });\n                } else {\n                    target.replaceWithShape(shapeids, newShapes);\n                    this.regionShapes[currentRegion] = newShapes.id;\n                }\n            }\n        },\n\n        render: function () {\n            var values = this.values,\n                target = this.target,\n                regionShapes = this.regionShapes,\n                shapes, ids, i, j;\n\n            if (!this.cls._super.render.call(this)) {\n                return;\n            }\n            for (i = values.length; i--;) {\n                shapes = this.renderRegion(i);\n                if (shapes) {\n                    if ($.isArray(shapes)) {\n                        ids = [];\n                        for (j = shapes.length; j--;) {\n                            shapes[j].append();\n                            ids.push(shapes[j].id);\n                        }\n                        regionShapes[i] = ids;\n                    } else {\n                        shapes.append();\n                        regionShapes[i] = shapes.id; // store just the shapeid\n                    }\n                } else {\n                    // null value\n                    regionShapes[i] = null;\n                }\n            }\n            target.render();\n        }\n    };\n\n    /**\n     * Line charts\n     */\n    $.fn.sparkline.line = line = createClass($.fn.sparkline._base, {\n        type: 'line',\n\n        init: function (el, values, options, width, height) {\n            line._super.init.call(this, el, values, options, width, height);\n            this.vertices = [];\n            this.regionMap = [];\n            this.xvalues = [];\n            this.yvalues = [];\n            this.yminmax = [];\n            this.hightlightSpotId = null;\n            this.lastShapeId = null;\n            this.initTarget();\n        },\n\n        getRegion: function (el, x, y) {\n            var i,\n                regionMap = this.regionMap; // maps regions to value positions\n            for (i = regionMap.length; i--;) {\n                if (regionMap[i] !== null && x >= regionMap[i][0] && x <= regionMap[i][1]) {\n                    return regionMap[i][2];\n                }\n            }\n            return undefined;\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                isNull: this.yvalues[currentRegion] === null,\n                x: this.xvalues[currentRegion],\n                y: this.yvalues[currentRegion],\n                color: this.options.get('lineColor'),\n                fillColor: this.options.get('fillColor'),\n                offset: currentRegion\n            };\n        },\n\n        renderHighlight: function () {\n            var currentRegion = this.currentRegion,\n                target = this.target,\n                vertex = this.vertices[currentRegion],\n                options = this.options,\n                spotRadius = options.get('spotRadius'),\n                highlightSpotColor = options.get('highlightSpotColor'),\n                highlightLineColor = options.get('highlightLineColor'),\n                highlightSpot, highlightLine;\n\n            if (!vertex) {\n                return;\n            }\n            if (spotRadius && highlightSpotColor) {\n                highlightSpot = target.drawCircle(vertex[0], vertex[1],\n                    spotRadius, undefined, highlightSpotColor);\n                this.highlightSpotId = highlightSpot.id;\n                target.insertAfterShape(this.lastShapeId, highlightSpot);\n            }\n            if (highlightLineColor) {\n                highlightLine = target.drawLine(vertex[0], this.canvasTop, vertex[0],\n                    this.canvasTop + this.canvasHeight, highlightLineColor);\n                this.highlightLineId = highlightLine.id;\n                target.insertAfterShape(this.lastShapeId, highlightLine);\n            }\n        },\n\n        removeHighlight: function () {\n            var target = this.target;\n            if (this.highlightSpotId) {\n                target.removeShapeId(this.highlightSpotId);\n                this.highlightSpotId = null;\n            }\n            if (this.highlightLineId) {\n                target.removeShapeId(this.highlightLineId);\n                this.highlightLineId = null;\n            }\n        },\n\n        scanValues: function () {\n            var values = this.values,\n                valcount = values.length,\n                xvalues = this.xvalues,\n                yvalues = this.yvalues,\n                yminmax = this.yminmax,\n                i, val, isStr, isArray, sp;\n            for (i = 0; i < valcount; i++) {\n                val = values[i];\n                isStr = typeof(values[i]) === 'string';\n                isArray = typeof(values[i]) === 'object' && values[i] instanceof Array;\n                sp = isStr && values[i].split(':');\n                if (isStr && sp.length === 2) { // x:y\n                    xvalues.push(Number(sp[0]));\n                    yvalues.push(Number(sp[1]));\n                    yminmax.push(Number(sp[1]));\n                } else if (isArray) {\n                    xvalues.push(val[0]);\n                    yvalues.push(val[1]);\n                    yminmax.push(val[1]);\n                } else {\n                    xvalues.push(i);\n                    if (values[i] === null || values[i] === 'null') {\n                        yvalues.push(null);\n                    } else {\n                        yvalues.push(Number(val));\n                        yminmax.push(Number(val));\n                    }\n                }\n            }\n            if (this.options.get('xvalues')) {\n                xvalues = this.options.get('xvalues');\n            }\n\n            this.maxy = this.maxyorg = Math.max.apply(Math, yminmax);\n            this.miny = this.minyorg = Math.min.apply(Math, yminmax);\n\n            this.maxx = Math.max.apply(Math, xvalues);\n            this.minx = Math.min.apply(Math, xvalues);\n\n            this.xvalues = xvalues;\n            this.yvalues = yvalues;\n            this.yminmax = yminmax;\n\n        },\n\n        processRangeOptions: function () {\n            var options = this.options,\n                normalRangeMin = options.get('normalRangeMin'),\n                normalRangeMax = options.get('normalRangeMax');\n\n            if (normalRangeMin !== undefined) {\n                if (normalRangeMin < this.miny) {\n                    this.miny = normalRangeMin;\n                }\n                if (normalRangeMax > this.maxy) {\n                    this.maxy = normalRangeMax;\n                }\n            }\n            if (options.get('chartRangeMin') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMin') < this.miny)) {\n                this.miny = options.get('chartRangeMin');\n            }\n            if (options.get('chartRangeMax') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMax') > this.maxy)) {\n                this.maxy = options.get('chartRangeMax');\n            }\n            if (options.get('chartRangeMinX') !== undefined && (options.get('chartRangeClipX') || options.get('chartRangeMinX') < this.minx)) {\n                this.minx = options.get('chartRangeMinX');\n            }\n            if (options.get('chartRangeMaxX') !== undefined && (options.get('chartRangeClipX') || options.get('chartRangeMaxX') > this.maxx)) {\n                this.maxx = options.get('chartRangeMaxX');\n            }\n\n        },\n\n        drawNormalRange: function (canvasLeft, canvasTop, canvasHeight, canvasWidth, rangey) {\n            var normalRangeMin = this.options.get('normalRangeMin'),\n                normalRangeMax = this.options.get('normalRangeMax'),\n                ytop = canvasTop + Math.round(canvasHeight - (canvasHeight * ((normalRangeMax - this.miny) / rangey))),\n                height = Math.round((canvasHeight * (normalRangeMax - normalRangeMin)) / rangey);\n            this.target.drawRect(canvasLeft, ytop, canvasWidth, height, undefined, this.options.get('normalRangeColor')).append();\n        },\n\n        render: function () {\n            var options = this.options,\n                target = this.target,\n                canvasWidth = this.canvasWidth,\n                canvasHeight = this.canvasHeight,\n                vertices = this.vertices,\n                spotRadius = options.get('spotRadius'),\n                regionMap = this.regionMap,\n                rangex, rangey, yvallast,\n                canvasTop, canvasLeft,\n                vertex, path, paths, x, y, xnext, xpos, xposnext,\n                last, next, yvalcount, lineShapes, fillShapes, plen,\n                valueSpots, hlSpotsEnabled, color, xvalues, yvalues, i;\n\n            if (!line._super.render.call(this)) {\n                return;\n            }\n\n            this.scanValues();\n            this.processRangeOptions();\n\n            xvalues = this.xvalues;\n            yvalues = this.yvalues;\n\n            if (!this.yminmax.length || this.yvalues.length < 2) {\n                // empty or all null valuess\n                return;\n            }\n\n            canvasTop = canvasLeft = 0;\n\n            rangex = this.maxx - this.minx === 0 ? 1 : this.maxx - this.minx;\n            rangey = this.maxy - this.miny === 0 ? 1 : this.maxy - this.miny;\n            yvallast = this.yvalues.length - 1;\n\n            if (spotRadius && (canvasWidth < (spotRadius * 4) || canvasHeight < (spotRadius * 4))) {\n                spotRadius = 0;\n            }\n            if (spotRadius) {\n                // adjust the canvas size as required so that spots will fit\n                hlSpotsEnabled = options.get('highlightSpotColor') &&  !options.get('disableInteraction');\n                if (hlSpotsEnabled || options.get('minSpotColor') || (options.get('spotColor') && yvalues[yvallast] === this.miny)) {\n                    canvasHeight -= Math.ceil(spotRadius);\n                }\n                if (hlSpotsEnabled || options.get('maxSpotColor') || (options.get('spotColor') && yvalues[yvallast] === this.maxy)) {\n                    canvasHeight -= Math.ceil(spotRadius);\n                    canvasTop += Math.ceil(spotRadius);\n                }\n                if (hlSpotsEnabled ||\n                     ((options.get('minSpotColor') || options.get('maxSpotColor')) && (yvalues[0] === this.miny || yvalues[0] === this.maxy))) {\n                    canvasLeft += Math.ceil(spotRadius);\n                    canvasWidth -= Math.ceil(spotRadius);\n                }\n                if (hlSpotsEnabled || options.get('spotColor') ||\n                    (options.get('minSpotColor') || options.get('maxSpotColor') &&\n                        (yvalues[yvallast] === this.miny || yvalues[yvallast] === this.maxy))) {\n                    canvasWidth -= Math.ceil(spotRadius);\n                }\n            }\n\n\n            canvasHeight--;\n\n            if (options.get('normalRangeMin') !== undefined && !options.get('drawNormalOnTop')) {\n                this.drawNormalRange(canvasLeft, canvasTop, canvasHeight, canvasWidth, rangey);\n            }\n\n            path = [];\n            paths = [path];\n            last = next = null;\n            yvalcount = yvalues.length;\n            for (i = 0; i < yvalcount; i++) {\n                x = xvalues[i];\n                xnext = xvalues[i + 1];\n                y = yvalues[i];\n                xpos = canvasLeft + Math.round((x - this.minx) * (canvasWidth / rangex));\n                xposnext = i < yvalcount - 1 ? canvasLeft + Math.round((xnext - this.minx) * (canvasWidth / rangex)) : canvasWidth;\n                next = xpos + ((xposnext - xpos) / 2);\n                regionMap[i] = [last || 0, next, i];\n                last = next;\n                if (y === null) {\n                    if (i) {\n                        if (yvalues[i - 1] !== null) {\n                            path = [];\n                            paths.push(path);\n                        }\n                        vertices.push(null);\n                    }\n                } else {\n                    if (y < this.miny) {\n                        y = this.miny;\n                    }\n                    if (y > this.maxy) {\n                        y = this.maxy;\n                    }\n                    if (!path.length) {\n                        // previous value was null\n                        path.push([xpos, canvasTop + canvasHeight]);\n                    }\n                    vertex = [xpos, canvasTop + Math.round(canvasHeight - (canvasHeight * ((y - this.miny) / rangey)))];\n                    path.push(vertex);\n                    vertices.push(vertex);\n                }\n            }\n\n            lineShapes = [];\n            fillShapes = [];\n            plen = paths.length;\n            for (i = 0; i < plen; i++) {\n                path = paths[i];\n                if (path.length) {\n                    if (options.get('fillColor')) {\n                        path.push([path[path.length - 1][0], (canvasTop + canvasHeight)]);\n                        fillShapes.push(path.slice(0));\n                        path.pop();\n                    }\n                    // if there's only a single point in this path, then we want to display it\n                    // as a vertical line which means we keep path[0]  as is\n                    if (path.length > 2) {\n                        // else we want the first value\n                        path[0] = [path[0][0], path[1][1]];\n                    }\n                    lineShapes.push(path);\n                }\n            }\n\n            // draw the fill first, then optionally the normal range, then the line on top of that\n            plen = fillShapes.length;\n            for (i = 0; i < plen; i++) {\n                target.drawShape(fillShapes[i],\n                    options.get('fillColor'), options.get('fillColor')).append();\n            }\n\n            if (options.get('normalRangeMin') !== undefined && options.get('drawNormalOnTop')) {\n                this.drawNormalRange(canvasLeft, canvasTop, canvasHeight, canvasWidth, rangey);\n            }\n\n            plen = lineShapes.length;\n            for (i = 0; i < plen; i++) {\n                target.drawShape(lineShapes[i], options.get('lineColor'), undefined,\n                    options.get('lineWidth')).append();\n            }\n\n            if (spotRadius && options.get('valueSpots')) {\n                valueSpots = options.get('valueSpots');\n                if (valueSpots.get === undefined) {\n                    valueSpots = new RangeMap(valueSpots);\n                }\n                for (i = 0; i < yvalcount; i++) {\n                    color = valueSpots.get(yvalues[i]);\n                    if (color) {\n                        target.drawCircle(canvasLeft + Math.round((xvalues[i] - this.minx) * (canvasWidth / rangex)),\n                            canvasTop + Math.round(canvasHeight - (canvasHeight * ((yvalues[i] - this.miny) / rangey))),\n                            spotRadius, undefined,\n                            color).append();\n                    }\n                }\n\n            }\n            if (spotRadius && options.get('spotColor') && yvalues[yvallast] !== null) {\n                target.drawCircle(canvasLeft + Math.round((xvalues[xvalues.length - 1] - this.minx) * (canvasWidth / rangex)),\n                    canvasTop + Math.round(canvasHeight - (canvasHeight * ((yvalues[yvallast] - this.miny) / rangey))),\n                    spotRadius, undefined,\n                    options.get('spotColor')).append();\n            }\n            if (this.maxy !== this.minyorg) {\n                if (spotRadius && options.get('minSpotColor')) {\n                    x = xvalues[$.inArray(this.minyorg, yvalues)];\n                    target.drawCircle(canvasLeft + Math.round((x - this.minx) * (canvasWidth / rangex)),\n                        canvasTop + Math.round(canvasHeight - (canvasHeight * ((this.minyorg - this.miny) / rangey))),\n                        spotRadius, undefined,\n                        options.get('minSpotColor')).append();\n                }\n                if (spotRadius && options.get('maxSpotColor')) {\n                    x = xvalues[$.inArray(this.maxyorg, yvalues)];\n                    target.drawCircle(canvasLeft + Math.round((x - this.minx) * (canvasWidth / rangex)),\n                        canvasTop + Math.round(canvasHeight - (canvasHeight * ((this.maxyorg - this.miny) / rangey))),\n                        spotRadius, undefined,\n                        options.get('maxSpotColor')).append();\n                }\n            }\n\n            this.lastShapeId = target.getLastShapeId();\n            this.canvasTop = canvasTop;\n            target.render();\n        }\n    });\n\n    /**\n     * Bar charts\n     */\n    $.fn.sparkline.bar = bar = createClass($.fn.sparkline._base, barHighlightMixin, {\n        type: 'bar',\n\n        init: function (el, values, options, width, height) {\n            var barWidth = parseInt(options.get('barWidth'), 10),\n                barSpacing = parseInt(options.get('barSpacing'), 10),\n                chartRangeMin = options.get('chartRangeMin'),\n                chartRangeMax = options.get('chartRangeMax'),\n                chartRangeClip = options.get('chartRangeClip'),\n                stackMin = Infinity,\n                stackMax = -Infinity,\n                isStackString, groupMin, groupMax, stackRanges,\n                numValues, i, vlen, range, zeroAxis, xaxisOffset, min, max, clipMin, clipMax,\n                stacked, vlist, j, slen, svals, val, yoffset, yMaxCalc, canvasHeightEf;\n            bar._super.init.call(this, el, values, options, width, height);\n\n            // scan values to determine whether to stack bars\n            for (i = 0, vlen = values.length; i < vlen; i++) {\n                val = values[i];\n                isStackString = typeof(val) === 'string' && val.indexOf(':') > -1;\n                if (isStackString || $.isArray(val)) {\n                    stacked = true;\n                    if (isStackString) {\n                        val = values[i] = normalizeValues(val.split(':'));\n                    }\n                    val = remove(val, null); // min/max will treat null as zero\n                    groupMin = Math.min.apply(Math, val);\n                    groupMax = Math.max.apply(Math, val);\n                    if (groupMin < stackMin) {\n                        stackMin = groupMin;\n                    }\n                    if (groupMax > stackMax) {\n                        stackMax = groupMax;\n                    }\n                }\n            }\n\n            this.stacked = stacked;\n            this.regionShapes = {};\n            this.barWidth = barWidth;\n            this.barSpacing = barSpacing;\n            this.totalBarWidth = barWidth + barSpacing;\n            this.width = width = (values.length * barWidth) + ((values.length - 1) * barSpacing);\n\n            this.initTarget();\n\n            if (chartRangeClip) {\n                clipMin = chartRangeMin === undefined ? -Infinity : chartRangeMin;\n                clipMax = chartRangeMax === undefined ? Infinity : chartRangeMax;\n            }\n\n            numValues = [];\n            stackRanges = stacked ? [] : numValues;\n            var stackTotals = [];\n            var stackRangesNeg = [];\n            for (i = 0, vlen = values.length; i < vlen; i++) {\n                if (stacked) {\n                    vlist = values[i];\n                    values[i] = svals = [];\n                    stackTotals[i] = 0;\n                    stackRanges[i] = stackRangesNeg[i] = 0;\n                    for (j = 0, slen = vlist.length; j < slen; j++) {\n                        val = svals[j] = chartRangeClip ? clipval(vlist[j], clipMin, clipMax) : vlist[j];\n                        if (val !== null) {\n                            if (val > 0) {\n                                stackTotals[i] += val;\n                            }\n                            if (stackMin < 0 && stackMax > 0) {\n                                if (val < 0) {\n                                    stackRangesNeg[i] += Math.abs(val);\n                                } else {\n                                    stackRanges[i] += val;\n                                }\n                            } else {\n                                stackRanges[i] += Math.abs(val - (val < 0 ? stackMax : stackMin));\n                            }\n                            numValues.push(val);\n                        }\n                    }\n                } else {\n                    val = chartRangeClip ? clipval(values[i], clipMin, clipMax) : values[i];\n                    val = values[i] = normalizeValue(val);\n                    if (val !== null) {\n                        numValues.push(val);\n                    }\n                }\n            }\n            this.max = max = Math.max.apply(Math, numValues);\n            this.min = min = Math.min.apply(Math, numValues);\n            this.stackMax = stackMax = stacked ? Math.max.apply(Math, stackTotals) : max;\n            this.stackMin = stackMin = stacked ? Math.min.apply(Math, numValues) : min;\n\n            if (options.get('chartRangeMin') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMin') < min)) {\n                min = options.get('chartRangeMin');\n            }\n            if (options.get('chartRangeMax') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMax') > max)) {\n                max = options.get('chartRangeMax');\n            }\n\n            this.zeroAxis = zeroAxis = options.get('zeroAxis', true);\n            if (min <= 0 && max >= 0 && zeroAxis) {\n                xaxisOffset = 0;\n            } else if (zeroAxis == false) {\n                xaxisOffset = min;\n            } else if (min > 0) {\n                xaxisOffset = min;\n            } else {\n                xaxisOffset = max;\n            }\n            this.xaxisOffset = xaxisOffset;\n\n            range = stacked ? (Math.max.apply(Math, stackRanges) + Math.max.apply(Math, stackRangesNeg)) : max - min;\n\n            // as we plot zero/min values a single pixel line, we add a pixel to all other\n            // values - Reduce the effective canvas size to suit\n            this.canvasHeightEf = (zeroAxis && min < 0) ? this.canvasHeight - 2 : this.canvasHeight - 1;\n\n            if (min < xaxisOffset) {\n                yMaxCalc = (stacked && max >= 0) ? stackMax : max;\n                yoffset = (yMaxCalc - xaxisOffset) / range * this.canvasHeight;\n                if (yoffset !== Math.ceil(yoffset)) {\n                    this.canvasHeightEf -= 2;\n                    yoffset = Math.ceil(yoffset);\n                }\n            } else {\n                yoffset = this.canvasHeight;\n            }\n            this.yoffset = yoffset;\n\n            if ($.isArray(options.get('colorMap'))) {\n                this.colorMapByIndex = options.get('colorMap');\n                this.colorMapByValue = null;\n            } else {\n                this.colorMapByIndex = null;\n                this.colorMapByValue = options.get('colorMap');\n                if (this.colorMapByValue && this.colorMapByValue.get === undefined) {\n                    this.colorMapByValue = new RangeMap(this.colorMapByValue);\n                }\n            }\n\n            this.range = range;\n        },\n\n        getRegion: function (el, x, y) {\n            var result = Math.floor(x / this.totalBarWidth);\n            return (result < 0 || result >= this.values.length) ? undefined : result;\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion,\n                values = ensureArray(this.values[currentRegion]),\n                result = [],\n                value, i;\n            for (i = values.length; i--;) {\n                value = values[i];\n                result.push({\n                    isNull: value === null,\n                    value: value,\n                    color: this.calcColor(i, value, currentRegion),\n                    offset: currentRegion\n                });\n            }\n            return result;\n        },\n\n        calcColor: function (stacknum, value, valuenum) {\n            var colorMapByIndex = this.colorMapByIndex,\n                colorMapByValue = this.colorMapByValue,\n                options = this.options,\n                color, newColor;\n            if (this.stacked) {\n                color = options.get('stackedBarColor');\n            } else {\n                color = (value < 0) ? options.get('negBarColor') : options.get('barColor');\n            }\n            if (value === 0 && options.get('zeroColor') !== undefined) {\n                color = options.get('zeroColor');\n            }\n            if (colorMapByValue && (newColor = colorMapByValue.get(value))) {\n                color = newColor;\n            } else if (colorMapByIndex && colorMapByIndex.length > valuenum) {\n                color = colorMapByIndex[valuenum];\n            }\n            return $.isArray(color) ? color[stacknum % color.length] : color;\n        },\n\n        /**\n         * Render bar(s) for a region\n         */\n        renderRegion: function (valuenum, highlight) {\n            var vals = this.values[valuenum],\n                options = this.options,\n                xaxisOffset = this.xaxisOffset,\n                result = [],\n                range = this.range,\n                stacked = this.stacked,\n                target = this.target,\n                x = valuenum * this.totalBarWidth,\n                canvasHeightEf = this.canvasHeightEf,\n                yoffset = this.yoffset,\n                y, height, color, isNull, yoffsetNeg, i, valcount, val, minPlotted, allMin;\n\n            vals = $.isArray(vals) ? vals : [vals];\n            valcount = vals.length;\n            val = vals[0];\n            isNull = all(null, vals);\n            allMin = all(xaxisOffset, vals, true);\n\n            if (isNull) {\n                if (options.get('nullColor')) {\n                    color = highlight ? options.get('nullColor') : this.calcHighlightColor(options.get('nullColor'), options);\n                    y = (yoffset > 0) ? yoffset - 1 : yoffset;\n                    return target.drawRect(x, y, this.barWidth - 1, 0, color, color);\n                } else {\n                    return undefined;\n                }\n            }\n            yoffsetNeg = yoffset;\n            for (i = 0; i < valcount; i++) {\n                val = vals[i];\n\n                if (stacked && val === xaxisOffset) {\n                    if (!allMin || minPlotted) {\n                        continue;\n                    }\n                    minPlotted = true;\n                }\n\n                if (range > 0) {\n                    height = Math.floor(canvasHeightEf * ((Math.abs(val - xaxisOffset) / range))) + 1;\n                } else {\n                    height = 1;\n                }\n                if (val < xaxisOffset || (val === xaxisOffset && yoffset === 0)) {\n                    y = yoffsetNeg;\n                    yoffsetNeg += height;\n                } else {\n                    y = yoffset - height;\n                    yoffset -= height;\n                }\n                color = this.calcColor(i, val, valuenum);\n                if (highlight) {\n                    color = this.calcHighlightColor(color, options);\n                }\n                result.push(target.drawRect(x, y, this.barWidth - 1, height - 1, color, color));\n            }\n            if (result.length === 1) {\n                return result[0];\n            }\n            return result;\n        }\n    });\n\n    /**\n     * Tristate charts\n     */\n    $.fn.sparkline.tristate = tristate = createClass($.fn.sparkline._base, barHighlightMixin, {\n        type: 'tristate',\n\n        init: function (el, values, options, width, height) {\n            var barWidth = parseInt(options.get('barWidth'), 10),\n                barSpacing = parseInt(options.get('barSpacing'), 10);\n            tristate._super.init.call(this, el, values, options, width, height);\n\n            this.regionShapes = {};\n            this.barWidth = barWidth;\n            this.barSpacing = barSpacing;\n            this.totalBarWidth = barWidth + barSpacing;\n            this.values = $.map(values, Number);\n            this.width = width = (values.length * barWidth) + ((values.length - 1) * barSpacing);\n\n            if ($.isArray(options.get('colorMap'))) {\n                this.colorMapByIndex = options.get('colorMap');\n                this.colorMapByValue = null;\n            } else {\n                this.colorMapByIndex = null;\n                this.colorMapByValue = options.get('colorMap');\n                if (this.colorMapByValue && this.colorMapByValue.get === undefined) {\n                    this.colorMapByValue = new RangeMap(this.colorMapByValue);\n                }\n            }\n            this.initTarget();\n        },\n\n        getRegion: function (el, x, y) {\n            return Math.floor(x / this.totalBarWidth);\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                isNull: this.values[currentRegion] === undefined,\n                value: this.values[currentRegion],\n                color: this.calcColor(this.values[currentRegion], currentRegion),\n                offset: currentRegion\n            };\n        },\n\n        calcColor: function (value, valuenum) {\n            var values = this.values,\n                options = this.options,\n                colorMapByIndex = this.colorMapByIndex,\n                colorMapByValue = this.colorMapByValue,\n                color, newColor;\n\n            if (colorMapByValue && (newColor = colorMapByValue.get(value))) {\n                color = newColor;\n            } else if (colorMapByIndex && colorMapByIndex.length > valuenum) {\n                color = colorMapByIndex[valuenum];\n            } else if (values[valuenum] < 0) {\n                color = options.get('negBarColor');\n            } else if (values[valuenum] > 0) {\n                color = options.get('posBarColor');\n            } else {\n                color = options.get('zeroBarColor');\n            }\n            return color;\n        },\n\n        renderRegion: function (valuenum, highlight) {\n            var values = this.values,\n                options = this.options,\n                target = this.target,\n                canvasHeight, height, halfHeight,\n                x, y, color;\n\n            canvasHeight = target.pixelHeight;\n            halfHeight = Math.round(canvasHeight / 2);\n\n            x = valuenum * this.totalBarWidth;\n            if (values[valuenum] < 0) {\n                y = halfHeight;\n                height = halfHeight - 1;\n            } else if (values[valuenum] > 0) {\n                y = 0;\n                height = halfHeight - 1;\n            } else {\n                y = halfHeight - 1;\n                height = 2;\n            }\n            color = this.calcColor(values[valuenum], valuenum);\n            if (color === null) {\n                return;\n            }\n            if (highlight) {\n                color = this.calcHighlightColor(color, options);\n            }\n            return target.drawRect(x, y, this.barWidth - 1, height - 1, color, color);\n        }\n    });\n\n    /**\n     * Discrete charts\n     */\n    $.fn.sparkline.discrete = discrete = createClass($.fn.sparkline._base, barHighlightMixin, {\n        type: 'discrete',\n\n        init: function (el, values, options, width, height) {\n            discrete._super.init.call(this, el, values, options, width, height);\n\n            this.regionShapes = {};\n            this.values = values = $.map(values, Number);\n            this.min = Math.min.apply(Math, values);\n            this.max = Math.max.apply(Math, values);\n            this.range = this.max - this.min;\n            this.width = width = options.get('width') === 'auto' ? values.length * 2 : this.width;\n            this.interval = Math.floor(width / values.length);\n            this.itemWidth = width / values.length;\n            if (options.get('chartRangeMin') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMin') < this.min)) {\n                this.min = options.get('chartRangeMin');\n            }\n            if (options.get('chartRangeMax') !== undefined && (options.get('chartRangeClip') || options.get('chartRangeMax') > this.max)) {\n                this.max = options.get('chartRangeMax');\n            }\n            this.initTarget();\n            if (this.target) {\n                this.lineHeight = options.get('lineHeight') === 'auto' ? Math.round(this.canvasHeight * 0.3) : options.get('lineHeight');\n            }\n        },\n\n        getRegion: function (el, x, y) {\n            return Math.floor(x / this.itemWidth);\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                isNull: this.values[currentRegion] === undefined,\n                value: this.values[currentRegion],\n                offset: currentRegion\n            };\n        },\n\n        renderRegion: function (valuenum, highlight) {\n            var values = this.values,\n                options = this.options,\n                min = this.min,\n                max = this.max,\n                range = this.range,\n                interval = this.interval,\n                target = this.target,\n                canvasHeight = this.canvasHeight,\n                lineHeight = this.lineHeight,\n                pheight = canvasHeight - lineHeight,\n                ytop, val, color, x;\n\n            val = clipval(values[valuenum], min, max);\n            x = valuenum * interval;\n            ytop = Math.round(pheight - pheight * ((val - min) / range));\n            color = (options.get('thresholdColor') && val < options.get('thresholdValue')) ? options.get('thresholdColor') : options.get('lineColor');\n            if (highlight) {\n                color = this.calcHighlightColor(color, options);\n            }\n            return target.drawLine(x, ytop, x, ytop + lineHeight, color);\n        }\n    });\n\n    /**\n     * Bullet charts\n     */\n    $.fn.sparkline.bullet = bullet = createClass($.fn.sparkline._base, {\n        type: 'bullet',\n\n        init: function (el, values, options, width, height) {\n            var min, max, vals;\n            bullet._super.init.call(this, el, values, options, width, height);\n\n            // values: target, performance, range1, range2, range3\n            this.values = values = normalizeValues(values);\n            // target or performance could be null\n            vals = values.slice();\n            vals[0] = vals[0] === null ? vals[2] : vals[0];\n            vals[1] = values[1] === null ? vals[2] : vals[1];\n            min = Math.min.apply(Math, values);\n            max = Math.max.apply(Math, values);\n            if (options.get('base') === undefined) {\n                min = min < 0 ? min : 0;\n            } else {\n                min = options.get('base');\n            }\n            this.min = min;\n            this.max = max;\n            this.range = max - min;\n            this.shapes = {};\n            this.valueShapes = {};\n            this.regiondata = {};\n            this.width = width = options.get('width') === 'auto' ? '4.0em' : width;\n            this.target = this.$el.simpledraw(width, height, options.get('composite'));\n            if (!values.length) {\n                this.disabled = true;\n            }\n            this.initTarget();\n        },\n\n        getRegion: function (el, x, y) {\n            var shapeid = this.target.getShapeAt(el, x, y);\n            return (shapeid !== undefined && this.shapes[shapeid] !== undefined) ? this.shapes[shapeid] : undefined;\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                fieldkey: currentRegion.substr(0, 1),\n                value: this.values[currentRegion.substr(1)],\n                region: currentRegion\n            };\n        },\n\n        changeHighlight: function (highlight) {\n            var currentRegion = this.currentRegion,\n                shapeid = this.valueShapes[currentRegion],\n                shape;\n            delete this.shapes[shapeid];\n            switch (currentRegion.substr(0, 1)) {\n                case 'r':\n                    shape = this.renderRange(currentRegion.substr(1), highlight);\n                    break;\n                case 'p':\n                    shape = this.renderPerformance(highlight);\n                    break;\n                case 't':\n                    shape = this.renderTarget(highlight);\n                    break;\n            }\n            this.valueShapes[currentRegion] = shape.id;\n            this.shapes[shape.id] = currentRegion;\n            this.target.replaceWithShape(shapeid, shape);\n        },\n\n        renderRange: function (rn, highlight) {\n            var rangeval = this.values[rn],\n                rangewidth = Math.round(this.canvasWidth * ((rangeval - this.min) / this.range)),\n                color = this.options.get('rangeColors')[rn - 2];\n            if (highlight) {\n                color = this.calcHighlightColor(color, this.options);\n            }\n            return this.target.drawRect(0, 0, rangewidth - 1, this.canvasHeight - 1, color, color);\n        },\n\n        renderPerformance: function (highlight) {\n            var perfval = this.values[1],\n                perfwidth = Math.round(this.canvasWidth * ((perfval - this.min) / this.range)),\n                color = this.options.get('performanceColor');\n            if (highlight) {\n                color = this.calcHighlightColor(color, this.options);\n            }\n            return this.target.drawRect(0, Math.round(this.canvasHeight * 0.3), perfwidth - 1,\n                Math.round(this.canvasHeight * 0.4) - 1, color, color);\n        },\n\n        renderTarget: function (highlight) {\n            var targetval = this.values[0],\n                x = Math.round(this.canvasWidth * ((targetval - this.min) / this.range) - (this.options.get('targetWidth') / 2)),\n                targettop = Math.round(this.canvasHeight * 0.10),\n                targetheight = this.canvasHeight - (targettop * 2),\n                color = this.options.get('targetColor');\n            if (highlight) {\n                color = this.calcHighlightColor(color, this.options);\n            }\n            return this.target.drawRect(x, targettop, this.options.get('targetWidth') - 1, targetheight - 1, color, color);\n        },\n\n        render: function () {\n            var vlen = this.values.length,\n                target = this.target,\n                i, shape;\n            if (!bullet._super.render.call(this)) {\n                return;\n            }\n            for (i = 2; i < vlen; i++) {\n                shape = this.renderRange(i).append();\n                this.shapes[shape.id] = 'r' + i;\n                this.valueShapes['r' + i] = shape.id;\n            }\n            if (this.values[1] !== null) {\n                shape = this.renderPerformance().append();\n                this.shapes[shape.id] = 'p1';\n                this.valueShapes.p1 = shape.id;\n            }\n            if (this.values[0] !== null) {\n                shape = this.renderTarget().append();\n                this.shapes[shape.id] = 't0';\n                this.valueShapes.t0 = shape.id;\n            }\n            target.render();\n        }\n    });\n\n    /**\n     * Pie charts\n     */\n    $.fn.sparkline.pie = pie = createClass($.fn.sparkline._base, {\n        type: 'pie',\n\n        init: function (el, values, options, width, height) {\n            var total = 0, i;\n\n            pie._super.init.call(this, el, values, options, width, height);\n\n            this.shapes = {}; // map shape ids to value offsets\n            this.valueShapes = {}; // maps value offsets to shape ids\n            this.values = values = $.map(values, Number);\n\n            if (options.get('width') === 'auto') {\n                this.width = this.height;\n            }\n\n            if (values.length > 0) {\n                for (i = values.length; i--;) {\n                    total += values[i];\n                }\n            }\n            this.total = total;\n            this.initTarget();\n            this.radius = Math.floor(Math.min(this.canvasWidth, this.canvasHeight) / 2);\n        },\n\n        getRegion: function (el, x, y) {\n            var shapeid = this.target.getShapeAt(el, x, y);\n            return (shapeid !== undefined && this.shapes[shapeid] !== undefined) ? this.shapes[shapeid] : undefined;\n        },\n\n        getCurrentRegionFields: function () {\n            var currentRegion = this.currentRegion;\n            return {\n                isNull: this.values[currentRegion] === undefined,\n                value: this.values[currentRegion],\n                percent: this.values[currentRegion] / this.total * 100,\n                color: this.options.get('sliceColors')[currentRegion % this.options.get('sliceColors').length],\n                offset: currentRegion\n            };\n        },\n\n        changeHighlight: function (highlight) {\n            var currentRegion = this.currentRegion,\n                 newslice = this.renderSlice(currentRegion, highlight),\n                 shapeid = this.valueShapes[currentRegion];\n            delete this.shapes[shapeid];\n            this.target.replaceWithShape(shapeid, newslice);\n            this.valueShapes[currentRegion] = newslice.id;\n            this.shapes[newslice.id] = currentRegion;\n        },\n\n        renderSlice: function (valuenum, highlight) {\n            var target = this.target,\n                options = this.options,\n                radius = this.radius,\n                borderWidth = options.get('borderWidth'),\n                offset = options.get('offset'),\n                circle = 2 * Math.PI,\n                values = this.values,\n                total = this.total,\n                next = offset ? (2*Math.PI)*(offset/360) : 0,\n                start, end, i, vlen, color;\n\n            vlen = values.length;\n            for (i = 0; i < vlen; i++) {\n                start = next;\n                end = next;\n                if (total > 0) {  // avoid divide by zero\n                    end = next + (circle * (values[i] / total));\n                }\n                if (valuenum === i) {\n                    color = options.get('sliceColors')[i % options.get('sliceColors').length];\n                    if (highlight) {\n                        color = this.calcHighlightColor(color, options);\n                    }\n\n                    return target.drawPieSlice(radius, radius, radius - borderWidth, start, end, undefined, color);\n                }\n                next = end;\n            }\n        },\n\n        render: function () {\n            var target = this.target,\n                values = this.values,\n                options = this.options,\n                radius = this.radius,\n                borderWidth = options.get('borderWidth'),\n                shape, i;\n\n            if (!pie._super.render.call(this)) {\n                return;\n            }\n            if (borderWidth) {\n                target.drawCircle(radius, radius, Math.floor(radius - (borderWidth / 2)),\n                    options.get('borderColor'), undefined, borderWidth).append();\n            }\n            for (i = values.length; i--;) {\n                if (values[i]) { // don't render zero values\n                    shape = this.renderSlice(i).append();\n                    this.valueShapes[i] = shape.id; // store just the shapeid\n                    this.shapes[shape.id] = i;\n                }\n            }\n            target.render();\n        }\n    });\n\n    /**\n     * Box plots\n     */\n    $.fn.sparkline.box = box = createClass($.fn.sparkline._base, {\n        type: 'box',\n\n        init: function (el, values, options, width, height) {\n            box._super.init.call(this, el, values, options, width, height);\n            this.values = $.map(values, Number);\n            this.width = options.get('width') === 'auto' ? '4.0em' : width;\n            this.initTarget();\n            if (!this.values.length) {\n                this.disabled = 1;\n            }\n        },\n\n        /**\n         * Simulate a single region\n         */\n        getRegion: function () {\n            return 1;\n        },\n\n        getCurrentRegionFields: function () {\n            var result = [\n                { field: 'lq', value: this.quartiles[0] },\n                { field: 'med', value: this.quartiles[1] },\n                { field: 'uq', value: this.quartiles[2] }\n            ];\n            if (this.loutlier !== undefined) {\n                result.push({ field: 'lo', value: this.loutlier});\n            }\n            if (this.routlier !== undefined) {\n                result.push({ field: 'ro', value: this.routlier});\n            }\n            if (this.lwhisker !== undefined) {\n                result.push({ field: 'lw', value: this.lwhisker});\n            }\n            if (this.rwhisker !== undefined) {\n                result.push({ field: 'rw', value: this.rwhisker});\n            }\n            return result;\n        },\n\n        render: function () {\n            var target = this.target,\n                values = this.values,\n                vlen = values.length,\n                options = this.options,\n                canvasWidth = this.canvasWidth,\n                canvasHeight = this.canvasHeight,\n                minValue = options.get('chartRangeMin') === undefined ? Math.min.apply(Math, values) : options.get('chartRangeMin'),\n                maxValue = options.get('chartRangeMax') === undefined ? Math.max.apply(Math, values) : options.get('chartRangeMax'),\n                canvasLeft = 0,\n                lwhisker, loutlier, iqr, q1, q2, q3, rwhisker, routlier, i,\n                size, unitSize;\n\n            if (!box._super.render.call(this)) {\n                return;\n            }\n\n            if (options.get('raw')) {\n                if (options.get('showOutliers') && values.length > 5) {\n                    loutlier = values[0];\n                    lwhisker = values[1];\n                    q1 = values[2];\n                    q2 = values[3];\n                    q3 = values[4];\n                    rwhisker = values[5];\n                    routlier = values[6];\n                } else {\n                    lwhisker = values[0];\n                    q1 = values[1];\n                    q2 = values[2];\n                    q3 = values[3];\n                    rwhisker = values[4];\n                }\n            } else {\n                values.sort(function (a, b) { return a - b; });\n                q1 = quartile(values, 1);\n                q2 = quartile(values, 2);\n                q3 = quartile(values, 3);\n                iqr = q3 - q1;\n                if (options.get('showOutliers')) {\n                    lwhisker = rwhisker = undefined;\n                    for (i = 0; i < vlen; i++) {\n                        if (lwhisker === undefined && values[i] > q1 - (iqr * options.get('outlierIQR'))) {\n                            lwhisker = values[i];\n                        }\n                        if (values[i] < q3 + (iqr * options.get('outlierIQR'))) {\n                            rwhisker = values[i];\n                        }\n                    }\n                    loutlier = values[0];\n                    routlier = values[vlen - 1];\n                } else {\n                    lwhisker = values[0];\n                    rwhisker = values[vlen - 1];\n                }\n            }\n            this.quartiles = [q1, q2, q3];\n            this.lwhisker = lwhisker;\n            this.rwhisker = rwhisker;\n            this.loutlier = loutlier;\n            this.routlier = routlier;\n\n            unitSize = canvasWidth / (maxValue - minValue + 1);\n            if (options.get('showOutliers')) {\n                canvasLeft = Math.ceil(options.get('spotRadius'));\n                canvasWidth -= 2 * Math.ceil(options.get('spotRadius'));\n                unitSize = canvasWidth / (maxValue - minValue + 1);\n                if (loutlier < lwhisker) {\n                    target.drawCircle((loutlier - minValue) * unitSize + canvasLeft,\n                        canvasHeight / 2,\n                        options.get('spotRadius'),\n                        options.get('outlierLineColor'),\n                        options.get('outlierFillColor')).append();\n                }\n                if (routlier > rwhisker) {\n                    target.drawCircle((routlier - minValue) * unitSize + canvasLeft,\n                        canvasHeight / 2,\n                        options.get('spotRadius'),\n                        options.get('outlierLineColor'),\n                        options.get('outlierFillColor')).append();\n                }\n            }\n\n            // box\n            target.drawRect(\n                Math.round((q1 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight * 0.1),\n                Math.round((q3 - q1) * unitSize),\n                Math.round(canvasHeight * 0.8),\n                options.get('boxLineColor'),\n                options.get('boxFillColor')).append();\n            // left whisker\n            target.drawLine(\n                Math.round((lwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 2),\n                Math.round((q1 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 2),\n                options.get('lineColor')).append();\n            target.drawLine(\n                Math.round((lwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 4),\n                Math.round((lwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight - canvasHeight / 4),\n                options.get('whiskerColor')).append();\n            // right whisker\n            target.drawLine(Math.round((rwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 2),\n                Math.round((q3 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 2),\n                options.get('lineColor')).append();\n            target.drawLine(\n                Math.round((rwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight / 4),\n                Math.round((rwhisker - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight - canvasHeight / 4),\n                options.get('whiskerColor')).append();\n            // median line\n            target.drawLine(\n                Math.round((q2 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight * 0.1),\n                Math.round((q2 - minValue) * unitSize + canvasLeft),\n                Math.round(canvasHeight * 0.9),\n                options.get('medianColor')).append();\n            if (options.get('target')) {\n                size = Math.ceil(options.get('spotRadius'));\n                target.drawLine(\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft),\n                    Math.round((canvasHeight / 2) - size),\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft),\n                    Math.round((canvasHeight / 2) + size),\n                    options.get('targetColor')).append();\n                target.drawLine(\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft - size),\n                    Math.round(canvasHeight / 2),\n                    Math.round((options.get('target') - minValue) * unitSize + canvasLeft + size),\n                    Math.round(canvasHeight / 2),\n                    options.get('targetColor')).append();\n            }\n            target.render();\n        }\n    });\n\n    // Setup a very simple \"virtual canvas\" to make drawing the few shapes we need easier\n    // This is accessible as $(foo).simpledraw()\n\n    VShape = createClass({\n        init: function (target, id, type, args) {\n            this.target = target;\n            this.id = id;\n            this.type = type;\n            this.args = args;\n        },\n        append: function () {\n            this.target.appendShape(this);\n            return this;\n        }\n    });\n\n    VCanvas_base = createClass({\n        _pxregex: /(\\d+)(px)?\\s*$/i,\n\n        init: function (width, height, target) {\n            if (!width) {\n                return;\n            }\n            this.width = width;\n            this.height = height;\n            this.target = target;\n            this.lastShapeId = null;\n            if (target[0]) {\n                target = target[0];\n            }\n            $.data(target, '_jqs_vcanvas', this);\n        },\n\n        drawLine: function (x1, y1, x2, y2, lineColor, lineWidth) {\n            return this.drawShape([[x1, y1], [x2, y2]], lineColor, lineWidth);\n        },\n\n        drawShape: function (path, lineColor, fillColor, lineWidth) {\n            return this._genShape('Shape', [path, lineColor, fillColor, lineWidth]);\n        },\n\n        drawCircle: function (x, y, radius, lineColor, fillColor, lineWidth) {\n            return this._genShape('Circle', [x, y, radius, lineColor, fillColor, lineWidth]);\n        },\n\n        drawPieSlice: function (x, y, radius, startAngle, endAngle, lineColor, fillColor) {\n            return this._genShape('PieSlice', [x, y, radius, startAngle, endAngle, lineColor, fillColor]);\n        },\n\n        drawRect: function (x, y, width, height, lineColor, fillColor) {\n            return this._genShape('Rect', [x, y, width, height, lineColor, fillColor]);\n        },\n\n        getElement: function () {\n            return this.canvas;\n        },\n\n        /**\n         * Return the most recently inserted shape id\n         */\n        getLastShapeId: function () {\n            return this.lastShapeId;\n        },\n\n        /**\n         * Clear and reset the canvas\n         */\n        reset: function () {\n            alert('reset not implemented');\n        },\n\n        _insert: function (el, target) {\n            $(target).html(el);\n        },\n\n        /**\n         * Calculate the pixel dimensions of the canvas\n         */\n        _calculatePixelDims: function (width, height, canvas) {\n            // XXX This should probably be a configurable option\n            var match;\n            match = this._pxregex.exec(height);\n            if (match) {\n                this.pixelHeight = match[1];\n            } else {\n                this.pixelHeight = $(canvas).height();\n            }\n            match = this._pxregex.exec(width);\n            if (match) {\n                this.pixelWidth = match[1];\n            } else {\n                this.pixelWidth = $(canvas).width();\n            }\n        },\n\n        /**\n         * Generate a shape object and id for later rendering\n         */\n        _genShape: function (shapetype, shapeargs) {\n            var id = shapeCount++;\n            shapeargs.unshift(id);\n            return new VShape(this, id, shapetype, shapeargs);\n        },\n\n        /**\n         * Add a shape to the end of the render queue\n         */\n        appendShape: function (shape) {\n            alert('appendShape not implemented');\n        },\n\n        /**\n         * Replace one shape with another\n         */\n        replaceWithShape: function (shapeid, shape) {\n            alert('replaceWithShape not implemented');\n        },\n\n        /**\n         * Insert one shape after another in the render queue\n         */\n        insertAfterShape: function (shapeid, shape) {\n            alert('insertAfterShape not implemented');\n        },\n\n        /**\n         * Remove a shape from the queue\n         */\n        removeShapeId: function (shapeid) {\n            alert('removeShapeId not implemented');\n        },\n\n        /**\n         * Find a shape at the specified x/y co-ordinates\n         */\n        getShapeAt: function (el, x, y) {\n            alert('getShapeAt not implemented');\n        },\n\n        /**\n         * Render all queued shapes onto the canvas\n         */\n        render: function () {\n            alert('render not implemented');\n        }\n    });\n\n    VCanvas_canvas = createClass(VCanvas_base, {\n        init: function (width, height, target, interact) {\n            VCanvas_canvas._super.init.call(this, width, height, target);\n            this.canvas = document.createElement('canvas');\n            if (target[0]) {\n                target = target[0];\n            }\n            $.data(target, '_jqs_vcanvas', this);\n            $(this.canvas).css({ display: 'inline-block', width: width, height: height, verticalAlign: 'top' });\n            this._insert(this.canvas, target);\n            this._calculatePixelDims(width, height, this.canvas);\n            this.canvas.width = this.pixelWidth;\n            this.canvas.height = this.pixelHeight;\n            this.interact = interact;\n            this.shapes = {};\n            this.shapeseq = [];\n            this.currentTargetShapeId = undefined;\n            $(this.canvas).css({width: this.pixelWidth, height: this.pixelHeight});\n        },\n\n        _getContext: function (lineColor, fillColor, lineWidth) {\n            var context = this.canvas.getContext('2d');\n            if (lineColor !== undefined) {\n                context.strokeStyle = lineColor;\n            }\n            context.lineWidth = lineWidth === undefined ? 1 : lineWidth;\n            if (fillColor !== undefined) {\n                context.fillStyle = fillColor;\n            }\n            return context;\n        },\n\n        reset: function () {\n            var context = this._getContext();\n            context.clearRect(0, 0, this.pixelWidth, this.pixelHeight);\n            this.shapes = {};\n            this.shapeseq = [];\n            this.currentTargetShapeId = undefined;\n        },\n\n        _drawShape: function (shapeid, path, lineColor, fillColor, lineWidth) {\n            var context = this._getContext(lineColor, fillColor, lineWidth),\n                i, plen;\n            context.beginPath();\n            context.moveTo(path[0][0] + 0.5, path[0][1] + 0.5);\n            for (i = 1, plen = path.length; i < plen; i++) {\n                context.lineTo(path[i][0] + 0.5, path[i][1] + 0.5); // the 0.5 offset gives us crisp pixel-width lines\n            }\n            if (lineColor !== undefined) {\n                context.stroke();\n            }\n            if (fillColor !== undefined) {\n                context.fill();\n            }\n            if (this.targetX !== undefined && this.targetY !== undefined &&\n                context.isPointInPath(this.targetX, this.targetY)) {\n                this.currentTargetShapeId = shapeid;\n            }\n        },\n\n        _drawCircle: function (shapeid, x, y, radius, lineColor, fillColor, lineWidth) {\n            var context = this._getContext(lineColor, fillColor, lineWidth);\n            context.beginPath();\n            context.arc(x, y, radius, 0, 2 * Math.PI, false);\n            if (this.targetX !== undefined && this.targetY !== undefined &&\n                context.isPointInPath(this.targetX, this.targetY)) {\n                this.currentTargetShapeId = shapeid;\n            }\n            if (lineColor !== undefined) {\n                context.stroke();\n            }\n            if (fillColor !== undefined) {\n                context.fill();\n            }\n        },\n\n        _drawPieSlice: function (shapeid, x, y, radius, startAngle, endAngle, lineColor, fillColor) {\n            var context = this._getContext(lineColor, fillColor);\n            context.beginPath();\n            context.moveTo(x, y);\n            context.arc(x, y, radius, startAngle, endAngle, false);\n            context.lineTo(x, y);\n            context.closePath();\n            if (lineColor !== undefined) {\n                context.stroke();\n            }\n            if (fillColor) {\n                context.fill();\n            }\n            if (this.targetX !== undefined && this.targetY !== undefined &&\n                context.isPointInPath(this.targetX, this.targetY)) {\n                this.currentTargetShapeId = shapeid;\n            }\n        },\n\n        _drawRect: function (shapeid, x, y, width, height, lineColor, fillColor) {\n            return this._drawShape(shapeid, [[x, y], [x + width, y], [x + width, y + height], [x, y + height], [x, y]], lineColor, fillColor);\n        },\n\n        appendShape: function (shape) {\n            this.shapes[shape.id] = shape;\n            this.shapeseq.push(shape.id);\n            this.lastShapeId = shape.id;\n            return shape.id;\n        },\n\n        replaceWithShape: function (shapeid, shape) {\n            var shapeseq = this.shapeseq,\n                i;\n            this.shapes[shape.id] = shape;\n            for (i = shapeseq.length; i--;) {\n                if (shapeseq[i] == shapeid) {\n                    shapeseq[i] = shape.id;\n                }\n            }\n            delete this.shapes[shapeid];\n        },\n\n        replaceWithShapes: function (shapeids, shapes) {\n            var shapeseq = this.shapeseq,\n                shapemap = {},\n                sid, i, first;\n\n            for (i = shapeids.length; i--;) {\n                shapemap[shapeids[i]] = true;\n            }\n            for (i = shapeseq.length; i--;) {\n                sid = shapeseq[i];\n                if (shapemap[sid]) {\n                    shapeseq.splice(i, 1);\n                    delete this.shapes[sid];\n                    first = i;\n                }\n            }\n            for (i = shapes.length; i--;) {\n                shapeseq.splice(first, 0, shapes[i].id);\n                this.shapes[shapes[i].id] = shapes[i];\n            }\n\n        },\n\n        insertAfterShape: function (shapeid, shape) {\n            var shapeseq = this.shapeseq,\n                i;\n            for (i = shapeseq.length; i--;) {\n                if (shapeseq[i] === shapeid) {\n                    shapeseq.splice(i + 1, 0, shape.id);\n                    this.shapes[shape.id] = shape;\n                    return;\n                }\n            }\n        },\n\n        removeShapeId: function (shapeid) {\n            var shapeseq = this.shapeseq,\n                i;\n            for (i = shapeseq.length; i--;) {\n                if (shapeseq[i] === shapeid) {\n                    shapeseq.splice(i, 1);\n                    break;\n                }\n            }\n            delete this.shapes[shapeid];\n        },\n\n        getShapeAt: function (el, x, y) {\n            this.targetX = x;\n            this.targetY = y;\n            this.render();\n            return this.currentTargetShapeId;\n        },\n\n        render: function () {\n            var shapeseq = this.shapeseq,\n                shapes = this.shapes,\n                shapeCount = shapeseq.length,\n                context = this._getContext(),\n                shapeid, shape, i;\n            context.clearRect(0, 0, this.pixelWidth, this.pixelHeight);\n            for (i = 0; i < shapeCount; i++) {\n                shapeid = shapeseq[i];\n                shape = shapes[shapeid];\n                this['_draw' + shape.type].apply(this, shape.args);\n            }\n            if (!this.interact) {\n                // not interactive so no need to keep the shapes array\n                this.shapes = {};\n                this.shapeseq = [];\n            }\n        }\n\n    });\n\n    VCanvas_vml = createClass(VCanvas_base, {\n        init: function (width, height, target) {\n            var groupel;\n            VCanvas_vml._super.init.call(this, width, height, target);\n            if (target[0]) {\n                target = target[0];\n            }\n            $.data(target, '_jqs_vcanvas', this);\n            this.canvas = document.createElement('span');\n            $(this.canvas).css({ display: 'inline-block', position: 'relative', overflow: 'hidden', width: width, height: height, margin: '0px', padding: '0px', verticalAlign: 'top'});\n            this._insert(this.canvas, target);\n            this._calculatePixelDims(width, height, this.canvas);\n            this.canvas.width = this.pixelWidth;\n            this.canvas.height = this.pixelHeight;\n            groupel = '<v:group coordorigin=\"0 0\" coordsize=\"' + this.pixelWidth + ' ' + this.pixelHeight + '\"' +\n                    ' style=\"position:absolute;top:0;left:0;width:' + this.pixelWidth + 'px;height=' + this.pixelHeight + 'px;\"></v:group>';\n            this.canvas.insertAdjacentHTML('beforeEnd', groupel);\n            this.group = $(this.canvas).children()[0];\n            this.rendered = false;\n            this.prerender = '';\n        },\n\n        _drawShape: function (shapeid, path, lineColor, fillColor, lineWidth) {\n            var vpath = [],\n                initial, stroke, fill, closed, vel, plen, i;\n            for (i = 0, plen = path.length; i < plen; i++) {\n                vpath[i] = '' + (path[i][0]) + ',' + (path[i][1]);\n            }\n            initial = vpath.splice(0, 1);\n            lineWidth = lineWidth === undefined ? 1 : lineWidth;\n            stroke = lineColor === undefined ? ' stroked=\"false\" ' : ' strokeWeight=\"' + lineWidth + 'px\" strokeColor=\"' + lineColor + '\" ';\n            fill = fillColor === undefined ? ' filled=\"false\"' : ' fillColor=\"' + fillColor + '\" filled=\"true\" ';\n            closed = vpath[0] === vpath[vpath.length - 1] ? 'x ' : '';\n            vel = '<v:shape coordorigin=\"0 0\" coordsize=\"' + this.pixelWidth + ' ' + this.pixelHeight + '\" ' +\n                 ' id=\"jqsshape' + shapeid + '\" ' +\n                 stroke +\n                 fill +\n                ' style=\"position:absolute;left:0px;top:0px;height:' + this.pixelHeight + 'px;width:' + this.pixelWidth + 'px;padding:0px;margin:0px;\" ' +\n                ' path=\"m ' + initial + ' l ' + vpath.join(', ') + ' ' + closed + 'e\">' +\n                ' </v:shape>';\n            return vel;\n        },\n\n        _drawCircle: function (shapeid, x, y, radius, lineColor, fillColor, lineWidth) {\n            var stroke, fill, vel;\n            x -= radius;\n            y -= radius;\n            stroke = lineColor === undefined ? ' stroked=\"false\" ' : ' strokeWeight=\"' + lineWidth + 'px\" strokeColor=\"' + lineColor + '\" ';\n            fill = fillColor === undefined ? ' filled=\"false\"' : ' fillColor=\"' + fillColor + '\" filled=\"true\" ';\n            vel = '<v:oval ' +\n                 ' id=\"jqsshape' + shapeid + '\" ' +\n                stroke +\n                fill +\n                ' style=\"position:absolute;top:' + y + 'px; left:' + x + 'px; width:' + (radius * 2) + 'px; height:' + (radius * 2) + 'px\"></v:oval>';\n            return vel;\n\n        },\n\n        _drawPieSlice: function (shapeid, x, y, radius, startAngle, endAngle, lineColor, fillColor) {\n            var vpath, startx, starty, endx, endy, stroke, fill, vel;\n            if (startAngle === endAngle) {\n                return '';  // VML seems to have problem when start angle equals end angle.\n            }\n            if ((endAngle - startAngle) === (2 * Math.PI)) {\n                startAngle = 0.0;  // VML seems to have a problem when drawing a full circle that doesn't start 0\n                endAngle = (2 * Math.PI);\n            }\n\n            startx = x + Math.round(Math.cos(startAngle) * radius);\n            starty = y + Math.round(Math.sin(startAngle) * radius);\n            endx = x + Math.round(Math.cos(endAngle) * radius);\n            endy = y + Math.round(Math.sin(endAngle) * radius);\n\n            if (startx === endx && starty === endy) {\n                if ((endAngle - startAngle) < Math.PI) {\n                    // Prevent very small slices from being mistaken as a whole pie\n                    return '';\n                }\n                // essentially going to be the entire circle, so ignore startAngle\n                startx = endx = x + radius;\n                starty = endy = y;\n            }\n\n            if (startx === endx && starty === endy && (endAngle - startAngle) < Math.PI) {\n                return '';\n            }\n\n            vpath = [x - radius, y - radius, x + radius, y + radius, startx, starty, endx, endy];\n            stroke = lineColor === undefined ? ' stroked=\"false\" ' : ' strokeWeight=\"1px\" strokeColor=\"' + lineColor + '\" ';\n            fill = fillColor === undefined ? ' filled=\"false\"' : ' fillColor=\"' + fillColor + '\" filled=\"true\" ';\n            vel = '<v:shape coordorigin=\"0 0\" coordsize=\"' + this.pixelWidth + ' ' + this.pixelHeight + '\" ' +\n                 ' id=\"jqsshape' + shapeid + '\" ' +\n                 stroke +\n                 fill +\n                ' style=\"position:absolute;left:0px;top:0px;height:' + this.pixelHeight + 'px;width:' + this.pixelWidth + 'px;padding:0px;margin:0px;\" ' +\n                ' path=\"m ' + x + ',' + y + ' wa ' + vpath.join(', ') + ' x e\">' +\n                ' </v:shape>';\n            return vel;\n        },\n\n        _drawRect: function (shapeid, x, y, width, height, lineColor, fillColor) {\n            return this._drawShape(shapeid, [[x, y], [x, y + height], [x + width, y + height], [x + width, y], [x, y]], lineColor, fillColor);\n        },\n\n        reset: function () {\n            this.group.innerHTML = '';\n        },\n\n        appendShape: function (shape) {\n            var vel = this['_draw' + shape.type].apply(this, shape.args);\n            if (this.rendered) {\n                this.group.insertAdjacentHTML('beforeEnd', vel);\n            } else {\n                this.prerender += vel;\n            }\n            this.lastShapeId = shape.id;\n            return shape.id;\n        },\n\n        replaceWithShape: function (shapeid, shape) {\n            var existing = $('#jqsshape' + shapeid),\n                vel = this['_draw' + shape.type].apply(this, shape.args);\n            existing[0].outerHTML = vel;\n        },\n\n        replaceWithShapes: function (shapeids, shapes) {\n            // replace the first shapeid with all the new shapes then toast the remaining old shapes\n            var existing = $('#jqsshape' + shapeids[0]),\n                replace = '',\n                slen = shapes.length,\n                i;\n            for (i = 0; i < slen; i++) {\n                replace += this['_draw' + shapes[i].type].apply(this, shapes[i].args);\n            }\n            existing[0].outerHTML = replace;\n            for (i = 1; i < shapeids.length; i++) {\n                $('#jqsshape' + shapeids[i]).remove();\n            }\n        },\n\n        insertAfterShape: function (shapeid, shape) {\n            var existing = $('#jqsshape' + shapeid),\n                 vel = this['_draw' + shape.type].apply(this, shape.args);\n            existing[0].insertAdjacentHTML('afterEnd', vel);\n        },\n\n        removeShapeId: function (shapeid) {\n            var existing = $('#jqsshape' + shapeid);\n            this.group.removeChild(existing[0]);\n        },\n\n        getShapeAt: function (el, x, y) {\n            var shapeid = el.id.substr(8);\n            return shapeid;\n        },\n\n        render: function () {\n            if (!this.rendered) {\n                // batch the intial render into a single repaint\n                this.group.innerHTML = this.prerender;\n                this.rendered = true;\n            }\n        }\n    });\n\n}))}(document, Math));"]}