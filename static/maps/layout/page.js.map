{"version":3,"sources":["layout/page.js"],"names":["View","Backbone","extend","el","className","_panelids","initialize","options","self","this","config","_","defaults","message_box_visible","message_box_content","message_box_class","show_inactivity_warning","inactivity_box_content","Galaxy","modal","_uiModal2","default","view","title","setWindowTitle","allow_title_display","Router","center","_panel2","CenterPanel","display","_template","$","masthead","$el","append","$messagebox","panels","router","panel_id","panel_class_name","charAt","toUpperCase","slice","panel_class","panel_instance","html","replaceWith","id","render","root","pushState","remove","renderMessageBox","renderInactivityBox","renderPanels","_checkCommunicationServerOnline","content","level","addClass","removeClass","hide","verificationLink","attr","text","$inactivebox","show","each","panel","toString","join","ajax","communication_server_host","url","host","port","preferences","window","user","attributes","$chat_icon_element","indexOf","communication_server","success","data","css","error"],"mappings":"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","file":"../../scripts/layout/page.js","sourcesContent":["import Masthead from \"layout/masthead\";\nimport Panel from \"layout/panel\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Utils from \"utils/utils\";\nvar View = Backbone.View.extend({\n    el: \"body\",\n    className: \"full-content\",\n    _panelids: [\"left\", \"right\"],\n\n    initialize: function(options) {\n        var self = this;\n        this.config = _.defaults(options.config || {}, {\n            message_box_visible: false,\n            message_box_content: \"\",\n            message_box_class: \"info\",\n            show_inactivity_warning: false,\n            inactivity_box_content: \"\"\n        });\n\n        // attach global objects, build mastheads\n        Galaxy.modal = this.modal = new Modal.View();\n        Galaxy.display = this.display = view => {\n            if (view.title) {\n                Utils.setWindowTitle(view.title);\n                view.allow_title_display = false;\n            } else {\n                Utils.setWindowTitle();\n                view.allow_title_display = true;\n            }\n            self.center.display(view);\n        };\n        Galaxy.router = this.router =\n            options.Router && new options.Router(self, options);\n        this.masthead = new Masthead.View(this.config);\n        this.center = new Panel.CenterPanel();\n\n        // build page template\n        this.$el.attr(\"scroll\", \"no\");\n        this.$el.html(this._template());\n        this.$(\"#masthead\").replaceWith(this.masthead.$el);\n        this.$(\"#center\").append(this.center.$el);\n        this.$el.append(this.masthead.frame.$el);\n        this.$el.append(this.modal.$el);\n        this.$messagebox = this.$(\"#messagebox\");\n        this.$inactivebox = this.$(\"#inactivebox\");\n\n        // build panels\n        this.panels = {};\n        _.each(this._panelids, panel_id => {\n            var panel_class_name =\n                panel_id.charAt(0).toUpperCase() + panel_id.slice(1);\n            var panel_class = options[panel_class_name];\n            if (panel_class) {\n                var panel_instance = new panel_class(self, options);\n                self[panel_instance.toString()] = panel_instance;\n                self.panels[panel_id] = new Panel.SidePanel({\n                    id: panel_id,\n                    el: self.$(`#${panel_id}`),\n                    view: panel_instance\n                });\n            }\n        });\n        this.render();\n\n        // start the router\n        this.router &&\n            Backbone.history.start({\n                root: Galaxy.root,\n                pushState: true\n            });\n    },\n\n    render: function() {\n        // TODO: Remove this line after select2 update\n        $(\".select2-hidden-accessible\").remove();\n        this.masthead.render();\n        this.renderMessageBox();\n        this.renderInactivityBox();\n        this.renderPanels();\n        this._checkCommunicationServerOnline();\n        return this;\n    },\n\n    /** Render message box */\n    renderMessageBox: function() {\n        if (this.config.message_box_visible) {\n            var content = this.config.message_box_content || \"\";\n            var level = this.config.message_box_class || \"info\";\n            this.$el.addClass(\"has-message-box\");\n            this.$messagebox\n                .attr(\"class\", `panel-${level}-message`)\n                .html(content)\n                .toggle(!!content)\n                .show();\n        } else {\n            this.$el.removeClass(\"has-message-box\");\n            this.$messagebox.hide();\n        }\n        return this;\n    },\n\n    /** Render inactivity warning */\n    renderInactivityBox: function() {\n        if (this.config.show_inactivity_warning) {\n            var content = this.config.inactivity_box_content || \"\";\n            var verificationLink = $(\"<a/>\")\n                .attr(\"href\", `${Galaxy.root}user/resend_verification`)\n                .text(\"Resend verification\");\n            this.$el.addClass(\"has-inactivity-box\");\n            this.$inactivebox\n                .html(`${content} `)\n                .append(verificationLink)\n                .toggle(!!content)\n                .show();\n        } else {\n            this.$el.removeClass(\"has-inactivity-box\");\n            this.$inactivebox.hide();\n        }\n        return this;\n    },\n\n    /** Render panels */\n    renderPanels: function() {\n        var self = this;\n        _.each(this._panelids, panel_id => {\n            var panel = self.panels[panel_id];\n            if (panel) {\n                panel.render();\n            } else {\n                self.$(\"#center\").css(panel_id, 0);\n                self.$(`#${panel_id}`).hide();\n            }\n        });\n        return this;\n    },\n\n    /** body template */\n    _template: function() {\n        return [\n            '<div id=\"everything\">',\n            '<div id=\"background\"/>',\n            '<div id=\"masthead\"/>',\n            '<div id=\"messagebox\"/>',\n            '<div id=\"inactivebox\" class=\"panel-warning-message\" />',\n            '<div id=\"left\" />',\n            '<div id=\"center\" />',\n            '<div id=\"right\" />',\n            \"</div>\",\n            '<div id=\"dd-helper\" />'\n        ].join(\"\");\n    },\n\n    toString: function() {\n        return \"PageLayoutView\";\n    },\n\n    /** Check if the communication server is online and show the icon otherwise hide the icon */\n    _checkCommunicationServerOnline: function() {\n        var host = window.Galaxy.config.communication_server_host;\n        var port = window.Galaxy.config.communication_server_port;\n        var preferences = window.Galaxy.user.attributes.preferences;\n        var $chat_icon_element = $(\"#show-chat-online\");\n        /** Check if the user has deactivated the communication in it's personal settings */\n        if (\n            preferences &&\n            [\"1\", \"true\"].indexOf(preferences.communication_server) != -1\n        ) {\n            // See if the configured communication server is available\n            $.ajax({\n                url: `${host}:${port}`\n            })\n                .success(data => {\n                    // enable communication only when a user is logged in\n                    if (window.Galaxy.user.id !== null) {\n                        if ($chat_icon_element.css(\"visibility\") === \"hidden\") {\n                            $chat_icon_element.css(\"visibility\", \"visible\");\n                        }\n                    }\n                })\n                .error(data => {\n                    // hide the communication icon if the communication server is not available\n                    $chat_icon_element.css(\"visibility\", \"hidden\");\n                });\n        } else {\n            $chat_icon_element.css(\"visibility\", \"hidden\");\n        }\n    }\n});\n\nexport default { View: View };\n"]}