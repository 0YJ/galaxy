{"version":3,"sources":["layout/scratchbook.js"],"names":["Backbone","View","extend","initialize","options","self","this","frames","_uiFrames2","default","visible","setElement","$el","buttonActive","collection","add","id","icon","tooltip","_localization2","onclick","active","set","toggle","show_note","note_cls","hide","onbeforeunload","e","show","on","length","buttonLoad","note","history_cache","addDataset","dataset_id","currHistoryPanel","Galaxy","historyId","history_id","name","model","get","dataset_ids","each","push","current_dataset","history_details","dataset","dataset_list","pos","indexOf","_findDataset","_loadDatasetOffset","offset","frame","new_dataset_id","config","trigger","menu","disabled","embedded","callback","height","$","when","fetch","then","title","url","data_type","addTrackster","viz_id","is_tabular","frame_config","_data2","createTabularDatasetChunkedView","TabularDataset","toJSON","view_config","viz","dbkey","stand_alone","latest_revision","content","drawables","view","create_visualization","ui","_trackster2","TracksterUI","root","type","parent_elt","window","open","location","target","$galaxy_main","_","d","hda_ldda","viewport","bookmarks","noscratchbook","parent","document","find","attr"],"mappings":"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","file":"../../scripts/layout/scratchbook.js","sourcesContent":["/** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\nimport Frames from \"mvc/ui/ui-frames\";\nimport DATA from \"mvc/dataset/data\";\nimport visualization from \"viz/visualization\";\nimport trackster from \"viz/trackster\";\nimport _l from \"utils/localization\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        options = options || {};\n        this.frames = new Frames.View({ visible: false });\n        this.setElement(this.frames.$el);\n        this.buttonActive = options.collection.add({\n            id: \"enable-scratchbook\",\n            icon: \"fa-th\",\n            tooltip: _l(\"Enable/Disable Scratchbook\"),\n            onclick: function() {\n                self.active = !self.active;\n                self.buttonActive.set({\n                    toggle: self.active,\n                    show_note: self.active,\n                    note_cls: self.active && \"fa fa-check\"\n                });\n                !self.active && self.frames.hide();\n            },\n            onbeforeunload: function() {\n                if (self.frames.length() > 0) {\n                    return (\n                        \"You opened \" +\n                        self.frames.length() +\n                        \" frame(s) which will be lost.\"\n                    );\n                }\n            }\n        });\n        this.buttonLoad = options.collection.add({\n            id: \"show-scratchbook\",\n            icon: \"fa-eye\",\n            tooltip: _l(\"Show/Hide Scratchbook\"),\n            show_note: true,\n            visible: false,\n            onclick: function(e) {\n                self.frames.visible ? self.frames.hide() : self.frames.show();\n            }\n        });\n        this.frames\n            .on(\"add remove\", function() {\n                this.visible && this.length() == 0 && this.hide();\n                self.buttonLoad.set({\n                    note: this.length(),\n                    visible: this.length() > 0\n                });\n            })\n            .on(\"show hide \", function() {\n                self.buttonLoad.set({\n                    toggle: this.visible,\n                    icon: (this.visible && \"fa-eye\") || \"fa-eye-slash\"\n                });\n            });\n        this.history_cache = {};\n    },\n\n    /** Add a dataset to the frames */\n    addDataset: function(dataset_id) {\n        var self = this;\n        var current_dataset = null;\n        if (Galaxy && Galaxy.currHistoryPanel) {\n            var history_id = Galaxy.currHistoryPanel.collection.historyId;\n            this.history_cache[history_id] = {\n                name: Galaxy.currHistoryPanel.model.get(\"name\"),\n                dataset_ids: []\n            };\n            Galaxy.currHistoryPanel.collection.each(function(model) {\n                !model.get(\"deleted\") &&\n                    model.get(\"visible\") &&\n                    self.history_cache[history_id].dataset_ids.push(\n                        model.get(\"id\")\n                    );\n            });\n        }\n        var _findDataset = function(dataset, offset) {\n            if (dataset) {\n                var history_details =\n                    self.history_cache[dataset.get(\"history_id\")];\n                if (history_details && history_details.dataset_ids) {\n                    var dataset_list = history_details.dataset_ids;\n                    var pos = dataset_list.indexOf(dataset.get(\"id\"));\n                    if (\n                        pos !== -1 &&\n                        pos + offset >= 0 &&\n                        pos + offset < dataset_list.length\n                    ) {\n                        return dataset_list[pos + offset];\n                    }\n                }\n            }\n        };\n        var _loadDatasetOffset = function(dataset, offset, frame) {\n            var new_dataset_id = _findDataset(dataset, offset);\n            if (new_dataset_id) {\n                self._loadDataset(new_dataset_id, function(\n                    new_dataset,\n                    config\n                ) {\n                    current_dataset = new_dataset;\n                    frame.model.set(config);\n                });\n            } else {\n                frame.model.trigger(\"change\");\n            }\n        };\n        this._loadDataset(dataset_id, function(dataset, config) {\n            current_dataset = dataset;\n            self.add(\n                _.extend(\n                    {\n                        menu: [\n                            {\n                                icon: \"fa fa-chevron-circle-left\",\n                                tooltip: \"Previous in History\",\n                                onclick: function(frame) {\n                                    _loadDatasetOffset(\n                                        current_dataset,\n                                        -1,\n                                        frame\n                                    );\n                                },\n                                disabled: function() {\n                                    return !_findDataset(current_dataset, -1);\n                                }\n                            },\n                            {\n                                icon: \"fa fa-chevron-circle-right\",\n                                tooltip: \"Next in History\",\n                                onclick: function(frame) {\n                                    _loadDatasetOffset(\n                                        current_dataset,\n                                        1,\n                                        frame\n                                    );\n                                },\n                                disabled: function() {\n                                    return !_findDataset(current_dataset, 1);\n                                }\n                            }\n                        ]\n                    },\n                    config\n                )\n            );\n        });\n    },\n\n    _loadDataset: function(dataset_id, callback) {\n        var self = this;\n        var dataset = new DATA.Dataset({ id: dataset_id });\n        $.when(dataset.fetch()).then(function() {\n            var is_tabular = _.find([\"tabular\", \"interval\"], function(\n                data_type\n            ) {\n                return dataset.get(\"data_type\").indexOf(data_type) !== -1;\n            });\n            var title = dataset.get(\"name\");\n            var history_details = self.history_cache[dataset.get(\"history_id\")];\n            if (history_details) {\n                title = history_details.name + \": \" + title;\n            }\n            callback(\n                dataset,\n                is_tabular\n                    ? {\n                          title: title,\n                          url: null,\n                          content: DATA.createTabularDatasetChunkedView({\n                              model: new DATA.TabularDataset(dataset.toJSON()),\n                              embedded: true,\n                              height: \"100%\"\n                          }).$el\n                      }\n                    : {\n                          title: title,\n                          url:\n                              Galaxy.root +\n                              \"datasets/\" +\n                              dataset_id +\n                              \"/display/?preview=True\",\n                          content: null\n                      }\n            );\n        });\n    },\n\n    /** Add a trackster visualization to the frames. */\n    addTrackster: function(viz_id) {\n        var self = this;\n        var viz = new visualization.Visualization({ id: viz_id });\n        $.when(viz.fetch()).then(function() {\n            var ui = new trackster.TracksterUI(Galaxy.root);\n\n            // Construct frame config based on dataset's type.\n            var frame_config = {\n                title: viz.get(\"name\"),\n                type: \"other\",\n                content: function(parent_elt) {\n                    // Create view config.\n                    var view_config = {\n                            container: parent_elt,\n                            name: viz.get(\"title\"),\n                            id: viz.id,\n                            // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                            dbkey: viz.get(\"dbkey\"),\n                            stand_alone: false\n                        },\n                        latest_revision = viz.get(\"latest_revision\"),\n                        drawables = latest_revision.config.view.drawables;\n\n                    // Set up datasets in drawables.\n                    _.each(drawables, function(d) {\n                        d.dataset = {\n                            hda_ldda: d.hda_ldda,\n                            id: d.dataset_id\n                        };\n                    });\n                    view = ui.create_visualization(\n                        view_config,\n                        latest_revision.config.viewport,\n                        latest_revision.config.view.drawables,\n                        latest_revision.config.bookmarks,\n                        false\n                    );\n                }\n            };\n            self.add(frame_config);\n        });\n    },\n\n    /** Add and display a new frame/window based on options. */\n    add: function(options) {\n        if (options.target == \"_blank\") {\n            window.open(options.url);\n        } else if (\n            options.target == \"_top\" ||\n            options.target == \"_parent\" ||\n            options.target == \"_self\"\n        ) {\n            window.location = options.url;\n        } else if (!this.active || options.noscratchbook) {\n            var $galaxy_main = $(window.parent.document).find(\"#galaxy_main\");\n            if (options.target == \"galaxy_main\" || options.target == \"center\") {\n                if ($galaxy_main.length === 0) {\n                    window.location =\n                        options.url +\n                        (options.url.indexOf(\"?\") == -1 ? \"?\" : \"&\") +\n                        \"use_panels=True\";\n                } else {\n                    $galaxy_main.attr(\"src\", options.url);\n                }\n            } else window.location = options.url;\n        } else {\n            this.frames.add(options);\n        }\n    }\n});\n"]}