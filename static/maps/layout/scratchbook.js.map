{"version":3,"sources":["layout/scratchbook.js"],"names":["define","Frames","Backbone","View","extend","options","initialize","this","frames","self","visible","$el","buttonActive","id","icon","_l","tooltip","active","onclick","set","toggle","note_cls","onbeforeunload","length","buttonLoad","collection","add","show_note","e","hide","show","on","note","addDataset","dataset_id","Galaxy","currHistoryPanel","current_dataset","historyId","name","model","get","dataset_ids","history_cache","history_id","push","_findDataset","dataset","offset","history_details","dataset_list","pos","indexOf","_loadDatasetOffset","frame","new_dataset_id","config","new_dataset","_loadDataset","trigger","disabled","callback","require","DATA","Dataset","$","when","fetch","is_tabular","data_type","title","url","content","createTabularDatasetChunkedView","TabularDataset","toJSON","root","visualization","trackster","viz","Visualization","viz_id","then","ui","TracksterUI","frame_config","type","parent_elt","view_config","container","stand_alone","latest_revision","drawables","view","d","dbkey","hda_ldda","viewport","bookmarks","target","window","open","location","noscratchbook","parent","document","find","$galaxy_main"],"mappings":"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","file":"../../scripts/layout/scratchbook.js","sourcesContent":["/** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\ndefine([ 'mvc/ui/ui-frames' ], function( Frames ) {\nreturn Backbone.View.extend({\n    initialize : function( options ) {\n        var self = this;\n        options = options || {};\n        this.frames = new Frames.View({ visible : false });\n        this.setElement( this.frames.$el );\n        this.buttonActive = options.collection.add({\n            id              : 'enable-scratchbook',\n            icon            : 'fa-th',\n            tooltip         : _l( 'Enable/Disable Scratchbook' ),\n            onclick         : function() {\n                self.active = !self.active;\n                self.buttonActive.set({\n                    toggle    : self.active,\n                    show_note : self.active,\n                    note_cls  : self.active && 'fa fa-check'\n                });\n                !self.active && self.frames.hide();\n            },\n            onbeforeunload  : function() {\n                if ( self.frames.length() > 0 ) {\n                    return 'You opened ' + self.frames.length() + ' frame(s) which will be lost.';\n                }\n            }\n        });\n        this.buttonLoad = options.collection.add({\n            id              : 'show-scratchbook',\n            icon            : 'fa-eye',\n            tooltip         : _l( 'Show/Hide Scratchbook' ),\n            show_note       : true,\n            visible         : false,\n            onclick         : function( e ) {\n                self.frames.visible ? self.frames.hide() : self.frames.show();\n            }\n        });\n        this.frames.on( 'add remove', function() {\n            this.visible && this.length() == 0 && this.hide();\n            self.buttonLoad.set( { 'note': this.length(), 'visible': this.length() > 0 } );\n        }).on( 'show hide ', function() {\n            self.buttonLoad.set( { 'toggle': this.visible, 'icon': this.visible && 'fa-eye' || 'fa-eye-slash' } );\n        });\n        this.history_cache = {};\n    },\n\n    /** Add a dataset to the frames */\n    addDataset: function( dataset_id ) {\n        var self = this;\n        var current_dataset = null;\n        if ( Galaxy && Galaxy.currHistoryPanel ) {\n            var history_id = Galaxy.currHistoryPanel.collection.historyId;\n            this.history_cache[ history_id ] = { name: Galaxy.currHistoryPanel.model.get( 'name' ), dataset_ids: [] };\n            Galaxy.currHistoryPanel.collection.each( function( model ) {\n                !model.get( 'deleted' ) && model.get( 'visible' ) && self.history_cache[ history_id ].dataset_ids.push( model.get( 'id' ) );\n            });\n        }\n        var _findDataset = function( dataset, offset ) {\n            if ( dataset ) {\n                var history_details = self.history_cache[ dataset.get( 'history_id' ) ];\n                if ( history_details && history_details.dataset_ids ) {\n                    var dataset_list = history_details.dataset_ids;\n                    var pos = dataset_list.indexOf( dataset.get( 'id' ) );\n                    if ( pos !== -1 && pos + offset >= 0 && pos + offset < dataset_list.length ) {\n                        return dataset_list[ pos + offset ];\n                    }\n                }\n            }\n        };\n        var _loadDatasetOffset = function( dataset, offset, frame ) {\n            var new_dataset_id = _findDataset( dataset, offset );\n            if ( new_dataset_id ) {\n                self._loadDataset( new_dataset_id, function( new_dataset, config ) {\n                    current_dataset = new_dataset;\n                    frame.model.set( config );\n                });\n            } else {\n                frame.model.trigger( 'change' );\n            }\n        }\n        this._loadDataset( dataset_id, function( dataset, config ) {\n            current_dataset = dataset;\n            self.add( _.extend( { menu: [ { icon     : 'fa fa-chevron-circle-left',\n                                            tooltip  : 'Previous in History',\n                                            onclick  : function( frame ) { _loadDatasetOffset( current_dataset, -1, frame ) },\n                                            disabled : function() { return !_findDataset( current_dataset, -1 ) } },\n                                          { icon     : 'fa fa-chevron-circle-right',\n                                            tooltip  : 'Next in History',\n                                            onclick  : function( frame ) { _loadDatasetOffset( current_dataset, 1, frame ) },\n                                            disabled : function() { return !_findDataset( current_dataset, 1 ) } } ] }, config ) )\n        });\n    },\n\n    _loadDataset: function( dataset_id, callback ) {\n        var self = this;\n        require([ 'mvc/dataset/data' ], function( DATA ) {\n            var dataset = new DATA.Dataset( { id : dataset_id } );\n            $.when( dataset.fetch() ).then( function() {\n                var is_tabular = _.find( [ 'tabular', 'interval' ] , function( data_type ) {\n                    return dataset.get( 'data_type' ).indexOf( data_type ) !== -1;\n                });\n                var title = dataset.get( 'name' );\n                var history_details = self.history_cache[ dataset.get( 'history_id' ) ];\n                if ( history_details ) {\n                    title = history_details.name + ': ' + title;\n                }\n                callback( dataset, is_tabular ? {\n                    title   : title,\n                    url     : null,\n                    content : DATA.createTabularDatasetChunkedView({\n                        model       : new DATA.TabularDataset( dataset.toJSON() ),\n                        embedded    : true,\n                        height      : '100%'\n                    }).$el\n                } : {\n                    title   : title,\n                    url     : Galaxy.root + 'datasets/' + dataset_id + '/display/?preview=True',\n                    content : null\n                } );\n            });\n        });\n    },\n\n    /** Add a trackster visualization to the frames. */\n    addTrackster: function(viz_id) {\n        var self = this;\n        require(['viz/visualization', 'viz/trackster'], function(visualization, trackster) {\n            var viz = new visualization.Visualization({id: viz_id});\n            $.when( viz.fetch() ).then( function() {\n                var ui = new trackster.TracksterUI(Galaxy.root);\n\n                // Construct frame config based on dataset's type.\n                var frame_config = {\n                        title: viz.get('name'),\n                        type: 'other',\n                        content: function(parent_elt) {\n                            // Create view config.\n                            var view_config = {\n                                container: parent_elt,\n                                name: viz.get('title'),\n                                id: viz.id,\n                                // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                                dbkey: viz.get('dbkey'),\n                                stand_alone: false\n                            },\n                            latest_revision = viz.get('latest_revision'),\n                            drawables = latest_revision.config.view.drawables;\n\n                            // Set up datasets in drawables.\n                            _.each(drawables, function(d) {\n                                d.dataset = {\n                                    hda_ldda: d.hda_ldda,\n                                    id: d.dataset_id\n                                };\n                            });\n                            view = ui.create_visualization(view_config,\n                                                           latest_revision.config.viewport,\n                                                           latest_revision.config.view.drawables,\n                                                           latest_revision.config.bookmarks,\n                                                           false);\n                        }\n                    };\n                self.add(frame_config);\n            });\n        });\n    },\n\n    /** Add and display a new frame/window based on options. */\n    add: function( options ) {\n        if ( options.target == '_blank' ) {\n            window.open( options.url );\n        } else if ( options.target == '_top' || options.target == '_parent' || options.target == '_self' ) {\n            window.location = options.url;\n        } else if ( !this.active || options.noscratchbook ) {\n            var $galaxy_main = $( window.parent.document ).find( '#galaxy_main' );\n            if ( options.target == 'galaxy_main' || options.target == 'center' ) {\n                if ( $galaxy_main.length === 0 ) {\n                    window.location = options.url + ( options.url.indexOf( '?' ) == -1 ? '?' : '&' ) + 'use_panels=True';\n                } else {\n                    $galaxy_main.attr( 'src', options.url );\n                }\n            } else\n                window.location = options.url;\n        } else {\n            this.frames.add( options );\n        }\n    }\n});\n\n});\n"]}