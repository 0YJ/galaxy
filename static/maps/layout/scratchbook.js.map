{"version":3,"sources":["layout/scratchbook.js"],"names":["define","Frames","Backbone","View","extend","initialize","options","self","this","setElement","frames","$el","collection","add","id","icon","tooltip","buttonActive","active","set","onclick","show_note","onbeforeunload","length","visible","hide","show","note","on","buttonLoad","toggle","history_cache","addDataset","name","dataset_ids","Galaxy","currHistoryPanel","each","historyId","history_id","model","get","history_details","dataset_list","pos","_findDataset","dataset","offset","_loadDatasetOffset","new_dataset_id","_loadDataset","current_dataset","frame","menu","config","dataset_id","disabled","_","Dataset","then","content","createTabularDatasetChunkedView","DATA","TabularDataset","embedded","frame_config","callback","title","type","$","when","fetch","is_tabular","view_config","container","indexOf","data_type","drawables","latest_revision","d","hda_ldda","view","ui","toJSON","height","location","$galaxy_main","window","addTrackster","viz_id","require","visualization","trackster","viz","Visualization","TracksterUI","root","parent_elt","dbkey","stand_alone","create_visualization","viewport","bookmarks","target","open","url","noscratchbook","parent","document","find","attr"],"mappings":"kCACAA,QAAQ,oBAAqB,SAASC,GAClC,OAAOC,SAASC,KAAKC,QAFzBC,WAAA,SAAAC,GACQ,IAAAC,EAAAC,KACJF,EAAOJ,MACHG,KAAAA,OAAY,IAAAJ,EAAAE,MAASG,SAAS,IAC1BE,KAAAC,WAAWD,KAAXE,OAAAC,KACAL,KAAAA,aAAUA,EAAVM,WAAAC,KACAC,GAAA,qBACAC,KAAKN,QACLO,QAAKC,GAAAA,8BACDH,QAAI,WACJC,EAAAA,QAFuCR,EAAAW,OAGvCF,EAAAA,aAAYG,KACZC,OAASb,EAAAW,OACLX,UAAAA,EAAeA,OACfA,SAAKU,EAAAA,QAAiB,iBAElBI,EAAAA,QAAAA,EAAWd,OAAKW,QAFEI,eAAtB,WAKA,GAAAf,EAACA,OAADgB,SAAqBb,EAXc,MAavCY,cACQf,EAAKG,OAAOa,SACZ,mCASRT,KAAAA,WAAIR,EAAAM,WADiCC,KAErCE,GAAAA,mBACAC,KAAAA,SACAK,QAAAA,GAAAA,yBACAG,WAAAA,EACAJ,SAAAA,EACIb,QAAAA,SAAKG,GAGRH,EAAAG,OAAAc,QAVLjB,EAAAG,OAAAe,OAYKf,EACGA,OAAAgB,UAGIC,KAAAA,OACAH,GAAAA,aAAS,WAFOhB,KAApBgB,SAAA,GAAAhB,KAAAe,UAAAf,KAAAiB,OAKHG,EAAGC,WAAcV,KACdZ,KAAKsB,KAALN,SACIO,QAAQtB,KAAKgB,SADG,MAT5BI,GAAA,aAAA,WAcArB,EAAKwB,WAALZ,KAvDoBW,OAAAtB,KAAAgB,QAoDRT,KAAOP,KAAKgB,SAAW,UAAa,mBAQhDhB,KAAAuB,kBAIIC,WAAA,SAAKD,GACDE,IAAAA,EAAAA,KACAC,EAAAA,KAF6B,GAAAC,QAAjCA,OAAAC,iBAAA,CAIAD,IAAAA,EAAOC,OAAAA,iBAA4BC,WAAKC,UACpC9B,KAAAuB,cAAWQ,IAKdN,KANDE,OAAAC,iBAAAI,MAAAC,IAAA,QAOHP,gBAEGC,OAAAC,iBAAaxB,WAAAyB,KAAA,SAAAG,IACTA,EAAAC,IAAIC,YAEJF,EAAIE,IAAAA,YACAnC,EAAAwB,cAAIY,GAAeD,YAAgBR,KACnCM,EAAII,IAAMD,SAQb,IAAAE,EAAA,SAAAC,EAAAC,GACJ,GAAAD,EAAA,CAfL,IAAAJ,EAiBIM,EAAAA,cAAqBF,EAArBE,IAAAA,eACA,GAAIC,GAAiBJ,EAAaC,YAAlC,CACIG,IAAAA,EAAgBP,EAAAR,YAChB3B,EAAK2C,EAAaD,QAAAA,EAAgBR,IAAA,OAI9BU,IACMX,IAANY,GALJR,EAAAG,GAAA,GAOGH,EAAAG,EAAAJ,EAAApB,OAEN,OAAAoB,EAAAC,EAAAG,MAOWM,EACI,SAAAP,EAAAC,EAAAK,GACIrC,IAAAA,EAAM8B,EAAAC,EAAAC,GACN/B,EACAI,EAAAA,aAAS6B,EAASG,SACdJ,EAKHM,GAEGH,EAAQN,EAIXO,EAAAZ,MAAArB,IAAAmC,KAIDtC,EAAAA,MAAAA,QAAS,WAORR,KAAA0C,aATLK,EAAA,SAAAT,EAAAQ,GAUIE,EAAAA,EACIjD,EAAAM,IAIH4C,EAAArD,QAIbkD,OArJQvC,KAAA,4BAmHIC,QAAS,sBAwCvBI,QAAA,SAASmC,GACnBP,EACAG,GAC2BO,EACCC,IACpBH,SAAA,WAOYV,OAAYD,EACpBH,GAEiB,MAQF3B,KAFT,6BAGI6C,QAAcC,kBAENrB,QAAWsB,SAAKC,GAGhBC,EACQb,EAEdxC,EAENyC,IAOIQ,SAAS,WAvBvB,OAAAf,EAdJM,EAFJ,OAiDQG,OASAJ,aAAA,SAAIe,EAAeC,GACfC,IAAAA,EAAAA,KACAC,SAAAA,oBAFe,SAAAN,GAGfF,IAAAA,EAAAA,IAAAA,EAASF,SAAA5C,GAAAyC,IACLc,EAAAC,KAAAxB,EAAAyB,SAAAZ,KAAA,WACA,IAAAa,EAAIC,EAAAA,MAAAA,UAAc,YAAA,SACVC,GAEA5D,OACA,IAAAgC,EAAAL,IAAA,aAAAkC,QAAAC,KAJUT,EAAArB,EAAlBL,IAAA,QAAAC,EAAAnC,EAAAwB,cASI8C,EACIC,IAAAA,eA5DZpC,IA8DIyB,EAAAzB,EAAAT,KAAA,KAAAkC,GAEIY,EACIC,EACAlE,GAHRqD,MAAAA,EAMAc,IAAOC,KAOVtB,QAAAE,EAAAD,iCAEII,MAAT,IAAAH,EAAAC,eArCJjB,EAAAqC,UAnNgBnB,UAAA,EAyLUoB,OAAQ,SAqE5B9E,MAINA,MAAA6D,EAIOkB,IACMnE,OAAUZ,KACnBgF,YAIA/B,EAGI+B,yBACAC,QAAA,YAWfC,aAAA,SAAAC,GA3RL,IAAAlF,EAAAC,KADJkF,SAAA,oBAAA,iBAAA,SAgNgBC,EACAC,GAEA,IAAIC,EAAM,IAAIF,EAAcG,eAAgBhF,GAAI2E,IAChDpB,EAAEC,KAAKuB,EAAItB,SAASZ,KAAK,WACrB,IAAIuB,EAAK,IAAIU,EAAUG,YAAY5D,OAAO6D,MAGtC/B,GACAE,MAAO0B,EAAIpD,IAAI,QACf2B,KAAM,QACNR,QAAS,SAASqC,GAEd,IAAIxB,GACIC,UAAWuB,EACXhE,KAAM4D,EAAIpD,IAAI,SACd3B,GAAI+E,EAAI/E,GAERoF,MAAOL,EAAIpD,IAAI,SACf0D,aAAa,GAEjBrB,EAAkBe,EAAIpD,IAAI,mBAC1BoC,EACIC,EAAgBxB,OAAO2B,KAAKJ,UAGpCpB,EAAEpB,KAAKwC,EAAW,SAASE,GACvBA,EAAEjC,SACEkC,SAAUD,EAAEC,SACZlE,GAAIiE,EAAExB,cAGd0B,KAAOC,EAAGkB,qBACN3B,EACAK,EAAgBxB,OAAO+C,SACvBvB,EAAgBxB,OAAO2B,KAAKJ,UAC5BC,EAAgBxB,OAAOgD,WACvB,KAIZ/F,EAAKM,IAAIoD,QAMrBpD,IAAK,SAASP,GACV,GAAsB,UAAlBA,EAAQiG,OACRhB,OAAOiB,KAAKlG,EAAQmG,UACjB,GACe,QAAlBnG,EAAQiG,QACU,WAAlBjG,EAAQiG,QACU,SAAlBjG,EAAQiG,OAERhB,OAAOF,SAAW/E,EAAQmG,SACvB,IAAKjG,KAAKU,QAAUZ,EAAQoG,cAAe,CAC9C,IAAIpB,EAAejB,EAAEkB,OAAOoB,OAAOC,UAAUC,KACzC,gBAGkB,eAAlBvG,EAAQiG,QACU,UAAlBjG,EAAQiG,OAEoB,IAAxBjB,EAAa/D,OACbgE,OAAOF,SACH/E,EAAQmG,MACsB,GAA7BnG,EAAQmG,IAAI9B,QAAQ,KAAa,IAAM,KACxC,kBAEJW,EAAawB,KAAK,MAAOxG,EAAQmG,KAElClB,OAAOF,SAAW/E,EAAQmG,SAEjCjG,KAAKE,OAAOG,IAAIP","file":"../../scripts/layout/scratchbook.js","sourcesContent":["/** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\ndefine([\"mvc/ui/ui-frames\"], function(Frames) {\n    return Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            options = options || {};\n            this.frames = new Frames.View({ visible: false });\n            this.setElement(this.frames.$el);\n            this.buttonActive = options.collection.add({\n                id: \"enable-scratchbook\",\n                icon: \"fa-th\",\n                tooltip: _l(\"Enable/Disable Scratchbook\"),\n                onclick: function() {\n                    self.active = !self.active;\n                    self.buttonActive.set({\n                        toggle: self.active,\n                        show_note: self.active,\n                        note_cls: self.active && \"fa fa-check\"\n                    });\n                    !self.active && self.frames.hide();\n                },\n                onbeforeunload: function() {\n                    if (self.frames.length() > 0) {\n                        return (\n                            \"You opened \" +\n                            self.frames.length() +\n                            \" frame(s) which will be lost.\"\n                        );\n                    }\n                }\n            });\n            this.buttonLoad = options.collection.add({\n                id: \"show-scratchbook\",\n                icon: \"fa-eye\",\n                tooltip: _l(\"Show/Hide Scratchbook\"),\n                show_note: true,\n                visible: false,\n                onclick: function(e) {\n                    self.frames.visible\n                        ? self.frames.hide()\n                        : self.frames.show();\n                }\n            });\n            this.frames\n                .on(\"add remove\", function() {\n                    this.visible && this.length() == 0 && this.hide();\n                    self.buttonLoad.set({\n                        note: this.length(),\n                        visible: this.length() > 0\n                    });\n                })\n                .on(\"show hide \", function() {\n                    self.buttonLoad.set({\n                        toggle: this.visible,\n                        icon: (this.visible && \"fa-eye\") || \"fa-eye-slash\"\n                    });\n                });\n            this.history_cache = {};\n        },\n\n        /** Add a dataset to the frames */\n        addDataset: function(dataset_id) {\n            var self = this;\n            var current_dataset = null;\n            if (Galaxy && Galaxy.currHistoryPanel) {\n                var history_id = Galaxy.currHistoryPanel.collection.historyId;\n                this.history_cache[history_id] = {\n                    name: Galaxy.currHistoryPanel.model.get(\"name\"),\n                    dataset_ids: []\n                };\n                Galaxy.currHistoryPanel.collection.each(function(model) {\n                    !model.get(\"deleted\") &&\n                        model.get(\"visible\") &&\n                        self.history_cache[history_id].dataset_ids.push(\n                            model.get(\"id\")\n                        );\n                });\n            }\n            var _findDataset = function(dataset, offset) {\n                if (dataset) {\n                    var history_details =\n                        self.history_cache[dataset.get(\"history_id\")];\n                    if (history_details && history_details.dataset_ids) {\n                        var dataset_list = history_details.dataset_ids;\n                        var pos = dataset_list.indexOf(dataset.get(\"id\"));\n                        if (\n                            pos !== -1 &&\n                            pos + offset >= 0 &&\n                            pos + offset < dataset_list.length\n                        ) {\n                            return dataset_list[pos + offset];\n                        }\n                    }\n                }\n            };\n            var _loadDatasetOffset = function(dataset, offset, frame) {\n                var new_dataset_id = _findDataset(dataset, offset);\n                if (new_dataset_id) {\n                    self._loadDataset(new_dataset_id, function(\n                        new_dataset,\n                        config\n                    ) {\n                        current_dataset = new_dataset;\n                        frame.model.set(config);\n                    });\n                } else {\n                    frame.model.trigger(\"change\");\n                }\n            };\n            this._loadDataset(dataset_id, function(dataset, config) {\n                current_dataset = dataset;\n                self.add(\n                    _.extend(\n                        {\n                            menu: [\n                                {\n                                    icon: \"fa fa-chevron-circle-left\",\n                                    tooltip: \"Previous in History\",\n                                    onclick: function(frame) {\n                                        _loadDatasetOffset(\n                                            current_dataset,\n                                            -1,\n                                            frame\n                                        );\n                                    },\n                                    disabled: function() {\n                                        return !_findDataset(\n                                            current_dataset,\n                                            -1\n                                        );\n                                    }\n                                },\n                                {\n                                    icon: \"fa fa-chevron-circle-right\",\n                                    tooltip: \"Next in History\",\n                                    onclick: function(frame) {\n                                        _loadDatasetOffset(\n                                            current_dataset,\n                                            1,\n                                            frame\n                                        );\n                                    },\n                                    disabled: function() {\n                                        return !_findDataset(\n                                            current_dataset,\n                                            1\n                                        );\n                                    }\n                                }\n                            ]\n                        },\n                        config\n                    )\n                );\n            });\n        },\n\n        _loadDataset: function(dataset_id, callback) {\n            var self = this;\n            require([\"mvc/dataset/data\"], function(DATA) {\n                var dataset = new DATA.Dataset({ id: dataset_id });\n                $.when(dataset.fetch()).then(function() {\n                    var is_tabular = _.find([\"tabular\", \"interval\"], function(\n                        data_type\n                    ) {\n                        return (\n                            dataset.get(\"data_type\").indexOf(data_type) !== -1\n                        );\n                    });\n                    var title = dataset.get(\"name\");\n                    var history_details =\n                        self.history_cache[dataset.get(\"history_id\")];\n                    if (history_details) {\n                        title = history_details.name + \": \" + title;\n                    }\n                    callback(\n                        dataset,\n                        is_tabular\n                            ? {\n                                  title: title,\n                                  url: null,\n                                  content: DATA.createTabularDatasetChunkedView(\n                                      {\n                                          model: new DATA.TabularDataset(\n                                              dataset.toJSON()\n                                          ),\n                                          embedded: true,\n                                          height: \"100%\"\n                                      }\n                                  ).$el\n                              }\n                            : {\n                                  title: title,\n                                  url:\n                                      Galaxy.root +\n                                      \"datasets/\" +\n                                      dataset_id +\n                                      \"/display/?preview=True\",\n                                  content: null\n                              }\n                    );\n                });\n            });\n        },\n\n        /** Add a trackster visualization to the frames. */\n        addTrackster: function(viz_id) {\n            var self = this;\n            require([\"viz/visualization\", \"viz/trackster\"], function(\n                visualization,\n                trackster\n            ) {\n                var viz = new visualization.Visualization({ id: viz_id });\n                $.when(viz.fetch()).then(function() {\n                    var ui = new trackster.TracksterUI(Galaxy.root);\n\n                    // Construct frame config based on dataset's type.\n                    var frame_config = {\n                        title: viz.get(\"name\"),\n                        type: \"other\",\n                        content: function(parent_elt) {\n                            // Create view config.\n                            var view_config = {\n                                    container: parent_elt,\n                                    name: viz.get(\"title\"),\n                                    id: viz.id,\n                                    // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                                    dbkey: viz.get(\"dbkey\"),\n                                    stand_alone: false\n                                },\n                                latest_revision = viz.get(\"latest_revision\"),\n                                drawables =\n                                    latest_revision.config.view.drawables;\n\n                            // Set up datasets in drawables.\n                            _.each(drawables, function(d) {\n                                d.dataset = {\n                                    hda_ldda: d.hda_ldda,\n                                    id: d.dataset_id\n                                };\n                            });\n                            view = ui.create_visualization(\n                                view_config,\n                                latest_revision.config.viewport,\n                                latest_revision.config.view.drawables,\n                                latest_revision.config.bookmarks,\n                                false\n                            );\n                        }\n                    };\n                    self.add(frame_config);\n                });\n            });\n        },\n\n        /** Add and display a new frame/window based on options. */\n        add: function(options) {\n            if (options.target == \"_blank\") {\n                window.open(options.url);\n            } else if (\n                options.target == \"_top\" ||\n                options.target == \"_parent\" ||\n                options.target == \"_self\"\n            ) {\n                window.location = options.url;\n            } else if (!this.active || options.noscratchbook) {\n                var $galaxy_main = $(window.parent.document).find(\n                    \"#galaxy_main\"\n                );\n                if (\n                    options.target == \"galaxy_main\" ||\n                    options.target == \"center\"\n                ) {\n                    if ($galaxy_main.length === 0) {\n                        window.location =\n                            options.url +\n                            (options.url.indexOf(\"?\") == -1 ? \"?\" : \"&\") +\n                            \"use_panels=True\";\n                    } else {\n                        $galaxy_main.attr(\"src\", options.url);\n                    }\n                } else window.location = options.url;\n            } else {\n                this.frames.add(options);\n            }\n        }\n    });\n});\n"]}