{"version":3,"sources":["layout/scratchbook.js"],"names":["Backbone","View","extend","initialize","options","self","this","frames","_uiFrames2","default","visible","setElement","$el","buttonActive","collection","add","id","icon","tooltip","_localization2","onclick","active","set","toggle","show_note","note_cls","hide","onbeforeunload","length","show","buttonLoad","note","addDataset","currHistoryPanel","history_id","Galaxy","historyId","history_cache","model","get","each","dataset_ids","push","_findDataset","current_dataset","offset","name","history_details","pos","dataset_list","indexOf","dataset","_loadDatasetOffset","new_dataset_id","_loadDataset","new_dataset","config","frame","menu","disabled","is_tabular","title","callback","then","url","_","find","content","toJSON","TabularDataset","height","_data2","createTabularDatasetChunkedView","embedded","frame_config","root","dataset_id","addTrackster","viz_id","dbkey","stand_alone","$","when","viz","fetch","ui","_trackster2","TracksterUI","d","container","parent_elt","view","latest_revision","drawables","window","location","$galaxy_main","viewport","attr","bookmarks","target","open","noscratchbook","parent","document"],"mappings":"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","file":"../../scripts/layout/scratchbook.js","sourcesContent":["/** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\nimport Frames from \"mvc/ui/ui-frames\";\nimport DATA from \"mvc/dataset/data\";\nimport visualization from \"viz/visualization\";\nimport trackster from \"viz/trackster\";\nimport _l from \"utils/localization\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        options = options || {};\n        this.frames = new Frames.View({ visible: false });\n        this.setElement(this.frames.$el);\n        this.buttonActive = options.collection.add({\n            id: \"enable-scratchbook\",\n            icon: \"fa-th\",\n            tooltip: _l(\"Enable/Disable Scratchbook\"),\n            onclick: function() {\n                self.active = !self.active;\n                self.buttonActive.set({\n                    toggle: self.active,\n                    show_note: self.active,\n                    note_cls: self.active && \"fa fa-check\"\n                });\n                !self.active && self.frames.hide();\n            },\n            onbeforeunload: function() {\n                if (self.frames.length() > 0) {\n                    return `You opened ${self.frames.length()} frame(s) which will be lost.`;\n                }\n            }\n        });\n        this.buttonLoad = options.collection.add({\n            id: \"show-scratchbook\",\n            icon: \"fa-eye\",\n            tooltip: _l(\"Show/Hide Scratchbook\"),\n            show_note: true,\n            visible: false,\n            onclick: function(e) {\n                self.frames.visible ? self.frames.hide() : self.frames.show();\n            }\n        });\n        this.frames\n            .on(\"add remove\", function() {\n                this.visible && this.length() == 0 && this.hide();\n                self.buttonLoad.set({\n                    note: this.length(),\n                    visible: this.length() > 0\n                });\n            })\n            .on(\"show hide \", function() {\n                self.buttonLoad.set({\n                    toggle: this.visible,\n                    icon: (this.visible && \"fa-eye\") || \"fa-eye-slash\"\n                });\n            });\n        this.history_cache = {};\n    },\n\n    /** Add a dataset to the frames */\n    addDataset: function(dataset_id) {\n        var self = this;\n        var current_dataset = null;\n        if (Galaxy && Galaxy.currHistoryPanel) {\n            var history_id = Galaxy.currHistoryPanel.collection.historyId;\n            this.history_cache[history_id] = {\n                name: Galaxy.currHistoryPanel.model.get(\"name\"),\n                dataset_ids: []\n            };\n            Galaxy.currHistoryPanel.collection.each(model => {\n                !model.get(\"deleted\") &&\n                    model.get(\"visible\") &&\n                    self.history_cache[history_id].dataset_ids.push(\n                        model.get(\"id\")\n                    );\n            });\n        }\n        var _findDataset = (dataset, offset) => {\n            if (dataset) {\n                var history_details =\n                    self.history_cache[dataset.get(\"history_id\")];\n                if (history_details && history_details.dataset_ids) {\n                    var dataset_list = history_details.dataset_ids;\n                    var pos = dataset_list.indexOf(dataset.get(\"id\"));\n                    if (\n                        pos !== -1 &&\n                        pos + offset >= 0 &&\n                        pos + offset < dataset_list.length\n                    ) {\n                        return dataset_list[pos + offset];\n                    }\n                }\n            }\n        };\n        var _loadDatasetOffset = (dataset, offset, frame) => {\n            var new_dataset_id = _findDataset(dataset, offset);\n            if (new_dataset_id) {\n                self._loadDataset(new_dataset_id, (new_dataset, config) => {\n                    current_dataset = new_dataset;\n                    frame.model.set(config);\n                });\n            } else {\n                frame.model.trigger(\"change\");\n            }\n        };\n        this._loadDataset(dataset_id, (dataset, config) => {\n            current_dataset = dataset;\n            self.add(\n                _.extend(\n                    {\n                        menu: [\n                            {\n                                icon: \"fa fa-chevron-circle-left\",\n                                tooltip: \"Previous in History\",\n                                onclick: function(frame) {\n                                    _loadDatasetOffset(\n                                        current_dataset,\n                                        -1,\n                                        frame\n                                    );\n                                },\n                                disabled: function() {\n                                    return !_findDataset(current_dataset, -1);\n                                }\n                            },\n                            {\n                                icon: \"fa fa-chevron-circle-right\",\n                                tooltip: \"Next in History\",\n                                onclick: function(frame) {\n                                    _loadDatasetOffset(\n                                        current_dataset,\n                                        1,\n                                        frame\n                                    );\n                                },\n                                disabled: function() {\n                                    return !_findDataset(current_dataset, 1);\n                                }\n                            }\n                        ]\n                    },\n                    config\n                )\n            );\n        });\n    },\n\n    _loadDataset: function(dataset_id, callback) {\n        var self = this;\n        var dataset = new DATA.Dataset({ id: dataset_id });\n        $.when(dataset.fetch()).then(() => {\n            var is_tabular = _.find(\n                [\"tabular\", \"interval\"],\n                data_type => dataset.get(\"data_type\").indexOf(data_type) !== -1\n            );\n            var title = dataset.get(\"name\");\n            var history_details = self.history_cache[dataset.get(\"history_id\")];\n            if (history_details) {\n                title = `${history_details.name}: ${title}`;\n            }\n            callback(\n                dataset,\n                is_tabular\n                    ? {\n                          title: title,\n                          url: null,\n                          content: DATA.createTabularDatasetChunkedView({\n                              model: new DATA.TabularDataset(dataset.toJSON()),\n                              embedded: true,\n                              height: \"100%\"\n                          }).$el\n                      }\n                    : {\n                          title: title,\n                          url: `${Galaxy.root}datasets/${dataset_id}/display/?preview=True`,\n                          content: null\n                      }\n            );\n        });\n    },\n\n    /** Add a trackster visualization to the frames. */\n    addTrackster: function(viz_id) {\n        var self = this;\n        var viz = new visualization.Visualization({ id: viz_id });\n        $.when(viz.fetch()).then(() => {\n            var ui = new trackster.TracksterUI(Galaxy.root);\n\n            // Construct frame config based on dataset's type.\n            var frame_config = {\n                title: viz.get(\"name\"),\n                type: \"other\",\n                content: function(parent_elt) {\n                    // Create view config.\n                    var view_config = {\n                        container: parent_elt,\n                        name: viz.get(\"title\"),\n                        id: viz.id,\n                        // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                        dbkey: viz.get(\"dbkey\"),\n                        stand_alone: false\n                    };\n\n                    var latest_revision = viz.get(\"latest_revision\");\n                    var drawables = latest_revision.config.view.drawables;\n\n                    // Set up datasets in drawables.\n                    _.each(drawables, d => {\n                        d.dataset = {\n                            hda_ldda: d.hda_ldda,\n                            id: d.dataset_id\n                        };\n                    });\n                    view = ui.create_visualization(\n                        view_config,\n                        latest_revision.config.viewport,\n                        latest_revision.config.view.drawables,\n                        latest_revision.config.bookmarks,\n                        false\n                    );\n                }\n            };\n            self.add(frame_config);\n        });\n    },\n\n    /** Add and display a new frame/window based on options. */\n    add: function(options) {\n        if (options.target == \"_blank\") {\n            window.open(options.url);\n        } else if (\n            options.target == \"_top\" ||\n            options.target == \"_parent\" ||\n            options.target == \"_self\"\n        ) {\n            window.location = options.url;\n        } else if (!this.active || options.noscratchbook) {\n            var $galaxy_main = $(window.parent.document).find(\"#galaxy_main\");\n            if (options.target == \"galaxy_main\" || options.target == \"center\") {\n                if ($galaxy_main.length === 0) {\n                    window.location = `${options.url +\n                        (options.url.indexOf(\"?\") == -1\n                            ? \"?\"\n                            : \"&\")}use_panels=True`;\n                } else {\n                    $galaxy_main.attr(\"src\", options.url);\n                }\n            } else window.location = options.url;\n        } else {\n            this.frames.add(options);\n        }\n    }\n});\n"]}