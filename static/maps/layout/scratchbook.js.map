{"version":3,"sources":["layout/scratchbook.js"],"names":["define","initialize","options","trackster","Backbone","frames","extend","setElement","self","buttonActive","id","icon","Frames","View","visible","tooltip","this","$el","onclick","collection","add","toggle","show_note","note_cls","active","set","onbeforeunload","length","buttonLoad","note","hide","show","on","history_cache","current_dataset","Galaxy","currHistoryPanel","history_id","addDataset","dataset_id","_findDataset","history_details","dataset_list","name","pos","offset","get","dataset_ids","each","model","_loadDatasetOffset","dataset","new_dataset_id","frame","config","_loadDataset","indexOf","disabled","new_dataset","trigger","is_tabular","createTabularDatasetChunkedView","TabularDataset","viz_id","TracksterUI","stand_alone","callback","latest_revision","viz","$","when","fetch","drawables","_","find","data_type","d","hda_ldda","title","view","frame_config","DATA","noscratchbook","window","toJSON","location","$galaxy_main","root","content","addTrackster","visualization","Visualization","then","ui","type","parent_elt","view_config","container","dbkey","create_visualization","viewport","bookmarks","target","open","url","parent","document","attr"],"mappings":"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","file":"../../scripts/layout/scratchbook.js","sourcesContent":["/** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\ndefine(\n    [\n        \"mvc/ui/ui-frames\",\n        \"mvc/dataset/data\",\n        \"viz/visualization\",\n        \"viz/trackster\"\n    ],\n    function(Frames, DATA, visualization, trackster) {\n        return Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                options = options || {};\n                this.frames = new Frames.View({ visible: false });\n                this.setElement(this.frames.$el);\n                this.buttonActive = options.collection.add({\n                    id: \"enable-scratchbook\",\n                    icon: \"fa-th\",\n                    tooltip: _l(\"Enable/Disable Scratchbook\"),\n                    onclick: function() {\n                        self.active = !self.active;\n                        self.buttonActive.set({\n                            toggle: self.active,\n                            show_note: self.active,\n                            note_cls: self.active && \"fa fa-check\"\n                        });\n                        !self.active && self.frames.hide();\n                    },\n                    onbeforeunload: function() {\n                        if (self.frames.length() > 0) {\n                            return (\n                                \"You opened \" +\n                                self.frames.length() +\n                                \" frame(s) which will be lost.\"\n                            );\n                        }\n                    }\n                });\n                this.buttonLoad = options.collection.add({\n                    id: \"show-scratchbook\",\n                    icon: \"fa-eye\",\n                    tooltip: _l(\"Show/Hide Scratchbook\"),\n                    show_note: true,\n                    visible: false,\n                    onclick: function(e) {\n                        self.frames.visible\n                            ? self.frames.hide()\n                            : self.frames.show();\n                    }\n                });\n                this.frames\n                    .on(\"add remove\", function() {\n                        this.visible && this.length() == 0 && this.hide();\n                        self.buttonLoad.set({\n                            note: this.length(),\n                            visible: this.length() > 0\n                        });\n                    })\n                    .on(\"show hide \", function() {\n                        self.buttonLoad.set({\n                            toggle: this.visible,\n                            icon: (this.visible && \"fa-eye\") || \"fa-eye-slash\"\n                        });\n                    });\n                this.history_cache = {};\n            },\n\n            /** Add a dataset to the frames */\n            addDataset: function(dataset_id) {\n                var self = this;\n                var current_dataset = null;\n                if (Galaxy && Galaxy.currHistoryPanel) {\n                    var history_id =\n                        Galaxy.currHistoryPanel.collection.historyId;\n                    this.history_cache[history_id] = {\n                        name: Galaxy.currHistoryPanel.model.get(\"name\"),\n                        dataset_ids: []\n                    };\n                    Galaxy.currHistoryPanel.collection.each(function(model) {\n                        !model.get(\"deleted\") &&\n                            model.get(\"visible\") &&\n                            self.history_cache[history_id].dataset_ids.push(\n                                model.get(\"id\")\n                            );\n                    });\n                }\n                var _findDataset = function(dataset, offset) {\n                    if (dataset) {\n                        var history_details =\n                            self.history_cache[dataset.get(\"history_id\")];\n                        if (history_details && history_details.dataset_ids) {\n                            var dataset_list = history_details.dataset_ids;\n                            var pos = dataset_list.indexOf(dataset.get(\"id\"));\n                            if (\n                                pos !== -1 &&\n                                pos + offset >= 0 &&\n                                pos + offset < dataset_list.length\n                            ) {\n                                return dataset_list[pos + offset];\n                            }\n                        }\n                    }\n                };\n                var _loadDatasetOffset = function(dataset, offset, frame) {\n                    var new_dataset_id = _findDataset(dataset, offset);\n                    if (new_dataset_id) {\n                        self._loadDataset(new_dataset_id, function(\n                            new_dataset,\n                            config\n                        ) {\n                            current_dataset = new_dataset;\n                            frame.model.set(config);\n                        });\n                    } else {\n                        frame.model.trigger(\"change\");\n                    }\n                };\n                this._loadDataset(dataset_id, function(dataset, config) {\n                    current_dataset = dataset;\n                    self.add(\n                        _.extend(\n                            {\n                                menu: [\n                                    {\n                                        icon: \"fa fa-chevron-circle-left\",\n                                        tooltip: \"Previous in History\",\n                                        onclick: function(frame) {\n                                            _loadDatasetOffset(\n                                                current_dataset,\n                                                -1,\n                                                frame\n                                            );\n                                        },\n                                        disabled: function() {\n                                            return !_findDataset(\n                                                current_dataset,\n                                                -1\n                                            );\n                                        }\n                                    },\n                                    {\n                                        icon: \"fa fa-chevron-circle-right\",\n                                        tooltip: \"Next in History\",\n                                        onclick: function(frame) {\n                                            _loadDatasetOffset(\n                                                current_dataset,\n                                                1,\n                                                frame\n                                            );\n                                        },\n                                        disabled: function() {\n                                            return !_findDataset(\n                                                current_dataset,\n                                                1\n                                            );\n                                        }\n                                    }\n                                ]\n                            },\n                            config\n                        )\n                    );\n                });\n            },\n\n            _loadDataset: function(dataset_id, callback) {\n                var self = this;\n                var dataset = new DATA.Dataset({ id: dataset_id });\n                $.when(dataset.fetch()).then(function() {\n                    var is_tabular = _.find([\"tabular\", \"interval\"], function(\n                        data_type\n                    ) {\n                        return (\n                            dataset.get(\"data_type\").indexOf(data_type) !== -1\n                        );\n                    });\n                    var title = dataset.get(\"name\");\n                    var history_details =\n                        self.history_cache[dataset.get(\"history_id\")];\n                    if (history_details) {\n                        title = history_details.name + \": \" + title;\n                    }\n                    callback(\n                        dataset,\n                        is_tabular\n                            ? {\n                                  title: title,\n                                  url: null,\n                                  content: DATA.createTabularDatasetChunkedView(\n                                      {\n                                          model: new DATA.TabularDataset(\n                                              dataset.toJSON()\n                                          ),\n                                          embedded: true,\n                                          height: \"100%\"\n                                      }\n                                  ).$el\n                              }\n                            : {\n                                  title: title,\n                                  url:\n                                      Galaxy.root +\n                                      \"datasets/\" +\n                                      dataset_id +\n                                      \"/display/?preview=True\",\n                                  content: null\n                              }\n                    );\n                });\n            },\n\n            /** Add a trackster visualization to the frames. */\n            addTrackster: function(viz_id) {\n                var self = this;\n                var viz = new visualization.Visualization({ id: viz_id });\n                $.when(viz.fetch()).then(function() {\n                    var ui = new trackster.TracksterUI(Galaxy.root);\n\n                    // Construct frame config based on dataset's type.\n                    var frame_config = {\n                        title: viz.get(\"name\"),\n                        type: \"other\",\n                        content: function(parent_elt) {\n                            // Create view config.\n                            var view_config = {\n                                    container: parent_elt,\n                                    name: viz.get(\"title\"),\n                                    id: viz.id,\n                                    // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                                    dbkey: viz.get(\"dbkey\"),\n                                    stand_alone: false\n                                },\n                                latest_revision = viz.get(\"latest_revision\"),\n                                drawables =\n                                    latest_revision.config.view.drawables;\n\n                            // Set up datasets in drawables.\n                            _.each(drawables, function(d) {\n                                d.dataset = {\n                                    hda_ldda: d.hda_ldda,\n                                    id: d.dataset_id\n                                };\n                            });\n                            view = ui.create_visualization(\n                                view_config,\n                                latest_revision.config.viewport,\n                                latest_revision.config.view.drawables,\n                                latest_revision.config.bookmarks,\n                                false\n                            );\n                        }\n                    };\n                    self.add(frame_config);\n                });\n            },\n\n            /** Add and display a new frame/window based on options. */\n            add: function(options) {\n                if (options.target == \"_blank\") {\n                    window.open(options.url);\n                } else if (\n                    options.target == \"_top\" ||\n                    options.target == \"_parent\" ||\n                    options.target == \"_self\"\n                ) {\n                    window.location = options.url;\n                } else if (!this.active || options.noscratchbook) {\n                    var $galaxy_main = $(window.parent.document).find(\n                        \"#galaxy_main\"\n                    );\n                    if (\n                        options.target == \"galaxy_main\" ||\n                        options.target == \"center\"\n                    ) {\n                        if ($galaxy_main.length === 0) {\n                            window.location =\n                                options.url +\n                                (options.url.indexOf(\"?\") == -1 ? \"?\" : \"&\") +\n                                \"use_panels=True\";\n                        } else {\n                            $galaxy_main.attr(\"src\", options.url);\n                        }\n                    } else window.location = options.url;\n                } else {\n                    this.frames.add(options);\n                }\n            }\n        });\n    }\n);\n"]}