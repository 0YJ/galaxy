{"version":3,"sources":["layout/scratchbook.js"],"names":["define","initialize","Frames","frames","visualization","View","visible","Backbone","setElement","buttonActive","options","id","this","icon","tooltip","_l","onclick","$el","self","active","add","toggle","show_note","note_cls","onbeforeunload","length","hide","buttonLoad","collection","note","e","history_cache","set","dataset_id","Galaxy","currHistoryPanel","history_id","name","addDataset","_findDataset","dataset","current_dataset","history_details","dataset_list","pos","offset","dataset_ids","each","model","get","_loadDatasetOffset","new_dataset_id","push","frame","_loadDataset","indexOf","config","trigger","callback","is_tabular","DATA","TabularDataset","viz_id","trackster","TracksterUI","container","drawables","latest_revision","$","when","fetch","then","_","find","hda_ldda","d","view","create_visualization","title","url","target","location","window","parent","document","toJSON","height","root","content","addTrackster","viz","Visualization","ui","frame_config","type","parent_elt","view_config","dbkey","stand_alone","viewport","bookmarks","open","noscratchbook","$galaxy_main","attr"],"mappings":"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","file":"../../scripts/layout/scratchbook.js","sourcesContent":["/** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\ndefine(\n    [\n        \"mvc/ui/ui-frames\",\n        \"mvc/dataset/data\",\n        \"viz/visualization\",\n        \"viz/trackster\",\n        \"utils/localization\"\n    ],\n    function(Frames, DATA, visualization, trackster, _l) {\n        return Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                options = options || {};\n                this.frames = new Frames.View({ visible: false });\n                this.setElement(this.frames.$el);\n                this.buttonActive = options.collection.add({\n                    id: \"enable-scratchbook\",\n                    icon: \"fa-th\",\n                    tooltip: _l(\"Enable/Disable Scratchbook\"),\n                    onclick: function() {\n                        self.active = !self.active;\n                        self.buttonActive.set({\n                            toggle: self.active,\n                            show_note: self.active,\n                            note_cls: self.active && \"fa fa-check\"\n                        });\n                        !self.active && self.frames.hide();\n                    },\n                    onbeforeunload: function() {\n                        if (self.frames.length() > 0) {\n                            return (\n                                \"You opened \" +\n                                self.frames.length() +\n                                \" frame(s) which will be lost.\"\n                            );\n                        }\n                    }\n                });\n                this.buttonLoad = options.collection.add({\n                    id: \"show-scratchbook\",\n                    icon: \"fa-eye\",\n                    tooltip: _l(\"Show/Hide Scratchbook\"),\n                    show_note: true,\n                    visible: false,\n                    onclick: function(e) {\n                        self.frames.visible\n                            ? self.frames.hide()\n                            : self.frames.show();\n                    }\n                });\n                this.frames\n                    .on(\"add remove\", function() {\n                        this.visible && this.length() == 0 && this.hide();\n                        self.buttonLoad.set({\n                            note: this.length(),\n                            visible: this.length() > 0\n                        });\n                    })\n                    .on(\"show hide \", function() {\n                        self.buttonLoad.set({\n                            toggle: this.visible,\n                            icon: (this.visible && \"fa-eye\") || \"fa-eye-slash\"\n                        });\n                    });\n                this.history_cache = {};\n            },\n\n            /** Add a dataset to the frames */\n            addDataset: function(dataset_id) {\n                var self = this;\n                var current_dataset = null;\n                if (Galaxy && Galaxy.currHistoryPanel) {\n                    var history_id =\n                        Galaxy.currHistoryPanel.collection.historyId;\n                    this.history_cache[history_id] = {\n                        name: Galaxy.currHistoryPanel.model.get(\"name\"),\n                        dataset_ids: []\n                    };\n                    Galaxy.currHistoryPanel.collection.each(function(model) {\n                        !model.get(\"deleted\") &&\n                            model.get(\"visible\") &&\n                            self.history_cache[history_id].dataset_ids.push(\n                                model.get(\"id\")\n                            );\n                    });\n                }\n                var _findDataset = function(dataset, offset) {\n                    if (dataset) {\n                        var history_details =\n                            self.history_cache[dataset.get(\"history_id\")];\n                        if (history_details && history_details.dataset_ids) {\n                            var dataset_list = history_details.dataset_ids;\n                            var pos = dataset_list.indexOf(dataset.get(\"id\"));\n                            if (\n                                pos !== -1 &&\n                                pos + offset >= 0 &&\n                                pos + offset < dataset_list.length\n                            ) {\n                                return dataset_list[pos + offset];\n                            }\n                        }\n                    }\n                };\n                var _loadDatasetOffset = function(dataset, offset, frame) {\n                    var new_dataset_id = _findDataset(dataset, offset);\n                    if (new_dataset_id) {\n                        self._loadDataset(new_dataset_id, function(\n                            new_dataset,\n                            config\n                        ) {\n                            current_dataset = new_dataset;\n                            frame.model.set(config);\n                        });\n                    } else {\n                        frame.model.trigger(\"change\");\n                    }\n                };\n                this._loadDataset(dataset_id, function(dataset, config) {\n                    current_dataset = dataset;\n                    self.add(\n                        _.extend(\n                            {\n                                menu: [\n                                    {\n                                        icon: \"fa fa-chevron-circle-left\",\n                                        tooltip: \"Previous in History\",\n                                        onclick: function(frame) {\n                                            _loadDatasetOffset(\n                                                current_dataset,\n                                                -1,\n                                                frame\n                                            );\n                                        },\n                                        disabled: function() {\n                                            return !_findDataset(\n                                                current_dataset,\n                                                -1\n                                            );\n                                        }\n                                    },\n                                    {\n                                        icon: \"fa fa-chevron-circle-right\",\n                                        tooltip: \"Next in History\",\n                                        onclick: function(frame) {\n                                            _loadDatasetOffset(\n                                                current_dataset,\n                                                1,\n                                                frame\n                                            );\n                                        },\n                                        disabled: function() {\n                                            return !_findDataset(\n                                                current_dataset,\n                                                1\n                                            );\n                                        }\n                                    }\n                                ]\n                            },\n                            config\n                        )\n                    );\n                });\n            },\n\n            _loadDataset: function(dataset_id, callback) {\n                var self = this;\n                var dataset = new DATA.Dataset({ id: dataset_id });\n                $.when(dataset.fetch()).then(function() {\n                    var is_tabular = _.find([\"tabular\", \"interval\"], function(\n                        data_type\n                    ) {\n                        return (\n                            dataset.get(\"data_type\").indexOf(data_type) !== -1\n                        );\n                    });\n                    var title = dataset.get(\"name\");\n                    var history_details =\n                        self.history_cache[dataset.get(\"history_id\")];\n                    if (history_details) {\n                        title = history_details.name + \": \" + title;\n                    }\n                    callback(\n                        dataset,\n                        is_tabular\n                            ? {\n                                  title: title,\n                                  url: null,\n                                  content: DATA.createTabularDatasetChunkedView(\n                                      {\n                                          model: new DATA.TabularDataset(\n                                              dataset.toJSON()\n                                          ),\n                                          embedded: true,\n                                          height: \"100%\"\n                                      }\n                                  ).$el\n                              }\n                            : {\n                                  title: title,\n                                  url:\n                                      Galaxy.root +\n                                      \"datasets/\" +\n                                      dataset_id +\n                                      \"/display/?preview=True\",\n                                  content: null\n                              }\n                    );\n                });\n            },\n\n            /** Add a trackster visualization to the frames. */\n            addTrackster: function(viz_id) {\n                var self = this;\n                var viz = new visualization.Visualization({ id: viz_id });\n                $.when(viz.fetch()).then(function() {\n                    var ui = new trackster.TracksterUI(Galaxy.root);\n\n                    // Construct frame config based on dataset's type.\n                    var frame_config = {\n                        title: viz.get(\"name\"),\n                        type: \"other\",\n                        content: function(parent_elt) {\n                            // Create view config.\n                            var view_config = {\n                                    container: parent_elt,\n                                    name: viz.get(\"title\"),\n                                    id: viz.id,\n                                    // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                                    dbkey: viz.get(\"dbkey\"),\n                                    stand_alone: false\n                                },\n                                latest_revision = viz.get(\"latest_revision\"),\n                                drawables =\n                                    latest_revision.config.view.drawables;\n\n                            // Set up datasets in drawables.\n                            _.each(drawables, function(d) {\n                                d.dataset = {\n                                    hda_ldda: d.hda_ldda,\n                                    id: d.dataset_id\n                                };\n                            });\n                            view = ui.create_visualization(\n                                view_config,\n                                latest_revision.config.viewport,\n                                latest_revision.config.view.drawables,\n                                latest_revision.config.bookmarks,\n                                false\n                            );\n                        }\n                    };\n                    self.add(frame_config);\n                });\n            },\n\n            /** Add and display a new frame/window based on options. */\n            add: function(options) {\n                if (options.target == \"_blank\") {\n                    window.open(options.url);\n                } else if (\n                    options.target == \"_top\" ||\n                    options.target == \"_parent\" ||\n                    options.target == \"_self\"\n                ) {\n                    window.location = options.url;\n                } else if (!this.active || options.noscratchbook) {\n                    var $galaxy_main = $(window.parent.document).find(\n                        \"#galaxy_main\"\n                    );\n                    if (\n                        options.target == \"galaxy_main\" ||\n                        options.target == \"center\"\n                    ) {\n                        if ($galaxy_main.length === 0) {\n                            window.location =\n                                options.url +\n                                (options.url.indexOf(\"?\") == -1 ? \"?\" : \"&\") +\n                                \"use_panels=True\";\n                        } else {\n                            $galaxy_main.attr(\"src\", options.url);\n                        }\n                    } else window.location = options.url;\n                } else {\n                    this.frames.add(options);\n                }\n            }\n        });\n    }\n);\n"]}