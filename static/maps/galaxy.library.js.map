{"version":3,"sources":["galaxy.library.js"],"names":["LibraryRouter","Backbone","Router","extend","initialize","this","routesHit","history","on","bind","trackPageview","routes","","page/:show_page","library/:library_id/permissions","folders/:folder_id/permissions","folders/:id","folders/:id/page/:show_page","folders/:folder_id/datasets/:dataset_id","folders/:folder_id/datasets/:dataset_id/permissions","folders/:folder_id/download/:format","folders/:folder_id/import/:source","back","window","navigate","trigger","replace","url","getFragment","test","ga","Galaxy","root","LibraryPrefs","_baseMvc2","default","SessionStorageModel","defaults","with_deleted","without_restricted","sort_order","library_page_size","folder_page_size","GalaxyLibrary","View","libraryToolbarView","libraryListView","library_router","config","ga_code","i","s","o","g","r","a","m","q","push","arguments","getElementsByTagName","libraryView","insertBefore","folderListView","datasetView","libraries","id","parentNode","$el","unbind","_libraryLibrarytoolbarView2","LibraryToolbarView","_libraryLibrarylistView2","LibraryListView","show_page","render","folderToolbarView","_libraryFoldertoolbarView2","FolderToolbarView","_libraryFolderlistView2","FolderListView","parseInt","folder_id","format","$","find","length","_toastr2","info","download","dataset_id","_libraryDatasetView2","LibraryDatasetView","show_version","ldda_id","source","show_permissions","_libraryLibraryView2","LibraryView","GalaxyApp","folderView","_libraryFolderView2","FolderView","showImportModal","start","pushState"],"mappings":"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","file":"../scripts/galaxy.library.js","sourcesContent":["// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// === MAIN GALAXY LIBRARY MODULE ====\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n\nimport mod_masthead from \"layout/masthead\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_baseMVC from \"mvc/base-mvc\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_folderlist_view from \"mvc/library/library-folderlist-view\";\nimport mod_librarylist_view from \"mvc/library/library-librarylist-view\";\nimport mod_librarytoolbar_view from \"mvc/library/library-librarytoolbar-view\";\nimport mod_foldertoolbar_view from \"mvc/library/library-foldertoolbar-view\";\nimport mod_library_dataset_view from \"mvc/library/library-dataset-view\";\nimport mod_library_library_view from \"mvc/library/library-library-view\";\nimport mod_library_folder_view from \"mvc/library/library-folder-view\";\n// ============================================================================\n/**\n * The Data Libraries router. Takes care about triggering routes\n * and sends users to proper pieces of the application.\n */\nvar LibraryRouter = Backbone.Router.extend({\n    initialize: function() {\n        this.routesHit = 0;\n        // keep count of number of routes handled by the application\n        Backbone.history.on(\n            \"route\",\n            function() {\n                this.routesHit++;\n            },\n            this\n        );\n\n        this.bind(\"route\", this.trackPageview);\n    },\n\n    routes: {\n        \"\": \"libraries\",\n        \"page/:show_page\": \"libraries_page\",\n        \"library/:library_id/permissions\": \"library_permissions\",\n        \"folders/:folder_id/permissions\": \"folder_permissions\",\n        \"folders/:id\": \"folder_content\",\n        \"folders/:id/page/:show_page\": \"folder_page\",\n        \"folders/:folder_id/datasets/:dataset_id\": \"dataset_detail\",\n        \"folders/:folder_id/datasets/:dataset_id/permissions\":\n            \"dataset_permissions\",\n        \"folders/:folder_id/datasets/:dataset_id/versions/:ldda_id\":\n            \"dataset_version\",\n        \"folders/:folder_id/download/:format\": \"download\",\n        \"folders/:folder_id/import/:source\": \"import_datasets\"\n    },\n\n    /**\n   * If more than one route has been hit the user did not land on current\n   * page directly so we can go back safely. Otherwise go to the home page.\n   * Use replaceState if available so the navigation doesn't create an\n   * extra history entry\n   */\n    back: function() {\n        if (this.routesHit > 1) {\n            window.history.back();\n        } else {\n            this.navigate(\"#\", { trigger: true, replace: true });\n        }\n    },\n\n    /**\n   * Track every route change as a page view in Google Analytics.\n   */\n    trackPageview: function() {\n        var url = Backbone.history.getFragment();\n        //prepend slash\n        if (!/^\\//.test(url) && url != \"\") {\n            url = \"/\" + url;\n        }\n        if (typeof ga !== \"undefined\") {\n            ga(\"send\", \"pageview\", Galaxy.root + \"library/list\" + url);\n        }\n    }\n});\n\n// ============================================================================\n/** session storage for library preferences */\nvar LibraryPrefs = mod_baseMVC.SessionStorageModel.extend({\n    defaults: {\n        with_deleted: false,\n        without_restricted: false,\n        sort_order: \"asc\",\n        sort_by: \"name\",\n        library_page_size: 20,\n        folder_page_size: 15\n    }\n});\n\n// ============================================================================\n/**\n * Main view of the Galaxy Data Libraries. Stores pointers to other subviews\n * and defines what router should do on the route triggers.\n */\nvar GalaxyLibrary = Backbone.View.extend({\n    libraryToolbarView: null,\n    libraryListView: null,\n    library_router: null,\n    libraryView: null,\n    folderToolbarView: null,\n    folderListView: null,\n    datasetView: null,\n\n    initialize: function() {\n        // This should go upstream in the js app once available\n        if (window.Galaxy.config.ga_code) {\n            ((i, s, o, g, r, a, m) => {\n                i[\"GoogleAnalyticsObject\"] = r;\n                (i[r] =\n                    i[r] ||\n                    function() {\n                        (i[r].q = i[r].q || []).push(arguments);\n                    }),\n                    (i[r].l = 1 * new Date());\n                (a = s.createElement(o)), (m = s.getElementsByTagName(o)[0]);\n                a.async = 1;\n                a.src = g;\n                m.parentNode.insertBefore(a, m);\n            })(\n                window,\n                document,\n                \"script\",\n                \"//www.google-analytics.com/analytics.js\",\n                \"ga\"\n            );\n            ga(\"create\", window.Galaxy.config.ga_code, \"auto\");\n            ga(\"send\", \"pageview\");\n        }\n\n        Galaxy.libraries = this;\n\n        this.preferences = new LibraryPrefs({ id: \"global-lib-prefs\" });\n\n        this.library_router = new LibraryRouter();\n\n        this.library_router.on(\"route:libraries\", () => {\n            if (Galaxy.libraries.libraryToolbarView) {\n                Galaxy.libraries.libraryToolbarView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n            Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView();\n        });\n\n        this.library_router.on(\"route:libraries_page\", show_page => {\n            if (Galaxy.libraries.libraryToolbarView === null) {\n                Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n                Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView(\n                    { show_page: show_page }\n                );\n            } else {\n                Galaxy.libraries.libraryListView.render({\n                    show_page: show_page\n                });\n            }\n        });\n\n        this.library_router.on(\"route:folder_content\", id => {\n            if (Galaxy.libraries.folderToolbarView) {\n                Galaxy.libraries.folderToolbarView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView(\n                { id: id }\n            );\n            Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView(\n                { id: id }\n            );\n        });\n\n        this.library_router.on(\"route:folder_page\", (id, show_page) => {\n            if (Galaxy.libraries.folderToolbarView === null) {\n                Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView(\n                    { id: id }\n                );\n                Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView(\n                    { id: id, show_page: show_page }\n                );\n            } else {\n                Galaxy.libraries.folderListView.render({\n                    id: id,\n                    show_page: parseInt(show_page)\n                });\n            }\n        });\n\n        this.library_router.on(\"route:download\", (folder_id, format) => {\n            if ($(\"#folder_list_body\").find(\":checked\").length === 0) {\n                mod_toastr.info(\n                    \"You must select at least one dataset to download\"\n                );\n                Galaxy.libraries.library_router.navigate(\n                    \"folders/\" + folder_id,\n                    { trigger: true, replace: true }\n                );\n            } else {\n                Galaxy.libraries.folderToolbarView.download(folder_id, format);\n                Galaxy.libraries.library_router.navigate(\n                    \"folders/\" + folder_id,\n                    { trigger: false, replace: true }\n                );\n            }\n        });\n\n        this.library_router.on(\n            \"route:dataset_detail\",\n            (folder_id, dataset_id) => {\n                if (Galaxy.libraries.datasetView) {\n                    Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                }\n                Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView(\n                    {\n                        id: dataset_id,\n                        show_version: false,\n                        show_permissions: false\n                    }\n                );\n            }\n        );\n\n        this.library_router.on(\n            \"route:dataset_version\",\n            (folder_id, dataset_id, ldda_id) => {\n                if (Galaxy.libraries.datasetView) {\n                    Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                }\n                Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView(\n                    { id: dataset_id, ldda_id: ldda_id, show_version: true }\n                );\n            }\n        );\n\n        this.library_router.on(\n            \"route:dataset_permissions\",\n            (folder_id, dataset_id) => {\n                if (Galaxy.libraries.datasetView) {\n                    Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                }\n                Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView(\n                    { id: dataset_id, show_permissions: true }\n                );\n            }\n        );\n\n        this.library_router.on(\"route:library_permissions\", library_id => {\n            if (Galaxy.libraries.libraryView) {\n                Galaxy.libraries.libraryView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.libraryView = new mod_library_library_view.LibraryView(\n                { id: library_id, show_permissions: true }\n            );\n        });\n\n        this.library_router.on(\"route:folder_permissions\", folder_id => {\n            if (Galaxy.libraries.folderView) {\n                Galaxy.libraries.folderView.$el.unbind(\"click\");\n            }\n            Galaxy.libraries.folderView = new mod_library_folder_view.FolderView(\n                { id: folder_id, show_permissions: true }\n            );\n        });\n\n        this.library_router.on(\"route:import_datasets\", (folder_id, source) => {\n            if (\n                Galaxy.libraries.folderToolbarView &&\n                Galaxy.libraries.folderListView\n            ) {\n                Galaxy.libraries.folderToolbarView.showImportModal({\n                    source: source\n                });\n            } else {\n                Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView(\n                    { id: folder_id }\n                );\n                Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView(\n                    { id: folder_id }\n                );\n                Galaxy.libraries.folderToolbarView.showImportModal({\n                    source: source\n                });\n            }\n        });\n\n        Backbone.history.start({ pushState: false });\n    }\n});\n\nexport default {\n    GalaxyApp: GalaxyLibrary\n};\n"]}