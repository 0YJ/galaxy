{"version":3,"sources":["galaxy.library.js"],"names":["define","initialize","Backbone","mod_masthead","mod_utils","mod_toastr","mod_baseMVC","routes","mod_folderlist_view","mod_librarylist_view","mod_librarytoolbar_view","mod_foldertoolbar_view","mod_library_dataset_view","mod_library_library_view","mod_library_folder_view","LibraryRouter","Router","extend","this","routesHit","history","on","bind","trackPageview","","library/:library_id/permissions","getFragment","folders/:folder_id/permissions","folders/:id","url","folders/:folder_id/datasets/:dataset_id","folders/:folder_id/datasets/:dataset_id/permissions","ga","folders/:folder_id/datasets/:dataset_id/versions/:ldda_id","folders/:folder_id/download/:format","folders/:folder_id/import/:source","library_page_size","folder_page_size","window","back","navigate","trigger","replace","libraryToolbarView","libraryListView","libraryView","test","folderToolbarView","Galaxy","root","LibraryPrefs","i","arguments","defaults","a","createElement","src","m","document","GalaxyApp","View","library_router","libraries","datasetView","r","show_page","q","push","l","Date","o","config","ga_code","preferences","id","info","$el","unbind","folder_id","LibraryListView","LibraryDatasetView","dataset_id","show_version","render","FolderToolbarView","folderListView","FolderListView","folderView","source","$","find","length","download","format","show_permissions","ldda_id","library_id","LibraryView","FolderView","showImportModal","start","pushState"],"mappings":"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","file":"../scripts/galaxy.library.js","sourcesContent":["// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// === MAIN GALAXY LIBRARY MODULE ====\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n\ndefine(\n    [\n        \"layout/masthead\",\n        \"utils/utils\",\n        \"libs/toastr\",\n        \"mvc/base-mvc\",\n        \"mvc/library/library-model\",\n        \"mvc/library/library-folderlist-view\",\n        \"mvc/library/library-librarylist-view\",\n        \"mvc/library/library-librarytoolbar-view\",\n        \"mvc/library/library-foldertoolbar-view\",\n        \"mvc/library/library-dataset-view\",\n        \"mvc/library/library-library-view\",\n        \"mvc/library/library-folder-view\"\n    ],\n    function(\n        mod_masthead,\n        mod_utils,\n        mod_toastr,\n        mod_baseMVC,\n        mod_library_model,\n        mod_folderlist_view,\n        mod_librarylist_view,\n        mod_librarytoolbar_view,\n        mod_foldertoolbar_view,\n        mod_library_dataset_view,\n        mod_library_library_view,\n        mod_library_folder_view\n    ) {\n        // ============================================================================\n        /**\n * The Data Libraries router. Takes care about triggering routes\n * and sends users to proper pieces of the application.\n */\n        var LibraryRouter = Backbone.Router.extend({\n            initialize: function() {\n                this.routesHit = 0;\n                // keep count of number of routes handled by the application\n                Backbone.history.on(\n                    \"route\",\n                    function() {\n                        this.routesHit++;\n                    },\n                    this\n                );\n\n                this.bind(\"route\", this.trackPageview);\n            },\n\n            routes: {\n                \"\": \"libraries\",\n                \"page/:show_page\": \"libraries_page\",\n                \"library/:library_id/permissions\": \"library_permissions\",\n                \"folders/:folder_id/permissions\": \"folder_permissions\",\n                \"folders/:id\": \"folder_content\",\n                \"folders/:id/page/:show_page\": \"folder_page\",\n                \"folders/:folder_id/datasets/:dataset_id\": \"dataset_detail\",\n                \"folders/:folder_id/datasets/:dataset_id/permissions\":\n                    \"dataset_permissions\",\n                \"folders/:folder_id/datasets/:dataset_id/versions/:ldda_id\":\n                    \"dataset_version\",\n                \"folders/:folder_id/download/:format\": \"download\",\n                \"folders/:folder_id/import/:source\": \"import_datasets\"\n            },\n\n            /**\n   * If more than one route has been hit the user did not land on current\n   * page directly so we can go back safely. Otherwise go to the home page.\n   * Use replaceState if available so the navigation doesn't create an\n   * extra history entry\n   */\n            back: function() {\n                if (this.routesHit > 1) {\n                    window.history.back();\n                } else {\n                    this.navigate(\"#\", { trigger: true, replace: true });\n                }\n            },\n\n            /**\n   * Track every route change as a page view in Google Analytics.\n   */\n            trackPageview: function() {\n                var url = Backbone.history.getFragment();\n                //prepend slash\n                if (!/^\\//.test(url) && url != \"\") {\n                    url = \"/\" + url;\n                }\n                if (typeof ga !== \"undefined\") {\n                    ga(\"send\", \"pageview\", Galaxy.root + \"library/list\" + url);\n                }\n            }\n        });\n\n        // ============================================================================\n        /** session storage for library preferences */\n        var LibraryPrefs = mod_baseMVC.SessionStorageModel.extend({\n            defaults: {\n                with_deleted: false,\n                without_restricted: false,\n                sort_order: \"asc\",\n                sort_by: \"name\",\n                library_page_size: 20,\n                folder_page_size: 15\n            }\n        });\n\n        // ============================================================================\n        /**\n * Main view of the Galaxy Data Libraries. Stores pointers to other subviews\n * and defines what router should do on the route triggers.\n */\n        var GalaxyLibrary = Backbone.View.extend({\n            libraryToolbarView: null,\n            libraryListView: null,\n            library_router: null,\n            libraryView: null,\n            folderToolbarView: null,\n            folderListView: null,\n            datasetView: null,\n\n            initialize: function() {\n                // This should go upstream in the js app once available\n                if (window.Galaxy.config.ga_code) {\n                    (function(i, s, o, g, r, a, m) {\n                        i[\"GoogleAnalyticsObject\"] = r;\n                        (i[r] =\n                            i[r] ||\n                            function() {\n                                (i[r].q = i[r].q || []).push(arguments);\n                            }),\n                            (i[r].l = 1 * new Date());\n                        (a = s.createElement(o)),\n                            (m = s.getElementsByTagName(o)[0]);\n                        a.async = 1;\n                        a.src = g;\n                        m.parentNode.insertBefore(a, m);\n                    })(\n                        window,\n                        document,\n                        \"script\",\n                        \"//www.google-analytics.com/analytics.js\",\n                        \"ga\"\n                    );\n                    ga(\"create\", window.Galaxy.config.ga_code, \"auto\");\n                    ga(\"send\", \"pageview\");\n                }\n\n                Galaxy.libraries = this;\n\n                this.preferences = new LibraryPrefs({ id: \"global-lib-prefs\" });\n\n                this.library_router = new LibraryRouter();\n\n                this.library_router.on(\"route:libraries\", function() {\n                    if (Galaxy.libraries.libraryToolbarView) {\n                        Galaxy.libraries.libraryToolbarView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n                    Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView();\n                });\n\n                this.library_router.on(\"route:libraries_page\", function(\n                    show_page\n                ) {\n                    if (Galaxy.libraries.libraryToolbarView === null) {\n                        Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n                        Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView(\n                            { show_page: show_page }\n                        );\n                    } else {\n                        Galaxy.libraries.libraryListView.render({\n                            show_page: show_page\n                        });\n                    }\n                });\n\n                this.library_router.on(\"route:folder_content\", function(id) {\n                    if (Galaxy.libraries.folderToolbarView) {\n                        Galaxy.libraries.folderToolbarView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView(\n                        { id: id }\n                    );\n                    Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView(\n                        { id: id }\n                    );\n                });\n\n                this.library_router.on(\"route:folder_page\", function(\n                    id,\n                    show_page\n                ) {\n                    if (Galaxy.libraries.folderToolbarView === null) {\n                        Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView(\n                            { id: id }\n                        );\n                        Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView(\n                            { id: id, show_page: show_page }\n                        );\n                    } else {\n                        Galaxy.libraries.folderListView.render({\n                            id: id,\n                            show_page: parseInt(show_page)\n                        });\n                    }\n                });\n\n                this.library_router.on(\"route:download\", function(\n                    folder_id,\n                    format\n                ) {\n                    if ($(\"#folder_list_body\").find(\":checked\").length === 0) {\n                        mod_toastr.info(\n                            \"You must select at least one dataset to download\"\n                        );\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + folder_id,\n                            { trigger: true, replace: true }\n                        );\n                    } else {\n                        Galaxy.libraries.folderToolbarView.download(\n                            folder_id,\n                            format\n                        );\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + folder_id,\n                            { trigger: false, replace: true }\n                        );\n                    }\n                });\n\n                this.library_router.on(\"route:dataset_detail\", function(\n                    folder_id,\n                    dataset_id\n                ) {\n                    if (Galaxy.libraries.datasetView) {\n                        Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView(\n                        {\n                            id: dataset_id,\n                            show_version: false,\n                            show_permissions: false\n                        }\n                    );\n                });\n\n                this.library_router.on(\"route:dataset_version\", function(\n                    folder_id,\n                    dataset_id,\n                    ldda_id\n                ) {\n                    if (Galaxy.libraries.datasetView) {\n                        Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView(\n                        { id: dataset_id, ldda_id: ldda_id, show_version: true }\n                    );\n                });\n\n                this.library_router.on(\"route:dataset_permissions\", function(\n                    folder_id,\n                    dataset_id\n                ) {\n                    if (Galaxy.libraries.datasetView) {\n                        Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView(\n                        { id: dataset_id, show_permissions: true }\n                    );\n                });\n\n                this.library_router.on(\"route:library_permissions\", function(\n                    library_id\n                ) {\n                    if (Galaxy.libraries.libraryView) {\n                        Galaxy.libraries.libraryView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.libraryView = new mod_library_library_view.LibraryView(\n                        { id: library_id, show_permissions: true }\n                    );\n                });\n\n                this.library_router.on(\"route:folder_permissions\", function(\n                    folder_id\n                ) {\n                    if (Galaxy.libraries.folderView) {\n                        Galaxy.libraries.folderView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.folderView = new mod_library_folder_view.FolderView(\n                        { id: folder_id, show_permissions: true }\n                    );\n                });\n\n                this.library_router.on(\"route:import_datasets\", function(\n                    folder_id,\n                    source\n                ) {\n                    if (\n                        Galaxy.libraries.folderToolbarView &&\n                        Galaxy.libraries.folderListView\n                    ) {\n                        Galaxy.libraries.folderToolbarView.showImportModal({\n                            source: source\n                        });\n                    } else {\n                        Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView(\n                            { id: folder_id }\n                        );\n                        Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView(\n                            { id: folder_id }\n                        );\n                        Galaxy.libraries.folderToolbarView.showImportModal({\n                            source: source\n                        });\n                    }\n                });\n\n                Backbone.history.start({ pushState: false });\n            }\n        });\n\n        return {\n            GalaxyApp: GalaxyLibrary\n        };\n    }\n);\n"]}