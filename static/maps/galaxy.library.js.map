{"version":3,"sources":["galaxy.library.js"],"names":["define","initialize","Backbone","mod_utils","mod_toastr","mod_baseMVC","mod_library_model","mod_folderlist_view","mod_librarylist_view","routes","mod_foldertoolbar_view","mod_library_dataset_view","mod_library_library_view","mod_library_folder_view","LibraryRouter","Router","extend","this","routesHit","history","on","bind","trackPageview","window","","page/:show_page","library/:library_id/permissions","folders/:folder_id/permissions","folders/:id","folders/:id/page/:show_page","folders/:folder_id/datasets/:dataset_id","folders/:folder_id/datasets/:dataset_id/permissions","folders/:folder_id/download/:format","folders/:folder_id/import/:source","back","defaults","trigger","replace","url","getFragment","test","ga","Galaxy","root","folderToolbarView","SessionStorageModel","folderListView","datasetView","without_restricted","sort_by","library_page_size","folder_page_size","GalaxyApp","View","libraryToolbarView","libraryListView","preferences","library_router","libraryView","config","ga_code","i","s","o","g","r","a","m","arguments","l","Date","show_page","getElementsByTagName","src","parentNode","insertBefore","libraries","mod_librarytoolbar_view","LibraryPrefs","id","$el","unbind","LibraryListView","render","LibraryToolbarView","folder_id","navigate","FolderToolbarView","FolderListView","LibraryDatasetView","dataset_id","$","find","length","info","format","library_id","show_permissions","ldda_id","folderView","show_version","source","showImportModal","LibraryView","GalaxyLibrary","FolderView","start","pushState"],"mappings":"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","file":"../scripts/galaxy.library.js","sourcesContent":["// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// === MAIN GALAXY LIBRARY MODULE ====\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n\ndefine([\n  \"layout/masthead\",\n  \"utils/utils\",\n  \"libs/toastr\",\n  \"mvc/base-mvc\",\n  \"mvc/library/library-model\",\n  \"mvc/library/library-folderlist-view\",\n  \"mvc/library/library-librarylist-view\",\n  \"mvc/library/library-librarytoolbar-view\",\n  \"mvc/library/library-foldertoolbar-view\",\n  \"mvc/library/library-dataset-view\",\n  \"mvc/library/library-library-view\",\n  \"mvc/library/library-folder-view\"\n  ],\n  function(mod_masthead,\n    mod_utils,\n    mod_toastr,\n    mod_baseMVC,\n    mod_library_model,\n    mod_folderlist_view,\n    mod_librarylist_view,\n    mod_librarytoolbar_view,\n    mod_foldertoolbar_view,\n    mod_library_dataset_view,\n    mod_library_library_view,\n    mod_library_folder_view\n   ) {\n\n// ============================================================================\n/**\n * The Data Libraries router. Takes care about triggering routes\n * and sends users to proper pieces of the application.\n */\nvar LibraryRouter = Backbone.Router.extend({\n\n  initialize: function() {\n    this.routesHit = 0;\n    // keep count of number of routes handled by the application\n    Backbone.history.on( 'route', function() { this.routesHit++; }, this );\n\n    this.bind( 'route', this.trackPageview );\n  },\n\n  routes: {\n    \"\"                                                              : \"libraries\",\n    \"page/:show_page\"                                               : \"libraries_page\",\n    \"library/:library_id/permissions\"                               : \"library_permissions\",\n    \"folders/:folder_id/permissions\"                                : \"folder_permissions\",\n    \"folders/:id\"                                                   : \"folder_content\",\n    \"folders/:id/page/:show_page\"                                   : \"folder_page\",\n    \"folders/:folder_id/datasets/:dataset_id\"                       : \"dataset_detail\",\n    \"folders/:folder_id/datasets/:dataset_id/permissions\"           : \"dataset_permissions\",\n    \"folders/:folder_id/datasets/:dataset_id/versions/:ldda_id\"     : \"dataset_version\",\n    \"folders/:folder_id/download/:format\"                           : \"download\",\n    \"folders/:folder_id/import/:source\"                             : \"import_datasets\"\n  },\n\n  /**\n   * If more than one route has been hit the user did not land on current\n   * page directly so we can go back safely. Otherwise go to the home page.\n   * Use replaceState if available so the navigation doesn't create an\n   * extra history entry\n   */\n  back: function() {\n    if( this.routesHit > 1 ) {\n      window.history.back();\n    } else {\n      this.navigate( '#', { trigger:true, replace:true } );\n    }\n  },\n\n  /**\n   * Track every route change as a page view in Google Analytics.\n   */\n  trackPageview: function () {\n    var url = Backbone.history.getFragment();\n    //prepend slash\n    if (!/^\\//.test(url) && url != \"\") {\n      url = \"/\" + url;\n    }\n    if ( typeof ga !== 'undefined' ) {\n      ga( 'send', 'pageview', Galaxy.root + 'library/list' + url );\n    }\n  }\n});\n\n// ============================================================================\n/** session storage for library preferences */\nvar LibraryPrefs = mod_baseMVC.SessionStorageModel.extend({\n    defaults : {\n        with_deleted      : false,\n        without_restricted: false,\n        sort_order        : 'asc',\n        sort_by           : 'name',\n        library_page_size : 20,\n        folder_page_size  : 15\n    }\n});\n\n// ============================================================================\n/**\n * Main view of the Galaxy Data Libraries. Stores pointers to other subviews\n * and defines what router should do on the route triggers.\n */\nvar GalaxyLibrary = Backbone.View.extend({\n\n    libraryToolbarView: null,\n    libraryListView: null,\n    library_router: null,\n    libraryView: null,\n    folderToolbarView: null,\n    folderListView: null,\n    datasetView: null,\n\n    initialize : function(){\n\n      // This should go upstream in the js app once available\n      if ( window.Galaxy.config.ga_code ){\n      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n            ga('create', window.Galaxy.config.ga_code, 'auto');\n            ga('send', 'pageview');\n      }\n\n        Galaxy.libraries = this;\n\n        this.preferences = new LibraryPrefs( { id: 'global-lib-prefs' } );\n\n        this.library_router = new LibraryRouter();\n\n        this.library_router.on( 'route:libraries', function() {\n            if ( Galaxy.libraries.libraryToolbarView){\n                Galaxy.libraries.libraryToolbarView.$el.unbind('click');\n            }\n            Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n            Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView();\n        });\n\n        this.library_router.on('route:libraries_page', function( show_page ) {\n            if ( Galaxy.libraries.libraryToolbarView === null ){\n                Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n                Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView( { show_page: show_page } );\n            } else {\n                Galaxy.libraries.libraryListView.render( { show_page: show_page } );\n            }\n        });\n\n        this.library_router.on( 'route:folder_content', function( id ) {\n            if (Galaxy.libraries.folderToolbarView){\n                Galaxy.libraries.folderToolbarView.$el.unbind( 'click' );\n            }\n            Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView( { id: id } );\n            Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView( { id: id } );\n        });\n\n        this.library_router.on( 'route:folder_page', function( id, show_page ) {\n            if ( Galaxy.libraries.folderToolbarView === null ){\n                Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView( {id: id} );\n                Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView( { id: id, show_page: show_page } );\n            } else {\n                Galaxy.libraries.folderListView.render( { id: id, show_page: parseInt( show_page ) } );\n            }\n        });\n\n        this.library_router.on( 'route:download', function( folder_id, format ) {\n            if ( $( '#folder_list_body' ).find( ':checked' ).length === 0 ) {\n                mod_toastr.info( 'You must select at least one dataset to download' );\n                Galaxy.libraries.library_router.navigate( 'folders/' + folder_id, { trigger: true, replace: true } );\n            } else {\n                Galaxy.libraries.folderToolbarView.download( folder_id, format );\n                Galaxy.libraries.library_router.navigate( 'folders/' + folder_id, { trigger: false, replace: true } );\n            }\n        });\n\n        this.library_router.on( 'route:dataset_detail', function(folder_id, dataset_id){\n            if (Galaxy.libraries.datasetView){\n                Galaxy.libraries.datasetView.$el.unbind('click');\n            }\n            Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView({id: dataset_id, show_version: false, show_permissions: false});\n        });\n\n        this.library_router.on( 'route:dataset_version', function(folder_id, dataset_id, ldda_id){\n            if (Galaxy.libraries.datasetView){\n                Galaxy.libraries.datasetView.$el.unbind('click');\n            }\n            Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView({id: dataset_id, ldda_id: ldda_id, show_version: true});\n        });\n\n        this.library_router.on( 'route:dataset_permissions', function(folder_id, dataset_id){\n            if (Galaxy.libraries.datasetView){\n                Galaxy.libraries.datasetView.$el.unbind('click');\n            }\n            Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView({id: dataset_id, show_permissions: true});\n        });\n\n        this.library_router.on( 'route:library_permissions', function(library_id){\n            if (Galaxy.libraries.libraryView){\n                Galaxy.libraries.libraryView.$el.unbind('click');\n            }\n            Galaxy.libraries.libraryView = new mod_library_library_view.LibraryView({id: library_id, show_permissions: true});\n        });\n\n        this.library_router.on( 'route:folder_permissions', function(folder_id){\n            if (Galaxy.libraries.folderView){\n                Galaxy.libraries.folderView.$el.unbind('click');\n            }\n            Galaxy.libraries.folderView = new mod_library_folder_view.FolderView({id: folder_id, show_permissions: true});\n        });\n\n        this.library_router.on( 'route:import_datasets', function( folder_id, source ){\n            if ( Galaxy.libraries.folderToolbarView && Galaxy.libraries.folderListView ){\n                Galaxy.libraries.folderToolbarView.showImportModal( { source:source } );\n            } else {\n                Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView( { id: folder_id } );\n                Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView( { id: folder_id } );\n                Galaxy.libraries.folderToolbarView.showImportModal( { source: source } );\n            }\n        });\n\n        Backbone.history.start({pushState: false});\n    }\n});\n\nreturn {\n    GalaxyApp: GalaxyLibrary\n};\n\n});\n"]}